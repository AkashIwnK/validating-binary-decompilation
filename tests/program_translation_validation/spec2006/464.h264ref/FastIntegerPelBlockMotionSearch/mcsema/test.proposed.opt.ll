; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x6cb8f8_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x6cd480_type = type <{ [4 x i8] }>
%G_0x6d09a0_type = type <{ [8 x i8] }>
%G_0x6d1900_type = type <{ [4 x i8] }>
%G_0x6d1fa0_type = type <{ [4 x i8] }>
%G_0x6d1fa4_type = type <{ [4 x i8] }>
%G_0x6d32d0_type = type <{ [8 x i8] }>
%G_0x6f8f00_type = type <{ [8 x i8] }>
%G_0x70fd54_type = type <{ [4 x i8] }>
%G_0x70fd58_type = type <{ [4 x i8] }>
%G_0x710010_type = type <{ [4 x i8] }>
%G_0x710014_type = type <{ [4 x i8] }>
%G_0x711c50_type = type <{ [8 x i8] }>
%G_0x722ca8_type = type <{ [4 x i8] }>
%G_0x72369c_type = type <{ [4 x i8] }>
%G_0x9108f__rip__type = type <{ [8 x i8] }>
%G__0x49e480_type = type <{ [8 x i8] }>
%G__0x49e4c0_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x6cb8f8 = local_unnamed_addr global %G_0x6cb8f8_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x6cd480 = local_unnamed_addr global %G_0x6cd480_type zeroinitializer
@G_0x6d09a0 = local_unnamed_addr global %G_0x6d09a0_type zeroinitializer
@G_0x6d1900 = local_unnamed_addr global %G_0x6d1900_type zeroinitializer
@G_0x6d1fa0 = local_unnamed_addr global %G_0x6d1fa0_type zeroinitializer
@G_0x6d1fa4 = local_unnamed_addr global %G_0x6d1fa4_type zeroinitializer
@G_0x6d32d0 = local_unnamed_addr global %G_0x6d32d0_type zeroinitializer
@G_0x6f8f00 = local_unnamed_addr global %G_0x6f8f00_type zeroinitializer
@G_0x70fd54 = local_unnamed_addr global %G_0x70fd54_type zeroinitializer
@G_0x70fd58 = local_unnamed_addr global %G_0x70fd58_type zeroinitializer
@G_0x710010 = local_unnamed_addr global %G_0x710010_type zeroinitializer
@G_0x710014 = local_unnamed_addr global %G_0x710014_type zeroinitializer
@G_0x711c50 = local_unnamed_addr global %G_0x711c50_type zeroinitializer
@G_0x722ca8 = local_unnamed_addr global %G_0x722ca8_type zeroinitializer
@G_0x72369c = local_unnamed_addr global %G_0x72369c_type zeroinitializer
@G_0x9108f__rip_ = global %G_0x9108f__rip__type zeroinitializer
@G__0x49e480 = global %G__0x49e480_type zeroinitializer
@G__0x49e4c0 = global %G__0x49e4c0_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

declare extern_weak x86_64_sysvcc i64 @abs(i64)

declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @FastIntegerPelBlockMotionSearch(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15.i285 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %12 = load i64, i64* %R15.i285, align 8
  %13 = add i64 %10, 5
  store i64 %13, i64* %3, align 8
  %14 = add i64 %7, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14.i599 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %17 = load i64, i64* %R14.i599, align 8
  %18 = load i64, i64* %3, align 8
  %19 = add i64 %18, 2
  store i64 %19, i64* %3, align 8
  %20 = add i64 %7, -24
  %21 = inttoptr i64 %20 to i64*
  store i64 %17, i64* %21, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %RBX.i615 = getelementptr inbounds %union.anon, %union.anon* %22, i64 0, i32 0
  %23 = load i64, i64* %RBX.i615, align 8
  %24 = load i64, i64* %3, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %3, align 8
  %26 = add i64 %7, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load i64, i64* %3, align 8
  %29 = add i64 %7, -472
  store i64 %29, i64* %6, align 8
  %30 = icmp ult i64 %26, 440
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %31, i8* %32, align 1
  %33 = trunc i64 %29 to i32
  %34 = and i32 %33, 255
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34)
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %38, i8* %39, align 1
  %40 = xor i64 %26, 16
  %41 = xor i64 %40, %29
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i8
  %44 = and i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %44, i8* %45, align 1
  %46 = icmp eq i64 %29, 0
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %47, i8* %48, align 1
  %49 = lshr i64 %29, 63
  %50 = trunc i64 %49 to i8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %50, i8* %51, align 1
  %52 = lshr i64 %26, 63
  %53 = xor i64 %49, %52
  %54 = add nuw nsw i64 %53, %52
  %55 = icmp eq i64 %54, 2
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX.i716 = bitcast %union.anon* %58 to i16*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI.i = bitcast %union.anon* %59 to i16*
  %60 = load i16, i16* %SI.i, align 2
  store i16 %60, i16* %AX.i716, align 2
  %RSI.i739 = getelementptr inbounds %union.anon, %union.anon* %59, i64 0, i32 0
  %61 = load i64, i64* %RBP.i, align 8
  %62 = add i64 %61, 56
  %63 = add i64 %28, 13
  store i64 %63, i64* %3, align 8
  %64 = inttoptr i64 %62 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  store i64 %66, i64* %RSI.i739, align 8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D.i761 = bitcast %union.anon* %67 to i32*
  %68 = getelementptr inbounds %union.anon, %union.anon* %67, i64 0, i32 0
  %69 = add i64 %61, 48
  %70 = add i64 %28, 17
  store i64 %70, i64* %3, align 8
  %71 = inttoptr i64 %69 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %68, align 8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11.i = getelementptr inbounds %union.anon, %union.anon* %74, i64 0, i32 0
  %75 = add i64 %61, 40
  %76 = add i64 %28, 21
  store i64 %76, i64* %3, align 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %R11.i, align 8
  %79 = add i64 %61, 32
  %80 = add i64 %28, 25
  store i64 %80, i64* %3, align 8
  %81 = inttoptr i64 %79 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBX.i615, align 8
  %R14W.i = bitcast %union.anon* %16 to i16*
  %83 = add i64 %61, 24
  %84 = add i64 %28, 30
  store i64 %84, i64* %3, align 8
  %85 = inttoptr i64 %83 to i16*
  %86 = load i16, i16* %85, align 2
  store i16 %86, i16* %R14W.i, align 2
  %R15W.i = bitcast %union.anon* %11 to i16*
  %87 = add i64 %61, 16
  %88 = add i64 %28, 35
  store i64 %88, i64* %3, align 8
  %89 = inttoptr i64 %87 to i16*
  %90 = load i16, i16* %89, align 2
  store i16 %90, i16* %R15W.i, align 2
  %RDI.i1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %91 = add i64 %61, -32
  %92 = load i64, i64* %RDI.i1133, align 8
  %93 = add i64 %28, 39
  store i64 %93, i64* %3, align 8
  %94 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %94, align 8
  %95 = load i64, i64* %RBP.i, align 8
  %96 = add i64 %95, -34
  %97 = load i16, i16* %AX.i716, align 2
  %98 = load i64, i64* %3, align 8
  %99 = add i64 %98, 4
  store i64 %99, i64* %3, align 8
  %100 = inttoptr i64 %96 to i16*
  store i16 %97, i16* %100, align 2
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX.i1187 = bitcast %union.anon* %101 to i32*
  %102 = load i64, i64* %RBP.i, align 8
  %103 = add i64 %102, -40
  %104 = load i32, i32* %EDX.i1187, align 4
  %105 = load i64, i64* %3, align 8
  %106 = add i64 %105, 3
  store i64 %106, i64* %3, align 8
  %107 = inttoptr i64 %103 to i32*
  store i32 %104, i32* %107, align 4
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX.i1211 = bitcast %union.anon* %108 to i32*
  %109 = load i64, i64* %RBP.i, align 8
  %110 = add i64 %109, -44
  %111 = load i32, i32* %ECX.i1211, align 4
  %112 = load i64, i64* %3, align 8
  %113 = add i64 %112, 3
  store i64 %113, i64* %3, align 8
  %114 = inttoptr i64 %110 to i32*
  store i32 %111, i32* %114, align 4
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D.i1233 = bitcast %union.anon* %115 to i32*
  %116 = load i64, i64* %RBP.i, align 8
  %117 = add i64 %116, -48
  %118 = load i32, i32* %R8D.i1233, align 4
  %119 = load i64, i64* %3, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %3, align 8
  %121 = inttoptr i64 %117 to i32*
  store i32 %118, i32* %121, align 4
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D.i1260 = bitcast %union.anon* %122 to i32*
  %123 = load i64, i64* %RBP.i, align 8
  %124 = add i64 %123, -52
  %125 = load i32, i32* %R9D.i1260, align 4
  %126 = load i64, i64* %3, align 8
  %127 = add i64 %126, 4
  store i64 %127, i64* %3, align 8
  %128 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %128, align 4
  %129 = load i64, i64* %RBP.i, align 8
  %130 = add i64 %129, -54
  %131 = load i16, i16* %R15W.i, align 2
  %132 = load i64, i64* %3, align 8
  %133 = add i64 %132, 5
  store i64 %133, i64* %3, align 8
  %134 = inttoptr i64 %130 to i16*
  store i16 %131, i16* %134, align 2
  %135 = load i64, i64* %RBP.i, align 8
  %136 = add i64 %135, -56
  %137 = load i16, i16* %R14W.i, align 2
  %138 = load i64, i64* %3, align 8
  %139 = add i64 %138, 5
  store i64 %139, i64* %3, align 8
  %140 = inttoptr i64 %136 to i16*
  store i16 %137, i16* %140, align 2
  %141 = load i64, i64* %RBP.i, align 8
  %142 = add i64 %141, -64
  %143 = load i64, i64* %RBX.i615, align 8
  %144 = load i64, i64* %3, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %3, align 8
  %146 = inttoptr i64 %142 to i64*
  store i64 %143, i64* %146, align 8
  %147 = load i64, i64* %RBP.i, align 8
  %148 = add i64 %147, -72
  %149 = load i64, i64* %R11.i, align 8
  %150 = load i64, i64* %3, align 8
  %151 = add i64 %150, 4
  store i64 %151, i64* %3, align 8
  %152 = inttoptr i64 %148 to i64*
  store i64 %149, i64* %152, align 8
  %153 = load i64, i64* %RBP.i, align 8
  %154 = add i64 %153, -76
  %155 = load i32, i32* %R10D.i761, align 4
  %156 = load i64, i64* %3, align 8
  %157 = add i64 %156, 4
  store i64 %157, i64* %3, align 8
  %158 = inttoptr i64 %154 to i32*
  store i32 %155, i32* %158, align 4
  %ESI.i1656 = bitcast %union.anon* %59 to i32*
  %159 = load i64, i64* %RBP.i, align 8
  %160 = add i64 %159, -80
  %161 = load i32, i32* %ESI.i1656, align 4
  %162 = load i64, i64* %3, align 8
  %163 = add i64 %162, 3
  store i64 %163, i64* %3, align 8
  %164 = inttoptr i64 %160 to i32*
  store i32 %161, i32* %164, align 4
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %166 = load i64, i64* %RBP.i, align 8
  %167 = add i64 %166, -88
  %168 = load i64, i64* %3, align 8
  %169 = add i64 %168, 5
  store i64 %169, i64* %3, align 8
  %170 = bitcast [32 x %union.VectorReg]* %165 to double*
  %171 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %165, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %172 = load i64, i64* %171, align 1
  %173 = inttoptr i64 %167 to i64*
  store i64 %172, i64* %173, align 8
  %174 = load i64, i64* %3, align 8
  %175 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %175, i64* %RDI.i1133, align 8
  %176 = add i64 %175, 72400
  %177 = add i64 %174, 15
  store i64 %177, i64* %3, align 8
  %178 = inttoptr i64 %176 to i32*
  %179 = load i32, i32* %178, align 4
  store i8 0, i8* %32, align 1
  %180 = and i32 %179, 255
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180)
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  store i8 %184, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %185 = icmp eq i32 %179, 0
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %48, align 1
  %187 = lshr i32 %179, 31
  %188 = trunc i32 %187 to i8
  store i8 %188, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v497 = select i1 %185, i64 126, i64 21
  %189 = add i64 %174, %.v497
  store i64 %189, i64* %3, align 8
  %RAX.i3587.phi.trans.insert = getelementptr inbounds %union.anon, %union.anon* %58, i64 0, i32 0
  br i1 %185, label %entry.block_.L_4207de_crit_edge, label %block_420775

entry.block_.L_4207de_crit_edge:                  ; preds = %entry
  %.pre447 = getelementptr inbounds %union.anon, %union.anon* %108, i64 0, i32 0
  br label %block_.L_4207de

block_420775:                                     ; preds = %entry
  store i64 %175, i64* %RAX.i3587.phi.trans.insert, align 8
  %190 = add i64 %175, 14168
  %191 = add i64 %189, 15
  store i64 %191, i64* %3, align 8
  %192 = inttoptr i64 %190 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RAX.i3587.phi.trans.insert, align 8
  %RCX.i2235 = getelementptr inbounds %union.anon, %union.anon* %108, i64 0, i32 0
  store i64 %175, i64* %RCX.i2235, align 8
  %194 = add i64 %175, 12
  %195 = add i64 %189, 27
  store i64 %195, i64* %3, align 8
  %196 = inttoptr i64 %194 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = sext i32 %197 to i64
  %199 = mul nsw i64 %198, 632
  store i64 %199, i64* %RCX.i2235, align 8
  %200 = lshr i64 %199, 63
  %201 = add i64 %199, %193
  store i64 %201, i64* %RAX.i3587.phi.trans.insert, align 8
  %202 = icmp ult i64 %201, %193
  %203 = icmp ult i64 %201, %199
  %204 = or i1 %202, %203
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %32, align 1
  %206 = trunc i64 %201 to i32
  %207 = and i32 %206, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207)
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  store i8 %211, i8* %39, align 1
  %212 = xor i64 %199, %193
  %213 = xor i64 %212, %201
  %214 = lshr i64 %213, 4
  %215 = trunc i64 %214 to i8
  %216 = and i8 %215, 1
  store i8 %216, i8* %45, align 1
  %217 = icmp eq i64 %201, 0
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %48, align 1
  %219 = lshr i64 %201, 63
  %220 = trunc i64 %219 to i8
  store i8 %220, i8* %51, align 1
  %221 = lshr i64 %193, 63
  %222 = xor i64 %219, %221
  %223 = xor i64 %219, %200
  %224 = add nuw nsw i64 %222, %223
  %225 = icmp eq i64 %224, 2
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %57, align 1
  %227 = add i64 %201, 532
  %228 = add i64 %189, 44
  store i64 %228, i64* %3, align 8
  %229 = inttoptr i64 %227 to i32*
  %230 = load i32, i32* %229, align 4
  store i8 0, i8* %32, align 1
  %231 = and i32 %230, 255
  %232 = tail call i32 @llvm.ctpop.i32(i32 %231)
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  store i8 %235, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %236 = icmp eq i32 %230, 0
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %48, align 1
  %238 = lshr i32 %230, 31
  %239 = trunc i32 %238 to i8
  store i8 %239, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v498 = select i1 %236, i64 105, i64 50
  %240 = add i64 %189, %.v498
  store i64 %240, i64* %3, align 8
  br i1 %236, label %block_.L_4207de, label %block_4207a7

block_4207a7:                                     ; preds = %block_420775
  store i64 2, i64* %RAX.i3587.phi.trans.insert, align 8
  store i64 4, i64* %RCX.i2235, align 8
  %RDX.i2903 = getelementptr inbounds %union.anon, %union.anon* %101, i64 0, i32 0
  %241 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %241, i64* %RDX.i2903, align 8
  %242 = add i64 %241, 12
  %243 = add i64 %240, 21
  store i64 %243, i64* %3, align 8
  %244 = inttoptr i64 %242 to i32*
  %245 = load i32, i32* %244, align 4
  %246 = zext i32 %245 to i64
  store i64 %246, i64* %RSI.i739, align 8
  %247 = load i64, i64* %RBP.i, align 8
  %248 = add i64 %247, -220
  %249 = add i64 %240, 27
  store i64 %249, i64* %3, align 8
  %250 = inttoptr i64 %248 to i32*
  store i32 2, i32* %250, align 4
  %251 = load i32, i32* %ESI.i1656, align 4
  %252 = zext i32 %251 to i64
  %253 = load i64, i64* %3, align 8
  store i64 %252, i64* %RAX.i3587.phi.trans.insert, align 8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %255 = sext i32 %251 to i64
  %256 = lshr i64 %255, 32
  store i64 %256, i64* %254, align 8
  %257 = load i64, i64* %RBP.i, align 8
  %258 = add i64 %257, -220
  %259 = add i64 %253, 9
  store i64 %259, i64* %3, align 8
  %260 = inttoptr i64 %258 to i32*
  %261 = load i32, i32* %260, align 4
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RSI.i739, align 8
  %263 = add i64 %253, 11
  store i64 %263, i64* %3, align 8
  %264 = sext i32 %261 to i64
  %265 = shl nuw i64 %256, 32
  %266 = or i64 %265, %252
  %267 = sdiv i64 %266, %264
  %268 = shl i64 %267, 32
  %269 = ashr exact i64 %268, 32
  %270 = icmp eq i64 %267, %269
  br i1 %270, label %273, label %271

; <label>:271:                                    ; preds = %block_4207a7
  %272 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %263, %struct.Memory* %2)
  %.pre = load i32, i32* %EDX.i1187, align 4
  %.pre243 = load i64, i64* %3, align 8
  %.pre244 = load i64, i64* %RSI.i739, align 8
  %.pre245 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit3255

; <label>:273:                                    ; preds = %block_4207a7
  %274 = srem i64 %266, %264
  %275 = and i64 %267, 4294967295
  store i64 %275, i64* %RAX.i3587.phi.trans.insert, align 8
  %276 = and i64 %274, 4294967295
  store i64 %276, i64* %RDX.i2903, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %277 = trunc i64 %274 to i32
  br label %routine_idivl__esi.exit3255

routine_idivl__esi.exit3255:                      ; preds = %273, %271
  %278 = phi i64 [ %.pre245, %271 ], [ %257, %273 ]
  %279 = phi i64 [ %.pre244, %271 ], [ %262, %273 ]
  %280 = phi i64 [ %.pre243, %271 ], [ %263, %273 ]
  %281 = phi i32 [ %.pre, %271 ], [ %277, %273 ]
  %282 = phi %struct.Memory* [ %272, %271 ], [ %2, %273 ]
  store i8 0, i8* %32, align 1
  %283 = and i32 %281, 255
  %284 = tail call i32 @llvm.ctpop.i32(i32 %283)
  %285 = trunc i32 %284 to i8
  %286 = and i8 %285, 1
  %287 = xor i8 %286, 1
  store i8 %287, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %288 = icmp eq i32 %281, 0
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %48, align 1
  %290 = lshr i32 %281, 31
  %291 = trunc i32 %290 to i8
  store i8 %291, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %292 = load i32, i32* %ECX.i1211, align 4
  %293 = zext i32 %292 to i64
  %294 = select i1 %288, i64 %279, i64 %293
  %295 = and i64 %294, 4294967295
  store i64 %295, i64* %RSI.i739, align 8
  %296 = add i64 %278, -224
  %297 = trunc i64 %294 to i32
  %298 = add i64 %280, 12
  store i64 %298, i64* %3, align 8
  %299 = inttoptr i64 %296 to i32*
  store i32 %297, i32* %299, align 4
  %300 = load i64, i64* %3, align 8
  %301 = add i64 %300, 18
  br label %block_.L_4207eb

block_.L_4207de:                                  ; preds = %entry.block_.L_4207de_crit_edge, %block_420775
  %.pre410.pre-phi = phi i64* [ %.pre447, %entry.block_.L_4207de_crit_edge ], [ %RCX.i2235, %block_420775 ]
  %302 = phi i64 [ %189, %entry.block_.L_4207de_crit_edge ], [ %240, %block_420775 ]
  store i64 0, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 0, i8* %32, align 1
  store i8 1, i8* %39, align 1
  store i8 1, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  store i8 0, i8* %45, align 1
  %303 = load i64, i64* %RBP.i, align 8
  %304 = add i64 %303, -224
  %305 = add i64 %302, 8
  store i64 %305, i64* %3, align 8
  %306 = inttoptr i64 %304 to i32*
  store i32 0, i32* %306, align 4
  %307 = load i64, i64* %3, align 8
  %308 = add i64 %307, 5
  store i64 %308, i64* %3, align 8
  %.pre411 = getelementptr inbounds %union.anon, %union.anon* %101, i64 0, i32 0
  br label %block_.L_4207eb

block_.L_4207eb:                                  ; preds = %block_.L_4207de, %routine_idivl__esi.exit3255
  %RDX.i4317.pre-phi = phi i64* [ %.pre411, %block_.L_4207de ], [ %RDX.i2903, %routine_idivl__esi.exit3255 ]
  %RCX.i4260.pre-phi = phi i64* [ %.pre410.pre-phi, %block_.L_4207de ], [ %RCX.i2235, %routine_idivl__esi.exit3255 ]
  %storemerge = phi i64 [ %308, %block_.L_4207de ], [ %301, %routine_idivl__esi.exit3255 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_.L_4207de ], [ %282, %routine_idivl__esi.exit3255 ]
  %EAX.i4185.pre-phi = bitcast %union.anon* %58 to i32*
  %309 = load i64, i64* %RBP.i, align 8
  %310 = add i64 %309, -224
  %311 = add i64 %storemerge, 6
  store i64 %311, i64* %3, align 8
  %312 = inttoptr i64 %310 to i32*
  %313 = load i32, i32* %312, align 4
  %314 = zext i32 %313 to i64
  store i64 %314, i64* %RAX.i3587.phi.trans.insert, align 8
  %315 = bitcast [32 x %union.VectorReg]* %165 to i8*
  %316 = add i64 %storemerge, add (i64 ptrtoint (%G_0x9108f__rip__type* @G_0x9108f__rip_ to i64), i64 6)
  %317 = add i64 %storemerge, 14
  store i64 %317, i64* %3, align 8
  %318 = inttoptr i64 %316 to i64*
  %319 = load i64, i64* %318, align 8
  store i64 %319, i64* %171, align 1
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %321 = bitcast i64* %320 to double*
  store double 0.000000e+00, double* %321, align 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %323 = bitcast %union.VectorReg* %322 to i8*
  %324 = add i64 %storemerge, add (i64 ptrtoint (%G_0x9108f__rip__type* @G_0x9108f__rip_ to i64), i64 14)
  %325 = add i64 %storemerge, 22
  store i64 %325, i64* %3, align 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = bitcast %union.VectorReg* %322 to double*
  %329 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %322, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %327, i64* %329, align 1
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %331 = bitcast i64* %330 to double*
  store double 0.000000e+00, double* %331, align 1
  %332 = add i64 %309, -116
  %333 = add i64 %storemerge, 25
  store i64 %333, i64* %3, align 8
  %334 = inttoptr i64 %332 to i32*
  store i32 %313, i32* %334, align 4
  %335 = load i64, i64* %RBP.i, align 8
  %336 = add i64 %335, -40
  %337 = load i64, i64* %3, align 8
  %338 = add i64 %337, 3
  store i64 %338, i64* %3, align 8
  %339 = inttoptr i64 %336 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  store i64 %341, i64* %RAX.i3587.phi.trans.insert, align 8
  %342 = add i64 %335, -116
  %343 = add i64 %337, 6
  store i64 %343, i64* %3, align 8
  %344 = inttoptr i64 %342 to i32*
  %345 = load i32, i32* %344, align 4
  %346 = add i32 %345, %340
  %347 = zext i32 %346 to i64
  store i64 %347, i64* %RAX.i3587.phi.trans.insert, align 8
  %348 = icmp ult i32 %346, %340
  %349 = icmp ult i32 %346, %345
  %350 = or i1 %348, %349
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %32, align 1
  %352 = and i32 %346, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352)
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %39, align 1
  %357 = xor i32 %345, %340
  %358 = xor i32 %357, %346
  %359 = lshr i32 %358, 4
  %360 = trunc i32 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %45, align 1
  %362 = icmp eq i32 %346, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %48, align 1
  %364 = lshr i32 %346, 31
  %365 = trunc i32 %364 to i8
  store i8 %365, i8* %51, align 1
  %366 = lshr i32 %340, 31
  %367 = lshr i32 %345, 31
  %368 = xor i32 %364, %366
  %369 = xor i32 %364, %367
  %370 = add nuw nsw i32 %368, %369
  %371 = icmp eq i32 %370, 2
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %57, align 1
  %373 = sext i32 %346 to i64
  store i64 %373, i64* %RCX.i4260.pre-phi, align 8
  %374 = shl nsw i64 %373, 3
  %375 = add nsw i64 %374, 7482144
  %376 = add i64 %337, 17
  store i64 %376, i64* %3, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %RCX.i4260.pre-phi, align 8
  %379 = add i64 %335, -34
  %380 = add i64 %337, 22
  store i64 %380, i64* %3, align 8
  %381 = inttoptr i64 %379 to i16*
  %382 = load i16, i16* %381, align 2
  %383 = sext i16 %382 to i64
  store i64 %383, i64* %RDX.i4317.pre-phi, align 8
  %384 = shl nsw i64 %383, 3
  %385 = add i64 %384, %378
  %386 = add i64 %337, 26
  store i64 %386, i64* %3, align 8
  %387 = inttoptr i64 %385 to i64*
  %388 = load i64, i64* %387, align 8
  store i64 %388, i64* %RCX.i4260.pre-phi, align 8
  %389 = add i64 %388, 6432
  %390 = add i64 %337, 33
  store i64 %390, i64* %3, align 8
  %391 = inttoptr i64 %389 to i64*
  %392 = load i64, i64* %391, align 8
  store i64 %392, i64* %RCX.i4260.pre-phi, align 8
  %393 = add i64 %335, -128
  %394 = add i64 %337, 37
  store i64 %394, i64* %3, align 8
  %395 = inttoptr i64 %393 to i64*
  store i64 %392, i64* %395, align 8
  %396 = load i64, i64* %RBP.i, align 8
  %397 = add i64 %396, -88
  %398 = load i64, i64* %3, align 8
  %399 = add i64 %398, 5
  store i64 %399, i64* %3, align 8
  %400 = load double, double* %328, align 1
  %401 = inttoptr i64 %397 to double*
  %402 = load double, double* %401, align 8
  %403 = fmul double %400, %402
  %404 = load double, double* %170, align 1
  %405 = fadd double %403, %404
  store double %405, double* %328, align 1
  %406 = tail call double @llvm.trunc.f64(double %405)
  %407 = tail call double @llvm.fabs.f64(double %406)
  %408 = fcmp ogt double %407, 0x41DFFFFFFFC00000
  %409 = fptosi double %406 to i32
  %410 = zext i32 %409 to i64
  %411 = select i1 %408, i64 2147483648, i64 %410
  store i64 %411, i64* %RAX.i3587.phi.trans.insert, align 8
  %412 = add i64 %396, -132
  %413 = trunc i64 %411 to i32
  %414 = add i64 %398, 19
  store i64 %414, i64* %3, align 8
  %415 = inttoptr i64 %412 to i32*
  store i32 %413, i32* %415, align 4
  %416 = load i64, i64* %RBP.i, align 8
  %417 = add i64 %416, -136
  %418 = load i64, i64* %3, align 8
  %419 = add i64 %418, 10
  store i64 %419, i64* %3, align 8
  %420 = inttoptr i64 %417 to i32*
  store i32 2, i32* %420, align 4
  %421 = load i64, i64* %3, align 8
  %422 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %422, i64* %RCX.i4260.pre-phi, align 8
  %423 = load i64, i64* %RBP.i, align 8
  %424 = add i64 %423, -52
  %425 = add i64 %421, 12
  store i64 %425, i64* %3, align 8
  %426 = inttoptr i64 %424 to i32*
  %427 = load i32, i32* %426, align 4
  %428 = sext i32 %427 to i64
  store i64 %428, i64* %RDX.i4317.pre-phi, align 8
  %429 = shl nsw i64 %428, 3
  %430 = add i64 %422, 84
  %431 = add i64 %430, %429
  %432 = add i64 %421, 16
  store i64 %432, i64* %3, align 8
  %433 = inttoptr i64 %431 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = zext i32 %434 to i64
  store i64 %435, i64* %RAX.i3587.phi.trans.insert, align 8
  %436 = add i64 %423, -140
  %437 = add i64 %421, 22
  store i64 %437, i64* %3, align 8
  %438 = inttoptr i64 %436 to i32*
  store i32 %434, i32* %438, align 4
  %439 = load i64, i64* %3, align 8
  %440 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %440, i64* %RCX.i4260.pre-phi, align 8
  %441 = load i64, i64* %RBP.i, align 8
  %442 = add i64 %441, -52
  %443 = add i64 %439, 12
  store i64 %443, i64* %3, align 8
  %444 = inttoptr i64 %442 to i32*
  %445 = load i32, i32* %444, align 4
  %446 = sext i32 %445 to i64
  store i64 %446, i64* %RDX.i4317.pre-phi, align 8
  %447 = shl nsw i64 %446, 3
  %448 = add i64 %440, 80
  %449 = add i64 %448, %447
  %450 = add i64 %439, 16
  store i64 %450, i64* %3, align 8
  %451 = inttoptr i64 %449 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  store i64 %453, i64* %RAX.i3587.phi.trans.insert, align 8
  %454 = add i64 %441, -144
  %455 = add i64 %439, 22
  store i64 %455, i64* %3, align 8
  %456 = inttoptr i64 %454 to i32*
  store i32 %452, i32* %456, align 4
  %457 = load i64, i64* %RBP.i, align 8
  %458 = add i64 %457, -144
  %459 = load i64, i64* %3, align 8
  %460 = add i64 %459, 6
  store i64 %460, i64* %3, align 8
  %461 = inttoptr i64 %458 to i32*
  %462 = load i32, i32* %461, align 4
  %463 = sext i32 %462 to i64
  %464 = ashr i64 %463, 1
  %465 = lshr i64 %464, 1
  %466 = trunc i64 %464 to i8
  %467 = and i8 %466, 1
  %468 = trunc i64 %465 to i32
  %469 = and i64 %465, 4294967295
  store i64 %469, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %467, i8* %32, align 1
  %470 = and i32 %468, 255
  %471 = tail call i32 @llvm.ctpop.i32(i32 %470)
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = xor i8 %473, 1
  store i8 %474, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %475 = icmp eq i32 %468, 0
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %48, align 1
  %477 = lshr i64 %464, 32
  %478 = trunc i64 %477 to i8
  %479 = and i8 %478, 1
  store i8 %479, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %480 = add i64 %457, -148
  %481 = trunc i64 %465 to i32
  %482 = add i64 %459, 15
  store i64 %482, i64* %3, align 8
  %483 = inttoptr i64 %480 to i32*
  store i32 %481, i32* %483, align 4
  %484 = load i64, i64* %RBP.i, align 8
  %485 = add i64 %484, -44
  %486 = load i64, i64* %3, align 8
  %487 = add i64 %486, 3
  store i64 %487, i64* %3, align 8
  %488 = inttoptr i64 %485 to i32*
  %489 = load i32, i32* %488, align 4
  %490 = zext i32 %489 to i64
  store i64 %490, i64* %RAX.i3587.phi.trans.insert, align 8
  %491 = add i64 %484, -136
  %492 = add i64 %486, 9
  store i64 %492, i64* %3, align 8
  %493 = inttoptr i64 %491 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RCX.i4260.pre-phi, align 8
  %496 = add i64 %486, 11
  store i64 %496, i64* %3, align 8
  %497 = trunc i32 %494 to i5
  switch i5 %497, label %503 [
    i5 0, label %routine_shll__cl___eax.exit6075
    i5 1, label %498
  ]

; <label>:498:                                    ; preds = %block_.L_4207eb
  %499 = shl i32 %489, 1
  %500 = icmp slt i32 %489, 0
  %501 = icmp slt i32 %499, 0
  %502 = xor i1 %500, %501
  br label %512

; <label>:503:                                    ; preds = %block_.L_4207eb
  %504 = and i32 %494, 31
  %505 = zext i32 %504 to i64
  %506 = add nuw nsw i64 %505, 4294967295
  %507 = and i64 %506, 4294967295
  %508 = shl i64 %490, %507
  %509 = trunc i64 %508 to i32
  %510 = icmp slt i32 %509, 0
  %511 = shl i32 %509, 1
  br label %512

; <label>:512:                                    ; preds = %503, %498
  %513 = phi i1 [ %500, %498 ], [ %510, %503 ]
  %514 = phi i1 [ %502, %498 ], [ false, %503 ]
  %515 = phi i32 [ %499, %498 ], [ %511, %503 ]
  %516 = zext i32 %515 to i64
  store i64 %516, i64* %RAX.i3587.phi.trans.insert, align 8
  %517 = zext i1 %513 to i8
  store i8 %517, i8* %32, align 1
  %518 = and i32 %515, 254
  %519 = tail call i32 @llvm.ctpop.i32(i32 %518)
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  store i8 %522, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %523 = icmp eq i32 %515, 0
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %48, align 1
  %525 = lshr i32 %515, 31
  %526 = trunc i32 %525 to i8
  store i8 %526, i8* %51, align 1
  %527 = zext i1 %514 to i8
  store i8 %527, i8* %57, align 1
  br label %routine_shll__cl___eax.exit6075

routine_shll__cl___eax.exit6075:                  ; preds = %512, %block_.L_4207eb
  %528 = phi i64 [ %516, %512 ], [ %490, %block_.L_4207eb ]
  %529 = add i64 %484, -54
  %530 = add i64 %486, 15
  store i64 %530, i64* %3, align 8
  %531 = inttoptr i64 %529 to i16*
  %532 = load i16, i16* %531, align 2
  %533 = sext i16 %532 to i64
  %534 = and i64 %533, 4294967295
  store i64 %534, i64* %RSI.i739, align 8
  %535 = sext i16 %532 to i32
  %536 = zext i32 %535 to i64
  %537 = trunc i64 %528 to i32
  %538 = add i32 %535, %537
  %539 = zext i32 %538 to i64
  store i64 %539, i64* %RAX.i3587.phi.trans.insert, align 8
  %540 = icmp ult i32 %538, %537
  %541 = icmp ult i32 %538, %535
  %542 = or i1 %540, %541
  %543 = zext i1 %542 to i8
  store i8 %543, i8* %32, align 1
  %544 = and i32 %538, 255
  %545 = tail call i32 @llvm.ctpop.i32(i32 %544)
  %546 = trunc i32 %545 to i8
  %547 = and i8 %546, 1
  %548 = xor i8 %547, 1
  store i8 %548, i8* %39, align 1
  %549 = xor i64 %536, %528
  %550 = trunc i64 %549 to i32
  %551 = xor i32 %550, %538
  %552 = lshr i32 %551, 4
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  store i8 %554, i8* %45, align 1
  %555 = icmp eq i32 %538, 0
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %48, align 1
  %557 = lshr i32 %538, 31
  %558 = trunc i32 %557 to i8
  store i8 %558, i8* %51, align 1
  %559 = lshr i32 %537, 31
  %560 = lshr i32 %535, 31
  %561 = xor i32 %557, %559
  %562 = xor i32 %557, %560
  %563 = add nuw nsw i32 %561, %562
  %564 = icmp eq i32 %563, 2
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %57, align 1
  %566 = add i64 %484, -152
  %567 = add i64 %486, 23
  store i64 %567, i64* %3, align 8
  %568 = inttoptr i64 %566 to i32*
  store i32 %538, i32* %568, align 4
  %569 = load i64, i64* %RBP.i, align 8
  %570 = add i64 %569, -48
  %571 = load i64, i64* %3, align 8
  %572 = add i64 %571, 3
  store i64 %572, i64* %3, align 8
  %573 = inttoptr i64 %570 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RAX.i3587.phi.trans.insert, align 8
  %576 = add i64 %569, -136
  %577 = add i64 %571, 9
  store i64 %577, i64* %3, align 8
  %578 = inttoptr i64 %576 to i32*
  %579 = load i32, i32* %578, align 4
  %580 = zext i32 %579 to i64
  store i64 %580, i64* %RCX.i4260.pre-phi, align 8
  %581 = add i64 %571, 11
  store i64 %581, i64* %3, align 8
  %582 = trunc i32 %579 to i5
  switch i5 %582, label %588 [
    i5 0, label %routine_shll__cl___eax.exit
    i5 1, label %583
  ]

; <label>:583:                                    ; preds = %routine_shll__cl___eax.exit6075
  %584 = shl i32 %574, 1
  %585 = icmp slt i32 %574, 0
  %586 = icmp slt i32 %584, 0
  %587 = xor i1 %585, %586
  br label %597

; <label>:588:                                    ; preds = %routine_shll__cl___eax.exit6075
  %589 = and i32 %579, 31
  %590 = zext i32 %589 to i64
  %591 = add nuw nsw i64 %590, 4294967295
  %592 = and i64 %591, 4294967295
  %593 = shl i64 %575, %592
  %594 = trunc i64 %593 to i32
  %595 = icmp slt i32 %594, 0
  %596 = shl i32 %594, 1
  br label %597

; <label>:597:                                    ; preds = %588, %583
  %598 = phi i1 [ %585, %583 ], [ %595, %588 ]
  %599 = phi i1 [ %587, %583 ], [ false, %588 ]
  %600 = phi i32 [ %584, %583 ], [ %596, %588 ]
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %RAX.i3587.phi.trans.insert, align 8
  %602 = zext i1 %598 to i8
  store i8 %602, i8* %32, align 1
  %603 = and i32 %600, 254
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603)
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %608 = icmp eq i32 %600, 0
  %609 = zext i1 %608 to i8
  store i8 %609, i8* %48, align 1
  %610 = lshr i32 %600, 31
  %611 = trunc i32 %610 to i8
  store i8 %611, i8* %51, align 1
  %612 = zext i1 %599 to i8
  store i8 %612, i8* %57, align 1
  br label %routine_shll__cl___eax.exit

routine_shll__cl___eax.exit:                      ; preds = %597, %routine_shll__cl___eax.exit6075
  %613 = phi i64 [ %601, %597 ], [ %575, %routine_shll__cl___eax.exit6075 ]
  %614 = add i64 %569, -56
  %615 = add i64 %571, 15
  store i64 %615, i64* %3, align 8
  %616 = inttoptr i64 %614 to i16*
  %617 = load i16, i16* %616, align 2
  %618 = sext i16 %617 to i64
  %619 = and i64 %618, 4294967295
  store i64 %619, i64* %RSI.i739, align 8
  %620 = sext i16 %617 to i32
  %621 = zext i32 %620 to i64
  %622 = trunc i64 %613 to i32
  %623 = add i32 %620, %622
  %624 = zext i32 %623 to i64
  store i64 %624, i64* %RAX.i3587.phi.trans.insert, align 8
  %625 = icmp ult i32 %623, %622
  %626 = icmp ult i32 %623, %620
  %627 = or i1 %625, %626
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %32, align 1
  %629 = and i32 %623, 255
  %630 = tail call i32 @llvm.ctpop.i32(i32 %629)
  %631 = trunc i32 %630 to i8
  %632 = and i8 %631, 1
  %633 = xor i8 %632, 1
  store i8 %633, i8* %39, align 1
  %634 = xor i64 %621, %613
  %635 = trunc i64 %634 to i32
  %636 = xor i32 %635, %623
  %637 = lshr i32 %636, 4
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  store i8 %639, i8* %45, align 1
  %640 = icmp eq i32 %623, 0
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %48, align 1
  %642 = lshr i32 %623, 31
  %643 = trunc i32 %642 to i8
  store i8 %643, i8* %51, align 1
  %644 = lshr i32 %622, 31
  %645 = lshr i32 %620, 31
  %646 = xor i32 %642, %644
  %647 = xor i32 %642, %645
  %648 = add nuw nsw i32 %646, %647
  %649 = icmp eq i32 %648, 2
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %57, align 1
  %651 = add i64 %569, -156
  %652 = add i64 %571, 23
  store i64 %652, i64* %3, align 8
  %653 = inttoptr i64 %651 to i32*
  store i32 %623, i32* %653, align 4
  %654 = load i64, i64* %RBP.i, align 8
  %655 = add i64 %654, -44
  %656 = load i64, i64* %3, align 8
  %657 = add i64 %656, 3
  store i64 %657, i64* %3, align 8
  %658 = inttoptr i64 %655 to i32*
  %659 = load i32, i32* %658, align 4
  %660 = zext i32 %659 to i64
  store i64 %660, i64* %RAX.i3587.phi.trans.insert, align 8
  %661 = add i64 %654, -64
  %662 = add i64 %656, 7
  store i64 %662, i64* %3, align 8
  %663 = inttoptr i64 %661 to i64*
  %664 = load i64, i64* %663, align 8
  store i64 %664, i64* %RDX.i4317.pre-phi, align 8
  %665 = add i64 %656, 10
  store i64 %665, i64* %3, align 8
  %666 = inttoptr i64 %664 to i16*
  %667 = load i16, i16* %666, align 2
  %668 = sext i16 %667 to i64
  %669 = and i64 %668, 4294967295
  store i64 %669, i64* %RSI.i739, align 8
  %670 = sext i16 %667 to i32
  %671 = add i32 %670, %659
  %672 = zext i32 %671 to i64
  store i64 %672, i64* %RAX.i3587.phi.trans.insert, align 8
  %673 = icmp ult i32 %671, %659
  %674 = icmp ult i32 %671, %670
  %675 = or i1 %673, %674
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %32, align 1
  %677 = and i32 %671, 255
  %678 = tail call i32 @llvm.ctpop.i32(i32 %677)
  %679 = trunc i32 %678 to i8
  %680 = and i8 %679, 1
  %681 = xor i8 %680, 1
  store i8 %681, i8* %39, align 1
  %682 = xor i32 %670, %659
  %683 = xor i32 %682, %671
  %684 = lshr i32 %683, 4
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  store i8 %686, i8* %45, align 1
  %687 = icmp eq i32 %671, 0
  %688 = zext i1 %687 to i8
  store i8 %688, i8* %48, align 1
  %689 = lshr i32 %671, 31
  %690 = trunc i32 %689 to i8
  store i8 %690, i8* %51, align 1
  %691 = lshr i32 %659, 31
  %692 = lshr i32 %670, 31
  %693 = xor i32 %689, %691
  %694 = xor i32 %689, %692
  %695 = add nuw nsw i32 %693, %694
  %696 = icmp eq i32 %695, 2
  %697 = zext i1 %696 to i8
  store i8 %697, i8* %57, align 1
  %698 = add i64 %654, -160
  %699 = add i64 %656, 18
  store i64 %699, i64* %3, align 8
  %700 = inttoptr i64 %698 to i32*
  store i32 %671, i32* %700, align 4
  %701 = load i64, i64* %RBP.i, align 8
  %702 = add i64 %701, -48
  %703 = load i64, i64* %3, align 8
  %704 = add i64 %703, 3
  store i64 %704, i64* %3, align 8
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705, align 4
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %RAX.i3587.phi.trans.insert, align 8
  %708 = add i64 %701, -72
  %709 = add i64 %703, 7
  store i64 %709, i64* %3, align 8
  %710 = inttoptr i64 %708 to i64*
  %711 = load i64, i64* %710, align 8
  store i64 %711, i64* %RDX.i4317.pre-phi, align 8
  %712 = add i64 %703, 10
  store i64 %712, i64* %3, align 8
  %713 = inttoptr i64 %711 to i16*
  %714 = load i16, i16* %713, align 2
  %715 = sext i16 %714 to i64
  %716 = and i64 %715, 4294967295
  store i64 %716, i64* %RSI.i739, align 8
  %717 = sext i16 %714 to i32
  %718 = add i32 %717, %706
  %719 = zext i32 %718 to i64
  store i64 %719, i64* %RAX.i3587.phi.trans.insert, align 8
  %720 = icmp ult i32 %718, %706
  %721 = icmp ult i32 %718, %717
  %722 = or i1 %720, %721
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %32, align 1
  %724 = and i32 %718, 255
  %725 = tail call i32 @llvm.ctpop.i32(i32 %724)
  %726 = trunc i32 %725 to i8
  %727 = and i8 %726, 1
  %728 = xor i8 %727, 1
  store i8 %728, i8* %39, align 1
  %729 = xor i32 %717, %706
  %730 = xor i32 %729, %718
  %731 = lshr i32 %730, 4
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  store i8 %733, i8* %45, align 1
  %734 = icmp eq i32 %718, 0
  %735 = zext i1 %734 to i8
  store i8 %735, i8* %48, align 1
  %736 = lshr i32 %718, 31
  %737 = trunc i32 %736 to i8
  store i8 %737, i8* %51, align 1
  %738 = lshr i32 %706, 31
  %739 = lshr i32 %717, 31
  %740 = xor i32 %736, %738
  %741 = xor i32 %736, %739
  %742 = add nuw nsw i32 %740, %741
  %743 = icmp eq i32 %742, 2
  %744 = zext i1 %743 to i8
  store i8 %744, i8* %57, align 1
  %745 = add i64 %701, -164
  %746 = add i64 %703, 18
  store i64 %746, i64* %3, align 8
  %747 = inttoptr i64 %745 to i32*
  store i32 %718, i32* %747, align 4
  %748 = load i64, i64* %RBP.i, align 8
  %749 = add i64 %748, -168
  %750 = load i64, i64* %3, align 8
  %751 = add i64 %750, 10
  store i64 %751, i64* %3, align 8
  %752 = inttoptr i64 %749 to i32*
  store i32 0, i32* %752, align 4
  %753 = load i64, i64* %RBP.i, align 8
  %754 = add i64 %753, -172
  %755 = load i64, i64* %3, align 8
  %756 = add i64 %755, 10
  store i64 %756, i64* %3, align 8
  %757 = inttoptr i64 %754 to i32*
  store i32 0, i32* %757, align 4
  %758 = load i64, i64* %3, align 8
  %759 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %759, i64* %RDX.i4317.pre-phi, align 8
  %760 = add i64 %759, 1236
  %761 = add i64 %758, 14
  store i64 %761, i64* %3, align 8
  %762 = inttoptr i64 %760 to i32*
  %763 = load i32, i32* %762, align 4
  %764 = zext i32 %763 to i64
  store i64 %764, i64* %RAX.i3587.phi.trans.insert, align 8
  %765 = load i64, i64* %RBP.i, align 8
  %766 = add i64 %765, -204
  %767 = add i64 %758, 20
  store i64 %767, i64* %3, align 8
  %768 = inttoptr i64 %766 to i32*
  store i32 %763, i32* %768, align 4
  %769 = load i64, i64* %3, align 8
  %770 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %770, i64* %RDX.i4317.pre-phi, align 8
  %771 = add i64 %770, 72400
  %772 = add i64 %769, 15
  store i64 %772, i64* %3, align 8
  %773 = inttoptr i64 %771 to i32*
  %774 = load i32, i32* %773, align 4
  store i8 0, i8* %32, align 1
  %775 = and i32 %774, 255
  %776 = tail call i32 @llvm.ctpop.i32(i32 %775)
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = xor i8 %778, 1
  store i8 %779, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %780 = icmp eq i32 %774, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %48, align 1
  %782 = lshr i32 %774, 31
  %783 = trunc i32 %782 to i8
  store i8 %783, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v499 = select i1 %780, i64 115, i64 21
  %784 = add i64 %769, %.v499
  store i64 %784, i64* %3, align 8
  br i1 %780, label %block_.L_42096e, label %block_420910

block_420910:                                     ; preds = %routine_shll__cl___eax.exit
  store i64 %770, i64* %RAX.i3587.phi.trans.insert, align 8
  %785 = add i64 %770, 14168
  %786 = add i64 %784, 15
  store i64 %786, i64* %3, align 8
  %787 = inttoptr i64 %785 to i64*
  %788 = load i64, i64* %787, align 8
  store i64 %788, i64* %RAX.i3587.phi.trans.insert, align 8
  store i64 %770, i64* %RCX.i4260.pre-phi, align 8
  %789 = add i64 %770, 12
  %790 = add i64 %784, 27
  store i64 %790, i64* %3, align 8
  %791 = inttoptr i64 %789 to i32*
  %792 = load i32, i32* %791, align 4
  %793 = sext i32 %792 to i64
  %794 = mul nsw i64 %793, 632
  store i64 %794, i64* %RCX.i4260.pre-phi, align 8
  %795 = lshr i64 %794, 63
  %796 = add i64 %794, %788
  store i64 %796, i64* %RAX.i3587.phi.trans.insert, align 8
  %797 = icmp ult i64 %796, %788
  %798 = icmp ult i64 %796, %794
  %799 = or i1 %797, %798
  %800 = zext i1 %799 to i8
  store i8 %800, i8* %32, align 1
  %801 = trunc i64 %796 to i32
  %802 = and i32 %801, 255
  %803 = tail call i32 @llvm.ctpop.i32(i32 %802)
  %804 = trunc i32 %803 to i8
  %805 = and i8 %804, 1
  %806 = xor i8 %805, 1
  store i8 %806, i8* %39, align 1
  %807 = xor i64 %794, %788
  %808 = xor i64 %807, %796
  %809 = lshr i64 %808, 4
  %810 = trunc i64 %809 to i8
  %811 = and i8 %810, 1
  store i8 %811, i8* %45, align 1
  %812 = icmp eq i64 %796, 0
  %813 = zext i1 %812 to i8
  store i8 %813, i8* %48, align 1
  %814 = lshr i64 %796, 63
  %815 = trunc i64 %814 to i8
  store i8 %815, i8* %51, align 1
  %816 = lshr i64 %788, 63
  %817 = xor i64 %814, %816
  %818 = xor i64 %814, %795
  %819 = add nuw nsw i64 %817, %818
  %820 = icmp eq i64 %819, 2
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %57, align 1
  %822 = add i64 %796, 532
  %823 = add i64 %784, 44
  store i64 %823, i64* %3, align 8
  %824 = inttoptr i64 %822 to i32*
  %825 = load i32, i32* %824, align 4
  store i8 0, i8* %32, align 1
  %826 = and i32 %825, 255
  %827 = tail call i32 @llvm.ctpop.i32(i32 %826)
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  store i8 %830, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %831 = icmp eq i32 %825, 0
  %832 = zext i1 %831 to i8
  store i8 %832, i8* %48, align 1
  %833 = lshr i32 %825, 31
  %834 = trunc i32 %833 to i8
  store i8 %834, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v500 = select i1 %831, i64 94, i64 50
  %835 = add i64 %784, %.v500
  store i64 %835, i64* %3, align 8
  br i1 %831, label %block_420910.block_.L_42096e_crit_edge, label %block_420942

block_420910.block_.L_42096e_crit_edge:           ; preds = %block_420910
  %.pre250 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  br label %block_.L_42096e

block_420942:                                     ; preds = %block_420910
  store i64 2, i64* %RAX.i3587.phi.trans.insert, align 8
  %836 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %836, i64* %RCX.i4260.pre-phi, align 8
  %837 = add i64 %836, 60
  %838 = add i64 %835, 16
  store i64 %838, i64* %3, align 8
  %839 = inttoptr i64 %837 to i32*
  %840 = load i32, i32* %839, align 4
  %841 = zext i32 %840 to i64
  store i64 %841, i64* %RDX.i4317.pre-phi, align 8
  %842 = load i64, i64* %RBP.i, align 8
  %843 = add i64 %842, -228
  %844 = add i64 %835, 22
  store i64 %844, i64* %3, align 8
  %845 = inttoptr i64 %843 to i32*
  store i32 2, i32* %845, align 4
  %846 = load i32, i32* %EDX.i1187, align 4
  %847 = zext i32 %846 to i64
  %848 = load i64, i64* %3, align 8
  store i64 %847, i64* %RAX.i3587.phi.trans.insert, align 8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %850 = sext i32 %846 to i64
  %851 = lshr i64 %850, 32
  store i64 %851, i64* %849, align 8
  %852 = load i64, i64* %RBP.i, align 8
  %853 = add i64 %852, -228
  %854 = add i64 %848, 9
  store i64 %854, i64* %3, align 8
  %855 = inttoptr i64 %853 to i32*
  %856 = load i32, i32* %855, align 4
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RSI.i739, align 8
  %858 = add i64 %848, 11
  store i64 %858, i64* %3, align 8
  %859 = sext i32 %856 to i64
  %860 = shl nuw i64 %851, 32
  %861 = or i64 %860, %847
  %862 = sdiv i64 %861, %859
  %863 = shl i64 %862, 32
  %864 = ashr exact i64 %863, 32
  %865 = icmp eq i64 %862, %864
  br i1 %865, label %868, label %866

; <label>:866:                                    ; preds = %block_420942
  %867 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %858, %struct.Memory* %MEMORY.1)
  %.pre247 = load i64, i64* %RBP.i, align 8
  %.pre248 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %.pre249 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit5961

; <label>:868:                                    ; preds = %block_420942
  %869 = srem i64 %861, %859
  %870 = and i64 %862, 4294967295
  store i64 %870, i64* %RAX.i3587.phi.trans.insert, align 8
  %871 = and i64 %869, 4294967295
  store i64 %871, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %872 = trunc i64 %862 to i32
  br label %routine_idivl__esi.exit5961

routine_idivl__esi.exit5961:                      ; preds = %868, %866
  %873 = phi i64 [ %.pre249, %866 ], [ %858, %868 ]
  %874 = phi i32 [ %.pre248, %866 ], [ %872, %868 ]
  %875 = phi i64 [ %.pre247, %866 ], [ %852, %868 ]
  %876 = phi %struct.Memory* [ %867, %866 ], [ %MEMORY.1, %868 ]
  %877 = add i64 %875, -232
  %878 = add i64 %873, 6
  store i64 %878, i64* %3, align 8
  %879 = inttoptr i64 %877 to i32*
  store i32 %874, i32* %879, align 4
  %880 = load i64, i64* %3, align 8
  %881 = add i64 %880, 22
  store i64 %881, i64* %3, align 8
  br label %block_.L_42097f

block_.L_42096e:                                  ; preds = %block_420910.block_.L_42096e_crit_edge, %routine_shll__cl___eax.exit
  %882 = phi i64 [ %.pre250, %block_420910.block_.L_42096e_crit_edge ], [ %770, %routine_shll__cl___eax.exit ]
  %883 = phi i64 [ %835, %block_420910.block_.L_42096e_crit_edge ], [ %784, %routine_shll__cl___eax.exit ]
  store i64 %882, i64* %RAX.i3587.phi.trans.insert, align 8
  %884 = add i64 %882, 60
  %885 = add i64 %883, 11
  store i64 %885, i64* %3, align 8
  %886 = inttoptr i64 %884 to i32*
  %887 = load i32, i32* %886, align 4
  %888 = zext i32 %887 to i64
  store i64 %888, i64* %RCX.i4260.pre-phi, align 8
  %889 = load i64, i64* %RBP.i, align 8
  %890 = add i64 %889, -232
  %891 = add i64 %883, 17
  store i64 %891, i64* %3, align 8
  %892 = inttoptr i64 %890 to i32*
  store i32 %887, i32* %892, align 4
  %.pre251 = load i64, i64* %3, align 8
  br label %block_.L_42097f

block_.L_42097f:                                  ; preds = %block_.L_42096e, %routine_idivl__esi.exit5961
  %893 = phi i64 [ %.pre251, %block_.L_42096e ], [ %881, %routine_idivl__esi.exit5961 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_.L_42096e ], [ %876, %routine_idivl__esi.exit5961 ]
  %894 = load i64, i64* %RBP.i, align 8
  %895 = add i64 %894, -232
  %896 = add i64 %893, 6
  store i64 %896, i64* %3, align 8
  %897 = inttoptr i64 %895 to i32*
  %898 = load i32, i32* %897, align 4
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RAX.i3587.phi.trans.insert, align 8
  %900 = add i64 %894, -216
  %901 = add i64 %893, 12
  store i64 %901, i64* %3, align 8
  %902 = inttoptr i64 %900 to i32*
  store i32 %898, i32* %902, align 4
  %903 = load i64, i64* %RBP.i, align 8
  %904 = add i64 %903, -160
  %905 = load i64, i64* %3, align 8
  %906 = add i64 %905, 6
  store i64 %906, i64* %3, align 8
  %907 = inttoptr i64 %904 to i32*
  %908 = load i32, i32* %907, align 4
  %909 = zext i32 %908 to i64
  store i64 %909, i64* %RAX.i3587.phi.trans.insert, align 8
  %910 = add i64 %903, -76
  %911 = add i64 %905, 9
  store i64 %911, i64* %3, align 8
  %912 = inttoptr i64 %910 to i32*
  %913 = load i32, i32* %912, align 4
  %914 = sub i32 %908, %913
  %915 = icmp ult i32 %908, %913
  %916 = zext i1 %915 to i8
  store i8 %916, i8* %32, align 1
  %917 = and i32 %914, 255
  %918 = tail call i32 @llvm.ctpop.i32(i32 %917)
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  store i8 %921, i8* %39, align 1
  %922 = xor i32 %913, %908
  %923 = xor i32 %922, %914
  %924 = lshr i32 %923, 4
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  store i8 %926, i8* %45, align 1
  %927 = icmp eq i32 %914, 0
  %928 = zext i1 %927 to i8
  store i8 %928, i8* %48, align 1
  %929 = lshr i32 %914, 31
  %930 = trunc i32 %929 to i8
  store i8 %930, i8* %51, align 1
  %931 = lshr i32 %908, 31
  %932 = lshr i32 %913, 31
  %933 = xor i32 %932, %931
  %934 = xor i32 %929, %931
  %935 = add nuw nsw i32 %934, %933
  %936 = icmp eq i32 %935, 2
  %937 = zext i1 %936 to i8
  store i8 %937, i8* %57, align 1
  %938 = icmp ne i8 %930, 0
  %939 = xor i1 %938, %936
  %940 = or i1 %927, %939
  %.v501 = select i1 %940, i64 118, i64 15
  %941 = add i64 %905, %.v501
  store i64 %941, i64* %3, align 8
  br i1 %940, label %block_.L_420a01, label %block_42099a

block_42099a:                                     ; preds = %block_.L_42097f
  %942 = add i64 %941, 6
  store i64 %942, i64* %3, align 8
  %943 = load i32, i32* %907, align 4
  %944 = zext i32 %943 to i64
  store i64 %944, i64* %RAX.i3587.phi.trans.insert, align 8
  %945 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %945, i64* %RCX.i4260.pre-phi, align 8
  %946 = add i64 %945, 52
  %947 = add i64 %941, 17
  store i64 %947, i64* %3, align 8
  %948 = inttoptr i64 %946 to i32*
  %949 = load i32, i32* %948, align 4
  %950 = add i32 %949, -1
  %951 = zext i32 %950 to i64
  store i64 %951, i64* %RDX.i4317.pre-phi, align 8
  %952 = icmp eq i32 %949, 0
  %953 = zext i1 %952 to i8
  store i8 %953, i8* %32, align 1
  %954 = and i32 %950, 255
  %955 = tail call i32 @llvm.ctpop.i32(i32 %954)
  %956 = trunc i32 %955 to i8
  %957 = and i8 %956, 1
  %958 = xor i8 %957, 1
  store i8 %958, i8* %39, align 1
  %959 = xor i32 %950, %949
  %960 = lshr i32 %959, 4
  %961 = trunc i32 %960 to i8
  %962 = and i8 %961, 1
  store i8 %962, i8* %45, align 1
  %963 = icmp eq i32 %950, 0
  %964 = zext i1 %963 to i8
  store i8 %964, i8* %48, align 1
  %965 = lshr i32 %950, 31
  %966 = trunc i32 %965 to i8
  store i8 %966, i8* %51, align 1
  %967 = lshr i32 %949, 31
  %968 = xor i32 %965, %967
  %969 = add nuw nsw i32 %968, %967
  %970 = icmp eq i32 %969, 2
  %971 = zext i1 %970 to i8
  store i8 %971, i8* %57, align 1
  %972 = add i64 %941, 23
  store i64 %972, i64* %3, align 8
  %973 = load i32, i32* %912, align 4
  %974 = sub i32 %950, %973
  %975 = zext i32 %974 to i64
  store i64 %975, i64* %RDX.i4317.pre-phi, align 8
  %976 = icmp ult i32 %950, %973
  %977 = zext i1 %976 to i8
  store i8 %977, i8* %32, align 1
  %978 = and i32 %974, 255
  %979 = tail call i32 @llvm.ctpop.i32(i32 %978)
  %980 = trunc i32 %979 to i8
  %981 = and i8 %980, 1
  %982 = xor i8 %981, 1
  store i8 %982, i8* %39, align 1
  %983 = xor i32 %973, %950
  %984 = xor i32 %983, %974
  %985 = lshr i32 %984, 4
  %986 = trunc i32 %985 to i8
  %987 = and i8 %986, 1
  store i8 %987, i8* %45, align 1
  %988 = icmp eq i32 %974, 0
  %989 = zext i1 %988 to i8
  store i8 %989, i8* %48, align 1
  %990 = lshr i32 %974, 31
  %991 = trunc i32 %990 to i8
  store i8 %991, i8* %51, align 1
  %992 = lshr i32 %973, 31
  %993 = xor i32 %992, %965
  %994 = xor i32 %990, %965
  %995 = add nuw nsw i32 %994, %993
  %996 = icmp eq i32 %995, 2
  %997 = zext i1 %996 to i8
  store i8 %997, i8* %57, align 1
  %998 = add i64 %903, -144
  %999 = add i64 %941, 29
  store i64 %999, i64* %3, align 8
  %1000 = inttoptr i64 %998 to i32*
  %1001 = load i32, i32* %1000, align 4
  %1002 = sub i32 %974, %1001
  %1003 = zext i32 %1002 to i64
  store i64 %1003, i64* %RDX.i4317.pre-phi, align 8
  %1004 = lshr i32 %1002, 31
  %1005 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %1006 = sub i32 %1005, %1002
  %1007 = icmp ult i32 %1005, %1002
  %1008 = zext i1 %1007 to i8
  store i8 %1008, i8* %32, align 1
  %1009 = and i32 %1006, 255
  %1010 = tail call i32 @llvm.ctpop.i32(i32 %1009)
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  store i8 %1013, i8* %39, align 1
  %1014 = xor i32 %1002, %1005
  %1015 = xor i32 %1014, %1006
  %1016 = lshr i32 %1015, 4
  %1017 = trunc i32 %1016 to i8
  %1018 = and i8 %1017, 1
  store i8 %1018, i8* %45, align 1
  %1019 = icmp eq i32 %1006, 0
  %1020 = zext i1 %1019 to i8
  store i8 %1020, i8* %48, align 1
  %1021 = lshr i32 %1006, 31
  %1022 = trunc i32 %1021 to i8
  store i8 %1022, i8* %51, align 1
  %1023 = lshr i32 %1005, 31
  %1024 = xor i32 %1004, %1023
  %1025 = xor i32 %1021, %1023
  %1026 = add nuw nsw i32 %1025, %1024
  %1027 = icmp eq i32 %1026, 2
  %1028 = zext i1 %1027 to i8
  store i8 %1028, i8* %57, align 1
  %1029 = icmp ne i8 %1022, 0
  %1030 = xor i1 %1029, %1027
  %.v502 = select i1 %1030, i64 37, i64 103
  %1031 = add i64 %941, %.v502
  store i64 %1031, i64* %3, align 8
  br i1 %1030, label %block_4209bf, label %block_.L_420a01

block_4209bf:                                     ; preds = %block_42099a
  %1032 = load i64, i64* %RBP.i, align 8
  %1033 = add i64 %1032, -164
  %1034 = add i64 %1031, 6
  store i64 %1034, i64* %3, align 8
  %1035 = inttoptr i64 %1033 to i32*
  %1036 = load i32, i32* %1035, align 4
  %1037 = zext i32 %1036 to i64
  store i64 %1037, i64* %RAX.i3587.phi.trans.insert, align 8
  %1038 = add i64 %1032, -76
  %1039 = add i64 %1031, 9
  store i64 %1039, i64* %3, align 8
  %1040 = inttoptr i64 %1038 to i32*
  %1041 = load i32, i32* %1040, align 4
  %1042 = sub i32 %1036, %1041
  %1043 = icmp ult i32 %1036, %1041
  %1044 = zext i1 %1043 to i8
  store i8 %1044, i8* %32, align 1
  %1045 = and i32 %1042, 255
  %1046 = tail call i32 @llvm.ctpop.i32(i32 %1045)
  %1047 = trunc i32 %1046 to i8
  %1048 = and i8 %1047, 1
  %1049 = xor i8 %1048, 1
  store i8 %1049, i8* %39, align 1
  %1050 = xor i32 %1041, %1036
  %1051 = xor i32 %1050, %1042
  %1052 = lshr i32 %1051, 4
  %1053 = trunc i32 %1052 to i8
  %1054 = and i8 %1053, 1
  store i8 %1054, i8* %45, align 1
  %1055 = icmp eq i32 %1042, 0
  %1056 = zext i1 %1055 to i8
  store i8 %1056, i8* %48, align 1
  %1057 = lshr i32 %1042, 31
  %1058 = trunc i32 %1057 to i8
  store i8 %1058, i8* %51, align 1
  %1059 = lshr i32 %1036, 31
  %1060 = lshr i32 %1041, 31
  %1061 = xor i32 %1060, %1059
  %1062 = xor i32 %1057, %1059
  %1063 = add nuw nsw i32 %1062, %1061
  %1064 = icmp eq i32 %1063, 2
  %1065 = zext i1 %1064 to i8
  store i8 %1065, i8* %57, align 1
  %1066 = icmp ne i8 %1058, 0
  %1067 = xor i1 %1066, %1064
  %1068 = or i1 %1055, %1067
  %.v627 = select i1 %1068, i64 66, i64 15
  %1069 = add i64 %1031, %.v627
  store i64 %1069, i64* %3, align 8
  br i1 %1068, label %block_.L_420a01, label %block_4209ce

block_4209ce:                                     ; preds = %block_4209bf
  %1070 = add i64 %1069, 6
  store i64 %1070, i64* %3, align 8
  %1071 = load i32, i32* %1035, align 4
  %1072 = zext i32 %1071 to i64
  store i64 %1072, i64* %RAX.i3587.phi.trans.insert, align 8
  %1073 = add i64 %1032, -216
  %1074 = add i64 %1069, 12
  store i64 %1074, i64* %3, align 8
  %1075 = inttoptr i64 %1073 to i32*
  %1076 = load i32, i32* %1075, align 4
  %1077 = add i32 %1076, -1
  %1078 = zext i32 %1077 to i64
  store i64 %1078, i64* %RCX.i4260.pre-phi, align 8
  %1079 = icmp eq i32 %1076, 0
  %1080 = zext i1 %1079 to i8
  store i8 %1080, i8* %32, align 1
  %1081 = and i32 %1077, 255
  %1082 = tail call i32 @llvm.ctpop.i32(i32 %1081)
  %1083 = trunc i32 %1082 to i8
  %1084 = and i8 %1083, 1
  %1085 = xor i8 %1084, 1
  store i8 %1085, i8* %39, align 1
  %1086 = xor i32 %1077, %1076
  %1087 = lshr i32 %1086, 4
  %1088 = trunc i32 %1087 to i8
  %1089 = and i8 %1088, 1
  store i8 %1089, i8* %45, align 1
  %1090 = icmp eq i32 %1077, 0
  %1091 = zext i1 %1090 to i8
  store i8 %1091, i8* %48, align 1
  %1092 = lshr i32 %1077, 31
  %1093 = trunc i32 %1092 to i8
  store i8 %1093, i8* %51, align 1
  %1094 = lshr i32 %1076, 31
  %1095 = xor i32 %1092, %1094
  %1096 = add nuw nsw i32 %1095, %1094
  %1097 = icmp eq i32 %1096, 2
  %1098 = zext i1 %1097 to i8
  store i8 %1098, i8* %57, align 1
  %1099 = add i64 %1069, 18
  store i64 %1099, i64* %3, align 8
  %1100 = load i32, i32* %1040, align 4
  %1101 = sub i32 %1077, %1100
  %1102 = zext i32 %1101 to i64
  store i64 %1102, i64* %RCX.i4260.pre-phi, align 8
  %1103 = icmp ult i32 %1077, %1100
  %1104 = zext i1 %1103 to i8
  store i8 %1104, i8* %32, align 1
  %1105 = and i32 %1101, 255
  %1106 = tail call i32 @llvm.ctpop.i32(i32 %1105)
  %1107 = trunc i32 %1106 to i8
  %1108 = and i8 %1107, 1
  %1109 = xor i8 %1108, 1
  store i8 %1109, i8* %39, align 1
  %1110 = xor i32 %1100, %1077
  %1111 = xor i32 %1110, %1101
  %1112 = lshr i32 %1111, 4
  %1113 = trunc i32 %1112 to i8
  %1114 = and i8 %1113, 1
  store i8 %1114, i8* %45, align 1
  %1115 = icmp eq i32 %1101, 0
  %1116 = zext i1 %1115 to i8
  store i8 %1116, i8* %48, align 1
  %1117 = lshr i32 %1101, 31
  %1118 = trunc i32 %1117 to i8
  store i8 %1118, i8* %51, align 1
  %1119 = lshr i32 %1100, 31
  %1120 = xor i32 %1119, %1092
  %1121 = xor i32 %1117, %1092
  %1122 = add nuw nsw i32 %1121, %1120
  %1123 = icmp eq i32 %1122, 2
  %1124 = zext i1 %1123 to i8
  store i8 %1124, i8* %57, align 1
  %1125 = add i64 %1032, -140
  %1126 = add i64 %1069, 24
  store i64 %1126, i64* %3, align 8
  %1127 = inttoptr i64 %1125 to i32*
  %1128 = load i32, i32* %1127, align 4
  %1129 = sub i32 %1101, %1128
  %1130 = zext i32 %1129 to i64
  store i64 %1130, i64* %RCX.i4260.pre-phi, align 8
  %1131 = lshr i32 %1129, 31
  %1132 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %1133 = sub i32 %1132, %1129
  %1134 = icmp ult i32 %1132, %1129
  %1135 = zext i1 %1134 to i8
  store i8 %1135, i8* %32, align 1
  %1136 = and i32 %1133, 255
  %1137 = tail call i32 @llvm.ctpop.i32(i32 %1136)
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  %1140 = xor i8 %1139, 1
  store i8 %1140, i8* %39, align 1
  %1141 = xor i32 %1129, %1132
  %1142 = xor i32 %1141, %1133
  %1143 = lshr i32 %1142, 4
  %1144 = trunc i32 %1143 to i8
  %1145 = and i8 %1144, 1
  store i8 %1145, i8* %45, align 1
  %1146 = icmp eq i32 %1133, 0
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %48, align 1
  %1148 = lshr i32 %1133, 31
  %1149 = trunc i32 %1148 to i8
  store i8 %1149, i8* %51, align 1
  %1150 = lshr i32 %1132, 31
  %1151 = xor i32 %1131, %1150
  %1152 = xor i32 %1148, %1150
  %1153 = add nuw nsw i32 %1152, %1151
  %1154 = icmp eq i32 %1153, 2
  %1155 = zext i1 %1154 to i8
  store i8 %1155, i8* %57, align 1
  %1156 = icmp ne i8 %1149, 0
  %1157 = xor i1 %1156, %1154
  %.v628 = select i1 %1157, i64 32, i64 51
  %1158 = add i64 %1069, %.v628
  store i64 %1158, i64* %3, align 8
  br i1 %1157, label %block_4209ee, label %block_.L_420a01

block_4209ee:                                     ; preds = %block_4209ce
  store i64 ptrtoint (%G__0x49e480_type* @G__0x49e480 to i64), i64* %RAX.i3587.phi.trans.insert, align 8
  %1159 = load i64, i64* %RBP.i, align 8
  %1160 = add i64 %1159, -112
  %1161 = add i64 %1158, 14
  store i64 %1161, i64* %3, align 8
  %1162 = inttoptr i64 %1160 to i64*
  store i64 ptrtoint (%G__0x49e480_type* @G__0x49e480 to i64), i64* %1162, align 8
  %1163 = load i64, i64* %3, align 8
  %1164 = add i64 %1163, 19
  store i64 %1164, i64* %3, align 8
  br label %block_.L_420a0f

block_.L_420a01:                                  ; preds = %block_4209ce, %block_42099a, %block_4209bf, %block_.L_42097f
  %1165 = phi i64 [ %1158, %block_4209ce ], [ %1031, %block_42099a ], [ %1069, %block_4209bf ], [ %941, %block_.L_42097f ]
  store i64 ptrtoint (%G__0x49e4c0_type* @G__0x49e4c0 to i64), i64* %RAX.i3587.phi.trans.insert, align 8
  %1166 = load i64, i64* %RBP.i, align 8
  %1167 = add i64 %1166, -112
  %1168 = add i64 %1165, 14
  store i64 %1168, i64* %3, align 8
  %1169 = inttoptr i64 %1167 to i64*
  store i64 ptrtoint (%G__0x49e4c0_type* @G__0x49e4c0 to i64), i64* %1169, align 8
  %.pre252 = load i64, i64* %3, align 8
  br label %block_.L_420a0f

block_.L_420a0f:                                  ; preds = %block_.L_420a01, %block_4209ee
  %1170 = phi i64 [ %.pre252, %block_.L_420a01 ], [ %1164, %block_4209ee ]
  store i64 0, i64* %RSI.i739, align 8
  store i8 0, i8* %32, align 1
  store i8 1, i8* %39, align 1
  store i8 1, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  store i8 0, i8* %45, align 1
  %1171 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %1171, i64* %RAX.i3587.phi.trans.insert, align 8
  %1172 = add i64 %1170, 13
  store i64 %1172, i64* %3, align 8
  %1173 = inttoptr i64 %1171 to i64*
  %1174 = load i64, i64* %1173, align 8
  store i64 %1174, i64* %RAX.i3587.phi.trans.insert, align 8
  %1175 = load i64, i64* %RBP.i, align 8
  %1176 = add i64 %1175, -76
  %1177 = add i64 %1170, 16
  store i64 %1177, i64* %3, align 8
  %1178 = inttoptr i64 %1176 to i32*
  %1179 = load i32, i32* %1178, align 4
  %1180 = shl i32 %1179, 1
  %1181 = or i32 %1180, 1
  %1182 = zext i32 %1181 to i64
  store i64 %1182, i64* %RCX.i4260.pre-phi, align 8
  store i8 0, i8* %32, align 1
  %1183 = and i32 %1181, 255
  %1184 = tail call i32 @llvm.ctpop.i32(i32 %1183)
  %1185 = trunc i32 %1184 to i8
  %1186 = and i8 %1185, 1
  %1187 = xor i8 %1186, 1
  store i8 %1187, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %1188 = lshr i32 %1179, 30
  %1189 = and i32 %1188, 1
  %1190 = trunc i32 %1189 to i8
  store i8 %1190, i8* %51, align 1
  %1191 = lshr i32 %1179, 30
  %1192 = and i32 %1191, 1
  %1193 = xor i32 %1189, %1192
  %1194 = add nuw nsw i32 %1193, %1189
  %1195 = icmp eq i32 %1194, 2
  %1196 = zext i1 %1195 to i8
  store i8 %1196, i8* %57, align 1
  %1197 = add i64 %1170, 24
  store i64 %1197, i64* %3, align 8
  %1198 = load i32, i32* %1178, align 4
  %1199 = shl i32 %1198, 1
  %1200 = or i32 %1199, 1
  %1201 = sext i32 %1181 to i64
  %1202 = sext i32 %1200 to i64
  %1203 = mul nsw i64 %1202, %1201
  %.tr = trunc i64 %1203 to i32
  %1204 = shl i32 %.tr, 2
  %1205 = zext i32 %1204 to i64
  store i64 %1205, i64* %RCX.i4260.pre-phi, align 8
  %1206 = lshr i64 %1203, 30
  %1207 = trunc i64 %1206 to i8
  %1208 = and i8 %1207, 1
  store i8 %1208, i8* %32, align 1
  %1209 = and i32 %1204, 252
  %1210 = tail call i32 @llvm.ctpop.i32(i32 %1209)
  %1211 = trunc i32 %1210 to i8
  %1212 = and i8 %1211, 1
  %1213 = xor i8 %1212, 1
  store i8 %1213, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %1214 = icmp eq i32 %1204, 0
  %1215 = zext i1 %1214 to i8
  store i8 %1215, i8* %48, align 1
  %1216 = lshr i32 %.tr, 29
  %1217 = trunc i32 %1216 to i8
  %1218 = and i8 %1217, 1
  store i8 %1218, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %1219 = add i64 %1170, 38
  store i64 %1219, i64* %3, align 8
  %1220 = sext i32 %1204 to i64
  store i64 %1220, i64* %RDX.i4317.pre-phi, align 8
  %1221 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  store i64 %1221, i64* %RDI.i1133, align 8
  %1222 = add i64 %1170, -129441
  %1223 = add i64 %1170, 46
  %1224 = load i64, i64* %6, align 8
  %1225 = add i64 %1224, -8
  %1226 = inttoptr i64 %1225 to i64*
  store i64 %1223, i64* %1226, align 8
  store i64 %1225, i64* %6, align 8
  store i64 %1222, i64* %3, align 8
  %1227 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %MEMORY.3)
  %1228 = load i64, i64* %RBP.i, align 8
  %1229 = add i64 %1228, -34
  %1230 = load i64, i64* %3, align 8
  %1231 = add i64 %1230, 4
  store i64 %1231, i64* %3, align 8
  %1232 = inttoptr i64 %1229 to i16*
  %1233 = load i16, i16* %1232, align 2
  %1234 = sext i16 %1233 to i64
  %1235 = and i64 %1234, 4294967295
  store i64 %1235, i64* %RCX.i4260.pre-phi, align 8
  %1236 = sext i16 %1233 to i32
  store i8 0, i8* %32, align 1
  %1237 = and i32 %1236, 255
  %1238 = tail call i32 @llvm.ctpop.i32(i32 %1237)
  %1239 = trunc i32 %1238 to i8
  %1240 = and i8 %1239, 1
  %1241 = xor i8 %1240, 1
  store i8 %1241, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %1242 = icmp eq i16 %1233, 0
  %1243 = zext i1 %1242 to i8
  store i8 %1243, i8* %48, align 1
  %1244 = lshr i32 %1236, 31
  %1245 = trunc i32 %1244 to i8
  store i8 %1245, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %1246 = icmp ne i8 %1245, 0
  %1247 = or i1 %1242, %1246
  %.v503 = select i1 %1247, i64 170, i64 13
  %1248 = add i64 %1230, %.v503
  store i64 %1248, i64* %3, align 8
  br i1 %1247, label %block_.L_420ae9, label %block_420a4c

block_420a4c:                                     ; preds = %block_.L_420a0f
  %1249 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  store i8 0, i8* %32, align 1
  %1250 = and i32 %1249, 255
  %1251 = tail call i32 @llvm.ctpop.i32(i32 %1250)
  %1252 = trunc i32 %1251 to i8
  %1253 = and i8 %1252, 1
  %1254 = xor i8 %1253, 1
  store i8 %1254, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %1255 = icmp eq i32 %1249, 0
  %1256 = zext i1 %1255 to i8
  store i8 %1256, i8* %48, align 1
  %1257 = lshr i32 %1249, 31
  %1258 = trunc i32 %1257 to i8
  store i8 %1258, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v504 = select i1 %1255, i64 133, i64 14
  %1259 = add i64 %1248, %.v504
  store i64 %1259, i64* %3, align 8
  br i1 %1255, label %block_.L_420ad1, label %block_420a5a

block_420a5a:                                     ; preds = %block_420a4c
  %1260 = add i64 %1228, -52
  %1261 = add i64 %1259, 4
  store i64 %1261, i64* %3, align 8
  %1262 = inttoptr i64 %1260 to i32*
  %1263 = load i32, i32* %1262, align 4
  %1264 = sext i32 %1263 to i64
  store i64 %1264, i64* %RAX.i3587.phi.trans.insert, align 8
  %1265 = shl nsw i64 %1264, 2
  %1266 = add nsw i64 %1265, 7394480
  %1267 = add i64 %1259, 13
  store i64 %1267, i64* %3, align 8
  %1268 = inttoptr i64 %1266 to i32*
  %1269 = load i32, i32* %1268, align 4
  %1270 = bitcast [32 x %union.VectorReg]* %165 to float*
  %1271 = bitcast [32 x %union.VectorReg]* %165 to i32*
  store i32 %1269, i32* %1271, align 1
  %1272 = getelementptr inbounds i8, i8* %315, i64 4
  %1273 = bitcast i8* %1272 to float*
  store float 0.000000e+00, float* %1273, align 1
  %1274 = bitcast i64* %320 to float*
  store float 0.000000e+00, float* %1274, align 1
  %1275 = getelementptr inbounds i8, i8* %315, i64 12
  %1276 = bitcast i8* %1275 to float*
  store float 0.000000e+00, float* %1276, align 1
  %1277 = sext i32 %1249 to i64
  %1278 = mul nsw i64 %1277, %1277
  %1279 = trunc i64 %1278 to i32
  %1280 = and i64 %1278, 4294967295
  store i64 %1280, i64* %RCX.i4260.pre-phi, align 8
  %1281 = shl i64 %1278, 32
  %1282 = ashr exact i64 %1281, 32
  %1283 = icmp ne i64 %1282, %1278
  %1284 = zext i1 %1283 to i8
  store i8 %1284, i8* %32, align 1
  %1285 = and i32 %1279, 255
  %1286 = tail call i32 @llvm.ctpop.i32(i32 %1285)
  %1287 = trunc i32 %1286 to i8
  %1288 = and i8 %1287, 1
  %1289 = xor i8 %1288, 1
  store i8 %1289, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %1290 = lshr i32 %1279, 31
  %1291 = trunc i32 %1290 to i8
  store i8 %1291, i8* %51, align 1
  store i8 %1284, i8* %57, align 1
  %1292 = trunc i64 %1278 to i32
  %1293 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %1294 = load <2 x i32>, <2 x i32>* %1293, align 1
  %1295 = bitcast i64* %330 to <2 x i32>*
  %1296 = load <2 x i32>, <2 x i32>* %1295, align 1
  %1297 = sitofp i32 %1292 to float
  %1298 = bitcast %union.VectorReg* %322 to float*
  store float %1297, float* %1298, align 1
  %1299 = extractelement <2 x i32> %1294, i32 1
  %1300 = getelementptr inbounds i8, i8* %323, i64 4
  %1301 = bitcast i8* %1300 to i32*
  store i32 %1299, i32* %1301, align 1
  %1302 = extractelement <2 x i32> %1296, i32 0
  %1303 = bitcast i64* %330 to i32*
  store i32 %1302, i32* %1303, align 1
  %1304 = extractelement <2 x i32> %1296, i32 1
  %1305 = getelementptr inbounds i8, i8* %323, i64 12
  %1306 = bitcast i8* %1305 to i32*
  store i32 %1304, i32* %1306, align 1
  %1307 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %1308 = load <2 x float>, <2 x float>* %1307, align 1
  %1309 = bitcast i64* %320 to <2 x i32>*
  %1310 = load <2 x i32>, <2 x i32>* %1309, align 1
  %1311 = bitcast %union.VectorReg* %322 to <2 x float>*
  %1312 = load <2 x float>, <2 x float>* %1311, align 1
  %1313 = extractelement <2 x float> %1308, i32 0
  %1314 = extractelement <2 x float> %1312, i32 0
  %1315 = fdiv float %1313, %1314
  store float %1315, float* %1270, align 1
  %1316 = bitcast <2 x float> %1308 to <2 x i32>
  %1317 = extractelement <2 x i32> %1316, i32 1
  %1318 = bitcast i8* %1272 to i32*
  store i32 %1317, i32* %1318, align 1
  %1319 = extractelement <2 x i32> %1310, i32 0
  %1320 = bitcast i64* %320 to i32*
  store i32 %1319, i32* %1320, align 1
  %1321 = extractelement <2 x i32> %1310, i32 1
  %1322 = bitcast i8* %1275 to i32*
  store i32 %1321, i32* %1322, align 1
  %1323 = add i64 %1259, 40
  store i64 %1323, i64* %3, align 8
  %1324 = load i32, i32* %1262, align 4
  %1325 = sext i32 %1324 to i64
  store i64 %1325, i64* %RAX.i3587.phi.trans.insert, align 8
  %1326 = shl nsw i64 %1325, 2
  %1327 = add nsw i64 %1326, 7488256
  %1328 = add i64 %1259, 49
  store i64 %1328, i64* %3, align 8
  %1329 = load <2 x float>, <2 x float>* %1307, align 1
  %1330 = load <2 x i32>, <2 x i32>* %1309, align 1
  %1331 = inttoptr i64 %1327 to float*
  %1332 = load float, float* %1331, align 4
  %1333 = extractelement <2 x float> %1329, i32 0
  %1334 = fsub float %1333, %1332
  store float %1334, float* %1270, align 1
  %1335 = bitcast <2 x float> %1329 to <2 x i32>
  %1336 = extractelement <2 x i32> %1335, i32 1
  store i32 %1336, i32* %1318, align 1
  %1337 = extractelement <2 x i32> %1330, i32 0
  store i32 %1337, i32* %1320, align 1
  %1338 = extractelement <2 x i32> %1330, i32 1
  store i32 %1338, i32* %1322, align 1
  %1339 = load i64, i64* %RBP.i, align 8
  %1340 = add i64 %1339, -208
  %1341 = add i64 %1259, 57
  store i64 %1341, i64* %3, align 8
  %1342 = load <2 x float>, <2 x float>* %1307, align 1
  %1343 = extractelement <2 x float> %1342, i32 0
  %1344 = inttoptr i64 %1340 to float*
  store float %1343, float* %1344, align 4
  %1345 = load i64, i64* %RBP.i, align 8
  %1346 = add i64 %1345, -52
  %1347 = load i64, i64* %3, align 8
  %1348 = add i64 %1347, 4
  store i64 %1348, i64* %3, align 8
  %1349 = inttoptr i64 %1346 to i32*
  %1350 = load i32, i32* %1349, align 4
  %1351 = sext i32 %1350 to i64
  store i64 %1351, i64* %RAX.i3587.phi.trans.insert, align 8
  %1352 = shl nsw i64 %1351, 2
  %1353 = add nsw i64 %1352, 7394480
  %1354 = add i64 %1347, 13
  store i64 %1354, i64* %3, align 8
  %1355 = inttoptr i64 %1353 to i32*
  %1356 = load i32, i32* %1355, align 4
  store i32 %1356, i32* %1271, align 1
  store float 0.000000e+00, float* %1273, align 1
  store float 0.000000e+00, float* %1274, align 1
  store float 0.000000e+00, float* %1276, align 1
  %1357 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %1358 = sext i32 %1357 to i64
  %1359 = mul nsw i64 %1358, %1358
  %1360 = trunc i64 %1359 to i32
  %1361 = and i64 %1359, 4294967295
  store i64 %1361, i64* %RCX.i4260.pre-phi, align 8
  %1362 = shl i64 %1359, 32
  %1363 = ashr exact i64 %1362, 32
  %1364 = icmp ne i64 %1363, %1359
  %1365 = zext i1 %1364 to i8
  store i8 %1365, i8* %32, align 1
  %1366 = and i32 %1360, 255
  %1367 = tail call i32 @llvm.ctpop.i32(i32 %1366)
  %1368 = trunc i32 %1367 to i8
  %1369 = and i8 %1368, 1
  %1370 = xor i8 %1369, 1
  store i8 %1370, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %1371 = lshr i32 %1360, 31
  %1372 = trunc i32 %1371 to i8
  store i8 %1372, i8* %51, align 1
  store i8 %1365, i8* %57, align 1
  %1373 = trunc i64 %1359 to i32
  %1374 = load <2 x i32>, <2 x i32>* %1293, align 1
  %1375 = load <2 x i32>, <2 x i32>* %1295, align 1
  %1376 = sitofp i32 %1373 to float
  store float %1376, float* %1298, align 1
  %1377 = extractelement <2 x i32> %1374, i32 1
  store i32 %1377, i32* %1301, align 1
  %1378 = extractelement <2 x i32> %1375, i32 0
  store i32 %1378, i32* %1303, align 1
  %1379 = extractelement <2 x i32> %1375, i32 1
  store i32 %1379, i32* %1306, align 1
  %1380 = load <2 x float>, <2 x float>* %1307, align 1
  %1381 = load <2 x i32>, <2 x i32>* %1309, align 1
  %1382 = load <2 x float>, <2 x float>* %1311, align 1
  %1383 = extractelement <2 x float> %1380, i32 0
  %1384 = extractelement <2 x float> %1382, i32 0
  %1385 = fdiv float %1383, %1384
  store float %1385, float* %1270, align 1
  %1386 = bitcast <2 x float> %1380 to <2 x i32>
  %1387 = extractelement <2 x i32> %1386, i32 1
  store i32 %1387, i32* %1318, align 1
  %1388 = extractelement <2 x i32> %1381, i32 0
  store i32 %1388, i32* %1320, align 1
  %1389 = extractelement <2 x i32> %1381, i32 1
  store i32 %1389, i32* %1322, align 1
  %1390 = add i64 %1347, 40
  store i64 %1390, i64* %3, align 8
  %1391 = load i32, i32* %1349, align 4
  %1392 = sext i32 %1391 to i64
  store i64 %1392, i64* %RAX.i3587.phi.trans.insert, align 8
  %1393 = shl nsw i64 %1392, 2
  %1394 = add nsw i64 %1393, 7311072
  %1395 = add i64 %1347, 49
  store i64 %1395, i64* %3, align 8
  %1396 = load <2 x float>, <2 x float>* %1307, align 1
  %1397 = load <2 x i32>, <2 x i32>* %1309, align 1
  %1398 = inttoptr i64 %1394 to float*
  %1399 = load float, float* %1398, align 4
  %1400 = extractelement <2 x float> %1396, i32 0
  %1401 = fsub float %1400, %1399
  store float %1401, float* %1270, align 1
  %1402 = bitcast <2 x float> %1396 to <2 x i32>
  %1403 = extractelement <2 x i32> %1402, i32 1
  store i32 %1403, i32* %1318, align 1
  %1404 = extractelement <2 x i32> %1397, i32 0
  store i32 %1404, i32* %1320, align 1
  %1405 = extractelement <2 x i32> %1397, i32 1
  store i32 %1405, i32* %1322, align 1
  %1406 = load i64, i64* %RBP.i, align 8
  %1407 = add i64 %1406, -212
  %1408 = add i64 %1347, 57
  store i64 %1408, i64* %3, align 8
  %1409 = load <2 x float>, <2 x float>* %1307, align 1
  %1410 = extractelement <2 x float> %1409, i32 0
  %1411 = inttoptr i64 %1407 to float*
  store float %1410, float* %1411, align 4
  %1412 = load i64, i64* %3, align 8
  %1413 = add i64 %1412, 24
  store i64 %1413, i64* %3, align 8
  br label %block_.L_420ae4

block_.L_420ad1:                                  ; preds = %block_420a4c
  %1414 = bitcast [32 x %union.VectorReg]* %165 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1414, align 1
  %1415 = add i64 %1228, -208
  %1416 = add i64 %1259, 11
  store i64 %1416, i64* %3, align 8
  %1417 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %1418 = load <2 x float>, <2 x float>* %1417, align 1
  %1419 = extractelement <2 x float> %1418, i32 0
  %1420 = inttoptr i64 %1415 to float*
  store float %1419, float* %1420, align 4
  %1421 = load i64, i64* %RBP.i, align 8
  %1422 = add i64 %1421, -212
  %1423 = load i64, i64* %3, align 8
  %1424 = add i64 %1423, 8
  store i64 %1424, i64* %3, align 8
  %1425 = load <2 x float>, <2 x float>* %1417, align 1
  %1426 = extractelement <2 x float> %1425, i32 0
  %1427 = inttoptr i64 %1422 to float*
  store float %1426, float* %1427, align 4
  %.pre253 = load i64, i64* %3, align 8
  br label %block_.L_420ae4

block_.L_420ae4:                                  ; preds = %block_.L_420ad1, %block_420a5a
  %1428 = phi i64 [ %.pre253, %block_.L_420ad1 ], [ %1413, %block_420a5a ]
  %1429 = add i64 %1428, 334
  br label %block_.L_420c32

block_.L_420ae9:                                  ; preds = %block_.L_420a0f
  %1430 = add i64 %1228, -52
  %1431 = add i64 %1248, 4
  store i64 %1431, i64* %3, align 8
  %1432 = inttoptr i64 %1430 to i32*
  %1433 = load i32, i32* %1432, align 4
  %1434 = add i32 %1433, -1
  %1435 = icmp eq i32 %1433, 0
  %1436 = zext i1 %1435 to i8
  store i8 %1436, i8* %32, align 1
  %1437 = and i32 %1434, 255
  %1438 = tail call i32 @llvm.ctpop.i32(i32 %1437)
  %1439 = trunc i32 %1438 to i8
  %1440 = and i8 %1439, 1
  %1441 = xor i8 %1440, 1
  store i8 %1441, i8* %39, align 1
  %1442 = xor i32 %1434, %1433
  %1443 = lshr i32 %1442, 4
  %1444 = trunc i32 %1443 to i8
  %1445 = and i8 %1444, 1
  store i8 %1445, i8* %45, align 1
  %1446 = icmp eq i32 %1434, 0
  %1447 = zext i1 %1446 to i8
  store i8 %1447, i8* %48, align 1
  %1448 = lshr i32 %1434, 31
  %1449 = trunc i32 %1448 to i8
  store i8 %1449, i8* %51, align 1
  %1450 = lshr i32 %1433, 31
  %1451 = xor i32 %1448, %1450
  %1452 = add nuw nsw i32 %1451, %1450
  %1453 = icmp eq i32 %1452, 2
  %1454 = zext i1 %1453 to i8
  store i8 %1454, i8* %57, align 1
  %.v624 = select i1 %1446, i64 10, i64 167
  %1455 = add i64 %1248, %.v624
  %1456 = add i64 %1455, 8
  store i64 %1456, i64* %3, align 8
  br i1 %1446, label %block_420af3, label %block_.L_420b90

block_420af3:                                     ; preds = %block_.L_420ae9
  %1457 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  store i8 0, i8* %32, align 1
  %1458 = and i32 %1457, 255
  %1459 = tail call i32 @llvm.ctpop.i32(i32 %1458)
  %1460 = trunc i32 %1459 to i8
  %1461 = and i8 %1460, 1
  %1462 = xor i8 %1461, 1
  store i8 %1462, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %1463 = icmp eq i32 %1457, 0
  %1464 = zext i1 %1463 to i8
  store i8 %1464, i8* %48, align 1
  %1465 = lshr i32 %1457, 31
  %1466 = trunc i32 %1465 to i8
  store i8 %1466, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v626 = select i1 %1463, i64 133, i64 14
  %1467 = add i64 %1455, %.v626
  store i64 %1467, i64* %3, align 8
  br i1 %1463, label %block_.L_420b78, label %block_420b01

block_420b01:                                     ; preds = %block_420af3
  %1468 = add i64 %1467, 4
  store i64 %1468, i64* %3, align 8
  %1469 = load i32, i32* %1432, align 4
  %1470 = sext i32 %1469 to i64
  store i64 %1470, i64* %RAX.i3587.phi.trans.insert, align 8
  %1471 = shl nsw i64 %1470, 2
  %1472 = add nsw i64 %1471, 7394480
  %1473 = add i64 %1467, 13
  store i64 %1473, i64* %3, align 8
  %1474 = inttoptr i64 %1472 to i32*
  %1475 = load i32, i32* %1474, align 4
  %1476 = bitcast [32 x %union.VectorReg]* %165 to float*
  %1477 = bitcast [32 x %union.VectorReg]* %165 to i32*
  store i32 %1475, i32* %1477, align 1
  %1478 = getelementptr inbounds i8, i8* %315, i64 4
  %1479 = bitcast i8* %1478 to float*
  store float 0.000000e+00, float* %1479, align 1
  %1480 = bitcast i64* %320 to float*
  store float 0.000000e+00, float* %1480, align 1
  %1481 = getelementptr inbounds i8, i8* %315, i64 12
  %1482 = bitcast i8* %1481 to float*
  store float 0.000000e+00, float* %1482, align 1
  %1483 = sext i32 %1457 to i64
  %1484 = mul nsw i64 %1483, %1483
  %1485 = trunc i64 %1484 to i32
  %1486 = and i64 %1484, 4294967295
  store i64 %1486, i64* %RCX.i4260.pre-phi, align 8
  %1487 = shl i64 %1484, 32
  %1488 = ashr exact i64 %1487, 32
  %1489 = icmp ne i64 %1488, %1484
  %1490 = zext i1 %1489 to i8
  store i8 %1490, i8* %32, align 1
  %1491 = and i32 %1485, 255
  %1492 = tail call i32 @llvm.ctpop.i32(i32 %1491)
  %1493 = trunc i32 %1492 to i8
  %1494 = and i8 %1493, 1
  %1495 = xor i8 %1494, 1
  store i8 %1495, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %1496 = lshr i32 %1485, 31
  %1497 = trunc i32 %1496 to i8
  store i8 %1497, i8* %51, align 1
  store i8 %1490, i8* %57, align 1
  %1498 = trunc i64 %1484 to i32
  %1499 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %1500 = load <2 x i32>, <2 x i32>* %1499, align 1
  %1501 = bitcast i64* %330 to <2 x i32>*
  %1502 = load <2 x i32>, <2 x i32>* %1501, align 1
  %1503 = sitofp i32 %1498 to float
  %1504 = bitcast %union.VectorReg* %322 to float*
  store float %1503, float* %1504, align 1
  %1505 = extractelement <2 x i32> %1500, i32 1
  %1506 = getelementptr inbounds i8, i8* %323, i64 4
  %1507 = bitcast i8* %1506 to i32*
  store i32 %1505, i32* %1507, align 1
  %1508 = extractelement <2 x i32> %1502, i32 0
  %1509 = bitcast i64* %330 to i32*
  store i32 %1508, i32* %1509, align 1
  %1510 = extractelement <2 x i32> %1502, i32 1
  %1511 = getelementptr inbounds i8, i8* %323, i64 12
  %1512 = bitcast i8* %1511 to i32*
  store i32 %1510, i32* %1512, align 1
  %1513 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %1514 = load <2 x float>, <2 x float>* %1513, align 1
  %1515 = bitcast i64* %320 to <2 x i32>*
  %1516 = load <2 x i32>, <2 x i32>* %1515, align 1
  %1517 = bitcast %union.VectorReg* %322 to <2 x float>*
  %1518 = load <2 x float>, <2 x float>* %1517, align 1
  %1519 = extractelement <2 x float> %1514, i32 0
  %1520 = extractelement <2 x float> %1518, i32 0
  %1521 = fdiv float %1519, %1520
  store float %1521, float* %1476, align 1
  %1522 = bitcast <2 x float> %1514 to <2 x i32>
  %1523 = extractelement <2 x i32> %1522, i32 1
  %1524 = bitcast i8* %1478 to i32*
  store i32 %1523, i32* %1524, align 1
  %1525 = extractelement <2 x i32> %1516, i32 0
  %1526 = bitcast i64* %320 to i32*
  store i32 %1525, i32* %1526, align 1
  %1527 = extractelement <2 x i32> %1516, i32 1
  %1528 = bitcast i8* %1481 to i32*
  store i32 %1527, i32* %1528, align 1
  %1529 = add i64 %1467, 40
  store i64 %1529, i64* %3, align 8
  %1530 = load i32, i32* %1432, align 4
  %1531 = sext i32 %1530 to i64
  store i64 %1531, i64* %RAX.i3587.phi.trans.insert, align 8
  %1532 = shl nsw i64 %1531, 2
  %1533 = add nsw i64 %1532, 7488256
  %1534 = add i64 %1467, 49
  store i64 %1534, i64* %3, align 8
  %1535 = load <2 x float>, <2 x float>* %1513, align 1
  %1536 = load <2 x i32>, <2 x i32>* %1515, align 1
  %1537 = inttoptr i64 %1533 to float*
  %1538 = load float, float* %1537, align 4
  %1539 = extractelement <2 x float> %1535, i32 0
  %1540 = fsub float %1539, %1538
  store float %1540, float* %1476, align 1
  %1541 = bitcast <2 x float> %1535 to <2 x i32>
  %1542 = extractelement <2 x i32> %1541, i32 1
  store i32 %1542, i32* %1524, align 1
  %1543 = extractelement <2 x i32> %1536, i32 0
  store i32 %1543, i32* %1526, align 1
  %1544 = extractelement <2 x i32> %1536, i32 1
  store i32 %1544, i32* %1528, align 1
  %1545 = load i64, i64* %RBP.i, align 8
  %1546 = add i64 %1545, -208
  %1547 = add i64 %1467, 57
  store i64 %1547, i64* %3, align 8
  %1548 = load <2 x float>, <2 x float>* %1513, align 1
  %1549 = extractelement <2 x float> %1548, i32 0
  %1550 = inttoptr i64 %1546 to float*
  store float %1549, float* %1550, align 4
  %1551 = load i64, i64* %RBP.i, align 8
  %1552 = add i64 %1551, -52
  %1553 = load i64, i64* %3, align 8
  %1554 = add i64 %1553, 4
  store i64 %1554, i64* %3, align 8
  %1555 = inttoptr i64 %1552 to i32*
  %1556 = load i32, i32* %1555, align 4
  %1557 = sext i32 %1556 to i64
  store i64 %1557, i64* %RAX.i3587.phi.trans.insert, align 8
  %1558 = shl nsw i64 %1557, 2
  %1559 = add nsw i64 %1558, 7394480
  %1560 = add i64 %1553, 13
  store i64 %1560, i64* %3, align 8
  %1561 = inttoptr i64 %1559 to i32*
  %1562 = load i32, i32* %1561, align 4
  store i32 %1562, i32* %1477, align 1
  store float 0.000000e+00, float* %1479, align 1
  store float 0.000000e+00, float* %1480, align 1
  store float 0.000000e+00, float* %1482, align 1
  %1563 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %1564 = sext i32 %1563 to i64
  %1565 = mul nsw i64 %1564, %1564
  %1566 = trunc i64 %1565 to i32
  %1567 = and i64 %1565, 4294967295
  store i64 %1567, i64* %RCX.i4260.pre-phi, align 8
  %1568 = shl i64 %1565, 32
  %1569 = ashr exact i64 %1568, 32
  %1570 = icmp ne i64 %1569, %1565
  %1571 = zext i1 %1570 to i8
  store i8 %1571, i8* %32, align 1
  %1572 = and i32 %1566, 255
  %1573 = tail call i32 @llvm.ctpop.i32(i32 %1572)
  %1574 = trunc i32 %1573 to i8
  %1575 = and i8 %1574, 1
  %1576 = xor i8 %1575, 1
  store i8 %1576, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %1577 = lshr i32 %1566, 31
  %1578 = trunc i32 %1577 to i8
  store i8 %1578, i8* %51, align 1
  store i8 %1571, i8* %57, align 1
  %1579 = trunc i64 %1565 to i32
  %1580 = load <2 x i32>, <2 x i32>* %1499, align 1
  %1581 = load <2 x i32>, <2 x i32>* %1501, align 1
  %1582 = sitofp i32 %1579 to float
  store float %1582, float* %1504, align 1
  %1583 = extractelement <2 x i32> %1580, i32 1
  store i32 %1583, i32* %1507, align 1
  %1584 = extractelement <2 x i32> %1581, i32 0
  store i32 %1584, i32* %1509, align 1
  %1585 = extractelement <2 x i32> %1581, i32 1
  store i32 %1585, i32* %1512, align 1
  %1586 = load <2 x float>, <2 x float>* %1513, align 1
  %1587 = load <2 x i32>, <2 x i32>* %1515, align 1
  %1588 = load <2 x float>, <2 x float>* %1517, align 1
  %1589 = extractelement <2 x float> %1586, i32 0
  %1590 = extractelement <2 x float> %1588, i32 0
  %1591 = fdiv float %1589, %1590
  store float %1591, float* %1476, align 1
  %1592 = bitcast <2 x float> %1586 to <2 x i32>
  %1593 = extractelement <2 x i32> %1592, i32 1
  store i32 %1593, i32* %1524, align 1
  %1594 = extractelement <2 x i32> %1587, i32 0
  store i32 %1594, i32* %1526, align 1
  %1595 = extractelement <2 x i32> %1587, i32 1
  store i32 %1595, i32* %1528, align 1
  %1596 = add i64 %1553, 40
  store i64 %1596, i64* %3, align 8
  %1597 = load i32, i32* %1555, align 4
  %1598 = sext i32 %1597 to i64
  store i64 %1598, i64* %RAX.i3587.phi.trans.insert, align 8
  %1599 = shl nsw i64 %1598, 2
  %1600 = add nsw i64 %1599, 7311072
  %1601 = add i64 %1553, 49
  store i64 %1601, i64* %3, align 8
  %1602 = load <2 x float>, <2 x float>* %1513, align 1
  %1603 = load <2 x i32>, <2 x i32>* %1515, align 1
  %1604 = inttoptr i64 %1600 to float*
  %1605 = load float, float* %1604, align 4
  %1606 = extractelement <2 x float> %1602, i32 0
  %1607 = fsub float %1606, %1605
  store float %1607, float* %1476, align 1
  %1608 = bitcast <2 x float> %1602 to <2 x i32>
  %1609 = extractelement <2 x i32> %1608, i32 1
  store i32 %1609, i32* %1524, align 1
  %1610 = extractelement <2 x i32> %1603, i32 0
  store i32 %1610, i32* %1526, align 1
  %1611 = extractelement <2 x i32> %1603, i32 1
  store i32 %1611, i32* %1528, align 1
  %1612 = load i64, i64* %RBP.i, align 8
  %1613 = add i64 %1612, -212
  %1614 = add i64 %1553, 57
  store i64 %1614, i64* %3, align 8
  %1615 = load <2 x float>, <2 x float>* %1513, align 1
  %1616 = extractelement <2 x float> %1615, i32 0
  %1617 = inttoptr i64 %1613 to float*
  store float %1616, float* %1617, align 4
  %1618 = load i64, i64* %3, align 8
  %1619 = add i64 %1618, 24
  store i64 %1619, i64* %3, align 8
  br label %block_.L_420b8b

block_.L_420b78:                                  ; preds = %block_420af3
  %1620 = bitcast [32 x %union.VectorReg]* %165 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1620, align 1
  %1621 = add i64 %1228, -208
  %1622 = add i64 %1467, 11
  store i64 %1622, i64* %3, align 8
  %1623 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %1624 = load <2 x float>, <2 x float>* %1623, align 1
  %1625 = extractelement <2 x float> %1624, i32 0
  %1626 = inttoptr i64 %1621 to float*
  store float %1625, float* %1626, align 4
  %1627 = load i64, i64* %RBP.i, align 8
  %1628 = add i64 %1627, -212
  %1629 = load i64, i64* %3, align 8
  %1630 = add i64 %1629, 8
  store i64 %1630, i64* %3, align 8
  %1631 = load <2 x float>, <2 x float>* %1623, align 1
  %1632 = extractelement <2 x float> %1631, i32 0
  %1633 = inttoptr i64 %1628 to float*
  store float %1632, float* %1633, align 4
  %.pre254 = load i64, i64* %3, align 8
  br label %block_.L_420b8b

block_.L_420b8b:                                  ; preds = %block_.L_420b78, %block_420b01
  %1634 = phi i64 [ %.pre254, %block_.L_420b78 ], [ %1619, %block_420b01 ]
  %1635 = add i64 %1634, 162
  br label %block_.L_420c2d

block_.L_420b90:                                  ; preds = %block_.L_420ae9
  %1636 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i8 0, i8* %32, align 1
  %1637 = and i32 %1636, 255
  %1638 = tail call i32 @llvm.ctpop.i32(i32 %1637)
  %1639 = trunc i32 %1638 to i8
  %1640 = and i8 %1639, 1
  %1641 = xor i8 %1640, 1
  store i8 %1641, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %1642 = icmp eq i32 %1636, 0
  %1643 = zext i1 %1642 to i8
  store i8 %1643, i8* %48, align 1
  %1644 = lshr i32 %1636, 31
  %1645 = trunc i32 %1644 to i8
  store i8 %1645, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v625 = select i1 %1642, i64 133, i64 14
  %1646 = add i64 %1455, %.v625
  store i64 %1646, i64* %3, align 8
  br i1 %1642, label %block_.L_420c15, label %block_420b9e

block_420b9e:                                     ; preds = %block_.L_420b90
  %1647 = add i64 %1646, 4
  store i64 %1647, i64* %3, align 8
  %1648 = load i32, i32* %1432, align 4
  %1649 = sext i32 %1648 to i64
  store i64 %1649, i64* %RAX.i3587.phi.trans.insert, align 8
  %1650 = shl nsw i64 %1649, 2
  %1651 = add nsw i64 %1650, 7394480
  %1652 = add i64 %1646, 13
  store i64 %1652, i64* %3, align 8
  %1653 = inttoptr i64 %1651 to i32*
  %1654 = load i32, i32* %1653, align 4
  %1655 = bitcast [32 x %union.VectorReg]* %165 to float*
  %1656 = bitcast [32 x %union.VectorReg]* %165 to i32*
  store i32 %1654, i32* %1656, align 1
  %1657 = getelementptr inbounds i8, i8* %315, i64 4
  %1658 = bitcast i8* %1657 to float*
  store float 0.000000e+00, float* %1658, align 1
  %1659 = bitcast i64* %320 to float*
  store float 0.000000e+00, float* %1659, align 1
  %1660 = getelementptr inbounds i8, i8* %315, i64 12
  %1661 = bitcast i8* %1660 to float*
  store float 0.000000e+00, float* %1661, align 1
  %1662 = sext i32 %1636 to i64
  %1663 = mul nsw i64 %1662, %1662
  %1664 = trunc i64 %1663 to i32
  %1665 = and i64 %1663, 4294967295
  store i64 %1665, i64* %RCX.i4260.pre-phi, align 8
  %1666 = shl i64 %1663, 32
  %1667 = ashr exact i64 %1666, 32
  %1668 = icmp ne i64 %1667, %1663
  %1669 = zext i1 %1668 to i8
  store i8 %1669, i8* %32, align 1
  %1670 = and i32 %1664, 255
  %1671 = tail call i32 @llvm.ctpop.i32(i32 %1670)
  %1672 = trunc i32 %1671 to i8
  %1673 = and i8 %1672, 1
  %1674 = xor i8 %1673, 1
  store i8 %1674, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %1675 = lshr i32 %1664, 31
  %1676 = trunc i32 %1675 to i8
  store i8 %1676, i8* %51, align 1
  store i8 %1669, i8* %57, align 1
  %1677 = trunc i64 %1663 to i32
  %1678 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %1679 = load <2 x i32>, <2 x i32>* %1678, align 1
  %1680 = bitcast i64* %330 to <2 x i32>*
  %1681 = load <2 x i32>, <2 x i32>* %1680, align 1
  %1682 = sitofp i32 %1677 to float
  %1683 = bitcast %union.VectorReg* %322 to float*
  store float %1682, float* %1683, align 1
  %1684 = extractelement <2 x i32> %1679, i32 1
  %1685 = getelementptr inbounds i8, i8* %323, i64 4
  %1686 = bitcast i8* %1685 to i32*
  store i32 %1684, i32* %1686, align 1
  %1687 = extractelement <2 x i32> %1681, i32 0
  %1688 = bitcast i64* %330 to i32*
  store i32 %1687, i32* %1688, align 1
  %1689 = extractelement <2 x i32> %1681, i32 1
  %1690 = getelementptr inbounds i8, i8* %323, i64 12
  %1691 = bitcast i8* %1690 to i32*
  store i32 %1689, i32* %1691, align 1
  %1692 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %1693 = load <2 x float>, <2 x float>* %1692, align 1
  %1694 = bitcast i64* %320 to <2 x i32>*
  %1695 = load <2 x i32>, <2 x i32>* %1694, align 1
  %1696 = bitcast %union.VectorReg* %322 to <2 x float>*
  %1697 = load <2 x float>, <2 x float>* %1696, align 1
  %1698 = extractelement <2 x float> %1693, i32 0
  %1699 = extractelement <2 x float> %1697, i32 0
  %1700 = fdiv float %1698, %1699
  store float %1700, float* %1655, align 1
  %1701 = bitcast <2 x float> %1693 to <2 x i32>
  %1702 = extractelement <2 x i32> %1701, i32 1
  %1703 = bitcast i8* %1657 to i32*
  store i32 %1702, i32* %1703, align 1
  %1704 = extractelement <2 x i32> %1695, i32 0
  %1705 = bitcast i64* %320 to i32*
  store i32 %1704, i32* %1705, align 1
  %1706 = extractelement <2 x i32> %1695, i32 1
  %1707 = bitcast i8* %1660 to i32*
  store i32 %1706, i32* %1707, align 1
  %1708 = add i64 %1646, 40
  store i64 %1708, i64* %3, align 8
  %1709 = load i32, i32* %1432, align 4
  %1710 = sext i32 %1709 to i64
  store i64 %1710, i64* %RAX.i3587.phi.trans.insert, align 8
  %1711 = shl nsw i64 %1710, 2
  %1712 = add nsw i64 %1711, 7488256
  %1713 = add i64 %1646, 49
  store i64 %1713, i64* %3, align 8
  %1714 = load <2 x float>, <2 x float>* %1692, align 1
  %1715 = load <2 x i32>, <2 x i32>* %1694, align 1
  %1716 = inttoptr i64 %1712 to float*
  %1717 = load float, float* %1716, align 4
  %1718 = extractelement <2 x float> %1714, i32 0
  %1719 = fsub float %1718, %1717
  store float %1719, float* %1655, align 1
  %1720 = bitcast <2 x float> %1714 to <2 x i32>
  %1721 = extractelement <2 x i32> %1720, i32 1
  store i32 %1721, i32* %1703, align 1
  %1722 = extractelement <2 x i32> %1715, i32 0
  store i32 %1722, i32* %1705, align 1
  %1723 = extractelement <2 x i32> %1715, i32 1
  store i32 %1723, i32* %1707, align 1
  %1724 = load i64, i64* %RBP.i, align 8
  %1725 = add i64 %1724, -208
  %1726 = add i64 %1646, 57
  store i64 %1726, i64* %3, align 8
  %1727 = load <2 x float>, <2 x float>* %1692, align 1
  %1728 = extractelement <2 x float> %1727, i32 0
  %1729 = inttoptr i64 %1725 to float*
  store float %1728, float* %1729, align 4
  %1730 = load i64, i64* %RBP.i, align 8
  %1731 = add i64 %1730, -52
  %1732 = load i64, i64* %3, align 8
  %1733 = add i64 %1732, 4
  store i64 %1733, i64* %3, align 8
  %1734 = inttoptr i64 %1731 to i32*
  %1735 = load i32, i32* %1734, align 4
  %1736 = sext i32 %1735 to i64
  store i64 %1736, i64* %RAX.i3587.phi.trans.insert, align 8
  %1737 = shl nsw i64 %1736, 2
  %1738 = add nsw i64 %1737, 7394480
  %1739 = add i64 %1732, 13
  store i64 %1739, i64* %3, align 8
  %1740 = inttoptr i64 %1738 to i32*
  %1741 = load i32, i32* %1740, align 4
  store i32 %1741, i32* %1656, align 1
  store float 0.000000e+00, float* %1658, align 1
  store float 0.000000e+00, float* %1659, align 1
  store float 0.000000e+00, float* %1661, align 1
  %1742 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %1743 = sext i32 %1742 to i64
  %1744 = mul nsw i64 %1743, %1743
  %1745 = trunc i64 %1744 to i32
  %1746 = and i64 %1744, 4294967295
  store i64 %1746, i64* %RCX.i4260.pre-phi, align 8
  %1747 = shl i64 %1744, 32
  %1748 = ashr exact i64 %1747, 32
  %1749 = icmp ne i64 %1748, %1744
  %1750 = zext i1 %1749 to i8
  store i8 %1750, i8* %32, align 1
  %1751 = and i32 %1745, 255
  %1752 = tail call i32 @llvm.ctpop.i32(i32 %1751)
  %1753 = trunc i32 %1752 to i8
  %1754 = and i8 %1753, 1
  %1755 = xor i8 %1754, 1
  store i8 %1755, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %1756 = lshr i32 %1745, 31
  %1757 = trunc i32 %1756 to i8
  store i8 %1757, i8* %51, align 1
  store i8 %1750, i8* %57, align 1
  %1758 = trunc i64 %1744 to i32
  %1759 = load <2 x i32>, <2 x i32>* %1678, align 1
  %1760 = load <2 x i32>, <2 x i32>* %1680, align 1
  %1761 = sitofp i32 %1758 to float
  store float %1761, float* %1683, align 1
  %1762 = extractelement <2 x i32> %1759, i32 1
  store i32 %1762, i32* %1686, align 1
  %1763 = extractelement <2 x i32> %1760, i32 0
  store i32 %1763, i32* %1688, align 1
  %1764 = extractelement <2 x i32> %1760, i32 1
  store i32 %1764, i32* %1691, align 1
  %1765 = load <2 x float>, <2 x float>* %1692, align 1
  %1766 = load <2 x i32>, <2 x i32>* %1694, align 1
  %1767 = load <2 x float>, <2 x float>* %1696, align 1
  %1768 = extractelement <2 x float> %1765, i32 0
  %1769 = extractelement <2 x float> %1767, i32 0
  %1770 = fdiv float %1768, %1769
  store float %1770, float* %1655, align 1
  %1771 = bitcast <2 x float> %1765 to <2 x i32>
  %1772 = extractelement <2 x i32> %1771, i32 1
  store i32 %1772, i32* %1703, align 1
  %1773 = extractelement <2 x i32> %1766, i32 0
  store i32 %1773, i32* %1705, align 1
  %1774 = extractelement <2 x i32> %1766, i32 1
  store i32 %1774, i32* %1707, align 1
  %1775 = add i64 %1732, 40
  store i64 %1775, i64* %3, align 8
  %1776 = load i32, i32* %1734, align 4
  %1777 = sext i32 %1776 to i64
  store i64 %1777, i64* %RAX.i3587.phi.trans.insert, align 8
  %1778 = shl nsw i64 %1777, 2
  %1779 = add nsw i64 %1778, 7311072
  %1780 = add i64 %1732, 49
  store i64 %1780, i64* %3, align 8
  %1781 = load <2 x float>, <2 x float>* %1692, align 1
  %1782 = load <2 x i32>, <2 x i32>* %1694, align 1
  %1783 = inttoptr i64 %1779 to float*
  %1784 = load float, float* %1783, align 4
  %1785 = extractelement <2 x float> %1781, i32 0
  %1786 = fsub float %1785, %1784
  store float %1786, float* %1655, align 1
  %1787 = bitcast <2 x float> %1781 to <2 x i32>
  %1788 = extractelement <2 x i32> %1787, i32 1
  store i32 %1788, i32* %1703, align 1
  %1789 = extractelement <2 x i32> %1782, i32 0
  store i32 %1789, i32* %1705, align 1
  %1790 = extractelement <2 x i32> %1782, i32 1
  store i32 %1790, i32* %1707, align 1
  %1791 = load i64, i64* %RBP.i, align 8
  %1792 = add i64 %1791, -212
  %1793 = add i64 %1732, 57
  store i64 %1793, i64* %3, align 8
  %1794 = load <2 x float>, <2 x float>* %1692, align 1
  %1795 = extractelement <2 x float> %1794, i32 0
  %1796 = inttoptr i64 %1792 to float*
  store float %1795, float* %1796, align 4
  %1797 = load i64, i64* %3, align 8
  %1798 = add i64 %1797, 24
  store i64 %1798, i64* %3, align 8
  br label %block_.L_420c28

block_.L_420c15:                                  ; preds = %block_.L_420b90
  %1799 = bitcast [32 x %union.VectorReg]* %165 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1799, align 1
  %1800 = add i64 %1228, -208
  %1801 = add i64 %1646, 11
  store i64 %1801, i64* %3, align 8
  %1802 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %1803 = load <2 x float>, <2 x float>* %1802, align 1
  %1804 = extractelement <2 x float> %1803, i32 0
  %1805 = inttoptr i64 %1800 to float*
  store float %1804, float* %1805, align 4
  %1806 = load i64, i64* %RBP.i, align 8
  %1807 = add i64 %1806, -212
  %1808 = load i64, i64* %3, align 8
  %1809 = add i64 %1808, 8
  store i64 %1809, i64* %3, align 8
  %1810 = load <2 x float>, <2 x float>* %1802, align 1
  %1811 = extractelement <2 x float> %1810, i32 0
  %1812 = inttoptr i64 %1807 to float*
  store float %1811, float* %1812, align 4
  %.pre255 = load i64, i64* %3, align 8
  br label %block_.L_420c28

block_.L_420c28:                                  ; preds = %block_.L_420c15, %block_420b9e
  %1813 = phi i64 [ %.pre255, %block_.L_420c15 ], [ %1798, %block_420b9e ]
  %1814 = add i64 %1813, 5
  store i64 %1814, i64* %3, align 8
  br label %block_.L_420c2d

block_.L_420c2d:                                  ; preds = %block_.L_420c28, %block_.L_420b8b
  %storemerge161 = phi i64 [ %1635, %block_.L_420b8b ], [ %1814, %block_.L_420c28 ]
  %1815 = add i64 %storemerge161, 5
  store i64 %1815, i64* %3, align 8
  br label %block_.L_420c32

block_.L_420c32:                                  ; preds = %block_.L_420c2d, %block_.L_420ae4
  %storemerge149 = phi i64 [ %1429, %block_.L_420ae4 ], [ %1815, %block_.L_420c2d ]
  %1816 = load i64, i64* %RBP.i, align 8
  %1817 = add i64 %1816, -160
  %1818 = add i64 %storemerge149, 6
  store i64 %1818, i64* %3, align 8
  %1819 = inttoptr i64 %1817 to i32*
  %1820 = load i32, i32* %1819, align 4
  %1821 = zext i32 %1820 to i64
  store i64 %1821, i64* %RAX.i3587.phi.trans.insert, align 8
  %1822 = add i64 %1816, -96
  %1823 = add i64 %storemerge149, 9
  store i64 %1823, i64* %3, align 8
  %1824 = inttoptr i64 %1822 to i32*
  store i32 %1820, i32* %1824, align 4
  %1825 = load i64, i64* %RBP.i, align 8
  %1826 = add i64 %1825, -164
  %1827 = load i64, i64* %3, align 8
  %1828 = add i64 %1827, 6
  store i64 %1828, i64* %3, align 8
  %1829 = inttoptr i64 %1826 to i32*
  %1830 = load i32, i32* %1829, align 4
  %1831 = zext i32 %1830 to i64
  store i64 %1831, i64* %RAX.i3587.phi.trans.insert, align 8
  %1832 = add i64 %1825, -100
  %1833 = add i64 %1827, 9
  store i64 %1833, i64* %3, align 8
  %1834 = inttoptr i64 %1832 to i32*
  store i32 %1830, i32* %1834, align 4
  %1835 = load i64, i64* %RBP.i, align 8
  %1836 = add i64 %1835, -132
  %1837 = load i64, i64* %3, align 8
  %1838 = add i64 %1837, 6
  store i64 %1838, i64* %3, align 8
  %1839 = inttoptr i64 %1836 to i32*
  %1840 = load i32, i32* %1839, align 4
  %1841 = zext i32 %1840 to i64
  store i64 %1841, i64* %RAX.i3587.phi.trans.insert, align 8
  %1842 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %1842, i64* %RCX.i4260.pre-phi, align 8
  %1843 = add i64 %1835, -96
  %1844 = add i64 %1837, 17
  store i64 %1844, i64* %3, align 8
  %1845 = inttoptr i64 %1843 to i32*
  %1846 = load i32, i32* %1845, align 4
  %1847 = zext i32 %1846 to i64
  store i64 %1847, i64* %RDX.i4317.pre-phi, align 8
  %1848 = add i64 %1835, -136
  %1849 = add i64 %1837, 23
  store i64 %1849, i64* %3, align 8
  %1850 = inttoptr i64 %1848 to i32*
  %1851 = load i32, i32* %1850, align 4
  %1852 = zext i32 %1851 to i64
  store i64 %1852, i64* %RSI.i739, align 8
  %1853 = add i64 %1835, -240
  %1854 = add i64 %1837, 30
  store i64 %1854, i64* %3, align 8
  %1855 = inttoptr i64 %1853 to i64*
  store i64 %1842, i64* %1855, align 8
  %1856 = load i32, i32* %ESI.i1656, align 4
  %1857 = zext i32 %1856 to i64
  %1858 = load i64, i64* %3, align 8
  store i64 %1857, i64* %RCX.i4260.pre-phi, align 8
  %1859 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %1860 = add i64 %1858, 4
  store i64 %1860, i64* %3, align 8
  %1861 = trunc i32 %1856 to i5
  switch i5 %1861, label %1868 [
    i5 0, label %routine_shll__cl___edx.exit5612
    i5 1, label %1862
  ]

; <label>:1862:                                   ; preds = %block_.L_420c32
  %1863 = trunc i64 %1859 to i32
  %1864 = shl i32 %1863, 1
  %1865 = icmp slt i32 %1863, 0
  %1866 = icmp slt i32 %1864, 0
  %1867 = xor i1 %1865, %1866
  br label %1878

; <label>:1868:                                   ; preds = %block_.L_420c32
  %1869 = and i32 %1856, 31
  %1870 = zext i32 %1869 to i64
  %1871 = add nuw nsw i64 %1870, 4294967295
  %1872 = and i64 %1859, 4294967295
  %1873 = and i64 %1871, 4294967295
  %1874 = shl i64 %1872, %1873
  %1875 = trunc i64 %1874 to i32
  %1876 = icmp slt i32 %1875, 0
  %1877 = shl i32 %1875, 1
  br label %1878

; <label>:1878:                                   ; preds = %1868, %1862
  %1879 = phi i1 [ %1865, %1862 ], [ %1876, %1868 ]
  %1880 = phi i1 [ %1867, %1862 ], [ false, %1868 ]
  %1881 = phi i32 [ %1864, %1862 ], [ %1877, %1868 ]
  %1882 = zext i32 %1881 to i64
  store i64 %1882, i64* %RDX.i4317.pre-phi, align 8
  %1883 = zext i1 %1879 to i8
  store i8 %1883, i8* %32, align 1
  %1884 = and i32 %1881, 254
  %1885 = tail call i32 @llvm.ctpop.i32(i32 %1884)
  %1886 = trunc i32 %1885 to i8
  %1887 = and i8 %1886, 1
  %1888 = xor i8 %1887, 1
  store i8 %1888, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %1889 = icmp eq i32 %1881, 0
  %1890 = zext i1 %1889 to i8
  store i8 %1890, i8* %48, align 1
  %1891 = lshr i32 %1881, 31
  %1892 = trunc i32 %1891 to i8
  store i8 %1892, i8* %51, align 1
  %1893 = zext i1 %1880 to i8
  store i8 %1893, i8* %57, align 1
  br label %routine_shll__cl___edx.exit5612

routine_shll__cl___edx.exit5612:                  ; preds = %1878, %block_.L_420c32
  %1894 = phi i64 [ %1882, %1878 ], [ %1859, %block_.L_420c32 ]
  %1895 = load i64, i64* %RBP.i, align 8
  %1896 = add i64 %1895, -152
  %1897 = add i64 %1858, 10
  store i64 %1897, i64* %3, align 8
  %1898 = trunc i64 %1894 to i32
  %1899 = inttoptr i64 %1896 to i32*
  %1900 = load i32, i32* %1899, align 4
  %1901 = sub i32 %1898, %1900
  %1902 = zext i32 %1901 to i64
  store i64 %1902, i64* %RDX.i4317.pre-phi, align 8
  %1903 = icmp ult i32 %1898, %1900
  %1904 = zext i1 %1903 to i8
  store i8 %1904, i8* %32, align 1
  %1905 = and i32 %1901, 255
  %1906 = tail call i32 @llvm.ctpop.i32(i32 %1905)
  %1907 = trunc i32 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = xor i8 %1908, 1
  store i8 %1909, i8* %39, align 1
  %1910 = xor i32 %1900, %1898
  %1911 = xor i32 %1910, %1901
  %1912 = lshr i32 %1911, 4
  %1913 = trunc i32 %1912 to i8
  %1914 = and i8 %1913, 1
  store i8 %1914, i8* %45, align 1
  %1915 = icmp eq i32 %1901, 0
  %1916 = zext i1 %1915 to i8
  store i8 %1916, i8* %48, align 1
  %1917 = lshr i32 %1901, 31
  %1918 = trunc i32 %1917 to i8
  store i8 %1918, i8* %51, align 1
  %1919 = lshr i32 %1898, 31
  %1920 = lshr i32 %1900, 31
  %1921 = xor i32 %1920, %1919
  %1922 = xor i32 %1917, %1919
  %1923 = add nuw nsw i32 %1922, %1921
  %1924 = icmp eq i32 %1923, 2
  %1925 = zext i1 %1924 to i8
  store i8 %1925, i8* %57, align 1
  %1926 = sext i32 %1901 to i64
  store i64 %1926, i64* %RDI.i1133, align 8
  %R8.i5602 = getelementptr inbounds %union.anon, %union.anon* %115, i64 0, i32 0
  %1927 = add i64 %1895, -240
  %1928 = add i64 %1858, 20
  store i64 %1928, i64* %3, align 8
  %1929 = inttoptr i64 %1927 to i64*
  %1930 = load i64, i64* %1929, align 8
  store i64 %1930, i64* %R8.i5602, align 8
  %1931 = shl nsw i64 %1926, 2
  %1932 = add i64 %1931, %1930
  %1933 = add i64 %1858, 24
  store i64 %1933, i64* %3, align 8
  %1934 = inttoptr i64 %1932 to i32*
  %1935 = load i32, i32* %1934, align 4
  %1936 = zext i32 %1935 to i64
  store i64 %1936, i64* %RDX.i4317.pre-phi, align 8
  %1937 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %1937, i64* %RDI.i1133, align 8
  %1938 = add i64 %1895, -100
  %1939 = add i64 %1858, 35
  store i64 %1939, i64* %3, align 8
  %1940 = inttoptr i64 %1938 to i32*
  %1941 = load i32, i32* %1940, align 4
  %1942 = zext i32 %1941 to i64
  store i64 %1942, i64* %RSI.i739, align 8
  %1943 = add i64 %1895, -136
  %1944 = add i64 %1858, 41
  store i64 %1944, i64* %3, align 8
  %1945 = inttoptr i64 %1943 to i32*
  %1946 = load i32, i32* %1945, align 4
  %1947 = zext i32 %1946 to i64
  store i64 %1947, i64* %RCX.i4260.pre-phi, align 8
  %1948 = add i64 %1858, 43
  store i64 %1948, i64* %3, align 8
  %1949 = trunc i32 %1946 to i5
  switch i5 %1949, label %1955 [
    i5 0, label %routine_shll__cl___esi.exit5587
    i5 1, label %1950
  ]

; <label>:1950:                                   ; preds = %routine_shll__cl___edx.exit5612
  %1951 = shl i32 %1941, 1
  %1952 = icmp slt i32 %1941, 0
  %1953 = icmp slt i32 %1951, 0
  %1954 = xor i1 %1952, %1953
  br label %1964

; <label>:1955:                                   ; preds = %routine_shll__cl___edx.exit5612
  %1956 = and i32 %1946, 31
  %1957 = zext i32 %1956 to i64
  %1958 = add nuw nsw i64 %1957, 4294967295
  %1959 = and i64 %1958, 4294967295
  %1960 = shl i64 %1942, %1959
  %1961 = trunc i64 %1960 to i32
  %1962 = icmp slt i32 %1961, 0
  %1963 = shl i32 %1961, 1
  br label %1964

; <label>:1964:                                   ; preds = %1955, %1950
  %1965 = phi i1 [ %1952, %1950 ], [ %1962, %1955 ]
  %1966 = phi i1 [ %1954, %1950 ], [ false, %1955 ]
  %1967 = phi i32 [ %1951, %1950 ], [ %1963, %1955 ]
  %1968 = zext i32 %1967 to i64
  store i64 %1968, i64* %RSI.i739, align 8
  %1969 = zext i1 %1965 to i8
  store i8 %1969, i8* %32, align 1
  %1970 = and i32 %1967, 254
  %1971 = tail call i32 @llvm.ctpop.i32(i32 %1970)
  %1972 = trunc i32 %1971 to i8
  %1973 = and i8 %1972, 1
  %1974 = xor i8 %1973, 1
  store i8 %1974, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %1975 = icmp eq i32 %1967, 0
  %1976 = zext i1 %1975 to i8
  store i8 %1976, i8* %48, align 1
  %1977 = lshr i32 %1967, 31
  %1978 = trunc i32 %1977 to i8
  store i8 %1978, i8* %51, align 1
  %1979 = zext i1 %1966 to i8
  store i8 %1979, i8* %57, align 1
  br label %routine_shll__cl___esi.exit5587

routine_shll__cl___esi.exit5587:                  ; preds = %1964, %routine_shll__cl___edx.exit5612
  %1980 = phi i32 [ %1967, %1964 ], [ %1941, %routine_shll__cl___edx.exit5612 ]
  %1981 = add i64 %1895, -156
  %1982 = add i64 %1858, 49
  store i64 %1982, i64* %3, align 8
  %1983 = inttoptr i64 %1981 to i32*
  %1984 = load i32, i32* %1983, align 4
  %1985 = sub i32 %1980, %1984
  %1986 = zext i32 %1985 to i64
  store i64 %1986, i64* %RSI.i739, align 8
  %1987 = icmp ult i32 %1980, %1984
  %1988 = zext i1 %1987 to i8
  store i8 %1988, i8* %32, align 1
  %1989 = and i32 %1985, 255
  %1990 = tail call i32 @llvm.ctpop.i32(i32 %1989)
  %1991 = trunc i32 %1990 to i8
  %1992 = and i8 %1991, 1
  %1993 = xor i8 %1992, 1
  store i8 %1993, i8* %39, align 1
  %1994 = xor i32 %1984, %1980
  %1995 = xor i32 %1994, %1985
  %1996 = lshr i32 %1995, 4
  %1997 = trunc i32 %1996 to i8
  %1998 = and i8 %1997, 1
  store i8 %1998, i8* %45, align 1
  %1999 = icmp eq i32 %1985, 0
  %2000 = zext i1 %1999 to i8
  store i8 %2000, i8* %48, align 1
  %2001 = lshr i32 %1985, 31
  %2002 = trunc i32 %2001 to i8
  store i8 %2002, i8* %51, align 1
  %2003 = lshr i32 %1980, 31
  %2004 = lshr i32 %1984, 31
  %2005 = xor i32 %2004, %2003
  %2006 = xor i32 %2001, %2003
  %2007 = add nuw nsw i32 %2006, %2005
  %2008 = icmp eq i32 %2007, 2
  %2009 = zext i1 %2008 to i8
  store i8 %2009, i8* %57, align 1
  %R9.i5580 = getelementptr inbounds %union.anon, %union.anon* %122, i64 0, i32 0
  %2010 = sext i32 %1985 to i64
  store i64 %2010, i64* %R9.i5580, align 8
  %2011 = shl nsw i64 %2010, 2
  %2012 = add i64 %1937, %2011
  %2013 = add i64 %1858, 56
  store i64 %2013, i64* %3, align 8
  %2014 = inttoptr i64 %2012 to i32*
  %2015 = load i32, i32* %2014, align 4
  %2016 = add i32 %2015, %1935
  %2017 = zext i32 %2016 to i64
  store i64 %2017, i64* %RDX.i4317.pre-phi, align 8
  %2018 = icmp ult i32 %2016, %1935
  %2019 = icmp ult i32 %2016, %2015
  %2020 = or i1 %2018, %2019
  %2021 = zext i1 %2020 to i8
  store i8 %2021, i8* %32, align 1
  %2022 = and i32 %2016, 255
  %2023 = tail call i32 @llvm.ctpop.i32(i32 %2022)
  %2024 = trunc i32 %2023 to i8
  %2025 = and i8 %2024, 1
  %2026 = xor i8 %2025, 1
  store i8 %2026, i8* %39, align 1
  %2027 = xor i32 %2015, %1935
  %2028 = xor i32 %2027, %2016
  %2029 = lshr i32 %2028, 4
  %2030 = trunc i32 %2029 to i8
  %2031 = and i8 %2030, 1
  store i8 %2031, i8* %45, align 1
  %2032 = icmp eq i32 %2016, 0
  %2033 = zext i1 %2032 to i8
  store i8 %2033, i8* %48, align 1
  %2034 = lshr i32 %2016, 31
  %2035 = trunc i32 %2034 to i8
  store i8 %2035, i8* %51, align 1
  %2036 = lshr i32 %1935, 31
  %2037 = lshr i32 %2015, 31
  %2038 = xor i32 %2034, %2036
  %2039 = xor i32 %2034, %2037
  %2040 = add nuw nsw i32 %2038, %2039
  %2041 = icmp eq i32 %2040, 2
  %2042 = zext i1 %2041 to i8
  store i8 %2042, i8* %57, align 1
  %2043 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %2044 = shl i64 %2043, 32
  %2045 = ashr exact i64 %2044, 32
  %2046 = sext i32 %2016 to i64
  %2047 = mul nsw i64 %2046, %2045
  %2048 = shl i64 %2047, 32
  %2049 = ashr i64 %2048, 47
  %2050 = lshr i64 %2049, 1
  %2051 = trunc i64 %2049 to i8
  %2052 = and i8 %2051, 1
  %2053 = trunc i64 %2050 to i32
  %2054 = and i64 %2050, 4294967295
  store i64 %2054, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %2052, i8* %32, align 1
  %2055 = and i32 %2053, 255
  %2056 = tail call i32 @llvm.ctpop.i32(i32 %2055)
  %2057 = trunc i32 %2056 to i8
  %2058 = and i8 %2057, 1
  %2059 = xor i8 %2058, 1
  store i8 %2059, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %2060 = icmp eq i32 %2053, 0
  %2061 = zext i1 %2060 to i8
  store i8 %2061, i8* %48, align 1
  %2062 = lshr i64 %2049, 32
  %2063 = trunc i64 %2062 to i8
  %2064 = and i8 %2063, 1
  store i8 %2064, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %2065 = load i64, i64* %RBP.i, align 8
  %2066 = add i64 %2065, -104
  %2067 = trunc i64 %2050 to i32
  %2068 = add i64 %1858, 65
  store i64 %2068, i64* %3, align 8
  %2069 = inttoptr i64 %2066 to i32*
  store i32 %2067, i32* %2069, align 4
  %2070 = load i64, i64* %RBP.i, align 8
  %2071 = add i64 %2070, -128
  %2072 = load i64, i64* %3, align 8
  %2073 = add i64 %2072, 4
  store i64 %2073, i64* %3, align 8
  %2074 = inttoptr i64 %2071 to i64*
  %2075 = load i64, i64* %2074, align 8
  store i64 %2075, i64* %RDI.i1133, align 8
  %2076 = add i64 %2070, -32
  %2077 = add i64 %2072, 8
  store i64 %2077, i64* %3, align 8
  %2078 = inttoptr i64 %2076 to i64*
  %2079 = load i64, i64* %2078, align 8
  store i64 %2079, i64* %RSI.i739, align 8
  %2080 = add i64 %2070, -112
  %2081 = add i64 %2072, 12
  store i64 %2081, i64* %3, align 8
  %2082 = inttoptr i64 %2080 to i64*
  %2083 = load i64, i64* %2082, align 8
  store i64 %2083, i64* %RDX.i4317.pre-phi, align 8
  %2084 = add i64 %2070, -140
  %2085 = add i64 %2072, 18
  store i64 %2085, i64* %3, align 8
  %2086 = inttoptr i64 %2084 to i32*
  %2087 = load i32, i32* %2086, align 4
  %2088 = zext i32 %2087 to i64
  store i64 %2088, i64* %RCX.i4260.pre-phi, align 8
  %2089 = add i64 %2070, -144
  %2090 = add i64 %2072, 25
  store i64 %2090, i64* %3, align 8
  %2091 = inttoptr i64 %2089 to i32*
  %2092 = load i32, i32* %2091, align 4
  %2093 = zext i32 %2092 to i64
  store i64 %2093, i64* %R8.i5602, align 8
  %2094 = add i64 %2070, -148
  %2095 = add i64 %2072, 32
  store i64 %2095, i64* %3, align 8
  %2096 = inttoptr i64 %2094 to i32*
  %2097 = load i32, i32* %2096, align 4
  %2098 = zext i32 %2097 to i64
  store i64 %2098, i64* %R9.i5580, align 8
  %2099 = add i64 %2070, -104
  %2100 = add i64 %2072, 35
  store i64 %2100, i64* %3, align 8
  %2101 = inttoptr i64 %2099 to i32*
  %2102 = load i32, i32* %2101, align 4
  %2103 = zext i32 %2102 to i64
  store i64 %2103, i64* %RAX.i3587.phi.trans.insert, align 8
  %2104 = add i64 %2070, -80
  %2105 = add i64 %2072, 39
  store i64 %2105, i64* %3, align 8
  %2106 = inttoptr i64 %2104 to i32*
  %2107 = load i32, i32* %2106, align 4
  %2108 = zext i32 %2107 to i64
  store i64 %2108, i64* %68, align 8
  %R11D.i5540 = bitcast %union.anon* %74 to i32*
  %2109 = add i64 %2070, -96
  %2110 = add i64 %2072, 43
  store i64 %2110, i64* %3, align 8
  %2111 = inttoptr i64 %2109 to i32*
  %2112 = load i32, i32* %2111, align 4
  %2113 = zext i32 %2112 to i64
  store i64 %2113, i64* %R11.i, align 8
  %2114 = add i64 %2070, -100
  %2115 = add i64 %2072, 46
  store i64 %2115, i64* %3, align 8
  %2116 = inttoptr i64 %2114 to i32*
  %2117 = load i32, i32* %2116, align 4
  %2118 = zext i32 %2117 to i64
  store i64 %2118, i64* %RBX.i615, align 8
  %2119 = bitcast i64* %6 to i32**
  %2120 = load i32*, i32** %2119, align 8
  %2121 = add i64 %2072, 49
  store i64 %2121, i64* %3, align 8
  store i32 %2102, i32* %2120, align 4
  %2122 = load i64, i64* %6, align 8
  %2123 = add i64 %2122, 8
  %2124 = load i32, i32* %R10D.i761, align 4
  %2125 = load i64, i64* %3, align 8
  %2126 = add i64 %2125, 5
  store i64 %2126, i64* %3, align 8
  %2127 = inttoptr i64 %2123 to i32*
  store i32 %2124, i32* %2127, align 4
  %2128 = load i64, i64* %6, align 8
  %2129 = add i64 %2128, 16
  %2130 = load i32, i32* %R11D.i5540, align 4
  %2131 = load i64, i64* %3, align 8
  %2132 = add i64 %2131, 5
  store i64 %2132, i64* %3, align 8
  %2133 = inttoptr i64 %2129 to i32*
  store i32 %2130, i32* %2133, align 4
  %EBX.i5525 = bitcast %union.anon* %22 to i32*
  %2134 = load i64, i64* %6, align 8
  %2135 = add i64 %2134, 24
  %2136 = load i32, i32* %EBX.i5525, align 4
  %2137 = load i64, i64* %3, align 8
  %2138 = add i64 %2137, 4
  store i64 %2138, i64* %3, align 8
  %2139 = inttoptr i64 %2135 to i32*
  store i32 %2136, i32* %2139, align 4
  %2140 = load i64, i64* %3, align 8
  %2141 = add i64 %2140, -2098
  %2142 = add i64 %2140, 5
  %2143 = load i64, i64* %6, align 8
  %2144 = add i64 %2143, -8
  %2145 = inttoptr i64 %2144 to i64*
  store i64 %2142, i64* %2145, align 8
  store i64 %2144, i64* %6, align 8
  store i64 %2141, i64* %3, align 8
  %call2_420ce2 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %2141, %struct.Memory* %1227)
  %2146 = load i64, i64* %RBP.i, align 8
  %2147 = add i64 %2146, -104
  %2148 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %2149 = load i64, i64* %3, align 8
  %2150 = add i64 %2149, 3
  store i64 %2150, i64* %3, align 8
  %2151 = inttoptr i64 %2147 to i32*
  store i32 %2148, i32* %2151, align 4
  %2152 = load i64, i64* %RBP.i, align 8
  %2153 = add i64 %2152, -104
  %2154 = load i64, i64* %3, align 8
  %2155 = add i64 %2154, 3
  store i64 %2155, i64* %3, align 8
  %2156 = inttoptr i64 %2153 to i32*
  %2157 = load i32, i32* %2156, align 4
  %2158 = zext i32 %2157 to i64
  store i64 %2158, i64* %RAX.i3587.phi.trans.insert, align 8
  %2159 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %2159, i64* %RDX.i4317.pre-phi, align 8
  %2160 = add i64 %2152, -76
  %2161 = add i64 %2154, 15
  store i64 %2161, i64* %3, align 8
  %2162 = inttoptr i64 %2160 to i32*
  %2163 = load i32, i32* %2162, align 4
  %2164 = sext i32 %2163 to i64
  store i64 %2164, i64* %RSI.i739, align 8
  %2165 = shl nsw i64 %2164, 3
  %2166 = add i64 %2165, %2159
  %2167 = add i64 %2154, 19
  store i64 %2167, i64* %3, align 8
  %2168 = inttoptr i64 %2166 to i64*
  %2169 = load i64, i64* %2168, align 8
  store i64 %2169, i64* %RDX.i4317.pre-phi, align 8
  %2170 = add i64 %2154, 23
  store i64 %2170, i64* %3, align 8
  %2171 = load i32, i32* %2162, align 4
  %2172 = sext i32 %2171 to i64
  store i64 %2172, i64* %RSI.i739, align 8
  %2173 = shl nsw i64 %2172, 2
  %2174 = add i64 %2173, %2169
  %2175 = add i64 %2154, 26
  store i64 %2175, i64* %3, align 8
  %2176 = inttoptr i64 %2174 to i32*
  store i32 %2157, i32* %2176, align 4
  %2177 = load i64, i64* %RBP.i, align 8
  %2178 = add i64 %2177, -104
  %2179 = load i64, i64* %3, align 8
  %2180 = add i64 %2179, 3
  store i64 %2180, i64* %3, align 8
  %2181 = inttoptr i64 %2178 to i32*
  %2182 = load i32, i32* %2181, align 4
  %2183 = zext i32 %2182 to i64
  store i64 %2183, i64* %RAX.i3587.phi.trans.insert, align 8
  %2184 = add i64 %2177, -80
  %2185 = add i64 %2179, 6
  store i64 %2185, i64* %3, align 8
  %2186 = inttoptr i64 %2184 to i32*
  %2187 = load i32, i32* %2186, align 4
  %2188 = sub i32 %2182, %2187
  %2189 = icmp ult i32 %2182, %2187
  %2190 = zext i1 %2189 to i8
  store i8 %2190, i8* %32, align 1
  %2191 = and i32 %2188, 255
  %2192 = tail call i32 @llvm.ctpop.i32(i32 %2191)
  %2193 = trunc i32 %2192 to i8
  %2194 = and i8 %2193, 1
  %2195 = xor i8 %2194, 1
  store i8 %2195, i8* %39, align 1
  %2196 = xor i32 %2187, %2182
  %2197 = xor i32 %2196, %2188
  %2198 = lshr i32 %2197, 4
  %2199 = trunc i32 %2198 to i8
  %2200 = and i8 %2199, 1
  store i8 %2200, i8* %45, align 1
  %2201 = icmp eq i32 %2188, 0
  %2202 = zext i1 %2201 to i8
  store i8 %2202, i8* %48, align 1
  %2203 = lshr i32 %2188, 31
  %2204 = trunc i32 %2203 to i8
  store i8 %2204, i8* %51, align 1
  %2205 = lshr i32 %2182, 31
  %2206 = lshr i32 %2187, 31
  %2207 = xor i32 %2206, %2205
  %2208 = xor i32 %2203, %2205
  %2209 = add nuw nsw i32 %2208, %2207
  %2210 = icmp eq i32 %2209, 2
  %2211 = zext i1 %2210 to i8
  store i8 %2211, i8* %57, align 1
  %2212 = icmp ne i8 %2204, 0
  %2213 = xor i1 %2212, %2210
  %.v505 = select i1 %2213, i64 12, i64 36
  %2214 = add i64 %2179, %.v505
  store i64 %2214, i64* %3, align 8
  br i1 %2213, label %block_420d10, label %block_.L_420d28

block_420d10:                                     ; preds = %routine_shll__cl___esi.exit5587
  %2215 = add i64 %2214, 3
  store i64 %2215, i64* %3, align 8
  %2216 = load i32, i32* %2181, align 4
  %2217 = zext i32 %2216 to i64
  store i64 %2217, i64* %RAX.i3587.phi.trans.insert, align 8
  %2218 = add i64 %2214, 6
  store i64 %2218, i64* %3, align 8
  store i32 %2216, i32* %2186, align 4
  %2219 = load i64, i64* %RBP.i, align 8
  %2220 = add i64 %2219, -96
  %2221 = load i64, i64* %3, align 8
  %2222 = add i64 %2221, 3
  store i64 %2222, i64* %3, align 8
  %2223 = inttoptr i64 %2220 to i32*
  %2224 = load i32, i32* %2223, align 4
  %2225 = zext i32 %2224 to i64
  store i64 %2225, i64* %RAX.i3587.phi.trans.insert, align 8
  %2226 = add i64 %2219, -168
  %2227 = add i64 %2221, 9
  store i64 %2227, i64* %3, align 8
  %2228 = inttoptr i64 %2226 to i32*
  store i32 %2224, i32* %2228, align 4
  %2229 = load i64, i64* %RBP.i, align 8
  %2230 = add i64 %2229, -100
  %2231 = load i64, i64* %3, align 8
  %2232 = add i64 %2231, 3
  store i64 %2232, i64* %3, align 8
  %2233 = inttoptr i64 %2230 to i32*
  %2234 = load i32, i32* %2233, align 4
  %2235 = zext i32 %2234 to i64
  store i64 %2235, i64* %RAX.i3587.phi.trans.insert, align 8
  %2236 = add i64 %2229, -172
  %2237 = add i64 %2231, 9
  store i64 %2237, i64* %3, align 8
  %2238 = inttoptr i64 %2236 to i32*
  store i32 %2234, i32* %2238, align 4
  %.pre256 = load i64, i64* %RBP.i, align 8
  %.pre257 = load i64, i64* %3, align 8
  br label %block_.L_420d28

block_.L_420d28:                                  ; preds = %routine_shll__cl___esi.exit5587, %block_420d10
  %2239 = phi i64 [ %2214, %routine_shll__cl___esi.exit5587 ], [ %.pre257, %block_420d10 ]
  %2240 = phi i64 [ %2177, %routine_shll__cl___esi.exit5587 ], [ %.pre256, %block_420d10 ]
  %2241 = add i64 %2240, -168
  %2242 = add i64 %2239, 6
  store i64 %2242, i64* %3, align 8
  %2243 = inttoptr i64 %2241 to i32*
  %2244 = load i32, i32* %2243, align 4
  %2245 = zext i32 %2244 to i64
  store i64 %2245, i64* %RAX.i3587.phi.trans.insert, align 8
  %2246 = add i64 %2240, -184
  %2247 = add i64 %2239, 12
  store i64 %2247, i64* %3, align 8
  %2248 = inttoptr i64 %2246 to i32*
  store i32 %2244, i32* %2248, align 4
  %2249 = load i64, i64* %RBP.i, align 8
  %2250 = add i64 %2249, -172
  %2251 = load i64, i64* %3, align 8
  %2252 = add i64 %2251, 6
  store i64 %2252, i64* %3, align 8
  %2253 = inttoptr i64 %2250 to i32*
  %2254 = load i32, i32* %2253, align 4
  %2255 = zext i32 %2254 to i64
  store i64 %2255, i64* %RAX.i3587.phi.trans.insert, align 8
  %2256 = add i64 %2249, -180
  %2257 = add i64 %2251, 12
  store i64 %2257, i64* %3, align 8
  %2258 = inttoptr i64 %2256 to i32*
  store i32 %2254, i32* %2258, align 4
  %2259 = load i64, i64* %RBP.i, align 8
  %2260 = add i64 %2259, -192
  %2261 = load i64, i64* %3, align 8
  %2262 = add i64 %2261, 10
  store i64 %2262, i64* %3, align 8
  %2263 = inttoptr i64 %2260 to i32*
  store i32 0, i32* %2263, align 4
  %.pre258 = load i64, i64* %3, align 8
  br label %block_.L_420d4a

block_.L_420d4a:                                  ; preds = %block_.L_420eef, %block_.L_420d28
  %2264 = phi i64 [ %.pre258, %block_.L_420d28 ], [ %3249, %block_.L_420eef ]
  %MEMORY.12 = phi %struct.Memory* [ %call2_420ce2, %block_.L_420d28 ], [ %MEMORY.15, %block_.L_420eef ]
  %2265 = load i64, i64* %RBP.i, align 8
  %2266 = add i64 %2265, -192
  %2267 = add i64 %2264, 7
  store i64 %2267, i64* %3, align 8
  %2268 = inttoptr i64 %2266 to i32*
  %2269 = load i32, i32* %2268, align 4
  %2270 = add i32 %2269, -4
  %2271 = icmp ult i32 %2269, 4
  %2272 = zext i1 %2271 to i8
  store i8 %2272, i8* %32, align 1
  %2273 = and i32 %2270, 255
  %2274 = tail call i32 @llvm.ctpop.i32(i32 %2273)
  %2275 = trunc i32 %2274 to i8
  %2276 = and i8 %2275, 1
  %2277 = xor i8 %2276, 1
  store i8 %2277, i8* %39, align 1
  %2278 = xor i32 %2270, %2269
  %2279 = lshr i32 %2278, 4
  %2280 = trunc i32 %2279 to i8
  %2281 = and i8 %2280, 1
  store i8 %2281, i8* %45, align 1
  %2282 = icmp eq i32 %2270, 0
  %2283 = zext i1 %2282 to i8
  store i8 %2283, i8* %48, align 1
  %2284 = lshr i32 %2270, 31
  %2285 = trunc i32 %2284 to i8
  store i8 %2285, i8* %51, align 1
  %2286 = lshr i32 %2269, 31
  %2287 = xor i32 %2284, %2286
  %2288 = add nuw nsw i32 %2287, %2286
  %2289 = icmp eq i32 %2288, 2
  %2290 = zext i1 %2289 to i8
  store i8 %2290, i8* %57, align 1
  %2291 = icmp ne i8 %2285, 0
  %2292 = xor i1 %2291, %2289
  %.v506 = select i1 %2292, i64 13, i64 446
  %2293 = add i64 %2264, %.v506
  store i64 %2293, i64* %3, align 8
  br i1 %2292, label %block_420d57, label %block_.L_420f08

block_420d57:                                     ; preds = %block_.L_420d4a
  %2294 = add i64 %2265, -184
  %2295 = add i64 %2293, 6
  store i64 %2295, i64* %3, align 8
  %2296 = inttoptr i64 %2294 to i32*
  %2297 = load i32, i32* %2296, align 4
  %2298 = zext i32 %2297 to i64
  store i64 %2298, i64* %RAX.i3587.phi.trans.insert, align 8
  %2299 = add i64 %2293, 13
  store i64 %2299, i64* %3, align 8
  %2300 = load i32, i32* %2268, align 4
  %2301 = sext i32 %2300 to i64
  store i64 %2301, i64* %RCX.i4260.pre-phi, align 8
  %2302 = shl nsw i64 %2301, 2
  %2303 = add nsw i64 %2302, 7124896
  %2304 = add i64 %2293, 20
  store i64 %2304, i64* %3, align 8
  %2305 = inttoptr i64 %2303 to i32*
  %2306 = load i32, i32* %2305, align 4
  %2307 = add i32 %2306, %2297
  %2308 = zext i32 %2307 to i64
  store i64 %2308, i64* %RAX.i3587.phi.trans.insert, align 8
  %2309 = icmp ult i32 %2307, %2297
  %2310 = icmp ult i32 %2307, %2306
  %2311 = or i1 %2309, %2310
  %2312 = zext i1 %2311 to i8
  store i8 %2312, i8* %32, align 1
  %2313 = and i32 %2307, 255
  %2314 = tail call i32 @llvm.ctpop.i32(i32 %2313)
  %2315 = trunc i32 %2314 to i8
  %2316 = and i8 %2315, 1
  %2317 = xor i8 %2316, 1
  store i8 %2317, i8* %39, align 1
  %2318 = xor i32 %2306, %2297
  %2319 = xor i32 %2318, %2307
  %2320 = lshr i32 %2319, 4
  %2321 = trunc i32 %2320 to i8
  %2322 = and i8 %2321, 1
  store i8 %2322, i8* %45, align 1
  %2323 = icmp eq i32 %2307, 0
  %2324 = zext i1 %2323 to i8
  store i8 %2324, i8* %48, align 1
  %2325 = lshr i32 %2307, 31
  %2326 = trunc i32 %2325 to i8
  store i8 %2326, i8* %51, align 1
  %2327 = lshr i32 %2297, 31
  %2328 = lshr i32 %2306, 31
  %2329 = xor i32 %2325, %2327
  %2330 = xor i32 %2325, %2328
  %2331 = add nuw nsw i32 %2329, %2330
  %2332 = icmp eq i32 %2331, 2
  %2333 = zext i1 %2332 to i8
  store i8 %2333, i8* %57, align 1
  %2334 = add i64 %2265, -96
  %2335 = add i64 %2293, 23
  store i64 %2335, i64* %3, align 8
  %2336 = inttoptr i64 %2334 to i32*
  store i32 %2307, i32* %2336, align 4
  %2337 = load i64, i64* %RBP.i, align 8
  %2338 = add i64 %2337, -180
  %2339 = load i64, i64* %3, align 8
  %2340 = add i64 %2339, 6
  store i64 %2340, i64* %3, align 8
  %2341 = inttoptr i64 %2338 to i32*
  %2342 = load i32, i32* %2341, align 4
  %2343 = zext i32 %2342 to i64
  store i64 %2343, i64* %RAX.i3587.phi.trans.insert, align 8
  %2344 = add i64 %2337, -192
  %2345 = add i64 %2339, 13
  store i64 %2345, i64* %3, align 8
  %2346 = inttoptr i64 %2344 to i32*
  %2347 = load i32, i32* %2346, align 4
  %2348 = sext i32 %2347 to i64
  store i64 %2348, i64* %RCX.i4260.pre-phi, align 8
  %2349 = shl nsw i64 %2348, 2
  %2350 = add nsw i64 %2349, 7124912
  %2351 = add i64 %2339, 20
  store i64 %2351, i64* %3, align 8
  %2352 = inttoptr i64 %2350 to i32*
  %2353 = load i32, i32* %2352, align 4
  %2354 = add i32 %2353, %2342
  %2355 = zext i32 %2354 to i64
  store i64 %2355, i64* %RAX.i3587.phi.trans.insert, align 8
  %2356 = icmp ult i32 %2354, %2342
  %2357 = icmp ult i32 %2354, %2353
  %2358 = or i1 %2356, %2357
  %2359 = zext i1 %2358 to i8
  store i8 %2359, i8* %32, align 1
  %2360 = and i32 %2354, 255
  %2361 = tail call i32 @llvm.ctpop.i32(i32 %2360)
  %2362 = trunc i32 %2361 to i8
  %2363 = and i8 %2362, 1
  %2364 = xor i8 %2363, 1
  store i8 %2364, i8* %39, align 1
  %2365 = xor i32 %2353, %2342
  %2366 = xor i32 %2365, %2354
  %2367 = lshr i32 %2366, 4
  %2368 = trunc i32 %2367 to i8
  %2369 = and i8 %2368, 1
  store i8 %2369, i8* %45, align 1
  %2370 = icmp eq i32 %2354, 0
  %2371 = zext i1 %2370 to i8
  store i8 %2371, i8* %48, align 1
  %2372 = lshr i32 %2354, 31
  %2373 = trunc i32 %2372 to i8
  store i8 %2373, i8* %51, align 1
  %2374 = lshr i32 %2342, 31
  %2375 = lshr i32 %2353, 31
  %2376 = xor i32 %2372, %2374
  %2377 = xor i32 %2372, %2375
  %2378 = add nuw nsw i32 %2376, %2377
  %2379 = icmp eq i32 %2378, 2
  %2380 = zext i1 %2379 to i8
  store i8 %2380, i8* %57, align 1
  %2381 = add i64 %2337, -100
  %2382 = add i64 %2339, 23
  store i64 %2382, i64* %3, align 8
  %2383 = inttoptr i64 %2381 to i32*
  store i32 %2354, i32* %2383, align 4
  %2384 = load i64, i64* %RBP.i, align 8
  %2385 = add i64 %2384, -96
  %2386 = load i64, i64* %3, align 8
  %2387 = add i64 %2386, 3
  store i64 %2387, i64* %3, align 8
  %2388 = inttoptr i64 %2385 to i32*
  %2389 = load i32, i32* %2388, align 4
  %2390 = zext i32 %2389 to i64
  store i64 %2390, i64* %RAX.i3587.phi.trans.insert, align 8
  %2391 = add i64 %2384, -160
  %2392 = add i64 %2386, 9
  store i64 %2392, i64* %3, align 8
  %2393 = inttoptr i64 %2391 to i32*
  %2394 = load i32, i32* %2393, align 4
  %2395 = sub i32 %2389, %2394
  %2396 = zext i32 %2395 to i64
  store i64 %2396, i64* %RAX.i3587.phi.trans.insert, align 8
  %2397 = icmp ult i32 %2389, %2394
  %2398 = zext i1 %2397 to i8
  store i8 %2398, i8* %32, align 1
  %2399 = and i32 %2395, 255
  %2400 = tail call i32 @llvm.ctpop.i32(i32 %2399)
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = xor i8 %2402, 1
  store i8 %2403, i8* %39, align 1
  %2404 = xor i32 %2394, %2389
  %2405 = xor i32 %2404, %2395
  %2406 = lshr i32 %2405, 4
  %2407 = trunc i32 %2406 to i8
  %2408 = and i8 %2407, 1
  store i8 %2408, i8* %45, align 1
  %2409 = icmp eq i32 %2395, 0
  %2410 = zext i1 %2409 to i8
  store i8 %2410, i8* %48, align 1
  %2411 = lshr i32 %2395, 31
  %2412 = trunc i32 %2411 to i8
  store i8 %2412, i8* %51, align 1
  %2413 = lshr i32 %2389, 31
  %2414 = lshr i32 %2394, 31
  %2415 = xor i32 %2414, %2413
  %2416 = xor i32 %2411, %2413
  %2417 = add nuw nsw i32 %2416, %2415
  %2418 = icmp eq i32 %2417, 2
  %2419 = zext i1 %2418 to i8
  store i8 %2419, i8* %57, align 1
  store i64 %2396, i64* %RDI.i1133, align 8
  %2420 = add i64 %2386, -130437
  %2421 = add i64 %2386, 16
  %2422 = load i64, i64* %6, align 8
  %2423 = add i64 %2422, -8
  %2424 = inttoptr i64 %2423 to i64*
  store i64 %2421, i64* %2424, align 8
  store i64 %2423, i64* %6, align 8
  store i64 %2420, i64* %3, align 8
  %2425 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.12)
  %2426 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %2427 = load i64, i64* %RBP.i, align 8
  %2428 = add i64 %2427, -76
  %2429 = load i64, i64* %3, align 8
  %2430 = add i64 %2429, 3
  store i64 %2430, i64* %3, align 8
  %2431 = inttoptr i64 %2428 to i32*
  %2432 = load i32, i32* %2431, align 4
  %2433 = sub i32 %2426, %2432
  %2434 = icmp ult i32 %2426, %2432
  %2435 = zext i1 %2434 to i8
  store i8 %2435, i8* %32, align 1
  %2436 = and i32 %2433, 255
  %2437 = tail call i32 @llvm.ctpop.i32(i32 %2436)
  %2438 = trunc i32 %2437 to i8
  %2439 = and i8 %2438, 1
  %2440 = xor i8 %2439, 1
  store i8 %2440, i8* %39, align 1
  %2441 = xor i32 %2432, %2426
  %2442 = xor i32 %2441, %2433
  %2443 = lshr i32 %2442, 4
  %2444 = trunc i32 %2443 to i8
  %2445 = and i8 %2444, 1
  store i8 %2445, i8* %45, align 1
  %2446 = icmp eq i32 %2433, 0
  %2447 = zext i1 %2446 to i8
  store i8 %2447, i8* %48, align 1
  %2448 = lshr i32 %2433, 31
  %2449 = trunc i32 %2448 to i8
  store i8 %2449, i8* %51, align 1
  %2450 = lshr i32 %2426, 31
  %2451 = lshr i32 %2432, 31
  %2452 = xor i32 %2451, %2450
  %2453 = xor i32 %2448, %2450
  %2454 = add nuw nsw i32 %2453, %2452
  %2455 = icmp eq i32 %2454, 2
  %2456 = zext i1 %2455 to i8
  store i8 %2456, i8* %57, align 1
  %2457 = icmp ne i8 %2449, 0
  %2458 = xor i1 %2457, %2455
  %.demorgan495 = or i1 %2446, %2458
  %.v620 = select i1 %.demorgan495, i64 9, i64 346
  %2459 = add i64 %2429, %.v620
  store i64 %2459, i64* %3, align 8
  br i1 %.demorgan495, label %block_420d9e, label %block_.L_420eef

block_420d9e:                                     ; preds = %block_420d57
  %2460 = add i64 %2427, -100
  %2461 = add i64 %2459, 3
  store i64 %2461, i64* %3, align 8
  %2462 = inttoptr i64 %2460 to i32*
  %2463 = load i32, i32* %2462, align 4
  %2464 = zext i32 %2463 to i64
  store i64 %2464, i64* %RAX.i3587.phi.trans.insert, align 8
  %2465 = add i64 %2427, -164
  %2466 = add i64 %2459, 9
  store i64 %2466, i64* %3, align 8
  %2467 = inttoptr i64 %2465 to i32*
  %2468 = load i32, i32* %2467, align 4
  %2469 = sub i32 %2463, %2468
  %2470 = zext i32 %2469 to i64
  store i64 %2470, i64* %RAX.i3587.phi.trans.insert, align 8
  %2471 = icmp ult i32 %2463, %2468
  %2472 = zext i1 %2471 to i8
  store i8 %2472, i8* %32, align 1
  %2473 = and i32 %2469, 255
  %2474 = tail call i32 @llvm.ctpop.i32(i32 %2473)
  %2475 = trunc i32 %2474 to i8
  %2476 = and i8 %2475, 1
  %2477 = xor i8 %2476, 1
  store i8 %2477, i8* %39, align 1
  %2478 = xor i32 %2468, %2463
  %2479 = xor i32 %2478, %2469
  %2480 = lshr i32 %2479, 4
  %2481 = trunc i32 %2480 to i8
  %2482 = and i8 %2481, 1
  store i8 %2482, i8* %45, align 1
  %2483 = icmp eq i32 %2469, 0
  %2484 = zext i1 %2483 to i8
  store i8 %2484, i8* %48, align 1
  %2485 = lshr i32 %2469, 31
  %2486 = trunc i32 %2485 to i8
  store i8 %2486, i8* %51, align 1
  %2487 = lshr i32 %2463, 31
  %2488 = lshr i32 %2468, 31
  %2489 = xor i32 %2488, %2487
  %2490 = xor i32 %2485, %2487
  %2491 = add nuw nsw i32 %2490, %2489
  %2492 = icmp eq i32 %2491, 2
  %2493 = zext i1 %2492 to i8
  store i8 %2493, i8* %57, align 1
  store i64 %2470, i64* %RDI.i1133, align 8
  %2494 = add i64 %2459, -130462
  %2495 = add i64 %2459, 16
  %2496 = load i64, i64* %6, align 8
  %2497 = add i64 %2496, -8
  %2498 = inttoptr i64 %2497 to i64*
  store i64 %2495, i64* %2498, align 8
  store i64 %2497, i64* %6, align 8
  store i64 %2494, i64* %3, align 8
  %2499 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2425)
  %2500 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %2501 = load i64, i64* %RBP.i, align 8
  %2502 = add i64 %2501, -76
  %2503 = load i64, i64* %3, align 8
  %2504 = add i64 %2503, 3
  store i64 %2504, i64* %3, align 8
  %2505 = inttoptr i64 %2502 to i32*
  %2506 = load i32, i32* %2505, align 4
  %2507 = sub i32 %2500, %2506
  %2508 = icmp ult i32 %2500, %2506
  %2509 = zext i1 %2508 to i8
  store i8 %2509, i8* %32, align 1
  %2510 = and i32 %2507, 255
  %2511 = tail call i32 @llvm.ctpop.i32(i32 %2510)
  %2512 = trunc i32 %2511 to i8
  %2513 = and i8 %2512, 1
  %2514 = xor i8 %2513, 1
  store i8 %2514, i8* %39, align 1
  %2515 = xor i32 %2506, %2500
  %2516 = xor i32 %2515, %2507
  %2517 = lshr i32 %2516, 4
  %2518 = trunc i32 %2517 to i8
  %2519 = and i8 %2518, 1
  store i8 %2519, i8* %45, align 1
  %2520 = icmp eq i32 %2507, 0
  %2521 = zext i1 %2520 to i8
  store i8 %2521, i8* %48, align 1
  %2522 = lshr i32 %2507, 31
  %2523 = trunc i32 %2522 to i8
  store i8 %2523, i8* %51, align 1
  %2524 = lshr i32 %2500, 31
  %2525 = lshr i32 %2506, 31
  %2526 = xor i32 %2525, %2524
  %2527 = xor i32 %2522, %2524
  %2528 = add nuw nsw i32 %2527, %2526
  %2529 = icmp eq i32 %2528, 2
  %2530 = zext i1 %2529 to i8
  store i8 %2530, i8* %57, align 1
  %2531 = icmp ne i8 %2523, 0
  %2532 = xor i1 %2531, %2529
  %.demorgan496 = or i1 %2520, %2532
  %.v621 = select i1 %.demorgan496, i64 9, i64 321
  %2533 = add i64 %2503, %.v621
  store i64 %2533, i64* %3, align 8
  br i1 %.demorgan496, label %block_420db7, label %block_.L_420eef

block_420db7:                                     ; preds = %block_420d9e
  %2534 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %2534, i64* %RAX.i3587.phi.trans.insert, align 8
  %2535 = add i64 %2501, -100
  %2536 = add i64 %2533, 11
  store i64 %2536, i64* %3, align 8
  %2537 = inttoptr i64 %2535 to i32*
  %2538 = load i32, i32* %2537, align 4
  %2539 = zext i32 %2538 to i64
  store i64 %2539, i64* %RCX.i4260.pre-phi, align 8
  %2540 = add i64 %2501, -164
  %2541 = add i64 %2533, 17
  store i64 %2541, i64* %3, align 8
  %2542 = inttoptr i64 %2540 to i32*
  %2543 = load i32, i32* %2542, align 4
  %2544 = sub i32 %2538, %2543
  %2545 = zext i32 %2544 to i64
  store i64 %2545, i64* %RCX.i4260.pre-phi, align 8
  %2546 = icmp ult i32 %2538, %2543
  %2547 = zext i1 %2546 to i8
  store i8 %2547, i8* %32, align 1
  %2548 = and i32 %2544, 255
  %2549 = tail call i32 @llvm.ctpop.i32(i32 %2548)
  %2550 = trunc i32 %2549 to i8
  %2551 = and i8 %2550, 1
  %2552 = xor i8 %2551, 1
  store i8 %2552, i8* %39, align 1
  %2553 = xor i32 %2543, %2538
  %2554 = xor i32 %2553, %2544
  %2555 = lshr i32 %2554, 4
  %2556 = trunc i32 %2555 to i8
  %2557 = and i8 %2556, 1
  store i8 %2557, i8* %45, align 1
  %2558 = icmp eq i32 %2544, 0
  %2559 = zext i1 %2558 to i8
  store i8 %2559, i8* %48, align 1
  %2560 = lshr i32 %2544, 31
  %2561 = trunc i32 %2560 to i8
  store i8 %2561, i8* %51, align 1
  %2562 = lshr i32 %2538, 31
  %2563 = lshr i32 %2543, 31
  %2564 = xor i32 %2563, %2562
  %2565 = xor i32 %2560, %2562
  %2566 = add nuw nsw i32 %2565, %2564
  %2567 = icmp eq i32 %2566, 2
  %2568 = zext i1 %2567 to i8
  store i8 %2568, i8* %57, align 1
  %2569 = add i64 %2533, 20
  store i64 %2569, i64* %3, align 8
  %2570 = load i32, i32* %2505, align 4
  %2571 = add i32 %2570, %2544
  %2572 = zext i32 %2571 to i64
  store i64 %2572, i64* %RCX.i4260.pre-phi, align 8
  %2573 = icmp ult i32 %2571, %2544
  %2574 = icmp ult i32 %2571, %2570
  %2575 = or i1 %2573, %2574
  %2576 = zext i1 %2575 to i8
  store i8 %2576, i8* %32, align 1
  %2577 = and i32 %2571, 255
  %2578 = tail call i32 @llvm.ctpop.i32(i32 %2577)
  %2579 = trunc i32 %2578 to i8
  %2580 = and i8 %2579, 1
  %2581 = xor i8 %2580, 1
  store i8 %2581, i8* %39, align 1
  %2582 = xor i32 %2570, %2544
  %2583 = xor i32 %2582, %2571
  %2584 = lshr i32 %2583, 4
  %2585 = trunc i32 %2584 to i8
  %2586 = and i8 %2585, 1
  store i8 %2586, i8* %45, align 1
  %2587 = icmp eq i32 %2571, 0
  %2588 = zext i1 %2587 to i8
  store i8 %2588, i8* %48, align 1
  %2589 = lshr i32 %2571, 31
  %2590 = trunc i32 %2589 to i8
  store i8 %2590, i8* %51, align 1
  %2591 = lshr i32 %2570, 31
  %2592 = xor i32 %2589, %2560
  %2593 = xor i32 %2589, %2591
  %2594 = add nuw nsw i32 %2592, %2593
  %2595 = icmp eq i32 %2594, 2
  %2596 = zext i1 %2595 to i8
  store i8 %2596, i8* %57, align 1
  %2597 = sext i32 %2571 to i64
  store i64 %2597, i64* %RDX.i4317.pre-phi, align 8
  %2598 = shl nsw i64 %2597, 3
  %2599 = add i64 %2534, %2598
  %2600 = add i64 %2533, 27
  store i64 %2600, i64* %3, align 8
  %2601 = inttoptr i64 %2599 to i64*
  %2602 = load i64, i64* %2601, align 8
  store i64 %2602, i64* %RAX.i3587.phi.trans.insert, align 8
  %2603 = add i64 %2501, -96
  %2604 = add i64 %2533, 30
  store i64 %2604, i64* %3, align 8
  %2605 = inttoptr i64 %2603 to i32*
  %2606 = load i32, i32* %2605, align 4
  %2607 = zext i32 %2606 to i64
  store i64 %2607, i64* %RCX.i4260.pre-phi, align 8
  %2608 = load i64, i64* %RBP.i, align 8
  %2609 = add i64 %2608, -160
  %2610 = add i64 %2533, 36
  store i64 %2610, i64* %3, align 8
  %2611 = inttoptr i64 %2609 to i32*
  %2612 = load i32, i32* %2611, align 4
  %2613 = sub i32 %2606, %2612
  %2614 = zext i32 %2613 to i64
  store i64 %2614, i64* %RCX.i4260.pre-phi, align 8
  %2615 = icmp ult i32 %2606, %2612
  %2616 = zext i1 %2615 to i8
  store i8 %2616, i8* %32, align 1
  %2617 = and i32 %2613, 255
  %2618 = tail call i32 @llvm.ctpop.i32(i32 %2617)
  %2619 = trunc i32 %2618 to i8
  %2620 = and i8 %2619, 1
  %2621 = xor i8 %2620, 1
  store i8 %2621, i8* %39, align 1
  %2622 = xor i32 %2612, %2606
  %2623 = xor i32 %2622, %2613
  %2624 = lshr i32 %2623, 4
  %2625 = trunc i32 %2624 to i8
  %2626 = and i8 %2625, 1
  store i8 %2626, i8* %45, align 1
  %2627 = icmp eq i32 %2613, 0
  %2628 = zext i1 %2627 to i8
  store i8 %2628, i8* %48, align 1
  %2629 = lshr i32 %2613, 31
  %2630 = trunc i32 %2629 to i8
  store i8 %2630, i8* %51, align 1
  %2631 = lshr i32 %2606, 31
  %2632 = lshr i32 %2612, 31
  %2633 = xor i32 %2632, %2631
  %2634 = xor i32 %2629, %2631
  %2635 = add nuw nsw i32 %2634, %2633
  %2636 = icmp eq i32 %2635, 2
  %2637 = zext i1 %2636 to i8
  store i8 %2637, i8* %57, align 1
  %2638 = add i64 %2608, -76
  %2639 = add i64 %2533, 39
  store i64 %2639, i64* %3, align 8
  %2640 = inttoptr i64 %2638 to i32*
  %2641 = load i32, i32* %2640, align 4
  %2642 = add i32 %2641, %2613
  %2643 = zext i32 %2642 to i64
  store i64 %2643, i64* %RCX.i4260.pre-phi, align 8
  %2644 = icmp ult i32 %2642, %2613
  %2645 = icmp ult i32 %2642, %2641
  %2646 = or i1 %2644, %2645
  %2647 = zext i1 %2646 to i8
  store i8 %2647, i8* %32, align 1
  %2648 = and i32 %2642, 255
  %2649 = tail call i32 @llvm.ctpop.i32(i32 %2648)
  %2650 = trunc i32 %2649 to i8
  %2651 = and i8 %2650, 1
  %2652 = xor i8 %2651, 1
  store i8 %2652, i8* %39, align 1
  %2653 = xor i32 %2641, %2613
  %2654 = xor i32 %2653, %2642
  %2655 = lshr i32 %2654, 4
  %2656 = trunc i32 %2655 to i8
  %2657 = and i8 %2656, 1
  store i8 %2657, i8* %45, align 1
  %2658 = icmp eq i32 %2642, 0
  %2659 = zext i1 %2658 to i8
  store i8 %2659, i8* %48, align 1
  %2660 = lshr i32 %2642, 31
  %2661 = trunc i32 %2660 to i8
  store i8 %2661, i8* %51, align 1
  %2662 = lshr i32 %2641, 31
  %2663 = xor i32 %2660, %2629
  %2664 = xor i32 %2660, %2662
  %2665 = add nuw nsw i32 %2663, %2664
  %2666 = icmp eq i32 %2665, 2
  %2667 = zext i1 %2666 to i8
  store i8 %2667, i8* %57, align 1
  %2668 = sext i32 %2642 to i64
  store i64 %2668, i64* %RDX.i4317.pre-phi, align 8
  %2669 = shl nsw i64 %2668, 2
  %2670 = add i64 %2602, %2669
  %2671 = add i64 %2533, 46
  store i64 %2671, i64* %3, align 8
  %2672 = inttoptr i64 %2670 to i32*
  %2673 = load i32, i32* %2672, align 4
  store i8 0, i8* %32, align 1
  %2674 = and i32 %2673, 255
  %2675 = tail call i32 @llvm.ctpop.i32(i32 %2674)
  %2676 = trunc i32 %2675 to i8
  %2677 = and i8 %2676, 1
  %2678 = xor i8 %2677, 1
  store i8 %2678, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %2679 = icmp eq i32 %2673, 0
  %2680 = zext i1 %2679 to i8
  store i8 %2680, i8* %48, align 1
  %2681 = lshr i32 %2673, 31
  %2682 = trunc i32 %2681 to i8
  store i8 %2682, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v622 = select i1 %2679, i64 52, i64 307
  %2683 = add i64 %2533, %.v622
  store i64 %2683, i64* %3, align 8
  br i1 %2679, label %block_420deb, label %block_.L_420eea

block_420deb:                                     ; preds = %block_420db7
  %2684 = load i64, i64* %RBP.i, align 8
  %2685 = add i64 %2684, -132
  %2686 = add i64 %2683, 6
  store i64 %2686, i64* %3, align 8
  %2687 = inttoptr i64 %2685 to i32*
  %2688 = load i32, i32* %2687, align 4
  %2689 = zext i32 %2688 to i64
  store i64 %2689, i64* %RAX.i3587.phi.trans.insert, align 8
  %2690 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %2690, i64* %RCX.i4260.pre-phi, align 8
  %2691 = add i64 %2684, -96
  %2692 = add i64 %2683, 17
  store i64 %2692, i64* %3, align 8
  %2693 = inttoptr i64 %2691 to i32*
  %2694 = load i32, i32* %2693, align 4
  %2695 = zext i32 %2694 to i64
  store i64 %2695, i64* %RDX.i4317.pre-phi, align 8
  %2696 = add i64 %2684, -136
  %2697 = add i64 %2683, 23
  store i64 %2697, i64* %3, align 8
  %2698 = inttoptr i64 %2696 to i32*
  %2699 = load i32, i32* %2698, align 4
  %2700 = zext i32 %2699 to i64
  store i64 %2700, i64* %RSI.i739, align 8
  %2701 = add i64 %2684, -248
  %2702 = add i64 %2683, 30
  store i64 %2702, i64* %3, align 8
  %2703 = inttoptr i64 %2701 to i64*
  store i64 %2690, i64* %2703, align 8
  %2704 = load i32, i32* %ESI.i1656, align 4
  %2705 = zext i32 %2704 to i64
  %2706 = load i64, i64* %3, align 8
  store i64 %2705, i64* %RCX.i4260.pre-phi, align 8
  %2707 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %2708 = add i64 %2706, 4
  store i64 %2708, i64* %3, align 8
  %2709 = trunc i32 %2704 to i5
  switch i5 %2709, label %2716 [
    i5 0, label %routine_shll__cl___edx.exit5352
    i5 1, label %2710
  ]

; <label>:2710:                                   ; preds = %block_420deb
  %2711 = trunc i64 %2707 to i32
  %2712 = shl i32 %2711, 1
  %2713 = icmp slt i32 %2711, 0
  %2714 = icmp slt i32 %2712, 0
  %2715 = xor i1 %2713, %2714
  br label %2726

; <label>:2716:                                   ; preds = %block_420deb
  %2717 = and i32 %2704, 31
  %2718 = zext i32 %2717 to i64
  %2719 = add nuw nsw i64 %2718, 4294967295
  %2720 = and i64 %2707, 4294967295
  %2721 = and i64 %2719, 4294967295
  %2722 = shl i64 %2720, %2721
  %2723 = trunc i64 %2722 to i32
  %2724 = icmp slt i32 %2723, 0
  %2725 = shl i32 %2723, 1
  br label %2726

; <label>:2726:                                   ; preds = %2716, %2710
  %2727 = phi i1 [ %2713, %2710 ], [ %2724, %2716 ]
  %2728 = phi i1 [ %2715, %2710 ], [ false, %2716 ]
  %2729 = phi i32 [ %2712, %2710 ], [ %2725, %2716 ]
  %2730 = zext i32 %2729 to i64
  store i64 %2730, i64* %RDX.i4317.pre-phi, align 8
  %2731 = zext i1 %2727 to i8
  store i8 %2731, i8* %32, align 1
  %2732 = and i32 %2729, 254
  %2733 = tail call i32 @llvm.ctpop.i32(i32 %2732)
  %2734 = trunc i32 %2733 to i8
  %2735 = and i8 %2734, 1
  %2736 = xor i8 %2735, 1
  store i8 %2736, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %2737 = icmp eq i32 %2729, 0
  %2738 = zext i1 %2737 to i8
  store i8 %2738, i8* %48, align 1
  %2739 = lshr i32 %2729, 31
  %2740 = trunc i32 %2739 to i8
  store i8 %2740, i8* %51, align 1
  %2741 = zext i1 %2728 to i8
  store i8 %2741, i8* %57, align 1
  br label %routine_shll__cl___edx.exit5352

routine_shll__cl___edx.exit5352:                  ; preds = %2726, %block_420deb
  %2742 = phi i64 [ %2730, %2726 ], [ %2707, %block_420deb ]
  %2743 = load i64, i64* %RBP.i, align 8
  %2744 = add i64 %2743, -152
  %2745 = add i64 %2706, 10
  store i64 %2745, i64* %3, align 8
  %2746 = trunc i64 %2742 to i32
  %2747 = inttoptr i64 %2744 to i32*
  %2748 = load i32, i32* %2747, align 4
  %2749 = sub i32 %2746, %2748
  %2750 = zext i32 %2749 to i64
  store i64 %2750, i64* %RDX.i4317.pre-phi, align 8
  %2751 = icmp ult i32 %2746, %2748
  %2752 = zext i1 %2751 to i8
  store i8 %2752, i8* %32, align 1
  %2753 = and i32 %2749, 255
  %2754 = tail call i32 @llvm.ctpop.i32(i32 %2753)
  %2755 = trunc i32 %2754 to i8
  %2756 = and i8 %2755, 1
  %2757 = xor i8 %2756, 1
  store i8 %2757, i8* %39, align 1
  %2758 = xor i32 %2748, %2746
  %2759 = xor i32 %2758, %2749
  %2760 = lshr i32 %2759, 4
  %2761 = trunc i32 %2760 to i8
  %2762 = and i8 %2761, 1
  store i8 %2762, i8* %45, align 1
  %2763 = icmp eq i32 %2749, 0
  %2764 = zext i1 %2763 to i8
  store i8 %2764, i8* %48, align 1
  %2765 = lshr i32 %2749, 31
  %2766 = trunc i32 %2765 to i8
  store i8 %2766, i8* %51, align 1
  %2767 = lshr i32 %2746, 31
  %2768 = lshr i32 %2748, 31
  %2769 = xor i32 %2768, %2767
  %2770 = xor i32 %2765, %2767
  %2771 = add nuw nsw i32 %2770, %2769
  %2772 = icmp eq i32 %2771, 2
  %2773 = zext i1 %2772 to i8
  store i8 %2773, i8* %57, align 1
  %2774 = sext i32 %2749 to i64
  store i64 %2774, i64* %RDI.i1133, align 8
  %2775 = add i64 %2743, -248
  %2776 = add i64 %2706, 20
  store i64 %2776, i64* %3, align 8
  %2777 = inttoptr i64 %2775 to i64*
  %2778 = load i64, i64* %2777, align 8
  store i64 %2778, i64* %R8.i5602, align 8
  %2779 = shl nsw i64 %2774, 2
  %2780 = add i64 %2779, %2778
  %2781 = add i64 %2706, 24
  store i64 %2781, i64* %3, align 8
  %2782 = inttoptr i64 %2780 to i32*
  %2783 = load i32, i32* %2782, align 4
  %2784 = zext i32 %2783 to i64
  store i64 %2784, i64* %RDX.i4317.pre-phi, align 8
  %2785 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %2785, i64* %RDI.i1133, align 8
  %2786 = add i64 %2743, -100
  %2787 = add i64 %2706, 35
  store i64 %2787, i64* %3, align 8
  %2788 = inttoptr i64 %2786 to i32*
  %2789 = load i32, i32* %2788, align 4
  %2790 = zext i32 %2789 to i64
  store i64 %2790, i64* %RSI.i739, align 8
  %2791 = add i64 %2743, -136
  %2792 = add i64 %2706, 41
  store i64 %2792, i64* %3, align 8
  %2793 = inttoptr i64 %2791 to i32*
  %2794 = load i32, i32* %2793, align 4
  %2795 = zext i32 %2794 to i64
  store i64 %2795, i64* %RCX.i4260.pre-phi, align 8
  %2796 = add i64 %2706, 43
  store i64 %2796, i64* %3, align 8
  %2797 = trunc i32 %2794 to i5
  switch i5 %2797, label %2803 [
    i5 0, label %routine_shll__cl___esi.exit5327
    i5 1, label %2798
  ]

; <label>:2798:                                   ; preds = %routine_shll__cl___edx.exit5352
  %2799 = shl i32 %2789, 1
  %2800 = icmp slt i32 %2789, 0
  %2801 = icmp slt i32 %2799, 0
  %2802 = xor i1 %2800, %2801
  br label %2812

; <label>:2803:                                   ; preds = %routine_shll__cl___edx.exit5352
  %2804 = and i32 %2794, 31
  %2805 = zext i32 %2804 to i64
  %2806 = add nuw nsw i64 %2805, 4294967295
  %2807 = and i64 %2806, 4294967295
  %2808 = shl i64 %2790, %2807
  %2809 = trunc i64 %2808 to i32
  %2810 = icmp slt i32 %2809, 0
  %2811 = shl i32 %2809, 1
  br label %2812

; <label>:2812:                                   ; preds = %2803, %2798
  %2813 = phi i1 [ %2800, %2798 ], [ %2810, %2803 ]
  %2814 = phi i1 [ %2802, %2798 ], [ false, %2803 ]
  %2815 = phi i32 [ %2799, %2798 ], [ %2811, %2803 ]
  %2816 = zext i32 %2815 to i64
  store i64 %2816, i64* %RSI.i739, align 8
  %2817 = zext i1 %2813 to i8
  store i8 %2817, i8* %32, align 1
  %2818 = and i32 %2815, 254
  %2819 = tail call i32 @llvm.ctpop.i32(i32 %2818)
  %2820 = trunc i32 %2819 to i8
  %2821 = and i8 %2820, 1
  %2822 = xor i8 %2821, 1
  store i8 %2822, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %2823 = icmp eq i32 %2815, 0
  %2824 = zext i1 %2823 to i8
  store i8 %2824, i8* %48, align 1
  %2825 = lshr i32 %2815, 31
  %2826 = trunc i32 %2825 to i8
  store i8 %2826, i8* %51, align 1
  %2827 = zext i1 %2814 to i8
  store i8 %2827, i8* %57, align 1
  br label %routine_shll__cl___esi.exit5327

routine_shll__cl___esi.exit5327:                  ; preds = %2812, %routine_shll__cl___edx.exit5352
  %2828 = phi i32 [ %2815, %2812 ], [ %2789, %routine_shll__cl___edx.exit5352 ]
  %2829 = add i64 %2743, -156
  %2830 = add i64 %2706, 49
  store i64 %2830, i64* %3, align 8
  %2831 = inttoptr i64 %2829 to i32*
  %2832 = load i32, i32* %2831, align 4
  %2833 = sub i32 %2828, %2832
  %2834 = zext i32 %2833 to i64
  store i64 %2834, i64* %RSI.i739, align 8
  %2835 = icmp ult i32 %2828, %2832
  %2836 = zext i1 %2835 to i8
  store i8 %2836, i8* %32, align 1
  %2837 = and i32 %2833, 255
  %2838 = tail call i32 @llvm.ctpop.i32(i32 %2837)
  %2839 = trunc i32 %2838 to i8
  %2840 = and i8 %2839, 1
  %2841 = xor i8 %2840, 1
  store i8 %2841, i8* %39, align 1
  %2842 = xor i32 %2832, %2828
  %2843 = xor i32 %2842, %2833
  %2844 = lshr i32 %2843, 4
  %2845 = trunc i32 %2844 to i8
  %2846 = and i8 %2845, 1
  store i8 %2846, i8* %45, align 1
  %2847 = icmp eq i32 %2833, 0
  %2848 = zext i1 %2847 to i8
  store i8 %2848, i8* %48, align 1
  %2849 = lshr i32 %2833, 31
  %2850 = trunc i32 %2849 to i8
  store i8 %2850, i8* %51, align 1
  %2851 = lshr i32 %2828, 31
  %2852 = lshr i32 %2832, 31
  %2853 = xor i32 %2852, %2851
  %2854 = xor i32 %2849, %2851
  %2855 = add nuw nsw i32 %2854, %2853
  %2856 = icmp eq i32 %2855, 2
  %2857 = zext i1 %2856 to i8
  store i8 %2857, i8* %57, align 1
  %2858 = sext i32 %2833 to i64
  store i64 %2858, i64* %R9.i5580, align 8
  %2859 = shl nsw i64 %2858, 2
  %2860 = add i64 %2785, %2859
  %2861 = add i64 %2706, 56
  store i64 %2861, i64* %3, align 8
  %2862 = inttoptr i64 %2860 to i32*
  %2863 = load i32, i32* %2862, align 4
  %2864 = add i32 %2863, %2783
  %2865 = zext i32 %2864 to i64
  store i64 %2865, i64* %RDX.i4317.pre-phi, align 8
  %2866 = icmp ult i32 %2864, %2783
  %2867 = icmp ult i32 %2864, %2863
  %2868 = or i1 %2866, %2867
  %2869 = zext i1 %2868 to i8
  store i8 %2869, i8* %32, align 1
  %2870 = and i32 %2864, 255
  %2871 = tail call i32 @llvm.ctpop.i32(i32 %2870)
  %2872 = trunc i32 %2871 to i8
  %2873 = and i8 %2872, 1
  %2874 = xor i8 %2873, 1
  store i8 %2874, i8* %39, align 1
  %2875 = xor i32 %2863, %2783
  %2876 = xor i32 %2875, %2864
  %2877 = lshr i32 %2876, 4
  %2878 = trunc i32 %2877 to i8
  %2879 = and i8 %2878, 1
  store i8 %2879, i8* %45, align 1
  %2880 = icmp eq i32 %2864, 0
  %2881 = zext i1 %2880 to i8
  store i8 %2881, i8* %48, align 1
  %2882 = lshr i32 %2864, 31
  %2883 = trunc i32 %2882 to i8
  store i8 %2883, i8* %51, align 1
  %2884 = lshr i32 %2783, 31
  %2885 = lshr i32 %2863, 31
  %2886 = xor i32 %2882, %2884
  %2887 = xor i32 %2882, %2885
  %2888 = add nuw nsw i32 %2886, %2887
  %2889 = icmp eq i32 %2888, 2
  %2890 = zext i1 %2889 to i8
  store i8 %2890, i8* %57, align 1
  %2891 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %2892 = shl i64 %2891, 32
  %2893 = ashr exact i64 %2892, 32
  %2894 = sext i32 %2864 to i64
  %2895 = mul nsw i64 %2894, %2893
  %2896 = shl i64 %2895, 32
  %2897 = ashr i64 %2896, 47
  %2898 = lshr i64 %2897, 1
  %2899 = trunc i64 %2897 to i8
  %2900 = and i8 %2899, 1
  %2901 = trunc i64 %2898 to i32
  %2902 = and i64 %2898, 4294967295
  store i64 %2902, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %2900, i8* %32, align 1
  %2903 = and i32 %2901, 255
  %2904 = tail call i32 @llvm.ctpop.i32(i32 %2903)
  %2905 = trunc i32 %2904 to i8
  %2906 = and i8 %2905, 1
  %2907 = xor i8 %2906, 1
  store i8 %2907, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %2908 = icmp eq i32 %2901, 0
  %2909 = zext i1 %2908 to i8
  store i8 %2909, i8* %48, align 1
  %2910 = lshr i64 %2897, 32
  %2911 = trunc i64 %2910 to i8
  %2912 = and i8 %2911, 1
  store i8 %2912, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %2913 = load i64, i64* %RBP.i, align 8
  %2914 = add i64 %2913, -104
  %2915 = trunc i64 %2898 to i32
  %2916 = add i64 %2706, 65
  store i64 %2916, i64* %3, align 8
  %2917 = inttoptr i64 %2914 to i32*
  store i32 %2915, i32* %2917, align 4
  %2918 = load i64, i64* %RBP.i, align 8
  %2919 = add i64 %2918, -128
  %2920 = load i64, i64* %3, align 8
  %2921 = add i64 %2920, 4
  store i64 %2921, i64* %3, align 8
  %2922 = inttoptr i64 %2919 to i64*
  %2923 = load i64, i64* %2922, align 8
  store i64 %2923, i64* %RDI.i1133, align 8
  %2924 = add i64 %2918, -32
  %2925 = add i64 %2920, 8
  store i64 %2925, i64* %3, align 8
  %2926 = inttoptr i64 %2924 to i64*
  %2927 = load i64, i64* %2926, align 8
  store i64 %2927, i64* %RSI.i739, align 8
  %2928 = add i64 %2918, -112
  %2929 = add i64 %2920, 12
  store i64 %2929, i64* %3, align 8
  %2930 = inttoptr i64 %2928 to i64*
  %2931 = load i64, i64* %2930, align 8
  store i64 %2931, i64* %RDX.i4317.pre-phi, align 8
  %2932 = add i64 %2918, -140
  %2933 = add i64 %2920, 18
  store i64 %2933, i64* %3, align 8
  %2934 = inttoptr i64 %2932 to i32*
  %2935 = load i32, i32* %2934, align 4
  %2936 = zext i32 %2935 to i64
  store i64 %2936, i64* %RCX.i4260.pre-phi, align 8
  %2937 = add i64 %2918, -144
  %2938 = add i64 %2920, 25
  store i64 %2938, i64* %3, align 8
  %2939 = inttoptr i64 %2937 to i32*
  %2940 = load i32, i32* %2939, align 4
  %2941 = zext i32 %2940 to i64
  store i64 %2941, i64* %R8.i5602, align 8
  %2942 = add i64 %2918, -148
  %2943 = add i64 %2920, 32
  store i64 %2943, i64* %3, align 8
  %2944 = inttoptr i64 %2942 to i32*
  %2945 = load i32, i32* %2944, align 4
  %2946 = zext i32 %2945 to i64
  store i64 %2946, i64* %R9.i5580, align 8
  %2947 = add i64 %2918, -104
  %2948 = add i64 %2920, 35
  store i64 %2948, i64* %3, align 8
  %2949 = inttoptr i64 %2947 to i32*
  %2950 = load i32, i32* %2949, align 4
  %2951 = zext i32 %2950 to i64
  store i64 %2951, i64* %RAX.i3587.phi.trans.insert, align 8
  %2952 = add i64 %2918, -80
  %2953 = add i64 %2920, 39
  store i64 %2953, i64* %3, align 8
  %2954 = inttoptr i64 %2952 to i32*
  %2955 = load i32, i32* %2954, align 4
  %2956 = zext i32 %2955 to i64
  store i64 %2956, i64* %68, align 8
  %2957 = add i64 %2918, -96
  %2958 = add i64 %2920, 43
  store i64 %2958, i64* %3, align 8
  %2959 = inttoptr i64 %2957 to i32*
  %2960 = load i32, i32* %2959, align 4
  %2961 = zext i32 %2960 to i64
  store i64 %2961, i64* %R11.i, align 8
  %2962 = add i64 %2918, -100
  %2963 = add i64 %2920, 46
  store i64 %2963, i64* %3, align 8
  %2964 = inttoptr i64 %2962 to i32*
  %2965 = load i32, i32* %2964, align 4
  %2966 = zext i32 %2965 to i64
  store i64 %2966, i64* %RBX.i615, align 8
  %2967 = load i32*, i32** %2119, align 8
  %2968 = add i64 %2920, 49
  store i64 %2968, i64* %3, align 8
  store i32 %2950, i32* %2967, align 4
  %2969 = load i64, i64* %6, align 8
  %2970 = add i64 %2969, 8
  %2971 = load i32, i32* %R10D.i761, align 4
  %2972 = load i64, i64* %3, align 8
  %2973 = add i64 %2972, 5
  store i64 %2973, i64* %3, align 8
  %2974 = inttoptr i64 %2970 to i32*
  store i32 %2971, i32* %2974, align 4
  %2975 = load i64, i64* %6, align 8
  %2976 = add i64 %2975, 16
  %2977 = load i32, i32* %R11D.i5540, align 4
  %2978 = load i64, i64* %3, align 8
  %2979 = add i64 %2978, 5
  store i64 %2979, i64* %3, align 8
  %2980 = inttoptr i64 %2976 to i32*
  store i32 %2977, i32* %2980, align 4
  %2981 = load i64, i64* %6, align 8
  %2982 = add i64 %2981, 24
  %2983 = load i32, i32* %EBX.i5525, align 4
  %2984 = load i64, i64* %3, align 8
  %2985 = add i64 %2984, 4
  store i64 %2985, i64* %3, align 8
  %2986 = inttoptr i64 %2982 to i32*
  store i32 %2983, i32* %2986, align 4
  %2987 = load i64, i64* %3, align 8
  %2988 = add i64 %2987, -2521
  %2989 = add i64 %2987, 5
  %2990 = load i64, i64* %6, align 8
  %2991 = add i64 %2990, -8
  %2992 = inttoptr i64 %2991 to i64*
  store i64 %2989, i64* %2992, align 8
  store i64 %2991, i64* %6, align 8
  store i64 %2988, i64* %3, align 8
  %call2_420e89 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %2988, %struct.Memory* %2499)
  %2993 = load i64, i64* %RBP.i, align 8
  %2994 = add i64 %2993, -104
  %2995 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %2996 = load i64, i64* %3, align 8
  %2997 = add i64 %2996, 3
  store i64 %2997, i64* %3, align 8
  %2998 = inttoptr i64 %2994 to i32*
  store i32 %2995, i32* %2998, align 4
  %2999 = load i64, i64* %RBP.i, align 8
  %3000 = add i64 %2999, -104
  %3001 = load i64, i64* %3, align 8
  %3002 = add i64 %3001, 3
  store i64 %3002, i64* %3, align 8
  %3003 = inttoptr i64 %3000 to i32*
  %3004 = load i32, i32* %3003, align 4
  %3005 = zext i32 %3004 to i64
  store i64 %3005, i64* %RAX.i3587.phi.trans.insert, align 8
  %3006 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %3006, i64* %RDX.i4317.pre-phi, align 8
  %3007 = add i64 %2999, -100
  %3008 = add i64 %3001, 14
  store i64 %3008, i64* %3, align 8
  %3009 = inttoptr i64 %3007 to i32*
  %3010 = load i32, i32* %3009, align 4
  %3011 = zext i32 %3010 to i64
  store i64 %3011, i64* %RCX.i4260.pre-phi, align 8
  %3012 = add i64 %2999, -164
  %3013 = add i64 %3001, 20
  store i64 %3013, i64* %3, align 8
  %3014 = inttoptr i64 %3012 to i32*
  %3015 = load i32, i32* %3014, align 4
  %3016 = sub i32 %3010, %3015
  %3017 = zext i32 %3016 to i64
  store i64 %3017, i64* %RCX.i4260.pre-phi, align 8
  %3018 = icmp ult i32 %3010, %3015
  %3019 = zext i1 %3018 to i8
  store i8 %3019, i8* %32, align 1
  %3020 = and i32 %3016, 255
  %3021 = tail call i32 @llvm.ctpop.i32(i32 %3020)
  %3022 = trunc i32 %3021 to i8
  %3023 = and i8 %3022, 1
  %3024 = xor i8 %3023, 1
  store i8 %3024, i8* %39, align 1
  %3025 = xor i32 %3015, %3010
  %3026 = xor i32 %3025, %3016
  %3027 = lshr i32 %3026, 4
  %3028 = trunc i32 %3027 to i8
  %3029 = and i8 %3028, 1
  store i8 %3029, i8* %45, align 1
  %3030 = icmp eq i32 %3016, 0
  %3031 = zext i1 %3030 to i8
  store i8 %3031, i8* %48, align 1
  %3032 = lshr i32 %3016, 31
  %3033 = trunc i32 %3032 to i8
  store i8 %3033, i8* %51, align 1
  %3034 = lshr i32 %3010, 31
  %3035 = lshr i32 %3015, 31
  %3036 = xor i32 %3035, %3034
  %3037 = xor i32 %3032, %3034
  %3038 = add nuw nsw i32 %3037, %3036
  %3039 = icmp eq i32 %3038, 2
  %3040 = zext i1 %3039 to i8
  store i8 %3040, i8* %57, align 1
  %3041 = add i64 %2999, -76
  %3042 = add i64 %3001, 23
  store i64 %3042, i64* %3, align 8
  %3043 = inttoptr i64 %3041 to i32*
  %3044 = load i32, i32* %3043, align 4
  %3045 = add i32 %3044, %3016
  %3046 = zext i32 %3045 to i64
  store i64 %3046, i64* %RCX.i4260.pre-phi, align 8
  %3047 = icmp ult i32 %3045, %3016
  %3048 = icmp ult i32 %3045, %3044
  %3049 = or i1 %3047, %3048
  %3050 = zext i1 %3049 to i8
  store i8 %3050, i8* %32, align 1
  %3051 = and i32 %3045, 255
  %3052 = tail call i32 @llvm.ctpop.i32(i32 %3051)
  %3053 = trunc i32 %3052 to i8
  %3054 = and i8 %3053, 1
  %3055 = xor i8 %3054, 1
  store i8 %3055, i8* %39, align 1
  %3056 = xor i32 %3044, %3016
  %3057 = xor i32 %3056, %3045
  %3058 = lshr i32 %3057, 4
  %3059 = trunc i32 %3058 to i8
  %3060 = and i8 %3059, 1
  store i8 %3060, i8* %45, align 1
  %3061 = icmp eq i32 %3045, 0
  %3062 = zext i1 %3061 to i8
  store i8 %3062, i8* %48, align 1
  %3063 = lshr i32 %3045, 31
  %3064 = trunc i32 %3063 to i8
  store i8 %3064, i8* %51, align 1
  %3065 = lshr i32 %3044, 31
  %3066 = xor i32 %3063, %3032
  %3067 = xor i32 %3063, %3065
  %3068 = add nuw nsw i32 %3066, %3067
  %3069 = icmp eq i32 %3068, 2
  %3070 = zext i1 %3069 to i8
  store i8 %3070, i8* %57, align 1
  %3071 = sext i32 %3045 to i64
  store i64 %3071, i64* %RSI.i739, align 8
  %3072 = shl nsw i64 %3071, 3
  %3073 = add i64 %3006, %3072
  %3074 = add i64 %3001, 30
  store i64 %3074, i64* %3, align 8
  %3075 = inttoptr i64 %3073 to i64*
  %3076 = load i64, i64* %3075, align 8
  store i64 %3076, i64* %RDX.i4317.pre-phi, align 8
  %3077 = load i64, i64* %RBP.i, align 8
  %3078 = add i64 %3077, -96
  %3079 = add i64 %3001, 33
  store i64 %3079, i64* %3, align 8
  %3080 = inttoptr i64 %3078 to i32*
  %3081 = load i32, i32* %3080, align 4
  %3082 = zext i32 %3081 to i64
  store i64 %3082, i64* %RCX.i4260.pre-phi, align 8
  %3083 = add i64 %3077, -160
  %3084 = add i64 %3001, 39
  store i64 %3084, i64* %3, align 8
  %3085 = inttoptr i64 %3083 to i32*
  %3086 = load i32, i32* %3085, align 4
  %3087 = sub i32 %3081, %3086
  %3088 = zext i32 %3087 to i64
  store i64 %3088, i64* %RCX.i4260.pre-phi, align 8
  %3089 = icmp ult i32 %3081, %3086
  %3090 = zext i1 %3089 to i8
  store i8 %3090, i8* %32, align 1
  %3091 = and i32 %3087, 255
  %3092 = tail call i32 @llvm.ctpop.i32(i32 %3091)
  %3093 = trunc i32 %3092 to i8
  %3094 = and i8 %3093, 1
  %3095 = xor i8 %3094, 1
  store i8 %3095, i8* %39, align 1
  %3096 = xor i32 %3086, %3081
  %3097 = xor i32 %3096, %3087
  %3098 = lshr i32 %3097, 4
  %3099 = trunc i32 %3098 to i8
  %3100 = and i8 %3099, 1
  store i8 %3100, i8* %45, align 1
  %3101 = icmp eq i32 %3087, 0
  %3102 = zext i1 %3101 to i8
  store i8 %3102, i8* %48, align 1
  %3103 = lshr i32 %3087, 31
  %3104 = trunc i32 %3103 to i8
  store i8 %3104, i8* %51, align 1
  %3105 = lshr i32 %3081, 31
  %3106 = lshr i32 %3086, 31
  %3107 = xor i32 %3106, %3105
  %3108 = xor i32 %3103, %3105
  %3109 = add nuw nsw i32 %3108, %3107
  %3110 = icmp eq i32 %3109, 2
  %3111 = zext i1 %3110 to i8
  store i8 %3111, i8* %57, align 1
  %3112 = add i64 %3077, -76
  %3113 = add i64 %3001, 42
  store i64 %3113, i64* %3, align 8
  %3114 = inttoptr i64 %3112 to i32*
  %3115 = load i32, i32* %3114, align 4
  %3116 = add i32 %3115, %3087
  %3117 = zext i32 %3116 to i64
  store i64 %3117, i64* %RCX.i4260.pre-phi, align 8
  %3118 = icmp ult i32 %3116, %3087
  %3119 = icmp ult i32 %3116, %3115
  %3120 = or i1 %3118, %3119
  %3121 = zext i1 %3120 to i8
  store i8 %3121, i8* %32, align 1
  %3122 = and i32 %3116, 255
  %3123 = tail call i32 @llvm.ctpop.i32(i32 %3122)
  %3124 = trunc i32 %3123 to i8
  %3125 = and i8 %3124, 1
  %3126 = xor i8 %3125, 1
  store i8 %3126, i8* %39, align 1
  %3127 = xor i32 %3115, %3087
  %3128 = xor i32 %3127, %3116
  %3129 = lshr i32 %3128, 4
  %3130 = trunc i32 %3129 to i8
  %3131 = and i8 %3130, 1
  store i8 %3131, i8* %45, align 1
  %3132 = icmp eq i32 %3116, 0
  %3133 = zext i1 %3132 to i8
  store i8 %3133, i8* %48, align 1
  %3134 = lshr i32 %3116, 31
  %3135 = trunc i32 %3134 to i8
  store i8 %3135, i8* %51, align 1
  %3136 = lshr i32 %3115, 31
  %3137 = xor i32 %3134, %3103
  %3138 = xor i32 %3134, %3136
  %3139 = add nuw nsw i32 %3137, %3138
  %3140 = icmp eq i32 %3139, 2
  %3141 = zext i1 %3140 to i8
  store i8 %3141, i8* %57, align 1
  %3142 = sext i32 %3116 to i64
  store i64 %3142, i64* %RSI.i739, align 8
  %3143 = shl nsw i64 %3142, 2
  %3144 = add i64 %3076, %3143
  %3145 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %3146 = add i64 %3001, 48
  store i64 %3146, i64* %3, align 8
  %3147 = inttoptr i64 %3144 to i32*
  store i32 %3145, i32* %3147, align 4
  %3148 = load i64, i64* %RBP.i, align 8
  %3149 = add i64 %3148, -104
  %3150 = load i64, i64* %3, align 8
  %3151 = add i64 %3150, 3
  store i64 %3151, i64* %3, align 8
  %3152 = inttoptr i64 %3149 to i32*
  %3153 = load i32, i32* %3152, align 4
  %3154 = zext i32 %3153 to i64
  store i64 %3154, i64* %RAX.i3587.phi.trans.insert, align 8
  %3155 = add i64 %3148, -80
  %3156 = add i64 %3150, 6
  store i64 %3156, i64* %3, align 8
  %3157 = inttoptr i64 %3155 to i32*
  %3158 = load i32, i32* %3157, align 4
  %3159 = sub i32 %3153, %3158
  %3160 = icmp ult i32 %3153, %3158
  %3161 = zext i1 %3160 to i8
  store i8 %3161, i8* %32, align 1
  %3162 = and i32 %3159, 255
  %3163 = tail call i32 @llvm.ctpop.i32(i32 %3162)
  %3164 = trunc i32 %3163 to i8
  %3165 = and i8 %3164, 1
  %3166 = xor i8 %3165, 1
  store i8 %3166, i8* %39, align 1
  %3167 = xor i32 %3158, %3153
  %3168 = xor i32 %3167, %3159
  %3169 = lshr i32 %3168, 4
  %3170 = trunc i32 %3169 to i8
  %3171 = and i8 %3170, 1
  store i8 %3171, i8* %45, align 1
  %3172 = icmp eq i32 %3159, 0
  %3173 = zext i1 %3172 to i8
  store i8 %3173, i8* %48, align 1
  %3174 = lshr i32 %3159, 31
  %3175 = trunc i32 %3174 to i8
  store i8 %3175, i8* %51, align 1
  %3176 = lshr i32 %3153, 31
  %3177 = lshr i32 %3158, 31
  %3178 = xor i32 %3177, %3176
  %3179 = xor i32 %3174, %3176
  %3180 = add nuw nsw i32 %3179, %3178
  %3181 = icmp eq i32 %3180, 2
  %3182 = zext i1 %3181 to i8
  store i8 %3182, i8* %57, align 1
  %3183 = icmp ne i8 %3175, 0
  %3184 = xor i1 %3183, %3181
  %.v623 = select i1 %3184, i64 12, i64 36
  %3185 = add i64 %3150, %.v623
  store i64 %3185, i64* %3, align 8
  br i1 %3184, label %block_420ecd, label %block_.L_420ee5

block_420ecd:                                     ; preds = %routine_shll__cl___esi.exit5327
  %3186 = add i64 %3148, -96
  %3187 = add i64 %3185, 3
  store i64 %3187, i64* %3, align 8
  %3188 = inttoptr i64 %3186 to i32*
  %3189 = load i32, i32* %3188, align 4
  %3190 = zext i32 %3189 to i64
  store i64 %3190, i64* %RAX.i3587.phi.trans.insert, align 8
  %3191 = add i64 %3148, -168
  %3192 = add i64 %3185, 9
  store i64 %3192, i64* %3, align 8
  %3193 = inttoptr i64 %3191 to i32*
  store i32 %3189, i32* %3193, align 4
  %3194 = load i64, i64* %RBP.i, align 8
  %3195 = add i64 %3194, -100
  %3196 = load i64, i64* %3, align 8
  %3197 = add i64 %3196, 3
  store i64 %3197, i64* %3, align 8
  %3198 = inttoptr i64 %3195 to i32*
  %3199 = load i32, i32* %3198, align 4
  %3200 = zext i32 %3199 to i64
  store i64 %3200, i64* %RAX.i3587.phi.trans.insert, align 8
  %3201 = add i64 %3194, -172
  %3202 = add i64 %3196, 9
  store i64 %3202, i64* %3, align 8
  %3203 = inttoptr i64 %3201 to i32*
  store i32 %3199, i32* %3203, align 4
  %3204 = load i64, i64* %RBP.i, align 8
  %3205 = add i64 %3204, -104
  %3206 = load i64, i64* %3, align 8
  %3207 = add i64 %3206, 3
  store i64 %3207, i64* %3, align 8
  %3208 = inttoptr i64 %3205 to i32*
  %3209 = load i32, i32* %3208, align 4
  %3210 = zext i32 %3209 to i64
  store i64 %3210, i64* %RAX.i3587.phi.trans.insert, align 8
  %3211 = add i64 %3204, -80
  %3212 = add i64 %3206, 6
  store i64 %3212, i64* %3, align 8
  %3213 = inttoptr i64 %3211 to i32*
  store i32 %3209, i32* %3213, align 4
  %.pre408 = load i64, i64* %3, align 8
  br label %block_.L_420ee5

block_.L_420ee5:                                  ; preds = %routine_shll__cl___esi.exit5327, %block_420ecd
  %3214 = phi i64 [ %3185, %routine_shll__cl___esi.exit5327 ], [ %.pre408, %block_420ecd ]
  %3215 = add i64 %3214, 5
  store i64 %3215, i64* %3, align 8
  br label %block_.L_420eea

block_.L_420eea:                                  ; preds = %block_420db7, %block_.L_420ee5
  %3216 = phi i64 [ %2683, %block_420db7 ], [ %3215, %block_.L_420ee5 ]
  %MEMORY.14 = phi %struct.Memory* [ %2499, %block_420db7 ], [ %call2_420e89, %block_.L_420ee5 ]
  %3217 = add i64 %3216, 5
  store i64 %3217, i64* %3, align 8
  %.pre409 = load i64, i64* %RBP.i, align 8
  br label %block_.L_420eef

block_.L_420eef:                                  ; preds = %block_420d9e, %block_420d57, %block_.L_420eea
  %3218 = phi i64 [ %2427, %block_420d57 ], [ %2501, %block_420d9e ], [ %.pre409, %block_.L_420eea ]
  %3219 = phi i64 [ %2459, %block_420d57 ], [ %2533, %block_420d9e ], [ %3217, %block_.L_420eea ]
  %MEMORY.15 = phi %struct.Memory* [ %2425, %block_420d57 ], [ %2499, %block_420d9e ], [ %MEMORY.14, %block_.L_420eea ]
  %3220 = add i64 %3218, -192
  %3221 = add i64 %3219, 11
  store i64 %3221, i64* %3, align 8
  %3222 = inttoptr i64 %3220 to i32*
  %3223 = load i32, i32* %3222, align 4
  %3224 = add i32 %3223, 1
  %3225 = zext i32 %3224 to i64
  store i64 %3225, i64* %RAX.i3587.phi.trans.insert, align 8
  %3226 = icmp eq i32 %3223, -1
  %3227 = icmp eq i32 %3224, 0
  %3228 = or i1 %3226, %3227
  %3229 = zext i1 %3228 to i8
  store i8 %3229, i8* %32, align 1
  %3230 = and i32 %3224, 255
  %3231 = tail call i32 @llvm.ctpop.i32(i32 %3230)
  %3232 = trunc i32 %3231 to i8
  %3233 = and i8 %3232, 1
  %3234 = xor i8 %3233, 1
  store i8 %3234, i8* %39, align 1
  %3235 = xor i32 %3224, %3223
  %3236 = lshr i32 %3235, 4
  %3237 = trunc i32 %3236 to i8
  %3238 = and i8 %3237, 1
  store i8 %3238, i8* %45, align 1
  %3239 = zext i1 %3227 to i8
  store i8 %3239, i8* %48, align 1
  %3240 = lshr i32 %3224, 31
  %3241 = trunc i32 %3240 to i8
  store i8 %3241, i8* %51, align 1
  %3242 = lshr i32 %3223, 31
  %3243 = xor i32 %3240, %3242
  %3244 = add nuw nsw i32 %3243, %3240
  %3245 = icmp eq i32 %3244, 2
  %3246 = zext i1 %3245 to i8
  store i8 %3246, i8* %57, align 1
  %3247 = add i64 %3219, 20
  store i64 %3247, i64* %3, align 8
  store i32 %3224, i32* %3222, align 4
  %3248 = load i64, i64* %3, align 8
  %3249 = add i64 %3248, -441
  store i64 %3249, i64* %3, align 8
  br label %block_.L_420d4a

block_.L_420f08:                                  ; preds = %block_.L_420d4a
  %3250 = add i64 %2265, -160
  %3251 = add i64 %2293, 6
  store i64 %3251, i64* %3, align 8
  %3252 = inttoptr i64 %3250 to i32*
  %3253 = load i32, i32* %3252, align 4
  %3254 = zext i32 %3253 to i64
  store i64 %3254, i64* %RAX.i3587.phi.trans.insert, align 8
  %3255 = add i64 %2265, -44
  %3256 = add i64 %2293, 9
  store i64 %3256, i64* %3, align 8
  %3257 = inttoptr i64 %3255 to i32*
  %3258 = load i32, i32* %3257, align 4
  %3259 = sub i32 %3253, %3258
  %3260 = icmp ult i32 %3253, %3258
  %3261 = zext i1 %3260 to i8
  store i8 %3261, i8* %32, align 1
  %3262 = and i32 %3259, 255
  %3263 = tail call i32 @llvm.ctpop.i32(i32 %3262)
  %3264 = trunc i32 %3263 to i8
  %3265 = and i8 %3264, 1
  %3266 = xor i8 %3265, 1
  store i8 %3266, i8* %39, align 1
  %3267 = xor i32 %3258, %3253
  %3268 = xor i32 %3267, %3259
  %3269 = lshr i32 %3268, 4
  %3270 = trunc i32 %3269 to i8
  %3271 = and i8 %3270, 1
  store i8 %3271, i8* %45, align 1
  %3272 = icmp eq i32 %3259, 0
  %3273 = zext i1 %3272 to i8
  store i8 %3273, i8* %48, align 1
  %3274 = lshr i32 %3259, 31
  %3275 = trunc i32 %3274 to i8
  store i8 %3275, i8* %51, align 1
  %3276 = lshr i32 %3253, 31
  %3277 = lshr i32 %3258, 31
  %3278 = xor i32 %3277, %3276
  %3279 = xor i32 %3274, %3276
  %3280 = add nuw nsw i32 %3279, %3278
  %3281 = icmp eq i32 %3280, 2
  %3282 = zext i1 %3281 to i8
  store i8 %3282, i8* %57, align 1
  %.v507 = select i1 %3272, i64 15, i64 30
  %3283 = add i64 %2293, %.v507
  store i64 %3283, i64* %3, align 8
  br i1 %3272, label %block_420f17, label %block_.L_420f26

block_420f17:                                     ; preds = %block_.L_420f08
  %3284 = add i64 %2265, -164
  %3285 = add i64 %3283, 6
  store i64 %3285, i64* %3, align 8
  %3286 = inttoptr i64 %3284 to i32*
  %3287 = load i32, i32* %3286, align 4
  %3288 = zext i32 %3287 to i64
  store i64 %3288, i64* %RAX.i3587.phi.trans.insert, align 8
  %3289 = add i64 %2265, -48
  %3290 = add i64 %3283, 9
  store i64 %3290, i64* %3, align 8
  %3291 = inttoptr i64 %3289 to i32*
  %3292 = load i32, i32* %3291, align 4
  %3293 = sub i32 %3287, %3292
  %3294 = icmp ult i32 %3287, %3292
  %3295 = zext i1 %3294 to i8
  store i8 %3295, i8* %32, align 1
  %3296 = and i32 %3293, 255
  %3297 = tail call i32 @llvm.ctpop.i32(i32 %3296)
  %3298 = trunc i32 %3297 to i8
  %3299 = and i8 %3298, 1
  %3300 = xor i8 %3299, 1
  store i8 %3300, i8* %39, align 1
  %3301 = xor i32 %3292, %3287
  %3302 = xor i32 %3301, %3293
  %3303 = lshr i32 %3302, 4
  %3304 = trunc i32 %3303 to i8
  %3305 = and i8 %3304, 1
  store i8 %3305, i8* %45, align 1
  %3306 = icmp eq i32 %3293, 0
  %3307 = zext i1 %3306 to i8
  store i8 %3307, i8* %48, align 1
  %3308 = lshr i32 %3293, 31
  %3309 = trunc i32 %3308 to i8
  store i8 %3309, i8* %51, align 1
  %3310 = lshr i32 %3287, 31
  %3311 = lshr i32 %3292, 31
  %3312 = xor i32 %3311, %3310
  %3313 = xor i32 %3308, %3310
  %3314 = add nuw nsw i32 %3313, %3312
  %3315 = icmp eq i32 %3314, 2
  %3316 = zext i1 %3315 to i8
  store i8 %3316, i8* %57, align 1
  %.v619 = select i1 %3306, i64 874, i64 15
  %3317 = add i64 %3283, %.v619
  store i64 %3317, i64* %3, align 8
  br i1 %3306, label %block_.L_421281, label %block_.L_420f26

block_.L_420f26:                                  ; preds = %block_.L_420f08, %block_420f17
  %3318 = phi i64 [ %3317, %block_420f17 ], [ %3283, %block_.L_420f08 ]
  %3319 = add i64 %3318, 3
  store i64 %3319, i64* %3, align 8
  %3320 = load i32, i32* %3257, align 4
  %3321 = zext i32 %3320 to i64
  store i64 %3321, i64* %RAX.i3587.phi.trans.insert, align 8
  %3322 = add i64 %2265, -96
  %3323 = add i64 %3318, 6
  store i64 %3323, i64* %3, align 8
  %3324 = inttoptr i64 %3322 to i32*
  store i32 %3320, i32* %3324, align 4
  %3325 = load i64, i64* %RBP.i, align 8
  %3326 = add i64 %3325, -48
  %3327 = load i64, i64* %3, align 8
  %3328 = add i64 %3327, 3
  store i64 %3328, i64* %3, align 8
  %3329 = inttoptr i64 %3326 to i32*
  %3330 = load i32, i32* %3329, align 4
  %3331 = zext i32 %3330 to i64
  store i64 %3331, i64* %RAX.i3587.phi.trans.insert, align 8
  %3332 = add i64 %3325, -100
  %3333 = add i64 %3327, 6
  store i64 %3333, i64* %3, align 8
  %3334 = inttoptr i64 %3332 to i32*
  store i32 %3330, i32* %3334, align 4
  %3335 = load i64, i64* %RBP.i, align 8
  %3336 = add i64 %3335, -96
  %3337 = load i64, i64* %3, align 8
  %3338 = add i64 %3337, 3
  store i64 %3338, i64* %3, align 8
  %3339 = inttoptr i64 %3336 to i32*
  %3340 = load i32, i32* %3339, align 4
  %3341 = zext i32 %3340 to i64
  store i64 %3341, i64* %RAX.i3587.phi.trans.insert, align 8
  %3342 = add i64 %3335, -160
  %3343 = add i64 %3337, 9
  store i64 %3343, i64* %3, align 8
  %3344 = inttoptr i64 %3342 to i32*
  %3345 = load i32, i32* %3344, align 4
  %3346 = sub i32 %3340, %3345
  %3347 = zext i32 %3346 to i64
  store i64 %3347, i64* %RAX.i3587.phi.trans.insert, align 8
  %3348 = icmp ult i32 %3340, %3345
  %3349 = zext i1 %3348 to i8
  store i8 %3349, i8* %32, align 1
  %3350 = and i32 %3346, 255
  %3351 = tail call i32 @llvm.ctpop.i32(i32 %3350)
  %3352 = trunc i32 %3351 to i8
  %3353 = and i8 %3352, 1
  %3354 = xor i8 %3353, 1
  store i8 %3354, i8* %39, align 1
  %3355 = xor i32 %3345, %3340
  %3356 = xor i32 %3355, %3346
  %3357 = lshr i32 %3356, 4
  %3358 = trunc i32 %3357 to i8
  %3359 = and i8 %3358, 1
  store i8 %3359, i8* %45, align 1
  %3360 = icmp eq i32 %3346, 0
  %3361 = zext i1 %3360 to i8
  store i8 %3361, i8* %48, align 1
  %3362 = lshr i32 %3346, 31
  %3363 = trunc i32 %3362 to i8
  store i8 %3363, i8* %51, align 1
  %3364 = lshr i32 %3340, 31
  %3365 = lshr i32 %3345, 31
  %3366 = xor i32 %3365, %3364
  %3367 = xor i32 %3362, %3364
  %3368 = add nuw nsw i32 %3367, %3366
  %3369 = icmp eq i32 %3368, 2
  %3370 = zext i1 %3369 to i8
  store i8 %3370, i8* %57, align 1
  store i64 %3347, i64* %RDI.i1133, align 8
  %3371 = add i64 %3337, -130866
  %3372 = add i64 %3337, 16
  %3373 = load i64, i64* %6, align 8
  %3374 = add i64 %3373, -8
  %3375 = inttoptr i64 %3374 to i64*
  store i64 %3372, i64* %3375, align 8
  store i64 %3374, i64* %6, align 8
  store i64 %3371, i64* %3, align 8
  %3376 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.12)
  %3377 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %3378 = load i64, i64* %RBP.i, align 8
  %3379 = add i64 %3378, -76
  %3380 = load i64, i64* %3, align 8
  %3381 = add i64 %3380, 3
  store i64 %3381, i64* %3, align 8
  %3382 = inttoptr i64 %3379 to i32*
  %3383 = load i32, i32* %3382, align 4
  %3384 = sub i32 %3377, %3383
  %3385 = icmp ult i32 %3377, %3383
  %3386 = zext i1 %3385 to i8
  store i8 %3386, i8* %32, align 1
  %3387 = and i32 %3384, 255
  %3388 = tail call i32 @llvm.ctpop.i32(i32 %3387)
  %3389 = trunc i32 %3388 to i8
  %3390 = and i8 %3389, 1
  %3391 = xor i8 %3390, 1
  store i8 %3391, i8* %39, align 1
  %3392 = xor i32 %3383, %3377
  %3393 = xor i32 %3392, %3384
  %3394 = lshr i32 %3393, 4
  %3395 = trunc i32 %3394 to i8
  %3396 = and i8 %3395, 1
  store i8 %3396, i8* %45, align 1
  %3397 = icmp eq i32 %3384, 0
  %3398 = zext i1 %3397 to i8
  store i8 %3398, i8* %48, align 1
  %3399 = lshr i32 %3384, 31
  %3400 = trunc i32 %3399 to i8
  store i8 %3400, i8* %51, align 1
  %3401 = lshr i32 %3377, 31
  %3402 = lshr i32 %3383, 31
  %3403 = xor i32 %3402, %3401
  %3404 = xor i32 %3399, %3401
  %3405 = add nuw nsw i32 %3404, %3403
  %3406 = icmp eq i32 %3405, 2
  %3407 = zext i1 %3406 to i8
  store i8 %3407, i8* %57, align 1
  %3408 = icmp ne i8 %3400, 0
  %3409 = xor i1 %3408, %3406
  %.demorgan = or i1 %3397, %3409
  %.v508 = select i1 %.demorgan, i64 9, i64 346
  %3410 = add i64 %3380, %.v508
  store i64 %3410, i64* %3, align 8
  br i1 %.demorgan, label %block_420f4b, label %block_.L_42109c

block_420f4b:                                     ; preds = %block_.L_420f26
  %3411 = add i64 %3378, -100
  %3412 = add i64 %3410, 3
  store i64 %3412, i64* %3, align 8
  %3413 = inttoptr i64 %3411 to i32*
  %3414 = load i32, i32* %3413, align 4
  %3415 = zext i32 %3414 to i64
  store i64 %3415, i64* %RAX.i3587.phi.trans.insert, align 8
  %3416 = add i64 %3378, -164
  %3417 = add i64 %3410, 9
  store i64 %3417, i64* %3, align 8
  %3418 = inttoptr i64 %3416 to i32*
  %3419 = load i32, i32* %3418, align 4
  %3420 = sub i32 %3414, %3419
  %3421 = zext i32 %3420 to i64
  store i64 %3421, i64* %RAX.i3587.phi.trans.insert, align 8
  %3422 = icmp ult i32 %3414, %3419
  %3423 = zext i1 %3422 to i8
  store i8 %3423, i8* %32, align 1
  %3424 = and i32 %3420, 255
  %3425 = tail call i32 @llvm.ctpop.i32(i32 %3424)
  %3426 = trunc i32 %3425 to i8
  %3427 = and i8 %3426, 1
  %3428 = xor i8 %3427, 1
  store i8 %3428, i8* %39, align 1
  %3429 = xor i32 %3419, %3414
  %3430 = xor i32 %3429, %3420
  %3431 = lshr i32 %3430, 4
  %3432 = trunc i32 %3431 to i8
  %3433 = and i8 %3432, 1
  store i8 %3433, i8* %45, align 1
  %3434 = icmp eq i32 %3420, 0
  %3435 = zext i1 %3434 to i8
  store i8 %3435, i8* %48, align 1
  %3436 = lshr i32 %3420, 31
  %3437 = trunc i32 %3436 to i8
  store i8 %3437, i8* %51, align 1
  %3438 = lshr i32 %3414, 31
  %3439 = lshr i32 %3419, 31
  %3440 = xor i32 %3439, %3438
  %3441 = xor i32 %3436, %3438
  %3442 = add nuw nsw i32 %3441, %3440
  %3443 = icmp eq i32 %3442, 2
  %3444 = zext i1 %3443 to i8
  store i8 %3444, i8* %57, align 1
  store i64 %3421, i64* %RDI.i1133, align 8
  %3445 = add i64 %3410, -130891
  %3446 = add i64 %3410, 16
  %3447 = load i64, i64* %6, align 8
  %3448 = add i64 %3447, -8
  %3449 = inttoptr i64 %3448 to i64*
  store i64 %3446, i64* %3449, align 8
  store i64 %3448, i64* %6, align 8
  store i64 %3445, i64* %3, align 8
  %3450 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %3376)
  %3451 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %3452 = load i64, i64* %RBP.i, align 8
  %3453 = add i64 %3452, -76
  %3454 = load i64, i64* %3, align 8
  %3455 = add i64 %3454, 3
  store i64 %3455, i64* %3, align 8
  %3456 = inttoptr i64 %3453 to i32*
  %3457 = load i32, i32* %3456, align 4
  %3458 = sub i32 %3451, %3457
  %3459 = icmp ult i32 %3451, %3457
  %3460 = zext i1 %3459 to i8
  store i8 %3460, i8* %32, align 1
  %3461 = and i32 %3458, 255
  %3462 = tail call i32 @llvm.ctpop.i32(i32 %3461)
  %3463 = trunc i32 %3462 to i8
  %3464 = and i8 %3463, 1
  %3465 = xor i8 %3464, 1
  store i8 %3465, i8* %39, align 1
  %3466 = xor i32 %3457, %3451
  %3467 = xor i32 %3466, %3458
  %3468 = lshr i32 %3467, 4
  %3469 = trunc i32 %3468 to i8
  %3470 = and i8 %3469, 1
  store i8 %3470, i8* %45, align 1
  %3471 = icmp eq i32 %3458, 0
  %3472 = zext i1 %3471 to i8
  store i8 %3472, i8* %48, align 1
  %3473 = lshr i32 %3458, 31
  %3474 = trunc i32 %3473 to i8
  store i8 %3474, i8* %51, align 1
  %3475 = lshr i32 %3451, 31
  %3476 = lshr i32 %3457, 31
  %3477 = xor i32 %3476, %3475
  %3478 = xor i32 %3473, %3475
  %3479 = add nuw nsw i32 %3478, %3477
  %3480 = icmp eq i32 %3479, 2
  %3481 = zext i1 %3480 to i8
  store i8 %3481, i8* %57, align 1
  %3482 = icmp ne i8 %3474, 0
  %3483 = xor i1 %3482, %3480
  %.demorgan450 = or i1 %3471, %3483
  %.v616 = select i1 %.demorgan450, i64 9, i64 321
  %3484 = add i64 %3454, %.v616
  store i64 %3484, i64* %3, align 8
  br i1 %.demorgan450, label %block_420f64, label %block_.L_42109c

block_420f64:                                     ; preds = %block_420f4b
  %3485 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %3485, i64* %RAX.i3587.phi.trans.insert, align 8
  %3486 = add i64 %3452, -100
  %3487 = add i64 %3484, 11
  store i64 %3487, i64* %3, align 8
  %3488 = inttoptr i64 %3486 to i32*
  %3489 = load i32, i32* %3488, align 4
  %3490 = zext i32 %3489 to i64
  store i64 %3490, i64* %RCX.i4260.pre-phi, align 8
  %3491 = add i64 %3452, -164
  %3492 = add i64 %3484, 17
  store i64 %3492, i64* %3, align 8
  %3493 = inttoptr i64 %3491 to i32*
  %3494 = load i32, i32* %3493, align 4
  %3495 = sub i32 %3489, %3494
  %3496 = zext i32 %3495 to i64
  store i64 %3496, i64* %RCX.i4260.pre-phi, align 8
  %3497 = icmp ult i32 %3489, %3494
  %3498 = zext i1 %3497 to i8
  store i8 %3498, i8* %32, align 1
  %3499 = and i32 %3495, 255
  %3500 = tail call i32 @llvm.ctpop.i32(i32 %3499)
  %3501 = trunc i32 %3500 to i8
  %3502 = and i8 %3501, 1
  %3503 = xor i8 %3502, 1
  store i8 %3503, i8* %39, align 1
  %3504 = xor i32 %3494, %3489
  %3505 = xor i32 %3504, %3495
  %3506 = lshr i32 %3505, 4
  %3507 = trunc i32 %3506 to i8
  %3508 = and i8 %3507, 1
  store i8 %3508, i8* %45, align 1
  %3509 = icmp eq i32 %3495, 0
  %3510 = zext i1 %3509 to i8
  store i8 %3510, i8* %48, align 1
  %3511 = lshr i32 %3495, 31
  %3512 = trunc i32 %3511 to i8
  store i8 %3512, i8* %51, align 1
  %3513 = lshr i32 %3489, 31
  %3514 = lshr i32 %3494, 31
  %3515 = xor i32 %3514, %3513
  %3516 = xor i32 %3511, %3513
  %3517 = add nuw nsw i32 %3516, %3515
  %3518 = icmp eq i32 %3517, 2
  %3519 = zext i1 %3518 to i8
  store i8 %3519, i8* %57, align 1
  %3520 = add i64 %3484, 20
  store i64 %3520, i64* %3, align 8
  %3521 = load i32, i32* %3456, align 4
  %3522 = add i32 %3521, %3495
  %3523 = zext i32 %3522 to i64
  store i64 %3523, i64* %RCX.i4260.pre-phi, align 8
  %3524 = icmp ult i32 %3522, %3495
  %3525 = icmp ult i32 %3522, %3521
  %3526 = or i1 %3524, %3525
  %3527 = zext i1 %3526 to i8
  store i8 %3527, i8* %32, align 1
  %3528 = and i32 %3522, 255
  %3529 = tail call i32 @llvm.ctpop.i32(i32 %3528)
  %3530 = trunc i32 %3529 to i8
  %3531 = and i8 %3530, 1
  %3532 = xor i8 %3531, 1
  store i8 %3532, i8* %39, align 1
  %3533 = xor i32 %3521, %3495
  %3534 = xor i32 %3533, %3522
  %3535 = lshr i32 %3534, 4
  %3536 = trunc i32 %3535 to i8
  %3537 = and i8 %3536, 1
  store i8 %3537, i8* %45, align 1
  %3538 = icmp eq i32 %3522, 0
  %3539 = zext i1 %3538 to i8
  store i8 %3539, i8* %48, align 1
  %3540 = lshr i32 %3522, 31
  %3541 = trunc i32 %3540 to i8
  store i8 %3541, i8* %51, align 1
  %3542 = lshr i32 %3521, 31
  %3543 = xor i32 %3540, %3511
  %3544 = xor i32 %3540, %3542
  %3545 = add nuw nsw i32 %3543, %3544
  %3546 = icmp eq i32 %3545, 2
  %3547 = zext i1 %3546 to i8
  store i8 %3547, i8* %57, align 1
  %3548 = sext i32 %3522 to i64
  store i64 %3548, i64* %RDX.i4317.pre-phi, align 8
  %3549 = shl nsw i64 %3548, 3
  %3550 = add i64 %3485, %3549
  %3551 = add i64 %3484, 27
  store i64 %3551, i64* %3, align 8
  %3552 = inttoptr i64 %3550 to i64*
  %3553 = load i64, i64* %3552, align 8
  store i64 %3553, i64* %RAX.i3587.phi.trans.insert, align 8
  %3554 = add i64 %3452, -96
  %3555 = add i64 %3484, 30
  store i64 %3555, i64* %3, align 8
  %3556 = inttoptr i64 %3554 to i32*
  %3557 = load i32, i32* %3556, align 4
  %3558 = zext i32 %3557 to i64
  store i64 %3558, i64* %RCX.i4260.pre-phi, align 8
  %3559 = load i64, i64* %RBP.i, align 8
  %3560 = add i64 %3559, -160
  %3561 = add i64 %3484, 36
  store i64 %3561, i64* %3, align 8
  %3562 = inttoptr i64 %3560 to i32*
  %3563 = load i32, i32* %3562, align 4
  %3564 = sub i32 %3557, %3563
  %3565 = zext i32 %3564 to i64
  store i64 %3565, i64* %RCX.i4260.pre-phi, align 8
  %3566 = icmp ult i32 %3557, %3563
  %3567 = zext i1 %3566 to i8
  store i8 %3567, i8* %32, align 1
  %3568 = and i32 %3564, 255
  %3569 = tail call i32 @llvm.ctpop.i32(i32 %3568)
  %3570 = trunc i32 %3569 to i8
  %3571 = and i8 %3570, 1
  %3572 = xor i8 %3571, 1
  store i8 %3572, i8* %39, align 1
  %3573 = xor i32 %3563, %3557
  %3574 = xor i32 %3573, %3564
  %3575 = lshr i32 %3574, 4
  %3576 = trunc i32 %3575 to i8
  %3577 = and i8 %3576, 1
  store i8 %3577, i8* %45, align 1
  %3578 = icmp eq i32 %3564, 0
  %3579 = zext i1 %3578 to i8
  store i8 %3579, i8* %48, align 1
  %3580 = lshr i32 %3564, 31
  %3581 = trunc i32 %3580 to i8
  store i8 %3581, i8* %51, align 1
  %3582 = lshr i32 %3557, 31
  %3583 = lshr i32 %3563, 31
  %3584 = xor i32 %3583, %3582
  %3585 = xor i32 %3580, %3582
  %3586 = add nuw nsw i32 %3585, %3584
  %3587 = icmp eq i32 %3586, 2
  %3588 = zext i1 %3587 to i8
  store i8 %3588, i8* %57, align 1
  %3589 = add i64 %3559, -76
  %3590 = add i64 %3484, 39
  store i64 %3590, i64* %3, align 8
  %3591 = inttoptr i64 %3589 to i32*
  %3592 = load i32, i32* %3591, align 4
  %3593 = add i32 %3592, %3564
  %3594 = zext i32 %3593 to i64
  store i64 %3594, i64* %RCX.i4260.pre-phi, align 8
  %3595 = icmp ult i32 %3593, %3564
  %3596 = icmp ult i32 %3593, %3592
  %3597 = or i1 %3595, %3596
  %3598 = zext i1 %3597 to i8
  store i8 %3598, i8* %32, align 1
  %3599 = and i32 %3593, 255
  %3600 = tail call i32 @llvm.ctpop.i32(i32 %3599)
  %3601 = trunc i32 %3600 to i8
  %3602 = and i8 %3601, 1
  %3603 = xor i8 %3602, 1
  store i8 %3603, i8* %39, align 1
  %3604 = xor i32 %3592, %3564
  %3605 = xor i32 %3604, %3593
  %3606 = lshr i32 %3605, 4
  %3607 = trunc i32 %3606 to i8
  %3608 = and i8 %3607, 1
  store i8 %3608, i8* %45, align 1
  %3609 = icmp eq i32 %3593, 0
  %3610 = zext i1 %3609 to i8
  store i8 %3610, i8* %48, align 1
  %3611 = lshr i32 %3593, 31
  %3612 = trunc i32 %3611 to i8
  store i8 %3612, i8* %51, align 1
  %3613 = lshr i32 %3592, 31
  %3614 = xor i32 %3611, %3580
  %3615 = xor i32 %3611, %3613
  %3616 = add nuw nsw i32 %3614, %3615
  %3617 = icmp eq i32 %3616, 2
  %3618 = zext i1 %3617 to i8
  store i8 %3618, i8* %57, align 1
  %3619 = sext i32 %3593 to i64
  store i64 %3619, i64* %RDX.i4317.pre-phi, align 8
  %3620 = shl nsw i64 %3619, 2
  %3621 = add i64 %3553, %3620
  %3622 = add i64 %3484, 46
  store i64 %3622, i64* %3, align 8
  %3623 = inttoptr i64 %3621 to i32*
  %3624 = load i32, i32* %3623, align 4
  store i8 0, i8* %32, align 1
  %3625 = and i32 %3624, 255
  %3626 = tail call i32 @llvm.ctpop.i32(i32 %3625)
  %3627 = trunc i32 %3626 to i8
  %3628 = and i8 %3627, 1
  %3629 = xor i8 %3628, 1
  store i8 %3629, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %3630 = icmp eq i32 %3624, 0
  %3631 = zext i1 %3630 to i8
  store i8 %3631, i8* %48, align 1
  %3632 = lshr i32 %3624, 31
  %3633 = trunc i32 %3632 to i8
  store i8 %3633, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v617 = select i1 %3630, i64 52, i64 307
  %3634 = add i64 %3484, %.v617
  store i64 %3634, i64* %3, align 8
  br i1 %3630, label %block_420f98, label %block_.L_421097

block_420f98:                                     ; preds = %block_420f64
  %3635 = load i64, i64* %RBP.i, align 8
  %3636 = add i64 %3635, -132
  %3637 = add i64 %3634, 6
  store i64 %3637, i64* %3, align 8
  %3638 = inttoptr i64 %3636 to i32*
  %3639 = load i32, i32* %3638, align 4
  %3640 = zext i32 %3639 to i64
  store i64 %3640, i64* %RAX.i3587.phi.trans.insert, align 8
  %3641 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %3641, i64* %RCX.i4260.pre-phi, align 8
  %3642 = add i64 %3635, -96
  %3643 = add i64 %3634, 17
  store i64 %3643, i64* %3, align 8
  %3644 = inttoptr i64 %3642 to i32*
  %3645 = load i32, i32* %3644, align 4
  %3646 = zext i32 %3645 to i64
  store i64 %3646, i64* %RDX.i4317.pre-phi, align 8
  %3647 = add i64 %3635, -136
  %3648 = add i64 %3634, 23
  store i64 %3648, i64* %3, align 8
  %3649 = inttoptr i64 %3647 to i32*
  %3650 = load i32, i32* %3649, align 4
  %3651 = zext i32 %3650 to i64
  store i64 %3651, i64* %RSI.i739, align 8
  %3652 = add i64 %3635, -256
  %3653 = add i64 %3634, 30
  store i64 %3653, i64* %3, align 8
  %3654 = inttoptr i64 %3652 to i64*
  store i64 %3641, i64* %3654, align 8
  %3655 = load i32, i32* %ESI.i1656, align 4
  %3656 = zext i32 %3655 to i64
  %3657 = load i64, i64* %3, align 8
  store i64 %3656, i64* %RCX.i4260.pre-phi, align 8
  %3658 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %3659 = add i64 %3657, 4
  store i64 %3659, i64* %3, align 8
  %3660 = trunc i32 %3655 to i5
  switch i5 %3660, label %3667 [
    i5 0, label %routine_shll__cl___edx.exit5077
    i5 1, label %3661
  ]

; <label>:3661:                                   ; preds = %block_420f98
  %3662 = trunc i64 %3658 to i32
  %3663 = shl i32 %3662, 1
  %3664 = icmp slt i32 %3662, 0
  %3665 = icmp slt i32 %3663, 0
  %3666 = xor i1 %3664, %3665
  br label %3677

; <label>:3667:                                   ; preds = %block_420f98
  %3668 = and i32 %3655, 31
  %3669 = zext i32 %3668 to i64
  %3670 = add nuw nsw i64 %3669, 4294967295
  %3671 = and i64 %3658, 4294967295
  %3672 = and i64 %3670, 4294967295
  %3673 = shl i64 %3671, %3672
  %3674 = trunc i64 %3673 to i32
  %3675 = icmp slt i32 %3674, 0
  %3676 = shl i32 %3674, 1
  br label %3677

; <label>:3677:                                   ; preds = %3667, %3661
  %3678 = phi i1 [ %3664, %3661 ], [ %3675, %3667 ]
  %3679 = phi i1 [ %3666, %3661 ], [ false, %3667 ]
  %3680 = phi i32 [ %3663, %3661 ], [ %3676, %3667 ]
  %3681 = zext i32 %3680 to i64
  store i64 %3681, i64* %RDX.i4317.pre-phi, align 8
  %3682 = zext i1 %3678 to i8
  store i8 %3682, i8* %32, align 1
  %3683 = and i32 %3680, 254
  %3684 = tail call i32 @llvm.ctpop.i32(i32 %3683)
  %3685 = trunc i32 %3684 to i8
  %3686 = and i8 %3685, 1
  %3687 = xor i8 %3686, 1
  store i8 %3687, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %3688 = icmp eq i32 %3680, 0
  %3689 = zext i1 %3688 to i8
  store i8 %3689, i8* %48, align 1
  %3690 = lshr i32 %3680, 31
  %3691 = trunc i32 %3690 to i8
  store i8 %3691, i8* %51, align 1
  %3692 = zext i1 %3679 to i8
  store i8 %3692, i8* %57, align 1
  br label %routine_shll__cl___edx.exit5077

routine_shll__cl___edx.exit5077:                  ; preds = %3677, %block_420f98
  %3693 = phi i64 [ %3681, %3677 ], [ %3658, %block_420f98 ]
  %3694 = load i64, i64* %RBP.i, align 8
  %3695 = add i64 %3694, -152
  %3696 = add i64 %3657, 10
  store i64 %3696, i64* %3, align 8
  %3697 = trunc i64 %3693 to i32
  %3698 = inttoptr i64 %3695 to i32*
  %3699 = load i32, i32* %3698, align 4
  %3700 = sub i32 %3697, %3699
  %3701 = zext i32 %3700 to i64
  store i64 %3701, i64* %RDX.i4317.pre-phi, align 8
  %3702 = icmp ult i32 %3697, %3699
  %3703 = zext i1 %3702 to i8
  store i8 %3703, i8* %32, align 1
  %3704 = and i32 %3700, 255
  %3705 = tail call i32 @llvm.ctpop.i32(i32 %3704)
  %3706 = trunc i32 %3705 to i8
  %3707 = and i8 %3706, 1
  %3708 = xor i8 %3707, 1
  store i8 %3708, i8* %39, align 1
  %3709 = xor i32 %3699, %3697
  %3710 = xor i32 %3709, %3700
  %3711 = lshr i32 %3710, 4
  %3712 = trunc i32 %3711 to i8
  %3713 = and i8 %3712, 1
  store i8 %3713, i8* %45, align 1
  %3714 = icmp eq i32 %3700, 0
  %3715 = zext i1 %3714 to i8
  store i8 %3715, i8* %48, align 1
  %3716 = lshr i32 %3700, 31
  %3717 = trunc i32 %3716 to i8
  store i8 %3717, i8* %51, align 1
  %3718 = lshr i32 %3697, 31
  %3719 = lshr i32 %3699, 31
  %3720 = xor i32 %3719, %3718
  %3721 = xor i32 %3716, %3718
  %3722 = add nuw nsw i32 %3721, %3720
  %3723 = icmp eq i32 %3722, 2
  %3724 = zext i1 %3723 to i8
  store i8 %3724, i8* %57, align 1
  %3725 = sext i32 %3700 to i64
  store i64 %3725, i64* %RDI.i1133, align 8
  %3726 = add i64 %3694, -256
  %3727 = add i64 %3657, 20
  store i64 %3727, i64* %3, align 8
  %3728 = inttoptr i64 %3726 to i64*
  %3729 = load i64, i64* %3728, align 8
  store i64 %3729, i64* %R8.i5602, align 8
  %3730 = shl nsw i64 %3725, 2
  %3731 = add i64 %3730, %3729
  %3732 = add i64 %3657, 24
  store i64 %3732, i64* %3, align 8
  %3733 = inttoptr i64 %3731 to i32*
  %3734 = load i32, i32* %3733, align 4
  %3735 = zext i32 %3734 to i64
  store i64 %3735, i64* %RDX.i4317.pre-phi, align 8
  %3736 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %3736, i64* %RDI.i1133, align 8
  %3737 = add i64 %3694, -100
  %3738 = add i64 %3657, 35
  store i64 %3738, i64* %3, align 8
  %3739 = inttoptr i64 %3737 to i32*
  %3740 = load i32, i32* %3739, align 4
  %3741 = zext i32 %3740 to i64
  store i64 %3741, i64* %RSI.i739, align 8
  %3742 = add i64 %3694, -136
  %3743 = add i64 %3657, 41
  store i64 %3743, i64* %3, align 8
  %3744 = inttoptr i64 %3742 to i32*
  %3745 = load i32, i32* %3744, align 4
  %3746 = zext i32 %3745 to i64
  store i64 %3746, i64* %RCX.i4260.pre-phi, align 8
  %3747 = add i64 %3657, 43
  store i64 %3747, i64* %3, align 8
  %3748 = trunc i32 %3745 to i5
  switch i5 %3748, label %3754 [
    i5 0, label %routine_shll__cl___esi.exit5052
    i5 1, label %3749
  ]

; <label>:3749:                                   ; preds = %routine_shll__cl___edx.exit5077
  %3750 = shl i32 %3740, 1
  %3751 = icmp slt i32 %3740, 0
  %3752 = icmp slt i32 %3750, 0
  %3753 = xor i1 %3751, %3752
  br label %3763

; <label>:3754:                                   ; preds = %routine_shll__cl___edx.exit5077
  %3755 = and i32 %3745, 31
  %3756 = zext i32 %3755 to i64
  %3757 = add nuw nsw i64 %3756, 4294967295
  %3758 = and i64 %3757, 4294967295
  %3759 = shl i64 %3741, %3758
  %3760 = trunc i64 %3759 to i32
  %3761 = icmp slt i32 %3760, 0
  %3762 = shl i32 %3760, 1
  br label %3763

; <label>:3763:                                   ; preds = %3754, %3749
  %3764 = phi i1 [ %3751, %3749 ], [ %3761, %3754 ]
  %3765 = phi i1 [ %3753, %3749 ], [ false, %3754 ]
  %3766 = phi i32 [ %3750, %3749 ], [ %3762, %3754 ]
  %3767 = zext i32 %3766 to i64
  store i64 %3767, i64* %RSI.i739, align 8
  %3768 = zext i1 %3764 to i8
  store i8 %3768, i8* %32, align 1
  %3769 = and i32 %3766, 254
  %3770 = tail call i32 @llvm.ctpop.i32(i32 %3769)
  %3771 = trunc i32 %3770 to i8
  %3772 = and i8 %3771, 1
  %3773 = xor i8 %3772, 1
  store i8 %3773, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %3774 = icmp eq i32 %3766, 0
  %3775 = zext i1 %3774 to i8
  store i8 %3775, i8* %48, align 1
  %3776 = lshr i32 %3766, 31
  %3777 = trunc i32 %3776 to i8
  store i8 %3777, i8* %51, align 1
  %3778 = zext i1 %3765 to i8
  store i8 %3778, i8* %57, align 1
  br label %routine_shll__cl___esi.exit5052

routine_shll__cl___esi.exit5052:                  ; preds = %3763, %routine_shll__cl___edx.exit5077
  %3779 = phi i32 [ %3766, %3763 ], [ %3740, %routine_shll__cl___edx.exit5077 ]
  %3780 = add i64 %3694, -156
  %3781 = add i64 %3657, 49
  store i64 %3781, i64* %3, align 8
  %3782 = inttoptr i64 %3780 to i32*
  %3783 = load i32, i32* %3782, align 4
  %3784 = sub i32 %3779, %3783
  %3785 = zext i32 %3784 to i64
  store i64 %3785, i64* %RSI.i739, align 8
  %3786 = icmp ult i32 %3779, %3783
  %3787 = zext i1 %3786 to i8
  store i8 %3787, i8* %32, align 1
  %3788 = and i32 %3784, 255
  %3789 = tail call i32 @llvm.ctpop.i32(i32 %3788)
  %3790 = trunc i32 %3789 to i8
  %3791 = and i8 %3790, 1
  %3792 = xor i8 %3791, 1
  store i8 %3792, i8* %39, align 1
  %3793 = xor i32 %3783, %3779
  %3794 = xor i32 %3793, %3784
  %3795 = lshr i32 %3794, 4
  %3796 = trunc i32 %3795 to i8
  %3797 = and i8 %3796, 1
  store i8 %3797, i8* %45, align 1
  %3798 = icmp eq i32 %3784, 0
  %3799 = zext i1 %3798 to i8
  store i8 %3799, i8* %48, align 1
  %3800 = lshr i32 %3784, 31
  %3801 = trunc i32 %3800 to i8
  store i8 %3801, i8* %51, align 1
  %3802 = lshr i32 %3779, 31
  %3803 = lshr i32 %3783, 31
  %3804 = xor i32 %3803, %3802
  %3805 = xor i32 %3800, %3802
  %3806 = add nuw nsw i32 %3805, %3804
  %3807 = icmp eq i32 %3806, 2
  %3808 = zext i1 %3807 to i8
  store i8 %3808, i8* %57, align 1
  %3809 = sext i32 %3784 to i64
  store i64 %3809, i64* %R9.i5580, align 8
  %3810 = shl nsw i64 %3809, 2
  %3811 = add i64 %3736, %3810
  %3812 = add i64 %3657, 56
  store i64 %3812, i64* %3, align 8
  %3813 = inttoptr i64 %3811 to i32*
  %3814 = load i32, i32* %3813, align 4
  %3815 = add i32 %3814, %3734
  %3816 = zext i32 %3815 to i64
  store i64 %3816, i64* %RDX.i4317.pre-phi, align 8
  %3817 = icmp ult i32 %3815, %3734
  %3818 = icmp ult i32 %3815, %3814
  %3819 = or i1 %3817, %3818
  %3820 = zext i1 %3819 to i8
  store i8 %3820, i8* %32, align 1
  %3821 = and i32 %3815, 255
  %3822 = tail call i32 @llvm.ctpop.i32(i32 %3821)
  %3823 = trunc i32 %3822 to i8
  %3824 = and i8 %3823, 1
  %3825 = xor i8 %3824, 1
  store i8 %3825, i8* %39, align 1
  %3826 = xor i32 %3814, %3734
  %3827 = xor i32 %3826, %3815
  %3828 = lshr i32 %3827, 4
  %3829 = trunc i32 %3828 to i8
  %3830 = and i8 %3829, 1
  store i8 %3830, i8* %45, align 1
  %3831 = icmp eq i32 %3815, 0
  %3832 = zext i1 %3831 to i8
  store i8 %3832, i8* %48, align 1
  %3833 = lshr i32 %3815, 31
  %3834 = trunc i32 %3833 to i8
  store i8 %3834, i8* %51, align 1
  %3835 = lshr i32 %3734, 31
  %3836 = lshr i32 %3814, 31
  %3837 = xor i32 %3833, %3835
  %3838 = xor i32 %3833, %3836
  %3839 = add nuw nsw i32 %3837, %3838
  %3840 = icmp eq i32 %3839, 2
  %3841 = zext i1 %3840 to i8
  store i8 %3841, i8* %57, align 1
  %3842 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %3843 = shl i64 %3842, 32
  %3844 = ashr exact i64 %3843, 32
  %3845 = sext i32 %3815 to i64
  %3846 = mul nsw i64 %3845, %3844
  %3847 = shl i64 %3846, 32
  %3848 = ashr i64 %3847, 47
  %3849 = lshr i64 %3848, 1
  %3850 = trunc i64 %3848 to i8
  %3851 = and i8 %3850, 1
  %3852 = trunc i64 %3849 to i32
  %3853 = and i64 %3849, 4294967295
  store i64 %3853, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %3851, i8* %32, align 1
  %3854 = and i32 %3852, 255
  %3855 = tail call i32 @llvm.ctpop.i32(i32 %3854)
  %3856 = trunc i32 %3855 to i8
  %3857 = and i8 %3856, 1
  %3858 = xor i8 %3857, 1
  store i8 %3858, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %3859 = icmp eq i32 %3852, 0
  %3860 = zext i1 %3859 to i8
  store i8 %3860, i8* %48, align 1
  %3861 = lshr i64 %3848, 32
  %3862 = trunc i64 %3861 to i8
  %3863 = and i8 %3862, 1
  store i8 %3863, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %3864 = load i64, i64* %RBP.i, align 8
  %3865 = add i64 %3864, -104
  %3866 = trunc i64 %3849 to i32
  %3867 = add i64 %3657, 65
  store i64 %3867, i64* %3, align 8
  %3868 = inttoptr i64 %3865 to i32*
  store i32 %3866, i32* %3868, align 4
  %3869 = load i64, i64* %RBP.i, align 8
  %3870 = add i64 %3869, -128
  %3871 = load i64, i64* %3, align 8
  %3872 = add i64 %3871, 4
  store i64 %3872, i64* %3, align 8
  %3873 = inttoptr i64 %3870 to i64*
  %3874 = load i64, i64* %3873, align 8
  store i64 %3874, i64* %RDI.i1133, align 8
  %3875 = add i64 %3869, -32
  %3876 = add i64 %3871, 8
  store i64 %3876, i64* %3, align 8
  %3877 = inttoptr i64 %3875 to i64*
  %3878 = load i64, i64* %3877, align 8
  store i64 %3878, i64* %RSI.i739, align 8
  %3879 = add i64 %3869, -112
  %3880 = add i64 %3871, 12
  store i64 %3880, i64* %3, align 8
  %3881 = inttoptr i64 %3879 to i64*
  %3882 = load i64, i64* %3881, align 8
  store i64 %3882, i64* %RDX.i4317.pre-phi, align 8
  %3883 = add i64 %3869, -140
  %3884 = add i64 %3871, 18
  store i64 %3884, i64* %3, align 8
  %3885 = inttoptr i64 %3883 to i32*
  %3886 = load i32, i32* %3885, align 4
  %3887 = zext i32 %3886 to i64
  store i64 %3887, i64* %RCX.i4260.pre-phi, align 8
  %3888 = add i64 %3869, -144
  %3889 = add i64 %3871, 25
  store i64 %3889, i64* %3, align 8
  %3890 = inttoptr i64 %3888 to i32*
  %3891 = load i32, i32* %3890, align 4
  %3892 = zext i32 %3891 to i64
  store i64 %3892, i64* %R8.i5602, align 8
  %3893 = add i64 %3869, -148
  %3894 = add i64 %3871, 32
  store i64 %3894, i64* %3, align 8
  %3895 = inttoptr i64 %3893 to i32*
  %3896 = load i32, i32* %3895, align 4
  %3897 = zext i32 %3896 to i64
  store i64 %3897, i64* %R9.i5580, align 8
  %3898 = add i64 %3869, -104
  %3899 = add i64 %3871, 35
  store i64 %3899, i64* %3, align 8
  %3900 = inttoptr i64 %3898 to i32*
  %3901 = load i32, i32* %3900, align 4
  %3902 = zext i32 %3901 to i64
  store i64 %3902, i64* %RAX.i3587.phi.trans.insert, align 8
  %3903 = add i64 %3869, -80
  %3904 = add i64 %3871, 39
  store i64 %3904, i64* %3, align 8
  %3905 = inttoptr i64 %3903 to i32*
  %3906 = load i32, i32* %3905, align 4
  %3907 = zext i32 %3906 to i64
  store i64 %3907, i64* %68, align 8
  %3908 = add i64 %3869, -96
  %3909 = add i64 %3871, 43
  store i64 %3909, i64* %3, align 8
  %3910 = inttoptr i64 %3908 to i32*
  %3911 = load i32, i32* %3910, align 4
  %3912 = zext i32 %3911 to i64
  store i64 %3912, i64* %R11.i, align 8
  %3913 = add i64 %3869, -100
  %3914 = add i64 %3871, 46
  store i64 %3914, i64* %3, align 8
  %3915 = inttoptr i64 %3913 to i32*
  %3916 = load i32, i32* %3915, align 4
  %3917 = zext i32 %3916 to i64
  store i64 %3917, i64* %RBX.i615, align 8
  %3918 = load i32*, i32** %2119, align 8
  %3919 = add i64 %3871, 49
  store i64 %3919, i64* %3, align 8
  store i32 %3901, i32* %3918, align 4
  %3920 = load i64, i64* %6, align 8
  %3921 = add i64 %3920, 8
  %3922 = load i32, i32* %R10D.i761, align 4
  %3923 = load i64, i64* %3, align 8
  %3924 = add i64 %3923, 5
  store i64 %3924, i64* %3, align 8
  %3925 = inttoptr i64 %3921 to i32*
  store i32 %3922, i32* %3925, align 4
  %3926 = load i64, i64* %6, align 8
  %3927 = add i64 %3926, 16
  %3928 = load i32, i32* %R11D.i5540, align 4
  %3929 = load i64, i64* %3, align 8
  %3930 = add i64 %3929, 5
  store i64 %3930, i64* %3, align 8
  %3931 = inttoptr i64 %3927 to i32*
  store i32 %3928, i32* %3931, align 4
  %3932 = load i64, i64* %6, align 8
  %3933 = add i64 %3932, 24
  %3934 = load i32, i32* %EBX.i5525, align 4
  %3935 = load i64, i64* %3, align 8
  %3936 = add i64 %3935, 4
  store i64 %3936, i64* %3, align 8
  %3937 = inttoptr i64 %3933 to i32*
  store i32 %3934, i32* %3937, align 4
  %3938 = load i64, i64* %3, align 8
  %3939 = add i64 %3938, -2950
  %3940 = add i64 %3938, 5
  %3941 = load i64, i64* %6, align 8
  %3942 = add i64 %3941, -8
  %3943 = inttoptr i64 %3942 to i64*
  store i64 %3940, i64* %3943, align 8
  store i64 %3942, i64* %6, align 8
  store i64 %3939, i64* %3, align 8
  %call2_421036 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %3939, %struct.Memory* %3450)
  %3944 = load i64, i64* %RBP.i, align 8
  %3945 = add i64 %3944, -104
  %3946 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %3947 = load i64, i64* %3, align 8
  %3948 = add i64 %3947, 3
  store i64 %3948, i64* %3, align 8
  %3949 = inttoptr i64 %3945 to i32*
  store i32 %3946, i32* %3949, align 4
  %3950 = load i64, i64* %RBP.i, align 8
  %3951 = add i64 %3950, -104
  %3952 = load i64, i64* %3, align 8
  %3953 = add i64 %3952, 3
  store i64 %3953, i64* %3, align 8
  %3954 = inttoptr i64 %3951 to i32*
  %3955 = load i32, i32* %3954, align 4
  %3956 = zext i32 %3955 to i64
  store i64 %3956, i64* %RAX.i3587.phi.trans.insert, align 8
  %3957 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %3957, i64* %RDX.i4317.pre-phi, align 8
  %3958 = add i64 %3950, -100
  %3959 = add i64 %3952, 14
  store i64 %3959, i64* %3, align 8
  %3960 = inttoptr i64 %3958 to i32*
  %3961 = load i32, i32* %3960, align 4
  %3962 = zext i32 %3961 to i64
  store i64 %3962, i64* %RCX.i4260.pre-phi, align 8
  %3963 = add i64 %3950, -164
  %3964 = add i64 %3952, 20
  store i64 %3964, i64* %3, align 8
  %3965 = inttoptr i64 %3963 to i32*
  %3966 = load i32, i32* %3965, align 4
  %3967 = sub i32 %3961, %3966
  %3968 = zext i32 %3967 to i64
  store i64 %3968, i64* %RCX.i4260.pre-phi, align 8
  %3969 = icmp ult i32 %3961, %3966
  %3970 = zext i1 %3969 to i8
  store i8 %3970, i8* %32, align 1
  %3971 = and i32 %3967, 255
  %3972 = tail call i32 @llvm.ctpop.i32(i32 %3971)
  %3973 = trunc i32 %3972 to i8
  %3974 = and i8 %3973, 1
  %3975 = xor i8 %3974, 1
  store i8 %3975, i8* %39, align 1
  %3976 = xor i32 %3966, %3961
  %3977 = xor i32 %3976, %3967
  %3978 = lshr i32 %3977, 4
  %3979 = trunc i32 %3978 to i8
  %3980 = and i8 %3979, 1
  store i8 %3980, i8* %45, align 1
  %3981 = icmp eq i32 %3967, 0
  %3982 = zext i1 %3981 to i8
  store i8 %3982, i8* %48, align 1
  %3983 = lshr i32 %3967, 31
  %3984 = trunc i32 %3983 to i8
  store i8 %3984, i8* %51, align 1
  %3985 = lshr i32 %3961, 31
  %3986 = lshr i32 %3966, 31
  %3987 = xor i32 %3986, %3985
  %3988 = xor i32 %3983, %3985
  %3989 = add nuw nsw i32 %3988, %3987
  %3990 = icmp eq i32 %3989, 2
  %3991 = zext i1 %3990 to i8
  store i8 %3991, i8* %57, align 1
  %3992 = add i64 %3950, -76
  %3993 = add i64 %3952, 23
  store i64 %3993, i64* %3, align 8
  %3994 = inttoptr i64 %3992 to i32*
  %3995 = load i32, i32* %3994, align 4
  %3996 = add i32 %3995, %3967
  %3997 = zext i32 %3996 to i64
  store i64 %3997, i64* %RCX.i4260.pre-phi, align 8
  %3998 = icmp ult i32 %3996, %3967
  %3999 = icmp ult i32 %3996, %3995
  %4000 = or i1 %3998, %3999
  %4001 = zext i1 %4000 to i8
  store i8 %4001, i8* %32, align 1
  %4002 = and i32 %3996, 255
  %4003 = tail call i32 @llvm.ctpop.i32(i32 %4002)
  %4004 = trunc i32 %4003 to i8
  %4005 = and i8 %4004, 1
  %4006 = xor i8 %4005, 1
  store i8 %4006, i8* %39, align 1
  %4007 = xor i32 %3995, %3967
  %4008 = xor i32 %4007, %3996
  %4009 = lshr i32 %4008, 4
  %4010 = trunc i32 %4009 to i8
  %4011 = and i8 %4010, 1
  store i8 %4011, i8* %45, align 1
  %4012 = icmp eq i32 %3996, 0
  %4013 = zext i1 %4012 to i8
  store i8 %4013, i8* %48, align 1
  %4014 = lshr i32 %3996, 31
  %4015 = trunc i32 %4014 to i8
  store i8 %4015, i8* %51, align 1
  %4016 = lshr i32 %3995, 31
  %4017 = xor i32 %4014, %3983
  %4018 = xor i32 %4014, %4016
  %4019 = add nuw nsw i32 %4017, %4018
  %4020 = icmp eq i32 %4019, 2
  %4021 = zext i1 %4020 to i8
  store i8 %4021, i8* %57, align 1
  %4022 = sext i32 %3996 to i64
  store i64 %4022, i64* %RSI.i739, align 8
  %4023 = shl nsw i64 %4022, 3
  %4024 = add i64 %3957, %4023
  %4025 = add i64 %3952, 30
  store i64 %4025, i64* %3, align 8
  %4026 = inttoptr i64 %4024 to i64*
  %4027 = load i64, i64* %4026, align 8
  store i64 %4027, i64* %RDX.i4317.pre-phi, align 8
  %4028 = load i64, i64* %RBP.i, align 8
  %4029 = add i64 %4028, -96
  %4030 = add i64 %3952, 33
  store i64 %4030, i64* %3, align 8
  %4031 = inttoptr i64 %4029 to i32*
  %4032 = load i32, i32* %4031, align 4
  %4033 = zext i32 %4032 to i64
  store i64 %4033, i64* %RCX.i4260.pre-phi, align 8
  %4034 = add i64 %4028, -160
  %4035 = add i64 %3952, 39
  store i64 %4035, i64* %3, align 8
  %4036 = inttoptr i64 %4034 to i32*
  %4037 = load i32, i32* %4036, align 4
  %4038 = sub i32 %4032, %4037
  %4039 = zext i32 %4038 to i64
  store i64 %4039, i64* %RCX.i4260.pre-phi, align 8
  %4040 = icmp ult i32 %4032, %4037
  %4041 = zext i1 %4040 to i8
  store i8 %4041, i8* %32, align 1
  %4042 = and i32 %4038, 255
  %4043 = tail call i32 @llvm.ctpop.i32(i32 %4042)
  %4044 = trunc i32 %4043 to i8
  %4045 = and i8 %4044, 1
  %4046 = xor i8 %4045, 1
  store i8 %4046, i8* %39, align 1
  %4047 = xor i32 %4037, %4032
  %4048 = xor i32 %4047, %4038
  %4049 = lshr i32 %4048, 4
  %4050 = trunc i32 %4049 to i8
  %4051 = and i8 %4050, 1
  store i8 %4051, i8* %45, align 1
  %4052 = icmp eq i32 %4038, 0
  %4053 = zext i1 %4052 to i8
  store i8 %4053, i8* %48, align 1
  %4054 = lshr i32 %4038, 31
  %4055 = trunc i32 %4054 to i8
  store i8 %4055, i8* %51, align 1
  %4056 = lshr i32 %4032, 31
  %4057 = lshr i32 %4037, 31
  %4058 = xor i32 %4057, %4056
  %4059 = xor i32 %4054, %4056
  %4060 = add nuw nsw i32 %4059, %4058
  %4061 = icmp eq i32 %4060, 2
  %4062 = zext i1 %4061 to i8
  store i8 %4062, i8* %57, align 1
  %4063 = add i64 %4028, -76
  %4064 = add i64 %3952, 42
  store i64 %4064, i64* %3, align 8
  %4065 = inttoptr i64 %4063 to i32*
  %4066 = load i32, i32* %4065, align 4
  %4067 = add i32 %4066, %4038
  %4068 = zext i32 %4067 to i64
  store i64 %4068, i64* %RCX.i4260.pre-phi, align 8
  %4069 = icmp ult i32 %4067, %4038
  %4070 = icmp ult i32 %4067, %4066
  %4071 = or i1 %4069, %4070
  %4072 = zext i1 %4071 to i8
  store i8 %4072, i8* %32, align 1
  %4073 = and i32 %4067, 255
  %4074 = tail call i32 @llvm.ctpop.i32(i32 %4073)
  %4075 = trunc i32 %4074 to i8
  %4076 = and i8 %4075, 1
  %4077 = xor i8 %4076, 1
  store i8 %4077, i8* %39, align 1
  %4078 = xor i32 %4066, %4038
  %4079 = xor i32 %4078, %4067
  %4080 = lshr i32 %4079, 4
  %4081 = trunc i32 %4080 to i8
  %4082 = and i8 %4081, 1
  store i8 %4082, i8* %45, align 1
  %4083 = icmp eq i32 %4067, 0
  %4084 = zext i1 %4083 to i8
  store i8 %4084, i8* %48, align 1
  %4085 = lshr i32 %4067, 31
  %4086 = trunc i32 %4085 to i8
  store i8 %4086, i8* %51, align 1
  %4087 = lshr i32 %4066, 31
  %4088 = xor i32 %4085, %4054
  %4089 = xor i32 %4085, %4087
  %4090 = add nuw nsw i32 %4088, %4089
  %4091 = icmp eq i32 %4090, 2
  %4092 = zext i1 %4091 to i8
  store i8 %4092, i8* %57, align 1
  %4093 = sext i32 %4067 to i64
  store i64 %4093, i64* %RSI.i739, align 8
  %4094 = shl nsw i64 %4093, 2
  %4095 = add i64 %4027, %4094
  %4096 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %4097 = add i64 %3952, 48
  store i64 %4097, i64* %3, align 8
  %4098 = inttoptr i64 %4095 to i32*
  store i32 %4096, i32* %4098, align 4
  %4099 = load i64, i64* %RBP.i, align 8
  %4100 = add i64 %4099, -104
  %4101 = load i64, i64* %3, align 8
  %4102 = add i64 %4101, 3
  store i64 %4102, i64* %3, align 8
  %4103 = inttoptr i64 %4100 to i32*
  %4104 = load i32, i32* %4103, align 4
  %4105 = zext i32 %4104 to i64
  store i64 %4105, i64* %RAX.i3587.phi.trans.insert, align 8
  %4106 = add i64 %4099, -80
  %4107 = add i64 %4101, 6
  store i64 %4107, i64* %3, align 8
  %4108 = inttoptr i64 %4106 to i32*
  %4109 = load i32, i32* %4108, align 4
  %4110 = sub i32 %4104, %4109
  %4111 = icmp ult i32 %4104, %4109
  %4112 = zext i1 %4111 to i8
  store i8 %4112, i8* %32, align 1
  %4113 = and i32 %4110, 255
  %4114 = tail call i32 @llvm.ctpop.i32(i32 %4113)
  %4115 = trunc i32 %4114 to i8
  %4116 = and i8 %4115, 1
  %4117 = xor i8 %4116, 1
  store i8 %4117, i8* %39, align 1
  %4118 = xor i32 %4109, %4104
  %4119 = xor i32 %4118, %4110
  %4120 = lshr i32 %4119, 4
  %4121 = trunc i32 %4120 to i8
  %4122 = and i8 %4121, 1
  store i8 %4122, i8* %45, align 1
  %4123 = icmp eq i32 %4110, 0
  %4124 = zext i1 %4123 to i8
  store i8 %4124, i8* %48, align 1
  %4125 = lshr i32 %4110, 31
  %4126 = trunc i32 %4125 to i8
  store i8 %4126, i8* %51, align 1
  %4127 = lshr i32 %4104, 31
  %4128 = lshr i32 %4109, 31
  %4129 = xor i32 %4128, %4127
  %4130 = xor i32 %4125, %4127
  %4131 = add nuw nsw i32 %4130, %4129
  %4132 = icmp eq i32 %4131, 2
  %4133 = zext i1 %4132 to i8
  store i8 %4133, i8* %57, align 1
  %4134 = icmp ne i8 %4126, 0
  %4135 = xor i1 %4134, %4132
  %.v618 = select i1 %4135, i64 12, i64 36
  %4136 = add i64 %4101, %.v618
  store i64 %4136, i64* %3, align 8
  br i1 %4135, label %block_42107a, label %block_.L_421092

block_42107a:                                     ; preds = %routine_shll__cl___esi.exit5052
  %4137 = add i64 %4099, -96
  %4138 = add i64 %4136, 3
  store i64 %4138, i64* %3, align 8
  %4139 = inttoptr i64 %4137 to i32*
  %4140 = load i32, i32* %4139, align 4
  %4141 = zext i32 %4140 to i64
  store i64 %4141, i64* %RAX.i3587.phi.trans.insert, align 8
  %4142 = add i64 %4099, -168
  %4143 = add i64 %4136, 9
  store i64 %4143, i64* %3, align 8
  %4144 = inttoptr i64 %4142 to i32*
  store i32 %4140, i32* %4144, align 4
  %4145 = load i64, i64* %RBP.i, align 8
  %4146 = add i64 %4145, -100
  %4147 = load i64, i64* %3, align 8
  %4148 = add i64 %4147, 3
  store i64 %4148, i64* %3, align 8
  %4149 = inttoptr i64 %4146 to i32*
  %4150 = load i32, i32* %4149, align 4
  %4151 = zext i32 %4150 to i64
  store i64 %4151, i64* %RAX.i3587.phi.trans.insert, align 8
  %4152 = add i64 %4145, -172
  %4153 = add i64 %4147, 9
  store i64 %4153, i64* %3, align 8
  %4154 = inttoptr i64 %4152 to i32*
  store i32 %4150, i32* %4154, align 4
  %4155 = load i64, i64* %RBP.i, align 8
  %4156 = add i64 %4155, -104
  %4157 = load i64, i64* %3, align 8
  %4158 = add i64 %4157, 3
  store i64 %4158, i64* %3, align 8
  %4159 = inttoptr i64 %4156 to i32*
  %4160 = load i32, i32* %4159, align 4
  %4161 = zext i32 %4160 to i64
  store i64 %4161, i64* %RAX.i3587.phi.trans.insert, align 8
  %4162 = add i64 %4155, -80
  %4163 = add i64 %4157, 6
  store i64 %4163, i64* %3, align 8
  %4164 = inttoptr i64 %4162 to i32*
  store i32 %4160, i32* %4164, align 4
  %.pre259 = load i64, i64* %3, align 8
  br label %block_.L_421092

block_.L_421092:                                  ; preds = %routine_shll__cl___esi.exit5052, %block_42107a
  %4165 = phi i64 [ %4136, %routine_shll__cl___esi.exit5052 ], [ %.pre259, %block_42107a ]
  %4166 = add i64 %4165, 5
  store i64 %4166, i64* %3, align 8
  br label %block_.L_421097

block_.L_421097:                                  ; preds = %block_420f64, %block_.L_421092
  %4167 = phi i64 [ %3634, %block_420f64 ], [ %4166, %block_.L_421092 ]
  %MEMORY.18 = phi %struct.Memory* [ %3450, %block_420f64 ], [ %call2_421036, %block_.L_421092 ]
  %4168 = add i64 %4167, 5
  store i64 %4168, i64* %3, align 8
  %.pre260 = load i64, i64* %RBP.i, align 8
  br label %block_.L_42109c

block_.L_42109c:                                  ; preds = %block_420f4b, %block_.L_420f26, %block_.L_421097
  %4169 = phi i64 [ %3410, %block_.L_420f26 ], [ %3484, %block_420f4b ], [ %4168, %block_.L_421097 ]
  %4170 = phi i64 [ %3378, %block_.L_420f26 ], [ %3452, %block_420f4b ], [ %.pre260, %block_.L_421097 ]
  %MEMORY.19 = phi %struct.Memory* [ %3376, %block_.L_420f26 ], [ %3450, %block_420f4b ], [ %MEMORY.18, %block_.L_421097 ]
  %4171 = add i64 %4170, -168
  %4172 = add i64 %4169, 6
  store i64 %4172, i64* %3, align 8
  %4173 = inttoptr i64 %4171 to i32*
  %4174 = load i32, i32* %4173, align 4
  %4175 = zext i32 %4174 to i64
  store i64 %4175, i64* %RAX.i3587.phi.trans.insert, align 8
  %4176 = add i64 %4170, -184
  %4177 = add i64 %4169, 12
  store i64 %4177, i64* %3, align 8
  %4178 = inttoptr i64 %4176 to i32*
  store i32 %4174, i32* %4178, align 4
  %4179 = load i64, i64* %RBP.i, align 8
  %4180 = add i64 %4179, -172
  %4181 = load i64, i64* %3, align 8
  %4182 = add i64 %4181, 6
  store i64 %4182, i64* %3, align 8
  %4183 = inttoptr i64 %4180 to i32*
  %4184 = load i32, i32* %4183, align 4
  %4185 = zext i32 %4184 to i64
  store i64 %4185, i64* %RAX.i3587.phi.trans.insert, align 8
  %4186 = add i64 %4179, -180
  %4187 = add i64 %4181, 12
  store i64 %4187, i64* %3, align 8
  %4188 = inttoptr i64 %4186 to i32*
  store i32 %4184, i32* %4188, align 4
  %4189 = load i64, i64* %RBP.i, align 8
  %4190 = add i64 %4189, -192
  %4191 = load i64, i64* %3, align 8
  %4192 = add i64 %4191, 10
  store i64 %4192, i64* %3, align 8
  %4193 = inttoptr i64 %4190 to i32*
  store i32 0, i32* %4193, align 4
  %.pre261 = load i64, i64* %3, align 8
  br label %block_.L_4210be

block_.L_4210be:                                  ; preds = %block_.L_421263, %block_.L_42109c
  %4194 = phi i64 [ %.pre261, %block_.L_42109c ], [ %5179, %block_.L_421263 ]
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.19, %block_.L_42109c ], [ %MEMORY.23, %block_.L_421263 ]
  %4195 = load i64, i64* %RBP.i, align 8
  %4196 = add i64 %4195, -192
  %4197 = add i64 %4194, 7
  store i64 %4197, i64* %3, align 8
  %4198 = inttoptr i64 %4196 to i32*
  %4199 = load i32, i32* %4198, align 4
  %4200 = add i32 %4199, -4
  %4201 = icmp ult i32 %4199, 4
  %4202 = zext i1 %4201 to i8
  store i8 %4202, i8* %32, align 1
  %4203 = and i32 %4200, 255
  %4204 = tail call i32 @llvm.ctpop.i32(i32 %4203)
  %4205 = trunc i32 %4204 to i8
  %4206 = and i8 %4205, 1
  %4207 = xor i8 %4206, 1
  store i8 %4207, i8* %39, align 1
  %4208 = xor i32 %4200, %4199
  %4209 = lshr i32 %4208, 4
  %4210 = trunc i32 %4209 to i8
  %4211 = and i8 %4210, 1
  store i8 %4211, i8* %45, align 1
  %4212 = icmp eq i32 %4200, 0
  %4213 = zext i1 %4212 to i8
  store i8 %4213, i8* %48, align 1
  %4214 = lshr i32 %4200, 31
  %4215 = trunc i32 %4214 to i8
  store i8 %4215, i8* %51, align 1
  %4216 = lshr i32 %4199, 31
  %4217 = xor i32 %4214, %4216
  %4218 = add nuw nsw i32 %4217, %4216
  %4219 = icmp eq i32 %4218, 2
  %4220 = zext i1 %4219 to i8
  store i8 %4220, i8* %57, align 1
  %4221 = icmp ne i8 %4215, 0
  %4222 = xor i1 %4221, %4219
  %.v509 = select i1 %4222, i64 13, i64 446
  %4223 = add i64 %4194, %.v509
  store i64 %4223, i64* %3, align 8
  br i1 %4222, label %block_4210cb, label %block_.L_42127c

block_4210cb:                                     ; preds = %block_.L_4210be
  %4224 = add i64 %4195, -184
  %4225 = add i64 %4223, 6
  store i64 %4225, i64* %3, align 8
  %4226 = inttoptr i64 %4224 to i32*
  %4227 = load i32, i32* %4226, align 4
  %4228 = zext i32 %4227 to i64
  store i64 %4228, i64* %RAX.i3587.phi.trans.insert, align 8
  %4229 = add i64 %4223, 13
  store i64 %4229, i64* %3, align 8
  %4230 = load i32, i32* %4198, align 4
  %4231 = sext i32 %4230 to i64
  store i64 %4231, i64* %RCX.i4260.pre-phi, align 8
  %4232 = shl nsw i64 %4231, 2
  %4233 = add nsw i64 %4232, 7124896
  %4234 = add i64 %4223, 20
  store i64 %4234, i64* %3, align 8
  %4235 = inttoptr i64 %4233 to i32*
  %4236 = load i32, i32* %4235, align 4
  %4237 = add i32 %4236, %4227
  %4238 = zext i32 %4237 to i64
  store i64 %4238, i64* %RAX.i3587.phi.trans.insert, align 8
  %4239 = icmp ult i32 %4237, %4227
  %4240 = icmp ult i32 %4237, %4236
  %4241 = or i1 %4239, %4240
  %4242 = zext i1 %4241 to i8
  store i8 %4242, i8* %32, align 1
  %4243 = and i32 %4237, 255
  %4244 = tail call i32 @llvm.ctpop.i32(i32 %4243)
  %4245 = trunc i32 %4244 to i8
  %4246 = and i8 %4245, 1
  %4247 = xor i8 %4246, 1
  store i8 %4247, i8* %39, align 1
  %4248 = xor i32 %4236, %4227
  %4249 = xor i32 %4248, %4237
  %4250 = lshr i32 %4249, 4
  %4251 = trunc i32 %4250 to i8
  %4252 = and i8 %4251, 1
  store i8 %4252, i8* %45, align 1
  %4253 = icmp eq i32 %4237, 0
  %4254 = zext i1 %4253 to i8
  store i8 %4254, i8* %48, align 1
  %4255 = lshr i32 %4237, 31
  %4256 = trunc i32 %4255 to i8
  store i8 %4256, i8* %51, align 1
  %4257 = lshr i32 %4227, 31
  %4258 = lshr i32 %4236, 31
  %4259 = xor i32 %4255, %4257
  %4260 = xor i32 %4255, %4258
  %4261 = add nuw nsw i32 %4259, %4260
  %4262 = icmp eq i32 %4261, 2
  %4263 = zext i1 %4262 to i8
  store i8 %4263, i8* %57, align 1
  %4264 = add i64 %4195, -96
  %4265 = add i64 %4223, 23
  store i64 %4265, i64* %3, align 8
  %4266 = inttoptr i64 %4264 to i32*
  store i32 %4237, i32* %4266, align 4
  %4267 = load i64, i64* %RBP.i, align 8
  %4268 = add i64 %4267, -180
  %4269 = load i64, i64* %3, align 8
  %4270 = add i64 %4269, 6
  store i64 %4270, i64* %3, align 8
  %4271 = inttoptr i64 %4268 to i32*
  %4272 = load i32, i32* %4271, align 4
  %4273 = zext i32 %4272 to i64
  store i64 %4273, i64* %RAX.i3587.phi.trans.insert, align 8
  %4274 = add i64 %4267, -192
  %4275 = add i64 %4269, 13
  store i64 %4275, i64* %3, align 8
  %4276 = inttoptr i64 %4274 to i32*
  %4277 = load i32, i32* %4276, align 4
  %4278 = sext i32 %4277 to i64
  store i64 %4278, i64* %RCX.i4260.pre-phi, align 8
  %4279 = shl nsw i64 %4278, 2
  %4280 = add nsw i64 %4279, 7124912
  %4281 = add i64 %4269, 20
  store i64 %4281, i64* %3, align 8
  %4282 = inttoptr i64 %4280 to i32*
  %4283 = load i32, i32* %4282, align 4
  %4284 = add i32 %4283, %4272
  %4285 = zext i32 %4284 to i64
  store i64 %4285, i64* %RAX.i3587.phi.trans.insert, align 8
  %4286 = icmp ult i32 %4284, %4272
  %4287 = icmp ult i32 %4284, %4283
  %4288 = or i1 %4286, %4287
  %4289 = zext i1 %4288 to i8
  store i8 %4289, i8* %32, align 1
  %4290 = and i32 %4284, 255
  %4291 = tail call i32 @llvm.ctpop.i32(i32 %4290)
  %4292 = trunc i32 %4291 to i8
  %4293 = and i8 %4292, 1
  %4294 = xor i8 %4293, 1
  store i8 %4294, i8* %39, align 1
  %4295 = xor i32 %4283, %4272
  %4296 = xor i32 %4295, %4284
  %4297 = lshr i32 %4296, 4
  %4298 = trunc i32 %4297 to i8
  %4299 = and i8 %4298, 1
  store i8 %4299, i8* %45, align 1
  %4300 = icmp eq i32 %4284, 0
  %4301 = zext i1 %4300 to i8
  store i8 %4301, i8* %48, align 1
  %4302 = lshr i32 %4284, 31
  %4303 = trunc i32 %4302 to i8
  store i8 %4303, i8* %51, align 1
  %4304 = lshr i32 %4272, 31
  %4305 = lshr i32 %4283, 31
  %4306 = xor i32 %4302, %4304
  %4307 = xor i32 %4302, %4305
  %4308 = add nuw nsw i32 %4306, %4307
  %4309 = icmp eq i32 %4308, 2
  %4310 = zext i1 %4309 to i8
  store i8 %4310, i8* %57, align 1
  %4311 = add i64 %4267, -100
  %4312 = add i64 %4269, 23
  store i64 %4312, i64* %3, align 8
  %4313 = inttoptr i64 %4311 to i32*
  store i32 %4284, i32* %4313, align 4
  %4314 = load i64, i64* %RBP.i, align 8
  %4315 = add i64 %4314, -96
  %4316 = load i64, i64* %3, align 8
  %4317 = add i64 %4316, 3
  store i64 %4317, i64* %3, align 8
  %4318 = inttoptr i64 %4315 to i32*
  %4319 = load i32, i32* %4318, align 4
  %4320 = zext i32 %4319 to i64
  store i64 %4320, i64* %RAX.i3587.phi.trans.insert, align 8
  %4321 = add i64 %4314, -160
  %4322 = add i64 %4316, 9
  store i64 %4322, i64* %3, align 8
  %4323 = inttoptr i64 %4321 to i32*
  %4324 = load i32, i32* %4323, align 4
  %4325 = sub i32 %4319, %4324
  %4326 = zext i32 %4325 to i64
  store i64 %4326, i64* %RAX.i3587.phi.trans.insert, align 8
  %4327 = icmp ult i32 %4319, %4324
  %4328 = zext i1 %4327 to i8
  store i8 %4328, i8* %32, align 1
  %4329 = and i32 %4325, 255
  %4330 = tail call i32 @llvm.ctpop.i32(i32 %4329)
  %4331 = trunc i32 %4330 to i8
  %4332 = and i8 %4331, 1
  %4333 = xor i8 %4332, 1
  store i8 %4333, i8* %39, align 1
  %4334 = xor i32 %4324, %4319
  %4335 = xor i32 %4334, %4325
  %4336 = lshr i32 %4335, 4
  %4337 = trunc i32 %4336 to i8
  %4338 = and i8 %4337, 1
  store i8 %4338, i8* %45, align 1
  %4339 = icmp eq i32 %4325, 0
  %4340 = zext i1 %4339 to i8
  store i8 %4340, i8* %48, align 1
  %4341 = lshr i32 %4325, 31
  %4342 = trunc i32 %4341 to i8
  store i8 %4342, i8* %51, align 1
  %4343 = lshr i32 %4319, 31
  %4344 = lshr i32 %4324, 31
  %4345 = xor i32 %4344, %4343
  %4346 = xor i32 %4341, %4343
  %4347 = add nuw nsw i32 %4346, %4345
  %4348 = icmp eq i32 %4347, 2
  %4349 = zext i1 %4348 to i8
  store i8 %4349, i8* %57, align 1
  store i64 %4326, i64* %RDI.i1133, align 8
  %4350 = add i64 %4316, -131321
  %4351 = add i64 %4316, 16
  %4352 = load i64, i64* %6, align 8
  %4353 = add i64 %4352, -8
  %4354 = inttoptr i64 %4353 to i64*
  store i64 %4351, i64* %4354, align 8
  store i64 %4353, i64* %6, align 8
  store i64 %4350, i64* %3, align 8
  %4355 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.20)
  %4356 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %4357 = load i64, i64* %RBP.i, align 8
  %4358 = add i64 %4357, -76
  %4359 = load i64, i64* %3, align 8
  %4360 = add i64 %4359, 3
  store i64 %4360, i64* %3, align 8
  %4361 = inttoptr i64 %4358 to i32*
  %4362 = load i32, i32* %4361, align 4
  %4363 = sub i32 %4356, %4362
  %4364 = icmp ult i32 %4356, %4362
  %4365 = zext i1 %4364 to i8
  store i8 %4365, i8* %32, align 1
  %4366 = and i32 %4363, 255
  %4367 = tail call i32 @llvm.ctpop.i32(i32 %4366)
  %4368 = trunc i32 %4367 to i8
  %4369 = and i8 %4368, 1
  %4370 = xor i8 %4369, 1
  store i8 %4370, i8* %39, align 1
  %4371 = xor i32 %4362, %4356
  %4372 = xor i32 %4371, %4363
  %4373 = lshr i32 %4372, 4
  %4374 = trunc i32 %4373 to i8
  %4375 = and i8 %4374, 1
  store i8 %4375, i8* %45, align 1
  %4376 = icmp eq i32 %4363, 0
  %4377 = zext i1 %4376 to i8
  store i8 %4377, i8* %48, align 1
  %4378 = lshr i32 %4363, 31
  %4379 = trunc i32 %4378 to i8
  store i8 %4379, i8* %51, align 1
  %4380 = lshr i32 %4356, 31
  %4381 = lshr i32 %4362, 31
  %4382 = xor i32 %4381, %4380
  %4383 = xor i32 %4378, %4380
  %4384 = add nuw nsw i32 %4383, %4382
  %4385 = icmp eq i32 %4384, 2
  %4386 = zext i1 %4385 to i8
  store i8 %4386, i8* %57, align 1
  %4387 = icmp ne i8 %4379, 0
  %4388 = xor i1 %4387, %4385
  %.demorgan493 = or i1 %4376, %4388
  %.v612 = select i1 %.demorgan493, i64 9, i64 346
  %4389 = add i64 %4359, %.v612
  store i64 %4389, i64* %3, align 8
  br i1 %.demorgan493, label %block_421112, label %block_.L_421263

block_421112:                                     ; preds = %block_4210cb
  %4390 = add i64 %4357, -100
  %4391 = add i64 %4389, 3
  store i64 %4391, i64* %3, align 8
  %4392 = inttoptr i64 %4390 to i32*
  %4393 = load i32, i32* %4392, align 4
  %4394 = zext i32 %4393 to i64
  store i64 %4394, i64* %RAX.i3587.phi.trans.insert, align 8
  %4395 = add i64 %4357, -164
  %4396 = add i64 %4389, 9
  store i64 %4396, i64* %3, align 8
  %4397 = inttoptr i64 %4395 to i32*
  %4398 = load i32, i32* %4397, align 4
  %4399 = sub i32 %4393, %4398
  %4400 = zext i32 %4399 to i64
  store i64 %4400, i64* %RAX.i3587.phi.trans.insert, align 8
  %4401 = icmp ult i32 %4393, %4398
  %4402 = zext i1 %4401 to i8
  store i8 %4402, i8* %32, align 1
  %4403 = and i32 %4399, 255
  %4404 = tail call i32 @llvm.ctpop.i32(i32 %4403)
  %4405 = trunc i32 %4404 to i8
  %4406 = and i8 %4405, 1
  %4407 = xor i8 %4406, 1
  store i8 %4407, i8* %39, align 1
  %4408 = xor i32 %4398, %4393
  %4409 = xor i32 %4408, %4399
  %4410 = lshr i32 %4409, 4
  %4411 = trunc i32 %4410 to i8
  %4412 = and i8 %4411, 1
  store i8 %4412, i8* %45, align 1
  %4413 = icmp eq i32 %4399, 0
  %4414 = zext i1 %4413 to i8
  store i8 %4414, i8* %48, align 1
  %4415 = lshr i32 %4399, 31
  %4416 = trunc i32 %4415 to i8
  store i8 %4416, i8* %51, align 1
  %4417 = lshr i32 %4393, 31
  %4418 = lshr i32 %4398, 31
  %4419 = xor i32 %4418, %4417
  %4420 = xor i32 %4415, %4417
  %4421 = add nuw nsw i32 %4420, %4419
  %4422 = icmp eq i32 %4421, 2
  %4423 = zext i1 %4422 to i8
  store i8 %4423, i8* %57, align 1
  store i64 %4400, i64* %RDI.i1133, align 8
  %4424 = add i64 %4389, -131346
  %4425 = add i64 %4389, 16
  %4426 = load i64, i64* %6, align 8
  %4427 = add i64 %4426, -8
  %4428 = inttoptr i64 %4427 to i64*
  store i64 %4425, i64* %4428, align 8
  store i64 %4427, i64* %6, align 8
  store i64 %4424, i64* %3, align 8
  %4429 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %4355)
  %4430 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %4431 = load i64, i64* %RBP.i, align 8
  %4432 = add i64 %4431, -76
  %4433 = load i64, i64* %3, align 8
  %4434 = add i64 %4433, 3
  store i64 %4434, i64* %3, align 8
  %4435 = inttoptr i64 %4432 to i32*
  %4436 = load i32, i32* %4435, align 4
  %4437 = sub i32 %4430, %4436
  %4438 = icmp ult i32 %4430, %4436
  %4439 = zext i1 %4438 to i8
  store i8 %4439, i8* %32, align 1
  %4440 = and i32 %4437, 255
  %4441 = tail call i32 @llvm.ctpop.i32(i32 %4440)
  %4442 = trunc i32 %4441 to i8
  %4443 = and i8 %4442, 1
  %4444 = xor i8 %4443, 1
  store i8 %4444, i8* %39, align 1
  %4445 = xor i32 %4436, %4430
  %4446 = xor i32 %4445, %4437
  %4447 = lshr i32 %4446, 4
  %4448 = trunc i32 %4447 to i8
  %4449 = and i8 %4448, 1
  store i8 %4449, i8* %45, align 1
  %4450 = icmp eq i32 %4437, 0
  %4451 = zext i1 %4450 to i8
  store i8 %4451, i8* %48, align 1
  %4452 = lshr i32 %4437, 31
  %4453 = trunc i32 %4452 to i8
  store i8 %4453, i8* %51, align 1
  %4454 = lshr i32 %4430, 31
  %4455 = lshr i32 %4436, 31
  %4456 = xor i32 %4455, %4454
  %4457 = xor i32 %4452, %4454
  %4458 = add nuw nsw i32 %4457, %4456
  %4459 = icmp eq i32 %4458, 2
  %4460 = zext i1 %4459 to i8
  store i8 %4460, i8* %57, align 1
  %4461 = icmp ne i8 %4453, 0
  %4462 = xor i1 %4461, %4459
  %.demorgan494 = or i1 %4450, %4462
  %.v613 = select i1 %.demorgan494, i64 9, i64 321
  %4463 = add i64 %4433, %.v613
  store i64 %4463, i64* %3, align 8
  br i1 %.demorgan494, label %block_42112b, label %block_.L_421263

block_42112b:                                     ; preds = %block_421112
  %4464 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %4464, i64* %RAX.i3587.phi.trans.insert, align 8
  %4465 = add i64 %4431, -100
  %4466 = add i64 %4463, 11
  store i64 %4466, i64* %3, align 8
  %4467 = inttoptr i64 %4465 to i32*
  %4468 = load i32, i32* %4467, align 4
  %4469 = zext i32 %4468 to i64
  store i64 %4469, i64* %RCX.i4260.pre-phi, align 8
  %4470 = add i64 %4431, -164
  %4471 = add i64 %4463, 17
  store i64 %4471, i64* %3, align 8
  %4472 = inttoptr i64 %4470 to i32*
  %4473 = load i32, i32* %4472, align 4
  %4474 = sub i32 %4468, %4473
  %4475 = zext i32 %4474 to i64
  store i64 %4475, i64* %RCX.i4260.pre-phi, align 8
  %4476 = icmp ult i32 %4468, %4473
  %4477 = zext i1 %4476 to i8
  store i8 %4477, i8* %32, align 1
  %4478 = and i32 %4474, 255
  %4479 = tail call i32 @llvm.ctpop.i32(i32 %4478)
  %4480 = trunc i32 %4479 to i8
  %4481 = and i8 %4480, 1
  %4482 = xor i8 %4481, 1
  store i8 %4482, i8* %39, align 1
  %4483 = xor i32 %4473, %4468
  %4484 = xor i32 %4483, %4474
  %4485 = lshr i32 %4484, 4
  %4486 = trunc i32 %4485 to i8
  %4487 = and i8 %4486, 1
  store i8 %4487, i8* %45, align 1
  %4488 = icmp eq i32 %4474, 0
  %4489 = zext i1 %4488 to i8
  store i8 %4489, i8* %48, align 1
  %4490 = lshr i32 %4474, 31
  %4491 = trunc i32 %4490 to i8
  store i8 %4491, i8* %51, align 1
  %4492 = lshr i32 %4468, 31
  %4493 = lshr i32 %4473, 31
  %4494 = xor i32 %4493, %4492
  %4495 = xor i32 %4490, %4492
  %4496 = add nuw nsw i32 %4495, %4494
  %4497 = icmp eq i32 %4496, 2
  %4498 = zext i1 %4497 to i8
  store i8 %4498, i8* %57, align 1
  %4499 = add i64 %4463, 20
  store i64 %4499, i64* %3, align 8
  %4500 = load i32, i32* %4435, align 4
  %4501 = add i32 %4500, %4474
  %4502 = zext i32 %4501 to i64
  store i64 %4502, i64* %RCX.i4260.pre-phi, align 8
  %4503 = icmp ult i32 %4501, %4474
  %4504 = icmp ult i32 %4501, %4500
  %4505 = or i1 %4503, %4504
  %4506 = zext i1 %4505 to i8
  store i8 %4506, i8* %32, align 1
  %4507 = and i32 %4501, 255
  %4508 = tail call i32 @llvm.ctpop.i32(i32 %4507)
  %4509 = trunc i32 %4508 to i8
  %4510 = and i8 %4509, 1
  %4511 = xor i8 %4510, 1
  store i8 %4511, i8* %39, align 1
  %4512 = xor i32 %4500, %4474
  %4513 = xor i32 %4512, %4501
  %4514 = lshr i32 %4513, 4
  %4515 = trunc i32 %4514 to i8
  %4516 = and i8 %4515, 1
  store i8 %4516, i8* %45, align 1
  %4517 = icmp eq i32 %4501, 0
  %4518 = zext i1 %4517 to i8
  store i8 %4518, i8* %48, align 1
  %4519 = lshr i32 %4501, 31
  %4520 = trunc i32 %4519 to i8
  store i8 %4520, i8* %51, align 1
  %4521 = lshr i32 %4500, 31
  %4522 = xor i32 %4519, %4490
  %4523 = xor i32 %4519, %4521
  %4524 = add nuw nsw i32 %4522, %4523
  %4525 = icmp eq i32 %4524, 2
  %4526 = zext i1 %4525 to i8
  store i8 %4526, i8* %57, align 1
  %4527 = sext i32 %4501 to i64
  store i64 %4527, i64* %RDX.i4317.pre-phi, align 8
  %4528 = shl nsw i64 %4527, 3
  %4529 = add i64 %4464, %4528
  %4530 = add i64 %4463, 27
  store i64 %4530, i64* %3, align 8
  %4531 = inttoptr i64 %4529 to i64*
  %4532 = load i64, i64* %4531, align 8
  store i64 %4532, i64* %RAX.i3587.phi.trans.insert, align 8
  %4533 = add i64 %4431, -96
  %4534 = add i64 %4463, 30
  store i64 %4534, i64* %3, align 8
  %4535 = inttoptr i64 %4533 to i32*
  %4536 = load i32, i32* %4535, align 4
  %4537 = zext i32 %4536 to i64
  store i64 %4537, i64* %RCX.i4260.pre-phi, align 8
  %4538 = load i64, i64* %RBP.i, align 8
  %4539 = add i64 %4538, -160
  %4540 = add i64 %4463, 36
  store i64 %4540, i64* %3, align 8
  %4541 = inttoptr i64 %4539 to i32*
  %4542 = load i32, i32* %4541, align 4
  %4543 = sub i32 %4536, %4542
  %4544 = zext i32 %4543 to i64
  store i64 %4544, i64* %RCX.i4260.pre-phi, align 8
  %4545 = icmp ult i32 %4536, %4542
  %4546 = zext i1 %4545 to i8
  store i8 %4546, i8* %32, align 1
  %4547 = and i32 %4543, 255
  %4548 = tail call i32 @llvm.ctpop.i32(i32 %4547)
  %4549 = trunc i32 %4548 to i8
  %4550 = and i8 %4549, 1
  %4551 = xor i8 %4550, 1
  store i8 %4551, i8* %39, align 1
  %4552 = xor i32 %4542, %4536
  %4553 = xor i32 %4552, %4543
  %4554 = lshr i32 %4553, 4
  %4555 = trunc i32 %4554 to i8
  %4556 = and i8 %4555, 1
  store i8 %4556, i8* %45, align 1
  %4557 = icmp eq i32 %4543, 0
  %4558 = zext i1 %4557 to i8
  store i8 %4558, i8* %48, align 1
  %4559 = lshr i32 %4543, 31
  %4560 = trunc i32 %4559 to i8
  store i8 %4560, i8* %51, align 1
  %4561 = lshr i32 %4536, 31
  %4562 = lshr i32 %4542, 31
  %4563 = xor i32 %4562, %4561
  %4564 = xor i32 %4559, %4561
  %4565 = add nuw nsw i32 %4564, %4563
  %4566 = icmp eq i32 %4565, 2
  %4567 = zext i1 %4566 to i8
  store i8 %4567, i8* %57, align 1
  %4568 = add i64 %4538, -76
  %4569 = add i64 %4463, 39
  store i64 %4569, i64* %3, align 8
  %4570 = inttoptr i64 %4568 to i32*
  %4571 = load i32, i32* %4570, align 4
  %4572 = add i32 %4571, %4543
  %4573 = zext i32 %4572 to i64
  store i64 %4573, i64* %RCX.i4260.pre-phi, align 8
  %4574 = icmp ult i32 %4572, %4543
  %4575 = icmp ult i32 %4572, %4571
  %4576 = or i1 %4574, %4575
  %4577 = zext i1 %4576 to i8
  store i8 %4577, i8* %32, align 1
  %4578 = and i32 %4572, 255
  %4579 = tail call i32 @llvm.ctpop.i32(i32 %4578)
  %4580 = trunc i32 %4579 to i8
  %4581 = and i8 %4580, 1
  %4582 = xor i8 %4581, 1
  store i8 %4582, i8* %39, align 1
  %4583 = xor i32 %4571, %4543
  %4584 = xor i32 %4583, %4572
  %4585 = lshr i32 %4584, 4
  %4586 = trunc i32 %4585 to i8
  %4587 = and i8 %4586, 1
  store i8 %4587, i8* %45, align 1
  %4588 = icmp eq i32 %4572, 0
  %4589 = zext i1 %4588 to i8
  store i8 %4589, i8* %48, align 1
  %4590 = lshr i32 %4572, 31
  %4591 = trunc i32 %4590 to i8
  store i8 %4591, i8* %51, align 1
  %4592 = lshr i32 %4571, 31
  %4593 = xor i32 %4590, %4559
  %4594 = xor i32 %4590, %4592
  %4595 = add nuw nsw i32 %4593, %4594
  %4596 = icmp eq i32 %4595, 2
  %4597 = zext i1 %4596 to i8
  store i8 %4597, i8* %57, align 1
  %4598 = sext i32 %4572 to i64
  store i64 %4598, i64* %RDX.i4317.pre-phi, align 8
  %4599 = shl nsw i64 %4598, 2
  %4600 = add i64 %4532, %4599
  %4601 = add i64 %4463, 46
  store i64 %4601, i64* %3, align 8
  %4602 = inttoptr i64 %4600 to i32*
  %4603 = load i32, i32* %4602, align 4
  store i8 0, i8* %32, align 1
  %4604 = and i32 %4603, 255
  %4605 = tail call i32 @llvm.ctpop.i32(i32 %4604)
  %4606 = trunc i32 %4605 to i8
  %4607 = and i8 %4606, 1
  %4608 = xor i8 %4607, 1
  store i8 %4608, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %4609 = icmp eq i32 %4603, 0
  %4610 = zext i1 %4609 to i8
  store i8 %4610, i8* %48, align 1
  %4611 = lshr i32 %4603, 31
  %4612 = trunc i32 %4611 to i8
  store i8 %4612, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v614 = select i1 %4609, i64 52, i64 307
  %4613 = add i64 %4463, %.v614
  store i64 %4613, i64* %3, align 8
  br i1 %4609, label %block_42115f, label %block_.L_42125e

block_42115f:                                     ; preds = %block_42112b
  %4614 = load i64, i64* %RBP.i, align 8
  %4615 = add i64 %4614, -132
  %4616 = add i64 %4613, 6
  store i64 %4616, i64* %3, align 8
  %4617 = inttoptr i64 %4615 to i32*
  %4618 = load i32, i32* %4617, align 4
  %4619 = zext i32 %4618 to i64
  store i64 %4619, i64* %RAX.i3587.phi.trans.insert, align 8
  %4620 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %4620, i64* %RCX.i4260.pre-phi, align 8
  %4621 = add i64 %4614, -96
  %4622 = add i64 %4613, 17
  store i64 %4622, i64* %3, align 8
  %4623 = inttoptr i64 %4621 to i32*
  %4624 = load i32, i32* %4623, align 4
  %4625 = zext i32 %4624 to i64
  store i64 %4625, i64* %RDX.i4317.pre-phi, align 8
  %4626 = add i64 %4614, -136
  %4627 = add i64 %4613, 23
  store i64 %4627, i64* %3, align 8
  %4628 = inttoptr i64 %4626 to i32*
  %4629 = load i32, i32* %4628, align 4
  %4630 = zext i32 %4629 to i64
  store i64 %4630, i64* %RSI.i739, align 8
  %4631 = add i64 %4614, -264
  %4632 = add i64 %4613, 30
  store i64 %4632, i64* %3, align 8
  %4633 = inttoptr i64 %4631 to i64*
  store i64 %4620, i64* %4633, align 8
  %4634 = load i32, i32* %ESI.i1656, align 4
  %4635 = zext i32 %4634 to i64
  %4636 = load i64, i64* %3, align 8
  store i64 %4635, i64* %RCX.i4260.pre-phi, align 8
  %4637 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %4638 = add i64 %4636, 4
  store i64 %4638, i64* %3, align 8
  %4639 = trunc i32 %4634 to i5
  switch i5 %4639, label %4646 [
    i5 0, label %routine_shll__cl___edx.exit4796
    i5 1, label %4640
  ]

; <label>:4640:                                   ; preds = %block_42115f
  %4641 = trunc i64 %4637 to i32
  %4642 = shl i32 %4641, 1
  %4643 = icmp slt i32 %4641, 0
  %4644 = icmp slt i32 %4642, 0
  %4645 = xor i1 %4643, %4644
  br label %4656

; <label>:4646:                                   ; preds = %block_42115f
  %4647 = and i32 %4634, 31
  %4648 = zext i32 %4647 to i64
  %4649 = add nuw nsw i64 %4648, 4294967295
  %4650 = and i64 %4637, 4294967295
  %4651 = and i64 %4649, 4294967295
  %4652 = shl i64 %4650, %4651
  %4653 = trunc i64 %4652 to i32
  %4654 = icmp slt i32 %4653, 0
  %4655 = shl i32 %4653, 1
  br label %4656

; <label>:4656:                                   ; preds = %4646, %4640
  %4657 = phi i1 [ %4643, %4640 ], [ %4654, %4646 ]
  %4658 = phi i1 [ %4645, %4640 ], [ false, %4646 ]
  %4659 = phi i32 [ %4642, %4640 ], [ %4655, %4646 ]
  %4660 = zext i32 %4659 to i64
  store i64 %4660, i64* %RDX.i4317.pre-phi, align 8
  %4661 = zext i1 %4657 to i8
  store i8 %4661, i8* %32, align 1
  %4662 = and i32 %4659, 254
  %4663 = tail call i32 @llvm.ctpop.i32(i32 %4662)
  %4664 = trunc i32 %4663 to i8
  %4665 = and i8 %4664, 1
  %4666 = xor i8 %4665, 1
  store i8 %4666, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %4667 = icmp eq i32 %4659, 0
  %4668 = zext i1 %4667 to i8
  store i8 %4668, i8* %48, align 1
  %4669 = lshr i32 %4659, 31
  %4670 = trunc i32 %4669 to i8
  store i8 %4670, i8* %51, align 1
  %4671 = zext i1 %4658 to i8
  store i8 %4671, i8* %57, align 1
  br label %routine_shll__cl___edx.exit4796

routine_shll__cl___edx.exit4796:                  ; preds = %4656, %block_42115f
  %4672 = phi i64 [ %4660, %4656 ], [ %4637, %block_42115f ]
  %4673 = load i64, i64* %RBP.i, align 8
  %4674 = add i64 %4673, -152
  %4675 = add i64 %4636, 10
  store i64 %4675, i64* %3, align 8
  %4676 = trunc i64 %4672 to i32
  %4677 = inttoptr i64 %4674 to i32*
  %4678 = load i32, i32* %4677, align 4
  %4679 = sub i32 %4676, %4678
  %4680 = zext i32 %4679 to i64
  store i64 %4680, i64* %RDX.i4317.pre-phi, align 8
  %4681 = icmp ult i32 %4676, %4678
  %4682 = zext i1 %4681 to i8
  store i8 %4682, i8* %32, align 1
  %4683 = and i32 %4679, 255
  %4684 = tail call i32 @llvm.ctpop.i32(i32 %4683)
  %4685 = trunc i32 %4684 to i8
  %4686 = and i8 %4685, 1
  %4687 = xor i8 %4686, 1
  store i8 %4687, i8* %39, align 1
  %4688 = xor i32 %4678, %4676
  %4689 = xor i32 %4688, %4679
  %4690 = lshr i32 %4689, 4
  %4691 = trunc i32 %4690 to i8
  %4692 = and i8 %4691, 1
  store i8 %4692, i8* %45, align 1
  %4693 = icmp eq i32 %4679, 0
  %4694 = zext i1 %4693 to i8
  store i8 %4694, i8* %48, align 1
  %4695 = lshr i32 %4679, 31
  %4696 = trunc i32 %4695 to i8
  store i8 %4696, i8* %51, align 1
  %4697 = lshr i32 %4676, 31
  %4698 = lshr i32 %4678, 31
  %4699 = xor i32 %4698, %4697
  %4700 = xor i32 %4695, %4697
  %4701 = add nuw nsw i32 %4700, %4699
  %4702 = icmp eq i32 %4701, 2
  %4703 = zext i1 %4702 to i8
  store i8 %4703, i8* %57, align 1
  %4704 = sext i32 %4679 to i64
  store i64 %4704, i64* %RDI.i1133, align 8
  %4705 = add i64 %4673, -264
  %4706 = add i64 %4636, 20
  store i64 %4706, i64* %3, align 8
  %4707 = inttoptr i64 %4705 to i64*
  %4708 = load i64, i64* %4707, align 8
  store i64 %4708, i64* %R8.i5602, align 8
  %4709 = shl nsw i64 %4704, 2
  %4710 = add i64 %4709, %4708
  %4711 = add i64 %4636, 24
  store i64 %4711, i64* %3, align 8
  %4712 = inttoptr i64 %4710 to i32*
  %4713 = load i32, i32* %4712, align 4
  %4714 = zext i32 %4713 to i64
  store i64 %4714, i64* %RDX.i4317.pre-phi, align 8
  %4715 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %4715, i64* %RDI.i1133, align 8
  %4716 = add i64 %4673, -100
  %4717 = add i64 %4636, 35
  store i64 %4717, i64* %3, align 8
  %4718 = inttoptr i64 %4716 to i32*
  %4719 = load i32, i32* %4718, align 4
  %4720 = zext i32 %4719 to i64
  store i64 %4720, i64* %RSI.i739, align 8
  %4721 = add i64 %4673, -136
  %4722 = add i64 %4636, 41
  store i64 %4722, i64* %3, align 8
  %4723 = inttoptr i64 %4721 to i32*
  %4724 = load i32, i32* %4723, align 4
  %4725 = zext i32 %4724 to i64
  store i64 %4725, i64* %RCX.i4260.pre-phi, align 8
  %4726 = add i64 %4636, 43
  store i64 %4726, i64* %3, align 8
  %4727 = trunc i32 %4724 to i5
  switch i5 %4727, label %4733 [
    i5 0, label %routine_shll__cl___esi.exit4771
    i5 1, label %4728
  ]

; <label>:4728:                                   ; preds = %routine_shll__cl___edx.exit4796
  %4729 = shl i32 %4719, 1
  %4730 = icmp slt i32 %4719, 0
  %4731 = icmp slt i32 %4729, 0
  %4732 = xor i1 %4730, %4731
  br label %4742

; <label>:4733:                                   ; preds = %routine_shll__cl___edx.exit4796
  %4734 = and i32 %4724, 31
  %4735 = zext i32 %4734 to i64
  %4736 = add nuw nsw i64 %4735, 4294967295
  %4737 = and i64 %4736, 4294967295
  %4738 = shl i64 %4720, %4737
  %4739 = trunc i64 %4738 to i32
  %4740 = icmp slt i32 %4739, 0
  %4741 = shl i32 %4739, 1
  br label %4742

; <label>:4742:                                   ; preds = %4733, %4728
  %4743 = phi i1 [ %4730, %4728 ], [ %4740, %4733 ]
  %4744 = phi i1 [ %4732, %4728 ], [ false, %4733 ]
  %4745 = phi i32 [ %4729, %4728 ], [ %4741, %4733 ]
  %4746 = zext i32 %4745 to i64
  store i64 %4746, i64* %RSI.i739, align 8
  %4747 = zext i1 %4743 to i8
  store i8 %4747, i8* %32, align 1
  %4748 = and i32 %4745, 254
  %4749 = tail call i32 @llvm.ctpop.i32(i32 %4748)
  %4750 = trunc i32 %4749 to i8
  %4751 = and i8 %4750, 1
  %4752 = xor i8 %4751, 1
  store i8 %4752, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %4753 = icmp eq i32 %4745, 0
  %4754 = zext i1 %4753 to i8
  store i8 %4754, i8* %48, align 1
  %4755 = lshr i32 %4745, 31
  %4756 = trunc i32 %4755 to i8
  store i8 %4756, i8* %51, align 1
  %4757 = zext i1 %4744 to i8
  store i8 %4757, i8* %57, align 1
  br label %routine_shll__cl___esi.exit4771

routine_shll__cl___esi.exit4771:                  ; preds = %4742, %routine_shll__cl___edx.exit4796
  %4758 = phi i32 [ %4745, %4742 ], [ %4719, %routine_shll__cl___edx.exit4796 ]
  %4759 = add i64 %4673, -156
  %4760 = add i64 %4636, 49
  store i64 %4760, i64* %3, align 8
  %4761 = inttoptr i64 %4759 to i32*
  %4762 = load i32, i32* %4761, align 4
  %4763 = sub i32 %4758, %4762
  %4764 = zext i32 %4763 to i64
  store i64 %4764, i64* %RSI.i739, align 8
  %4765 = icmp ult i32 %4758, %4762
  %4766 = zext i1 %4765 to i8
  store i8 %4766, i8* %32, align 1
  %4767 = and i32 %4763, 255
  %4768 = tail call i32 @llvm.ctpop.i32(i32 %4767)
  %4769 = trunc i32 %4768 to i8
  %4770 = and i8 %4769, 1
  %4771 = xor i8 %4770, 1
  store i8 %4771, i8* %39, align 1
  %4772 = xor i32 %4762, %4758
  %4773 = xor i32 %4772, %4763
  %4774 = lshr i32 %4773, 4
  %4775 = trunc i32 %4774 to i8
  %4776 = and i8 %4775, 1
  store i8 %4776, i8* %45, align 1
  %4777 = icmp eq i32 %4763, 0
  %4778 = zext i1 %4777 to i8
  store i8 %4778, i8* %48, align 1
  %4779 = lshr i32 %4763, 31
  %4780 = trunc i32 %4779 to i8
  store i8 %4780, i8* %51, align 1
  %4781 = lshr i32 %4758, 31
  %4782 = lshr i32 %4762, 31
  %4783 = xor i32 %4782, %4781
  %4784 = xor i32 %4779, %4781
  %4785 = add nuw nsw i32 %4784, %4783
  %4786 = icmp eq i32 %4785, 2
  %4787 = zext i1 %4786 to i8
  store i8 %4787, i8* %57, align 1
  %4788 = sext i32 %4763 to i64
  store i64 %4788, i64* %R9.i5580, align 8
  %4789 = shl nsw i64 %4788, 2
  %4790 = add i64 %4715, %4789
  %4791 = add i64 %4636, 56
  store i64 %4791, i64* %3, align 8
  %4792 = inttoptr i64 %4790 to i32*
  %4793 = load i32, i32* %4792, align 4
  %4794 = add i32 %4793, %4713
  %4795 = zext i32 %4794 to i64
  store i64 %4795, i64* %RDX.i4317.pre-phi, align 8
  %4796 = icmp ult i32 %4794, %4713
  %4797 = icmp ult i32 %4794, %4793
  %4798 = or i1 %4796, %4797
  %4799 = zext i1 %4798 to i8
  store i8 %4799, i8* %32, align 1
  %4800 = and i32 %4794, 255
  %4801 = tail call i32 @llvm.ctpop.i32(i32 %4800)
  %4802 = trunc i32 %4801 to i8
  %4803 = and i8 %4802, 1
  %4804 = xor i8 %4803, 1
  store i8 %4804, i8* %39, align 1
  %4805 = xor i32 %4793, %4713
  %4806 = xor i32 %4805, %4794
  %4807 = lshr i32 %4806, 4
  %4808 = trunc i32 %4807 to i8
  %4809 = and i8 %4808, 1
  store i8 %4809, i8* %45, align 1
  %4810 = icmp eq i32 %4794, 0
  %4811 = zext i1 %4810 to i8
  store i8 %4811, i8* %48, align 1
  %4812 = lshr i32 %4794, 31
  %4813 = trunc i32 %4812 to i8
  store i8 %4813, i8* %51, align 1
  %4814 = lshr i32 %4713, 31
  %4815 = lshr i32 %4793, 31
  %4816 = xor i32 %4812, %4814
  %4817 = xor i32 %4812, %4815
  %4818 = add nuw nsw i32 %4816, %4817
  %4819 = icmp eq i32 %4818, 2
  %4820 = zext i1 %4819 to i8
  store i8 %4820, i8* %57, align 1
  %4821 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %4822 = shl i64 %4821, 32
  %4823 = ashr exact i64 %4822, 32
  %4824 = sext i32 %4794 to i64
  %4825 = mul nsw i64 %4824, %4823
  %4826 = shl i64 %4825, 32
  %4827 = ashr i64 %4826, 47
  %4828 = lshr i64 %4827, 1
  %4829 = trunc i64 %4827 to i8
  %4830 = and i8 %4829, 1
  %4831 = trunc i64 %4828 to i32
  %4832 = and i64 %4828, 4294967295
  store i64 %4832, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %4830, i8* %32, align 1
  %4833 = and i32 %4831, 255
  %4834 = tail call i32 @llvm.ctpop.i32(i32 %4833)
  %4835 = trunc i32 %4834 to i8
  %4836 = and i8 %4835, 1
  %4837 = xor i8 %4836, 1
  store i8 %4837, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %4838 = icmp eq i32 %4831, 0
  %4839 = zext i1 %4838 to i8
  store i8 %4839, i8* %48, align 1
  %4840 = lshr i64 %4827, 32
  %4841 = trunc i64 %4840 to i8
  %4842 = and i8 %4841, 1
  store i8 %4842, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %4843 = load i64, i64* %RBP.i, align 8
  %4844 = add i64 %4843, -104
  %4845 = trunc i64 %4828 to i32
  %4846 = add i64 %4636, 65
  store i64 %4846, i64* %3, align 8
  %4847 = inttoptr i64 %4844 to i32*
  store i32 %4845, i32* %4847, align 4
  %4848 = load i64, i64* %RBP.i, align 8
  %4849 = add i64 %4848, -128
  %4850 = load i64, i64* %3, align 8
  %4851 = add i64 %4850, 4
  store i64 %4851, i64* %3, align 8
  %4852 = inttoptr i64 %4849 to i64*
  %4853 = load i64, i64* %4852, align 8
  store i64 %4853, i64* %RDI.i1133, align 8
  %4854 = add i64 %4848, -32
  %4855 = add i64 %4850, 8
  store i64 %4855, i64* %3, align 8
  %4856 = inttoptr i64 %4854 to i64*
  %4857 = load i64, i64* %4856, align 8
  store i64 %4857, i64* %RSI.i739, align 8
  %4858 = add i64 %4848, -112
  %4859 = add i64 %4850, 12
  store i64 %4859, i64* %3, align 8
  %4860 = inttoptr i64 %4858 to i64*
  %4861 = load i64, i64* %4860, align 8
  store i64 %4861, i64* %RDX.i4317.pre-phi, align 8
  %4862 = add i64 %4848, -140
  %4863 = add i64 %4850, 18
  store i64 %4863, i64* %3, align 8
  %4864 = inttoptr i64 %4862 to i32*
  %4865 = load i32, i32* %4864, align 4
  %4866 = zext i32 %4865 to i64
  store i64 %4866, i64* %RCX.i4260.pre-phi, align 8
  %4867 = add i64 %4848, -144
  %4868 = add i64 %4850, 25
  store i64 %4868, i64* %3, align 8
  %4869 = inttoptr i64 %4867 to i32*
  %4870 = load i32, i32* %4869, align 4
  %4871 = zext i32 %4870 to i64
  store i64 %4871, i64* %R8.i5602, align 8
  %4872 = add i64 %4848, -148
  %4873 = add i64 %4850, 32
  store i64 %4873, i64* %3, align 8
  %4874 = inttoptr i64 %4872 to i32*
  %4875 = load i32, i32* %4874, align 4
  %4876 = zext i32 %4875 to i64
  store i64 %4876, i64* %R9.i5580, align 8
  %4877 = add i64 %4848, -104
  %4878 = add i64 %4850, 35
  store i64 %4878, i64* %3, align 8
  %4879 = inttoptr i64 %4877 to i32*
  %4880 = load i32, i32* %4879, align 4
  %4881 = zext i32 %4880 to i64
  store i64 %4881, i64* %RAX.i3587.phi.trans.insert, align 8
  %4882 = add i64 %4848, -80
  %4883 = add i64 %4850, 39
  store i64 %4883, i64* %3, align 8
  %4884 = inttoptr i64 %4882 to i32*
  %4885 = load i32, i32* %4884, align 4
  %4886 = zext i32 %4885 to i64
  store i64 %4886, i64* %68, align 8
  %4887 = add i64 %4848, -96
  %4888 = add i64 %4850, 43
  store i64 %4888, i64* %3, align 8
  %4889 = inttoptr i64 %4887 to i32*
  %4890 = load i32, i32* %4889, align 4
  %4891 = zext i32 %4890 to i64
  store i64 %4891, i64* %R11.i, align 8
  %4892 = add i64 %4848, -100
  %4893 = add i64 %4850, 46
  store i64 %4893, i64* %3, align 8
  %4894 = inttoptr i64 %4892 to i32*
  %4895 = load i32, i32* %4894, align 4
  %4896 = zext i32 %4895 to i64
  store i64 %4896, i64* %RBX.i615, align 8
  %4897 = load i32*, i32** %2119, align 8
  %4898 = add i64 %4850, 49
  store i64 %4898, i64* %3, align 8
  store i32 %4880, i32* %4897, align 4
  %4899 = load i64, i64* %6, align 8
  %4900 = add i64 %4899, 8
  %4901 = load i32, i32* %R10D.i761, align 4
  %4902 = load i64, i64* %3, align 8
  %4903 = add i64 %4902, 5
  store i64 %4903, i64* %3, align 8
  %4904 = inttoptr i64 %4900 to i32*
  store i32 %4901, i32* %4904, align 4
  %4905 = load i64, i64* %6, align 8
  %4906 = add i64 %4905, 16
  %4907 = load i32, i32* %R11D.i5540, align 4
  %4908 = load i64, i64* %3, align 8
  %4909 = add i64 %4908, 5
  store i64 %4909, i64* %3, align 8
  %4910 = inttoptr i64 %4906 to i32*
  store i32 %4907, i32* %4910, align 4
  %4911 = load i64, i64* %6, align 8
  %4912 = add i64 %4911, 24
  %4913 = load i32, i32* %EBX.i5525, align 4
  %4914 = load i64, i64* %3, align 8
  %4915 = add i64 %4914, 4
  store i64 %4915, i64* %3, align 8
  %4916 = inttoptr i64 %4912 to i32*
  store i32 %4913, i32* %4916, align 4
  %4917 = load i64, i64* %3, align 8
  %4918 = add i64 %4917, -3405
  %4919 = add i64 %4917, 5
  %4920 = load i64, i64* %6, align 8
  %4921 = add i64 %4920, -8
  %4922 = inttoptr i64 %4921 to i64*
  store i64 %4919, i64* %4922, align 8
  store i64 %4921, i64* %6, align 8
  store i64 %4918, i64* %3, align 8
  %call2_4211fd = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %4918, %struct.Memory* %4429)
  %4923 = load i64, i64* %RBP.i, align 8
  %4924 = add i64 %4923, -104
  %4925 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %4926 = load i64, i64* %3, align 8
  %4927 = add i64 %4926, 3
  store i64 %4927, i64* %3, align 8
  %4928 = inttoptr i64 %4924 to i32*
  store i32 %4925, i32* %4928, align 4
  %4929 = load i64, i64* %RBP.i, align 8
  %4930 = add i64 %4929, -104
  %4931 = load i64, i64* %3, align 8
  %4932 = add i64 %4931, 3
  store i64 %4932, i64* %3, align 8
  %4933 = inttoptr i64 %4930 to i32*
  %4934 = load i32, i32* %4933, align 4
  %4935 = zext i32 %4934 to i64
  store i64 %4935, i64* %RAX.i3587.phi.trans.insert, align 8
  %4936 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %4936, i64* %RDX.i4317.pre-phi, align 8
  %4937 = add i64 %4929, -100
  %4938 = add i64 %4931, 14
  store i64 %4938, i64* %3, align 8
  %4939 = inttoptr i64 %4937 to i32*
  %4940 = load i32, i32* %4939, align 4
  %4941 = zext i32 %4940 to i64
  store i64 %4941, i64* %RCX.i4260.pre-phi, align 8
  %4942 = add i64 %4929, -164
  %4943 = add i64 %4931, 20
  store i64 %4943, i64* %3, align 8
  %4944 = inttoptr i64 %4942 to i32*
  %4945 = load i32, i32* %4944, align 4
  %4946 = sub i32 %4940, %4945
  %4947 = zext i32 %4946 to i64
  store i64 %4947, i64* %RCX.i4260.pre-phi, align 8
  %4948 = icmp ult i32 %4940, %4945
  %4949 = zext i1 %4948 to i8
  store i8 %4949, i8* %32, align 1
  %4950 = and i32 %4946, 255
  %4951 = tail call i32 @llvm.ctpop.i32(i32 %4950)
  %4952 = trunc i32 %4951 to i8
  %4953 = and i8 %4952, 1
  %4954 = xor i8 %4953, 1
  store i8 %4954, i8* %39, align 1
  %4955 = xor i32 %4945, %4940
  %4956 = xor i32 %4955, %4946
  %4957 = lshr i32 %4956, 4
  %4958 = trunc i32 %4957 to i8
  %4959 = and i8 %4958, 1
  store i8 %4959, i8* %45, align 1
  %4960 = icmp eq i32 %4946, 0
  %4961 = zext i1 %4960 to i8
  store i8 %4961, i8* %48, align 1
  %4962 = lshr i32 %4946, 31
  %4963 = trunc i32 %4962 to i8
  store i8 %4963, i8* %51, align 1
  %4964 = lshr i32 %4940, 31
  %4965 = lshr i32 %4945, 31
  %4966 = xor i32 %4965, %4964
  %4967 = xor i32 %4962, %4964
  %4968 = add nuw nsw i32 %4967, %4966
  %4969 = icmp eq i32 %4968, 2
  %4970 = zext i1 %4969 to i8
  store i8 %4970, i8* %57, align 1
  %4971 = add i64 %4929, -76
  %4972 = add i64 %4931, 23
  store i64 %4972, i64* %3, align 8
  %4973 = inttoptr i64 %4971 to i32*
  %4974 = load i32, i32* %4973, align 4
  %4975 = add i32 %4974, %4946
  %4976 = zext i32 %4975 to i64
  store i64 %4976, i64* %RCX.i4260.pre-phi, align 8
  %4977 = icmp ult i32 %4975, %4946
  %4978 = icmp ult i32 %4975, %4974
  %4979 = or i1 %4977, %4978
  %4980 = zext i1 %4979 to i8
  store i8 %4980, i8* %32, align 1
  %4981 = and i32 %4975, 255
  %4982 = tail call i32 @llvm.ctpop.i32(i32 %4981)
  %4983 = trunc i32 %4982 to i8
  %4984 = and i8 %4983, 1
  %4985 = xor i8 %4984, 1
  store i8 %4985, i8* %39, align 1
  %4986 = xor i32 %4974, %4946
  %4987 = xor i32 %4986, %4975
  %4988 = lshr i32 %4987, 4
  %4989 = trunc i32 %4988 to i8
  %4990 = and i8 %4989, 1
  store i8 %4990, i8* %45, align 1
  %4991 = icmp eq i32 %4975, 0
  %4992 = zext i1 %4991 to i8
  store i8 %4992, i8* %48, align 1
  %4993 = lshr i32 %4975, 31
  %4994 = trunc i32 %4993 to i8
  store i8 %4994, i8* %51, align 1
  %4995 = lshr i32 %4974, 31
  %4996 = xor i32 %4993, %4962
  %4997 = xor i32 %4993, %4995
  %4998 = add nuw nsw i32 %4996, %4997
  %4999 = icmp eq i32 %4998, 2
  %5000 = zext i1 %4999 to i8
  store i8 %5000, i8* %57, align 1
  %5001 = sext i32 %4975 to i64
  store i64 %5001, i64* %RSI.i739, align 8
  %5002 = shl nsw i64 %5001, 3
  %5003 = add i64 %4936, %5002
  %5004 = add i64 %4931, 30
  store i64 %5004, i64* %3, align 8
  %5005 = inttoptr i64 %5003 to i64*
  %5006 = load i64, i64* %5005, align 8
  store i64 %5006, i64* %RDX.i4317.pre-phi, align 8
  %5007 = load i64, i64* %RBP.i, align 8
  %5008 = add i64 %5007, -96
  %5009 = add i64 %4931, 33
  store i64 %5009, i64* %3, align 8
  %5010 = inttoptr i64 %5008 to i32*
  %5011 = load i32, i32* %5010, align 4
  %5012 = zext i32 %5011 to i64
  store i64 %5012, i64* %RCX.i4260.pre-phi, align 8
  %5013 = add i64 %5007, -160
  %5014 = add i64 %4931, 39
  store i64 %5014, i64* %3, align 8
  %5015 = inttoptr i64 %5013 to i32*
  %5016 = load i32, i32* %5015, align 4
  %5017 = sub i32 %5011, %5016
  %5018 = zext i32 %5017 to i64
  store i64 %5018, i64* %RCX.i4260.pre-phi, align 8
  %5019 = icmp ult i32 %5011, %5016
  %5020 = zext i1 %5019 to i8
  store i8 %5020, i8* %32, align 1
  %5021 = and i32 %5017, 255
  %5022 = tail call i32 @llvm.ctpop.i32(i32 %5021)
  %5023 = trunc i32 %5022 to i8
  %5024 = and i8 %5023, 1
  %5025 = xor i8 %5024, 1
  store i8 %5025, i8* %39, align 1
  %5026 = xor i32 %5016, %5011
  %5027 = xor i32 %5026, %5017
  %5028 = lshr i32 %5027, 4
  %5029 = trunc i32 %5028 to i8
  %5030 = and i8 %5029, 1
  store i8 %5030, i8* %45, align 1
  %5031 = icmp eq i32 %5017, 0
  %5032 = zext i1 %5031 to i8
  store i8 %5032, i8* %48, align 1
  %5033 = lshr i32 %5017, 31
  %5034 = trunc i32 %5033 to i8
  store i8 %5034, i8* %51, align 1
  %5035 = lshr i32 %5011, 31
  %5036 = lshr i32 %5016, 31
  %5037 = xor i32 %5036, %5035
  %5038 = xor i32 %5033, %5035
  %5039 = add nuw nsw i32 %5038, %5037
  %5040 = icmp eq i32 %5039, 2
  %5041 = zext i1 %5040 to i8
  store i8 %5041, i8* %57, align 1
  %5042 = add i64 %5007, -76
  %5043 = add i64 %4931, 42
  store i64 %5043, i64* %3, align 8
  %5044 = inttoptr i64 %5042 to i32*
  %5045 = load i32, i32* %5044, align 4
  %5046 = add i32 %5045, %5017
  %5047 = zext i32 %5046 to i64
  store i64 %5047, i64* %RCX.i4260.pre-phi, align 8
  %5048 = icmp ult i32 %5046, %5017
  %5049 = icmp ult i32 %5046, %5045
  %5050 = or i1 %5048, %5049
  %5051 = zext i1 %5050 to i8
  store i8 %5051, i8* %32, align 1
  %5052 = and i32 %5046, 255
  %5053 = tail call i32 @llvm.ctpop.i32(i32 %5052)
  %5054 = trunc i32 %5053 to i8
  %5055 = and i8 %5054, 1
  %5056 = xor i8 %5055, 1
  store i8 %5056, i8* %39, align 1
  %5057 = xor i32 %5045, %5017
  %5058 = xor i32 %5057, %5046
  %5059 = lshr i32 %5058, 4
  %5060 = trunc i32 %5059 to i8
  %5061 = and i8 %5060, 1
  store i8 %5061, i8* %45, align 1
  %5062 = icmp eq i32 %5046, 0
  %5063 = zext i1 %5062 to i8
  store i8 %5063, i8* %48, align 1
  %5064 = lshr i32 %5046, 31
  %5065 = trunc i32 %5064 to i8
  store i8 %5065, i8* %51, align 1
  %5066 = lshr i32 %5045, 31
  %5067 = xor i32 %5064, %5033
  %5068 = xor i32 %5064, %5066
  %5069 = add nuw nsw i32 %5067, %5068
  %5070 = icmp eq i32 %5069, 2
  %5071 = zext i1 %5070 to i8
  store i8 %5071, i8* %57, align 1
  %5072 = sext i32 %5046 to i64
  store i64 %5072, i64* %RSI.i739, align 8
  %5073 = shl nsw i64 %5072, 2
  %5074 = add i64 %5006, %5073
  %5075 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %5076 = add i64 %4931, 48
  store i64 %5076, i64* %3, align 8
  %5077 = inttoptr i64 %5074 to i32*
  store i32 %5075, i32* %5077, align 4
  %5078 = load i64, i64* %RBP.i, align 8
  %5079 = add i64 %5078, -104
  %5080 = load i64, i64* %3, align 8
  %5081 = add i64 %5080, 3
  store i64 %5081, i64* %3, align 8
  %5082 = inttoptr i64 %5079 to i32*
  %5083 = load i32, i32* %5082, align 4
  %5084 = zext i32 %5083 to i64
  store i64 %5084, i64* %RAX.i3587.phi.trans.insert, align 8
  %5085 = add i64 %5078, -80
  %5086 = add i64 %5080, 6
  store i64 %5086, i64* %3, align 8
  %5087 = inttoptr i64 %5085 to i32*
  %5088 = load i32, i32* %5087, align 4
  %5089 = sub i32 %5083, %5088
  %5090 = icmp ult i32 %5083, %5088
  %5091 = zext i1 %5090 to i8
  store i8 %5091, i8* %32, align 1
  %5092 = and i32 %5089, 255
  %5093 = tail call i32 @llvm.ctpop.i32(i32 %5092)
  %5094 = trunc i32 %5093 to i8
  %5095 = and i8 %5094, 1
  %5096 = xor i8 %5095, 1
  store i8 %5096, i8* %39, align 1
  %5097 = xor i32 %5088, %5083
  %5098 = xor i32 %5097, %5089
  %5099 = lshr i32 %5098, 4
  %5100 = trunc i32 %5099 to i8
  %5101 = and i8 %5100, 1
  store i8 %5101, i8* %45, align 1
  %5102 = icmp eq i32 %5089, 0
  %5103 = zext i1 %5102 to i8
  store i8 %5103, i8* %48, align 1
  %5104 = lshr i32 %5089, 31
  %5105 = trunc i32 %5104 to i8
  store i8 %5105, i8* %51, align 1
  %5106 = lshr i32 %5083, 31
  %5107 = lshr i32 %5088, 31
  %5108 = xor i32 %5107, %5106
  %5109 = xor i32 %5104, %5106
  %5110 = add nuw nsw i32 %5109, %5108
  %5111 = icmp eq i32 %5110, 2
  %5112 = zext i1 %5111 to i8
  store i8 %5112, i8* %57, align 1
  %5113 = icmp ne i8 %5105, 0
  %5114 = xor i1 %5113, %5111
  %.v615 = select i1 %5114, i64 12, i64 36
  %5115 = add i64 %5080, %.v615
  store i64 %5115, i64* %3, align 8
  br i1 %5114, label %block_421241, label %block_.L_421259

block_421241:                                     ; preds = %routine_shll__cl___esi.exit4771
  %5116 = add i64 %5078, -96
  %5117 = add i64 %5115, 3
  store i64 %5117, i64* %3, align 8
  %5118 = inttoptr i64 %5116 to i32*
  %5119 = load i32, i32* %5118, align 4
  %5120 = zext i32 %5119 to i64
  store i64 %5120, i64* %RAX.i3587.phi.trans.insert, align 8
  %5121 = add i64 %5078, -168
  %5122 = add i64 %5115, 9
  store i64 %5122, i64* %3, align 8
  %5123 = inttoptr i64 %5121 to i32*
  store i32 %5119, i32* %5123, align 4
  %5124 = load i64, i64* %RBP.i, align 8
  %5125 = add i64 %5124, -100
  %5126 = load i64, i64* %3, align 8
  %5127 = add i64 %5126, 3
  store i64 %5127, i64* %3, align 8
  %5128 = inttoptr i64 %5125 to i32*
  %5129 = load i32, i32* %5128, align 4
  %5130 = zext i32 %5129 to i64
  store i64 %5130, i64* %RAX.i3587.phi.trans.insert, align 8
  %5131 = add i64 %5124, -172
  %5132 = add i64 %5126, 9
  store i64 %5132, i64* %3, align 8
  %5133 = inttoptr i64 %5131 to i32*
  store i32 %5129, i32* %5133, align 4
  %5134 = load i64, i64* %RBP.i, align 8
  %5135 = add i64 %5134, -104
  %5136 = load i64, i64* %3, align 8
  %5137 = add i64 %5136, 3
  store i64 %5137, i64* %3, align 8
  %5138 = inttoptr i64 %5135 to i32*
  %5139 = load i32, i32* %5138, align 4
  %5140 = zext i32 %5139 to i64
  store i64 %5140, i64* %RAX.i3587.phi.trans.insert, align 8
  %5141 = add i64 %5134, -80
  %5142 = add i64 %5136, 6
  store i64 %5142, i64* %3, align 8
  %5143 = inttoptr i64 %5141 to i32*
  store i32 %5139, i32* %5143, align 4
  %.pre406 = load i64, i64* %3, align 8
  br label %block_.L_421259

block_.L_421259:                                  ; preds = %routine_shll__cl___esi.exit4771, %block_421241
  %5144 = phi i64 [ %5115, %routine_shll__cl___esi.exit4771 ], [ %.pre406, %block_421241 ]
  %5145 = add i64 %5144, 5
  store i64 %5145, i64* %3, align 8
  br label %block_.L_42125e

block_.L_42125e:                                  ; preds = %block_42112b, %block_.L_421259
  %5146 = phi i64 [ %4613, %block_42112b ], [ %5145, %block_.L_421259 ]
  %MEMORY.22 = phi %struct.Memory* [ %4429, %block_42112b ], [ %call2_4211fd, %block_.L_421259 ]
  %5147 = add i64 %5146, 5
  store i64 %5147, i64* %3, align 8
  %.pre407 = load i64, i64* %RBP.i, align 8
  br label %block_.L_421263

block_.L_421263:                                  ; preds = %block_421112, %block_4210cb, %block_.L_42125e
  %5148 = phi i64 [ %4357, %block_4210cb ], [ %4431, %block_421112 ], [ %.pre407, %block_.L_42125e ]
  %5149 = phi i64 [ %4389, %block_4210cb ], [ %4463, %block_421112 ], [ %5147, %block_.L_42125e ]
  %MEMORY.23 = phi %struct.Memory* [ %4355, %block_4210cb ], [ %4429, %block_421112 ], [ %MEMORY.22, %block_.L_42125e ]
  %5150 = add i64 %5148, -192
  %5151 = add i64 %5149, 11
  store i64 %5151, i64* %3, align 8
  %5152 = inttoptr i64 %5150 to i32*
  %5153 = load i32, i32* %5152, align 4
  %5154 = add i32 %5153, 1
  %5155 = zext i32 %5154 to i64
  store i64 %5155, i64* %RAX.i3587.phi.trans.insert, align 8
  %5156 = icmp eq i32 %5153, -1
  %5157 = icmp eq i32 %5154, 0
  %5158 = or i1 %5156, %5157
  %5159 = zext i1 %5158 to i8
  store i8 %5159, i8* %32, align 1
  %5160 = and i32 %5154, 255
  %5161 = tail call i32 @llvm.ctpop.i32(i32 %5160)
  %5162 = trunc i32 %5161 to i8
  %5163 = and i8 %5162, 1
  %5164 = xor i8 %5163, 1
  store i8 %5164, i8* %39, align 1
  %5165 = xor i32 %5154, %5153
  %5166 = lshr i32 %5165, 4
  %5167 = trunc i32 %5166 to i8
  %5168 = and i8 %5167, 1
  store i8 %5168, i8* %45, align 1
  %5169 = zext i1 %5157 to i8
  store i8 %5169, i8* %48, align 1
  %5170 = lshr i32 %5154, 31
  %5171 = trunc i32 %5170 to i8
  store i8 %5171, i8* %51, align 1
  %5172 = lshr i32 %5153, 31
  %5173 = xor i32 %5170, %5172
  %5174 = add nuw nsw i32 %5173, %5170
  %5175 = icmp eq i32 %5174, 2
  %5176 = zext i1 %5175 to i8
  store i8 %5176, i8* %57, align 1
  %5177 = add i64 %5149, 20
  store i64 %5177, i64* %3, align 8
  store i32 %5154, i32* %5152, align 4
  %5178 = load i64, i64* %3, align 8
  %5179 = add i64 %5178, -441
  store i64 %5179, i64* %3, align 8
  br label %block_.L_4210be

block_.L_42127c:                                  ; preds = %block_.L_4210be
  %5180 = add i64 %4223, 5
  store i64 %5180, i64* %3, align 8
  br label %block_.L_421281

block_.L_421281:                                  ; preds = %block_.L_42127c, %block_420f17
  %5181 = phi i64 [ %5180, %block_.L_42127c ], [ %3317, %block_420f17 ]
  %5182 = phi i64 [ %4195, %block_.L_42127c ], [ %2265, %block_420f17 ]
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.20, %block_.L_42127c ], [ %MEMORY.12, %block_420f17 ]
  %5183 = add i64 %5182, -52
  %5184 = add i64 %5181, 4
  store i64 %5184, i64* %3, align 8
  %5185 = inttoptr i64 %5183 to i32*
  %5186 = load i32, i32* %5185, align 4
  %5187 = add i32 %5186, -1
  %5188 = icmp eq i32 %5186, 0
  %5189 = zext i1 %5188 to i8
  store i8 %5189, i8* %32, align 1
  %5190 = and i32 %5187, 255
  %5191 = tail call i32 @llvm.ctpop.i32(i32 %5190)
  %5192 = trunc i32 %5191 to i8
  %5193 = and i8 %5192, 1
  %5194 = xor i8 %5193, 1
  store i8 %5194, i8* %39, align 1
  %5195 = xor i32 %5187, %5186
  %5196 = lshr i32 %5195, 4
  %5197 = trunc i32 %5196 to i8
  %5198 = and i8 %5197, 1
  store i8 %5198, i8* %45, align 1
  %5199 = icmp eq i32 %5187, 0
  %5200 = zext i1 %5199 to i8
  store i8 %5200, i8* %48, align 1
  %5201 = lshr i32 %5187, 31
  %5202 = trunc i32 %5201 to i8
  store i8 %5202, i8* %51, align 1
  %5203 = lshr i32 %5186, 31
  %5204 = xor i32 %5201, %5203
  %5205 = add nuw nsw i32 %5204, %5203
  %5206 = icmp eq i32 %5205, 2
  %5207 = zext i1 %5206 to i8
  store i8 %5207, i8* %57, align 1
  %5208 = icmp ne i8 %5202, 0
  %5209 = xor i1 %5208, %5206
  %5210 = or i1 %5199, %5209
  %.v510 = select i1 %5210, i64 541, i64 10
  %5211 = add i64 %5181, %.v510
  store i64 %5211, i64* %3, align 8
  br i1 %5210, label %block_.L_42149e, label %block_42128b

block_42128b:                                     ; preds = %block_.L_421281
  store i64 4, i64* %RAX.i3587.phi.trans.insert, align 8
  %5212 = add i64 %5182, -44
  %5213 = add i64 %5211, 8
  store i64 %5213, i64* %3, align 8
  %5214 = inttoptr i64 %5212 to i32*
  %5215 = load i32, i32* %5214, align 4
  %5216 = zext i32 %5215 to i64
  store i64 %5216, i64* %RCX.i4260.pre-phi, align 8
  %5217 = load i32, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %5218 = zext i32 %5217 to i64
  store i64 %5218, i64* %RDX.i4317.pre-phi, align 8
  %5219 = add i64 %5182, -268
  %5220 = add i64 %5211, 21
  store i64 %5220, i64* %3, align 8
  %5221 = inttoptr i64 %5219 to i32*
  store i32 4, i32* %5221, align 4
  %5222 = load i32, i32* %EDX.i1187, align 4
  %5223 = zext i32 %5222 to i64
  %5224 = load i64, i64* %3, align 8
  store i64 %5223, i64* %RAX.i3587.phi.trans.insert, align 8
  %5225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5226 = sext i32 %5222 to i64
  %5227 = lshr i64 %5226, 32
  store i64 %5227, i64* %5225, align 8
  %5228 = load i64, i64* %RBP.i, align 8
  %5229 = add i64 %5228, -268
  %5230 = add i64 %5224, 9
  store i64 %5230, i64* %3, align 8
  %5231 = inttoptr i64 %5229 to i32*
  %5232 = load i32, i32* %5231, align 4
  %5233 = zext i32 %5232 to i64
  store i64 %5233, i64* %RSI.i739, align 8
  %5234 = add i64 %5224, 11
  store i64 %5234, i64* %3, align 8
  %5235 = sext i32 %5232 to i64
  %5236 = shl nuw i64 %5227, 32
  %5237 = or i64 %5236, %5223
  %5238 = sdiv i64 %5237, %5235
  %5239 = shl i64 %5238, 32
  %5240 = ashr exact i64 %5239, 32
  %5241 = icmp eq i64 %5238, %5240
  br i1 %5241, label %5244, label %5242

; <label>:5242:                                   ; preds = %block_42128b
  %5243 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5234, %struct.Memory* %MEMORY.24)
  %.pre262 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %.pre263 = load i64, i64* %3, align 8
  %.pre264 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit4606

; <label>:5244:                                   ; preds = %block_42128b
  %5245 = srem i64 %5237, %5235
  %5246 = and i64 %5238, 4294967295
  store i64 %5246, i64* %RAX.i3587.phi.trans.insert, align 8
  %5247 = and i64 %5245, 4294967295
  store i64 %5247, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %5248 = trunc i64 %5238 to i32
  br label %routine_idivl__esi.exit4606

routine_idivl__esi.exit4606:                      ; preds = %5244, %5242
  %5249 = phi i64 [ %.pre264, %5242 ], [ %5228, %5244 ]
  %5250 = phi i64 [ %.pre263, %5242 ], [ %5234, %5244 ]
  %5251 = phi i32 [ %.pre262, %5242 ], [ %5248, %5244 ]
  %5252 = phi %struct.Memory* [ %5243, %5242 ], [ %MEMORY.24, %5244 ]
  %5253 = load i64, i64* %RCX.i4260.pre-phi, align 8
  %5254 = zext i32 %5251 to i64
  %5255 = trunc i64 %5253 to i32
  %5256 = add i32 %5251, %5255
  %5257 = zext i32 %5256 to i64
  store i64 %5257, i64* %RCX.i4260.pre-phi, align 8
  %5258 = icmp ult i32 %5256, %5255
  %5259 = icmp ult i32 %5256, %5251
  %5260 = or i1 %5258, %5259
  %5261 = zext i1 %5260 to i8
  store i8 %5261, i8* %32, align 1
  %5262 = and i32 %5256, 255
  %5263 = tail call i32 @llvm.ctpop.i32(i32 %5262)
  %5264 = trunc i32 %5263 to i8
  %5265 = and i8 %5264, 1
  %5266 = xor i8 %5265, 1
  store i8 %5266, i8* %39, align 1
  %5267 = xor i64 %5254, %5253
  %5268 = trunc i64 %5267 to i32
  %5269 = xor i32 %5268, %5256
  %5270 = lshr i32 %5269, 4
  %5271 = trunc i32 %5270 to i8
  %5272 = and i8 %5271, 1
  store i8 %5272, i8* %45, align 1
  %5273 = icmp eq i32 %5256, 0
  %5274 = zext i1 %5273 to i8
  store i8 %5274, i8* %48, align 1
  %5275 = lshr i32 %5256, 31
  %5276 = trunc i32 %5275 to i8
  store i8 %5276, i8* %51, align 1
  %5277 = lshr i32 %5255, 31
  %5278 = lshr i32 %5251, 31
  %5279 = xor i32 %5275, %5277
  %5280 = xor i32 %5275, %5278
  %5281 = add nuw nsw i32 %5279, %5280
  %5282 = icmp eq i32 %5281, 2
  %5283 = zext i1 %5282 to i8
  store i8 %5283, i8* %57, align 1
  %5284 = add i64 %5249, -96
  %5285 = add i64 %5250, 5
  store i64 %5285, i64* %3, align 8
  %5286 = inttoptr i64 %5284 to i32*
  store i32 %5256, i32* %5286, align 4
  %5287 = load i64, i64* %RBP.i, align 8
  %5288 = add i64 %5287, -48
  %5289 = load i64, i64* %3, align 8
  %5290 = add i64 %5289, 3
  store i64 %5290, i64* %3, align 8
  %5291 = inttoptr i64 %5288 to i32*
  %5292 = load i32, i32* %5291, align 4
  %5293 = zext i32 %5292 to i64
  store i64 %5293, i64* %RAX.i3587.phi.trans.insert, align 8
  %5294 = load i32, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %5295 = zext i32 %5294 to i64
  store i64 %5295, i64* %RCX.i4260.pre-phi, align 8
  %5296 = add i64 %5287, -272
  %5297 = add i64 %5289, 16
  store i64 %5297, i64* %3, align 8
  %5298 = inttoptr i64 %5296 to i32*
  store i32 %5292, i32* %5298, align 4
  %5299 = load i32, i32* %ECX.i1211, align 4
  %5300 = zext i32 %5299 to i64
  %5301 = load i64, i64* %3, align 8
  store i64 %5300, i64* %RAX.i3587.phi.trans.insert, align 8
  %5302 = sext i32 %5299 to i64
  %5303 = lshr i64 %5302, 32
  store i64 %5303, i64* %5225, align 8
  %5304 = load i32, i32* %ESI.i1656, align 4
  %5305 = add i64 %5301, 5
  store i64 %5305, i64* %3, align 8
  %5306 = sext i32 %5304 to i64
  %5307 = shl nuw i64 %5303, 32
  %5308 = or i64 %5307, %5300
  %5309 = sdiv i64 %5308, %5306
  %5310 = shl i64 %5309, 32
  %5311 = ashr exact i64 %5310, 32
  %5312 = icmp eq i64 %5309, %5311
  br i1 %5312, label %5315, label %5313

; <label>:5313:                                   ; preds = %routine_idivl__esi.exit4606
  %5314 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5305, %struct.Memory* %5252)
  %.pre265 = load i64, i64* %3, align 8
  %.pre266 = load i32, i32* %EAX.i4185.pre-phi, align 4
  br label %routine_idivl__esi.exit4582

; <label>:5315:                                   ; preds = %routine_idivl__esi.exit4606
  %5316 = srem i64 %5308, %5306
  %5317 = and i64 %5309, 4294967295
  store i64 %5317, i64* %RAX.i3587.phi.trans.insert, align 8
  %5318 = and i64 %5316, 4294967295
  store i64 %5318, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %5319 = trunc i64 %5309 to i32
  br label %routine_idivl__esi.exit4582

routine_idivl__esi.exit4582:                      ; preds = %5315, %5313
  %5320 = phi i32 [ %.pre266, %5313 ], [ %5319, %5315 ]
  %5321 = phi i64 [ %.pre265, %5313 ], [ %5305, %5315 ]
  %5322 = phi %struct.Memory* [ %5314, %5313 ], [ %5252, %5315 ]
  %5323 = load i64, i64* %RBP.i, align 8
  %5324 = add i64 %5323, -272
  %5325 = add i64 %5321, 6
  store i64 %5325, i64* %3, align 8
  %5326 = inttoptr i64 %5324 to i32*
  %5327 = load i32, i32* %5326, align 4
  %5328 = add i32 %5320, %5327
  %5329 = zext i32 %5328 to i64
  store i64 %5329, i64* %RCX.i4260.pre-phi, align 8
  %5330 = icmp ult i32 %5328, %5327
  %5331 = icmp ult i32 %5328, %5320
  %5332 = or i1 %5330, %5331
  %5333 = zext i1 %5332 to i8
  store i8 %5333, i8* %32, align 1
  %5334 = and i32 %5328, 255
  %5335 = tail call i32 @llvm.ctpop.i32(i32 %5334)
  %5336 = trunc i32 %5335 to i8
  %5337 = and i8 %5336, 1
  %5338 = xor i8 %5337, 1
  store i8 %5338, i8* %39, align 1
  %5339 = xor i32 %5320, %5327
  %5340 = xor i32 %5339, %5328
  %5341 = lshr i32 %5340, 4
  %5342 = trunc i32 %5341 to i8
  %5343 = and i8 %5342, 1
  store i8 %5343, i8* %45, align 1
  %5344 = icmp eq i32 %5328, 0
  %5345 = zext i1 %5344 to i8
  store i8 %5345, i8* %48, align 1
  %5346 = lshr i32 %5328, 31
  %5347 = trunc i32 %5346 to i8
  store i8 %5347, i8* %51, align 1
  %5348 = lshr i32 %5327, 31
  %5349 = lshr i32 %5320, 31
  %5350 = xor i32 %5346, %5348
  %5351 = xor i32 %5346, %5349
  %5352 = add nuw nsw i32 %5350, %5351
  %5353 = icmp eq i32 %5352, 2
  %5354 = zext i1 %5353 to i8
  store i8 %5354, i8* %57, align 1
  %5355 = add i64 %5323, -100
  %5356 = add i64 %5321, 11
  store i64 %5356, i64* %3, align 8
  %5357 = inttoptr i64 %5355 to i32*
  store i32 %5328, i32* %5357, align 4
  %5358 = load i64, i64* %RBP.i, align 8
  %5359 = add i64 %5358, -96
  %5360 = load i64, i64* %3, align 8
  %5361 = add i64 %5360, 3
  store i64 %5361, i64* %3, align 8
  %5362 = inttoptr i64 %5359 to i32*
  %5363 = load i32, i32* %5362, align 4
  %5364 = zext i32 %5363 to i64
  store i64 %5364, i64* %RAX.i3587.phi.trans.insert, align 8
  %5365 = add i64 %5358, -160
  %5366 = add i64 %5360, 9
  store i64 %5366, i64* %3, align 8
  %5367 = inttoptr i64 %5365 to i32*
  %5368 = load i32, i32* %5367, align 4
  %5369 = sub i32 %5363, %5368
  %5370 = zext i32 %5369 to i64
  store i64 %5370, i64* %RAX.i3587.phi.trans.insert, align 8
  %5371 = icmp ult i32 %5363, %5368
  %5372 = zext i1 %5371 to i8
  store i8 %5372, i8* %32, align 1
  %5373 = and i32 %5369, 255
  %5374 = tail call i32 @llvm.ctpop.i32(i32 %5373)
  %5375 = trunc i32 %5374 to i8
  %5376 = and i8 %5375, 1
  %5377 = xor i8 %5376, 1
  store i8 %5377, i8* %39, align 1
  %5378 = xor i32 %5368, %5363
  %5379 = xor i32 %5378, %5369
  %5380 = lshr i32 %5379, 4
  %5381 = trunc i32 %5380 to i8
  %5382 = and i8 %5381, 1
  store i8 %5382, i8* %45, align 1
  %5383 = icmp eq i32 %5369, 0
  %5384 = zext i1 %5383 to i8
  store i8 %5384, i8* %48, align 1
  %5385 = lshr i32 %5369, 31
  %5386 = trunc i32 %5385 to i8
  store i8 %5386, i8* %51, align 1
  %5387 = lshr i32 %5363, 31
  %5388 = lshr i32 %5368, 31
  %5389 = xor i32 %5388, %5387
  %5390 = xor i32 %5385, %5387
  %5391 = add nuw nsw i32 %5390, %5389
  %5392 = icmp eq i32 %5391, 2
  %5393 = zext i1 %5392 to i8
  store i8 %5393, i8* %57, align 1
  store i64 %5370, i64* %RDI.i1133, align 8
  %5394 = add i64 %5360, -131792
  %5395 = add i64 %5360, 16
  %5396 = load i64, i64* %6, align 8
  %5397 = add i64 %5396, -8
  %5398 = inttoptr i64 %5397 to i64*
  store i64 %5395, i64* %5398, align 8
  store i64 %5397, i64* %6, align 8
  store i64 %5394, i64* %3, align 8
  %5399 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %5322)
  %5400 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %5401 = load i64, i64* %RBP.i, align 8
  %5402 = add i64 %5401, -76
  %5403 = load i64, i64* %3, align 8
  %5404 = add i64 %5403, 3
  store i64 %5404, i64* %3, align 8
  %5405 = inttoptr i64 %5402 to i32*
  %5406 = load i32, i32* %5405, align 4
  %5407 = sub i32 %5400, %5406
  %5408 = icmp ult i32 %5400, %5406
  %5409 = zext i1 %5408 to i8
  store i8 %5409, i8* %32, align 1
  %5410 = and i32 %5407, 255
  %5411 = tail call i32 @llvm.ctpop.i32(i32 %5410)
  %5412 = trunc i32 %5411 to i8
  %5413 = and i8 %5412, 1
  %5414 = xor i8 %5413, 1
  store i8 %5414, i8* %39, align 1
  %5415 = xor i32 %5406, %5400
  %5416 = xor i32 %5415, %5407
  %5417 = lshr i32 %5416, 4
  %5418 = trunc i32 %5417 to i8
  %5419 = and i8 %5418, 1
  store i8 %5419, i8* %45, align 1
  %5420 = icmp eq i32 %5407, 0
  %5421 = zext i1 %5420 to i8
  store i8 %5421, i8* %48, align 1
  %5422 = lshr i32 %5407, 31
  %5423 = trunc i32 %5422 to i8
  store i8 %5423, i8* %51, align 1
  %5424 = lshr i32 %5400, 31
  %5425 = lshr i32 %5406, 31
  %5426 = xor i32 %5425, %5424
  %5427 = xor i32 %5422, %5424
  %5428 = add nuw nsw i32 %5427, %5426
  %5429 = icmp eq i32 %5428, 2
  %5430 = zext i1 %5429 to i8
  store i8 %5430, i8* %57, align 1
  %5431 = icmp ne i8 %5423, 0
  %5432 = xor i1 %5431, %5429
  %.demorgan451 = or i1 %5420, %5432
  %.v511 = select i1 %.demorgan451, i64 9, i64 346
  %5433 = add i64 %5403, %.v511
  store i64 %5433, i64* %3, align 8
  br i1 %.demorgan451, label %block_4212e9, label %block_.L_42143a

block_4212e9:                                     ; preds = %routine_idivl__esi.exit4582
  %5434 = add i64 %5401, -100
  %5435 = add i64 %5433, 3
  store i64 %5435, i64* %3, align 8
  %5436 = inttoptr i64 %5434 to i32*
  %5437 = load i32, i32* %5436, align 4
  %5438 = zext i32 %5437 to i64
  store i64 %5438, i64* %RAX.i3587.phi.trans.insert, align 8
  %5439 = add i64 %5401, -164
  %5440 = add i64 %5433, 9
  store i64 %5440, i64* %3, align 8
  %5441 = inttoptr i64 %5439 to i32*
  %5442 = load i32, i32* %5441, align 4
  %5443 = sub i32 %5437, %5442
  %5444 = zext i32 %5443 to i64
  store i64 %5444, i64* %RAX.i3587.phi.trans.insert, align 8
  %5445 = icmp ult i32 %5437, %5442
  %5446 = zext i1 %5445 to i8
  store i8 %5446, i8* %32, align 1
  %5447 = and i32 %5443, 255
  %5448 = tail call i32 @llvm.ctpop.i32(i32 %5447)
  %5449 = trunc i32 %5448 to i8
  %5450 = and i8 %5449, 1
  %5451 = xor i8 %5450, 1
  store i8 %5451, i8* %39, align 1
  %5452 = xor i32 %5442, %5437
  %5453 = xor i32 %5452, %5443
  %5454 = lshr i32 %5453, 4
  %5455 = trunc i32 %5454 to i8
  %5456 = and i8 %5455, 1
  store i8 %5456, i8* %45, align 1
  %5457 = icmp eq i32 %5443, 0
  %5458 = zext i1 %5457 to i8
  store i8 %5458, i8* %48, align 1
  %5459 = lshr i32 %5443, 31
  %5460 = trunc i32 %5459 to i8
  store i8 %5460, i8* %51, align 1
  %5461 = lshr i32 %5437, 31
  %5462 = lshr i32 %5442, 31
  %5463 = xor i32 %5462, %5461
  %5464 = xor i32 %5459, %5461
  %5465 = add nuw nsw i32 %5464, %5463
  %5466 = icmp eq i32 %5465, 2
  %5467 = zext i1 %5466 to i8
  store i8 %5467, i8* %57, align 1
  store i64 %5444, i64* %RDI.i1133, align 8
  %5468 = add i64 %5433, -131817
  %5469 = add i64 %5433, 16
  %5470 = load i64, i64* %6, align 8
  %5471 = add i64 %5470, -8
  %5472 = inttoptr i64 %5471 to i64*
  store i64 %5469, i64* %5472, align 8
  store i64 %5471, i64* %6, align 8
  store i64 %5468, i64* %3, align 8
  %5473 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %5399)
  %5474 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %5475 = load i64, i64* %RBP.i, align 8
  %5476 = add i64 %5475, -76
  %5477 = load i64, i64* %3, align 8
  %5478 = add i64 %5477, 3
  store i64 %5478, i64* %3, align 8
  %5479 = inttoptr i64 %5476 to i32*
  %5480 = load i32, i32* %5479, align 4
  %5481 = sub i32 %5474, %5480
  %5482 = icmp ult i32 %5474, %5480
  %5483 = zext i1 %5482 to i8
  store i8 %5483, i8* %32, align 1
  %5484 = and i32 %5481, 255
  %5485 = tail call i32 @llvm.ctpop.i32(i32 %5484)
  %5486 = trunc i32 %5485 to i8
  %5487 = and i8 %5486, 1
  %5488 = xor i8 %5487, 1
  store i8 %5488, i8* %39, align 1
  %5489 = xor i32 %5480, %5474
  %5490 = xor i32 %5489, %5481
  %5491 = lshr i32 %5490, 4
  %5492 = trunc i32 %5491 to i8
  %5493 = and i8 %5492, 1
  store i8 %5493, i8* %45, align 1
  %5494 = icmp eq i32 %5481, 0
  %5495 = zext i1 %5494 to i8
  store i8 %5495, i8* %48, align 1
  %5496 = lshr i32 %5481, 31
  %5497 = trunc i32 %5496 to i8
  store i8 %5497, i8* %51, align 1
  %5498 = lshr i32 %5474, 31
  %5499 = lshr i32 %5480, 31
  %5500 = xor i32 %5499, %5498
  %5501 = xor i32 %5496, %5498
  %5502 = add nuw nsw i32 %5501, %5500
  %5503 = icmp eq i32 %5502, 2
  %5504 = zext i1 %5503 to i8
  store i8 %5504, i8* %57, align 1
  %5505 = icmp ne i8 %5497, 0
  %5506 = xor i1 %5505, %5503
  %.demorgan452 = or i1 %5494, %5506
  %.v609 = select i1 %.demorgan452, i64 9, i64 321
  %5507 = add i64 %5477, %.v609
  store i64 %5507, i64* %3, align 8
  br i1 %.demorgan452, label %block_421302, label %block_.L_42143a

block_421302:                                     ; preds = %block_4212e9
  %5508 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %5508, i64* %RAX.i3587.phi.trans.insert, align 8
  %5509 = add i64 %5475, -100
  %5510 = add i64 %5507, 11
  store i64 %5510, i64* %3, align 8
  %5511 = inttoptr i64 %5509 to i32*
  %5512 = load i32, i32* %5511, align 4
  %5513 = zext i32 %5512 to i64
  store i64 %5513, i64* %RCX.i4260.pre-phi, align 8
  %5514 = add i64 %5475, -164
  %5515 = add i64 %5507, 17
  store i64 %5515, i64* %3, align 8
  %5516 = inttoptr i64 %5514 to i32*
  %5517 = load i32, i32* %5516, align 4
  %5518 = sub i32 %5512, %5517
  %5519 = zext i32 %5518 to i64
  store i64 %5519, i64* %RCX.i4260.pre-phi, align 8
  %5520 = icmp ult i32 %5512, %5517
  %5521 = zext i1 %5520 to i8
  store i8 %5521, i8* %32, align 1
  %5522 = and i32 %5518, 255
  %5523 = tail call i32 @llvm.ctpop.i32(i32 %5522)
  %5524 = trunc i32 %5523 to i8
  %5525 = and i8 %5524, 1
  %5526 = xor i8 %5525, 1
  store i8 %5526, i8* %39, align 1
  %5527 = xor i32 %5517, %5512
  %5528 = xor i32 %5527, %5518
  %5529 = lshr i32 %5528, 4
  %5530 = trunc i32 %5529 to i8
  %5531 = and i8 %5530, 1
  store i8 %5531, i8* %45, align 1
  %5532 = icmp eq i32 %5518, 0
  %5533 = zext i1 %5532 to i8
  store i8 %5533, i8* %48, align 1
  %5534 = lshr i32 %5518, 31
  %5535 = trunc i32 %5534 to i8
  store i8 %5535, i8* %51, align 1
  %5536 = lshr i32 %5512, 31
  %5537 = lshr i32 %5517, 31
  %5538 = xor i32 %5537, %5536
  %5539 = xor i32 %5534, %5536
  %5540 = add nuw nsw i32 %5539, %5538
  %5541 = icmp eq i32 %5540, 2
  %5542 = zext i1 %5541 to i8
  store i8 %5542, i8* %57, align 1
  %5543 = add i64 %5507, 20
  store i64 %5543, i64* %3, align 8
  %5544 = load i32, i32* %5479, align 4
  %5545 = add i32 %5544, %5518
  %5546 = zext i32 %5545 to i64
  store i64 %5546, i64* %RCX.i4260.pre-phi, align 8
  %5547 = icmp ult i32 %5545, %5518
  %5548 = icmp ult i32 %5545, %5544
  %5549 = or i1 %5547, %5548
  %5550 = zext i1 %5549 to i8
  store i8 %5550, i8* %32, align 1
  %5551 = and i32 %5545, 255
  %5552 = tail call i32 @llvm.ctpop.i32(i32 %5551)
  %5553 = trunc i32 %5552 to i8
  %5554 = and i8 %5553, 1
  %5555 = xor i8 %5554, 1
  store i8 %5555, i8* %39, align 1
  %5556 = xor i32 %5544, %5518
  %5557 = xor i32 %5556, %5545
  %5558 = lshr i32 %5557, 4
  %5559 = trunc i32 %5558 to i8
  %5560 = and i8 %5559, 1
  store i8 %5560, i8* %45, align 1
  %5561 = icmp eq i32 %5545, 0
  %5562 = zext i1 %5561 to i8
  store i8 %5562, i8* %48, align 1
  %5563 = lshr i32 %5545, 31
  %5564 = trunc i32 %5563 to i8
  store i8 %5564, i8* %51, align 1
  %5565 = lshr i32 %5544, 31
  %5566 = xor i32 %5563, %5534
  %5567 = xor i32 %5563, %5565
  %5568 = add nuw nsw i32 %5566, %5567
  %5569 = icmp eq i32 %5568, 2
  %5570 = zext i1 %5569 to i8
  store i8 %5570, i8* %57, align 1
  %5571 = sext i32 %5545 to i64
  store i64 %5571, i64* %RDX.i4317.pre-phi, align 8
  %5572 = shl nsw i64 %5571, 3
  %5573 = add i64 %5508, %5572
  %5574 = add i64 %5507, 27
  store i64 %5574, i64* %3, align 8
  %5575 = inttoptr i64 %5573 to i64*
  %5576 = load i64, i64* %5575, align 8
  store i64 %5576, i64* %RAX.i3587.phi.trans.insert, align 8
  %5577 = add i64 %5475, -96
  %5578 = add i64 %5507, 30
  store i64 %5578, i64* %3, align 8
  %5579 = inttoptr i64 %5577 to i32*
  %5580 = load i32, i32* %5579, align 4
  %5581 = zext i32 %5580 to i64
  store i64 %5581, i64* %RCX.i4260.pre-phi, align 8
  %5582 = load i64, i64* %RBP.i, align 8
  %5583 = add i64 %5582, -160
  %5584 = add i64 %5507, 36
  store i64 %5584, i64* %3, align 8
  %5585 = inttoptr i64 %5583 to i32*
  %5586 = load i32, i32* %5585, align 4
  %5587 = sub i32 %5580, %5586
  %5588 = zext i32 %5587 to i64
  store i64 %5588, i64* %RCX.i4260.pre-phi, align 8
  %5589 = icmp ult i32 %5580, %5586
  %5590 = zext i1 %5589 to i8
  store i8 %5590, i8* %32, align 1
  %5591 = and i32 %5587, 255
  %5592 = tail call i32 @llvm.ctpop.i32(i32 %5591)
  %5593 = trunc i32 %5592 to i8
  %5594 = and i8 %5593, 1
  %5595 = xor i8 %5594, 1
  store i8 %5595, i8* %39, align 1
  %5596 = xor i32 %5586, %5580
  %5597 = xor i32 %5596, %5587
  %5598 = lshr i32 %5597, 4
  %5599 = trunc i32 %5598 to i8
  %5600 = and i8 %5599, 1
  store i8 %5600, i8* %45, align 1
  %5601 = icmp eq i32 %5587, 0
  %5602 = zext i1 %5601 to i8
  store i8 %5602, i8* %48, align 1
  %5603 = lshr i32 %5587, 31
  %5604 = trunc i32 %5603 to i8
  store i8 %5604, i8* %51, align 1
  %5605 = lshr i32 %5580, 31
  %5606 = lshr i32 %5586, 31
  %5607 = xor i32 %5606, %5605
  %5608 = xor i32 %5603, %5605
  %5609 = add nuw nsw i32 %5608, %5607
  %5610 = icmp eq i32 %5609, 2
  %5611 = zext i1 %5610 to i8
  store i8 %5611, i8* %57, align 1
  %5612 = add i64 %5582, -76
  %5613 = add i64 %5507, 39
  store i64 %5613, i64* %3, align 8
  %5614 = inttoptr i64 %5612 to i32*
  %5615 = load i32, i32* %5614, align 4
  %5616 = add i32 %5615, %5587
  %5617 = zext i32 %5616 to i64
  store i64 %5617, i64* %RCX.i4260.pre-phi, align 8
  %5618 = icmp ult i32 %5616, %5587
  %5619 = icmp ult i32 %5616, %5615
  %5620 = or i1 %5618, %5619
  %5621 = zext i1 %5620 to i8
  store i8 %5621, i8* %32, align 1
  %5622 = and i32 %5616, 255
  %5623 = tail call i32 @llvm.ctpop.i32(i32 %5622)
  %5624 = trunc i32 %5623 to i8
  %5625 = and i8 %5624, 1
  %5626 = xor i8 %5625, 1
  store i8 %5626, i8* %39, align 1
  %5627 = xor i32 %5615, %5587
  %5628 = xor i32 %5627, %5616
  %5629 = lshr i32 %5628, 4
  %5630 = trunc i32 %5629 to i8
  %5631 = and i8 %5630, 1
  store i8 %5631, i8* %45, align 1
  %5632 = icmp eq i32 %5616, 0
  %5633 = zext i1 %5632 to i8
  store i8 %5633, i8* %48, align 1
  %5634 = lshr i32 %5616, 31
  %5635 = trunc i32 %5634 to i8
  store i8 %5635, i8* %51, align 1
  %5636 = lshr i32 %5615, 31
  %5637 = xor i32 %5634, %5603
  %5638 = xor i32 %5634, %5636
  %5639 = add nuw nsw i32 %5637, %5638
  %5640 = icmp eq i32 %5639, 2
  %5641 = zext i1 %5640 to i8
  store i8 %5641, i8* %57, align 1
  %5642 = sext i32 %5616 to i64
  store i64 %5642, i64* %RDX.i4317.pre-phi, align 8
  %5643 = shl nsw i64 %5642, 2
  %5644 = add i64 %5576, %5643
  %5645 = add i64 %5507, 46
  store i64 %5645, i64* %3, align 8
  %5646 = inttoptr i64 %5644 to i32*
  %5647 = load i32, i32* %5646, align 4
  store i8 0, i8* %32, align 1
  %5648 = and i32 %5647, 255
  %5649 = tail call i32 @llvm.ctpop.i32(i32 %5648)
  %5650 = trunc i32 %5649 to i8
  %5651 = and i8 %5650, 1
  %5652 = xor i8 %5651, 1
  store i8 %5652, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5653 = icmp eq i32 %5647, 0
  %5654 = zext i1 %5653 to i8
  store i8 %5654, i8* %48, align 1
  %5655 = lshr i32 %5647, 31
  %5656 = trunc i32 %5655 to i8
  store i8 %5656, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v610 = select i1 %5653, i64 52, i64 307
  %5657 = add i64 %5507, %.v610
  store i64 %5657, i64* %3, align 8
  br i1 %5653, label %block_421336, label %block_.L_421435

block_421336:                                     ; preds = %block_421302
  %5658 = load i64, i64* %RBP.i, align 8
  %5659 = add i64 %5658, -132
  %5660 = add i64 %5657, 6
  store i64 %5660, i64* %3, align 8
  %5661 = inttoptr i64 %5659 to i32*
  %5662 = load i32, i32* %5661, align 4
  %5663 = zext i32 %5662 to i64
  store i64 %5663, i64* %RAX.i3587.phi.trans.insert, align 8
  %5664 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %5664, i64* %RCX.i4260.pre-phi, align 8
  %5665 = add i64 %5658, -96
  %5666 = add i64 %5657, 17
  store i64 %5666, i64* %3, align 8
  %5667 = inttoptr i64 %5665 to i32*
  %5668 = load i32, i32* %5667, align 4
  %5669 = zext i32 %5668 to i64
  store i64 %5669, i64* %RDX.i4317.pre-phi, align 8
  %5670 = add i64 %5658, -136
  %5671 = add i64 %5657, 23
  store i64 %5671, i64* %3, align 8
  %5672 = inttoptr i64 %5670 to i32*
  %5673 = load i32, i32* %5672, align 4
  %5674 = zext i32 %5673 to i64
  store i64 %5674, i64* %RSI.i739, align 8
  %5675 = add i64 %5658, -280
  %5676 = add i64 %5657, 30
  store i64 %5676, i64* %3, align 8
  %5677 = inttoptr i64 %5675 to i64*
  store i64 %5664, i64* %5677, align 8
  %5678 = load i32, i32* %ESI.i1656, align 4
  %5679 = zext i32 %5678 to i64
  %5680 = load i64, i64* %3, align 8
  store i64 %5679, i64* %RCX.i4260.pre-phi, align 8
  %5681 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %5682 = add i64 %5680, 4
  store i64 %5682, i64* %3, align 8
  %5683 = trunc i32 %5678 to i5
  switch i5 %5683, label %5690 [
    i5 0, label %routine_shll__cl___edx.exit4487
    i5 1, label %5684
  ]

; <label>:5684:                                   ; preds = %block_421336
  %5685 = trunc i64 %5681 to i32
  %5686 = shl i32 %5685, 1
  %5687 = icmp slt i32 %5685, 0
  %5688 = icmp slt i32 %5686, 0
  %5689 = xor i1 %5687, %5688
  br label %5700

; <label>:5690:                                   ; preds = %block_421336
  %5691 = and i32 %5678, 31
  %5692 = zext i32 %5691 to i64
  %5693 = add nuw nsw i64 %5692, 4294967295
  %5694 = and i64 %5681, 4294967295
  %5695 = and i64 %5693, 4294967295
  %5696 = shl i64 %5694, %5695
  %5697 = trunc i64 %5696 to i32
  %5698 = icmp slt i32 %5697, 0
  %5699 = shl i32 %5697, 1
  br label %5700

; <label>:5700:                                   ; preds = %5690, %5684
  %5701 = phi i1 [ %5687, %5684 ], [ %5698, %5690 ]
  %5702 = phi i1 [ %5689, %5684 ], [ false, %5690 ]
  %5703 = phi i32 [ %5686, %5684 ], [ %5699, %5690 ]
  %5704 = zext i32 %5703 to i64
  store i64 %5704, i64* %RDX.i4317.pre-phi, align 8
  %5705 = zext i1 %5701 to i8
  store i8 %5705, i8* %32, align 1
  %5706 = and i32 %5703, 254
  %5707 = tail call i32 @llvm.ctpop.i32(i32 %5706)
  %5708 = trunc i32 %5707 to i8
  %5709 = and i8 %5708, 1
  %5710 = xor i8 %5709, 1
  store i8 %5710, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5711 = icmp eq i32 %5703, 0
  %5712 = zext i1 %5711 to i8
  store i8 %5712, i8* %48, align 1
  %5713 = lshr i32 %5703, 31
  %5714 = trunc i32 %5713 to i8
  store i8 %5714, i8* %51, align 1
  %5715 = zext i1 %5702 to i8
  store i8 %5715, i8* %57, align 1
  br label %routine_shll__cl___edx.exit4487

routine_shll__cl___edx.exit4487:                  ; preds = %5700, %block_421336
  %5716 = phi i64 [ %5704, %5700 ], [ %5681, %block_421336 ]
  %5717 = load i64, i64* %RBP.i, align 8
  %5718 = add i64 %5717, -152
  %5719 = add i64 %5680, 10
  store i64 %5719, i64* %3, align 8
  %5720 = trunc i64 %5716 to i32
  %5721 = inttoptr i64 %5718 to i32*
  %5722 = load i32, i32* %5721, align 4
  %5723 = sub i32 %5720, %5722
  %5724 = zext i32 %5723 to i64
  store i64 %5724, i64* %RDX.i4317.pre-phi, align 8
  %5725 = icmp ult i32 %5720, %5722
  %5726 = zext i1 %5725 to i8
  store i8 %5726, i8* %32, align 1
  %5727 = and i32 %5723, 255
  %5728 = tail call i32 @llvm.ctpop.i32(i32 %5727)
  %5729 = trunc i32 %5728 to i8
  %5730 = and i8 %5729, 1
  %5731 = xor i8 %5730, 1
  store i8 %5731, i8* %39, align 1
  %5732 = xor i32 %5722, %5720
  %5733 = xor i32 %5732, %5723
  %5734 = lshr i32 %5733, 4
  %5735 = trunc i32 %5734 to i8
  %5736 = and i8 %5735, 1
  store i8 %5736, i8* %45, align 1
  %5737 = icmp eq i32 %5723, 0
  %5738 = zext i1 %5737 to i8
  store i8 %5738, i8* %48, align 1
  %5739 = lshr i32 %5723, 31
  %5740 = trunc i32 %5739 to i8
  store i8 %5740, i8* %51, align 1
  %5741 = lshr i32 %5720, 31
  %5742 = lshr i32 %5722, 31
  %5743 = xor i32 %5742, %5741
  %5744 = xor i32 %5739, %5741
  %5745 = add nuw nsw i32 %5744, %5743
  %5746 = icmp eq i32 %5745, 2
  %5747 = zext i1 %5746 to i8
  store i8 %5747, i8* %57, align 1
  %5748 = sext i32 %5723 to i64
  store i64 %5748, i64* %RDI.i1133, align 8
  %5749 = add i64 %5717, -280
  %5750 = add i64 %5680, 20
  store i64 %5750, i64* %3, align 8
  %5751 = inttoptr i64 %5749 to i64*
  %5752 = load i64, i64* %5751, align 8
  store i64 %5752, i64* %R8.i5602, align 8
  %5753 = shl nsw i64 %5748, 2
  %5754 = add i64 %5753, %5752
  %5755 = add i64 %5680, 24
  store i64 %5755, i64* %3, align 8
  %5756 = inttoptr i64 %5754 to i32*
  %5757 = load i32, i32* %5756, align 4
  %5758 = zext i32 %5757 to i64
  store i64 %5758, i64* %RDX.i4317.pre-phi, align 8
  %5759 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %5759, i64* %RDI.i1133, align 8
  %5760 = add i64 %5717, -100
  %5761 = add i64 %5680, 35
  store i64 %5761, i64* %3, align 8
  %5762 = inttoptr i64 %5760 to i32*
  %5763 = load i32, i32* %5762, align 4
  %5764 = zext i32 %5763 to i64
  store i64 %5764, i64* %RSI.i739, align 8
  %5765 = add i64 %5717, -136
  %5766 = add i64 %5680, 41
  store i64 %5766, i64* %3, align 8
  %5767 = inttoptr i64 %5765 to i32*
  %5768 = load i32, i32* %5767, align 4
  %5769 = zext i32 %5768 to i64
  store i64 %5769, i64* %RCX.i4260.pre-phi, align 8
  %5770 = add i64 %5680, 43
  store i64 %5770, i64* %3, align 8
  %5771 = trunc i32 %5768 to i5
  switch i5 %5771, label %5777 [
    i5 0, label %routine_shll__cl___esi.exit4462
    i5 1, label %5772
  ]

; <label>:5772:                                   ; preds = %routine_shll__cl___edx.exit4487
  %5773 = shl i32 %5763, 1
  %5774 = icmp slt i32 %5763, 0
  %5775 = icmp slt i32 %5773, 0
  %5776 = xor i1 %5774, %5775
  br label %5786

; <label>:5777:                                   ; preds = %routine_shll__cl___edx.exit4487
  %5778 = and i32 %5768, 31
  %5779 = zext i32 %5778 to i64
  %5780 = add nuw nsw i64 %5779, 4294967295
  %5781 = and i64 %5780, 4294967295
  %5782 = shl i64 %5764, %5781
  %5783 = trunc i64 %5782 to i32
  %5784 = icmp slt i32 %5783, 0
  %5785 = shl i32 %5783, 1
  br label %5786

; <label>:5786:                                   ; preds = %5777, %5772
  %5787 = phi i1 [ %5774, %5772 ], [ %5784, %5777 ]
  %5788 = phi i1 [ %5776, %5772 ], [ false, %5777 ]
  %5789 = phi i32 [ %5773, %5772 ], [ %5785, %5777 ]
  %5790 = zext i32 %5789 to i64
  store i64 %5790, i64* %RSI.i739, align 8
  %5791 = zext i1 %5787 to i8
  store i8 %5791, i8* %32, align 1
  %5792 = and i32 %5789, 254
  %5793 = tail call i32 @llvm.ctpop.i32(i32 %5792)
  %5794 = trunc i32 %5793 to i8
  %5795 = and i8 %5794, 1
  %5796 = xor i8 %5795, 1
  store i8 %5796, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5797 = icmp eq i32 %5789, 0
  %5798 = zext i1 %5797 to i8
  store i8 %5798, i8* %48, align 1
  %5799 = lshr i32 %5789, 31
  %5800 = trunc i32 %5799 to i8
  store i8 %5800, i8* %51, align 1
  %5801 = zext i1 %5788 to i8
  store i8 %5801, i8* %57, align 1
  br label %routine_shll__cl___esi.exit4462

routine_shll__cl___esi.exit4462:                  ; preds = %5786, %routine_shll__cl___edx.exit4487
  %5802 = phi i32 [ %5789, %5786 ], [ %5763, %routine_shll__cl___edx.exit4487 ]
  %5803 = add i64 %5717, -156
  %5804 = add i64 %5680, 49
  store i64 %5804, i64* %3, align 8
  %5805 = inttoptr i64 %5803 to i32*
  %5806 = load i32, i32* %5805, align 4
  %5807 = sub i32 %5802, %5806
  %5808 = zext i32 %5807 to i64
  store i64 %5808, i64* %RSI.i739, align 8
  %5809 = icmp ult i32 %5802, %5806
  %5810 = zext i1 %5809 to i8
  store i8 %5810, i8* %32, align 1
  %5811 = and i32 %5807, 255
  %5812 = tail call i32 @llvm.ctpop.i32(i32 %5811)
  %5813 = trunc i32 %5812 to i8
  %5814 = and i8 %5813, 1
  %5815 = xor i8 %5814, 1
  store i8 %5815, i8* %39, align 1
  %5816 = xor i32 %5806, %5802
  %5817 = xor i32 %5816, %5807
  %5818 = lshr i32 %5817, 4
  %5819 = trunc i32 %5818 to i8
  %5820 = and i8 %5819, 1
  store i8 %5820, i8* %45, align 1
  %5821 = icmp eq i32 %5807, 0
  %5822 = zext i1 %5821 to i8
  store i8 %5822, i8* %48, align 1
  %5823 = lshr i32 %5807, 31
  %5824 = trunc i32 %5823 to i8
  store i8 %5824, i8* %51, align 1
  %5825 = lshr i32 %5802, 31
  %5826 = lshr i32 %5806, 31
  %5827 = xor i32 %5826, %5825
  %5828 = xor i32 %5823, %5825
  %5829 = add nuw nsw i32 %5828, %5827
  %5830 = icmp eq i32 %5829, 2
  %5831 = zext i1 %5830 to i8
  store i8 %5831, i8* %57, align 1
  %5832 = sext i32 %5807 to i64
  store i64 %5832, i64* %R9.i5580, align 8
  %5833 = shl nsw i64 %5832, 2
  %5834 = add i64 %5759, %5833
  %5835 = add i64 %5680, 56
  store i64 %5835, i64* %3, align 8
  %5836 = inttoptr i64 %5834 to i32*
  %5837 = load i32, i32* %5836, align 4
  %5838 = add i32 %5837, %5757
  %5839 = zext i32 %5838 to i64
  store i64 %5839, i64* %RDX.i4317.pre-phi, align 8
  %5840 = icmp ult i32 %5838, %5757
  %5841 = icmp ult i32 %5838, %5837
  %5842 = or i1 %5840, %5841
  %5843 = zext i1 %5842 to i8
  store i8 %5843, i8* %32, align 1
  %5844 = and i32 %5838, 255
  %5845 = tail call i32 @llvm.ctpop.i32(i32 %5844)
  %5846 = trunc i32 %5845 to i8
  %5847 = and i8 %5846, 1
  %5848 = xor i8 %5847, 1
  store i8 %5848, i8* %39, align 1
  %5849 = xor i32 %5837, %5757
  %5850 = xor i32 %5849, %5838
  %5851 = lshr i32 %5850, 4
  %5852 = trunc i32 %5851 to i8
  %5853 = and i8 %5852, 1
  store i8 %5853, i8* %45, align 1
  %5854 = icmp eq i32 %5838, 0
  %5855 = zext i1 %5854 to i8
  store i8 %5855, i8* %48, align 1
  %5856 = lshr i32 %5838, 31
  %5857 = trunc i32 %5856 to i8
  store i8 %5857, i8* %51, align 1
  %5858 = lshr i32 %5757, 31
  %5859 = lshr i32 %5837, 31
  %5860 = xor i32 %5856, %5858
  %5861 = xor i32 %5856, %5859
  %5862 = add nuw nsw i32 %5860, %5861
  %5863 = icmp eq i32 %5862, 2
  %5864 = zext i1 %5863 to i8
  store i8 %5864, i8* %57, align 1
  %5865 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %5866 = shl i64 %5865, 32
  %5867 = ashr exact i64 %5866, 32
  %5868 = sext i32 %5838 to i64
  %5869 = mul nsw i64 %5868, %5867
  %5870 = shl i64 %5869, 32
  %5871 = ashr i64 %5870, 47
  %5872 = lshr i64 %5871, 1
  %5873 = trunc i64 %5871 to i8
  %5874 = and i8 %5873, 1
  %5875 = trunc i64 %5872 to i32
  %5876 = and i64 %5872, 4294967295
  store i64 %5876, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %5874, i8* %32, align 1
  %5877 = and i32 %5875, 255
  %5878 = tail call i32 @llvm.ctpop.i32(i32 %5877)
  %5879 = trunc i32 %5878 to i8
  %5880 = and i8 %5879, 1
  %5881 = xor i8 %5880, 1
  store i8 %5881, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %5882 = icmp eq i32 %5875, 0
  %5883 = zext i1 %5882 to i8
  store i8 %5883, i8* %48, align 1
  %5884 = lshr i64 %5871, 32
  %5885 = trunc i64 %5884 to i8
  %5886 = and i8 %5885, 1
  store i8 %5886, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %5887 = load i64, i64* %RBP.i, align 8
  %5888 = add i64 %5887, -104
  %5889 = trunc i64 %5872 to i32
  %5890 = add i64 %5680, 65
  store i64 %5890, i64* %3, align 8
  %5891 = inttoptr i64 %5888 to i32*
  store i32 %5889, i32* %5891, align 4
  %5892 = load i64, i64* %RBP.i, align 8
  %5893 = add i64 %5892, -128
  %5894 = load i64, i64* %3, align 8
  %5895 = add i64 %5894, 4
  store i64 %5895, i64* %3, align 8
  %5896 = inttoptr i64 %5893 to i64*
  %5897 = load i64, i64* %5896, align 8
  store i64 %5897, i64* %RDI.i1133, align 8
  %5898 = add i64 %5892, -32
  %5899 = add i64 %5894, 8
  store i64 %5899, i64* %3, align 8
  %5900 = inttoptr i64 %5898 to i64*
  %5901 = load i64, i64* %5900, align 8
  store i64 %5901, i64* %RSI.i739, align 8
  %5902 = add i64 %5892, -112
  %5903 = add i64 %5894, 12
  store i64 %5903, i64* %3, align 8
  %5904 = inttoptr i64 %5902 to i64*
  %5905 = load i64, i64* %5904, align 8
  store i64 %5905, i64* %RDX.i4317.pre-phi, align 8
  %5906 = add i64 %5892, -140
  %5907 = add i64 %5894, 18
  store i64 %5907, i64* %3, align 8
  %5908 = inttoptr i64 %5906 to i32*
  %5909 = load i32, i32* %5908, align 4
  %5910 = zext i32 %5909 to i64
  store i64 %5910, i64* %RCX.i4260.pre-phi, align 8
  %5911 = add i64 %5892, -144
  %5912 = add i64 %5894, 25
  store i64 %5912, i64* %3, align 8
  %5913 = inttoptr i64 %5911 to i32*
  %5914 = load i32, i32* %5913, align 4
  %5915 = zext i32 %5914 to i64
  store i64 %5915, i64* %R8.i5602, align 8
  %5916 = add i64 %5892, -148
  %5917 = add i64 %5894, 32
  store i64 %5917, i64* %3, align 8
  %5918 = inttoptr i64 %5916 to i32*
  %5919 = load i32, i32* %5918, align 4
  %5920 = zext i32 %5919 to i64
  store i64 %5920, i64* %R9.i5580, align 8
  %5921 = add i64 %5892, -104
  %5922 = add i64 %5894, 35
  store i64 %5922, i64* %3, align 8
  %5923 = inttoptr i64 %5921 to i32*
  %5924 = load i32, i32* %5923, align 4
  %5925 = zext i32 %5924 to i64
  store i64 %5925, i64* %RAX.i3587.phi.trans.insert, align 8
  %5926 = add i64 %5892, -80
  %5927 = add i64 %5894, 39
  store i64 %5927, i64* %3, align 8
  %5928 = inttoptr i64 %5926 to i32*
  %5929 = load i32, i32* %5928, align 4
  %5930 = zext i32 %5929 to i64
  store i64 %5930, i64* %68, align 8
  %5931 = add i64 %5892, -96
  %5932 = add i64 %5894, 43
  store i64 %5932, i64* %3, align 8
  %5933 = inttoptr i64 %5931 to i32*
  %5934 = load i32, i32* %5933, align 4
  %5935 = zext i32 %5934 to i64
  store i64 %5935, i64* %R11.i, align 8
  %5936 = add i64 %5892, -100
  %5937 = add i64 %5894, 46
  store i64 %5937, i64* %3, align 8
  %5938 = inttoptr i64 %5936 to i32*
  %5939 = load i32, i32* %5938, align 4
  %5940 = zext i32 %5939 to i64
  store i64 %5940, i64* %RBX.i615, align 8
  %5941 = load i32*, i32** %2119, align 8
  %5942 = add i64 %5894, 49
  store i64 %5942, i64* %3, align 8
  store i32 %5924, i32* %5941, align 4
  %5943 = load i64, i64* %6, align 8
  %5944 = add i64 %5943, 8
  %5945 = load i32, i32* %R10D.i761, align 4
  %5946 = load i64, i64* %3, align 8
  %5947 = add i64 %5946, 5
  store i64 %5947, i64* %3, align 8
  %5948 = inttoptr i64 %5944 to i32*
  store i32 %5945, i32* %5948, align 4
  %5949 = load i64, i64* %6, align 8
  %5950 = add i64 %5949, 16
  %5951 = load i32, i32* %R11D.i5540, align 4
  %5952 = load i64, i64* %3, align 8
  %5953 = add i64 %5952, 5
  store i64 %5953, i64* %3, align 8
  %5954 = inttoptr i64 %5950 to i32*
  store i32 %5951, i32* %5954, align 4
  %5955 = load i64, i64* %6, align 8
  %5956 = add i64 %5955, 24
  %5957 = load i32, i32* %EBX.i5525, align 4
  %5958 = load i64, i64* %3, align 8
  %5959 = add i64 %5958, 4
  store i64 %5959, i64* %3, align 8
  %5960 = inttoptr i64 %5956 to i32*
  store i32 %5957, i32* %5960, align 4
  %5961 = load i64, i64* %3, align 8
  %5962 = add i64 %5961, -3876
  %5963 = add i64 %5961, 5
  %5964 = load i64, i64* %6, align 8
  %5965 = add i64 %5964, -8
  %5966 = inttoptr i64 %5965 to i64*
  store i64 %5963, i64* %5966, align 8
  store i64 %5965, i64* %6, align 8
  store i64 %5962, i64* %3, align 8
  %call2_4213d4 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %5962, %struct.Memory* %5473)
  %5967 = load i64, i64* %RBP.i, align 8
  %5968 = add i64 %5967, -104
  %5969 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %5970 = load i64, i64* %3, align 8
  %5971 = add i64 %5970, 3
  store i64 %5971, i64* %3, align 8
  %5972 = inttoptr i64 %5968 to i32*
  store i32 %5969, i32* %5972, align 4
  %5973 = load i64, i64* %RBP.i, align 8
  %5974 = add i64 %5973, -104
  %5975 = load i64, i64* %3, align 8
  %5976 = add i64 %5975, 3
  store i64 %5976, i64* %3, align 8
  %5977 = inttoptr i64 %5974 to i32*
  %5978 = load i32, i32* %5977, align 4
  %5979 = zext i32 %5978 to i64
  store i64 %5979, i64* %RAX.i3587.phi.trans.insert, align 8
  %5980 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %5980, i64* %RDX.i4317.pre-phi, align 8
  %5981 = add i64 %5973, -100
  %5982 = add i64 %5975, 14
  store i64 %5982, i64* %3, align 8
  %5983 = inttoptr i64 %5981 to i32*
  %5984 = load i32, i32* %5983, align 4
  %5985 = zext i32 %5984 to i64
  store i64 %5985, i64* %RCX.i4260.pre-phi, align 8
  %5986 = add i64 %5973, -164
  %5987 = add i64 %5975, 20
  store i64 %5987, i64* %3, align 8
  %5988 = inttoptr i64 %5986 to i32*
  %5989 = load i32, i32* %5988, align 4
  %5990 = sub i32 %5984, %5989
  %5991 = zext i32 %5990 to i64
  store i64 %5991, i64* %RCX.i4260.pre-phi, align 8
  %5992 = icmp ult i32 %5984, %5989
  %5993 = zext i1 %5992 to i8
  store i8 %5993, i8* %32, align 1
  %5994 = and i32 %5990, 255
  %5995 = tail call i32 @llvm.ctpop.i32(i32 %5994)
  %5996 = trunc i32 %5995 to i8
  %5997 = and i8 %5996, 1
  %5998 = xor i8 %5997, 1
  store i8 %5998, i8* %39, align 1
  %5999 = xor i32 %5989, %5984
  %6000 = xor i32 %5999, %5990
  %6001 = lshr i32 %6000, 4
  %6002 = trunc i32 %6001 to i8
  %6003 = and i8 %6002, 1
  store i8 %6003, i8* %45, align 1
  %6004 = icmp eq i32 %5990, 0
  %6005 = zext i1 %6004 to i8
  store i8 %6005, i8* %48, align 1
  %6006 = lshr i32 %5990, 31
  %6007 = trunc i32 %6006 to i8
  store i8 %6007, i8* %51, align 1
  %6008 = lshr i32 %5984, 31
  %6009 = lshr i32 %5989, 31
  %6010 = xor i32 %6009, %6008
  %6011 = xor i32 %6006, %6008
  %6012 = add nuw nsw i32 %6011, %6010
  %6013 = icmp eq i32 %6012, 2
  %6014 = zext i1 %6013 to i8
  store i8 %6014, i8* %57, align 1
  %6015 = add i64 %5973, -76
  %6016 = add i64 %5975, 23
  store i64 %6016, i64* %3, align 8
  %6017 = inttoptr i64 %6015 to i32*
  %6018 = load i32, i32* %6017, align 4
  %6019 = add i32 %6018, %5990
  %6020 = zext i32 %6019 to i64
  store i64 %6020, i64* %RCX.i4260.pre-phi, align 8
  %6021 = icmp ult i32 %6019, %5990
  %6022 = icmp ult i32 %6019, %6018
  %6023 = or i1 %6021, %6022
  %6024 = zext i1 %6023 to i8
  store i8 %6024, i8* %32, align 1
  %6025 = and i32 %6019, 255
  %6026 = tail call i32 @llvm.ctpop.i32(i32 %6025)
  %6027 = trunc i32 %6026 to i8
  %6028 = and i8 %6027, 1
  %6029 = xor i8 %6028, 1
  store i8 %6029, i8* %39, align 1
  %6030 = xor i32 %6018, %5990
  %6031 = xor i32 %6030, %6019
  %6032 = lshr i32 %6031, 4
  %6033 = trunc i32 %6032 to i8
  %6034 = and i8 %6033, 1
  store i8 %6034, i8* %45, align 1
  %6035 = icmp eq i32 %6019, 0
  %6036 = zext i1 %6035 to i8
  store i8 %6036, i8* %48, align 1
  %6037 = lshr i32 %6019, 31
  %6038 = trunc i32 %6037 to i8
  store i8 %6038, i8* %51, align 1
  %6039 = lshr i32 %6018, 31
  %6040 = xor i32 %6037, %6006
  %6041 = xor i32 %6037, %6039
  %6042 = add nuw nsw i32 %6040, %6041
  %6043 = icmp eq i32 %6042, 2
  %6044 = zext i1 %6043 to i8
  store i8 %6044, i8* %57, align 1
  %6045 = sext i32 %6019 to i64
  store i64 %6045, i64* %RSI.i739, align 8
  %6046 = shl nsw i64 %6045, 3
  %6047 = add i64 %5980, %6046
  %6048 = add i64 %5975, 30
  store i64 %6048, i64* %3, align 8
  %6049 = inttoptr i64 %6047 to i64*
  %6050 = load i64, i64* %6049, align 8
  store i64 %6050, i64* %RDX.i4317.pre-phi, align 8
  %6051 = load i64, i64* %RBP.i, align 8
  %6052 = add i64 %6051, -96
  %6053 = add i64 %5975, 33
  store i64 %6053, i64* %3, align 8
  %6054 = inttoptr i64 %6052 to i32*
  %6055 = load i32, i32* %6054, align 4
  %6056 = zext i32 %6055 to i64
  store i64 %6056, i64* %RCX.i4260.pre-phi, align 8
  %6057 = add i64 %6051, -160
  %6058 = add i64 %5975, 39
  store i64 %6058, i64* %3, align 8
  %6059 = inttoptr i64 %6057 to i32*
  %6060 = load i32, i32* %6059, align 4
  %6061 = sub i32 %6055, %6060
  %6062 = zext i32 %6061 to i64
  store i64 %6062, i64* %RCX.i4260.pre-phi, align 8
  %6063 = icmp ult i32 %6055, %6060
  %6064 = zext i1 %6063 to i8
  store i8 %6064, i8* %32, align 1
  %6065 = and i32 %6061, 255
  %6066 = tail call i32 @llvm.ctpop.i32(i32 %6065)
  %6067 = trunc i32 %6066 to i8
  %6068 = and i8 %6067, 1
  %6069 = xor i8 %6068, 1
  store i8 %6069, i8* %39, align 1
  %6070 = xor i32 %6060, %6055
  %6071 = xor i32 %6070, %6061
  %6072 = lshr i32 %6071, 4
  %6073 = trunc i32 %6072 to i8
  %6074 = and i8 %6073, 1
  store i8 %6074, i8* %45, align 1
  %6075 = icmp eq i32 %6061, 0
  %6076 = zext i1 %6075 to i8
  store i8 %6076, i8* %48, align 1
  %6077 = lshr i32 %6061, 31
  %6078 = trunc i32 %6077 to i8
  store i8 %6078, i8* %51, align 1
  %6079 = lshr i32 %6055, 31
  %6080 = lshr i32 %6060, 31
  %6081 = xor i32 %6080, %6079
  %6082 = xor i32 %6077, %6079
  %6083 = add nuw nsw i32 %6082, %6081
  %6084 = icmp eq i32 %6083, 2
  %6085 = zext i1 %6084 to i8
  store i8 %6085, i8* %57, align 1
  %6086 = add i64 %6051, -76
  %6087 = add i64 %5975, 42
  store i64 %6087, i64* %3, align 8
  %6088 = inttoptr i64 %6086 to i32*
  %6089 = load i32, i32* %6088, align 4
  %6090 = add i32 %6089, %6061
  %6091 = zext i32 %6090 to i64
  store i64 %6091, i64* %RCX.i4260.pre-phi, align 8
  %6092 = icmp ult i32 %6090, %6061
  %6093 = icmp ult i32 %6090, %6089
  %6094 = or i1 %6092, %6093
  %6095 = zext i1 %6094 to i8
  store i8 %6095, i8* %32, align 1
  %6096 = and i32 %6090, 255
  %6097 = tail call i32 @llvm.ctpop.i32(i32 %6096)
  %6098 = trunc i32 %6097 to i8
  %6099 = and i8 %6098, 1
  %6100 = xor i8 %6099, 1
  store i8 %6100, i8* %39, align 1
  %6101 = xor i32 %6089, %6061
  %6102 = xor i32 %6101, %6090
  %6103 = lshr i32 %6102, 4
  %6104 = trunc i32 %6103 to i8
  %6105 = and i8 %6104, 1
  store i8 %6105, i8* %45, align 1
  %6106 = icmp eq i32 %6090, 0
  %6107 = zext i1 %6106 to i8
  store i8 %6107, i8* %48, align 1
  %6108 = lshr i32 %6090, 31
  %6109 = trunc i32 %6108 to i8
  store i8 %6109, i8* %51, align 1
  %6110 = lshr i32 %6089, 31
  %6111 = xor i32 %6108, %6077
  %6112 = xor i32 %6108, %6110
  %6113 = add nuw nsw i32 %6111, %6112
  %6114 = icmp eq i32 %6113, 2
  %6115 = zext i1 %6114 to i8
  store i8 %6115, i8* %57, align 1
  %6116 = sext i32 %6090 to i64
  store i64 %6116, i64* %RSI.i739, align 8
  %6117 = shl nsw i64 %6116, 2
  %6118 = add i64 %6050, %6117
  %6119 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %6120 = add i64 %5975, 48
  store i64 %6120, i64* %3, align 8
  %6121 = inttoptr i64 %6118 to i32*
  store i32 %6119, i32* %6121, align 4
  %6122 = load i64, i64* %RBP.i, align 8
  %6123 = add i64 %6122, -104
  %6124 = load i64, i64* %3, align 8
  %6125 = add i64 %6124, 3
  store i64 %6125, i64* %3, align 8
  %6126 = inttoptr i64 %6123 to i32*
  %6127 = load i32, i32* %6126, align 4
  %6128 = zext i32 %6127 to i64
  store i64 %6128, i64* %RAX.i3587.phi.trans.insert, align 8
  %6129 = add i64 %6122, -80
  %6130 = add i64 %6124, 6
  store i64 %6130, i64* %3, align 8
  %6131 = inttoptr i64 %6129 to i32*
  %6132 = load i32, i32* %6131, align 4
  %6133 = sub i32 %6127, %6132
  %6134 = icmp ult i32 %6127, %6132
  %6135 = zext i1 %6134 to i8
  store i8 %6135, i8* %32, align 1
  %6136 = and i32 %6133, 255
  %6137 = tail call i32 @llvm.ctpop.i32(i32 %6136)
  %6138 = trunc i32 %6137 to i8
  %6139 = and i8 %6138, 1
  %6140 = xor i8 %6139, 1
  store i8 %6140, i8* %39, align 1
  %6141 = xor i32 %6132, %6127
  %6142 = xor i32 %6141, %6133
  %6143 = lshr i32 %6142, 4
  %6144 = trunc i32 %6143 to i8
  %6145 = and i8 %6144, 1
  store i8 %6145, i8* %45, align 1
  %6146 = icmp eq i32 %6133, 0
  %6147 = zext i1 %6146 to i8
  store i8 %6147, i8* %48, align 1
  %6148 = lshr i32 %6133, 31
  %6149 = trunc i32 %6148 to i8
  store i8 %6149, i8* %51, align 1
  %6150 = lshr i32 %6127, 31
  %6151 = lshr i32 %6132, 31
  %6152 = xor i32 %6151, %6150
  %6153 = xor i32 %6148, %6150
  %6154 = add nuw nsw i32 %6153, %6152
  %6155 = icmp eq i32 %6154, 2
  %6156 = zext i1 %6155 to i8
  store i8 %6156, i8* %57, align 1
  %6157 = icmp ne i8 %6149, 0
  %6158 = xor i1 %6157, %6155
  %.v611 = select i1 %6158, i64 12, i64 36
  %6159 = add i64 %6124, %.v611
  store i64 %6159, i64* %3, align 8
  br i1 %6158, label %block_421418, label %block_.L_421430

block_421418:                                     ; preds = %routine_shll__cl___esi.exit4462
  %6160 = add i64 %6122, -96
  %6161 = add i64 %6159, 3
  store i64 %6161, i64* %3, align 8
  %6162 = inttoptr i64 %6160 to i32*
  %6163 = load i32, i32* %6162, align 4
  %6164 = zext i32 %6163 to i64
  store i64 %6164, i64* %RAX.i3587.phi.trans.insert, align 8
  %6165 = add i64 %6122, -168
  %6166 = add i64 %6159, 9
  store i64 %6166, i64* %3, align 8
  %6167 = inttoptr i64 %6165 to i32*
  store i32 %6163, i32* %6167, align 4
  %6168 = load i64, i64* %RBP.i, align 8
  %6169 = add i64 %6168, -100
  %6170 = load i64, i64* %3, align 8
  %6171 = add i64 %6170, 3
  store i64 %6171, i64* %3, align 8
  %6172 = inttoptr i64 %6169 to i32*
  %6173 = load i32, i32* %6172, align 4
  %6174 = zext i32 %6173 to i64
  store i64 %6174, i64* %RAX.i3587.phi.trans.insert, align 8
  %6175 = add i64 %6168, -172
  %6176 = add i64 %6170, 9
  store i64 %6176, i64* %3, align 8
  %6177 = inttoptr i64 %6175 to i32*
  store i32 %6173, i32* %6177, align 4
  %6178 = load i64, i64* %RBP.i, align 8
  %6179 = add i64 %6178, -104
  %6180 = load i64, i64* %3, align 8
  %6181 = add i64 %6180, 3
  store i64 %6181, i64* %3, align 8
  %6182 = inttoptr i64 %6179 to i32*
  %6183 = load i32, i32* %6182, align 4
  %6184 = zext i32 %6183 to i64
  store i64 %6184, i64* %RAX.i3587.phi.trans.insert, align 8
  %6185 = add i64 %6178, -80
  %6186 = add i64 %6180, 6
  store i64 %6186, i64* %3, align 8
  %6187 = inttoptr i64 %6185 to i32*
  store i32 %6183, i32* %6187, align 4
  %.pre267 = load i64, i64* %3, align 8
  br label %block_.L_421430

block_.L_421430:                                  ; preds = %routine_shll__cl___esi.exit4462, %block_421418
  %6188 = phi i64 [ %6159, %routine_shll__cl___esi.exit4462 ], [ %.pre267, %block_421418 ]
  %6189 = add i64 %6188, 5
  store i64 %6189, i64* %3, align 8
  br label %block_.L_421435

block_.L_421435:                                  ; preds = %block_421302, %block_.L_421430
  %6190 = phi i64 [ %5657, %block_421302 ], [ %6189, %block_.L_421430 ]
  %MEMORY.26 = phi %struct.Memory* [ %5473, %block_421302 ], [ %call2_4213d4, %block_.L_421430 ]
  %6191 = add i64 %6190, 5
  store i64 %6191, i64* %3, align 8
  %.pre268 = load i64, i64* %RBP.i, align 8
  br label %block_.L_42143a

block_.L_42143a:                                  ; preds = %block_4212e9, %routine_idivl__esi.exit4582, %block_.L_421435
  %6192 = phi i64 [ %5433, %routine_idivl__esi.exit4582 ], [ %5507, %block_4212e9 ], [ %6191, %block_.L_421435 ]
  %6193 = phi i64 [ %5401, %routine_idivl__esi.exit4582 ], [ %5475, %block_4212e9 ], [ %.pre268, %block_.L_421435 ]
  %MEMORY.27 = phi %struct.Memory* [ %5399, %routine_idivl__esi.exit4582 ], [ %5473, %block_4212e9 ], [ %MEMORY.26, %block_.L_421435 ]
  %6194 = add i64 %6193, -80
  %6195 = add i64 %6192, 3
  store i64 %6195, i64* %3, align 8
  %6196 = inttoptr i64 %6194 to i32*
  %6197 = load i32, i32* %6196, align 4
  %6198 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %6199 = sub i32 %6197, %6198
  %6200 = zext i32 %6199 to i64
  store i64 %6200, i64* %RAX.i3587.phi.trans.insert, align 8
  %6201 = icmp ult i32 %6197, %6198
  %6202 = zext i1 %6201 to i8
  store i8 %6202, i8* %32, align 1
  %6203 = and i32 %6199, 255
  %6204 = tail call i32 @llvm.ctpop.i32(i32 %6203)
  %6205 = trunc i32 %6204 to i8
  %6206 = and i8 %6205, 1
  %6207 = xor i8 %6206, 1
  store i8 %6207, i8* %39, align 1
  %6208 = xor i32 %6198, %6197
  %6209 = xor i32 %6208, %6199
  %6210 = lshr i32 %6209, 4
  %6211 = trunc i32 %6210 to i8
  %6212 = and i8 %6211, 1
  store i8 %6212, i8* %45, align 1
  %6213 = icmp eq i32 %6199, 0
  %6214 = zext i1 %6213 to i8
  store i8 %6214, i8* %48, align 1
  %6215 = lshr i32 %6199, 31
  %6216 = trunc i32 %6215 to i8
  store i8 %6216, i8* %51, align 1
  %6217 = lshr i32 %6197, 31
  %6218 = lshr i32 %6198, 31
  %6219 = xor i32 %6218, %6217
  %6220 = xor i32 %6215, %6217
  %6221 = add nuw nsw i32 %6220, %6219
  %6222 = icmp eq i32 %6221, 2
  %6223 = zext i1 %6222 to i8
  store i8 %6223, i8* %57, align 1
  %6224 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %6225 = load <2 x i32>, <2 x i32>* %6224, align 1
  %6226 = bitcast i64* %320 to <2 x i32>*
  %6227 = load <2 x i32>, <2 x i32>* %6226, align 1
  %6228 = sitofp i32 %6199 to float
  %6229 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %6228, float* %6229, align 1
  %6230 = extractelement <2 x i32> %6225, i32 1
  %6231 = getelementptr inbounds i8, i8* %315, i64 4
  %6232 = bitcast i8* %6231 to i32*
  store i32 %6230, i32* %6232, align 1
  %6233 = extractelement <2 x i32> %6227, i32 0
  %6234 = bitcast i64* %320 to i32*
  store i32 %6233, i32* %6234, align 1
  %6235 = extractelement <2 x i32> %6227, i32 1
  %6236 = getelementptr inbounds i8, i8* %315, i64 12
  %6237 = bitcast i8* %6236 to i32*
  store i32 %6235, i32* %6237, align 1
  %6238 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %6239 = load <2 x i32>, <2 x i32>* %6238, align 1
  %6240 = bitcast i64* %330 to <2 x i32>*
  %6241 = load <2 x i32>, <2 x i32>* %6240, align 1
  %6242 = sitofp i32 %6198 to float
  %6243 = bitcast %union.VectorReg* %322 to float*
  store float %6242, float* %6243, align 1
  %6244 = extractelement <2 x i32> %6239, i32 1
  %6245 = getelementptr inbounds i8, i8* %323, i64 4
  %6246 = bitcast i8* %6245 to i32*
  store i32 %6244, i32* %6246, align 1
  %6247 = extractelement <2 x i32> %6241, i32 0
  %6248 = bitcast i64* %330 to i32*
  store i32 %6247, i32* %6248, align 1
  %6249 = extractelement <2 x i32> %6241, i32 1
  %6250 = getelementptr inbounds i8, i8* %323, i64 12
  %6251 = bitcast i8* %6250 to i32*
  store i32 %6249, i32* %6251, align 1
  %6252 = add i64 %6193, -212
  %6253 = add i64 %6192, 31
  store i64 %6253, i64* %3, align 8
  %6254 = bitcast %union.VectorReg* %322 to <2 x float>*
  %6255 = load <2 x float>, <2 x float>* %6254, align 1
  %6256 = load <2 x i32>, <2 x i32>* %6240, align 1
  %6257 = inttoptr i64 %6252 to float*
  %6258 = load float, float* %6257, align 4
  %6259 = extractelement <2 x float> %6255, i32 0
  %6260 = fmul float %6259, %6258
  store float %6260, float* %6243, align 1
  %6261 = bitcast <2 x float> %6255 to <2 x i32>
  %6262 = extractelement <2 x i32> %6261, i32 1
  store i32 %6262, i32* %6246, align 1
  %6263 = extractelement <2 x i32> %6256, i32 0
  store i32 %6263, i32* %6248, align 1
  %6264 = extractelement <2 x i32> %6256, i32 1
  store i32 %6264, i32* %6251, align 1
  %6265 = add i64 %6192, 34
  store i64 %6265, i64* %3, align 8
  %6266 = load <2 x float>, <2 x float>* %6254, align 1
  %6267 = extractelement <2 x float> %6266, i32 0
  %6268 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %6269 = load <2 x float>, <2 x float>* %6268, align 1
  %6270 = extractelement <2 x float> %6269, i32 0
  %6271 = fcmp uno float %6267, %6270
  br i1 %6271, label %6272, label %6282

; <label>:6272:                                   ; preds = %block_.L_42143a
  %6273 = fadd float %6267, %6270
  %6274 = bitcast float %6273 to i32
  %6275 = and i32 %6274, 2143289344
  %6276 = icmp eq i32 %6275, 2139095040
  %6277 = and i32 %6274, 4194303
  %6278 = icmp ne i32 %6277, 0
  %6279 = and i1 %6276, %6278
  br i1 %6279, label %6280, label %6288

; <label>:6280:                                   ; preds = %6272
  %6281 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6265, %struct.Memory* %MEMORY.27)
  %.pre269 = load i64, i64* %3, align 8
  %.pre270 = load i8, i8* %32, align 1
  %.pre271 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit4315

; <label>:6282:                                   ; preds = %block_.L_42143a
  %6283 = fcmp ogt float %6267, %6270
  br i1 %6283, label %6288, label %6284

; <label>:6284:                                   ; preds = %6282
  %6285 = fcmp olt float %6267, %6270
  br i1 %6285, label %6288, label %6286

; <label>:6286:                                   ; preds = %6284
  %6287 = fcmp oeq float %6267, %6270
  br i1 %6287, label %6288, label %6292

; <label>:6288:                                   ; preds = %6286, %6284, %6282, %6272
  %6289 = phi i8 [ 0, %6282 ], [ 0, %6284 ], [ 1, %6286 ], [ 1, %6272 ]
  %6290 = phi i8 [ 0, %6282 ], [ 0, %6284 ], [ 0, %6286 ], [ 1, %6272 ]
  %6291 = phi i8 [ 0, %6282 ], [ 1, %6284 ], [ 0, %6286 ], [ 1, %6272 ]
  store i8 %6289, i8* %48, align 1
  store i8 %6290, i8* %39, align 1
  store i8 %6291, i8* %32, align 1
  br label %6292

; <label>:6292:                                   ; preds = %6288, %6286
  %6293 = phi i8 [ %6289, %6288 ], [ %6214, %6286 ]
  %6294 = phi i8 [ %6291, %6288 ], [ %6202, %6286 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit4315

routine_ucomiss__xmm0___xmm1.exit4315:            ; preds = %6292, %6280
  %6295 = phi i8 [ %.pre271, %6280 ], [ %6293, %6292 ]
  %6296 = phi i8 [ %.pre270, %6280 ], [ %6294, %6292 ]
  %6297 = phi i64 [ %.pre269, %6280 ], [ %6265, %6292 ]
  %6298 = phi %struct.Memory* [ %6281, %6280 ], [ %MEMORY.27, %6292 ]
  %6299 = or i8 %6295, %6296
  %6300 = icmp ne i8 %6299, 0
  %.v512 = select i1 %6300, i64 11, i64 6
  %6301 = add i64 %6297, %.v512
  store i64 %6301, i64* %3, align 8
  br i1 %6300, label %block_.L_421467, label %block_.L_422f0e

block_.L_421467:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit4315
  %6302 = load i64, i64* %RBP.i, align 8
  %6303 = add i64 %6302, -80
  %6304 = add i64 %6301, 3
  store i64 %6304, i64* %3, align 8
  %6305 = inttoptr i64 %6303 to i32*
  %6306 = load i32, i32* %6305, align 4
  %6307 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %6308 = sub i32 %6306, %6307
  %6309 = zext i32 %6308 to i64
  store i64 %6309, i64* %RAX.i3587.phi.trans.insert, align 8
  %6310 = icmp ult i32 %6306, %6307
  %6311 = zext i1 %6310 to i8
  store i8 %6311, i8* %32, align 1
  %6312 = and i32 %6308, 255
  %6313 = tail call i32 @llvm.ctpop.i32(i32 %6312)
  %6314 = trunc i32 %6313 to i8
  %6315 = and i8 %6314, 1
  %6316 = xor i8 %6315, 1
  store i8 %6316, i8* %39, align 1
  %6317 = xor i32 %6307, %6306
  %6318 = xor i32 %6317, %6308
  %6319 = lshr i32 %6318, 4
  %6320 = trunc i32 %6319 to i8
  %6321 = and i8 %6320, 1
  store i8 %6321, i8* %45, align 1
  %6322 = icmp eq i32 %6308, 0
  %6323 = zext i1 %6322 to i8
  store i8 %6323, i8* %48, align 1
  %6324 = lshr i32 %6308, 31
  %6325 = trunc i32 %6324 to i8
  store i8 %6325, i8* %51, align 1
  %6326 = lshr i32 %6306, 31
  %6327 = lshr i32 %6307, 31
  %6328 = xor i32 %6327, %6326
  %6329 = xor i32 %6324, %6326
  %6330 = add nuw nsw i32 %6329, %6328
  %6331 = icmp eq i32 %6330, 2
  %6332 = zext i1 %6331 to i8
  store i8 %6332, i8* %57, align 1
  %6333 = load <2 x i32>, <2 x i32>* %6224, align 1
  %6334 = load <2 x i32>, <2 x i32>* %6226, align 1
  %6335 = sitofp i32 %6308 to float
  store float %6335, float* %6229, align 1
  %6336 = extractelement <2 x i32> %6333, i32 1
  store i32 %6336, i32* %6232, align 1
  %6337 = extractelement <2 x i32> %6334, i32 0
  store i32 %6337, i32* %6234, align 1
  %6338 = extractelement <2 x i32> %6334, i32 1
  store i32 %6338, i32* %6237, align 1
  %6339 = load <2 x i32>, <2 x i32>* %6238, align 1
  %6340 = load <2 x i32>, <2 x i32>* %6240, align 1
  %6341 = sitofp i32 %6307 to float
  store float %6341, float* %6243, align 1
  %6342 = extractelement <2 x i32> %6339, i32 1
  store i32 %6342, i32* %6246, align 1
  %6343 = extractelement <2 x i32> %6340, i32 0
  store i32 %6343, i32* %6248, align 1
  %6344 = extractelement <2 x i32> %6340, i32 1
  store i32 %6344, i32* %6251, align 1
  %6345 = add i64 %6302, -208
  %6346 = add i64 %6301, 31
  store i64 %6346, i64* %3, align 8
  %6347 = load <2 x float>, <2 x float>* %6254, align 1
  %6348 = load <2 x i32>, <2 x i32>* %6240, align 1
  %6349 = inttoptr i64 %6345 to float*
  %6350 = load float, float* %6349, align 4
  %6351 = extractelement <2 x float> %6347, i32 0
  %6352 = fmul float %6351, %6350
  store float %6352, float* %6243, align 1
  %6353 = bitcast <2 x float> %6347 to <2 x i32>
  %6354 = extractelement <2 x i32> %6353, i32 1
  store i32 %6354, i32* %6246, align 1
  %6355 = extractelement <2 x i32> %6348, i32 0
  store i32 %6355, i32* %6248, align 1
  %6356 = extractelement <2 x i32> %6348, i32 1
  store i32 %6356, i32* %6251, align 1
  %6357 = add i64 %6301, 34
  store i64 %6357, i64* %3, align 8
  %6358 = load <2 x float>, <2 x float>* %6254, align 1
  %6359 = extractelement <2 x float> %6358, i32 0
  %6360 = load <2 x float>, <2 x float>* %6268, align 1
  %6361 = extractelement <2 x float> %6360, i32 0
  %6362 = fcmp uno float %6359, %6361
  br i1 %6362, label %6363, label %6373

; <label>:6363:                                   ; preds = %block_.L_421467
  %6364 = fadd float %6359, %6361
  %6365 = bitcast float %6364 to i32
  %6366 = and i32 %6365, 2143289344
  %6367 = icmp eq i32 %6366, 2139095040
  %6368 = and i32 %6365, 4194303
  %6369 = icmp ne i32 %6368, 0
  %6370 = and i1 %6367, %6369
  br i1 %6370, label %6371, label %6379

; <label>:6371:                                   ; preds = %6363
  %6372 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6357, %struct.Memory* %6298)
  %.pre272 = load i64, i64* %3, align 8
  %.pre273 = load i8, i8* %32, align 1
  %.pre274 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit4294

; <label>:6373:                                   ; preds = %block_.L_421467
  %6374 = fcmp ogt float %6359, %6361
  br i1 %6374, label %6379, label %6375

; <label>:6375:                                   ; preds = %6373
  %6376 = fcmp olt float %6359, %6361
  br i1 %6376, label %6379, label %6377

; <label>:6377:                                   ; preds = %6375
  %6378 = fcmp oeq float %6359, %6361
  br i1 %6378, label %6379, label %6383

; <label>:6379:                                   ; preds = %6377, %6375, %6373, %6363
  %6380 = phi i8 [ 0, %6373 ], [ 0, %6375 ], [ 1, %6377 ], [ 1, %6363 ]
  %6381 = phi i8 [ 0, %6373 ], [ 0, %6375 ], [ 0, %6377 ], [ 1, %6363 ]
  %6382 = phi i8 [ 0, %6373 ], [ 1, %6375 ], [ 0, %6377 ], [ 1, %6363 ]
  store i8 %6380, i8* %48, align 1
  store i8 %6381, i8* %39, align 1
  store i8 %6382, i8* %32, align 1
  br label %6383

; <label>:6383:                                   ; preds = %6379, %6377
  %6384 = phi i8 [ %6380, %6379 ], [ %6323, %6377 ]
  %6385 = phi i8 [ %6382, %6379 ], [ %6311, %6377 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit4294

routine_ucomiss__xmm0___xmm1.exit4294:            ; preds = %6383, %6371
  %6386 = phi i8 [ %.pre274, %6371 ], [ %6384, %6383 ]
  %6387 = phi i8 [ %.pre273, %6371 ], [ %6385, %6383 ]
  %6388 = phi i64 [ %.pre272, %6371 ], [ %6357, %6383 ]
  %6389 = phi %struct.Memory* [ %6372, %6371 ], [ %6298, %6383 ]
  %6390 = or i8 %6386, %6387
  %6391 = icmp ne i8 %6390, 0
  %.v520 = select i1 %6391, i64 11, i64 6
  %6392 = add i64 %6388, %.v520
  store i64 %6392, i64* %3, align 8
  br i1 %6391, label %block_.L_421494, label %block_42148f

block_42148f:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit4294
  %6393 = add i64 %6392, 6191
  br label %block_.L_422cbe

block_.L_421494:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit4294
  %6394 = add i64 %6392, 10
  store i64 %6394, i64* %3, align 8
  %.pre275 = load i64, i64* %RBP.i, align 8
  br label %block_.L_42149e

block_.L_42149e:                                  ; preds = %block_.L_421494, %block_.L_421281
  %6395 = phi i64 [ %5182, %block_.L_421281 ], [ %.pre275, %block_.L_421494 ]
  %6396 = phi i64 [ %5211, %block_.L_421281 ], [ %6394, %block_.L_421494 ]
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.24, %block_.L_421281 ], [ %6389, %block_.L_421494 ]
  %6397 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6397, i64* %RAX.i3587.phi.trans.insert, align 8
  %6398 = add i64 %6396, 10
  store i64 %6398, i64* %3, align 8
  %6399 = inttoptr i64 %6397 to i32*
  %6400 = load i32, i32* %6399, align 4
  %6401 = zext i32 %6400 to i64
  store i64 %6401, i64* %RCX.i4260.pre-phi, align 8
  %6402 = add i64 %6395, -34
  %6403 = add i64 %6396, 14
  store i64 %6403, i64* %3, align 8
  %6404 = inttoptr i64 %6402 to i16*
  %6405 = load i16, i16* %6404, align 2
  %6406 = sext i16 %6405 to i32
  %6407 = add nsw i32 %6406, 1
  %6408 = zext i32 %6407 to i64
  store i64 %6408, i64* %RDX.i4317.pre-phi, align 8
  %6409 = lshr i32 %6407, 31
  %6410 = sub i32 %6400, %6407
  %6411 = icmp ult i32 %6400, %6407
  %6412 = zext i1 %6411 to i8
  store i8 %6412, i8* %32, align 1
  %6413 = and i32 %6410, 255
  %6414 = tail call i32 @llvm.ctpop.i32(i32 %6413)
  %6415 = trunc i32 %6414 to i8
  %6416 = and i8 %6415, 1
  %6417 = xor i8 %6416, 1
  store i8 %6417, i8* %39, align 1
  %6418 = xor i32 %6407, %6400
  %6419 = xor i32 %6418, %6410
  %6420 = lshr i32 %6419, 4
  %6421 = trunc i32 %6420 to i8
  %6422 = and i8 %6421, 1
  store i8 %6422, i8* %45, align 1
  %6423 = icmp eq i32 %6410, 0
  %6424 = zext i1 %6423 to i8
  store i8 %6424, i8* %48, align 1
  %6425 = lshr i32 %6410, 31
  %6426 = trunc i32 %6425 to i8
  store i8 %6426, i8* %51, align 1
  %6427 = lshr i32 %6400, 31
  %6428 = xor i32 %6409, %6427
  %6429 = xor i32 %6425, %6427
  %6430 = add nuw nsw i32 %6429, %6428
  %6431 = icmp eq i32 %6430, 2
  %6432 = zext i1 %6431 to i8
  store i8 %6432, i8* %57, align 1
  %6433 = icmp ne i8 %6426, 0
  %6434 = xor i1 %6433, %6431
  %6435 = or i1 %6423, %6434
  %.v528 = select i1 %6435, i64 38, i64 25
  %6436 = add i64 %6396, %.v528
  store i64 %6436, i64* %3, align 8
  br i1 %6435, label %block_.L_4214c4, label %block_4214b7

block_4214b7:                                     ; preds = %block_.L_42149e
  %6437 = add i64 %6436, 4
  store i64 %6437, i64* %3, align 8
  %6438 = load i16, i16* %6404, align 2
  %6439 = sext i16 %6438 to i64
  %6440 = and i64 %6439, 4294967295
  store i64 %6440, i64* %RAX.i3587.phi.trans.insert, align 8
  %6441 = sext i16 %6438 to i32
  %6442 = add nsw i32 %6441, 1
  %6443 = icmp ne i16 %6438, -1
  %6444 = zext i1 %6443 to i8
  store i8 %6444, i8* %32, align 1
  %6445 = and i32 %6442, 255
  %6446 = tail call i32 @llvm.ctpop.i32(i32 %6445)
  %6447 = trunc i32 %6446 to i8
  %6448 = and i8 %6447, 1
  %6449 = xor i8 %6448, 1
  store i8 %6449, i8* %39, align 1
  %6450 = xor i32 %6441, 16
  %6451 = xor i32 %6450, %6442
  %6452 = lshr i32 %6451, 4
  %6453 = trunc i32 %6452 to i8
  %6454 = and i8 %6453, 1
  store i8 %6454, i8* %45, align 1
  %6455 = icmp eq i32 %6442, 0
  %6456 = zext i1 %6455 to i8
  store i8 %6456, i8* %48, align 1
  %6457 = lshr i32 %6442, 31
  %6458 = trunc i32 %6457 to i8
  store i8 %6458, i8* %51, align 1
  %6459 = lshr i32 %6441, 31
  %6460 = xor i32 %6459, 1
  %6461 = xor i32 %6457, %6459
  %6462 = add nuw nsw i32 %6461, %6460
  %6463 = icmp eq i32 %6462, 2
  %6464 = zext i1 %6463 to i8
  store i8 %6464, i8* %57, align 1
  %.v529 = select i1 %6455, i64 13, i64 46
  %6465 = add i64 %6436, %.v529
  store i64 %6465, i64* %3, align 8
  br i1 %6455, label %block_.L_4214c4, label %block_4214b7.block_.L_4214e5_crit_edge

block_4214b7.block_.L_4214e5_crit_edge:           ; preds = %block_4214b7
  %.pre448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  br label %block_.L_4214e5

block_.L_4214c4:                                  ; preds = %block_4214b7, %block_.L_42149e
  %6466 = phi i64 [ %6465, %block_4214b7 ], [ %6436, %block_.L_42149e ]
  %6467 = add i64 %6395, -40
  %6468 = add i64 %6466, 4
  store i64 %6468, i64* %3, align 8
  %6469 = inttoptr i64 %6467 to i32*
  %6470 = load i32, i32* %6469, align 4
  %6471 = add i32 %6470, -1
  %6472 = icmp eq i32 %6470, 0
  %6473 = zext i1 %6472 to i8
  store i8 %6473, i8* %32, align 1
  %6474 = and i32 %6471, 255
  %6475 = tail call i32 @llvm.ctpop.i32(i32 %6474)
  %6476 = trunc i32 %6475 to i8
  %6477 = and i8 %6476, 1
  %6478 = xor i8 %6477, 1
  store i8 %6478, i8* %39, align 1
  %6479 = xor i32 %6471, %6470
  %6480 = lshr i32 %6479, 4
  %6481 = trunc i32 %6480 to i8
  %6482 = and i8 %6481, 1
  store i8 %6482, i8* %45, align 1
  %6483 = icmp eq i32 %6471, 0
  %6484 = zext i1 %6483 to i8
  store i8 %6484, i8* %48, align 1
  %6485 = lshr i32 %6471, 31
  %6486 = trunc i32 %6485 to i8
  store i8 %6486, i8* %51, align 1
  %6487 = lshr i32 %6470, 31
  %6488 = xor i32 %6485, %6487
  %6489 = add nuw nsw i32 %6488, %6487
  %6490 = icmp eq i32 %6489, 2
  %6491 = zext i1 %6490 to i8
  store i8 %6491, i8* %57, align 1
  %.v607 = select i1 %6483, i64 10, i64 469
  %6492 = add i64 %6466, %.v607
  store i64 %6492, i64* %3, align 8
  br i1 %6483, label %block_4214ce, label %block_.L_421699

block_4214ce:                                     ; preds = %block_.L_4214c4
  %6493 = load i32, i32* bitcast (%G_0x722ca8_type* @G_0x722ca8 to i32*), align 8
  %6494 = zext i32 %6493 to i64
  store i64 %6494, i64* %RAX.i3587.phi.trans.insert, align 8
  %6495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6496 = sext i32 %6493 to i64
  %6497 = lshr i64 %6496, 32
  store i64 %6497, i64* %6495, align 8
  %6498 = add i64 %6395, -204
  %6499 = add i64 %6492, 14
  store i64 %6499, i64* %3, align 8
  %6500 = inttoptr i64 %6498 to i32*
  %6501 = load i32, i32* %6500, align 4
  %6502 = sext i32 %6501 to i64
  %6503 = shl nuw i64 %6497, 32
  %6504 = or i64 %6503, %6494
  %6505 = sdiv i64 %6504, %6502
  %6506 = shl i64 %6505, 32
  %6507 = ashr exact i64 %6506, 32
  %6508 = icmp eq i64 %6505, %6507
  br i1 %6508, label %6511, label %6509

; <label>:6509:                                   ; preds = %block_4214ce
  %6510 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6499, %struct.Memory* %MEMORY.28)
  %.pre276 = load i32, i32* %EDX.i1187, align 4
  %.pre277 = load i64, i64* %3, align 8
  br label %routine_idivl_MINUS0xcc__rbp_.exit

; <label>:6511:                                   ; preds = %block_4214ce
  %6512 = srem i64 %6504, %6502
  %6513 = and i64 %6505, 4294967295
  store i64 %6513, i64* %RAX.i3587.phi.trans.insert, align 8
  %6514 = and i64 %6512, 4294967295
  store i64 %6514, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %6515 = trunc i64 %6512 to i32
  br label %routine_idivl_MINUS0xcc__rbp_.exit

routine_idivl_MINUS0xcc__rbp_.exit:               ; preds = %6511, %6509
  %6516 = phi i64 [ %.pre277, %6509 ], [ %6499, %6511 ]
  %6517 = phi i32 [ %.pre276, %6509 ], [ %6515, %6511 ]
  %6518 = phi %struct.Memory* [ %6510, %6509 ], [ %MEMORY.28, %6511 ]
  %6519 = add i32 %6517, -1
  %6520 = icmp eq i32 %6517, 0
  %6521 = zext i1 %6520 to i8
  store i8 %6521, i8* %32, align 1
  %6522 = and i32 %6519, 255
  %6523 = tail call i32 @llvm.ctpop.i32(i32 %6522)
  %6524 = trunc i32 %6523 to i8
  %6525 = and i8 %6524, 1
  %6526 = xor i8 %6525, 1
  store i8 %6526, i8* %39, align 1
  %6527 = xor i32 %6519, %6517
  %6528 = lshr i32 %6527, 4
  %6529 = trunc i32 %6528 to i8
  %6530 = and i8 %6529, 1
  store i8 %6530, i8* %45, align 1
  %6531 = icmp eq i32 %6519, 0
  %6532 = zext i1 %6531 to i8
  store i8 %6532, i8* %48, align 1
  %6533 = lshr i32 %6519, 31
  %6534 = trunc i32 %6533 to i8
  store i8 %6534, i8* %51, align 1
  %6535 = lshr i32 %6517, 31
  %6536 = xor i32 %6533, %6535
  %6537 = add nuw nsw i32 %6536, %6535
  %6538 = icmp eq i32 %6537, 2
  %6539 = zext i1 %6538 to i8
  store i8 %6539, i8* %57, align 1
  %6540 = icmp ne i8 %6534, 0
  %6541 = xor i1 %6540, %6538
  %6542 = or i1 %6531, %6541
  %.v608 = select i1 %6542, i64 445, i64 9
  %6543 = add i64 %6516, %.v608
  store i64 %6543, i64* %3, align 8
  br i1 %6542, label %block_.L_421699, label %routine_idivl_MINUS0xcc__rbp_.exit.block_.L_4214e5_crit_edge

routine_idivl_MINUS0xcc__rbp_.exit.block_.L_4214e5_crit_edge: ; preds = %routine_idivl_MINUS0xcc__rbp_.exit
  %.pre278 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4214e5

block_.L_4214e5:                                  ; preds = %block_4214b7.block_.L_4214e5_crit_edge, %routine_idivl_MINUS0xcc__rbp_.exit.block_.L_4214e5_crit_edge
  %.pre-phi449 = phi i64* [ %.pre448, %block_4214b7.block_.L_4214e5_crit_edge ], [ %6495, %routine_idivl_MINUS0xcc__rbp_.exit.block_.L_4214e5_crit_edge ]
  %6544 = phi i64 [ %6395, %block_4214b7.block_.L_4214e5_crit_edge ], [ %.pre278, %routine_idivl_MINUS0xcc__rbp_.exit.block_.L_4214e5_crit_edge ]
  %6545 = phi i64 [ %6465, %block_4214b7.block_.L_4214e5_crit_edge ], [ %6543, %routine_idivl_MINUS0xcc__rbp_.exit.block_.L_4214e5_crit_edge ]
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.28, %block_4214b7.block_.L_4214e5_crit_edge ], [ %6518, %routine_idivl_MINUS0xcc__rbp_.exit.block_.L_4214e5_crit_edge ]
  store i64 4, i64* %RAX.i3587.phi.trans.insert, align 8
  %6546 = add i64 %6544, -44
  %6547 = add i64 %6545, 8
  store i64 %6547, i64* %3, align 8
  %6548 = inttoptr i64 %6546 to i32*
  %6549 = load i32, i32* %6548, align 4
  %6550 = zext i32 %6549 to i64
  store i64 %6550, i64* %RCX.i4260.pre-phi, align 8
  %6551 = load i32, i32* bitcast (%G_0x70fd54_type* @G_0x70fd54 to i32*), align 8
  %6552 = zext i32 %6551 to i64
  store i64 %6552, i64* %RDX.i4317.pre-phi, align 8
  %6553 = add i64 %6544, -284
  %6554 = add i64 %6545, 21
  store i64 %6554, i64* %3, align 8
  %6555 = inttoptr i64 %6553 to i32*
  store i32 4, i32* %6555, align 4
  %6556 = load i32, i32* %EDX.i1187, align 4
  %6557 = zext i32 %6556 to i64
  %6558 = load i64, i64* %3, align 8
  store i64 %6557, i64* %RAX.i3587.phi.trans.insert, align 8
  %6559 = sext i32 %6556 to i64
  %6560 = lshr i64 %6559, 32
  store i64 %6560, i64* %.pre-phi449, align 8
  %6561 = load i64, i64* %RBP.i, align 8
  %6562 = add i64 %6561, -284
  %6563 = add i64 %6558, 9
  store i64 %6563, i64* %3, align 8
  %6564 = inttoptr i64 %6562 to i32*
  %6565 = load i32, i32* %6564, align 4
  %6566 = zext i32 %6565 to i64
  store i64 %6566, i64* %RSI.i739, align 8
  %6567 = add i64 %6558, 11
  store i64 %6567, i64* %3, align 8
  %6568 = sext i32 %6565 to i64
  %6569 = shl nuw i64 %6560, 32
  %6570 = or i64 %6569, %6557
  %6571 = sdiv i64 %6570, %6568
  %6572 = shl i64 %6571, 32
  %6573 = ashr exact i64 %6572, 32
  %6574 = icmp eq i64 %6571, %6573
  br i1 %6574, label %6577, label %6575

; <label>:6575:                                   ; preds = %block_.L_4214e5
  %6576 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6567, %struct.Memory* %MEMORY.30)
  %.pre279 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %.pre280 = load i64, i64* %3, align 8
  %.pre281 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit4232

; <label>:6577:                                   ; preds = %block_.L_4214e5
  %6578 = srem i64 %6570, %6568
  %6579 = and i64 %6571, 4294967295
  store i64 %6579, i64* %RAX.i3587.phi.trans.insert, align 8
  %6580 = and i64 %6578, 4294967295
  store i64 %6580, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %6581 = trunc i64 %6571 to i32
  br label %routine_idivl__esi.exit4232

routine_idivl__esi.exit4232:                      ; preds = %6577, %6575
  %6582 = phi i64 [ %.pre281, %6575 ], [ %6561, %6577 ]
  %6583 = phi i64 [ %.pre280, %6575 ], [ %6567, %6577 ]
  %6584 = phi i32 [ %.pre279, %6575 ], [ %6581, %6577 ]
  %6585 = phi %struct.Memory* [ %6576, %6575 ], [ %MEMORY.30, %6577 ]
  %6586 = load i64, i64* %RCX.i4260.pre-phi, align 8
  %6587 = zext i32 %6584 to i64
  %6588 = trunc i64 %6586 to i32
  %6589 = add i32 %6584, %6588
  %6590 = zext i32 %6589 to i64
  store i64 %6590, i64* %RCX.i4260.pre-phi, align 8
  %6591 = icmp ult i32 %6589, %6588
  %6592 = icmp ult i32 %6589, %6584
  %6593 = or i1 %6591, %6592
  %6594 = zext i1 %6593 to i8
  store i8 %6594, i8* %32, align 1
  %6595 = and i32 %6589, 255
  %6596 = tail call i32 @llvm.ctpop.i32(i32 %6595)
  %6597 = trunc i32 %6596 to i8
  %6598 = and i8 %6597, 1
  %6599 = xor i8 %6598, 1
  store i8 %6599, i8* %39, align 1
  %6600 = xor i64 %6587, %6586
  %6601 = trunc i64 %6600 to i32
  %6602 = xor i32 %6601, %6589
  %6603 = lshr i32 %6602, 4
  %6604 = trunc i32 %6603 to i8
  %6605 = and i8 %6604, 1
  store i8 %6605, i8* %45, align 1
  %6606 = icmp eq i32 %6589, 0
  %6607 = zext i1 %6606 to i8
  store i8 %6607, i8* %48, align 1
  %6608 = lshr i32 %6589, 31
  %6609 = trunc i32 %6608 to i8
  store i8 %6609, i8* %51, align 1
  %6610 = lshr i32 %6588, 31
  %6611 = lshr i32 %6584, 31
  %6612 = xor i32 %6608, %6610
  %6613 = xor i32 %6608, %6611
  %6614 = add nuw nsw i32 %6612, %6613
  %6615 = icmp eq i32 %6614, 2
  %6616 = zext i1 %6615 to i8
  store i8 %6616, i8* %57, align 1
  %6617 = add i64 %6582, -96
  %6618 = add i64 %6583, 5
  store i64 %6618, i64* %3, align 8
  %6619 = inttoptr i64 %6617 to i32*
  store i32 %6589, i32* %6619, align 4
  %6620 = load i64, i64* %RBP.i, align 8
  %6621 = add i64 %6620, -48
  %6622 = load i64, i64* %3, align 8
  %6623 = add i64 %6622, 3
  store i64 %6623, i64* %3, align 8
  %6624 = inttoptr i64 %6621 to i32*
  %6625 = load i32, i32* %6624, align 4
  %6626 = zext i32 %6625 to i64
  store i64 %6626, i64* %RAX.i3587.phi.trans.insert, align 8
  %6627 = load i32, i32* bitcast (%G_0x70fd58_type* @G_0x70fd58 to i32*), align 8
  %6628 = zext i32 %6627 to i64
  store i64 %6628, i64* %RCX.i4260.pre-phi, align 8
  %6629 = add i64 %6620, -288
  %6630 = add i64 %6622, 16
  store i64 %6630, i64* %3, align 8
  %6631 = inttoptr i64 %6629 to i32*
  store i32 %6625, i32* %6631, align 4
  %6632 = load i32, i32* %ECX.i1211, align 4
  %6633 = zext i32 %6632 to i64
  %6634 = load i64, i64* %3, align 8
  store i64 %6633, i64* %RAX.i3587.phi.trans.insert, align 8
  %6635 = sext i32 %6632 to i64
  %6636 = lshr i64 %6635, 32
  store i64 %6636, i64* %.pre-phi449, align 8
  %6637 = load i32, i32* %ESI.i1656, align 4
  %6638 = add i64 %6634, 5
  store i64 %6638, i64* %3, align 8
  %6639 = sext i32 %6637 to i64
  %6640 = shl nuw i64 %6636, 32
  %6641 = or i64 %6640, %6633
  %6642 = sdiv i64 %6641, %6639
  %6643 = shl i64 %6642, 32
  %6644 = ashr exact i64 %6643, 32
  %6645 = icmp eq i64 %6642, %6644
  br i1 %6645, label %6648, label %6646

; <label>:6646:                                   ; preds = %routine_idivl__esi.exit4232
  %6647 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6638, %struct.Memory* %6585)
  %.pre282 = load i64, i64* %3, align 8
  %.pre283 = load i32, i32* %EAX.i4185.pre-phi, align 4
  br label %routine_idivl__esi.exit4208

; <label>:6648:                                   ; preds = %routine_idivl__esi.exit4232
  %6649 = srem i64 %6641, %6639
  %6650 = and i64 %6642, 4294967295
  store i64 %6650, i64* %RAX.i3587.phi.trans.insert, align 8
  %6651 = and i64 %6649, 4294967295
  store i64 %6651, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %6652 = trunc i64 %6642 to i32
  br label %routine_idivl__esi.exit4208

routine_idivl__esi.exit4208:                      ; preds = %6648, %6646
  %6653 = phi i32 [ %.pre283, %6646 ], [ %6652, %6648 ]
  %6654 = phi i64 [ %.pre282, %6646 ], [ %6638, %6648 ]
  %6655 = phi %struct.Memory* [ %6647, %6646 ], [ %6585, %6648 ]
  %6656 = load i64, i64* %RBP.i, align 8
  %6657 = add i64 %6656, -288
  %6658 = add i64 %6654, 6
  store i64 %6658, i64* %3, align 8
  %6659 = inttoptr i64 %6657 to i32*
  %6660 = load i32, i32* %6659, align 4
  %6661 = add i32 %6653, %6660
  %6662 = zext i32 %6661 to i64
  store i64 %6662, i64* %RCX.i4260.pre-phi, align 8
  %6663 = icmp ult i32 %6661, %6660
  %6664 = icmp ult i32 %6661, %6653
  %6665 = or i1 %6663, %6664
  %6666 = zext i1 %6665 to i8
  store i8 %6666, i8* %32, align 1
  %6667 = and i32 %6661, 255
  %6668 = tail call i32 @llvm.ctpop.i32(i32 %6667)
  %6669 = trunc i32 %6668 to i8
  %6670 = and i8 %6669, 1
  %6671 = xor i8 %6670, 1
  store i8 %6671, i8* %39, align 1
  %6672 = xor i32 %6653, %6660
  %6673 = xor i32 %6672, %6661
  %6674 = lshr i32 %6673, 4
  %6675 = trunc i32 %6674 to i8
  %6676 = and i8 %6675, 1
  store i8 %6676, i8* %45, align 1
  %6677 = icmp eq i32 %6661, 0
  %6678 = zext i1 %6677 to i8
  store i8 %6678, i8* %48, align 1
  %6679 = lshr i32 %6661, 31
  %6680 = trunc i32 %6679 to i8
  store i8 %6680, i8* %51, align 1
  %6681 = lshr i32 %6660, 31
  %6682 = lshr i32 %6653, 31
  %6683 = xor i32 %6679, %6681
  %6684 = xor i32 %6679, %6682
  %6685 = add nuw nsw i32 %6683, %6684
  %6686 = icmp eq i32 %6685, 2
  %6687 = zext i1 %6686 to i8
  store i8 %6687, i8* %57, align 1
  %6688 = add i64 %6656, -100
  %6689 = add i64 %6654, 11
  store i64 %6689, i64* %3, align 8
  %6690 = inttoptr i64 %6688 to i32*
  store i32 %6661, i32* %6690, align 4
  %6691 = load i64, i64* %RBP.i, align 8
  %6692 = add i64 %6691, -96
  %6693 = load i64, i64* %3, align 8
  %6694 = add i64 %6693, 3
  store i64 %6694, i64* %3, align 8
  %6695 = inttoptr i64 %6692 to i32*
  %6696 = load i32, i32* %6695, align 4
  %6697 = zext i32 %6696 to i64
  store i64 %6697, i64* %RAX.i3587.phi.trans.insert, align 8
  %6698 = add i64 %6691, -160
  %6699 = add i64 %6693, 9
  store i64 %6699, i64* %3, align 8
  %6700 = inttoptr i64 %6698 to i32*
  %6701 = load i32, i32* %6700, align 4
  %6702 = sub i32 %6696, %6701
  %6703 = zext i32 %6702 to i64
  store i64 %6703, i64* %RAX.i3587.phi.trans.insert, align 8
  %6704 = icmp ult i32 %6696, %6701
  %6705 = zext i1 %6704 to i8
  store i8 %6705, i8* %32, align 1
  %6706 = and i32 %6702, 255
  %6707 = tail call i32 @llvm.ctpop.i32(i32 %6706)
  %6708 = trunc i32 %6707 to i8
  %6709 = and i8 %6708, 1
  %6710 = xor i8 %6709, 1
  store i8 %6710, i8* %39, align 1
  %6711 = xor i32 %6701, %6696
  %6712 = xor i32 %6711, %6702
  %6713 = lshr i32 %6712, 4
  %6714 = trunc i32 %6713 to i8
  %6715 = and i8 %6714, 1
  store i8 %6715, i8* %45, align 1
  %6716 = icmp eq i32 %6702, 0
  %6717 = zext i1 %6716 to i8
  store i8 %6717, i8* %48, align 1
  %6718 = lshr i32 %6702, 31
  %6719 = trunc i32 %6718 to i8
  store i8 %6719, i8* %51, align 1
  %6720 = lshr i32 %6696, 31
  %6721 = lshr i32 %6701, 31
  %6722 = xor i32 %6721, %6720
  %6723 = xor i32 %6718, %6720
  %6724 = add nuw nsw i32 %6723, %6722
  %6725 = icmp eq i32 %6724, 2
  %6726 = zext i1 %6725 to i8
  store i8 %6726, i8* %57, align 1
  store i64 %6703, i64* %RDI.i1133, align 8
  %6727 = add i64 %6693, -132394
  %6728 = add i64 %6693, 16
  %6729 = load i64, i64* %6, align 8
  %6730 = add i64 %6729, -8
  %6731 = inttoptr i64 %6730 to i64*
  store i64 %6728, i64* %6731, align 8
  store i64 %6730, i64* %6, align 8
  store i64 %6727, i64* %3, align 8
  %6732 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %6655)
  %6733 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %6734 = load i64, i64* %RBP.i, align 8
  %6735 = add i64 %6734, -76
  %6736 = load i64, i64* %3, align 8
  %6737 = add i64 %6736, 3
  store i64 %6737, i64* %3, align 8
  %6738 = inttoptr i64 %6735 to i32*
  %6739 = load i32, i32* %6738, align 4
  %6740 = sub i32 %6733, %6739
  %6741 = icmp ult i32 %6733, %6739
  %6742 = zext i1 %6741 to i8
  store i8 %6742, i8* %32, align 1
  %6743 = and i32 %6740, 255
  %6744 = tail call i32 @llvm.ctpop.i32(i32 %6743)
  %6745 = trunc i32 %6744 to i8
  %6746 = and i8 %6745, 1
  %6747 = xor i8 %6746, 1
  store i8 %6747, i8* %39, align 1
  %6748 = xor i32 %6739, %6733
  %6749 = xor i32 %6748, %6740
  %6750 = lshr i32 %6749, 4
  %6751 = trunc i32 %6750 to i8
  %6752 = and i8 %6751, 1
  store i8 %6752, i8* %45, align 1
  %6753 = icmp eq i32 %6740, 0
  %6754 = zext i1 %6753 to i8
  store i8 %6754, i8* %48, align 1
  %6755 = lshr i32 %6740, 31
  %6756 = trunc i32 %6755 to i8
  store i8 %6756, i8* %51, align 1
  %6757 = lshr i32 %6733, 31
  %6758 = lshr i32 %6739, 31
  %6759 = xor i32 %6758, %6757
  %6760 = xor i32 %6755, %6757
  %6761 = add nuw nsw i32 %6760, %6759
  %6762 = icmp eq i32 %6761, 2
  %6763 = zext i1 %6762 to i8
  store i8 %6763, i8* %57, align 1
  %6764 = icmp ne i8 %6756, 0
  %6765 = xor i1 %6764, %6762
  %.demorgan457 = or i1 %6753, %6765
  %.v530 = select i1 %.demorgan457, i64 9, i64 346
  %6766 = add i64 %6736, %.v530
  store i64 %6766, i64* %3, align 8
  br i1 %.demorgan457, label %block_421543, label %block_.L_421694

block_421543:                                     ; preds = %routine_idivl__esi.exit4208
  %6767 = add i64 %6734, -100
  %6768 = add i64 %6766, 3
  store i64 %6768, i64* %3, align 8
  %6769 = inttoptr i64 %6767 to i32*
  %6770 = load i32, i32* %6769, align 4
  %6771 = zext i32 %6770 to i64
  store i64 %6771, i64* %RAX.i3587.phi.trans.insert, align 8
  %6772 = add i64 %6734, -164
  %6773 = add i64 %6766, 9
  store i64 %6773, i64* %3, align 8
  %6774 = inttoptr i64 %6772 to i32*
  %6775 = load i32, i32* %6774, align 4
  %6776 = sub i32 %6770, %6775
  %6777 = zext i32 %6776 to i64
  store i64 %6777, i64* %RAX.i3587.phi.trans.insert, align 8
  %6778 = icmp ult i32 %6770, %6775
  %6779 = zext i1 %6778 to i8
  store i8 %6779, i8* %32, align 1
  %6780 = and i32 %6776, 255
  %6781 = tail call i32 @llvm.ctpop.i32(i32 %6780)
  %6782 = trunc i32 %6781 to i8
  %6783 = and i8 %6782, 1
  %6784 = xor i8 %6783, 1
  store i8 %6784, i8* %39, align 1
  %6785 = xor i32 %6775, %6770
  %6786 = xor i32 %6785, %6776
  %6787 = lshr i32 %6786, 4
  %6788 = trunc i32 %6787 to i8
  %6789 = and i8 %6788, 1
  store i8 %6789, i8* %45, align 1
  %6790 = icmp eq i32 %6776, 0
  %6791 = zext i1 %6790 to i8
  store i8 %6791, i8* %48, align 1
  %6792 = lshr i32 %6776, 31
  %6793 = trunc i32 %6792 to i8
  store i8 %6793, i8* %51, align 1
  %6794 = lshr i32 %6770, 31
  %6795 = lshr i32 %6775, 31
  %6796 = xor i32 %6795, %6794
  %6797 = xor i32 %6792, %6794
  %6798 = add nuw nsw i32 %6797, %6796
  %6799 = icmp eq i32 %6798, 2
  %6800 = zext i1 %6799 to i8
  store i8 %6800, i8* %57, align 1
  store i64 %6777, i64* %RDI.i1133, align 8
  %6801 = add i64 %6766, -132419
  %6802 = add i64 %6766, 16
  %6803 = load i64, i64* %6, align 8
  %6804 = add i64 %6803, -8
  %6805 = inttoptr i64 %6804 to i64*
  store i64 %6802, i64* %6805, align 8
  store i64 %6804, i64* %6, align 8
  store i64 %6801, i64* %3, align 8
  %6806 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %6732)
  %6807 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %6808 = load i64, i64* %RBP.i, align 8
  %6809 = add i64 %6808, -76
  %6810 = load i64, i64* %3, align 8
  %6811 = add i64 %6810, 3
  store i64 %6811, i64* %3, align 8
  %6812 = inttoptr i64 %6809 to i32*
  %6813 = load i32, i32* %6812, align 4
  %6814 = sub i32 %6807, %6813
  %6815 = icmp ult i32 %6807, %6813
  %6816 = zext i1 %6815 to i8
  store i8 %6816, i8* %32, align 1
  %6817 = and i32 %6814, 255
  %6818 = tail call i32 @llvm.ctpop.i32(i32 %6817)
  %6819 = trunc i32 %6818 to i8
  %6820 = and i8 %6819, 1
  %6821 = xor i8 %6820, 1
  store i8 %6821, i8* %39, align 1
  %6822 = xor i32 %6813, %6807
  %6823 = xor i32 %6822, %6814
  %6824 = lshr i32 %6823, 4
  %6825 = trunc i32 %6824 to i8
  %6826 = and i8 %6825, 1
  store i8 %6826, i8* %45, align 1
  %6827 = icmp eq i32 %6814, 0
  %6828 = zext i1 %6827 to i8
  store i8 %6828, i8* %48, align 1
  %6829 = lshr i32 %6814, 31
  %6830 = trunc i32 %6829 to i8
  store i8 %6830, i8* %51, align 1
  %6831 = lshr i32 %6807, 31
  %6832 = lshr i32 %6813, 31
  %6833 = xor i32 %6832, %6831
  %6834 = xor i32 %6829, %6831
  %6835 = add nuw nsw i32 %6834, %6833
  %6836 = icmp eq i32 %6835, 2
  %6837 = zext i1 %6836 to i8
  store i8 %6837, i8* %57, align 1
  %6838 = icmp ne i8 %6830, 0
  %6839 = xor i1 %6838, %6836
  %.demorgan458 = or i1 %6827, %6839
  %.v604 = select i1 %.demorgan458, i64 9, i64 321
  %6840 = add i64 %6810, %.v604
  store i64 %6840, i64* %3, align 8
  br i1 %.demorgan458, label %block_42155c, label %block_.L_421694

block_42155c:                                     ; preds = %block_421543
  %6841 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %6841, i64* %RAX.i3587.phi.trans.insert, align 8
  %6842 = add i64 %6808, -100
  %6843 = add i64 %6840, 11
  store i64 %6843, i64* %3, align 8
  %6844 = inttoptr i64 %6842 to i32*
  %6845 = load i32, i32* %6844, align 4
  %6846 = zext i32 %6845 to i64
  store i64 %6846, i64* %RCX.i4260.pre-phi, align 8
  %6847 = add i64 %6808, -164
  %6848 = add i64 %6840, 17
  store i64 %6848, i64* %3, align 8
  %6849 = inttoptr i64 %6847 to i32*
  %6850 = load i32, i32* %6849, align 4
  %6851 = sub i32 %6845, %6850
  %6852 = zext i32 %6851 to i64
  store i64 %6852, i64* %RCX.i4260.pre-phi, align 8
  %6853 = icmp ult i32 %6845, %6850
  %6854 = zext i1 %6853 to i8
  store i8 %6854, i8* %32, align 1
  %6855 = and i32 %6851, 255
  %6856 = tail call i32 @llvm.ctpop.i32(i32 %6855)
  %6857 = trunc i32 %6856 to i8
  %6858 = and i8 %6857, 1
  %6859 = xor i8 %6858, 1
  store i8 %6859, i8* %39, align 1
  %6860 = xor i32 %6850, %6845
  %6861 = xor i32 %6860, %6851
  %6862 = lshr i32 %6861, 4
  %6863 = trunc i32 %6862 to i8
  %6864 = and i8 %6863, 1
  store i8 %6864, i8* %45, align 1
  %6865 = icmp eq i32 %6851, 0
  %6866 = zext i1 %6865 to i8
  store i8 %6866, i8* %48, align 1
  %6867 = lshr i32 %6851, 31
  %6868 = trunc i32 %6867 to i8
  store i8 %6868, i8* %51, align 1
  %6869 = lshr i32 %6845, 31
  %6870 = lshr i32 %6850, 31
  %6871 = xor i32 %6870, %6869
  %6872 = xor i32 %6867, %6869
  %6873 = add nuw nsw i32 %6872, %6871
  %6874 = icmp eq i32 %6873, 2
  %6875 = zext i1 %6874 to i8
  store i8 %6875, i8* %57, align 1
  %6876 = add i64 %6840, 20
  store i64 %6876, i64* %3, align 8
  %6877 = load i32, i32* %6812, align 4
  %6878 = add i32 %6877, %6851
  %6879 = zext i32 %6878 to i64
  store i64 %6879, i64* %RCX.i4260.pre-phi, align 8
  %6880 = icmp ult i32 %6878, %6851
  %6881 = icmp ult i32 %6878, %6877
  %6882 = or i1 %6880, %6881
  %6883 = zext i1 %6882 to i8
  store i8 %6883, i8* %32, align 1
  %6884 = and i32 %6878, 255
  %6885 = tail call i32 @llvm.ctpop.i32(i32 %6884)
  %6886 = trunc i32 %6885 to i8
  %6887 = and i8 %6886, 1
  %6888 = xor i8 %6887, 1
  store i8 %6888, i8* %39, align 1
  %6889 = xor i32 %6877, %6851
  %6890 = xor i32 %6889, %6878
  %6891 = lshr i32 %6890, 4
  %6892 = trunc i32 %6891 to i8
  %6893 = and i8 %6892, 1
  store i8 %6893, i8* %45, align 1
  %6894 = icmp eq i32 %6878, 0
  %6895 = zext i1 %6894 to i8
  store i8 %6895, i8* %48, align 1
  %6896 = lshr i32 %6878, 31
  %6897 = trunc i32 %6896 to i8
  store i8 %6897, i8* %51, align 1
  %6898 = lshr i32 %6877, 31
  %6899 = xor i32 %6896, %6867
  %6900 = xor i32 %6896, %6898
  %6901 = add nuw nsw i32 %6899, %6900
  %6902 = icmp eq i32 %6901, 2
  %6903 = zext i1 %6902 to i8
  store i8 %6903, i8* %57, align 1
  %6904 = sext i32 %6878 to i64
  store i64 %6904, i64* %RDX.i4317.pre-phi, align 8
  %6905 = shl nsw i64 %6904, 3
  %6906 = add i64 %6841, %6905
  %6907 = add i64 %6840, 27
  store i64 %6907, i64* %3, align 8
  %6908 = inttoptr i64 %6906 to i64*
  %6909 = load i64, i64* %6908, align 8
  store i64 %6909, i64* %RAX.i3587.phi.trans.insert, align 8
  %6910 = add i64 %6808, -96
  %6911 = add i64 %6840, 30
  store i64 %6911, i64* %3, align 8
  %6912 = inttoptr i64 %6910 to i32*
  %6913 = load i32, i32* %6912, align 4
  %6914 = zext i32 %6913 to i64
  store i64 %6914, i64* %RCX.i4260.pre-phi, align 8
  %6915 = load i64, i64* %RBP.i, align 8
  %6916 = add i64 %6915, -160
  %6917 = add i64 %6840, 36
  store i64 %6917, i64* %3, align 8
  %6918 = inttoptr i64 %6916 to i32*
  %6919 = load i32, i32* %6918, align 4
  %6920 = sub i32 %6913, %6919
  %6921 = zext i32 %6920 to i64
  store i64 %6921, i64* %RCX.i4260.pre-phi, align 8
  %6922 = icmp ult i32 %6913, %6919
  %6923 = zext i1 %6922 to i8
  store i8 %6923, i8* %32, align 1
  %6924 = and i32 %6920, 255
  %6925 = tail call i32 @llvm.ctpop.i32(i32 %6924)
  %6926 = trunc i32 %6925 to i8
  %6927 = and i8 %6926, 1
  %6928 = xor i8 %6927, 1
  store i8 %6928, i8* %39, align 1
  %6929 = xor i32 %6919, %6913
  %6930 = xor i32 %6929, %6920
  %6931 = lshr i32 %6930, 4
  %6932 = trunc i32 %6931 to i8
  %6933 = and i8 %6932, 1
  store i8 %6933, i8* %45, align 1
  %6934 = icmp eq i32 %6920, 0
  %6935 = zext i1 %6934 to i8
  store i8 %6935, i8* %48, align 1
  %6936 = lshr i32 %6920, 31
  %6937 = trunc i32 %6936 to i8
  store i8 %6937, i8* %51, align 1
  %6938 = lshr i32 %6913, 31
  %6939 = lshr i32 %6919, 31
  %6940 = xor i32 %6939, %6938
  %6941 = xor i32 %6936, %6938
  %6942 = add nuw nsw i32 %6941, %6940
  %6943 = icmp eq i32 %6942, 2
  %6944 = zext i1 %6943 to i8
  store i8 %6944, i8* %57, align 1
  %6945 = add i64 %6915, -76
  %6946 = add i64 %6840, 39
  store i64 %6946, i64* %3, align 8
  %6947 = inttoptr i64 %6945 to i32*
  %6948 = load i32, i32* %6947, align 4
  %6949 = add i32 %6948, %6920
  %6950 = zext i32 %6949 to i64
  store i64 %6950, i64* %RCX.i4260.pre-phi, align 8
  %6951 = icmp ult i32 %6949, %6920
  %6952 = icmp ult i32 %6949, %6948
  %6953 = or i1 %6951, %6952
  %6954 = zext i1 %6953 to i8
  store i8 %6954, i8* %32, align 1
  %6955 = and i32 %6949, 255
  %6956 = tail call i32 @llvm.ctpop.i32(i32 %6955)
  %6957 = trunc i32 %6956 to i8
  %6958 = and i8 %6957, 1
  %6959 = xor i8 %6958, 1
  store i8 %6959, i8* %39, align 1
  %6960 = xor i32 %6948, %6920
  %6961 = xor i32 %6960, %6949
  %6962 = lshr i32 %6961, 4
  %6963 = trunc i32 %6962 to i8
  %6964 = and i8 %6963, 1
  store i8 %6964, i8* %45, align 1
  %6965 = icmp eq i32 %6949, 0
  %6966 = zext i1 %6965 to i8
  store i8 %6966, i8* %48, align 1
  %6967 = lshr i32 %6949, 31
  %6968 = trunc i32 %6967 to i8
  store i8 %6968, i8* %51, align 1
  %6969 = lshr i32 %6948, 31
  %6970 = xor i32 %6967, %6936
  %6971 = xor i32 %6967, %6969
  %6972 = add nuw nsw i32 %6970, %6971
  %6973 = icmp eq i32 %6972, 2
  %6974 = zext i1 %6973 to i8
  store i8 %6974, i8* %57, align 1
  %6975 = sext i32 %6949 to i64
  store i64 %6975, i64* %RDX.i4317.pre-phi, align 8
  %6976 = shl nsw i64 %6975, 2
  %6977 = add i64 %6909, %6976
  %6978 = add i64 %6840, 46
  store i64 %6978, i64* %3, align 8
  %6979 = inttoptr i64 %6977 to i32*
  %6980 = load i32, i32* %6979, align 4
  store i8 0, i8* %32, align 1
  %6981 = and i32 %6980, 255
  %6982 = tail call i32 @llvm.ctpop.i32(i32 %6981)
  %6983 = trunc i32 %6982 to i8
  %6984 = and i8 %6983, 1
  %6985 = xor i8 %6984, 1
  store i8 %6985, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %6986 = icmp eq i32 %6980, 0
  %6987 = zext i1 %6986 to i8
  store i8 %6987, i8* %48, align 1
  %6988 = lshr i32 %6980, 31
  %6989 = trunc i32 %6988 to i8
  store i8 %6989, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v605 = select i1 %6986, i64 52, i64 307
  %6990 = add i64 %6840, %.v605
  store i64 %6990, i64* %3, align 8
  br i1 %6986, label %block_421590, label %block_.L_42168f

block_421590:                                     ; preds = %block_42155c
  %6991 = load i64, i64* %RBP.i, align 8
  %6992 = add i64 %6991, -132
  %6993 = add i64 %6990, 6
  store i64 %6993, i64* %3, align 8
  %6994 = inttoptr i64 %6992 to i32*
  %6995 = load i32, i32* %6994, align 4
  %6996 = zext i32 %6995 to i64
  store i64 %6996, i64* %RAX.i3587.phi.trans.insert, align 8
  %6997 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %6997, i64* %RCX.i4260.pre-phi, align 8
  %6998 = add i64 %6991, -96
  %6999 = add i64 %6990, 17
  store i64 %6999, i64* %3, align 8
  %7000 = inttoptr i64 %6998 to i32*
  %7001 = load i32, i32* %7000, align 4
  %7002 = zext i32 %7001 to i64
  store i64 %7002, i64* %RDX.i4317.pre-phi, align 8
  %7003 = add i64 %6991, -136
  %7004 = add i64 %6990, 23
  store i64 %7004, i64* %3, align 8
  %7005 = inttoptr i64 %7003 to i32*
  %7006 = load i32, i32* %7005, align 4
  %7007 = zext i32 %7006 to i64
  store i64 %7007, i64* %RSI.i739, align 8
  %7008 = add i64 %6991, -296
  %7009 = add i64 %6990, 30
  store i64 %7009, i64* %3, align 8
  %7010 = inttoptr i64 %7008 to i64*
  store i64 %6997, i64* %7010, align 8
  %7011 = load i32, i32* %ESI.i1656, align 4
  %7012 = zext i32 %7011 to i64
  %7013 = load i64, i64* %3, align 8
  store i64 %7012, i64* %RCX.i4260.pre-phi, align 8
  %7014 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %7015 = add i64 %7013, 4
  store i64 %7015, i64* %3, align 8
  %7016 = trunc i32 %7011 to i5
  switch i5 %7016, label %7023 [
    i5 0, label %routine_shll__cl___edx.exit4113
    i5 1, label %7017
  ]

; <label>:7017:                                   ; preds = %block_421590
  %7018 = trunc i64 %7014 to i32
  %7019 = shl i32 %7018, 1
  %7020 = icmp slt i32 %7018, 0
  %7021 = icmp slt i32 %7019, 0
  %7022 = xor i1 %7020, %7021
  br label %7033

; <label>:7023:                                   ; preds = %block_421590
  %7024 = and i32 %7011, 31
  %7025 = zext i32 %7024 to i64
  %7026 = add nuw nsw i64 %7025, 4294967295
  %7027 = and i64 %7014, 4294967295
  %7028 = and i64 %7026, 4294967295
  %7029 = shl i64 %7027, %7028
  %7030 = trunc i64 %7029 to i32
  %7031 = icmp slt i32 %7030, 0
  %7032 = shl i32 %7030, 1
  br label %7033

; <label>:7033:                                   ; preds = %7023, %7017
  %7034 = phi i1 [ %7020, %7017 ], [ %7031, %7023 ]
  %7035 = phi i1 [ %7022, %7017 ], [ false, %7023 ]
  %7036 = phi i32 [ %7019, %7017 ], [ %7032, %7023 ]
  %7037 = zext i32 %7036 to i64
  store i64 %7037, i64* %RDX.i4317.pre-phi, align 8
  %7038 = zext i1 %7034 to i8
  store i8 %7038, i8* %32, align 1
  %7039 = and i32 %7036, 254
  %7040 = tail call i32 @llvm.ctpop.i32(i32 %7039)
  %7041 = trunc i32 %7040 to i8
  %7042 = and i8 %7041, 1
  %7043 = xor i8 %7042, 1
  store i8 %7043, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7044 = icmp eq i32 %7036, 0
  %7045 = zext i1 %7044 to i8
  store i8 %7045, i8* %48, align 1
  %7046 = lshr i32 %7036, 31
  %7047 = trunc i32 %7046 to i8
  store i8 %7047, i8* %51, align 1
  %7048 = zext i1 %7035 to i8
  store i8 %7048, i8* %57, align 1
  br label %routine_shll__cl___edx.exit4113

routine_shll__cl___edx.exit4113:                  ; preds = %7033, %block_421590
  %7049 = phi i64 [ %7037, %7033 ], [ %7014, %block_421590 ]
  %7050 = load i64, i64* %RBP.i, align 8
  %7051 = add i64 %7050, -152
  %7052 = add i64 %7013, 10
  store i64 %7052, i64* %3, align 8
  %7053 = trunc i64 %7049 to i32
  %7054 = inttoptr i64 %7051 to i32*
  %7055 = load i32, i32* %7054, align 4
  %7056 = sub i32 %7053, %7055
  %7057 = zext i32 %7056 to i64
  store i64 %7057, i64* %RDX.i4317.pre-phi, align 8
  %7058 = icmp ult i32 %7053, %7055
  %7059 = zext i1 %7058 to i8
  store i8 %7059, i8* %32, align 1
  %7060 = and i32 %7056, 255
  %7061 = tail call i32 @llvm.ctpop.i32(i32 %7060)
  %7062 = trunc i32 %7061 to i8
  %7063 = and i8 %7062, 1
  %7064 = xor i8 %7063, 1
  store i8 %7064, i8* %39, align 1
  %7065 = xor i32 %7055, %7053
  %7066 = xor i32 %7065, %7056
  %7067 = lshr i32 %7066, 4
  %7068 = trunc i32 %7067 to i8
  %7069 = and i8 %7068, 1
  store i8 %7069, i8* %45, align 1
  %7070 = icmp eq i32 %7056, 0
  %7071 = zext i1 %7070 to i8
  store i8 %7071, i8* %48, align 1
  %7072 = lshr i32 %7056, 31
  %7073 = trunc i32 %7072 to i8
  store i8 %7073, i8* %51, align 1
  %7074 = lshr i32 %7053, 31
  %7075 = lshr i32 %7055, 31
  %7076 = xor i32 %7075, %7074
  %7077 = xor i32 %7072, %7074
  %7078 = add nuw nsw i32 %7077, %7076
  %7079 = icmp eq i32 %7078, 2
  %7080 = zext i1 %7079 to i8
  store i8 %7080, i8* %57, align 1
  %7081 = sext i32 %7056 to i64
  store i64 %7081, i64* %RDI.i1133, align 8
  %7082 = add i64 %7050, -296
  %7083 = add i64 %7013, 20
  store i64 %7083, i64* %3, align 8
  %7084 = inttoptr i64 %7082 to i64*
  %7085 = load i64, i64* %7084, align 8
  store i64 %7085, i64* %R8.i5602, align 8
  %7086 = shl nsw i64 %7081, 2
  %7087 = add i64 %7086, %7085
  %7088 = add i64 %7013, 24
  store i64 %7088, i64* %3, align 8
  %7089 = inttoptr i64 %7087 to i32*
  %7090 = load i32, i32* %7089, align 4
  %7091 = zext i32 %7090 to i64
  store i64 %7091, i64* %RDX.i4317.pre-phi, align 8
  %7092 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %7092, i64* %RDI.i1133, align 8
  %7093 = add i64 %7050, -100
  %7094 = add i64 %7013, 35
  store i64 %7094, i64* %3, align 8
  %7095 = inttoptr i64 %7093 to i32*
  %7096 = load i32, i32* %7095, align 4
  %7097 = zext i32 %7096 to i64
  store i64 %7097, i64* %RSI.i739, align 8
  %7098 = add i64 %7050, -136
  %7099 = add i64 %7013, 41
  store i64 %7099, i64* %3, align 8
  %7100 = inttoptr i64 %7098 to i32*
  %7101 = load i32, i32* %7100, align 4
  %7102 = zext i32 %7101 to i64
  store i64 %7102, i64* %RCX.i4260.pre-phi, align 8
  %7103 = add i64 %7013, 43
  store i64 %7103, i64* %3, align 8
  %7104 = trunc i32 %7101 to i5
  switch i5 %7104, label %7110 [
    i5 0, label %routine_shll__cl___esi.exit4088
    i5 1, label %7105
  ]

; <label>:7105:                                   ; preds = %routine_shll__cl___edx.exit4113
  %7106 = shl i32 %7096, 1
  %7107 = icmp slt i32 %7096, 0
  %7108 = icmp slt i32 %7106, 0
  %7109 = xor i1 %7107, %7108
  br label %7119

; <label>:7110:                                   ; preds = %routine_shll__cl___edx.exit4113
  %7111 = and i32 %7101, 31
  %7112 = zext i32 %7111 to i64
  %7113 = add nuw nsw i64 %7112, 4294967295
  %7114 = and i64 %7113, 4294967295
  %7115 = shl i64 %7097, %7114
  %7116 = trunc i64 %7115 to i32
  %7117 = icmp slt i32 %7116, 0
  %7118 = shl i32 %7116, 1
  br label %7119

; <label>:7119:                                   ; preds = %7110, %7105
  %7120 = phi i1 [ %7107, %7105 ], [ %7117, %7110 ]
  %7121 = phi i1 [ %7109, %7105 ], [ false, %7110 ]
  %7122 = phi i32 [ %7106, %7105 ], [ %7118, %7110 ]
  %7123 = zext i32 %7122 to i64
  store i64 %7123, i64* %RSI.i739, align 8
  %7124 = zext i1 %7120 to i8
  store i8 %7124, i8* %32, align 1
  %7125 = and i32 %7122, 254
  %7126 = tail call i32 @llvm.ctpop.i32(i32 %7125)
  %7127 = trunc i32 %7126 to i8
  %7128 = and i8 %7127, 1
  %7129 = xor i8 %7128, 1
  store i8 %7129, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7130 = icmp eq i32 %7122, 0
  %7131 = zext i1 %7130 to i8
  store i8 %7131, i8* %48, align 1
  %7132 = lshr i32 %7122, 31
  %7133 = trunc i32 %7132 to i8
  store i8 %7133, i8* %51, align 1
  %7134 = zext i1 %7121 to i8
  store i8 %7134, i8* %57, align 1
  br label %routine_shll__cl___esi.exit4088

routine_shll__cl___esi.exit4088:                  ; preds = %7119, %routine_shll__cl___edx.exit4113
  %7135 = phi i32 [ %7122, %7119 ], [ %7096, %routine_shll__cl___edx.exit4113 ]
  %7136 = add i64 %7050, -156
  %7137 = add i64 %7013, 49
  store i64 %7137, i64* %3, align 8
  %7138 = inttoptr i64 %7136 to i32*
  %7139 = load i32, i32* %7138, align 4
  %7140 = sub i32 %7135, %7139
  %7141 = zext i32 %7140 to i64
  store i64 %7141, i64* %RSI.i739, align 8
  %7142 = icmp ult i32 %7135, %7139
  %7143 = zext i1 %7142 to i8
  store i8 %7143, i8* %32, align 1
  %7144 = and i32 %7140, 255
  %7145 = tail call i32 @llvm.ctpop.i32(i32 %7144)
  %7146 = trunc i32 %7145 to i8
  %7147 = and i8 %7146, 1
  %7148 = xor i8 %7147, 1
  store i8 %7148, i8* %39, align 1
  %7149 = xor i32 %7139, %7135
  %7150 = xor i32 %7149, %7140
  %7151 = lshr i32 %7150, 4
  %7152 = trunc i32 %7151 to i8
  %7153 = and i8 %7152, 1
  store i8 %7153, i8* %45, align 1
  %7154 = icmp eq i32 %7140, 0
  %7155 = zext i1 %7154 to i8
  store i8 %7155, i8* %48, align 1
  %7156 = lshr i32 %7140, 31
  %7157 = trunc i32 %7156 to i8
  store i8 %7157, i8* %51, align 1
  %7158 = lshr i32 %7135, 31
  %7159 = lshr i32 %7139, 31
  %7160 = xor i32 %7159, %7158
  %7161 = xor i32 %7156, %7158
  %7162 = add nuw nsw i32 %7161, %7160
  %7163 = icmp eq i32 %7162, 2
  %7164 = zext i1 %7163 to i8
  store i8 %7164, i8* %57, align 1
  %7165 = sext i32 %7140 to i64
  store i64 %7165, i64* %R9.i5580, align 8
  %7166 = shl nsw i64 %7165, 2
  %7167 = add i64 %7092, %7166
  %7168 = add i64 %7013, 56
  store i64 %7168, i64* %3, align 8
  %7169 = inttoptr i64 %7167 to i32*
  %7170 = load i32, i32* %7169, align 4
  %7171 = add i32 %7170, %7090
  %7172 = zext i32 %7171 to i64
  store i64 %7172, i64* %RDX.i4317.pre-phi, align 8
  %7173 = icmp ult i32 %7171, %7090
  %7174 = icmp ult i32 %7171, %7170
  %7175 = or i1 %7173, %7174
  %7176 = zext i1 %7175 to i8
  store i8 %7176, i8* %32, align 1
  %7177 = and i32 %7171, 255
  %7178 = tail call i32 @llvm.ctpop.i32(i32 %7177)
  %7179 = trunc i32 %7178 to i8
  %7180 = and i8 %7179, 1
  %7181 = xor i8 %7180, 1
  store i8 %7181, i8* %39, align 1
  %7182 = xor i32 %7170, %7090
  %7183 = xor i32 %7182, %7171
  %7184 = lshr i32 %7183, 4
  %7185 = trunc i32 %7184 to i8
  %7186 = and i8 %7185, 1
  store i8 %7186, i8* %45, align 1
  %7187 = icmp eq i32 %7171, 0
  %7188 = zext i1 %7187 to i8
  store i8 %7188, i8* %48, align 1
  %7189 = lshr i32 %7171, 31
  %7190 = trunc i32 %7189 to i8
  store i8 %7190, i8* %51, align 1
  %7191 = lshr i32 %7090, 31
  %7192 = lshr i32 %7170, 31
  %7193 = xor i32 %7189, %7191
  %7194 = xor i32 %7189, %7192
  %7195 = add nuw nsw i32 %7193, %7194
  %7196 = icmp eq i32 %7195, 2
  %7197 = zext i1 %7196 to i8
  store i8 %7197, i8* %57, align 1
  %7198 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %7199 = shl i64 %7198, 32
  %7200 = ashr exact i64 %7199, 32
  %7201 = sext i32 %7171 to i64
  %7202 = mul nsw i64 %7201, %7200
  %7203 = shl i64 %7202, 32
  %7204 = ashr i64 %7203, 47
  %7205 = lshr i64 %7204, 1
  %7206 = trunc i64 %7204 to i8
  %7207 = and i8 %7206, 1
  %7208 = trunc i64 %7205 to i32
  %7209 = and i64 %7205, 4294967295
  store i64 %7209, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %7207, i8* %32, align 1
  %7210 = and i32 %7208, 255
  %7211 = tail call i32 @llvm.ctpop.i32(i32 %7210)
  %7212 = trunc i32 %7211 to i8
  %7213 = and i8 %7212, 1
  %7214 = xor i8 %7213, 1
  store i8 %7214, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7215 = icmp eq i32 %7208, 0
  %7216 = zext i1 %7215 to i8
  store i8 %7216, i8* %48, align 1
  %7217 = lshr i64 %7204, 32
  %7218 = trunc i64 %7217 to i8
  %7219 = and i8 %7218, 1
  store i8 %7219, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %7220 = load i64, i64* %RBP.i, align 8
  %7221 = add i64 %7220, -104
  %7222 = trunc i64 %7205 to i32
  %7223 = add i64 %7013, 65
  store i64 %7223, i64* %3, align 8
  %7224 = inttoptr i64 %7221 to i32*
  store i32 %7222, i32* %7224, align 4
  %7225 = load i64, i64* %RBP.i, align 8
  %7226 = add i64 %7225, -128
  %7227 = load i64, i64* %3, align 8
  %7228 = add i64 %7227, 4
  store i64 %7228, i64* %3, align 8
  %7229 = inttoptr i64 %7226 to i64*
  %7230 = load i64, i64* %7229, align 8
  store i64 %7230, i64* %RDI.i1133, align 8
  %7231 = add i64 %7225, -32
  %7232 = add i64 %7227, 8
  store i64 %7232, i64* %3, align 8
  %7233 = inttoptr i64 %7231 to i64*
  %7234 = load i64, i64* %7233, align 8
  store i64 %7234, i64* %RSI.i739, align 8
  %7235 = add i64 %7225, -112
  %7236 = add i64 %7227, 12
  store i64 %7236, i64* %3, align 8
  %7237 = inttoptr i64 %7235 to i64*
  %7238 = load i64, i64* %7237, align 8
  store i64 %7238, i64* %RDX.i4317.pre-phi, align 8
  %7239 = add i64 %7225, -140
  %7240 = add i64 %7227, 18
  store i64 %7240, i64* %3, align 8
  %7241 = inttoptr i64 %7239 to i32*
  %7242 = load i32, i32* %7241, align 4
  %7243 = zext i32 %7242 to i64
  store i64 %7243, i64* %RCX.i4260.pre-phi, align 8
  %7244 = add i64 %7225, -144
  %7245 = add i64 %7227, 25
  store i64 %7245, i64* %3, align 8
  %7246 = inttoptr i64 %7244 to i32*
  %7247 = load i32, i32* %7246, align 4
  %7248 = zext i32 %7247 to i64
  store i64 %7248, i64* %R8.i5602, align 8
  %7249 = add i64 %7225, -148
  %7250 = add i64 %7227, 32
  store i64 %7250, i64* %3, align 8
  %7251 = inttoptr i64 %7249 to i32*
  %7252 = load i32, i32* %7251, align 4
  %7253 = zext i32 %7252 to i64
  store i64 %7253, i64* %R9.i5580, align 8
  %7254 = add i64 %7225, -104
  %7255 = add i64 %7227, 35
  store i64 %7255, i64* %3, align 8
  %7256 = inttoptr i64 %7254 to i32*
  %7257 = load i32, i32* %7256, align 4
  %7258 = zext i32 %7257 to i64
  store i64 %7258, i64* %RAX.i3587.phi.trans.insert, align 8
  %7259 = add i64 %7225, -80
  %7260 = add i64 %7227, 39
  store i64 %7260, i64* %3, align 8
  %7261 = inttoptr i64 %7259 to i32*
  %7262 = load i32, i32* %7261, align 4
  %7263 = zext i32 %7262 to i64
  store i64 %7263, i64* %68, align 8
  %7264 = add i64 %7225, -96
  %7265 = add i64 %7227, 43
  store i64 %7265, i64* %3, align 8
  %7266 = inttoptr i64 %7264 to i32*
  %7267 = load i32, i32* %7266, align 4
  %7268 = zext i32 %7267 to i64
  store i64 %7268, i64* %R11.i, align 8
  %7269 = add i64 %7225, -100
  %7270 = add i64 %7227, 46
  store i64 %7270, i64* %3, align 8
  %7271 = inttoptr i64 %7269 to i32*
  %7272 = load i32, i32* %7271, align 4
  %7273 = zext i32 %7272 to i64
  store i64 %7273, i64* %RBX.i615, align 8
  %7274 = load i32*, i32** %2119, align 8
  %7275 = add i64 %7227, 49
  store i64 %7275, i64* %3, align 8
  store i32 %7257, i32* %7274, align 4
  %7276 = load i64, i64* %6, align 8
  %7277 = add i64 %7276, 8
  %7278 = load i32, i32* %R10D.i761, align 4
  %7279 = load i64, i64* %3, align 8
  %7280 = add i64 %7279, 5
  store i64 %7280, i64* %3, align 8
  %7281 = inttoptr i64 %7277 to i32*
  store i32 %7278, i32* %7281, align 4
  %7282 = load i64, i64* %6, align 8
  %7283 = add i64 %7282, 16
  %7284 = load i32, i32* %R11D.i5540, align 4
  %7285 = load i64, i64* %3, align 8
  %7286 = add i64 %7285, 5
  store i64 %7286, i64* %3, align 8
  %7287 = inttoptr i64 %7283 to i32*
  store i32 %7284, i32* %7287, align 4
  %7288 = load i64, i64* %6, align 8
  %7289 = add i64 %7288, 24
  %7290 = load i32, i32* %EBX.i5525, align 4
  %7291 = load i64, i64* %3, align 8
  %7292 = add i64 %7291, 4
  store i64 %7292, i64* %3, align 8
  %7293 = inttoptr i64 %7289 to i32*
  store i32 %7290, i32* %7293, align 4
  %7294 = load i64, i64* %3, align 8
  %7295 = add i64 %7294, -4478
  %7296 = add i64 %7294, 5
  %7297 = load i64, i64* %6, align 8
  %7298 = add i64 %7297, -8
  %7299 = inttoptr i64 %7298 to i64*
  store i64 %7296, i64* %7299, align 8
  store i64 %7298, i64* %6, align 8
  store i64 %7295, i64* %3, align 8
  %call2_42162e = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %7295, %struct.Memory* %6806)
  %7300 = load i64, i64* %RBP.i, align 8
  %7301 = add i64 %7300, -104
  %7302 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %7303 = load i64, i64* %3, align 8
  %7304 = add i64 %7303, 3
  store i64 %7304, i64* %3, align 8
  %7305 = inttoptr i64 %7301 to i32*
  store i32 %7302, i32* %7305, align 4
  %7306 = load i64, i64* %RBP.i, align 8
  %7307 = add i64 %7306, -104
  %7308 = load i64, i64* %3, align 8
  %7309 = add i64 %7308, 3
  store i64 %7309, i64* %3, align 8
  %7310 = inttoptr i64 %7307 to i32*
  %7311 = load i32, i32* %7310, align 4
  %7312 = zext i32 %7311 to i64
  store i64 %7312, i64* %RAX.i3587.phi.trans.insert, align 8
  %7313 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %7313, i64* %RDX.i4317.pre-phi, align 8
  %7314 = add i64 %7306, -100
  %7315 = add i64 %7308, 14
  store i64 %7315, i64* %3, align 8
  %7316 = inttoptr i64 %7314 to i32*
  %7317 = load i32, i32* %7316, align 4
  %7318 = zext i32 %7317 to i64
  store i64 %7318, i64* %RCX.i4260.pre-phi, align 8
  %7319 = add i64 %7306, -164
  %7320 = add i64 %7308, 20
  store i64 %7320, i64* %3, align 8
  %7321 = inttoptr i64 %7319 to i32*
  %7322 = load i32, i32* %7321, align 4
  %7323 = sub i32 %7317, %7322
  %7324 = zext i32 %7323 to i64
  store i64 %7324, i64* %RCX.i4260.pre-phi, align 8
  %7325 = icmp ult i32 %7317, %7322
  %7326 = zext i1 %7325 to i8
  store i8 %7326, i8* %32, align 1
  %7327 = and i32 %7323, 255
  %7328 = tail call i32 @llvm.ctpop.i32(i32 %7327)
  %7329 = trunc i32 %7328 to i8
  %7330 = and i8 %7329, 1
  %7331 = xor i8 %7330, 1
  store i8 %7331, i8* %39, align 1
  %7332 = xor i32 %7322, %7317
  %7333 = xor i32 %7332, %7323
  %7334 = lshr i32 %7333, 4
  %7335 = trunc i32 %7334 to i8
  %7336 = and i8 %7335, 1
  store i8 %7336, i8* %45, align 1
  %7337 = icmp eq i32 %7323, 0
  %7338 = zext i1 %7337 to i8
  store i8 %7338, i8* %48, align 1
  %7339 = lshr i32 %7323, 31
  %7340 = trunc i32 %7339 to i8
  store i8 %7340, i8* %51, align 1
  %7341 = lshr i32 %7317, 31
  %7342 = lshr i32 %7322, 31
  %7343 = xor i32 %7342, %7341
  %7344 = xor i32 %7339, %7341
  %7345 = add nuw nsw i32 %7344, %7343
  %7346 = icmp eq i32 %7345, 2
  %7347 = zext i1 %7346 to i8
  store i8 %7347, i8* %57, align 1
  %7348 = add i64 %7306, -76
  %7349 = add i64 %7308, 23
  store i64 %7349, i64* %3, align 8
  %7350 = inttoptr i64 %7348 to i32*
  %7351 = load i32, i32* %7350, align 4
  %7352 = add i32 %7351, %7323
  %7353 = zext i32 %7352 to i64
  store i64 %7353, i64* %RCX.i4260.pre-phi, align 8
  %7354 = icmp ult i32 %7352, %7323
  %7355 = icmp ult i32 %7352, %7351
  %7356 = or i1 %7354, %7355
  %7357 = zext i1 %7356 to i8
  store i8 %7357, i8* %32, align 1
  %7358 = and i32 %7352, 255
  %7359 = tail call i32 @llvm.ctpop.i32(i32 %7358)
  %7360 = trunc i32 %7359 to i8
  %7361 = and i8 %7360, 1
  %7362 = xor i8 %7361, 1
  store i8 %7362, i8* %39, align 1
  %7363 = xor i32 %7351, %7323
  %7364 = xor i32 %7363, %7352
  %7365 = lshr i32 %7364, 4
  %7366 = trunc i32 %7365 to i8
  %7367 = and i8 %7366, 1
  store i8 %7367, i8* %45, align 1
  %7368 = icmp eq i32 %7352, 0
  %7369 = zext i1 %7368 to i8
  store i8 %7369, i8* %48, align 1
  %7370 = lshr i32 %7352, 31
  %7371 = trunc i32 %7370 to i8
  store i8 %7371, i8* %51, align 1
  %7372 = lshr i32 %7351, 31
  %7373 = xor i32 %7370, %7339
  %7374 = xor i32 %7370, %7372
  %7375 = add nuw nsw i32 %7373, %7374
  %7376 = icmp eq i32 %7375, 2
  %7377 = zext i1 %7376 to i8
  store i8 %7377, i8* %57, align 1
  %7378 = sext i32 %7352 to i64
  store i64 %7378, i64* %RSI.i739, align 8
  %7379 = shl nsw i64 %7378, 3
  %7380 = add i64 %7313, %7379
  %7381 = add i64 %7308, 30
  store i64 %7381, i64* %3, align 8
  %7382 = inttoptr i64 %7380 to i64*
  %7383 = load i64, i64* %7382, align 8
  store i64 %7383, i64* %RDX.i4317.pre-phi, align 8
  %7384 = load i64, i64* %RBP.i, align 8
  %7385 = add i64 %7384, -96
  %7386 = add i64 %7308, 33
  store i64 %7386, i64* %3, align 8
  %7387 = inttoptr i64 %7385 to i32*
  %7388 = load i32, i32* %7387, align 4
  %7389 = zext i32 %7388 to i64
  store i64 %7389, i64* %RCX.i4260.pre-phi, align 8
  %7390 = add i64 %7384, -160
  %7391 = add i64 %7308, 39
  store i64 %7391, i64* %3, align 8
  %7392 = inttoptr i64 %7390 to i32*
  %7393 = load i32, i32* %7392, align 4
  %7394 = sub i32 %7388, %7393
  %7395 = zext i32 %7394 to i64
  store i64 %7395, i64* %RCX.i4260.pre-phi, align 8
  %7396 = icmp ult i32 %7388, %7393
  %7397 = zext i1 %7396 to i8
  store i8 %7397, i8* %32, align 1
  %7398 = and i32 %7394, 255
  %7399 = tail call i32 @llvm.ctpop.i32(i32 %7398)
  %7400 = trunc i32 %7399 to i8
  %7401 = and i8 %7400, 1
  %7402 = xor i8 %7401, 1
  store i8 %7402, i8* %39, align 1
  %7403 = xor i32 %7393, %7388
  %7404 = xor i32 %7403, %7394
  %7405 = lshr i32 %7404, 4
  %7406 = trunc i32 %7405 to i8
  %7407 = and i8 %7406, 1
  store i8 %7407, i8* %45, align 1
  %7408 = icmp eq i32 %7394, 0
  %7409 = zext i1 %7408 to i8
  store i8 %7409, i8* %48, align 1
  %7410 = lshr i32 %7394, 31
  %7411 = trunc i32 %7410 to i8
  store i8 %7411, i8* %51, align 1
  %7412 = lshr i32 %7388, 31
  %7413 = lshr i32 %7393, 31
  %7414 = xor i32 %7413, %7412
  %7415 = xor i32 %7410, %7412
  %7416 = add nuw nsw i32 %7415, %7414
  %7417 = icmp eq i32 %7416, 2
  %7418 = zext i1 %7417 to i8
  store i8 %7418, i8* %57, align 1
  %7419 = add i64 %7384, -76
  %7420 = add i64 %7308, 42
  store i64 %7420, i64* %3, align 8
  %7421 = inttoptr i64 %7419 to i32*
  %7422 = load i32, i32* %7421, align 4
  %7423 = add i32 %7422, %7394
  %7424 = zext i32 %7423 to i64
  store i64 %7424, i64* %RCX.i4260.pre-phi, align 8
  %7425 = icmp ult i32 %7423, %7394
  %7426 = icmp ult i32 %7423, %7422
  %7427 = or i1 %7425, %7426
  %7428 = zext i1 %7427 to i8
  store i8 %7428, i8* %32, align 1
  %7429 = and i32 %7423, 255
  %7430 = tail call i32 @llvm.ctpop.i32(i32 %7429)
  %7431 = trunc i32 %7430 to i8
  %7432 = and i8 %7431, 1
  %7433 = xor i8 %7432, 1
  store i8 %7433, i8* %39, align 1
  %7434 = xor i32 %7422, %7394
  %7435 = xor i32 %7434, %7423
  %7436 = lshr i32 %7435, 4
  %7437 = trunc i32 %7436 to i8
  %7438 = and i8 %7437, 1
  store i8 %7438, i8* %45, align 1
  %7439 = icmp eq i32 %7423, 0
  %7440 = zext i1 %7439 to i8
  store i8 %7440, i8* %48, align 1
  %7441 = lshr i32 %7423, 31
  %7442 = trunc i32 %7441 to i8
  store i8 %7442, i8* %51, align 1
  %7443 = lshr i32 %7422, 31
  %7444 = xor i32 %7441, %7410
  %7445 = xor i32 %7441, %7443
  %7446 = add nuw nsw i32 %7444, %7445
  %7447 = icmp eq i32 %7446, 2
  %7448 = zext i1 %7447 to i8
  store i8 %7448, i8* %57, align 1
  %7449 = sext i32 %7423 to i64
  store i64 %7449, i64* %RSI.i739, align 8
  %7450 = shl nsw i64 %7449, 2
  %7451 = add i64 %7383, %7450
  %7452 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %7453 = add i64 %7308, 48
  store i64 %7453, i64* %3, align 8
  %7454 = inttoptr i64 %7451 to i32*
  store i32 %7452, i32* %7454, align 4
  %7455 = load i64, i64* %RBP.i, align 8
  %7456 = add i64 %7455, -104
  %7457 = load i64, i64* %3, align 8
  %7458 = add i64 %7457, 3
  store i64 %7458, i64* %3, align 8
  %7459 = inttoptr i64 %7456 to i32*
  %7460 = load i32, i32* %7459, align 4
  %7461 = zext i32 %7460 to i64
  store i64 %7461, i64* %RAX.i3587.phi.trans.insert, align 8
  %7462 = add i64 %7455, -80
  %7463 = add i64 %7457, 6
  store i64 %7463, i64* %3, align 8
  %7464 = inttoptr i64 %7462 to i32*
  %7465 = load i32, i32* %7464, align 4
  %7466 = sub i32 %7460, %7465
  %7467 = icmp ult i32 %7460, %7465
  %7468 = zext i1 %7467 to i8
  store i8 %7468, i8* %32, align 1
  %7469 = and i32 %7466, 255
  %7470 = tail call i32 @llvm.ctpop.i32(i32 %7469)
  %7471 = trunc i32 %7470 to i8
  %7472 = and i8 %7471, 1
  %7473 = xor i8 %7472, 1
  store i8 %7473, i8* %39, align 1
  %7474 = xor i32 %7465, %7460
  %7475 = xor i32 %7474, %7466
  %7476 = lshr i32 %7475, 4
  %7477 = trunc i32 %7476 to i8
  %7478 = and i8 %7477, 1
  store i8 %7478, i8* %45, align 1
  %7479 = icmp eq i32 %7466, 0
  %7480 = zext i1 %7479 to i8
  store i8 %7480, i8* %48, align 1
  %7481 = lshr i32 %7466, 31
  %7482 = trunc i32 %7481 to i8
  store i8 %7482, i8* %51, align 1
  %7483 = lshr i32 %7460, 31
  %7484 = lshr i32 %7465, 31
  %7485 = xor i32 %7484, %7483
  %7486 = xor i32 %7481, %7483
  %7487 = add nuw nsw i32 %7486, %7485
  %7488 = icmp eq i32 %7487, 2
  %7489 = zext i1 %7488 to i8
  store i8 %7489, i8* %57, align 1
  %7490 = icmp ne i8 %7482, 0
  %7491 = xor i1 %7490, %7488
  %.v606 = select i1 %7491, i64 12, i64 36
  %7492 = add i64 %7457, %.v606
  store i64 %7492, i64* %3, align 8
  br i1 %7491, label %block_421672, label %block_.L_42168a

block_421672:                                     ; preds = %routine_shll__cl___esi.exit4088
  %7493 = add i64 %7455, -96
  %7494 = add i64 %7492, 3
  store i64 %7494, i64* %3, align 8
  %7495 = inttoptr i64 %7493 to i32*
  %7496 = load i32, i32* %7495, align 4
  %7497 = zext i32 %7496 to i64
  store i64 %7497, i64* %RAX.i3587.phi.trans.insert, align 8
  %7498 = add i64 %7455, -168
  %7499 = add i64 %7492, 9
  store i64 %7499, i64* %3, align 8
  %7500 = inttoptr i64 %7498 to i32*
  store i32 %7496, i32* %7500, align 4
  %7501 = load i64, i64* %RBP.i, align 8
  %7502 = add i64 %7501, -100
  %7503 = load i64, i64* %3, align 8
  %7504 = add i64 %7503, 3
  store i64 %7504, i64* %3, align 8
  %7505 = inttoptr i64 %7502 to i32*
  %7506 = load i32, i32* %7505, align 4
  %7507 = zext i32 %7506 to i64
  store i64 %7507, i64* %RAX.i3587.phi.trans.insert, align 8
  %7508 = add i64 %7501, -172
  %7509 = add i64 %7503, 9
  store i64 %7509, i64* %3, align 8
  %7510 = inttoptr i64 %7508 to i32*
  store i32 %7506, i32* %7510, align 4
  %7511 = load i64, i64* %RBP.i, align 8
  %7512 = add i64 %7511, -104
  %7513 = load i64, i64* %3, align 8
  %7514 = add i64 %7513, 3
  store i64 %7514, i64* %3, align 8
  %7515 = inttoptr i64 %7512 to i32*
  %7516 = load i32, i32* %7515, align 4
  %7517 = zext i32 %7516 to i64
  store i64 %7517, i64* %RAX.i3587.phi.trans.insert, align 8
  %7518 = add i64 %7511, -80
  %7519 = add i64 %7513, 6
  store i64 %7519, i64* %3, align 8
  %7520 = inttoptr i64 %7518 to i32*
  store i32 %7516, i32* %7520, align 4
  %.pre284 = load i64, i64* %3, align 8
  br label %block_.L_42168a

block_.L_42168a:                                  ; preds = %routine_shll__cl___esi.exit4088, %block_421672
  %7521 = phi i64 [ %7492, %routine_shll__cl___esi.exit4088 ], [ %.pre284, %block_421672 ]
  %7522 = add i64 %7521, 5
  store i64 %7522, i64* %3, align 8
  br label %block_.L_42168f

block_.L_42168f:                                  ; preds = %block_42155c, %block_.L_42168a
  %7523 = phi i64 [ %6990, %block_42155c ], [ %7522, %block_.L_42168a ]
  %MEMORY.32 = phi %struct.Memory* [ %6806, %block_42155c ], [ %call2_42162e, %block_.L_42168a ]
  %7524 = add i64 %7523, 5
  store i64 %7524, i64* %3, align 8
  br label %block_.L_421694

block_.L_421694:                                  ; preds = %block_421543, %routine_idivl__esi.exit4208, %block_.L_42168f
  %7525 = phi i64 [ %6766, %routine_idivl__esi.exit4208 ], [ %6840, %block_421543 ], [ %7524, %block_.L_42168f ]
  %MEMORY.33 = phi %struct.Memory* [ %6732, %routine_idivl__esi.exit4208 ], [ %6806, %block_421543 ], [ %MEMORY.32, %block_.L_42168f ]
  %7526 = add i64 %7525, 5
  store i64 %7526, i64* %3, align 8
  br label %block_.L_421699

block_.L_421699:                                  ; preds = %block_.L_4214c4, %block_.L_421694, %routine_idivl_MINUS0xcc__rbp_.exit
  %7527 = phi i64 [ %6492, %block_.L_4214c4 ], [ %6543, %routine_idivl_MINUS0xcc__rbp_.exit ], [ %7526, %block_.L_421694 ]
  %MEMORY.34 = phi %struct.Memory* [ %MEMORY.28, %block_.L_4214c4 ], [ %6518, %routine_idivl_MINUS0xcc__rbp_.exit ], [ %MEMORY.33, %block_.L_421694 ]
  %7528 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %7528, i64* %RAX.i3587.phi.trans.insert, align 8
  %7529 = add i64 %7528, 2880
  %7530 = add i64 %7527, 15
  store i64 %7530, i64* %3, align 8
  %7531 = inttoptr i64 %7529 to i32*
  %7532 = load i32, i32* %7531, align 4
  %7533 = add i32 %7532, -1
  %7534 = icmp eq i32 %7532, 0
  %7535 = zext i1 %7534 to i8
  store i8 %7535, i8* %32, align 1
  %7536 = and i32 %7533, 255
  %7537 = tail call i32 @llvm.ctpop.i32(i32 %7536)
  %7538 = trunc i32 %7537 to i8
  %7539 = and i8 %7538, 1
  %7540 = xor i8 %7539, 1
  store i8 %7540, i8* %39, align 1
  %7541 = xor i32 %7533, %7532
  %7542 = lshr i32 %7541, 4
  %7543 = trunc i32 %7542 to i8
  %7544 = and i8 %7543, 1
  store i8 %7544, i8* %45, align 1
  %7545 = icmp eq i32 %7533, 0
  %7546 = zext i1 %7545 to i8
  store i8 %7546, i8* %48, align 1
  %7547 = lshr i32 %7533, 31
  %7548 = trunc i32 %7547 to i8
  store i8 %7548, i8* %51, align 1
  %7549 = lshr i32 %7532, 31
  %7550 = xor i32 %7547, %7549
  %7551 = add nuw nsw i32 %7550, %7549
  %7552 = icmp eq i32 %7551, 2
  %7553 = zext i1 %7552 to i8
  store i8 %7553, i8* %57, align 1
  %.v531 = select i1 %7545, i64 21, i64 539
  %7554 = add i64 %7527, %.v531
  %7555 = load i64, i64* %RBP.i, align 8
  %7556 = add i64 %7555, -40
  %7557 = add i64 %7554, 4
  store i64 %7557, i64* %3, align 8
  %7558 = inttoptr i64 %7556 to i32*
  %7559 = load i32, i32* %7558, align 4
  store i8 0, i8* %32, align 1
  %7560 = and i32 %7559, 255
  %7561 = tail call i32 @llvm.ctpop.i32(i32 %7560)
  %7562 = trunc i32 %7561 to i8
  %7563 = and i8 %7562, 1
  %7564 = xor i8 %7563, 1
  store i8 %7564, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7565 = icmp eq i32 %7559, 0
  %7566 = zext i1 %7565 to i8
  store i8 %7566, i8* %48, align 1
  %7567 = lshr i32 %7559, 31
  %7568 = trunc i32 %7567 to i8
  store i8 %7568, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v532 = select i1 %7565, i64 10, i64 23
  %7569 = add i64 %7554, %.v532
  store i64 %7569, i64* %3, align 8
  br i1 %7545, label %block_4216ae, label %block_.L_4218b4

block_4216ae:                                     ; preds = %block_.L_421699
  br i1 %7565, label %block_4216b8, label %block_.L_4216c5

block_4216b8:                                     ; preds = %block_4216ae
  %7570 = add i64 %7555, -34
  %7571 = add i64 %7569, 4
  store i64 %7571, i64* %3, align 8
  %7572 = inttoptr i64 %7570 to i16*
  %7573 = load i16, i16* %7572, align 2
  %7574 = sext i16 %7573 to i64
  %7575 = and i64 %7574, 4294967295
  store i64 %7575, i64* %RAX.i3587.phi.trans.insert, align 8
  %7576 = sext i16 %7573 to i32
  store i8 0, i8* %32, align 1
  %7577 = and i32 %7576, 255
  %7578 = tail call i32 @llvm.ctpop.i32(i32 %7577)
  %7579 = trunc i32 %7578 to i8
  %7580 = and i8 %7579, 1
  %7581 = xor i8 %7580, 1
  store i8 %7581, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7582 = icmp eq i16 %7573, 0
  %7583 = zext i1 %7582 to i8
  store i8 %7583, i8* %48, align 1
  %7584 = lshr i32 %7576, 31
  %7585 = trunc i32 %7584 to i8
  store i8 %7585, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %7586 = xor i1 %7582, true
  %7587 = icmp eq i8 %7585, 0
  %7588 = and i1 %7587, %7586
  %.v603 = select i1 %7588, i64 67, i64 13
  %7589 = add i64 %7569, %.v603
  store i64 %7589, i64* %3, align 8
  br i1 %7588, label %block_.L_4216fb, label %block_.L_4216c5

block_.L_4216c5:                                  ; preds = %block_4216ae, %block_4216b8
  %7590 = phi i64 [ %7589, %block_4216b8 ], [ %7569, %block_4216ae ]
  %7591 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7591, i64* %RAX.i3587.phi.trans.insert, align 8
  %7592 = add i64 %7591, 24
  %7593 = add i64 %7590, 12
  store i64 %7593, i64* %3, align 8
  %7594 = inttoptr i64 %7592 to i32*
  %7595 = load i32, i32* %7594, align 4
  %7596 = add i32 %7595, -1
  %7597 = icmp eq i32 %7595, 0
  %7598 = zext i1 %7597 to i8
  store i8 %7598, i8* %32, align 1
  %7599 = and i32 %7596, 255
  %7600 = tail call i32 @llvm.ctpop.i32(i32 %7599)
  %7601 = trunc i32 %7600 to i8
  %7602 = and i8 %7601, 1
  %7603 = xor i8 %7602, 1
  store i8 %7603, i8* %39, align 1
  %7604 = xor i32 %7596, %7595
  %7605 = lshr i32 %7604, 4
  %7606 = trunc i32 %7605 to i8
  %7607 = and i8 %7606, 1
  store i8 %7607, i8* %45, align 1
  %7608 = icmp eq i32 %7596, 0
  %7609 = zext i1 %7608 to i8
  store i8 %7609, i8* %48, align 1
  %7610 = lshr i32 %7596, 31
  %7611 = trunc i32 %7610 to i8
  store i8 %7611, i8* %51, align 1
  %7612 = lshr i32 %7595, 31
  %7613 = xor i32 %7610, %7612
  %7614 = add nuw nsw i32 %7613, %7612
  %7615 = icmp eq i32 %7614, 2
  %7616 = zext i1 %7615 to i8
  store i8 %7616, i8* %57, align 1
  %.v595 = select i1 %7608, i64 18, i64 490
  %7617 = add i64 %7590, %.v595
  store i64 %7617, i64* %3, align 8
  br i1 %7608, label %block_4216d7, label %block_.L_4218af

block_4216d7:                                     ; preds = %block_.L_4216c5
  %7618 = add i64 %7617, 4
  store i64 %7618, i64* %3, align 8
  %7619 = load i32, i32* %7558, align 4
  store i8 0, i8* %32, align 1
  %7620 = and i32 %7619, 255
  %7621 = tail call i32 @llvm.ctpop.i32(i32 %7620)
  %7622 = trunc i32 %7621 to i8
  %7623 = and i8 %7622, 1
  %7624 = xor i8 %7623, 1
  store i8 %7624, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7625 = icmp eq i32 %7619, 0
  %7626 = zext i1 %7625 to i8
  store i8 %7626, i8* %48, align 1
  %7627 = lshr i32 %7619, 31
  %7628 = trunc i32 %7627 to i8
  store i8 %7628, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v596 = select i1 %7625, i64 10, i64 472
  %7629 = add i64 %7617, %.v596
  store i64 %7629, i64* %3, align 8
  br i1 %7625, label %block_4216e1, label %block_.L_4218af

block_4216e1:                                     ; preds = %block_4216d7
  %7630 = add i64 %7555, -34
  %7631 = add i64 %7629, 4
  store i64 %7631, i64* %3, align 8
  %7632 = inttoptr i64 %7630 to i16*
  %7633 = load i16, i16* %7632, align 2
  %7634 = sext i16 %7633 to i64
  %7635 = and i64 %7634, 4294967295
  store i64 %7635, i64* %RAX.i3587.phi.trans.insert, align 8
  %7636 = sext i16 %7633 to i32
  store i8 0, i8* %32, align 1
  %7637 = and i32 %7636, 255
  %7638 = tail call i32 @llvm.ctpop.i32(i32 %7637)
  %7639 = trunc i32 %7638 to i8
  %7640 = and i8 %7639, 1
  %7641 = xor i8 %7640, 1
  store i8 %7641, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %7642 = icmp eq i16 %7633, 0
  %7643 = zext i1 %7642 to i8
  store i8 %7643, i8* %48, align 1
  %7644 = lshr i32 %7636, 31
  %7645 = trunc i32 %7644 to i8
  store i8 %7645, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v597 = select i1 %7642, i64 26, i64 13
  %7646 = add i64 %7629, %.v597
  store i64 %7646, i64* %3, align 8
  br i1 %7642, label %block_.L_4216fb, label %block_4216ee

block_4216ee:                                     ; preds = %block_4216e1
  %7647 = add i64 %7646, 4
  store i64 %7647, i64* %3, align 8
  %7648 = load i16, i16* %7632, align 2
  %7649 = sext i16 %7648 to i64
  %7650 = and i64 %7649, 4294967295
  store i64 %7650, i64* %RAX.i3587.phi.trans.insert, align 8
  %7651 = sext i16 %7648 to i32
  %7652 = add nsw i32 %7651, -2
  %7653 = icmp ult i16 %7648, 2
  %7654 = zext i1 %7653 to i8
  store i8 %7654, i8* %32, align 1
  %7655 = and i32 %7652, 255
  %7656 = tail call i32 @llvm.ctpop.i32(i32 %7655)
  %7657 = trunc i32 %7656 to i8
  %7658 = and i8 %7657, 1
  %7659 = xor i8 %7658, 1
  store i8 %7659, i8* %39, align 1
  %7660 = xor i32 %7652, %7651
  %7661 = lshr i32 %7660, 4
  %7662 = trunc i32 %7661 to i8
  %7663 = and i8 %7662, 1
  store i8 %7663, i8* %45, align 1
  %7664 = icmp eq i32 %7652, 0
  %7665 = zext i1 %7664 to i8
  store i8 %7665, i8* %48, align 1
  %7666 = lshr i32 %7652, 31
  %7667 = trunc i32 %7666 to i8
  store i8 %7667, i8* %51, align 1
  %7668 = lshr i32 %7651, 31
  %7669 = xor i32 %7666, %7668
  %7670 = add nuw nsw i32 %7669, %7668
  %7671 = icmp eq i32 %7670, 2
  %7672 = zext i1 %7671 to i8
  store i8 %7672, i8* %57, align 1
  %.v598 = select i1 %7664, i64 13, i64 449
  %7673 = add i64 %7646, %.v598
  store i64 %7673, i64* %3, align 8
  br i1 %7664, label %block_.L_4216fb, label %block_.L_4218af

block_.L_4216fb:                                  ; preds = %block_4216ee, %block_4216e1, %block_4216b8
  %7674 = phi i64 [ %7673, %block_4216ee ], [ %7646, %block_4216e1 ], [ %7589, %block_4216b8 ]
  store i64 4, i64* %RAX.i3587.phi.trans.insert, align 8
  %7675 = add i64 %7555, -44
  %7676 = add i64 %7674, 8
  store i64 %7676, i64* %3, align 8
  %7677 = inttoptr i64 %7675 to i32*
  %7678 = load i32, i32* %7677, align 4
  %7679 = zext i32 %7678 to i64
  store i64 %7679, i64* %RCX.i4260.pre-phi, align 8
  %7680 = load i32, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  %7681 = zext i32 %7680 to i64
  store i64 %7681, i64* %RDX.i4317.pre-phi, align 8
  %7682 = add i64 %7555, -300
  %7683 = add i64 %7674, 21
  store i64 %7683, i64* %3, align 8
  %7684 = inttoptr i64 %7682 to i32*
  store i32 4, i32* %7684, align 4
  %7685 = load i32, i32* %EDX.i1187, align 4
  %7686 = zext i32 %7685 to i64
  %7687 = load i64, i64* %3, align 8
  store i64 %7686, i64* %RAX.i3587.phi.trans.insert, align 8
  %7688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7689 = sext i32 %7685 to i64
  %7690 = lshr i64 %7689, 32
  store i64 %7690, i64* %7688, align 8
  %7691 = load i64, i64* %RBP.i, align 8
  %7692 = add i64 %7691, -300
  %7693 = add i64 %7687, 9
  store i64 %7693, i64* %3, align 8
  %7694 = inttoptr i64 %7692 to i32*
  %7695 = load i32, i32* %7694, align 4
  %7696 = zext i32 %7695 to i64
  store i64 %7696, i64* %RSI.i739, align 8
  %7697 = add i64 %7687, 11
  store i64 %7697, i64* %3, align 8
  %7698 = sext i32 %7695 to i64
  %7699 = shl nuw i64 %7690, 32
  %7700 = or i64 %7699, %7686
  %7701 = sdiv i64 %7700, %7698
  %7702 = shl i64 %7701, 32
  %7703 = ashr exact i64 %7702, 32
  %7704 = icmp eq i64 %7701, %7703
  br i1 %7704, label %7707, label %7705

; <label>:7705:                                   ; preds = %block_.L_4216fb
  %7706 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7697, %struct.Memory* %MEMORY.34)
  %.pre285 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %.pre286 = load i64, i64* %3, align 8
  %.pre287 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit3903

; <label>:7707:                                   ; preds = %block_.L_4216fb
  %7708 = srem i64 %7700, %7698
  %7709 = and i64 %7701, 4294967295
  store i64 %7709, i64* %RAX.i3587.phi.trans.insert, align 8
  %7710 = and i64 %7708, 4294967295
  store i64 %7710, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %7711 = trunc i64 %7701 to i32
  br label %routine_idivl__esi.exit3903

routine_idivl__esi.exit3903:                      ; preds = %7707, %7705
  %7712 = phi i64 [ %.pre287, %7705 ], [ %7691, %7707 ]
  %7713 = phi i64 [ %.pre286, %7705 ], [ %7697, %7707 ]
  %7714 = phi i32 [ %.pre285, %7705 ], [ %7711, %7707 ]
  %7715 = phi %struct.Memory* [ %7706, %7705 ], [ %MEMORY.34, %7707 ]
  %7716 = load i64, i64* %RCX.i4260.pre-phi, align 8
  %7717 = zext i32 %7714 to i64
  %7718 = trunc i64 %7716 to i32
  %7719 = add i32 %7714, %7718
  %7720 = zext i32 %7719 to i64
  store i64 %7720, i64* %RCX.i4260.pre-phi, align 8
  %7721 = icmp ult i32 %7719, %7718
  %7722 = icmp ult i32 %7719, %7714
  %7723 = or i1 %7721, %7722
  %7724 = zext i1 %7723 to i8
  store i8 %7724, i8* %32, align 1
  %7725 = and i32 %7719, 255
  %7726 = tail call i32 @llvm.ctpop.i32(i32 %7725)
  %7727 = trunc i32 %7726 to i8
  %7728 = and i8 %7727, 1
  %7729 = xor i8 %7728, 1
  store i8 %7729, i8* %39, align 1
  %7730 = xor i64 %7717, %7716
  %7731 = trunc i64 %7730 to i32
  %7732 = xor i32 %7731, %7719
  %7733 = lshr i32 %7732, 4
  %7734 = trunc i32 %7733 to i8
  %7735 = and i8 %7734, 1
  store i8 %7735, i8* %45, align 1
  %7736 = icmp eq i32 %7719, 0
  %7737 = zext i1 %7736 to i8
  store i8 %7737, i8* %48, align 1
  %7738 = lshr i32 %7719, 31
  %7739 = trunc i32 %7738 to i8
  store i8 %7739, i8* %51, align 1
  %7740 = lshr i32 %7718, 31
  %7741 = lshr i32 %7714, 31
  %7742 = xor i32 %7738, %7740
  %7743 = xor i32 %7738, %7741
  %7744 = add nuw nsw i32 %7742, %7743
  %7745 = icmp eq i32 %7744, 2
  %7746 = zext i1 %7745 to i8
  store i8 %7746, i8* %57, align 1
  %7747 = add i64 %7712, -96
  %7748 = add i64 %7713, 5
  store i64 %7748, i64* %3, align 8
  %7749 = inttoptr i64 %7747 to i32*
  store i32 %7719, i32* %7749, align 4
  %7750 = load i64, i64* %RBP.i, align 8
  %7751 = add i64 %7750, -48
  %7752 = load i64, i64* %3, align 8
  %7753 = add i64 %7752, 3
  store i64 %7753, i64* %3, align 8
  %7754 = inttoptr i64 %7751 to i32*
  %7755 = load i32, i32* %7754, align 4
  %7756 = zext i32 %7755 to i64
  store i64 %7756, i64* %RAX.i3587.phi.trans.insert, align 8
  %7757 = load i32, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  %7758 = zext i32 %7757 to i64
  store i64 %7758, i64* %RCX.i4260.pre-phi, align 8
  %7759 = add i64 %7750, -304
  %7760 = add i64 %7752, 16
  store i64 %7760, i64* %3, align 8
  %7761 = inttoptr i64 %7759 to i32*
  store i32 %7755, i32* %7761, align 4
  %7762 = load i32, i32* %ECX.i1211, align 4
  %7763 = zext i32 %7762 to i64
  %7764 = load i64, i64* %3, align 8
  store i64 %7763, i64* %RAX.i3587.phi.trans.insert, align 8
  %7765 = sext i32 %7762 to i64
  %7766 = lshr i64 %7765, 32
  store i64 %7766, i64* %7688, align 8
  %7767 = load i32, i32* %ESI.i1656, align 4
  %7768 = add i64 %7764, 5
  store i64 %7768, i64* %3, align 8
  %7769 = sext i32 %7767 to i64
  %7770 = shl nuw i64 %7766, 32
  %7771 = or i64 %7770, %7763
  %7772 = sdiv i64 %7771, %7769
  %7773 = shl i64 %7772, 32
  %7774 = ashr exact i64 %7773, 32
  %7775 = icmp eq i64 %7772, %7774
  br i1 %7775, label %7778, label %7776

; <label>:7776:                                   ; preds = %routine_idivl__esi.exit3903
  %7777 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7768, %struct.Memory* %7715)
  %.pre288 = load i64, i64* %3, align 8
  %.pre289 = load i32, i32* %EAX.i4185.pre-phi, align 4
  br label %routine_idivl__esi.exit3879

; <label>:7778:                                   ; preds = %routine_idivl__esi.exit3903
  %7779 = srem i64 %7771, %7769
  %7780 = and i64 %7772, 4294967295
  store i64 %7780, i64* %RAX.i3587.phi.trans.insert, align 8
  %7781 = and i64 %7779, 4294967295
  store i64 %7781, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %7782 = trunc i64 %7772 to i32
  br label %routine_idivl__esi.exit3879

routine_idivl__esi.exit3879:                      ; preds = %7778, %7776
  %7783 = phi i32 [ %.pre289, %7776 ], [ %7782, %7778 ]
  %7784 = phi i64 [ %.pre288, %7776 ], [ %7768, %7778 ]
  %7785 = phi %struct.Memory* [ %7777, %7776 ], [ %7715, %7778 ]
  %7786 = load i64, i64* %RBP.i, align 8
  %7787 = add i64 %7786, -304
  %7788 = add i64 %7784, 6
  store i64 %7788, i64* %3, align 8
  %7789 = inttoptr i64 %7787 to i32*
  %7790 = load i32, i32* %7789, align 4
  %7791 = add i32 %7783, %7790
  %7792 = zext i32 %7791 to i64
  store i64 %7792, i64* %RCX.i4260.pre-phi, align 8
  %7793 = icmp ult i32 %7791, %7790
  %7794 = icmp ult i32 %7791, %7783
  %7795 = or i1 %7793, %7794
  %7796 = zext i1 %7795 to i8
  store i8 %7796, i8* %32, align 1
  %7797 = and i32 %7791, 255
  %7798 = tail call i32 @llvm.ctpop.i32(i32 %7797)
  %7799 = trunc i32 %7798 to i8
  %7800 = and i8 %7799, 1
  %7801 = xor i8 %7800, 1
  store i8 %7801, i8* %39, align 1
  %7802 = xor i32 %7783, %7790
  %7803 = xor i32 %7802, %7791
  %7804 = lshr i32 %7803, 4
  %7805 = trunc i32 %7804 to i8
  %7806 = and i8 %7805, 1
  store i8 %7806, i8* %45, align 1
  %7807 = icmp eq i32 %7791, 0
  %7808 = zext i1 %7807 to i8
  store i8 %7808, i8* %48, align 1
  %7809 = lshr i32 %7791, 31
  %7810 = trunc i32 %7809 to i8
  store i8 %7810, i8* %51, align 1
  %7811 = lshr i32 %7790, 31
  %7812 = lshr i32 %7783, 31
  %7813 = xor i32 %7809, %7811
  %7814 = xor i32 %7809, %7812
  %7815 = add nuw nsw i32 %7813, %7814
  %7816 = icmp eq i32 %7815, 2
  %7817 = zext i1 %7816 to i8
  store i8 %7817, i8* %57, align 1
  %7818 = add i64 %7786, -100
  %7819 = add i64 %7784, 11
  store i64 %7819, i64* %3, align 8
  %7820 = inttoptr i64 %7818 to i32*
  store i32 %7791, i32* %7820, align 4
  %7821 = load i64, i64* %RBP.i, align 8
  %7822 = add i64 %7821, -96
  %7823 = load i64, i64* %3, align 8
  %7824 = add i64 %7823, 3
  store i64 %7824, i64* %3, align 8
  %7825 = inttoptr i64 %7822 to i32*
  %7826 = load i32, i32* %7825, align 4
  %7827 = zext i32 %7826 to i64
  store i64 %7827, i64* %RAX.i3587.phi.trans.insert, align 8
  %7828 = add i64 %7821, -160
  %7829 = add i64 %7823, 9
  store i64 %7829, i64* %3, align 8
  %7830 = inttoptr i64 %7828 to i32*
  %7831 = load i32, i32* %7830, align 4
  %7832 = sub i32 %7826, %7831
  %7833 = zext i32 %7832 to i64
  store i64 %7833, i64* %RAX.i3587.phi.trans.insert, align 8
  %7834 = icmp ult i32 %7826, %7831
  %7835 = zext i1 %7834 to i8
  store i8 %7835, i8* %32, align 1
  %7836 = and i32 %7832, 255
  %7837 = tail call i32 @llvm.ctpop.i32(i32 %7836)
  %7838 = trunc i32 %7837 to i8
  %7839 = and i8 %7838, 1
  %7840 = xor i8 %7839, 1
  store i8 %7840, i8* %39, align 1
  %7841 = xor i32 %7831, %7826
  %7842 = xor i32 %7841, %7832
  %7843 = lshr i32 %7842, 4
  %7844 = trunc i32 %7843 to i8
  %7845 = and i8 %7844, 1
  store i8 %7845, i8* %45, align 1
  %7846 = icmp eq i32 %7832, 0
  %7847 = zext i1 %7846 to i8
  store i8 %7847, i8* %48, align 1
  %7848 = lshr i32 %7832, 31
  %7849 = trunc i32 %7848 to i8
  store i8 %7849, i8* %51, align 1
  %7850 = lshr i32 %7826, 31
  %7851 = lshr i32 %7831, 31
  %7852 = xor i32 %7851, %7850
  %7853 = xor i32 %7848, %7850
  %7854 = add nuw nsw i32 %7853, %7852
  %7855 = icmp eq i32 %7854, 2
  %7856 = zext i1 %7855 to i8
  store i8 %7856, i8* %57, align 1
  store i64 %7833, i64* %RDI.i1133, align 8
  %7857 = add i64 %7823, -132928
  %7858 = add i64 %7823, 16
  %7859 = load i64, i64* %6, align 8
  %7860 = add i64 %7859, -8
  %7861 = inttoptr i64 %7860 to i64*
  store i64 %7858, i64* %7861, align 8
  store i64 %7860, i64* %6, align 8
  store i64 %7857, i64* %3, align 8
  %7862 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %7785)
  %7863 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %7864 = load i64, i64* %RBP.i, align 8
  %7865 = add i64 %7864, -76
  %7866 = load i64, i64* %3, align 8
  %7867 = add i64 %7866, 3
  store i64 %7867, i64* %3, align 8
  %7868 = inttoptr i64 %7865 to i32*
  %7869 = load i32, i32* %7868, align 4
  %7870 = sub i32 %7863, %7869
  %7871 = icmp ult i32 %7863, %7869
  %7872 = zext i1 %7871 to i8
  store i8 %7872, i8* %32, align 1
  %7873 = and i32 %7870, 255
  %7874 = tail call i32 @llvm.ctpop.i32(i32 %7873)
  %7875 = trunc i32 %7874 to i8
  %7876 = and i8 %7875, 1
  %7877 = xor i8 %7876, 1
  store i8 %7877, i8* %39, align 1
  %7878 = xor i32 %7869, %7863
  %7879 = xor i32 %7878, %7870
  %7880 = lshr i32 %7879, 4
  %7881 = trunc i32 %7880 to i8
  %7882 = and i8 %7881, 1
  store i8 %7882, i8* %45, align 1
  %7883 = icmp eq i32 %7870, 0
  %7884 = zext i1 %7883 to i8
  store i8 %7884, i8* %48, align 1
  %7885 = lshr i32 %7870, 31
  %7886 = trunc i32 %7885 to i8
  store i8 %7886, i8* %51, align 1
  %7887 = lshr i32 %7863, 31
  %7888 = lshr i32 %7869, 31
  %7889 = xor i32 %7888, %7887
  %7890 = xor i32 %7885, %7887
  %7891 = add nuw nsw i32 %7890, %7889
  %7892 = icmp eq i32 %7891, 2
  %7893 = zext i1 %7892 to i8
  store i8 %7893, i8* %57, align 1
  %7894 = icmp ne i8 %7886, 0
  %7895 = xor i1 %7894, %7892
  %.demorgan459 = or i1 %7883, %7895
  %.v599 = select i1 %.demorgan459, i64 9, i64 346
  %7896 = add i64 %7866, %.v599
  store i64 %7896, i64* %3, align 8
  br i1 %.demorgan459, label %block_421759, label %block_.L_4218aa

block_421759:                                     ; preds = %routine_idivl__esi.exit3879
  %7897 = add i64 %7864, -100
  %7898 = add i64 %7896, 3
  store i64 %7898, i64* %3, align 8
  %7899 = inttoptr i64 %7897 to i32*
  %7900 = load i32, i32* %7899, align 4
  %7901 = zext i32 %7900 to i64
  store i64 %7901, i64* %RAX.i3587.phi.trans.insert, align 8
  %7902 = add i64 %7864, -164
  %7903 = add i64 %7896, 9
  store i64 %7903, i64* %3, align 8
  %7904 = inttoptr i64 %7902 to i32*
  %7905 = load i32, i32* %7904, align 4
  %7906 = sub i32 %7900, %7905
  %7907 = zext i32 %7906 to i64
  store i64 %7907, i64* %RAX.i3587.phi.trans.insert, align 8
  %7908 = icmp ult i32 %7900, %7905
  %7909 = zext i1 %7908 to i8
  store i8 %7909, i8* %32, align 1
  %7910 = and i32 %7906, 255
  %7911 = tail call i32 @llvm.ctpop.i32(i32 %7910)
  %7912 = trunc i32 %7911 to i8
  %7913 = and i8 %7912, 1
  %7914 = xor i8 %7913, 1
  store i8 %7914, i8* %39, align 1
  %7915 = xor i32 %7905, %7900
  %7916 = xor i32 %7915, %7906
  %7917 = lshr i32 %7916, 4
  %7918 = trunc i32 %7917 to i8
  %7919 = and i8 %7918, 1
  store i8 %7919, i8* %45, align 1
  %7920 = icmp eq i32 %7906, 0
  %7921 = zext i1 %7920 to i8
  store i8 %7921, i8* %48, align 1
  %7922 = lshr i32 %7906, 31
  %7923 = trunc i32 %7922 to i8
  store i8 %7923, i8* %51, align 1
  %7924 = lshr i32 %7900, 31
  %7925 = lshr i32 %7905, 31
  %7926 = xor i32 %7925, %7924
  %7927 = xor i32 %7922, %7924
  %7928 = add nuw nsw i32 %7927, %7926
  %7929 = icmp eq i32 %7928, 2
  %7930 = zext i1 %7929 to i8
  store i8 %7930, i8* %57, align 1
  store i64 %7907, i64* %RDI.i1133, align 8
  %7931 = add i64 %7896, -132953
  %7932 = add i64 %7896, 16
  %7933 = load i64, i64* %6, align 8
  %7934 = add i64 %7933, -8
  %7935 = inttoptr i64 %7934 to i64*
  store i64 %7932, i64* %7935, align 8
  store i64 %7934, i64* %6, align 8
  store i64 %7931, i64* %3, align 8
  %7936 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %7862)
  %7937 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %7938 = load i64, i64* %RBP.i, align 8
  %7939 = add i64 %7938, -76
  %7940 = load i64, i64* %3, align 8
  %7941 = add i64 %7940, 3
  store i64 %7941, i64* %3, align 8
  %7942 = inttoptr i64 %7939 to i32*
  %7943 = load i32, i32* %7942, align 4
  %7944 = sub i32 %7937, %7943
  %7945 = icmp ult i32 %7937, %7943
  %7946 = zext i1 %7945 to i8
  store i8 %7946, i8* %32, align 1
  %7947 = and i32 %7944, 255
  %7948 = tail call i32 @llvm.ctpop.i32(i32 %7947)
  %7949 = trunc i32 %7948 to i8
  %7950 = and i8 %7949, 1
  %7951 = xor i8 %7950, 1
  store i8 %7951, i8* %39, align 1
  %7952 = xor i32 %7943, %7937
  %7953 = xor i32 %7952, %7944
  %7954 = lshr i32 %7953, 4
  %7955 = trunc i32 %7954 to i8
  %7956 = and i8 %7955, 1
  store i8 %7956, i8* %45, align 1
  %7957 = icmp eq i32 %7944, 0
  %7958 = zext i1 %7957 to i8
  store i8 %7958, i8* %48, align 1
  %7959 = lshr i32 %7944, 31
  %7960 = trunc i32 %7959 to i8
  store i8 %7960, i8* %51, align 1
  %7961 = lshr i32 %7937, 31
  %7962 = lshr i32 %7943, 31
  %7963 = xor i32 %7962, %7961
  %7964 = xor i32 %7959, %7961
  %7965 = add nuw nsw i32 %7964, %7963
  %7966 = icmp eq i32 %7965, 2
  %7967 = zext i1 %7966 to i8
  store i8 %7967, i8* %57, align 1
  %7968 = icmp ne i8 %7960, 0
  %7969 = xor i1 %7968, %7966
  %.demorgan460 = or i1 %7957, %7969
  %.v600 = select i1 %.demorgan460, i64 9, i64 321
  %7970 = add i64 %7940, %.v600
  store i64 %7970, i64* %3, align 8
  br i1 %.demorgan460, label %block_421772, label %block_.L_4218aa

block_421772:                                     ; preds = %block_421759
  %7971 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %7971, i64* %RAX.i3587.phi.trans.insert, align 8
  %7972 = add i64 %7938, -100
  %7973 = add i64 %7970, 11
  store i64 %7973, i64* %3, align 8
  %7974 = inttoptr i64 %7972 to i32*
  %7975 = load i32, i32* %7974, align 4
  %7976 = zext i32 %7975 to i64
  store i64 %7976, i64* %RCX.i4260.pre-phi, align 8
  %7977 = add i64 %7938, -164
  %7978 = add i64 %7970, 17
  store i64 %7978, i64* %3, align 8
  %7979 = inttoptr i64 %7977 to i32*
  %7980 = load i32, i32* %7979, align 4
  %7981 = sub i32 %7975, %7980
  %7982 = zext i32 %7981 to i64
  store i64 %7982, i64* %RCX.i4260.pre-phi, align 8
  %7983 = icmp ult i32 %7975, %7980
  %7984 = zext i1 %7983 to i8
  store i8 %7984, i8* %32, align 1
  %7985 = and i32 %7981, 255
  %7986 = tail call i32 @llvm.ctpop.i32(i32 %7985)
  %7987 = trunc i32 %7986 to i8
  %7988 = and i8 %7987, 1
  %7989 = xor i8 %7988, 1
  store i8 %7989, i8* %39, align 1
  %7990 = xor i32 %7980, %7975
  %7991 = xor i32 %7990, %7981
  %7992 = lshr i32 %7991, 4
  %7993 = trunc i32 %7992 to i8
  %7994 = and i8 %7993, 1
  store i8 %7994, i8* %45, align 1
  %7995 = icmp eq i32 %7981, 0
  %7996 = zext i1 %7995 to i8
  store i8 %7996, i8* %48, align 1
  %7997 = lshr i32 %7981, 31
  %7998 = trunc i32 %7997 to i8
  store i8 %7998, i8* %51, align 1
  %7999 = lshr i32 %7975, 31
  %8000 = lshr i32 %7980, 31
  %8001 = xor i32 %8000, %7999
  %8002 = xor i32 %7997, %7999
  %8003 = add nuw nsw i32 %8002, %8001
  %8004 = icmp eq i32 %8003, 2
  %8005 = zext i1 %8004 to i8
  store i8 %8005, i8* %57, align 1
  %8006 = add i64 %7970, 20
  store i64 %8006, i64* %3, align 8
  %8007 = load i32, i32* %7942, align 4
  %8008 = add i32 %8007, %7981
  %8009 = zext i32 %8008 to i64
  store i64 %8009, i64* %RCX.i4260.pre-phi, align 8
  %8010 = icmp ult i32 %8008, %7981
  %8011 = icmp ult i32 %8008, %8007
  %8012 = or i1 %8010, %8011
  %8013 = zext i1 %8012 to i8
  store i8 %8013, i8* %32, align 1
  %8014 = and i32 %8008, 255
  %8015 = tail call i32 @llvm.ctpop.i32(i32 %8014)
  %8016 = trunc i32 %8015 to i8
  %8017 = and i8 %8016, 1
  %8018 = xor i8 %8017, 1
  store i8 %8018, i8* %39, align 1
  %8019 = xor i32 %8007, %7981
  %8020 = xor i32 %8019, %8008
  %8021 = lshr i32 %8020, 4
  %8022 = trunc i32 %8021 to i8
  %8023 = and i8 %8022, 1
  store i8 %8023, i8* %45, align 1
  %8024 = icmp eq i32 %8008, 0
  %8025 = zext i1 %8024 to i8
  store i8 %8025, i8* %48, align 1
  %8026 = lshr i32 %8008, 31
  %8027 = trunc i32 %8026 to i8
  store i8 %8027, i8* %51, align 1
  %8028 = lshr i32 %8007, 31
  %8029 = xor i32 %8026, %7997
  %8030 = xor i32 %8026, %8028
  %8031 = add nuw nsw i32 %8029, %8030
  %8032 = icmp eq i32 %8031, 2
  %8033 = zext i1 %8032 to i8
  store i8 %8033, i8* %57, align 1
  %8034 = sext i32 %8008 to i64
  store i64 %8034, i64* %RDX.i4317.pre-phi, align 8
  %8035 = shl nsw i64 %8034, 3
  %8036 = add i64 %7971, %8035
  %8037 = add i64 %7970, 27
  store i64 %8037, i64* %3, align 8
  %8038 = inttoptr i64 %8036 to i64*
  %8039 = load i64, i64* %8038, align 8
  store i64 %8039, i64* %RAX.i3587.phi.trans.insert, align 8
  %8040 = add i64 %7938, -96
  %8041 = add i64 %7970, 30
  store i64 %8041, i64* %3, align 8
  %8042 = inttoptr i64 %8040 to i32*
  %8043 = load i32, i32* %8042, align 4
  %8044 = zext i32 %8043 to i64
  store i64 %8044, i64* %RCX.i4260.pre-phi, align 8
  %8045 = load i64, i64* %RBP.i, align 8
  %8046 = add i64 %8045, -160
  %8047 = add i64 %7970, 36
  store i64 %8047, i64* %3, align 8
  %8048 = inttoptr i64 %8046 to i32*
  %8049 = load i32, i32* %8048, align 4
  %8050 = sub i32 %8043, %8049
  %8051 = zext i32 %8050 to i64
  store i64 %8051, i64* %RCX.i4260.pre-phi, align 8
  %8052 = icmp ult i32 %8043, %8049
  %8053 = zext i1 %8052 to i8
  store i8 %8053, i8* %32, align 1
  %8054 = and i32 %8050, 255
  %8055 = tail call i32 @llvm.ctpop.i32(i32 %8054)
  %8056 = trunc i32 %8055 to i8
  %8057 = and i8 %8056, 1
  %8058 = xor i8 %8057, 1
  store i8 %8058, i8* %39, align 1
  %8059 = xor i32 %8049, %8043
  %8060 = xor i32 %8059, %8050
  %8061 = lshr i32 %8060, 4
  %8062 = trunc i32 %8061 to i8
  %8063 = and i8 %8062, 1
  store i8 %8063, i8* %45, align 1
  %8064 = icmp eq i32 %8050, 0
  %8065 = zext i1 %8064 to i8
  store i8 %8065, i8* %48, align 1
  %8066 = lshr i32 %8050, 31
  %8067 = trunc i32 %8066 to i8
  store i8 %8067, i8* %51, align 1
  %8068 = lshr i32 %8043, 31
  %8069 = lshr i32 %8049, 31
  %8070 = xor i32 %8069, %8068
  %8071 = xor i32 %8066, %8068
  %8072 = add nuw nsw i32 %8071, %8070
  %8073 = icmp eq i32 %8072, 2
  %8074 = zext i1 %8073 to i8
  store i8 %8074, i8* %57, align 1
  %8075 = add i64 %8045, -76
  %8076 = add i64 %7970, 39
  store i64 %8076, i64* %3, align 8
  %8077 = inttoptr i64 %8075 to i32*
  %8078 = load i32, i32* %8077, align 4
  %8079 = add i32 %8078, %8050
  %8080 = zext i32 %8079 to i64
  store i64 %8080, i64* %RCX.i4260.pre-phi, align 8
  %8081 = icmp ult i32 %8079, %8050
  %8082 = icmp ult i32 %8079, %8078
  %8083 = or i1 %8081, %8082
  %8084 = zext i1 %8083 to i8
  store i8 %8084, i8* %32, align 1
  %8085 = and i32 %8079, 255
  %8086 = tail call i32 @llvm.ctpop.i32(i32 %8085)
  %8087 = trunc i32 %8086 to i8
  %8088 = and i8 %8087, 1
  %8089 = xor i8 %8088, 1
  store i8 %8089, i8* %39, align 1
  %8090 = xor i32 %8078, %8050
  %8091 = xor i32 %8090, %8079
  %8092 = lshr i32 %8091, 4
  %8093 = trunc i32 %8092 to i8
  %8094 = and i8 %8093, 1
  store i8 %8094, i8* %45, align 1
  %8095 = icmp eq i32 %8079, 0
  %8096 = zext i1 %8095 to i8
  store i8 %8096, i8* %48, align 1
  %8097 = lshr i32 %8079, 31
  %8098 = trunc i32 %8097 to i8
  store i8 %8098, i8* %51, align 1
  %8099 = lshr i32 %8078, 31
  %8100 = xor i32 %8097, %8066
  %8101 = xor i32 %8097, %8099
  %8102 = add nuw nsw i32 %8100, %8101
  %8103 = icmp eq i32 %8102, 2
  %8104 = zext i1 %8103 to i8
  store i8 %8104, i8* %57, align 1
  %8105 = sext i32 %8079 to i64
  store i64 %8105, i64* %RDX.i4317.pre-phi, align 8
  %8106 = shl nsw i64 %8105, 2
  %8107 = add i64 %8039, %8106
  %8108 = add i64 %7970, 46
  store i64 %8108, i64* %3, align 8
  %8109 = inttoptr i64 %8107 to i32*
  %8110 = load i32, i32* %8109, align 4
  store i8 0, i8* %32, align 1
  %8111 = and i32 %8110, 255
  %8112 = tail call i32 @llvm.ctpop.i32(i32 %8111)
  %8113 = trunc i32 %8112 to i8
  %8114 = and i8 %8113, 1
  %8115 = xor i8 %8114, 1
  store i8 %8115, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8116 = icmp eq i32 %8110, 0
  %8117 = zext i1 %8116 to i8
  store i8 %8117, i8* %48, align 1
  %8118 = lshr i32 %8110, 31
  %8119 = trunc i32 %8118 to i8
  store i8 %8119, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v601 = select i1 %8116, i64 52, i64 307
  %8120 = add i64 %7970, %.v601
  store i64 %8120, i64* %3, align 8
  br i1 %8116, label %block_4217a6, label %block_.L_4218a5

block_4217a6:                                     ; preds = %block_421772
  %8121 = load i64, i64* %RBP.i, align 8
  %8122 = add i64 %8121, -132
  %8123 = add i64 %8120, 6
  store i64 %8123, i64* %3, align 8
  %8124 = inttoptr i64 %8122 to i32*
  %8125 = load i32, i32* %8124, align 4
  %8126 = zext i32 %8125 to i64
  store i64 %8126, i64* %RAX.i3587.phi.trans.insert, align 8
  %8127 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %8127, i64* %RCX.i4260.pre-phi, align 8
  %8128 = add i64 %8121, -96
  %8129 = add i64 %8120, 17
  store i64 %8129, i64* %3, align 8
  %8130 = inttoptr i64 %8128 to i32*
  %8131 = load i32, i32* %8130, align 4
  %8132 = zext i32 %8131 to i64
  store i64 %8132, i64* %RDX.i4317.pre-phi, align 8
  %8133 = add i64 %8121, -136
  %8134 = add i64 %8120, 23
  store i64 %8134, i64* %3, align 8
  %8135 = inttoptr i64 %8133 to i32*
  %8136 = load i32, i32* %8135, align 4
  %8137 = zext i32 %8136 to i64
  store i64 %8137, i64* %RSI.i739, align 8
  %8138 = add i64 %8121, -312
  %8139 = add i64 %8120, 30
  store i64 %8139, i64* %3, align 8
  %8140 = inttoptr i64 %8138 to i64*
  store i64 %8127, i64* %8140, align 8
  %8141 = load i32, i32* %ESI.i1656, align 4
  %8142 = zext i32 %8141 to i64
  %8143 = load i64, i64* %3, align 8
  store i64 %8142, i64* %RCX.i4260.pre-phi, align 8
  %8144 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %8145 = add i64 %8143, 4
  store i64 %8145, i64* %3, align 8
  %8146 = trunc i32 %8141 to i5
  switch i5 %8146, label %8153 [
    i5 0, label %routine_shll__cl___edx.exit3785
    i5 1, label %8147
  ]

; <label>:8147:                                   ; preds = %block_4217a6
  %8148 = trunc i64 %8144 to i32
  %8149 = shl i32 %8148, 1
  %8150 = icmp slt i32 %8148, 0
  %8151 = icmp slt i32 %8149, 0
  %8152 = xor i1 %8150, %8151
  br label %8163

; <label>:8153:                                   ; preds = %block_4217a6
  %8154 = and i32 %8141, 31
  %8155 = zext i32 %8154 to i64
  %8156 = add nuw nsw i64 %8155, 4294967295
  %8157 = and i64 %8144, 4294967295
  %8158 = and i64 %8156, 4294967295
  %8159 = shl i64 %8157, %8158
  %8160 = trunc i64 %8159 to i32
  %8161 = icmp slt i32 %8160, 0
  %8162 = shl i32 %8160, 1
  br label %8163

; <label>:8163:                                   ; preds = %8153, %8147
  %8164 = phi i1 [ %8150, %8147 ], [ %8161, %8153 ]
  %8165 = phi i1 [ %8152, %8147 ], [ false, %8153 ]
  %8166 = phi i32 [ %8149, %8147 ], [ %8162, %8153 ]
  %8167 = zext i32 %8166 to i64
  store i64 %8167, i64* %RDX.i4317.pre-phi, align 8
  %8168 = zext i1 %8164 to i8
  store i8 %8168, i8* %32, align 1
  %8169 = and i32 %8166, 254
  %8170 = tail call i32 @llvm.ctpop.i32(i32 %8169)
  %8171 = trunc i32 %8170 to i8
  %8172 = and i8 %8171, 1
  %8173 = xor i8 %8172, 1
  store i8 %8173, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8174 = icmp eq i32 %8166, 0
  %8175 = zext i1 %8174 to i8
  store i8 %8175, i8* %48, align 1
  %8176 = lshr i32 %8166, 31
  %8177 = trunc i32 %8176 to i8
  store i8 %8177, i8* %51, align 1
  %8178 = zext i1 %8165 to i8
  store i8 %8178, i8* %57, align 1
  br label %routine_shll__cl___edx.exit3785

routine_shll__cl___edx.exit3785:                  ; preds = %8163, %block_4217a6
  %8179 = phi i64 [ %8167, %8163 ], [ %8144, %block_4217a6 ]
  %8180 = load i64, i64* %RBP.i, align 8
  %8181 = add i64 %8180, -152
  %8182 = add i64 %8143, 10
  store i64 %8182, i64* %3, align 8
  %8183 = trunc i64 %8179 to i32
  %8184 = inttoptr i64 %8181 to i32*
  %8185 = load i32, i32* %8184, align 4
  %8186 = sub i32 %8183, %8185
  %8187 = zext i32 %8186 to i64
  store i64 %8187, i64* %RDX.i4317.pre-phi, align 8
  %8188 = icmp ult i32 %8183, %8185
  %8189 = zext i1 %8188 to i8
  store i8 %8189, i8* %32, align 1
  %8190 = and i32 %8186, 255
  %8191 = tail call i32 @llvm.ctpop.i32(i32 %8190)
  %8192 = trunc i32 %8191 to i8
  %8193 = and i8 %8192, 1
  %8194 = xor i8 %8193, 1
  store i8 %8194, i8* %39, align 1
  %8195 = xor i32 %8185, %8183
  %8196 = xor i32 %8195, %8186
  %8197 = lshr i32 %8196, 4
  %8198 = trunc i32 %8197 to i8
  %8199 = and i8 %8198, 1
  store i8 %8199, i8* %45, align 1
  %8200 = icmp eq i32 %8186, 0
  %8201 = zext i1 %8200 to i8
  store i8 %8201, i8* %48, align 1
  %8202 = lshr i32 %8186, 31
  %8203 = trunc i32 %8202 to i8
  store i8 %8203, i8* %51, align 1
  %8204 = lshr i32 %8183, 31
  %8205 = lshr i32 %8185, 31
  %8206 = xor i32 %8205, %8204
  %8207 = xor i32 %8202, %8204
  %8208 = add nuw nsw i32 %8207, %8206
  %8209 = icmp eq i32 %8208, 2
  %8210 = zext i1 %8209 to i8
  store i8 %8210, i8* %57, align 1
  %8211 = sext i32 %8186 to i64
  store i64 %8211, i64* %RDI.i1133, align 8
  %8212 = add i64 %8180, -312
  %8213 = add i64 %8143, 20
  store i64 %8213, i64* %3, align 8
  %8214 = inttoptr i64 %8212 to i64*
  %8215 = load i64, i64* %8214, align 8
  store i64 %8215, i64* %R8.i5602, align 8
  %8216 = shl nsw i64 %8211, 2
  %8217 = add i64 %8216, %8215
  %8218 = add i64 %8143, 24
  store i64 %8218, i64* %3, align 8
  %8219 = inttoptr i64 %8217 to i32*
  %8220 = load i32, i32* %8219, align 4
  %8221 = zext i32 %8220 to i64
  store i64 %8221, i64* %RDX.i4317.pre-phi, align 8
  %8222 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %8222, i64* %RDI.i1133, align 8
  %8223 = add i64 %8180, -100
  %8224 = add i64 %8143, 35
  store i64 %8224, i64* %3, align 8
  %8225 = inttoptr i64 %8223 to i32*
  %8226 = load i32, i32* %8225, align 4
  %8227 = zext i32 %8226 to i64
  store i64 %8227, i64* %RSI.i739, align 8
  %8228 = add i64 %8180, -136
  %8229 = add i64 %8143, 41
  store i64 %8229, i64* %3, align 8
  %8230 = inttoptr i64 %8228 to i32*
  %8231 = load i32, i32* %8230, align 4
  %8232 = zext i32 %8231 to i64
  store i64 %8232, i64* %RCX.i4260.pre-phi, align 8
  %8233 = add i64 %8143, 43
  store i64 %8233, i64* %3, align 8
  %8234 = trunc i32 %8231 to i5
  switch i5 %8234, label %8240 [
    i5 0, label %routine_shll__cl___esi.exit3760
    i5 1, label %8235
  ]

; <label>:8235:                                   ; preds = %routine_shll__cl___edx.exit3785
  %8236 = shl i32 %8226, 1
  %8237 = icmp slt i32 %8226, 0
  %8238 = icmp slt i32 %8236, 0
  %8239 = xor i1 %8237, %8238
  br label %8249

; <label>:8240:                                   ; preds = %routine_shll__cl___edx.exit3785
  %8241 = and i32 %8231, 31
  %8242 = zext i32 %8241 to i64
  %8243 = add nuw nsw i64 %8242, 4294967295
  %8244 = and i64 %8243, 4294967295
  %8245 = shl i64 %8227, %8244
  %8246 = trunc i64 %8245 to i32
  %8247 = icmp slt i32 %8246, 0
  %8248 = shl i32 %8246, 1
  br label %8249

; <label>:8249:                                   ; preds = %8240, %8235
  %8250 = phi i1 [ %8237, %8235 ], [ %8247, %8240 ]
  %8251 = phi i1 [ %8239, %8235 ], [ false, %8240 ]
  %8252 = phi i32 [ %8236, %8235 ], [ %8248, %8240 ]
  %8253 = zext i32 %8252 to i64
  store i64 %8253, i64* %RSI.i739, align 8
  %8254 = zext i1 %8250 to i8
  store i8 %8254, i8* %32, align 1
  %8255 = and i32 %8252, 254
  %8256 = tail call i32 @llvm.ctpop.i32(i32 %8255)
  %8257 = trunc i32 %8256 to i8
  %8258 = and i8 %8257, 1
  %8259 = xor i8 %8258, 1
  store i8 %8259, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8260 = icmp eq i32 %8252, 0
  %8261 = zext i1 %8260 to i8
  store i8 %8261, i8* %48, align 1
  %8262 = lshr i32 %8252, 31
  %8263 = trunc i32 %8262 to i8
  store i8 %8263, i8* %51, align 1
  %8264 = zext i1 %8251 to i8
  store i8 %8264, i8* %57, align 1
  br label %routine_shll__cl___esi.exit3760

routine_shll__cl___esi.exit3760:                  ; preds = %8249, %routine_shll__cl___edx.exit3785
  %8265 = phi i32 [ %8252, %8249 ], [ %8226, %routine_shll__cl___edx.exit3785 ]
  %8266 = add i64 %8180, -156
  %8267 = add i64 %8143, 49
  store i64 %8267, i64* %3, align 8
  %8268 = inttoptr i64 %8266 to i32*
  %8269 = load i32, i32* %8268, align 4
  %8270 = sub i32 %8265, %8269
  %8271 = zext i32 %8270 to i64
  store i64 %8271, i64* %RSI.i739, align 8
  %8272 = icmp ult i32 %8265, %8269
  %8273 = zext i1 %8272 to i8
  store i8 %8273, i8* %32, align 1
  %8274 = and i32 %8270, 255
  %8275 = tail call i32 @llvm.ctpop.i32(i32 %8274)
  %8276 = trunc i32 %8275 to i8
  %8277 = and i8 %8276, 1
  %8278 = xor i8 %8277, 1
  store i8 %8278, i8* %39, align 1
  %8279 = xor i32 %8269, %8265
  %8280 = xor i32 %8279, %8270
  %8281 = lshr i32 %8280, 4
  %8282 = trunc i32 %8281 to i8
  %8283 = and i8 %8282, 1
  store i8 %8283, i8* %45, align 1
  %8284 = icmp eq i32 %8270, 0
  %8285 = zext i1 %8284 to i8
  store i8 %8285, i8* %48, align 1
  %8286 = lshr i32 %8270, 31
  %8287 = trunc i32 %8286 to i8
  store i8 %8287, i8* %51, align 1
  %8288 = lshr i32 %8265, 31
  %8289 = lshr i32 %8269, 31
  %8290 = xor i32 %8289, %8288
  %8291 = xor i32 %8286, %8288
  %8292 = add nuw nsw i32 %8291, %8290
  %8293 = icmp eq i32 %8292, 2
  %8294 = zext i1 %8293 to i8
  store i8 %8294, i8* %57, align 1
  %8295 = sext i32 %8270 to i64
  store i64 %8295, i64* %R9.i5580, align 8
  %8296 = shl nsw i64 %8295, 2
  %8297 = add i64 %8222, %8296
  %8298 = add i64 %8143, 56
  store i64 %8298, i64* %3, align 8
  %8299 = inttoptr i64 %8297 to i32*
  %8300 = load i32, i32* %8299, align 4
  %8301 = add i32 %8300, %8220
  %8302 = zext i32 %8301 to i64
  store i64 %8302, i64* %RDX.i4317.pre-phi, align 8
  %8303 = icmp ult i32 %8301, %8220
  %8304 = icmp ult i32 %8301, %8300
  %8305 = or i1 %8303, %8304
  %8306 = zext i1 %8305 to i8
  store i8 %8306, i8* %32, align 1
  %8307 = and i32 %8301, 255
  %8308 = tail call i32 @llvm.ctpop.i32(i32 %8307)
  %8309 = trunc i32 %8308 to i8
  %8310 = and i8 %8309, 1
  %8311 = xor i8 %8310, 1
  store i8 %8311, i8* %39, align 1
  %8312 = xor i32 %8300, %8220
  %8313 = xor i32 %8312, %8301
  %8314 = lshr i32 %8313, 4
  %8315 = trunc i32 %8314 to i8
  %8316 = and i8 %8315, 1
  store i8 %8316, i8* %45, align 1
  %8317 = icmp eq i32 %8301, 0
  %8318 = zext i1 %8317 to i8
  store i8 %8318, i8* %48, align 1
  %8319 = lshr i32 %8301, 31
  %8320 = trunc i32 %8319 to i8
  store i8 %8320, i8* %51, align 1
  %8321 = lshr i32 %8220, 31
  %8322 = lshr i32 %8300, 31
  %8323 = xor i32 %8319, %8321
  %8324 = xor i32 %8319, %8322
  %8325 = add nuw nsw i32 %8323, %8324
  %8326 = icmp eq i32 %8325, 2
  %8327 = zext i1 %8326 to i8
  store i8 %8327, i8* %57, align 1
  %8328 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %8329 = shl i64 %8328, 32
  %8330 = ashr exact i64 %8329, 32
  %8331 = sext i32 %8301 to i64
  %8332 = mul nsw i64 %8331, %8330
  %8333 = shl i64 %8332, 32
  %8334 = ashr i64 %8333, 47
  %8335 = lshr i64 %8334, 1
  %8336 = trunc i64 %8334 to i8
  %8337 = and i8 %8336, 1
  %8338 = trunc i64 %8335 to i32
  %8339 = and i64 %8335, 4294967295
  store i64 %8339, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %8337, i8* %32, align 1
  %8340 = and i32 %8338, 255
  %8341 = tail call i32 @llvm.ctpop.i32(i32 %8340)
  %8342 = trunc i32 %8341 to i8
  %8343 = and i8 %8342, 1
  %8344 = xor i8 %8343, 1
  store i8 %8344, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8345 = icmp eq i32 %8338, 0
  %8346 = zext i1 %8345 to i8
  store i8 %8346, i8* %48, align 1
  %8347 = lshr i64 %8334, 32
  %8348 = trunc i64 %8347 to i8
  %8349 = and i8 %8348, 1
  store i8 %8349, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %8350 = load i64, i64* %RBP.i, align 8
  %8351 = add i64 %8350, -104
  %8352 = trunc i64 %8335 to i32
  %8353 = add i64 %8143, 65
  store i64 %8353, i64* %3, align 8
  %8354 = inttoptr i64 %8351 to i32*
  store i32 %8352, i32* %8354, align 4
  %8355 = load i64, i64* %RBP.i, align 8
  %8356 = add i64 %8355, -128
  %8357 = load i64, i64* %3, align 8
  %8358 = add i64 %8357, 4
  store i64 %8358, i64* %3, align 8
  %8359 = inttoptr i64 %8356 to i64*
  %8360 = load i64, i64* %8359, align 8
  store i64 %8360, i64* %RDI.i1133, align 8
  %8361 = add i64 %8355, -32
  %8362 = add i64 %8357, 8
  store i64 %8362, i64* %3, align 8
  %8363 = inttoptr i64 %8361 to i64*
  %8364 = load i64, i64* %8363, align 8
  store i64 %8364, i64* %RSI.i739, align 8
  %8365 = add i64 %8355, -112
  %8366 = add i64 %8357, 12
  store i64 %8366, i64* %3, align 8
  %8367 = inttoptr i64 %8365 to i64*
  %8368 = load i64, i64* %8367, align 8
  store i64 %8368, i64* %RDX.i4317.pre-phi, align 8
  %8369 = add i64 %8355, -140
  %8370 = add i64 %8357, 18
  store i64 %8370, i64* %3, align 8
  %8371 = inttoptr i64 %8369 to i32*
  %8372 = load i32, i32* %8371, align 4
  %8373 = zext i32 %8372 to i64
  store i64 %8373, i64* %RCX.i4260.pre-phi, align 8
  %8374 = add i64 %8355, -144
  %8375 = add i64 %8357, 25
  store i64 %8375, i64* %3, align 8
  %8376 = inttoptr i64 %8374 to i32*
  %8377 = load i32, i32* %8376, align 4
  %8378 = zext i32 %8377 to i64
  store i64 %8378, i64* %R8.i5602, align 8
  %8379 = add i64 %8355, -148
  %8380 = add i64 %8357, 32
  store i64 %8380, i64* %3, align 8
  %8381 = inttoptr i64 %8379 to i32*
  %8382 = load i32, i32* %8381, align 4
  %8383 = zext i32 %8382 to i64
  store i64 %8383, i64* %R9.i5580, align 8
  %8384 = add i64 %8355, -104
  %8385 = add i64 %8357, 35
  store i64 %8385, i64* %3, align 8
  %8386 = inttoptr i64 %8384 to i32*
  %8387 = load i32, i32* %8386, align 4
  %8388 = zext i32 %8387 to i64
  store i64 %8388, i64* %RAX.i3587.phi.trans.insert, align 8
  %8389 = add i64 %8355, -80
  %8390 = add i64 %8357, 39
  store i64 %8390, i64* %3, align 8
  %8391 = inttoptr i64 %8389 to i32*
  %8392 = load i32, i32* %8391, align 4
  %8393 = zext i32 %8392 to i64
  store i64 %8393, i64* %68, align 8
  %8394 = add i64 %8355, -96
  %8395 = add i64 %8357, 43
  store i64 %8395, i64* %3, align 8
  %8396 = inttoptr i64 %8394 to i32*
  %8397 = load i32, i32* %8396, align 4
  %8398 = zext i32 %8397 to i64
  store i64 %8398, i64* %R11.i, align 8
  %8399 = add i64 %8355, -100
  %8400 = add i64 %8357, 46
  store i64 %8400, i64* %3, align 8
  %8401 = inttoptr i64 %8399 to i32*
  %8402 = load i32, i32* %8401, align 4
  %8403 = zext i32 %8402 to i64
  store i64 %8403, i64* %RBX.i615, align 8
  %8404 = load i32*, i32** %2119, align 8
  %8405 = add i64 %8357, 49
  store i64 %8405, i64* %3, align 8
  store i32 %8387, i32* %8404, align 4
  %8406 = load i64, i64* %6, align 8
  %8407 = add i64 %8406, 8
  %8408 = load i32, i32* %R10D.i761, align 4
  %8409 = load i64, i64* %3, align 8
  %8410 = add i64 %8409, 5
  store i64 %8410, i64* %3, align 8
  %8411 = inttoptr i64 %8407 to i32*
  store i32 %8408, i32* %8411, align 4
  %8412 = load i64, i64* %6, align 8
  %8413 = add i64 %8412, 16
  %8414 = load i32, i32* %R11D.i5540, align 4
  %8415 = load i64, i64* %3, align 8
  %8416 = add i64 %8415, 5
  store i64 %8416, i64* %3, align 8
  %8417 = inttoptr i64 %8413 to i32*
  store i32 %8414, i32* %8417, align 4
  %8418 = load i64, i64* %6, align 8
  %8419 = add i64 %8418, 24
  %8420 = load i32, i32* %EBX.i5525, align 4
  %8421 = load i64, i64* %3, align 8
  %8422 = add i64 %8421, 4
  store i64 %8422, i64* %3, align 8
  %8423 = inttoptr i64 %8419 to i32*
  store i32 %8420, i32* %8423, align 4
  %8424 = load i64, i64* %3, align 8
  %8425 = add i64 %8424, -5012
  %8426 = add i64 %8424, 5
  %8427 = load i64, i64* %6, align 8
  %8428 = add i64 %8427, -8
  %8429 = inttoptr i64 %8428 to i64*
  store i64 %8426, i64* %8429, align 8
  store i64 %8428, i64* %6, align 8
  store i64 %8425, i64* %3, align 8
  %call2_421844 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %8425, %struct.Memory* %7936)
  %8430 = load i64, i64* %RBP.i, align 8
  %8431 = add i64 %8430, -104
  %8432 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %8433 = load i64, i64* %3, align 8
  %8434 = add i64 %8433, 3
  store i64 %8434, i64* %3, align 8
  %8435 = inttoptr i64 %8431 to i32*
  store i32 %8432, i32* %8435, align 4
  %8436 = load i64, i64* %RBP.i, align 8
  %8437 = add i64 %8436, -104
  %8438 = load i64, i64* %3, align 8
  %8439 = add i64 %8438, 3
  store i64 %8439, i64* %3, align 8
  %8440 = inttoptr i64 %8437 to i32*
  %8441 = load i32, i32* %8440, align 4
  %8442 = zext i32 %8441 to i64
  store i64 %8442, i64* %RAX.i3587.phi.trans.insert, align 8
  %8443 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %8443, i64* %RDX.i4317.pre-phi, align 8
  %8444 = add i64 %8436, -100
  %8445 = add i64 %8438, 14
  store i64 %8445, i64* %3, align 8
  %8446 = inttoptr i64 %8444 to i32*
  %8447 = load i32, i32* %8446, align 4
  %8448 = zext i32 %8447 to i64
  store i64 %8448, i64* %RCX.i4260.pre-phi, align 8
  %8449 = add i64 %8436, -164
  %8450 = add i64 %8438, 20
  store i64 %8450, i64* %3, align 8
  %8451 = inttoptr i64 %8449 to i32*
  %8452 = load i32, i32* %8451, align 4
  %8453 = sub i32 %8447, %8452
  %8454 = zext i32 %8453 to i64
  store i64 %8454, i64* %RCX.i4260.pre-phi, align 8
  %8455 = icmp ult i32 %8447, %8452
  %8456 = zext i1 %8455 to i8
  store i8 %8456, i8* %32, align 1
  %8457 = and i32 %8453, 255
  %8458 = tail call i32 @llvm.ctpop.i32(i32 %8457)
  %8459 = trunc i32 %8458 to i8
  %8460 = and i8 %8459, 1
  %8461 = xor i8 %8460, 1
  store i8 %8461, i8* %39, align 1
  %8462 = xor i32 %8452, %8447
  %8463 = xor i32 %8462, %8453
  %8464 = lshr i32 %8463, 4
  %8465 = trunc i32 %8464 to i8
  %8466 = and i8 %8465, 1
  store i8 %8466, i8* %45, align 1
  %8467 = icmp eq i32 %8453, 0
  %8468 = zext i1 %8467 to i8
  store i8 %8468, i8* %48, align 1
  %8469 = lshr i32 %8453, 31
  %8470 = trunc i32 %8469 to i8
  store i8 %8470, i8* %51, align 1
  %8471 = lshr i32 %8447, 31
  %8472 = lshr i32 %8452, 31
  %8473 = xor i32 %8472, %8471
  %8474 = xor i32 %8469, %8471
  %8475 = add nuw nsw i32 %8474, %8473
  %8476 = icmp eq i32 %8475, 2
  %8477 = zext i1 %8476 to i8
  store i8 %8477, i8* %57, align 1
  %8478 = add i64 %8436, -76
  %8479 = add i64 %8438, 23
  store i64 %8479, i64* %3, align 8
  %8480 = inttoptr i64 %8478 to i32*
  %8481 = load i32, i32* %8480, align 4
  %8482 = add i32 %8481, %8453
  %8483 = zext i32 %8482 to i64
  store i64 %8483, i64* %RCX.i4260.pre-phi, align 8
  %8484 = icmp ult i32 %8482, %8453
  %8485 = icmp ult i32 %8482, %8481
  %8486 = or i1 %8484, %8485
  %8487 = zext i1 %8486 to i8
  store i8 %8487, i8* %32, align 1
  %8488 = and i32 %8482, 255
  %8489 = tail call i32 @llvm.ctpop.i32(i32 %8488)
  %8490 = trunc i32 %8489 to i8
  %8491 = and i8 %8490, 1
  %8492 = xor i8 %8491, 1
  store i8 %8492, i8* %39, align 1
  %8493 = xor i32 %8481, %8453
  %8494 = xor i32 %8493, %8482
  %8495 = lshr i32 %8494, 4
  %8496 = trunc i32 %8495 to i8
  %8497 = and i8 %8496, 1
  store i8 %8497, i8* %45, align 1
  %8498 = icmp eq i32 %8482, 0
  %8499 = zext i1 %8498 to i8
  store i8 %8499, i8* %48, align 1
  %8500 = lshr i32 %8482, 31
  %8501 = trunc i32 %8500 to i8
  store i8 %8501, i8* %51, align 1
  %8502 = lshr i32 %8481, 31
  %8503 = xor i32 %8500, %8469
  %8504 = xor i32 %8500, %8502
  %8505 = add nuw nsw i32 %8503, %8504
  %8506 = icmp eq i32 %8505, 2
  %8507 = zext i1 %8506 to i8
  store i8 %8507, i8* %57, align 1
  %8508 = sext i32 %8482 to i64
  store i64 %8508, i64* %RSI.i739, align 8
  %8509 = shl nsw i64 %8508, 3
  %8510 = add i64 %8443, %8509
  %8511 = add i64 %8438, 30
  store i64 %8511, i64* %3, align 8
  %8512 = inttoptr i64 %8510 to i64*
  %8513 = load i64, i64* %8512, align 8
  store i64 %8513, i64* %RDX.i4317.pre-phi, align 8
  %8514 = load i64, i64* %RBP.i, align 8
  %8515 = add i64 %8514, -96
  %8516 = add i64 %8438, 33
  store i64 %8516, i64* %3, align 8
  %8517 = inttoptr i64 %8515 to i32*
  %8518 = load i32, i32* %8517, align 4
  %8519 = zext i32 %8518 to i64
  store i64 %8519, i64* %RCX.i4260.pre-phi, align 8
  %8520 = add i64 %8514, -160
  %8521 = add i64 %8438, 39
  store i64 %8521, i64* %3, align 8
  %8522 = inttoptr i64 %8520 to i32*
  %8523 = load i32, i32* %8522, align 4
  %8524 = sub i32 %8518, %8523
  %8525 = zext i32 %8524 to i64
  store i64 %8525, i64* %RCX.i4260.pre-phi, align 8
  %8526 = icmp ult i32 %8518, %8523
  %8527 = zext i1 %8526 to i8
  store i8 %8527, i8* %32, align 1
  %8528 = and i32 %8524, 255
  %8529 = tail call i32 @llvm.ctpop.i32(i32 %8528)
  %8530 = trunc i32 %8529 to i8
  %8531 = and i8 %8530, 1
  %8532 = xor i8 %8531, 1
  store i8 %8532, i8* %39, align 1
  %8533 = xor i32 %8523, %8518
  %8534 = xor i32 %8533, %8524
  %8535 = lshr i32 %8534, 4
  %8536 = trunc i32 %8535 to i8
  %8537 = and i8 %8536, 1
  store i8 %8537, i8* %45, align 1
  %8538 = icmp eq i32 %8524, 0
  %8539 = zext i1 %8538 to i8
  store i8 %8539, i8* %48, align 1
  %8540 = lshr i32 %8524, 31
  %8541 = trunc i32 %8540 to i8
  store i8 %8541, i8* %51, align 1
  %8542 = lshr i32 %8518, 31
  %8543 = lshr i32 %8523, 31
  %8544 = xor i32 %8543, %8542
  %8545 = xor i32 %8540, %8542
  %8546 = add nuw nsw i32 %8545, %8544
  %8547 = icmp eq i32 %8546, 2
  %8548 = zext i1 %8547 to i8
  store i8 %8548, i8* %57, align 1
  %8549 = add i64 %8514, -76
  %8550 = add i64 %8438, 42
  store i64 %8550, i64* %3, align 8
  %8551 = inttoptr i64 %8549 to i32*
  %8552 = load i32, i32* %8551, align 4
  %8553 = add i32 %8552, %8524
  %8554 = zext i32 %8553 to i64
  store i64 %8554, i64* %RCX.i4260.pre-phi, align 8
  %8555 = icmp ult i32 %8553, %8524
  %8556 = icmp ult i32 %8553, %8552
  %8557 = or i1 %8555, %8556
  %8558 = zext i1 %8557 to i8
  store i8 %8558, i8* %32, align 1
  %8559 = and i32 %8553, 255
  %8560 = tail call i32 @llvm.ctpop.i32(i32 %8559)
  %8561 = trunc i32 %8560 to i8
  %8562 = and i8 %8561, 1
  %8563 = xor i8 %8562, 1
  store i8 %8563, i8* %39, align 1
  %8564 = xor i32 %8552, %8524
  %8565 = xor i32 %8564, %8553
  %8566 = lshr i32 %8565, 4
  %8567 = trunc i32 %8566 to i8
  %8568 = and i8 %8567, 1
  store i8 %8568, i8* %45, align 1
  %8569 = icmp eq i32 %8553, 0
  %8570 = zext i1 %8569 to i8
  store i8 %8570, i8* %48, align 1
  %8571 = lshr i32 %8553, 31
  %8572 = trunc i32 %8571 to i8
  store i8 %8572, i8* %51, align 1
  %8573 = lshr i32 %8552, 31
  %8574 = xor i32 %8571, %8540
  %8575 = xor i32 %8571, %8573
  %8576 = add nuw nsw i32 %8574, %8575
  %8577 = icmp eq i32 %8576, 2
  %8578 = zext i1 %8577 to i8
  store i8 %8578, i8* %57, align 1
  %8579 = sext i32 %8553 to i64
  store i64 %8579, i64* %RSI.i739, align 8
  %8580 = shl nsw i64 %8579, 2
  %8581 = add i64 %8513, %8580
  %8582 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %8583 = add i64 %8438, 48
  store i64 %8583, i64* %3, align 8
  %8584 = inttoptr i64 %8581 to i32*
  store i32 %8582, i32* %8584, align 4
  %8585 = load i64, i64* %RBP.i, align 8
  %8586 = add i64 %8585, -104
  %8587 = load i64, i64* %3, align 8
  %8588 = add i64 %8587, 3
  store i64 %8588, i64* %3, align 8
  %8589 = inttoptr i64 %8586 to i32*
  %8590 = load i32, i32* %8589, align 4
  %8591 = zext i32 %8590 to i64
  store i64 %8591, i64* %RAX.i3587.phi.trans.insert, align 8
  %8592 = add i64 %8585, -80
  %8593 = add i64 %8587, 6
  store i64 %8593, i64* %3, align 8
  %8594 = inttoptr i64 %8592 to i32*
  %8595 = load i32, i32* %8594, align 4
  %8596 = sub i32 %8590, %8595
  %8597 = icmp ult i32 %8590, %8595
  %8598 = zext i1 %8597 to i8
  store i8 %8598, i8* %32, align 1
  %8599 = and i32 %8596, 255
  %8600 = tail call i32 @llvm.ctpop.i32(i32 %8599)
  %8601 = trunc i32 %8600 to i8
  %8602 = and i8 %8601, 1
  %8603 = xor i8 %8602, 1
  store i8 %8603, i8* %39, align 1
  %8604 = xor i32 %8595, %8590
  %8605 = xor i32 %8604, %8596
  %8606 = lshr i32 %8605, 4
  %8607 = trunc i32 %8606 to i8
  %8608 = and i8 %8607, 1
  store i8 %8608, i8* %45, align 1
  %8609 = icmp eq i32 %8596, 0
  %8610 = zext i1 %8609 to i8
  store i8 %8610, i8* %48, align 1
  %8611 = lshr i32 %8596, 31
  %8612 = trunc i32 %8611 to i8
  store i8 %8612, i8* %51, align 1
  %8613 = lshr i32 %8590, 31
  %8614 = lshr i32 %8595, 31
  %8615 = xor i32 %8614, %8613
  %8616 = xor i32 %8611, %8613
  %8617 = add nuw nsw i32 %8616, %8615
  %8618 = icmp eq i32 %8617, 2
  %8619 = zext i1 %8618 to i8
  store i8 %8619, i8* %57, align 1
  %8620 = icmp ne i8 %8612, 0
  %8621 = xor i1 %8620, %8618
  %.v602 = select i1 %8621, i64 12, i64 36
  %8622 = add i64 %8587, %.v602
  store i64 %8622, i64* %3, align 8
  br i1 %8621, label %block_421888, label %block_.L_4218a0

block_421888:                                     ; preds = %routine_shll__cl___esi.exit3760
  %8623 = add i64 %8585, -96
  %8624 = add i64 %8622, 3
  store i64 %8624, i64* %3, align 8
  %8625 = inttoptr i64 %8623 to i32*
  %8626 = load i32, i32* %8625, align 4
  %8627 = zext i32 %8626 to i64
  store i64 %8627, i64* %RAX.i3587.phi.trans.insert, align 8
  %8628 = add i64 %8585, -168
  %8629 = add i64 %8622, 9
  store i64 %8629, i64* %3, align 8
  %8630 = inttoptr i64 %8628 to i32*
  store i32 %8626, i32* %8630, align 4
  %8631 = load i64, i64* %RBP.i, align 8
  %8632 = add i64 %8631, -100
  %8633 = load i64, i64* %3, align 8
  %8634 = add i64 %8633, 3
  store i64 %8634, i64* %3, align 8
  %8635 = inttoptr i64 %8632 to i32*
  %8636 = load i32, i32* %8635, align 4
  %8637 = zext i32 %8636 to i64
  store i64 %8637, i64* %RAX.i3587.phi.trans.insert, align 8
  %8638 = add i64 %8631, -172
  %8639 = add i64 %8633, 9
  store i64 %8639, i64* %3, align 8
  %8640 = inttoptr i64 %8638 to i32*
  store i32 %8636, i32* %8640, align 4
  %8641 = load i64, i64* %RBP.i, align 8
  %8642 = add i64 %8641, -104
  %8643 = load i64, i64* %3, align 8
  %8644 = add i64 %8643, 3
  store i64 %8644, i64* %3, align 8
  %8645 = inttoptr i64 %8642 to i32*
  %8646 = load i32, i32* %8645, align 4
  %8647 = zext i32 %8646 to i64
  store i64 %8647, i64* %RAX.i3587.phi.trans.insert, align 8
  %8648 = add i64 %8641, -80
  %8649 = add i64 %8643, 6
  store i64 %8649, i64* %3, align 8
  %8650 = inttoptr i64 %8648 to i32*
  store i32 %8646, i32* %8650, align 4
  %.pre290 = load i64, i64* %3, align 8
  br label %block_.L_4218a0

block_.L_4218a0:                                  ; preds = %routine_shll__cl___esi.exit3760, %block_421888
  %8651 = phi i64 [ %8622, %routine_shll__cl___esi.exit3760 ], [ %.pre290, %block_421888 ]
  %8652 = add i64 %8651, 5
  store i64 %8652, i64* %3, align 8
  br label %block_.L_4218a5

block_.L_4218a5:                                  ; preds = %block_421772, %block_.L_4218a0
  %8653 = phi i64 [ %8120, %block_421772 ], [ %8652, %block_.L_4218a0 ]
  %MEMORY.38 = phi %struct.Memory* [ %7936, %block_421772 ], [ %call2_421844, %block_.L_4218a0 ]
  %8654 = add i64 %8653, 5
  store i64 %8654, i64* %3, align 8
  br label %block_.L_4218aa

block_.L_4218aa:                                  ; preds = %block_421759, %routine_idivl__esi.exit3879, %block_.L_4218a5
  %8655 = phi i64 [ %7896, %routine_idivl__esi.exit3879 ], [ %7970, %block_421759 ], [ %8654, %block_.L_4218a5 ]
  %MEMORY.39 = phi %struct.Memory* [ %7862, %routine_idivl__esi.exit3879 ], [ %7936, %block_421759 ], [ %MEMORY.38, %block_.L_4218a5 ]
  %8656 = add i64 %8655, 5
  store i64 %8656, i64* %3, align 8
  br label %block_.L_4218af

block_.L_4218af:                                  ; preds = %block_4216ee, %block_4216d7, %block_.L_4216c5, %block_.L_4218aa
  %8657 = phi i64 [ %7617, %block_.L_4216c5 ], [ %7629, %block_4216d7 ], [ %8656, %block_.L_4218aa ], [ %7673, %block_4216ee ]
  %MEMORY.40 = phi %struct.Memory* [ %MEMORY.34, %block_.L_4216c5 ], [ %MEMORY.34, %block_4216d7 ], [ %MEMORY.39, %block_.L_4218aa ], [ %MEMORY.34, %block_4216ee ]
  %8658 = add i64 %8657, 510
  br label %block_.L_421aad

block_.L_4218b4:                                  ; preds = %block_.L_421699
  br i1 %7565, label %block_4218be, label %block_.L_4218cb

block_4218be:                                     ; preds = %block_.L_4218b4
  %8659 = add i64 %7555, -34
  %8660 = add i64 %7569, 4
  store i64 %8660, i64* %3, align 8
  %8661 = inttoptr i64 %8659 to i16*
  %8662 = load i16, i16* %8661, align 2
  %8663 = sext i16 %8662 to i64
  %8664 = and i64 %8663, 4294967295
  store i64 %8664, i64* %RAX.i3587.phi.trans.insert, align 8
  %8665 = sext i16 %8662 to i32
  store i8 0, i8* %32, align 1
  %8666 = and i32 %8665, 255
  %8667 = tail call i32 @llvm.ctpop.i32(i32 %8666)
  %8668 = trunc i32 %8667 to i8
  %8669 = and i8 %8668, 1
  %8670 = xor i8 %8669, 1
  store i8 %8670, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8671 = icmp eq i16 %8662, 0
  %8672 = zext i1 %8671 to i8
  store i8 %8672, i8* %48, align 1
  %8673 = lshr i32 %8665, 31
  %8674 = trunc i32 %8673 to i8
  store i8 %8674, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %8675 = xor i1 %8671, true
  %8676 = icmp eq i8 %8674, 0
  %8677 = and i1 %8676, %8675
  %.v594 = select i1 %8677, i64 54, i64 13
  %8678 = add i64 %7569, %.v594
  store i64 %8678, i64* %3, align 8
  br i1 %8677, label %block_.L_4218f4, label %block_.L_4218cb

block_.L_4218cb:                                  ; preds = %block_.L_4218b4, %block_4218be
  %8679 = phi i64 [ %8678, %block_4218be ], [ %7569, %block_.L_4218b4 ]
  %8680 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8680, i64* %RAX.i3587.phi.trans.insert, align 8
  %8681 = add i64 %8680, 24
  %8682 = add i64 %8679, 12
  store i64 %8682, i64* %3, align 8
  %8683 = inttoptr i64 %8681 to i32*
  %8684 = load i32, i32* %8683, align 4
  %8685 = add i32 %8684, -1
  %8686 = icmp eq i32 %8684, 0
  %8687 = zext i1 %8686 to i8
  store i8 %8687, i8* %32, align 1
  %8688 = and i32 %8685, 255
  %8689 = tail call i32 @llvm.ctpop.i32(i32 %8688)
  %8690 = trunc i32 %8689 to i8
  %8691 = and i8 %8690, 1
  %8692 = xor i8 %8691, 1
  store i8 %8692, i8* %39, align 1
  %8693 = xor i32 %8685, %8684
  %8694 = lshr i32 %8693, 4
  %8695 = trunc i32 %8694 to i8
  %8696 = and i8 %8695, 1
  store i8 %8696, i8* %45, align 1
  %8697 = icmp eq i32 %8685, 0
  %8698 = zext i1 %8697 to i8
  store i8 %8698, i8* %48, align 1
  %8699 = lshr i32 %8685, 31
  %8700 = trunc i32 %8699 to i8
  store i8 %8700, i8* %51, align 1
  %8701 = lshr i32 %8684, 31
  %8702 = xor i32 %8699, %8701
  %8703 = add nuw nsw i32 %8702, %8701
  %8704 = icmp eq i32 %8703, 2
  %8705 = zext i1 %8704 to i8
  store i8 %8705, i8* %57, align 1
  %.v533 = select i1 %8697, i64 18, i64 477
  %8706 = add i64 %8679, %.v533
  store i64 %8706, i64* %3, align 8
  br i1 %8697, label %block_4218dd, label %block_.L_421aa8

block_4218dd:                                     ; preds = %block_.L_4218cb
  %8707 = add i64 %8706, 4
  store i64 %8707, i64* %3, align 8
  %8708 = load i32, i32* %7558, align 4
  store i8 0, i8* %32, align 1
  %8709 = and i32 %8708, 255
  %8710 = tail call i32 @llvm.ctpop.i32(i32 %8709)
  %8711 = trunc i32 %8710 to i8
  %8712 = and i8 %8711, 1
  %8713 = xor i8 %8712, 1
  store i8 %8713, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8714 = icmp eq i32 %8708, 0
  %8715 = zext i1 %8714 to i8
  store i8 %8715, i8* %48, align 1
  %8716 = lshr i32 %8708, 31
  %8717 = trunc i32 %8716 to i8
  store i8 %8717, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v588 = select i1 %8714, i64 10, i64 459
  %8718 = add i64 %8706, %.v588
  store i64 %8718, i64* %3, align 8
  br i1 %8714, label %block_4218e7, label %block_.L_421aa8

block_4218e7:                                     ; preds = %block_4218dd
  %8719 = add i64 %7555, -34
  %8720 = add i64 %8718, 4
  store i64 %8720, i64* %3, align 8
  %8721 = inttoptr i64 %8719 to i16*
  %8722 = load i16, i16* %8721, align 2
  %8723 = sext i16 %8722 to i64
  %8724 = and i64 %8723, 4294967295
  store i64 %8724, i64* %RAX.i3587.phi.trans.insert, align 8
  %8725 = sext i16 %8722 to i32
  store i8 0, i8* %32, align 1
  %8726 = and i32 %8725, 255
  %8727 = tail call i32 @llvm.ctpop.i32(i32 %8726)
  %8728 = trunc i32 %8727 to i8
  %8729 = and i8 %8728, 1
  %8730 = xor i8 %8729, 1
  store i8 %8730, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %8731 = icmp eq i16 %8722, 0
  %8732 = zext i1 %8731 to i8
  store i8 %8732, i8* %48, align 1
  %8733 = lshr i32 %8725, 31
  %8734 = trunc i32 %8733 to i8
  store i8 %8734, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v589 = select i1 %8731, i64 13, i64 449
  %8735 = add i64 %8718, %.v589
  store i64 %8735, i64* %3, align 8
  br i1 %8731, label %block_.L_4218f4, label %block_.L_421aa8

block_.L_4218f4:                                  ; preds = %block_4218e7, %block_4218be
  %8736 = phi i64 [ %8735, %block_4218e7 ], [ %8678, %block_4218be ]
  store i64 4, i64* %RAX.i3587.phi.trans.insert, align 8
  %8737 = add i64 %7555, -44
  %8738 = add i64 %8736, 8
  store i64 %8738, i64* %3, align 8
  %8739 = inttoptr i64 %8737 to i32*
  %8740 = load i32, i32* %8739, align 4
  %8741 = zext i32 %8740 to i64
  store i64 %8741, i64* %RCX.i4260.pre-phi, align 8
  %8742 = load i32, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  %8743 = zext i32 %8742 to i64
  store i64 %8743, i64* %RDX.i4317.pre-phi, align 8
  %8744 = add i64 %7555, -316
  %8745 = add i64 %8736, 21
  store i64 %8745, i64* %3, align 8
  %8746 = inttoptr i64 %8744 to i32*
  store i32 4, i32* %8746, align 4
  %8747 = load i32, i32* %EDX.i1187, align 4
  %8748 = zext i32 %8747 to i64
  %8749 = load i64, i64* %3, align 8
  store i64 %8748, i64* %RAX.i3587.phi.trans.insert, align 8
  %8750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8751 = sext i32 %8747 to i64
  %8752 = lshr i64 %8751, 32
  store i64 %8752, i64* %8750, align 8
  %8753 = load i64, i64* %RBP.i, align 8
  %8754 = add i64 %8753, -316
  %8755 = add i64 %8749, 9
  store i64 %8755, i64* %3, align 8
  %8756 = inttoptr i64 %8754 to i32*
  %8757 = load i32, i32* %8756, align 4
  %8758 = zext i32 %8757 to i64
  store i64 %8758, i64* %RSI.i739, align 8
  %8759 = add i64 %8749, 11
  store i64 %8759, i64* %3, align 8
  %8760 = sext i32 %8757 to i64
  %8761 = shl nuw i64 %8752, 32
  %8762 = or i64 %8761, %8748
  %8763 = sdiv i64 %8762, %8760
  %8764 = shl i64 %8763, 32
  %8765 = ashr exact i64 %8764, 32
  %8766 = icmp eq i64 %8763, %8765
  br i1 %8766, label %8769, label %8767

; <label>:8767:                                   ; preds = %block_.L_4218f4
  %8768 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8759, %struct.Memory* %MEMORY.34)
  %.pre291 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %.pre292 = load i64, i64* %3, align 8
  %.pre293 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit3584

; <label>:8769:                                   ; preds = %block_.L_4218f4
  %8770 = srem i64 %8762, %8760
  %8771 = and i64 %8763, 4294967295
  store i64 %8771, i64* %RAX.i3587.phi.trans.insert, align 8
  %8772 = and i64 %8770, 4294967295
  store i64 %8772, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %8773 = trunc i64 %8763 to i32
  br label %routine_idivl__esi.exit3584

routine_idivl__esi.exit3584:                      ; preds = %8769, %8767
  %8774 = phi i64 [ %.pre293, %8767 ], [ %8753, %8769 ]
  %8775 = phi i64 [ %.pre292, %8767 ], [ %8759, %8769 ]
  %8776 = phi i32 [ %.pre291, %8767 ], [ %8773, %8769 ]
  %8777 = phi %struct.Memory* [ %8768, %8767 ], [ %MEMORY.34, %8769 ]
  %8778 = load i64, i64* %RCX.i4260.pre-phi, align 8
  %8779 = zext i32 %8776 to i64
  %8780 = trunc i64 %8778 to i32
  %8781 = add i32 %8776, %8780
  %8782 = zext i32 %8781 to i64
  store i64 %8782, i64* %RCX.i4260.pre-phi, align 8
  %8783 = icmp ult i32 %8781, %8780
  %8784 = icmp ult i32 %8781, %8776
  %8785 = or i1 %8783, %8784
  %8786 = zext i1 %8785 to i8
  store i8 %8786, i8* %32, align 1
  %8787 = and i32 %8781, 255
  %8788 = tail call i32 @llvm.ctpop.i32(i32 %8787)
  %8789 = trunc i32 %8788 to i8
  %8790 = and i8 %8789, 1
  %8791 = xor i8 %8790, 1
  store i8 %8791, i8* %39, align 1
  %8792 = xor i64 %8779, %8778
  %8793 = trunc i64 %8792 to i32
  %8794 = xor i32 %8793, %8781
  %8795 = lshr i32 %8794, 4
  %8796 = trunc i32 %8795 to i8
  %8797 = and i8 %8796, 1
  store i8 %8797, i8* %45, align 1
  %8798 = icmp eq i32 %8781, 0
  %8799 = zext i1 %8798 to i8
  store i8 %8799, i8* %48, align 1
  %8800 = lshr i32 %8781, 31
  %8801 = trunc i32 %8800 to i8
  store i8 %8801, i8* %51, align 1
  %8802 = lshr i32 %8780, 31
  %8803 = lshr i32 %8776, 31
  %8804 = xor i32 %8800, %8802
  %8805 = xor i32 %8800, %8803
  %8806 = add nuw nsw i32 %8804, %8805
  %8807 = icmp eq i32 %8806, 2
  %8808 = zext i1 %8807 to i8
  store i8 %8808, i8* %57, align 1
  %8809 = add i64 %8774, -96
  %8810 = add i64 %8775, 5
  store i64 %8810, i64* %3, align 8
  %8811 = inttoptr i64 %8809 to i32*
  store i32 %8781, i32* %8811, align 4
  %8812 = load i64, i64* %RBP.i, align 8
  %8813 = add i64 %8812, -48
  %8814 = load i64, i64* %3, align 8
  %8815 = add i64 %8814, 3
  store i64 %8815, i64* %3, align 8
  %8816 = inttoptr i64 %8813 to i32*
  %8817 = load i32, i32* %8816, align 4
  %8818 = zext i32 %8817 to i64
  store i64 %8818, i64* %RAX.i3587.phi.trans.insert, align 8
  %8819 = load i32, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  %8820 = zext i32 %8819 to i64
  store i64 %8820, i64* %RCX.i4260.pre-phi, align 8
  %8821 = add i64 %8812, -320
  %8822 = add i64 %8814, 16
  store i64 %8822, i64* %3, align 8
  %8823 = inttoptr i64 %8821 to i32*
  store i32 %8817, i32* %8823, align 4
  %8824 = load i32, i32* %ECX.i1211, align 4
  %8825 = zext i32 %8824 to i64
  %8826 = load i64, i64* %3, align 8
  store i64 %8825, i64* %RAX.i3587.phi.trans.insert, align 8
  %8827 = sext i32 %8824 to i64
  %8828 = lshr i64 %8827, 32
  store i64 %8828, i64* %8750, align 8
  %8829 = load i32, i32* %ESI.i1656, align 4
  %8830 = add i64 %8826, 5
  store i64 %8830, i64* %3, align 8
  %8831 = sext i32 %8829 to i64
  %8832 = shl nuw i64 %8828, 32
  %8833 = or i64 %8832, %8825
  %8834 = sdiv i64 %8833, %8831
  %8835 = shl i64 %8834, 32
  %8836 = ashr exact i64 %8835, 32
  %8837 = icmp eq i64 %8834, %8836
  br i1 %8837, label %8840, label %8838

; <label>:8838:                                   ; preds = %routine_idivl__esi.exit3584
  %8839 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8830, %struct.Memory* %8777)
  %.pre294 = load i64, i64* %3, align 8
  %.pre295 = load i32, i32* %EAX.i4185.pre-phi, align 4
  br label %routine_idivl__esi.exit3562

; <label>:8840:                                   ; preds = %routine_idivl__esi.exit3584
  %8841 = srem i64 %8833, %8831
  %8842 = and i64 %8834, 4294967295
  store i64 %8842, i64* %RAX.i3587.phi.trans.insert, align 8
  %8843 = and i64 %8841, 4294967295
  store i64 %8843, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %8844 = trunc i64 %8834 to i32
  br label %routine_idivl__esi.exit3562

routine_idivl__esi.exit3562:                      ; preds = %8840, %8838
  %8845 = phi i32 [ %.pre295, %8838 ], [ %8844, %8840 ]
  %8846 = phi i64 [ %.pre294, %8838 ], [ %8830, %8840 ]
  %8847 = phi %struct.Memory* [ %8839, %8838 ], [ %8777, %8840 ]
  %8848 = load i64, i64* %RBP.i, align 8
  %8849 = add i64 %8848, -320
  %8850 = add i64 %8846, 6
  store i64 %8850, i64* %3, align 8
  %8851 = inttoptr i64 %8849 to i32*
  %8852 = load i32, i32* %8851, align 4
  %8853 = add i32 %8845, %8852
  %8854 = zext i32 %8853 to i64
  store i64 %8854, i64* %RCX.i4260.pre-phi, align 8
  %8855 = icmp ult i32 %8853, %8852
  %8856 = icmp ult i32 %8853, %8845
  %8857 = or i1 %8855, %8856
  %8858 = zext i1 %8857 to i8
  store i8 %8858, i8* %32, align 1
  %8859 = and i32 %8853, 255
  %8860 = tail call i32 @llvm.ctpop.i32(i32 %8859)
  %8861 = trunc i32 %8860 to i8
  %8862 = and i8 %8861, 1
  %8863 = xor i8 %8862, 1
  store i8 %8863, i8* %39, align 1
  %8864 = xor i32 %8845, %8852
  %8865 = xor i32 %8864, %8853
  %8866 = lshr i32 %8865, 4
  %8867 = trunc i32 %8866 to i8
  %8868 = and i8 %8867, 1
  store i8 %8868, i8* %45, align 1
  %8869 = icmp eq i32 %8853, 0
  %8870 = zext i1 %8869 to i8
  store i8 %8870, i8* %48, align 1
  %8871 = lshr i32 %8853, 31
  %8872 = trunc i32 %8871 to i8
  store i8 %8872, i8* %51, align 1
  %8873 = lshr i32 %8852, 31
  %8874 = lshr i32 %8845, 31
  %8875 = xor i32 %8871, %8873
  %8876 = xor i32 %8871, %8874
  %8877 = add nuw nsw i32 %8875, %8876
  %8878 = icmp eq i32 %8877, 2
  %8879 = zext i1 %8878 to i8
  store i8 %8879, i8* %57, align 1
  %8880 = add i64 %8848, -100
  %8881 = add i64 %8846, 11
  store i64 %8881, i64* %3, align 8
  %8882 = inttoptr i64 %8880 to i32*
  store i32 %8853, i32* %8882, align 4
  %8883 = load i64, i64* %RBP.i, align 8
  %8884 = add i64 %8883, -96
  %8885 = load i64, i64* %3, align 8
  %8886 = add i64 %8885, 3
  store i64 %8886, i64* %3, align 8
  %8887 = inttoptr i64 %8884 to i32*
  %8888 = load i32, i32* %8887, align 4
  %8889 = zext i32 %8888 to i64
  store i64 %8889, i64* %RAX.i3587.phi.trans.insert, align 8
  %8890 = add i64 %8883, -160
  %8891 = add i64 %8885, 9
  store i64 %8891, i64* %3, align 8
  %8892 = inttoptr i64 %8890 to i32*
  %8893 = load i32, i32* %8892, align 4
  %8894 = sub i32 %8888, %8893
  %8895 = zext i32 %8894 to i64
  store i64 %8895, i64* %RAX.i3587.phi.trans.insert, align 8
  %8896 = icmp ult i32 %8888, %8893
  %8897 = zext i1 %8896 to i8
  store i8 %8897, i8* %32, align 1
  %8898 = and i32 %8894, 255
  %8899 = tail call i32 @llvm.ctpop.i32(i32 %8898)
  %8900 = trunc i32 %8899 to i8
  %8901 = and i8 %8900, 1
  %8902 = xor i8 %8901, 1
  store i8 %8902, i8* %39, align 1
  %8903 = xor i32 %8893, %8888
  %8904 = xor i32 %8903, %8894
  %8905 = lshr i32 %8904, 4
  %8906 = trunc i32 %8905 to i8
  %8907 = and i8 %8906, 1
  store i8 %8907, i8* %45, align 1
  %8908 = icmp eq i32 %8894, 0
  %8909 = zext i1 %8908 to i8
  store i8 %8909, i8* %48, align 1
  %8910 = lshr i32 %8894, 31
  %8911 = trunc i32 %8910 to i8
  store i8 %8911, i8* %51, align 1
  %8912 = lshr i32 %8888, 31
  %8913 = lshr i32 %8893, 31
  %8914 = xor i32 %8913, %8912
  %8915 = xor i32 %8910, %8912
  %8916 = add nuw nsw i32 %8915, %8914
  %8917 = icmp eq i32 %8916, 2
  %8918 = zext i1 %8917 to i8
  store i8 %8918, i8* %57, align 1
  store i64 %8895, i64* %RDI.i1133, align 8
  %8919 = add i64 %8885, -133433
  %8920 = add i64 %8885, 16
  %8921 = load i64, i64* %6, align 8
  %8922 = add i64 %8921, -8
  %8923 = inttoptr i64 %8922 to i64*
  store i64 %8920, i64* %8923, align 8
  store i64 %8922, i64* %6, align 8
  store i64 %8919, i64* %3, align 8
  %8924 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %8847)
  %8925 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %8926 = load i64, i64* %RBP.i, align 8
  %8927 = add i64 %8926, -76
  %8928 = load i64, i64* %3, align 8
  %8929 = add i64 %8928, 3
  store i64 %8929, i64* %3, align 8
  %8930 = inttoptr i64 %8927 to i32*
  %8931 = load i32, i32* %8930, align 4
  %8932 = sub i32 %8925, %8931
  %8933 = icmp ult i32 %8925, %8931
  %8934 = zext i1 %8933 to i8
  store i8 %8934, i8* %32, align 1
  %8935 = and i32 %8932, 255
  %8936 = tail call i32 @llvm.ctpop.i32(i32 %8935)
  %8937 = trunc i32 %8936 to i8
  %8938 = and i8 %8937, 1
  %8939 = xor i8 %8938, 1
  store i8 %8939, i8* %39, align 1
  %8940 = xor i32 %8931, %8925
  %8941 = xor i32 %8940, %8932
  %8942 = lshr i32 %8941, 4
  %8943 = trunc i32 %8942 to i8
  %8944 = and i8 %8943, 1
  store i8 %8944, i8* %45, align 1
  %8945 = icmp eq i32 %8932, 0
  %8946 = zext i1 %8945 to i8
  store i8 %8946, i8* %48, align 1
  %8947 = lshr i32 %8932, 31
  %8948 = trunc i32 %8947 to i8
  store i8 %8948, i8* %51, align 1
  %8949 = lshr i32 %8925, 31
  %8950 = lshr i32 %8931, 31
  %8951 = xor i32 %8950, %8949
  %8952 = xor i32 %8947, %8949
  %8953 = add nuw nsw i32 %8952, %8951
  %8954 = icmp eq i32 %8953, 2
  %8955 = zext i1 %8954 to i8
  store i8 %8955, i8* %57, align 1
  %8956 = icmp ne i8 %8948, 0
  %8957 = xor i1 %8956, %8954
  %.demorgan491 = or i1 %8945, %8957
  %.v590 = select i1 %.demorgan491, i64 9, i64 346
  %8958 = add i64 %8928, %.v590
  store i64 %8958, i64* %3, align 8
  br i1 %.demorgan491, label %block_421952, label %block_.L_421aa3

block_421952:                                     ; preds = %routine_idivl__esi.exit3562
  %8959 = add i64 %8926, -100
  %8960 = add i64 %8958, 3
  store i64 %8960, i64* %3, align 8
  %8961 = inttoptr i64 %8959 to i32*
  %8962 = load i32, i32* %8961, align 4
  %8963 = zext i32 %8962 to i64
  store i64 %8963, i64* %RAX.i3587.phi.trans.insert, align 8
  %8964 = add i64 %8926, -164
  %8965 = add i64 %8958, 9
  store i64 %8965, i64* %3, align 8
  %8966 = inttoptr i64 %8964 to i32*
  %8967 = load i32, i32* %8966, align 4
  %8968 = sub i32 %8962, %8967
  %8969 = zext i32 %8968 to i64
  store i64 %8969, i64* %RAX.i3587.phi.trans.insert, align 8
  %8970 = icmp ult i32 %8962, %8967
  %8971 = zext i1 %8970 to i8
  store i8 %8971, i8* %32, align 1
  %8972 = and i32 %8968, 255
  %8973 = tail call i32 @llvm.ctpop.i32(i32 %8972)
  %8974 = trunc i32 %8973 to i8
  %8975 = and i8 %8974, 1
  %8976 = xor i8 %8975, 1
  store i8 %8976, i8* %39, align 1
  %8977 = xor i32 %8967, %8962
  %8978 = xor i32 %8977, %8968
  %8979 = lshr i32 %8978, 4
  %8980 = trunc i32 %8979 to i8
  %8981 = and i8 %8980, 1
  store i8 %8981, i8* %45, align 1
  %8982 = icmp eq i32 %8968, 0
  %8983 = zext i1 %8982 to i8
  store i8 %8983, i8* %48, align 1
  %8984 = lshr i32 %8968, 31
  %8985 = trunc i32 %8984 to i8
  store i8 %8985, i8* %51, align 1
  %8986 = lshr i32 %8962, 31
  %8987 = lshr i32 %8967, 31
  %8988 = xor i32 %8987, %8986
  %8989 = xor i32 %8984, %8986
  %8990 = add nuw nsw i32 %8989, %8988
  %8991 = icmp eq i32 %8990, 2
  %8992 = zext i1 %8991 to i8
  store i8 %8992, i8* %57, align 1
  store i64 %8969, i64* %RDI.i1133, align 8
  %8993 = add i64 %8958, -133458
  %8994 = add i64 %8958, 16
  %8995 = load i64, i64* %6, align 8
  %8996 = add i64 %8995, -8
  %8997 = inttoptr i64 %8996 to i64*
  store i64 %8994, i64* %8997, align 8
  store i64 %8996, i64* %6, align 8
  store i64 %8993, i64* %3, align 8
  %8998 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %8924)
  %8999 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %9000 = load i64, i64* %RBP.i, align 8
  %9001 = add i64 %9000, -76
  %9002 = load i64, i64* %3, align 8
  %9003 = add i64 %9002, 3
  store i64 %9003, i64* %3, align 8
  %9004 = inttoptr i64 %9001 to i32*
  %9005 = load i32, i32* %9004, align 4
  %9006 = sub i32 %8999, %9005
  %9007 = icmp ult i32 %8999, %9005
  %9008 = zext i1 %9007 to i8
  store i8 %9008, i8* %32, align 1
  %9009 = and i32 %9006, 255
  %9010 = tail call i32 @llvm.ctpop.i32(i32 %9009)
  %9011 = trunc i32 %9010 to i8
  %9012 = and i8 %9011, 1
  %9013 = xor i8 %9012, 1
  store i8 %9013, i8* %39, align 1
  %9014 = xor i32 %9005, %8999
  %9015 = xor i32 %9014, %9006
  %9016 = lshr i32 %9015, 4
  %9017 = trunc i32 %9016 to i8
  %9018 = and i8 %9017, 1
  store i8 %9018, i8* %45, align 1
  %9019 = icmp eq i32 %9006, 0
  %9020 = zext i1 %9019 to i8
  store i8 %9020, i8* %48, align 1
  %9021 = lshr i32 %9006, 31
  %9022 = trunc i32 %9021 to i8
  store i8 %9022, i8* %51, align 1
  %9023 = lshr i32 %8999, 31
  %9024 = lshr i32 %9005, 31
  %9025 = xor i32 %9024, %9023
  %9026 = xor i32 %9021, %9023
  %9027 = add nuw nsw i32 %9026, %9025
  %9028 = icmp eq i32 %9027, 2
  %9029 = zext i1 %9028 to i8
  store i8 %9029, i8* %57, align 1
  %9030 = icmp ne i8 %9022, 0
  %9031 = xor i1 %9030, %9028
  %.demorgan492 = or i1 %9019, %9031
  %.v591 = select i1 %.demorgan492, i64 9, i64 321
  %9032 = add i64 %9002, %.v591
  store i64 %9032, i64* %3, align 8
  br i1 %.demorgan492, label %block_42196b, label %block_.L_421aa3

block_42196b:                                     ; preds = %block_421952
  %9033 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %9033, i64* %RAX.i3587.phi.trans.insert, align 8
  %9034 = add i64 %9000, -100
  %9035 = add i64 %9032, 11
  store i64 %9035, i64* %3, align 8
  %9036 = inttoptr i64 %9034 to i32*
  %9037 = load i32, i32* %9036, align 4
  %9038 = zext i32 %9037 to i64
  store i64 %9038, i64* %RCX.i4260.pre-phi, align 8
  %9039 = add i64 %9000, -164
  %9040 = add i64 %9032, 17
  store i64 %9040, i64* %3, align 8
  %9041 = inttoptr i64 %9039 to i32*
  %9042 = load i32, i32* %9041, align 4
  %9043 = sub i32 %9037, %9042
  %9044 = zext i32 %9043 to i64
  store i64 %9044, i64* %RCX.i4260.pre-phi, align 8
  %9045 = icmp ult i32 %9037, %9042
  %9046 = zext i1 %9045 to i8
  store i8 %9046, i8* %32, align 1
  %9047 = and i32 %9043, 255
  %9048 = tail call i32 @llvm.ctpop.i32(i32 %9047)
  %9049 = trunc i32 %9048 to i8
  %9050 = and i8 %9049, 1
  %9051 = xor i8 %9050, 1
  store i8 %9051, i8* %39, align 1
  %9052 = xor i32 %9042, %9037
  %9053 = xor i32 %9052, %9043
  %9054 = lshr i32 %9053, 4
  %9055 = trunc i32 %9054 to i8
  %9056 = and i8 %9055, 1
  store i8 %9056, i8* %45, align 1
  %9057 = icmp eq i32 %9043, 0
  %9058 = zext i1 %9057 to i8
  store i8 %9058, i8* %48, align 1
  %9059 = lshr i32 %9043, 31
  %9060 = trunc i32 %9059 to i8
  store i8 %9060, i8* %51, align 1
  %9061 = lshr i32 %9037, 31
  %9062 = lshr i32 %9042, 31
  %9063 = xor i32 %9062, %9061
  %9064 = xor i32 %9059, %9061
  %9065 = add nuw nsw i32 %9064, %9063
  %9066 = icmp eq i32 %9065, 2
  %9067 = zext i1 %9066 to i8
  store i8 %9067, i8* %57, align 1
  %9068 = add i64 %9032, 20
  store i64 %9068, i64* %3, align 8
  %9069 = load i32, i32* %9004, align 4
  %9070 = add i32 %9069, %9043
  %9071 = zext i32 %9070 to i64
  store i64 %9071, i64* %RCX.i4260.pre-phi, align 8
  %9072 = icmp ult i32 %9070, %9043
  %9073 = icmp ult i32 %9070, %9069
  %9074 = or i1 %9072, %9073
  %9075 = zext i1 %9074 to i8
  store i8 %9075, i8* %32, align 1
  %9076 = and i32 %9070, 255
  %9077 = tail call i32 @llvm.ctpop.i32(i32 %9076)
  %9078 = trunc i32 %9077 to i8
  %9079 = and i8 %9078, 1
  %9080 = xor i8 %9079, 1
  store i8 %9080, i8* %39, align 1
  %9081 = xor i32 %9069, %9043
  %9082 = xor i32 %9081, %9070
  %9083 = lshr i32 %9082, 4
  %9084 = trunc i32 %9083 to i8
  %9085 = and i8 %9084, 1
  store i8 %9085, i8* %45, align 1
  %9086 = icmp eq i32 %9070, 0
  %9087 = zext i1 %9086 to i8
  store i8 %9087, i8* %48, align 1
  %9088 = lshr i32 %9070, 31
  %9089 = trunc i32 %9088 to i8
  store i8 %9089, i8* %51, align 1
  %9090 = lshr i32 %9069, 31
  %9091 = xor i32 %9088, %9059
  %9092 = xor i32 %9088, %9090
  %9093 = add nuw nsw i32 %9091, %9092
  %9094 = icmp eq i32 %9093, 2
  %9095 = zext i1 %9094 to i8
  store i8 %9095, i8* %57, align 1
  %9096 = sext i32 %9070 to i64
  store i64 %9096, i64* %RDX.i4317.pre-phi, align 8
  %9097 = shl nsw i64 %9096, 3
  %9098 = add i64 %9033, %9097
  %9099 = add i64 %9032, 27
  store i64 %9099, i64* %3, align 8
  %9100 = inttoptr i64 %9098 to i64*
  %9101 = load i64, i64* %9100, align 8
  store i64 %9101, i64* %RAX.i3587.phi.trans.insert, align 8
  %9102 = add i64 %9000, -96
  %9103 = add i64 %9032, 30
  store i64 %9103, i64* %3, align 8
  %9104 = inttoptr i64 %9102 to i32*
  %9105 = load i32, i32* %9104, align 4
  %9106 = zext i32 %9105 to i64
  store i64 %9106, i64* %RCX.i4260.pre-phi, align 8
  %9107 = load i64, i64* %RBP.i, align 8
  %9108 = add i64 %9107, -160
  %9109 = add i64 %9032, 36
  store i64 %9109, i64* %3, align 8
  %9110 = inttoptr i64 %9108 to i32*
  %9111 = load i32, i32* %9110, align 4
  %9112 = sub i32 %9105, %9111
  %9113 = zext i32 %9112 to i64
  store i64 %9113, i64* %RCX.i4260.pre-phi, align 8
  %9114 = icmp ult i32 %9105, %9111
  %9115 = zext i1 %9114 to i8
  store i8 %9115, i8* %32, align 1
  %9116 = and i32 %9112, 255
  %9117 = tail call i32 @llvm.ctpop.i32(i32 %9116)
  %9118 = trunc i32 %9117 to i8
  %9119 = and i8 %9118, 1
  %9120 = xor i8 %9119, 1
  store i8 %9120, i8* %39, align 1
  %9121 = xor i32 %9111, %9105
  %9122 = xor i32 %9121, %9112
  %9123 = lshr i32 %9122, 4
  %9124 = trunc i32 %9123 to i8
  %9125 = and i8 %9124, 1
  store i8 %9125, i8* %45, align 1
  %9126 = icmp eq i32 %9112, 0
  %9127 = zext i1 %9126 to i8
  store i8 %9127, i8* %48, align 1
  %9128 = lshr i32 %9112, 31
  %9129 = trunc i32 %9128 to i8
  store i8 %9129, i8* %51, align 1
  %9130 = lshr i32 %9105, 31
  %9131 = lshr i32 %9111, 31
  %9132 = xor i32 %9131, %9130
  %9133 = xor i32 %9128, %9130
  %9134 = add nuw nsw i32 %9133, %9132
  %9135 = icmp eq i32 %9134, 2
  %9136 = zext i1 %9135 to i8
  store i8 %9136, i8* %57, align 1
  %9137 = add i64 %9107, -76
  %9138 = add i64 %9032, 39
  store i64 %9138, i64* %3, align 8
  %9139 = inttoptr i64 %9137 to i32*
  %9140 = load i32, i32* %9139, align 4
  %9141 = add i32 %9140, %9112
  %9142 = zext i32 %9141 to i64
  store i64 %9142, i64* %RCX.i4260.pre-phi, align 8
  %9143 = icmp ult i32 %9141, %9112
  %9144 = icmp ult i32 %9141, %9140
  %9145 = or i1 %9143, %9144
  %9146 = zext i1 %9145 to i8
  store i8 %9146, i8* %32, align 1
  %9147 = and i32 %9141, 255
  %9148 = tail call i32 @llvm.ctpop.i32(i32 %9147)
  %9149 = trunc i32 %9148 to i8
  %9150 = and i8 %9149, 1
  %9151 = xor i8 %9150, 1
  store i8 %9151, i8* %39, align 1
  %9152 = xor i32 %9140, %9112
  %9153 = xor i32 %9152, %9141
  %9154 = lshr i32 %9153, 4
  %9155 = trunc i32 %9154 to i8
  %9156 = and i8 %9155, 1
  store i8 %9156, i8* %45, align 1
  %9157 = icmp eq i32 %9141, 0
  %9158 = zext i1 %9157 to i8
  store i8 %9158, i8* %48, align 1
  %9159 = lshr i32 %9141, 31
  %9160 = trunc i32 %9159 to i8
  store i8 %9160, i8* %51, align 1
  %9161 = lshr i32 %9140, 31
  %9162 = xor i32 %9159, %9128
  %9163 = xor i32 %9159, %9161
  %9164 = add nuw nsw i32 %9162, %9163
  %9165 = icmp eq i32 %9164, 2
  %9166 = zext i1 %9165 to i8
  store i8 %9166, i8* %57, align 1
  %9167 = sext i32 %9141 to i64
  store i64 %9167, i64* %RDX.i4317.pre-phi, align 8
  %9168 = shl nsw i64 %9167, 2
  %9169 = add i64 %9101, %9168
  %9170 = add i64 %9032, 46
  store i64 %9170, i64* %3, align 8
  %9171 = inttoptr i64 %9169 to i32*
  %9172 = load i32, i32* %9171, align 4
  store i8 0, i8* %32, align 1
  %9173 = and i32 %9172, 255
  %9174 = tail call i32 @llvm.ctpop.i32(i32 %9173)
  %9175 = trunc i32 %9174 to i8
  %9176 = and i8 %9175, 1
  %9177 = xor i8 %9176, 1
  store i8 %9177, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9178 = icmp eq i32 %9172, 0
  %9179 = zext i1 %9178 to i8
  store i8 %9179, i8* %48, align 1
  %9180 = lshr i32 %9172, 31
  %9181 = trunc i32 %9180 to i8
  store i8 %9181, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v592 = select i1 %9178, i64 52, i64 307
  %9182 = add i64 %9032, %.v592
  store i64 %9182, i64* %3, align 8
  br i1 %9178, label %block_42199f, label %block_.L_421a9e

block_42199f:                                     ; preds = %block_42196b
  %9183 = load i64, i64* %RBP.i, align 8
  %9184 = add i64 %9183, -132
  %9185 = add i64 %9182, 6
  store i64 %9185, i64* %3, align 8
  %9186 = inttoptr i64 %9184 to i32*
  %9187 = load i32, i32* %9186, align 4
  %9188 = zext i32 %9187 to i64
  store i64 %9188, i64* %RAX.i3587.phi.trans.insert, align 8
  %9189 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %9189, i64* %RCX.i4260.pre-phi, align 8
  %9190 = add i64 %9183, -96
  %9191 = add i64 %9182, 17
  store i64 %9191, i64* %3, align 8
  %9192 = inttoptr i64 %9190 to i32*
  %9193 = load i32, i32* %9192, align 4
  %9194 = zext i32 %9193 to i64
  store i64 %9194, i64* %RDX.i4317.pre-phi, align 8
  %9195 = add i64 %9183, -136
  %9196 = add i64 %9182, 23
  store i64 %9196, i64* %3, align 8
  %9197 = inttoptr i64 %9195 to i32*
  %9198 = load i32, i32* %9197, align 4
  %9199 = zext i32 %9198 to i64
  store i64 %9199, i64* %RSI.i739, align 8
  %9200 = add i64 %9183, -328
  %9201 = add i64 %9182, 30
  store i64 %9201, i64* %3, align 8
  %9202 = inttoptr i64 %9200 to i64*
  store i64 %9189, i64* %9202, align 8
  %9203 = load i32, i32* %ESI.i1656, align 4
  %9204 = zext i32 %9203 to i64
  %9205 = load i64, i64* %3, align 8
  store i64 %9204, i64* %RCX.i4260.pre-phi, align 8
  %9206 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %9207 = add i64 %9205, 4
  store i64 %9207, i64* %3, align 8
  %9208 = trunc i32 %9203 to i5
  switch i5 %9208, label %9215 [
    i5 0, label %routine_shll__cl___edx.exit3466
    i5 1, label %9209
  ]

; <label>:9209:                                   ; preds = %block_42199f
  %9210 = trunc i64 %9206 to i32
  %9211 = shl i32 %9210, 1
  %9212 = icmp slt i32 %9210, 0
  %9213 = icmp slt i32 %9211, 0
  %9214 = xor i1 %9212, %9213
  br label %9225

; <label>:9215:                                   ; preds = %block_42199f
  %9216 = and i32 %9203, 31
  %9217 = zext i32 %9216 to i64
  %9218 = add nuw nsw i64 %9217, 4294967295
  %9219 = and i64 %9206, 4294967295
  %9220 = and i64 %9218, 4294967295
  %9221 = shl i64 %9219, %9220
  %9222 = trunc i64 %9221 to i32
  %9223 = icmp slt i32 %9222, 0
  %9224 = shl i32 %9222, 1
  br label %9225

; <label>:9225:                                   ; preds = %9215, %9209
  %9226 = phi i1 [ %9212, %9209 ], [ %9223, %9215 ]
  %9227 = phi i1 [ %9214, %9209 ], [ false, %9215 ]
  %9228 = phi i32 [ %9211, %9209 ], [ %9224, %9215 ]
  %9229 = zext i32 %9228 to i64
  store i64 %9229, i64* %RDX.i4317.pre-phi, align 8
  %9230 = zext i1 %9226 to i8
  store i8 %9230, i8* %32, align 1
  %9231 = and i32 %9228, 254
  %9232 = tail call i32 @llvm.ctpop.i32(i32 %9231)
  %9233 = trunc i32 %9232 to i8
  %9234 = and i8 %9233, 1
  %9235 = xor i8 %9234, 1
  store i8 %9235, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9236 = icmp eq i32 %9228, 0
  %9237 = zext i1 %9236 to i8
  store i8 %9237, i8* %48, align 1
  %9238 = lshr i32 %9228, 31
  %9239 = trunc i32 %9238 to i8
  store i8 %9239, i8* %51, align 1
  %9240 = zext i1 %9227 to i8
  store i8 %9240, i8* %57, align 1
  br label %routine_shll__cl___edx.exit3466

routine_shll__cl___edx.exit3466:                  ; preds = %9225, %block_42199f
  %9241 = phi i64 [ %9229, %9225 ], [ %9206, %block_42199f ]
  %9242 = load i64, i64* %RBP.i, align 8
  %9243 = add i64 %9242, -152
  %9244 = add i64 %9205, 10
  store i64 %9244, i64* %3, align 8
  %9245 = trunc i64 %9241 to i32
  %9246 = inttoptr i64 %9243 to i32*
  %9247 = load i32, i32* %9246, align 4
  %9248 = sub i32 %9245, %9247
  %9249 = zext i32 %9248 to i64
  store i64 %9249, i64* %RDX.i4317.pre-phi, align 8
  %9250 = icmp ult i32 %9245, %9247
  %9251 = zext i1 %9250 to i8
  store i8 %9251, i8* %32, align 1
  %9252 = and i32 %9248, 255
  %9253 = tail call i32 @llvm.ctpop.i32(i32 %9252)
  %9254 = trunc i32 %9253 to i8
  %9255 = and i8 %9254, 1
  %9256 = xor i8 %9255, 1
  store i8 %9256, i8* %39, align 1
  %9257 = xor i32 %9247, %9245
  %9258 = xor i32 %9257, %9248
  %9259 = lshr i32 %9258, 4
  %9260 = trunc i32 %9259 to i8
  %9261 = and i8 %9260, 1
  store i8 %9261, i8* %45, align 1
  %9262 = icmp eq i32 %9248, 0
  %9263 = zext i1 %9262 to i8
  store i8 %9263, i8* %48, align 1
  %9264 = lshr i32 %9248, 31
  %9265 = trunc i32 %9264 to i8
  store i8 %9265, i8* %51, align 1
  %9266 = lshr i32 %9245, 31
  %9267 = lshr i32 %9247, 31
  %9268 = xor i32 %9267, %9266
  %9269 = xor i32 %9264, %9266
  %9270 = add nuw nsw i32 %9269, %9268
  %9271 = icmp eq i32 %9270, 2
  %9272 = zext i1 %9271 to i8
  store i8 %9272, i8* %57, align 1
  %9273 = sext i32 %9248 to i64
  store i64 %9273, i64* %RDI.i1133, align 8
  %9274 = add i64 %9242, -328
  %9275 = add i64 %9205, 20
  store i64 %9275, i64* %3, align 8
  %9276 = inttoptr i64 %9274 to i64*
  %9277 = load i64, i64* %9276, align 8
  store i64 %9277, i64* %R8.i5602, align 8
  %9278 = shl nsw i64 %9273, 2
  %9279 = add i64 %9278, %9277
  %9280 = add i64 %9205, 24
  store i64 %9280, i64* %3, align 8
  %9281 = inttoptr i64 %9279 to i32*
  %9282 = load i32, i32* %9281, align 4
  %9283 = zext i32 %9282 to i64
  store i64 %9283, i64* %RDX.i4317.pre-phi, align 8
  %9284 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %9284, i64* %RDI.i1133, align 8
  %9285 = add i64 %9242, -100
  %9286 = add i64 %9205, 35
  store i64 %9286, i64* %3, align 8
  %9287 = inttoptr i64 %9285 to i32*
  %9288 = load i32, i32* %9287, align 4
  %9289 = zext i32 %9288 to i64
  store i64 %9289, i64* %RSI.i739, align 8
  %9290 = add i64 %9242, -136
  %9291 = add i64 %9205, 41
  store i64 %9291, i64* %3, align 8
  %9292 = inttoptr i64 %9290 to i32*
  %9293 = load i32, i32* %9292, align 4
  %9294 = zext i32 %9293 to i64
  store i64 %9294, i64* %RCX.i4260.pre-phi, align 8
  %9295 = add i64 %9205, 43
  store i64 %9295, i64* %3, align 8
  %9296 = trunc i32 %9293 to i5
  switch i5 %9296, label %9302 [
    i5 0, label %routine_shll__cl___esi.exit3441
    i5 1, label %9297
  ]

; <label>:9297:                                   ; preds = %routine_shll__cl___edx.exit3466
  %9298 = shl i32 %9288, 1
  %9299 = icmp slt i32 %9288, 0
  %9300 = icmp slt i32 %9298, 0
  %9301 = xor i1 %9299, %9300
  br label %9311

; <label>:9302:                                   ; preds = %routine_shll__cl___edx.exit3466
  %9303 = and i32 %9293, 31
  %9304 = zext i32 %9303 to i64
  %9305 = add nuw nsw i64 %9304, 4294967295
  %9306 = and i64 %9305, 4294967295
  %9307 = shl i64 %9289, %9306
  %9308 = trunc i64 %9307 to i32
  %9309 = icmp slt i32 %9308, 0
  %9310 = shl i32 %9308, 1
  br label %9311

; <label>:9311:                                   ; preds = %9302, %9297
  %9312 = phi i1 [ %9299, %9297 ], [ %9309, %9302 ]
  %9313 = phi i1 [ %9301, %9297 ], [ false, %9302 ]
  %9314 = phi i32 [ %9298, %9297 ], [ %9310, %9302 ]
  %9315 = zext i32 %9314 to i64
  store i64 %9315, i64* %RSI.i739, align 8
  %9316 = zext i1 %9312 to i8
  store i8 %9316, i8* %32, align 1
  %9317 = and i32 %9314, 254
  %9318 = tail call i32 @llvm.ctpop.i32(i32 %9317)
  %9319 = trunc i32 %9318 to i8
  %9320 = and i8 %9319, 1
  %9321 = xor i8 %9320, 1
  store i8 %9321, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9322 = icmp eq i32 %9314, 0
  %9323 = zext i1 %9322 to i8
  store i8 %9323, i8* %48, align 1
  %9324 = lshr i32 %9314, 31
  %9325 = trunc i32 %9324 to i8
  store i8 %9325, i8* %51, align 1
  %9326 = zext i1 %9313 to i8
  store i8 %9326, i8* %57, align 1
  br label %routine_shll__cl___esi.exit3441

routine_shll__cl___esi.exit3441:                  ; preds = %9311, %routine_shll__cl___edx.exit3466
  %9327 = phi i32 [ %9314, %9311 ], [ %9288, %routine_shll__cl___edx.exit3466 ]
  %9328 = add i64 %9242, -156
  %9329 = add i64 %9205, 49
  store i64 %9329, i64* %3, align 8
  %9330 = inttoptr i64 %9328 to i32*
  %9331 = load i32, i32* %9330, align 4
  %9332 = sub i32 %9327, %9331
  %9333 = zext i32 %9332 to i64
  store i64 %9333, i64* %RSI.i739, align 8
  %9334 = icmp ult i32 %9327, %9331
  %9335 = zext i1 %9334 to i8
  store i8 %9335, i8* %32, align 1
  %9336 = and i32 %9332, 255
  %9337 = tail call i32 @llvm.ctpop.i32(i32 %9336)
  %9338 = trunc i32 %9337 to i8
  %9339 = and i8 %9338, 1
  %9340 = xor i8 %9339, 1
  store i8 %9340, i8* %39, align 1
  %9341 = xor i32 %9331, %9327
  %9342 = xor i32 %9341, %9332
  %9343 = lshr i32 %9342, 4
  %9344 = trunc i32 %9343 to i8
  %9345 = and i8 %9344, 1
  store i8 %9345, i8* %45, align 1
  %9346 = icmp eq i32 %9332, 0
  %9347 = zext i1 %9346 to i8
  store i8 %9347, i8* %48, align 1
  %9348 = lshr i32 %9332, 31
  %9349 = trunc i32 %9348 to i8
  store i8 %9349, i8* %51, align 1
  %9350 = lshr i32 %9327, 31
  %9351 = lshr i32 %9331, 31
  %9352 = xor i32 %9351, %9350
  %9353 = xor i32 %9348, %9350
  %9354 = add nuw nsw i32 %9353, %9352
  %9355 = icmp eq i32 %9354, 2
  %9356 = zext i1 %9355 to i8
  store i8 %9356, i8* %57, align 1
  %9357 = sext i32 %9332 to i64
  store i64 %9357, i64* %R9.i5580, align 8
  %9358 = shl nsw i64 %9357, 2
  %9359 = add i64 %9284, %9358
  %9360 = add i64 %9205, 56
  store i64 %9360, i64* %3, align 8
  %9361 = inttoptr i64 %9359 to i32*
  %9362 = load i32, i32* %9361, align 4
  %9363 = add i32 %9362, %9282
  %9364 = zext i32 %9363 to i64
  store i64 %9364, i64* %RDX.i4317.pre-phi, align 8
  %9365 = icmp ult i32 %9363, %9282
  %9366 = icmp ult i32 %9363, %9362
  %9367 = or i1 %9365, %9366
  %9368 = zext i1 %9367 to i8
  store i8 %9368, i8* %32, align 1
  %9369 = and i32 %9363, 255
  %9370 = tail call i32 @llvm.ctpop.i32(i32 %9369)
  %9371 = trunc i32 %9370 to i8
  %9372 = and i8 %9371, 1
  %9373 = xor i8 %9372, 1
  store i8 %9373, i8* %39, align 1
  %9374 = xor i32 %9362, %9282
  %9375 = xor i32 %9374, %9363
  %9376 = lshr i32 %9375, 4
  %9377 = trunc i32 %9376 to i8
  %9378 = and i8 %9377, 1
  store i8 %9378, i8* %45, align 1
  %9379 = icmp eq i32 %9363, 0
  %9380 = zext i1 %9379 to i8
  store i8 %9380, i8* %48, align 1
  %9381 = lshr i32 %9363, 31
  %9382 = trunc i32 %9381 to i8
  store i8 %9382, i8* %51, align 1
  %9383 = lshr i32 %9282, 31
  %9384 = lshr i32 %9362, 31
  %9385 = xor i32 %9381, %9383
  %9386 = xor i32 %9381, %9384
  %9387 = add nuw nsw i32 %9385, %9386
  %9388 = icmp eq i32 %9387, 2
  %9389 = zext i1 %9388 to i8
  store i8 %9389, i8* %57, align 1
  %9390 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %9391 = shl i64 %9390, 32
  %9392 = ashr exact i64 %9391, 32
  %9393 = sext i32 %9363 to i64
  %9394 = mul nsw i64 %9393, %9392
  %9395 = shl i64 %9394, 32
  %9396 = ashr i64 %9395, 47
  %9397 = lshr i64 %9396, 1
  %9398 = trunc i64 %9396 to i8
  %9399 = and i8 %9398, 1
  %9400 = trunc i64 %9397 to i32
  %9401 = and i64 %9397, 4294967295
  store i64 %9401, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %9399, i8* %32, align 1
  %9402 = and i32 %9400, 255
  %9403 = tail call i32 @llvm.ctpop.i32(i32 %9402)
  %9404 = trunc i32 %9403 to i8
  %9405 = and i8 %9404, 1
  %9406 = xor i8 %9405, 1
  store i8 %9406, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %9407 = icmp eq i32 %9400, 0
  %9408 = zext i1 %9407 to i8
  store i8 %9408, i8* %48, align 1
  %9409 = lshr i64 %9396, 32
  %9410 = trunc i64 %9409 to i8
  %9411 = and i8 %9410, 1
  store i8 %9411, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %9412 = load i64, i64* %RBP.i, align 8
  %9413 = add i64 %9412, -104
  %9414 = trunc i64 %9397 to i32
  %9415 = add i64 %9205, 65
  store i64 %9415, i64* %3, align 8
  %9416 = inttoptr i64 %9413 to i32*
  store i32 %9414, i32* %9416, align 4
  %9417 = load i64, i64* %RBP.i, align 8
  %9418 = add i64 %9417, -128
  %9419 = load i64, i64* %3, align 8
  %9420 = add i64 %9419, 4
  store i64 %9420, i64* %3, align 8
  %9421 = inttoptr i64 %9418 to i64*
  %9422 = load i64, i64* %9421, align 8
  store i64 %9422, i64* %RDI.i1133, align 8
  %9423 = add i64 %9417, -32
  %9424 = add i64 %9419, 8
  store i64 %9424, i64* %3, align 8
  %9425 = inttoptr i64 %9423 to i64*
  %9426 = load i64, i64* %9425, align 8
  store i64 %9426, i64* %RSI.i739, align 8
  %9427 = add i64 %9417, -112
  %9428 = add i64 %9419, 12
  store i64 %9428, i64* %3, align 8
  %9429 = inttoptr i64 %9427 to i64*
  %9430 = load i64, i64* %9429, align 8
  store i64 %9430, i64* %RDX.i4317.pre-phi, align 8
  %9431 = add i64 %9417, -140
  %9432 = add i64 %9419, 18
  store i64 %9432, i64* %3, align 8
  %9433 = inttoptr i64 %9431 to i32*
  %9434 = load i32, i32* %9433, align 4
  %9435 = zext i32 %9434 to i64
  store i64 %9435, i64* %RCX.i4260.pre-phi, align 8
  %9436 = add i64 %9417, -144
  %9437 = add i64 %9419, 25
  store i64 %9437, i64* %3, align 8
  %9438 = inttoptr i64 %9436 to i32*
  %9439 = load i32, i32* %9438, align 4
  %9440 = zext i32 %9439 to i64
  store i64 %9440, i64* %R8.i5602, align 8
  %9441 = add i64 %9417, -148
  %9442 = add i64 %9419, 32
  store i64 %9442, i64* %3, align 8
  %9443 = inttoptr i64 %9441 to i32*
  %9444 = load i32, i32* %9443, align 4
  %9445 = zext i32 %9444 to i64
  store i64 %9445, i64* %R9.i5580, align 8
  %9446 = add i64 %9417, -104
  %9447 = add i64 %9419, 35
  store i64 %9447, i64* %3, align 8
  %9448 = inttoptr i64 %9446 to i32*
  %9449 = load i32, i32* %9448, align 4
  %9450 = zext i32 %9449 to i64
  store i64 %9450, i64* %RAX.i3587.phi.trans.insert, align 8
  %9451 = add i64 %9417, -80
  %9452 = add i64 %9419, 39
  store i64 %9452, i64* %3, align 8
  %9453 = inttoptr i64 %9451 to i32*
  %9454 = load i32, i32* %9453, align 4
  %9455 = zext i32 %9454 to i64
  store i64 %9455, i64* %68, align 8
  %9456 = add i64 %9417, -96
  %9457 = add i64 %9419, 43
  store i64 %9457, i64* %3, align 8
  %9458 = inttoptr i64 %9456 to i32*
  %9459 = load i32, i32* %9458, align 4
  %9460 = zext i32 %9459 to i64
  store i64 %9460, i64* %R11.i, align 8
  %9461 = add i64 %9417, -100
  %9462 = add i64 %9419, 46
  store i64 %9462, i64* %3, align 8
  %9463 = inttoptr i64 %9461 to i32*
  %9464 = load i32, i32* %9463, align 4
  %9465 = zext i32 %9464 to i64
  store i64 %9465, i64* %RBX.i615, align 8
  %9466 = load i32*, i32** %2119, align 8
  %9467 = add i64 %9419, 49
  store i64 %9467, i64* %3, align 8
  store i32 %9449, i32* %9466, align 4
  %9468 = load i64, i64* %6, align 8
  %9469 = add i64 %9468, 8
  %9470 = load i32, i32* %R10D.i761, align 4
  %9471 = load i64, i64* %3, align 8
  %9472 = add i64 %9471, 5
  store i64 %9472, i64* %3, align 8
  %9473 = inttoptr i64 %9469 to i32*
  store i32 %9470, i32* %9473, align 4
  %9474 = load i64, i64* %6, align 8
  %9475 = add i64 %9474, 16
  %9476 = load i32, i32* %R11D.i5540, align 4
  %9477 = load i64, i64* %3, align 8
  %9478 = add i64 %9477, 5
  store i64 %9478, i64* %3, align 8
  %9479 = inttoptr i64 %9475 to i32*
  store i32 %9476, i32* %9479, align 4
  %9480 = load i64, i64* %6, align 8
  %9481 = add i64 %9480, 24
  %9482 = load i32, i32* %EBX.i5525, align 4
  %9483 = load i64, i64* %3, align 8
  %9484 = add i64 %9483, 4
  store i64 %9484, i64* %3, align 8
  %9485 = inttoptr i64 %9481 to i32*
  store i32 %9482, i32* %9485, align 4
  %9486 = load i64, i64* %3, align 8
  %9487 = add i64 %9486, -5517
  %9488 = add i64 %9486, 5
  %9489 = load i64, i64* %6, align 8
  %9490 = add i64 %9489, -8
  %9491 = inttoptr i64 %9490 to i64*
  store i64 %9488, i64* %9491, align 8
  store i64 %9490, i64* %6, align 8
  store i64 %9487, i64* %3, align 8
  %call2_421a3d = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %9487, %struct.Memory* %8998)
  %9492 = load i64, i64* %RBP.i, align 8
  %9493 = add i64 %9492, -104
  %9494 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %9495 = load i64, i64* %3, align 8
  %9496 = add i64 %9495, 3
  store i64 %9496, i64* %3, align 8
  %9497 = inttoptr i64 %9493 to i32*
  store i32 %9494, i32* %9497, align 4
  %9498 = load i64, i64* %RBP.i, align 8
  %9499 = add i64 %9498, -104
  %9500 = load i64, i64* %3, align 8
  %9501 = add i64 %9500, 3
  store i64 %9501, i64* %3, align 8
  %9502 = inttoptr i64 %9499 to i32*
  %9503 = load i32, i32* %9502, align 4
  %9504 = zext i32 %9503 to i64
  store i64 %9504, i64* %RAX.i3587.phi.trans.insert, align 8
  %9505 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %9505, i64* %RDX.i4317.pre-phi, align 8
  %9506 = add i64 %9498, -100
  %9507 = add i64 %9500, 14
  store i64 %9507, i64* %3, align 8
  %9508 = inttoptr i64 %9506 to i32*
  %9509 = load i32, i32* %9508, align 4
  %9510 = zext i32 %9509 to i64
  store i64 %9510, i64* %RCX.i4260.pre-phi, align 8
  %9511 = add i64 %9498, -164
  %9512 = add i64 %9500, 20
  store i64 %9512, i64* %3, align 8
  %9513 = inttoptr i64 %9511 to i32*
  %9514 = load i32, i32* %9513, align 4
  %9515 = sub i32 %9509, %9514
  %9516 = zext i32 %9515 to i64
  store i64 %9516, i64* %RCX.i4260.pre-phi, align 8
  %9517 = icmp ult i32 %9509, %9514
  %9518 = zext i1 %9517 to i8
  store i8 %9518, i8* %32, align 1
  %9519 = and i32 %9515, 255
  %9520 = tail call i32 @llvm.ctpop.i32(i32 %9519)
  %9521 = trunc i32 %9520 to i8
  %9522 = and i8 %9521, 1
  %9523 = xor i8 %9522, 1
  store i8 %9523, i8* %39, align 1
  %9524 = xor i32 %9514, %9509
  %9525 = xor i32 %9524, %9515
  %9526 = lshr i32 %9525, 4
  %9527 = trunc i32 %9526 to i8
  %9528 = and i8 %9527, 1
  store i8 %9528, i8* %45, align 1
  %9529 = icmp eq i32 %9515, 0
  %9530 = zext i1 %9529 to i8
  store i8 %9530, i8* %48, align 1
  %9531 = lshr i32 %9515, 31
  %9532 = trunc i32 %9531 to i8
  store i8 %9532, i8* %51, align 1
  %9533 = lshr i32 %9509, 31
  %9534 = lshr i32 %9514, 31
  %9535 = xor i32 %9534, %9533
  %9536 = xor i32 %9531, %9533
  %9537 = add nuw nsw i32 %9536, %9535
  %9538 = icmp eq i32 %9537, 2
  %9539 = zext i1 %9538 to i8
  store i8 %9539, i8* %57, align 1
  %9540 = add i64 %9498, -76
  %9541 = add i64 %9500, 23
  store i64 %9541, i64* %3, align 8
  %9542 = inttoptr i64 %9540 to i32*
  %9543 = load i32, i32* %9542, align 4
  %9544 = add i32 %9543, %9515
  %9545 = zext i32 %9544 to i64
  store i64 %9545, i64* %RCX.i4260.pre-phi, align 8
  %9546 = icmp ult i32 %9544, %9515
  %9547 = icmp ult i32 %9544, %9543
  %9548 = or i1 %9546, %9547
  %9549 = zext i1 %9548 to i8
  store i8 %9549, i8* %32, align 1
  %9550 = and i32 %9544, 255
  %9551 = tail call i32 @llvm.ctpop.i32(i32 %9550)
  %9552 = trunc i32 %9551 to i8
  %9553 = and i8 %9552, 1
  %9554 = xor i8 %9553, 1
  store i8 %9554, i8* %39, align 1
  %9555 = xor i32 %9543, %9515
  %9556 = xor i32 %9555, %9544
  %9557 = lshr i32 %9556, 4
  %9558 = trunc i32 %9557 to i8
  %9559 = and i8 %9558, 1
  store i8 %9559, i8* %45, align 1
  %9560 = icmp eq i32 %9544, 0
  %9561 = zext i1 %9560 to i8
  store i8 %9561, i8* %48, align 1
  %9562 = lshr i32 %9544, 31
  %9563 = trunc i32 %9562 to i8
  store i8 %9563, i8* %51, align 1
  %9564 = lshr i32 %9543, 31
  %9565 = xor i32 %9562, %9531
  %9566 = xor i32 %9562, %9564
  %9567 = add nuw nsw i32 %9565, %9566
  %9568 = icmp eq i32 %9567, 2
  %9569 = zext i1 %9568 to i8
  store i8 %9569, i8* %57, align 1
  %9570 = sext i32 %9544 to i64
  store i64 %9570, i64* %RSI.i739, align 8
  %9571 = shl nsw i64 %9570, 3
  %9572 = add i64 %9505, %9571
  %9573 = add i64 %9500, 30
  store i64 %9573, i64* %3, align 8
  %9574 = inttoptr i64 %9572 to i64*
  %9575 = load i64, i64* %9574, align 8
  store i64 %9575, i64* %RDX.i4317.pre-phi, align 8
  %9576 = load i64, i64* %RBP.i, align 8
  %9577 = add i64 %9576, -96
  %9578 = add i64 %9500, 33
  store i64 %9578, i64* %3, align 8
  %9579 = inttoptr i64 %9577 to i32*
  %9580 = load i32, i32* %9579, align 4
  %9581 = zext i32 %9580 to i64
  store i64 %9581, i64* %RCX.i4260.pre-phi, align 8
  %9582 = add i64 %9576, -160
  %9583 = add i64 %9500, 39
  store i64 %9583, i64* %3, align 8
  %9584 = inttoptr i64 %9582 to i32*
  %9585 = load i32, i32* %9584, align 4
  %9586 = sub i32 %9580, %9585
  %9587 = zext i32 %9586 to i64
  store i64 %9587, i64* %RCX.i4260.pre-phi, align 8
  %9588 = icmp ult i32 %9580, %9585
  %9589 = zext i1 %9588 to i8
  store i8 %9589, i8* %32, align 1
  %9590 = and i32 %9586, 255
  %9591 = tail call i32 @llvm.ctpop.i32(i32 %9590)
  %9592 = trunc i32 %9591 to i8
  %9593 = and i8 %9592, 1
  %9594 = xor i8 %9593, 1
  store i8 %9594, i8* %39, align 1
  %9595 = xor i32 %9585, %9580
  %9596 = xor i32 %9595, %9586
  %9597 = lshr i32 %9596, 4
  %9598 = trunc i32 %9597 to i8
  %9599 = and i8 %9598, 1
  store i8 %9599, i8* %45, align 1
  %9600 = icmp eq i32 %9586, 0
  %9601 = zext i1 %9600 to i8
  store i8 %9601, i8* %48, align 1
  %9602 = lshr i32 %9586, 31
  %9603 = trunc i32 %9602 to i8
  store i8 %9603, i8* %51, align 1
  %9604 = lshr i32 %9580, 31
  %9605 = lshr i32 %9585, 31
  %9606 = xor i32 %9605, %9604
  %9607 = xor i32 %9602, %9604
  %9608 = add nuw nsw i32 %9607, %9606
  %9609 = icmp eq i32 %9608, 2
  %9610 = zext i1 %9609 to i8
  store i8 %9610, i8* %57, align 1
  %9611 = add i64 %9576, -76
  %9612 = add i64 %9500, 42
  store i64 %9612, i64* %3, align 8
  %9613 = inttoptr i64 %9611 to i32*
  %9614 = load i32, i32* %9613, align 4
  %9615 = add i32 %9614, %9586
  %9616 = zext i32 %9615 to i64
  store i64 %9616, i64* %RCX.i4260.pre-phi, align 8
  %9617 = icmp ult i32 %9615, %9586
  %9618 = icmp ult i32 %9615, %9614
  %9619 = or i1 %9617, %9618
  %9620 = zext i1 %9619 to i8
  store i8 %9620, i8* %32, align 1
  %9621 = and i32 %9615, 255
  %9622 = tail call i32 @llvm.ctpop.i32(i32 %9621)
  %9623 = trunc i32 %9622 to i8
  %9624 = and i8 %9623, 1
  %9625 = xor i8 %9624, 1
  store i8 %9625, i8* %39, align 1
  %9626 = xor i32 %9614, %9586
  %9627 = xor i32 %9626, %9615
  %9628 = lshr i32 %9627, 4
  %9629 = trunc i32 %9628 to i8
  %9630 = and i8 %9629, 1
  store i8 %9630, i8* %45, align 1
  %9631 = icmp eq i32 %9615, 0
  %9632 = zext i1 %9631 to i8
  store i8 %9632, i8* %48, align 1
  %9633 = lshr i32 %9615, 31
  %9634 = trunc i32 %9633 to i8
  store i8 %9634, i8* %51, align 1
  %9635 = lshr i32 %9614, 31
  %9636 = xor i32 %9633, %9602
  %9637 = xor i32 %9633, %9635
  %9638 = add nuw nsw i32 %9636, %9637
  %9639 = icmp eq i32 %9638, 2
  %9640 = zext i1 %9639 to i8
  store i8 %9640, i8* %57, align 1
  %9641 = sext i32 %9615 to i64
  store i64 %9641, i64* %RSI.i739, align 8
  %9642 = shl nsw i64 %9641, 2
  %9643 = add i64 %9575, %9642
  %9644 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %9645 = add i64 %9500, 48
  store i64 %9645, i64* %3, align 8
  %9646 = inttoptr i64 %9643 to i32*
  store i32 %9644, i32* %9646, align 4
  %9647 = load i64, i64* %RBP.i, align 8
  %9648 = add i64 %9647, -104
  %9649 = load i64, i64* %3, align 8
  %9650 = add i64 %9649, 3
  store i64 %9650, i64* %3, align 8
  %9651 = inttoptr i64 %9648 to i32*
  %9652 = load i32, i32* %9651, align 4
  %9653 = zext i32 %9652 to i64
  store i64 %9653, i64* %RAX.i3587.phi.trans.insert, align 8
  %9654 = add i64 %9647, -80
  %9655 = add i64 %9649, 6
  store i64 %9655, i64* %3, align 8
  %9656 = inttoptr i64 %9654 to i32*
  %9657 = load i32, i32* %9656, align 4
  %9658 = sub i32 %9652, %9657
  %9659 = icmp ult i32 %9652, %9657
  %9660 = zext i1 %9659 to i8
  store i8 %9660, i8* %32, align 1
  %9661 = and i32 %9658, 255
  %9662 = tail call i32 @llvm.ctpop.i32(i32 %9661)
  %9663 = trunc i32 %9662 to i8
  %9664 = and i8 %9663, 1
  %9665 = xor i8 %9664, 1
  store i8 %9665, i8* %39, align 1
  %9666 = xor i32 %9657, %9652
  %9667 = xor i32 %9666, %9658
  %9668 = lshr i32 %9667, 4
  %9669 = trunc i32 %9668 to i8
  %9670 = and i8 %9669, 1
  store i8 %9670, i8* %45, align 1
  %9671 = icmp eq i32 %9658, 0
  %9672 = zext i1 %9671 to i8
  store i8 %9672, i8* %48, align 1
  %9673 = lshr i32 %9658, 31
  %9674 = trunc i32 %9673 to i8
  store i8 %9674, i8* %51, align 1
  %9675 = lshr i32 %9652, 31
  %9676 = lshr i32 %9657, 31
  %9677 = xor i32 %9676, %9675
  %9678 = xor i32 %9673, %9675
  %9679 = add nuw nsw i32 %9678, %9677
  %9680 = icmp eq i32 %9679, 2
  %9681 = zext i1 %9680 to i8
  store i8 %9681, i8* %57, align 1
  %9682 = icmp ne i8 %9674, 0
  %9683 = xor i1 %9682, %9680
  %.v593 = select i1 %9683, i64 12, i64 36
  %9684 = add i64 %9649, %.v593
  store i64 %9684, i64* %3, align 8
  br i1 %9683, label %block_421a81, label %block_.L_421a99

block_421a81:                                     ; preds = %routine_shll__cl___esi.exit3441
  %9685 = add i64 %9647, -96
  %9686 = add i64 %9684, 3
  store i64 %9686, i64* %3, align 8
  %9687 = inttoptr i64 %9685 to i32*
  %9688 = load i32, i32* %9687, align 4
  %9689 = zext i32 %9688 to i64
  store i64 %9689, i64* %RAX.i3587.phi.trans.insert, align 8
  %9690 = add i64 %9647, -168
  %9691 = add i64 %9684, 9
  store i64 %9691, i64* %3, align 8
  %9692 = inttoptr i64 %9690 to i32*
  store i32 %9688, i32* %9692, align 4
  %9693 = load i64, i64* %RBP.i, align 8
  %9694 = add i64 %9693, -100
  %9695 = load i64, i64* %3, align 8
  %9696 = add i64 %9695, 3
  store i64 %9696, i64* %3, align 8
  %9697 = inttoptr i64 %9694 to i32*
  %9698 = load i32, i32* %9697, align 4
  %9699 = zext i32 %9698 to i64
  store i64 %9699, i64* %RAX.i3587.phi.trans.insert, align 8
  %9700 = add i64 %9693, -172
  %9701 = add i64 %9695, 9
  store i64 %9701, i64* %3, align 8
  %9702 = inttoptr i64 %9700 to i32*
  store i32 %9698, i32* %9702, align 4
  %9703 = load i64, i64* %RBP.i, align 8
  %9704 = add i64 %9703, -104
  %9705 = load i64, i64* %3, align 8
  %9706 = add i64 %9705, 3
  store i64 %9706, i64* %3, align 8
  %9707 = inttoptr i64 %9704 to i32*
  %9708 = load i32, i32* %9707, align 4
  %9709 = zext i32 %9708 to i64
  store i64 %9709, i64* %RAX.i3587.phi.trans.insert, align 8
  %9710 = add i64 %9703, -80
  %9711 = add i64 %9705, 6
  store i64 %9711, i64* %3, align 8
  %9712 = inttoptr i64 %9710 to i32*
  store i32 %9708, i32* %9712, align 4
  %.pre296 = load i64, i64* %3, align 8
  br label %block_.L_421a99

block_.L_421a99:                                  ; preds = %routine_shll__cl___esi.exit3441, %block_421a81
  %9713 = phi i64 [ %9684, %routine_shll__cl___esi.exit3441 ], [ %.pre296, %block_421a81 ]
  %9714 = add i64 %9713, 5
  store i64 %9714, i64* %3, align 8
  br label %block_.L_421a9e

block_.L_421a9e:                                  ; preds = %block_42196b, %block_.L_421a99
  %9715 = phi i64 [ %9182, %block_42196b ], [ %9714, %block_.L_421a99 ]
  %MEMORY.44 = phi %struct.Memory* [ %8998, %block_42196b ], [ %call2_421a3d, %block_.L_421a99 ]
  %9716 = add i64 %9715, 5
  store i64 %9716, i64* %3, align 8
  br label %block_.L_421aa3

block_.L_421aa3:                                  ; preds = %block_421952, %routine_idivl__esi.exit3562, %block_.L_421a9e
  %9717 = phi i64 [ %8958, %routine_idivl__esi.exit3562 ], [ %9032, %block_421952 ], [ %9716, %block_.L_421a9e ]
  %MEMORY.45 = phi %struct.Memory* [ %8924, %routine_idivl__esi.exit3562 ], [ %8998, %block_421952 ], [ %MEMORY.44, %block_.L_421a9e ]
  %9718 = add i64 %9717, 5
  store i64 %9718, i64* %3, align 8
  br label %block_.L_421aa8

block_.L_421aa8:                                  ; preds = %block_4218e7, %block_4218dd, %block_.L_4218cb, %block_.L_421aa3
  %9719 = phi i64 [ %8706, %block_.L_4218cb ], [ %8718, %block_4218dd ], [ %8735, %block_4218e7 ], [ %9718, %block_.L_421aa3 ]
  %MEMORY.46 = phi %struct.Memory* [ %MEMORY.34, %block_.L_4218cb ], [ %MEMORY.34, %block_4218dd ], [ %MEMORY.34, %block_4218e7 ], [ %MEMORY.45, %block_.L_421aa3 ]
  %9720 = add i64 %9719, 5
  store i64 %9720, i64* %3, align 8
  br label %block_.L_421aad

block_.L_421aad:                                  ; preds = %block_.L_421aa8, %block_.L_4218af
  %storemerge150 = phi i64 [ %8658, %block_.L_4218af ], [ %9720, %block_.L_421aa8 ]
  %MEMORY.47 = phi %struct.Memory* [ %MEMORY.40, %block_.L_4218af ], [ %MEMORY.46, %block_.L_421aa8 ]
  %9721 = load i64, i64* %RBP.i, align 8
  %9722 = add i64 %9721, -168
  %9723 = add i64 %storemerge150, 6
  store i64 %9723, i64* %3, align 8
  %9724 = inttoptr i64 %9722 to i32*
  %9725 = load i32, i32* %9724, align 4
  %9726 = zext i32 %9725 to i64
  store i64 %9726, i64* %RAX.i3587.phi.trans.insert, align 8
  %9727 = add i64 %9721, -184
  %9728 = add i64 %storemerge150, 12
  store i64 %9728, i64* %3, align 8
  %9729 = inttoptr i64 %9727 to i32*
  store i32 %9725, i32* %9729, align 4
  %9730 = load i64, i64* %RBP.i, align 8
  %9731 = add i64 %9730, -172
  %9732 = load i64, i64* %3, align 8
  %9733 = add i64 %9732, 6
  store i64 %9733, i64* %3, align 8
  %9734 = inttoptr i64 %9731 to i32*
  %9735 = load i32, i32* %9734, align 4
  %9736 = zext i32 %9735 to i64
  store i64 %9736, i64* %RAX.i3587.phi.trans.insert, align 8
  %9737 = add i64 %9730, -180
  %9738 = add i64 %9732, 12
  store i64 %9738, i64* %3, align 8
  %9739 = inttoptr i64 %9737 to i32*
  store i32 %9735, i32* %9739, align 4
  %9740 = load i64, i64* %RBP.i, align 8
  %9741 = add i64 %9740, -192
  %9742 = load i64, i64* %3, align 8
  %9743 = add i64 %9742, 10
  store i64 %9743, i64* %3, align 8
  %9744 = inttoptr i64 %9741 to i32*
  store i32 0, i32* %9744, align 4
  %.pre297 = load i64, i64* %3, align 8
  br label %block_.L_421acf

block_.L_421acf:                                  ; preds = %block_.L_421c74, %block_.L_421aad
  %9745 = phi i64 [ %.pre297, %block_.L_421aad ], [ %10730, %block_.L_421c74 ]
  %MEMORY.48 = phi %struct.Memory* [ %MEMORY.47, %block_.L_421aad ], [ %MEMORY.51, %block_.L_421c74 ]
  %9746 = load i64, i64* %RBP.i, align 8
  %9747 = add i64 %9746, -192
  %9748 = add i64 %9745, 7
  store i64 %9748, i64* %3, align 8
  %9749 = inttoptr i64 %9747 to i32*
  %9750 = load i32, i32* %9749, align 4
  %9751 = add i32 %9750, -4
  %9752 = icmp ult i32 %9750, 4
  %9753 = zext i1 %9752 to i8
  store i8 %9753, i8* %32, align 1
  %9754 = and i32 %9751, 255
  %9755 = tail call i32 @llvm.ctpop.i32(i32 %9754)
  %9756 = trunc i32 %9755 to i8
  %9757 = and i8 %9756, 1
  %9758 = xor i8 %9757, 1
  store i8 %9758, i8* %39, align 1
  %9759 = xor i32 %9751, %9750
  %9760 = lshr i32 %9759, 4
  %9761 = trunc i32 %9760 to i8
  %9762 = and i8 %9761, 1
  store i8 %9762, i8* %45, align 1
  %9763 = icmp eq i32 %9751, 0
  %9764 = zext i1 %9763 to i8
  store i8 %9764, i8* %48, align 1
  %9765 = lshr i32 %9751, 31
  %9766 = trunc i32 %9765 to i8
  store i8 %9766, i8* %51, align 1
  %9767 = lshr i32 %9750, 31
  %9768 = xor i32 %9765, %9767
  %9769 = add nuw nsw i32 %9768, %9767
  %9770 = icmp eq i32 %9769, 2
  %9771 = zext i1 %9770 to i8
  store i8 %9771, i8* %57, align 1
  %9772 = icmp ne i8 %9766, 0
  %9773 = xor i1 %9772, %9770
  %.v488 = select i1 %9773, i64 13, i64 446
  %9774 = add i64 %9745, %.v488
  store i64 %9774, i64* %3, align 8
  br i1 %9773, label %block_421adc, label %block_.L_421c8d

block_421adc:                                     ; preds = %block_.L_421acf
  %9775 = add i64 %9746, -184
  %9776 = add i64 %9774, 6
  store i64 %9776, i64* %3, align 8
  %9777 = inttoptr i64 %9775 to i32*
  %9778 = load i32, i32* %9777, align 4
  %9779 = zext i32 %9778 to i64
  store i64 %9779, i64* %RAX.i3587.phi.trans.insert, align 8
  %9780 = add i64 %9774, 13
  store i64 %9780, i64* %3, align 8
  %9781 = load i32, i32* %9749, align 4
  %9782 = sext i32 %9781 to i64
  store i64 %9782, i64* %RCX.i4260.pre-phi, align 8
  %9783 = shl nsw i64 %9782, 2
  %9784 = add nsw i64 %9783, 7124896
  %9785 = add i64 %9774, 20
  store i64 %9785, i64* %3, align 8
  %9786 = inttoptr i64 %9784 to i32*
  %9787 = load i32, i32* %9786, align 4
  %9788 = add i32 %9787, %9778
  %9789 = zext i32 %9788 to i64
  store i64 %9789, i64* %RAX.i3587.phi.trans.insert, align 8
  %9790 = icmp ult i32 %9788, %9778
  %9791 = icmp ult i32 %9788, %9787
  %9792 = or i1 %9790, %9791
  %9793 = zext i1 %9792 to i8
  store i8 %9793, i8* %32, align 1
  %9794 = and i32 %9788, 255
  %9795 = tail call i32 @llvm.ctpop.i32(i32 %9794)
  %9796 = trunc i32 %9795 to i8
  %9797 = and i8 %9796, 1
  %9798 = xor i8 %9797, 1
  store i8 %9798, i8* %39, align 1
  %9799 = xor i32 %9787, %9778
  %9800 = xor i32 %9799, %9788
  %9801 = lshr i32 %9800, 4
  %9802 = trunc i32 %9801 to i8
  %9803 = and i8 %9802, 1
  store i8 %9803, i8* %45, align 1
  %9804 = icmp eq i32 %9788, 0
  %9805 = zext i1 %9804 to i8
  store i8 %9805, i8* %48, align 1
  %9806 = lshr i32 %9788, 31
  %9807 = trunc i32 %9806 to i8
  store i8 %9807, i8* %51, align 1
  %9808 = lshr i32 %9778, 31
  %9809 = lshr i32 %9787, 31
  %9810 = xor i32 %9806, %9808
  %9811 = xor i32 %9806, %9809
  %9812 = add nuw nsw i32 %9810, %9811
  %9813 = icmp eq i32 %9812, 2
  %9814 = zext i1 %9813 to i8
  store i8 %9814, i8* %57, align 1
  %9815 = add i64 %9746, -96
  %9816 = add i64 %9774, 23
  store i64 %9816, i64* %3, align 8
  %9817 = inttoptr i64 %9815 to i32*
  store i32 %9788, i32* %9817, align 4
  %9818 = load i64, i64* %RBP.i, align 8
  %9819 = add i64 %9818, -180
  %9820 = load i64, i64* %3, align 8
  %9821 = add i64 %9820, 6
  store i64 %9821, i64* %3, align 8
  %9822 = inttoptr i64 %9819 to i32*
  %9823 = load i32, i32* %9822, align 4
  %9824 = zext i32 %9823 to i64
  store i64 %9824, i64* %RAX.i3587.phi.trans.insert, align 8
  %9825 = add i64 %9818, -192
  %9826 = add i64 %9820, 13
  store i64 %9826, i64* %3, align 8
  %9827 = inttoptr i64 %9825 to i32*
  %9828 = load i32, i32* %9827, align 4
  %9829 = sext i32 %9828 to i64
  store i64 %9829, i64* %RCX.i4260.pre-phi, align 8
  %9830 = shl nsw i64 %9829, 2
  %9831 = add nsw i64 %9830, 7124912
  %9832 = add i64 %9820, 20
  store i64 %9832, i64* %3, align 8
  %9833 = inttoptr i64 %9831 to i32*
  %9834 = load i32, i32* %9833, align 4
  %9835 = add i32 %9834, %9823
  %9836 = zext i32 %9835 to i64
  store i64 %9836, i64* %RAX.i3587.phi.trans.insert, align 8
  %9837 = icmp ult i32 %9835, %9823
  %9838 = icmp ult i32 %9835, %9834
  %9839 = or i1 %9837, %9838
  %9840 = zext i1 %9839 to i8
  store i8 %9840, i8* %32, align 1
  %9841 = and i32 %9835, 255
  %9842 = tail call i32 @llvm.ctpop.i32(i32 %9841)
  %9843 = trunc i32 %9842 to i8
  %9844 = and i8 %9843, 1
  %9845 = xor i8 %9844, 1
  store i8 %9845, i8* %39, align 1
  %9846 = xor i32 %9834, %9823
  %9847 = xor i32 %9846, %9835
  %9848 = lshr i32 %9847, 4
  %9849 = trunc i32 %9848 to i8
  %9850 = and i8 %9849, 1
  store i8 %9850, i8* %45, align 1
  %9851 = icmp eq i32 %9835, 0
  %9852 = zext i1 %9851 to i8
  store i8 %9852, i8* %48, align 1
  %9853 = lshr i32 %9835, 31
  %9854 = trunc i32 %9853 to i8
  store i8 %9854, i8* %51, align 1
  %9855 = lshr i32 %9823, 31
  %9856 = lshr i32 %9834, 31
  %9857 = xor i32 %9853, %9855
  %9858 = xor i32 %9853, %9856
  %9859 = add nuw nsw i32 %9857, %9858
  %9860 = icmp eq i32 %9859, 2
  %9861 = zext i1 %9860 to i8
  store i8 %9861, i8* %57, align 1
  %9862 = add i64 %9818, -100
  %9863 = add i64 %9820, 23
  store i64 %9863, i64* %3, align 8
  %9864 = inttoptr i64 %9862 to i32*
  store i32 %9835, i32* %9864, align 4
  %9865 = load i64, i64* %RBP.i, align 8
  %9866 = add i64 %9865, -96
  %9867 = load i64, i64* %3, align 8
  %9868 = add i64 %9867, 3
  store i64 %9868, i64* %3, align 8
  %9869 = inttoptr i64 %9866 to i32*
  %9870 = load i32, i32* %9869, align 4
  %9871 = zext i32 %9870 to i64
  store i64 %9871, i64* %RAX.i3587.phi.trans.insert, align 8
  %9872 = add i64 %9865, -160
  %9873 = add i64 %9867, 9
  store i64 %9873, i64* %3, align 8
  %9874 = inttoptr i64 %9872 to i32*
  %9875 = load i32, i32* %9874, align 4
  %9876 = sub i32 %9870, %9875
  %9877 = zext i32 %9876 to i64
  store i64 %9877, i64* %RAX.i3587.phi.trans.insert, align 8
  %9878 = icmp ult i32 %9870, %9875
  %9879 = zext i1 %9878 to i8
  store i8 %9879, i8* %32, align 1
  %9880 = and i32 %9876, 255
  %9881 = tail call i32 @llvm.ctpop.i32(i32 %9880)
  %9882 = trunc i32 %9881 to i8
  %9883 = and i8 %9882, 1
  %9884 = xor i8 %9883, 1
  store i8 %9884, i8* %39, align 1
  %9885 = xor i32 %9875, %9870
  %9886 = xor i32 %9885, %9876
  %9887 = lshr i32 %9886, 4
  %9888 = trunc i32 %9887 to i8
  %9889 = and i8 %9888, 1
  store i8 %9889, i8* %45, align 1
  %9890 = icmp eq i32 %9876, 0
  %9891 = zext i1 %9890 to i8
  store i8 %9891, i8* %48, align 1
  %9892 = lshr i32 %9876, 31
  %9893 = trunc i32 %9892 to i8
  store i8 %9893, i8* %51, align 1
  %9894 = lshr i32 %9870, 31
  %9895 = lshr i32 %9875, 31
  %9896 = xor i32 %9895, %9894
  %9897 = xor i32 %9892, %9894
  %9898 = add nuw nsw i32 %9897, %9896
  %9899 = icmp eq i32 %9898, 2
  %9900 = zext i1 %9899 to i8
  store i8 %9900, i8* %57, align 1
  store i64 %9877, i64* %RDI.i1133, align 8
  %9901 = add i64 %9867, -133898
  %9902 = add i64 %9867, 16
  %9903 = load i64, i64* %6, align 8
  %9904 = add i64 %9903, -8
  %9905 = inttoptr i64 %9904 to i64*
  store i64 %9902, i64* %9905, align 8
  store i64 %9904, i64* %6, align 8
  store i64 %9901, i64* %3, align 8
  %9906 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.48)
  %9907 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %9908 = load i64, i64* %RBP.i, align 8
  %9909 = add i64 %9908, -76
  %9910 = load i64, i64* %3, align 8
  %9911 = add i64 %9910, 3
  store i64 %9911, i64* %3, align 8
  %9912 = inttoptr i64 %9909 to i32*
  %9913 = load i32, i32* %9912, align 4
  %9914 = sub i32 %9907, %9913
  %9915 = icmp ult i32 %9907, %9913
  %9916 = zext i1 %9915 to i8
  store i8 %9916, i8* %32, align 1
  %9917 = and i32 %9914, 255
  %9918 = tail call i32 @llvm.ctpop.i32(i32 %9917)
  %9919 = trunc i32 %9918 to i8
  %9920 = and i8 %9919, 1
  %9921 = xor i8 %9920, 1
  store i8 %9921, i8* %39, align 1
  %9922 = xor i32 %9913, %9907
  %9923 = xor i32 %9922, %9914
  %9924 = lshr i32 %9923, 4
  %9925 = trunc i32 %9924 to i8
  %9926 = and i8 %9925, 1
  store i8 %9926, i8* %45, align 1
  %9927 = icmp eq i32 %9914, 0
  %9928 = zext i1 %9927 to i8
  store i8 %9928, i8* %48, align 1
  %9929 = lshr i32 %9914, 31
  %9930 = trunc i32 %9929 to i8
  store i8 %9930, i8* %51, align 1
  %9931 = lshr i32 %9907, 31
  %9932 = lshr i32 %9913, 31
  %9933 = xor i32 %9932, %9931
  %9934 = xor i32 %9929, %9931
  %9935 = add nuw nsw i32 %9934, %9933
  %9936 = icmp eq i32 %9935, 2
  %9937 = zext i1 %9936 to i8
  store i8 %9937, i8* %57, align 1
  %9938 = icmp ne i8 %9930, 0
  %9939 = xor i1 %9938, %9936
  %.demorgan489 = or i1 %9927, %9939
  %.v584 = select i1 %.demorgan489, i64 9, i64 346
  %9940 = add i64 %9910, %.v584
  store i64 %9940, i64* %3, align 8
  br i1 %.demorgan489, label %block_421b23, label %block_.L_421c74

block_421b23:                                     ; preds = %block_421adc
  %9941 = add i64 %9908, -100
  %9942 = add i64 %9940, 3
  store i64 %9942, i64* %3, align 8
  %9943 = inttoptr i64 %9941 to i32*
  %9944 = load i32, i32* %9943, align 4
  %9945 = zext i32 %9944 to i64
  store i64 %9945, i64* %RAX.i3587.phi.trans.insert, align 8
  %9946 = add i64 %9908, -164
  %9947 = add i64 %9940, 9
  store i64 %9947, i64* %3, align 8
  %9948 = inttoptr i64 %9946 to i32*
  %9949 = load i32, i32* %9948, align 4
  %9950 = sub i32 %9944, %9949
  %9951 = zext i32 %9950 to i64
  store i64 %9951, i64* %RAX.i3587.phi.trans.insert, align 8
  %9952 = icmp ult i32 %9944, %9949
  %9953 = zext i1 %9952 to i8
  store i8 %9953, i8* %32, align 1
  %9954 = and i32 %9950, 255
  %9955 = tail call i32 @llvm.ctpop.i32(i32 %9954)
  %9956 = trunc i32 %9955 to i8
  %9957 = and i8 %9956, 1
  %9958 = xor i8 %9957, 1
  store i8 %9958, i8* %39, align 1
  %9959 = xor i32 %9949, %9944
  %9960 = xor i32 %9959, %9950
  %9961 = lshr i32 %9960, 4
  %9962 = trunc i32 %9961 to i8
  %9963 = and i8 %9962, 1
  store i8 %9963, i8* %45, align 1
  %9964 = icmp eq i32 %9950, 0
  %9965 = zext i1 %9964 to i8
  store i8 %9965, i8* %48, align 1
  %9966 = lshr i32 %9950, 31
  %9967 = trunc i32 %9966 to i8
  store i8 %9967, i8* %51, align 1
  %9968 = lshr i32 %9944, 31
  %9969 = lshr i32 %9949, 31
  %9970 = xor i32 %9969, %9968
  %9971 = xor i32 %9966, %9968
  %9972 = add nuw nsw i32 %9971, %9970
  %9973 = icmp eq i32 %9972, 2
  %9974 = zext i1 %9973 to i8
  store i8 %9974, i8* %57, align 1
  store i64 %9951, i64* %RDI.i1133, align 8
  %9975 = add i64 %9940, -133923
  %9976 = add i64 %9940, 16
  %9977 = load i64, i64* %6, align 8
  %9978 = add i64 %9977, -8
  %9979 = inttoptr i64 %9978 to i64*
  store i64 %9976, i64* %9979, align 8
  store i64 %9978, i64* %6, align 8
  store i64 %9975, i64* %3, align 8
  %9980 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %9906)
  %9981 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %9982 = load i64, i64* %RBP.i, align 8
  %9983 = add i64 %9982, -76
  %9984 = load i64, i64* %3, align 8
  %9985 = add i64 %9984, 3
  store i64 %9985, i64* %3, align 8
  %9986 = inttoptr i64 %9983 to i32*
  %9987 = load i32, i32* %9986, align 4
  %9988 = sub i32 %9981, %9987
  %9989 = icmp ult i32 %9981, %9987
  %9990 = zext i1 %9989 to i8
  store i8 %9990, i8* %32, align 1
  %9991 = and i32 %9988, 255
  %9992 = tail call i32 @llvm.ctpop.i32(i32 %9991)
  %9993 = trunc i32 %9992 to i8
  %9994 = and i8 %9993, 1
  %9995 = xor i8 %9994, 1
  store i8 %9995, i8* %39, align 1
  %9996 = xor i32 %9987, %9981
  %9997 = xor i32 %9996, %9988
  %9998 = lshr i32 %9997, 4
  %9999 = trunc i32 %9998 to i8
  %10000 = and i8 %9999, 1
  store i8 %10000, i8* %45, align 1
  %10001 = icmp eq i32 %9988, 0
  %10002 = zext i1 %10001 to i8
  store i8 %10002, i8* %48, align 1
  %10003 = lshr i32 %9988, 31
  %10004 = trunc i32 %10003 to i8
  store i8 %10004, i8* %51, align 1
  %10005 = lshr i32 %9981, 31
  %10006 = lshr i32 %9987, 31
  %10007 = xor i32 %10006, %10005
  %10008 = xor i32 %10003, %10005
  %10009 = add nuw nsw i32 %10008, %10007
  %10010 = icmp eq i32 %10009, 2
  %10011 = zext i1 %10010 to i8
  store i8 %10011, i8* %57, align 1
  %10012 = icmp ne i8 %10004, 0
  %10013 = xor i1 %10012, %10010
  %.demorgan490 = or i1 %10001, %10013
  %.v585 = select i1 %.demorgan490, i64 9, i64 321
  %10014 = add i64 %9984, %.v585
  store i64 %10014, i64* %3, align 8
  br i1 %.demorgan490, label %block_421b3c, label %block_.L_421c74

block_421b3c:                                     ; preds = %block_421b23
  %10015 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %10015, i64* %RAX.i3587.phi.trans.insert, align 8
  %10016 = add i64 %9982, -100
  %10017 = add i64 %10014, 11
  store i64 %10017, i64* %3, align 8
  %10018 = inttoptr i64 %10016 to i32*
  %10019 = load i32, i32* %10018, align 4
  %10020 = zext i32 %10019 to i64
  store i64 %10020, i64* %RCX.i4260.pre-phi, align 8
  %10021 = add i64 %9982, -164
  %10022 = add i64 %10014, 17
  store i64 %10022, i64* %3, align 8
  %10023 = inttoptr i64 %10021 to i32*
  %10024 = load i32, i32* %10023, align 4
  %10025 = sub i32 %10019, %10024
  %10026 = zext i32 %10025 to i64
  store i64 %10026, i64* %RCX.i4260.pre-phi, align 8
  %10027 = icmp ult i32 %10019, %10024
  %10028 = zext i1 %10027 to i8
  store i8 %10028, i8* %32, align 1
  %10029 = and i32 %10025, 255
  %10030 = tail call i32 @llvm.ctpop.i32(i32 %10029)
  %10031 = trunc i32 %10030 to i8
  %10032 = and i8 %10031, 1
  %10033 = xor i8 %10032, 1
  store i8 %10033, i8* %39, align 1
  %10034 = xor i32 %10024, %10019
  %10035 = xor i32 %10034, %10025
  %10036 = lshr i32 %10035, 4
  %10037 = trunc i32 %10036 to i8
  %10038 = and i8 %10037, 1
  store i8 %10038, i8* %45, align 1
  %10039 = icmp eq i32 %10025, 0
  %10040 = zext i1 %10039 to i8
  store i8 %10040, i8* %48, align 1
  %10041 = lshr i32 %10025, 31
  %10042 = trunc i32 %10041 to i8
  store i8 %10042, i8* %51, align 1
  %10043 = lshr i32 %10019, 31
  %10044 = lshr i32 %10024, 31
  %10045 = xor i32 %10044, %10043
  %10046 = xor i32 %10041, %10043
  %10047 = add nuw nsw i32 %10046, %10045
  %10048 = icmp eq i32 %10047, 2
  %10049 = zext i1 %10048 to i8
  store i8 %10049, i8* %57, align 1
  %10050 = add i64 %10014, 20
  store i64 %10050, i64* %3, align 8
  %10051 = load i32, i32* %9986, align 4
  %10052 = add i32 %10051, %10025
  %10053 = zext i32 %10052 to i64
  store i64 %10053, i64* %RCX.i4260.pre-phi, align 8
  %10054 = icmp ult i32 %10052, %10025
  %10055 = icmp ult i32 %10052, %10051
  %10056 = or i1 %10054, %10055
  %10057 = zext i1 %10056 to i8
  store i8 %10057, i8* %32, align 1
  %10058 = and i32 %10052, 255
  %10059 = tail call i32 @llvm.ctpop.i32(i32 %10058)
  %10060 = trunc i32 %10059 to i8
  %10061 = and i8 %10060, 1
  %10062 = xor i8 %10061, 1
  store i8 %10062, i8* %39, align 1
  %10063 = xor i32 %10051, %10025
  %10064 = xor i32 %10063, %10052
  %10065 = lshr i32 %10064, 4
  %10066 = trunc i32 %10065 to i8
  %10067 = and i8 %10066, 1
  store i8 %10067, i8* %45, align 1
  %10068 = icmp eq i32 %10052, 0
  %10069 = zext i1 %10068 to i8
  store i8 %10069, i8* %48, align 1
  %10070 = lshr i32 %10052, 31
  %10071 = trunc i32 %10070 to i8
  store i8 %10071, i8* %51, align 1
  %10072 = lshr i32 %10051, 31
  %10073 = xor i32 %10070, %10041
  %10074 = xor i32 %10070, %10072
  %10075 = add nuw nsw i32 %10073, %10074
  %10076 = icmp eq i32 %10075, 2
  %10077 = zext i1 %10076 to i8
  store i8 %10077, i8* %57, align 1
  %10078 = sext i32 %10052 to i64
  store i64 %10078, i64* %RDX.i4317.pre-phi, align 8
  %10079 = shl nsw i64 %10078, 3
  %10080 = add i64 %10015, %10079
  %10081 = add i64 %10014, 27
  store i64 %10081, i64* %3, align 8
  %10082 = inttoptr i64 %10080 to i64*
  %10083 = load i64, i64* %10082, align 8
  store i64 %10083, i64* %RAX.i3587.phi.trans.insert, align 8
  %10084 = add i64 %9982, -96
  %10085 = add i64 %10014, 30
  store i64 %10085, i64* %3, align 8
  %10086 = inttoptr i64 %10084 to i32*
  %10087 = load i32, i32* %10086, align 4
  %10088 = zext i32 %10087 to i64
  store i64 %10088, i64* %RCX.i4260.pre-phi, align 8
  %10089 = load i64, i64* %RBP.i, align 8
  %10090 = add i64 %10089, -160
  %10091 = add i64 %10014, 36
  store i64 %10091, i64* %3, align 8
  %10092 = inttoptr i64 %10090 to i32*
  %10093 = load i32, i32* %10092, align 4
  %10094 = sub i32 %10087, %10093
  %10095 = zext i32 %10094 to i64
  store i64 %10095, i64* %RCX.i4260.pre-phi, align 8
  %10096 = icmp ult i32 %10087, %10093
  %10097 = zext i1 %10096 to i8
  store i8 %10097, i8* %32, align 1
  %10098 = and i32 %10094, 255
  %10099 = tail call i32 @llvm.ctpop.i32(i32 %10098)
  %10100 = trunc i32 %10099 to i8
  %10101 = and i8 %10100, 1
  %10102 = xor i8 %10101, 1
  store i8 %10102, i8* %39, align 1
  %10103 = xor i32 %10093, %10087
  %10104 = xor i32 %10103, %10094
  %10105 = lshr i32 %10104, 4
  %10106 = trunc i32 %10105 to i8
  %10107 = and i8 %10106, 1
  store i8 %10107, i8* %45, align 1
  %10108 = icmp eq i32 %10094, 0
  %10109 = zext i1 %10108 to i8
  store i8 %10109, i8* %48, align 1
  %10110 = lshr i32 %10094, 31
  %10111 = trunc i32 %10110 to i8
  store i8 %10111, i8* %51, align 1
  %10112 = lshr i32 %10087, 31
  %10113 = lshr i32 %10093, 31
  %10114 = xor i32 %10113, %10112
  %10115 = xor i32 %10110, %10112
  %10116 = add nuw nsw i32 %10115, %10114
  %10117 = icmp eq i32 %10116, 2
  %10118 = zext i1 %10117 to i8
  store i8 %10118, i8* %57, align 1
  %10119 = add i64 %10089, -76
  %10120 = add i64 %10014, 39
  store i64 %10120, i64* %3, align 8
  %10121 = inttoptr i64 %10119 to i32*
  %10122 = load i32, i32* %10121, align 4
  %10123 = add i32 %10122, %10094
  %10124 = zext i32 %10123 to i64
  store i64 %10124, i64* %RCX.i4260.pre-phi, align 8
  %10125 = icmp ult i32 %10123, %10094
  %10126 = icmp ult i32 %10123, %10122
  %10127 = or i1 %10125, %10126
  %10128 = zext i1 %10127 to i8
  store i8 %10128, i8* %32, align 1
  %10129 = and i32 %10123, 255
  %10130 = tail call i32 @llvm.ctpop.i32(i32 %10129)
  %10131 = trunc i32 %10130 to i8
  %10132 = and i8 %10131, 1
  %10133 = xor i8 %10132, 1
  store i8 %10133, i8* %39, align 1
  %10134 = xor i32 %10122, %10094
  %10135 = xor i32 %10134, %10123
  %10136 = lshr i32 %10135, 4
  %10137 = trunc i32 %10136 to i8
  %10138 = and i8 %10137, 1
  store i8 %10138, i8* %45, align 1
  %10139 = icmp eq i32 %10123, 0
  %10140 = zext i1 %10139 to i8
  store i8 %10140, i8* %48, align 1
  %10141 = lshr i32 %10123, 31
  %10142 = trunc i32 %10141 to i8
  store i8 %10142, i8* %51, align 1
  %10143 = lshr i32 %10122, 31
  %10144 = xor i32 %10141, %10110
  %10145 = xor i32 %10141, %10143
  %10146 = add nuw nsw i32 %10144, %10145
  %10147 = icmp eq i32 %10146, 2
  %10148 = zext i1 %10147 to i8
  store i8 %10148, i8* %57, align 1
  %10149 = sext i32 %10123 to i64
  store i64 %10149, i64* %RDX.i4317.pre-phi, align 8
  %10150 = shl nsw i64 %10149, 2
  %10151 = add i64 %10083, %10150
  %10152 = add i64 %10014, 46
  store i64 %10152, i64* %3, align 8
  %10153 = inttoptr i64 %10151 to i32*
  %10154 = load i32, i32* %10153, align 4
  store i8 0, i8* %32, align 1
  %10155 = and i32 %10154, 255
  %10156 = tail call i32 @llvm.ctpop.i32(i32 %10155)
  %10157 = trunc i32 %10156 to i8
  %10158 = and i8 %10157, 1
  %10159 = xor i8 %10158, 1
  store i8 %10159, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %10160 = icmp eq i32 %10154, 0
  %10161 = zext i1 %10160 to i8
  store i8 %10161, i8* %48, align 1
  %10162 = lshr i32 %10154, 31
  %10163 = trunc i32 %10162 to i8
  store i8 %10163, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v586 = select i1 %10160, i64 52, i64 307
  %10164 = add i64 %10014, %.v586
  store i64 %10164, i64* %3, align 8
  br i1 %10160, label %block_421b70, label %block_.L_421c6f

block_421b70:                                     ; preds = %block_421b3c
  %10165 = load i64, i64* %RBP.i, align 8
  %10166 = add i64 %10165, -132
  %10167 = add i64 %10164, 6
  store i64 %10167, i64* %3, align 8
  %10168 = inttoptr i64 %10166 to i32*
  %10169 = load i32, i32* %10168, align 4
  %10170 = zext i32 %10169 to i64
  store i64 %10170, i64* %RAX.i3587.phi.trans.insert, align 8
  %10171 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %10171, i64* %RCX.i4260.pre-phi, align 8
  %10172 = add i64 %10165, -96
  %10173 = add i64 %10164, 17
  store i64 %10173, i64* %3, align 8
  %10174 = inttoptr i64 %10172 to i32*
  %10175 = load i32, i32* %10174, align 4
  %10176 = zext i32 %10175 to i64
  store i64 %10176, i64* %RDX.i4317.pre-phi, align 8
  %10177 = add i64 %10165, -136
  %10178 = add i64 %10164, 23
  store i64 %10178, i64* %3, align 8
  %10179 = inttoptr i64 %10177 to i32*
  %10180 = load i32, i32* %10179, align 4
  %10181 = zext i32 %10180 to i64
  store i64 %10181, i64* %RSI.i739, align 8
  %10182 = add i64 %10165, -336
  %10183 = add i64 %10164, 30
  store i64 %10183, i64* %3, align 8
  %10184 = inttoptr i64 %10182 to i64*
  store i64 %10171, i64* %10184, align 8
  %10185 = load i32, i32* %ESI.i1656, align 4
  %10186 = zext i32 %10185 to i64
  %10187 = load i64, i64* %3, align 8
  store i64 %10186, i64* %RCX.i4260.pre-phi, align 8
  %10188 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %10189 = add i64 %10187, 4
  store i64 %10189, i64* %3, align 8
  %10190 = trunc i32 %10185 to i5
  switch i5 %10190, label %10197 [
    i5 0, label %routine_shll__cl___edx.exit3181
    i5 1, label %10191
  ]

; <label>:10191:                                  ; preds = %block_421b70
  %10192 = trunc i64 %10188 to i32
  %10193 = shl i32 %10192, 1
  %10194 = icmp slt i32 %10192, 0
  %10195 = icmp slt i32 %10193, 0
  %10196 = xor i1 %10194, %10195
  br label %10207

; <label>:10197:                                  ; preds = %block_421b70
  %10198 = and i32 %10185, 31
  %10199 = zext i32 %10198 to i64
  %10200 = add nuw nsw i64 %10199, 4294967295
  %10201 = and i64 %10188, 4294967295
  %10202 = and i64 %10200, 4294967295
  %10203 = shl i64 %10201, %10202
  %10204 = trunc i64 %10203 to i32
  %10205 = icmp slt i32 %10204, 0
  %10206 = shl i32 %10204, 1
  br label %10207

; <label>:10207:                                  ; preds = %10197, %10191
  %10208 = phi i1 [ %10194, %10191 ], [ %10205, %10197 ]
  %10209 = phi i1 [ %10196, %10191 ], [ false, %10197 ]
  %10210 = phi i32 [ %10193, %10191 ], [ %10206, %10197 ]
  %10211 = zext i32 %10210 to i64
  store i64 %10211, i64* %RDX.i4317.pre-phi, align 8
  %10212 = zext i1 %10208 to i8
  store i8 %10212, i8* %32, align 1
  %10213 = and i32 %10210, 254
  %10214 = tail call i32 @llvm.ctpop.i32(i32 %10213)
  %10215 = trunc i32 %10214 to i8
  %10216 = and i8 %10215, 1
  %10217 = xor i8 %10216, 1
  store i8 %10217, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %10218 = icmp eq i32 %10210, 0
  %10219 = zext i1 %10218 to i8
  store i8 %10219, i8* %48, align 1
  %10220 = lshr i32 %10210, 31
  %10221 = trunc i32 %10220 to i8
  store i8 %10221, i8* %51, align 1
  %10222 = zext i1 %10209 to i8
  store i8 %10222, i8* %57, align 1
  br label %routine_shll__cl___edx.exit3181

routine_shll__cl___edx.exit3181:                  ; preds = %10207, %block_421b70
  %10223 = phi i64 [ %10211, %10207 ], [ %10188, %block_421b70 ]
  %10224 = load i64, i64* %RBP.i, align 8
  %10225 = add i64 %10224, -152
  %10226 = add i64 %10187, 10
  store i64 %10226, i64* %3, align 8
  %10227 = trunc i64 %10223 to i32
  %10228 = inttoptr i64 %10225 to i32*
  %10229 = load i32, i32* %10228, align 4
  %10230 = sub i32 %10227, %10229
  %10231 = zext i32 %10230 to i64
  store i64 %10231, i64* %RDX.i4317.pre-phi, align 8
  %10232 = icmp ult i32 %10227, %10229
  %10233 = zext i1 %10232 to i8
  store i8 %10233, i8* %32, align 1
  %10234 = and i32 %10230, 255
  %10235 = tail call i32 @llvm.ctpop.i32(i32 %10234)
  %10236 = trunc i32 %10235 to i8
  %10237 = and i8 %10236, 1
  %10238 = xor i8 %10237, 1
  store i8 %10238, i8* %39, align 1
  %10239 = xor i32 %10229, %10227
  %10240 = xor i32 %10239, %10230
  %10241 = lshr i32 %10240, 4
  %10242 = trunc i32 %10241 to i8
  %10243 = and i8 %10242, 1
  store i8 %10243, i8* %45, align 1
  %10244 = icmp eq i32 %10230, 0
  %10245 = zext i1 %10244 to i8
  store i8 %10245, i8* %48, align 1
  %10246 = lshr i32 %10230, 31
  %10247 = trunc i32 %10246 to i8
  store i8 %10247, i8* %51, align 1
  %10248 = lshr i32 %10227, 31
  %10249 = lshr i32 %10229, 31
  %10250 = xor i32 %10249, %10248
  %10251 = xor i32 %10246, %10248
  %10252 = add nuw nsw i32 %10251, %10250
  %10253 = icmp eq i32 %10252, 2
  %10254 = zext i1 %10253 to i8
  store i8 %10254, i8* %57, align 1
  %10255 = sext i32 %10230 to i64
  store i64 %10255, i64* %RDI.i1133, align 8
  %10256 = add i64 %10224, -336
  %10257 = add i64 %10187, 20
  store i64 %10257, i64* %3, align 8
  %10258 = inttoptr i64 %10256 to i64*
  %10259 = load i64, i64* %10258, align 8
  store i64 %10259, i64* %R8.i5602, align 8
  %10260 = shl nsw i64 %10255, 2
  %10261 = add i64 %10260, %10259
  %10262 = add i64 %10187, 24
  store i64 %10262, i64* %3, align 8
  %10263 = inttoptr i64 %10261 to i32*
  %10264 = load i32, i32* %10263, align 4
  %10265 = zext i32 %10264 to i64
  store i64 %10265, i64* %RDX.i4317.pre-phi, align 8
  %10266 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %10266, i64* %RDI.i1133, align 8
  %10267 = add i64 %10224, -100
  %10268 = add i64 %10187, 35
  store i64 %10268, i64* %3, align 8
  %10269 = inttoptr i64 %10267 to i32*
  %10270 = load i32, i32* %10269, align 4
  %10271 = zext i32 %10270 to i64
  store i64 %10271, i64* %RSI.i739, align 8
  %10272 = add i64 %10224, -136
  %10273 = add i64 %10187, 41
  store i64 %10273, i64* %3, align 8
  %10274 = inttoptr i64 %10272 to i32*
  %10275 = load i32, i32* %10274, align 4
  %10276 = zext i32 %10275 to i64
  store i64 %10276, i64* %RCX.i4260.pre-phi, align 8
  %10277 = add i64 %10187, 43
  store i64 %10277, i64* %3, align 8
  %10278 = trunc i32 %10275 to i5
  switch i5 %10278, label %10284 [
    i5 0, label %routine_shll__cl___esi.exit3156
    i5 1, label %10279
  ]

; <label>:10279:                                  ; preds = %routine_shll__cl___edx.exit3181
  %10280 = shl i32 %10270, 1
  %10281 = icmp slt i32 %10270, 0
  %10282 = icmp slt i32 %10280, 0
  %10283 = xor i1 %10281, %10282
  br label %10293

; <label>:10284:                                  ; preds = %routine_shll__cl___edx.exit3181
  %10285 = and i32 %10275, 31
  %10286 = zext i32 %10285 to i64
  %10287 = add nuw nsw i64 %10286, 4294967295
  %10288 = and i64 %10287, 4294967295
  %10289 = shl i64 %10271, %10288
  %10290 = trunc i64 %10289 to i32
  %10291 = icmp slt i32 %10290, 0
  %10292 = shl i32 %10290, 1
  br label %10293

; <label>:10293:                                  ; preds = %10284, %10279
  %10294 = phi i1 [ %10281, %10279 ], [ %10291, %10284 ]
  %10295 = phi i1 [ %10283, %10279 ], [ false, %10284 ]
  %10296 = phi i32 [ %10280, %10279 ], [ %10292, %10284 ]
  %10297 = zext i32 %10296 to i64
  store i64 %10297, i64* %RSI.i739, align 8
  %10298 = zext i1 %10294 to i8
  store i8 %10298, i8* %32, align 1
  %10299 = and i32 %10296, 254
  %10300 = tail call i32 @llvm.ctpop.i32(i32 %10299)
  %10301 = trunc i32 %10300 to i8
  %10302 = and i8 %10301, 1
  %10303 = xor i8 %10302, 1
  store i8 %10303, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %10304 = icmp eq i32 %10296, 0
  %10305 = zext i1 %10304 to i8
  store i8 %10305, i8* %48, align 1
  %10306 = lshr i32 %10296, 31
  %10307 = trunc i32 %10306 to i8
  store i8 %10307, i8* %51, align 1
  %10308 = zext i1 %10295 to i8
  store i8 %10308, i8* %57, align 1
  br label %routine_shll__cl___esi.exit3156

routine_shll__cl___esi.exit3156:                  ; preds = %10293, %routine_shll__cl___edx.exit3181
  %10309 = phi i32 [ %10296, %10293 ], [ %10270, %routine_shll__cl___edx.exit3181 ]
  %10310 = add i64 %10224, -156
  %10311 = add i64 %10187, 49
  store i64 %10311, i64* %3, align 8
  %10312 = inttoptr i64 %10310 to i32*
  %10313 = load i32, i32* %10312, align 4
  %10314 = sub i32 %10309, %10313
  %10315 = zext i32 %10314 to i64
  store i64 %10315, i64* %RSI.i739, align 8
  %10316 = icmp ult i32 %10309, %10313
  %10317 = zext i1 %10316 to i8
  store i8 %10317, i8* %32, align 1
  %10318 = and i32 %10314, 255
  %10319 = tail call i32 @llvm.ctpop.i32(i32 %10318)
  %10320 = trunc i32 %10319 to i8
  %10321 = and i8 %10320, 1
  %10322 = xor i8 %10321, 1
  store i8 %10322, i8* %39, align 1
  %10323 = xor i32 %10313, %10309
  %10324 = xor i32 %10323, %10314
  %10325 = lshr i32 %10324, 4
  %10326 = trunc i32 %10325 to i8
  %10327 = and i8 %10326, 1
  store i8 %10327, i8* %45, align 1
  %10328 = icmp eq i32 %10314, 0
  %10329 = zext i1 %10328 to i8
  store i8 %10329, i8* %48, align 1
  %10330 = lshr i32 %10314, 31
  %10331 = trunc i32 %10330 to i8
  store i8 %10331, i8* %51, align 1
  %10332 = lshr i32 %10309, 31
  %10333 = lshr i32 %10313, 31
  %10334 = xor i32 %10333, %10332
  %10335 = xor i32 %10330, %10332
  %10336 = add nuw nsw i32 %10335, %10334
  %10337 = icmp eq i32 %10336, 2
  %10338 = zext i1 %10337 to i8
  store i8 %10338, i8* %57, align 1
  %10339 = sext i32 %10314 to i64
  store i64 %10339, i64* %R9.i5580, align 8
  %10340 = shl nsw i64 %10339, 2
  %10341 = add i64 %10266, %10340
  %10342 = add i64 %10187, 56
  store i64 %10342, i64* %3, align 8
  %10343 = inttoptr i64 %10341 to i32*
  %10344 = load i32, i32* %10343, align 4
  %10345 = add i32 %10344, %10264
  %10346 = zext i32 %10345 to i64
  store i64 %10346, i64* %RDX.i4317.pre-phi, align 8
  %10347 = icmp ult i32 %10345, %10264
  %10348 = icmp ult i32 %10345, %10344
  %10349 = or i1 %10347, %10348
  %10350 = zext i1 %10349 to i8
  store i8 %10350, i8* %32, align 1
  %10351 = and i32 %10345, 255
  %10352 = tail call i32 @llvm.ctpop.i32(i32 %10351)
  %10353 = trunc i32 %10352 to i8
  %10354 = and i8 %10353, 1
  %10355 = xor i8 %10354, 1
  store i8 %10355, i8* %39, align 1
  %10356 = xor i32 %10344, %10264
  %10357 = xor i32 %10356, %10345
  %10358 = lshr i32 %10357, 4
  %10359 = trunc i32 %10358 to i8
  %10360 = and i8 %10359, 1
  store i8 %10360, i8* %45, align 1
  %10361 = icmp eq i32 %10345, 0
  %10362 = zext i1 %10361 to i8
  store i8 %10362, i8* %48, align 1
  %10363 = lshr i32 %10345, 31
  %10364 = trunc i32 %10363 to i8
  store i8 %10364, i8* %51, align 1
  %10365 = lshr i32 %10264, 31
  %10366 = lshr i32 %10344, 31
  %10367 = xor i32 %10363, %10365
  %10368 = xor i32 %10363, %10366
  %10369 = add nuw nsw i32 %10367, %10368
  %10370 = icmp eq i32 %10369, 2
  %10371 = zext i1 %10370 to i8
  store i8 %10371, i8* %57, align 1
  %10372 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %10373 = shl i64 %10372, 32
  %10374 = ashr exact i64 %10373, 32
  %10375 = sext i32 %10345 to i64
  %10376 = mul nsw i64 %10375, %10374
  %10377 = shl i64 %10376, 32
  %10378 = ashr i64 %10377, 47
  %10379 = lshr i64 %10378, 1
  %10380 = trunc i64 %10378 to i8
  %10381 = and i8 %10380, 1
  %10382 = trunc i64 %10379 to i32
  %10383 = and i64 %10379, 4294967295
  store i64 %10383, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %10381, i8* %32, align 1
  %10384 = and i32 %10382, 255
  %10385 = tail call i32 @llvm.ctpop.i32(i32 %10384)
  %10386 = trunc i32 %10385 to i8
  %10387 = and i8 %10386, 1
  %10388 = xor i8 %10387, 1
  store i8 %10388, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %10389 = icmp eq i32 %10382, 0
  %10390 = zext i1 %10389 to i8
  store i8 %10390, i8* %48, align 1
  %10391 = lshr i64 %10378, 32
  %10392 = trunc i64 %10391 to i8
  %10393 = and i8 %10392, 1
  store i8 %10393, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %10394 = load i64, i64* %RBP.i, align 8
  %10395 = add i64 %10394, -104
  %10396 = trunc i64 %10379 to i32
  %10397 = add i64 %10187, 65
  store i64 %10397, i64* %3, align 8
  %10398 = inttoptr i64 %10395 to i32*
  store i32 %10396, i32* %10398, align 4
  %10399 = load i64, i64* %RBP.i, align 8
  %10400 = add i64 %10399, -128
  %10401 = load i64, i64* %3, align 8
  %10402 = add i64 %10401, 4
  store i64 %10402, i64* %3, align 8
  %10403 = inttoptr i64 %10400 to i64*
  %10404 = load i64, i64* %10403, align 8
  store i64 %10404, i64* %RDI.i1133, align 8
  %10405 = add i64 %10399, -32
  %10406 = add i64 %10401, 8
  store i64 %10406, i64* %3, align 8
  %10407 = inttoptr i64 %10405 to i64*
  %10408 = load i64, i64* %10407, align 8
  store i64 %10408, i64* %RSI.i739, align 8
  %10409 = add i64 %10399, -112
  %10410 = add i64 %10401, 12
  store i64 %10410, i64* %3, align 8
  %10411 = inttoptr i64 %10409 to i64*
  %10412 = load i64, i64* %10411, align 8
  store i64 %10412, i64* %RDX.i4317.pre-phi, align 8
  %10413 = add i64 %10399, -140
  %10414 = add i64 %10401, 18
  store i64 %10414, i64* %3, align 8
  %10415 = inttoptr i64 %10413 to i32*
  %10416 = load i32, i32* %10415, align 4
  %10417 = zext i32 %10416 to i64
  store i64 %10417, i64* %RCX.i4260.pre-phi, align 8
  %10418 = add i64 %10399, -144
  %10419 = add i64 %10401, 25
  store i64 %10419, i64* %3, align 8
  %10420 = inttoptr i64 %10418 to i32*
  %10421 = load i32, i32* %10420, align 4
  %10422 = zext i32 %10421 to i64
  store i64 %10422, i64* %R8.i5602, align 8
  %10423 = add i64 %10399, -148
  %10424 = add i64 %10401, 32
  store i64 %10424, i64* %3, align 8
  %10425 = inttoptr i64 %10423 to i32*
  %10426 = load i32, i32* %10425, align 4
  %10427 = zext i32 %10426 to i64
  store i64 %10427, i64* %R9.i5580, align 8
  %10428 = add i64 %10399, -104
  %10429 = add i64 %10401, 35
  store i64 %10429, i64* %3, align 8
  %10430 = inttoptr i64 %10428 to i32*
  %10431 = load i32, i32* %10430, align 4
  %10432 = zext i32 %10431 to i64
  store i64 %10432, i64* %RAX.i3587.phi.trans.insert, align 8
  %10433 = add i64 %10399, -80
  %10434 = add i64 %10401, 39
  store i64 %10434, i64* %3, align 8
  %10435 = inttoptr i64 %10433 to i32*
  %10436 = load i32, i32* %10435, align 4
  %10437 = zext i32 %10436 to i64
  store i64 %10437, i64* %68, align 8
  %10438 = add i64 %10399, -96
  %10439 = add i64 %10401, 43
  store i64 %10439, i64* %3, align 8
  %10440 = inttoptr i64 %10438 to i32*
  %10441 = load i32, i32* %10440, align 4
  %10442 = zext i32 %10441 to i64
  store i64 %10442, i64* %R11.i, align 8
  %10443 = add i64 %10399, -100
  %10444 = add i64 %10401, 46
  store i64 %10444, i64* %3, align 8
  %10445 = inttoptr i64 %10443 to i32*
  %10446 = load i32, i32* %10445, align 4
  %10447 = zext i32 %10446 to i64
  store i64 %10447, i64* %RBX.i615, align 8
  %10448 = load i32*, i32** %2119, align 8
  %10449 = add i64 %10401, 49
  store i64 %10449, i64* %3, align 8
  store i32 %10431, i32* %10448, align 4
  %10450 = load i64, i64* %6, align 8
  %10451 = add i64 %10450, 8
  %10452 = load i32, i32* %R10D.i761, align 4
  %10453 = load i64, i64* %3, align 8
  %10454 = add i64 %10453, 5
  store i64 %10454, i64* %3, align 8
  %10455 = inttoptr i64 %10451 to i32*
  store i32 %10452, i32* %10455, align 4
  %10456 = load i64, i64* %6, align 8
  %10457 = add i64 %10456, 16
  %10458 = load i32, i32* %R11D.i5540, align 4
  %10459 = load i64, i64* %3, align 8
  %10460 = add i64 %10459, 5
  store i64 %10460, i64* %3, align 8
  %10461 = inttoptr i64 %10457 to i32*
  store i32 %10458, i32* %10461, align 4
  %10462 = load i64, i64* %6, align 8
  %10463 = add i64 %10462, 24
  %10464 = load i32, i32* %EBX.i5525, align 4
  %10465 = load i64, i64* %3, align 8
  %10466 = add i64 %10465, 4
  store i64 %10466, i64* %3, align 8
  %10467 = inttoptr i64 %10463 to i32*
  store i32 %10464, i32* %10467, align 4
  %10468 = load i64, i64* %3, align 8
  %10469 = add i64 %10468, -5982
  %10470 = add i64 %10468, 5
  %10471 = load i64, i64* %6, align 8
  %10472 = add i64 %10471, -8
  %10473 = inttoptr i64 %10472 to i64*
  store i64 %10470, i64* %10473, align 8
  store i64 %10472, i64* %6, align 8
  store i64 %10469, i64* %3, align 8
  %call2_421c0e = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %10469, %struct.Memory* %9980)
  %10474 = load i64, i64* %RBP.i, align 8
  %10475 = add i64 %10474, -104
  %10476 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %10477 = load i64, i64* %3, align 8
  %10478 = add i64 %10477, 3
  store i64 %10478, i64* %3, align 8
  %10479 = inttoptr i64 %10475 to i32*
  store i32 %10476, i32* %10479, align 4
  %10480 = load i64, i64* %RBP.i, align 8
  %10481 = add i64 %10480, -104
  %10482 = load i64, i64* %3, align 8
  %10483 = add i64 %10482, 3
  store i64 %10483, i64* %3, align 8
  %10484 = inttoptr i64 %10481 to i32*
  %10485 = load i32, i32* %10484, align 4
  %10486 = zext i32 %10485 to i64
  store i64 %10486, i64* %RAX.i3587.phi.trans.insert, align 8
  %10487 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %10487, i64* %RDX.i4317.pre-phi, align 8
  %10488 = add i64 %10480, -100
  %10489 = add i64 %10482, 14
  store i64 %10489, i64* %3, align 8
  %10490 = inttoptr i64 %10488 to i32*
  %10491 = load i32, i32* %10490, align 4
  %10492 = zext i32 %10491 to i64
  store i64 %10492, i64* %RCX.i4260.pre-phi, align 8
  %10493 = add i64 %10480, -164
  %10494 = add i64 %10482, 20
  store i64 %10494, i64* %3, align 8
  %10495 = inttoptr i64 %10493 to i32*
  %10496 = load i32, i32* %10495, align 4
  %10497 = sub i32 %10491, %10496
  %10498 = zext i32 %10497 to i64
  store i64 %10498, i64* %RCX.i4260.pre-phi, align 8
  %10499 = icmp ult i32 %10491, %10496
  %10500 = zext i1 %10499 to i8
  store i8 %10500, i8* %32, align 1
  %10501 = and i32 %10497, 255
  %10502 = tail call i32 @llvm.ctpop.i32(i32 %10501)
  %10503 = trunc i32 %10502 to i8
  %10504 = and i8 %10503, 1
  %10505 = xor i8 %10504, 1
  store i8 %10505, i8* %39, align 1
  %10506 = xor i32 %10496, %10491
  %10507 = xor i32 %10506, %10497
  %10508 = lshr i32 %10507, 4
  %10509 = trunc i32 %10508 to i8
  %10510 = and i8 %10509, 1
  store i8 %10510, i8* %45, align 1
  %10511 = icmp eq i32 %10497, 0
  %10512 = zext i1 %10511 to i8
  store i8 %10512, i8* %48, align 1
  %10513 = lshr i32 %10497, 31
  %10514 = trunc i32 %10513 to i8
  store i8 %10514, i8* %51, align 1
  %10515 = lshr i32 %10491, 31
  %10516 = lshr i32 %10496, 31
  %10517 = xor i32 %10516, %10515
  %10518 = xor i32 %10513, %10515
  %10519 = add nuw nsw i32 %10518, %10517
  %10520 = icmp eq i32 %10519, 2
  %10521 = zext i1 %10520 to i8
  store i8 %10521, i8* %57, align 1
  %10522 = add i64 %10480, -76
  %10523 = add i64 %10482, 23
  store i64 %10523, i64* %3, align 8
  %10524 = inttoptr i64 %10522 to i32*
  %10525 = load i32, i32* %10524, align 4
  %10526 = add i32 %10525, %10497
  %10527 = zext i32 %10526 to i64
  store i64 %10527, i64* %RCX.i4260.pre-phi, align 8
  %10528 = icmp ult i32 %10526, %10497
  %10529 = icmp ult i32 %10526, %10525
  %10530 = or i1 %10528, %10529
  %10531 = zext i1 %10530 to i8
  store i8 %10531, i8* %32, align 1
  %10532 = and i32 %10526, 255
  %10533 = tail call i32 @llvm.ctpop.i32(i32 %10532)
  %10534 = trunc i32 %10533 to i8
  %10535 = and i8 %10534, 1
  %10536 = xor i8 %10535, 1
  store i8 %10536, i8* %39, align 1
  %10537 = xor i32 %10525, %10497
  %10538 = xor i32 %10537, %10526
  %10539 = lshr i32 %10538, 4
  %10540 = trunc i32 %10539 to i8
  %10541 = and i8 %10540, 1
  store i8 %10541, i8* %45, align 1
  %10542 = icmp eq i32 %10526, 0
  %10543 = zext i1 %10542 to i8
  store i8 %10543, i8* %48, align 1
  %10544 = lshr i32 %10526, 31
  %10545 = trunc i32 %10544 to i8
  store i8 %10545, i8* %51, align 1
  %10546 = lshr i32 %10525, 31
  %10547 = xor i32 %10544, %10513
  %10548 = xor i32 %10544, %10546
  %10549 = add nuw nsw i32 %10547, %10548
  %10550 = icmp eq i32 %10549, 2
  %10551 = zext i1 %10550 to i8
  store i8 %10551, i8* %57, align 1
  %10552 = sext i32 %10526 to i64
  store i64 %10552, i64* %RSI.i739, align 8
  %10553 = shl nsw i64 %10552, 3
  %10554 = add i64 %10487, %10553
  %10555 = add i64 %10482, 30
  store i64 %10555, i64* %3, align 8
  %10556 = inttoptr i64 %10554 to i64*
  %10557 = load i64, i64* %10556, align 8
  store i64 %10557, i64* %RDX.i4317.pre-phi, align 8
  %10558 = load i64, i64* %RBP.i, align 8
  %10559 = add i64 %10558, -96
  %10560 = add i64 %10482, 33
  store i64 %10560, i64* %3, align 8
  %10561 = inttoptr i64 %10559 to i32*
  %10562 = load i32, i32* %10561, align 4
  %10563 = zext i32 %10562 to i64
  store i64 %10563, i64* %RCX.i4260.pre-phi, align 8
  %10564 = add i64 %10558, -160
  %10565 = add i64 %10482, 39
  store i64 %10565, i64* %3, align 8
  %10566 = inttoptr i64 %10564 to i32*
  %10567 = load i32, i32* %10566, align 4
  %10568 = sub i32 %10562, %10567
  %10569 = zext i32 %10568 to i64
  store i64 %10569, i64* %RCX.i4260.pre-phi, align 8
  %10570 = icmp ult i32 %10562, %10567
  %10571 = zext i1 %10570 to i8
  store i8 %10571, i8* %32, align 1
  %10572 = and i32 %10568, 255
  %10573 = tail call i32 @llvm.ctpop.i32(i32 %10572)
  %10574 = trunc i32 %10573 to i8
  %10575 = and i8 %10574, 1
  %10576 = xor i8 %10575, 1
  store i8 %10576, i8* %39, align 1
  %10577 = xor i32 %10567, %10562
  %10578 = xor i32 %10577, %10568
  %10579 = lshr i32 %10578, 4
  %10580 = trunc i32 %10579 to i8
  %10581 = and i8 %10580, 1
  store i8 %10581, i8* %45, align 1
  %10582 = icmp eq i32 %10568, 0
  %10583 = zext i1 %10582 to i8
  store i8 %10583, i8* %48, align 1
  %10584 = lshr i32 %10568, 31
  %10585 = trunc i32 %10584 to i8
  store i8 %10585, i8* %51, align 1
  %10586 = lshr i32 %10562, 31
  %10587 = lshr i32 %10567, 31
  %10588 = xor i32 %10587, %10586
  %10589 = xor i32 %10584, %10586
  %10590 = add nuw nsw i32 %10589, %10588
  %10591 = icmp eq i32 %10590, 2
  %10592 = zext i1 %10591 to i8
  store i8 %10592, i8* %57, align 1
  %10593 = add i64 %10558, -76
  %10594 = add i64 %10482, 42
  store i64 %10594, i64* %3, align 8
  %10595 = inttoptr i64 %10593 to i32*
  %10596 = load i32, i32* %10595, align 4
  %10597 = add i32 %10596, %10568
  %10598 = zext i32 %10597 to i64
  store i64 %10598, i64* %RCX.i4260.pre-phi, align 8
  %10599 = icmp ult i32 %10597, %10568
  %10600 = icmp ult i32 %10597, %10596
  %10601 = or i1 %10599, %10600
  %10602 = zext i1 %10601 to i8
  store i8 %10602, i8* %32, align 1
  %10603 = and i32 %10597, 255
  %10604 = tail call i32 @llvm.ctpop.i32(i32 %10603)
  %10605 = trunc i32 %10604 to i8
  %10606 = and i8 %10605, 1
  %10607 = xor i8 %10606, 1
  store i8 %10607, i8* %39, align 1
  %10608 = xor i32 %10596, %10568
  %10609 = xor i32 %10608, %10597
  %10610 = lshr i32 %10609, 4
  %10611 = trunc i32 %10610 to i8
  %10612 = and i8 %10611, 1
  store i8 %10612, i8* %45, align 1
  %10613 = icmp eq i32 %10597, 0
  %10614 = zext i1 %10613 to i8
  store i8 %10614, i8* %48, align 1
  %10615 = lshr i32 %10597, 31
  %10616 = trunc i32 %10615 to i8
  store i8 %10616, i8* %51, align 1
  %10617 = lshr i32 %10596, 31
  %10618 = xor i32 %10615, %10584
  %10619 = xor i32 %10615, %10617
  %10620 = add nuw nsw i32 %10618, %10619
  %10621 = icmp eq i32 %10620, 2
  %10622 = zext i1 %10621 to i8
  store i8 %10622, i8* %57, align 1
  %10623 = sext i32 %10597 to i64
  store i64 %10623, i64* %RSI.i739, align 8
  %10624 = shl nsw i64 %10623, 2
  %10625 = add i64 %10557, %10624
  %10626 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %10627 = add i64 %10482, 48
  store i64 %10627, i64* %3, align 8
  %10628 = inttoptr i64 %10625 to i32*
  store i32 %10626, i32* %10628, align 4
  %10629 = load i64, i64* %RBP.i, align 8
  %10630 = add i64 %10629, -104
  %10631 = load i64, i64* %3, align 8
  %10632 = add i64 %10631, 3
  store i64 %10632, i64* %3, align 8
  %10633 = inttoptr i64 %10630 to i32*
  %10634 = load i32, i32* %10633, align 4
  %10635 = zext i32 %10634 to i64
  store i64 %10635, i64* %RAX.i3587.phi.trans.insert, align 8
  %10636 = add i64 %10629, -80
  %10637 = add i64 %10631, 6
  store i64 %10637, i64* %3, align 8
  %10638 = inttoptr i64 %10636 to i32*
  %10639 = load i32, i32* %10638, align 4
  %10640 = sub i32 %10634, %10639
  %10641 = icmp ult i32 %10634, %10639
  %10642 = zext i1 %10641 to i8
  store i8 %10642, i8* %32, align 1
  %10643 = and i32 %10640, 255
  %10644 = tail call i32 @llvm.ctpop.i32(i32 %10643)
  %10645 = trunc i32 %10644 to i8
  %10646 = and i8 %10645, 1
  %10647 = xor i8 %10646, 1
  store i8 %10647, i8* %39, align 1
  %10648 = xor i32 %10639, %10634
  %10649 = xor i32 %10648, %10640
  %10650 = lshr i32 %10649, 4
  %10651 = trunc i32 %10650 to i8
  %10652 = and i8 %10651, 1
  store i8 %10652, i8* %45, align 1
  %10653 = icmp eq i32 %10640, 0
  %10654 = zext i1 %10653 to i8
  store i8 %10654, i8* %48, align 1
  %10655 = lshr i32 %10640, 31
  %10656 = trunc i32 %10655 to i8
  store i8 %10656, i8* %51, align 1
  %10657 = lshr i32 %10634, 31
  %10658 = lshr i32 %10639, 31
  %10659 = xor i32 %10658, %10657
  %10660 = xor i32 %10655, %10657
  %10661 = add nuw nsw i32 %10660, %10659
  %10662 = icmp eq i32 %10661, 2
  %10663 = zext i1 %10662 to i8
  store i8 %10663, i8* %57, align 1
  %10664 = icmp ne i8 %10656, 0
  %10665 = xor i1 %10664, %10662
  %.v587 = select i1 %10665, i64 12, i64 36
  %10666 = add i64 %10631, %.v587
  store i64 %10666, i64* %3, align 8
  br i1 %10665, label %block_421c52, label %block_.L_421c6a

block_421c52:                                     ; preds = %routine_shll__cl___esi.exit3156
  %10667 = add i64 %10629, -96
  %10668 = add i64 %10666, 3
  store i64 %10668, i64* %3, align 8
  %10669 = inttoptr i64 %10667 to i32*
  %10670 = load i32, i32* %10669, align 4
  %10671 = zext i32 %10670 to i64
  store i64 %10671, i64* %RAX.i3587.phi.trans.insert, align 8
  %10672 = add i64 %10629, -168
  %10673 = add i64 %10666, 9
  store i64 %10673, i64* %3, align 8
  %10674 = inttoptr i64 %10672 to i32*
  store i32 %10670, i32* %10674, align 4
  %10675 = load i64, i64* %RBP.i, align 8
  %10676 = add i64 %10675, -100
  %10677 = load i64, i64* %3, align 8
  %10678 = add i64 %10677, 3
  store i64 %10678, i64* %3, align 8
  %10679 = inttoptr i64 %10676 to i32*
  %10680 = load i32, i32* %10679, align 4
  %10681 = zext i32 %10680 to i64
  store i64 %10681, i64* %RAX.i3587.phi.trans.insert, align 8
  %10682 = add i64 %10675, -172
  %10683 = add i64 %10677, 9
  store i64 %10683, i64* %3, align 8
  %10684 = inttoptr i64 %10682 to i32*
  store i32 %10680, i32* %10684, align 4
  %10685 = load i64, i64* %RBP.i, align 8
  %10686 = add i64 %10685, -104
  %10687 = load i64, i64* %3, align 8
  %10688 = add i64 %10687, 3
  store i64 %10688, i64* %3, align 8
  %10689 = inttoptr i64 %10686 to i32*
  %10690 = load i32, i32* %10689, align 4
  %10691 = zext i32 %10690 to i64
  store i64 %10691, i64* %RAX.i3587.phi.trans.insert, align 8
  %10692 = add i64 %10685, -80
  %10693 = add i64 %10687, 6
  store i64 %10693, i64* %3, align 8
  %10694 = inttoptr i64 %10692 to i32*
  store i32 %10690, i32* %10694, align 4
  %.pre404 = load i64, i64* %3, align 8
  br label %block_.L_421c6a

block_.L_421c6a:                                  ; preds = %routine_shll__cl___esi.exit3156, %block_421c52
  %10695 = phi i64 [ %10666, %routine_shll__cl___esi.exit3156 ], [ %.pre404, %block_421c52 ]
  %10696 = add i64 %10695, 5
  store i64 %10696, i64* %3, align 8
  br label %block_.L_421c6f

block_.L_421c6f:                                  ; preds = %block_421b3c, %block_.L_421c6a
  %10697 = phi i64 [ %10164, %block_421b3c ], [ %10696, %block_.L_421c6a ]
  %MEMORY.50 = phi %struct.Memory* [ %9980, %block_421b3c ], [ %call2_421c0e, %block_.L_421c6a ]
  %10698 = add i64 %10697, 5
  store i64 %10698, i64* %3, align 8
  %.pre405 = load i64, i64* %RBP.i, align 8
  br label %block_.L_421c74

block_.L_421c74:                                  ; preds = %block_421b23, %block_421adc, %block_.L_421c6f
  %10699 = phi i64 [ %9908, %block_421adc ], [ %9982, %block_421b23 ], [ %.pre405, %block_.L_421c6f ]
  %10700 = phi i64 [ %9940, %block_421adc ], [ %10014, %block_421b23 ], [ %10698, %block_.L_421c6f ]
  %MEMORY.51 = phi %struct.Memory* [ %9906, %block_421adc ], [ %9980, %block_421b23 ], [ %MEMORY.50, %block_.L_421c6f ]
  %10701 = add i64 %10699, -192
  %10702 = add i64 %10700, 11
  store i64 %10702, i64* %3, align 8
  %10703 = inttoptr i64 %10701 to i32*
  %10704 = load i32, i32* %10703, align 4
  %10705 = add i32 %10704, 1
  %10706 = zext i32 %10705 to i64
  store i64 %10706, i64* %RAX.i3587.phi.trans.insert, align 8
  %10707 = icmp eq i32 %10704, -1
  %10708 = icmp eq i32 %10705, 0
  %10709 = or i1 %10707, %10708
  %10710 = zext i1 %10709 to i8
  store i8 %10710, i8* %32, align 1
  %10711 = and i32 %10705, 255
  %10712 = tail call i32 @llvm.ctpop.i32(i32 %10711)
  %10713 = trunc i32 %10712 to i8
  %10714 = and i8 %10713, 1
  %10715 = xor i8 %10714, 1
  store i8 %10715, i8* %39, align 1
  %10716 = xor i32 %10705, %10704
  %10717 = lshr i32 %10716, 4
  %10718 = trunc i32 %10717 to i8
  %10719 = and i8 %10718, 1
  store i8 %10719, i8* %45, align 1
  %10720 = zext i1 %10708 to i8
  store i8 %10720, i8* %48, align 1
  %10721 = lshr i32 %10705, 31
  %10722 = trunc i32 %10721 to i8
  store i8 %10722, i8* %51, align 1
  %10723 = lshr i32 %10704, 31
  %10724 = xor i32 %10721, %10723
  %10725 = add nuw nsw i32 %10724, %10721
  %10726 = icmp eq i32 %10725, 2
  %10727 = zext i1 %10726 to i8
  store i8 %10727, i8* %57, align 1
  %10728 = add i64 %10700, 20
  store i64 %10728, i64* %3, align 8
  store i32 %10705, i32* %10703, align 4
  %10729 = load i64, i64* %3, align 8
  %10730 = add i64 %10729, -441
  store i64 %10730, i64* %3, align 8
  br label %block_.L_421acf

block_.L_421c8d:                                  ; preds = %block_.L_421acf
  %10731 = add i64 %9746, -34
  %10732 = add i64 %9774, 4
  store i64 %10732, i64* %3, align 8
  %10733 = inttoptr i64 %10731 to i16*
  %10734 = load i16, i16* %10733, align 2
  %10735 = sext i16 %10734 to i64
  %10736 = and i64 %10735, 4294967295
  store i64 %10736, i64* %RAX.i3587.phi.trans.insert, align 8
  %10737 = sext i16 %10734 to i32
  store i8 0, i8* %32, align 1
  %10738 = and i32 %10737, 255
  %10739 = tail call i32 @llvm.ctpop.i32(i32 %10738)
  %10740 = trunc i32 %10739 to i8
  %10741 = and i8 %10740, 1
  %10742 = xor i8 %10741, 1
  store i8 %10742, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %10743 = icmp eq i16 %10734, 0
  %10744 = zext i1 %10743 to i8
  store i8 %10744, i8* %48, align 1
  %10745 = lshr i32 %10737, 31
  %10746 = trunc i32 %10745 to i8
  store i8 %10746, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %10747 = icmp ne i8 %10746, 0
  %10748 = or i1 %10743, %10747
  %.v487 = select i1 %10748, i64 113, i64 13
  %10749 = add i64 %9774, %.v487
  store i64 %10749, i64* %3, align 8
  br i1 %10748, label %block_.L_421cfe, label %block_421c9a

block_421c9a:                                     ; preds = %block_.L_421c8d
  %10750 = add i64 %9746, -80
  %10751 = add i64 %10749, 3
  store i64 %10751, i64* %3, align 8
  %10752 = inttoptr i64 %10750 to i32*
  %10753 = load i32, i32* %10752, align 4
  %10754 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %10755 = sub i32 %10753, %10754
  %10756 = zext i32 %10755 to i64
  store i64 %10756, i64* %RAX.i3587.phi.trans.insert, align 8
  %10757 = icmp ult i32 %10753, %10754
  %10758 = zext i1 %10757 to i8
  store i8 %10758, i8* %32, align 1
  %10759 = and i32 %10755, 255
  %10760 = tail call i32 @llvm.ctpop.i32(i32 %10759)
  %10761 = trunc i32 %10760 to i8
  %10762 = and i8 %10761, 1
  %10763 = xor i8 %10762, 1
  store i8 %10763, i8* %39, align 1
  %10764 = xor i32 %10754, %10753
  %10765 = xor i32 %10764, %10755
  %10766 = lshr i32 %10765, 4
  %10767 = trunc i32 %10766 to i8
  %10768 = and i8 %10767, 1
  store i8 %10768, i8* %45, align 1
  %10769 = icmp eq i32 %10755, 0
  %10770 = zext i1 %10769 to i8
  store i8 %10770, i8* %48, align 1
  %10771 = lshr i32 %10755, 31
  %10772 = trunc i32 %10771 to i8
  store i8 %10772, i8* %51, align 1
  %10773 = lshr i32 %10753, 31
  %10774 = lshr i32 %10754, 31
  %10775 = xor i32 %10774, %10773
  %10776 = xor i32 %10771, %10773
  %10777 = add nuw nsw i32 %10776, %10775
  %10778 = icmp eq i32 %10777, 2
  %10779 = zext i1 %10778 to i8
  store i8 %10779, i8* %57, align 1
  %10780 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %10781 = load <2 x i32>, <2 x i32>* %10780, align 1
  %10782 = bitcast i64* %320 to <2 x i32>*
  %10783 = load <2 x i32>, <2 x i32>* %10782, align 1
  %10784 = sitofp i32 %10755 to float
  %10785 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %10784, float* %10785, align 1
  %10786 = extractelement <2 x i32> %10781, i32 1
  %10787 = getelementptr inbounds i8, i8* %315, i64 4
  %10788 = bitcast i8* %10787 to i32*
  store i32 %10786, i32* %10788, align 1
  %10789 = extractelement <2 x i32> %10783, i32 0
  %10790 = bitcast i64* %320 to i32*
  store i32 %10789, i32* %10790, align 1
  %10791 = extractelement <2 x i32> %10783, i32 1
  %10792 = getelementptr inbounds i8, i8* %315, i64 12
  %10793 = bitcast i8* %10792 to i32*
  store i32 %10791, i32* %10793, align 1
  %10794 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %10795 = load <2 x i32>, <2 x i32>* %10794, align 1
  %10796 = bitcast i64* %330 to <2 x i32>*
  %10797 = load <2 x i32>, <2 x i32>* %10796, align 1
  %10798 = sitofp i32 %10754 to float
  %10799 = bitcast %union.VectorReg* %322 to float*
  store float %10798, float* %10799, align 1
  %10800 = extractelement <2 x i32> %10795, i32 1
  %10801 = getelementptr inbounds i8, i8* %323, i64 4
  %10802 = bitcast i8* %10801 to i32*
  store i32 %10800, i32* %10802, align 1
  %10803 = extractelement <2 x i32> %10797, i32 0
  %10804 = bitcast i64* %330 to i32*
  store i32 %10803, i32* %10804, align 1
  %10805 = extractelement <2 x i32> %10797, i32 1
  %10806 = getelementptr inbounds i8, i8* %323, i64 12
  %10807 = bitcast i8* %10806 to i32*
  store i32 %10805, i32* %10807, align 1
  %10808 = add i64 %9746, -212
  %10809 = add i64 %10749, 31
  store i64 %10809, i64* %3, align 8
  %10810 = bitcast %union.VectorReg* %322 to <2 x float>*
  %10811 = load <2 x float>, <2 x float>* %10810, align 1
  %10812 = load <2 x i32>, <2 x i32>* %10796, align 1
  %10813 = inttoptr i64 %10808 to float*
  %10814 = load float, float* %10813, align 4
  %10815 = extractelement <2 x float> %10811, i32 0
  %10816 = fmul float %10815, %10814
  store float %10816, float* %10799, align 1
  %10817 = bitcast <2 x float> %10811 to <2 x i32>
  %10818 = extractelement <2 x i32> %10817, i32 1
  store i32 %10818, i32* %10802, align 1
  %10819 = extractelement <2 x i32> %10812, i32 0
  store i32 %10819, i32* %10804, align 1
  %10820 = extractelement <2 x i32> %10812, i32 1
  store i32 %10820, i32* %10807, align 1
  %10821 = add i64 %10749, 34
  store i64 %10821, i64* %3, align 8
  %10822 = load <2 x float>, <2 x float>* %10810, align 1
  %10823 = extractelement <2 x float> %10822, i32 0
  %10824 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %10825 = load <2 x float>, <2 x float>* %10824, align 1
  %10826 = extractelement <2 x float> %10825, i32 0
  %10827 = fcmp uno float %10823, %10826
  br i1 %10827, label %10828, label %10838

; <label>:10828:                                  ; preds = %block_421c9a
  %10829 = fadd float %10823, %10826
  %10830 = bitcast float %10829 to i32
  %10831 = and i32 %10830, 2143289344
  %10832 = icmp eq i32 %10831, 2139095040
  %10833 = and i32 %10830, 4194303
  %10834 = icmp ne i32 %10833, 0
  %10835 = and i1 %10832, %10834
  br i1 %10835, label %10836, label %10844

; <label>:10836:                                  ; preds = %10828
  %10837 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10821, %struct.Memory* %MEMORY.48)
  %.pre298 = load i64, i64* %3, align 8
  %.pre299 = load i8, i8* %32, align 1
  %.pre300 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2995

; <label>:10838:                                  ; preds = %block_421c9a
  %10839 = fcmp ogt float %10823, %10826
  br i1 %10839, label %10844, label %10840

; <label>:10840:                                  ; preds = %10838
  %10841 = fcmp olt float %10823, %10826
  br i1 %10841, label %10844, label %10842

; <label>:10842:                                  ; preds = %10840
  %10843 = fcmp oeq float %10823, %10826
  br i1 %10843, label %10844, label %10848

; <label>:10844:                                  ; preds = %10842, %10840, %10838, %10828
  %10845 = phi i8 [ 0, %10838 ], [ 0, %10840 ], [ 1, %10842 ], [ 1, %10828 ]
  %10846 = phi i8 [ 0, %10838 ], [ 0, %10840 ], [ 0, %10842 ], [ 1, %10828 ]
  %10847 = phi i8 [ 0, %10838 ], [ 1, %10840 ], [ 0, %10842 ], [ 1, %10828 ]
  store i8 %10845, i8* %48, align 1
  store i8 %10846, i8* %39, align 1
  store i8 %10847, i8* %32, align 1
  br label %10848

; <label>:10848:                                  ; preds = %10844, %10842
  %10849 = phi i8 [ %10845, %10844 ], [ %10770, %10842 ]
  %10850 = phi i8 [ %10847, %10844 ], [ %10758, %10842 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2995

routine_ucomiss__xmm0___xmm1.exit2995:            ; preds = %10848, %10836
  %10851 = phi i8 [ %.pre300, %10836 ], [ %10849, %10848 ]
  %10852 = phi i8 [ %.pre299, %10836 ], [ %10850, %10848 ]
  %10853 = phi i64 [ %.pre298, %10836 ], [ %10821, %10848 ]
  %10854 = phi %struct.Memory* [ %10837, %10836 ], [ %MEMORY.48, %10848 ]
  %10855 = or i8 %10851, %10852
  %10856 = icmp ne i8 %10855, 0
  %.v534 = select i1 %10856, i64 11, i64 6
  %10857 = add i64 %10853, %.v534
  store i64 %10857, i64* %3, align 8
  br i1 %10856, label %block_.L_421cc7, label %block_.L_422f0e

block_.L_421cc7:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit2995
  %10858 = load i64, i64* %RBP.i, align 8
  %10859 = add i64 %10858, -80
  %10860 = add i64 %10857, 3
  store i64 %10860, i64* %3, align 8
  %10861 = inttoptr i64 %10859 to i32*
  %10862 = load i32, i32* %10861, align 4
  %10863 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %10864 = sub i32 %10862, %10863
  %10865 = zext i32 %10864 to i64
  store i64 %10865, i64* %RAX.i3587.phi.trans.insert, align 8
  %10866 = icmp ult i32 %10862, %10863
  %10867 = zext i1 %10866 to i8
  store i8 %10867, i8* %32, align 1
  %10868 = and i32 %10864, 255
  %10869 = tail call i32 @llvm.ctpop.i32(i32 %10868)
  %10870 = trunc i32 %10869 to i8
  %10871 = and i8 %10870, 1
  %10872 = xor i8 %10871, 1
  store i8 %10872, i8* %39, align 1
  %10873 = xor i32 %10863, %10862
  %10874 = xor i32 %10873, %10864
  %10875 = lshr i32 %10874, 4
  %10876 = trunc i32 %10875 to i8
  %10877 = and i8 %10876, 1
  store i8 %10877, i8* %45, align 1
  %10878 = icmp eq i32 %10864, 0
  %10879 = zext i1 %10878 to i8
  store i8 %10879, i8* %48, align 1
  %10880 = lshr i32 %10864, 31
  %10881 = trunc i32 %10880 to i8
  store i8 %10881, i8* %51, align 1
  %10882 = lshr i32 %10862, 31
  %10883 = lshr i32 %10863, 31
  %10884 = xor i32 %10883, %10882
  %10885 = xor i32 %10880, %10882
  %10886 = add nuw nsw i32 %10885, %10884
  %10887 = icmp eq i32 %10886, 2
  %10888 = zext i1 %10887 to i8
  store i8 %10888, i8* %57, align 1
  %10889 = load <2 x i32>, <2 x i32>* %10780, align 1
  %10890 = load <2 x i32>, <2 x i32>* %10782, align 1
  %10891 = sitofp i32 %10864 to float
  store float %10891, float* %10785, align 1
  %10892 = extractelement <2 x i32> %10889, i32 1
  store i32 %10892, i32* %10788, align 1
  %10893 = extractelement <2 x i32> %10890, i32 0
  store i32 %10893, i32* %10790, align 1
  %10894 = extractelement <2 x i32> %10890, i32 1
  store i32 %10894, i32* %10793, align 1
  %10895 = load <2 x i32>, <2 x i32>* %10794, align 1
  %10896 = load <2 x i32>, <2 x i32>* %10796, align 1
  %10897 = sitofp i32 %10863 to float
  store float %10897, float* %10799, align 1
  %10898 = extractelement <2 x i32> %10895, i32 1
  store i32 %10898, i32* %10802, align 1
  %10899 = extractelement <2 x i32> %10896, i32 0
  store i32 %10899, i32* %10804, align 1
  %10900 = extractelement <2 x i32> %10896, i32 1
  store i32 %10900, i32* %10807, align 1
  %10901 = add i64 %10858, -208
  %10902 = add i64 %10857, 31
  store i64 %10902, i64* %3, align 8
  %10903 = load <2 x float>, <2 x float>* %10810, align 1
  %10904 = load <2 x i32>, <2 x i32>* %10796, align 1
  %10905 = inttoptr i64 %10901 to float*
  %10906 = load float, float* %10905, align 4
  %10907 = extractelement <2 x float> %10903, i32 0
  %10908 = fmul float %10907, %10906
  store float %10908, float* %10799, align 1
  %10909 = bitcast <2 x float> %10903 to <2 x i32>
  %10910 = extractelement <2 x i32> %10909, i32 1
  store i32 %10910, i32* %10802, align 1
  %10911 = extractelement <2 x i32> %10904, i32 0
  store i32 %10911, i32* %10804, align 1
  %10912 = extractelement <2 x i32> %10904, i32 1
  store i32 %10912, i32* %10807, align 1
  %10913 = add i64 %10857, 34
  store i64 %10913, i64* %3, align 8
  %10914 = load <2 x float>, <2 x float>* %10810, align 1
  %10915 = extractelement <2 x float> %10914, i32 0
  %10916 = load <2 x float>, <2 x float>* %10824, align 1
  %10917 = extractelement <2 x float> %10916, i32 0
  %10918 = fcmp uno float %10915, %10917
  br i1 %10918, label %10919, label %10929

; <label>:10919:                                  ; preds = %block_.L_421cc7
  %10920 = fadd float %10915, %10917
  %10921 = bitcast float %10920 to i32
  %10922 = and i32 %10921, 2143289344
  %10923 = icmp eq i32 %10922, 2139095040
  %10924 = and i32 %10921, 4194303
  %10925 = icmp ne i32 %10924, 0
  %10926 = and i1 %10923, %10925
  br i1 %10926, label %10927, label %10935

; <label>:10927:                                  ; preds = %10919
  %10928 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10913, %struct.Memory* %10854)
  %.pre301 = load i64, i64* %3, align 8
  %.pre302 = load i8, i8* %32, align 1
  %.pre303 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2973

; <label>:10929:                                  ; preds = %block_.L_421cc7
  %10930 = fcmp ogt float %10915, %10917
  br i1 %10930, label %10935, label %10931

; <label>:10931:                                  ; preds = %10929
  %10932 = fcmp olt float %10915, %10917
  br i1 %10932, label %10935, label %10933

; <label>:10933:                                  ; preds = %10931
  %10934 = fcmp oeq float %10915, %10917
  br i1 %10934, label %10935, label %10939

; <label>:10935:                                  ; preds = %10933, %10931, %10929, %10919
  %10936 = phi i8 [ 0, %10929 ], [ 0, %10931 ], [ 1, %10933 ], [ 1, %10919 ]
  %10937 = phi i8 [ 0, %10929 ], [ 0, %10931 ], [ 0, %10933 ], [ 1, %10919 ]
  %10938 = phi i8 [ 0, %10929 ], [ 1, %10931 ], [ 0, %10933 ], [ 1, %10919 ]
  store i8 %10936, i8* %48, align 1
  store i8 %10937, i8* %39, align 1
  store i8 %10938, i8* %32, align 1
  br label %10939

; <label>:10939:                                  ; preds = %10935, %10933
  %10940 = phi i8 [ %10936, %10935 ], [ %10879, %10933 ]
  %10941 = phi i8 [ %10938, %10935 ], [ %10867, %10933 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2973

routine_ucomiss__xmm0___xmm1.exit2973:            ; preds = %10939, %10927
  %10942 = phi i8 [ %.pre303, %10927 ], [ %10940, %10939 ]
  %10943 = phi i8 [ %.pre302, %10927 ], [ %10941, %10939 ]
  %10944 = phi i64 [ %.pre301, %10927 ], [ %10913, %10939 ]
  %10945 = phi %struct.Memory* [ %10928, %10927 ], [ %10854, %10939 ]
  %10946 = or i8 %10942, %10943
  %10947 = icmp ne i8 %10946, 0
  %.v535 = select i1 %10947, i64 11, i64 6
  %10948 = add i64 %10944, %.v535
  store i64 %10948, i64* %3, align 8
  br i1 %10947, label %block_.L_421cf4, label %block_421cef

block_421cef:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit2973
  %10949 = add i64 %10948, 4047
  br label %block_.L_422cbe

block_.L_421cf4:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit2973
  %10950 = add i64 %10948, 225
  br label %block_.L_421dd5

block_.L_421cfe:                                  ; preds = %block_.L_421c8d
  %10951 = add i64 %9746, -52
  %10952 = add i64 %10749, 4
  store i64 %10952, i64* %3, align 8
  %10953 = inttoptr i64 %10951 to i32*
  %10954 = load i32, i32* %10953, align 4
  %10955 = add i32 %10954, -1
  %10956 = icmp eq i32 %10954, 0
  %10957 = zext i1 %10956 to i8
  store i8 %10957, i8* %32, align 1
  %10958 = and i32 %10955, 255
  %10959 = tail call i32 @llvm.ctpop.i32(i32 %10958)
  %10960 = trunc i32 %10959 to i8
  %10961 = and i8 %10960, 1
  %10962 = xor i8 %10961, 1
  store i8 %10962, i8* %39, align 1
  %10963 = xor i32 %10955, %10954
  %10964 = lshr i32 %10963, 4
  %10965 = trunc i32 %10964 to i8
  %10966 = and i8 %10965, 1
  store i8 %10966, i8* %45, align 1
  %10967 = icmp eq i32 %10955, 0
  %10968 = zext i1 %10967 to i8
  store i8 %10968, i8* %48, align 1
  %10969 = lshr i32 %10955, 31
  %10970 = trunc i32 %10969 to i8
  store i8 %10970, i8* %51, align 1
  %10971 = lshr i32 %10954, 31
  %10972 = xor i32 %10969, %10971
  %10973 = add nuw nsw i32 %10972, %10971
  %10974 = icmp eq i32 %10973, 2
  %10975 = zext i1 %10974 to i8
  store i8 %10975, i8* %57, align 1
  %10976 = icmp ne i8 %10970, 0
  %10977 = xor i1 %10976, %10974
  %10978 = or i1 %10967, %10977
  %.v486 = select i1 %10978, i64 110, i64 10
  %10979 = add i64 %10749, %.v486
  %10980 = add i64 %9746, -80
  %10981 = add i64 %10979, 3
  store i64 %10981, i64* %3, align 8
  %10982 = inttoptr i64 %10980 to i32*
  %10983 = load i32, i32* %10982, align 4
  %10984 = zext i32 %10983 to i64
  store i64 %10984, i64* %RAX.i3587.phi.trans.insert, align 8
  %10985 = add i64 %10979, 10
  store i64 %10985, i64* %3, align 8
  br i1 %10978, label %block_.L_421d6c, label %block_421d08

block_421d08:                                     ; preds = %block_.L_421cfe
  %10986 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %10987 = sub i32 %10983, %10986
  %10988 = zext i32 %10987 to i64
  store i64 %10988, i64* %RAX.i3587.phi.trans.insert, align 8
  %10989 = icmp ult i32 %10983, %10986
  %10990 = zext i1 %10989 to i8
  store i8 %10990, i8* %32, align 1
  %10991 = and i32 %10987, 255
  %10992 = tail call i32 @llvm.ctpop.i32(i32 %10991)
  %10993 = trunc i32 %10992 to i8
  %10994 = and i8 %10993, 1
  %10995 = xor i8 %10994, 1
  store i8 %10995, i8* %39, align 1
  %10996 = xor i32 %10986, %10983
  %10997 = xor i32 %10996, %10987
  %10998 = lshr i32 %10997, 4
  %10999 = trunc i32 %10998 to i8
  %11000 = and i8 %10999, 1
  store i8 %11000, i8* %45, align 1
  %11001 = icmp eq i32 %10987, 0
  %11002 = zext i1 %11001 to i8
  store i8 %11002, i8* %48, align 1
  %11003 = lshr i32 %10987, 31
  %11004 = trunc i32 %11003 to i8
  store i8 %11004, i8* %51, align 1
  %11005 = lshr i32 %10983, 31
  %11006 = lshr i32 %10986, 31
  %11007 = xor i32 %11006, %11005
  %11008 = xor i32 %11003, %11005
  %11009 = add nuw nsw i32 %11008, %11007
  %11010 = icmp eq i32 %11009, 2
  %11011 = zext i1 %11010 to i8
  store i8 %11011, i8* %57, align 1
  %11012 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %11013 = load <2 x i32>, <2 x i32>* %11012, align 1
  %11014 = bitcast i64* %320 to <2 x i32>*
  %11015 = load <2 x i32>, <2 x i32>* %11014, align 1
  %11016 = sitofp i32 %10987 to float
  %11017 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %11016, float* %11017, align 1
  %11018 = extractelement <2 x i32> %11013, i32 1
  %11019 = getelementptr inbounds i8, i8* %315, i64 4
  %11020 = bitcast i8* %11019 to i32*
  store i32 %11018, i32* %11020, align 1
  %11021 = extractelement <2 x i32> %11015, i32 0
  %11022 = bitcast i64* %320 to i32*
  store i32 %11021, i32* %11022, align 1
  %11023 = extractelement <2 x i32> %11015, i32 1
  %11024 = getelementptr inbounds i8, i8* %315, i64 12
  %11025 = bitcast i8* %11024 to i32*
  store i32 %11023, i32* %11025, align 1
  %11026 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %11027 = load <2 x i32>, <2 x i32>* %11026, align 1
  %11028 = bitcast i64* %330 to <2 x i32>*
  %11029 = load <2 x i32>, <2 x i32>* %11028, align 1
  %11030 = sitofp i32 %10986 to float
  %11031 = bitcast %union.VectorReg* %322 to float*
  store float %11030, float* %11031, align 1
  %11032 = extractelement <2 x i32> %11027, i32 1
  %11033 = getelementptr inbounds i8, i8* %323, i64 4
  %11034 = bitcast i8* %11033 to i32*
  store i32 %11032, i32* %11034, align 1
  %11035 = extractelement <2 x i32> %11029, i32 0
  %11036 = bitcast i64* %330 to i32*
  store i32 %11035, i32* %11036, align 1
  %11037 = extractelement <2 x i32> %11029, i32 1
  %11038 = getelementptr inbounds i8, i8* %323, i64 12
  %11039 = bitcast i8* %11038 to i32*
  store i32 %11037, i32* %11039, align 1
  %11040 = add i64 %9746, -212
  %11041 = add i64 %10979, 31
  store i64 %11041, i64* %3, align 8
  %11042 = bitcast %union.VectorReg* %322 to <2 x float>*
  %11043 = load <2 x float>, <2 x float>* %11042, align 1
  %11044 = load <2 x i32>, <2 x i32>* %11028, align 1
  %11045 = inttoptr i64 %11040 to float*
  %11046 = load float, float* %11045, align 4
  %11047 = extractelement <2 x float> %11043, i32 0
  %11048 = fmul float %11047, %11046
  store float %11048, float* %11031, align 1
  %11049 = bitcast <2 x float> %11043 to <2 x i32>
  %11050 = extractelement <2 x i32> %11049, i32 1
  store i32 %11050, i32* %11034, align 1
  %11051 = extractelement <2 x i32> %11044, i32 0
  store i32 %11051, i32* %11036, align 1
  %11052 = extractelement <2 x i32> %11044, i32 1
  store i32 %11052, i32* %11039, align 1
  %11053 = add i64 %10979, 34
  store i64 %11053, i64* %3, align 8
  %11054 = load <2 x float>, <2 x float>* %11042, align 1
  %11055 = extractelement <2 x float> %11054, i32 0
  %11056 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %11057 = load <2 x float>, <2 x float>* %11056, align 1
  %11058 = extractelement <2 x float> %11057, i32 0
  %11059 = fcmp uno float %11055, %11058
  br i1 %11059, label %11060, label %11070

; <label>:11060:                                  ; preds = %block_421d08
  %11061 = fadd float %11055, %11058
  %11062 = bitcast float %11061 to i32
  %11063 = and i32 %11062, 2143289344
  %11064 = icmp eq i32 %11063, 2139095040
  %11065 = and i32 %11062, 4194303
  %11066 = icmp ne i32 %11065, 0
  %11067 = and i1 %11064, %11066
  br i1 %11067, label %11068, label %11076

; <label>:11068:                                  ; preds = %11060
  %11069 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11053, %struct.Memory* %MEMORY.48)
  %.pre304 = load i64, i64* %3, align 8
  %.pre305 = load i8, i8* %32, align 1
  %.pre306 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2946

; <label>:11070:                                  ; preds = %block_421d08
  %11071 = fcmp ogt float %11055, %11058
  br i1 %11071, label %11076, label %11072

; <label>:11072:                                  ; preds = %11070
  %11073 = fcmp olt float %11055, %11058
  br i1 %11073, label %11076, label %11074

; <label>:11074:                                  ; preds = %11072
  %11075 = fcmp oeq float %11055, %11058
  br i1 %11075, label %11076, label %11080

; <label>:11076:                                  ; preds = %11074, %11072, %11070, %11060
  %11077 = phi i8 [ 0, %11070 ], [ 0, %11072 ], [ 1, %11074 ], [ 1, %11060 ]
  %11078 = phi i8 [ 0, %11070 ], [ 0, %11072 ], [ 0, %11074 ], [ 1, %11060 ]
  %11079 = phi i8 [ 0, %11070 ], [ 1, %11072 ], [ 0, %11074 ], [ 1, %11060 ]
  store i8 %11077, i8* %48, align 1
  store i8 %11078, i8* %39, align 1
  store i8 %11079, i8* %32, align 1
  br label %11080

; <label>:11080:                                  ; preds = %11076, %11074
  %11081 = phi i8 [ %11077, %11076 ], [ %11002, %11074 ]
  %11082 = phi i8 [ %11079, %11076 ], [ %10990, %11074 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2946

routine_ucomiss__xmm0___xmm1.exit2946:            ; preds = %11080, %11068
  %11083 = phi i8 [ %.pre306, %11068 ], [ %11081, %11080 ]
  %11084 = phi i8 [ %.pre305, %11068 ], [ %11082, %11080 ]
  %11085 = phi i64 [ %.pre304, %11068 ], [ %11053, %11080 ]
  %11086 = phi %struct.Memory* [ %11069, %11068 ], [ %MEMORY.48, %11080 ]
  %11087 = or i8 %11083, %11084
  %11088 = icmp ne i8 %11087, 0
  %.v580 = select i1 %11088, i64 11, i64 6
  %11089 = add i64 %11085, %.v580
  store i64 %11089, i64* %3, align 8
  br i1 %11088, label %block_.L_421d35, label %block_.L_422f0e

block_.L_421d35:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit2946
  %11090 = load i64, i64* %RBP.i, align 8
  %11091 = add i64 %11090, -80
  %11092 = add i64 %11089, 3
  store i64 %11092, i64* %3, align 8
  %11093 = inttoptr i64 %11091 to i32*
  %11094 = load i32, i32* %11093, align 4
  %11095 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %11096 = sub i32 %11094, %11095
  %11097 = zext i32 %11096 to i64
  store i64 %11097, i64* %RAX.i3587.phi.trans.insert, align 8
  %11098 = icmp ult i32 %11094, %11095
  %11099 = zext i1 %11098 to i8
  store i8 %11099, i8* %32, align 1
  %11100 = and i32 %11096, 255
  %11101 = tail call i32 @llvm.ctpop.i32(i32 %11100)
  %11102 = trunc i32 %11101 to i8
  %11103 = and i8 %11102, 1
  %11104 = xor i8 %11103, 1
  store i8 %11104, i8* %39, align 1
  %11105 = xor i32 %11095, %11094
  %11106 = xor i32 %11105, %11096
  %11107 = lshr i32 %11106, 4
  %11108 = trunc i32 %11107 to i8
  %11109 = and i8 %11108, 1
  store i8 %11109, i8* %45, align 1
  %11110 = icmp eq i32 %11096, 0
  %11111 = zext i1 %11110 to i8
  store i8 %11111, i8* %48, align 1
  %11112 = lshr i32 %11096, 31
  %11113 = trunc i32 %11112 to i8
  store i8 %11113, i8* %51, align 1
  %11114 = lshr i32 %11094, 31
  %11115 = lshr i32 %11095, 31
  %11116 = xor i32 %11115, %11114
  %11117 = xor i32 %11112, %11114
  %11118 = add nuw nsw i32 %11117, %11116
  %11119 = icmp eq i32 %11118, 2
  %11120 = zext i1 %11119 to i8
  store i8 %11120, i8* %57, align 1
  %11121 = load <2 x i32>, <2 x i32>* %11012, align 1
  %11122 = load <2 x i32>, <2 x i32>* %11014, align 1
  %11123 = sitofp i32 %11096 to float
  store float %11123, float* %11017, align 1
  %11124 = extractelement <2 x i32> %11121, i32 1
  store i32 %11124, i32* %11020, align 1
  %11125 = extractelement <2 x i32> %11122, i32 0
  store i32 %11125, i32* %11022, align 1
  %11126 = extractelement <2 x i32> %11122, i32 1
  store i32 %11126, i32* %11025, align 1
  %11127 = load <2 x i32>, <2 x i32>* %11026, align 1
  %11128 = load <2 x i32>, <2 x i32>* %11028, align 1
  %11129 = sitofp i32 %11095 to float
  store float %11129, float* %11031, align 1
  %11130 = extractelement <2 x i32> %11127, i32 1
  store i32 %11130, i32* %11034, align 1
  %11131 = extractelement <2 x i32> %11128, i32 0
  store i32 %11131, i32* %11036, align 1
  %11132 = extractelement <2 x i32> %11128, i32 1
  store i32 %11132, i32* %11039, align 1
  %11133 = add i64 %11090, -208
  %11134 = add i64 %11089, 31
  store i64 %11134, i64* %3, align 8
  %11135 = load <2 x float>, <2 x float>* %11042, align 1
  %11136 = load <2 x i32>, <2 x i32>* %11028, align 1
  %11137 = inttoptr i64 %11133 to float*
  %11138 = load float, float* %11137, align 4
  %11139 = extractelement <2 x float> %11135, i32 0
  %11140 = fmul float %11139, %11138
  store float %11140, float* %11031, align 1
  %11141 = bitcast <2 x float> %11135 to <2 x i32>
  %11142 = extractelement <2 x i32> %11141, i32 1
  store i32 %11142, i32* %11034, align 1
  %11143 = extractelement <2 x i32> %11136, i32 0
  store i32 %11143, i32* %11036, align 1
  %11144 = extractelement <2 x i32> %11136, i32 1
  store i32 %11144, i32* %11039, align 1
  %11145 = add i64 %11089, 34
  store i64 %11145, i64* %3, align 8
  %11146 = load <2 x float>, <2 x float>* %11042, align 1
  %11147 = extractelement <2 x float> %11146, i32 0
  %11148 = load <2 x float>, <2 x float>* %11056, align 1
  %11149 = extractelement <2 x float> %11148, i32 0
  %11150 = fcmp uno float %11147, %11149
  br i1 %11150, label %11151, label %11161

; <label>:11151:                                  ; preds = %block_.L_421d35
  %11152 = fadd float %11147, %11149
  %11153 = bitcast float %11152 to i32
  %11154 = and i32 %11153, 2143289344
  %11155 = icmp eq i32 %11154, 2139095040
  %11156 = and i32 %11153, 4194303
  %11157 = icmp ne i32 %11156, 0
  %11158 = and i1 %11155, %11157
  br i1 %11158, label %11159, label %11167

; <label>:11159:                                  ; preds = %11151
  %11160 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11145, %struct.Memory* %11086)
  %.pre307 = load i64, i64* %3, align 8
  %.pre308 = load i8, i8* %32, align 1
  %.pre309 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2924

; <label>:11161:                                  ; preds = %block_.L_421d35
  %11162 = fcmp ogt float %11147, %11149
  br i1 %11162, label %11167, label %11163

; <label>:11163:                                  ; preds = %11161
  %11164 = fcmp olt float %11147, %11149
  br i1 %11164, label %11167, label %11165

; <label>:11165:                                  ; preds = %11163
  %11166 = fcmp oeq float %11147, %11149
  br i1 %11166, label %11167, label %11171

; <label>:11167:                                  ; preds = %11165, %11163, %11161, %11151
  %11168 = phi i8 [ 0, %11161 ], [ 0, %11163 ], [ 1, %11165 ], [ 1, %11151 ]
  %11169 = phi i8 [ 0, %11161 ], [ 0, %11163 ], [ 0, %11165 ], [ 1, %11151 ]
  %11170 = phi i8 [ 0, %11161 ], [ 1, %11163 ], [ 0, %11165 ], [ 1, %11151 ]
  store i8 %11168, i8* %48, align 1
  store i8 %11169, i8* %39, align 1
  store i8 %11170, i8* %32, align 1
  br label %11171

; <label>:11171:                                  ; preds = %11167, %11165
  %11172 = phi i8 [ %11168, %11167 ], [ %11111, %11165 ]
  %11173 = phi i8 [ %11170, %11167 ], [ %11099, %11165 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2924

routine_ucomiss__xmm0___xmm1.exit2924:            ; preds = %11171, %11159
  %11174 = phi i8 [ %.pre309, %11159 ], [ %11172, %11171 ]
  %11175 = phi i8 [ %.pre308, %11159 ], [ %11173, %11171 ]
  %11176 = phi i64 [ %.pre307, %11159 ], [ %11145, %11171 ]
  %11177 = phi %struct.Memory* [ %11160, %11159 ], [ %11086, %11171 ]
  %11178 = or i8 %11174, %11175
  %11179 = icmp ne i8 %11178, 0
  %.v581 = select i1 %11179, i64 11, i64 6
  %11180 = add i64 %11176, %.v581
  store i64 %11180, i64* %3, align 8
  br i1 %11179, label %block_.L_421d62, label %block_421d5d

block_421d5d:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit2924
  %11181 = add i64 %11180, 3937
  br label %block_.L_422cbe

block_.L_421d62:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit2924
  %11182 = add i64 %11180, 110
  br label %block_.L_421dd0

block_.L_421d6c:                                  ; preds = %block_.L_421cfe
  %11183 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %11184 = sub i32 %10983, %11183
  %11185 = zext i32 %11184 to i64
  store i64 %11185, i64* %RAX.i3587.phi.trans.insert, align 8
  %11186 = icmp ult i32 %10983, %11183
  %11187 = zext i1 %11186 to i8
  store i8 %11187, i8* %32, align 1
  %11188 = and i32 %11184, 255
  %11189 = tail call i32 @llvm.ctpop.i32(i32 %11188)
  %11190 = trunc i32 %11189 to i8
  %11191 = and i8 %11190, 1
  %11192 = xor i8 %11191, 1
  store i8 %11192, i8* %39, align 1
  %11193 = xor i32 %11183, %10983
  %11194 = xor i32 %11193, %11184
  %11195 = lshr i32 %11194, 4
  %11196 = trunc i32 %11195 to i8
  %11197 = and i8 %11196, 1
  store i8 %11197, i8* %45, align 1
  %11198 = icmp eq i32 %11184, 0
  %11199 = zext i1 %11198 to i8
  store i8 %11199, i8* %48, align 1
  %11200 = lshr i32 %11184, 31
  %11201 = trunc i32 %11200 to i8
  store i8 %11201, i8* %51, align 1
  %11202 = lshr i32 %10983, 31
  %11203 = lshr i32 %11183, 31
  %11204 = xor i32 %11203, %11202
  %11205 = xor i32 %11200, %11202
  %11206 = add nuw nsw i32 %11205, %11204
  %11207 = icmp eq i32 %11206, 2
  %11208 = zext i1 %11207 to i8
  store i8 %11208, i8* %57, align 1
  %11209 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %11210 = load <2 x i32>, <2 x i32>* %11209, align 1
  %11211 = bitcast i64* %320 to <2 x i32>*
  %11212 = load <2 x i32>, <2 x i32>* %11211, align 1
  %11213 = sitofp i32 %11184 to float
  %11214 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %11213, float* %11214, align 1
  %11215 = extractelement <2 x i32> %11210, i32 1
  %11216 = getelementptr inbounds i8, i8* %315, i64 4
  %11217 = bitcast i8* %11216 to i32*
  store i32 %11215, i32* %11217, align 1
  %11218 = extractelement <2 x i32> %11212, i32 0
  %11219 = bitcast i64* %320 to i32*
  store i32 %11218, i32* %11219, align 1
  %11220 = extractelement <2 x i32> %11212, i32 1
  %11221 = getelementptr inbounds i8, i8* %315, i64 12
  %11222 = bitcast i8* %11221 to i32*
  store i32 %11220, i32* %11222, align 1
  %11223 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %11224 = load <2 x i32>, <2 x i32>* %11223, align 1
  %11225 = bitcast i64* %330 to <2 x i32>*
  %11226 = load <2 x i32>, <2 x i32>* %11225, align 1
  %11227 = sitofp i32 %11183 to float
  %11228 = bitcast %union.VectorReg* %322 to float*
  store float %11227, float* %11228, align 1
  %11229 = extractelement <2 x i32> %11224, i32 1
  %11230 = getelementptr inbounds i8, i8* %323, i64 4
  %11231 = bitcast i8* %11230 to i32*
  store i32 %11229, i32* %11231, align 1
  %11232 = extractelement <2 x i32> %11226, i32 0
  %11233 = bitcast i64* %330 to i32*
  store i32 %11232, i32* %11233, align 1
  %11234 = extractelement <2 x i32> %11226, i32 1
  %11235 = getelementptr inbounds i8, i8* %323, i64 12
  %11236 = bitcast i8* %11235 to i32*
  store i32 %11234, i32* %11236, align 1
  %11237 = add i64 %9746, -212
  %11238 = add i64 %10979, 31
  store i64 %11238, i64* %3, align 8
  %11239 = bitcast %union.VectorReg* %322 to <2 x float>*
  %11240 = load <2 x float>, <2 x float>* %11239, align 1
  %11241 = load <2 x i32>, <2 x i32>* %11225, align 1
  %11242 = inttoptr i64 %11237 to float*
  %11243 = load float, float* %11242, align 4
  %11244 = extractelement <2 x float> %11240, i32 0
  %11245 = fmul float %11244, %11243
  store float %11245, float* %11228, align 1
  %11246 = bitcast <2 x float> %11240 to <2 x i32>
  %11247 = extractelement <2 x i32> %11246, i32 1
  store i32 %11247, i32* %11231, align 1
  %11248 = extractelement <2 x i32> %11241, i32 0
  store i32 %11248, i32* %11233, align 1
  %11249 = extractelement <2 x i32> %11241, i32 1
  store i32 %11249, i32* %11236, align 1
  %11250 = add i64 %10979, 34
  store i64 %11250, i64* %3, align 8
  %11251 = load <2 x float>, <2 x float>* %11239, align 1
  %11252 = extractelement <2 x float> %11251, i32 0
  %11253 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %11254 = load <2 x float>, <2 x float>* %11253, align 1
  %11255 = extractelement <2 x float> %11254, i32 0
  %11256 = fcmp uno float %11252, %11255
  br i1 %11256, label %11257, label %11267

; <label>:11257:                                  ; preds = %block_.L_421d6c
  %11258 = fadd float %11252, %11255
  %11259 = bitcast float %11258 to i32
  %11260 = and i32 %11259, 2143289344
  %11261 = icmp eq i32 %11260, 2139095040
  %11262 = and i32 %11259, 4194303
  %11263 = icmp ne i32 %11262, 0
  %11264 = and i1 %11261, %11263
  br i1 %11264, label %11265, label %11273

; <label>:11265:                                  ; preds = %11257
  %11266 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11250, %struct.Memory* %MEMORY.48)
  %.pre310 = load i64, i64* %3, align 8
  %.pre311 = load i8, i8* %32, align 1
  %.pre312 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2901

; <label>:11267:                                  ; preds = %block_.L_421d6c
  %11268 = fcmp ogt float %11252, %11255
  br i1 %11268, label %11273, label %11269

; <label>:11269:                                  ; preds = %11267
  %11270 = fcmp olt float %11252, %11255
  br i1 %11270, label %11273, label %11271

; <label>:11271:                                  ; preds = %11269
  %11272 = fcmp oeq float %11252, %11255
  br i1 %11272, label %11273, label %11277

; <label>:11273:                                  ; preds = %11271, %11269, %11267, %11257
  %11274 = phi i8 [ 0, %11267 ], [ 0, %11269 ], [ 1, %11271 ], [ 1, %11257 ]
  %11275 = phi i8 [ 0, %11267 ], [ 0, %11269 ], [ 0, %11271 ], [ 1, %11257 ]
  %11276 = phi i8 [ 0, %11267 ], [ 1, %11269 ], [ 0, %11271 ], [ 1, %11257 ]
  store i8 %11274, i8* %48, align 1
  store i8 %11275, i8* %39, align 1
  store i8 %11276, i8* %32, align 1
  br label %11277

; <label>:11277:                                  ; preds = %11273, %11271
  %11278 = phi i8 [ %11274, %11273 ], [ %11199, %11271 ]
  %11279 = phi i8 [ %11276, %11273 ], [ %11187, %11271 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2901

routine_ucomiss__xmm0___xmm1.exit2901:            ; preds = %11277, %11265
  %11280 = phi i8 [ %.pre312, %11265 ], [ %11278, %11277 ]
  %11281 = phi i8 [ %.pre311, %11265 ], [ %11279, %11277 ]
  %11282 = phi i64 [ %.pre310, %11265 ], [ %11250, %11277 ]
  %11283 = phi %struct.Memory* [ %11266, %11265 ], [ %MEMORY.48, %11277 ]
  %11284 = or i8 %11280, %11281
  %11285 = icmp ne i8 %11284, 0
  %.v582 = select i1 %11285, i64 11, i64 6
  %11286 = add i64 %11282, %.v582
  store i64 %11286, i64* %3, align 8
  br i1 %11285, label %block_.L_421d99, label %block_.L_422f0e

block_.L_421d99:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit2901
  %11287 = load i64, i64* %RBP.i, align 8
  %11288 = add i64 %11287, -80
  %11289 = add i64 %11286, 3
  store i64 %11289, i64* %3, align 8
  %11290 = inttoptr i64 %11288 to i32*
  %11291 = load i32, i32* %11290, align 4
  %11292 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %11293 = sub i32 %11291, %11292
  %11294 = zext i32 %11293 to i64
  store i64 %11294, i64* %RAX.i3587.phi.trans.insert, align 8
  %11295 = icmp ult i32 %11291, %11292
  %11296 = zext i1 %11295 to i8
  store i8 %11296, i8* %32, align 1
  %11297 = and i32 %11293, 255
  %11298 = tail call i32 @llvm.ctpop.i32(i32 %11297)
  %11299 = trunc i32 %11298 to i8
  %11300 = and i8 %11299, 1
  %11301 = xor i8 %11300, 1
  store i8 %11301, i8* %39, align 1
  %11302 = xor i32 %11292, %11291
  %11303 = xor i32 %11302, %11293
  %11304 = lshr i32 %11303, 4
  %11305 = trunc i32 %11304 to i8
  %11306 = and i8 %11305, 1
  store i8 %11306, i8* %45, align 1
  %11307 = icmp eq i32 %11293, 0
  %11308 = zext i1 %11307 to i8
  store i8 %11308, i8* %48, align 1
  %11309 = lshr i32 %11293, 31
  %11310 = trunc i32 %11309 to i8
  store i8 %11310, i8* %51, align 1
  %11311 = lshr i32 %11291, 31
  %11312 = lshr i32 %11292, 31
  %11313 = xor i32 %11312, %11311
  %11314 = xor i32 %11309, %11311
  %11315 = add nuw nsw i32 %11314, %11313
  %11316 = icmp eq i32 %11315, 2
  %11317 = zext i1 %11316 to i8
  store i8 %11317, i8* %57, align 1
  %11318 = load <2 x i32>, <2 x i32>* %11209, align 1
  %11319 = load <2 x i32>, <2 x i32>* %11211, align 1
  %11320 = sitofp i32 %11293 to float
  store float %11320, float* %11214, align 1
  %11321 = extractelement <2 x i32> %11318, i32 1
  store i32 %11321, i32* %11217, align 1
  %11322 = extractelement <2 x i32> %11319, i32 0
  store i32 %11322, i32* %11219, align 1
  %11323 = extractelement <2 x i32> %11319, i32 1
  store i32 %11323, i32* %11222, align 1
  %11324 = load <2 x i32>, <2 x i32>* %11223, align 1
  %11325 = load <2 x i32>, <2 x i32>* %11225, align 1
  %11326 = sitofp i32 %11292 to float
  store float %11326, float* %11228, align 1
  %11327 = extractelement <2 x i32> %11324, i32 1
  store i32 %11327, i32* %11231, align 1
  %11328 = extractelement <2 x i32> %11325, i32 0
  store i32 %11328, i32* %11233, align 1
  %11329 = extractelement <2 x i32> %11325, i32 1
  store i32 %11329, i32* %11236, align 1
  %11330 = add i64 %11287, -208
  %11331 = add i64 %11286, 31
  store i64 %11331, i64* %3, align 8
  %11332 = load <2 x float>, <2 x float>* %11239, align 1
  %11333 = load <2 x i32>, <2 x i32>* %11225, align 1
  %11334 = inttoptr i64 %11330 to float*
  %11335 = load float, float* %11334, align 4
  %11336 = extractelement <2 x float> %11332, i32 0
  %11337 = fmul float %11336, %11335
  store float %11337, float* %11228, align 1
  %11338 = bitcast <2 x float> %11332 to <2 x i32>
  %11339 = extractelement <2 x i32> %11338, i32 1
  store i32 %11339, i32* %11231, align 1
  %11340 = extractelement <2 x i32> %11333, i32 0
  store i32 %11340, i32* %11233, align 1
  %11341 = extractelement <2 x i32> %11333, i32 1
  store i32 %11341, i32* %11236, align 1
  %11342 = add i64 %11286, 34
  store i64 %11342, i64* %3, align 8
  %11343 = load <2 x float>, <2 x float>* %11239, align 1
  %11344 = extractelement <2 x float> %11343, i32 0
  %11345 = load <2 x float>, <2 x float>* %11253, align 1
  %11346 = extractelement <2 x float> %11345, i32 0
  %11347 = fcmp uno float %11344, %11346
  br i1 %11347, label %11348, label %11358

; <label>:11348:                                  ; preds = %block_.L_421d99
  %11349 = fadd float %11344, %11346
  %11350 = bitcast float %11349 to i32
  %11351 = and i32 %11350, 2143289344
  %11352 = icmp eq i32 %11351, 2139095040
  %11353 = and i32 %11350, 4194303
  %11354 = icmp ne i32 %11353, 0
  %11355 = and i1 %11352, %11354
  br i1 %11355, label %11356, label %11364

; <label>:11356:                                  ; preds = %11348
  %11357 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11342, %struct.Memory* %11283)
  %.pre313 = load i64, i64* %3, align 8
  %.pre314 = load i8, i8* %32, align 1
  %.pre315 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2880

; <label>:11358:                                  ; preds = %block_.L_421d99
  %11359 = fcmp ogt float %11344, %11346
  br i1 %11359, label %11364, label %11360

; <label>:11360:                                  ; preds = %11358
  %11361 = fcmp olt float %11344, %11346
  br i1 %11361, label %11364, label %11362

; <label>:11362:                                  ; preds = %11360
  %11363 = fcmp oeq float %11344, %11346
  br i1 %11363, label %11364, label %11368

; <label>:11364:                                  ; preds = %11362, %11360, %11358, %11348
  %11365 = phi i8 [ 0, %11358 ], [ 0, %11360 ], [ 1, %11362 ], [ 1, %11348 ]
  %11366 = phi i8 [ 0, %11358 ], [ 0, %11360 ], [ 0, %11362 ], [ 1, %11348 ]
  %11367 = phi i8 [ 0, %11358 ], [ 1, %11360 ], [ 0, %11362 ], [ 1, %11348 ]
  store i8 %11365, i8* %48, align 1
  store i8 %11366, i8* %39, align 1
  store i8 %11367, i8* %32, align 1
  br label %11368

; <label>:11368:                                  ; preds = %11364, %11362
  %11369 = phi i8 [ %11365, %11364 ], [ %11308, %11362 ]
  %11370 = phi i8 [ %11367, %11364 ], [ %11296, %11362 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit2880

routine_ucomiss__xmm0___xmm1.exit2880:            ; preds = %11368, %11356
  %11371 = phi i8 [ %.pre315, %11356 ], [ %11369, %11368 ]
  %11372 = phi i8 [ %.pre314, %11356 ], [ %11370, %11368 ]
  %11373 = phi i64 [ %.pre313, %11356 ], [ %11342, %11368 ]
  %11374 = phi %struct.Memory* [ %11357, %11356 ], [ %11283, %11368 ]
  %11375 = or i8 %11371, %11372
  %11376 = icmp ne i8 %11375, 0
  %.v583 = select i1 %11376, i64 11, i64 6
  %11377 = add i64 %11373, %.v583
  store i64 %11377, i64* %3, align 8
  br i1 %11376, label %block_.L_421dc6, label %block_421dc1

block_421dc1:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit2880
  %11378 = add i64 %11377, 3837
  br label %block_.L_422cbe

block_.L_421dc6:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit2880
  %11379 = add i64 %11377, 10
  store i64 %11379, i64* %3, align 8
  br label %block_.L_421dd0

block_.L_421dd0:                                  ; preds = %block_.L_421dc6, %block_.L_421d62
  %storemerge160 = phi i64 [ %11182, %block_.L_421d62 ], [ %11379, %block_.L_421dc6 ]
  %MEMORY.52 = phi %struct.Memory* [ %11177, %block_.L_421d62 ], [ %11374, %block_.L_421dc6 ]
  %11380 = add i64 %storemerge160, 5
  store i64 %11380, i64* %3, align 8
  br label %block_.L_421dd5

block_.L_421dd5:                                  ; preds = %block_.L_421dd0, %block_.L_421cf4
  %storemerge151 = phi i64 [ %10950, %block_.L_421cf4 ], [ %11380, %block_.L_421dd0 ]
  %MEMORY.53 = phi %struct.Memory* [ %10945, %block_.L_421cf4 ], [ %MEMORY.52, %block_.L_421dd0 ]
  %11381 = load i64, i64* %RBP.i, align 8
  %11382 = add i64 %11381, -52
  %11383 = add i64 %storemerge151, 4
  store i64 %11383, i64* %3, align 8
  %11384 = inttoptr i64 %11382 to i32*
  %11385 = load i32, i32* %11384, align 4
  %11386 = add i32 %11385, -6
  %11387 = icmp ult i32 %11385, 6
  %11388 = zext i1 %11387 to i8
  store i8 %11388, i8* %32, align 1
  %11389 = and i32 %11386, 255
  %11390 = tail call i32 @llvm.ctpop.i32(i32 %11389)
  %11391 = trunc i32 %11390 to i8
  %11392 = and i8 %11391, 1
  %11393 = xor i8 %11392, 1
  store i8 %11393, i8* %39, align 1
  %11394 = xor i32 %11386, %11385
  %11395 = lshr i32 %11394, 4
  %11396 = trunc i32 %11395 to i8
  %11397 = and i8 %11396, 1
  store i8 %11397, i8* %45, align 1
  %11398 = icmp eq i32 %11386, 0
  %11399 = zext i1 %11398 to i8
  store i8 %11399, i8* %48, align 1
  %11400 = lshr i32 %11386, 31
  %11401 = trunc i32 %11400 to i8
  store i8 %11401, i8* %51, align 1
  %11402 = lshr i32 %11385, 31
  %11403 = xor i32 %11400, %11402
  %11404 = add nuw nsw i32 %11403, %11402
  %11405 = icmp eq i32 %11404, 2
  %11406 = zext i1 %11405 to i8
  store i8 %11406, i8* %57, align 1
  %11407 = icmp ne i8 %11401, 0
  %11408 = xor i1 %11407, %11405
  %11409 = or i1 %11398, %11408
  %.v = select i1 %11409, i64 15, i64 10
  %11410 = add i64 %storemerge151, %.v
  store i64 %11410, i64* %3, align 8
  br i1 %11409, label %block_.L_421de4, label %block_421ddf

block_421ddf:                                     ; preds = %block_.L_421dd5
  %11411 = add i64 %11410, 3807
  br label %block_.L_422cbe

block_.L_421de4:                                  ; preds = %block_.L_421dd5
  %11412 = add i64 %11381, -168
  %11413 = add i64 %11410, 11
  store i64 %11413, i64* %3, align 8
  %11414 = inttoptr i64 %11412 to i32*
  %11415 = load i32, i32* %11414, align 4
  %11416 = zext i32 %11415 to i64
  store i64 %11416, i64* %RAX.i3587.phi.trans.insert, align 8
  %11417 = add i64 %11381, -184
  %11418 = add i64 %11410, 17
  store i64 %11418, i64* %3, align 8
  %11419 = inttoptr i64 %11417 to i32*
  store i32 %11415, i32* %11419, align 4
  %11420 = load i64, i64* %RBP.i, align 8
  %11421 = add i64 %11420, -172
  %11422 = load i64, i64* %3, align 8
  %11423 = add i64 %11422, 6
  store i64 %11423, i64* %3, align 8
  %11424 = inttoptr i64 %11421 to i32*
  %11425 = load i32, i32* %11424, align 4
  %11426 = zext i32 %11425 to i64
  store i64 %11426, i64* %RAX.i3587.phi.trans.insert, align 8
  %11427 = add i64 %11420, -180
  %11428 = add i64 %11422, 12
  store i64 %11428, i64* %3, align 8
  %11429 = inttoptr i64 %11427 to i32*
  store i32 %11425, i32* %11429, align 4
  %11430 = load i64, i64* %RBP.i, align 8
  %11431 = add i64 %11430, -188
  %11432 = load i64, i64* %3, align 8
  %11433 = add i64 %11432, 10
  store i64 %11433, i64* %3, align 8
  %11434 = inttoptr i64 %11431 to i32*
  store i32 1, i32* %11434, align 4
  %11435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %.pre316 = load i64, i64* %3, align 8
  br label %block_.L_421e0b

block_.L_421e0b:                                  ; preds = %block_.L_422148, %block_.L_421de4
  %11436 = phi i64 [ %.pre316, %block_.L_421de4 ], [ %13337, %block_.L_422148 ]
  %MEMORY.54 = phi %struct.Memory* [ %MEMORY.53, %block_.L_421de4 ], [ %MEMORY.60, %block_.L_422148 ]
  store i64 2, i64* %RAX.i3587.phi.trans.insert, align 8
  %11437 = load i64, i64* %RBP.i, align 8
  %11438 = add i64 %11437, -188
  %11439 = add i64 %11436, 11
  store i64 %11439, i64* %3, align 8
  %11440 = inttoptr i64 %11438 to i32*
  %11441 = load i32, i32* %11440, align 4
  %11442 = zext i32 %11441 to i64
  store i64 %11442, i64* %RCX.i4260.pre-phi, align 8
  %11443 = add i64 %11437, -76
  %11444 = add i64 %11436, 14
  store i64 %11444, i64* %3, align 8
  %11445 = inttoptr i64 %11443 to i32*
  %11446 = load i32, i32* %11445, align 4
  %11447 = zext i32 %11446 to i64
  store i64 %11447, i64* %RDX.i4317.pre-phi, align 8
  %11448 = add i64 %11437, -340
  %11449 = add i64 %11436, 20
  store i64 %11449, i64* %3, align 8
  %11450 = inttoptr i64 %11448 to i32*
  store i32 2, i32* %11450, align 4
  %11451 = load i32, i32* %EDX.i1187, align 4
  %11452 = zext i32 %11451 to i64
  %11453 = load i64, i64* %3, align 8
  store i64 %11452, i64* %RAX.i3587.phi.trans.insert, align 8
  %11454 = sext i32 %11451 to i64
  %11455 = lshr i64 %11454, 32
  store i64 %11455, i64* %11435, align 8
  %11456 = load i64, i64* %RBP.i, align 8
  %11457 = add i64 %11456, -340
  %11458 = add i64 %11453, 9
  store i64 %11458, i64* %3, align 8
  %11459 = inttoptr i64 %11457 to i32*
  %11460 = load i32, i32* %11459, align 4
  %11461 = zext i32 %11460 to i64
  store i64 %11461, i64* %RSI.i739, align 8
  %11462 = add i64 %11453, 11
  store i64 %11462, i64* %3, align 8
  %11463 = sext i32 %11460 to i64
  %11464 = shl nuw i64 %11455, 32
  %11465 = or i64 %11464, %11452
  %11466 = sdiv i64 %11465, %11463
  %11467 = shl i64 %11466, 32
  %11468 = ashr exact i64 %11467, 32
  %11469 = icmp eq i64 %11466, %11468
  br i1 %11469, label %11472, label %11470

; <label>:11470:                                  ; preds = %block_.L_421e0b
  %11471 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11462, %struct.Memory* %MEMORY.54)
  %.pre317 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %.pre318 = load i64, i64* %3, align 8
  %.pre319 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2832

; <label>:11472:                                  ; preds = %block_.L_421e0b
  %11473 = srem i64 %11465, %11463
  %11474 = and i64 %11466, 4294967295
  store i64 %11474, i64* %RAX.i3587.phi.trans.insert, align 8
  %11475 = and i64 %11473, 4294967295
  store i64 %11475, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %11476 = trunc i64 %11466 to i32
  br label %routine_idivl__esi.exit2832

routine_idivl__esi.exit2832:                      ; preds = %11472, %11470
  %11477 = phi i64 [ %.pre319, %11470 ], [ %11456, %11472 ]
  %11478 = phi i64 [ %.pre318, %11470 ], [ %11462, %11472 ]
  %11479 = phi i32 [ %.pre317, %11470 ], [ %11476, %11472 ]
  %11480 = phi %struct.Memory* [ %11471, %11470 ], [ %MEMORY.54, %11472 ]
  %11481 = load i32, i32* %ECX.i1211, align 4
  %11482 = sub i32 %11481, %11479
  %11483 = icmp ult i32 %11481, %11479
  %11484 = zext i1 %11483 to i8
  store i8 %11484, i8* %32, align 1
  %11485 = and i32 %11482, 255
  %11486 = tail call i32 @llvm.ctpop.i32(i32 %11485)
  %11487 = trunc i32 %11486 to i8
  %11488 = and i8 %11487, 1
  %11489 = xor i8 %11488, 1
  store i8 %11489, i8* %39, align 1
  %11490 = xor i32 %11479, %11481
  %11491 = xor i32 %11490, %11482
  %11492 = lshr i32 %11491, 4
  %11493 = trunc i32 %11492 to i8
  %11494 = and i8 %11493, 1
  store i8 %11494, i8* %45, align 1
  %11495 = icmp eq i32 %11482, 0
  %11496 = zext i1 %11495 to i8
  store i8 %11496, i8* %48, align 1
  %11497 = lshr i32 %11482, 31
  %11498 = trunc i32 %11497 to i8
  store i8 %11498, i8* %51, align 1
  %11499 = lshr i32 %11481, 31
  %11500 = lshr i32 %11479, 31
  %11501 = xor i32 %11500, %11499
  %11502 = xor i32 %11497, %11499
  %11503 = add nuw nsw i32 %11502, %11501
  %11504 = icmp eq i32 %11503, 2
  %11505 = zext i1 %11504 to i8
  store i8 %11505, i8* %57, align 1
  %11506 = icmp ne i8 %11498, 0
  %11507 = xor i1 %11506, %11504
  %.demorgan461 = or i1 %11495, %11507
  %.v536 = select i1 %.demorgan461, i64 8, i64 823
  %11508 = add i64 %11478, %.v536
  store i64 %11508, i64* %3, align 8
  %11509 = add i64 %11477, -188
  br i1 %.demorgan461, label %block_421e32, label %block_.L_422161

block_421e32:                                     ; preds = %routine_idivl__esi.exit2832
  %11510 = add i64 %11508, 6
  store i64 %11510, i64* %3, align 8
  %11511 = inttoptr i64 %11509 to i32*
  %11512 = load i32, i32* %11511, align 4
  %11513 = shl i32 %11512, 1
  %11514 = icmp eq i32 %11513, 0
  %11515 = zext i1 %11514 to i8
  %11516 = add i32 %11513, -1
  %11517 = zext i32 %11516 to i64
  store i64 %11517, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %11515, i8* %32, align 1
  %11518 = and i32 %11516, 255
  %11519 = tail call i32 @llvm.ctpop.i32(i32 %11518)
  %11520 = trunc i32 %11519 to i8
  %11521 = and i8 %11520, 1
  %11522 = xor i8 %11521, 1
  store i8 %11522, i8* %39, align 1
  %11523 = xor i32 %11516, %11513
  %11524 = lshr i32 %11523, 4
  %11525 = trunc i32 %11524 to i8
  %11526 = and i8 %11525, 1
  store i8 %11526, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %11527 = lshr i32 %11516, 31
  %11528 = trunc i32 %11527 to i8
  store i8 %11528, i8* %51, align 1
  %11529 = lshr i32 %11512, 30
  %11530 = and i32 %11529, 1
  %11531 = xor i32 %11527, %11530
  %11532 = add nuw nsw i32 %11531, %11530
  %11533 = icmp eq i32 %11532, 2
  %11534 = zext i1 %11533 to i8
  store i8 %11534, i8* %57, align 1
  %11535 = add i64 %11477, -176
  %11536 = add i64 %11508, 17
  store i64 %11536, i64* %3, align 8
  %11537 = inttoptr i64 %11535 to i32*
  store i32 %11516, i32* %11537, align 4
  %11538 = load i64, i64* %RBP.i, align 8
  %11539 = add i64 %11538, -184
  %11540 = load i64, i64* %3, align 8
  %11541 = add i64 %11540, 6
  store i64 %11541, i64* %3, align 8
  %11542 = inttoptr i64 %11539 to i32*
  %11543 = load i32, i32* %11542, align 4
  %11544 = zext i32 %11543 to i64
  store i64 %11544, i64* %RAX.i3587.phi.trans.insert, align 8
  %11545 = add i64 %11538, -176
  %11546 = add i64 %11540, 12
  store i64 %11546, i64* %3, align 8
  %11547 = inttoptr i64 %11545 to i32*
  %11548 = load i32, i32* %11547, align 4
  %11549 = add i32 %11548, %11543
  %11550 = zext i32 %11549 to i64
  store i64 %11550, i64* %RAX.i3587.phi.trans.insert, align 8
  %11551 = icmp ult i32 %11549, %11543
  %11552 = icmp ult i32 %11549, %11548
  %11553 = or i1 %11551, %11552
  %11554 = zext i1 %11553 to i8
  store i8 %11554, i8* %32, align 1
  %11555 = and i32 %11549, 255
  %11556 = tail call i32 @llvm.ctpop.i32(i32 %11555)
  %11557 = trunc i32 %11556 to i8
  %11558 = and i8 %11557, 1
  %11559 = xor i8 %11558, 1
  store i8 %11559, i8* %39, align 1
  %11560 = xor i32 %11548, %11543
  %11561 = xor i32 %11560, %11549
  %11562 = lshr i32 %11561, 4
  %11563 = trunc i32 %11562 to i8
  %11564 = and i8 %11563, 1
  store i8 %11564, i8* %45, align 1
  %11565 = icmp eq i32 %11549, 0
  %11566 = zext i1 %11565 to i8
  store i8 %11566, i8* %48, align 1
  %11567 = lshr i32 %11549, 31
  %11568 = trunc i32 %11567 to i8
  store i8 %11568, i8* %51, align 1
  %11569 = lshr i32 %11543, 31
  %11570 = lshr i32 %11548, 31
  %11571 = xor i32 %11567, %11569
  %11572 = xor i32 %11567, %11570
  %11573 = add nuw nsw i32 %11571, %11572
  %11574 = icmp eq i32 %11573, 2
  %11575 = zext i1 %11574 to i8
  store i8 %11575, i8* %57, align 1
  %11576 = add i64 %11538, -96
  %11577 = add i64 %11540, 15
  store i64 %11577, i64* %3, align 8
  %11578 = inttoptr i64 %11576 to i32*
  store i32 %11549, i32* %11578, align 4
  %11579 = load i64, i64* %RBP.i, align 8
  %11580 = add i64 %11579, -180
  %11581 = load i64, i64* %3, align 8
  %11582 = add i64 %11581, 6
  store i64 %11582, i64* %3, align 8
  %11583 = inttoptr i64 %11580 to i32*
  %11584 = load i32, i32* %11583, align 4
  %11585 = zext i32 %11584 to i64
  store i64 %11585, i64* %RAX.i3587.phi.trans.insert, align 8
  %11586 = add i64 %11579, -100
  %11587 = add i64 %11581, 9
  store i64 %11587, i64* %3, align 8
  %11588 = inttoptr i64 %11586 to i32*
  store i32 %11584, i32* %11588, align 4
  %11589 = load i64, i64* %RBP.i, align 8
  %11590 = add i64 %11589, -96
  %11591 = load i64, i64* %3, align 8
  %11592 = add i64 %11591, 3
  store i64 %11592, i64* %3, align 8
  %11593 = inttoptr i64 %11590 to i32*
  %11594 = load i32, i32* %11593, align 4
  %11595 = zext i32 %11594 to i64
  store i64 %11595, i64* %RAX.i3587.phi.trans.insert, align 8
  %11596 = add i64 %11589, -160
  %11597 = add i64 %11591, 9
  store i64 %11597, i64* %3, align 8
  %11598 = inttoptr i64 %11596 to i32*
  %11599 = load i32, i32* %11598, align 4
  %11600 = sub i32 %11594, %11599
  %11601 = zext i32 %11600 to i64
  store i64 %11601, i64* %RAX.i3587.phi.trans.insert, align 8
  %11602 = icmp ult i32 %11594, %11599
  %11603 = zext i1 %11602 to i8
  store i8 %11603, i8* %32, align 1
  %11604 = and i32 %11600, 255
  %11605 = tail call i32 @llvm.ctpop.i32(i32 %11604)
  %11606 = trunc i32 %11605 to i8
  %11607 = and i8 %11606, 1
  %11608 = xor i8 %11607, 1
  store i8 %11608, i8* %39, align 1
  %11609 = xor i32 %11599, %11594
  %11610 = xor i32 %11609, %11600
  %11611 = lshr i32 %11610, 4
  %11612 = trunc i32 %11611 to i8
  %11613 = and i8 %11612, 1
  store i8 %11613, i8* %45, align 1
  %11614 = icmp eq i32 %11600, 0
  %11615 = zext i1 %11614 to i8
  store i8 %11615, i8* %48, align 1
  %11616 = lshr i32 %11600, 31
  %11617 = trunc i32 %11616 to i8
  store i8 %11617, i8* %51, align 1
  %11618 = lshr i32 %11594, 31
  %11619 = lshr i32 %11599, 31
  %11620 = xor i32 %11619, %11618
  %11621 = xor i32 %11616, %11618
  %11622 = add nuw nsw i32 %11621, %11620
  %11623 = icmp eq i32 %11622, 2
  %11624 = zext i1 %11623 to i8
  store i8 %11624, i8* %57, align 1
  store i64 %11601, i64* %RDI.i1133, align 8
  %11625 = add i64 %11591, -134748
  %11626 = add i64 %11591, 16
  %11627 = load i64, i64* %6, align 8
  %11628 = add i64 %11627, -8
  %11629 = inttoptr i64 %11628 to i64*
  store i64 %11626, i64* %11629, align 8
  store i64 %11628, i64* %6, align 8
  store i64 %11625, i64* %3, align 8
  %11630 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %11480)
  %11631 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %11632 = load i64, i64* %RBP.i, align 8
  %11633 = add i64 %11632, -76
  %11634 = load i64, i64* %3, align 8
  %11635 = add i64 %11634, 3
  store i64 %11635, i64* %3, align 8
  %11636 = inttoptr i64 %11633 to i32*
  %11637 = load i32, i32* %11636, align 4
  %11638 = sub i32 %11631, %11637
  %11639 = icmp ult i32 %11631, %11637
  %11640 = zext i1 %11639 to i8
  store i8 %11640, i8* %32, align 1
  %11641 = and i32 %11638, 255
  %11642 = tail call i32 @llvm.ctpop.i32(i32 %11641)
  %11643 = trunc i32 %11642 to i8
  %11644 = and i8 %11643, 1
  %11645 = xor i8 %11644, 1
  store i8 %11645, i8* %39, align 1
  %11646 = xor i32 %11637, %11631
  %11647 = xor i32 %11646, %11638
  %11648 = lshr i32 %11647, 4
  %11649 = trunc i32 %11648 to i8
  %11650 = and i8 %11649, 1
  store i8 %11650, i8* %45, align 1
  %11651 = icmp eq i32 %11638, 0
  %11652 = zext i1 %11651 to i8
  store i8 %11652, i8* %48, align 1
  %11653 = lshr i32 %11638, 31
  %11654 = trunc i32 %11653 to i8
  store i8 %11654, i8* %51, align 1
  %11655 = lshr i32 %11631, 31
  %11656 = lshr i32 %11637, 31
  %11657 = xor i32 %11656, %11655
  %11658 = xor i32 %11653, %11655
  %11659 = add nuw nsw i32 %11658, %11657
  %11660 = icmp eq i32 %11659, 2
  %11661 = zext i1 %11660 to i8
  store i8 %11661, i8* %57, align 1
  %11662 = icmp ne i8 %11654, 0
  %11663 = xor i1 %11662, %11660
  %.demorgan462 = or i1 %11651, %11663
  %.v572 = select i1 %.demorgan462, i64 9, i64 346
  %11664 = add i64 %11634, %.v572
  store i64 %11664, i64* %3, align 8
  br i1 %.demorgan462, label %block_421e75, label %block_.L_421fc6

block_421e75:                                     ; preds = %block_421e32
  %11665 = add i64 %11632, -100
  %11666 = add i64 %11664, 3
  store i64 %11666, i64* %3, align 8
  %11667 = inttoptr i64 %11665 to i32*
  %11668 = load i32, i32* %11667, align 4
  %11669 = zext i32 %11668 to i64
  store i64 %11669, i64* %RAX.i3587.phi.trans.insert, align 8
  %11670 = add i64 %11632, -164
  %11671 = add i64 %11664, 9
  store i64 %11671, i64* %3, align 8
  %11672 = inttoptr i64 %11670 to i32*
  %11673 = load i32, i32* %11672, align 4
  %11674 = sub i32 %11668, %11673
  %11675 = zext i32 %11674 to i64
  store i64 %11675, i64* %RAX.i3587.phi.trans.insert, align 8
  %11676 = icmp ult i32 %11668, %11673
  %11677 = zext i1 %11676 to i8
  store i8 %11677, i8* %32, align 1
  %11678 = and i32 %11674, 255
  %11679 = tail call i32 @llvm.ctpop.i32(i32 %11678)
  %11680 = trunc i32 %11679 to i8
  %11681 = and i8 %11680, 1
  %11682 = xor i8 %11681, 1
  store i8 %11682, i8* %39, align 1
  %11683 = xor i32 %11673, %11668
  %11684 = xor i32 %11683, %11674
  %11685 = lshr i32 %11684, 4
  %11686 = trunc i32 %11685 to i8
  %11687 = and i8 %11686, 1
  store i8 %11687, i8* %45, align 1
  %11688 = icmp eq i32 %11674, 0
  %11689 = zext i1 %11688 to i8
  store i8 %11689, i8* %48, align 1
  %11690 = lshr i32 %11674, 31
  %11691 = trunc i32 %11690 to i8
  store i8 %11691, i8* %51, align 1
  %11692 = lshr i32 %11668, 31
  %11693 = lshr i32 %11673, 31
  %11694 = xor i32 %11693, %11692
  %11695 = xor i32 %11690, %11692
  %11696 = add nuw nsw i32 %11695, %11694
  %11697 = icmp eq i32 %11696, 2
  %11698 = zext i1 %11697 to i8
  store i8 %11698, i8* %57, align 1
  store i64 %11675, i64* %RDI.i1133, align 8
  %11699 = add i64 %11664, -134773
  %11700 = add i64 %11664, 16
  %11701 = load i64, i64* %6, align 8
  %11702 = add i64 %11701, -8
  %11703 = inttoptr i64 %11702 to i64*
  store i64 %11700, i64* %11703, align 8
  store i64 %11702, i64* %6, align 8
  store i64 %11699, i64* %3, align 8
  %11704 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %11630)
  %11705 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %11706 = load i64, i64* %RBP.i, align 8
  %11707 = add i64 %11706, -76
  %11708 = load i64, i64* %3, align 8
  %11709 = add i64 %11708, 3
  store i64 %11709, i64* %3, align 8
  %11710 = inttoptr i64 %11707 to i32*
  %11711 = load i32, i32* %11710, align 4
  %11712 = sub i32 %11705, %11711
  %11713 = icmp ult i32 %11705, %11711
  %11714 = zext i1 %11713 to i8
  store i8 %11714, i8* %32, align 1
  %11715 = and i32 %11712, 255
  %11716 = tail call i32 @llvm.ctpop.i32(i32 %11715)
  %11717 = trunc i32 %11716 to i8
  %11718 = and i8 %11717, 1
  %11719 = xor i8 %11718, 1
  store i8 %11719, i8* %39, align 1
  %11720 = xor i32 %11711, %11705
  %11721 = xor i32 %11720, %11712
  %11722 = lshr i32 %11721, 4
  %11723 = trunc i32 %11722 to i8
  %11724 = and i8 %11723, 1
  store i8 %11724, i8* %45, align 1
  %11725 = icmp eq i32 %11712, 0
  %11726 = zext i1 %11725 to i8
  store i8 %11726, i8* %48, align 1
  %11727 = lshr i32 %11712, 31
  %11728 = trunc i32 %11727 to i8
  store i8 %11728, i8* %51, align 1
  %11729 = lshr i32 %11705, 31
  %11730 = lshr i32 %11711, 31
  %11731 = xor i32 %11730, %11729
  %11732 = xor i32 %11727, %11729
  %11733 = add nuw nsw i32 %11732, %11731
  %11734 = icmp eq i32 %11733, 2
  %11735 = zext i1 %11734 to i8
  store i8 %11735, i8* %57, align 1
  %11736 = icmp ne i8 %11728, 0
  %11737 = xor i1 %11736, %11734
  %.demorgan463 = or i1 %11725, %11737
  %.v577 = select i1 %.demorgan463, i64 9, i64 321
  %11738 = add i64 %11708, %.v577
  store i64 %11738, i64* %3, align 8
  br i1 %.demorgan463, label %block_421e8e, label %block_.L_421fc6

block_421e8e:                                     ; preds = %block_421e75
  %11739 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %11739, i64* %RAX.i3587.phi.trans.insert, align 8
  %11740 = add i64 %11706, -100
  %11741 = add i64 %11738, 11
  store i64 %11741, i64* %3, align 8
  %11742 = inttoptr i64 %11740 to i32*
  %11743 = load i32, i32* %11742, align 4
  %11744 = zext i32 %11743 to i64
  store i64 %11744, i64* %RCX.i4260.pre-phi, align 8
  %11745 = add i64 %11706, -164
  %11746 = add i64 %11738, 17
  store i64 %11746, i64* %3, align 8
  %11747 = inttoptr i64 %11745 to i32*
  %11748 = load i32, i32* %11747, align 4
  %11749 = sub i32 %11743, %11748
  %11750 = zext i32 %11749 to i64
  store i64 %11750, i64* %RCX.i4260.pre-phi, align 8
  %11751 = icmp ult i32 %11743, %11748
  %11752 = zext i1 %11751 to i8
  store i8 %11752, i8* %32, align 1
  %11753 = and i32 %11749, 255
  %11754 = tail call i32 @llvm.ctpop.i32(i32 %11753)
  %11755 = trunc i32 %11754 to i8
  %11756 = and i8 %11755, 1
  %11757 = xor i8 %11756, 1
  store i8 %11757, i8* %39, align 1
  %11758 = xor i32 %11748, %11743
  %11759 = xor i32 %11758, %11749
  %11760 = lshr i32 %11759, 4
  %11761 = trunc i32 %11760 to i8
  %11762 = and i8 %11761, 1
  store i8 %11762, i8* %45, align 1
  %11763 = icmp eq i32 %11749, 0
  %11764 = zext i1 %11763 to i8
  store i8 %11764, i8* %48, align 1
  %11765 = lshr i32 %11749, 31
  %11766 = trunc i32 %11765 to i8
  store i8 %11766, i8* %51, align 1
  %11767 = lshr i32 %11743, 31
  %11768 = lshr i32 %11748, 31
  %11769 = xor i32 %11768, %11767
  %11770 = xor i32 %11765, %11767
  %11771 = add nuw nsw i32 %11770, %11769
  %11772 = icmp eq i32 %11771, 2
  %11773 = zext i1 %11772 to i8
  store i8 %11773, i8* %57, align 1
  %11774 = add i64 %11738, 20
  store i64 %11774, i64* %3, align 8
  %11775 = load i32, i32* %11710, align 4
  %11776 = add i32 %11775, %11749
  %11777 = zext i32 %11776 to i64
  store i64 %11777, i64* %RCX.i4260.pre-phi, align 8
  %11778 = icmp ult i32 %11776, %11749
  %11779 = icmp ult i32 %11776, %11775
  %11780 = or i1 %11778, %11779
  %11781 = zext i1 %11780 to i8
  store i8 %11781, i8* %32, align 1
  %11782 = and i32 %11776, 255
  %11783 = tail call i32 @llvm.ctpop.i32(i32 %11782)
  %11784 = trunc i32 %11783 to i8
  %11785 = and i8 %11784, 1
  %11786 = xor i8 %11785, 1
  store i8 %11786, i8* %39, align 1
  %11787 = xor i32 %11775, %11749
  %11788 = xor i32 %11787, %11776
  %11789 = lshr i32 %11788, 4
  %11790 = trunc i32 %11789 to i8
  %11791 = and i8 %11790, 1
  store i8 %11791, i8* %45, align 1
  %11792 = icmp eq i32 %11776, 0
  %11793 = zext i1 %11792 to i8
  store i8 %11793, i8* %48, align 1
  %11794 = lshr i32 %11776, 31
  %11795 = trunc i32 %11794 to i8
  store i8 %11795, i8* %51, align 1
  %11796 = lshr i32 %11775, 31
  %11797 = xor i32 %11794, %11765
  %11798 = xor i32 %11794, %11796
  %11799 = add nuw nsw i32 %11797, %11798
  %11800 = icmp eq i32 %11799, 2
  %11801 = zext i1 %11800 to i8
  store i8 %11801, i8* %57, align 1
  %11802 = sext i32 %11776 to i64
  store i64 %11802, i64* %RDX.i4317.pre-phi, align 8
  %11803 = shl nsw i64 %11802, 3
  %11804 = add i64 %11739, %11803
  %11805 = add i64 %11738, 27
  store i64 %11805, i64* %3, align 8
  %11806 = inttoptr i64 %11804 to i64*
  %11807 = load i64, i64* %11806, align 8
  store i64 %11807, i64* %RAX.i3587.phi.trans.insert, align 8
  %11808 = add i64 %11706, -96
  %11809 = add i64 %11738, 30
  store i64 %11809, i64* %3, align 8
  %11810 = inttoptr i64 %11808 to i32*
  %11811 = load i32, i32* %11810, align 4
  %11812 = zext i32 %11811 to i64
  store i64 %11812, i64* %RCX.i4260.pre-phi, align 8
  %11813 = load i64, i64* %RBP.i, align 8
  %11814 = add i64 %11813, -160
  %11815 = add i64 %11738, 36
  store i64 %11815, i64* %3, align 8
  %11816 = inttoptr i64 %11814 to i32*
  %11817 = load i32, i32* %11816, align 4
  %11818 = sub i32 %11811, %11817
  %11819 = zext i32 %11818 to i64
  store i64 %11819, i64* %RCX.i4260.pre-phi, align 8
  %11820 = icmp ult i32 %11811, %11817
  %11821 = zext i1 %11820 to i8
  store i8 %11821, i8* %32, align 1
  %11822 = and i32 %11818, 255
  %11823 = tail call i32 @llvm.ctpop.i32(i32 %11822)
  %11824 = trunc i32 %11823 to i8
  %11825 = and i8 %11824, 1
  %11826 = xor i8 %11825, 1
  store i8 %11826, i8* %39, align 1
  %11827 = xor i32 %11817, %11811
  %11828 = xor i32 %11827, %11818
  %11829 = lshr i32 %11828, 4
  %11830 = trunc i32 %11829 to i8
  %11831 = and i8 %11830, 1
  store i8 %11831, i8* %45, align 1
  %11832 = icmp eq i32 %11818, 0
  %11833 = zext i1 %11832 to i8
  store i8 %11833, i8* %48, align 1
  %11834 = lshr i32 %11818, 31
  %11835 = trunc i32 %11834 to i8
  store i8 %11835, i8* %51, align 1
  %11836 = lshr i32 %11811, 31
  %11837 = lshr i32 %11817, 31
  %11838 = xor i32 %11837, %11836
  %11839 = xor i32 %11834, %11836
  %11840 = add nuw nsw i32 %11839, %11838
  %11841 = icmp eq i32 %11840, 2
  %11842 = zext i1 %11841 to i8
  store i8 %11842, i8* %57, align 1
  %11843 = add i64 %11813, -76
  %11844 = add i64 %11738, 39
  store i64 %11844, i64* %3, align 8
  %11845 = inttoptr i64 %11843 to i32*
  %11846 = load i32, i32* %11845, align 4
  %11847 = add i32 %11846, %11818
  %11848 = zext i32 %11847 to i64
  store i64 %11848, i64* %RCX.i4260.pre-phi, align 8
  %11849 = icmp ult i32 %11847, %11818
  %11850 = icmp ult i32 %11847, %11846
  %11851 = or i1 %11849, %11850
  %11852 = zext i1 %11851 to i8
  store i8 %11852, i8* %32, align 1
  %11853 = and i32 %11847, 255
  %11854 = tail call i32 @llvm.ctpop.i32(i32 %11853)
  %11855 = trunc i32 %11854 to i8
  %11856 = and i8 %11855, 1
  %11857 = xor i8 %11856, 1
  store i8 %11857, i8* %39, align 1
  %11858 = xor i32 %11846, %11818
  %11859 = xor i32 %11858, %11847
  %11860 = lshr i32 %11859, 4
  %11861 = trunc i32 %11860 to i8
  %11862 = and i8 %11861, 1
  store i8 %11862, i8* %45, align 1
  %11863 = icmp eq i32 %11847, 0
  %11864 = zext i1 %11863 to i8
  store i8 %11864, i8* %48, align 1
  %11865 = lshr i32 %11847, 31
  %11866 = trunc i32 %11865 to i8
  store i8 %11866, i8* %51, align 1
  %11867 = lshr i32 %11846, 31
  %11868 = xor i32 %11865, %11834
  %11869 = xor i32 %11865, %11867
  %11870 = add nuw nsw i32 %11868, %11869
  %11871 = icmp eq i32 %11870, 2
  %11872 = zext i1 %11871 to i8
  store i8 %11872, i8* %57, align 1
  %11873 = sext i32 %11847 to i64
  store i64 %11873, i64* %RDX.i4317.pre-phi, align 8
  %11874 = shl nsw i64 %11873, 2
  %11875 = add i64 %11807, %11874
  %11876 = add i64 %11738, 46
  store i64 %11876, i64* %3, align 8
  %11877 = inttoptr i64 %11875 to i32*
  %11878 = load i32, i32* %11877, align 4
  store i8 0, i8* %32, align 1
  %11879 = and i32 %11878, 255
  %11880 = tail call i32 @llvm.ctpop.i32(i32 %11879)
  %11881 = trunc i32 %11880 to i8
  %11882 = and i8 %11881, 1
  %11883 = xor i8 %11882, 1
  store i8 %11883, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %11884 = icmp eq i32 %11878, 0
  %11885 = zext i1 %11884 to i8
  store i8 %11885, i8* %48, align 1
  %11886 = lshr i32 %11878, 31
  %11887 = trunc i32 %11886 to i8
  store i8 %11887, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v578 = select i1 %11884, i64 52, i64 307
  %11888 = add i64 %11738, %.v578
  store i64 %11888, i64* %3, align 8
  br i1 %11884, label %block_421ec2, label %block_.L_421fc1

block_421ec2:                                     ; preds = %block_421e8e
  %11889 = load i64, i64* %RBP.i, align 8
  %11890 = add i64 %11889, -132
  %11891 = add i64 %11888, 6
  store i64 %11891, i64* %3, align 8
  %11892 = inttoptr i64 %11890 to i32*
  %11893 = load i32, i32* %11892, align 4
  %11894 = zext i32 %11893 to i64
  store i64 %11894, i64* %RAX.i3587.phi.trans.insert, align 8
  %11895 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %11895, i64* %RCX.i4260.pre-phi, align 8
  %11896 = add i64 %11889, -96
  %11897 = add i64 %11888, 17
  store i64 %11897, i64* %3, align 8
  %11898 = inttoptr i64 %11896 to i32*
  %11899 = load i32, i32* %11898, align 4
  %11900 = zext i32 %11899 to i64
  store i64 %11900, i64* %RDX.i4317.pre-phi, align 8
  %11901 = add i64 %11889, -136
  %11902 = add i64 %11888, 23
  store i64 %11902, i64* %3, align 8
  %11903 = inttoptr i64 %11901 to i32*
  %11904 = load i32, i32* %11903, align 4
  %11905 = zext i32 %11904 to i64
  store i64 %11905, i64* %RSI.i739, align 8
  %11906 = add i64 %11889, -352
  %11907 = add i64 %11888, 30
  store i64 %11907, i64* %3, align 8
  %11908 = inttoptr i64 %11906 to i64*
  store i64 %11895, i64* %11908, align 8
  %11909 = load i32, i32* %ESI.i1656, align 4
  %11910 = zext i32 %11909 to i64
  %11911 = load i64, i64* %3, align 8
  store i64 %11910, i64* %RCX.i4260.pre-phi, align 8
  %11912 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %11913 = add i64 %11911, 4
  store i64 %11913, i64* %3, align 8
  %11914 = trunc i32 %11909 to i5
  switch i5 %11914, label %11921 [
    i5 0, label %routine_shll__cl___edx.exit2719
    i5 1, label %11915
  ]

; <label>:11915:                                  ; preds = %block_421ec2
  %11916 = trunc i64 %11912 to i32
  %11917 = shl i32 %11916, 1
  %11918 = icmp slt i32 %11916, 0
  %11919 = icmp slt i32 %11917, 0
  %11920 = xor i1 %11918, %11919
  br label %11931

; <label>:11921:                                  ; preds = %block_421ec2
  %11922 = and i32 %11909, 31
  %11923 = zext i32 %11922 to i64
  %11924 = add nuw nsw i64 %11923, 4294967295
  %11925 = and i64 %11912, 4294967295
  %11926 = and i64 %11924, 4294967295
  %11927 = shl i64 %11925, %11926
  %11928 = trunc i64 %11927 to i32
  %11929 = icmp slt i32 %11928, 0
  %11930 = shl i32 %11928, 1
  br label %11931

; <label>:11931:                                  ; preds = %11921, %11915
  %11932 = phi i1 [ %11918, %11915 ], [ %11929, %11921 ]
  %11933 = phi i1 [ %11920, %11915 ], [ false, %11921 ]
  %11934 = phi i32 [ %11917, %11915 ], [ %11930, %11921 ]
  %11935 = zext i32 %11934 to i64
  store i64 %11935, i64* %RDX.i4317.pre-phi, align 8
  %11936 = zext i1 %11932 to i8
  store i8 %11936, i8* %32, align 1
  %11937 = and i32 %11934, 254
  %11938 = tail call i32 @llvm.ctpop.i32(i32 %11937)
  %11939 = trunc i32 %11938 to i8
  %11940 = and i8 %11939, 1
  %11941 = xor i8 %11940, 1
  store i8 %11941, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %11942 = icmp eq i32 %11934, 0
  %11943 = zext i1 %11942 to i8
  store i8 %11943, i8* %48, align 1
  %11944 = lshr i32 %11934, 31
  %11945 = trunc i32 %11944 to i8
  store i8 %11945, i8* %51, align 1
  %11946 = zext i1 %11933 to i8
  store i8 %11946, i8* %57, align 1
  br label %routine_shll__cl___edx.exit2719

routine_shll__cl___edx.exit2719:                  ; preds = %11931, %block_421ec2
  %11947 = phi i64 [ %11935, %11931 ], [ %11912, %block_421ec2 ]
  %11948 = load i64, i64* %RBP.i, align 8
  %11949 = add i64 %11948, -152
  %11950 = add i64 %11911, 10
  store i64 %11950, i64* %3, align 8
  %11951 = trunc i64 %11947 to i32
  %11952 = inttoptr i64 %11949 to i32*
  %11953 = load i32, i32* %11952, align 4
  %11954 = sub i32 %11951, %11953
  %11955 = zext i32 %11954 to i64
  store i64 %11955, i64* %RDX.i4317.pre-phi, align 8
  %11956 = icmp ult i32 %11951, %11953
  %11957 = zext i1 %11956 to i8
  store i8 %11957, i8* %32, align 1
  %11958 = and i32 %11954, 255
  %11959 = tail call i32 @llvm.ctpop.i32(i32 %11958)
  %11960 = trunc i32 %11959 to i8
  %11961 = and i8 %11960, 1
  %11962 = xor i8 %11961, 1
  store i8 %11962, i8* %39, align 1
  %11963 = xor i32 %11953, %11951
  %11964 = xor i32 %11963, %11954
  %11965 = lshr i32 %11964, 4
  %11966 = trunc i32 %11965 to i8
  %11967 = and i8 %11966, 1
  store i8 %11967, i8* %45, align 1
  %11968 = icmp eq i32 %11954, 0
  %11969 = zext i1 %11968 to i8
  store i8 %11969, i8* %48, align 1
  %11970 = lshr i32 %11954, 31
  %11971 = trunc i32 %11970 to i8
  store i8 %11971, i8* %51, align 1
  %11972 = lshr i32 %11951, 31
  %11973 = lshr i32 %11953, 31
  %11974 = xor i32 %11973, %11972
  %11975 = xor i32 %11970, %11972
  %11976 = add nuw nsw i32 %11975, %11974
  %11977 = icmp eq i32 %11976, 2
  %11978 = zext i1 %11977 to i8
  store i8 %11978, i8* %57, align 1
  %11979 = sext i32 %11954 to i64
  store i64 %11979, i64* %RDI.i1133, align 8
  %11980 = add i64 %11948, -352
  %11981 = add i64 %11911, 20
  store i64 %11981, i64* %3, align 8
  %11982 = inttoptr i64 %11980 to i64*
  %11983 = load i64, i64* %11982, align 8
  store i64 %11983, i64* %R8.i5602, align 8
  %11984 = shl nsw i64 %11979, 2
  %11985 = add i64 %11984, %11983
  %11986 = add i64 %11911, 24
  store i64 %11986, i64* %3, align 8
  %11987 = inttoptr i64 %11985 to i32*
  %11988 = load i32, i32* %11987, align 4
  %11989 = zext i32 %11988 to i64
  store i64 %11989, i64* %RDX.i4317.pre-phi, align 8
  %11990 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %11990, i64* %RDI.i1133, align 8
  %11991 = add i64 %11948, -100
  %11992 = add i64 %11911, 35
  store i64 %11992, i64* %3, align 8
  %11993 = inttoptr i64 %11991 to i32*
  %11994 = load i32, i32* %11993, align 4
  %11995 = zext i32 %11994 to i64
  store i64 %11995, i64* %RSI.i739, align 8
  %11996 = add i64 %11948, -136
  %11997 = add i64 %11911, 41
  store i64 %11997, i64* %3, align 8
  %11998 = inttoptr i64 %11996 to i32*
  %11999 = load i32, i32* %11998, align 4
  %12000 = zext i32 %11999 to i64
  store i64 %12000, i64* %RCX.i4260.pre-phi, align 8
  %12001 = add i64 %11911, 43
  store i64 %12001, i64* %3, align 8
  %12002 = trunc i32 %11999 to i5
  switch i5 %12002, label %12008 [
    i5 0, label %routine_shll__cl___esi.exit2694
    i5 1, label %12003
  ]

; <label>:12003:                                  ; preds = %routine_shll__cl___edx.exit2719
  %12004 = shl i32 %11994, 1
  %12005 = icmp slt i32 %11994, 0
  %12006 = icmp slt i32 %12004, 0
  %12007 = xor i1 %12005, %12006
  br label %12017

; <label>:12008:                                  ; preds = %routine_shll__cl___edx.exit2719
  %12009 = and i32 %11999, 31
  %12010 = zext i32 %12009 to i64
  %12011 = add nuw nsw i64 %12010, 4294967295
  %12012 = and i64 %12011, 4294967295
  %12013 = shl i64 %11995, %12012
  %12014 = trunc i64 %12013 to i32
  %12015 = icmp slt i32 %12014, 0
  %12016 = shl i32 %12014, 1
  br label %12017

; <label>:12017:                                  ; preds = %12008, %12003
  %12018 = phi i1 [ %12005, %12003 ], [ %12015, %12008 ]
  %12019 = phi i1 [ %12007, %12003 ], [ false, %12008 ]
  %12020 = phi i32 [ %12004, %12003 ], [ %12016, %12008 ]
  %12021 = zext i32 %12020 to i64
  store i64 %12021, i64* %RSI.i739, align 8
  %12022 = zext i1 %12018 to i8
  store i8 %12022, i8* %32, align 1
  %12023 = and i32 %12020, 254
  %12024 = tail call i32 @llvm.ctpop.i32(i32 %12023)
  %12025 = trunc i32 %12024 to i8
  %12026 = and i8 %12025, 1
  %12027 = xor i8 %12026, 1
  store i8 %12027, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %12028 = icmp eq i32 %12020, 0
  %12029 = zext i1 %12028 to i8
  store i8 %12029, i8* %48, align 1
  %12030 = lshr i32 %12020, 31
  %12031 = trunc i32 %12030 to i8
  store i8 %12031, i8* %51, align 1
  %12032 = zext i1 %12019 to i8
  store i8 %12032, i8* %57, align 1
  br label %routine_shll__cl___esi.exit2694

routine_shll__cl___esi.exit2694:                  ; preds = %12017, %routine_shll__cl___edx.exit2719
  %12033 = phi i32 [ %12020, %12017 ], [ %11994, %routine_shll__cl___edx.exit2719 ]
  %12034 = add i64 %11948, -156
  %12035 = add i64 %11911, 49
  store i64 %12035, i64* %3, align 8
  %12036 = inttoptr i64 %12034 to i32*
  %12037 = load i32, i32* %12036, align 4
  %12038 = sub i32 %12033, %12037
  %12039 = zext i32 %12038 to i64
  store i64 %12039, i64* %RSI.i739, align 8
  %12040 = icmp ult i32 %12033, %12037
  %12041 = zext i1 %12040 to i8
  store i8 %12041, i8* %32, align 1
  %12042 = and i32 %12038, 255
  %12043 = tail call i32 @llvm.ctpop.i32(i32 %12042)
  %12044 = trunc i32 %12043 to i8
  %12045 = and i8 %12044, 1
  %12046 = xor i8 %12045, 1
  store i8 %12046, i8* %39, align 1
  %12047 = xor i32 %12037, %12033
  %12048 = xor i32 %12047, %12038
  %12049 = lshr i32 %12048, 4
  %12050 = trunc i32 %12049 to i8
  %12051 = and i8 %12050, 1
  store i8 %12051, i8* %45, align 1
  %12052 = icmp eq i32 %12038, 0
  %12053 = zext i1 %12052 to i8
  store i8 %12053, i8* %48, align 1
  %12054 = lshr i32 %12038, 31
  %12055 = trunc i32 %12054 to i8
  store i8 %12055, i8* %51, align 1
  %12056 = lshr i32 %12033, 31
  %12057 = lshr i32 %12037, 31
  %12058 = xor i32 %12057, %12056
  %12059 = xor i32 %12054, %12056
  %12060 = add nuw nsw i32 %12059, %12058
  %12061 = icmp eq i32 %12060, 2
  %12062 = zext i1 %12061 to i8
  store i8 %12062, i8* %57, align 1
  %12063 = sext i32 %12038 to i64
  store i64 %12063, i64* %R9.i5580, align 8
  %12064 = shl nsw i64 %12063, 2
  %12065 = add i64 %11990, %12064
  %12066 = add i64 %11911, 56
  store i64 %12066, i64* %3, align 8
  %12067 = inttoptr i64 %12065 to i32*
  %12068 = load i32, i32* %12067, align 4
  %12069 = add i32 %12068, %11988
  %12070 = zext i32 %12069 to i64
  store i64 %12070, i64* %RDX.i4317.pre-phi, align 8
  %12071 = icmp ult i32 %12069, %11988
  %12072 = icmp ult i32 %12069, %12068
  %12073 = or i1 %12071, %12072
  %12074 = zext i1 %12073 to i8
  store i8 %12074, i8* %32, align 1
  %12075 = and i32 %12069, 255
  %12076 = tail call i32 @llvm.ctpop.i32(i32 %12075)
  %12077 = trunc i32 %12076 to i8
  %12078 = and i8 %12077, 1
  %12079 = xor i8 %12078, 1
  store i8 %12079, i8* %39, align 1
  %12080 = xor i32 %12068, %11988
  %12081 = xor i32 %12080, %12069
  %12082 = lshr i32 %12081, 4
  %12083 = trunc i32 %12082 to i8
  %12084 = and i8 %12083, 1
  store i8 %12084, i8* %45, align 1
  %12085 = icmp eq i32 %12069, 0
  %12086 = zext i1 %12085 to i8
  store i8 %12086, i8* %48, align 1
  %12087 = lshr i32 %12069, 31
  %12088 = trunc i32 %12087 to i8
  store i8 %12088, i8* %51, align 1
  %12089 = lshr i32 %11988, 31
  %12090 = lshr i32 %12068, 31
  %12091 = xor i32 %12087, %12089
  %12092 = xor i32 %12087, %12090
  %12093 = add nuw nsw i32 %12091, %12092
  %12094 = icmp eq i32 %12093, 2
  %12095 = zext i1 %12094 to i8
  store i8 %12095, i8* %57, align 1
  %12096 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %12097 = shl i64 %12096, 32
  %12098 = ashr exact i64 %12097, 32
  %12099 = sext i32 %12069 to i64
  %12100 = mul nsw i64 %12099, %12098
  %12101 = shl i64 %12100, 32
  %12102 = ashr i64 %12101, 47
  %12103 = lshr i64 %12102, 1
  %12104 = trunc i64 %12102 to i8
  %12105 = and i8 %12104, 1
  %12106 = trunc i64 %12103 to i32
  %12107 = and i64 %12103, 4294967295
  store i64 %12107, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %12105, i8* %32, align 1
  %12108 = and i32 %12106, 255
  %12109 = tail call i32 @llvm.ctpop.i32(i32 %12108)
  %12110 = trunc i32 %12109 to i8
  %12111 = and i8 %12110, 1
  %12112 = xor i8 %12111, 1
  store i8 %12112, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %12113 = icmp eq i32 %12106, 0
  %12114 = zext i1 %12113 to i8
  store i8 %12114, i8* %48, align 1
  %12115 = lshr i64 %12102, 32
  %12116 = trunc i64 %12115 to i8
  %12117 = and i8 %12116, 1
  store i8 %12117, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %12118 = load i64, i64* %RBP.i, align 8
  %12119 = add i64 %12118, -104
  %12120 = trunc i64 %12103 to i32
  %12121 = add i64 %11911, 65
  store i64 %12121, i64* %3, align 8
  %12122 = inttoptr i64 %12119 to i32*
  store i32 %12120, i32* %12122, align 4
  %12123 = load i64, i64* %RBP.i, align 8
  %12124 = add i64 %12123, -128
  %12125 = load i64, i64* %3, align 8
  %12126 = add i64 %12125, 4
  store i64 %12126, i64* %3, align 8
  %12127 = inttoptr i64 %12124 to i64*
  %12128 = load i64, i64* %12127, align 8
  store i64 %12128, i64* %RDI.i1133, align 8
  %12129 = add i64 %12123, -32
  %12130 = add i64 %12125, 8
  store i64 %12130, i64* %3, align 8
  %12131 = inttoptr i64 %12129 to i64*
  %12132 = load i64, i64* %12131, align 8
  store i64 %12132, i64* %RSI.i739, align 8
  %12133 = add i64 %12123, -112
  %12134 = add i64 %12125, 12
  store i64 %12134, i64* %3, align 8
  %12135 = inttoptr i64 %12133 to i64*
  %12136 = load i64, i64* %12135, align 8
  store i64 %12136, i64* %RDX.i4317.pre-phi, align 8
  %12137 = add i64 %12123, -140
  %12138 = add i64 %12125, 18
  store i64 %12138, i64* %3, align 8
  %12139 = inttoptr i64 %12137 to i32*
  %12140 = load i32, i32* %12139, align 4
  %12141 = zext i32 %12140 to i64
  store i64 %12141, i64* %RCX.i4260.pre-phi, align 8
  %12142 = add i64 %12123, -144
  %12143 = add i64 %12125, 25
  store i64 %12143, i64* %3, align 8
  %12144 = inttoptr i64 %12142 to i32*
  %12145 = load i32, i32* %12144, align 4
  %12146 = zext i32 %12145 to i64
  store i64 %12146, i64* %R8.i5602, align 8
  %12147 = add i64 %12123, -148
  %12148 = add i64 %12125, 32
  store i64 %12148, i64* %3, align 8
  %12149 = inttoptr i64 %12147 to i32*
  %12150 = load i32, i32* %12149, align 4
  %12151 = zext i32 %12150 to i64
  store i64 %12151, i64* %R9.i5580, align 8
  %12152 = add i64 %12123, -104
  %12153 = add i64 %12125, 35
  store i64 %12153, i64* %3, align 8
  %12154 = inttoptr i64 %12152 to i32*
  %12155 = load i32, i32* %12154, align 4
  %12156 = zext i32 %12155 to i64
  store i64 %12156, i64* %RAX.i3587.phi.trans.insert, align 8
  %12157 = add i64 %12123, -80
  %12158 = add i64 %12125, 39
  store i64 %12158, i64* %3, align 8
  %12159 = inttoptr i64 %12157 to i32*
  %12160 = load i32, i32* %12159, align 4
  %12161 = zext i32 %12160 to i64
  store i64 %12161, i64* %68, align 8
  %12162 = add i64 %12123, -96
  %12163 = add i64 %12125, 43
  store i64 %12163, i64* %3, align 8
  %12164 = inttoptr i64 %12162 to i32*
  %12165 = load i32, i32* %12164, align 4
  %12166 = zext i32 %12165 to i64
  store i64 %12166, i64* %R11.i, align 8
  %12167 = add i64 %12123, -100
  %12168 = add i64 %12125, 46
  store i64 %12168, i64* %3, align 8
  %12169 = inttoptr i64 %12167 to i32*
  %12170 = load i32, i32* %12169, align 4
  %12171 = zext i32 %12170 to i64
  store i64 %12171, i64* %RBX.i615, align 8
  %12172 = load i32*, i32** %2119, align 8
  %12173 = add i64 %12125, 49
  store i64 %12173, i64* %3, align 8
  store i32 %12155, i32* %12172, align 4
  %12174 = load i64, i64* %6, align 8
  %12175 = add i64 %12174, 8
  %12176 = load i32, i32* %R10D.i761, align 4
  %12177 = load i64, i64* %3, align 8
  %12178 = add i64 %12177, 5
  store i64 %12178, i64* %3, align 8
  %12179 = inttoptr i64 %12175 to i32*
  store i32 %12176, i32* %12179, align 4
  %12180 = load i64, i64* %6, align 8
  %12181 = add i64 %12180, 16
  %12182 = load i32, i32* %R11D.i5540, align 4
  %12183 = load i64, i64* %3, align 8
  %12184 = add i64 %12183, 5
  store i64 %12184, i64* %3, align 8
  %12185 = inttoptr i64 %12181 to i32*
  store i32 %12182, i32* %12185, align 4
  %12186 = load i64, i64* %6, align 8
  %12187 = add i64 %12186, 24
  %12188 = load i32, i32* %EBX.i5525, align 4
  %12189 = load i64, i64* %3, align 8
  %12190 = add i64 %12189, 4
  store i64 %12190, i64* %3, align 8
  %12191 = inttoptr i64 %12187 to i32*
  store i32 %12188, i32* %12191, align 4
  %12192 = load i64, i64* %3, align 8
  %12193 = add i64 %12192, -6832
  %12194 = add i64 %12192, 5
  %12195 = load i64, i64* %6, align 8
  %12196 = add i64 %12195, -8
  %12197 = inttoptr i64 %12196 to i64*
  store i64 %12194, i64* %12197, align 8
  store i64 %12196, i64* %6, align 8
  store i64 %12193, i64* %3, align 8
  %call2_421f60 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %12193, %struct.Memory* %11704)
  %12198 = load i64, i64* %RBP.i, align 8
  %12199 = add i64 %12198, -104
  %12200 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %12201 = load i64, i64* %3, align 8
  %12202 = add i64 %12201, 3
  store i64 %12202, i64* %3, align 8
  %12203 = inttoptr i64 %12199 to i32*
  store i32 %12200, i32* %12203, align 4
  %12204 = load i64, i64* %RBP.i, align 8
  %12205 = add i64 %12204, -104
  %12206 = load i64, i64* %3, align 8
  %12207 = add i64 %12206, 3
  store i64 %12207, i64* %3, align 8
  %12208 = inttoptr i64 %12205 to i32*
  %12209 = load i32, i32* %12208, align 4
  %12210 = zext i32 %12209 to i64
  store i64 %12210, i64* %RAX.i3587.phi.trans.insert, align 8
  %12211 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %12211, i64* %RDX.i4317.pre-phi, align 8
  %12212 = add i64 %12204, -100
  %12213 = add i64 %12206, 14
  store i64 %12213, i64* %3, align 8
  %12214 = inttoptr i64 %12212 to i32*
  %12215 = load i32, i32* %12214, align 4
  %12216 = zext i32 %12215 to i64
  store i64 %12216, i64* %RCX.i4260.pre-phi, align 8
  %12217 = add i64 %12204, -164
  %12218 = add i64 %12206, 20
  store i64 %12218, i64* %3, align 8
  %12219 = inttoptr i64 %12217 to i32*
  %12220 = load i32, i32* %12219, align 4
  %12221 = sub i32 %12215, %12220
  %12222 = zext i32 %12221 to i64
  store i64 %12222, i64* %RCX.i4260.pre-phi, align 8
  %12223 = icmp ult i32 %12215, %12220
  %12224 = zext i1 %12223 to i8
  store i8 %12224, i8* %32, align 1
  %12225 = and i32 %12221, 255
  %12226 = tail call i32 @llvm.ctpop.i32(i32 %12225)
  %12227 = trunc i32 %12226 to i8
  %12228 = and i8 %12227, 1
  %12229 = xor i8 %12228, 1
  store i8 %12229, i8* %39, align 1
  %12230 = xor i32 %12220, %12215
  %12231 = xor i32 %12230, %12221
  %12232 = lshr i32 %12231, 4
  %12233 = trunc i32 %12232 to i8
  %12234 = and i8 %12233, 1
  store i8 %12234, i8* %45, align 1
  %12235 = icmp eq i32 %12221, 0
  %12236 = zext i1 %12235 to i8
  store i8 %12236, i8* %48, align 1
  %12237 = lshr i32 %12221, 31
  %12238 = trunc i32 %12237 to i8
  store i8 %12238, i8* %51, align 1
  %12239 = lshr i32 %12215, 31
  %12240 = lshr i32 %12220, 31
  %12241 = xor i32 %12240, %12239
  %12242 = xor i32 %12237, %12239
  %12243 = add nuw nsw i32 %12242, %12241
  %12244 = icmp eq i32 %12243, 2
  %12245 = zext i1 %12244 to i8
  store i8 %12245, i8* %57, align 1
  %12246 = add i64 %12204, -76
  %12247 = add i64 %12206, 23
  store i64 %12247, i64* %3, align 8
  %12248 = inttoptr i64 %12246 to i32*
  %12249 = load i32, i32* %12248, align 4
  %12250 = add i32 %12249, %12221
  %12251 = zext i32 %12250 to i64
  store i64 %12251, i64* %RCX.i4260.pre-phi, align 8
  %12252 = icmp ult i32 %12250, %12221
  %12253 = icmp ult i32 %12250, %12249
  %12254 = or i1 %12252, %12253
  %12255 = zext i1 %12254 to i8
  store i8 %12255, i8* %32, align 1
  %12256 = and i32 %12250, 255
  %12257 = tail call i32 @llvm.ctpop.i32(i32 %12256)
  %12258 = trunc i32 %12257 to i8
  %12259 = and i8 %12258, 1
  %12260 = xor i8 %12259, 1
  store i8 %12260, i8* %39, align 1
  %12261 = xor i32 %12249, %12221
  %12262 = xor i32 %12261, %12250
  %12263 = lshr i32 %12262, 4
  %12264 = trunc i32 %12263 to i8
  %12265 = and i8 %12264, 1
  store i8 %12265, i8* %45, align 1
  %12266 = icmp eq i32 %12250, 0
  %12267 = zext i1 %12266 to i8
  store i8 %12267, i8* %48, align 1
  %12268 = lshr i32 %12250, 31
  %12269 = trunc i32 %12268 to i8
  store i8 %12269, i8* %51, align 1
  %12270 = lshr i32 %12249, 31
  %12271 = xor i32 %12268, %12237
  %12272 = xor i32 %12268, %12270
  %12273 = add nuw nsw i32 %12271, %12272
  %12274 = icmp eq i32 %12273, 2
  %12275 = zext i1 %12274 to i8
  store i8 %12275, i8* %57, align 1
  %12276 = sext i32 %12250 to i64
  store i64 %12276, i64* %RSI.i739, align 8
  %12277 = shl nsw i64 %12276, 3
  %12278 = add i64 %12211, %12277
  %12279 = add i64 %12206, 30
  store i64 %12279, i64* %3, align 8
  %12280 = inttoptr i64 %12278 to i64*
  %12281 = load i64, i64* %12280, align 8
  store i64 %12281, i64* %RDX.i4317.pre-phi, align 8
  %12282 = load i64, i64* %RBP.i, align 8
  %12283 = add i64 %12282, -96
  %12284 = add i64 %12206, 33
  store i64 %12284, i64* %3, align 8
  %12285 = inttoptr i64 %12283 to i32*
  %12286 = load i32, i32* %12285, align 4
  %12287 = zext i32 %12286 to i64
  store i64 %12287, i64* %RCX.i4260.pre-phi, align 8
  %12288 = add i64 %12282, -160
  %12289 = add i64 %12206, 39
  store i64 %12289, i64* %3, align 8
  %12290 = inttoptr i64 %12288 to i32*
  %12291 = load i32, i32* %12290, align 4
  %12292 = sub i32 %12286, %12291
  %12293 = zext i32 %12292 to i64
  store i64 %12293, i64* %RCX.i4260.pre-phi, align 8
  %12294 = icmp ult i32 %12286, %12291
  %12295 = zext i1 %12294 to i8
  store i8 %12295, i8* %32, align 1
  %12296 = and i32 %12292, 255
  %12297 = tail call i32 @llvm.ctpop.i32(i32 %12296)
  %12298 = trunc i32 %12297 to i8
  %12299 = and i8 %12298, 1
  %12300 = xor i8 %12299, 1
  store i8 %12300, i8* %39, align 1
  %12301 = xor i32 %12291, %12286
  %12302 = xor i32 %12301, %12292
  %12303 = lshr i32 %12302, 4
  %12304 = trunc i32 %12303 to i8
  %12305 = and i8 %12304, 1
  store i8 %12305, i8* %45, align 1
  %12306 = icmp eq i32 %12292, 0
  %12307 = zext i1 %12306 to i8
  store i8 %12307, i8* %48, align 1
  %12308 = lshr i32 %12292, 31
  %12309 = trunc i32 %12308 to i8
  store i8 %12309, i8* %51, align 1
  %12310 = lshr i32 %12286, 31
  %12311 = lshr i32 %12291, 31
  %12312 = xor i32 %12311, %12310
  %12313 = xor i32 %12308, %12310
  %12314 = add nuw nsw i32 %12313, %12312
  %12315 = icmp eq i32 %12314, 2
  %12316 = zext i1 %12315 to i8
  store i8 %12316, i8* %57, align 1
  %12317 = add i64 %12282, -76
  %12318 = add i64 %12206, 42
  store i64 %12318, i64* %3, align 8
  %12319 = inttoptr i64 %12317 to i32*
  %12320 = load i32, i32* %12319, align 4
  %12321 = add i32 %12320, %12292
  %12322 = zext i32 %12321 to i64
  store i64 %12322, i64* %RCX.i4260.pre-phi, align 8
  %12323 = icmp ult i32 %12321, %12292
  %12324 = icmp ult i32 %12321, %12320
  %12325 = or i1 %12323, %12324
  %12326 = zext i1 %12325 to i8
  store i8 %12326, i8* %32, align 1
  %12327 = and i32 %12321, 255
  %12328 = tail call i32 @llvm.ctpop.i32(i32 %12327)
  %12329 = trunc i32 %12328 to i8
  %12330 = and i8 %12329, 1
  %12331 = xor i8 %12330, 1
  store i8 %12331, i8* %39, align 1
  %12332 = xor i32 %12320, %12292
  %12333 = xor i32 %12332, %12321
  %12334 = lshr i32 %12333, 4
  %12335 = trunc i32 %12334 to i8
  %12336 = and i8 %12335, 1
  store i8 %12336, i8* %45, align 1
  %12337 = icmp eq i32 %12321, 0
  %12338 = zext i1 %12337 to i8
  store i8 %12338, i8* %48, align 1
  %12339 = lshr i32 %12321, 31
  %12340 = trunc i32 %12339 to i8
  store i8 %12340, i8* %51, align 1
  %12341 = lshr i32 %12320, 31
  %12342 = xor i32 %12339, %12308
  %12343 = xor i32 %12339, %12341
  %12344 = add nuw nsw i32 %12342, %12343
  %12345 = icmp eq i32 %12344, 2
  %12346 = zext i1 %12345 to i8
  store i8 %12346, i8* %57, align 1
  %12347 = sext i32 %12321 to i64
  store i64 %12347, i64* %RSI.i739, align 8
  %12348 = shl nsw i64 %12347, 2
  %12349 = add i64 %12281, %12348
  %12350 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %12351 = add i64 %12206, 48
  store i64 %12351, i64* %3, align 8
  %12352 = inttoptr i64 %12349 to i32*
  store i32 %12350, i32* %12352, align 4
  %12353 = load i64, i64* %RBP.i, align 8
  %12354 = add i64 %12353, -104
  %12355 = load i64, i64* %3, align 8
  %12356 = add i64 %12355, 3
  store i64 %12356, i64* %3, align 8
  %12357 = inttoptr i64 %12354 to i32*
  %12358 = load i32, i32* %12357, align 4
  %12359 = zext i32 %12358 to i64
  store i64 %12359, i64* %RAX.i3587.phi.trans.insert, align 8
  %12360 = add i64 %12353, -80
  %12361 = add i64 %12355, 6
  store i64 %12361, i64* %3, align 8
  %12362 = inttoptr i64 %12360 to i32*
  %12363 = load i32, i32* %12362, align 4
  %12364 = sub i32 %12358, %12363
  %12365 = icmp ult i32 %12358, %12363
  %12366 = zext i1 %12365 to i8
  store i8 %12366, i8* %32, align 1
  %12367 = and i32 %12364, 255
  %12368 = tail call i32 @llvm.ctpop.i32(i32 %12367)
  %12369 = trunc i32 %12368 to i8
  %12370 = and i8 %12369, 1
  %12371 = xor i8 %12370, 1
  store i8 %12371, i8* %39, align 1
  %12372 = xor i32 %12363, %12358
  %12373 = xor i32 %12372, %12364
  %12374 = lshr i32 %12373, 4
  %12375 = trunc i32 %12374 to i8
  %12376 = and i8 %12375, 1
  store i8 %12376, i8* %45, align 1
  %12377 = icmp eq i32 %12364, 0
  %12378 = zext i1 %12377 to i8
  store i8 %12378, i8* %48, align 1
  %12379 = lshr i32 %12364, 31
  %12380 = trunc i32 %12379 to i8
  store i8 %12380, i8* %51, align 1
  %12381 = lshr i32 %12358, 31
  %12382 = lshr i32 %12363, 31
  %12383 = xor i32 %12382, %12381
  %12384 = xor i32 %12379, %12381
  %12385 = add nuw nsw i32 %12384, %12383
  %12386 = icmp eq i32 %12385, 2
  %12387 = zext i1 %12386 to i8
  store i8 %12387, i8* %57, align 1
  %12388 = icmp ne i8 %12380, 0
  %12389 = xor i1 %12388, %12386
  %.v579 = select i1 %12389, i64 12, i64 36
  %12390 = add i64 %12355, %.v579
  store i64 %12390, i64* %3, align 8
  br i1 %12389, label %block_421fa4, label %block_.L_421fbc

block_421fa4:                                     ; preds = %routine_shll__cl___esi.exit2694
  %12391 = add i64 %12353, -96
  %12392 = add i64 %12390, 3
  store i64 %12392, i64* %3, align 8
  %12393 = inttoptr i64 %12391 to i32*
  %12394 = load i32, i32* %12393, align 4
  %12395 = zext i32 %12394 to i64
  store i64 %12395, i64* %RAX.i3587.phi.trans.insert, align 8
  %12396 = add i64 %12353, -168
  %12397 = add i64 %12390, 9
  store i64 %12397, i64* %3, align 8
  %12398 = inttoptr i64 %12396 to i32*
  store i32 %12394, i32* %12398, align 4
  %12399 = load i64, i64* %RBP.i, align 8
  %12400 = add i64 %12399, -100
  %12401 = load i64, i64* %3, align 8
  %12402 = add i64 %12401, 3
  store i64 %12402, i64* %3, align 8
  %12403 = inttoptr i64 %12400 to i32*
  %12404 = load i32, i32* %12403, align 4
  %12405 = zext i32 %12404 to i64
  store i64 %12405, i64* %RAX.i3587.phi.trans.insert, align 8
  %12406 = add i64 %12399, -172
  %12407 = add i64 %12401, 9
  store i64 %12407, i64* %3, align 8
  %12408 = inttoptr i64 %12406 to i32*
  store i32 %12404, i32* %12408, align 4
  %12409 = load i64, i64* %RBP.i, align 8
  %12410 = add i64 %12409, -104
  %12411 = load i64, i64* %3, align 8
  %12412 = add i64 %12411, 3
  store i64 %12412, i64* %3, align 8
  %12413 = inttoptr i64 %12410 to i32*
  %12414 = load i32, i32* %12413, align 4
  %12415 = zext i32 %12414 to i64
  store i64 %12415, i64* %RAX.i3587.phi.trans.insert, align 8
  %12416 = add i64 %12409, -80
  %12417 = add i64 %12411, 6
  store i64 %12417, i64* %3, align 8
  %12418 = inttoptr i64 %12416 to i32*
  store i32 %12414, i32* %12418, align 4
  %.pre320 = load i64, i64* %3, align 8
  br label %block_.L_421fbc

block_.L_421fbc:                                  ; preds = %routine_shll__cl___esi.exit2694, %block_421fa4
  %12419 = phi i64 [ %12390, %routine_shll__cl___esi.exit2694 ], [ %.pre320, %block_421fa4 ]
  %12420 = add i64 %12419, 5
  store i64 %12420, i64* %3, align 8
  br label %block_.L_421fc1

block_.L_421fc1:                                  ; preds = %block_421e8e, %block_.L_421fbc
  %12421 = phi i64 [ %11888, %block_421e8e ], [ %12420, %block_.L_421fbc ]
  %MEMORY.56 = phi %struct.Memory* [ %11704, %block_421e8e ], [ %call2_421f60, %block_.L_421fbc ]
  %12422 = add i64 %12421, 5
  store i64 %12422, i64* %3, align 8
  %.pre321 = load i64, i64* %RBP.i, align 8
  br label %block_.L_421fc6

block_.L_421fc6:                                  ; preds = %block_421e75, %block_421e32, %block_.L_421fc1
  %12423 = phi i64 [ %11664, %block_421e32 ], [ %11738, %block_421e75 ], [ %12422, %block_.L_421fc1 ]
  %12424 = phi i64 [ %11632, %block_421e32 ], [ %11706, %block_421e75 ], [ %.pre321, %block_.L_421fc1 ]
  %MEMORY.57 = phi %struct.Memory* [ %11630, %block_421e32 ], [ %11704, %block_421e75 ], [ %MEMORY.56, %block_.L_421fc1 ]
  %12425 = add i64 %12424, -184
  %12426 = add i64 %12423, 6
  store i64 %12426, i64* %3, align 8
  %12427 = inttoptr i64 %12425 to i32*
  %12428 = load i32, i32* %12427, align 4
  %12429 = zext i32 %12428 to i64
  store i64 %12429, i64* %RAX.i3587.phi.trans.insert, align 8
  %12430 = add i64 %12424, -176
  %12431 = add i64 %12423, 12
  store i64 %12431, i64* %3, align 8
  %12432 = inttoptr i64 %12430 to i32*
  %12433 = load i32, i32* %12432, align 4
  %12434 = sub i32 %12428, %12433
  %12435 = zext i32 %12434 to i64
  store i64 %12435, i64* %RAX.i3587.phi.trans.insert, align 8
  %12436 = icmp ult i32 %12428, %12433
  %12437 = zext i1 %12436 to i8
  store i8 %12437, i8* %32, align 1
  %12438 = and i32 %12434, 255
  %12439 = tail call i32 @llvm.ctpop.i32(i32 %12438)
  %12440 = trunc i32 %12439 to i8
  %12441 = and i8 %12440, 1
  %12442 = xor i8 %12441, 1
  store i8 %12442, i8* %39, align 1
  %12443 = xor i32 %12433, %12428
  %12444 = xor i32 %12443, %12434
  %12445 = lshr i32 %12444, 4
  %12446 = trunc i32 %12445 to i8
  %12447 = and i8 %12446, 1
  store i8 %12447, i8* %45, align 1
  %12448 = icmp eq i32 %12434, 0
  %12449 = zext i1 %12448 to i8
  store i8 %12449, i8* %48, align 1
  %12450 = lshr i32 %12434, 31
  %12451 = trunc i32 %12450 to i8
  store i8 %12451, i8* %51, align 1
  %12452 = lshr i32 %12428, 31
  %12453 = lshr i32 %12433, 31
  %12454 = xor i32 %12453, %12452
  %12455 = xor i32 %12450, %12452
  %12456 = add nuw nsw i32 %12455, %12454
  %12457 = icmp eq i32 %12456, 2
  %12458 = zext i1 %12457 to i8
  store i8 %12458, i8* %57, align 1
  %12459 = add i64 %12424, -96
  %12460 = add i64 %12423, 15
  store i64 %12460, i64* %3, align 8
  %12461 = inttoptr i64 %12459 to i32*
  store i32 %12434, i32* %12461, align 4
  %12462 = load i64, i64* %RBP.i, align 8
  %12463 = add i64 %12462, -180
  %12464 = load i64, i64* %3, align 8
  %12465 = add i64 %12464, 6
  store i64 %12465, i64* %3, align 8
  %12466 = inttoptr i64 %12463 to i32*
  %12467 = load i32, i32* %12466, align 4
  %12468 = zext i32 %12467 to i64
  store i64 %12468, i64* %RAX.i3587.phi.trans.insert, align 8
  %12469 = add i64 %12462, -100
  %12470 = add i64 %12464, 9
  store i64 %12470, i64* %3, align 8
  %12471 = inttoptr i64 %12469 to i32*
  store i32 %12467, i32* %12471, align 4
  %12472 = load i64, i64* %RBP.i, align 8
  %12473 = add i64 %12472, -96
  %12474 = load i64, i64* %3, align 8
  %12475 = add i64 %12474, 3
  store i64 %12475, i64* %3, align 8
  %12476 = inttoptr i64 %12473 to i32*
  %12477 = load i32, i32* %12476, align 4
  %12478 = zext i32 %12477 to i64
  store i64 %12478, i64* %RAX.i3587.phi.trans.insert, align 8
  %12479 = add i64 %12472, -160
  %12480 = add i64 %12474, 9
  store i64 %12480, i64* %3, align 8
  %12481 = inttoptr i64 %12479 to i32*
  %12482 = load i32, i32* %12481, align 4
  %12483 = sub i32 %12477, %12482
  %12484 = zext i32 %12483 to i64
  store i64 %12484, i64* %RAX.i3587.phi.trans.insert, align 8
  %12485 = icmp ult i32 %12477, %12482
  %12486 = zext i1 %12485 to i8
  store i8 %12486, i8* %32, align 1
  %12487 = and i32 %12483, 255
  %12488 = tail call i32 @llvm.ctpop.i32(i32 %12487)
  %12489 = trunc i32 %12488 to i8
  %12490 = and i8 %12489, 1
  %12491 = xor i8 %12490, 1
  store i8 %12491, i8* %39, align 1
  %12492 = xor i32 %12482, %12477
  %12493 = xor i32 %12492, %12483
  %12494 = lshr i32 %12493, 4
  %12495 = trunc i32 %12494 to i8
  %12496 = and i8 %12495, 1
  store i8 %12496, i8* %45, align 1
  %12497 = icmp eq i32 %12483, 0
  %12498 = zext i1 %12497 to i8
  store i8 %12498, i8* %48, align 1
  %12499 = lshr i32 %12483, 31
  %12500 = trunc i32 %12499 to i8
  store i8 %12500, i8* %51, align 1
  %12501 = lshr i32 %12477, 31
  %12502 = lshr i32 %12482, 31
  %12503 = xor i32 %12502, %12501
  %12504 = xor i32 %12499, %12501
  %12505 = add nuw nsw i32 %12504, %12503
  %12506 = icmp eq i32 %12505, 2
  %12507 = zext i1 %12506 to i8
  store i8 %12507, i8* %57, align 1
  store i64 %12484, i64* %RDI.i1133, align 8
  %12508 = add i64 %12474, -135134
  %12509 = add i64 %12474, 16
  %12510 = load i64, i64* %6, align 8
  %12511 = add i64 %12510, -8
  %12512 = inttoptr i64 %12511 to i64*
  store i64 %12509, i64* %12512, align 8
  store i64 %12511, i64* %6, align 8
  store i64 %12508, i64* %3, align 8
  %12513 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.57)
  %12514 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %12515 = load i64, i64* %RBP.i, align 8
  %12516 = add i64 %12515, -76
  %12517 = load i64, i64* %3, align 8
  %12518 = add i64 %12517, 3
  store i64 %12518, i64* %3, align 8
  %12519 = inttoptr i64 %12516 to i32*
  %12520 = load i32, i32* %12519, align 4
  %12521 = sub i32 %12514, %12520
  %12522 = icmp ult i32 %12514, %12520
  %12523 = zext i1 %12522 to i8
  store i8 %12523, i8* %32, align 1
  %12524 = and i32 %12521, 255
  %12525 = tail call i32 @llvm.ctpop.i32(i32 %12524)
  %12526 = trunc i32 %12525 to i8
  %12527 = and i8 %12526, 1
  %12528 = xor i8 %12527, 1
  store i8 %12528, i8* %39, align 1
  %12529 = xor i32 %12520, %12514
  %12530 = xor i32 %12529, %12521
  %12531 = lshr i32 %12530, 4
  %12532 = trunc i32 %12531 to i8
  %12533 = and i8 %12532, 1
  store i8 %12533, i8* %45, align 1
  %12534 = icmp eq i32 %12521, 0
  %12535 = zext i1 %12534 to i8
  store i8 %12535, i8* %48, align 1
  %12536 = lshr i32 %12521, 31
  %12537 = trunc i32 %12536 to i8
  store i8 %12537, i8* %51, align 1
  %12538 = lshr i32 %12514, 31
  %12539 = lshr i32 %12520, 31
  %12540 = xor i32 %12539, %12538
  %12541 = xor i32 %12536, %12538
  %12542 = add nuw nsw i32 %12541, %12540
  %12543 = icmp eq i32 %12542, 2
  %12544 = zext i1 %12543 to i8
  store i8 %12544, i8* %57, align 1
  %12545 = icmp ne i8 %12537, 0
  %12546 = xor i1 %12545, %12543
  %.demorgan464 = or i1 %12534, %12546
  %.v573 = select i1 %.demorgan464, i64 9, i64 346
  %12547 = add i64 %12517, %.v573
  store i64 %12547, i64* %3, align 8
  br i1 %.demorgan464, label %block_421ff7, label %block_.L_422148

block_421ff7:                                     ; preds = %block_.L_421fc6
  %12548 = add i64 %12515, -100
  %12549 = add i64 %12547, 3
  store i64 %12549, i64* %3, align 8
  %12550 = inttoptr i64 %12548 to i32*
  %12551 = load i32, i32* %12550, align 4
  %12552 = zext i32 %12551 to i64
  store i64 %12552, i64* %RAX.i3587.phi.trans.insert, align 8
  %12553 = add i64 %12515, -164
  %12554 = add i64 %12547, 9
  store i64 %12554, i64* %3, align 8
  %12555 = inttoptr i64 %12553 to i32*
  %12556 = load i32, i32* %12555, align 4
  %12557 = sub i32 %12551, %12556
  %12558 = zext i32 %12557 to i64
  store i64 %12558, i64* %RAX.i3587.phi.trans.insert, align 8
  %12559 = icmp ult i32 %12551, %12556
  %12560 = zext i1 %12559 to i8
  store i8 %12560, i8* %32, align 1
  %12561 = and i32 %12557, 255
  %12562 = tail call i32 @llvm.ctpop.i32(i32 %12561)
  %12563 = trunc i32 %12562 to i8
  %12564 = and i8 %12563, 1
  %12565 = xor i8 %12564, 1
  store i8 %12565, i8* %39, align 1
  %12566 = xor i32 %12556, %12551
  %12567 = xor i32 %12566, %12557
  %12568 = lshr i32 %12567, 4
  %12569 = trunc i32 %12568 to i8
  %12570 = and i8 %12569, 1
  store i8 %12570, i8* %45, align 1
  %12571 = icmp eq i32 %12557, 0
  %12572 = zext i1 %12571 to i8
  store i8 %12572, i8* %48, align 1
  %12573 = lshr i32 %12557, 31
  %12574 = trunc i32 %12573 to i8
  store i8 %12574, i8* %51, align 1
  %12575 = lshr i32 %12551, 31
  %12576 = lshr i32 %12556, 31
  %12577 = xor i32 %12576, %12575
  %12578 = xor i32 %12573, %12575
  %12579 = add nuw nsw i32 %12578, %12577
  %12580 = icmp eq i32 %12579, 2
  %12581 = zext i1 %12580 to i8
  store i8 %12581, i8* %57, align 1
  store i64 %12558, i64* %RDI.i1133, align 8
  %12582 = add i64 %12547, -135159
  %12583 = add i64 %12547, 16
  %12584 = load i64, i64* %6, align 8
  %12585 = add i64 %12584, -8
  %12586 = inttoptr i64 %12585 to i64*
  store i64 %12583, i64* %12586, align 8
  store i64 %12585, i64* %6, align 8
  store i64 %12582, i64* %3, align 8
  %12587 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %12513)
  %12588 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %12589 = load i64, i64* %RBP.i, align 8
  %12590 = add i64 %12589, -76
  %12591 = load i64, i64* %3, align 8
  %12592 = add i64 %12591, 3
  store i64 %12592, i64* %3, align 8
  %12593 = inttoptr i64 %12590 to i32*
  %12594 = load i32, i32* %12593, align 4
  %12595 = sub i32 %12588, %12594
  %12596 = icmp ult i32 %12588, %12594
  %12597 = zext i1 %12596 to i8
  store i8 %12597, i8* %32, align 1
  %12598 = and i32 %12595, 255
  %12599 = tail call i32 @llvm.ctpop.i32(i32 %12598)
  %12600 = trunc i32 %12599 to i8
  %12601 = and i8 %12600, 1
  %12602 = xor i8 %12601, 1
  store i8 %12602, i8* %39, align 1
  %12603 = xor i32 %12594, %12588
  %12604 = xor i32 %12603, %12595
  %12605 = lshr i32 %12604, 4
  %12606 = trunc i32 %12605 to i8
  %12607 = and i8 %12606, 1
  store i8 %12607, i8* %45, align 1
  %12608 = icmp eq i32 %12595, 0
  %12609 = zext i1 %12608 to i8
  store i8 %12609, i8* %48, align 1
  %12610 = lshr i32 %12595, 31
  %12611 = trunc i32 %12610 to i8
  store i8 %12611, i8* %51, align 1
  %12612 = lshr i32 %12588, 31
  %12613 = lshr i32 %12594, 31
  %12614 = xor i32 %12613, %12612
  %12615 = xor i32 %12610, %12612
  %12616 = add nuw nsw i32 %12615, %12614
  %12617 = icmp eq i32 %12616, 2
  %12618 = zext i1 %12617 to i8
  store i8 %12618, i8* %57, align 1
  %12619 = icmp ne i8 %12611, 0
  %12620 = xor i1 %12619, %12617
  %.demorgan465 = or i1 %12608, %12620
  %.v574 = select i1 %.demorgan465, i64 9, i64 321
  %12621 = add i64 %12591, %.v574
  store i64 %12621, i64* %3, align 8
  br i1 %.demorgan465, label %block_422010, label %block_.L_422148

block_422010:                                     ; preds = %block_421ff7
  %12622 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %12622, i64* %RAX.i3587.phi.trans.insert, align 8
  %12623 = add i64 %12589, -100
  %12624 = add i64 %12621, 11
  store i64 %12624, i64* %3, align 8
  %12625 = inttoptr i64 %12623 to i32*
  %12626 = load i32, i32* %12625, align 4
  %12627 = zext i32 %12626 to i64
  store i64 %12627, i64* %RCX.i4260.pre-phi, align 8
  %12628 = add i64 %12589, -164
  %12629 = add i64 %12621, 17
  store i64 %12629, i64* %3, align 8
  %12630 = inttoptr i64 %12628 to i32*
  %12631 = load i32, i32* %12630, align 4
  %12632 = sub i32 %12626, %12631
  %12633 = zext i32 %12632 to i64
  store i64 %12633, i64* %RCX.i4260.pre-phi, align 8
  %12634 = icmp ult i32 %12626, %12631
  %12635 = zext i1 %12634 to i8
  store i8 %12635, i8* %32, align 1
  %12636 = and i32 %12632, 255
  %12637 = tail call i32 @llvm.ctpop.i32(i32 %12636)
  %12638 = trunc i32 %12637 to i8
  %12639 = and i8 %12638, 1
  %12640 = xor i8 %12639, 1
  store i8 %12640, i8* %39, align 1
  %12641 = xor i32 %12631, %12626
  %12642 = xor i32 %12641, %12632
  %12643 = lshr i32 %12642, 4
  %12644 = trunc i32 %12643 to i8
  %12645 = and i8 %12644, 1
  store i8 %12645, i8* %45, align 1
  %12646 = icmp eq i32 %12632, 0
  %12647 = zext i1 %12646 to i8
  store i8 %12647, i8* %48, align 1
  %12648 = lshr i32 %12632, 31
  %12649 = trunc i32 %12648 to i8
  store i8 %12649, i8* %51, align 1
  %12650 = lshr i32 %12626, 31
  %12651 = lshr i32 %12631, 31
  %12652 = xor i32 %12651, %12650
  %12653 = xor i32 %12648, %12650
  %12654 = add nuw nsw i32 %12653, %12652
  %12655 = icmp eq i32 %12654, 2
  %12656 = zext i1 %12655 to i8
  store i8 %12656, i8* %57, align 1
  %12657 = add i64 %12621, 20
  store i64 %12657, i64* %3, align 8
  %12658 = load i32, i32* %12593, align 4
  %12659 = add i32 %12658, %12632
  %12660 = zext i32 %12659 to i64
  store i64 %12660, i64* %RCX.i4260.pre-phi, align 8
  %12661 = icmp ult i32 %12659, %12632
  %12662 = icmp ult i32 %12659, %12658
  %12663 = or i1 %12661, %12662
  %12664 = zext i1 %12663 to i8
  store i8 %12664, i8* %32, align 1
  %12665 = and i32 %12659, 255
  %12666 = tail call i32 @llvm.ctpop.i32(i32 %12665)
  %12667 = trunc i32 %12666 to i8
  %12668 = and i8 %12667, 1
  %12669 = xor i8 %12668, 1
  store i8 %12669, i8* %39, align 1
  %12670 = xor i32 %12658, %12632
  %12671 = xor i32 %12670, %12659
  %12672 = lshr i32 %12671, 4
  %12673 = trunc i32 %12672 to i8
  %12674 = and i8 %12673, 1
  store i8 %12674, i8* %45, align 1
  %12675 = icmp eq i32 %12659, 0
  %12676 = zext i1 %12675 to i8
  store i8 %12676, i8* %48, align 1
  %12677 = lshr i32 %12659, 31
  %12678 = trunc i32 %12677 to i8
  store i8 %12678, i8* %51, align 1
  %12679 = lshr i32 %12658, 31
  %12680 = xor i32 %12677, %12648
  %12681 = xor i32 %12677, %12679
  %12682 = add nuw nsw i32 %12680, %12681
  %12683 = icmp eq i32 %12682, 2
  %12684 = zext i1 %12683 to i8
  store i8 %12684, i8* %57, align 1
  %12685 = sext i32 %12659 to i64
  store i64 %12685, i64* %RDX.i4317.pre-phi, align 8
  %12686 = shl nsw i64 %12685, 3
  %12687 = add i64 %12622, %12686
  %12688 = add i64 %12621, 27
  store i64 %12688, i64* %3, align 8
  %12689 = inttoptr i64 %12687 to i64*
  %12690 = load i64, i64* %12689, align 8
  store i64 %12690, i64* %RAX.i3587.phi.trans.insert, align 8
  %12691 = add i64 %12589, -96
  %12692 = add i64 %12621, 30
  store i64 %12692, i64* %3, align 8
  %12693 = inttoptr i64 %12691 to i32*
  %12694 = load i32, i32* %12693, align 4
  %12695 = zext i32 %12694 to i64
  store i64 %12695, i64* %RCX.i4260.pre-phi, align 8
  %12696 = load i64, i64* %RBP.i, align 8
  %12697 = add i64 %12696, -160
  %12698 = add i64 %12621, 36
  store i64 %12698, i64* %3, align 8
  %12699 = inttoptr i64 %12697 to i32*
  %12700 = load i32, i32* %12699, align 4
  %12701 = sub i32 %12694, %12700
  %12702 = zext i32 %12701 to i64
  store i64 %12702, i64* %RCX.i4260.pre-phi, align 8
  %12703 = icmp ult i32 %12694, %12700
  %12704 = zext i1 %12703 to i8
  store i8 %12704, i8* %32, align 1
  %12705 = and i32 %12701, 255
  %12706 = tail call i32 @llvm.ctpop.i32(i32 %12705)
  %12707 = trunc i32 %12706 to i8
  %12708 = and i8 %12707, 1
  %12709 = xor i8 %12708, 1
  store i8 %12709, i8* %39, align 1
  %12710 = xor i32 %12700, %12694
  %12711 = xor i32 %12710, %12701
  %12712 = lshr i32 %12711, 4
  %12713 = trunc i32 %12712 to i8
  %12714 = and i8 %12713, 1
  store i8 %12714, i8* %45, align 1
  %12715 = icmp eq i32 %12701, 0
  %12716 = zext i1 %12715 to i8
  store i8 %12716, i8* %48, align 1
  %12717 = lshr i32 %12701, 31
  %12718 = trunc i32 %12717 to i8
  store i8 %12718, i8* %51, align 1
  %12719 = lshr i32 %12694, 31
  %12720 = lshr i32 %12700, 31
  %12721 = xor i32 %12720, %12719
  %12722 = xor i32 %12717, %12719
  %12723 = add nuw nsw i32 %12722, %12721
  %12724 = icmp eq i32 %12723, 2
  %12725 = zext i1 %12724 to i8
  store i8 %12725, i8* %57, align 1
  %12726 = add i64 %12696, -76
  %12727 = add i64 %12621, 39
  store i64 %12727, i64* %3, align 8
  %12728 = inttoptr i64 %12726 to i32*
  %12729 = load i32, i32* %12728, align 4
  %12730 = add i32 %12729, %12701
  %12731 = zext i32 %12730 to i64
  store i64 %12731, i64* %RCX.i4260.pre-phi, align 8
  %12732 = icmp ult i32 %12730, %12701
  %12733 = icmp ult i32 %12730, %12729
  %12734 = or i1 %12732, %12733
  %12735 = zext i1 %12734 to i8
  store i8 %12735, i8* %32, align 1
  %12736 = and i32 %12730, 255
  %12737 = tail call i32 @llvm.ctpop.i32(i32 %12736)
  %12738 = trunc i32 %12737 to i8
  %12739 = and i8 %12738, 1
  %12740 = xor i8 %12739, 1
  store i8 %12740, i8* %39, align 1
  %12741 = xor i32 %12729, %12701
  %12742 = xor i32 %12741, %12730
  %12743 = lshr i32 %12742, 4
  %12744 = trunc i32 %12743 to i8
  %12745 = and i8 %12744, 1
  store i8 %12745, i8* %45, align 1
  %12746 = icmp eq i32 %12730, 0
  %12747 = zext i1 %12746 to i8
  store i8 %12747, i8* %48, align 1
  %12748 = lshr i32 %12730, 31
  %12749 = trunc i32 %12748 to i8
  store i8 %12749, i8* %51, align 1
  %12750 = lshr i32 %12729, 31
  %12751 = xor i32 %12748, %12717
  %12752 = xor i32 %12748, %12750
  %12753 = add nuw nsw i32 %12751, %12752
  %12754 = icmp eq i32 %12753, 2
  %12755 = zext i1 %12754 to i8
  store i8 %12755, i8* %57, align 1
  %12756 = sext i32 %12730 to i64
  store i64 %12756, i64* %RDX.i4317.pre-phi, align 8
  %12757 = shl nsw i64 %12756, 2
  %12758 = add i64 %12690, %12757
  %12759 = add i64 %12621, 46
  store i64 %12759, i64* %3, align 8
  %12760 = inttoptr i64 %12758 to i32*
  %12761 = load i32, i32* %12760, align 4
  store i8 0, i8* %32, align 1
  %12762 = and i32 %12761, 255
  %12763 = tail call i32 @llvm.ctpop.i32(i32 %12762)
  %12764 = trunc i32 %12763 to i8
  %12765 = and i8 %12764, 1
  %12766 = xor i8 %12765, 1
  store i8 %12766, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %12767 = icmp eq i32 %12761, 0
  %12768 = zext i1 %12767 to i8
  store i8 %12768, i8* %48, align 1
  %12769 = lshr i32 %12761, 31
  %12770 = trunc i32 %12769 to i8
  store i8 %12770, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v575 = select i1 %12767, i64 52, i64 307
  %12771 = add i64 %12621, %.v575
  store i64 %12771, i64* %3, align 8
  br i1 %12767, label %block_422044, label %block_.L_422143

block_422044:                                     ; preds = %block_422010
  %12772 = load i64, i64* %RBP.i, align 8
  %12773 = add i64 %12772, -132
  %12774 = add i64 %12771, 6
  store i64 %12774, i64* %3, align 8
  %12775 = inttoptr i64 %12773 to i32*
  %12776 = load i32, i32* %12775, align 4
  %12777 = zext i32 %12776 to i64
  store i64 %12777, i64* %RAX.i3587.phi.trans.insert, align 8
  %12778 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %12778, i64* %RCX.i4260.pre-phi, align 8
  %12779 = add i64 %12772, -96
  %12780 = add i64 %12771, 17
  store i64 %12780, i64* %3, align 8
  %12781 = inttoptr i64 %12779 to i32*
  %12782 = load i32, i32* %12781, align 4
  %12783 = zext i32 %12782 to i64
  store i64 %12783, i64* %RDX.i4317.pre-phi, align 8
  %12784 = add i64 %12772, -136
  %12785 = add i64 %12771, 23
  store i64 %12785, i64* %3, align 8
  %12786 = inttoptr i64 %12784 to i32*
  %12787 = load i32, i32* %12786, align 4
  %12788 = zext i32 %12787 to i64
  store i64 %12788, i64* %RSI.i739, align 8
  %12789 = add i64 %12772, -360
  %12790 = add i64 %12771, 30
  store i64 %12790, i64* %3, align 8
  %12791 = inttoptr i64 %12789 to i64*
  store i64 %12778, i64* %12791, align 8
  %12792 = load i32, i32* %ESI.i1656, align 4
  %12793 = zext i32 %12792 to i64
  %12794 = load i64, i64* %3, align 8
  store i64 %12793, i64* %RCX.i4260.pre-phi, align 8
  %12795 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %12796 = add i64 %12794, 4
  store i64 %12796, i64* %3, align 8
  %12797 = trunc i32 %12792 to i5
  switch i5 %12797, label %12804 [
    i5 0, label %routine_shll__cl___edx.exit2465
    i5 1, label %12798
  ]

; <label>:12798:                                  ; preds = %block_422044
  %12799 = trunc i64 %12795 to i32
  %12800 = shl i32 %12799, 1
  %12801 = icmp slt i32 %12799, 0
  %12802 = icmp slt i32 %12800, 0
  %12803 = xor i1 %12801, %12802
  br label %12814

; <label>:12804:                                  ; preds = %block_422044
  %12805 = and i32 %12792, 31
  %12806 = zext i32 %12805 to i64
  %12807 = add nuw nsw i64 %12806, 4294967295
  %12808 = and i64 %12795, 4294967295
  %12809 = and i64 %12807, 4294967295
  %12810 = shl i64 %12808, %12809
  %12811 = trunc i64 %12810 to i32
  %12812 = icmp slt i32 %12811, 0
  %12813 = shl i32 %12811, 1
  br label %12814

; <label>:12814:                                  ; preds = %12804, %12798
  %12815 = phi i1 [ %12801, %12798 ], [ %12812, %12804 ]
  %12816 = phi i1 [ %12803, %12798 ], [ false, %12804 ]
  %12817 = phi i32 [ %12800, %12798 ], [ %12813, %12804 ]
  %12818 = zext i32 %12817 to i64
  store i64 %12818, i64* %RDX.i4317.pre-phi, align 8
  %12819 = zext i1 %12815 to i8
  store i8 %12819, i8* %32, align 1
  %12820 = and i32 %12817, 254
  %12821 = tail call i32 @llvm.ctpop.i32(i32 %12820)
  %12822 = trunc i32 %12821 to i8
  %12823 = and i8 %12822, 1
  %12824 = xor i8 %12823, 1
  store i8 %12824, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %12825 = icmp eq i32 %12817, 0
  %12826 = zext i1 %12825 to i8
  store i8 %12826, i8* %48, align 1
  %12827 = lshr i32 %12817, 31
  %12828 = trunc i32 %12827 to i8
  store i8 %12828, i8* %51, align 1
  %12829 = zext i1 %12816 to i8
  store i8 %12829, i8* %57, align 1
  br label %routine_shll__cl___edx.exit2465

routine_shll__cl___edx.exit2465:                  ; preds = %12814, %block_422044
  %12830 = phi i64 [ %12818, %12814 ], [ %12795, %block_422044 ]
  %12831 = load i64, i64* %RBP.i, align 8
  %12832 = add i64 %12831, -152
  %12833 = add i64 %12794, 10
  store i64 %12833, i64* %3, align 8
  %12834 = trunc i64 %12830 to i32
  %12835 = inttoptr i64 %12832 to i32*
  %12836 = load i32, i32* %12835, align 4
  %12837 = sub i32 %12834, %12836
  %12838 = zext i32 %12837 to i64
  store i64 %12838, i64* %RDX.i4317.pre-phi, align 8
  %12839 = icmp ult i32 %12834, %12836
  %12840 = zext i1 %12839 to i8
  store i8 %12840, i8* %32, align 1
  %12841 = and i32 %12837, 255
  %12842 = tail call i32 @llvm.ctpop.i32(i32 %12841)
  %12843 = trunc i32 %12842 to i8
  %12844 = and i8 %12843, 1
  %12845 = xor i8 %12844, 1
  store i8 %12845, i8* %39, align 1
  %12846 = xor i32 %12836, %12834
  %12847 = xor i32 %12846, %12837
  %12848 = lshr i32 %12847, 4
  %12849 = trunc i32 %12848 to i8
  %12850 = and i8 %12849, 1
  store i8 %12850, i8* %45, align 1
  %12851 = icmp eq i32 %12837, 0
  %12852 = zext i1 %12851 to i8
  store i8 %12852, i8* %48, align 1
  %12853 = lshr i32 %12837, 31
  %12854 = trunc i32 %12853 to i8
  store i8 %12854, i8* %51, align 1
  %12855 = lshr i32 %12834, 31
  %12856 = lshr i32 %12836, 31
  %12857 = xor i32 %12856, %12855
  %12858 = xor i32 %12853, %12855
  %12859 = add nuw nsw i32 %12858, %12857
  %12860 = icmp eq i32 %12859, 2
  %12861 = zext i1 %12860 to i8
  store i8 %12861, i8* %57, align 1
  %12862 = sext i32 %12837 to i64
  store i64 %12862, i64* %RDI.i1133, align 8
  %12863 = add i64 %12831, -360
  %12864 = add i64 %12794, 20
  store i64 %12864, i64* %3, align 8
  %12865 = inttoptr i64 %12863 to i64*
  %12866 = load i64, i64* %12865, align 8
  store i64 %12866, i64* %R8.i5602, align 8
  %12867 = shl nsw i64 %12862, 2
  %12868 = add i64 %12867, %12866
  %12869 = add i64 %12794, 24
  store i64 %12869, i64* %3, align 8
  %12870 = inttoptr i64 %12868 to i32*
  %12871 = load i32, i32* %12870, align 4
  %12872 = zext i32 %12871 to i64
  store i64 %12872, i64* %RDX.i4317.pre-phi, align 8
  %12873 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %12873, i64* %RDI.i1133, align 8
  %12874 = add i64 %12831, -100
  %12875 = add i64 %12794, 35
  store i64 %12875, i64* %3, align 8
  %12876 = inttoptr i64 %12874 to i32*
  %12877 = load i32, i32* %12876, align 4
  %12878 = zext i32 %12877 to i64
  store i64 %12878, i64* %RSI.i739, align 8
  %12879 = add i64 %12831, -136
  %12880 = add i64 %12794, 41
  store i64 %12880, i64* %3, align 8
  %12881 = inttoptr i64 %12879 to i32*
  %12882 = load i32, i32* %12881, align 4
  %12883 = zext i32 %12882 to i64
  store i64 %12883, i64* %RCX.i4260.pre-phi, align 8
  %12884 = add i64 %12794, 43
  store i64 %12884, i64* %3, align 8
  %12885 = trunc i32 %12882 to i5
  switch i5 %12885, label %12891 [
    i5 0, label %routine_shll__cl___esi.exit2440
    i5 1, label %12886
  ]

; <label>:12886:                                  ; preds = %routine_shll__cl___edx.exit2465
  %12887 = shl i32 %12877, 1
  %12888 = icmp slt i32 %12877, 0
  %12889 = icmp slt i32 %12887, 0
  %12890 = xor i1 %12888, %12889
  br label %12900

; <label>:12891:                                  ; preds = %routine_shll__cl___edx.exit2465
  %12892 = and i32 %12882, 31
  %12893 = zext i32 %12892 to i64
  %12894 = add nuw nsw i64 %12893, 4294967295
  %12895 = and i64 %12894, 4294967295
  %12896 = shl i64 %12878, %12895
  %12897 = trunc i64 %12896 to i32
  %12898 = icmp slt i32 %12897, 0
  %12899 = shl i32 %12897, 1
  br label %12900

; <label>:12900:                                  ; preds = %12891, %12886
  %12901 = phi i1 [ %12888, %12886 ], [ %12898, %12891 ]
  %12902 = phi i1 [ %12890, %12886 ], [ false, %12891 ]
  %12903 = phi i32 [ %12887, %12886 ], [ %12899, %12891 ]
  %12904 = zext i32 %12903 to i64
  store i64 %12904, i64* %RSI.i739, align 8
  %12905 = zext i1 %12901 to i8
  store i8 %12905, i8* %32, align 1
  %12906 = and i32 %12903, 254
  %12907 = tail call i32 @llvm.ctpop.i32(i32 %12906)
  %12908 = trunc i32 %12907 to i8
  %12909 = and i8 %12908, 1
  %12910 = xor i8 %12909, 1
  store i8 %12910, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %12911 = icmp eq i32 %12903, 0
  %12912 = zext i1 %12911 to i8
  store i8 %12912, i8* %48, align 1
  %12913 = lshr i32 %12903, 31
  %12914 = trunc i32 %12913 to i8
  store i8 %12914, i8* %51, align 1
  %12915 = zext i1 %12902 to i8
  store i8 %12915, i8* %57, align 1
  br label %routine_shll__cl___esi.exit2440

routine_shll__cl___esi.exit2440:                  ; preds = %12900, %routine_shll__cl___edx.exit2465
  %12916 = phi i32 [ %12903, %12900 ], [ %12877, %routine_shll__cl___edx.exit2465 ]
  %12917 = add i64 %12831, -156
  %12918 = add i64 %12794, 49
  store i64 %12918, i64* %3, align 8
  %12919 = inttoptr i64 %12917 to i32*
  %12920 = load i32, i32* %12919, align 4
  %12921 = sub i32 %12916, %12920
  %12922 = zext i32 %12921 to i64
  store i64 %12922, i64* %RSI.i739, align 8
  %12923 = icmp ult i32 %12916, %12920
  %12924 = zext i1 %12923 to i8
  store i8 %12924, i8* %32, align 1
  %12925 = and i32 %12921, 255
  %12926 = tail call i32 @llvm.ctpop.i32(i32 %12925)
  %12927 = trunc i32 %12926 to i8
  %12928 = and i8 %12927, 1
  %12929 = xor i8 %12928, 1
  store i8 %12929, i8* %39, align 1
  %12930 = xor i32 %12920, %12916
  %12931 = xor i32 %12930, %12921
  %12932 = lshr i32 %12931, 4
  %12933 = trunc i32 %12932 to i8
  %12934 = and i8 %12933, 1
  store i8 %12934, i8* %45, align 1
  %12935 = icmp eq i32 %12921, 0
  %12936 = zext i1 %12935 to i8
  store i8 %12936, i8* %48, align 1
  %12937 = lshr i32 %12921, 31
  %12938 = trunc i32 %12937 to i8
  store i8 %12938, i8* %51, align 1
  %12939 = lshr i32 %12916, 31
  %12940 = lshr i32 %12920, 31
  %12941 = xor i32 %12940, %12939
  %12942 = xor i32 %12937, %12939
  %12943 = add nuw nsw i32 %12942, %12941
  %12944 = icmp eq i32 %12943, 2
  %12945 = zext i1 %12944 to i8
  store i8 %12945, i8* %57, align 1
  %12946 = sext i32 %12921 to i64
  store i64 %12946, i64* %R9.i5580, align 8
  %12947 = shl nsw i64 %12946, 2
  %12948 = add i64 %12873, %12947
  %12949 = add i64 %12794, 56
  store i64 %12949, i64* %3, align 8
  %12950 = inttoptr i64 %12948 to i32*
  %12951 = load i32, i32* %12950, align 4
  %12952 = add i32 %12951, %12871
  %12953 = zext i32 %12952 to i64
  store i64 %12953, i64* %RDX.i4317.pre-phi, align 8
  %12954 = icmp ult i32 %12952, %12871
  %12955 = icmp ult i32 %12952, %12951
  %12956 = or i1 %12954, %12955
  %12957 = zext i1 %12956 to i8
  store i8 %12957, i8* %32, align 1
  %12958 = and i32 %12952, 255
  %12959 = tail call i32 @llvm.ctpop.i32(i32 %12958)
  %12960 = trunc i32 %12959 to i8
  %12961 = and i8 %12960, 1
  %12962 = xor i8 %12961, 1
  store i8 %12962, i8* %39, align 1
  %12963 = xor i32 %12951, %12871
  %12964 = xor i32 %12963, %12952
  %12965 = lshr i32 %12964, 4
  %12966 = trunc i32 %12965 to i8
  %12967 = and i8 %12966, 1
  store i8 %12967, i8* %45, align 1
  %12968 = icmp eq i32 %12952, 0
  %12969 = zext i1 %12968 to i8
  store i8 %12969, i8* %48, align 1
  %12970 = lshr i32 %12952, 31
  %12971 = trunc i32 %12970 to i8
  store i8 %12971, i8* %51, align 1
  %12972 = lshr i32 %12871, 31
  %12973 = lshr i32 %12951, 31
  %12974 = xor i32 %12970, %12972
  %12975 = xor i32 %12970, %12973
  %12976 = add nuw nsw i32 %12974, %12975
  %12977 = icmp eq i32 %12976, 2
  %12978 = zext i1 %12977 to i8
  store i8 %12978, i8* %57, align 1
  %12979 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %12980 = shl i64 %12979, 32
  %12981 = ashr exact i64 %12980, 32
  %12982 = sext i32 %12952 to i64
  %12983 = mul nsw i64 %12982, %12981
  %12984 = shl i64 %12983, 32
  %12985 = ashr i64 %12984, 47
  %12986 = lshr i64 %12985, 1
  %12987 = trunc i64 %12985 to i8
  %12988 = and i8 %12987, 1
  %12989 = trunc i64 %12986 to i32
  %12990 = and i64 %12986, 4294967295
  store i64 %12990, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %12988, i8* %32, align 1
  %12991 = and i32 %12989, 255
  %12992 = tail call i32 @llvm.ctpop.i32(i32 %12991)
  %12993 = trunc i32 %12992 to i8
  %12994 = and i8 %12993, 1
  %12995 = xor i8 %12994, 1
  store i8 %12995, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %12996 = icmp eq i32 %12989, 0
  %12997 = zext i1 %12996 to i8
  store i8 %12997, i8* %48, align 1
  %12998 = lshr i64 %12985, 32
  %12999 = trunc i64 %12998 to i8
  %13000 = and i8 %12999, 1
  store i8 %13000, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %13001 = load i64, i64* %RBP.i, align 8
  %13002 = add i64 %13001, -104
  %13003 = trunc i64 %12986 to i32
  %13004 = add i64 %12794, 65
  store i64 %13004, i64* %3, align 8
  %13005 = inttoptr i64 %13002 to i32*
  store i32 %13003, i32* %13005, align 4
  %13006 = load i64, i64* %RBP.i, align 8
  %13007 = add i64 %13006, -128
  %13008 = load i64, i64* %3, align 8
  %13009 = add i64 %13008, 4
  store i64 %13009, i64* %3, align 8
  %13010 = inttoptr i64 %13007 to i64*
  %13011 = load i64, i64* %13010, align 8
  store i64 %13011, i64* %RDI.i1133, align 8
  %13012 = add i64 %13006, -32
  %13013 = add i64 %13008, 8
  store i64 %13013, i64* %3, align 8
  %13014 = inttoptr i64 %13012 to i64*
  %13015 = load i64, i64* %13014, align 8
  store i64 %13015, i64* %RSI.i739, align 8
  %13016 = add i64 %13006, -112
  %13017 = add i64 %13008, 12
  store i64 %13017, i64* %3, align 8
  %13018 = inttoptr i64 %13016 to i64*
  %13019 = load i64, i64* %13018, align 8
  store i64 %13019, i64* %RDX.i4317.pre-phi, align 8
  %13020 = add i64 %13006, -140
  %13021 = add i64 %13008, 18
  store i64 %13021, i64* %3, align 8
  %13022 = inttoptr i64 %13020 to i32*
  %13023 = load i32, i32* %13022, align 4
  %13024 = zext i32 %13023 to i64
  store i64 %13024, i64* %RCX.i4260.pre-phi, align 8
  %13025 = add i64 %13006, -144
  %13026 = add i64 %13008, 25
  store i64 %13026, i64* %3, align 8
  %13027 = inttoptr i64 %13025 to i32*
  %13028 = load i32, i32* %13027, align 4
  %13029 = zext i32 %13028 to i64
  store i64 %13029, i64* %R8.i5602, align 8
  %13030 = add i64 %13006, -148
  %13031 = add i64 %13008, 32
  store i64 %13031, i64* %3, align 8
  %13032 = inttoptr i64 %13030 to i32*
  %13033 = load i32, i32* %13032, align 4
  %13034 = zext i32 %13033 to i64
  store i64 %13034, i64* %R9.i5580, align 8
  %13035 = add i64 %13006, -104
  %13036 = add i64 %13008, 35
  store i64 %13036, i64* %3, align 8
  %13037 = inttoptr i64 %13035 to i32*
  %13038 = load i32, i32* %13037, align 4
  %13039 = zext i32 %13038 to i64
  store i64 %13039, i64* %RAX.i3587.phi.trans.insert, align 8
  %13040 = add i64 %13006, -80
  %13041 = add i64 %13008, 39
  store i64 %13041, i64* %3, align 8
  %13042 = inttoptr i64 %13040 to i32*
  %13043 = load i32, i32* %13042, align 4
  %13044 = zext i32 %13043 to i64
  store i64 %13044, i64* %68, align 8
  %13045 = add i64 %13006, -96
  %13046 = add i64 %13008, 43
  store i64 %13046, i64* %3, align 8
  %13047 = inttoptr i64 %13045 to i32*
  %13048 = load i32, i32* %13047, align 4
  %13049 = zext i32 %13048 to i64
  store i64 %13049, i64* %R11.i, align 8
  %13050 = add i64 %13006, -100
  %13051 = add i64 %13008, 46
  store i64 %13051, i64* %3, align 8
  %13052 = inttoptr i64 %13050 to i32*
  %13053 = load i32, i32* %13052, align 4
  %13054 = zext i32 %13053 to i64
  store i64 %13054, i64* %RBX.i615, align 8
  %13055 = load i32*, i32** %2119, align 8
  %13056 = add i64 %13008, 49
  store i64 %13056, i64* %3, align 8
  store i32 %13038, i32* %13055, align 4
  %13057 = load i64, i64* %6, align 8
  %13058 = add i64 %13057, 8
  %13059 = load i32, i32* %R10D.i761, align 4
  %13060 = load i64, i64* %3, align 8
  %13061 = add i64 %13060, 5
  store i64 %13061, i64* %3, align 8
  %13062 = inttoptr i64 %13058 to i32*
  store i32 %13059, i32* %13062, align 4
  %13063 = load i64, i64* %6, align 8
  %13064 = add i64 %13063, 16
  %13065 = load i32, i32* %R11D.i5540, align 4
  %13066 = load i64, i64* %3, align 8
  %13067 = add i64 %13066, 5
  store i64 %13067, i64* %3, align 8
  %13068 = inttoptr i64 %13064 to i32*
  store i32 %13065, i32* %13068, align 4
  %13069 = load i64, i64* %6, align 8
  %13070 = add i64 %13069, 24
  %13071 = load i32, i32* %EBX.i5525, align 4
  %13072 = load i64, i64* %3, align 8
  %13073 = add i64 %13072, 4
  store i64 %13073, i64* %3, align 8
  %13074 = inttoptr i64 %13070 to i32*
  store i32 %13071, i32* %13074, align 4
  %13075 = load i64, i64* %3, align 8
  %13076 = add i64 %13075, -7218
  %13077 = add i64 %13075, 5
  %13078 = load i64, i64* %6, align 8
  %13079 = add i64 %13078, -8
  %13080 = inttoptr i64 %13079 to i64*
  store i64 %13077, i64* %13080, align 8
  store i64 %13079, i64* %6, align 8
  store i64 %13076, i64* %3, align 8
  %call2_4220e2 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %13076, %struct.Memory* %12587)
  %13081 = load i64, i64* %RBP.i, align 8
  %13082 = add i64 %13081, -104
  %13083 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %13084 = load i64, i64* %3, align 8
  %13085 = add i64 %13084, 3
  store i64 %13085, i64* %3, align 8
  %13086 = inttoptr i64 %13082 to i32*
  store i32 %13083, i32* %13086, align 4
  %13087 = load i64, i64* %RBP.i, align 8
  %13088 = add i64 %13087, -104
  %13089 = load i64, i64* %3, align 8
  %13090 = add i64 %13089, 3
  store i64 %13090, i64* %3, align 8
  %13091 = inttoptr i64 %13088 to i32*
  %13092 = load i32, i32* %13091, align 4
  %13093 = zext i32 %13092 to i64
  store i64 %13093, i64* %RAX.i3587.phi.trans.insert, align 8
  %13094 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %13094, i64* %RDX.i4317.pre-phi, align 8
  %13095 = add i64 %13087, -100
  %13096 = add i64 %13089, 14
  store i64 %13096, i64* %3, align 8
  %13097 = inttoptr i64 %13095 to i32*
  %13098 = load i32, i32* %13097, align 4
  %13099 = zext i32 %13098 to i64
  store i64 %13099, i64* %RCX.i4260.pre-phi, align 8
  %13100 = add i64 %13087, -164
  %13101 = add i64 %13089, 20
  store i64 %13101, i64* %3, align 8
  %13102 = inttoptr i64 %13100 to i32*
  %13103 = load i32, i32* %13102, align 4
  %13104 = sub i32 %13098, %13103
  %13105 = zext i32 %13104 to i64
  store i64 %13105, i64* %RCX.i4260.pre-phi, align 8
  %13106 = icmp ult i32 %13098, %13103
  %13107 = zext i1 %13106 to i8
  store i8 %13107, i8* %32, align 1
  %13108 = and i32 %13104, 255
  %13109 = tail call i32 @llvm.ctpop.i32(i32 %13108)
  %13110 = trunc i32 %13109 to i8
  %13111 = and i8 %13110, 1
  %13112 = xor i8 %13111, 1
  store i8 %13112, i8* %39, align 1
  %13113 = xor i32 %13103, %13098
  %13114 = xor i32 %13113, %13104
  %13115 = lshr i32 %13114, 4
  %13116 = trunc i32 %13115 to i8
  %13117 = and i8 %13116, 1
  store i8 %13117, i8* %45, align 1
  %13118 = icmp eq i32 %13104, 0
  %13119 = zext i1 %13118 to i8
  store i8 %13119, i8* %48, align 1
  %13120 = lshr i32 %13104, 31
  %13121 = trunc i32 %13120 to i8
  store i8 %13121, i8* %51, align 1
  %13122 = lshr i32 %13098, 31
  %13123 = lshr i32 %13103, 31
  %13124 = xor i32 %13123, %13122
  %13125 = xor i32 %13120, %13122
  %13126 = add nuw nsw i32 %13125, %13124
  %13127 = icmp eq i32 %13126, 2
  %13128 = zext i1 %13127 to i8
  store i8 %13128, i8* %57, align 1
  %13129 = add i64 %13087, -76
  %13130 = add i64 %13089, 23
  store i64 %13130, i64* %3, align 8
  %13131 = inttoptr i64 %13129 to i32*
  %13132 = load i32, i32* %13131, align 4
  %13133 = add i32 %13132, %13104
  %13134 = zext i32 %13133 to i64
  store i64 %13134, i64* %RCX.i4260.pre-phi, align 8
  %13135 = icmp ult i32 %13133, %13104
  %13136 = icmp ult i32 %13133, %13132
  %13137 = or i1 %13135, %13136
  %13138 = zext i1 %13137 to i8
  store i8 %13138, i8* %32, align 1
  %13139 = and i32 %13133, 255
  %13140 = tail call i32 @llvm.ctpop.i32(i32 %13139)
  %13141 = trunc i32 %13140 to i8
  %13142 = and i8 %13141, 1
  %13143 = xor i8 %13142, 1
  store i8 %13143, i8* %39, align 1
  %13144 = xor i32 %13132, %13104
  %13145 = xor i32 %13144, %13133
  %13146 = lshr i32 %13145, 4
  %13147 = trunc i32 %13146 to i8
  %13148 = and i8 %13147, 1
  store i8 %13148, i8* %45, align 1
  %13149 = icmp eq i32 %13133, 0
  %13150 = zext i1 %13149 to i8
  store i8 %13150, i8* %48, align 1
  %13151 = lshr i32 %13133, 31
  %13152 = trunc i32 %13151 to i8
  store i8 %13152, i8* %51, align 1
  %13153 = lshr i32 %13132, 31
  %13154 = xor i32 %13151, %13120
  %13155 = xor i32 %13151, %13153
  %13156 = add nuw nsw i32 %13154, %13155
  %13157 = icmp eq i32 %13156, 2
  %13158 = zext i1 %13157 to i8
  store i8 %13158, i8* %57, align 1
  %13159 = sext i32 %13133 to i64
  store i64 %13159, i64* %RSI.i739, align 8
  %13160 = shl nsw i64 %13159, 3
  %13161 = add i64 %13094, %13160
  %13162 = add i64 %13089, 30
  store i64 %13162, i64* %3, align 8
  %13163 = inttoptr i64 %13161 to i64*
  %13164 = load i64, i64* %13163, align 8
  store i64 %13164, i64* %RDX.i4317.pre-phi, align 8
  %13165 = load i64, i64* %RBP.i, align 8
  %13166 = add i64 %13165, -96
  %13167 = add i64 %13089, 33
  store i64 %13167, i64* %3, align 8
  %13168 = inttoptr i64 %13166 to i32*
  %13169 = load i32, i32* %13168, align 4
  %13170 = zext i32 %13169 to i64
  store i64 %13170, i64* %RCX.i4260.pre-phi, align 8
  %13171 = add i64 %13165, -160
  %13172 = add i64 %13089, 39
  store i64 %13172, i64* %3, align 8
  %13173 = inttoptr i64 %13171 to i32*
  %13174 = load i32, i32* %13173, align 4
  %13175 = sub i32 %13169, %13174
  %13176 = zext i32 %13175 to i64
  store i64 %13176, i64* %RCX.i4260.pre-phi, align 8
  %13177 = icmp ult i32 %13169, %13174
  %13178 = zext i1 %13177 to i8
  store i8 %13178, i8* %32, align 1
  %13179 = and i32 %13175, 255
  %13180 = tail call i32 @llvm.ctpop.i32(i32 %13179)
  %13181 = trunc i32 %13180 to i8
  %13182 = and i8 %13181, 1
  %13183 = xor i8 %13182, 1
  store i8 %13183, i8* %39, align 1
  %13184 = xor i32 %13174, %13169
  %13185 = xor i32 %13184, %13175
  %13186 = lshr i32 %13185, 4
  %13187 = trunc i32 %13186 to i8
  %13188 = and i8 %13187, 1
  store i8 %13188, i8* %45, align 1
  %13189 = icmp eq i32 %13175, 0
  %13190 = zext i1 %13189 to i8
  store i8 %13190, i8* %48, align 1
  %13191 = lshr i32 %13175, 31
  %13192 = trunc i32 %13191 to i8
  store i8 %13192, i8* %51, align 1
  %13193 = lshr i32 %13169, 31
  %13194 = lshr i32 %13174, 31
  %13195 = xor i32 %13194, %13193
  %13196 = xor i32 %13191, %13193
  %13197 = add nuw nsw i32 %13196, %13195
  %13198 = icmp eq i32 %13197, 2
  %13199 = zext i1 %13198 to i8
  store i8 %13199, i8* %57, align 1
  %13200 = add i64 %13165, -76
  %13201 = add i64 %13089, 42
  store i64 %13201, i64* %3, align 8
  %13202 = inttoptr i64 %13200 to i32*
  %13203 = load i32, i32* %13202, align 4
  %13204 = add i32 %13203, %13175
  %13205 = zext i32 %13204 to i64
  store i64 %13205, i64* %RCX.i4260.pre-phi, align 8
  %13206 = icmp ult i32 %13204, %13175
  %13207 = icmp ult i32 %13204, %13203
  %13208 = or i1 %13206, %13207
  %13209 = zext i1 %13208 to i8
  store i8 %13209, i8* %32, align 1
  %13210 = and i32 %13204, 255
  %13211 = tail call i32 @llvm.ctpop.i32(i32 %13210)
  %13212 = trunc i32 %13211 to i8
  %13213 = and i8 %13212, 1
  %13214 = xor i8 %13213, 1
  store i8 %13214, i8* %39, align 1
  %13215 = xor i32 %13203, %13175
  %13216 = xor i32 %13215, %13204
  %13217 = lshr i32 %13216, 4
  %13218 = trunc i32 %13217 to i8
  %13219 = and i8 %13218, 1
  store i8 %13219, i8* %45, align 1
  %13220 = icmp eq i32 %13204, 0
  %13221 = zext i1 %13220 to i8
  store i8 %13221, i8* %48, align 1
  %13222 = lshr i32 %13204, 31
  %13223 = trunc i32 %13222 to i8
  store i8 %13223, i8* %51, align 1
  %13224 = lshr i32 %13203, 31
  %13225 = xor i32 %13222, %13191
  %13226 = xor i32 %13222, %13224
  %13227 = add nuw nsw i32 %13225, %13226
  %13228 = icmp eq i32 %13227, 2
  %13229 = zext i1 %13228 to i8
  store i8 %13229, i8* %57, align 1
  %13230 = sext i32 %13204 to i64
  store i64 %13230, i64* %RSI.i739, align 8
  %13231 = shl nsw i64 %13230, 2
  %13232 = add i64 %13164, %13231
  %13233 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %13234 = add i64 %13089, 48
  store i64 %13234, i64* %3, align 8
  %13235 = inttoptr i64 %13232 to i32*
  store i32 %13233, i32* %13235, align 4
  %13236 = load i64, i64* %RBP.i, align 8
  %13237 = add i64 %13236, -104
  %13238 = load i64, i64* %3, align 8
  %13239 = add i64 %13238, 3
  store i64 %13239, i64* %3, align 8
  %13240 = inttoptr i64 %13237 to i32*
  %13241 = load i32, i32* %13240, align 4
  %13242 = zext i32 %13241 to i64
  store i64 %13242, i64* %RAX.i3587.phi.trans.insert, align 8
  %13243 = add i64 %13236, -80
  %13244 = add i64 %13238, 6
  store i64 %13244, i64* %3, align 8
  %13245 = inttoptr i64 %13243 to i32*
  %13246 = load i32, i32* %13245, align 4
  %13247 = sub i32 %13241, %13246
  %13248 = icmp ult i32 %13241, %13246
  %13249 = zext i1 %13248 to i8
  store i8 %13249, i8* %32, align 1
  %13250 = and i32 %13247, 255
  %13251 = tail call i32 @llvm.ctpop.i32(i32 %13250)
  %13252 = trunc i32 %13251 to i8
  %13253 = and i8 %13252, 1
  %13254 = xor i8 %13253, 1
  store i8 %13254, i8* %39, align 1
  %13255 = xor i32 %13246, %13241
  %13256 = xor i32 %13255, %13247
  %13257 = lshr i32 %13256, 4
  %13258 = trunc i32 %13257 to i8
  %13259 = and i8 %13258, 1
  store i8 %13259, i8* %45, align 1
  %13260 = icmp eq i32 %13247, 0
  %13261 = zext i1 %13260 to i8
  store i8 %13261, i8* %48, align 1
  %13262 = lshr i32 %13247, 31
  %13263 = trunc i32 %13262 to i8
  store i8 %13263, i8* %51, align 1
  %13264 = lshr i32 %13241, 31
  %13265 = lshr i32 %13246, 31
  %13266 = xor i32 %13265, %13264
  %13267 = xor i32 %13262, %13264
  %13268 = add nuw nsw i32 %13267, %13266
  %13269 = icmp eq i32 %13268, 2
  %13270 = zext i1 %13269 to i8
  store i8 %13270, i8* %57, align 1
  %13271 = icmp ne i8 %13263, 0
  %13272 = xor i1 %13271, %13269
  %.v576 = select i1 %13272, i64 12, i64 36
  %13273 = add i64 %13238, %.v576
  store i64 %13273, i64* %3, align 8
  br i1 %13272, label %block_422126, label %block_.L_42213e

block_422126:                                     ; preds = %routine_shll__cl___esi.exit2440
  %13274 = add i64 %13236, -96
  %13275 = add i64 %13273, 3
  store i64 %13275, i64* %3, align 8
  %13276 = inttoptr i64 %13274 to i32*
  %13277 = load i32, i32* %13276, align 4
  %13278 = zext i32 %13277 to i64
  store i64 %13278, i64* %RAX.i3587.phi.trans.insert, align 8
  %13279 = add i64 %13236, -168
  %13280 = add i64 %13273, 9
  store i64 %13280, i64* %3, align 8
  %13281 = inttoptr i64 %13279 to i32*
  store i32 %13277, i32* %13281, align 4
  %13282 = load i64, i64* %RBP.i, align 8
  %13283 = add i64 %13282, -100
  %13284 = load i64, i64* %3, align 8
  %13285 = add i64 %13284, 3
  store i64 %13285, i64* %3, align 8
  %13286 = inttoptr i64 %13283 to i32*
  %13287 = load i32, i32* %13286, align 4
  %13288 = zext i32 %13287 to i64
  store i64 %13288, i64* %RAX.i3587.phi.trans.insert, align 8
  %13289 = add i64 %13282, -172
  %13290 = add i64 %13284, 9
  store i64 %13290, i64* %3, align 8
  %13291 = inttoptr i64 %13289 to i32*
  store i32 %13287, i32* %13291, align 4
  %13292 = load i64, i64* %RBP.i, align 8
  %13293 = add i64 %13292, -104
  %13294 = load i64, i64* %3, align 8
  %13295 = add i64 %13294, 3
  store i64 %13295, i64* %3, align 8
  %13296 = inttoptr i64 %13293 to i32*
  %13297 = load i32, i32* %13296, align 4
  %13298 = zext i32 %13297 to i64
  store i64 %13298, i64* %RAX.i3587.phi.trans.insert, align 8
  %13299 = add i64 %13292, -80
  %13300 = add i64 %13294, 6
  store i64 %13300, i64* %3, align 8
  %13301 = inttoptr i64 %13299 to i32*
  store i32 %13297, i32* %13301, align 4
  %.pre322 = load i64, i64* %3, align 8
  br label %block_.L_42213e

block_.L_42213e:                                  ; preds = %routine_shll__cl___esi.exit2440, %block_422126
  %13302 = phi i64 [ %13273, %routine_shll__cl___esi.exit2440 ], [ %.pre322, %block_422126 ]
  %13303 = add i64 %13302, 5
  store i64 %13303, i64* %3, align 8
  br label %block_.L_422143

block_.L_422143:                                  ; preds = %block_422010, %block_.L_42213e
  %13304 = phi i64 [ %12771, %block_422010 ], [ %13303, %block_.L_42213e ]
  %MEMORY.59 = phi %struct.Memory* [ %12587, %block_422010 ], [ %call2_4220e2, %block_.L_42213e ]
  %13305 = add i64 %13304, 5
  store i64 %13305, i64* %3, align 8
  %.pre323 = load i64, i64* %RBP.i, align 8
  br label %block_.L_422148

block_.L_422148:                                  ; preds = %block_421ff7, %block_.L_421fc6, %block_.L_422143
  %13306 = phi i64 [ %12515, %block_.L_421fc6 ], [ %12589, %block_421ff7 ], [ %.pre323, %block_.L_422143 ]
  %13307 = phi i64 [ %12547, %block_.L_421fc6 ], [ %12621, %block_421ff7 ], [ %13305, %block_.L_422143 ]
  %MEMORY.60 = phi %struct.Memory* [ %12513, %block_.L_421fc6 ], [ %12587, %block_421ff7 ], [ %MEMORY.59, %block_.L_422143 ]
  %13308 = add i64 %13306, -188
  %13309 = add i64 %13307, 11
  store i64 %13309, i64* %3, align 8
  %13310 = inttoptr i64 %13308 to i32*
  %13311 = load i32, i32* %13310, align 4
  %13312 = add i32 %13311, 1
  %13313 = zext i32 %13312 to i64
  store i64 %13313, i64* %RAX.i3587.phi.trans.insert, align 8
  %13314 = icmp eq i32 %13311, -1
  %13315 = icmp eq i32 %13312, 0
  %13316 = or i1 %13314, %13315
  %13317 = zext i1 %13316 to i8
  store i8 %13317, i8* %32, align 1
  %13318 = and i32 %13312, 255
  %13319 = tail call i32 @llvm.ctpop.i32(i32 %13318)
  %13320 = trunc i32 %13319 to i8
  %13321 = and i8 %13320, 1
  %13322 = xor i8 %13321, 1
  store i8 %13322, i8* %39, align 1
  %13323 = xor i32 %13312, %13311
  %13324 = lshr i32 %13323, 4
  %13325 = trunc i32 %13324 to i8
  %13326 = and i8 %13325, 1
  store i8 %13326, i8* %45, align 1
  %13327 = zext i1 %13315 to i8
  store i8 %13327, i8* %48, align 1
  %13328 = lshr i32 %13312, 31
  %13329 = trunc i32 %13328 to i8
  store i8 %13329, i8* %51, align 1
  %13330 = lshr i32 %13311, 31
  %13331 = xor i32 %13328, %13330
  %13332 = add nuw nsw i32 %13331, %13328
  %13333 = icmp eq i32 %13332, 2
  %13334 = zext i1 %13333 to i8
  store i8 %13334, i8* %57, align 1
  %13335 = add i64 %13307, 20
  store i64 %13335, i64* %3, align 8
  store i32 %13312, i32* %13310, align 4
  %13336 = load i64, i64* %3, align 8
  %13337 = add i64 %13336, -849
  store i64 %13337, i64* %3, align 8
  br label %block_.L_421e0b

block_.L_422161:                                  ; preds = %routine_idivl__esi.exit2832
  %13338 = add i64 %11508, 10
  store i64 %13338, i64* %3, align 8
  %13339 = inttoptr i64 %11509 to i32*
  store i32 1, i32* %13339, align 4
  %.pre324 = load i64, i64* %3, align 8
  br label %block_.L_42216b

block_.L_42216b:                                  ; preds = %block_.L_4224a8, %block_.L_422161
  %13340 = phi i64 [ %.pre324, %block_.L_422161 ], [ %15241, %block_.L_4224a8 ]
  %MEMORY.61 = phi %struct.Memory* [ %11480, %block_.L_422161 ], [ %MEMORY.67, %block_.L_4224a8 ]
  store i64 4, i64* %RAX.i3587.phi.trans.insert, align 8
  %13341 = load i64, i64* %RBP.i, align 8
  %13342 = add i64 %13341, -188
  %13343 = add i64 %13340, 11
  store i64 %13343, i64* %3, align 8
  %13344 = inttoptr i64 %13342 to i32*
  %13345 = load i32, i32* %13344, align 4
  %13346 = zext i32 %13345 to i64
  store i64 %13346, i64* %RCX.i4260.pre-phi, align 8
  %13347 = add i64 %13341, -76
  %13348 = add i64 %13340, 14
  store i64 %13348, i64* %3, align 8
  %13349 = inttoptr i64 %13347 to i32*
  %13350 = load i32, i32* %13349, align 4
  %13351 = zext i32 %13350 to i64
  store i64 %13351, i64* %RDX.i4317.pre-phi, align 8
  %13352 = add i64 %13341, -364
  %13353 = add i64 %13340, 20
  store i64 %13353, i64* %3, align 8
  %13354 = inttoptr i64 %13352 to i32*
  store i32 4, i32* %13354, align 4
  %13355 = load i32, i32* %EDX.i1187, align 4
  %13356 = zext i32 %13355 to i64
  %13357 = load i64, i64* %3, align 8
  store i64 %13356, i64* %RAX.i3587.phi.trans.insert, align 8
  %13358 = sext i32 %13355 to i64
  %13359 = lshr i64 %13358, 32
  store i64 %13359, i64* %11435, align 8
  %13360 = load i64, i64* %RBP.i, align 8
  %13361 = add i64 %13360, -364
  %13362 = add i64 %13357, 9
  store i64 %13362, i64* %3, align 8
  %13363 = inttoptr i64 %13361 to i32*
  %13364 = load i32, i32* %13363, align 4
  %13365 = zext i32 %13364 to i64
  store i64 %13365, i64* %RSI.i739, align 8
  %13366 = add i64 %13357, 11
  store i64 %13366, i64* %3, align 8
  %13367 = sext i32 %13364 to i64
  %13368 = shl nuw i64 %13359, 32
  %13369 = or i64 %13368, %13356
  %13370 = sdiv i64 %13369, %13367
  %13371 = shl i64 %13370, 32
  %13372 = ashr exact i64 %13371, 32
  %13373 = icmp eq i64 %13370, %13372
  br i1 %13373, label %13376, label %13374

; <label>:13374:                                  ; preds = %block_.L_42216b
  %13375 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %13366, %struct.Memory* %MEMORY.61)
  %.pre325 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %.pre326 = load i64, i64* %3, align 8
  %.pre327 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2277

; <label>:13376:                                  ; preds = %block_.L_42216b
  %13377 = srem i64 %13369, %13367
  %13378 = and i64 %13370, 4294967295
  store i64 %13378, i64* %RAX.i3587.phi.trans.insert, align 8
  %13379 = and i64 %13377, 4294967295
  store i64 %13379, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %13380 = trunc i64 %13370 to i32
  br label %routine_idivl__esi.exit2277

routine_idivl__esi.exit2277:                      ; preds = %13376, %13374
  %13381 = phi i64 [ %.pre327, %13374 ], [ %13360, %13376 ]
  %13382 = phi i64 [ %.pre326, %13374 ], [ %13366, %13376 ]
  %13383 = phi i32 [ %.pre325, %13374 ], [ %13380, %13376 ]
  %13384 = phi %struct.Memory* [ %13375, %13374 ], [ %MEMORY.61, %13376 ]
  %13385 = load i32, i32* %ECX.i1211, align 4
  %13386 = sub i32 %13385, %13383
  %13387 = icmp ult i32 %13385, %13383
  %13388 = zext i1 %13387 to i8
  store i8 %13388, i8* %32, align 1
  %13389 = and i32 %13386, 255
  %13390 = tail call i32 @llvm.ctpop.i32(i32 %13389)
  %13391 = trunc i32 %13390 to i8
  %13392 = and i8 %13391, 1
  %13393 = xor i8 %13392, 1
  store i8 %13393, i8* %39, align 1
  %13394 = xor i32 %13383, %13385
  %13395 = xor i32 %13394, %13386
  %13396 = lshr i32 %13395, 4
  %13397 = trunc i32 %13396 to i8
  %13398 = and i8 %13397, 1
  store i8 %13398, i8* %45, align 1
  %13399 = icmp eq i32 %13386, 0
  %13400 = zext i1 %13399 to i8
  store i8 %13400, i8* %48, align 1
  %13401 = lshr i32 %13386, 31
  %13402 = trunc i32 %13401 to i8
  store i8 %13402, i8* %51, align 1
  %13403 = lshr i32 %13385, 31
  %13404 = lshr i32 %13383, 31
  %13405 = xor i32 %13404, %13403
  %13406 = xor i32 %13401, %13403
  %13407 = add nuw nsw i32 %13406, %13405
  %13408 = icmp eq i32 %13407, 2
  %13409 = zext i1 %13408 to i8
  store i8 %13409, i8* %57, align 1
  %13410 = icmp ne i8 %13402, 0
  %13411 = xor i1 %13410, %13408
  %.demorgan466 = or i1 %13399, %13411
  %.v485 = select i1 %.demorgan466, i64 8, i64 823
  %13412 = add i64 %13382, %.v485
  store i64 %13412, i64* %3, align 8
  br i1 %.demorgan466, label %block_422192, label %block_.L_4224c1

block_422192:                                     ; preds = %routine_idivl__esi.exit2277
  %13413 = add i64 %13381, -188
  %13414 = add i64 %13412, 6
  store i64 %13414, i64* %3, align 8
  %13415 = inttoptr i64 %13413 to i32*
  %13416 = load i32, i32* %13415, align 4
  %13417 = shl i32 %13416, 1
  %13418 = icmp eq i32 %13417, 0
  %13419 = zext i1 %13418 to i8
  %13420 = add i32 %13417, -1
  %13421 = zext i32 %13420 to i64
  store i64 %13421, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %13419, i8* %32, align 1
  %13422 = and i32 %13420, 255
  %13423 = tail call i32 @llvm.ctpop.i32(i32 %13422)
  %13424 = trunc i32 %13423 to i8
  %13425 = and i8 %13424, 1
  %13426 = xor i8 %13425, 1
  store i8 %13426, i8* %39, align 1
  %13427 = xor i32 %13420, %13417
  %13428 = lshr i32 %13427, 4
  %13429 = trunc i32 %13428 to i8
  %13430 = and i8 %13429, 1
  store i8 %13430, i8* %45, align 1
  store i8 0, i8* %48, align 1
  %13431 = lshr i32 %13420, 31
  %13432 = trunc i32 %13431 to i8
  store i8 %13432, i8* %51, align 1
  %13433 = lshr i32 %13416, 30
  %13434 = and i32 %13433, 1
  %13435 = xor i32 %13431, %13434
  %13436 = add nuw nsw i32 %13435, %13434
  %13437 = icmp eq i32 %13436, 2
  %13438 = zext i1 %13437 to i8
  store i8 %13438, i8* %57, align 1
  %13439 = add i64 %13381, -176
  %13440 = add i64 %13412, 17
  store i64 %13440, i64* %3, align 8
  %13441 = inttoptr i64 %13439 to i32*
  store i32 %13420, i32* %13441, align 4
  %13442 = load i64, i64* %RBP.i, align 8
  %13443 = add i64 %13442, -184
  %13444 = load i64, i64* %3, align 8
  %13445 = add i64 %13444, 6
  store i64 %13445, i64* %3, align 8
  %13446 = inttoptr i64 %13443 to i32*
  %13447 = load i32, i32* %13446, align 4
  %13448 = zext i32 %13447 to i64
  store i64 %13448, i64* %RAX.i3587.phi.trans.insert, align 8
  %13449 = add i64 %13442, -96
  %13450 = add i64 %13444, 9
  store i64 %13450, i64* %3, align 8
  %13451 = inttoptr i64 %13449 to i32*
  store i32 %13447, i32* %13451, align 4
  %13452 = load i64, i64* %RBP.i, align 8
  %13453 = add i64 %13452, -180
  %13454 = load i64, i64* %3, align 8
  %13455 = add i64 %13454, 6
  store i64 %13455, i64* %3, align 8
  %13456 = inttoptr i64 %13453 to i32*
  %13457 = load i32, i32* %13456, align 4
  %13458 = zext i32 %13457 to i64
  store i64 %13458, i64* %RAX.i3587.phi.trans.insert, align 8
  %13459 = add i64 %13452, -176
  %13460 = add i64 %13454, 12
  store i64 %13460, i64* %3, align 8
  %13461 = inttoptr i64 %13459 to i32*
  %13462 = load i32, i32* %13461, align 4
  %13463 = add i32 %13462, %13457
  %13464 = zext i32 %13463 to i64
  store i64 %13464, i64* %RAX.i3587.phi.trans.insert, align 8
  %13465 = icmp ult i32 %13463, %13457
  %13466 = icmp ult i32 %13463, %13462
  %13467 = or i1 %13465, %13466
  %13468 = zext i1 %13467 to i8
  store i8 %13468, i8* %32, align 1
  %13469 = and i32 %13463, 255
  %13470 = tail call i32 @llvm.ctpop.i32(i32 %13469)
  %13471 = trunc i32 %13470 to i8
  %13472 = and i8 %13471, 1
  %13473 = xor i8 %13472, 1
  store i8 %13473, i8* %39, align 1
  %13474 = xor i32 %13462, %13457
  %13475 = xor i32 %13474, %13463
  %13476 = lshr i32 %13475, 4
  %13477 = trunc i32 %13476 to i8
  %13478 = and i8 %13477, 1
  store i8 %13478, i8* %45, align 1
  %13479 = icmp eq i32 %13463, 0
  %13480 = zext i1 %13479 to i8
  store i8 %13480, i8* %48, align 1
  %13481 = lshr i32 %13463, 31
  %13482 = trunc i32 %13481 to i8
  store i8 %13482, i8* %51, align 1
  %13483 = lshr i32 %13457, 31
  %13484 = lshr i32 %13462, 31
  %13485 = xor i32 %13481, %13483
  %13486 = xor i32 %13481, %13484
  %13487 = add nuw nsw i32 %13485, %13486
  %13488 = icmp eq i32 %13487, 2
  %13489 = zext i1 %13488 to i8
  store i8 %13489, i8* %57, align 1
  %13490 = add i64 %13452, -100
  %13491 = add i64 %13454, 15
  store i64 %13491, i64* %3, align 8
  %13492 = inttoptr i64 %13490 to i32*
  store i32 %13463, i32* %13492, align 4
  %13493 = load i64, i64* %RBP.i, align 8
  %13494 = add i64 %13493, -96
  %13495 = load i64, i64* %3, align 8
  %13496 = add i64 %13495, 3
  store i64 %13496, i64* %3, align 8
  %13497 = inttoptr i64 %13494 to i32*
  %13498 = load i32, i32* %13497, align 4
  %13499 = zext i32 %13498 to i64
  store i64 %13499, i64* %RAX.i3587.phi.trans.insert, align 8
  %13500 = add i64 %13493, -160
  %13501 = add i64 %13495, 9
  store i64 %13501, i64* %3, align 8
  %13502 = inttoptr i64 %13500 to i32*
  %13503 = load i32, i32* %13502, align 4
  %13504 = sub i32 %13498, %13503
  %13505 = zext i32 %13504 to i64
  store i64 %13505, i64* %RAX.i3587.phi.trans.insert, align 8
  %13506 = icmp ult i32 %13498, %13503
  %13507 = zext i1 %13506 to i8
  store i8 %13507, i8* %32, align 1
  %13508 = and i32 %13504, 255
  %13509 = tail call i32 @llvm.ctpop.i32(i32 %13508)
  %13510 = trunc i32 %13509 to i8
  %13511 = and i8 %13510, 1
  %13512 = xor i8 %13511, 1
  store i8 %13512, i8* %39, align 1
  %13513 = xor i32 %13503, %13498
  %13514 = xor i32 %13513, %13504
  %13515 = lshr i32 %13514, 4
  %13516 = trunc i32 %13515 to i8
  %13517 = and i8 %13516, 1
  store i8 %13517, i8* %45, align 1
  %13518 = icmp eq i32 %13504, 0
  %13519 = zext i1 %13518 to i8
  store i8 %13519, i8* %48, align 1
  %13520 = lshr i32 %13504, 31
  %13521 = trunc i32 %13520 to i8
  store i8 %13521, i8* %51, align 1
  %13522 = lshr i32 %13498, 31
  %13523 = lshr i32 %13503, 31
  %13524 = xor i32 %13523, %13522
  %13525 = xor i32 %13520, %13522
  %13526 = add nuw nsw i32 %13525, %13524
  %13527 = icmp eq i32 %13526, 2
  %13528 = zext i1 %13527 to i8
  store i8 %13528, i8* %57, align 1
  store i64 %13505, i64* %RDI.i1133, align 8
  %13529 = add i64 %13495, -135612
  %13530 = add i64 %13495, 16
  %13531 = load i64, i64* %6, align 8
  %13532 = add i64 %13531, -8
  %13533 = inttoptr i64 %13532 to i64*
  store i64 %13530, i64* %13533, align 8
  store i64 %13532, i64* %6, align 8
  store i64 %13529, i64* %3, align 8
  %13534 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %13384)
  %13535 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %13536 = load i64, i64* %RBP.i, align 8
  %13537 = add i64 %13536, -76
  %13538 = load i64, i64* %3, align 8
  %13539 = add i64 %13538, 3
  store i64 %13539, i64* %3, align 8
  %13540 = inttoptr i64 %13537 to i32*
  %13541 = load i32, i32* %13540, align 4
  %13542 = sub i32 %13535, %13541
  %13543 = icmp ult i32 %13535, %13541
  %13544 = zext i1 %13543 to i8
  store i8 %13544, i8* %32, align 1
  %13545 = and i32 %13542, 255
  %13546 = tail call i32 @llvm.ctpop.i32(i32 %13545)
  %13547 = trunc i32 %13546 to i8
  %13548 = and i8 %13547, 1
  %13549 = xor i8 %13548, 1
  store i8 %13549, i8* %39, align 1
  %13550 = xor i32 %13541, %13535
  %13551 = xor i32 %13550, %13542
  %13552 = lshr i32 %13551, 4
  %13553 = trunc i32 %13552 to i8
  %13554 = and i8 %13553, 1
  store i8 %13554, i8* %45, align 1
  %13555 = icmp eq i32 %13542, 0
  %13556 = zext i1 %13555 to i8
  store i8 %13556, i8* %48, align 1
  %13557 = lshr i32 %13542, 31
  %13558 = trunc i32 %13557 to i8
  store i8 %13558, i8* %51, align 1
  %13559 = lshr i32 %13535, 31
  %13560 = lshr i32 %13541, 31
  %13561 = xor i32 %13560, %13559
  %13562 = xor i32 %13557, %13559
  %13563 = add nuw nsw i32 %13562, %13561
  %13564 = icmp eq i32 %13563, 2
  %13565 = zext i1 %13564 to i8
  store i8 %13565, i8* %57, align 1
  %13566 = icmp ne i8 %13558, 0
  %13567 = xor i1 %13566, %13564
  %.demorgan467 = or i1 %13555, %13567
  %.v564 = select i1 %.demorgan467, i64 9, i64 346
  %13568 = add i64 %13538, %.v564
  store i64 %13568, i64* %3, align 8
  br i1 %.demorgan467, label %block_4221d5, label %block_.L_422326

block_4221d5:                                     ; preds = %block_422192
  %13569 = add i64 %13536, -100
  %13570 = add i64 %13568, 3
  store i64 %13570, i64* %3, align 8
  %13571 = inttoptr i64 %13569 to i32*
  %13572 = load i32, i32* %13571, align 4
  %13573 = zext i32 %13572 to i64
  store i64 %13573, i64* %RAX.i3587.phi.trans.insert, align 8
  %13574 = add i64 %13536, -164
  %13575 = add i64 %13568, 9
  store i64 %13575, i64* %3, align 8
  %13576 = inttoptr i64 %13574 to i32*
  %13577 = load i32, i32* %13576, align 4
  %13578 = sub i32 %13572, %13577
  %13579 = zext i32 %13578 to i64
  store i64 %13579, i64* %RAX.i3587.phi.trans.insert, align 8
  %13580 = icmp ult i32 %13572, %13577
  %13581 = zext i1 %13580 to i8
  store i8 %13581, i8* %32, align 1
  %13582 = and i32 %13578, 255
  %13583 = tail call i32 @llvm.ctpop.i32(i32 %13582)
  %13584 = trunc i32 %13583 to i8
  %13585 = and i8 %13584, 1
  %13586 = xor i8 %13585, 1
  store i8 %13586, i8* %39, align 1
  %13587 = xor i32 %13577, %13572
  %13588 = xor i32 %13587, %13578
  %13589 = lshr i32 %13588, 4
  %13590 = trunc i32 %13589 to i8
  %13591 = and i8 %13590, 1
  store i8 %13591, i8* %45, align 1
  %13592 = icmp eq i32 %13578, 0
  %13593 = zext i1 %13592 to i8
  store i8 %13593, i8* %48, align 1
  %13594 = lshr i32 %13578, 31
  %13595 = trunc i32 %13594 to i8
  store i8 %13595, i8* %51, align 1
  %13596 = lshr i32 %13572, 31
  %13597 = lshr i32 %13577, 31
  %13598 = xor i32 %13597, %13596
  %13599 = xor i32 %13594, %13596
  %13600 = add nuw nsw i32 %13599, %13598
  %13601 = icmp eq i32 %13600, 2
  %13602 = zext i1 %13601 to i8
  store i8 %13602, i8* %57, align 1
  store i64 %13579, i64* %RDI.i1133, align 8
  %13603 = add i64 %13568, -135637
  %13604 = add i64 %13568, 16
  %13605 = load i64, i64* %6, align 8
  %13606 = add i64 %13605, -8
  %13607 = inttoptr i64 %13606 to i64*
  store i64 %13604, i64* %13607, align 8
  store i64 %13606, i64* %6, align 8
  store i64 %13603, i64* %3, align 8
  %13608 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %13534)
  %13609 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %13610 = load i64, i64* %RBP.i, align 8
  %13611 = add i64 %13610, -76
  %13612 = load i64, i64* %3, align 8
  %13613 = add i64 %13612, 3
  store i64 %13613, i64* %3, align 8
  %13614 = inttoptr i64 %13611 to i32*
  %13615 = load i32, i32* %13614, align 4
  %13616 = sub i32 %13609, %13615
  %13617 = icmp ult i32 %13609, %13615
  %13618 = zext i1 %13617 to i8
  store i8 %13618, i8* %32, align 1
  %13619 = and i32 %13616, 255
  %13620 = tail call i32 @llvm.ctpop.i32(i32 %13619)
  %13621 = trunc i32 %13620 to i8
  %13622 = and i8 %13621, 1
  %13623 = xor i8 %13622, 1
  store i8 %13623, i8* %39, align 1
  %13624 = xor i32 %13615, %13609
  %13625 = xor i32 %13624, %13616
  %13626 = lshr i32 %13625, 4
  %13627 = trunc i32 %13626 to i8
  %13628 = and i8 %13627, 1
  store i8 %13628, i8* %45, align 1
  %13629 = icmp eq i32 %13616, 0
  %13630 = zext i1 %13629 to i8
  store i8 %13630, i8* %48, align 1
  %13631 = lshr i32 %13616, 31
  %13632 = trunc i32 %13631 to i8
  store i8 %13632, i8* %51, align 1
  %13633 = lshr i32 %13609, 31
  %13634 = lshr i32 %13615, 31
  %13635 = xor i32 %13634, %13633
  %13636 = xor i32 %13631, %13633
  %13637 = add nuw nsw i32 %13636, %13635
  %13638 = icmp eq i32 %13637, 2
  %13639 = zext i1 %13638 to i8
  store i8 %13639, i8* %57, align 1
  %13640 = icmp ne i8 %13632, 0
  %13641 = xor i1 %13640, %13638
  %.demorgan468 = or i1 %13629, %13641
  %.v569 = select i1 %.demorgan468, i64 9, i64 321
  %13642 = add i64 %13612, %.v569
  store i64 %13642, i64* %3, align 8
  br i1 %.demorgan468, label %block_4221ee, label %block_.L_422326

block_4221ee:                                     ; preds = %block_4221d5
  %13643 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %13643, i64* %RAX.i3587.phi.trans.insert, align 8
  %13644 = add i64 %13610, -100
  %13645 = add i64 %13642, 11
  store i64 %13645, i64* %3, align 8
  %13646 = inttoptr i64 %13644 to i32*
  %13647 = load i32, i32* %13646, align 4
  %13648 = zext i32 %13647 to i64
  store i64 %13648, i64* %RCX.i4260.pre-phi, align 8
  %13649 = add i64 %13610, -164
  %13650 = add i64 %13642, 17
  store i64 %13650, i64* %3, align 8
  %13651 = inttoptr i64 %13649 to i32*
  %13652 = load i32, i32* %13651, align 4
  %13653 = sub i32 %13647, %13652
  %13654 = zext i32 %13653 to i64
  store i64 %13654, i64* %RCX.i4260.pre-phi, align 8
  %13655 = icmp ult i32 %13647, %13652
  %13656 = zext i1 %13655 to i8
  store i8 %13656, i8* %32, align 1
  %13657 = and i32 %13653, 255
  %13658 = tail call i32 @llvm.ctpop.i32(i32 %13657)
  %13659 = trunc i32 %13658 to i8
  %13660 = and i8 %13659, 1
  %13661 = xor i8 %13660, 1
  store i8 %13661, i8* %39, align 1
  %13662 = xor i32 %13652, %13647
  %13663 = xor i32 %13662, %13653
  %13664 = lshr i32 %13663, 4
  %13665 = trunc i32 %13664 to i8
  %13666 = and i8 %13665, 1
  store i8 %13666, i8* %45, align 1
  %13667 = icmp eq i32 %13653, 0
  %13668 = zext i1 %13667 to i8
  store i8 %13668, i8* %48, align 1
  %13669 = lshr i32 %13653, 31
  %13670 = trunc i32 %13669 to i8
  store i8 %13670, i8* %51, align 1
  %13671 = lshr i32 %13647, 31
  %13672 = lshr i32 %13652, 31
  %13673 = xor i32 %13672, %13671
  %13674 = xor i32 %13669, %13671
  %13675 = add nuw nsw i32 %13674, %13673
  %13676 = icmp eq i32 %13675, 2
  %13677 = zext i1 %13676 to i8
  store i8 %13677, i8* %57, align 1
  %13678 = add i64 %13642, 20
  store i64 %13678, i64* %3, align 8
  %13679 = load i32, i32* %13614, align 4
  %13680 = add i32 %13679, %13653
  %13681 = zext i32 %13680 to i64
  store i64 %13681, i64* %RCX.i4260.pre-phi, align 8
  %13682 = icmp ult i32 %13680, %13653
  %13683 = icmp ult i32 %13680, %13679
  %13684 = or i1 %13682, %13683
  %13685 = zext i1 %13684 to i8
  store i8 %13685, i8* %32, align 1
  %13686 = and i32 %13680, 255
  %13687 = tail call i32 @llvm.ctpop.i32(i32 %13686)
  %13688 = trunc i32 %13687 to i8
  %13689 = and i8 %13688, 1
  %13690 = xor i8 %13689, 1
  store i8 %13690, i8* %39, align 1
  %13691 = xor i32 %13679, %13653
  %13692 = xor i32 %13691, %13680
  %13693 = lshr i32 %13692, 4
  %13694 = trunc i32 %13693 to i8
  %13695 = and i8 %13694, 1
  store i8 %13695, i8* %45, align 1
  %13696 = icmp eq i32 %13680, 0
  %13697 = zext i1 %13696 to i8
  store i8 %13697, i8* %48, align 1
  %13698 = lshr i32 %13680, 31
  %13699 = trunc i32 %13698 to i8
  store i8 %13699, i8* %51, align 1
  %13700 = lshr i32 %13679, 31
  %13701 = xor i32 %13698, %13669
  %13702 = xor i32 %13698, %13700
  %13703 = add nuw nsw i32 %13701, %13702
  %13704 = icmp eq i32 %13703, 2
  %13705 = zext i1 %13704 to i8
  store i8 %13705, i8* %57, align 1
  %13706 = sext i32 %13680 to i64
  store i64 %13706, i64* %RDX.i4317.pre-phi, align 8
  %13707 = shl nsw i64 %13706, 3
  %13708 = add i64 %13643, %13707
  %13709 = add i64 %13642, 27
  store i64 %13709, i64* %3, align 8
  %13710 = inttoptr i64 %13708 to i64*
  %13711 = load i64, i64* %13710, align 8
  store i64 %13711, i64* %RAX.i3587.phi.trans.insert, align 8
  %13712 = add i64 %13610, -96
  %13713 = add i64 %13642, 30
  store i64 %13713, i64* %3, align 8
  %13714 = inttoptr i64 %13712 to i32*
  %13715 = load i32, i32* %13714, align 4
  %13716 = zext i32 %13715 to i64
  store i64 %13716, i64* %RCX.i4260.pre-phi, align 8
  %13717 = load i64, i64* %RBP.i, align 8
  %13718 = add i64 %13717, -160
  %13719 = add i64 %13642, 36
  store i64 %13719, i64* %3, align 8
  %13720 = inttoptr i64 %13718 to i32*
  %13721 = load i32, i32* %13720, align 4
  %13722 = sub i32 %13715, %13721
  %13723 = zext i32 %13722 to i64
  store i64 %13723, i64* %RCX.i4260.pre-phi, align 8
  %13724 = icmp ult i32 %13715, %13721
  %13725 = zext i1 %13724 to i8
  store i8 %13725, i8* %32, align 1
  %13726 = and i32 %13722, 255
  %13727 = tail call i32 @llvm.ctpop.i32(i32 %13726)
  %13728 = trunc i32 %13727 to i8
  %13729 = and i8 %13728, 1
  %13730 = xor i8 %13729, 1
  store i8 %13730, i8* %39, align 1
  %13731 = xor i32 %13721, %13715
  %13732 = xor i32 %13731, %13722
  %13733 = lshr i32 %13732, 4
  %13734 = trunc i32 %13733 to i8
  %13735 = and i8 %13734, 1
  store i8 %13735, i8* %45, align 1
  %13736 = icmp eq i32 %13722, 0
  %13737 = zext i1 %13736 to i8
  store i8 %13737, i8* %48, align 1
  %13738 = lshr i32 %13722, 31
  %13739 = trunc i32 %13738 to i8
  store i8 %13739, i8* %51, align 1
  %13740 = lshr i32 %13715, 31
  %13741 = lshr i32 %13721, 31
  %13742 = xor i32 %13741, %13740
  %13743 = xor i32 %13738, %13740
  %13744 = add nuw nsw i32 %13743, %13742
  %13745 = icmp eq i32 %13744, 2
  %13746 = zext i1 %13745 to i8
  store i8 %13746, i8* %57, align 1
  %13747 = add i64 %13717, -76
  %13748 = add i64 %13642, 39
  store i64 %13748, i64* %3, align 8
  %13749 = inttoptr i64 %13747 to i32*
  %13750 = load i32, i32* %13749, align 4
  %13751 = add i32 %13750, %13722
  %13752 = zext i32 %13751 to i64
  store i64 %13752, i64* %RCX.i4260.pre-phi, align 8
  %13753 = icmp ult i32 %13751, %13722
  %13754 = icmp ult i32 %13751, %13750
  %13755 = or i1 %13753, %13754
  %13756 = zext i1 %13755 to i8
  store i8 %13756, i8* %32, align 1
  %13757 = and i32 %13751, 255
  %13758 = tail call i32 @llvm.ctpop.i32(i32 %13757)
  %13759 = trunc i32 %13758 to i8
  %13760 = and i8 %13759, 1
  %13761 = xor i8 %13760, 1
  store i8 %13761, i8* %39, align 1
  %13762 = xor i32 %13750, %13722
  %13763 = xor i32 %13762, %13751
  %13764 = lshr i32 %13763, 4
  %13765 = trunc i32 %13764 to i8
  %13766 = and i8 %13765, 1
  store i8 %13766, i8* %45, align 1
  %13767 = icmp eq i32 %13751, 0
  %13768 = zext i1 %13767 to i8
  store i8 %13768, i8* %48, align 1
  %13769 = lshr i32 %13751, 31
  %13770 = trunc i32 %13769 to i8
  store i8 %13770, i8* %51, align 1
  %13771 = lshr i32 %13750, 31
  %13772 = xor i32 %13769, %13738
  %13773 = xor i32 %13769, %13771
  %13774 = add nuw nsw i32 %13772, %13773
  %13775 = icmp eq i32 %13774, 2
  %13776 = zext i1 %13775 to i8
  store i8 %13776, i8* %57, align 1
  %13777 = sext i32 %13751 to i64
  store i64 %13777, i64* %RDX.i4317.pre-phi, align 8
  %13778 = shl nsw i64 %13777, 2
  %13779 = add i64 %13711, %13778
  %13780 = add i64 %13642, 46
  store i64 %13780, i64* %3, align 8
  %13781 = inttoptr i64 %13779 to i32*
  %13782 = load i32, i32* %13781, align 4
  store i8 0, i8* %32, align 1
  %13783 = and i32 %13782, 255
  %13784 = tail call i32 @llvm.ctpop.i32(i32 %13783)
  %13785 = trunc i32 %13784 to i8
  %13786 = and i8 %13785, 1
  %13787 = xor i8 %13786, 1
  store i8 %13787, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %13788 = icmp eq i32 %13782, 0
  %13789 = zext i1 %13788 to i8
  store i8 %13789, i8* %48, align 1
  %13790 = lshr i32 %13782, 31
  %13791 = trunc i32 %13790 to i8
  store i8 %13791, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v570 = select i1 %13788, i64 52, i64 307
  %13792 = add i64 %13642, %.v570
  store i64 %13792, i64* %3, align 8
  br i1 %13788, label %block_422222, label %block_.L_422321

block_422222:                                     ; preds = %block_4221ee
  %13793 = load i64, i64* %RBP.i, align 8
  %13794 = add i64 %13793, -132
  %13795 = add i64 %13792, 6
  store i64 %13795, i64* %3, align 8
  %13796 = inttoptr i64 %13794 to i32*
  %13797 = load i32, i32* %13796, align 4
  %13798 = zext i32 %13797 to i64
  store i64 %13798, i64* %RAX.i3587.phi.trans.insert, align 8
  %13799 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %13799, i64* %RCX.i4260.pre-phi, align 8
  %13800 = add i64 %13793, -96
  %13801 = add i64 %13792, 17
  store i64 %13801, i64* %3, align 8
  %13802 = inttoptr i64 %13800 to i32*
  %13803 = load i32, i32* %13802, align 4
  %13804 = zext i32 %13803 to i64
  store i64 %13804, i64* %RDX.i4317.pre-phi, align 8
  %13805 = add i64 %13793, -136
  %13806 = add i64 %13792, 23
  store i64 %13806, i64* %3, align 8
  %13807 = inttoptr i64 %13805 to i32*
  %13808 = load i32, i32* %13807, align 4
  %13809 = zext i32 %13808 to i64
  store i64 %13809, i64* %RSI.i739, align 8
  %13810 = add i64 %13793, -376
  %13811 = add i64 %13792, 30
  store i64 %13811, i64* %3, align 8
  %13812 = inttoptr i64 %13810 to i64*
  store i64 %13799, i64* %13812, align 8
  %13813 = load i32, i32* %ESI.i1656, align 4
  %13814 = zext i32 %13813 to i64
  %13815 = load i64, i64* %3, align 8
  store i64 %13814, i64* %RCX.i4260.pre-phi, align 8
  %13816 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %13817 = add i64 %13815, 4
  store i64 %13817, i64* %3, align 8
  %13818 = trunc i32 %13813 to i5
  switch i5 %13818, label %13825 [
    i5 0, label %routine_shll__cl___edx.exit2163
    i5 1, label %13819
  ]

; <label>:13819:                                  ; preds = %block_422222
  %13820 = trunc i64 %13816 to i32
  %13821 = shl i32 %13820, 1
  %13822 = icmp slt i32 %13820, 0
  %13823 = icmp slt i32 %13821, 0
  %13824 = xor i1 %13822, %13823
  br label %13835

; <label>:13825:                                  ; preds = %block_422222
  %13826 = and i32 %13813, 31
  %13827 = zext i32 %13826 to i64
  %13828 = add nuw nsw i64 %13827, 4294967295
  %13829 = and i64 %13816, 4294967295
  %13830 = and i64 %13828, 4294967295
  %13831 = shl i64 %13829, %13830
  %13832 = trunc i64 %13831 to i32
  %13833 = icmp slt i32 %13832, 0
  %13834 = shl i32 %13832, 1
  br label %13835

; <label>:13835:                                  ; preds = %13825, %13819
  %13836 = phi i1 [ %13822, %13819 ], [ %13833, %13825 ]
  %13837 = phi i1 [ %13824, %13819 ], [ false, %13825 ]
  %13838 = phi i32 [ %13821, %13819 ], [ %13834, %13825 ]
  %13839 = zext i32 %13838 to i64
  store i64 %13839, i64* %RDX.i4317.pre-phi, align 8
  %13840 = zext i1 %13836 to i8
  store i8 %13840, i8* %32, align 1
  %13841 = and i32 %13838, 254
  %13842 = tail call i32 @llvm.ctpop.i32(i32 %13841)
  %13843 = trunc i32 %13842 to i8
  %13844 = and i8 %13843, 1
  %13845 = xor i8 %13844, 1
  store i8 %13845, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %13846 = icmp eq i32 %13838, 0
  %13847 = zext i1 %13846 to i8
  store i8 %13847, i8* %48, align 1
  %13848 = lshr i32 %13838, 31
  %13849 = trunc i32 %13848 to i8
  store i8 %13849, i8* %51, align 1
  %13850 = zext i1 %13837 to i8
  store i8 %13850, i8* %57, align 1
  br label %routine_shll__cl___edx.exit2163

routine_shll__cl___edx.exit2163:                  ; preds = %13835, %block_422222
  %13851 = phi i64 [ %13839, %13835 ], [ %13816, %block_422222 ]
  %13852 = load i64, i64* %RBP.i, align 8
  %13853 = add i64 %13852, -152
  %13854 = add i64 %13815, 10
  store i64 %13854, i64* %3, align 8
  %13855 = trunc i64 %13851 to i32
  %13856 = inttoptr i64 %13853 to i32*
  %13857 = load i32, i32* %13856, align 4
  %13858 = sub i32 %13855, %13857
  %13859 = zext i32 %13858 to i64
  store i64 %13859, i64* %RDX.i4317.pre-phi, align 8
  %13860 = icmp ult i32 %13855, %13857
  %13861 = zext i1 %13860 to i8
  store i8 %13861, i8* %32, align 1
  %13862 = and i32 %13858, 255
  %13863 = tail call i32 @llvm.ctpop.i32(i32 %13862)
  %13864 = trunc i32 %13863 to i8
  %13865 = and i8 %13864, 1
  %13866 = xor i8 %13865, 1
  store i8 %13866, i8* %39, align 1
  %13867 = xor i32 %13857, %13855
  %13868 = xor i32 %13867, %13858
  %13869 = lshr i32 %13868, 4
  %13870 = trunc i32 %13869 to i8
  %13871 = and i8 %13870, 1
  store i8 %13871, i8* %45, align 1
  %13872 = icmp eq i32 %13858, 0
  %13873 = zext i1 %13872 to i8
  store i8 %13873, i8* %48, align 1
  %13874 = lshr i32 %13858, 31
  %13875 = trunc i32 %13874 to i8
  store i8 %13875, i8* %51, align 1
  %13876 = lshr i32 %13855, 31
  %13877 = lshr i32 %13857, 31
  %13878 = xor i32 %13877, %13876
  %13879 = xor i32 %13874, %13876
  %13880 = add nuw nsw i32 %13879, %13878
  %13881 = icmp eq i32 %13880, 2
  %13882 = zext i1 %13881 to i8
  store i8 %13882, i8* %57, align 1
  %13883 = sext i32 %13858 to i64
  store i64 %13883, i64* %RDI.i1133, align 8
  %13884 = add i64 %13852, -376
  %13885 = add i64 %13815, 20
  store i64 %13885, i64* %3, align 8
  %13886 = inttoptr i64 %13884 to i64*
  %13887 = load i64, i64* %13886, align 8
  store i64 %13887, i64* %R8.i5602, align 8
  %13888 = shl nsw i64 %13883, 2
  %13889 = add i64 %13888, %13887
  %13890 = add i64 %13815, 24
  store i64 %13890, i64* %3, align 8
  %13891 = inttoptr i64 %13889 to i32*
  %13892 = load i32, i32* %13891, align 4
  %13893 = zext i32 %13892 to i64
  store i64 %13893, i64* %RDX.i4317.pre-phi, align 8
  %13894 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %13894, i64* %RDI.i1133, align 8
  %13895 = add i64 %13852, -100
  %13896 = add i64 %13815, 35
  store i64 %13896, i64* %3, align 8
  %13897 = inttoptr i64 %13895 to i32*
  %13898 = load i32, i32* %13897, align 4
  %13899 = zext i32 %13898 to i64
  store i64 %13899, i64* %RSI.i739, align 8
  %13900 = add i64 %13852, -136
  %13901 = add i64 %13815, 41
  store i64 %13901, i64* %3, align 8
  %13902 = inttoptr i64 %13900 to i32*
  %13903 = load i32, i32* %13902, align 4
  %13904 = zext i32 %13903 to i64
  store i64 %13904, i64* %RCX.i4260.pre-phi, align 8
  %13905 = add i64 %13815, 43
  store i64 %13905, i64* %3, align 8
  %13906 = trunc i32 %13903 to i5
  switch i5 %13906, label %13912 [
    i5 0, label %routine_shll__cl___esi.exit2138
    i5 1, label %13907
  ]

; <label>:13907:                                  ; preds = %routine_shll__cl___edx.exit2163
  %13908 = shl i32 %13898, 1
  %13909 = icmp slt i32 %13898, 0
  %13910 = icmp slt i32 %13908, 0
  %13911 = xor i1 %13909, %13910
  br label %13921

; <label>:13912:                                  ; preds = %routine_shll__cl___edx.exit2163
  %13913 = and i32 %13903, 31
  %13914 = zext i32 %13913 to i64
  %13915 = add nuw nsw i64 %13914, 4294967295
  %13916 = and i64 %13915, 4294967295
  %13917 = shl i64 %13899, %13916
  %13918 = trunc i64 %13917 to i32
  %13919 = icmp slt i32 %13918, 0
  %13920 = shl i32 %13918, 1
  br label %13921

; <label>:13921:                                  ; preds = %13912, %13907
  %13922 = phi i1 [ %13909, %13907 ], [ %13919, %13912 ]
  %13923 = phi i1 [ %13911, %13907 ], [ false, %13912 ]
  %13924 = phi i32 [ %13908, %13907 ], [ %13920, %13912 ]
  %13925 = zext i32 %13924 to i64
  store i64 %13925, i64* %RSI.i739, align 8
  %13926 = zext i1 %13922 to i8
  store i8 %13926, i8* %32, align 1
  %13927 = and i32 %13924, 254
  %13928 = tail call i32 @llvm.ctpop.i32(i32 %13927)
  %13929 = trunc i32 %13928 to i8
  %13930 = and i8 %13929, 1
  %13931 = xor i8 %13930, 1
  store i8 %13931, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %13932 = icmp eq i32 %13924, 0
  %13933 = zext i1 %13932 to i8
  store i8 %13933, i8* %48, align 1
  %13934 = lshr i32 %13924, 31
  %13935 = trunc i32 %13934 to i8
  store i8 %13935, i8* %51, align 1
  %13936 = zext i1 %13923 to i8
  store i8 %13936, i8* %57, align 1
  br label %routine_shll__cl___esi.exit2138

routine_shll__cl___esi.exit2138:                  ; preds = %13921, %routine_shll__cl___edx.exit2163
  %13937 = phi i32 [ %13924, %13921 ], [ %13898, %routine_shll__cl___edx.exit2163 ]
  %13938 = add i64 %13852, -156
  %13939 = add i64 %13815, 49
  store i64 %13939, i64* %3, align 8
  %13940 = inttoptr i64 %13938 to i32*
  %13941 = load i32, i32* %13940, align 4
  %13942 = sub i32 %13937, %13941
  %13943 = zext i32 %13942 to i64
  store i64 %13943, i64* %RSI.i739, align 8
  %13944 = icmp ult i32 %13937, %13941
  %13945 = zext i1 %13944 to i8
  store i8 %13945, i8* %32, align 1
  %13946 = and i32 %13942, 255
  %13947 = tail call i32 @llvm.ctpop.i32(i32 %13946)
  %13948 = trunc i32 %13947 to i8
  %13949 = and i8 %13948, 1
  %13950 = xor i8 %13949, 1
  store i8 %13950, i8* %39, align 1
  %13951 = xor i32 %13941, %13937
  %13952 = xor i32 %13951, %13942
  %13953 = lshr i32 %13952, 4
  %13954 = trunc i32 %13953 to i8
  %13955 = and i8 %13954, 1
  store i8 %13955, i8* %45, align 1
  %13956 = icmp eq i32 %13942, 0
  %13957 = zext i1 %13956 to i8
  store i8 %13957, i8* %48, align 1
  %13958 = lshr i32 %13942, 31
  %13959 = trunc i32 %13958 to i8
  store i8 %13959, i8* %51, align 1
  %13960 = lshr i32 %13937, 31
  %13961 = lshr i32 %13941, 31
  %13962 = xor i32 %13961, %13960
  %13963 = xor i32 %13958, %13960
  %13964 = add nuw nsw i32 %13963, %13962
  %13965 = icmp eq i32 %13964, 2
  %13966 = zext i1 %13965 to i8
  store i8 %13966, i8* %57, align 1
  %13967 = sext i32 %13942 to i64
  store i64 %13967, i64* %R9.i5580, align 8
  %13968 = shl nsw i64 %13967, 2
  %13969 = add i64 %13894, %13968
  %13970 = add i64 %13815, 56
  store i64 %13970, i64* %3, align 8
  %13971 = inttoptr i64 %13969 to i32*
  %13972 = load i32, i32* %13971, align 4
  %13973 = add i32 %13972, %13892
  %13974 = zext i32 %13973 to i64
  store i64 %13974, i64* %RDX.i4317.pre-phi, align 8
  %13975 = icmp ult i32 %13973, %13892
  %13976 = icmp ult i32 %13973, %13972
  %13977 = or i1 %13975, %13976
  %13978 = zext i1 %13977 to i8
  store i8 %13978, i8* %32, align 1
  %13979 = and i32 %13973, 255
  %13980 = tail call i32 @llvm.ctpop.i32(i32 %13979)
  %13981 = trunc i32 %13980 to i8
  %13982 = and i8 %13981, 1
  %13983 = xor i8 %13982, 1
  store i8 %13983, i8* %39, align 1
  %13984 = xor i32 %13972, %13892
  %13985 = xor i32 %13984, %13973
  %13986 = lshr i32 %13985, 4
  %13987 = trunc i32 %13986 to i8
  %13988 = and i8 %13987, 1
  store i8 %13988, i8* %45, align 1
  %13989 = icmp eq i32 %13973, 0
  %13990 = zext i1 %13989 to i8
  store i8 %13990, i8* %48, align 1
  %13991 = lshr i32 %13973, 31
  %13992 = trunc i32 %13991 to i8
  store i8 %13992, i8* %51, align 1
  %13993 = lshr i32 %13892, 31
  %13994 = lshr i32 %13972, 31
  %13995 = xor i32 %13991, %13993
  %13996 = xor i32 %13991, %13994
  %13997 = add nuw nsw i32 %13995, %13996
  %13998 = icmp eq i32 %13997, 2
  %13999 = zext i1 %13998 to i8
  store i8 %13999, i8* %57, align 1
  %14000 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %14001 = shl i64 %14000, 32
  %14002 = ashr exact i64 %14001, 32
  %14003 = sext i32 %13973 to i64
  %14004 = mul nsw i64 %14003, %14002
  %14005 = shl i64 %14004, 32
  %14006 = ashr i64 %14005, 47
  %14007 = lshr i64 %14006, 1
  %14008 = trunc i64 %14006 to i8
  %14009 = and i8 %14008, 1
  %14010 = trunc i64 %14007 to i32
  %14011 = and i64 %14007, 4294967295
  store i64 %14011, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %14009, i8* %32, align 1
  %14012 = and i32 %14010, 255
  %14013 = tail call i32 @llvm.ctpop.i32(i32 %14012)
  %14014 = trunc i32 %14013 to i8
  %14015 = and i8 %14014, 1
  %14016 = xor i8 %14015, 1
  store i8 %14016, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %14017 = icmp eq i32 %14010, 0
  %14018 = zext i1 %14017 to i8
  store i8 %14018, i8* %48, align 1
  %14019 = lshr i64 %14006, 32
  %14020 = trunc i64 %14019 to i8
  %14021 = and i8 %14020, 1
  store i8 %14021, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %14022 = load i64, i64* %RBP.i, align 8
  %14023 = add i64 %14022, -104
  %14024 = trunc i64 %14007 to i32
  %14025 = add i64 %13815, 65
  store i64 %14025, i64* %3, align 8
  %14026 = inttoptr i64 %14023 to i32*
  store i32 %14024, i32* %14026, align 4
  %14027 = load i64, i64* %RBP.i, align 8
  %14028 = add i64 %14027, -128
  %14029 = load i64, i64* %3, align 8
  %14030 = add i64 %14029, 4
  store i64 %14030, i64* %3, align 8
  %14031 = inttoptr i64 %14028 to i64*
  %14032 = load i64, i64* %14031, align 8
  store i64 %14032, i64* %RDI.i1133, align 8
  %14033 = add i64 %14027, -32
  %14034 = add i64 %14029, 8
  store i64 %14034, i64* %3, align 8
  %14035 = inttoptr i64 %14033 to i64*
  %14036 = load i64, i64* %14035, align 8
  store i64 %14036, i64* %RSI.i739, align 8
  %14037 = add i64 %14027, -112
  %14038 = add i64 %14029, 12
  store i64 %14038, i64* %3, align 8
  %14039 = inttoptr i64 %14037 to i64*
  %14040 = load i64, i64* %14039, align 8
  store i64 %14040, i64* %RDX.i4317.pre-phi, align 8
  %14041 = add i64 %14027, -140
  %14042 = add i64 %14029, 18
  store i64 %14042, i64* %3, align 8
  %14043 = inttoptr i64 %14041 to i32*
  %14044 = load i32, i32* %14043, align 4
  %14045 = zext i32 %14044 to i64
  store i64 %14045, i64* %RCX.i4260.pre-phi, align 8
  %14046 = add i64 %14027, -144
  %14047 = add i64 %14029, 25
  store i64 %14047, i64* %3, align 8
  %14048 = inttoptr i64 %14046 to i32*
  %14049 = load i32, i32* %14048, align 4
  %14050 = zext i32 %14049 to i64
  store i64 %14050, i64* %R8.i5602, align 8
  %14051 = add i64 %14027, -148
  %14052 = add i64 %14029, 32
  store i64 %14052, i64* %3, align 8
  %14053 = inttoptr i64 %14051 to i32*
  %14054 = load i32, i32* %14053, align 4
  %14055 = zext i32 %14054 to i64
  store i64 %14055, i64* %R9.i5580, align 8
  %14056 = add i64 %14027, -104
  %14057 = add i64 %14029, 35
  store i64 %14057, i64* %3, align 8
  %14058 = inttoptr i64 %14056 to i32*
  %14059 = load i32, i32* %14058, align 4
  %14060 = zext i32 %14059 to i64
  store i64 %14060, i64* %RAX.i3587.phi.trans.insert, align 8
  %14061 = add i64 %14027, -80
  %14062 = add i64 %14029, 39
  store i64 %14062, i64* %3, align 8
  %14063 = inttoptr i64 %14061 to i32*
  %14064 = load i32, i32* %14063, align 4
  %14065 = zext i32 %14064 to i64
  store i64 %14065, i64* %68, align 8
  %14066 = add i64 %14027, -96
  %14067 = add i64 %14029, 43
  store i64 %14067, i64* %3, align 8
  %14068 = inttoptr i64 %14066 to i32*
  %14069 = load i32, i32* %14068, align 4
  %14070 = zext i32 %14069 to i64
  store i64 %14070, i64* %R11.i, align 8
  %14071 = add i64 %14027, -100
  %14072 = add i64 %14029, 46
  store i64 %14072, i64* %3, align 8
  %14073 = inttoptr i64 %14071 to i32*
  %14074 = load i32, i32* %14073, align 4
  %14075 = zext i32 %14074 to i64
  store i64 %14075, i64* %RBX.i615, align 8
  %14076 = load i32*, i32** %2119, align 8
  %14077 = add i64 %14029, 49
  store i64 %14077, i64* %3, align 8
  store i32 %14059, i32* %14076, align 4
  %14078 = load i64, i64* %6, align 8
  %14079 = add i64 %14078, 8
  %14080 = load i32, i32* %R10D.i761, align 4
  %14081 = load i64, i64* %3, align 8
  %14082 = add i64 %14081, 5
  store i64 %14082, i64* %3, align 8
  %14083 = inttoptr i64 %14079 to i32*
  store i32 %14080, i32* %14083, align 4
  %14084 = load i64, i64* %6, align 8
  %14085 = add i64 %14084, 16
  %14086 = load i32, i32* %R11D.i5540, align 4
  %14087 = load i64, i64* %3, align 8
  %14088 = add i64 %14087, 5
  store i64 %14088, i64* %3, align 8
  %14089 = inttoptr i64 %14085 to i32*
  store i32 %14086, i32* %14089, align 4
  %14090 = load i64, i64* %6, align 8
  %14091 = add i64 %14090, 24
  %14092 = load i32, i32* %EBX.i5525, align 4
  %14093 = load i64, i64* %3, align 8
  %14094 = add i64 %14093, 4
  store i64 %14094, i64* %3, align 8
  %14095 = inttoptr i64 %14091 to i32*
  store i32 %14092, i32* %14095, align 4
  %14096 = load i64, i64* %3, align 8
  %14097 = add i64 %14096, -7696
  %14098 = add i64 %14096, 5
  %14099 = load i64, i64* %6, align 8
  %14100 = add i64 %14099, -8
  %14101 = inttoptr i64 %14100 to i64*
  store i64 %14098, i64* %14101, align 8
  store i64 %14100, i64* %6, align 8
  store i64 %14097, i64* %3, align 8
  %call2_4222c0 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %14097, %struct.Memory* %13608)
  %14102 = load i64, i64* %RBP.i, align 8
  %14103 = add i64 %14102, -104
  %14104 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %14105 = load i64, i64* %3, align 8
  %14106 = add i64 %14105, 3
  store i64 %14106, i64* %3, align 8
  %14107 = inttoptr i64 %14103 to i32*
  store i32 %14104, i32* %14107, align 4
  %14108 = load i64, i64* %RBP.i, align 8
  %14109 = add i64 %14108, -104
  %14110 = load i64, i64* %3, align 8
  %14111 = add i64 %14110, 3
  store i64 %14111, i64* %3, align 8
  %14112 = inttoptr i64 %14109 to i32*
  %14113 = load i32, i32* %14112, align 4
  %14114 = zext i32 %14113 to i64
  store i64 %14114, i64* %RAX.i3587.phi.trans.insert, align 8
  %14115 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %14115, i64* %RDX.i4317.pre-phi, align 8
  %14116 = add i64 %14108, -100
  %14117 = add i64 %14110, 14
  store i64 %14117, i64* %3, align 8
  %14118 = inttoptr i64 %14116 to i32*
  %14119 = load i32, i32* %14118, align 4
  %14120 = zext i32 %14119 to i64
  store i64 %14120, i64* %RCX.i4260.pre-phi, align 8
  %14121 = add i64 %14108, -164
  %14122 = add i64 %14110, 20
  store i64 %14122, i64* %3, align 8
  %14123 = inttoptr i64 %14121 to i32*
  %14124 = load i32, i32* %14123, align 4
  %14125 = sub i32 %14119, %14124
  %14126 = zext i32 %14125 to i64
  store i64 %14126, i64* %RCX.i4260.pre-phi, align 8
  %14127 = icmp ult i32 %14119, %14124
  %14128 = zext i1 %14127 to i8
  store i8 %14128, i8* %32, align 1
  %14129 = and i32 %14125, 255
  %14130 = tail call i32 @llvm.ctpop.i32(i32 %14129)
  %14131 = trunc i32 %14130 to i8
  %14132 = and i8 %14131, 1
  %14133 = xor i8 %14132, 1
  store i8 %14133, i8* %39, align 1
  %14134 = xor i32 %14124, %14119
  %14135 = xor i32 %14134, %14125
  %14136 = lshr i32 %14135, 4
  %14137 = trunc i32 %14136 to i8
  %14138 = and i8 %14137, 1
  store i8 %14138, i8* %45, align 1
  %14139 = icmp eq i32 %14125, 0
  %14140 = zext i1 %14139 to i8
  store i8 %14140, i8* %48, align 1
  %14141 = lshr i32 %14125, 31
  %14142 = trunc i32 %14141 to i8
  store i8 %14142, i8* %51, align 1
  %14143 = lshr i32 %14119, 31
  %14144 = lshr i32 %14124, 31
  %14145 = xor i32 %14144, %14143
  %14146 = xor i32 %14141, %14143
  %14147 = add nuw nsw i32 %14146, %14145
  %14148 = icmp eq i32 %14147, 2
  %14149 = zext i1 %14148 to i8
  store i8 %14149, i8* %57, align 1
  %14150 = add i64 %14108, -76
  %14151 = add i64 %14110, 23
  store i64 %14151, i64* %3, align 8
  %14152 = inttoptr i64 %14150 to i32*
  %14153 = load i32, i32* %14152, align 4
  %14154 = add i32 %14153, %14125
  %14155 = zext i32 %14154 to i64
  store i64 %14155, i64* %RCX.i4260.pre-phi, align 8
  %14156 = icmp ult i32 %14154, %14125
  %14157 = icmp ult i32 %14154, %14153
  %14158 = or i1 %14156, %14157
  %14159 = zext i1 %14158 to i8
  store i8 %14159, i8* %32, align 1
  %14160 = and i32 %14154, 255
  %14161 = tail call i32 @llvm.ctpop.i32(i32 %14160)
  %14162 = trunc i32 %14161 to i8
  %14163 = and i8 %14162, 1
  %14164 = xor i8 %14163, 1
  store i8 %14164, i8* %39, align 1
  %14165 = xor i32 %14153, %14125
  %14166 = xor i32 %14165, %14154
  %14167 = lshr i32 %14166, 4
  %14168 = trunc i32 %14167 to i8
  %14169 = and i8 %14168, 1
  store i8 %14169, i8* %45, align 1
  %14170 = icmp eq i32 %14154, 0
  %14171 = zext i1 %14170 to i8
  store i8 %14171, i8* %48, align 1
  %14172 = lshr i32 %14154, 31
  %14173 = trunc i32 %14172 to i8
  store i8 %14173, i8* %51, align 1
  %14174 = lshr i32 %14153, 31
  %14175 = xor i32 %14172, %14141
  %14176 = xor i32 %14172, %14174
  %14177 = add nuw nsw i32 %14175, %14176
  %14178 = icmp eq i32 %14177, 2
  %14179 = zext i1 %14178 to i8
  store i8 %14179, i8* %57, align 1
  %14180 = sext i32 %14154 to i64
  store i64 %14180, i64* %RSI.i739, align 8
  %14181 = shl nsw i64 %14180, 3
  %14182 = add i64 %14115, %14181
  %14183 = add i64 %14110, 30
  store i64 %14183, i64* %3, align 8
  %14184 = inttoptr i64 %14182 to i64*
  %14185 = load i64, i64* %14184, align 8
  store i64 %14185, i64* %RDX.i4317.pre-phi, align 8
  %14186 = load i64, i64* %RBP.i, align 8
  %14187 = add i64 %14186, -96
  %14188 = add i64 %14110, 33
  store i64 %14188, i64* %3, align 8
  %14189 = inttoptr i64 %14187 to i32*
  %14190 = load i32, i32* %14189, align 4
  %14191 = zext i32 %14190 to i64
  store i64 %14191, i64* %RCX.i4260.pre-phi, align 8
  %14192 = add i64 %14186, -160
  %14193 = add i64 %14110, 39
  store i64 %14193, i64* %3, align 8
  %14194 = inttoptr i64 %14192 to i32*
  %14195 = load i32, i32* %14194, align 4
  %14196 = sub i32 %14190, %14195
  %14197 = zext i32 %14196 to i64
  store i64 %14197, i64* %RCX.i4260.pre-phi, align 8
  %14198 = icmp ult i32 %14190, %14195
  %14199 = zext i1 %14198 to i8
  store i8 %14199, i8* %32, align 1
  %14200 = and i32 %14196, 255
  %14201 = tail call i32 @llvm.ctpop.i32(i32 %14200)
  %14202 = trunc i32 %14201 to i8
  %14203 = and i8 %14202, 1
  %14204 = xor i8 %14203, 1
  store i8 %14204, i8* %39, align 1
  %14205 = xor i32 %14195, %14190
  %14206 = xor i32 %14205, %14196
  %14207 = lshr i32 %14206, 4
  %14208 = trunc i32 %14207 to i8
  %14209 = and i8 %14208, 1
  store i8 %14209, i8* %45, align 1
  %14210 = icmp eq i32 %14196, 0
  %14211 = zext i1 %14210 to i8
  store i8 %14211, i8* %48, align 1
  %14212 = lshr i32 %14196, 31
  %14213 = trunc i32 %14212 to i8
  store i8 %14213, i8* %51, align 1
  %14214 = lshr i32 %14190, 31
  %14215 = lshr i32 %14195, 31
  %14216 = xor i32 %14215, %14214
  %14217 = xor i32 %14212, %14214
  %14218 = add nuw nsw i32 %14217, %14216
  %14219 = icmp eq i32 %14218, 2
  %14220 = zext i1 %14219 to i8
  store i8 %14220, i8* %57, align 1
  %14221 = add i64 %14186, -76
  %14222 = add i64 %14110, 42
  store i64 %14222, i64* %3, align 8
  %14223 = inttoptr i64 %14221 to i32*
  %14224 = load i32, i32* %14223, align 4
  %14225 = add i32 %14224, %14196
  %14226 = zext i32 %14225 to i64
  store i64 %14226, i64* %RCX.i4260.pre-phi, align 8
  %14227 = icmp ult i32 %14225, %14196
  %14228 = icmp ult i32 %14225, %14224
  %14229 = or i1 %14227, %14228
  %14230 = zext i1 %14229 to i8
  store i8 %14230, i8* %32, align 1
  %14231 = and i32 %14225, 255
  %14232 = tail call i32 @llvm.ctpop.i32(i32 %14231)
  %14233 = trunc i32 %14232 to i8
  %14234 = and i8 %14233, 1
  %14235 = xor i8 %14234, 1
  store i8 %14235, i8* %39, align 1
  %14236 = xor i32 %14224, %14196
  %14237 = xor i32 %14236, %14225
  %14238 = lshr i32 %14237, 4
  %14239 = trunc i32 %14238 to i8
  %14240 = and i8 %14239, 1
  store i8 %14240, i8* %45, align 1
  %14241 = icmp eq i32 %14225, 0
  %14242 = zext i1 %14241 to i8
  store i8 %14242, i8* %48, align 1
  %14243 = lshr i32 %14225, 31
  %14244 = trunc i32 %14243 to i8
  store i8 %14244, i8* %51, align 1
  %14245 = lshr i32 %14224, 31
  %14246 = xor i32 %14243, %14212
  %14247 = xor i32 %14243, %14245
  %14248 = add nuw nsw i32 %14246, %14247
  %14249 = icmp eq i32 %14248, 2
  %14250 = zext i1 %14249 to i8
  store i8 %14250, i8* %57, align 1
  %14251 = sext i32 %14225 to i64
  store i64 %14251, i64* %RSI.i739, align 8
  %14252 = shl nsw i64 %14251, 2
  %14253 = add i64 %14185, %14252
  %14254 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %14255 = add i64 %14110, 48
  store i64 %14255, i64* %3, align 8
  %14256 = inttoptr i64 %14253 to i32*
  store i32 %14254, i32* %14256, align 4
  %14257 = load i64, i64* %RBP.i, align 8
  %14258 = add i64 %14257, -104
  %14259 = load i64, i64* %3, align 8
  %14260 = add i64 %14259, 3
  store i64 %14260, i64* %3, align 8
  %14261 = inttoptr i64 %14258 to i32*
  %14262 = load i32, i32* %14261, align 4
  %14263 = zext i32 %14262 to i64
  store i64 %14263, i64* %RAX.i3587.phi.trans.insert, align 8
  %14264 = add i64 %14257, -80
  %14265 = add i64 %14259, 6
  store i64 %14265, i64* %3, align 8
  %14266 = inttoptr i64 %14264 to i32*
  %14267 = load i32, i32* %14266, align 4
  %14268 = sub i32 %14262, %14267
  %14269 = icmp ult i32 %14262, %14267
  %14270 = zext i1 %14269 to i8
  store i8 %14270, i8* %32, align 1
  %14271 = and i32 %14268, 255
  %14272 = tail call i32 @llvm.ctpop.i32(i32 %14271)
  %14273 = trunc i32 %14272 to i8
  %14274 = and i8 %14273, 1
  %14275 = xor i8 %14274, 1
  store i8 %14275, i8* %39, align 1
  %14276 = xor i32 %14267, %14262
  %14277 = xor i32 %14276, %14268
  %14278 = lshr i32 %14277, 4
  %14279 = trunc i32 %14278 to i8
  %14280 = and i8 %14279, 1
  store i8 %14280, i8* %45, align 1
  %14281 = icmp eq i32 %14268, 0
  %14282 = zext i1 %14281 to i8
  store i8 %14282, i8* %48, align 1
  %14283 = lshr i32 %14268, 31
  %14284 = trunc i32 %14283 to i8
  store i8 %14284, i8* %51, align 1
  %14285 = lshr i32 %14262, 31
  %14286 = lshr i32 %14267, 31
  %14287 = xor i32 %14286, %14285
  %14288 = xor i32 %14283, %14285
  %14289 = add nuw nsw i32 %14288, %14287
  %14290 = icmp eq i32 %14289, 2
  %14291 = zext i1 %14290 to i8
  store i8 %14291, i8* %57, align 1
  %14292 = icmp ne i8 %14284, 0
  %14293 = xor i1 %14292, %14290
  %.v571 = select i1 %14293, i64 12, i64 36
  %14294 = add i64 %14259, %.v571
  store i64 %14294, i64* %3, align 8
  br i1 %14293, label %block_422304, label %block_.L_42231c

block_422304:                                     ; preds = %routine_shll__cl___esi.exit2138
  %14295 = add i64 %14257, -96
  %14296 = add i64 %14294, 3
  store i64 %14296, i64* %3, align 8
  %14297 = inttoptr i64 %14295 to i32*
  %14298 = load i32, i32* %14297, align 4
  %14299 = zext i32 %14298 to i64
  store i64 %14299, i64* %RAX.i3587.phi.trans.insert, align 8
  %14300 = add i64 %14257, -168
  %14301 = add i64 %14294, 9
  store i64 %14301, i64* %3, align 8
  %14302 = inttoptr i64 %14300 to i32*
  store i32 %14298, i32* %14302, align 4
  %14303 = load i64, i64* %RBP.i, align 8
  %14304 = add i64 %14303, -100
  %14305 = load i64, i64* %3, align 8
  %14306 = add i64 %14305, 3
  store i64 %14306, i64* %3, align 8
  %14307 = inttoptr i64 %14304 to i32*
  %14308 = load i32, i32* %14307, align 4
  %14309 = zext i32 %14308 to i64
  store i64 %14309, i64* %RAX.i3587.phi.trans.insert, align 8
  %14310 = add i64 %14303, -172
  %14311 = add i64 %14305, 9
  store i64 %14311, i64* %3, align 8
  %14312 = inttoptr i64 %14310 to i32*
  store i32 %14308, i32* %14312, align 4
  %14313 = load i64, i64* %RBP.i, align 8
  %14314 = add i64 %14313, -104
  %14315 = load i64, i64* %3, align 8
  %14316 = add i64 %14315, 3
  store i64 %14316, i64* %3, align 8
  %14317 = inttoptr i64 %14314 to i32*
  %14318 = load i32, i32* %14317, align 4
  %14319 = zext i32 %14318 to i64
  store i64 %14319, i64* %RAX.i3587.phi.trans.insert, align 8
  %14320 = add i64 %14313, -80
  %14321 = add i64 %14315, 6
  store i64 %14321, i64* %3, align 8
  %14322 = inttoptr i64 %14320 to i32*
  store i32 %14318, i32* %14322, align 4
  %.pre328 = load i64, i64* %3, align 8
  br label %block_.L_42231c

block_.L_42231c:                                  ; preds = %routine_shll__cl___esi.exit2138, %block_422304
  %14323 = phi i64 [ %14294, %routine_shll__cl___esi.exit2138 ], [ %.pre328, %block_422304 ]
  %14324 = add i64 %14323, 5
  store i64 %14324, i64* %3, align 8
  br label %block_.L_422321

block_.L_422321:                                  ; preds = %block_4221ee, %block_.L_42231c
  %14325 = phi i64 [ %13792, %block_4221ee ], [ %14324, %block_.L_42231c ]
  %MEMORY.63 = phi %struct.Memory* [ %13608, %block_4221ee ], [ %call2_4222c0, %block_.L_42231c ]
  %14326 = add i64 %14325, 5
  store i64 %14326, i64* %3, align 8
  %.pre329 = load i64, i64* %RBP.i, align 8
  br label %block_.L_422326

block_.L_422326:                                  ; preds = %block_4221d5, %block_422192, %block_.L_422321
  %14327 = phi i64 [ %13568, %block_422192 ], [ %13642, %block_4221d5 ], [ %14326, %block_.L_422321 ]
  %14328 = phi i64 [ %13536, %block_422192 ], [ %13610, %block_4221d5 ], [ %.pre329, %block_.L_422321 ]
  %MEMORY.64 = phi %struct.Memory* [ %13534, %block_422192 ], [ %13608, %block_4221d5 ], [ %MEMORY.63, %block_.L_422321 ]
  %14329 = add i64 %14328, -184
  %14330 = add i64 %14327, 6
  store i64 %14330, i64* %3, align 8
  %14331 = inttoptr i64 %14329 to i32*
  %14332 = load i32, i32* %14331, align 4
  %14333 = zext i32 %14332 to i64
  store i64 %14333, i64* %RAX.i3587.phi.trans.insert, align 8
  %14334 = add i64 %14328, -96
  %14335 = add i64 %14327, 9
  store i64 %14335, i64* %3, align 8
  %14336 = inttoptr i64 %14334 to i32*
  store i32 %14332, i32* %14336, align 4
  %14337 = load i64, i64* %RBP.i, align 8
  %14338 = add i64 %14337, -180
  %14339 = load i64, i64* %3, align 8
  %14340 = add i64 %14339, 6
  store i64 %14340, i64* %3, align 8
  %14341 = inttoptr i64 %14338 to i32*
  %14342 = load i32, i32* %14341, align 4
  %14343 = zext i32 %14342 to i64
  store i64 %14343, i64* %RAX.i3587.phi.trans.insert, align 8
  %14344 = add i64 %14337, -176
  %14345 = add i64 %14339, 12
  store i64 %14345, i64* %3, align 8
  %14346 = inttoptr i64 %14344 to i32*
  %14347 = load i32, i32* %14346, align 4
  %14348 = sub i32 %14342, %14347
  %14349 = zext i32 %14348 to i64
  store i64 %14349, i64* %RAX.i3587.phi.trans.insert, align 8
  %14350 = icmp ult i32 %14342, %14347
  %14351 = zext i1 %14350 to i8
  store i8 %14351, i8* %32, align 1
  %14352 = and i32 %14348, 255
  %14353 = tail call i32 @llvm.ctpop.i32(i32 %14352)
  %14354 = trunc i32 %14353 to i8
  %14355 = and i8 %14354, 1
  %14356 = xor i8 %14355, 1
  store i8 %14356, i8* %39, align 1
  %14357 = xor i32 %14347, %14342
  %14358 = xor i32 %14357, %14348
  %14359 = lshr i32 %14358, 4
  %14360 = trunc i32 %14359 to i8
  %14361 = and i8 %14360, 1
  store i8 %14361, i8* %45, align 1
  %14362 = icmp eq i32 %14348, 0
  %14363 = zext i1 %14362 to i8
  store i8 %14363, i8* %48, align 1
  %14364 = lshr i32 %14348, 31
  %14365 = trunc i32 %14364 to i8
  store i8 %14365, i8* %51, align 1
  %14366 = lshr i32 %14342, 31
  %14367 = lshr i32 %14347, 31
  %14368 = xor i32 %14367, %14366
  %14369 = xor i32 %14364, %14366
  %14370 = add nuw nsw i32 %14369, %14368
  %14371 = icmp eq i32 %14370, 2
  %14372 = zext i1 %14371 to i8
  store i8 %14372, i8* %57, align 1
  %14373 = add i64 %14337, -100
  %14374 = add i64 %14339, 15
  store i64 %14374, i64* %3, align 8
  %14375 = inttoptr i64 %14373 to i32*
  store i32 %14348, i32* %14375, align 4
  %14376 = load i64, i64* %RBP.i, align 8
  %14377 = add i64 %14376, -96
  %14378 = load i64, i64* %3, align 8
  %14379 = add i64 %14378, 3
  store i64 %14379, i64* %3, align 8
  %14380 = inttoptr i64 %14377 to i32*
  %14381 = load i32, i32* %14380, align 4
  %14382 = zext i32 %14381 to i64
  store i64 %14382, i64* %RAX.i3587.phi.trans.insert, align 8
  %14383 = add i64 %14376, -160
  %14384 = add i64 %14378, 9
  store i64 %14384, i64* %3, align 8
  %14385 = inttoptr i64 %14383 to i32*
  %14386 = load i32, i32* %14385, align 4
  %14387 = sub i32 %14381, %14386
  %14388 = zext i32 %14387 to i64
  store i64 %14388, i64* %RAX.i3587.phi.trans.insert, align 8
  %14389 = icmp ult i32 %14381, %14386
  %14390 = zext i1 %14389 to i8
  store i8 %14390, i8* %32, align 1
  %14391 = and i32 %14387, 255
  %14392 = tail call i32 @llvm.ctpop.i32(i32 %14391)
  %14393 = trunc i32 %14392 to i8
  %14394 = and i8 %14393, 1
  %14395 = xor i8 %14394, 1
  store i8 %14395, i8* %39, align 1
  %14396 = xor i32 %14386, %14381
  %14397 = xor i32 %14396, %14387
  %14398 = lshr i32 %14397, 4
  %14399 = trunc i32 %14398 to i8
  %14400 = and i8 %14399, 1
  store i8 %14400, i8* %45, align 1
  %14401 = icmp eq i32 %14387, 0
  %14402 = zext i1 %14401 to i8
  store i8 %14402, i8* %48, align 1
  %14403 = lshr i32 %14387, 31
  %14404 = trunc i32 %14403 to i8
  store i8 %14404, i8* %51, align 1
  %14405 = lshr i32 %14381, 31
  %14406 = lshr i32 %14386, 31
  %14407 = xor i32 %14406, %14405
  %14408 = xor i32 %14403, %14405
  %14409 = add nuw nsw i32 %14408, %14407
  %14410 = icmp eq i32 %14409, 2
  %14411 = zext i1 %14410 to i8
  store i8 %14411, i8* %57, align 1
  store i64 %14388, i64* %RDI.i1133, align 8
  %14412 = add i64 %14378, -135998
  %14413 = add i64 %14378, 16
  %14414 = load i64, i64* %6, align 8
  %14415 = add i64 %14414, -8
  %14416 = inttoptr i64 %14415 to i64*
  store i64 %14413, i64* %14416, align 8
  store i64 %14415, i64* %6, align 8
  store i64 %14412, i64* %3, align 8
  %14417 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.64)
  %14418 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %14419 = load i64, i64* %RBP.i, align 8
  %14420 = add i64 %14419, -76
  %14421 = load i64, i64* %3, align 8
  %14422 = add i64 %14421, 3
  store i64 %14422, i64* %3, align 8
  %14423 = inttoptr i64 %14420 to i32*
  %14424 = load i32, i32* %14423, align 4
  %14425 = sub i32 %14418, %14424
  %14426 = icmp ult i32 %14418, %14424
  %14427 = zext i1 %14426 to i8
  store i8 %14427, i8* %32, align 1
  %14428 = and i32 %14425, 255
  %14429 = tail call i32 @llvm.ctpop.i32(i32 %14428)
  %14430 = trunc i32 %14429 to i8
  %14431 = and i8 %14430, 1
  %14432 = xor i8 %14431, 1
  store i8 %14432, i8* %39, align 1
  %14433 = xor i32 %14424, %14418
  %14434 = xor i32 %14433, %14425
  %14435 = lshr i32 %14434, 4
  %14436 = trunc i32 %14435 to i8
  %14437 = and i8 %14436, 1
  store i8 %14437, i8* %45, align 1
  %14438 = icmp eq i32 %14425, 0
  %14439 = zext i1 %14438 to i8
  store i8 %14439, i8* %48, align 1
  %14440 = lshr i32 %14425, 31
  %14441 = trunc i32 %14440 to i8
  store i8 %14441, i8* %51, align 1
  %14442 = lshr i32 %14418, 31
  %14443 = lshr i32 %14424, 31
  %14444 = xor i32 %14443, %14442
  %14445 = xor i32 %14440, %14442
  %14446 = add nuw nsw i32 %14445, %14444
  %14447 = icmp eq i32 %14446, 2
  %14448 = zext i1 %14447 to i8
  store i8 %14448, i8* %57, align 1
  %14449 = icmp ne i8 %14441, 0
  %14450 = xor i1 %14449, %14447
  %.demorgan469 = or i1 %14438, %14450
  %.v565 = select i1 %.demorgan469, i64 9, i64 346
  %14451 = add i64 %14421, %.v565
  store i64 %14451, i64* %3, align 8
  br i1 %.demorgan469, label %block_422357, label %block_.L_4224a8

block_422357:                                     ; preds = %block_.L_422326
  %14452 = add i64 %14419, -100
  %14453 = add i64 %14451, 3
  store i64 %14453, i64* %3, align 8
  %14454 = inttoptr i64 %14452 to i32*
  %14455 = load i32, i32* %14454, align 4
  %14456 = zext i32 %14455 to i64
  store i64 %14456, i64* %RAX.i3587.phi.trans.insert, align 8
  %14457 = add i64 %14419, -164
  %14458 = add i64 %14451, 9
  store i64 %14458, i64* %3, align 8
  %14459 = inttoptr i64 %14457 to i32*
  %14460 = load i32, i32* %14459, align 4
  %14461 = sub i32 %14455, %14460
  %14462 = zext i32 %14461 to i64
  store i64 %14462, i64* %RAX.i3587.phi.trans.insert, align 8
  %14463 = icmp ult i32 %14455, %14460
  %14464 = zext i1 %14463 to i8
  store i8 %14464, i8* %32, align 1
  %14465 = and i32 %14461, 255
  %14466 = tail call i32 @llvm.ctpop.i32(i32 %14465)
  %14467 = trunc i32 %14466 to i8
  %14468 = and i8 %14467, 1
  %14469 = xor i8 %14468, 1
  store i8 %14469, i8* %39, align 1
  %14470 = xor i32 %14460, %14455
  %14471 = xor i32 %14470, %14461
  %14472 = lshr i32 %14471, 4
  %14473 = trunc i32 %14472 to i8
  %14474 = and i8 %14473, 1
  store i8 %14474, i8* %45, align 1
  %14475 = icmp eq i32 %14461, 0
  %14476 = zext i1 %14475 to i8
  store i8 %14476, i8* %48, align 1
  %14477 = lshr i32 %14461, 31
  %14478 = trunc i32 %14477 to i8
  store i8 %14478, i8* %51, align 1
  %14479 = lshr i32 %14455, 31
  %14480 = lshr i32 %14460, 31
  %14481 = xor i32 %14480, %14479
  %14482 = xor i32 %14477, %14479
  %14483 = add nuw nsw i32 %14482, %14481
  %14484 = icmp eq i32 %14483, 2
  %14485 = zext i1 %14484 to i8
  store i8 %14485, i8* %57, align 1
  store i64 %14462, i64* %RDI.i1133, align 8
  %14486 = add i64 %14451, -136023
  %14487 = add i64 %14451, 16
  %14488 = load i64, i64* %6, align 8
  %14489 = add i64 %14488, -8
  %14490 = inttoptr i64 %14489 to i64*
  store i64 %14487, i64* %14490, align 8
  store i64 %14489, i64* %6, align 8
  store i64 %14486, i64* %3, align 8
  %14491 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %14417)
  %14492 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %14493 = load i64, i64* %RBP.i, align 8
  %14494 = add i64 %14493, -76
  %14495 = load i64, i64* %3, align 8
  %14496 = add i64 %14495, 3
  store i64 %14496, i64* %3, align 8
  %14497 = inttoptr i64 %14494 to i32*
  %14498 = load i32, i32* %14497, align 4
  %14499 = sub i32 %14492, %14498
  %14500 = icmp ult i32 %14492, %14498
  %14501 = zext i1 %14500 to i8
  store i8 %14501, i8* %32, align 1
  %14502 = and i32 %14499, 255
  %14503 = tail call i32 @llvm.ctpop.i32(i32 %14502)
  %14504 = trunc i32 %14503 to i8
  %14505 = and i8 %14504, 1
  %14506 = xor i8 %14505, 1
  store i8 %14506, i8* %39, align 1
  %14507 = xor i32 %14498, %14492
  %14508 = xor i32 %14507, %14499
  %14509 = lshr i32 %14508, 4
  %14510 = trunc i32 %14509 to i8
  %14511 = and i8 %14510, 1
  store i8 %14511, i8* %45, align 1
  %14512 = icmp eq i32 %14499, 0
  %14513 = zext i1 %14512 to i8
  store i8 %14513, i8* %48, align 1
  %14514 = lshr i32 %14499, 31
  %14515 = trunc i32 %14514 to i8
  store i8 %14515, i8* %51, align 1
  %14516 = lshr i32 %14492, 31
  %14517 = lshr i32 %14498, 31
  %14518 = xor i32 %14517, %14516
  %14519 = xor i32 %14514, %14516
  %14520 = add nuw nsw i32 %14519, %14518
  %14521 = icmp eq i32 %14520, 2
  %14522 = zext i1 %14521 to i8
  store i8 %14522, i8* %57, align 1
  %14523 = icmp ne i8 %14515, 0
  %14524 = xor i1 %14523, %14521
  %.demorgan470 = or i1 %14512, %14524
  %.v566 = select i1 %.demorgan470, i64 9, i64 321
  %14525 = add i64 %14495, %.v566
  store i64 %14525, i64* %3, align 8
  br i1 %.demorgan470, label %block_422370, label %block_.L_4224a8

block_422370:                                     ; preds = %block_422357
  %14526 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %14526, i64* %RAX.i3587.phi.trans.insert, align 8
  %14527 = add i64 %14493, -100
  %14528 = add i64 %14525, 11
  store i64 %14528, i64* %3, align 8
  %14529 = inttoptr i64 %14527 to i32*
  %14530 = load i32, i32* %14529, align 4
  %14531 = zext i32 %14530 to i64
  store i64 %14531, i64* %RCX.i4260.pre-phi, align 8
  %14532 = add i64 %14493, -164
  %14533 = add i64 %14525, 17
  store i64 %14533, i64* %3, align 8
  %14534 = inttoptr i64 %14532 to i32*
  %14535 = load i32, i32* %14534, align 4
  %14536 = sub i32 %14530, %14535
  %14537 = zext i32 %14536 to i64
  store i64 %14537, i64* %RCX.i4260.pre-phi, align 8
  %14538 = icmp ult i32 %14530, %14535
  %14539 = zext i1 %14538 to i8
  store i8 %14539, i8* %32, align 1
  %14540 = and i32 %14536, 255
  %14541 = tail call i32 @llvm.ctpop.i32(i32 %14540)
  %14542 = trunc i32 %14541 to i8
  %14543 = and i8 %14542, 1
  %14544 = xor i8 %14543, 1
  store i8 %14544, i8* %39, align 1
  %14545 = xor i32 %14535, %14530
  %14546 = xor i32 %14545, %14536
  %14547 = lshr i32 %14546, 4
  %14548 = trunc i32 %14547 to i8
  %14549 = and i8 %14548, 1
  store i8 %14549, i8* %45, align 1
  %14550 = icmp eq i32 %14536, 0
  %14551 = zext i1 %14550 to i8
  store i8 %14551, i8* %48, align 1
  %14552 = lshr i32 %14536, 31
  %14553 = trunc i32 %14552 to i8
  store i8 %14553, i8* %51, align 1
  %14554 = lshr i32 %14530, 31
  %14555 = lshr i32 %14535, 31
  %14556 = xor i32 %14555, %14554
  %14557 = xor i32 %14552, %14554
  %14558 = add nuw nsw i32 %14557, %14556
  %14559 = icmp eq i32 %14558, 2
  %14560 = zext i1 %14559 to i8
  store i8 %14560, i8* %57, align 1
  %14561 = add i64 %14525, 20
  store i64 %14561, i64* %3, align 8
  %14562 = load i32, i32* %14497, align 4
  %14563 = add i32 %14562, %14536
  %14564 = zext i32 %14563 to i64
  store i64 %14564, i64* %RCX.i4260.pre-phi, align 8
  %14565 = icmp ult i32 %14563, %14536
  %14566 = icmp ult i32 %14563, %14562
  %14567 = or i1 %14565, %14566
  %14568 = zext i1 %14567 to i8
  store i8 %14568, i8* %32, align 1
  %14569 = and i32 %14563, 255
  %14570 = tail call i32 @llvm.ctpop.i32(i32 %14569)
  %14571 = trunc i32 %14570 to i8
  %14572 = and i8 %14571, 1
  %14573 = xor i8 %14572, 1
  store i8 %14573, i8* %39, align 1
  %14574 = xor i32 %14562, %14536
  %14575 = xor i32 %14574, %14563
  %14576 = lshr i32 %14575, 4
  %14577 = trunc i32 %14576 to i8
  %14578 = and i8 %14577, 1
  store i8 %14578, i8* %45, align 1
  %14579 = icmp eq i32 %14563, 0
  %14580 = zext i1 %14579 to i8
  store i8 %14580, i8* %48, align 1
  %14581 = lshr i32 %14563, 31
  %14582 = trunc i32 %14581 to i8
  store i8 %14582, i8* %51, align 1
  %14583 = lshr i32 %14562, 31
  %14584 = xor i32 %14581, %14552
  %14585 = xor i32 %14581, %14583
  %14586 = add nuw nsw i32 %14584, %14585
  %14587 = icmp eq i32 %14586, 2
  %14588 = zext i1 %14587 to i8
  store i8 %14588, i8* %57, align 1
  %14589 = sext i32 %14563 to i64
  store i64 %14589, i64* %RDX.i4317.pre-phi, align 8
  %14590 = shl nsw i64 %14589, 3
  %14591 = add i64 %14526, %14590
  %14592 = add i64 %14525, 27
  store i64 %14592, i64* %3, align 8
  %14593 = inttoptr i64 %14591 to i64*
  %14594 = load i64, i64* %14593, align 8
  store i64 %14594, i64* %RAX.i3587.phi.trans.insert, align 8
  %14595 = add i64 %14493, -96
  %14596 = add i64 %14525, 30
  store i64 %14596, i64* %3, align 8
  %14597 = inttoptr i64 %14595 to i32*
  %14598 = load i32, i32* %14597, align 4
  %14599 = zext i32 %14598 to i64
  store i64 %14599, i64* %RCX.i4260.pre-phi, align 8
  %14600 = load i64, i64* %RBP.i, align 8
  %14601 = add i64 %14600, -160
  %14602 = add i64 %14525, 36
  store i64 %14602, i64* %3, align 8
  %14603 = inttoptr i64 %14601 to i32*
  %14604 = load i32, i32* %14603, align 4
  %14605 = sub i32 %14598, %14604
  %14606 = zext i32 %14605 to i64
  store i64 %14606, i64* %RCX.i4260.pre-phi, align 8
  %14607 = icmp ult i32 %14598, %14604
  %14608 = zext i1 %14607 to i8
  store i8 %14608, i8* %32, align 1
  %14609 = and i32 %14605, 255
  %14610 = tail call i32 @llvm.ctpop.i32(i32 %14609)
  %14611 = trunc i32 %14610 to i8
  %14612 = and i8 %14611, 1
  %14613 = xor i8 %14612, 1
  store i8 %14613, i8* %39, align 1
  %14614 = xor i32 %14604, %14598
  %14615 = xor i32 %14614, %14605
  %14616 = lshr i32 %14615, 4
  %14617 = trunc i32 %14616 to i8
  %14618 = and i8 %14617, 1
  store i8 %14618, i8* %45, align 1
  %14619 = icmp eq i32 %14605, 0
  %14620 = zext i1 %14619 to i8
  store i8 %14620, i8* %48, align 1
  %14621 = lshr i32 %14605, 31
  %14622 = trunc i32 %14621 to i8
  store i8 %14622, i8* %51, align 1
  %14623 = lshr i32 %14598, 31
  %14624 = lshr i32 %14604, 31
  %14625 = xor i32 %14624, %14623
  %14626 = xor i32 %14621, %14623
  %14627 = add nuw nsw i32 %14626, %14625
  %14628 = icmp eq i32 %14627, 2
  %14629 = zext i1 %14628 to i8
  store i8 %14629, i8* %57, align 1
  %14630 = add i64 %14600, -76
  %14631 = add i64 %14525, 39
  store i64 %14631, i64* %3, align 8
  %14632 = inttoptr i64 %14630 to i32*
  %14633 = load i32, i32* %14632, align 4
  %14634 = add i32 %14633, %14605
  %14635 = zext i32 %14634 to i64
  store i64 %14635, i64* %RCX.i4260.pre-phi, align 8
  %14636 = icmp ult i32 %14634, %14605
  %14637 = icmp ult i32 %14634, %14633
  %14638 = or i1 %14636, %14637
  %14639 = zext i1 %14638 to i8
  store i8 %14639, i8* %32, align 1
  %14640 = and i32 %14634, 255
  %14641 = tail call i32 @llvm.ctpop.i32(i32 %14640)
  %14642 = trunc i32 %14641 to i8
  %14643 = and i8 %14642, 1
  %14644 = xor i8 %14643, 1
  store i8 %14644, i8* %39, align 1
  %14645 = xor i32 %14633, %14605
  %14646 = xor i32 %14645, %14634
  %14647 = lshr i32 %14646, 4
  %14648 = trunc i32 %14647 to i8
  %14649 = and i8 %14648, 1
  store i8 %14649, i8* %45, align 1
  %14650 = icmp eq i32 %14634, 0
  %14651 = zext i1 %14650 to i8
  store i8 %14651, i8* %48, align 1
  %14652 = lshr i32 %14634, 31
  %14653 = trunc i32 %14652 to i8
  store i8 %14653, i8* %51, align 1
  %14654 = lshr i32 %14633, 31
  %14655 = xor i32 %14652, %14621
  %14656 = xor i32 %14652, %14654
  %14657 = add nuw nsw i32 %14655, %14656
  %14658 = icmp eq i32 %14657, 2
  %14659 = zext i1 %14658 to i8
  store i8 %14659, i8* %57, align 1
  %14660 = sext i32 %14634 to i64
  store i64 %14660, i64* %RDX.i4317.pre-phi, align 8
  %14661 = shl nsw i64 %14660, 2
  %14662 = add i64 %14594, %14661
  %14663 = add i64 %14525, 46
  store i64 %14663, i64* %3, align 8
  %14664 = inttoptr i64 %14662 to i32*
  %14665 = load i32, i32* %14664, align 4
  store i8 0, i8* %32, align 1
  %14666 = and i32 %14665, 255
  %14667 = tail call i32 @llvm.ctpop.i32(i32 %14666)
  %14668 = trunc i32 %14667 to i8
  %14669 = and i8 %14668, 1
  %14670 = xor i8 %14669, 1
  store i8 %14670, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %14671 = icmp eq i32 %14665, 0
  %14672 = zext i1 %14671 to i8
  store i8 %14672, i8* %48, align 1
  %14673 = lshr i32 %14665, 31
  %14674 = trunc i32 %14673 to i8
  store i8 %14674, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v567 = select i1 %14671, i64 52, i64 307
  %14675 = add i64 %14525, %.v567
  store i64 %14675, i64* %3, align 8
  br i1 %14671, label %block_4223a4, label %block_.L_4224a3

block_4223a4:                                     ; preds = %block_422370
  %14676 = load i64, i64* %RBP.i, align 8
  %14677 = add i64 %14676, -132
  %14678 = add i64 %14675, 6
  store i64 %14678, i64* %3, align 8
  %14679 = inttoptr i64 %14677 to i32*
  %14680 = load i32, i32* %14679, align 4
  %14681 = zext i32 %14680 to i64
  store i64 %14681, i64* %RAX.i3587.phi.trans.insert, align 8
  %14682 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %14682, i64* %RCX.i4260.pre-phi, align 8
  %14683 = add i64 %14676, -96
  %14684 = add i64 %14675, 17
  store i64 %14684, i64* %3, align 8
  %14685 = inttoptr i64 %14683 to i32*
  %14686 = load i32, i32* %14685, align 4
  %14687 = zext i32 %14686 to i64
  store i64 %14687, i64* %RDX.i4317.pre-phi, align 8
  %14688 = add i64 %14676, -136
  %14689 = add i64 %14675, 23
  store i64 %14689, i64* %3, align 8
  %14690 = inttoptr i64 %14688 to i32*
  %14691 = load i32, i32* %14690, align 4
  %14692 = zext i32 %14691 to i64
  store i64 %14692, i64* %RSI.i739, align 8
  %14693 = add i64 %14676, -384
  %14694 = add i64 %14675, 30
  store i64 %14694, i64* %3, align 8
  %14695 = inttoptr i64 %14693 to i64*
  store i64 %14682, i64* %14695, align 8
  %14696 = load i32, i32* %ESI.i1656, align 4
  %14697 = zext i32 %14696 to i64
  %14698 = load i64, i64* %3, align 8
  store i64 %14697, i64* %RCX.i4260.pre-phi, align 8
  %14699 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %14700 = add i64 %14698, 4
  store i64 %14700, i64* %3, align 8
  %14701 = trunc i32 %14696 to i5
  switch i5 %14701, label %14708 [
    i5 0, label %routine_shll__cl___edx.exit1911
    i5 1, label %14702
  ]

; <label>:14702:                                  ; preds = %block_4223a4
  %14703 = trunc i64 %14699 to i32
  %14704 = shl i32 %14703, 1
  %14705 = icmp slt i32 %14703, 0
  %14706 = icmp slt i32 %14704, 0
  %14707 = xor i1 %14705, %14706
  br label %14718

; <label>:14708:                                  ; preds = %block_4223a4
  %14709 = and i32 %14696, 31
  %14710 = zext i32 %14709 to i64
  %14711 = add nuw nsw i64 %14710, 4294967295
  %14712 = and i64 %14699, 4294967295
  %14713 = and i64 %14711, 4294967295
  %14714 = shl i64 %14712, %14713
  %14715 = trunc i64 %14714 to i32
  %14716 = icmp slt i32 %14715, 0
  %14717 = shl i32 %14715, 1
  br label %14718

; <label>:14718:                                  ; preds = %14708, %14702
  %14719 = phi i1 [ %14705, %14702 ], [ %14716, %14708 ]
  %14720 = phi i1 [ %14707, %14702 ], [ false, %14708 ]
  %14721 = phi i32 [ %14704, %14702 ], [ %14717, %14708 ]
  %14722 = zext i32 %14721 to i64
  store i64 %14722, i64* %RDX.i4317.pre-phi, align 8
  %14723 = zext i1 %14719 to i8
  store i8 %14723, i8* %32, align 1
  %14724 = and i32 %14721, 254
  %14725 = tail call i32 @llvm.ctpop.i32(i32 %14724)
  %14726 = trunc i32 %14725 to i8
  %14727 = and i8 %14726, 1
  %14728 = xor i8 %14727, 1
  store i8 %14728, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %14729 = icmp eq i32 %14721, 0
  %14730 = zext i1 %14729 to i8
  store i8 %14730, i8* %48, align 1
  %14731 = lshr i32 %14721, 31
  %14732 = trunc i32 %14731 to i8
  store i8 %14732, i8* %51, align 1
  %14733 = zext i1 %14720 to i8
  store i8 %14733, i8* %57, align 1
  br label %routine_shll__cl___edx.exit1911

routine_shll__cl___edx.exit1911:                  ; preds = %14718, %block_4223a4
  %14734 = phi i64 [ %14722, %14718 ], [ %14699, %block_4223a4 ]
  %14735 = load i64, i64* %RBP.i, align 8
  %14736 = add i64 %14735, -152
  %14737 = add i64 %14698, 10
  store i64 %14737, i64* %3, align 8
  %14738 = trunc i64 %14734 to i32
  %14739 = inttoptr i64 %14736 to i32*
  %14740 = load i32, i32* %14739, align 4
  %14741 = sub i32 %14738, %14740
  %14742 = zext i32 %14741 to i64
  store i64 %14742, i64* %RDX.i4317.pre-phi, align 8
  %14743 = icmp ult i32 %14738, %14740
  %14744 = zext i1 %14743 to i8
  store i8 %14744, i8* %32, align 1
  %14745 = and i32 %14741, 255
  %14746 = tail call i32 @llvm.ctpop.i32(i32 %14745)
  %14747 = trunc i32 %14746 to i8
  %14748 = and i8 %14747, 1
  %14749 = xor i8 %14748, 1
  store i8 %14749, i8* %39, align 1
  %14750 = xor i32 %14740, %14738
  %14751 = xor i32 %14750, %14741
  %14752 = lshr i32 %14751, 4
  %14753 = trunc i32 %14752 to i8
  %14754 = and i8 %14753, 1
  store i8 %14754, i8* %45, align 1
  %14755 = icmp eq i32 %14741, 0
  %14756 = zext i1 %14755 to i8
  store i8 %14756, i8* %48, align 1
  %14757 = lshr i32 %14741, 31
  %14758 = trunc i32 %14757 to i8
  store i8 %14758, i8* %51, align 1
  %14759 = lshr i32 %14738, 31
  %14760 = lshr i32 %14740, 31
  %14761 = xor i32 %14760, %14759
  %14762 = xor i32 %14757, %14759
  %14763 = add nuw nsw i32 %14762, %14761
  %14764 = icmp eq i32 %14763, 2
  %14765 = zext i1 %14764 to i8
  store i8 %14765, i8* %57, align 1
  %14766 = sext i32 %14741 to i64
  store i64 %14766, i64* %RDI.i1133, align 8
  %14767 = add i64 %14735, -384
  %14768 = add i64 %14698, 20
  store i64 %14768, i64* %3, align 8
  %14769 = inttoptr i64 %14767 to i64*
  %14770 = load i64, i64* %14769, align 8
  store i64 %14770, i64* %R8.i5602, align 8
  %14771 = shl nsw i64 %14766, 2
  %14772 = add i64 %14771, %14770
  %14773 = add i64 %14698, 24
  store i64 %14773, i64* %3, align 8
  %14774 = inttoptr i64 %14772 to i32*
  %14775 = load i32, i32* %14774, align 4
  %14776 = zext i32 %14775 to i64
  store i64 %14776, i64* %RDX.i4317.pre-phi, align 8
  %14777 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %14777, i64* %RDI.i1133, align 8
  %14778 = add i64 %14735, -100
  %14779 = add i64 %14698, 35
  store i64 %14779, i64* %3, align 8
  %14780 = inttoptr i64 %14778 to i32*
  %14781 = load i32, i32* %14780, align 4
  %14782 = zext i32 %14781 to i64
  store i64 %14782, i64* %RSI.i739, align 8
  %14783 = add i64 %14735, -136
  %14784 = add i64 %14698, 41
  store i64 %14784, i64* %3, align 8
  %14785 = inttoptr i64 %14783 to i32*
  %14786 = load i32, i32* %14785, align 4
  %14787 = zext i32 %14786 to i64
  store i64 %14787, i64* %RCX.i4260.pre-phi, align 8
  %14788 = add i64 %14698, 43
  store i64 %14788, i64* %3, align 8
  %14789 = trunc i32 %14786 to i5
  switch i5 %14789, label %14795 [
    i5 0, label %routine_shll__cl___esi.exit1886
    i5 1, label %14790
  ]

; <label>:14790:                                  ; preds = %routine_shll__cl___edx.exit1911
  %14791 = shl i32 %14781, 1
  %14792 = icmp slt i32 %14781, 0
  %14793 = icmp slt i32 %14791, 0
  %14794 = xor i1 %14792, %14793
  br label %14804

; <label>:14795:                                  ; preds = %routine_shll__cl___edx.exit1911
  %14796 = and i32 %14786, 31
  %14797 = zext i32 %14796 to i64
  %14798 = add nuw nsw i64 %14797, 4294967295
  %14799 = and i64 %14798, 4294967295
  %14800 = shl i64 %14782, %14799
  %14801 = trunc i64 %14800 to i32
  %14802 = icmp slt i32 %14801, 0
  %14803 = shl i32 %14801, 1
  br label %14804

; <label>:14804:                                  ; preds = %14795, %14790
  %14805 = phi i1 [ %14792, %14790 ], [ %14802, %14795 ]
  %14806 = phi i1 [ %14794, %14790 ], [ false, %14795 ]
  %14807 = phi i32 [ %14791, %14790 ], [ %14803, %14795 ]
  %14808 = zext i32 %14807 to i64
  store i64 %14808, i64* %RSI.i739, align 8
  %14809 = zext i1 %14805 to i8
  store i8 %14809, i8* %32, align 1
  %14810 = and i32 %14807, 254
  %14811 = tail call i32 @llvm.ctpop.i32(i32 %14810)
  %14812 = trunc i32 %14811 to i8
  %14813 = and i8 %14812, 1
  %14814 = xor i8 %14813, 1
  store i8 %14814, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %14815 = icmp eq i32 %14807, 0
  %14816 = zext i1 %14815 to i8
  store i8 %14816, i8* %48, align 1
  %14817 = lshr i32 %14807, 31
  %14818 = trunc i32 %14817 to i8
  store i8 %14818, i8* %51, align 1
  %14819 = zext i1 %14806 to i8
  store i8 %14819, i8* %57, align 1
  br label %routine_shll__cl___esi.exit1886

routine_shll__cl___esi.exit1886:                  ; preds = %14804, %routine_shll__cl___edx.exit1911
  %14820 = phi i32 [ %14807, %14804 ], [ %14781, %routine_shll__cl___edx.exit1911 ]
  %14821 = add i64 %14735, -156
  %14822 = add i64 %14698, 49
  store i64 %14822, i64* %3, align 8
  %14823 = inttoptr i64 %14821 to i32*
  %14824 = load i32, i32* %14823, align 4
  %14825 = sub i32 %14820, %14824
  %14826 = zext i32 %14825 to i64
  store i64 %14826, i64* %RSI.i739, align 8
  %14827 = icmp ult i32 %14820, %14824
  %14828 = zext i1 %14827 to i8
  store i8 %14828, i8* %32, align 1
  %14829 = and i32 %14825, 255
  %14830 = tail call i32 @llvm.ctpop.i32(i32 %14829)
  %14831 = trunc i32 %14830 to i8
  %14832 = and i8 %14831, 1
  %14833 = xor i8 %14832, 1
  store i8 %14833, i8* %39, align 1
  %14834 = xor i32 %14824, %14820
  %14835 = xor i32 %14834, %14825
  %14836 = lshr i32 %14835, 4
  %14837 = trunc i32 %14836 to i8
  %14838 = and i8 %14837, 1
  store i8 %14838, i8* %45, align 1
  %14839 = icmp eq i32 %14825, 0
  %14840 = zext i1 %14839 to i8
  store i8 %14840, i8* %48, align 1
  %14841 = lshr i32 %14825, 31
  %14842 = trunc i32 %14841 to i8
  store i8 %14842, i8* %51, align 1
  %14843 = lshr i32 %14820, 31
  %14844 = lshr i32 %14824, 31
  %14845 = xor i32 %14844, %14843
  %14846 = xor i32 %14841, %14843
  %14847 = add nuw nsw i32 %14846, %14845
  %14848 = icmp eq i32 %14847, 2
  %14849 = zext i1 %14848 to i8
  store i8 %14849, i8* %57, align 1
  %14850 = sext i32 %14825 to i64
  store i64 %14850, i64* %R9.i5580, align 8
  %14851 = shl nsw i64 %14850, 2
  %14852 = add i64 %14777, %14851
  %14853 = add i64 %14698, 56
  store i64 %14853, i64* %3, align 8
  %14854 = inttoptr i64 %14852 to i32*
  %14855 = load i32, i32* %14854, align 4
  %14856 = add i32 %14855, %14775
  %14857 = zext i32 %14856 to i64
  store i64 %14857, i64* %RDX.i4317.pre-phi, align 8
  %14858 = icmp ult i32 %14856, %14775
  %14859 = icmp ult i32 %14856, %14855
  %14860 = or i1 %14858, %14859
  %14861 = zext i1 %14860 to i8
  store i8 %14861, i8* %32, align 1
  %14862 = and i32 %14856, 255
  %14863 = tail call i32 @llvm.ctpop.i32(i32 %14862)
  %14864 = trunc i32 %14863 to i8
  %14865 = and i8 %14864, 1
  %14866 = xor i8 %14865, 1
  store i8 %14866, i8* %39, align 1
  %14867 = xor i32 %14855, %14775
  %14868 = xor i32 %14867, %14856
  %14869 = lshr i32 %14868, 4
  %14870 = trunc i32 %14869 to i8
  %14871 = and i8 %14870, 1
  store i8 %14871, i8* %45, align 1
  %14872 = icmp eq i32 %14856, 0
  %14873 = zext i1 %14872 to i8
  store i8 %14873, i8* %48, align 1
  %14874 = lshr i32 %14856, 31
  %14875 = trunc i32 %14874 to i8
  store i8 %14875, i8* %51, align 1
  %14876 = lshr i32 %14775, 31
  %14877 = lshr i32 %14855, 31
  %14878 = xor i32 %14874, %14876
  %14879 = xor i32 %14874, %14877
  %14880 = add nuw nsw i32 %14878, %14879
  %14881 = icmp eq i32 %14880, 2
  %14882 = zext i1 %14881 to i8
  store i8 %14882, i8* %57, align 1
  %14883 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %14884 = shl i64 %14883, 32
  %14885 = ashr exact i64 %14884, 32
  %14886 = sext i32 %14856 to i64
  %14887 = mul nsw i64 %14886, %14885
  %14888 = shl i64 %14887, 32
  %14889 = ashr i64 %14888, 47
  %14890 = lshr i64 %14889, 1
  %14891 = trunc i64 %14889 to i8
  %14892 = and i8 %14891, 1
  %14893 = trunc i64 %14890 to i32
  %14894 = and i64 %14890, 4294967295
  store i64 %14894, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %14892, i8* %32, align 1
  %14895 = and i32 %14893, 255
  %14896 = tail call i32 @llvm.ctpop.i32(i32 %14895)
  %14897 = trunc i32 %14896 to i8
  %14898 = and i8 %14897, 1
  %14899 = xor i8 %14898, 1
  store i8 %14899, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %14900 = icmp eq i32 %14893, 0
  %14901 = zext i1 %14900 to i8
  store i8 %14901, i8* %48, align 1
  %14902 = lshr i64 %14889, 32
  %14903 = trunc i64 %14902 to i8
  %14904 = and i8 %14903, 1
  store i8 %14904, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %14905 = load i64, i64* %RBP.i, align 8
  %14906 = add i64 %14905, -104
  %14907 = trunc i64 %14890 to i32
  %14908 = add i64 %14698, 65
  store i64 %14908, i64* %3, align 8
  %14909 = inttoptr i64 %14906 to i32*
  store i32 %14907, i32* %14909, align 4
  %14910 = load i64, i64* %RBP.i, align 8
  %14911 = add i64 %14910, -128
  %14912 = load i64, i64* %3, align 8
  %14913 = add i64 %14912, 4
  store i64 %14913, i64* %3, align 8
  %14914 = inttoptr i64 %14911 to i64*
  %14915 = load i64, i64* %14914, align 8
  store i64 %14915, i64* %RDI.i1133, align 8
  %14916 = add i64 %14910, -32
  %14917 = add i64 %14912, 8
  store i64 %14917, i64* %3, align 8
  %14918 = inttoptr i64 %14916 to i64*
  %14919 = load i64, i64* %14918, align 8
  store i64 %14919, i64* %RSI.i739, align 8
  %14920 = add i64 %14910, -112
  %14921 = add i64 %14912, 12
  store i64 %14921, i64* %3, align 8
  %14922 = inttoptr i64 %14920 to i64*
  %14923 = load i64, i64* %14922, align 8
  store i64 %14923, i64* %RDX.i4317.pre-phi, align 8
  %14924 = add i64 %14910, -140
  %14925 = add i64 %14912, 18
  store i64 %14925, i64* %3, align 8
  %14926 = inttoptr i64 %14924 to i32*
  %14927 = load i32, i32* %14926, align 4
  %14928 = zext i32 %14927 to i64
  store i64 %14928, i64* %RCX.i4260.pre-phi, align 8
  %14929 = add i64 %14910, -144
  %14930 = add i64 %14912, 25
  store i64 %14930, i64* %3, align 8
  %14931 = inttoptr i64 %14929 to i32*
  %14932 = load i32, i32* %14931, align 4
  %14933 = zext i32 %14932 to i64
  store i64 %14933, i64* %R8.i5602, align 8
  %14934 = add i64 %14910, -148
  %14935 = add i64 %14912, 32
  store i64 %14935, i64* %3, align 8
  %14936 = inttoptr i64 %14934 to i32*
  %14937 = load i32, i32* %14936, align 4
  %14938 = zext i32 %14937 to i64
  store i64 %14938, i64* %R9.i5580, align 8
  %14939 = add i64 %14910, -104
  %14940 = add i64 %14912, 35
  store i64 %14940, i64* %3, align 8
  %14941 = inttoptr i64 %14939 to i32*
  %14942 = load i32, i32* %14941, align 4
  %14943 = zext i32 %14942 to i64
  store i64 %14943, i64* %RAX.i3587.phi.trans.insert, align 8
  %14944 = add i64 %14910, -80
  %14945 = add i64 %14912, 39
  store i64 %14945, i64* %3, align 8
  %14946 = inttoptr i64 %14944 to i32*
  %14947 = load i32, i32* %14946, align 4
  %14948 = zext i32 %14947 to i64
  store i64 %14948, i64* %68, align 8
  %14949 = add i64 %14910, -96
  %14950 = add i64 %14912, 43
  store i64 %14950, i64* %3, align 8
  %14951 = inttoptr i64 %14949 to i32*
  %14952 = load i32, i32* %14951, align 4
  %14953 = zext i32 %14952 to i64
  store i64 %14953, i64* %R11.i, align 8
  %14954 = add i64 %14910, -100
  %14955 = add i64 %14912, 46
  store i64 %14955, i64* %3, align 8
  %14956 = inttoptr i64 %14954 to i32*
  %14957 = load i32, i32* %14956, align 4
  %14958 = zext i32 %14957 to i64
  store i64 %14958, i64* %RBX.i615, align 8
  %14959 = load i32*, i32** %2119, align 8
  %14960 = add i64 %14912, 49
  store i64 %14960, i64* %3, align 8
  store i32 %14942, i32* %14959, align 4
  %14961 = load i64, i64* %6, align 8
  %14962 = add i64 %14961, 8
  %14963 = load i32, i32* %R10D.i761, align 4
  %14964 = load i64, i64* %3, align 8
  %14965 = add i64 %14964, 5
  store i64 %14965, i64* %3, align 8
  %14966 = inttoptr i64 %14962 to i32*
  store i32 %14963, i32* %14966, align 4
  %14967 = load i64, i64* %6, align 8
  %14968 = add i64 %14967, 16
  %14969 = load i32, i32* %R11D.i5540, align 4
  %14970 = load i64, i64* %3, align 8
  %14971 = add i64 %14970, 5
  store i64 %14971, i64* %3, align 8
  %14972 = inttoptr i64 %14968 to i32*
  store i32 %14969, i32* %14972, align 4
  %14973 = load i64, i64* %6, align 8
  %14974 = add i64 %14973, 24
  %14975 = load i32, i32* %EBX.i5525, align 4
  %14976 = load i64, i64* %3, align 8
  %14977 = add i64 %14976, 4
  store i64 %14977, i64* %3, align 8
  %14978 = inttoptr i64 %14974 to i32*
  store i32 %14975, i32* %14978, align 4
  %14979 = load i64, i64* %3, align 8
  %14980 = add i64 %14979, -8082
  %14981 = add i64 %14979, 5
  %14982 = load i64, i64* %6, align 8
  %14983 = add i64 %14982, -8
  %14984 = inttoptr i64 %14983 to i64*
  store i64 %14981, i64* %14984, align 8
  store i64 %14983, i64* %6, align 8
  store i64 %14980, i64* %3, align 8
  %call2_422442 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %14980, %struct.Memory* %14491)
  %14985 = load i64, i64* %RBP.i, align 8
  %14986 = add i64 %14985, -104
  %14987 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %14988 = load i64, i64* %3, align 8
  %14989 = add i64 %14988, 3
  store i64 %14989, i64* %3, align 8
  %14990 = inttoptr i64 %14986 to i32*
  store i32 %14987, i32* %14990, align 4
  %14991 = load i64, i64* %RBP.i, align 8
  %14992 = add i64 %14991, -104
  %14993 = load i64, i64* %3, align 8
  %14994 = add i64 %14993, 3
  store i64 %14994, i64* %3, align 8
  %14995 = inttoptr i64 %14992 to i32*
  %14996 = load i32, i32* %14995, align 4
  %14997 = zext i32 %14996 to i64
  store i64 %14997, i64* %RAX.i3587.phi.trans.insert, align 8
  %14998 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %14998, i64* %RDX.i4317.pre-phi, align 8
  %14999 = add i64 %14991, -100
  %15000 = add i64 %14993, 14
  store i64 %15000, i64* %3, align 8
  %15001 = inttoptr i64 %14999 to i32*
  %15002 = load i32, i32* %15001, align 4
  %15003 = zext i32 %15002 to i64
  store i64 %15003, i64* %RCX.i4260.pre-phi, align 8
  %15004 = add i64 %14991, -164
  %15005 = add i64 %14993, 20
  store i64 %15005, i64* %3, align 8
  %15006 = inttoptr i64 %15004 to i32*
  %15007 = load i32, i32* %15006, align 4
  %15008 = sub i32 %15002, %15007
  %15009 = zext i32 %15008 to i64
  store i64 %15009, i64* %RCX.i4260.pre-phi, align 8
  %15010 = icmp ult i32 %15002, %15007
  %15011 = zext i1 %15010 to i8
  store i8 %15011, i8* %32, align 1
  %15012 = and i32 %15008, 255
  %15013 = tail call i32 @llvm.ctpop.i32(i32 %15012)
  %15014 = trunc i32 %15013 to i8
  %15015 = and i8 %15014, 1
  %15016 = xor i8 %15015, 1
  store i8 %15016, i8* %39, align 1
  %15017 = xor i32 %15007, %15002
  %15018 = xor i32 %15017, %15008
  %15019 = lshr i32 %15018, 4
  %15020 = trunc i32 %15019 to i8
  %15021 = and i8 %15020, 1
  store i8 %15021, i8* %45, align 1
  %15022 = icmp eq i32 %15008, 0
  %15023 = zext i1 %15022 to i8
  store i8 %15023, i8* %48, align 1
  %15024 = lshr i32 %15008, 31
  %15025 = trunc i32 %15024 to i8
  store i8 %15025, i8* %51, align 1
  %15026 = lshr i32 %15002, 31
  %15027 = lshr i32 %15007, 31
  %15028 = xor i32 %15027, %15026
  %15029 = xor i32 %15024, %15026
  %15030 = add nuw nsw i32 %15029, %15028
  %15031 = icmp eq i32 %15030, 2
  %15032 = zext i1 %15031 to i8
  store i8 %15032, i8* %57, align 1
  %15033 = add i64 %14991, -76
  %15034 = add i64 %14993, 23
  store i64 %15034, i64* %3, align 8
  %15035 = inttoptr i64 %15033 to i32*
  %15036 = load i32, i32* %15035, align 4
  %15037 = add i32 %15036, %15008
  %15038 = zext i32 %15037 to i64
  store i64 %15038, i64* %RCX.i4260.pre-phi, align 8
  %15039 = icmp ult i32 %15037, %15008
  %15040 = icmp ult i32 %15037, %15036
  %15041 = or i1 %15039, %15040
  %15042 = zext i1 %15041 to i8
  store i8 %15042, i8* %32, align 1
  %15043 = and i32 %15037, 255
  %15044 = tail call i32 @llvm.ctpop.i32(i32 %15043)
  %15045 = trunc i32 %15044 to i8
  %15046 = and i8 %15045, 1
  %15047 = xor i8 %15046, 1
  store i8 %15047, i8* %39, align 1
  %15048 = xor i32 %15036, %15008
  %15049 = xor i32 %15048, %15037
  %15050 = lshr i32 %15049, 4
  %15051 = trunc i32 %15050 to i8
  %15052 = and i8 %15051, 1
  store i8 %15052, i8* %45, align 1
  %15053 = icmp eq i32 %15037, 0
  %15054 = zext i1 %15053 to i8
  store i8 %15054, i8* %48, align 1
  %15055 = lshr i32 %15037, 31
  %15056 = trunc i32 %15055 to i8
  store i8 %15056, i8* %51, align 1
  %15057 = lshr i32 %15036, 31
  %15058 = xor i32 %15055, %15024
  %15059 = xor i32 %15055, %15057
  %15060 = add nuw nsw i32 %15058, %15059
  %15061 = icmp eq i32 %15060, 2
  %15062 = zext i1 %15061 to i8
  store i8 %15062, i8* %57, align 1
  %15063 = sext i32 %15037 to i64
  store i64 %15063, i64* %RSI.i739, align 8
  %15064 = shl nsw i64 %15063, 3
  %15065 = add i64 %14998, %15064
  %15066 = add i64 %14993, 30
  store i64 %15066, i64* %3, align 8
  %15067 = inttoptr i64 %15065 to i64*
  %15068 = load i64, i64* %15067, align 8
  store i64 %15068, i64* %RDX.i4317.pre-phi, align 8
  %15069 = load i64, i64* %RBP.i, align 8
  %15070 = add i64 %15069, -96
  %15071 = add i64 %14993, 33
  store i64 %15071, i64* %3, align 8
  %15072 = inttoptr i64 %15070 to i32*
  %15073 = load i32, i32* %15072, align 4
  %15074 = zext i32 %15073 to i64
  store i64 %15074, i64* %RCX.i4260.pre-phi, align 8
  %15075 = add i64 %15069, -160
  %15076 = add i64 %14993, 39
  store i64 %15076, i64* %3, align 8
  %15077 = inttoptr i64 %15075 to i32*
  %15078 = load i32, i32* %15077, align 4
  %15079 = sub i32 %15073, %15078
  %15080 = zext i32 %15079 to i64
  store i64 %15080, i64* %RCX.i4260.pre-phi, align 8
  %15081 = icmp ult i32 %15073, %15078
  %15082 = zext i1 %15081 to i8
  store i8 %15082, i8* %32, align 1
  %15083 = and i32 %15079, 255
  %15084 = tail call i32 @llvm.ctpop.i32(i32 %15083)
  %15085 = trunc i32 %15084 to i8
  %15086 = and i8 %15085, 1
  %15087 = xor i8 %15086, 1
  store i8 %15087, i8* %39, align 1
  %15088 = xor i32 %15078, %15073
  %15089 = xor i32 %15088, %15079
  %15090 = lshr i32 %15089, 4
  %15091 = trunc i32 %15090 to i8
  %15092 = and i8 %15091, 1
  store i8 %15092, i8* %45, align 1
  %15093 = icmp eq i32 %15079, 0
  %15094 = zext i1 %15093 to i8
  store i8 %15094, i8* %48, align 1
  %15095 = lshr i32 %15079, 31
  %15096 = trunc i32 %15095 to i8
  store i8 %15096, i8* %51, align 1
  %15097 = lshr i32 %15073, 31
  %15098 = lshr i32 %15078, 31
  %15099 = xor i32 %15098, %15097
  %15100 = xor i32 %15095, %15097
  %15101 = add nuw nsw i32 %15100, %15099
  %15102 = icmp eq i32 %15101, 2
  %15103 = zext i1 %15102 to i8
  store i8 %15103, i8* %57, align 1
  %15104 = add i64 %15069, -76
  %15105 = add i64 %14993, 42
  store i64 %15105, i64* %3, align 8
  %15106 = inttoptr i64 %15104 to i32*
  %15107 = load i32, i32* %15106, align 4
  %15108 = add i32 %15107, %15079
  %15109 = zext i32 %15108 to i64
  store i64 %15109, i64* %RCX.i4260.pre-phi, align 8
  %15110 = icmp ult i32 %15108, %15079
  %15111 = icmp ult i32 %15108, %15107
  %15112 = or i1 %15110, %15111
  %15113 = zext i1 %15112 to i8
  store i8 %15113, i8* %32, align 1
  %15114 = and i32 %15108, 255
  %15115 = tail call i32 @llvm.ctpop.i32(i32 %15114)
  %15116 = trunc i32 %15115 to i8
  %15117 = and i8 %15116, 1
  %15118 = xor i8 %15117, 1
  store i8 %15118, i8* %39, align 1
  %15119 = xor i32 %15107, %15079
  %15120 = xor i32 %15119, %15108
  %15121 = lshr i32 %15120, 4
  %15122 = trunc i32 %15121 to i8
  %15123 = and i8 %15122, 1
  store i8 %15123, i8* %45, align 1
  %15124 = icmp eq i32 %15108, 0
  %15125 = zext i1 %15124 to i8
  store i8 %15125, i8* %48, align 1
  %15126 = lshr i32 %15108, 31
  %15127 = trunc i32 %15126 to i8
  store i8 %15127, i8* %51, align 1
  %15128 = lshr i32 %15107, 31
  %15129 = xor i32 %15126, %15095
  %15130 = xor i32 %15126, %15128
  %15131 = add nuw nsw i32 %15129, %15130
  %15132 = icmp eq i32 %15131, 2
  %15133 = zext i1 %15132 to i8
  store i8 %15133, i8* %57, align 1
  %15134 = sext i32 %15108 to i64
  store i64 %15134, i64* %RSI.i739, align 8
  %15135 = shl nsw i64 %15134, 2
  %15136 = add i64 %15068, %15135
  %15137 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %15138 = add i64 %14993, 48
  store i64 %15138, i64* %3, align 8
  %15139 = inttoptr i64 %15136 to i32*
  store i32 %15137, i32* %15139, align 4
  %15140 = load i64, i64* %RBP.i, align 8
  %15141 = add i64 %15140, -104
  %15142 = load i64, i64* %3, align 8
  %15143 = add i64 %15142, 3
  store i64 %15143, i64* %3, align 8
  %15144 = inttoptr i64 %15141 to i32*
  %15145 = load i32, i32* %15144, align 4
  %15146 = zext i32 %15145 to i64
  store i64 %15146, i64* %RAX.i3587.phi.trans.insert, align 8
  %15147 = add i64 %15140, -80
  %15148 = add i64 %15142, 6
  store i64 %15148, i64* %3, align 8
  %15149 = inttoptr i64 %15147 to i32*
  %15150 = load i32, i32* %15149, align 4
  %15151 = sub i32 %15145, %15150
  %15152 = icmp ult i32 %15145, %15150
  %15153 = zext i1 %15152 to i8
  store i8 %15153, i8* %32, align 1
  %15154 = and i32 %15151, 255
  %15155 = tail call i32 @llvm.ctpop.i32(i32 %15154)
  %15156 = trunc i32 %15155 to i8
  %15157 = and i8 %15156, 1
  %15158 = xor i8 %15157, 1
  store i8 %15158, i8* %39, align 1
  %15159 = xor i32 %15150, %15145
  %15160 = xor i32 %15159, %15151
  %15161 = lshr i32 %15160, 4
  %15162 = trunc i32 %15161 to i8
  %15163 = and i8 %15162, 1
  store i8 %15163, i8* %45, align 1
  %15164 = icmp eq i32 %15151, 0
  %15165 = zext i1 %15164 to i8
  store i8 %15165, i8* %48, align 1
  %15166 = lshr i32 %15151, 31
  %15167 = trunc i32 %15166 to i8
  store i8 %15167, i8* %51, align 1
  %15168 = lshr i32 %15145, 31
  %15169 = lshr i32 %15150, 31
  %15170 = xor i32 %15169, %15168
  %15171 = xor i32 %15166, %15168
  %15172 = add nuw nsw i32 %15171, %15170
  %15173 = icmp eq i32 %15172, 2
  %15174 = zext i1 %15173 to i8
  store i8 %15174, i8* %57, align 1
  %15175 = icmp ne i8 %15167, 0
  %15176 = xor i1 %15175, %15173
  %.v568 = select i1 %15176, i64 12, i64 36
  %15177 = add i64 %15142, %.v568
  store i64 %15177, i64* %3, align 8
  br i1 %15176, label %block_422486, label %block_.L_42249e

block_422486:                                     ; preds = %routine_shll__cl___esi.exit1886
  %15178 = add i64 %15140, -96
  %15179 = add i64 %15177, 3
  store i64 %15179, i64* %3, align 8
  %15180 = inttoptr i64 %15178 to i32*
  %15181 = load i32, i32* %15180, align 4
  %15182 = zext i32 %15181 to i64
  store i64 %15182, i64* %RAX.i3587.phi.trans.insert, align 8
  %15183 = add i64 %15140, -168
  %15184 = add i64 %15177, 9
  store i64 %15184, i64* %3, align 8
  %15185 = inttoptr i64 %15183 to i32*
  store i32 %15181, i32* %15185, align 4
  %15186 = load i64, i64* %RBP.i, align 8
  %15187 = add i64 %15186, -100
  %15188 = load i64, i64* %3, align 8
  %15189 = add i64 %15188, 3
  store i64 %15189, i64* %3, align 8
  %15190 = inttoptr i64 %15187 to i32*
  %15191 = load i32, i32* %15190, align 4
  %15192 = zext i32 %15191 to i64
  store i64 %15192, i64* %RAX.i3587.phi.trans.insert, align 8
  %15193 = add i64 %15186, -172
  %15194 = add i64 %15188, 9
  store i64 %15194, i64* %3, align 8
  %15195 = inttoptr i64 %15193 to i32*
  store i32 %15191, i32* %15195, align 4
  %15196 = load i64, i64* %RBP.i, align 8
  %15197 = add i64 %15196, -104
  %15198 = load i64, i64* %3, align 8
  %15199 = add i64 %15198, 3
  store i64 %15199, i64* %3, align 8
  %15200 = inttoptr i64 %15197 to i32*
  %15201 = load i32, i32* %15200, align 4
  %15202 = zext i32 %15201 to i64
  store i64 %15202, i64* %RAX.i3587.phi.trans.insert, align 8
  %15203 = add i64 %15196, -80
  %15204 = add i64 %15198, 6
  store i64 %15204, i64* %3, align 8
  %15205 = inttoptr i64 %15203 to i32*
  store i32 %15201, i32* %15205, align 4
  %.pre330 = load i64, i64* %3, align 8
  br label %block_.L_42249e

block_.L_42249e:                                  ; preds = %routine_shll__cl___esi.exit1886, %block_422486
  %15206 = phi i64 [ %15177, %routine_shll__cl___esi.exit1886 ], [ %.pre330, %block_422486 ]
  %15207 = add i64 %15206, 5
  store i64 %15207, i64* %3, align 8
  br label %block_.L_4224a3

block_.L_4224a3:                                  ; preds = %block_422370, %block_.L_42249e
  %15208 = phi i64 [ %14675, %block_422370 ], [ %15207, %block_.L_42249e ]
  %MEMORY.66 = phi %struct.Memory* [ %14491, %block_422370 ], [ %call2_422442, %block_.L_42249e ]
  %15209 = add i64 %15208, 5
  store i64 %15209, i64* %3, align 8
  %.pre331 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4224a8

block_.L_4224a8:                                  ; preds = %block_422357, %block_.L_422326, %block_.L_4224a3
  %15210 = phi i64 [ %14419, %block_.L_422326 ], [ %14493, %block_422357 ], [ %.pre331, %block_.L_4224a3 ]
  %15211 = phi i64 [ %14451, %block_.L_422326 ], [ %14525, %block_422357 ], [ %15209, %block_.L_4224a3 ]
  %MEMORY.67 = phi %struct.Memory* [ %14417, %block_.L_422326 ], [ %14491, %block_422357 ], [ %MEMORY.66, %block_.L_4224a3 ]
  %15212 = add i64 %15210, -188
  %15213 = add i64 %15211, 11
  store i64 %15213, i64* %3, align 8
  %15214 = inttoptr i64 %15212 to i32*
  %15215 = load i32, i32* %15214, align 4
  %15216 = add i32 %15215, 1
  %15217 = zext i32 %15216 to i64
  store i64 %15217, i64* %RAX.i3587.phi.trans.insert, align 8
  %15218 = icmp eq i32 %15215, -1
  %15219 = icmp eq i32 %15216, 0
  %15220 = or i1 %15218, %15219
  %15221 = zext i1 %15220 to i8
  store i8 %15221, i8* %32, align 1
  %15222 = and i32 %15216, 255
  %15223 = tail call i32 @llvm.ctpop.i32(i32 %15222)
  %15224 = trunc i32 %15223 to i8
  %15225 = and i8 %15224, 1
  %15226 = xor i8 %15225, 1
  store i8 %15226, i8* %39, align 1
  %15227 = xor i32 %15216, %15215
  %15228 = lshr i32 %15227, 4
  %15229 = trunc i32 %15228 to i8
  %15230 = and i8 %15229, 1
  store i8 %15230, i8* %45, align 1
  %15231 = zext i1 %15219 to i8
  store i8 %15231, i8* %48, align 1
  %15232 = lshr i32 %15216, 31
  %15233 = trunc i32 %15232 to i8
  store i8 %15233, i8* %51, align 1
  %15234 = lshr i32 %15215, 31
  %15235 = xor i32 %15232, %15234
  %15236 = add nuw nsw i32 %15235, %15232
  %15237 = icmp eq i32 %15236, 2
  %15238 = zext i1 %15237 to i8
  store i8 %15238, i8* %57, align 1
  %15239 = add i64 %15211, 20
  store i64 %15239, i64* %3, align 8
  store i32 %15216, i32* %15214, align 4
  %15240 = load i64, i64* %3, align 8
  %15241 = add i64 %15240, -849
  store i64 %15241, i64* %3, align 8
  br label %block_.L_42216b

block_.L_4224c1:                                  ; preds = %routine_idivl__esi.exit2277
  %15242 = add i64 %13381, -34
  %15243 = add i64 %13412, 4
  store i64 %15243, i64* %3, align 8
  %15244 = inttoptr i64 %15242 to i16*
  %15245 = load i16, i16* %15244, align 2
  %15246 = sext i16 %15245 to i64
  %15247 = and i64 %15246, 4294967295
  store i64 %15247, i64* %RAX.i3587.phi.trans.insert, align 8
  %15248 = sext i16 %15245 to i32
  store i8 0, i8* %32, align 1
  %15249 = and i32 %15248, 255
  %15250 = tail call i32 @llvm.ctpop.i32(i32 %15249)
  %15251 = trunc i32 %15250 to i8
  %15252 = and i8 %15251, 1
  %15253 = xor i8 %15252, 1
  store i8 %15253, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %15254 = icmp eq i16 %15245, 0
  %15255 = zext i1 %15254 to i8
  store i8 %15255, i8* %48, align 1
  %15256 = lshr i32 %15248, 31
  %15257 = trunc i32 %15256 to i8
  store i8 %15257, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %15258 = icmp ne i8 %15257, 0
  %15259 = or i1 %15254, %15258
  %.v484 = select i1 %15259, i64 113, i64 13
  %15260 = add i64 %13412, %.v484
  store i64 %15260, i64* %3, align 8
  br i1 %15259, label %block_.L_422532, label %block_4224ce

block_4224ce:                                     ; preds = %block_.L_4224c1
  %15261 = add i64 %13381, -80
  %15262 = add i64 %15260, 3
  store i64 %15262, i64* %3, align 8
  %15263 = inttoptr i64 %15261 to i32*
  %15264 = load i32, i32* %15263, align 4
  %15265 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %15266 = sub i32 %15264, %15265
  %15267 = zext i32 %15266 to i64
  store i64 %15267, i64* %RAX.i3587.phi.trans.insert, align 8
  %15268 = icmp ult i32 %15264, %15265
  %15269 = zext i1 %15268 to i8
  store i8 %15269, i8* %32, align 1
  %15270 = and i32 %15266, 255
  %15271 = tail call i32 @llvm.ctpop.i32(i32 %15270)
  %15272 = trunc i32 %15271 to i8
  %15273 = and i8 %15272, 1
  %15274 = xor i8 %15273, 1
  store i8 %15274, i8* %39, align 1
  %15275 = xor i32 %15265, %15264
  %15276 = xor i32 %15275, %15266
  %15277 = lshr i32 %15276, 4
  %15278 = trunc i32 %15277 to i8
  %15279 = and i8 %15278, 1
  store i8 %15279, i8* %45, align 1
  %15280 = icmp eq i32 %15266, 0
  %15281 = zext i1 %15280 to i8
  store i8 %15281, i8* %48, align 1
  %15282 = lshr i32 %15266, 31
  %15283 = trunc i32 %15282 to i8
  store i8 %15283, i8* %51, align 1
  %15284 = lshr i32 %15264, 31
  %15285 = lshr i32 %15265, 31
  %15286 = xor i32 %15285, %15284
  %15287 = xor i32 %15282, %15284
  %15288 = add nuw nsw i32 %15287, %15286
  %15289 = icmp eq i32 %15288, 2
  %15290 = zext i1 %15289 to i8
  store i8 %15290, i8* %57, align 1
  %15291 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %15292 = load <2 x i32>, <2 x i32>* %15291, align 1
  %15293 = bitcast i64* %320 to <2 x i32>*
  %15294 = load <2 x i32>, <2 x i32>* %15293, align 1
  %15295 = sitofp i32 %15266 to float
  %15296 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %15295, float* %15296, align 1
  %15297 = extractelement <2 x i32> %15292, i32 1
  %15298 = getelementptr inbounds i8, i8* %315, i64 4
  %15299 = bitcast i8* %15298 to i32*
  store i32 %15297, i32* %15299, align 1
  %15300 = extractelement <2 x i32> %15294, i32 0
  %15301 = bitcast i64* %320 to i32*
  store i32 %15300, i32* %15301, align 1
  %15302 = extractelement <2 x i32> %15294, i32 1
  %15303 = getelementptr inbounds i8, i8* %315, i64 12
  %15304 = bitcast i8* %15303 to i32*
  store i32 %15302, i32* %15304, align 1
  %15305 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %15306 = load <2 x i32>, <2 x i32>* %15305, align 1
  %15307 = bitcast i64* %330 to <2 x i32>*
  %15308 = load <2 x i32>, <2 x i32>* %15307, align 1
  %15309 = sitofp i32 %15265 to float
  %15310 = bitcast %union.VectorReg* %322 to float*
  store float %15309, float* %15310, align 1
  %15311 = extractelement <2 x i32> %15306, i32 1
  %15312 = getelementptr inbounds i8, i8* %323, i64 4
  %15313 = bitcast i8* %15312 to i32*
  store i32 %15311, i32* %15313, align 1
  %15314 = extractelement <2 x i32> %15308, i32 0
  %15315 = bitcast i64* %330 to i32*
  store i32 %15314, i32* %15315, align 1
  %15316 = extractelement <2 x i32> %15308, i32 1
  %15317 = getelementptr inbounds i8, i8* %323, i64 12
  %15318 = bitcast i8* %15317 to i32*
  store i32 %15316, i32* %15318, align 1
  %15319 = add i64 %13381, -212
  %15320 = add i64 %15260, 31
  store i64 %15320, i64* %3, align 8
  %15321 = bitcast %union.VectorReg* %322 to <2 x float>*
  %15322 = load <2 x float>, <2 x float>* %15321, align 1
  %15323 = load <2 x i32>, <2 x i32>* %15307, align 1
  %15324 = inttoptr i64 %15319 to float*
  %15325 = load float, float* %15324, align 4
  %15326 = extractelement <2 x float> %15322, i32 0
  %15327 = fmul float %15326, %15325
  store float %15327, float* %15310, align 1
  %15328 = bitcast <2 x float> %15322 to <2 x i32>
  %15329 = extractelement <2 x i32> %15328, i32 1
  store i32 %15329, i32* %15313, align 1
  %15330 = extractelement <2 x i32> %15323, i32 0
  store i32 %15330, i32* %15315, align 1
  %15331 = extractelement <2 x i32> %15323, i32 1
  store i32 %15331, i32* %15318, align 1
  %15332 = add i64 %15260, 34
  store i64 %15332, i64* %3, align 8
  %15333 = load <2 x float>, <2 x float>* %15321, align 1
  %15334 = extractelement <2 x float> %15333, i32 0
  %15335 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %15336 = load <2 x float>, <2 x float>* %15335, align 1
  %15337 = extractelement <2 x float> %15336, i32 0
  %15338 = fcmp uno float %15334, %15337
  br i1 %15338, label %15339, label %15349

; <label>:15339:                                  ; preds = %block_4224ce
  %15340 = fadd float %15334, %15337
  %15341 = bitcast float %15340 to i32
  %15342 = and i32 %15341, 2143289344
  %15343 = icmp eq i32 %15342, 2139095040
  %15344 = and i32 %15341, 4194303
  %15345 = icmp ne i32 %15344, 0
  %15346 = and i1 %15343, %15345
  br i1 %15346, label %15347, label %15355

; <label>:15347:                                  ; preds = %15339
  %15348 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15332, %struct.Memory* %13384)
  %.pre332 = load i64, i64* %3, align 8
  %.pre333 = load i8, i8* %32, align 1
  %.pre334 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1724

; <label>:15349:                                  ; preds = %block_4224ce
  %15350 = fcmp ogt float %15334, %15337
  br i1 %15350, label %15355, label %15351

; <label>:15351:                                  ; preds = %15349
  %15352 = fcmp olt float %15334, %15337
  br i1 %15352, label %15355, label %15353

; <label>:15353:                                  ; preds = %15351
  %15354 = fcmp oeq float %15334, %15337
  br i1 %15354, label %15355, label %15359

; <label>:15355:                                  ; preds = %15353, %15351, %15349, %15339
  %15356 = phi i8 [ 0, %15349 ], [ 0, %15351 ], [ 1, %15353 ], [ 1, %15339 ]
  %15357 = phi i8 [ 0, %15349 ], [ 0, %15351 ], [ 0, %15353 ], [ 1, %15339 ]
  %15358 = phi i8 [ 0, %15349 ], [ 1, %15351 ], [ 0, %15353 ], [ 1, %15339 ]
  store i8 %15356, i8* %48, align 1
  store i8 %15357, i8* %39, align 1
  store i8 %15358, i8* %32, align 1
  br label %15359

; <label>:15359:                                  ; preds = %15355, %15353
  %15360 = phi i8 [ %15356, %15355 ], [ %15281, %15353 ]
  %15361 = phi i8 [ %15358, %15355 ], [ %15269, %15353 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1724

routine_ucomiss__xmm0___xmm1.exit1724:            ; preds = %15359, %15347
  %15362 = phi i8 [ %.pre334, %15347 ], [ %15360, %15359 ]
  %15363 = phi i8 [ %.pre333, %15347 ], [ %15361, %15359 ]
  %15364 = phi i64 [ %.pre332, %15347 ], [ %15332, %15359 ]
  %15365 = phi %struct.Memory* [ %15348, %15347 ], [ %13384, %15359 ]
  %15366 = or i8 %15362, %15363
  %15367 = icmp ne i8 %15366, 0
  %.v537 = select i1 %15367, i64 11, i64 6
  %15368 = add i64 %15364, %.v537
  store i64 %15368, i64* %3, align 8
  br i1 %15367, label %block_.L_4224fb, label %block_.L_422f0e

block_.L_4224fb:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1724
  %15369 = load i64, i64* %RBP.i, align 8
  %15370 = add i64 %15369, -80
  %15371 = add i64 %15368, 3
  store i64 %15371, i64* %3, align 8
  %15372 = inttoptr i64 %15370 to i32*
  %15373 = load i32, i32* %15372, align 4
  %15374 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %15375 = sub i32 %15373, %15374
  %15376 = zext i32 %15375 to i64
  store i64 %15376, i64* %RAX.i3587.phi.trans.insert, align 8
  %15377 = icmp ult i32 %15373, %15374
  %15378 = zext i1 %15377 to i8
  store i8 %15378, i8* %32, align 1
  %15379 = and i32 %15375, 255
  %15380 = tail call i32 @llvm.ctpop.i32(i32 %15379)
  %15381 = trunc i32 %15380 to i8
  %15382 = and i8 %15381, 1
  %15383 = xor i8 %15382, 1
  store i8 %15383, i8* %39, align 1
  %15384 = xor i32 %15374, %15373
  %15385 = xor i32 %15384, %15375
  %15386 = lshr i32 %15385, 4
  %15387 = trunc i32 %15386 to i8
  %15388 = and i8 %15387, 1
  store i8 %15388, i8* %45, align 1
  %15389 = icmp eq i32 %15375, 0
  %15390 = zext i1 %15389 to i8
  store i8 %15390, i8* %48, align 1
  %15391 = lshr i32 %15375, 31
  %15392 = trunc i32 %15391 to i8
  store i8 %15392, i8* %51, align 1
  %15393 = lshr i32 %15373, 31
  %15394 = lshr i32 %15374, 31
  %15395 = xor i32 %15394, %15393
  %15396 = xor i32 %15391, %15393
  %15397 = add nuw nsw i32 %15396, %15395
  %15398 = icmp eq i32 %15397, 2
  %15399 = zext i1 %15398 to i8
  store i8 %15399, i8* %57, align 1
  %15400 = load <2 x i32>, <2 x i32>* %15291, align 1
  %15401 = load <2 x i32>, <2 x i32>* %15293, align 1
  %15402 = sitofp i32 %15375 to float
  store float %15402, float* %15296, align 1
  %15403 = extractelement <2 x i32> %15400, i32 1
  store i32 %15403, i32* %15299, align 1
  %15404 = extractelement <2 x i32> %15401, i32 0
  store i32 %15404, i32* %15301, align 1
  %15405 = extractelement <2 x i32> %15401, i32 1
  store i32 %15405, i32* %15304, align 1
  %15406 = load <2 x i32>, <2 x i32>* %15305, align 1
  %15407 = load <2 x i32>, <2 x i32>* %15307, align 1
  %15408 = sitofp i32 %15374 to float
  store float %15408, float* %15310, align 1
  %15409 = extractelement <2 x i32> %15406, i32 1
  store i32 %15409, i32* %15313, align 1
  %15410 = extractelement <2 x i32> %15407, i32 0
  store i32 %15410, i32* %15315, align 1
  %15411 = extractelement <2 x i32> %15407, i32 1
  store i32 %15411, i32* %15318, align 1
  %15412 = add i64 %15369, -208
  %15413 = add i64 %15368, 31
  store i64 %15413, i64* %3, align 8
  %15414 = load <2 x float>, <2 x float>* %15321, align 1
  %15415 = load <2 x i32>, <2 x i32>* %15307, align 1
  %15416 = inttoptr i64 %15412 to float*
  %15417 = load float, float* %15416, align 4
  %15418 = extractelement <2 x float> %15414, i32 0
  %15419 = fmul float %15418, %15417
  store float %15419, float* %15310, align 1
  %15420 = bitcast <2 x float> %15414 to <2 x i32>
  %15421 = extractelement <2 x i32> %15420, i32 1
  store i32 %15421, i32* %15313, align 1
  %15422 = extractelement <2 x i32> %15415, i32 0
  store i32 %15422, i32* %15315, align 1
  %15423 = extractelement <2 x i32> %15415, i32 1
  store i32 %15423, i32* %15318, align 1
  %15424 = add i64 %15368, 34
  store i64 %15424, i64* %3, align 8
  %15425 = load <2 x float>, <2 x float>* %15321, align 1
  %15426 = extractelement <2 x float> %15425, i32 0
  %15427 = load <2 x float>, <2 x float>* %15335, align 1
  %15428 = extractelement <2 x float> %15427, i32 0
  %15429 = fcmp uno float %15426, %15428
  br i1 %15429, label %15430, label %15440

; <label>:15430:                                  ; preds = %block_.L_4224fb
  %15431 = fadd float %15426, %15428
  %15432 = bitcast float %15431 to i32
  %15433 = and i32 %15432, 2143289344
  %15434 = icmp eq i32 %15433, 2139095040
  %15435 = and i32 %15432, 4194303
  %15436 = icmp ne i32 %15435, 0
  %15437 = and i1 %15434, %15436
  br i1 %15437, label %15438, label %15446

; <label>:15438:                                  ; preds = %15430
  %15439 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15424, %struct.Memory* %15365)
  %.pre335 = load i64, i64* %3, align 8
  %.pre336 = load i8, i8* %32, align 1
  %.pre337 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1703

; <label>:15440:                                  ; preds = %block_.L_4224fb
  %15441 = fcmp ogt float %15426, %15428
  br i1 %15441, label %15446, label %15442

; <label>:15442:                                  ; preds = %15440
  %15443 = fcmp olt float %15426, %15428
  br i1 %15443, label %15446, label %15444

; <label>:15444:                                  ; preds = %15442
  %15445 = fcmp oeq float %15426, %15428
  br i1 %15445, label %15446, label %15450

; <label>:15446:                                  ; preds = %15444, %15442, %15440, %15430
  %15447 = phi i8 [ 0, %15440 ], [ 0, %15442 ], [ 1, %15444 ], [ 1, %15430 ]
  %15448 = phi i8 [ 0, %15440 ], [ 0, %15442 ], [ 0, %15444 ], [ 1, %15430 ]
  %15449 = phi i8 [ 0, %15440 ], [ 1, %15442 ], [ 0, %15444 ], [ 1, %15430 ]
  store i8 %15447, i8* %48, align 1
  store i8 %15448, i8* %39, align 1
  store i8 %15449, i8* %32, align 1
  br label %15450

; <label>:15450:                                  ; preds = %15446, %15444
  %15451 = phi i8 [ %15447, %15446 ], [ %15390, %15444 ]
  %15452 = phi i8 [ %15449, %15446 ], [ %15378, %15444 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1703

routine_ucomiss__xmm0___xmm1.exit1703:            ; preds = %15450, %15438
  %15453 = phi i8 [ %.pre337, %15438 ], [ %15451, %15450 ]
  %15454 = phi i8 [ %.pre336, %15438 ], [ %15452, %15450 ]
  %15455 = phi i64 [ %.pre335, %15438 ], [ %15424, %15450 ]
  %15456 = phi %struct.Memory* [ %15439, %15438 ], [ %15365, %15450 ]
  %15457 = or i8 %15453, %15454
  %15458 = icmp ne i8 %15457, 0
  %.v538 = select i1 %15458, i64 11, i64 6
  %15459 = add i64 %15455, %.v538
  store i64 %15459, i64* %3, align 8
  br i1 %15458, label %block_.L_422528, label %block_422523

block_422523:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit1703
  %15460 = add i64 %15459, 1947
  br label %block_.L_422cbe

block_.L_422528:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1703
  %15461 = add i64 %15459, 225
  br label %block_.L_422609

block_.L_422532:                                  ; preds = %block_.L_4224c1
  %15462 = add i64 %13381, -52
  %15463 = add i64 %15260, 4
  store i64 %15463, i64* %3, align 8
  %15464 = inttoptr i64 %15462 to i32*
  %15465 = load i32, i32* %15464, align 4
  %15466 = add i32 %15465, -1
  %15467 = icmp eq i32 %15465, 0
  %15468 = zext i1 %15467 to i8
  store i8 %15468, i8* %32, align 1
  %15469 = and i32 %15466, 255
  %15470 = tail call i32 @llvm.ctpop.i32(i32 %15469)
  %15471 = trunc i32 %15470 to i8
  %15472 = and i8 %15471, 1
  %15473 = xor i8 %15472, 1
  store i8 %15473, i8* %39, align 1
  %15474 = xor i32 %15466, %15465
  %15475 = lshr i32 %15474, 4
  %15476 = trunc i32 %15475 to i8
  %15477 = and i8 %15476, 1
  store i8 %15477, i8* %45, align 1
  %15478 = icmp eq i32 %15466, 0
  %15479 = zext i1 %15478 to i8
  store i8 %15479, i8* %48, align 1
  %15480 = lshr i32 %15466, 31
  %15481 = trunc i32 %15480 to i8
  store i8 %15481, i8* %51, align 1
  %15482 = lshr i32 %15465, 31
  %15483 = xor i32 %15480, %15482
  %15484 = add nuw nsw i32 %15483, %15482
  %15485 = icmp eq i32 %15484, 2
  %15486 = zext i1 %15485 to i8
  store i8 %15486, i8* %57, align 1
  %15487 = icmp ne i8 %15481, 0
  %15488 = xor i1 %15487, %15485
  %15489 = or i1 %15478, %15488
  %.v483 = select i1 %15489, i64 110, i64 10
  %15490 = add i64 %15260, %.v483
  %15491 = add i64 %13381, -80
  %15492 = add i64 %15490, 3
  store i64 %15492, i64* %3, align 8
  %15493 = inttoptr i64 %15491 to i32*
  %15494 = load i32, i32* %15493, align 4
  %15495 = zext i32 %15494 to i64
  store i64 %15495, i64* %RAX.i3587.phi.trans.insert, align 8
  %15496 = add i64 %15490, 10
  store i64 %15496, i64* %3, align 8
  br i1 %15489, label %block_.L_4225a0, label %block_42253c

block_42253c:                                     ; preds = %block_.L_422532
  %15497 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %15498 = sub i32 %15494, %15497
  %15499 = zext i32 %15498 to i64
  store i64 %15499, i64* %RAX.i3587.phi.trans.insert, align 8
  %15500 = icmp ult i32 %15494, %15497
  %15501 = zext i1 %15500 to i8
  store i8 %15501, i8* %32, align 1
  %15502 = and i32 %15498, 255
  %15503 = tail call i32 @llvm.ctpop.i32(i32 %15502)
  %15504 = trunc i32 %15503 to i8
  %15505 = and i8 %15504, 1
  %15506 = xor i8 %15505, 1
  store i8 %15506, i8* %39, align 1
  %15507 = xor i32 %15497, %15494
  %15508 = xor i32 %15507, %15498
  %15509 = lshr i32 %15508, 4
  %15510 = trunc i32 %15509 to i8
  %15511 = and i8 %15510, 1
  store i8 %15511, i8* %45, align 1
  %15512 = icmp eq i32 %15498, 0
  %15513 = zext i1 %15512 to i8
  store i8 %15513, i8* %48, align 1
  %15514 = lshr i32 %15498, 31
  %15515 = trunc i32 %15514 to i8
  store i8 %15515, i8* %51, align 1
  %15516 = lshr i32 %15494, 31
  %15517 = lshr i32 %15497, 31
  %15518 = xor i32 %15517, %15516
  %15519 = xor i32 %15514, %15516
  %15520 = add nuw nsw i32 %15519, %15518
  %15521 = icmp eq i32 %15520, 2
  %15522 = zext i1 %15521 to i8
  store i8 %15522, i8* %57, align 1
  %15523 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %15524 = load <2 x i32>, <2 x i32>* %15523, align 1
  %15525 = bitcast i64* %320 to <2 x i32>*
  %15526 = load <2 x i32>, <2 x i32>* %15525, align 1
  %15527 = sitofp i32 %15498 to float
  %15528 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %15527, float* %15528, align 1
  %15529 = extractelement <2 x i32> %15524, i32 1
  %15530 = getelementptr inbounds i8, i8* %315, i64 4
  %15531 = bitcast i8* %15530 to i32*
  store i32 %15529, i32* %15531, align 1
  %15532 = extractelement <2 x i32> %15526, i32 0
  %15533 = bitcast i64* %320 to i32*
  store i32 %15532, i32* %15533, align 1
  %15534 = extractelement <2 x i32> %15526, i32 1
  %15535 = getelementptr inbounds i8, i8* %315, i64 12
  %15536 = bitcast i8* %15535 to i32*
  store i32 %15534, i32* %15536, align 1
  %15537 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %15538 = load <2 x i32>, <2 x i32>* %15537, align 1
  %15539 = bitcast i64* %330 to <2 x i32>*
  %15540 = load <2 x i32>, <2 x i32>* %15539, align 1
  %15541 = sitofp i32 %15497 to float
  %15542 = bitcast %union.VectorReg* %322 to float*
  store float %15541, float* %15542, align 1
  %15543 = extractelement <2 x i32> %15538, i32 1
  %15544 = getelementptr inbounds i8, i8* %323, i64 4
  %15545 = bitcast i8* %15544 to i32*
  store i32 %15543, i32* %15545, align 1
  %15546 = extractelement <2 x i32> %15540, i32 0
  %15547 = bitcast i64* %330 to i32*
  store i32 %15546, i32* %15547, align 1
  %15548 = extractelement <2 x i32> %15540, i32 1
  %15549 = getelementptr inbounds i8, i8* %323, i64 12
  %15550 = bitcast i8* %15549 to i32*
  store i32 %15548, i32* %15550, align 1
  %15551 = add i64 %13381, -212
  %15552 = add i64 %15490, 31
  store i64 %15552, i64* %3, align 8
  %15553 = bitcast %union.VectorReg* %322 to <2 x float>*
  %15554 = load <2 x float>, <2 x float>* %15553, align 1
  %15555 = load <2 x i32>, <2 x i32>* %15539, align 1
  %15556 = inttoptr i64 %15551 to float*
  %15557 = load float, float* %15556, align 4
  %15558 = extractelement <2 x float> %15554, i32 0
  %15559 = fmul float %15558, %15557
  store float %15559, float* %15542, align 1
  %15560 = bitcast <2 x float> %15554 to <2 x i32>
  %15561 = extractelement <2 x i32> %15560, i32 1
  store i32 %15561, i32* %15545, align 1
  %15562 = extractelement <2 x i32> %15555, i32 0
  store i32 %15562, i32* %15547, align 1
  %15563 = extractelement <2 x i32> %15555, i32 1
  store i32 %15563, i32* %15550, align 1
  %15564 = add i64 %15490, 34
  store i64 %15564, i64* %3, align 8
  %15565 = load <2 x float>, <2 x float>* %15553, align 1
  %15566 = extractelement <2 x float> %15565, i32 0
  %15567 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %15568 = load <2 x float>, <2 x float>* %15567, align 1
  %15569 = extractelement <2 x float> %15568, i32 0
  %15570 = fcmp uno float %15566, %15569
  br i1 %15570, label %15571, label %15581

; <label>:15571:                                  ; preds = %block_42253c
  %15572 = fadd float %15566, %15569
  %15573 = bitcast float %15572 to i32
  %15574 = and i32 %15573, 2143289344
  %15575 = icmp eq i32 %15574, 2139095040
  %15576 = and i32 %15573, 4194303
  %15577 = icmp ne i32 %15576, 0
  %15578 = and i1 %15575, %15577
  br i1 %15578, label %15579, label %15587

; <label>:15579:                                  ; preds = %15571
  %15580 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15564, %struct.Memory* %13384)
  %.pre338 = load i64, i64* %3, align 8
  %.pre339 = load i8, i8* %32, align 1
  %.pre340 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1676

; <label>:15581:                                  ; preds = %block_42253c
  %15582 = fcmp ogt float %15566, %15569
  br i1 %15582, label %15587, label %15583

; <label>:15583:                                  ; preds = %15581
  %15584 = fcmp olt float %15566, %15569
  br i1 %15584, label %15587, label %15585

; <label>:15585:                                  ; preds = %15583
  %15586 = fcmp oeq float %15566, %15569
  br i1 %15586, label %15587, label %15591

; <label>:15587:                                  ; preds = %15585, %15583, %15581, %15571
  %15588 = phi i8 [ 0, %15581 ], [ 0, %15583 ], [ 1, %15585 ], [ 1, %15571 ]
  %15589 = phi i8 [ 0, %15581 ], [ 0, %15583 ], [ 0, %15585 ], [ 1, %15571 ]
  %15590 = phi i8 [ 0, %15581 ], [ 1, %15583 ], [ 0, %15585 ], [ 1, %15571 ]
  store i8 %15588, i8* %48, align 1
  store i8 %15589, i8* %39, align 1
  store i8 %15590, i8* %32, align 1
  br label %15591

; <label>:15591:                                  ; preds = %15587, %15585
  %15592 = phi i8 [ %15588, %15587 ], [ %15513, %15585 ]
  %15593 = phi i8 [ %15590, %15587 ], [ %15501, %15585 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1676

routine_ucomiss__xmm0___xmm1.exit1676:            ; preds = %15591, %15579
  %15594 = phi i8 [ %.pre340, %15579 ], [ %15592, %15591 ]
  %15595 = phi i8 [ %.pre339, %15579 ], [ %15593, %15591 ]
  %15596 = phi i64 [ %.pre338, %15579 ], [ %15564, %15591 ]
  %15597 = phi %struct.Memory* [ %15580, %15579 ], [ %13384, %15591 ]
  %15598 = or i8 %15594, %15595
  %15599 = icmp ne i8 %15598, 0
  %.v560 = select i1 %15599, i64 11, i64 6
  %15600 = add i64 %15596, %.v560
  store i64 %15600, i64* %3, align 8
  br i1 %15599, label %block_.L_422569, label %block_.L_422f0e

block_.L_422569:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1676
  %15601 = load i64, i64* %RBP.i, align 8
  %15602 = add i64 %15601, -80
  %15603 = add i64 %15600, 3
  store i64 %15603, i64* %3, align 8
  %15604 = inttoptr i64 %15602 to i32*
  %15605 = load i32, i32* %15604, align 4
  %15606 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %15607 = sub i32 %15605, %15606
  %15608 = zext i32 %15607 to i64
  store i64 %15608, i64* %RAX.i3587.phi.trans.insert, align 8
  %15609 = icmp ult i32 %15605, %15606
  %15610 = zext i1 %15609 to i8
  store i8 %15610, i8* %32, align 1
  %15611 = and i32 %15607, 255
  %15612 = tail call i32 @llvm.ctpop.i32(i32 %15611)
  %15613 = trunc i32 %15612 to i8
  %15614 = and i8 %15613, 1
  %15615 = xor i8 %15614, 1
  store i8 %15615, i8* %39, align 1
  %15616 = xor i32 %15606, %15605
  %15617 = xor i32 %15616, %15607
  %15618 = lshr i32 %15617, 4
  %15619 = trunc i32 %15618 to i8
  %15620 = and i8 %15619, 1
  store i8 %15620, i8* %45, align 1
  %15621 = icmp eq i32 %15607, 0
  %15622 = zext i1 %15621 to i8
  store i8 %15622, i8* %48, align 1
  %15623 = lshr i32 %15607, 31
  %15624 = trunc i32 %15623 to i8
  store i8 %15624, i8* %51, align 1
  %15625 = lshr i32 %15605, 31
  %15626 = lshr i32 %15606, 31
  %15627 = xor i32 %15626, %15625
  %15628 = xor i32 %15623, %15625
  %15629 = add nuw nsw i32 %15628, %15627
  %15630 = icmp eq i32 %15629, 2
  %15631 = zext i1 %15630 to i8
  store i8 %15631, i8* %57, align 1
  %15632 = load <2 x i32>, <2 x i32>* %15523, align 1
  %15633 = load <2 x i32>, <2 x i32>* %15525, align 1
  %15634 = sitofp i32 %15607 to float
  store float %15634, float* %15528, align 1
  %15635 = extractelement <2 x i32> %15632, i32 1
  store i32 %15635, i32* %15531, align 1
  %15636 = extractelement <2 x i32> %15633, i32 0
  store i32 %15636, i32* %15533, align 1
  %15637 = extractelement <2 x i32> %15633, i32 1
  store i32 %15637, i32* %15536, align 1
  %15638 = load <2 x i32>, <2 x i32>* %15537, align 1
  %15639 = load <2 x i32>, <2 x i32>* %15539, align 1
  %15640 = sitofp i32 %15606 to float
  store float %15640, float* %15542, align 1
  %15641 = extractelement <2 x i32> %15638, i32 1
  store i32 %15641, i32* %15545, align 1
  %15642 = extractelement <2 x i32> %15639, i32 0
  store i32 %15642, i32* %15547, align 1
  %15643 = extractelement <2 x i32> %15639, i32 1
  store i32 %15643, i32* %15550, align 1
  %15644 = add i64 %15601, -208
  %15645 = add i64 %15600, 31
  store i64 %15645, i64* %3, align 8
  %15646 = load <2 x float>, <2 x float>* %15553, align 1
  %15647 = load <2 x i32>, <2 x i32>* %15539, align 1
  %15648 = inttoptr i64 %15644 to float*
  %15649 = load float, float* %15648, align 4
  %15650 = extractelement <2 x float> %15646, i32 0
  %15651 = fmul float %15650, %15649
  store float %15651, float* %15542, align 1
  %15652 = bitcast <2 x float> %15646 to <2 x i32>
  %15653 = extractelement <2 x i32> %15652, i32 1
  store i32 %15653, i32* %15545, align 1
  %15654 = extractelement <2 x i32> %15647, i32 0
  store i32 %15654, i32* %15547, align 1
  %15655 = extractelement <2 x i32> %15647, i32 1
  store i32 %15655, i32* %15550, align 1
  %15656 = add i64 %15600, 34
  store i64 %15656, i64* %3, align 8
  %15657 = load <2 x float>, <2 x float>* %15553, align 1
  %15658 = extractelement <2 x float> %15657, i32 0
  %15659 = load <2 x float>, <2 x float>* %15567, align 1
  %15660 = extractelement <2 x float> %15659, i32 0
  %15661 = fcmp uno float %15658, %15660
  br i1 %15661, label %15662, label %15672

; <label>:15662:                                  ; preds = %block_.L_422569
  %15663 = fadd float %15658, %15660
  %15664 = bitcast float %15663 to i32
  %15665 = and i32 %15664, 2143289344
  %15666 = icmp eq i32 %15665, 2139095040
  %15667 = and i32 %15664, 4194303
  %15668 = icmp ne i32 %15667, 0
  %15669 = and i1 %15666, %15668
  br i1 %15669, label %15670, label %15678

; <label>:15670:                                  ; preds = %15662
  %15671 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15656, %struct.Memory* %15597)
  %.pre341 = load i64, i64* %3, align 8
  %.pre342 = load i8, i8* %32, align 1
  %.pre343 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1654

; <label>:15672:                                  ; preds = %block_.L_422569
  %15673 = fcmp ogt float %15658, %15660
  br i1 %15673, label %15678, label %15674

; <label>:15674:                                  ; preds = %15672
  %15675 = fcmp olt float %15658, %15660
  br i1 %15675, label %15678, label %15676

; <label>:15676:                                  ; preds = %15674
  %15677 = fcmp oeq float %15658, %15660
  br i1 %15677, label %15678, label %15682

; <label>:15678:                                  ; preds = %15676, %15674, %15672, %15662
  %15679 = phi i8 [ 0, %15672 ], [ 0, %15674 ], [ 1, %15676 ], [ 1, %15662 ]
  %15680 = phi i8 [ 0, %15672 ], [ 0, %15674 ], [ 0, %15676 ], [ 1, %15662 ]
  %15681 = phi i8 [ 0, %15672 ], [ 1, %15674 ], [ 0, %15676 ], [ 1, %15662 ]
  store i8 %15679, i8* %48, align 1
  store i8 %15680, i8* %39, align 1
  store i8 %15681, i8* %32, align 1
  br label %15682

; <label>:15682:                                  ; preds = %15678, %15676
  %15683 = phi i8 [ %15679, %15678 ], [ %15622, %15676 ]
  %15684 = phi i8 [ %15681, %15678 ], [ %15610, %15676 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1654

routine_ucomiss__xmm0___xmm1.exit1654:            ; preds = %15682, %15670
  %15685 = phi i8 [ %.pre343, %15670 ], [ %15683, %15682 ]
  %15686 = phi i8 [ %.pre342, %15670 ], [ %15684, %15682 ]
  %15687 = phi i64 [ %.pre341, %15670 ], [ %15656, %15682 ]
  %15688 = phi %struct.Memory* [ %15671, %15670 ], [ %15597, %15682 ]
  %15689 = or i8 %15685, %15686
  %15690 = icmp ne i8 %15689, 0
  %.v561 = select i1 %15690, i64 11, i64 6
  %15691 = add i64 %15687, %.v561
  store i64 %15691, i64* %3, align 8
  br i1 %15690, label %block_.L_422596, label %block_422591

block_422591:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit1654
  %15692 = add i64 %15691, 1837
  br label %block_.L_422cbe

block_.L_422596:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1654
  %15693 = add i64 %15691, 110
  br label %block_.L_422604

block_.L_4225a0:                                  ; preds = %block_.L_422532
  %15694 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %15695 = sub i32 %15494, %15694
  %15696 = zext i32 %15695 to i64
  store i64 %15696, i64* %RAX.i3587.phi.trans.insert, align 8
  %15697 = icmp ult i32 %15494, %15694
  %15698 = zext i1 %15697 to i8
  store i8 %15698, i8* %32, align 1
  %15699 = and i32 %15695, 255
  %15700 = tail call i32 @llvm.ctpop.i32(i32 %15699)
  %15701 = trunc i32 %15700 to i8
  %15702 = and i8 %15701, 1
  %15703 = xor i8 %15702, 1
  store i8 %15703, i8* %39, align 1
  %15704 = xor i32 %15694, %15494
  %15705 = xor i32 %15704, %15695
  %15706 = lshr i32 %15705, 4
  %15707 = trunc i32 %15706 to i8
  %15708 = and i8 %15707, 1
  store i8 %15708, i8* %45, align 1
  %15709 = icmp eq i32 %15695, 0
  %15710 = zext i1 %15709 to i8
  store i8 %15710, i8* %48, align 1
  %15711 = lshr i32 %15695, 31
  %15712 = trunc i32 %15711 to i8
  store i8 %15712, i8* %51, align 1
  %15713 = lshr i32 %15494, 31
  %15714 = lshr i32 %15694, 31
  %15715 = xor i32 %15714, %15713
  %15716 = xor i32 %15711, %15713
  %15717 = add nuw nsw i32 %15716, %15715
  %15718 = icmp eq i32 %15717, 2
  %15719 = zext i1 %15718 to i8
  store i8 %15719, i8* %57, align 1
  %15720 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %15721 = load <2 x i32>, <2 x i32>* %15720, align 1
  %15722 = bitcast i64* %320 to <2 x i32>*
  %15723 = load <2 x i32>, <2 x i32>* %15722, align 1
  %15724 = sitofp i32 %15695 to float
  %15725 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %15724, float* %15725, align 1
  %15726 = extractelement <2 x i32> %15721, i32 1
  %15727 = getelementptr inbounds i8, i8* %315, i64 4
  %15728 = bitcast i8* %15727 to i32*
  store i32 %15726, i32* %15728, align 1
  %15729 = extractelement <2 x i32> %15723, i32 0
  %15730 = bitcast i64* %320 to i32*
  store i32 %15729, i32* %15730, align 1
  %15731 = extractelement <2 x i32> %15723, i32 1
  %15732 = getelementptr inbounds i8, i8* %315, i64 12
  %15733 = bitcast i8* %15732 to i32*
  store i32 %15731, i32* %15733, align 1
  %15734 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %15735 = load <2 x i32>, <2 x i32>* %15734, align 1
  %15736 = bitcast i64* %330 to <2 x i32>*
  %15737 = load <2 x i32>, <2 x i32>* %15736, align 1
  %15738 = sitofp i32 %15694 to float
  %15739 = bitcast %union.VectorReg* %322 to float*
  store float %15738, float* %15739, align 1
  %15740 = extractelement <2 x i32> %15735, i32 1
  %15741 = getelementptr inbounds i8, i8* %323, i64 4
  %15742 = bitcast i8* %15741 to i32*
  store i32 %15740, i32* %15742, align 1
  %15743 = extractelement <2 x i32> %15737, i32 0
  %15744 = bitcast i64* %330 to i32*
  store i32 %15743, i32* %15744, align 1
  %15745 = extractelement <2 x i32> %15737, i32 1
  %15746 = getelementptr inbounds i8, i8* %323, i64 12
  %15747 = bitcast i8* %15746 to i32*
  store i32 %15745, i32* %15747, align 1
  %15748 = add i64 %13381, -212
  %15749 = add i64 %15490, 31
  store i64 %15749, i64* %3, align 8
  %15750 = bitcast %union.VectorReg* %322 to <2 x float>*
  %15751 = load <2 x float>, <2 x float>* %15750, align 1
  %15752 = load <2 x i32>, <2 x i32>* %15736, align 1
  %15753 = inttoptr i64 %15748 to float*
  %15754 = load float, float* %15753, align 4
  %15755 = extractelement <2 x float> %15751, i32 0
  %15756 = fmul float %15755, %15754
  store float %15756, float* %15739, align 1
  %15757 = bitcast <2 x float> %15751 to <2 x i32>
  %15758 = extractelement <2 x i32> %15757, i32 1
  store i32 %15758, i32* %15742, align 1
  %15759 = extractelement <2 x i32> %15752, i32 0
  store i32 %15759, i32* %15744, align 1
  %15760 = extractelement <2 x i32> %15752, i32 1
  store i32 %15760, i32* %15747, align 1
  %15761 = add i64 %15490, 34
  store i64 %15761, i64* %3, align 8
  %15762 = load <2 x float>, <2 x float>* %15750, align 1
  %15763 = extractelement <2 x float> %15762, i32 0
  %15764 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %15765 = load <2 x float>, <2 x float>* %15764, align 1
  %15766 = extractelement <2 x float> %15765, i32 0
  %15767 = fcmp uno float %15763, %15766
  br i1 %15767, label %15768, label %15778

; <label>:15768:                                  ; preds = %block_.L_4225a0
  %15769 = fadd float %15763, %15766
  %15770 = bitcast float %15769 to i32
  %15771 = and i32 %15770, 2143289344
  %15772 = icmp eq i32 %15771, 2139095040
  %15773 = and i32 %15770, 4194303
  %15774 = icmp ne i32 %15773, 0
  %15775 = and i1 %15772, %15774
  br i1 %15775, label %15776, label %15784

; <label>:15776:                                  ; preds = %15768
  %15777 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15761, %struct.Memory* %13384)
  %.pre344 = load i64, i64* %3, align 8
  %.pre345 = load i8, i8* %32, align 1
  %.pre346 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1630

; <label>:15778:                                  ; preds = %block_.L_4225a0
  %15779 = fcmp ogt float %15763, %15766
  br i1 %15779, label %15784, label %15780

; <label>:15780:                                  ; preds = %15778
  %15781 = fcmp olt float %15763, %15766
  br i1 %15781, label %15784, label %15782

; <label>:15782:                                  ; preds = %15780
  %15783 = fcmp oeq float %15763, %15766
  br i1 %15783, label %15784, label %15788

; <label>:15784:                                  ; preds = %15782, %15780, %15778, %15768
  %15785 = phi i8 [ 0, %15778 ], [ 0, %15780 ], [ 1, %15782 ], [ 1, %15768 ]
  %15786 = phi i8 [ 0, %15778 ], [ 0, %15780 ], [ 0, %15782 ], [ 1, %15768 ]
  %15787 = phi i8 [ 0, %15778 ], [ 1, %15780 ], [ 0, %15782 ], [ 1, %15768 ]
  store i8 %15785, i8* %48, align 1
  store i8 %15786, i8* %39, align 1
  store i8 %15787, i8* %32, align 1
  br label %15788

; <label>:15788:                                  ; preds = %15784, %15782
  %15789 = phi i8 [ %15785, %15784 ], [ %15710, %15782 ]
  %15790 = phi i8 [ %15787, %15784 ], [ %15698, %15782 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1630

routine_ucomiss__xmm0___xmm1.exit1630:            ; preds = %15788, %15776
  %15791 = phi i8 [ %.pre346, %15776 ], [ %15789, %15788 ]
  %15792 = phi i8 [ %.pre345, %15776 ], [ %15790, %15788 ]
  %15793 = phi i64 [ %.pre344, %15776 ], [ %15761, %15788 ]
  %15794 = phi %struct.Memory* [ %15777, %15776 ], [ %13384, %15788 ]
  %15795 = or i8 %15791, %15792
  %15796 = icmp ne i8 %15795, 0
  %.v562 = select i1 %15796, i64 11, i64 6
  %15797 = add i64 %15793, %.v562
  store i64 %15797, i64* %3, align 8
  br i1 %15796, label %block_.L_4225cd, label %block_.L_422f0e

block_.L_4225cd:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1630
  %15798 = load i64, i64* %RBP.i, align 8
  %15799 = add i64 %15798, -80
  %15800 = add i64 %15797, 3
  store i64 %15800, i64* %3, align 8
  %15801 = inttoptr i64 %15799 to i32*
  %15802 = load i32, i32* %15801, align 4
  %15803 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %15804 = sub i32 %15802, %15803
  %15805 = zext i32 %15804 to i64
  store i64 %15805, i64* %RAX.i3587.phi.trans.insert, align 8
  %15806 = icmp ult i32 %15802, %15803
  %15807 = zext i1 %15806 to i8
  store i8 %15807, i8* %32, align 1
  %15808 = and i32 %15804, 255
  %15809 = tail call i32 @llvm.ctpop.i32(i32 %15808)
  %15810 = trunc i32 %15809 to i8
  %15811 = and i8 %15810, 1
  %15812 = xor i8 %15811, 1
  store i8 %15812, i8* %39, align 1
  %15813 = xor i32 %15803, %15802
  %15814 = xor i32 %15813, %15804
  %15815 = lshr i32 %15814, 4
  %15816 = trunc i32 %15815 to i8
  %15817 = and i8 %15816, 1
  store i8 %15817, i8* %45, align 1
  %15818 = icmp eq i32 %15804, 0
  %15819 = zext i1 %15818 to i8
  store i8 %15819, i8* %48, align 1
  %15820 = lshr i32 %15804, 31
  %15821 = trunc i32 %15820 to i8
  store i8 %15821, i8* %51, align 1
  %15822 = lshr i32 %15802, 31
  %15823 = lshr i32 %15803, 31
  %15824 = xor i32 %15823, %15822
  %15825 = xor i32 %15820, %15822
  %15826 = add nuw nsw i32 %15825, %15824
  %15827 = icmp eq i32 %15826, 2
  %15828 = zext i1 %15827 to i8
  store i8 %15828, i8* %57, align 1
  %15829 = load <2 x i32>, <2 x i32>* %15720, align 1
  %15830 = load <2 x i32>, <2 x i32>* %15722, align 1
  %15831 = sitofp i32 %15804 to float
  store float %15831, float* %15725, align 1
  %15832 = extractelement <2 x i32> %15829, i32 1
  store i32 %15832, i32* %15728, align 1
  %15833 = extractelement <2 x i32> %15830, i32 0
  store i32 %15833, i32* %15730, align 1
  %15834 = extractelement <2 x i32> %15830, i32 1
  store i32 %15834, i32* %15733, align 1
  %15835 = load <2 x i32>, <2 x i32>* %15734, align 1
  %15836 = load <2 x i32>, <2 x i32>* %15736, align 1
  %15837 = sitofp i32 %15803 to float
  store float %15837, float* %15739, align 1
  %15838 = extractelement <2 x i32> %15835, i32 1
  store i32 %15838, i32* %15742, align 1
  %15839 = extractelement <2 x i32> %15836, i32 0
  store i32 %15839, i32* %15744, align 1
  %15840 = extractelement <2 x i32> %15836, i32 1
  store i32 %15840, i32* %15747, align 1
  %15841 = add i64 %15798, -208
  %15842 = add i64 %15797, 31
  store i64 %15842, i64* %3, align 8
  %15843 = load <2 x float>, <2 x float>* %15750, align 1
  %15844 = load <2 x i32>, <2 x i32>* %15736, align 1
  %15845 = inttoptr i64 %15841 to float*
  %15846 = load float, float* %15845, align 4
  %15847 = extractelement <2 x float> %15843, i32 0
  %15848 = fmul float %15847, %15846
  store float %15848, float* %15739, align 1
  %15849 = bitcast <2 x float> %15843 to <2 x i32>
  %15850 = extractelement <2 x i32> %15849, i32 1
  store i32 %15850, i32* %15742, align 1
  %15851 = extractelement <2 x i32> %15844, i32 0
  store i32 %15851, i32* %15744, align 1
  %15852 = extractelement <2 x i32> %15844, i32 1
  store i32 %15852, i32* %15747, align 1
  %15853 = add i64 %15797, 34
  store i64 %15853, i64* %3, align 8
  %15854 = load <2 x float>, <2 x float>* %15750, align 1
  %15855 = extractelement <2 x float> %15854, i32 0
  %15856 = load <2 x float>, <2 x float>* %15764, align 1
  %15857 = extractelement <2 x float> %15856, i32 0
  %15858 = fcmp uno float %15855, %15857
  br i1 %15858, label %15859, label %15869

; <label>:15859:                                  ; preds = %block_.L_4225cd
  %15860 = fadd float %15855, %15857
  %15861 = bitcast float %15860 to i32
  %15862 = and i32 %15861, 2143289344
  %15863 = icmp eq i32 %15862, 2139095040
  %15864 = and i32 %15861, 4194303
  %15865 = icmp ne i32 %15864, 0
  %15866 = and i1 %15863, %15865
  br i1 %15866, label %15867, label %15875

; <label>:15867:                                  ; preds = %15859
  %15868 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15853, %struct.Memory* %15794)
  %.pre347 = load i64, i64* %3, align 8
  %.pre348 = load i8, i8* %32, align 1
  %.pre349 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1608

; <label>:15869:                                  ; preds = %block_.L_4225cd
  %15870 = fcmp ogt float %15855, %15857
  br i1 %15870, label %15875, label %15871

; <label>:15871:                                  ; preds = %15869
  %15872 = fcmp olt float %15855, %15857
  br i1 %15872, label %15875, label %15873

; <label>:15873:                                  ; preds = %15871
  %15874 = fcmp oeq float %15855, %15857
  br i1 %15874, label %15875, label %15879

; <label>:15875:                                  ; preds = %15873, %15871, %15869, %15859
  %15876 = phi i8 [ 0, %15869 ], [ 0, %15871 ], [ 1, %15873 ], [ 1, %15859 ]
  %15877 = phi i8 [ 0, %15869 ], [ 0, %15871 ], [ 0, %15873 ], [ 1, %15859 ]
  %15878 = phi i8 [ 0, %15869 ], [ 1, %15871 ], [ 0, %15873 ], [ 1, %15859 ]
  store i8 %15876, i8* %48, align 1
  store i8 %15877, i8* %39, align 1
  store i8 %15878, i8* %32, align 1
  br label %15879

; <label>:15879:                                  ; preds = %15875, %15873
  %15880 = phi i8 [ %15876, %15875 ], [ %15819, %15873 ]
  %15881 = phi i8 [ %15878, %15875 ], [ %15807, %15873 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1608

routine_ucomiss__xmm0___xmm1.exit1608:            ; preds = %15879, %15867
  %15882 = phi i8 [ %.pre349, %15867 ], [ %15880, %15879 ]
  %15883 = phi i8 [ %.pre348, %15867 ], [ %15881, %15879 ]
  %15884 = phi i64 [ %.pre347, %15867 ], [ %15853, %15879 ]
  %15885 = phi %struct.Memory* [ %15868, %15867 ], [ %15794, %15879 ]
  %15886 = or i8 %15882, %15883
  %15887 = icmp ne i8 %15886, 0
  %.v563 = select i1 %15887, i64 11, i64 6
  %15888 = add i64 %15884, %.v563
  store i64 %15888, i64* %3, align 8
  br i1 %15887, label %block_.L_4225fa, label %block_4225f5

block_4225f5:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit1608
  %15889 = add i64 %15888, 1737
  br label %block_.L_422cbe

block_.L_4225fa:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1608
  %15890 = add i64 %15888, 10
  store i64 %15890, i64* %3, align 8
  br label %block_.L_422604

block_.L_422604:                                  ; preds = %block_.L_4225fa, %block_.L_422596
  %storemerge159 = phi i64 [ %15693, %block_.L_422596 ], [ %15890, %block_.L_4225fa ]
  %MEMORY.68 = phi %struct.Memory* [ %15688, %block_.L_422596 ], [ %15885, %block_.L_4225fa ]
  %15891 = add i64 %storemerge159, 5
  store i64 %15891, i64* %3, align 8
  br label %block_.L_422609

block_.L_422609:                                  ; preds = %block_.L_422604, %block_.L_422528
  %storemerge154 = phi i64 [ %15461, %block_.L_422528 ], [ %15891, %block_.L_422604 ]
  %MEMORY.69 = phi %struct.Memory* [ %15456, %block_.L_422528 ], [ %MEMORY.68, %block_.L_422604 ]
  %15892 = load i64, i64* %RBP.i, align 8
  %15893 = add i64 %15892, -168
  %15894 = add i64 %storemerge154, 6
  store i64 %15894, i64* %3, align 8
  %15895 = inttoptr i64 %15893 to i32*
  %15896 = load i32, i32* %15895, align 4
  %15897 = zext i32 %15896 to i64
  store i64 %15897, i64* %RAX.i3587.phi.trans.insert, align 8
  %15898 = add i64 %15892, -184
  %15899 = add i64 %storemerge154, 12
  store i64 %15899, i64* %3, align 8
  %15900 = inttoptr i64 %15898 to i32*
  store i32 %15896, i32* %15900, align 4
  %15901 = load i64, i64* %RBP.i, align 8
  %15902 = add i64 %15901, -172
  %15903 = load i64, i64* %3, align 8
  %15904 = add i64 %15903, 6
  store i64 %15904, i64* %3, align 8
  %15905 = inttoptr i64 %15902 to i32*
  %15906 = load i32, i32* %15905, align 4
  %15907 = zext i32 %15906 to i64
  store i64 %15907, i64* %RAX.i3587.phi.trans.insert, align 8
  %15908 = add i64 %15901, -180
  %15909 = add i64 %15903, 12
  store i64 %15909, i64* %3, align 8
  %15910 = inttoptr i64 %15908 to i32*
  store i32 %15906, i32* %15910, align 4
  %15911 = load i64, i64* %RBP.i, align 8
  %15912 = add i64 %15911, -92
  %15913 = load i64, i64* %3, align 8
  %15914 = add i64 %15913, 7
  store i64 %15914, i64* %3, align 8
  %15915 = inttoptr i64 %15912 to i32*
  store i32 1, i32* %15915, align 4
  %.pre350 = load i64, i64* %3, align 8
  br label %block_.L_422628

block_.L_422628:                                  ; preds = %block_.L_4227cc, %block_.L_422609
  %15916 = phi i64 [ %.pre350, %block_.L_422609 ], [ %16904, %block_.L_4227cc ]
  %MEMORY.70 = phi %struct.Memory* [ %MEMORY.69, %block_.L_422609 ], [ %MEMORY.73, %block_.L_4227cc ]
  %15917 = load i64, i64* %RBP.i, align 8
  %15918 = add i64 %15917, -92
  %15919 = add i64 %15916, 4
  store i64 %15919, i64* %3, align 8
  %15920 = inttoptr i64 %15918 to i32*
  %15921 = load i32, i32* %15920, align 4
  %15922 = add i32 %15921, -25
  %15923 = icmp ult i32 %15921, 25
  %15924 = zext i1 %15923 to i8
  store i8 %15924, i8* %32, align 1
  %15925 = and i32 %15922, 255
  %15926 = tail call i32 @llvm.ctpop.i32(i32 %15925)
  %15927 = trunc i32 %15926 to i8
  %15928 = and i8 %15927, 1
  %15929 = xor i8 %15928, 1
  store i8 %15929, i8* %39, align 1
  %15930 = xor i32 %15921, 16
  %15931 = xor i32 %15930, %15922
  %15932 = lshr i32 %15931, 4
  %15933 = trunc i32 %15932 to i8
  %15934 = and i8 %15933, 1
  store i8 %15934, i8* %45, align 1
  %15935 = icmp eq i32 %15922, 0
  %15936 = zext i1 %15935 to i8
  store i8 %15936, i8* %48, align 1
  %15937 = lshr i32 %15922, 31
  %15938 = trunc i32 %15937 to i8
  store i8 %15938, i8* %51, align 1
  %15939 = lshr i32 %15921, 31
  %15940 = xor i32 %15937, %15939
  %15941 = add nuw nsw i32 %15940, %15939
  %15942 = icmp eq i32 %15941, 2
  %15943 = zext i1 %15942 to i8
  store i8 %15943, i8* %57, align 1
  %15944 = icmp ne i8 %15938, 0
  %15945 = xor i1 %15944, %15942
  %.v480 = select i1 %15945, i64 10, i64 439
  %15946 = add i64 %15916, %.v480
  store i64 %15946, i64* %3, align 8
  br i1 %15945, label %block_422632, label %block_.L_4227df

block_422632:                                     ; preds = %block_.L_422628
  %15947 = add i64 %15917, -184
  %15948 = add i64 %15946, 6
  store i64 %15948, i64* %3, align 8
  %15949 = inttoptr i64 %15947 to i32*
  %15950 = load i32, i32* %15949, align 4
  %15951 = zext i32 %15950 to i64
  store i64 %15951, i64* %RAX.i3587.phi.trans.insert, align 8
  %15952 = load i64, i64* bitcast (%G_0x6d09a0_type* @G_0x6d09a0 to i64*), align 8
  store i64 %15952, i64* %RCX.i4260.pre-phi, align 8
  %15953 = add i64 %15946, 18
  store i64 %15953, i64* %3, align 8
  %15954 = load i32, i32* %15920, align 4
  %15955 = sext i32 %15954 to i64
  store i64 %15955, i64* %RDX.i4317.pre-phi, align 8
  %15956 = shl nsw i64 %15955, 2
  %15957 = add i64 %15952, %15956
  %15958 = add i64 %15946, 21
  store i64 %15958, i64* %3, align 8
  %15959 = inttoptr i64 %15957 to i32*
  %15960 = load i32, i32* %15959, align 4
  %15961 = add i32 %15960, %15950
  %15962 = zext i32 %15961 to i64
  store i64 %15962, i64* %RAX.i3587.phi.trans.insert, align 8
  %15963 = icmp ult i32 %15961, %15950
  %15964 = icmp ult i32 %15961, %15960
  %15965 = or i1 %15963, %15964
  %15966 = zext i1 %15965 to i8
  store i8 %15966, i8* %32, align 1
  %15967 = and i32 %15961, 255
  %15968 = tail call i32 @llvm.ctpop.i32(i32 %15967)
  %15969 = trunc i32 %15968 to i8
  %15970 = and i8 %15969, 1
  %15971 = xor i8 %15970, 1
  store i8 %15971, i8* %39, align 1
  %15972 = xor i32 %15960, %15950
  %15973 = xor i32 %15972, %15961
  %15974 = lshr i32 %15973, 4
  %15975 = trunc i32 %15974 to i8
  %15976 = and i8 %15975, 1
  store i8 %15976, i8* %45, align 1
  %15977 = icmp eq i32 %15961, 0
  %15978 = zext i1 %15977 to i8
  store i8 %15978, i8* %48, align 1
  %15979 = lshr i32 %15961, 31
  %15980 = trunc i32 %15979 to i8
  store i8 %15980, i8* %51, align 1
  %15981 = lshr i32 %15950, 31
  %15982 = lshr i32 %15960, 31
  %15983 = xor i32 %15979, %15981
  %15984 = xor i32 %15979, %15982
  %15985 = add nuw nsw i32 %15983, %15984
  %15986 = icmp eq i32 %15985, 2
  %15987 = zext i1 %15986 to i8
  store i8 %15987, i8* %57, align 1
  %15988 = add i64 %15917, -96
  %15989 = add i64 %15946, 24
  store i64 %15989, i64* %3, align 8
  %15990 = inttoptr i64 %15988 to i32*
  store i32 %15961, i32* %15990, align 4
  %15991 = load i64, i64* %RBP.i, align 8
  %15992 = add i64 %15991, -180
  %15993 = load i64, i64* %3, align 8
  %15994 = add i64 %15993, 6
  store i64 %15994, i64* %3, align 8
  %15995 = inttoptr i64 %15992 to i32*
  %15996 = load i32, i32* %15995, align 4
  %15997 = zext i32 %15996 to i64
  store i64 %15997, i64* %RAX.i3587.phi.trans.insert, align 8
  %15998 = load i64, i64* bitcast (%G_0x711c50_type* @G_0x711c50 to i64*), align 8
  store i64 %15998, i64* %RCX.i4260.pre-phi, align 8
  %15999 = add i64 %15991, -92
  %16000 = add i64 %15993, 18
  store i64 %16000, i64* %3, align 8
  %16001 = inttoptr i64 %15999 to i32*
  %16002 = load i32, i32* %16001, align 4
  %16003 = sext i32 %16002 to i64
  store i64 %16003, i64* %RDX.i4317.pre-phi, align 8
  %16004 = shl nsw i64 %16003, 2
  %16005 = add i64 %15998, %16004
  %16006 = add i64 %15993, 21
  store i64 %16006, i64* %3, align 8
  %16007 = inttoptr i64 %16005 to i32*
  %16008 = load i32, i32* %16007, align 4
  %16009 = add i32 %16008, %15996
  %16010 = zext i32 %16009 to i64
  store i64 %16010, i64* %RAX.i3587.phi.trans.insert, align 8
  %16011 = icmp ult i32 %16009, %15996
  %16012 = icmp ult i32 %16009, %16008
  %16013 = or i1 %16011, %16012
  %16014 = zext i1 %16013 to i8
  store i8 %16014, i8* %32, align 1
  %16015 = and i32 %16009, 255
  %16016 = tail call i32 @llvm.ctpop.i32(i32 %16015)
  %16017 = trunc i32 %16016 to i8
  %16018 = and i8 %16017, 1
  %16019 = xor i8 %16018, 1
  store i8 %16019, i8* %39, align 1
  %16020 = xor i32 %16008, %15996
  %16021 = xor i32 %16020, %16009
  %16022 = lshr i32 %16021, 4
  %16023 = trunc i32 %16022 to i8
  %16024 = and i8 %16023, 1
  store i8 %16024, i8* %45, align 1
  %16025 = icmp eq i32 %16009, 0
  %16026 = zext i1 %16025 to i8
  store i8 %16026, i8* %48, align 1
  %16027 = lshr i32 %16009, 31
  %16028 = trunc i32 %16027 to i8
  store i8 %16028, i8* %51, align 1
  %16029 = lshr i32 %15996, 31
  %16030 = lshr i32 %16008, 31
  %16031 = xor i32 %16027, %16029
  %16032 = xor i32 %16027, %16030
  %16033 = add nuw nsw i32 %16031, %16032
  %16034 = icmp eq i32 %16033, 2
  %16035 = zext i1 %16034 to i8
  store i8 %16035, i8* %57, align 1
  %16036 = add i64 %15991, -100
  %16037 = add i64 %15993, 24
  store i64 %16037, i64* %3, align 8
  %16038 = inttoptr i64 %16036 to i32*
  store i32 %16009, i32* %16038, align 4
  %16039 = load i64, i64* %RBP.i, align 8
  %16040 = add i64 %16039, -96
  %16041 = load i64, i64* %3, align 8
  %16042 = add i64 %16041, 3
  store i64 %16042, i64* %3, align 8
  %16043 = inttoptr i64 %16040 to i32*
  %16044 = load i32, i32* %16043, align 4
  %16045 = zext i32 %16044 to i64
  store i64 %16045, i64* %RAX.i3587.phi.trans.insert, align 8
  %16046 = add i64 %16039, -160
  %16047 = add i64 %16041, 9
  store i64 %16047, i64* %3, align 8
  %16048 = inttoptr i64 %16046 to i32*
  %16049 = load i32, i32* %16048, align 4
  %16050 = sub i32 %16044, %16049
  %16051 = zext i32 %16050 to i64
  store i64 %16051, i64* %RAX.i3587.phi.trans.insert, align 8
  %16052 = icmp ult i32 %16044, %16049
  %16053 = zext i1 %16052 to i8
  store i8 %16053, i8* %32, align 1
  %16054 = and i32 %16050, 255
  %16055 = tail call i32 @llvm.ctpop.i32(i32 %16054)
  %16056 = trunc i32 %16055 to i8
  %16057 = and i8 %16056, 1
  %16058 = xor i8 %16057, 1
  store i8 %16058, i8* %39, align 1
  %16059 = xor i32 %16049, %16044
  %16060 = xor i32 %16059, %16050
  %16061 = lshr i32 %16060, 4
  %16062 = trunc i32 %16061 to i8
  %16063 = and i8 %16062, 1
  store i8 %16063, i8* %45, align 1
  %16064 = icmp eq i32 %16050, 0
  %16065 = zext i1 %16064 to i8
  store i8 %16065, i8* %48, align 1
  %16066 = lshr i32 %16050, 31
  %16067 = trunc i32 %16066 to i8
  store i8 %16067, i8* %51, align 1
  %16068 = lshr i32 %16044, 31
  %16069 = lshr i32 %16049, 31
  %16070 = xor i32 %16069, %16068
  %16071 = xor i32 %16066, %16068
  %16072 = add nuw nsw i32 %16071, %16070
  %16073 = icmp eq i32 %16072, 2
  %16074 = zext i1 %16073 to i8
  store i8 %16074, i8* %57, align 1
  store i64 %16051, i64* %RDI.i1133, align 8
  %16075 = add i64 %16041, -136802
  %16076 = add i64 %16041, 16
  %16077 = load i64, i64* %6, align 8
  %16078 = add i64 %16077, -8
  %16079 = inttoptr i64 %16078 to i64*
  store i64 %16076, i64* %16079, align 8
  store i64 %16078, i64* %6, align 8
  store i64 %16075, i64* %3, align 8
  %16080 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.70)
  %16081 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %16082 = load i64, i64* %RBP.i, align 8
  %16083 = add i64 %16082, -76
  %16084 = load i64, i64* %3, align 8
  %16085 = add i64 %16084, 3
  store i64 %16085, i64* %3, align 8
  %16086 = inttoptr i64 %16083 to i32*
  %16087 = load i32, i32* %16086, align 4
  %16088 = sub i32 %16081, %16087
  %16089 = icmp ult i32 %16081, %16087
  %16090 = zext i1 %16089 to i8
  store i8 %16090, i8* %32, align 1
  %16091 = and i32 %16088, 255
  %16092 = tail call i32 @llvm.ctpop.i32(i32 %16091)
  %16093 = trunc i32 %16092 to i8
  %16094 = and i8 %16093, 1
  %16095 = xor i8 %16094, 1
  store i8 %16095, i8* %39, align 1
  %16096 = xor i32 %16087, %16081
  %16097 = xor i32 %16096, %16088
  %16098 = lshr i32 %16097, 4
  %16099 = trunc i32 %16098 to i8
  %16100 = and i8 %16099, 1
  store i8 %16100, i8* %45, align 1
  %16101 = icmp eq i32 %16088, 0
  %16102 = zext i1 %16101 to i8
  store i8 %16102, i8* %48, align 1
  %16103 = lshr i32 %16088, 31
  %16104 = trunc i32 %16103 to i8
  store i8 %16104, i8* %51, align 1
  %16105 = lshr i32 %16081, 31
  %16106 = lshr i32 %16087, 31
  %16107 = xor i32 %16106, %16105
  %16108 = xor i32 %16103, %16105
  %16109 = add nuw nsw i32 %16108, %16107
  %16110 = icmp eq i32 %16109, 2
  %16111 = zext i1 %16110 to i8
  store i8 %16111, i8* %57, align 1
  %16112 = icmp ne i8 %16104, 0
  %16113 = xor i1 %16112, %16110
  %.demorgan481 = or i1 %16101, %16113
  %.v556 = select i1 %.demorgan481, i64 9, i64 346
  %16114 = add i64 %16084, %.v556
  store i64 %16114, i64* %3, align 8
  br i1 %.demorgan481, label %block_42267b, label %block_.L_4227cc

block_42267b:                                     ; preds = %block_422632
  %16115 = add i64 %16082, -100
  %16116 = add i64 %16114, 3
  store i64 %16116, i64* %3, align 8
  %16117 = inttoptr i64 %16115 to i32*
  %16118 = load i32, i32* %16117, align 4
  %16119 = zext i32 %16118 to i64
  store i64 %16119, i64* %RAX.i3587.phi.trans.insert, align 8
  %16120 = add i64 %16082, -164
  %16121 = add i64 %16114, 9
  store i64 %16121, i64* %3, align 8
  %16122 = inttoptr i64 %16120 to i32*
  %16123 = load i32, i32* %16122, align 4
  %16124 = sub i32 %16118, %16123
  %16125 = zext i32 %16124 to i64
  store i64 %16125, i64* %RAX.i3587.phi.trans.insert, align 8
  %16126 = icmp ult i32 %16118, %16123
  %16127 = zext i1 %16126 to i8
  store i8 %16127, i8* %32, align 1
  %16128 = and i32 %16124, 255
  %16129 = tail call i32 @llvm.ctpop.i32(i32 %16128)
  %16130 = trunc i32 %16129 to i8
  %16131 = and i8 %16130, 1
  %16132 = xor i8 %16131, 1
  store i8 %16132, i8* %39, align 1
  %16133 = xor i32 %16123, %16118
  %16134 = xor i32 %16133, %16124
  %16135 = lshr i32 %16134, 4
  %16136 = trunc i32 %16135 to i8
  %16137 = and i8 %16136, 1
  store i8 %16137, i8* %45, align 1
  %16138 = icmp eq i32 %16124, 0
  %16139 = zext i1 %16138 to i8
  store i8 %16139, i8* %48, align 1
  %16140 = lshr i32 %16124, 31
  %16141 = trunc i32 %16140 to i8
  store i8 %16141, i8* %51, align 1
  %16142 = lshr i32 %16118, 31
  %16143 = lshr i32 %16123, 31
  %16144 = xor i32 %16143, %16142
  %16145 = xor i32 %16140, %16142
  %16146 = add nuw nsw i32 %16145, %16144
  %16147 = icmp eq i32 %16146, 2
  %16148 = zext i1 %16147 to i8
  store i8 %16148, i8* %57, align 1
  store i64 %16125, i64* %RDI.i1133, align 8
  %16149 = add i64 %16114, -136827
  %16150 = add i64 %16114, 16
  %16151 = load i64, i64* %6, align 8
  %16152 = add i64 %16151, -8
  %16153 = inttoptr i64 %16152 to i64*
  store i64 %16150, i64* %16153, align 8
  store i64 %16152, i64* %6, align 8
  store i64 %16149, i64* %3, align 8
  %16154 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %16080)
  %16155 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %16156 = load i64, i64* %RBP.i, align 8
  %16157 = add i64 %16156, -76
  %16158 = load i64, i64* %3, align 8
  %16159 = add i64 %16158, 3
  store i64 %16159, i64* %3, align 8
  %16160 = inttoptr i64 %16157 to i32*
  %16161 = load i32, i32* %16160, align 4
  %16162 = sub i32 %16155, %16161
  %16163 = icmp ult i32 %16155, %16161
  %16164 = zext i1 %16163 to i8
  store i8 %16164, i8* %32, align 1
  %16165 = and i32 %16162, 255
  %16166 = tail call i32 @llvm.ctpop.i32(i32 %16165)
  %16167 = trunc i32 %16166 to i8
  %16168 = and i8 %16167, 1
  %16169 = xor i8 %16168, 1
  store i8 %16169, i8* %39, align 1
  %16170 = xor i32 %16161, %16155
  %16171 = xor i32 %16170, %16162
  %16172 = lshr i32 %16171, 4
  %16173 = trunc i32 %16172 to i8
  %16174 = and i8 %16173, 1
  store i8 %16174, i8* %45, align 1
  %16175 = icmp eq i32 %16162, 0
  %16176 = zext i1 %16175 to i8
  store i8 %16176, i8* %48, align 1
  %16177 = lshr i32 %16162, 31
  %16178 = trunc i32 %16177 to i8
  store i8 %16178, i8* %51, align 1
  %16179 = lshr i32 %16155, 31
  %16180 = lshr i32 %16161, 31
  %16181 = xor i32 %16180, %16179
  %16182 = xor i32 %16177, %16179
  %16183 = add nuw nsw i32 %16182, %16181
  %16184 = icmp eq i32 %16183, 2
  %16185 = zext i1 %16184 to i8
  store i8 %16185, i8* %57, align 1
  %16186 = icmp ne i8 %16178, 0
  %16187 = xor i1 %16186, %16184
  %.demorgan482 = or i1 %16175, %16187
  %.v557 = select i1 %.demorgan482, i64 9, i64 321
  %16188 = add i64 %16158, %.v557
  store i64 %16188, i64* %3, align 8
  br i1 %.demorgan482, label %block_422694, label %block_.L_4227cc

block_422694:                                     ; preds = %block_42267b
  %16189 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %16189, i64* %RAX.i3587.phi.trans.insert, align 8
  %16190 = add i64 %16156, -100
  %16191 = add i64 %16188, 11
  store i64 %16191, i64* %3, align 8
  %16192 = inttoptr i64 %16190 to i32*
  %16193 = load i32, i32* %16192, align 4
  %16194 = zext i32 %16193 to i64
  store i64 %16194, i64* %RCX.i4260.pre-phi, align 8
  %16195 = add i64 %16156, -164
  %16196 = add i64 %16188, 17
  store i64 %16196, i64* %3, align 8
  %16197 = inttoptr i64 %16195 to i32*
  %16198 = load i32, i32* %16197, align 4
  %16199 = sub i32 %16193, %16198
  %16200 = zext i32 %16199 to i64
  store i64 %16200, i64* %RCX.i4260.pre-phi, align 8
  %16201 = icmp ult i32 %16193, %16198
  %16202 = zext i1 %16201 to i8
  store i8 %16202, i8* %32, align 1
  %16203 = and i32 %16199, 255
  %16204 = tail call i32 @llvm.ctpop.i32(i32 %16203)
  %16205 = trunc i32 %16204 to i8
  %16206 = and i8 %16205, 1
  %16207 = xor i8 %16206, 1
  store i8 %16207, i8* %39, align 1
  %16208 = xor i32 %16198, %16193
  %16209 = xor i32 %16208, %16199
  %16210 = lshr i32 %16209, 4
  %16211 = trunc i32 %16210 to i8
  %16212 = and i8 %16211, 1
  store i8 %16212, i8* %45, align 1
  %16213 = icmp eq i32 %16199, 0
  %16214 = zext i1 %16213 to i8
  store i8 %16214, i8* %48, align 1
  %16215 = lshr i32 %16199, 31
  %16216 = trunc i32 %16215 to i8
  store i8 %16216, i8* %51, align 1
  %16217 = lshr i32 %16193, 31
  %16218 = lshr i32 %16198, 31
  %16219 = xor i32 %16218, %16217
  %16220 = xor i32 %16215, %16217
  %16221 = add nuw nsw i32 %16220, %16219
  %16222 = icmp eq i32 %16221, 2
  %16223 = zext i1 %16222 to i8
  store i8 %16223, i8* %57, align 1
  %16224 = add i64 %16188, 20
  store i64 %16224, i64* %3, align 8
  %16225 = load i32, i32* %16160, align 4
  %16226 = add i32 %16225, %16199
  %16227 = zext i32 %16226 to i64
  store i64 %16227, i64* %RCX.i4260.pre-phi, align 8
  %16228 = icmp ult i32 %16226, %16199
  %16229 = icmp ult i32 %16226, %16225
  %16230 = or i1 %16228, %16229
  %16231 = zext i1 %16230 to i8
  store i8 %16231, i8* %32, align 1
  %16232 = and i32 %16226, 255
  %16233 = tail call i32 @llvm.ctpop.i32(i32 %16232)
  %16234 = trunc i32 %16233 to i8
  %16235 = and i8 %16234, 1
  %16236 = xor i8 %16235, 1
  store i8 %16236, i8* %39, align 1
  %16237 = xor i32 %16225, %16199
  %16238 = xor i32 %16237, %16226
  %16239 = lshr i32 %16238, 4
  %16240 = trunc i32 %16239 to i8
  %16241 = and i8 %16240, 1
  store i8 %16241, i8* %45, align 1
  %16242 = icmp eq i32 %16226, 0
  %16243 = zext i1 %16242 to i8
  store i8 %16243, i8* %48, align 1
  %16244 = lshr i32 %16226, 31
  %16245 = trunc i32 %16244 to i8
  store i8 %16245, i8* %51, align 1
  %16246 = lshr i32 %16225, 31
  %16247 = xor i32 %16244, %16215
  %16248 = xor i32 %16244, %16246
  %16249 = add nuw nsw i32 %16247, %16248
  %16250 = icmp eq i32 %16249, 2
  %16251 = zext i1 %16250 to i8
  store i8 %16251, i8* %57, align 1
  %16252 = sext i32 %16226 to i64
  store i64 %16252, i64* %RDX.i4317.pre-phi, align 8
  %16253 = shl nsw i64 %16252, 3
  %16254 = add i64 %16189, %16253
  %16255 = add i64 %16188, 27
  store i64 %16255, i64* %3, align 8
  %16256 = inttoptr i64 %16254 to i64*
  %16257 = load i64, i64* %16256, align 8
  store i64 %16257, i64* %RAX.i3587.phi.trans.insert, align 8
  %16258 = add i64 %16156, -96
  %16259 = add i64 %16188, 30
  store i64 %16259, i64* %3, align 8
  %16260 = inttoptr i64 %16258 to i32*
  %16261 = load i32, i32* %16260, align 4
  %16262 = zext i32 %16261 to i64
  store i64 %16262, i64* %RCX.i4260.pre-phi, align 8
  %16263 = load i64, i64* %RBP.i, align 8
  %16264 = add i64 %16263, -160
  %16265 = add i64 %16188, 36
  store i64 %16265, i64* %3, align 8
  %16266 = inttoptr i64 %16264 to i32*
  %16267 = load i32, i32* %16266, align 4
  %16268 = sub i32 %16261, %16267
  %16269 = zext i32 %16268 to i64
  store i64 %16269, i64* %RCX.i4260.pre-phi, align 8
  %16270 = icmp ult i32 %16261, %16267
  %16271 = zext i1 %16270 to i8
  store i8 %16271, i8* %32, align 1
  %16272 = and i32 %16268, 255
  %16273 = tail call i32 @llvm.ctpop.i32(i32 %16272)
  %16274 = trunc i32 %16273 to i8
  %16275 = and i8 %16274, 1
  %16276 = xor i8 %16275, 1
  store i8 %16276, i8* %39, align 1
  %16277 = xor i32 %16267, %16261
  %16278 = xor i32 %16277, %16268
  %16279 = lshr i32 %16278, 4
  %16280 = trunc i32 %16279 to i8
  %16281 = and i8 %16280, 1
  store i8 %16281, i8* %45, align 1
  %16282 = icmp eq i32 %16268, 0
  %16283 = zext i1 %16282 to i8
  store i8 %16283, i8* %48, align 1
  %16284 = lshr i32 %16268, 31
  %16285 = trunc i32 %16284 to i8
  store i8 %16285, i8* %51, align 1
  %16286 = lshr i32 %16261, 31
  %16287 = lshr i32 %16267, 31
  %16288 = xor i32 %16287, %16286
  %16289 = xor i32 %16284, %16286
  %16290 = add nuw nsw i32 %16289, %16288
  %16291 = icmp eq i32 %16290, 2
  %16292 = zext i1 %16291 to i8
  store i8 %16292, i8* %57, align 1
  %16293 = add i64 %16263, -76
  %16294 = add i64 %16188, 39
  store i64 %16294, i64* %3, align 8
  %16295 = inttoptr i64 %16293 to i32*
  %16296 = load i32, i32* %16295, align 4
  %16297 = add i32 %16296, %16268
  %16298 = zext i32 %16297 to i64
  store i64 %16298, i64* %RCX.i4260.pre-phi, align 8
  %16299 = icmp ult i32 %16297, %16268
  %16300 = icmp ult i32 %16297, %16296
  %16301 = or i1 %16299, %16300
  %16302 = zext i1 %16301 to i8
  store i8 %16302, i8* %32, align 1
  %16303 = and i32 %16297, 255
  %16304 = tail call i32 @llvm.ctpop.i32(i32 %16303)
  %16305 = trunc i32 %16304 to i8
  %16306 = and i8 %16305, 1
  %16307 = xor i8 %16306, 1
  store i8 %16307, i8* %39, align 1
  %16308 = xor i32 %16296, %16268
  %16309 = xor i32 %16308, %16297
  %16310 = lshr i32 %16309, 4
  %16311 = trunc i32 %16310 to i8
  %16312 = and i8 %16311, 1
  store i8 %16312, i8* %45, align 1
  %16313 = icmp eq i32 %16297, 0
  %16314 = zext i1 %16313 to i8
  store i8 %16314, i8* %48, align 1
  %16315 = lshr i32 %16297, 31
  %16316 = trunc i32 %16315 to i8
  store i8 %16316, i8* %51, align 1
  %16317 = lshr i32 %16296, 31
  %16318 = xor i32 %16315, %16284
  %16319 = xor i32 %16315, %16317
  %16320 = add nuw nsw i32 %16318, %16319
  %16321 = icmp eq i32 %16320, 2
  %16322 = zext i1 %16321 to i8
  store i8 %16322, i8* %57, align 1
  %16323 = sext i32 %16297 to i64
  store i64 %16323, i64* %RDX.i4317.pre-phi, align 8
  %16324 = shl nsw i64 %16323, 2
  %16325 = add i64 %16257, %16324
  %16326 = add i64 %16188, 46
  store i64 %16326, i64* %3, align 8
  %16327 = inttoptr i64 %16325 to i32*
  %16328 = load i32, i32* %16327, align 4
  store i8 0, i8* %32, align 1
  %16329 = and i32 %16328, 255
  %16330 = tail call i32 @llvm.ctpop.i32(i32 %16329)
  %16331 = trunc i32 %16330 to i8
  %16332 = and i8 %16331, 1
  %16333 = xor i8 %16332, 1
  store i8 %16333, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %16334 = icmp eq i32 %16328, 0
  %16335 = zext i1 %16334 to i8
  store i8 %16335, i8* %48, align 1
  %16336 = lshr i32 %16328, 31
  %16337 = trunc i32 %16336 to i8
  store i8 %16337, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v558 = select i1 %16334, i64 52, i64 307
  %16338 = add i64 %16188, %.v558
  store i64 %16338, i64* %3, align 8
  br i1 %16334, label %block_4226c8, label %block_.L_4227c7

block_4226c8:                                     ; preds = %block_422694
  %16339 = load i64, i64* %RBP.i, align 8
  %16340 = add i64 %16339, -132
  %16341 = add i64 %16338, 6
  store i64 %16341, i64* %3, align 8
  %16342 = inttoptr i64 %16340 to i32*
  %16343 = load i32, i32* %16342, align 4
  %16344 = zext i32 %16343 to i64
  store i64 %16344, i64* %RAX.i3587.phi.trans.insert, align 8
  %16345 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %16345, i64* %RCX.i4260.pre-phi, align 8
  %16346 = add i64 %16339, -96
  %16347 = add i64 %16338, 17
  store i64 %16347, i64* %3, align 8
  %16348 = inttoptr i64 %16346 to i32*
  %16349 = load i32, i32* %16348, align 4
  %16350 = zext i32 %16349 to i64
  store i64 %16350, i64* %RDX.i4317.pre-phi, align 8
  %16351 = add i64 %16339, -136
  %16352 = add i64 %16338, 23
  store i64 %16352, i64* %3, align 8
  %16353 = inttoptr i64 %16351 to i32*
  %16354 = load i32, i32* %16353, align 4
  %16355 = zext i32 %16354 to i64
  store i64 %16355, i64* %RSI.i739, align 8
  %16356 = add i64 %16339, -392
  %16357 = add i64 %16338, 30
  store i64 %16357, i64* %3, align 8
  %16358 = inttoptr i64 %16356 to i64*
  store i64 %16345, i64* %16358, align 8
  %16359 = load i32, i32* %ESI.i1656, align 4
  %16360 = zext i32 %16359 to i64
  %16361 = load i64, i64* %3, align 8
  store i64 %16360, i64* %RCX.i4260.pre-phi, align 8
  %16362 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %16363 = add i64 %16361, 4
  store i64 %16363, i64* %3, align 8
  %16364 = trunc i32 %16359 to i5
  switch i5 %16364, label %16371 [
    i5 0, label %routine_shll__cl___edx.exit1468
    i5 1, label %16365
  ]

; <label>:16365:                                  ; preds = %block_4226c8
  %16366 = trunc i64 %16362 to i32
  %16367 = shl i32 %16366, 1
  %16368 = icmp slt i32 %16366, 0
  %16369 = icmp slt i32 %16367, 0
  %16370 = xor i1 %16368, %16369
  br label %16381

; <label>:16371:                                  ; preds = %block_4226c8
  %16372 = and i32 %16359, 31
  %16373 = zext i32 %16372 to i64
  %16374 = add nuw nsw i64 %16373, 4294967295
  %16375 = and i64 %16362, 4294967295
  %16376 = and i64 %16374, 4294967295
  %16377 = shl i64 %16375, %16376
  %16378 = trunc i64 %16377 to i32
  %16379 = icmp slt i32 %16378, 0
  %16380 = shl i32 %16378, 1
  br label %16381

; <label>:16381:                                  ; preds = %16371, %16365
  %16382 = phi i1 [ %16368, %16365 ], [ %16379, %16371 ]
  %16383 = phi i1 [ %16370, %16365 ], [ false, %16371 ]
  %16384 = phi i32 [ %16367, %16365 ], [ %16380, %16371 ]
  %16385 = zext i32 %16384 to i64
  store i64 %16385, i64* %RDX.i4317.pre-phi, align 8
  %16386 = zext i1 %16382 to i8
  store i8 %16386, i8* %32, align 1
  %16387 = and i32 %16384, 254
  %16388 = tail call i32 @llvm.ctpop.i32(i32 %16387)
  %16389 = trunc i32 %16388 to i8
  %16390 = and i8 %16389, 1
  %16391 = xor i8 %16390, 1
  store i8 %16391, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %16392 = icmp eq i32 %16384, 0
  %16393 = zext i1 %16392 to i8
  store i8 %16393, i8* %48, align 1
  %16394 = lshr i32 %16384, 31
  %16395 = trunc i32 %16394 to i8
  store i8 %16395, i8* %51, align 1
  %16396 = zext i1 %16383 to i8
  store i8 %16396, i8* %57, align 1
  br label %routine_shll__cl___edx.exit1468

routine_shll__cl___edx.exit1468:                  ; preds = %16381, %block_4226c8
  %16397 = phi i64 [ %16385, %16381 ], [ %16362, %block_4226c8 ]
  %16398 = load i64, i64* %RBP.i, align 8
  %16399 = add i64 %16398, -152
  %16400 = add i64 %16361, 10
  store i64 %16400, i64* %3, align 8
  %16401 = trunc i64 %16397 to i32
  %16402 = inttoptr i64 %16399 to i32*
  %16403 = load i32, i32* %16402, align 4
  %16404 = sub i32 %16401, %16403
  %16405 = zext i32 %16404 to i64
  store i64 %16405, i64* %RDX.i4317.pre-phi, align 8
  %16406 = icmp ult i32 %16401, %16403
  %16407 = zext i1 %16406 to i8
  store i8 %16407, i8* %32, align 1
  %16408 = and i32 %16404, 255
  %16409 = tail call i32 @llvm.ctpop.i32(i32 %16408)
  %16410 = trunc i32 %16409 to i8
  %16411 = and i8 %16410, 1
  %16412 = xor i8 %16411, 1
  store i8 %16412, i8* %39, align 1
  %16413 = xor i32 %16403, %16401
  %16414 = xor i32 %16413, %16404
  %16415 = lshr i32 %16414, 4
  %16416 = trunc i32 %16415 to i8
  %16417 = and i8 %16416, 1
  store i8 %16417, i8* %45, align 1
  %16418 = icmp eq i32 %16404, 0
  %16419 = zext i1 %16418 to i8
  store i8 %16419, i8* %48, align 1
  %16420 = lshr i32 %16404, 31
  %16421 = trunc i32 %16420 to i8
  store i8 %16421, i8* %51, align 1
  %16422 = lshr i32 %16401, 31
  %16423 = lshr i32 %16403, 31
  %16424 = xor i32 %16423, %16422
  %16425 = xor i32 %16420, %16422
  %16426 = add nuw nsw i32 %16425, %16424
  %16427 = icmp eq i32 %16426, 2
  %16428 = zext i1 %16427 to i8
  store i8 %16428, i8* %57, align 1
  %16429 = sext i32 %16404 to i64
  store i64 %16429, i64* %RDI.i1133, align 8
  %16430 = add i64 %16398, -392
  %16431 = add i64 %16361, 20
  store i64 %16431, i64* %3, align 8
  %16432 = inttoptr i64 %16430 to i64*
  %16433 = load i64, i64* %16432, align 8
  store i64 %16433, i64* %R8.i5602, align 8
  %16434 = shl nsw i64 %16429, 2
  %16435 = add i64 %16434, %16433
  %16436 = add i64 %16361, 24
  store i64 %16436, i64* %3, align 8
  %16437 = inttoptr i64 %16435 to i32*
  %16438 = load i32, i32* %16437, align 4
  %16439 = zext i32 %16438 to i64
  store i64 %16439, i64* %RDX.i4317.pre-phi, align 8
  %16440 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %16440, i64* %RDI.i1133, align 8
  %16441 = add i64 %16398, -100
  %16442 = add i64 %16361, 35
  store i64 %16442, i64* %3, align 8
  %16443 = inttoptr i64 %16441 to i32*
  %16444 = load i32, i32* %16443, align 4
  %16445 = zext i32 %16444 to i64
  store i64 %16445, i64* %RSI.i739, align 8
  %16446 = add i64 %16398, -136
  %16447 = add i64 %16361, 41
  store i64 %16447, i64* %3, align 8
  %16448 = inttoptr i64 %16446 to i32*
  %16449 = load i32, i32* %16448, align 4
  %16450 = zext i32 %16449 to i64
  store i64 %16450, i64* %RCX.i4260.pre-phi, align 8
  %16451 = add i64 %16361, 43
  store i64 %16451, i64* %3, align 8
  %16452 = trunc i32 %16449 to i5
  switch i5 %16452, label %16458 [
    i5 0, label %routine_shll__cl___esi.exit1443
    i5 1, label %16453
  ]

; <label>:16453:                                  ; preds = %routine_shll__cl___edx.exit1468
  %16454 = shl i32 %16444, 1
  %16455 = icmp slt i32 %16444, 0
  %16456 = icmp slt i32 %16454, 0
  %16457 = xor i1 %16455, %16456
  br label %16467

; <label>:16458:                                  ; preds = %routine_shll__cl___edx.exit1468
  %16459 = and i32 %16449, 31
  %16460 = zext i32 %16459 to i64
  %16461 = add nuw nsw i64 %16460, 4294967295
  %16462 = and i64 %16461, 4294967295
  %16463 = shl i64 %16445, %16462
  %16464 = trunc i64 %16463 to i32
  %16465 = icmp slt i32 %16464, 0
  %16466 = shl i32 %16464, 1
  br label %16467

; <label>:16467:                                  ; preds = %16458, %16453
  %16468 = phi i1 [ %16455, %16453 ], [ %16465, %16458 ]
  %16469 = phi i1 [ %16457, %16453 ], [ false, %16458 ]
  %16470 = phi i32 [ %16454, %16453 ], [ %16466, %16458 ]
  %16471 = zext i32 %16470 to i64
  store i64 %16471, i64* %RSI.i739, align 8
  %16472 = zext i1 %16468 to i8
  store i8 %16472, i8* %32, align 1
  %16473 = and i32 %16470, 254
  %16474 = tail call i32 @llvm.ctpop.i32(i32 %16473)
  %16475 = trunc i32 %16474 to i8
  %16476 = and i8 %16475, 1
  %16477 = xor i8 %16476, 1
  store i8 %16477, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %16478 = icmp eq i32 %16470, 0
  %16479 = zext i1 %16478 to i8
  store i8 %16479, i8* %48, align 1
  %16480 = lshr i32 %16470, 31
  %16481 = trunc i32 %16480 to i8
  store i8 %16481, i8* %51, align 1
  %16482 = zext i1 %16469 to i8
  store i8 %16482, i8* %57, align 1
  br label %routine_shll__cl___esi.exit1443

routine_shll__cl___esi.exit1443:                  ; preds = %16467, %routine_shll__cl___edx.exit1468
  %16483 = phi i32 [ %16470, %16467 ], [ %16444, %routine_shll__cl___edx.exit1468 ]
  %16484 = add i64 %16398, -156
  %16485 = add i64 %16361, 49
  store i64 %16485, i64* %3, align 8
  %16486 = inttoptr i64 %16484 to i32*
  %16487 = load i32, i32* %16486, align 4
  %16488 = sub i32 %16483, %16487
  %16489 = zext i32 %16488 to i64
  store i64 %16489, i64* %RSI.i739, align 8
  %16490 = icmp ult i32 %16483, %16487
  %16491 = zext i1 %16490 to i8
  store i8 %16491, i8* %32, align 1
  %16492 = and i32 %16488, 255
  %16493 = tail call i32 @llvm.ctpop.i32(i32 %16492)
  %16494 = trunc i32 %16493 to i8
  %16495 = and i8 %16494, 1
  %16496 = xor i8 %16495, 1
  store i8 %16496, i8* %39, align 1
  %16497 = xor i32 %16487, %16483
  %16498 = xor i32 %16497, %16488
  %16499 = lshr i32 %16498, 4
  %16500 = trunc i32 %16499 to i8
  %16501 = and i8 %16500, 1
  store i8 %16501, i8* %45, align 1
  %16502 = icmp eq i32 %16488, 0
  %16503 = zext i1 %16502 to i8
  store i8 %16503, i8* %48, align 1
  %16504 = lshr i32 %16488, 31
  %16505 = trunc i32 %16504 to i8
  store i8 %16505, i8* %51, align 1
  %16506 = lshr i32 %16483, 31
  %16507 = lshr i32 %16487, 31
  %16508 = xor i32 %16507, %16506
  %16509 = xor i32 %16504, %16506
  %16510 = add nuw nsw i32 %16509, %16508
  %16511 = icmp eq i32 %16510, 2
  %16512 = zext i1 %16511 to i8
  store i8 %16512, i8* %57, align 1
  %16513 = sext i32 %16488 to i64
  store i64 %16513, i64* %R9.i5580, align 8
  %16514 = shl nsw i64 %16513, 2
  %16515 = add i64 %16440, %16514
  %16516 = add i64 %16361, 56
  store i64 %16516, i64* %3, align 8
  %16517 = inttoptr i64 %16515 to i32*
  %16518 = load i32, i32* %16517, align 4
  %16519 = add i32 %16518, %16438
  %16520 = zext i32 %16519 to i64
  store i64 %16520, i64* %RDX.i4317.pre-phi, align 8
  %16521 = icmp ult i32 %16519, %16438
  %16522 = icmp ult i32 %16519, %16518
  %16523 = or i1 %16521, %16522
  %16524 = zext i1 %16523 to i8
  store i8 %16524, i8* %32, align 1
  %16525 = and i32 %16519, 255
  %16526 = tail call i32 @llvm.ctpop.i32(i32 %16525)
  %16527 = trunc i32 %16526 to i8
  %16528 = and i8 %16527, 1
  %16529 = xor i8 %16528, 1
  store i8 %16529, i8* %39, align 1
  %16530 = xor i32 %16518, %16438
  %16531 = xor i32 %16530, %16519
  %16532 = lshr i32 %16531, 4
  %16533 = trunc i32 %16532 to i8
  %16534 = and i8 %16533, 1
  store i8 %16534, i8* %45, align 1
  %16535 = icmp eq i32 %16519, 0
  %16536 = zext i1 %16535 to i8
  store i8 %16536, i8* %48, align 1
  %16537 = lshr i32 %16519, 31
  %16538 = trunc i32 %16537 to i8
  store i8 %16538, i8* %51, align 1
  %16539 = lshr i32 %16438, 31
  %16540 = lshr i32 %16518, 31
  %16541 = xor i32 %16537, %16539
  %16542 = xor i32 %16537, %16540
  %16543 = add nuw nsw i32 %16541, %16542
  %16544 = icmp eq i32 %16543, 2
  %16545 = zext i1 %16544 to i8
  store i8 %16545, i8* %57, align 1
  %16546 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %16547 = shl i64 %16546, 32
  %16548 = ashr exact i64 %16547, 32
  %16549 = sext i32 %16519 to i64
  %16550 = mul nsw i64 %16549, %16548
  %16551 = shl i64 %16550, 32
  %16552 = ashr i64 %16551, 47
  %16553 = lshr i64 %16552, 1
  %16554 = trunc i64 %16552 to i8
  %16555 = and i8 %16554, 1
  %16556 = trunc i64 %16553 to i32
  %16557 = and i64 %16553, 4294967295
  store i64 %16557, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %16555, i8* %32, align 1
  %16558 = and i32 %16556, 255
  %16559 = tail call i32 @llvm.ctpop.i32(i32 %16558)
  %16560 = trunc i32 %16559 to i8
  %16561 = and i8 %16560, 1
  %16562 = xor i8 %16561, 1
  store i8 %16562, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %16563 = icmp eq i32 %16556, 0
  %16564 = zext i1 %16563 to i8
  store i8 %16564, i8* %48, align 1
  %16565 = lshr i64 %16552, 32
  %16566 = trunc i64 %16565 to i8
  %16567 = and i8 %16566, 1
  store i8 %16567, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %16568 = load i64, i64* %RBP.i, align 8
  %16569 = add i64 %16568, -104
  %16570 = trunc i64 %16553 to i32
  %16571 = add i64 %16361, 65
  store i64 %16571, i64* %3, align 8
  %16572 = inttoptr i64 %16569 to i32*
  store i32 %16570, i32* %16572, align 4
  %16573 = load i64, i64* %RBP.i, align 8
  %16574 = add i64 %16573, -128
  %16575 = load i64, i64* %3, align 8
  %16576 = add i64 %16575, 4
  store i64 %16576, i64* %3, align 8
  %16577 = inttoptr i64 %16574 to i64*
  %16578 = load i64, i64* %16577, align 8
  store i64 %16578, i64* %RDI.i1133, align 8
  %16579 = add i64 %16573, -32
  %16580 = add i64 %16575, 8
  store i64 %16580, i64* %3, align 8
  %16581 = inttoptr i64 %16579 to i64*
  %16582 = load i64, i64* %16581, align 8
  store i64 %16582, i64* %RSI.i739, align 8
  %16583 = add i64 %16573, -112
  %16584 = add i64 %16575, 12
  store i64 %16584, i64* %3, align 8
  %16585 = inttoptr i64 %16583 to i64*
  %16586 = load i64, i64* %16585, align 8
  store i64 %16586, i64* %RDX.i4317.pre-phi, align 8
  %16587 = add i64 %16573, -140
  %16588 = add i64 %16575, 18
  store i64 %16588, i64* %3, align 8
  %16589 = inttoptr i64 %16587 to i32*
  %16590 = load i32, i32* %16589, align 4
  %16591 = zext i32 %16590 to i64
  store i64 %16591, i64* %RCX.i4260.pre-phi, align 8
  %16592 = add i64 %16573, -144
  %16593 = add i64 %16575, 25
  store i64 %16593, i64* %3, align 8
  %16594 = inttoptr i64 %16592 to i32*
  %16595 = load i32, i32* %16594, align 4
  %16596 = zext i32 %16595 to i64
  store i64 %16596, i64* %R8.i5602, align 8
  %16597 = add i64 %16573, -148
  %16598 = add i64 %16575, 32
  store i64 %16598, i64* %3, align 8
  %16599 = inttoptr i64 %16597 to i32*
  %16600 = load i32, i32* %16599, align 4
  %16601 = zext i32 %16600 to i64
  store i64 %16601, i64* %R9.i5580, align 8
  %16602 = add i64 %16573, -104
  %16603 = add i64 %16575, 35
  store i64 %16603, i64* %3, align 8
  %16604 = inttoptr i64 %16602 to i32*
  %16605 = load i32, i32* %16604, align 4
  %16606 = zext i32 %16605 to i64
  store i64 %16606, i64* %RAX.i3587.phi.trans.insert, align 8
  %16607 = add i64 %16573, -80
  %16608 = add i64 %16575, 39
  store i64 %16608, i64* %3, align 8
  %16609 = inttoptr i64 %16607 to i32*
  %16610 = load i32, i32* %16609, align 4
  %16611 = zext i32 %16610 to i64
  store i64 %16611, i64* %68, align 8
  %16612 = add i64 %16573, -96
  %16613 = add i64 %16575, 43
  store i64 %16613, i64* %3, align 8
  %16614 = inttoptr i64 %16612 to i32*
  %16615 = load i32, i32* %16614, align 4
  %16616 = zext i32 %16615 to i64
  store i64 %16616, i64* %R11.i, align 8
  %16617 = add i64 %16573, -100
  %16618 = add i64 %16575, 46
  store i64 %16618, i64* %3, align 8
  %16619 = inttoptr i64 %16617 to i32*
  %16620 = load i32, i32* %16619, align 4
  %16621 = zext i32 %16620 to i64
  store i64 %16621, i64* %RBX.i615, align 8
  %16622 = load i32*, i32** %2119, align 8
  %16623 = add i64 %16575, 49
  store i64 %16623, i64* %3, align 8
  store i32 %16605, i32* %16622, align 4
  %16624 = load i64, i64* %6, align 8
  %16625 = add i64 %16624, 8
  %16626 = load i32, i32* %R10D.i761, align 4
  %16627 = load i64, i64* %3, align 8
  %16628 = add i64 %16627, 5
  store i64 %16628, i64* %3, align 8
  %16629 = inttoptr i64 %16625 to i32*
  store i32 %16626, i32* %16629, align 4
  %16630 = load i64, i64* %6, align 8
  %16631 = add i64 %16630, 16
  %16632 = load i32, i32* %R11D.i5540, align 4
  %16633 = load i64, i64* %3, align 8
  %16634 = add i64 %16633, 5
  store i64 %16634, i64* %3, align 8
  %16635 = inttoptr i64 %16631 to i32*
  store i32 %16632, i32* %16635, align 4
  %16636 = load i64, i64* %6, align 8
  %16637 = add i64 %16636, 24
  %16638 = load i32, i32* %EBX.i5525, align 4
  %16639 = load i64, i64* %3, align 8
  %16640 = add i64 %16639, 4
  store i64 %16640, i64* %3, align 8
  %16641 = inttoptr i64 %16637 to i32*
  store i32 %16638, i32* %16641, align 4
  %16642 = load i64, i64* %3, align 8
  %16643 = add i64 %16642, -8886
  %16644 = add i64 %16642, 5
  %16645 = load i64, i64* %6, align 8
  %16646 = add i64 %16645, -8
  %16647 = inttoptr i64 %16646 to i64*
  store i64 %16644, i64* %16647, align 8
  store i64 %16646, i64* %6, align 8
  store i64 %16643, i64* %3, align 8
  %call2_422766 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %16643, %struct.Memory* %16154)
  %16648 = load i64, i64* %RBP.i, align 8
  %16649 = add i64 %16648, -104
  %16650 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %16651 = load i64, i64* %3, align 8
  %16652 = add i64 %16651, 3
  store i64 %16652, i64* %3, align 8
  %16653 = inttoptr i64 %16649 to i32*
  store i32 %16650, i32* %16653, align 4
  %16654 = load i64, i64* %RBP.i, align 8
  %16655 = add i64 %16654, -104
  %16656 = load i64, i64* %3, align 8
  %16657 = add i64 %16656, 3
  store i64 %16657, i64* %3, align 8
  %16658 = inttoptr i64 %16655 to i32*
  %16659 = load i32, i32* %16658, align 4
  %16660 = zext i32 %16659 to i64
  store i64 %16660, i64* %RAX.i3587.phi.trans.insert, align 8
  %16661 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %16661, i64* %RDX.i4317.pre-phi, align 8
  %16662 = add i64 %16654, -100
  %16663 = add i64 %16656, 14
  store i64 %16663, i64* %3, align 8
  %16664 = inttoptr i64 %16662 to i32*
  %16665 = load i32, i32* %16664, align 4
  %16666 = zext i32 %16665 to i64
  store i64 %16666, i64* %RCX.i4260.pre-phi, align 8
  %16667 = add i64 %16654, -164
  %16668 = add i64 %16656, 20
  store i64 %16668, i64* %3, align 8
  %16669 = inttoptr i64 %16667 to i32*
  %16670 = load i32, i32* %16669, align 4
  %16671 = sub i32 %16665, %16670
  %16672 = zext i32 %16671 to i64
  store i64 %16672, i64* %RCX.i4260.pre-phi, align 8
  %16673 = icmp ult i32 %16665, %16670
  %16674 = zext i1 %16673 to i8
  store i8 %16674, i8* %32, align 1
  %16675 = and i32 %16671, 255
  %16676 = tail call i32 @llvm.ctpop.i32(i32 %16675)
  %16677 = trunc i32 %16676 to i8
  %16678 = and i8 %16677, 1
  %16679 = xor i8 %16678, 1
  store i8 %16679, i8* %39, align 1
  %16680 = xor i32 %16670, %16665
  %16681 = xor i32 %16680, %16671
  %16682 = lshr i32 %16681, 4
  %16683 = trunc i32 %16682 to i8
  %16684 = and i8 %16683, 1
  store i8 %16684, i8* %45, align 1
  %16685 = icmp eq i32 %16671, 0
  %16686 = zext i1 %16685 to i8
  store i8 %16686, i8* %48, align 1
  %16687 = lshr i32 %16671, 31
  %16688 = trunc i32 %16687 to i8
  store i8 %16688, i8* %51, align 1
  %16689 = lshr i32 %16665, 31
  %16690 = lshr i32 %16670, 31
  %16691 = xor i32 %16690, %16689
  %16692 = xor i32 %16687, %16689
  %16693 = add nuw nsw i32 %16692, %16691
  %16694 = icmp eq i32 %16693, 2
  %16695 = zext i1 %16694 to i8
  store i8 %16695, i8* %57, align 1
  %16696 = add i64 %16654, -76
  %16697 = add i64 %16656, 23
  store i64 %16697, i64* %3, align 8
  %16698 = inttoptr i64 %16696 to i32*
  %16699 = load i32, i32* %16698, align 4
  %16700 = add i32 %16699, %16671
  %16701 = zext i32 %16700 to i64
  store i64 %16701, i64* %RCX.i4260.pre-phi, align 8
  %16702 = icmp ult i32 %16700, %16671
  %16703 = icmp ult i32 %16700, %16699
  %16704 = or i1 %16702, %16703
  %16705 = zext i1 %16704 to i8
  store i8 %16705, i8* %32, align 1
  %16706 = and i32 %16700, 255
  %16707 = tail call i32 @llvm.ctpop.i32(i32 %16706)
  %16708 = trunc i32 %16707 to i8
  %16709 = and i8 %16708, 1
  %16710 = xor i8 %16709, 1
  store i8 %16710, i8* %39, align 1
  %16711 = xor i32 %16699, %16671
  %16712 = xor i32 %16711, %16700
  %16713 = lshr i32 %16712, 4
  %16714 = trunc i32 %16713 to i8
  %16715 = and i8 %16714, 1
  store i8 %16715, i8* %45, align 1
  %16716 = icmp eq i32 %16700, 0
  %16717 = zext i1 %16716 to i8
  store i8 %16717, i8* %48, align 1
  %16718 = lshr i32 %16700, 31
  %16719 = trunc i32 %16718 to i8
  store i8 %16719, i8* %51, align 1
  %16720 = lshr i32 %16699, 31
  %16721 = xor i32 %16718, %16687
  %16722 = xor i32 %16718, %16720
  %16723 = add nuw nsw i32 %16721, %16722
  %16724 = icmp eq i32 %16723, 2
  %16725 = zext i1 %16724 to i8
  store i8 %16725, i8* %57, align 1
  %16726 = sext i32 %16700 to i64
  store i64 %16726, i64* %RSI.i739, align 8
  %16727 = shl nsw i64 %16726, 3
  %16728 = add i64 %16661, %16727
  %16729 = add i64 %16656, 30
  store i64 %16729, i64* %3, align 8
  %16730 = inttoptr i64 %16728 to i64*
  %16731 = load i64, i64* %16730, align 8
  store i64 %16731, i64* %RDX.i4317.pre-phi, align 8
  %16732 = load i64, i64* %RBP.i, align 8
  %16733 = add i64 %16732, -96
  %16734 = add i64 %16656, 33
  store i64 %16734, i64* %3, align 8
  %16735 = inttoptr i64 %16733 to i32*
  %16736 = load i32, i32* %16735, align 4
  %16737 = zext i32 %16736 to i64
  store i64 %16737, i64* %RCX.i4260.pre-phi, align 8
  %16738 = add i64 %16732, -160
  %16739 = add i64 %16656, 39
  store i64 %16739, i64* %3, align 8
  %16740 = inttoptr i64 %16738 to i32*
  %16741 = load i32, i32* %16740, align 4
  %16742 = sub i32 %16736, %16741
  %16743 = zext i32 %16742 to i64
  store i64 %16743, i64* %RCX.i4260.pre-phi, align 8
  %16744 = icmp ult i32 %16736, %16741
  %16745 = zext i1 %16744 to i8
  store i8 %16745, i8* %32, align 1
  %16746 = and i32 %16742, 255
  %16747 = tail call i32 @llvm.ctpop.i32(i32 %16746)
  %16748 = trunc i32 %16747 to i8
  %16749 = and i8 %16748, 1
  %16750 = xor i8 %16749, 1
  store i8 %16750, i8* %39, align 1
  %16751 = xor i32 %16741, %16736
  %16752 = xor i32 %16751, %16742
  %16753 = lshr i32 %16752, 4
  %16754 = trunc i32 %16753 to i8
  %16755 = and i8 %16754, 1
  store i8 %16755, i8* %45, align 1
  %16756 = icmp eq i32 %16742, 0
  %16757 = zext i1 %16756 to i8
  store i8 %16757, i8* %48, align 1
  %16758 = lshr i32 %16742, 31
  %16759 = trunc i32 %16758 to i8
  store i8 %16759, i8* %51, align 1
  %16760 = lshr i32 %16736, 31
  %16761 = lshr i32 %16741, 31
  %16762 = xor i32 %16761, %16760
  %16763 = xor i32 %16758, %16760
  %16764 = add nuw nsw i32 %16763, %16762
  %16765 = icmp eq i32 %16764, 2
  %16766 = zext i1 %16765 to i8
  store i8 %16766, i8* %57, align 1
  %16767 = add i64 %16732, -76
  %16768 = add i64 %16656, 42
  store i64 %16768, i64* %3, align 8
  %16769 = inttoptr i64 %16767 to i32*
  %16770 = load i32, i32* %16769, align 4
  %16771 = add i32 %16770, %16742
  %16772 = zext i32 %16771 to i64
  store i64 %16772, i64* %RCX.i4260.pre-phi, align 8
  %16773 = icmp ult i32 %16771, %16742
  %16774 = icmp ult i32 %16771, %16770
  %16775 = or i1 %16773, %16774
  %16776 = zext i1 %16775 to i8
  store i8 %16776, i8* %32, align 1
  %16777 = and i32 %16771, 255
  %16778 = tail call i32 @llvm.ctpop.i32(i32 %16777)
  %16779 = trunc i32 %16778 to i8
  %16780 = and i8 %16779, 1
  %16781 = xor i8 %16780, 1
  store i8 %16781, i8* %39, align 1
  %16782 = xor i32 %16770, %16742
  %16783 = xor i32 %16782, %16771
  %16784 = lshr i32 %16783, 4
  %16785 = trunc i32 %16784 to i8
  %16786 = and i8 %16785, 1
  store i8 %16786, i8* %45, align 1
  %16787 = icmp eq i32 %16771, 0
  %16788 = zext i1 %16787 to i8
  store i8 %16788, i8* %48, align 1
  %16789 = lshr i32 %16771, 31
  %16790 = trunc i32 %16789 to i8
  store i8 %16790, i8* %51, align 1
  %16791 = lshr i32 %16770, 31
  %16792 = xor i32 %16789, %16758
  %16793 = xor i32 %16789, %16791
  %16794 = add nuw nsw i32 %16792, %16793
  %16795 = icmp eq i32 %16794, 2
  %16796 = zext i1 %16795 to i8
  store i8 %16796, i8* %57, align 1
  %16797 = sext i32 %16771 to i64
  store i64 %16797, i64* %RSI.i739, align 8
  %16798 = shl nsw i64 %16797, 2
  %16799 = add i64 %16731, %16798
  %16800 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %16801 = add i64 %16656, 48
  store i64 %16801, i64* %3, align 8
  %16802 = inttoptr i64 %16799 to i32*
  store i32 %16800, i32* %16802, align 4
  %16803 = load i64, i64* %RBP.i, align 8
  %16804 = add i64 %16803, -104
  %16805 = load i64, i64* %3, align 8
  %16806 = add i64 %16805, 3
  store i64 %16806, i64* %3, align 8
  %16807 = inttoptr i64 %16804 to i32*
  %16808 = load i32, i32* %16807, align 4
  %16809 = zext i32 %16808 to i64
  store i64 %16809, i64* %RAX.i3587.phi.trans.insert, align 8
  %16810 = add i64 %16803, -80
  %16811 = add i64 %16805, 6
  store i64 %16811, i64* %3, align 8
  %16812 = inttoptr i64 %16810 to i32*
  %16813 = load i32, i32* %16812, align 4
  %16814 = sub i32 %16808, %16813
  %16815 = icmp ult i32 %16808, %16813
  %16816 = zext i1 %16815 to i8
  store i8 %16816, i8* %32, align 1
  %16817 = and i32 %16814, 255
  %16818 = tail call i32 @llvm.ctpop.i32(i32 %16817)
  %16819 = trunc i32 %16818 to i8
  %16820 = and i8 %16819, 1
  %16821 = xor i8 %16820, 1
  store i8 %16821, i8* %39, align 1
  %16822 = xor i32 %16813, %16808
  %16823 = xor i32 %16822, %16814
  %16824 = lshr i32 %16823, 4
  %16825 = trunc i32 %16824 to i8
  %16826 = and i8 %16825, 1
  store i8 %16826, i8* %45, align 1
  %16827 = icmp eq i32 %16814, 0
  %16828 = zext i1 %16827 to i8
  store i8 %16828, i8* %48, align 1
  %16829 = lshr i32 %16814, 31
  %16830 = trunc i32 %16829 to i8
  store i8 %16830, i8* %51, align 1
  %16831 = lshr i32 %16808, 31
  %16832 = lshr i32 %16813, 31
  %16833 = xor i32 %16832, %16831
  %16834 = xor i32 %16829, %16831
  %16835 = add nuw nsw i32 %16834, %16833
  %16836 = icmp eq i32 %16835, 2
  %16837 = zext i1 %16836 to i8
  store i8 %16837, i8* %57, align 1
  %16838 = icmp ne i8 %16830, 0
  %16839 = xor i1 %16838, %16836
  %.v559 = select i1 %16839, i64 12, i64 36
  %16840 = add i64 %16805, %.v559
  store i64 %16840, i64* %3, align 8
  br i1 %16839, label %block_4227aa, label %block_.L_4227c2

block_4227aa:                                     ; preds = %routine_shll__cl___esi.exit1443
  %16841 = add i64 %16803, -96
  %16842 = add i64 %16840, 3
  store i64 %16842, i64* %3, align 8
  %16843 = inttoptr i64 %16841 to i32*
  %16844 = load i32, i32* %16843, align 4
  %16845 = zext i32 %16844 to i64
  store i64 %16845, i64* %RAX.i3587.phi.trans.insert, align 8
  %16846 = add i64 %16803, -168
  %16847 = add i64 %16840, 9
  store i64 %16847, i64* %3, align 8
  %16848 = inttoptr i64 %16846 to i32*
  store i32 %16844, i32* %16848, align 4
  %16849 = load i64, i64* %RBP.i, align 8
  %16850 = add i64 %16849, -100
  %16851 = load i64, i64* %3, align 8
  %16852 = add i64 %16851, 3
  store i64 %16852, i64* %3, align 8
  %16853 = inttoptr i64 %16850 to i32*
  %16854 = load i32, i32* %16853, align 4
  %16855 = zext i32 %16854 to i64
  store i64 %16855, i64* %RAX.i3587.phi.trans.insert, align 8
  %16856 = add i64 %16849, -172
  %16857 = add i64 %16851, 9
  store i64 %16857, i64* %3, align 8
  %16858 = inttoptr i64 %16856 to i32*
  store i32 %16854, i32* %16858, align 4
  %16859 = load i64, i64* %RBP.i, align 8
  %16860 = add i64 %16859, -104
  %16861 = load i64, i64* %3, align 8
  %16862 = add i64 %16861, 3
  store i64 %16862, i64* %3, align 8
  %16863 = inttoptr i64 %16860 to i32*
  %16864 = load i32, i32* %16863, align 4
  %16865 = zext i32 %16864 to i64
  store i64 %16865, i64* %RAX.i3587.phi.trans.insert, align 8
  %16866 = add i64 %16859, -80
  %16867 = add i64 %16861, 6
  store i64 %16867, i64* %3, align 8
  %16868 = inttoptr i64 %16866 to i32*
  store i32 %16864, i32* %16868, align 4
  %.pre402 = load i64, i64* %3, align 8
  br label %block_.L_4227c2

block_.L_4227c2:                                  ; preds = %routine_shll__cl___esi.exit1443, %block_4227aa
  %16869 = phi i64 [ %16840, %routine_shll__cl___esi.exit1443 ], [ %.pre402, %block_4227aa ]
  %16870 = add i64 %16869, 5
  store i64 %16870, i64* %3, align 8
  br label %block_.L_4227c7

block_.L_4227c7:                                  ; preds = %block_422694, %block_.L_4227c2
  %16871 = phi i64 [ %16338, %block_422694 ], [ %16870, %block_.L_4227c2 ]
  %MEMORY.72 = phi %struct.Memory* [ %16154, %block_422694 ], [ %call2_422766, %block_.L_4227c2 ]
  %16872 = add i64 %16871, 5
  store i64 %16872, i64* %3, align 8
  %.pre403 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4227cc

block_.L_4227cc:                                  ; preds = %block_42267b, %block_422632, %block_.L_4227c7
  %16873 = phi i64 [ %16082, %block_422632 ], [ %16156, %block_42267b ], [ %.pre403, %block_.L_4227c7 ]
  %16874 = phi i64 [ %16114, %block_422632 ], [ %16188, %block_42267b ], [ %16872, %block_.L_4227c7 ]
  %MEMORY.73 = phi %struct.Memory* [ %16080, %block_422632 ], [ %16154, %block_42267b ], [ %MEMORY.72, %block_.L_4227c7 ]
  %16875 = add i64 %16873, -92
  %16876 = add i64 %16874, 8
  store i64 %16876, i64* %3, align 8
  %16877 = inttoptr i64 %16875 to i32*
  %16878 = load i32, i32* %16877, align 4
  %16879 = add i32 %16878, 1
  %16880 = zext i32 %16879 to i64
  store i64 %16880, i64* %RAX.i3587.phi.trans.insert, align 8
  %16881 = icmp eq i32 %16878, -1
  %16882 = icmp eq i32 %16879, 0
  %16883 = or i1 %16881, %16882
  %16884 = zext i1 %16883 to i8
  store i8 %16884, i8* %32, align 1
  %16885 = and i32 %16879, 255
  %16886 = tail call i32 @llvm.ctpop.i32(i32 %16885)
  %16887 = trunc i32 %16886 to i8
  %16888 = and i8 %16887, 1
  %16889 = xor i8 %16888, 1
  store i8 %16889, i8* %39, align 1
  %16890 = xor i32 %16879, %16878
  %16891 = lshr i32 %16890, 4
  %16892 = trunc i32 %16891 to i8
  %16893 = and i8 %16892, 1
  store i8 %16893, i8* %45, align 1
  %16894 = zext i1 %16882 to i8
  store i8 %16894, i8* %48, align 1
  %16895 = lshr i32 %16879, 31
  %16896 = trunc i32 %16895 to i8
  store i8 %16896, i8* %51, align 1
  %16897 = lshr i32 %16878, 31
  %16898 = xor i32 %16895, %16897
  %16899 = add nuw nsw i32 %16898, %16895
  %16900 = icmp eq i32 %16899, 2
  %16901 = zext i1 %16900 to i8
  store i8 %16901, i8* %57, align 1
  %16902 = add i64 %16874, 14
  store i64 %16902, i64* %3, align 8
  store i32 %16879, i32* %16877, align 4
  %16903 = load i64, i64* %3, align 8
  %16904 = add i64 %16903, -434
  store i64 %16904, i64* %3, align 8
  br label %block_.L_422628

block_.L_4227df:                                  ; preds = %block_.L_422628
  %16905 = add i64 %15917, -34
  %16906 = add i64 %15946, 4
  store i64 %16906, i64* %3, align 8
  %16907 = inttoptr i64 %16905 to i16*
  %16908 = load i16, i16* %16907, align 2
  %16909 = sext i16 %16908 to i64
  %16910 = and i64 %16909, 4294967295
  store i64 %16910, i64* %RAX.i3587.phi.trans.insert, align 8
  %16911 = sext i16 %16908 to i32
  store i8 0, i8* %32, align 1
  %16912 = and i32 %16911, 255
  %16913 = tail call i32 @llvm.ctpop.i32(i32 %16912)
  %16914 = trunc i32 %16913 to i8
  %16915 = and i8 %16914, 1
  %16916 = xor i8 %16915, 1
  store i8 %16916, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %16917 = icmp eq i16 %16908, 0
  %16918 = zext i1 %16917 to i8
  store i8 %16918, i8* %48, align 1
  %16919 = lshr i32 %16911, 31
  %16920 = trunc i32 %16919 to i8
  store i8 %16920, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %16921 = icmp ne i8 %16920, 0
  %16922 = or i1 %16917, %16921
  %.v479 = select i1 %16922, i64 113, i64 13
  %16923 = add i64 %15946, %.v479
  store i64 %16923, i64* %3, align 8
  br i1 %16922, label %block_.L_422850, label %block_4227ec

block_4227ec:                                     ; preds = %block_.L_4227df
  %16924 = add i64 %15917, -80
  %16925 = add i64 %16923, 3
  store i64 %16925, i64* %3, align 8
  %16926 = inttoptr i64 %16924 to i32*
  %16927 = load i32, i32* %16926, align 4
  %16928 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %16929 = sub i32 %16927, %16928
  %16930 = zext i32 %16929 to i64
  store i64 %16930, i64* %RAX.i3587.phi.trans.insert, align 8
  %16931 = icmp ult i32 %16927, %16928
  %16932 = zext i1 %16931 to i8
  store i8 %16932, i8* %32, align 1
  %16933 = and i32 %16929, 255
  %16934 = tail call i32 @llvm.ctpop.i32(i32 %16933)
  %16935 = trunc i32 %16934 to i8
  %16936 = and i8 %16935, 1
  %16937 = xor i8 %16936, 1
  store i8 %16937, i8* %39, align 1
  %16938 = xor i32 %16928, %16927
  %16939 = xor i32 %16938, %16929
  %16940 = lshr i32 %16939, 4
  %16941 = trunc i32 %16940 to i8
  %16942 = and i8 %16941, 1
  store i8 %16942, i8* %45, align 1
  %16943 = icmp eq i32 %16929, 0
  %16944 = zext i1 %16943 to i8
  store i8 %16944, i8* %48, align 1
  %16945 = lshr i32 %16929, 31
  %16946 = trunc i32 %16945 to i8
  store i8 %16946, i8* %51, align 1
  %16947 = lshr i32 %16927, 31
  %16948 = lshr i32 %16928, 31
  %16949 = xor i32 %16948, %16947
  %16950 = xor i32 %16945, %16947
  %16951 = add nuw nsw i32 %16950, %16949
  %16952 = icmp eq i32 %16951, 2
  %16953 = zext i1 %16952 to i8
  store i8 %16953, i8* %57, align 1
  %16954 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %16955 = load <2 x i32>, <2 x i32>* %16954, align 1
  %16956 = bitcast i64* %320 to <2 x i32>*
  %16957 = load <2 x i32>, <2 x i32>* %16956, align 1
  %16958 = sitofp i32 %16929 to float
  %16959 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %16958, float* %16959, align 1
  %16960 = extractelement <2 x i32> %16955, i32 1
  %16961 = getelementptr inbounds i8, i8* %315, i64 4
  %16962 = bitcast i8* %16961 to i32*
  store i32 %16960, i32* %16962, align 1
  %16963 = extractelement <2 x i32> %16957, i32 0
  %16964 = bitcast i64* %320 to i32*
  store i32 %16963, i32* %16964, align 1
  %16965 = extractelement <2 x i32> %16957, i32 1
  %16966 = getelementptr inbounds i8, i8* %315, i64 12
  %16967 = bitcast i8* %16966 to i32*
  store i32 %16965, i32* %16967, align 1
  %16968 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %16969 = load <2 x i32>, <2 x i32>* %16968, align 1
  %16970 = bitcast i64* %330 to <2 x i32>*
  %16971 = load <2 x i32>, <2 x i32>* %16970, align 1
  %16972 = sitofp i32 %16928 to float
  %16973 = bitcast %union.VectorReg* %322 to float*
  store float %16972, float* %16973, align 1
  %16974 = extractelement <2 x i32> %16969, i32 1
  %16975 = getelementptr inbounds i8, i8* %323, i64 4
  %16976 = bitcast i8* %16975 to i32*
  store i32 %16974, i32* %16976, align 1
  %16977 = extractelement <2 x i32> %16971, i32 0
  %16978 = bitcast i64* %330 to i32*
  store i32 %16977, i32* %16978, align 1
  %16979 = extractelement <2 x i32> %16971, i32 1
  %16980 = getelementptr inbounds i8, i8* %323, i64 12
  %16981 = bitcast i8* %16980 to i32*
  store i32 %16979, i32* %16981, align 1
  %16982 = add i64 %15917, -212
  %16983 = add i64 %16923, 31
  store i64 %16983, i64* %3, align 8
  %16984 = bitcast %union.VectorReg* %322 to <2 x float>*
  %16985 = load <2 x float>, <2 x float>* %16984, align 1
  %16986 = load <2 x i32>, <2 x i32>* %16970, align 1
  %16987 = inttoptr i64 %16982 to float*
  %16988 = load float, float* %16987, align 4
  %16989 = extractelement <2 x float> %16985, i32 0
  %16990 = fmul float %16989, %16988
  store float %16990, float* %16973, align 1
  %16991 = bitcast <2 x float> %16985 to <2 x i32>
  %16992 = extractelement <2 x i32> %16991, i32 1
  store i32 %16992, i32* %16976, align 1
  %16993 = extractelement <2 x i32> %16986, i32 0
  store i32 %16993, i32* %16978, align 1
  %16994 = extractelement <2 x i32> %16986, i32 1
  store i32 %16994, i32* %16981, align 1
  %16995 = add i64 %16923, 34
  store i64 %16995, i64* %3, align 8
  %16996 = load <2 x float>, <2 x float>* %16984, align 1
  %16997 = extractelement <2 x float> %16996, i32 0
  %16998 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %16999 = load <2 x float>, <2 x float>* %16998, align 1
  %17000 = extractelement <2 x float> %16999, i32 0
  %17001 = fcmp uno float %16997, %17000
  br i1 %17001, label %17002, label %17012

; <label>:17002:                                  ; preds = %block_4227ec
  %17003 = fadd float %16997, %17000
  %17004 = bitcast float %17003 to i32
  %17005 = and i32 %17004, 2143289344
  %17006 = icmp eq i32 %17005, 2139095040
  %17007 = and i32 %17004, 4194303
  %17008 = icmp ne i32 %17007, 0
  %17009 = and i1 %17006, %17008
  br i1 %17009, label %17010, label %17018

; <label>:17010:                                  ; preds = %17002
  %17011 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %16995, %struct.Memory* %MEMORY.70)
  %.pre351 = load i64, i64* %3, align 8
  %.pre352 = load i8, i8* %32, align 1
  %.pre353 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1280

; <label>:17012:                                  ; preds = %block_4227ec
  %17013 = fcmp ogt float %16997, %17000
  br i1 %17013, label %17018, label %17014

; <label>:17014:                                  ; preds = %17012
  %17015 = fcmp olt float %16997, %17000
  br i1 %17015, label %17018, label %17016

; <label>:17016:                                  ; preds = %17014
  %17017 = fcmp oeq float %16997, %17000
  br i1 %17017, label %17018, label %17022

; <label>:17018:                                  ; preds = %17016, %17014, %17012, %17002
  %17019 = phi i8 [ 0, %17012 ], [ 0, %17014 ], [ 1, %17016 ], [ 1, %17002 ]
  %17020 = phi i8 [ 0, %17012 ], [ 0, %17014 ], [ 0, %17016 ], [ 1, %17002 ]
  %17021 = phi i8 [ 0, %17012 ], [ 1, %17014 ], [ 0, %17016 ], [ 1, %17002 ]
  store i8 %17019, i8* %48, align 1
  store i8 %17020, i8* %39, align 1
  store i8 %17021, i8* %32, align 1
  br label %17022

; <label>:17022:                                  ; preds = %17018, %17016
  %17023 = phi i8 [ %17019, %17018 ], [ %16944, %17016 ]
  %17024 = phi i8 [ %17021, %17018 ], [ %16932, %17016 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1280

routine_ucomiss__xmm0___xmm1.exit1280:            ; preds = %17022, %17010
  %17025 = phi i8 [ %.pre353, %17010 ], [ %17023, %17022 ]
  %17026 = phi i8 [ %.pre352, %17010 ], [ %17024, %17022 ]
  %17027 = phi i64 [ %.pre351, %17010 ], [ %16995, %17022 ]
  %17028 = phi %struct.Memory* [ %17011, %17010 ], [ %MEMORY.70, %17022 ]
  %17029 = or i8 %17025, %17026
  %17030 = icmp ne i8 %17029, 0
  %.v539 = select i1 %17030, i64 11, i64 6
  %17031 = add i64 %17027, %.v539
  store i64 %17031, i64* %3, align 8
  br i1 %17030, label %block_.L_422819, label %block_.L_422f0e

block_.L_422819:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1280
  %17032 = load i64, i64* %RBP.i, align 8
  %17033 = add i64 %17032, -80
  %17034 = add i64 %17031, 3
  store i64 %17034, i64* %3, align 8
  %17035 = inttoptr i64 %17033 to i32*
  %17036 = load i32, i32* %17035, align 4
  %17037 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %17038 = sub i32 %17036, %17037
  %17039 = zext i32 %17038 to i64
  store i64 %17039, i64* %RAX.i3587.phi.trans.insert, align 8
  %17040 = icmp ult i32 %17036, %17037
  %17041 = zext i1 %17040 to i8
  store i8 %17041, i8* %32, align 1
  %17042 = and i32 %17038, 255
  %17043 = tail call i32 @llvm.ctpop.i32(i32 %17042)
  %17044 = trunc i32 %17043 to i8
  %17045 = and i8 %17044, 1
  %17046 = xor i8 %17045, 1
  store i8 %17046, i8* %39, align 1
  %17047 = xor i32 %17037, %17036
  %17048 = xor i32 %17047, %17038
  %17049 = lshr i32 %17048, 4
  %17050 = trunc i32 %17049 to i8
  %17051 = and i8 %17050, 1
  store i8 %17051, i8* %45, align 1
  %17052 = icmp eq i32 %17038, 0
  %17053 = zext i1 %17052 to i8
  store i8 %17053, i8* %48, align 1
  %17054 = lshr i32 %17038, 31
  %17055 = trunc i32 %17054 to i8
  store i8 %17055, i8* %51, align 1
  %17056 = lshr i32 %17036, 31
  %17057 = lshr i32 %17037, 31
  %17058 = xor i32 %17057, %17056
  %17059 = xor i32 %17054, %17056
  %17060 = add nuw nsw i32 %17059, %17058
  %17061 = icmp eq i32 %17060, 2
  %17062 = zext i1 %17061 to i8
  store i8 %17062, i8* %57, align 1
  %17063 = load <2 x i32>, <2 x i32>* %16954, align 1
  %17064 = load <2 x i32>, <2 x i32>* %16956, align 1
  %17065 = sitofp i32 %17038 to float
  store float %17065, float* %16959, align 1
  %17066 = extractelement <2 x i32> %17063, i32 1
  store i32 %17066, i32* %16962, align 1
  %17067 = extractelement <2 x i32> %17064, i32 0
  store i32 %17067, i32* %16964, align 1
  %17068 = extractelement <2 x i32> %17064, i32 1
  store i32 %17068, i32* %16967, align 1
  %17069 = load <2 x i32>, <2 x i32>* %16968, align 1
  %17070 = load <2 x i32>, <2 x i32>* %16970, align 1
  %17071 = sitofp i32 %17037 to float
  store float %17071, float* %16973, align 1
  %17072 = extractelement <2 x i32> %17069, i32 1
  store i32 %17072, i32* %16976, align 1
  %17073 = extractelement <2 x i32> %17070, i32 0
  store i32 %17073, i32* %16978, align 1
  %17074 = extractelement <2 x i32> %17070, i32 1
  store i32 %17074, i32* %16981, align 1
  %17075 = add i64 %17032, -208
  %17076 = add i64 %17031, 31
  store i64 %17076, i64* %3, align 8
  %17077 = load <2 x float>, <2 x float>* %16984, align 1
  %17078 = load <2 x i32>, <2 x i32>* %16970, align 1
  %17079 = inttoptr i64 %17075 to float*
  %17080 = load float, float* %17079, align 4
  %17081 = extractelement <2 x float> %17077, i32 0
  %17082 = fmul float %17081, %17080
  store float %17082, float* %16973, align 1
  %17083 = bitcast <2 x float> %17077 to <2 x i32>
  %17084 = extractelement <2 x i32> %17083, i32 1
  store i32 %17084, i32* %16976, align 1
  %17085 = extractelement <2 x i32> %17078, i32 0
  store i32 %17085, i32* %16978, align 1
  %17086 = extractelement <2 x i32> %17078, i32 1
  store i32 %17086, i32* %16981, align 1
  %17087 = add i64 %17031, 34
  store i64 %17087, i64* %3, align 8
  %17088 = load <2 x float>, <2 x float>* %16984, align 1
  %17089 = extractelement <2 x float> %17088, i32 0
  %17090 = load <2 x float>, <2 x float>* %16998, align 1
  %17091 = extractelement <2 x float> %17090, i32 0
  %17092 = fcmp uno float %17089, %17091
  br i1 %17092, label %17093, label %17103

; <label>:17093:                                  ; preds = %block_.L_422819
  %17094 = fadd float %17089, %17091
  %17095 = bitcast float %17094 to i32
  %17096 = and i32 %17095, 2143289344
  %17097 = icmp eq i32 %17096, 2139095040
  %17098 = and i32 %17095, 4194303
  %17099 = icmp ne i32 %17098, 0
  %17100 = and i1 %17097, %17099
  br i1 %17100, label %17101, label %17109

; <label>:17101:                                  ; preds = %17093
  %17102 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %17087, %struct.Memory* %17028)
  %.pre354 = load i64, i64* %3, align 8
  %.pre355 = load i8, i8* %32, align 1
  %.pre356 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1258

; <label>:17103:                                  ; preds = %block_.L_422819
  %17104 = fcmp ogt float %17089, %17091
  br i1 %17104, label %17109, label %17105

; <label>:17105:                                  ; preds = %17103
  %17106 = fcmp olt float %17089, %17091
  br i1 %17106, label %17109, label %17107

; <label>:17107:                                  ; preds = %17105
  %17108 = fcmp oeq float %17089, %17091
  br i1 %17108, label %17109, label %17113

; <label>:17109:                                  ; preds = %17107, %17105, %17103, %17093
  %17110 = phi i8 [ 0, %17103 ], [ 0, %17105 ], [ 1, %17107 ], [ 1, %17093 ]
  %17111 = phi i8 [ 0, %17103 ], [ 0, %17105 ], [ 0, %17107 ], [ 1, %17093 ]
  %17112 = phi i8 [ 0, %17103 ], [ 1, %17105 ], [ 0, %17107 ], [ 1, %17093 ]
  store i8 %17110, i8* %48, align 1
  store i8 %17111, i8* %39, align 1
  store i8 %17112, i8* %32, align 1
  br label %17113

; <label>:17113:                                  ; preds = %17109, %17107
  %17114 = phi i8 [ %17110, %17109 ], [ %17053, %17107 ]
  %17115 = phi i8 [ %17112, %17109 ], [ %17041, %17107 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1258

routine_ucomiss__xmm0___xmm1.exit1258:            ; preds = %17113, %17101
  %17116 = phi i8 [ %.pre356, %17101 ], [ %17114, %17113 ]
  %17117 = phi i8 [ %.pre355, %17101 ], [ %17115, %17113 ]
  %17118 = phi i64 [ %.pre354, %17101 ], [ %17087, %17113 ]
  %17119 = phi %struct.Memory* [ %17102, %17101 ], [ %17028, %17113 ]
  %17120 = or i8 %17116, %17117
  %17121 = icmp ne i8 %17120, 0
  %.v540 = select i1 %17121, i64 11, i64 6
  %17122 = add i64 %17118, %.v540
  store i64 %17122, i64* %3, align 8
  br i1 %17121, label %block_.L_422846, label %block_422841

block_422841:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit1258
  %17123 = add i64 %17122, 1149
  br label %block_.L_422cbe

block_.L_422846:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1258
  %17124 = add i64 %17122, 225
  br label %block_.L_422927

block_.L_422850:                                  ; preds = %block_.L_4227df
  %17125 = add i64 %15917, -52
  %17126 = add i64 %16923, 4
  store i64 %17126, i64* %3, align 8
  %17127 = inttoptr i64 %17125 to i32*
  %17128 = load i32, i32* %17127, align 4
  %17129 = add i32 %17128, -1
  %17130 = icmp eq i32 %17128, 0
  %17131 = zext i1 %17130 to i8
  store i8 %17131, i8* %32, align 1
  %17132 = and i32 %17129, 255
  %17133 = tail call i32 @llvm.ctpop.i32(i32 %17132)
  %17134 = trunc i32 %17133 to i8
  %17135 = and i8 %17134, 1
  %17136 = xor i8 %17135, 1
  store i8 %17136, i8* %39, align 1
  %17137 = xor i32 %17129, %17128
  %17138 = lshr i32 %17137, 4
  %17139 = trunc i32 %17138 to i8
  %17140 = and i8 %17139, 1
  store i8 %17140, i8* %45, align 1
  %17141 = icmp eq i32 %17129, 0
  %17142 = zext i1 %17141 to i8
  store i8 %17142, i8* %48, align 1
  %17143 = lshr i32 %17129, 31
  %17144 = trunc i32 %17143 to i8
  store i8 %17144, i8* %51, align 1
  %17145 = lshr i32 %17128, 31
  %17146 = xor i32 %17143, %17145
  %17147 = add nuw nsw i32 %17146, %17145
  %17148 = icmp eq i32 %17147, 2
  %17149 = zext i1 %17148 to i8
  store i8 %17149, i8* %57, align 1
  %17150 = icmp ne i8 %17144, 0
  %17151 = xor i1 %17150, %17148
  %17152 = or i1 %17141, %17151
  %.v478 = select i1 %17152, i64 110, i64 10
  %17153 = add i64 %16923, %.v478
  %17154 = add i64 %15917, -80
  %17155 = add i64 %17153, 3
  store i64 %17155, i64* %3, align 8
  %17156 = inttoptr i64 %17154 to i32*
  %17157 = load i32, i32* %17156, align 4
  %17158 = zext i32 %17157 to i64
  store i64 %17158, i64* %RAX.i3587.phi.trans.insert, align 8
  %17159 = add i64 %17153, 10
  store i64 %17159, i64* %3, align 8
  br i1 %17152, label %block_.L_4228be, label %block_42285a

block_42285a:                                     ; preds = %block_.L_422850
  %17160 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %17161 = sub i32 %17157, %17160
  %17162 = zext i32 %17161 to i64
  store i64 %17162, i64* %RAX.i3587.phi.trans.insert, align 8
  %17163 = icmp ult i32 %17157, %17160
  %17164 = zext i1 %17163 to i8
  store i8 %17164, i8* %32, align 1
  %17165 = and i32 %17161, 255
  %17166 = tail call i32 @llvm.ctpop.i32(i32 %17165)
  %17167 = trunc i32 %17166 to i8
  %17168 = and i8 %17167, 1
  %17169 = xor i8 %17168, 1
  store i8 %17169, i8* %39, align 1
  %17170 = xor i32 %17160, %17157
  %17171 = xor i32 %17170, %17161
  %17172 = lshr i32 %17171, 4
  %17173 = trunc i32 %17172 to i8
  %17174 = and i8 %17173, 1
  store i8 %17174, i8* %45, align 1
  %17175 = icmp eq i32 %17161, 0
  %17176 = zext i1 %17175 to i8
  store i8 %17176, i8* %48, align 1
  %17177 = lshr i32 %17161, 31
  %17178 = trunc i32 %17177 to i8
  store i8 %17178, i8* %51, align 1
  %17179 = lshr i32 %17157, 31
  %17180 = lshr i32 %17160, 31
  %17181 = xor i32 %17180, %17179
  %17182 = xor i32 %17177, %17179
  %17183 = add nuw nsw i32 %17182, %17181
  %17184 = icmp eq i32 %17183, 2
  %17185 = zext i1 %17184 to i8
  store i8 %17185, i8* %57, align 1
  %17186 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %17187 = load <2 x i32>, <2 x i32>* %17186, align 1
  %17188 = bitcast i64* %320 to <2 x i32>*
  %17189 = load <2 x i32>, <2 x i32>* %17188, align 1
  %17190 = sitofp i32 %17161 to float
  %17191 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %17190, float* %17191, align 1
  %17192 = extractelement <2 x i32> %17187, i32 1
  %17193 = getelementptr inbounds i8, i8* %315, i64 4
  %17194 = bitcast i8* %17193 to i32*
  store i32 %17192, i32* %17194, align 1
  %17195 = extractelement <2 x i32> %17189, i32 0
  %17196 = bitcast i64* %320 to i32*
  store i32 %17195, i32* %17196, align 1
  %17197 = extractelement <2 x i32> %17189, i32 1
  %17198 = getelementptr inbounds i8, i8* %315, i64 12
  %17199 = bitcast i8* %17198 to i32*
  store i32 %17197, i32* %17199, align 1
  %17200 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %17201 = load <2 x i32>, <2 x i32>* %17200, align 1
  %17202 = bitcast i64* %330 to <2 x i32>*
  %17203 = load <2 x i32>, <2 x i32>* %17202, align 1
  %17204 = sitofp i32 %17160 to float
  %17205 = bitcast %union.VectorReg* %322 to float*
  store float %17204, float* %17205, align 1
  %17206 = extractelement <2 x i32> %17201, i32 1
  %17207 = getelementptr inbounds i8, i8* %323, i64 4
  %17208 = bitcast i8* %17207 to i32*
  store i32 %17206, i32* %17208, align 1
  %17209 = extractelement <2 x i32> %17203, i32 0
  %17210 = bitcast i64* %330 to i32*
  store i32 %17209, i32* %17210, align 1
  %17211 = extractelement <2 x i32> %17203, i32 1
  %17212 = getelementptr inbounds i8, i8* %323, i64 12
  %17213 = bitcast i8* %17212 to i32*
  store i32 %17211, i32* %17213, align 1
  %17214 = add i64 %15917, -212
  %17215 = add i64 %17153, 31
  store i64 %17215, i64* %3, align 8
  %17216 = bitcast %union.VectorReg* %322 to <2 x float>*
  %17217 = load <2 x float>, <2 x float>* %17216, align 1
  %17218 = load <2 x i32>, <2 x i32>* %17202, align 1
  %17219 = inttoptr i64 %17214 to float*
  %17220 = load float, float* %17219, align 4
  %17221 = extractelement <2 x float> %17217, i32 0
  %17222 = fmul float %17221, %17220
  store float %17222, float* %17205, align 1
  %17223 = bitcast <2 x float> %17217 to <2 x i32>
  %17224 = extractelement <2 x i32> %17223, i32 1
  store i32 %17224, i32* %17208, align 1
  %17225 = extractelement <2 x i32> %17218, i32 0
  store i32 %17225, i32* %17210, align 1
  %17226 = extractelement <2 x i32> %17218, i32 1
  store i32 %17226, i32* %17213, align 1
  %17227 = add i64 %17153, 34
  store i64 %17227, i64* %3, align 8
  %17228 = load <2 x float>, <2 x float>* %17216, align 1
  %17229 = extractelement <2 x float> %17228, i32 0
  %17230 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %17231 = load <2 x float>, <2 x float>* %17230, align 1
  %17232 = extractelement <2 x float> %17231, i32 0
  %17233 = fcmp uno float %17229, %17232
  br i1 %17233, label %17234, label %17244

; <label>:17234:                                  ; preds = %block_42285a
  %17235 = fadd float %17229, %17232
  %17236 = bitcast float %17235 to i32
  %17237 = and i32 %17236, 2143289344
  %17238 = icmp eq i32 %17237, 2139095040
  %17239 = and i32 %17236, 4194303
  %17240 = icmp ne i32 %17239, 0
  %17241 = and i1 %17238, %17240
  br i1 %17241, label %17242, label %17250

; <label>:17242:                                  ; preds = %17234
  %17243 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %17227, %struct.Memory* %MEMORY.70)
  %.pre357 = load i64, i64* %3, align 8
  %.pre358 = load i8, i8* %32, align 1
  %.pre359 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1231

; <label>:17244:                                  ; preds = %block_42285a
  %17245 = fcmp ogt float %17229, %17232
  br i1 %17245, label %17250, label %17246

; <label>:17246:                                  ; preds = %17244
  %17247 = fcmp olt float %17229, %17232
  br i1 %17247, label %17250, label %17248

; <label>:17248:                                  ; preds = %17246
  %17249 = fcmp oeq float %17229, %17232
  br i1 %17249, label %17250, label %17254

; <label>:17250:                                  ; preds = %17248, %17246, %17244, %17234
  %17251 = phi i8 [ 0, %17244 ], [ 0, %17246 ], [ 1, %17248 ], [ 1, %17234 ]
  %17252 = phi i8 [ 0, %17244 ], [ 0, %17246 ], [ 0, %17248 ], [ 1, %17234 ]
  %17253 = phi i8 [ 0, %17244 ], [ 1, %17246 ], [ 0, %17248 ], [ 1, %17234 ]
  store i8 %17251, i8* %48, align 1
  store i8 %17252, i8* %39, align 1
  store i8 %17253, i8* %32, align 1
  br label %17254

; <label>:17254:                                  ; preds = %17250, %17248
  %17255 = phi i8 [ %17251, %17250 ], [ %17176, %17248 ]
  %17256 = phi i8 [ %17253, %17250 ], [ %17164, %17248 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1231

routine_ucomiss__xmm0___xmm1.exit1231:            ; preds = %17254, %17242
  %17257 = phi i8 [ %.pre359, %17242 ], [ %17255, %17254 ]
  %17258 = phi i8 [ %.pre358, %17242 ], [ %17256, %17254 ]
  %17259 = phi i64 [ %.pre357, %17242 ], [ %17227, %17254 ]
  %17260 = phi %struct.Memory* [ %17243, %17242 ], [ %MEMORY.70, %17254 ]
  %17261 = or i8 %17257, %17258
  %17262 = icmp ne i8 %17261, 0
  %.v552 = select i1 %17262, i64 11, i64 6
  %17263 = add i64 %17259, %.v552
  store i64 %17263, i64* %3, align 8
  br i1 %17262, label %block_.L_422887, label %block_.L_422f0e

block_.L_422887:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1231
  %17264 = load i64, i64* %RBP.i, align 8
  %17265 = add i64 %17264, -80
  %17266 = add i64 %17263, 3
  store i64 %17266, i64* %3, align 8
  %17267 = inttoptr i64 %17265 to i32*
  %17268 = load i32, i32* %17267, align 4
  %17269 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %17270 = sub i32 %17268, %17269
  %17271 = zext i32 %17270 to i64
  store i64 %17271, i64* %RAX.i3587.phi.trans.insert, align 8
  %17272 = icmp ult i32 %17268, %17269
  %17273 = zext i1 %17272 to i8
  store i8 %17273, i8* %32, align 1
  %17274 = and i32 %17270, 255
  %17275 = tail call i32 @llvm.ctpop.i32(i32 %17274)
  %17276 = trunc i32 %17275 to i8
  %17277 = and i8 %17276, 1
  %17278 = xor i8 %17277, 1
  store i8 %17278, i8* %39, align 1
  %17279 = xor i32 %17269, %17268
  %17280 = xor i32 %17279, %17270
  %17281 = lshr i32 %17280, 4
  %17282 = trunc i32 %17281 to i8
  %17283 = and i8 %17282, 1
  store i8 %17283, i8* %45, align 1
  %17284 = icmp eq i32 %17270, 0
  %17285 = zext i1 %17284 to i8
  store i8 %17285, i8* %48, align 1
  %17286 = lshr i32 %17270, 31
  %17287 = trunc i32 %17286 to i8
  store i8 %17287, i8* %51, align 1
  %17288 = lshr i32 %17268, 31
  %17289 = lshr i32 %17269, 31
  %17290 = xor i32 %17289, %17288
  %17291 = xor i32 %17286, %17288
  %17292 = add nuw nsw i32 %17291, %17290
  %17293 = icmp eq i32 %17292, 2
  %17294 = zext i1 %17293 to i8
  store i8 %17294, i8* %57, align 1
  %17295 = load <2 x i32>, <2 x i32>* %17186, align 1
  %17296 = load <2 x i32>, <2 x i32>* %17188, align 1
  %17297 = sitofp i32 %17270 to float
  store float %17297, float* %17191, align 1
  %17298 = extractelement <2 x i32> %17295, i32 1
  store i32 %17298, i32* %17194, align 1
  %17299 = extractelement <2 x i32> %17296, i32 0
  store i32 %17299, i32* %17196, align 1
  %17300 = extractelement <2 x i32> %17296, i32 1
  store i32 %17300, i32* %17199, align 1
  %17301 = load <2 x i32>, <2 x i32>* %17200, align 1
  %17302 = load <2 x i32>, <2 x i32>* %17202, align 1
  %17303 = sitofp i32 %17269 to float
  store float %17303, float* %17205, align 1
  %17304 = extractelement <2 x i32> %17301, i32 1
  store i32 %17304, i32* %17208, align 1
  %17305 = extractelement <2 x i32> %17302, i32 0
  store i32 %17305, i32* %17210, align 1
  %17306 = extractelement <2 x i32> %17302, i32 1
  store i32 %17306, i32* %17213, align 1
  %17307 = add i64 %17264, -208
  %17308 = add i64 %17263, 31
  store i64 %17308, i64* %3, align 8
  %17309 = load <2 x float>, <2 x float>* %17216, align 1
  %17310 = load <2 x i32>, <2 x i32>* %17202, align 1
  %17311 = inttoptr i64 %17307 to float*
  %17312 = load float, float* %17311, align 4
  %17313 = extractelement <2 x float> %17309, i32 0
  %17314 = fmul float %17313, %17312
  store float %17314, float* %17205, align 1
  %17315 = bitcast <2 x float> %17309 to <2 x i32>
  %17316 = extractelement <2 x i32> %17315, i32 1
  store i32 %17316, i32* %17208, align 1
  %17317 = extractelement <2 x i32> %17310, i32 0
  store i32 %17317, i32* %17210, align 1
  %17318 = extractelement <2 x i32> %17310, i32 1
  store i32 %17318, i32* %17213, align 1
  %17319 = add i64 %17263, 34
  store i64 %17319, i64* %3, align 8
  %17320 = load <2 x float>, <2 x float>* %17216, align 1
  %17321 = extractelement <2 x float> %17320, i32 0
  %17322 = load <2 x float>, <2 x float>* %17230, align 1
  %17323 = extractelement <2 x float> %17322, i32 0
  %17324 = fcmp uno float %17321, %17323
  br i1 %17324, label %17325, label %17335

; <label>:17325:                                  ; preds = %block_.L_422887
  %17326 = fadd float %17321, %17323
  %17327 = bitcast float %17326 to i32
  %17328 = and i32 %17327, 2143289344
  %17329 = icmp eq i32 %17328, 2139095040
  %17330 = and i32 %17327, 4194303
  %17331 = icmp ne i32 %17330, 0
  %17332 = and i1 %17329, %17331
  br i1 %17332, label %17333, label %17341

; <label>:17333:                                  ; preds = %17325
  %17334 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %17319, %struct.Memory* %17260)
  %.pre360 = load i64, i64* %3, align 8
  %.pre361 = load i8, i8* %32, align 1
  %.pre362 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1209

; <label>:17335:                                  ; preds = %block_.L_422887
  %17336 = fcmp ogt float %17321, %17323
  br i1 %17336, label %17341, label %17337

; <label>:17337:                                  ; preds = %17335
  %17338 = fcmp olt float %17321, %17323
  br i1 %17338, label %17341, label %17339

; <label>:17339:                                  ; preds = %17337
  %17340 = fcmp oeq float %17321, %17323
  br i1 %17340, label %17341, label %17345

; <label>:17341:                                  ; preds = %17339, %17337, %17335, %17325
  %17342 = phi i8 [ 0, %17335 ], [ 0, %17337 ], [ 1, %17339 ], [ 1, %17325 ]
  %17343 = phi i8 [ 0, %17335 ], [ 0, %17337 ], [ 0, %17339 ], [ 1, %17325 ]
  %17344 = phi i8 [ 0, %17335 ], [ 1, %17337 ], [ 0, %17339 ], [ 1, %17325 ]
  store i8 %17342, i8* %48, align 1
  store i8 %17343, i8* %39, align 1
  store i8 %17344, i8* %32, align 1
  br label %17345

; <label>:17345:                                  ; preds = %17341, %17339
  %17346 = phi i8 [ %17342, %17341 ], [ %17285, %17339 ]
  %17347 = phi i8 [ %17344, %17341 ], [ %17273, %17339 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1209

routine_ucomiss__xmm0___xmm1.exit1209:            ; preds = %17345, %17333
  %17348 = phi i8 [ %.pre362, %17333 ], [ %17346, %17345 ]
  %17349 = phi i8 [ %.pre361, %17333 ], [ %17347, %17345 ]
  %17350 = phi i64 [ %.pre360, %17333 ], [ %17319, %17345 ]
  %17351 = phi %struct.Memory* [ %17334, %17333 ], [ %17260, %17345 ]
  %17352 = or i8 %17348, %17349
  %17353 = icmp ne i8 %17352, 0
  %.v553 = select i1 %17353, i64 11, i64 6
  %17354 = add i64 %17350, %.v553
  store i64 %17354, i64* %3, align 8
  br i1 %17353, label %block_.L_4228b4, label %block_4228af

block_4228af:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit1209
  %17355 = add i64 %17354, 1039
  br label %block_.L_422cbe

block_.L_4228b4:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1209
  %17356 = add i64 %17354, 110
  br label %block_.L_422922

block_.L_4228be:                                  ; preds = %block_.L_422850
  %17357 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %17358 = sub i32 %17157, %17357
  %17359 = zext i32 %17358 to i64
  store i64 %17359, i64* %RAX.i3587.phi.trans.insert, align 8
  %17360 = icmp ult i32 %17157, %17357
  %17361 = zext i1 %17360 to i8
  store i8 %17361, i8* %32, align 1
  %17362 = and i32 %17358, 255
  %17363 = tail call i32 @llvm.ctpop.i32(i32 %17362)
  %17364 = trunc i32 %17363 to i8
  %17365 = and i8 %17364, 1
  %17366 = xor i8 %17365, 1
  store i8 %17366, i8* %39, align 1
  %17367 = xor i32 %17357, %17157
  %17368 = xor i32 %17367, %17358
  %17369 = lshr i32 %17368, 4
  %17370 = trunc i32 %17369 to i8
  %17371 = and i8 %17370, 1
  store i8 %17371, i8* %45, align 1
  %17372 = icmp eq i32 %17358, 0
  %17373 = zext i1 %17372 to i8
  store i8 %17373, i8* %48, align 1
  %17374 = lshr i32 %17358, 31
  %17375 = trunc i32 %17374 to i8
  store i8 %17375, i8* %51, align 1
  %17376 = lshr i32 %17157, 31
  %17377 = lshr i32 %17357, 31
  %17378 = xor i32 %17377, %17376
  %17379 = xor i32 %17374, %17376
  %17380 = add nuw nsw i32 %17379, %17378
  %17381 = icmp eq i32 %17380, 2
  %17382 = zext i1 %17381 to i8
  store i8 %17382, i8* %57, align 1
  %17383 = bitcast [32 x %union.VectorReg]* %165 to <2 x i32>*
  %17384 = load <2 x i32>, <2 x i32>* %17383, align 1
  %17385 = bitcast i64* %320 to <2 x i32>*
  %17386 = load <2 x i32>, <2 x i32>* %17385, align 1
  %17387 = sitofp i32 %17358 to float
  %17388 = bitcast [32 x %union.VectorReg]* %165 to float*
  store float %17387, float* %17388, align 1
  %17389 = extractelement <2 x i32> %17384, i32 1
  %17390 = getelementptr inbounds i8, i8* %315, i64 4
  %17391 = bitcast i8* %17390 to i32*
  store i32 %17389, i32* %17391, align 1
  %17392 = extractelement <2 x i32> %17386, i32 0
  %17393 = bitcast i64* %320 to i32*
  store i32 %17392, i32* %17393, align 1
  %17394 = extractelement <2 x i32> %17386, i32 1
  %17395 = getelementptr inbounds i8, i8* %315, i64 12
  %17396 = bitcast i8* %17395 to i32*
  store i32 %17394, i32* %17396, align 1
  %17397 = bitcast %union.VectorReg* %322 to <2 x i32>*
  %17398 = load <2 x i32>, <2 x i32>* %17397, align 1
  %17399 = bitcast i64* %330 to <2 x i32>*
  %17400 = load <2 x i32>, <2 x i32>* %17399, align 1
  %17401 = sitofp i32 %17357 to float
  %17402 = bitcast %union.VectorReg* %322 to float*
  store float %17401, float* %17402, align 1
  %17403 = extractelement <2 x i32> %17398, i32 1
  %17404 = getelementptr inbounds i8, i8* %323, i64 4
  %17405 = bitcast i8* %17404 to i32*
  store i32 %17403, i32* %17405, align 1
  %17406 = extractelement <2 x i32> %17400, i32 0
  %17407 = bitcast i64* %330 to i32*
  store i32 %17406, i32* %17407, align 1
  %17408 = extractelement <2 x i32> %17400, i32 1
  %17409 = getelementptr inbounds i8, i8* %323, i64 12
  %17410 = bitcast i8* %17409 to i32*
  store i32 %17408, i32* %17410, align 1
  %17411 = add i64 %15917, -212
  %17412 = add i64 %17153, 31
  store i64 %17412, i64* %3, align 8
  %17413 = bitcast %union.VectorReg* %322 to <2 x float>*
  %17414 = load <2 x float>, <2 x float>* %17413, align 1
  %17415 = load <2 x i32>, <2 x i32>* %17399, align 1
  %17416 = inttoptr i64 %17411 to float*
  %17417 = load float, float* %17416, align 4
  %17418 = extractelement <2 x float> %17414, i32 0
  %17419 = fmul float %17418, %17417
  store float %17419, float* %17402, align 1
  %17420 = bitcast <2 x float> %17414 to <2 x i32>
  %17421 = extractelement <2 x i32> %17420, i32 1
  store i32 %17421, i32* %17405, align 1
  %17422 = extractelement <2 x i32> %17415, i32 0
  store i32 %17422, i32* %17407, align 1
  %17423 = extractelement <2 x i32> %17415, i32 1
  store i32 %17423, i32* %17410, align 1
  %17424 = add i64 %17153, 34
  store i64 %17424, i64* %3, align 8
  %17425 = load <2 x float>, <2 x float>* %17413, align 1
  %17426 = extractelement <2 x float> %17425, i32 0
  %17427 = bitcast [32 x %union.VectorReg]* %165 to <2 x float>*
  %17428 = load <2 x float>, <2 x float>* %17427, align 1
  %17429 = extractelement <2 x float> %17428, i32 0
  %17430 = fcmp uno float %17426, %17429
  br i1 %17430, label %17431, label %17441

; <label>:17431:                                  ; preds = %block_.L_4228be
  %17432 = fadd float %17426, %17429
  %17433 = bitcast float %17432 to i32
  %17434 = and i32 %17433, 2143289344
  %17435 = icmp eq i32 %17434, 2139095040
  %17436 = and i32 %17433, 4194303
  %17437 = icmp ne i32 %17436, 0
  %17438 = and i1 %17435, %17437
  br i1 %17438, label %17439, label %17447

; <label>:17439:                                  ; preds = %17431
  %17440 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %17424, %struct.Memory* %MEMORY.70)
  %.pre363 = load i64, i64* %3, align 8
  %.pre364 = load i8, i8* %32, align 1
  %.pre365 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1185

; <label>:17441:                                  ; preds = %block_.L_4228be
  %17442 = fcmp ogt float %17426, %17429
  br i1 %17442, label %17447, label %17443

; <label>:17443:                                  ; preds = %17441
  %17444 = fcmp olt float %17426, %17429
  br i1 %17444, label %17447, label %17445

; <label>:17445:                                  ; preds = %17443
  %17446 = fcmp oeq float %17426, %17429
  br i1 %17446, label %17447, label %17451

; <label>:17447:                                  ; preds = %17445, %17443, %17441, %17431
  %17448 = phi i8 [ 0, %17441 ], [ 0, %17443 ], [ 1, %17445 ], [ 1, %17431 ]
  %17449 = phi i8 [ 0, %17441 ], [ 0, %17443 ], [ 0, %17445 ], [ 1, %17431 ]
  %17450 = phi i8 [ 0, %17441 ], [ 1, %17443 ], [ 0, %17445 ], [ 1, %17431 ]
  store i8 %17448, i8* %48, align 1
  store i8 %17449, i8* %39, align 1
  store i8 %17450, i8* %32, align 1
  br label %17451

; <label>:17451:                                  ; preds = %17447, %17445
  %17452 = phi i8 [ %17448, %17447 ], [ %17373, %17445 ]
  %17453 = phi i8 [ %17450, %17447 ], [ %17361, %17445 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1185

routine_ucomiss__xmm0___xmm1.exit1185:            ; preds = %17451, %17439
  %17454 = phi i8 [ %.pre365, %17439 ], [ %17452, %17451 ]
  %17455 = phi i8 [ %.pre364, %17439 ], [ %17453, %17451 ]
  %17456 = phi i64 [ %.pre363, %17439 ], [ %17424, %17451 ]
  %17457 = phi %struct.Memory* [ %17440, %17439 ], [ %MEMORY.70, %17451 ]
  %17458 = or i8 %17454, %17455
  %17459 = icmp ne i8 %17458, 0
  %.v554 = select i1 %17459, i64 11, i64 6
  %17460 = add i64 %17456, %.v554
  store i64 %17460, i64* %3, align 8
  br i1 %17459, label %block_.L_4228eb, label %block_.L_422f0e

block_.L_4228eb:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1185
  %17461 = load i64, i64* %RBP.i, align 8
  %17462 = add i64 %17461, -80
  %17463 = add i64 %17460, 3
  store i64 %17463, i64* %3, align 8
  %17464 = inttoptr i64 %17462 to i32*
  %17465 = load i32, i32* %17464, align 4
  %17466 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %17467 = sub i32 %17465, %17466
  %17468 = zext i32 %17467 to i64
  store i64 %17468, i64* %RAX.i3587.phi.trans.insert, align 8
  %17469 = icmp ult i32 %17465, %17466
  %17470 = zext i1 %17469 to i8
  store i8 %17470, i8* %32, align 1
  %17471 = and i32 %17467, 255
  %17472 = tail call i32 @llvm.ctpop.i32(i32 %17471)
  %17473 = trunc i32 %17472 to i8
  %17474 = and i8 %17473, 1
  %17475 = xor i8 %17474, 1
  store i8 %17475, i8* %39, align 1
  %17476 = xor i32 %17466, %17465
  %17477 = xor i32 %17476, %17467
  %17478 = lshr i32 %17477, 4
  %17479 = trunc i32 %17478 to i8
  %17480 = and i8 %17479, 1
  store i8 %17480, i8* %45, align 1
  %17481 = icmp eq i32 %17467, 0
  %17482 = zext i1 %17481 to i8
  store i8 %17482, i8* %48, align 1
  %17483 = lshr i32 %17467, 31
  %17484 = trunc i32 %17483 to i8
  store i8 %17484, i8* %51, align 1
  %17485 = lshr i32 %17465, 31
  %17486 = lshr i32 %17466, 31
  %17487 = xor i32 %17486, %17485
  %17488 = xor i32 %17483, %17485
  %17489 = add nuw nsw i32 %17488, %17487
  %17490 = icmp eq i32 %17489, 2
  %17491 = zext i1 %17490 to i8
  store i8 %17491, i8* %57, align 1
  %17492 = load <2 x i32>, <2 x i32>* %17383, align 1
  %17493 = load <2 x i32>, <2 x i32>* %17385, align 1
  %17494 = sitofp i32 %17467 to float
  store float %17494, float* %17388, align 1
  %17495 = extractelement <2 x i32> %17492, i32 1
  store i32 %17495, i32* %17391, align 1
  %17496 = extractelement <2 x i32> %17493, i32 0
  store i32 %17496, i32* %17393, align 1
  %17497 = extractelement <2 x i32> %17493, i32 1
  store i32 %17497, i32* %17396, align 1
  %17498 = load <2 x i32>, <2 x i32>* %17397, align 1
  %17499 = load <2 x i32>, <2 x i32>* %17399, align 1
  %17500 = sitofp i32 %17466 to float
  store float %17500, float* %17402, align 1
  %17501 = extractelement <2 x i32> %17498, i32 1
  store i32 %17501, i32* %17405, align 1
  %17502 = extractelement <2 x i32> %17499, i32 0
  store i32 %17502, i32* %17407, align 1
  %17503 = extractelement <2 x i32> %17499, i32 1
  store i32 %17503, i32* %17410, align 1
  %17504 = add i64 %17461, -208
  %17505 = add i64 %17460, 31
  store i64 %17505, i64* %3, align 8
  %17506 = load <2 x float>, <2 x float>* %17413, align 1
  %17507 = load <2 x i32>, <2 x i32>* %17399, align 1
  %17508 = inttoptr i64 %17504 to float*
  %17509 = load float, float* %17508, align 4
  %17510 = extractelement <2 x float> %17506, i32 0
  %17511 = fmul float %17510, %17509
  store float %17511, float* %17402, align 1
  %17512 = bitcast <2 x float> %17506 to <2 x i32>
  %17513 = extractelement <2 x i32> %17512, i32 1
  store i32 %17513, i32* %17405, align 1
  %17514 = extractelement <2 x i32> %17507, i32 0
  store i32 %17514, i32* %17407, align 1
  %17515 = extractelement <2 x i32> %17507, i32 1
  store i32 %17515, i32* %17410, align 1
  %17516 = add i64 %17460, 34
  store i64 %17516, i64* %3, align 8
  %17517 = load <2 x float>, <2 x float>* %17413, align 1
  %17518 = extractelement <2 x float> %17517, i32 0
  %17519 = load <2 x float>, <2 x float>* %17427, align 1
  %17520 = extractelement <2 x float> %17519, i32 0
  %17521 = fcmp uno float %17518, %17520
  br i1 %17521, label %17522, label %17532

; <label>:17522:                                  ; preds = %block_.L_4228eb
  %17523 = fadd float %17518, %17520
  %17524 = bitcast float %17523 to i32
  %17525 = and i32 %17524, 2143289344
  %17526 = icmp eq i32 %17525, 2139095040
  %17527 = and i32 %17524, 4194303
  %17528 = icmp ne i32 %17527, 0
  %17529 = and i1 %17526, %17528
  br i1 %17529, label %17530, label %17538

; <label>:17530:                                  ; preds = %17522
  %17531 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %17516, %struct.Memory* %17457)
  %.pre366 = load i64, i64* %3, align 8
  %.pre367 = load i8, i8* %32, align 1
  %.pre368 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1163

; <label>:17532:                                  ; preds = %block_.L_4228eb
  %17533 = fcmp ogt float %17518, %17520
  br i1 %17533, label %17538, label %17534

; <label>:17534:                                  ; preds = %17532
  %17535 = fcmp olt float %17518, %17520
  br i1 %17535, label %17538, label %17536

; <label>:17536:                                  ; preds = %17534
  %17537 = fcmp oeq float %17518, %17520
  br i1 %17537, label %17538, label %17542

; <label>:17538:                                  ; preds = %17536, %17534, %17532, %17522
  %17539 = phi i8 [ 0, %17532 ], [ 0, %17534 ], [ 1, %17536 ], [ 1, %17522 ]
  %17540 = phi i8 [ 0, %17532 ], [ 0, %17534 ], [ 0, %17536 ], [ 1, %17522 ]
  %17541 = phi i8 [ 0, %17532 ], [ 1, %17534 ], [ 0, %17536 ], [ 1, %17522 ]
  store i8 %17539, i8* %48, align 1
  store i8 %17540, i8* %39, align 1
  store i8 %17541, i8* %32, align 1
  br label %17542

; <label>:17542:                                  ; preds = %17538, %17536
  %17543 = phi i8 [ %17539, %17538 ], [ %17482, %17536 ]
  %17544 = phi i8 [ %17541, %17538 ], [ %17470, %17536 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit1163

routine_ucomiss__xmm0___xmm1.exit1163:            ; preds = %17542, %17530
  %17545 = phi i8 [ %.pre368, %17530 ], [ %17543, %17542 ]
  %17546 = phi i8 [ %.pre367, %17530 ], [ %17544, %17542 ]
  %17547 = phi i64 [ %.pre366, %17530 ], [ %17516, %17542 ]
  %17548 = phi %struct.Memory* [ %17531, %17530 ], [ %17457, %17542 ]
  %17549 = or i8 %17545, %17546
  %17550 = icmp ne i8 %17549, 0
  %.v555 = select i1 %17550, i64 11, i64 6
  %17551 = add i64 %17547, %.v555
  store i64 %17551, i64* %3, align 8
  br i1 %17550, label %block_.L_422918, label %block_422913

block_422913:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit1163
  %17552 = add i64 %17551, 939
  br label %block_.L_422cbe

block_.L_422918:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit1163
  %17553 = add i64 %17551, 10
  store i64 %17553, i64* %3, align 8
  br label %block_.L_422922

block_.L_422922:                                  ; preds = %block_.L_422918, %block_.L_4228b4
  %.pre445.pre-phi = phi <2 x float>* [ %17427, %block_.L_422918 ], [ %17230, %block_.L_4228b4 ]
  %.pre443.pre-phi = phi <2 x float>* [ %17413, %block_.L_422918 ], [ %17216, %block_.L_4228b4 ]
  %.pre441.pre-phi = phi i32* [ %17410, %block_.L_422918 ], [ %17213, %block_.L_4228b4 ]
  %.pre437.pre-phi = phi i32* [ %17407, %block_.L_422918 ], [ %17210, %block_.L_4228b4 ]
  %.pre435.pre-phi = phi i32* [ %17405, %block_.L_422918 ], [ %17208, %block_.L_4228b4 ]
  %.pre431.pre-phi = phi float* [ %17402, %block_.L_422918 ], [ %17205, %block_.L_4228b4 ]
  %.pre429.pre-phi = phi <2 x i32>* [ %17399, %block_.L_422918 ], [ %17202, %block_.L_4228b4 ]
  %.pre427.pre-phi = phi <2 x i32>* [ %17397, %block_.L_422918 ], [ %17200, %block_.L_4228b4 ]
  %.pre425.pre-phi = phi i32* [ %17396, %block_.L_422918 ], [ %17199, %block_.L_4228b4 ]
  %.pre421.pre-phi = phi i32* [ %17393, %block_.L_422918 ], [ %17196, %block_.L_4228b4 ]
  %.pre419.pre-phi = phi i32* [ %17391, %block_.L_422918 ], [ %17194, %block_.L_4228b4 ]
  %.pre415.pre-phi = phi float* [ %17388, %block_.L_422918 ], [ %17191, %block_.L_4228b4 ]
  %.pre413.pre-phi = phi <2 x i32>* [ %17385, %block_.L_422918 ], [ %17188, %block_.L_4228b4 ]
  %.pre412.pre-phi = phi <2 x i32>* [ %17383, %block_.L_422918 ], [ %17186, %block_.L_4228b4 ]
  %storemerge158 = phi i64 [ %17553, %block_.L_422918 ], [ %17356, %block_.L_4228b4 ]
  %MEMORY.74 = phi %struct.Memory* [ %17548, %block_.L_422918 ], [ %17351, %block_.L_4228b4 ]
  %17554 = add i64 %storemerge158, 5
  store i64 %17554, i64* %3, align 8
  br label %block_.L_422927

block_.L_422927:                                  ; preds = %block_.L_422922, %block_.L_422846
  %.pre-phi446 = phi <2 x float>* [ %.pre445.pre-phi, %block_.L_422922 ], [ %16998, %block_.L_422846 ]
  %.pre-phi444 = phi <2 x float>* [ %.pre443.pre-phi, %block_.L_422922 ], [ %16984, %block_.L_422846 ]
  %.pre-phi442 = phi i32* [ %.pre441.pre-phi, %block_.L_422922 ], [ %16981, %block_.L_422846 ]
  %.pre-phi438 = phi i32* [ %.pre437.pre-phi, %block_.L_422922 ], [ %16978, %block_.L_422846 ]
  %.pre-phi436 = phi i32* [ %.pre435.pre-phi, %block_.L_422922 ], [ %16976, %block_.L_422846 ]
  %.pre-phi432 = phi float* [ %.pre431.pre-phi, %block_.L_422922 ], [ %16973, %block_.L_422846 ]
  %.pre-phi430 = phi <2 x i32>* [ %.pre429.pre-phi, %block_.L_422922 ], [ %16970, %block_.L_422846 ]
  %.pre-phi428 = phi <2 x i32>* [ %.pre427.pre-phi, %block_.L_422922 ], [ %16968, %block_.L_422846 ]
  %.pre-phi426 = phi i32* [ %.pre425.pre-phi, %block_.L_422922 ], [ %16967, %block_.L_422846 ]
  %.pre-phi422 = phi i32* [ %.pre421.pre-phi, %block_.L_422922 ], [ %16964, %block_.L_422846 ]
  %.pre-phi420 = phi i32* [ %.pre419.pre-phi, %block_.L_422922 ], [ %16962, %block_.L_422846 ]
  %.pre-phi416 = phi float* [ %.pre415.pre-phi, %block_.L_422922 ], [ %16959, %block_.L_422846 ]
  %.pre-phi414 = phi <2 x i32>* [ %.pre413.pre-phi, %block_.L_422922 ], [ %16956, %block_.L_422846 ]
  %.pre-phi = phi <2 x i32>* [ %.pre412.pre-phi, %block_.L_422922 ], [ %16954, %block_.L_422846 ]
  %storemerge155 = phi i64 [ %17554, %block_.L_422922 ], [ %17124, %block_.L_422846 ]
  %MEMORY.75 = phi %struct.Memory* [ %MEMORY.74, %block_.L_422922 ], [ %17119, %block_.L_422846 ]
  %17555 = load i64, i64* %RBP.i, align 8
  %17556 = add i64 %17555, -188
  %17557 = add i64 %storemerge155, 10
  store i64 %17557, i64* %3, align 8
  %17558 = inttoptr i64 %17556 to i32*
  store i32 1, i32* %17558, align 4
  %.pre369 = load i64, i64* %3, align 8
  br label %block_.L_422931

block_.L_422931:                                  ; preds = %block_.L_422ca0, %block_.L_422927
  %17559 = phi i64 [ %.pre369, %block_.L_422927 ], [ %19308, %block_.L_422ca0 ]
  %MEMORY.76 = phi %struct.Memory* [ %MEMORY.75, %block_.L_422927 ], [ %MEMORY.83, %block_.L_422ca0 ]
  store i64 4, i64* %RAX.i3587.phi.trans.insert, align 8
  %17560 = load i64, i64* %RBP.i, align 8
  %17561 = add i64 %17560, -188
  %17562 = add i64 %17559, 11
  store i64 %17562, i64* %3, align 8
  %17563 = inttoptr i64 %17561 to i32*
  %17564 = load i32, i32* %17563, align 4
  %17565 = zext i32 %17564 to i64
  store i64 %17565, i64* %RCX.i4260.pre-phi, align 8
  %17566 = add i64 %17560, -76
  %17567 = add i64 %17559, 14
  store i64 %17567, i64* %3, align 8
  %17568 = inttoptr i64 %17566 to i32*
  %17569 = load i32, i32* %17568, align 4
  %17570 = zext i32 %17569 to i64
  store i64 %17570, i64* %RDX.i4317.pre-phi, align 8
  %17571 = add i64 %17560, -396
  %17572 = add i64 %17559, 20
  store i64 %17572, i64* %3, align 8
  %17573 = inttoptr i64 %17571 to i32*
  store i32 4, i32* %17573, align 4
  %17574 = load i32, i32* %EDX.i1187, align 4
  %17575 = zext i32 %17574 to i64
  %17576 = load i64, i64* %3, align 8
  store i64 %17575, i64* %RAX.i3587.phi.trans.insert, align 8
  %17577 = sext i32 %17574 to i64
  %17578 = lshr i64 %17577, 32
  store i64 %17578, i64* %11435, align 8
  %17579 = load i64, i64* %RBP.i, align 8
  %17580 = add i64 %17579, -396
  %17581 = add i64 %17576, 9
  store i64 %17581, i64* %3, align 8
  %17582 = inttoptr i64 %17580 to i32*
  %17583 = load i32, i32* %17582, align 4
  %17584 = zext i32 %17583 to i64
  store i64 %17584, i64* %RSI.i739, align 8
  %17585 = add i64 %17576, 11
  store i64 %17585, i64* %3, align 8
  %17586 = sext i32 %17583 to i64
  %17587 = shl nuw i64 %17578, 32
  %17588 = or i64 %17587, %17575
  %17589 = sdiv i64 %17588, %17586
  %17590 = shl i64 %17589, 32
  %17591 = ashr exact i64 %17590, 32
  %17592 = icmp eq i64 %17589, %17591
  br i1 %17592, label %17595, label %17593

; <label>:17593:                                  ; preds = %block_.L_422931
  %17594 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %17585, %struct.Memory* %MEMORY.76)
  %.pre370 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %.pre371 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit

; <label>:17595:                                  ; preds = %block_.L_422931
  %17596 = srem i64 %17588, %17586
  %17597 = and i64 %17589, 4294967295
  store i64 %17597, i64* %RAX.i3587.phi.trans.insert, align 8
  %17598 = and i64 %17596, 4294967295
  store i64 %17598, i64* %RDX.i4317.pre-phi, align 8
  store i8 0, i8* %32, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %45, align 1
  store i8 0, i8* %48, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %17599 = trunc i64 %17589 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %17595, %17593
  %17600 = phi i64 [ %.pre371, %17593 ], [ %17585, %17595 ]
  %17601 = phi i32 [ %.pre370, %17593 ], [ %17599, %17595 ]
  %17602 = phi %struct.Memory* [ %17594, %17593 ], [ %MEMORY.76, %17595 ]
  %17603 = load i32, i32* %ECX.i1211, align 4
  %17604 = sub i32 %17603, %17601
  %17605 = icmp ult i32 %17603, %17601
  %17606 = zext i1 %17605 to i8
  store i8 %17606, i8* %32, align 1
  %17607 = and i32 %17604, 255
  %17608 = tail call i32 @llvm.ctpop.i32(i32 %17607)
  %17609 = trunc i32 %17608 to i8
  %17610 = and i8 %17609, 1
  %17611 = xor i8 %17610, 1
  store i8 %17611, i8* %39, align 1
  %17612 = xor i32 %17601, %17603
  %17613 = xor i32 %17612, %17604
  %17614 = lshr i32 %17613, 4
  %17615 = trunc i32 %17614 to i8
  %17616 = and i8 %17615, 1
  store i8 %17616, i8* %45, align 1
  %17617 = icmp eq i32 %17604, 0
  %17618 = zext i1 %17617 to i8
  store i8 %17618, i8* %48, align 1
  %17619 = lshr i32 %17604, 31
  %17620 = trunc i32 %17619 to i8
  store i8 %17620, i8* %51, align 1
  %17621 = lshr i32 %17603, 31
  %17622 = lshr i32 %17601, 31
  %17623 = xor i32 %17622, %17621
  %17624 = xor i32 %17619, %17621
  %17625 = add nuw nsw i32 %17624, %17623
  %17626 = icmp eq i32 %17625, 2
  %17627 = zext i1 %17626 to i8
  store i8 %17627, i8* %57, align 1
  %17628 = icmp ne i8 %17620, 0
  %17629 = xor i1 %17628, %17626
  %.demorgan471 = or i1 %17617, %17629
  %.v541 = select i1 %.demorgan471, i64 8, i64 873
  %17630 = add i64 %17600, %.v541
  store i64 %17630, i64* %3, align 8
  br i1 %.demorgan471, label %block_422958, label %block_.L_422cb9

block_422958:                                     ; preds = %routine_idivl__esi.exit
  %17631 = load i64, i64* %RBP.i, align 8
  %17632 = add i64 %17631, -200
  %17633 = add i64 %17630, 10
  store i64 %17633, i64* %3, align 8
  %17634 = inttoptr i64 %17632 to i32*
  store i32 0, i32* %17634, align 4
  %17635 = load i64, i64* %RBP.i, align 8
  %17636 = add i64 %17635, -192
  %17637 = load i64, i64* %3, align 8
  %17638 = add i64 %17637, 10
  store i64 %17638, i64* %3, align 8
  %17639 = inttoptr i64 %17636 to i32*
  store i32 0, i32* %17639, align 4
  %.pre372 = load i64, i64* %3, align 8
  br label %block_.L_42296c

block_.L_42296c:                                  ; preds = %block_.L_422b2d, %block_422958
  %17640 = phi i64 [ %.pre372, %block_422958 ], [ %18653, %block_.L_422b2d ]
  %MEMORY.77 = phi %struct.Memory* [ %17602, %block_422958 ], [ %MEMORY.80, %block_.L_422b2d ]
  %17641 = load i64, i64* %RBP.i, align 8
  %17642 = add i64 %17641, -192
  %17643 = add i64 %17640, 7
  store i64 %17643, i64* %3, align 8
  %17644 = inttoptr i64 %17642 to i32*
  %17645 = load i32, i32* %17644, align 4
  %17646 = add i32 %17645, -16
  %17647 = icmp ult i32 %17645, 16
  %17648 = zext i1 %17647 to i8
  store i8 %17648, i8* %32, align 1
  %17649 = and i32 %17646, 255
  %17650 = tail call i32 @llvm.ctpop.i32(i32 %17649)
  %17651 = trunc i32 %17650 to i8
  %17652 = and i8 %17651, 1
  %17653 = xor i8 %17652, 1
  store i8 %17653, i8* %39, align 1
  %17654 = xor i32 %17645, 16
  %17655 = xor i32 %17654, %17646
  %17656 = lshr i32 %17655, 4
  %17657 = trunc i32 %17656 to i8
  %17658 = and i8 %17657, 1
  store i8 %17658, i8* %45, align 1
  %17659 = icmp eq i32 %17646, 0
  %17660 = zext i1 %17659 to i8
  store i8 %17660, i8* %48, align 1
  %17661 = lshr i32 %17646, 31
  %17662 = trunc i32 %17661 to i8
  store i8 %17662, i8* %51, align 1
  %17663 = lshr i32 %17645, 31
  %17664 = xor i32 %17661, %17663
  %17665 = add nuw nsw i32 %17664, %17663
  %17666 = icmp eq i32 %17665, 2
  %17667 = zext i1 %17666 to i8
  store i8 %17667, i8* %57, align 1
  %17668 = icmp ne i8 %17662, 0
  %17669 = xor i1 %17668, %17666
  %.v475 = select i1 %17669, i64 13, i64 474
  %17670 = add i64 %17640, %.v475
  store i64 %17670, i64* %3, align 8
  br i1 %17669, label %block_422979, label %block_.L_422b46

block_422979:                                     ; preds = %block_.L_42296c
  %17671 = add i64 %17641, -184
  %17672 = add i64 %17670, 6
  store i64 %17672, i64* %3, align 8
  %17673 = inttoptr i64 %17671 to i32*
  %17674 = load i32, i32* %17673, align 4
  %17675 = zext i32 %17674 to i64
  store i64 %17675, i64* %RAX.i3587.phi.trans.insert, align 8
  %17676 = add i64 %17670, 13
  store i64 %17676, i64* %3, align 8
  %17677 = load i32, i32* %17644, align 4
  %17678 = sext i32 %17677 to i64
  store i64 %17678, i64* %RCX.i4260.pre-phi, align 8
  %17679 = shl nsw i64 %17678, 2
  %17680 = add nsw i64 %17679, 7124928
  %17681 = add i64 %17670, 20
  store i64 %17681, i64* %3, align 8
  %17682 = inttoptr i64 %17680 to i32*
  %17683 = load i32, i32* %17682, align 4
  %17684 = zext i32 %17683 to i64
  store i64 %17684, i64* %RDX.i4317.pre-phi, align 8
  %17685 = add i64 %17641, -188
  %17686 = add i64 %17670, 27
  store i64 %17686, i64* %3, align 8
  %17687 = inttoptr i64 %17685 to i32*
  %17688 = load i32, i32* %17687, align 4
  %17689 = sext i32 %17683 to i64
  %17690 = sext i32 %17688 to i64
  %17691 = mul nsw i64 %17690, %17689
  %17692 = and i64 %17691, 4294967295
  store i64 %17692, i64* %RDX.i4317.pre-phi, align 8
  %17693 = trunc i64 %17691 to i32
  %17694 = add i32 %17693, %17674
  %17695 = zext i32 %17694 to i64
  store i64 %17695, i64* %RAX.i3587.phi.trans.insert, align 8
  %17696 = icmp ult i32 %17694, %17674
  %17697 = icmp ult i32 %17694, %17693
  %17698 = or i1 %17696, %17697
  %17699 = zext i1 %17698 to i8
  store i8 %17699, i8* %32, align 1
  %17700 = and i32 %17694, 255
  %17701 = tail call i32 @llvm.ctpop.i32(i32 %17700)
  %17702 = trunc i32 %17701 to i8
  %17703 = and i8 %17702, 1
  %17704 = xor i8 %17703, 1
  store i8 %17704, i8* %39, align 1
  %17705 = xor i64 %17691, %17675
  %17706 = trunc i64 %17705 to i32
  %17707 = xor i32 %17706, %17694
  %17708 = lshr i32 %17707, 4
  %17709 = trunc i32 %17708 to i8
  %17710 = and i8 %17709, 1
  store i8 %17710, i8* %45, align 1
  %17711 = icmp eq i32 %17694, 0
  %17712 = zext i1 %17711 to i8
  store i8 %17712, i8* %48, align 1
  %17713 = lshr i32 %17694, 31
  %17714 = trunc i32 %17713 to i8
  store i8 %17714, i8* %51, align 1
  %17715 = lshr i32 %17674, 31
  %17716 = lshr i32 %17693, 31
  %17717 = xor i32 %17713, %17715
  %17718 = xor i32 %17713, %17716
  %17719 = add nuw nsw i32 %17717, %17718
  %17720 = icmp eq i32 %17719, 2
  %17721 = zext i1 %17720 to i8
  store i8 %17721, i8* %57, align 1
  %17722 = add i64 %17641, -96
  %17723 = add i64 %17670, 32
  store i64 %17723, i64* %3, align 8
  %17724 = inttoptr i64 %17722 to i32*
  store i32 %17694, i32* %17724, align 4
  %17725 = load i64, i64* %RBP.i, align 8
  %17726 = add i64 %17725, -180
  %17727 = load i64, i64* %3, align 8
  %17728 = add i64 %17727, 6
  store i64 %17728, i64* %3, align 8
  %17729 = inttoptr i64 %17726 to i32*
  %17730 = load i32, i32* %17729, align 4
  %17731 = zext i32 %17730 to i64
  store i64 %17731, i64* %RAX.i3587.phi.trans.insert, align 8
  %17732 = add i64 %17725, -192
  %17733 = add i64 %17727, 13
  store i64 %17733, i64* %3, align 8
  %17734 = inttoptr i64 %17732 to i32*
  %17735 = load i32, i32* %17734, align 4
  %17736 = sext i32 %17735 to i64
  store i64 %17736, i64* %RCX.i4260.pre-phi, align 8
  %17737 = shl nsw i64 %17736, 2
  %17738 = add nsw i64 %17737, 7124992
  %17739 = add i64 %17727, 20
  store i64 %17739, i64* %3, align 8
  %17740 = inttoptr i64 %17738 to i32*
  %17741 = load i32, i32* %17740, align 4
  %17742 = zext i32 %17741 to i64
  store i64 %17742, i64* %RDX.i4317.pre-phi, align 8
  %17743 = add i64 %17725, -188
  %17744 = add i64 %17727, 27
  store i64 %17744, i64* %3, align 8
  %17745 = inttoptr i64 %17743 to i32*
  %17746 = load i32, i32* %17745, align 4
  %17747 = sext i32 %17741 to i64
  %17748 = sext i32 %17746 to i64
  %17749 = mul nsw i64 %17748, %17747
  %17750 = and i64 %17749, 4294967295
  store i64 %17750, i64* %RDX.i4317.pre-phi, align 8
  %17751 = trunc i64 %17749 to i32
  %17752 = add i32 %17751, %17730
  %17753 = zext i32 %17752 to i64
  store i64 %17753, i64* %RAX.i3587.phi.trans.insert, align 8
  %17754 = icmp ult i32 %17752, %17730
  %17755 = icmp ult i32 %17752, %17751
  %17756 = or i1 %17754, %17755
  %17757 = zext i1 %17756 to i8
  store i8 %17757, i8* %32, align 1
  %17758 = and i32 %17752, 255
  %17759 = tail call i32 @llvm.ctpop.i32(i32 %17758)
  %17760 = trunc i32 %17759 to i8
  %17761 = and i8 %17760, 1
  %17762 = xor i8 %17761, 1
  store i8 %17762, i8* %39, align 1
  %17763 = xor i64 %17749, %17731
  %17764 = trunc i64 %17763 to i32
  %17765 = xor i32 %17764, %17752
  %17766 = lshr i32 %17765, 4
  %17767 = trunc i32 %17766 to i8
  %17768 = and i8 %17767, 1
  store i8 %17768, i8* %45, align 1
  %17769 = icmp eq i32 %17752, 0
  %17770 = zext i1 %17769 to i8
  store i8 %17770, i8* %48, align 1
  %17771 = lshr i32 %17752, 31
  %17772 = trunc i32 %17771 to i8
  store i8 %17772, i8* %51, align 1
  %17773 = lshr i32 %17730, 31
  %17774 = lshr i32 %17751, 31
  %17775 = xor i32 %17771, %17773
  %17776 = xor i32 %17771, %17774
  %17777 = add nuw nsw i32 %17775, %17776
  %17778 = icmp eq i32 %17777, 2
  %17779 = zext i1 %17778 to i8
  store i8 %17779, i8* %57, align 1
  %17780 = add i64 %17725, -100
  %17781 = add i64 %17727, 32
  store i64 %17781, i64* %3, align 8
  %17782 = inttoptr i64 %17780 to i32*
  store i32 %17752, i32* %17782, align 4
  %17783 = load i64, i64* %RBP.i, align 8
  %17784 = add i64 %17783, -96
  %17785 = load i64, i64* %3, align 8
  %17786 = add i64 %17785, 3
  store i64 %17786, i64* %3, align 8
  %17787 = inttoptr i64 %17784 to i32*
  %17788 = load i32, i32* %17787, align 4
  %17789 = zext i32 %17788 to i64
  store i64 %17789, i64* %RAX.i3587.phi.trans.insert, align 8
  %17790 = add i64 %17783, -160
  %17791 = add i64 %17785, 9
  store i64 %17791, i64* %3, align 8
  %17792 = inttoptr i64 %17790 to i32*
  %17793 = load i32, i32* %17792, align 4
  %17794 = sub i32 %17788, %17793
  %17795 = zext i32 %17794 to i64
  store i64 %17795, i64* %RAX.i3587.phi.trans.insert, align 8
  %17796 = icmp ult i32 %17788, %17793
  %17797 = zext i1 %17796 to i8
  store i8 %17797, i8* %32, align 1
  %17798 = and i32 %17794, 255
  %17799 = tail call i32 @llvm.ctpop.i32(i32 %17798)
  %17800 = trunc i32 %17799 to i8
  %17801 = and i8 %17800, 1
  %17802 = xor i8 %17801, 1
  store i8 %17802, i8* %39, align 1
  %17803 = xor i32 %17793, %17788
  %17804 = xor i32 %17803, %17794
  %17805 = lshr i32 %17804, 4
  %17806 = trunc i32 %17805 to i8
  %17807 = and i8 %17806, 1
  store i8 %17807, i8* %45, align 1
  %17808 = icmp eq i32 %17794, 0
  %17809 = zext i1 %17808 to i8
  store i8 %17809, i8* %48, align 1
  %17810 = lshr i32 %17794, 31
  %17811 = trunc i32 %17810 to i8
  store i8 %17811, i8* %51, align 1
  %17812 = lshr i32 %17788, 31
  %17813 = lshr i32 %17793, 31
  %17814 = xor i32 %17813, %17812
  %17815 = xor i32 %17810, %17812
  %17816 = add nuw nsw i32 %17815, %17814
  %17817 = icmp eq i32 %17816, 2
  %17818 = zext i1 %17817 to i8
  store i8 %17818, i8* %57, align 1
  store i64 %17795, i64* %RDI.i1133, align 8
  %17819 = add i64 %17785, -137657
  %17820 = add i64 %17785, 16
  %17821 = load i64, i64* %6, align 8
  %17822 = add i64 %17821, -8
  %17823 = inttoptr i64 %17822 to i64*
  store i64 %17820, i64* %17823, align 8
  store i64 %17822, i64* %6, align 8
  store i64 %17819, i64* %3, align 8
  %17824 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.77)
  %17825 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %17826 = load i64, i64* %RBP.i, align 8
  %17827 = add i64 %17826, -76
  %17828 = load i64, i64* %3, align 8
  %17829 = add i64 %17828, 3
  store i64 %17829, i64* %3, align 8
  %17830 = inttoptr i64 %17827 to i32*
  %17831 = load i32, i32* %17830, align 4
  %17832 = sub i32 %17825, %17831
  %17833 = icmp ult i32 %17825, %17831
  %17834 = zext i1 %17833 to i8
  store i8 %17834, i8* %32, align 1
  %17835 = and i32 %17832, 255
  %17836 = tail call i32 @llvm.ctpop.i32(i32 %17835)
  %17837 = trunc i32 %17836 to i8
  %17838 = and i8 %17837, 1
  %17839 = xor i8 %17838, 1
  store i8 %17839, i8* %39, align 1
  %17840 = xor i32 %17831, %17825
  %17841 = xor i32 %17840, %17832
  %17842 = lshr i32 %17841, 4
  %17843 = trunc i32 %17842 to i8
  %17844 = and i8 %17843, 1
  store i8 %17844, i8* %45, align 1
  %17845 = icmp eq i32 %17832, 0
  %17846 = zext i1 %17845 to i8
  store i8 %17846, i8* %48, align 1
  %17847 = lshr i32 %17832, 31
  %17848 = trunc i32 %17847 to i8
  store i8 %17848, i8* %51, align 1
  %17849 = lshr i32 %17825, 31
  %17850 = lshr i32 %17831, 31
  %17851 = xor i32 %17850, %17849
  %17852 = xor i32 %17847, %17849
  %17853 = add nuw nsw i32 %17852, %17851
  %17854 = icmp eq i32 %17853, 2
  %17855 = zext i1 %17854 to i8
  store i8 %17855, i8* %57, align 1
  %17856 = icmp ne i8 %17848, 0
  %17857 = xor i1 %17856, %17854
  %.demorgan476 = or i1 %17845, %17857
  %.v548 = select i1 %.demorgan476, i64 9, i64 356
  %17858 = add i64 %17828, %.v548
  store i64 %17858, i64* %3, align 8
  br i1 %.demorgan476, label %block_4229d2, label %block_.L_422b2d

block_4229d2:                                     ; preds = %block_422979
  %17859 = add i64 %17826, -100
  %17860 = add i64 %17858, 3
  store i64 %17860, i64* %3, align 8
  %17861 = inttoptr i64 %17859 to i32*
  %17862 = load i32, i32* %17861, align 4
  %17863 = zext i32 %17862 to i64
  store i64 %17863, i64* %RAX.i3587.phi.trans.insert, align 8
  %17864 = add i64 %17826, -164
  %17865 = add i64 %17858, 9
  store i64 %17865, i64* %3, align 8
  %17866 = inttoptr i64 %17864 to i32*
  %17867 = load i32, i32* %17866, align 4
  %17868 = sub i32 %17862, %17867
  %17869 = zext i32 %17868 to i64
  store i64 %17869, i64* %RAX.i3587.phi.trans.insert, align 8
  %17870 = icmp ult i32 %17862, %17867
  %17871 = zext i1 %17870 to i8
  store i8 %17871, i8* %32, align 1
  %17872 = and i32 %17868, 255
  %17873 = tail call i32 @llvm.ctpop.i32(i32 %17872)
  %17874 = trunc i32 %17873 to i8
  %17875 = and i8 %17874, 1
  %17876 = xor i8 %17875, 1
  store i8 %17876, i8* %39, align 1
  %17877 = xor i32 %17867, %17862
  %17878 = xor i32 %17877, %17868
  %17879 = lshr i32 %17878, 4
  %17880 = trunc i32 %17879 to i8
  %17881 = and i8 %17880, 1
  store i8 %17881, i8* %45, align 1
  %17882 = icmp eq i32 %17868, 0
  %17883 = zext i1 %17882 to i8
  store i8 %17883, i8* %48, align 1
  %17884 = lshr i32 %17868, 31
  %17885 = trunc i32 %17884 to i8
  store i8 %17885, i8* %51, align 1
  %17886 = lshr i32 %17862, 31
  %17887 = lshr i32 %17867, 31
  %17888 = xor i32 %17887, %17886
  %17889 = xor i32 %17884, %17886
  %17890 = add nuw nsw i32 %17889, %17888
  %17891 = icmp eq i32 %17890, 2
  %17892 = zext i1 %17891 to i8
  store i8 %17892, i8* %57, align 1
  store i64 %17869, i64* %RDI.i1133, align 8
  %17893 = add i64 %17858, -137682
  %17894 = add i64 %17858, 16
  %17895 = load i64, i64* %6, align 8
  %17896 = add i64 %17895, -8
  %17897 = inttoptr i64 %17896 to i64*
  store i64 %17894, i64* %17897, align 8
  store i64 %17896, i64* %6, align 8
  store i64 %17893, i64* %3, align 8
  %17898 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %17824)
  %17899 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %17900 = load i64, i64* %RBP.i, align 8
  %17901 = add i64 %17900, -76
  %17902 = load i64, i64* %3, align 8
  %17903 = add i64 %17902, 3
  store i64 %17903, i64* %3, align 8
  %17904 = inttoptr i64 %17901 to i32*
  %17905 = load i32, i32* %17904, align 4
  %17906 = sub i32 %17899, %17905
  %17907 = icmp ult i32 %17899, %17905
  %17908 = zext i1 %17907 to i8
  store i8 %17908, i8* %32, align 1
  %17909 = and i32 %17906, 255
  %17910 = tail call i32 @llvm.ctpop.i32(i32 %17909)
  %17911 = trunc i32 %17910 to i8
  %17912 = and i8 %17911, 1
  %17913 = xor i8 %17912, 1
  store i8 %17913, i8* %39, align 1
  %17914 = xor i32 %17905, %17899
  %17915 = xor i32 %17914, %17906
  %17916 = lshr i32 %17915, 4
  %17917 = trunc i32 %17916 to i8
  %17918 = and i8 %17917, 1
  store i8 %17918, i8* %45, align 1
  %17919 = icmp eq i32 %17906, 0
  %17920 = zext i1 %17919 to i8
  store i8 %17920, i8* %48, align 1
  %17921 = lshr i32 %17906, 31
  %17922 = trunc i32 %17921 to i8
  store i8 %17922, i8* %51, align 1
  %17923 = lshr i32 %17899, 31
  %17924 = lshr i32 %17905, 31
  %17925 = xor i32 %17924, %17923
  %17926 = xor i32 %17921, %17923
  %17927 = add nuw nsw i32 %17926, %17925
  %17928 = icmp eq i32 %17927, 2
  %17929 = zext i1 %17928 to i8
  store i8 %17929, i8* %57, align 1
  %17930 = icmp ne i8 %17922, 0
  %17931 = xor i1 %17930, %17928
  %.demorgan477 = or i1 %17919, %17931
  %.v549 = select i1 %.demorgan477, i64 9, i64 331
  %17932 = add i64 %17902, %.v549
  store i64 %17932, i64* %3, align 8
  br i1 %.demorgan477, label %block_4229eb, label %block_.L_422b2d

block_4229eb:                                     ; preds = %block_4229d2
  %17933 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %17933, i64* %RAX.i3587.phi.trans.insert, align 8
  %17934 = add i64 %17900, -100
  %17935 = add i64 %17932, 11
  store i64 %17935, i64* %3, align 8
  %17936 = inttoptr i64 %17934 to i32*
  %17937 = load i32, i32* %17936, align 4
  %17938 = zext i32 %17937 to i64
  store i64 %17938, i64* %RCX.i4260.pre-phi, align 8
  %17939 = add i64 %17900, -164
  %17940 = add i64 %17932, 17
  store i64 %17940, i64* %3, align 8
  %17941 = inttoptr i64 %17939 to i32*
  %17942 = load i32, i32* %17941, align 4
  %17943 = sub i32 %17937, %17942
  %17944 = zext i32 %17943 to i64
  store i64 %17944, i64* %RCX.i4260.pre-phi, align 8
  %17945 = icmp ult i32 %17937, %17942
  %17946 = zext i1 %17945 to i8
  store i8 %17946, i8* %32, align 1
  %17947 = and i32 %17943, 255
  %17948 = tail call i32 @llvm.ctpop.i32(i32 %17947)
  %17949 = trunc i32 %17948 to i8
  %17950 = and i8 %17949, 1
  %17951 = xor i8 %17950, 1
  store i8 %17951, i8* %39, align 1
  %17952 = xor i32 %17942, %17937
  %17953 = xor i32 %17952, %17943
  %17954 = lshr i32 %17953, 4
  %17955 = trunc i32 %17954 to i8
  %17956 = and i8 %17955, 1
  store i8 %17956, i8* %45, align 1
  %17957 = icmp eq i32 %17943, 0
  %17958 = zext i1 %17957 to i8
  store i8 %17958, i8* %48, align 1
  %17959 = lshr i32 %17943, 31
  %17960 = trunc i32 %17959 to i8
  store i8 %17960, i8* %51, align 1
  %17961 = lshr i32 %17937, 31
  %17962 = lshr i32 %17942, 31
  %17963 = xor i32 %17962, %17961
  %17964 = xor i32 %17959, %17961
  %17965 = add nuw nsw i32 %17964, %17963
  %17966 = icmp eq i32 %17965, 2
  %17967 = zext i1 %17966 to i8
  store i8 %17967, i8* %57, align 1
  %17968 = add i64 %17932, 20
  store i64 %17968, i64* %3, align 8
  %17969 = load i32, i32* %17904, align 4
  %17970 = add i32 %17969, %17943
  %17971 = zext i32 %17970 to i64
  store i64 %17971, i64* %RCX.i4260.pre-phi, align 8
  %17972 = icmp ult i32 %17970, %17943
  %17973 = icmp ult i32 %17970, %17969
  %17974 = or i1 %17972, %17973
  %17975 = zext i1 %17974 to i8
  store i8 %17975, i8* %32, align 1
  %17976 = and i32 %17970, 255
  %17977 = tail call i32 @llvm.ctpop.i32(i32 %17976)
  %17978 = trunc i32 %17977 to i8
  %17979 = and i8 %17978, 1
  %17980 = xor i8 %17979, 1
  store i8 %17980, i8* %39, align 1
  %17981 = xor i32 %17969, %17943
  %17982 = xor i32 %17981, %17970
  %17983 = lshr i32 %17982, 4
  %17984 = trunc i32 %17983 to i8
  %17985 = and i8 %17984, 1
  store i8 %17985, i8* %45, align 1
  %17986 = icmp eq i32 %17970, 0
  %17987 = zext i1 %17986 to i8
  store i8 %17987, i8* %48, align 1
  %17988 = lshr i32 %17970, 31
  %17989 = trunc i32 %17988 to i8
  store i8 %17989, i8* %51, align 1
  %17990 = lshr i32 %17969, 31
  %17991 = xor i32 %17988, %17959
  %17992 = xor i32 %17988, %17990
  %17993 = add nuw nsw i32 %17991, %17992
  %17994 = icmp eq i32 %17993, 2
  %17995 = zext i1 %17994 to i8
  store i8 %17995, i8* %57, align 1
  %17996 = sext i32 %17970 to i64
  store i64 %17996, i64* %RDX.i4317.pre-phi, align 8
  %17997 = shl nsw i64 %17996, 3
  %17998 = add i64 %17933, %17997
  %17999 = add i64 %17932, 27
  store i64 %17999, i64* %3, align 8
  %18000 = inttoptr i64 %17998 to i64*
  %18001 = load i64, i64* %18000, align 8
  store i64 %18001, i64* %RAX.i3587.phi.trans.insert, align 8
  %18002 = add i64 %17900, -96
  %18003 = add i64 %17932, 30
  store i64 %18003, i64* %3, align 8
  %18004 = inttoptr i64 %18002 to i32*
  %18005 = load i32, i32* %18004, align 4
  %18006 = zext i32 %18005 to i64
  store i64 %18006, i64* %RCX.i4260.pre-phi, align 8
  %18007 = load i64, i64* %RBP.i, align 8
  %18008 = add i64 %18007, -160
  %18009 = add i64 %17932, 36
  store i64 %18009, i64* %3, align 8
  %18010 = inttoptr i64 %18008 to i32*
  %18011 = load i32, i32* %18010, align 4
  %18012 = sub i32 %18005, %18011
  %18013 = zext i32 %18012 to i64
  store i64 %18013, i64* %RCX.i4260.pre-phi, align 8
  %18014 = icmp ult i32 %18005, %18011
  %18015 = zext i1 %18014 to i8
  store i8 %18015, i8* %32, align 1
  %18016 = and i32 %18012, 255
  %18017 = tail call i32 @llvm.ctpop.i32(i32 %18016)
  %18018 = trunc i32 %18017 to i8
  %18019 = and i8 %18018, 1
  %18020 = xor i8 %18019, 1
  store i8 %18020, i8* %39, align 1
  %18021 = xor i32 %18011, %18005
  %18022 = xor i32 %18021, %18012
  %18023 = lshr i32 %18022, 4
  %18024 = trunc i32 %18023 to i8
  %18025 = and i8 %18024, 1
  store i8 %18025, i8* %45, align 1
  %18026 = icmp eq i32 %18012, 0
  %18027 = zext i1 %18026 to i8
  store i8 %18027, i8* %48, align 1
  %18028 = lshr i32 %18012, 31
  %18029 = trunc i32 %18028 to i8
  store i8 %18029, i8* %51, align 1
  %18030 = lshr i32 %18005, 31
  %18031 = lshr i32 %18011, 31
  %18032 = xor i32 %18031, %18030
  %18033 = xor i32 %18028, %18030
  %18034 = add nuw nsw i32 %18033, %18032
  %18035 = icmp eq i32 %18034, 2
  %18036 = zext i1 %18035 to i8
  store i8 %18036, i8* %57, align 1
  %18037 = add i64 %18007, -76
  %18038 = add i64 %17932, 39
  store i64 %18038, i64* %3, align 8
  %18039 = inttoptr i64 %18037 to i32*
  %18040 = load i32, i32* %18039, align 4
  %18041 = add i32 %18040, %18012
  %18042 = zext i32 %18041 to i64
  store i64 %18042, i64* %RCX.i4260.pre-phi, align 8
  %18043 = icmp ult i32 %18041, %18012
  %18044 = icmp ult i32 %18041, %18040
  %18045 = or i1 %18043, %18044
  %18046 = zext i1 %18045 to i8
  store i8 %18046, i8* %32, align 1
  %18047 = and i32 %18041, 255
  %18048 = tail call i32 @llvm.ctpop.i32(i32 %18047)
  %18049 = trunc i32 %18048 to i8
  %18050 = and i8 %18049, 1
  %18051 = xor i8 %18050, 1
  store i8 %18051, i8* %39, align 1
  %18052 = xor i32 %18040, %18012
  %18053 = xor i32 %18052, %18041
  %18054 = lshr i32 %18053, 4
  %18055 = trunc i32 %18054 to i8
  %18056 = and i8 %18055, 1
  store i8 %18056, i8* %45, align 1
  %18057 = icmp eq i32 %18041, 0
  %18058 = zext i1 %18057 to i8
  store i8 %18058, i8* %48, align 1
  %18059 = lshr i32 %18041, 31
  %18060 = trunc i32 %18059 to i8
  store i8 %18060, i8* %51, align 1
  %18061 = lshr i32 %18040, 31
  %18062 = xor i32 %18059, %18028
  %18063 = xor i32 %18059, %18061
  %18064 = add nuw nsw i32 %18062, %18063
  %18065 = icmp eq i32 %18064, 2
  %18066 = zext i1 %18065 to i8
  store i8 %18066, i8* %57, align 1
  %18067 = sext i32 %18041 to i64
  store i64 %18067, i64* %RDX.i4317.pre-phi, align 8
  %18068 = shl nsw i64 %18067, 2
  %18069 = add i64 %18001, %18068
  %18070 = add i64 %17932, 46
  store i64 %18070, i64* %3, align 8
  %18071 = inttoptr i64 %18069 to i32*
  %18072 = load i32, i32* %18071, align 4
  store i8 0, i8* %32, align 1
  %18073 = and i32 %18072, 255
  %18074 = tail call i32 @llvm.ctpop.i32(i32 %18073)
  %18075 = trunc i32 %18074 to i8
  %18076 = and i8 %18075, 1
  %18077 = xor i8 %18076, 1
  store i8 %18077, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %18078 = icmp eq i32 %18072, 0
  %18079 = zext i1 %18078 to i8
  store i8 %18079, i8* %48, align 1
  %18080 = lshr i32 %18072, 31
  %18081 = trunc i32 %18080 to i8
  store i8 %18081, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v550 = select i1 %18078, i64 52, i64 317
  %18082 = add i64 %17932, %.v550
  store i64 %18082, i64* %3, align 8
  br i1 %18078, label %block_422a1f, label %block_.L_422b28

block_422a1f:                                     ; preds = %block_4229eb
  %18083 = load i64, i64* %RBP.i, align 8
  %18084 = add i64 %18083, -132
  %18085 = add i64 %18082, 6
  store i64 %18085, i64* %3, align 8
  %18086 = inttoptr i64 %18084 to i32*
  %18087 = load i32, i32* %18086, align 4
  %18088 = zext i32 %18087 to i64
  store i64 %18088, i64* %RAX.i3587.phi.trans.insert, align 8
  %18089 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %18089, i64* %RCX.i4260.pre-phi, align 8
  %18090 = add i64 %18083, -96
  %18091 = add i64 %18082, 17
  store i64 %18091, i64* %3, align 8
  %18092 = inttoptr i64 %18090 to i32*
  %18093 = load i32, i32* %18092, align 4
  %18094 = zext i32 %18093 to i64
  store i64 %18094, i64* %RDX.i4317.pre-phi, align 8
  %18095 = add i64 %18083, -136
  %18096 = add i64 %18082, 23
  store i64 %18096, i64* %3, align 8
  %18097 = inttoptr i64 %18095 to i32*
  %18098 = load i32, i32* %18097, align 4
  %18099 = zext i32 %18098 to i64
  store i64 %18099, i64* %RSI.i739, align 8
  %18100 = add i64 %18083, -408
  %18101 = add i64 %18082, 30
  store i64 %18101, i64* %3, align 8
  %18102 = inttoptr i64 %18100 to i64*
  store i64 %18089, i64* %18102, align 8
  %18103 = load i32, i32* %ESI.i1656, align 4
  %18104 = zext i32 %18103 to i64
  %18105 = load i64, i64* %3, align 8
  store i64 %18104, i64* %RCX.i4260.pre-phi, align 8
  %18106 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %18107 = add i64 %18105, 4
  store i64 %18107, i64* %3, align 8
  %18108 = trunc i32 %18103 to i5
  switch i5 %18108, label %18115 [
    i5 0, label %routine_shll__cl___edx.exit1000
    i5 1, label %18109
  ]

; <label>:18109:                                  ; preds = %block_422a1f
  %18110 = trunc i64 %18106 to i32
  %18111 = shl i32 %18110, 1
  %18112 = icmp slt i32 %18110, 0
  %18113 = icmp slt i32 %18111, 0
  %18114 = xor i1 %18112, %18113
  br label %18125

; <label>:18115:                                  ; preds = %block_422a1f
  %18116 = and i32 %18103, 31
  %18117 = zext i32 %18116 to i64
  %18118 = add nuw nsw i64 %18117, 4294967295
  %18119 = and i64 %18106, 4294967295
  %18120 = and i64 %18118, 4294967295
  %18121 = shl i64 %18119, %18120
  %18122 = trunc i64 %18121 to i32
  %18123 = icmp slt i32 %18122, 0
  %18124 = shl i32 %18122, 1
  br label %18125

; <label>:18125:                                  ; preds = %18115, %18109
  %18126 = phi i1 [ %18112, %18109 ], [ %18123, %18115 ]
  %18127 = phi i1 [ %18114, %18109 ], [ false, %18115 ]
  %18128 = phi i32 [ %18111, %18109 ], [ %18124, %18115 ]
  %18129 = zext i32 %18128 to i64
  store i64 %18129, i64* %RDX.i4317.pre-phi, align 8
  %18130 = zext i1 %18126 to i8
  store i8 %18130, i8* %32, align 1
  %18131 = and i32 %18128, 254
  %18132 = tail call i32 @llvm.ctpop.i32(i32 %18131)
  %18133 = trunc i32 %18132 to i8
  %18134 = and i8 %18133, 1
  %18135 = xor i8 %18134, 1
  store i8 %18135, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %18136 = icmp eq i32 %18128, 0
  %18137 = zext i1 %18136 to i8
  store i8 %18137, i8* %48, align 1
  %18138 = lshr i32 %18128, 31
  %18139 = trunc i32 %18138 to i8
  store i8 %18139, i8* %51, align 1
  %18140 = zext i1 %18127 to i8
  store i8 %18140, i8* %57, align 1
  br label %routine_shll__cl___edx.exit1000

routine_shll__cl___edx.exit1000:                  ; preds = %18125, %block_422a1f
  %18141 = phi i64 [ %18129, %18125 ], [ %18106, %block_422a1f ]
  %18142 = load i64, i64* %RBP.i, align 8
  %18143 = add i64 %18142, -152
  %18144 = add i64 %18105, 10
  store i64 %18144, i64* %3, align 8
  %18145 = trunc i64 %18141 to i32
  %18146 = inttoptr i64 %18143 to i32*
  %18147 = load i32, i32* %18146, align 4
  %18148 = sub i32 %18145, %18147
  %18149 = zext i32 %18148 to i64
  store i64 %18149, i64* %RDX.i4317.pre-phi, align 8
  %18150 = icmp ult i32 %18145, %18147
  %18151 = zext i1 %18150 to i8
  store i8 %18151, i8* %32, align 1
  %18152 = and i32 %18148, 255
  %18153 = tail call i32 @llvm.ctpop.i32(i32 %18152)
  %18154 = trunc i32 %18153 to i8
  %18155 = and i8 %18154, 1
  %18156 = xor i8 %18155, 1
  store i8 %18156, i8* %39, align 1
  %18157 = xor i32 %18147, %18145
  %18158 = xor i32 %18157, %18148
  %18159 = lshr i32 %18158, 4
  %18160 = trunc i32 %18159 to i8
  %18161 = and i8 %18160, 1
  store i8 %18161, i8* %45, align 1
  %18162 = icmp eq i32 %18148, 0
  %18163 = zext i1 %18162 to i8
  store i8 %18163, i8* %48, align 1
  %18164 = lshr i32 %18148, 31
  %18165 = trunc i32 %18164 to i8
  store i8 %18165, i8* %51, align 1
  %18166 = lshr i32 %18145, 31
  %18167 = lshr i32 %18147, 31
  %18168 = xor i32 %18167, %18166
  %18169 = xor i32 %18164, %18166
  %18170 = add nuw nsw i32 %18169, %18168
  %18171 = icmp eq i32 %18170, 2
  %18172 = zext i1 %18171 to i8
  store i8 %18172, i8* %57, align 1
  %18173 = sext i32 %18148 to i64
  store i64 %18173, i64* %RDI.i1133, align 8
  %18174 = add i64 %18142, -408
  %18175 = add i64 %18105, 20
  store i64 %18175, i64* %3, align 8
  %18176 = inttoptr i64 %18174 to i64*
  %18177 = load i64, i64* %18176, align 8
  store i64 %18177, i64* %R8.i5602, align 8
  %18178 = shl nsw i64 %18173, 2
  %18179 = add i64 %18178, %18177
  %18180 = add i64 %18105, 24
  store i64 %18180, i64* %3, align 8
  %18181 = inttoptr i64 %18179 to i32*
  %18182 = load i32, i32* %18181, align 4
  %18183 = zext i32 %18182 to i64
  store i64 %18183, i64* %RDX.i4317.pre-phi, align 8
  %18184 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %18184, i64* %RDI.i1133, align 8
  %18185 = add i64 %18142, -100
  %18186 = add i64 %18105, 35
  store i64 %18186, i64* %3, align 8
  %18187 = inttoptr i64 %18185 to i32*
  %18188 = load i32, i32* %18187, align 4
  %18189 = zext i32 %18188 to i64
  store i64 %18189, i64* %RSI.i739, align 8
  %18190 = add i64 %18142, -136
  %18191 = add i64 %18105, 41
  store i64 %18191, i64* %3, align 8
  %18192 = inttoptr i64 %18190 to i32*
  %18193 = load i32, i32* %18192, align 4
  %18194 = zext i32 %18193 to i64
  store i64 %18194, i64* %RCX.i4260.pre-phi, align 8
  %18195 = add i64 %18105, 43
  store i64 %18195, i64* %3, align 8
  %18196 = trunc i32 %18193 to i5
  switch i5 %18196, label %18202 [
    i5 0, label %routine_shll__cl___esi.exit975
    i5 1, label %18197
  ]

; <label>:18197:                                  ; preds = %routine_shll__cl___edx.exit1000
  %18198 = shl i32 %18188, 1
  %18199 = icmp slt i32 %18188, 0
  %18200 = icmp slt i32 %18198, 0
  %18201 = xor i1 %18199, %18200
  br label %18211

; <label>:18202:                                  ; preds = %routine_shll__cl___edx.exit1000
  %18203 = and i32 %18193, 31
  %18204 = zext i32 %18203 to i64
  %18205 = add nuw nsw i64 %18204, 4294967295
  %18206 = and i64 %18205, 4294967295
  %18207 = shl i64 %18189, %18206
  %18208 = trunc i64 %18207 to i32
  %18209 = icmp slt i32 %18208, 0
  %18210 = shl i32 %18208, 1
  br label %18211

; <label>:18211:                                  ; preds = %18202, %18197
  %18212 = phi i1 [ %18199, %18197 ], [ %18209, %18202 ]
  %18213 = phi i1 [ %18201, %18197 ], [ false, %18202 ]
  %18214 = phi i32 [ %18198, %18197 ], [ %18210, %18202 ]
  %18215 = zext i32 %18214 to i64
  store i64 %18215, i64* %RSI.i739, align 8
  %18216 = zext i1 %18212 to i8
  store i8 %18216, i8* %32, align 1
  %18217 = and i32 %18214, 254
  %18218 = tail call i32 @llvm.ctpop.i32(i32 %18217)
  %18219 = trunc i32 %18218 to i8
  %18220 = and i8 %18219, 1
  %18221 = xor i8 %18220, 1
  store i8 %18221, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %18222 = icmp eq i32 %18214, 0
  %18223 = zext i1 %18222 to i8
  store i8 %18223, i8* %48, align 1
  %18224 = lshr i32 %18214, 31
  %18225 = trunc i32 %18224 to i8
  store i8 %18225, i8* %51, align 1
  %18226 = zext i1 %18213 to i8
  store i8 %18226, i8* %57, align 1
  br label %routine_shll__cl___esi.exit975

routine_shll__cl___esi.exit975:                   ; preds = %18211, %routine_shll__cl___edx.exit1000
  %18227 = phi i32 [ %18214, %18211 ], [ %18188, %routine_shll__cl___edx.exit1000 ]
  %18228 = add i64 %18142, -156
  %18229 = add i64 %18105, 49
  store i64 %18229, i64* %3, align 8
  %18230 = inttoptr i64 %18228 to i32*
  %18231 = load i32, i32* %18230, align 4
  %18232 = sub i32 %18227, %18231
  %18233 = zext i32 %18232 to i64
  store i64 %18233, i64* %RSI.i739, align 8
  %18234 = icmp ult i32 %18227, %18231
  %18235 = zext i1 %18234 to i8
  store i8 %18235, i8* %32, align 1
  %18236 = and i32 %18232, 255
  %18237 = tail call i32 @llvm.ctpop.i32(i32 %18236)
  %18238 = trunc i32 %18237 to i8
  %18239 = and i8 %18238, 1
  %18240 = xor i8 %18239, 1
  store i8 %18240, i8* %39, align 1
  %18241 = xor i32 %18231, %18227
  %18242 = xor i32 %18241, %18232
  %18243 = lshr i32 %18242, 4
  %18244 = trunc i32 %18243 to i8
  %18245 = and i8 %18244, 1
  store i8 %18245, i8* %45, align 1
  %18246 = icmp eq i32 %18232, 0
  %18247 = zext i1 %18246 to i8
  store i8 %18247, i8* %48, align 1
  %18248 = lshr i32 %18232, 31
  %18249 = trunc i32 %18248 to i8
  store i8 %18249, i8* %51, align 1
  %18250 = lshr i32 %18227, 31
  %18251 = lshr i32 %18231, 31
  %18252 = xor i32 %18251, %18250
  %18253 = xor i32 %18248, %18250
  %18254 = add nuw nsw i32 %18253, %18252
  %18255 = icmp eq i32 %18254, 2
  %18256 = zext i1 %18255 to i8
  store i8 %18256, i8* %57, align 1
  %18257 = sext i32 %18232 to i64
  store i64 %18257, i64* %R9.i5580, align 8
  %18258 = shl nsw i64 %18257, 2
  %18259 = add i64 %18184, %18258
  %18260 = add i64 %18105, 56
  store i64 %18260, i64* %3, align 8
  %18261 = inttoptr i64 %18259 to i32*
  %18262 = load i32, i32* %18261, align 4
  %18263 = add i32 %18262, %18182
  %18264 = zext i32 %18263 to i64
  store i64 %18264, i64* %RDX.i4317.pre-phi, align 8
  %18265 = icmp ult i32 %18263, %18182
  %18266 = icmp ult i32 %18263, %18262
  %18267 = or i1 %18265, %18266
  %18268 = zext i1 %18267 to i8
  store i8 %18268, i8* %32, align 1
  %18269 = and i32 %18263, 255
  %18270 = tail call i32 @llvm.ctpop.i32(i32 %18269)
  %18271 = trunc i32 %18270 to i8
  %18272 = and i8 %18271, 1
  %18273 = xor i8 %18272, 1
  store i8 %18273, i8* %39, align 1
  %18274 = xor i32 %18262, %18182
  %18275 = xor i32 %18274, %18263
  %18276 = lshr i32 %18275, 4
  %18277 = trunc i32 %18276 to i8
  %18278 = and i8 %18277, 1
  store i8 %18278, i8* %45, align 1
  %18279 = icmp eq i32 %18263, 0
  %18280 = zext i1 %18279 to i8
  store i8 %18280, i8* %48, align 1
  %18281 = lshr i32 %18263, 31
  %18282 = trunc i32 %18281 to i8
  store i8 %18282, i8* %51, align 1
  %18283 = lshr i32 %18182, 31
  %18284 = lshr i32 %18262, 31
  %18285 = xor i32 %18281, %18283
  %18286 = xor i32 %18281, %18284
  %18287 = add nuw nsw i32 %18285, %18286
  %18288 = icmp eq i32 %18287, 2
  %18289 = zext i1 %18288 to i8
  store i8 %18289, i8* %57, align 1
  %18290 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %18291 = shl i64 %18290, 32
  %18292 = ashr exact i64 %18291, 32
  %18293 = sext i32 %18263 to i64
  %18294 = mul nsw i64 %18293, %18292
  %18295 = shl i64 %18294, 32
  %18296 = ashr i64 %18295, 47
  %18297 = lshr i64 %18296, 1
  %18298 = trunc i64 %18296 to i8
  %18299 = and i8 %18298, 1
  %18300 = trunc i64 %18297 to i32
  %18301 = and i64 %18297, 4294967295
  store i64 %18301, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %18299, i8* %32, align 1
  %18302 = and i32 %18300, 255
  %18303 = tail call i32 @llvm.ctpop.i32(i32 %18302)
  %18304 = trunc i32 %18303 to i8
  %18305 = and i8 %18304, 1
  %18306 = xor i8 %18305, 1
  store i8 %18306, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %18307 = icmp eq i32 %18300, 0
  %18308 = zext i1 %18307 to i8
  store i8 %18308, i8* %48, align 1
  %18309 = lshr i64 %18296, 32
  %18310 = trunc i64 %18309 to i8
  %18311 = and i8 %18310, 1
  store i8 %18311, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %18312 = load i64, i64* %RBP.i, align 8
  %18313 = add i64 %18312, -104
  %18314 = trunc i64 %18297 to i32
  %18315 = add i64 %18105, 65
  store i64 %18315, i64* %3, align 8
  %18316 = inttoptr i64 %18313 to i32*
  store i32 %18314, i32* %18316, align 4
  %18317 = load i64, i64* %RBP.i, align 8
  %18318 = add i64 %18317, -128
  %18319 = load i64, i64* %3, align 8
  %18320 = add i64 %18319, 4
  store i64 %18320, i64* %3, align 8
  %18321 = inttoptr i64 %18318 to i64*
  %18322 = load i64, i64* %18321, align 8
  store i64 %18322, i64* %RDI.i1133, align 8
  %18323 = add i64 %18317, -32
  %18324 = add i64 %18319, 8
  store i64 %18324, i64* %3, align 8
  %18325 = inttoptr i64 %18323 to i64*
  %18326 = load i64, i64* %18325, align 8
  store i64 %18326, i64* %RSI.i739, align 8
  %18327 = add i64 %18317, -112
  %18328 = add i64 %18319, 12
  store i64 %18328, i64* %3, align 8
  %18329 = inttoptr i64 %18327 to i64*
  %18330 = load i64, i64* %18329, align 8
  store i64 %18330, i64* %RDX.i4317.pre-phi, align 8
  %18331 = add i64 %18317, -140
  %18332 = add i64 %18319, 18
  store i64 %18332, i64* %3, align 8
  %18333 = inttoptr i64 %18331 to i32*
  %18334 = load i32, i32* %18333, align 4
  %18335 = zext i32 %18334 to i64
  store i64 %18335, i64* %RCX.i4260.pre-phi, align 8
  %18336 = add i64 %18317, -144
  %18337 = add i64 %18319, 25
  store i64 %18337, i64* %3, align 8
  %18338 = inttoptr i64 %18336 to i32*
  %18339 = load i32, i32* %18338, align 4
  %18340 = zext i32 %18339 to i64
  store i64 %18340, i64* %R8.i5602, align 8
  %18341 = add i64 %18317, -148
  %18342 = add i64 %18319, 32
  store i64 %18342, i64* %3, align 8
  %18343 = inttoptr i64 %18341 to i32*
  %18344 = load i32, i32* %18343, align 4
  %18345 = zext i32 %18344 to i64
  store i64 %18345, i64* %R9.i5580, align 8
  %18346 = add i64 %18317, -104
  %18347 = add i64 %18319, 35
  store i64 %18347, i64* %3, align 8
  %18348 = inttoptr i64 %18346 to i32*
  %18349 = load i32, i32* %18348, align 4
  %18350 = zext i32 %18349 to i64
  store i64 %18350, i64* %RAX.i3587.phi.trans.insert, align 8
  %18351 = add i64 %18317, -80
  %18352 = add i64 %18319, 39
  store i64 %18352, i64* %3, align 8
  %18353 = inttoptr i64 %18351 to i32*
  %18354 = load i32, i32* %18353, align 4
  %18355 = zext i32 %18354 to i64
  store i64 %18355, i64* %68, align 8
  %18356 = add i64 %18317, -96
  %18357 = add i64 %18319, 43
  store i64 %18357, i64* %3, align 8
  %18358 = inttoptr i64 %18356 to i32*
  %18359 = load i32, i32* %18358, align 4
  %18360 = zext i32 %18359 to i64
  store i64 %18360, i64* %R11.i, align 8
  %18361 = add i64 %18317, -100
  %18362 = add i64 %18319, 46
  store i64 %18362, i64* %3, align 8
  %18363 = inttoptr i64 %18361 to i32*
  %18364 = load i32, i32* %18363, align 4
  %18365 = zext i32 %18364 to i64
  store i64 %18365, i64* %RBX.i615, align 8
  %18366 = load i32*, i32** %2119, align 8
  %18367 = add i64 %18319, 49
  store i64 %18367, i64* %3, align 8
  store i32 %18349, i32* %18366, align 4
  %18368 = load i64, i64* %6, align 8
  %18369 = add i64 %18368, 8
  %18370 = load i32, i32* %R10D.i761, align 4
  %18371 = load i64, i64* %3, align 8
  %18372 = add i64 %18371, 5
  store i64 %18372, i64* %3, align 8
  %18373 = inttoptr i64 %18369 to i32*
  store i32 %18370, i32* %18373, align 4
  %18374 = load i64, i64* %6, align 8
  %18375 = add i64 %18374, 16
  %18376 = load i32, i32* %R11D.i5540, align 4
  %18377 = load i64, i64* %3, align 8
  %18378 = add i64 %18377, 5
  store i64 %18378, i64* %3, align 8
  %18379 = inttoptr i64 %18375 to i32*
  store i32 %18376, i32* %18379, align 4
  %18380 = load i64, i64* %6, align 8
  %18381 = add i64 %18380, 24
  %18382 = load i32, i32* %EBX.i5525, align 4
  %18383 = load i64, i64* %3, align 8
  %18384 = add i64 %18383, 4
  store i64 %18384, i64* %3, align 8
  %18385 = inttoptr i64 %18381 to i32*
  store i32 %18382, i32* %18385, align 4
  %18386 = load i64, i64* %3, align 8
  %18387 = add i64 %18386, -9741
  %18388 = add i64 %18386, 5
  %18389 = load i64, i64* %6, align 8
  %18390 = add i64 %18389, -8
  %18391 = inttoptr i64 %18390 to i64*
  store i64 %18388, i64* %18391, align 8
  store i64 %18390, i64* %6, align 8
  store i64 %18387, i64* %3, align 8
  %call2_422abd = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %18387, %struct.Memory* %17898)
  %18392 = load i64, i64* %RBP.i, align 8
  %18393 = add i64 %18392, -104
  %18394 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %18395 = load i64, i64* %3, align 8
  %18396 = add i64 %18395, 3
  store i64 %18396, i64* %3, align 8
  %18397 = inttoptr i64 %18393 to i32*
  store i32 %18394, i32* %18397, align 4
  %18398 = load i64, i64* %RBP.i, align 8
  %18399 = add i64 %18398, -104
  %18400 = load i64, i64* %3, align 8
  %18401 = add i64 %18400, 3
  store i64 %18401, i64* %3, align 8
  %18402 = inttoptr i64 %18399 to i32*
  %18403 = load i32, i32* %18402, align 4
  %18404 = zext i32 %18403 to i64
  store i64 %18404, i64* %RAX.i3587.phi.trans.insert, align 8
  %18405 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %18405, i64* %RDX.i4317.pre-phi, align 8
  %18406 = add i64 %18398, -100
  %18407 = add i64 %18400, 14
  store i64 %18407, i64* %3, align 8
  %18408 = inttoptr i64 %18406 to i32*
  %18409 = load i32, i32* %18408, align 4
  %18410 = zext i32 %18409 to i64
  store i64 %18410, i64* %RCX.i4260.pre-phi, align 8
  %18411 = add i64 %18398, -164
  %18412 = add i64 %18400, 20
  store i64 %18412, i64* %3, align 8
  %18413 = inttoptr i64 %18411 to i32*
  %18414 = load i32, i32* %18413, align 4
  %18415 = sub i32 %18409, %18414
  %18416 = zext i32 %18415 to i64
  store i64 %18416, i64* %RCX.i4260.pre-phi, align 8
  %18417 = icmp ult i32 %18409, %18414
  %18418 = zext i1 %18417 to i8
  store i8 %18418, i8* %32, align 1
  %18419 = and i32 %18415, 255
  %18420 = tail call i32 @llvm.ctpop.i32(i32 %18419)
  %18421 = trunc i32 %18420 to i8
  %18422 = and i8 %18421, 1
  %18423 = xor i8 %18422, 1
  store i8 %18423, i8* %39, align 1
  %18424 = xor i32 %18414, %18409
  %18425 = xor i32 %18424, %18415
  %18426 = lshr i32 %18425, 4
  %18427 = trunc i32 %18426 to i8
  %18428 = and i8 %18427, 1
  store i8 %18428, i8* %45, align 1
  %18429 = icmp eq i32 %18415, 0
  %18430 = zext i1 %18429 to i8
  store i8 %18430, i8* %48, align 1
  %18431 = lshr i32 %18415, 31
  %18432 = trunc i32 %18431 to i8
  store i8 %18432, i8* %51, align 1
  %18433 = lshr i32 %18409, 31
  %18434 = lshr i32 %18414, 31
  %18435 = xor i32 %18434, %18433
  %18436 = xor i32 %18431, %18433
  %18437 = add nuw nsw i32 %18436, %18435
  %18438 = icmp eq i32 %18437, 2
  %18439 = zext i1 %18438 to i8
  store i8 %18439, i8* %57, align 1
  %18440 = add i64 %18398, -76
  %18441 = add i64 %18400, 23
  store i64 %18441, i64* %3, align 8
  %18442 = inttoptr i64 %18440 to i32*
  %18443 = load i32, i32* %18442, align 4
  %18444 = add i32 %18443, %18415
  %18445 = zext i32 %18444 to i64
  store i64 %18445, i64* %RCX.i4260.pre-phi, align 8
  %18446 = icmp ult i32 %18444, %18415
  %18447 = icmp ult i32 %18444, %18443
  %18448 = or i1 %18446, %18447
  %18449 = zext i1 %18448 to i8
  store i8 %18449, i8* %32, align 1
  %18450 = and i32 %18444, 255
  %18451 = tail call i32 @llvm.ctpop.i32(i32 %18450)
  %18452 = trunc i32 %18451 to i8
  %18453 = and i8 %18452, 1
  %18454 = xor i8 %18453, 1
  store i8 %18454, i8* %39, align 1
  %18455 = xor i32 %18443, %18415
  %18456 = xor i32 %18455, %18444
  %18457 = lshr i32 %18456, 4
  %18458 = trunc i32 %18457 to i8
  %18459 = and i8 %18458, 1
  store i8 %18459, i8* %45, align 1
  %18460 = icmp eq i32 %18444, 0
  %18461 = zext i1 %18460 to i8
  store i8 %18461, i8* %48, align 1
  %18462 = lshr i32 %18444, 31
  %18463 = trunc i32 %18462 to i8
  store i8 %18463, i8* %51, align 1
  %18464 = lshr i32 %18443, 31
  %18465 = xor i32 %18462, %18431
  %18466 = xor i32 %18462, %18464
  %18467 = add nuw nsw i32 %18465, %18466
  %18468 = icmp eq i32 %18467, 2
  %18469 = zext i1 %18468 to i8
  store i8 %18469, i8* %57, align 1
  %18470 = sext i32 %18444 to i64
  store i64 %18470, i64* %RSI.i739, align 8
  %18471 = shl nsw i64 %18470, 3
  %18472 = add i64 %18405, %18471
  %18473 = add i64 %18400, 30
  store i64 %18473, i64* %3, align 8
  %18474 = inttoptr i64 %18472 to i64*
  %18475 = load i64, i64* %18474, align 8
  store i64 %18475, i64* %RDX.i4317.pre-phi, align 8
  %18476 = load i64, i64* %RBP.i, align 8
  %18477 = add i64 %18476, -96
  %18478 = add i64 %18400, 33
  store i64 %18478, i64* %3, align 8
  %18479 = inttoptr i64 %18477 to i32*
  %18480 = load i32, i32* %18479, align 4
  %18481 = zext i32 %18480 to i64
  store i64 %18481, i64* %RCX.i4260.pre-phi, align 8
  %18482 = add i64 %18476, -160
  %18483 = add i64 %18400, 39
  store i64 %18483, i64* %3, align 8
  %18484 = inttoptr i64 %18482 to i32*
  %18485 = load i32, i32* %18484, align 4
  %18486 = sub i32 %18480, %18485
  %18487 = zext i32 %18486 to i64
  store i64 %18487, i64* %RCX.i4260.pre-phi, align 8
  %18488 = icmp ult i32 %18480, %18485
  %18489 = zext i1 %18488 to i8
  store i8 %18489, i8* %32, align 1
  %18490 = and i32 %18486, 255
  %18491 = tail call i32 @llvm.ctpop.i32(i32 %18490)
  %18492 = trunc i32 %18491 to i8
  %18493 = and i8 %18492, 1
  %18494 = xor i8 %18493, 1
  store i8 %18494, i8* %39, align 1
  %18495 = xor i32 %18485, %18480
  %18496 = xor i32 %18495, %18486
  %18497 = lshr i32 %18496, 4
  %18498 = trunc i32 %18497 to i8
  %18499 = and i8 %18498, 1
  store i8 %18499, i8* %45, align 1
  %18500 = icmp eq i32 %18486, 0
  %18501 = zext i1 %18500 to i8
  store i8 %18501, i8* %48, align 1
  %18502 = lshr i32 %18486, 31
  %18503 = trunc i32 %18502 to i8
  store i8 %18503, i8* %51, align 1
  %18504 = lshr i32 %18480, 31
  %18505 = lshr i32 %18485, 31
  %18506 = xor i32 %18505, %18504
  %18507 = xor i32 %18502, %18504
  %18508 = add nuw nsw i32 %18507, %18506
  %18509 = icmp eq i32 %18508, 2
  %18510 = zext i1 %18509 to i8
  store i8 %18510, i8* %57, align 1
  %18511 = add i64 %18476, -76
  %18512 = add i64 %18400, 42
  store i64 %18512, i64* %3, align 8
  %18513 = inttoptr i64 %18511 to i32*
  %18514 = load i32, i32* %18513, align 4
  %18515 = add i32 %18514, %18486
  %18516 = zext i32 %18515 to i64
  store i64 %18516, i64* %RCX.i4260.pre-phi, align 8
  %18517 = icmp ult i32 %18515, %18486
  %18518 = icmp ult i32 %18515, %18514
  %18519 = or i1 %18517, %18518
  %18520 = zext i1 %18519 to i8
  store i8 %18520, i8* %32, align 1
  %18521 = and i32 %18515, 255
  %18522 = tail call i32 @llvm.ctpop.i32(i32 %18521)
  %18523 = trunc i32 %18522 to i8
  %18524 = and i8 %18523, 1
  %18525 = xor i8 %18524, 1
  store i8 %18525, i8* %39, align 1
  %18526 = xor i32 %18514, %18486
  %18527 = xor i32 %18526, %18515
  %18528 = lshr i32 %18527, 4
  %18529 = trunc i32 %18528 to i8
  %18530 = and i8 %18529, 1
  store i8 %18530, i8* %45, align 1
  %18531 = icmp eq i32 %18515, 0
  %18532 = zext i1 %18531 to i8
  store i8 %18532, i8* %48, align 1
  %18533 = lshr i32 %18515, 31
  %18534 = trunc i32 %18533 to i8
  store i8 %18534, i8* %51, align 1
  %18535 = lshr i32 %18514, 31
  %18536 = xor i32 %18533, %18502
  %18537 = xor i32 %18533, %18535
  %18538 = add nuw nsw i32 %18536, %18537
  %18539 = icmp eq i32 %18538, 2
  %18540 = zext i1 %18539 to i8
  store i8 %18540, i8* %57, align 1
  %18541 = sext i32 %18515 to i64
  store i64 %18541, i64* %RSI.i739, align 8
  %18542 = shl nsw i64 %18541, 2
  %18543 = add i64 %18475, %18542
  %18544 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %18545 = add i64 %18400, 48
  store i64 %18545, i64* %3, align 8
  %18546 = inttoptr i64 %18543 to i32*
  store i32 %18544, i32* %18546, align 4
  %18547 = load i64, i64* %RBP.i, align 8
  %18548 = add i64 %18547, -104
  %18549 = load i64, i64* %3, align 8
  %18550 = add i64 %18549, 3
  store i64 %18550, i64* %3, align 8
  %18551 = inttoptr i64 %18548 to i32*
  %18552 = load i32, i32* %18551, align 4
  %18553 = zext i32 %18552 to i64
  store i64 %18553, i64* %RAX.i3587.phi.trans.insert, align 8
  %18554 = add i64 %18547, -80
  %18555 = add i64 %18549, 6
  store i64 %18555, i64* %3, align 8
  %18556 = inttoptr i64 %18554 to i32*
  %18557 = load i32, i32* %18556, align 4
  %18558 = sub i32 %18552, %18557
  %18559 = icmp ult i32 %18552, %18557
  %18560 = zext i1 %18559 to i8
  store i8 %18560, i8* %32, align 1
  %18561 = and i32 %18558, 255
  %18562 = tail call i32 @llvm.ctpop.i32(i32 %18561)
  %18563 = trunc i32 %18562 to i8
  %18564 = and i8 %18563, 1
  %18565 = xor i8 %18564, 1
  store i8 %18565, i8* %39, align 1
  %18566 = xor i32 %18557, %18552
  %18567 = xor i32 %18566, %18558
  %18568 = lshr i32 %18567, 4
  %18569 = trunc i32 %18568 to i8
  %18570 = and i8 %18569, 1
  store i8 %18570, i8* %45, align 1
  %18571 = icmp eq i32 %18558, 0
  %18572 = zext i1 %18571 to i8
  store i8 %18572, i8* %48, align 1
  %18573 = lshr i32 %18558, 31
  %18574 = trunc i32 %18573 to i8
  store i8 %18574, i8* %51, align 1
  %18575 = lshr i32 %18552, 31
  %18576 = lshr i32 %18557, 31
  %18577 = xor i32 %18576, %18575
  %18578 = xor i32 %18573, %18575
  %18579 = add nuw nsw i32 %18578, %18577
  %18580 = icmp eq i32 %18579, 2
  %18581 = zext i1 %18580 to i8
  store i8 %18581, i8* %57, align 1
  %18582 = icmp ne i8 %18574, 0
  %18583 = xor i1 %18582, %18580
  %.v551 = select i1 %18583, i64 12, i64 46
  %18584 = add i64 %18549, %.v551
  store i64 %18584, i64* %3, align 8
  br i1 %18583, label %block_422b01, label %block_.L_422b23

block_422b01:                                     ; preds = %routine_shll__cl___esi.exit975
  %18585 = add i64 %18547, -96
  %18586 = add i64 %18584, 3
  store i64 %18586, i64* %3, align 8
  %18587 = inttoptr i64 %18585 to i32*
  %18588 = load i32, i32* %18587, align 4
  %18589 = zext i32 %18588 to i64
  store i64 %18589, i64* %RAX.i3587.phi.trans.insert, align 8
  %18590 = add i64 %18547, -168
  %18591 = add i64 %18584, 9
  store i64 %18591, i64* %3, align 8
  %18592 = inttoptr i64 %18590 to i32*
  store i32 %18588, i32* %18592, align 4
  %18593 = load i64, i64* %RBP.i, align 8
  %18594 = add i64 %18593, -100
  %18595 = load i64, i64* %3, align 8
  %18596 = add i64 %18595, 3
  store i64 %18596, i64* %3, align 8
  %18597 = inttoptr i64 %18594 to i32*
  %18598 = load i32, i32* %18597, align 4
  %18599 = zext i32 %18598 to i64
  store i64 %18599, i64* %RAX.i3587.phi.trans.insert, align 8
  %18600 = add i64 %18593, -172
  %18601 = add i64 %18595, 9
  store i64 %18601, i64* %3, align 8
  %18602 = inttoptr i64 %18600 to i32*
  store i32 %18598, i32* %18602, align 4
  %18603 = load i64, i64* %RBP.i, align 8
  %18604 = add i64 %18603, -104
  %18605 = load i64, i64* %3, align 8
  %18606 = add i64 %18605, 3
  store i64 %18606, i64* %3, align 8
  %18607 = inttoptr i64 %18604 to i32*
  %18608 = load i32, i32* %18607, align 4
  %18609 = zext i32 %18608 to i64
  store i64 %18609, i64* %RAX.i3587.phi.trans.insert, align 8
  %18610 = add i64 %18603, -80
  %18611 = add i64 %18605, 6
  store i64 %18611, i64* %3, align 8
  %18612 = inttoptr i64 %18610 to i32*
  store i32 %18608, i32* %18612, align 4
  %18613 = load i64, i64* %RBP.i, align 8
  %18614 = add i64 %18613, -200
  %18615 = load i64, i64* %3, align 8
  %18616 = add i64 %18615, 10
  store i64 %18616, i64* %3, align 8
  %18617 = inttoptr i64 %18614 to i32*
  store i32 1, i32* %18617, align 4
  %.pre392 = load i64, i64* %3, align 8
  br label %block_.L_422b23

block_.L_422b23:                                  ; preds = %routine_shll__cl___esi.exit975, %block_422b01
  %18618 = phi i64 [ %18584, %routine_shll__cl___esi.exit975 ], [ %.pre392, %block_422b01 ]
  %18619 = add i64 %18618, 5
  store i64 %18619, i64* %3, align 8
  br label %block_.L_422b28

block_.L_422b28:                                  ; preds = %block_4229eb, %block_.L_422b23
  %18620 = phi i64 [ %18082, %block_4229eb ], [ %18619, %block_.L_422b23 ]
  %MEMORY.79 = phi %struct.Memory* [ %17898, %block_4229eb ], [ %call2_422abd, %block_.L_422b23 ]
  %18621 = add i64 %18620, 5
  store i64 %18621, i64* %3, align 8
  %.pre393 = load i64, i64* %RBP.i, align 8
  br label %block_.L_422b2d

block_.L_422b2d:                                  ; preds = %block_4229d2, %block_422979, %block_.L_422b28
  %18622 = phi i64 [ %17826, %block_422979 ], [ %17900, %block_4229d2 ], [ %.pre393, %block_.L_422b28 ]
  %18623 = phi i64 [ %17858, %block_422979 ], [ %17932, %block_4229d2 ], [ %18621, %block_.L_422b28 ]
  %MEMORY.80 = phi %struct.Memory* [ %17824, %block_422979 ], [ %17898, %block_4229d2 ], [ %MEMORY.79, %block_.L_422b28 ]
  %18624 = add i64 %18622, -192
  %18625 = add i64 %18623, 11
  store i64 %18625, i64* %3, align 8
  %18626 = inttoptr i64 %18624 to i32*
  %18627 = load i32, i32* %18626, align 4
  %18628 = add i32 %18627, 1
  %18629 = zext i32 %18628 to i64
  store i64 %18629, i64* %RAX.i3587.phi.trans.insert, align 8
  %18630 = icmp eq i32 %18627, -1
  %18631 = icmp eq i32 %18628, 0
  %18632 = or i1 %18630, %18631
  %18633 = zext i1 %18632 to i8
  store i8 %18633, i8* %32, align 1
  %18634 = and i32 %18628, 255
  %18635 = tail call i32 @llvm.ctpop.i32(i32 %18634)
  %18636 = trunc i32 %18635 to i8
  %18637 = and i8 %18636, 1
  %18638 = xor i8 %18637, 1
  store i8 %18638, i8* %39, align 1
  %18639 = xor i32 %18628, %18627
  %18640 = lshr i32 %18639, 4
  %18641 = trunc i32 %18640 to i8
  %18642 = and i8 %18641, 1
  store i8 %18642, i8* %45, align 1
  %18643 = zext i1 %18631 to i8
  store i8 %18643, i8* %48, align 1
  %18644 = lshr i32 %18628, 31
  %18645 = trunc i32 %18644 to i8
  store i8 %18645, i8* %51, align 1
  %18646 = lshr i32 %18627, 31
  %18647 = xor i32 %18644, %18646
  %18648 = add nuw nsw i32 %18647, %18644
  %18649 = icmp eq i32 %18648, 2
  %18650 = zext i1 %18649 to i8
  store i8 %18650, i8* %57, align 1
  %18651 = add i64 %18623, 20
  store i64 %18651, i64* %3, align 8
  store i32 %18628, i32* %18626, align 4
  %18652 = load i64, i64* %3, align 8
  %18653 = add i64 %18652, -469
  store i64 %18653, i64* %3, align 8
  br label %block_.L_42296c

block_.L_422b46:                                  ; preds = %block_.L_42296c
  %18654 = add i64 %17641, -200
  %18655 = add i64 %17670, 7
  store i64 %18655, i64* %3, align 8
  %18656 = inttoptr i64 %18654 to i32*
  %18657 = load i32, i32* %18656, align 4
  store i8 0, i8* %32, align 1
  %18658 = and i32 %18657, 255
  %18659 = tail call i32 @llvm.ctpop.i32(i32 %18658)
  %18660 = trunc i32 %18659 to i8
  %18661 = and i8 %18660, 1
  %18662 = xor i8 %18661, 1
  store i8 %18662, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %18663 = icmp eq i32 %18657, 0
  %18664 = zext i1 %18663 to i8
  store i8 %18664, i8* %48, align 1
  %18665 = lshr i32 %18657, 31
  %18666 = trunc i32 %18665 to i8
  store i8 %18666, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v474 = select i1 %18663, i64 346, i64 13
  %18667 = add i64 %17670, %.v474
  store i64 %18667, i64* %3, align 8
  br i1 %18663, label %block_.L_422ca0, label %block_422b53

block_422b53:                                     ; preds = %block_.L_422b46
  %18668 = add i64 %17641, -34
  %18669 = add i64 %18667, 4
  store i64 %18669, i64* %3, align 8
  %18670 = inttoptr i64 %18668 to i16*
  %18671 = load i16, i16* %18670, align 2
  %18672 = sext i16 %18671 to i64
  %18673 = and i64 %18672, 4294967295
  store i64 %18673, i64* %RAX.i3587.phi.trans.insert, align 8
  %18674 = sext i16 %18671 to i32
  store i8 0, i8* %32, align 1
  %18675 = and i32 %18674, 255
  %18676 = tail call i32 @llvm.ctpop.i32(i32 %18675)
  %18677 = trunc i32 %18676 to i8
  %18678 = and i8 %18677, 1
  %18679 = xor i8 %18678, 1
  store i8 %18679, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %18680 = icmp eq i16 %18671, 0
  %18681 = zext i1 %18680 to i8
  store i8 %18681, i8* %48, align 1
  %18682 = lshr i32 %18674, 31
  %18683 = trunc i32 %18682 to i8
  store i8 %18683, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %18684 = icmp ne i8 %18683, 0
  %18685 = or i1 %18680, %18684
  %.v473 = select i1 %18685, i64 113, i64 13
  %18686 = add i64 %18667, %.v473
  store i64 %18686, i64* %3, align 8
  br i1 %18685, label %block_.L_422bc4, label %block_422b60

block_422b60:                                     ; preds = %block_422b53
  %18687 = add i64 %17641, -80
  %18688 = add i64 %18686, 3
  store i64 %18688, i64* %3, align 8
  %18689 = inttoptr i64 %18687 to i32*
  %18690 = load i32, i32* %18689, align 4
  %18691 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %18692 = sub i32 %18690, %18691
  %18693 = zext i32 %18692 to i64
  store i64 %18693, i64* %RAX.i3587.phi.trans.insert, align 8
  %18694 = icmp ult i32 %18690, %18691
  %18695 = zext i1 %18694 to i8
  store i8 %18695, i8* %32, align 1
  %18696 = and i32 %18692, 255
  %18697 = tail call i32 @llvm.ctpop.i32(i32 %18696)
  %18698 = trunc i32 %18697 to i8
  %18699 = and i8 %18698, 1
  %18700 = xor i8 %18699, 1
  store i8 %18700, i8* %39, align 1
  %18701 = xor i32 %18691, %18690
  %18702 = xor i32 %18701, %18692
  %18703 = lshr i32 %18702, 4
  %18704 = trunc i32 %18703 to i8
  %18705 = and i8 %18704, 1
  store i8 %18705, i8* %45, align 1
  %18706 = icmp eq i32 %18692, 0
  %18707 = zext i1 %18706 to i8
  store i8 %18707, i8* %48, align 1
  %18708 = lshr i32 %18692, 31
  %18709 = trunc i32 %18708 to i8
  store i8 %18709, i8* %51, align 1
  %18710 = lshr i32 %18690, 31
  %18711 = lshr i32 %18691, 31
  %18712 = xor i32 %18711, %18710
  %18713 = xor i32 %18708, %18710
  %18714 = add nuw nsw i32 %18713, %18712
  %18715 = icmp eq i32 %18714, 2
  %18716 = zext i1 %18715 to i8
  store i8 %18716, i8* %57, align 1
  %18717 = add i64 %18686, 14
  store i64 %18717, i64* %3, align 8
  %18718 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %18719 = load <2 x i32>, <2 x i32>* %.pre-phi414, align 1
  %18720 = sitofp i32 %18692 to float
  store float %18720, float* %.pre-phi416, align 1
  %18721 = extractelement <2 x i32> %18718, i32 1
  store i32 %18721, i32* %.pre-phi420, align 1
  %18722 = extractelement <2 x i32> %18719, i32 0
  store i32 %18722, i32* %.pre-phi422, align 1
  %18723 = extractelement <2 x i32> %18719, i32 1
  store i32 %18723, i32* %.pre-phi426, align 1
  %18724 = add i64 %18686, 23
  store i64 %18724, i64* %3, align 8
  %18725 = load <2 x i32>, <2 x i32>* %.pre-phi428, align 1
  %18726 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %18727 = sitofp i32 %18691 to float
  store float %18727, float* %.pre-phi432, align 1
  %18728 = extractelement <2 x i32> %18725, i32 1
  store i32 %18728, i32* %.pre-phi436, align 1
  %18729 = extractelement <2 x i32> %18726, i32 0
  store i32 %18729, i32* %.pre-phi438, align 1
  %18730 = extractelement <2 x i32> %18726, i32 1
  store i32 %18730, i32* %.pre-phi442, align 1
  %18731 = add i64 %17641, -212
  %18732 = add i64 %18686, 31
  store i64 %18732, i64* %3, align 8
  %18733 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %18734 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %18735 = inttoptr i64 %18731 to float*
  %18736 = load float, float* %18735, align 4
  %18737 = extractelement <2 x float> %18733, i32 0
  %18738 = fmul float %18737, %18736
  store float %18738, float* %.pre-phi432, align 1
  %18739 = bitcast <2 x float> %18733 to <2 x i32>
  %18740 = extractelement <2 x i32> %18739, i32 1
  store i32 %18740, i32* %.pre-phi436, align 1
  %18741 = extractelement <2 x i32> %18734, i32 0
  store i32 %18741, i32* %.pre-phi438, align 1
  %18742 = extractelement <2 x i32> %18734, i32 1
  store i32 %18742, i32* %.pre-phi442, align 1
  %18743 = add i64 %18686, 34
  store i64 %18743, i64* %3, align 8
  %18744 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %18745 = extractelement <2 x float> %18744, i32 0
  %18746 = load <2 x float>, <2 x float>* %.pre-phi446, align 1
  %18747 = extractelement <2 x float> %18746, i32 0
  %18748 = fcmp uno float %18745, %18747
  br i1 %18748, label %18749, label %18759

; <label>:18749:                                  ; preds = %block_422b60
  %18750 = fadd float %18745, %18747
  %18751 = bitcast float %18750 to i32
  %18752 = and i32 %18751, 2143289344
  %18753 = icmp eq i32 %18752, 2139095040
  %18754 = and i32 %18751, 4194303
  %18755 = icmp ne i32 %18754, 0
  %18756 = and i1 %18753, %18755
  br i1 %18756, label %18757, label %18765

; <label>:18757:                                  ; preds = %18749
  %18758 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %18743, %struct.Memory* %MEMORY.77)
  %.pre373 = load i64, i64* %3, align 8
  %.pre374 = load i8, i8* %32, align 1
  %.pre375 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit807

; <label>:18759:                                  ; preds = %block_422b60
  %18760 = fcmp ogt float %18745, %18747
  br i1 %18760, label %18765, label %18761

; <label>:18761:                                  ; preds = %18759
  %18762 = fcmp olt float %18745, %18747
  br i1 %18762, label %18765, label %18763

; <label>:18763:                                  ; preds = %18761
  %18764 = fcmp oeq float %18745, %18747
  br i1 %18764, label %18765, label %18769

; <label>:18765:                                  ; preds = %18763, %18761, %18759, %18749
  %18766 = phi i8 [ 0, %18759 ], [ 0, %18761 ], [ 1, %18763 ], [ 1, %18749 ]
  %18767 = phi i8 [ 0, %18759 ], [ 0, %18761 ], [ 0, %18763 ], [ 1, %18749 ]
  %18768 = phi i8 [ 0, %18759 ], [ 1, %18761 ], [ 0, %18763 ], [ 1, %18749 ]
  store i8 %18766, i8* %48, align 1
  store i8 %18767, i8* %39, align 1
  store i8 %18768, i8* %32, align 1
  br label %18769

; <label>:18769:                                  ; preds = %18765, %18763
  %18770 = phi i8 [ %18766, %18765 ], [ %18707, %18763 ]
  %18771 = phi i8 [ %18768, %18765 ], [ %18695, %18763 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit807

routine_ucomiss__xmm0___xmm1.exit807:             ; preds = %18769, %18757
  %18772 = phi i8 [ %.pre375, %18757 ], [ %18770, %18769 ]
  %18773 = phi i8 [ %.pre374, %18757 ], [ %18771, %18769 ]
  %18774 = phi i64 [ %.pre373, %18757 ], [ %18743, %18769 ]
  %18775 = phi %struct.Memory* [ %18758, %18757 ], [ %MEMORY.77, %18769 ]
  %18776 = or i8 %18772, %18773
  %18777 = icmp ne i8 %18776, 0
  %.v542 = select i1 %18777, i64 11, i64 6
  %18778 = add i64 %18774, %.v542
  store i64 %18778, i64* %3, align 8
  br i1 %18777, label %block_.L_422b8d, label %block_.L_422f0e.loopexit721

block_.L_422b8d:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit807
  %18779 = load i64, i64* %RBP.i, align 8
  %18780 = add i64 %18779, -80
  %18781 = add i64 %18778, 3
  store i64 %18781, i64* %3, align 8
  %18782 = inttoptr i64 %18780 to i32*
  %18783 = load i32, i32* %18782, align 4
  %18784 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %18785 = sub i32 %18783, %18784
  %18786 = zext i32 %18785 to i64
  store i64 %18786, i64* %RAX.i3587.phi.trans.insert, align 8
  %18787 = icmp ult i32 %18783, %18784
  %18788 = zext i1 %18787 to i8
  store i8 %18788, i8* %32, align 1
  %18789 = and i32 %18785, 255
  %18790 = tail call i32 @llvm.ctpop.i32(i32 %18789)
  %18791 = trunc i32 %18790 to i8
  %18792 = and i8 %18791, 1
  %18793 = xor i8 %18792, 1
  store i8 %18793, i8* %39, align 1
  %18794 = xor i32 %18784, %18783
  %18795 = xor i32 %18794, %18785
  %18796 = lshr i32 %18795, 4
  %18797 = trunc i32 %18796 to i8
  %18798 = and i8 %18797, 1
  store i8 %18798, i8* %45, align 1
  %18799 = icmp eq i32 %18785, 0
  %18800 = zext i1 %18799 to i8
  store i8 %18800, i8* %48, align 1
  %18801 = lshr i32 %18785, 31
  %18802 = trunc i32 %18801 to i8
  store i8 %18802, i8* %51, align 1
  %18803 = lshr i32 %18783, 31
  %18804 = lshr i32 %18784, 31
  %18805 = xor i32 %18804, %18803
  %18806 = xor i32 %18801, %18803
  %18807 = add nuw nsw i32 %18806, %18805
  %18808 = icmp eq i32 %18807, 2
  %18809 = zext i1 %18808 to i8
  store i8 %18809, i8* %57, align 1
  %18810 = add i64 %18778, 14
  store i64 %18810, i64* %3, align 8
  %18811 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %18812 = load <2 x i32>, <2 x i32>* %.pre-phi414, align 1
  %18813 = sitofp i32 %18785 to float
  store float %18813, float* %.pre-phi416, align 1
  %18814 = extractelement <2 x i32> %18811, i32 1
  store i32 %18814, i32* %.pre-phi420, align 1
  %18815 = extractelement <2 x i32> %18812, i32 0
  store i32 %18815, i32* %.pre-phi422, align 1
  %18816 = extractelement <2 x i32> %18812, i32 1
  store i32 %18816, i32* %.pre-phi426, align 1
  %18817 = add i64 %18778, 23
  store i64 %18817, i64* %3, align 8
  %18818 = load <2 x i32>, <2 x i32>* %.pre-phi428, align 1
  %18819 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %18820 = sitofp i32 %18784 to float
  store float %18820, float* %.pre-phi432, align 1
  %18821 = extractelement <2 x i32> %18818, i32 1
  store i32 %18821, i32* %.pre-phi436, align 1
  %18822 = extractelement <2 x i32> %18819, i32 0
  store i32 %18822, i32* %.pre-phi438, align 1
  %18823 = extractelement <2 x i32> %18819, i32 1
  store i32 %18823, i32* %.pre-phi442, align 1
  %18824 = add i64 %18779, -208
  %18825 = add i64 %18778, 31
  store i64 %18825, i64* %3, align 8
  %18826 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %18827 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %18828 = inttoptr i64 %18824 to float*
  %18829 = load float, float* %18828, align 4
  %18830 = extractelement <2 x float> %18826, i32 0
  %18831 = fmul float %18830, %18829
  store float %18831, float* %.pre-phi432, align 1
  %18832 = bitcast <2 x float> %18826 to <2 x i32>
  %18833 = extractelement <2 x i32> %18832, i32 1
  store i32 %18833, i32* %.pre-phi436, align 1
  %18834 = extractelement <2 x i32> %18827, i32 0
  store i32 %18834, i32* %.pre-phi438, align 1
  %18835 = extractelement <2 x i32> %18827, i32 1
  store i32 %18835, i32* %.pre-phi442, align 1
  %18836 = add i64 %18778, 34
  store i64 %18836, i64* %3, align 8
  %18837 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %18838 = extractelement <2 x float> %18837, i32 0
  %18839 = load <2 x float>, <2 x float>* %.pre-phi446, align 1
  %18840 = extractelement <2 x float> %18839, i32 0
  %18841 = fcmp uno float %18838, %18840
  br i1 %18841, label %18842, label %18852

; <label>:18842:                                  ; preds = %block_.L_422b8d
  %18843 = fadd float %18838, %18840
  %18844 = bitcast float %18843 to i32
  %18845 = and i32 %18844, 2143289344
  %18846 = icmp eq i32 %18845, 2139095040
  %18847 = and i32 %18844, 4194303
  %18848 = icmp ne i32 %18847, 0
  %18849 = and i1 %18846, %18848
  br i1 %18849, label %18850, label %18858

; <label>:18850:                                  ; preds = %18842
  %18851 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %18836, %struct.Memory* %18775)
  %.pre376 = load i64, i64* %3, align 8
  %.pre377 = load i8, i8* %32, align 1
  %.pre378 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit786

; <label>:18852:                                  ; preds = %block_.L_422b8d
  %18853 = fcmp ogt float %18838, %18840
  br i1 %18853, label %18858, label %18854

; <label>:18854:                                  ; preds = %18852
  %18855 = fcmp olt float %18838, %18840
  br i1 %18855, label %18858, label %18856

; <label>:18856:                                  ; preds = %18854
  %18857 = fcmp oeq float %18838, %18840
  br i1 %18857, label %18858, label %18862

; <label>:18858:                                  ; preds = %18856, %18854, %18852, %18842
  %18859 = phi i8 [ 0, %18852 ], [ 0, %18854 ], [ 1, %18856 ], [ 1, %18842 ]
  %18860 = phi i8 [ 0, %18852 ], [ 0, %18854 ], [ 0, %18856 ], [ 1, %18842 ]
  %18861 = phi i8 [ 0, %18852 ], [ 1, %18854 ], [ 0, %18856 ], [ 1, %18842 ]
  store i8 %18859, i8* %48, align 1
  store i8 %18860, i8* %39, align 1
  store i8 %18861, i8* %32, align 1
  br label %18862

; <label>:18862:                                  ; preds = %18858, %18856
  %18863 = phi i8 [ %18859, %18858 ], [ %18800, %18856 ]
  %18864 = phi i8 [ %18861, %18858 ], [ %18788, %18856 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit786

routine_ucomiss__xmm0___xmm1.exit786:             ; preds = %18862, %18850
  %18865 = phi i8 [ %.pre378, %18850 ], [ %18863, %18862 ]
  %18866 = phi i8 [ %.pre377, %18850 ], [ %18864, %18862 ]
  %18867 = phi i64 [ %.pre376, %18850 ], [ %18836, %18862 ]
  %18868 = phi %struct.Memory* [ %18851, %18850 ], [ %18775, %18862 ]
  %18869 = or i8 %18865, %18866
  %18870 = icmp ne i8 %18869, 0
  %.v543 = select i1 %18870, i64 11, i64 6
  %18871 = add i64 %18867, %.v543
  store i64 %18871, i64* %3, align 8
  br i1 %18870, label %block_.L_422bba, label %block_422bb5

block_422bb5:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit786
  %18872 = add i64 %18871, 265
  br label %block_.L_422cbe

block_.L_422bba:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit786
  %18873 = add i64 %18871, 225
  br label %block_.L_422c9b

block_.L_422bc4:                                  ; preds = %block_422b53
  %18874 = add i64 %17641, -52
  %18875 = add i64 %18686, 4
  store i64 %18875, i64* %3, align 8
  %18876 = inttoptr i64 %18874 to i32*
  %18877 = load i32, i32* %18876, align 4
  %18878 = add i32 %18877, -1
  %18879 = icmp eq i32 %18877, 0
  %18880 = zext i1 %18879 to i8
  store i8 %18880, i8* %32, align 1
  %18881 = and i32 %18878, 255
  %18882 = tail call i32 @llvm.ctpop.i32(i32 %18881)
  %18883 = trunc i32 %18882 to i8
  %18884 = and i8 %18883, 1
  %18885 = xor i8 %18884, 1
  store i8 %18885, i8* %39, align 1
  %18886 = xor i32 %18878, %18877
  %18887 = lshr i32 %18886, 4
  %18888 = trunc i32 %18887 to i8
  %18889 = and i8 %18888, 1
  store i8 %18889, i8* %45, align 1
  %18890 = icmp eq i32 %18878, 0
  %18891 = zext i1 %18890 to i8
  store i8 %18891, i8* %48, align 1
  %18892 = lshr i32 %18878, 31
  %18893 = trunc i32 %18892 to i8
  store i8 %18893, i8* %51, align 1
  %18894 = lshr i32 %18877, 31
  %18895 = xor i32 %18892, %18894
  %18896 = add nuw nsw i32 %18895, %18894
  %18897 = icmp eq i32 %18896, 2
  %18898 = zext i1 %18897 to i8
  store i8 %18898, i8* %57, align 1
  %18899 = icmp ne i8 %18893, 0
  %18900 = xor i1 %18899, %18897
  %18901 = or i1 %18890, %18900
  %.v472 = select i1 %18901, i64 110, i64 10
  %18902 = add i64 %18686, %.v472
  %18903 = add i64 %17641, -80
  %18904 = add i64 %18902, 3
  store i64 %18904, i64* %3, align 8
  %18905 = inttoptr i64 %18903 to i32*
  %18906 = load i32, i32* %18905, align 4
  %18907 = zext i32 %18906 to i64
  store i64 %18907, i64* %RAX.i3587.phi.trans.insert, align 8
  %18908 = add i64 %18902, 10
  store i64 %18908, i64* %3, align 8
  br i1 %18901, label %block_.L_422c32, label %block_422bce

block_422bce:                                     ; preds = %block_.L_422bc4
  %18909 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %18910 = sub i32 %18906, %18909
  %18911 = zext i32 %18910 to i64
  store i64 %18911, i64* %RAX.i3587.phi.trans.insert, align 8
  %18912 = icmp ult i32 %18906, %18909
  %18913 = zext i1 %18912 to i8
  store i8 %18913, i8* %32, align 1
  %18914 = and i32 %18910, 255
  %18915 = tail call i32 @llvm.ctpop.i32(i32 %18914)
  %18916 = trunc i32 %18915 to i8
  %18917 = and i8 %18916, 1
  %18918 = xor i8 %18917, 1
  store i8 %18918, i8* %39, align 1
  %18919 = xor i32 %18909, %18906
  %18920 = xor i32 %18919, %18910
  %18921 = lshr i32 %18920, 4
  %18922 = trunc i32 %18921 to i8
  %18923 = and i8 %18922, 1
  store i8 %18923, i8* %45, align 1
  %18924 = icmp eq i32 %18910, 0
  %18925 = zext i1 %18924 to i8
  store i8 %18925, i8* %48, align 1
  %18926 = lshr i32 %18910, 31
  %18927 = trunc i32 %18926 to i8
  store i8 %18927, i8* %51, align 1
  %18928 = lshr i32 %18906, 31
  %18929 = lshr i32 %18909, 31
  %18930 = xor i32 %18929, %18928
  %18931 = xor i32 %18926, %18928
  %18932 = add nuw nsw i32 %18931, %18930
  %18933 = icmp eq i32 %18932, 2
  %18934 = zext i1 %18933 to i8
  store i8 %18934, i8* %57, align 1
  %18935 = add i64 %18902, 14
  store i64 %18935, i64* %3, align 8
  %18936 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %18937 = load <2 x i32>, <2 x i32>* %.pre-phi414, align 1
  %18938 = sitofp i32 %18910 to float
  store float %18938, float* %.pre-phi416, align 1
  %18939 = extractelement <2 x i32> %18936, i32 1
  store i32 %18939, i32* %.pre-phi420, align 1
  %18940 = extractelement <2 x i32> %18937, i32 0
  store i32 %18940, i32* %.pre-phi422, align 1
  %18941 = extractelement <2 x i32> %18937, i32 1
  store i32 %18941, i32* %.pre-phi426, align 1
  %18942 = add i64 %18902, 23
  store i64 %18942, i64* %3, align 8
  %18943 = load <2 x i32>, <2 x i32>* %.pre-phi428, align 1
  %18944 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %18945 = sitofp i32 %18909 to float
  store float %18945, float* %.pre-phi432, align 1
  %18946 = extractelement <2 x i32> %18943, i32 1
  store i32 %18946, i32* %.pre-phi436, align 1
  %18947 = extractelement <2 x i32> %18944, i32 0
  store i32 %18947, i32* %.pre-phi438, align 1
  %18948 = extractelement <2 x i32> %18944, i32 1
  store i32 %18948, i32* %.pre-phi442, align 1
  %18949 = add i64 %17641, -212
  %18950 = add i64 %18902, 31
  store i64 %18950, i64* %3, align 8
  %18951 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %18952 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %18953 = inttoptr i64 %18949 to float*
  %18954 = load float, float* %18953, align 4
  %18955 = extractelement <2 x float> %18951, i32 0
  %18956 = fmul float %18955, %18954
  store float %18956, float* %.pre-phi432, align 1
  %18957 = bitcast <2 x float> %18951 to <2 x i32>
  %18958 = extractelement <2 x i32> %18957, i32 1
  store i32 %18958, i32* %.pre-phi436, align 1
  %18959 = extractelement <2 x i32> %18952, i32 0
  store i32 %18959, i32* %.pre-phi438, align 1
  %18960 = extractelement <2 x i32> %18952, i32 1
  store i32 %18960, i32* %.pre-phi442, align 1
  %18961 = add i64 %18902, 34
  store i64 %18961, i64* %3, align 8
  %18962 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %18963 = extractelement <2 x float> %18962, i32 0
  %18964 = load <2 x float>, <2 x float>* %.pre-phi446, align 1
  %18965 = extractelement <2 x float> %18964, i32 0
  %18966 = fcmp uno float %18963, %18965
  br i1 %18966, label %18967, label %18977

; <label>:18967:                                  ; preds = %block_422bce
  %18968 = fadd float %18963, %18965
  %18969 = bitcast float %18968 to i32
  %18970 = and i32 %18969, 2143289344
  %18971 = icmp eq i32 %18970, 2139095040
  %18972 = and i32 %18969, 4194303
  %18973 = icmp ne i32 %18972, 0
  %18974 = and i1 %18971, %18973
  br i1 %18974, label %18975, label %18983

; <label>:18975:                                  ; preds = %18967
  %18976 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %18961, %struct.Memory* %MEMORY.77)
  %.pre379 = load i64, i64* %3, align 8
  %.pre380 = load i8, i8* %32, align 1
  %.pre381 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit759

; <label>:18977:                                  ; preds = %block_422bce
  %18978 = fcmp ogt float %18963, %18965
  br i1 %18978, label %18983, label %18979

; <label>:18979:                                  ; preds = %18977
  %18980 = fcmp olt float %18963, %18965
  br i1 %18980, label %18983, label %18981

; <label>:18981:                                  ; preds = %18979
  %18982 = fcmp oeq float %18963, %18965
  br i1 %18982, label %18983, label %18987

; <label>:18983:                                  ; preds = %18981, %18979, %18977, %18967
  %18984 = phi i8 [ 0, %18977 ], [ 0, %18979 ], [ 1, %18981 ], [ 1, %18967 ]
  %18985 = phi i8 [ 0, %18977 ], [ 0, %18979 ], [ 0, %18981 ], [ 1, %18967 ]
  %18986 = phi i8 [ 0, %18977 ], [ 1, %18979 ], [ 0, %18981 ], [ 1, %18967 ]
  store i8 %18984, i8* %48, align 1
  store i8 %18985, i8* %39, align 1
  store i8 %18986, i8* %32, align 1
  br label %18987

; <label>:18987:                                  ; preds = %18983, %18981
  %18988 = phi i8 [ %18984, %18983 ], [ %18925, %18981 ]
  %18989 = phi i8 [ %18986, %18983 ], [ %18913, %18981 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit759

routine_ucomiss__xmm0___xmm1.exit759:             ; preds = %18987, %18975
  %18990 = phi i8 [ %.pre381, %18975 ], [ %18988, %18987 ]
  %18991 = phi i8 [ %.pre380, %18975 ], [ %18989, %18987 ]
  %18992 = phi i64 [ %.pre379, %18975 ], [ %18961, %18987 ]
  %18993 = phi %struct.Memory* [ %18976, %18975 ], [ %MEMORY.77, %18987 ]
  %18994 = or i8 %18990, %18991
  %18995 = icmp ne i8 %18994, 0
  %.v544 = select i1 %18995, i64 11, i64 6
  %18996 = add i64 %18992, %.v544
  store i64 %18996, i64* %3, align 8
  br i1 %18995, label %block_.L_422bfb, label %block_.L_422f0e.loopexit721

block_.L_422bfb:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit759
  %18997 = load i64, i64* %RBP.i, align 8
  %18998 = add i64 %18997, -80
  %18999 = add i64 %18996, 3
  store i64 %18999, i64* %3, align 8
  %19000 = inttoptr i64 %18998 to i32*
  %19001 = load i32, i32* %19000, align 4
  %19002 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %19003 = sub i32 %19001, %19002
  %19004 = zext i32 %19003 to i64
  store i64 %19004, i64* %RAX.i3587.phi.trans.insert, align 8
  %19005 = icmp ult i32 %19001, %19002
  %19006 = zext i1 %19005 to i8
  store i8 %19006, i8* %32, align 1
  %19007 = and i32 %19003, 255
  %19008 = tail call i32 @llvm.ctpop.i32(i32 %19007)
  %19009 = trunc i32 %19008 to i8
  %19010 = and i8 %19009, 1
  %19011 = xor i8 %19010, 1
  store i8 %19011, i8* %39, align 1
  %19012 = xor i32 %19002, %19001
  %19013 = xor i32 %19012, %19003
  %19014 = lshr i32 %19013, 4
  %19015 = trunc i32 %19014 to i8
  %19016 = and i8 %19015, 1
  store i8 %19016, i8* %45, align 1
  %19017 = icmp eq i32 %19003, 0
  %19018 = zext i1 %19017 to i8
  store i8 %19018, i8* %48, align 1
  %19019 = lshr i32 %19003, 31
  %19020 = trunc i32 %19019 to i8
  store i8 %19020, i8* %51, align 1
  %19021 = lshr i32 %19001, 31
  %19022 = lshr i32 %19002, 31
  %19023 = xor i32 %19022, %19021
  %19024 = xor i32 %19019, %19021
  %19025 = add nuw nsw i32 %19024, %19023
  %19026 = icmp eq i32 %19025, 2
  %19027 = zext i1 %19026 to i8
  store i8 %19027, i8* %57, align 1
  %19028 = add i64 %18996, 14
  store i64 %19028, i64* %3, align 8
  %19029 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %19030 = load <2 x i32>, <2 x i32>* %.pre-phi414, align 1
  %19031 = sitofp i32 %19003 to float
  store float %19031, float* %.pre-phi416, align 1
  %19032 = extractelement <2 x i32> %19029, i32 1
  store i32 %19032, i32* %.pre-phi420, align 1
  %19033 = extractelement <2 x i32> %19030, i32 0
  store i32 %19033, i32* %.pre-phi422, align 1
  %19034 = extractelement <2 x i32> %19030, i32 1
  store i32 %19034, i32* %.pre-phi426, align 1
  %19035 = add i64 %18996, 23
  store i64 %19035, i64* %3, align 8
  %19036 = load <2 x i32>, <2 x i32>* %.pre-phi428, align 1
  %19037 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %19038 = sitofp i32 %19002 to float
  store float %19038, float* %.pre-phi432, align 1
  %19039 = extractelement <2 x i32> %19036, i32 1
  store i32 %19039, i32* %.pre-phi436, align 1
  %19040 = extractelement <2 x i32> %19037, i32 0
  store i32 %19040, i32* %.pre-phi438, align 1
  %19041 = extractelement <2 x i32> %19037, i32 1
  store i32 %19041, i32* %.pre-phi442, align 1
  %19042 = add i64 %18997, -208
  %19043 = add i64 %18996, 31
  store i64 %19043, i64* %3, align 8
  %19044 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %19045 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %19046 = inttoptr i64 %19042 to float*
  %19047 = load float, float* %19046, align 4
  %19048 = extractelement <2 x float> %19044, i32 0
  %19049 = fmul float %19048, %19047
  store float %19049, float* %.pre-phi432, align 1
  %19050 = bitcast <2 x float> %19044 to <2 x i32>
  %19051 = extractelement <2 x i32> %19050, i32 1
  store i32 %19051, i32* %.pre-phi436, align 1
  %19052 = extractelement <2 x i32> %19045, i32 0
  store i32 %19052, i32* %.pre-phi438, align 1
  %19053 = extractelement <2 x i32> %19045, i32 1
  store i32 %19053, i32* %.pre-phi442, align 1
  %19054 = add i64 %18996, 34
  store i64 %19054, i64* %3, align 8
  %19055 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %19056 = extractelement <2 x float> %19055, i32 0
  %19057 = load <2 x float>, <2 x float>* %.pre-phi446, align 1
  %19058 = extractelement <2 x float> %19057, i32 0
  %19059 = fcmp uno float %19056, %19058
  br i1 %19059, label %19060, label %19070

; <label>:19060:                                  ; preds = %block_.L_422bfb
  %19061 = fadd float %19056, %19058
  %19062 = bitcast float %19061 to i32
  %19063 = and i32 %19062, 2143289344
  %19064 = icmp eq i32 %19063, 2139095040
  %19065 = and i32 %19062, 4194303
  %19066 = icmp ne i32 %19065, 0
  %19067 = and i1 %19064, %19066
  br i1 %19067, label %19068, label %19076

; <label>:19068:                                  ; preds = %19060
  %19069 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %19054, %struct.Memory* %18993)
  %.pre382 = load i64, i64* %3, align 8
  %.pre383 = load i8, i8* %32, align 1
  %.pre384 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit737

; <label>:19070:                                  ; preds = %block_.L_422bfb
  %19071 = fcmp ogt float %19056, %19058
  br i1 %19071, label %19076, label %19072

; <label>:19072:                                  ; preds = %19070
  %19073 = fcmp olt float %19056, %19058
  br i1 %19073, label %19076, label %19074

; <label>:19074:                                  ; preds = %19072
  %19075 = fcmp oeq float %19056, %19058
  br i1 %19075, label %19076, label %19080

; <label>:19076:                                  ; preds = %19074, %19072, %19070, %19060
  %19077 = phi i8 [ 0, %19070 ], [ 0, %19072 ], [ 1, %19074 ], [ 1, %19060 ]
  %19078 = phi i8 [ 0, %19070 ], [ 0, %19072 ], [ 0, %19074 ], [ 1, %19060 ]
  %19079 = phi i8 [ 0, %19070 ], [ 1, %19072 ], [ 0, %19074 ], [ 1, %19060 ]
  store i8 %19077, i8* %48, align 1
  store i8 %19078, i8* %39, align 1
  store i8 %19079, i8* %32, align 1
  br label %19080

; <label>:19080:                                  ; preds = %19076, %19074
  %19081 = phi i8 [ %19077, %19076 ], [ %19018, %19074 ]
  %19082 = phi i8 [ %19079, %19076 ], [ %19006, %19074 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit737

routine_ucomiss__xmm0___xmm1.exit737:             ; preds = %19080, %19068
  %19083 = phi i8 [ %.pre384, %19068 ], [ %19081, %19080 ]
  %19084 = phi i8 [ %.pre383, %19068 ], [ %19082, %19080 ]
  %19085 = phi i64 [ %.pre382, %19068 ], [ %19054, %19080 ]
  %19086 = phi %struct.Memory* [ %19069, %19068 ], [ %18993, %19080 ]
  %19087 = or i8 %19083, %19084
  %19088 = icmp ne i8 %19087, 0
  %.v545 = select i1 %19088, i64 11, i64 6
  %19089 = add i64 %19085, %.v545
  store i64 %19089, i64* %3, align 8
  br i1 %19088, label %block_.L_422c28, label %block_422c23

block_422c23:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit737
  %19090 = add i64 %19089, 155
  br label %block_.L_422cbe

block_.L_422c28:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit737
  %19091 = add i64 %19089, 110
  br label %block_.L_422c96

block_.L_422c32:                                  ; preds = %block_.L_422bc4
  %19092 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %19093 = sub i32 %18906, %19092
  %19094 = zext i32 %19093 to i64
  store i64 %19094, i64* %RAX.i3587.phi.trans.insert, align 8
  %19095 = icmp ult i32 %18906, %19092
  %19096 = zext i1 %19095 to i8
  store i8 %19096, i8* %32, align 1
  %19097 = and i32 %19093, 255
  %19098 = tail call i32 @llvm.ctpop.i32(i32 %19097)
  %19099 = trunc i32 %19098 to i8
  %19100 = and i8 %19099, 1
  %19101 = xor i8 %19100, 1
  store i8 %19101, i8* %39, align 1
  %19102 = xor i32 %19092, %18906
  %19103 = xor i32 %19102, %19093
  %19104 = lshr i32 %19103, 4
  %19105 = trunc i32 %19104 to i8
  %19106 = and i8 %19105, 1
  store i8 %19106, i8* %45, align 1
  %19107 = icmp eq i32 %19093, 0
  %19108 = zext i1 %19107 to i8
  store i8 %19108, i8* %48, align 1
  %19109 = lshr i32 %19093, 31
  %19110 = trunc i32 %19109 to i8
  store i8 %19110, i8* %51, align 1
  %19111 = lshr i32 %18906, 31
  %19112 = lshr i32 %19092, 31
  %19113 = xor i32 %19112, %19111
  %19114 = xor i32 %19109, %19111
  %19115 = add nuw nsw i32 %19114, %19113
  %19116 = icmp eq i32 %19115, 2
  %19117 = zext i1 %19116 to i8
  store i8 %19117, i8* %57, align 1
  %19118 = add i64 %18902, 14
  store i64 %19118, i64* %3, align 8
  %19119 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %19120 = load <2 x i32>, <2 x i32>* %.pre-phi414, align 1
  %19121 = sitofp i32 %19093 to float
  store float %19121, float* %.pre-phi416, align 1
  %19122 = extractelement <2 x i32> %19119, i32 1
  store i32 %19122, i32* %.pre-phi420, align 1
  %19123 = extractelement <2 x i32> %19120, i32 0
  store i32 %19123, i32* %.pre-phi422, align 1
  %19124 = extractelement <2 x i32> %19120, i32 1
  store i32 %19124, i32* %.pre-phi426, align 1
  %19125 = add i64 %18902, 23
  store i64 %19125, i64* %3, align 8
  %19126 = load <2 x i32>, <2 x i32>* %.pre-phi428, align 1
  %19127 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %19128 = sitofp i32 %19092 to float
  store float %19128, float* %.pre-phi432, align 1
  %19129 = extractelement <2 x i32> %19126, i32 1
  store i32 %19129, i32* %.pre-phi436, align 1
  %19130 = extractelement <2 x i32> %19127, i32 0
  store i32 %19130, i32* %.pre-phi438, align 1
  %19131 = extractelement <2 x i32> %19127, i32 1
  store i32 %19131, i32* %.pre-phi442, align 1
  %19132 = add i64 %17641, -212
  %19133 = add i64 %18902, 31
  store i64 %19133, i64* %3, align 8
  %19134 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %19135 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %19136 = inttoptr i64 %19132 to float*
  %19137 = load float, float* %19136, align 4
  %19138 = extractelement <2 x float> %19134, i32 0
  %19139 = fmul float %19138, %19137
  store float %19139, float* %.pre-phi432, align 1
  %19140 = bitcast <2 x float> %19134 to <2 x i32>
  %19141 = extractelement <2 x i32> %19140, i32 1
  store i32 %19141, i32* %.pre-phi436, align 1
  %19142 = extractelement <2 x i32> %19135, i32 0
  store i32 %19142, i32* %.pre-phi438, align 1
  %19143 = extractelement <2 x i32> %19135, i32 1
  store i32 %19143, i32* %.pre-phi442, align 1
  %19144 = add i64 %18902, 34
  store i64 %19144, i64* %3, align 8
  %19145 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %19146 = extractelement <2 x float> %19145, i32 0
  %19147 = load <2 x float>, <2 x float>* %.pre-phi446, align 1
  %19148 = extractelement <2 x float> %19147, i32 0
  %19149 = fcmp uno float %19146, %19148
  br i1 %19149, label %19150, label %19160

; <label>:19150:                                  ; preds = %block_.L_422c32
  %19151 = fadd float %19146, %19148
  %19152 = bitcast float %19151 to i32
  %19153 = and i32 %19152, 2143289344
  %19154 = icmp eq i32 %19153, 2139095040
  %19155 = and i32 %19152, 4194303
  %19156 = icmp ne i32 %19155, 0
  %19157 = and i1 %19154, %19156
  br i1 %19157, label %19158, label %19166

; <label>:19158:                                  ; preds = %19150
  %19159 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %19144, %struct.Memory* %MEMORY.77)
  %.pre385 = load i64, i64* %3, align 8
  %.pre386 = load i8, i8* %32, align 1
  %.pre387 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit714

; <label>:19160:                                  ; preds = %block_.L_422c32
  %19161 = fcmp ogt float %19146, %19148
  br i1 %19161, label %19166, label %19162

; <label>:19162:                                  ; preds = %19160
  %19163 = fcmp olt float %19146, %19148
  br i1 %19163, label %19166, label %19164

; <label>:19164:                                  ; preds = %19162
  %19165 = fcmp oeq float %19146, %19148
  br i1 %19165, label %19166, label %19170

; <label>:19166:                                  ; preds = %19164, %19162, %19160, %19150
  %19167 = phi i8 [ 0, %19160 ], [ 0, %19162 ], [ 1, %19164 ], [ 1, %19150 ]
  %19168 = phi i8 [ 0, %19160 ], [ 0, %19162 ], [ 0, %19164 ], [ 1, %19150 ]
  %19169 = phi i8 [ 0, %19160 ], [ 1, %19162 ], [ 0, %19164 ], [ 1, %19150 ]
  store i8 %19167, i8* %48, align 1
  store i8 %19168, i8* %39, align 1
  store i8 %19169, i8* %32, align 1
  br label %19170

; <label>:19170:                                  ; preds = %19166, %19164
  %19171 = phi i8 [ %19167, %19166 ], [ %19108, %19164 ]
  %19172 = phi i8 [ %19169, %19166 ], [ %19096, %19164 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit714

routine_ucomiss__xmm0___xmm1.exit714:             ; preds = %19170, %19158
  %19173 = phi i8 [ %.pre387, %19158 ], [ %19171, %19170 ]
  %19174 = phi i8 [ %.pre386, %19158 ], [ %19172, %19170 ]
  %19175 = phi i64 [ %.pre385, %19158 ], [ %19144, %19170 ]
  %19176 = phi %struct.Memory* [ %19159, %19158 ], [ %MEMORY.77, %19170 ]
  %19177 = or i8 %19173, %19174
  %19178 = icmp ne i8 %19177, 0
  %.v546 = select i1 %19178, i64 11, i64 6
  %19179 = add i64 %19175, %.v546
  store i64 %19179, i64* %3, align 8
  br i1 %19178, label %block_.L_422c5f, label %block_.L_422f0e.loopexit721

block_.L_422c5f:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit714
  %19180 = load i64, i64* %RBP.i, align 8
  %19181 = add i64 %19180, -80
  %19182 = add i64 %19179, 3
  store i64 %19182, i64* %3, align 8
  %19183 = inttoptr i64 %19181 to i32*
  %19184 = load i32, i32* %19183, align 4
  %19185 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %19186 = sub i32 %19184, %19185
  %19187 = zext i32 %19186 to i64
  store i64 %19187, i64* %RAX.i3587.phi.trans.insert, align 8
  %19188 = icmp ult i32 %19184, %19185
  %19189 = zext i1 %19188 to i8
  store i8 %19189, i8* %32, align 1
  %19190 = and i32 %19186, 255
  %19191 = tail call i32 @llvm.ctpop.i32(i32 %19190)
  %19192 = trunc i32 %19191 to i8
  %19193 = and i8 %19192, 1
  %19194 = xor i8 %19193, 1
  store i8 %19194, i8* %39, align 1
  %19195 = xor i32 %19185, %19184
  %19196 = xor i32 %19195, %19186
  %19197 = lshr i32 %19196, 4
  %19198 = trunc i32 %19197 to i8
  %19199 = and i8 %19198, 1
  store i8 %19199, i8* %45, align 1
  %19200 = icmp eq i32 %19186, 0
  %19201 = zext i1 %19200 to i8
  store i8 %19201, i8* %48, align 1
  %19202 = lshr i32 %19186, 31
  %19203 = trunc i32 %19202 to i8
  store i8 %19203, i8* %51, align 1
  %19204 = lshr i32 %19184, 31
  %19205 = lshr i32 %19185, 31
  %19206 = xor i32 %19205, %19204
  %19207 = xor i32 %19202, %19204
  %19208 = add nuw nsw i32 %19207, %19206
  %19209 = icmp eq i32 %19208, 2
  %19210 = zext i1 %19209 to i8
  store i8 %19210, i8* %57, align 1
  %19211 = add i64 %19179, 14
  store i64 %19211, i64* %3, align 8
  %19212 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %19213 = load <2 x i32>, <2 x i32>* %.pre-phi414, align 1
  %19214 = sitofp i32 %19186 to float
  store float %19214, float* %.pre-phi416, align 1
  %19215 = extractelement <2 x i32> %19212, i32 1
  store i32 %19215, i32* %.pre-phi420, align 1
  %19216 = extractelement <2 x i32> %19213, i32 0
  store i32 %19216, i32* %.pre-phi422, align 1
  %19217 = extractelement <2 x i32> %19213, i32 1
  store i32 %19217, i32* %.pre-phi426, align 1
  %19218 = add i64 %19179, 23
  store i64 %19218, i64* %3, align 8
  %19219 = load <2 x i32>, <2 x i32>* %.pre-phi428, align 1
  %19220 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %19221 = sitofp i32 %19185 to float
  store float %19221, float* %.pre-phi432, align 1
  %19222 = extractelement <2 x i32> %19219, i32 1
  store i32 %19222, i32* %.pre-phi436, align 1
  %19223 = extractelement <2 x i32> %19220, i32 0
  store i32 %19223, i32* %.pre-phi438, align 1
  %19224 = extractelement <2 x i32> %19220, i32 1
  store i32 %19224, i32* %.pre-phi442, align 1
  %19225 = add i64 %19180, -208
  %19226 = add i64 %19179, 31
  store i64 %19226, i64* %3, align 8
  %19227 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %19228 = load <2 x i32>, <2 x i32>* %.pre-phi430, align 1
  %19229 = inttoptr i64 %19225 to float*
  %19230 = load float, float* %19229, align 4
  %19231 = extractelement <2 x float> %19227, i32 0
  %19232 = fmul float %19231, %19230
  store float %19232, float* %.pre-phi432, align 1
  %19233 = bitcast <2 x float> %19227 to <2 x i32>
  %19234 = extractelement <2 x i32> %19233, i32 1
  store i32 %19234, i32* %.pre-phi436, align 1
  %19235 = extractelement <2 x i32> %19228, i32 0
  store i32 %19235, i32* %.pre-phi438, align 1
  %19236 = extractelement <2 x i32> %19228, i32 1
  store i32 %19236, i32* %.pre-phi442, align 1
  %19237 = add i64 %19179, 34
  store i64 %19237, i64* %3, align 8
  %19238 = load <2 x float>, <2 x float>* %.pre-phi444, align 1
  %19239 = extractelement <2 x float> %19238, i32 0
  %19240 = load <2 x float>, <2 x float>* %.pre-phi446, align 1
  %19241 = extractelement <2 x float> %19240, i32 0
  %19242 = fcmp uno float %19239, %19241
  br i1 %19242, label %19243, label %19253

; <label>:19243:                                  ; preds = %block_.L_422c5f
  %19244 = fadd float %19239, %19241
  %19245 = bitcast float %19244 to i32
  %19246 = and i32 %19245, 2143289344
  %19247 = icmp eq i32 %19246, 2139095040
  %19248 = and i32 %19245, 4194303
  %19249 = icmp ne i32 %19248, 0
  %19250 = and i1 %19247, %19249
  br i1 %19250, label %19251, label %19259

; <label>:19251:                                  ; preds = %19243
  %19252 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %19237, %struct.Memory* %19176)
  %.pre388 = load i64, i64* %3, align 8
  %.pre389 = load i8, i8* %32, align 1
  %.pre390 = load i8, i8* %48, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit

; <label>:19253:                                  ; preds = %block_.L_422c5f
  %19254 = fcmp ogt float %19239, %19241
  br i1 %19254, label %19259, label %19255

; <label>:19255:                                  ; preds = %19253
  %19256 = fcmp olt float %19239, %19241
  br i1 %19256, label %19259, label %19257

; <label>:19257:                                  ; preds = %19255
  %19258 = fcmp oeq float %19239, %19241
  br i1 %19258, label %19259, label %19263

; <label>:19259:                                  ; preds = %19257, %19255, %19253, %19243
  %19260 = phi i8 [ 0, %19253 ], [ 0, %19255 ], [ 1, %19257 ], [ 1, %19243 ]
  %19261 = phi i8 [ 0, %19253 ], [ 0, %19255 ], [ 0, %19257 ], [ 1, %19243 ]
  %19262 = phi i8 [ 0, %19253 ], [ 1, %19255 ], [ 0, %19257 ], [ 1, %19243 ]
  store i8 %19260, i8* %48, align 1
  store i8 %19261, i8* %39, align 1
  store i8 %19262, i8* %32, align 1
  br label %19263

; <label>:19263:                                  ; preds = %19259, %19257
  %19264 = phi i8 [ %19260, %19259 ], [ %19201, %19257 ]
  %19265 = phi i8 [ %19262, %19259 ], [ %19189, %19257 ]
  store i8 0, i8* %57, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %45, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit

routine_ucomiss__xmm0___xmm1.exit:                ; preds = %19263, %19251
  %19266 = phi i8 [ %.pre390, %19251 ], [ %19264, %19263 ]
  %19267 = phi i8 [ %.pre389, %19251 ], [ %19265, %19263 ]
  %19268 = phi i64 [ %.pre388, %19251 ], [ %19237, %19263 ]
  %19269 = phi %struct.Memory* [ %19252, %19251 ], [ %19176, %19263 ]
  %19270 = or i8 %19266, %19267
  %19271 = icmp ne i8 %19270, 0
  %.v547 = select i1 %19271, i64 11, i64 6
  %19272 = add i64 %19268, %.v547
  store i64 %19272, i64* %3, align 8
  br i1 %19271, label %block_.L_422c8c, label %block_422c87

block_422c87:                                     ; preds = %routine_ucomiss__xmm0___xmm1.exit
  %19273 = add i64 %19272, 55
  br label %block_.L_422cbe

block_.L_422c8c:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit
  %19274 = add i64 %19272, 10
  store i64 %19274, i64* %3, align 8
  br label %block_.L_422c96

block_.L_422c96:                                  ; preds = %block_.L_422c8c, %block_.L_422c28
  %storemerge157 = phi i64 [ %19091, %block_.L_422c28 ], [ %19274, %block_.L_422c8c ]
  %MEMORY.81 = phi %struct.Memory* [ %19086, %block_.L_422c28 ], [ %19269, %block_.L_422c8c ]
  %19275 = add i64 %storemerge157, 5
  store i64 %19275, i64* %3, align 8
  br label %block_.L_422c9b

block_.L_422c9b:                                  ; preds = %block_.L_422c96, %block_.L_422bba
  %storemerge156 = phi i64 [ %18873, %block_.L_422bba ], [ %19275, %block_.L_422c96 ]
  %MEMORY.82 = phi %struct.Memory* [ %18868, %block_.L_422bba ], [ %MEMORY.81, %block_.L_422c96 ]
  %19276 = add i64 %storemerge156, 5
  store i64 %19276, i64* %3, align 8
  %.pre391 = load i64, i64* %RBP.i, align 8
  br label %block_.L_422ca0

block_.L_422ca0:                                  ; preds = %block_.L_422c9b, %block_.L_422b46
  %19277 = phi i64 [ %17641, %block_.L_422b46 ], [ %.pre391, %block_.L_422c9b ]
  %19278 = phi i64 [ %18667, %block_.L_422b46 ], [ %19276, %block_.L_422c9b ]
  %MEMORY.83 = phi %struct.Memory* [ %MEMORY.77, %block_.L_422b46 ], [ %MEMORY.82, %block_.L_422c9b ]
  %19279 = add i64 %19277, -188
  %19280 = add i64 %19278, 11
  store i64 %19280, i64* %3, align 8
  %19281 = inttoptr i64 %19279 to i32*
  %19282 = load i32, i32* %19281, align 4
  %19283 = add i32 %19282, 1
  %19284 = zext i32 %19283 to i64
  store i64 %19284, i64* %RAX.i3587.phi.trans.insert, align 8
  %19285 = icmp eq i32 %19282, -1
  %19286 = icmp eq i32 %19283, 0
  %19287 = or i1 %19285, %19286
  %19288 = zext i1 %19287 to i8
  store i8 %19288, i8* %32, align 1
  %19289 = and i32 %19283, 255
  %19290 = tail call i32 @llvm.ctpop.i32(i32 %19289)
  %19291 = trunc i32 %19290 to i8
  %19292 = and i8 %19291, 1
  %19293 = xor i8 %19292, 1
  store i8 %19293, i8* %39, align 1
  %19294 = xor i32 %19283, %19282
  %19295 = lshr i32 %19294, 4
  %19296 = trunc i32 %19295 to i8
  %19297 = and i8 %19296, 1
  store i8 %19297, i8* %45, align 1
  %19298 = zext i1 %19286 to i8
  store i8 %19298, i8* %48, align 1
  %19299 = lshr i32 %19283, 31
  %19300 = trunc i32 %19299 to i8
  store i8 %19300, i8* %51, align 1
  %19301 = lshr i32 %19282, 31
  %19302 = xor i32 %19299, %19301
  %19303 = add nuw nsw i32 %19302, %19299
  %19304 = icmp eq i32 %19303, 2
  %19305 = zext i1 %19304 to i8
  store i8 %19305, i8* %57, align 1
  %19306 = add i64 %19278, 20
  store i64 %19306, i64* %3, align 8
  store i32 %19283, i32* %19281, align 4
  %19307 = load i64, i64* %3, align 8
  %19308 = add i64 %19307, -899
  store i64 %19308, i64* %3, align 8
  br label %block_.L_422931

block_.L_422cb9:                                  ; preds = %routine_idivl__esi.exit
  %19309 = add i64 %17630, 5
  br label %block_.L_422cbe

block_.L_422cbe:                                  ; preds = %block_.L_422cb9, %block_422c87, %block_422c23, %block_422bb5, %block_422913, %block_4228af, %block_422841, %block_4225f5, %block_422591, %block_422523, %block_421ddf, %block_421dc1, %block_421d5d, %block_421cef, %block_42148f
  %.sink = phi i64 [ %19309, %block_.L_422cb9 ], [ %19273, %block_422c87 ], [ %19090, %block_422c23 ], [ %18872, %block_422bb5 ], [ %17552, %block_422913 ], [ %17355, %block_4228af ], [ %17123, %block_422841 ], [ %15889, %block_4225f5 ], [ %15692, %block_422591 ], [ %15460, %block_422523 ], [ %11411, %block_421ddf ], [ %11378, %block_421dc1 ], [ %11181, %block_421d5d ], [ %10949, %block_421cef ], [ %6393, %block_42148f ]
  %MEMORY.84 = phi %struct.Memory* [ %17602, %block_.L_422cb9 ], [ %19269, %block_422c87 ], [ %19086, %block_422c23 ], [ %18868, %block_422bb5 ], [ %17548, %block_422913 ], [ %17351, %block_4228af ], [ %17119, %block_422841 ], [ %15885, %block_4225f5 ], [ %15688, %block_422591 ], [ %15456, %block_422523 ], [ %MEMORY.53, %block_421ddf ], [ %11374, %block_421dc1 ], [ %11177, %block_421d5d ], [ %10945, %block_421cef ], [ %6389, %block_42148f ]
  %19310 = load i64, i64* %RBP.i, align 8
  %19311 = add i64 %19310, -168
  %19312 = add i64 %.sink, 6
  store i64 %19312, i64* %3, align 8
  %19313 = inttoptr i64 %19311 to i32*
  %19314 = load i32, i32* %19313, align 4
  %19315 = zext i32 %19314 to i64
  store i64 %19315, i64* %RAX.i3587.phi.trans.insert, align 8
  %19316 = add i64 %19310, -184
  %19317 = add i64 %.sink, 12
  store i64 %19317, i64* %3, align 8
  %19318 = inttoptr i64 %19316 to i32*
  store i32 %19314, i32* %19318, align 4
  %19319 = load i64, i64* %RBP.i, align 8
  %19320 = add i64 %19319, -172
  %19321 = load i64, i64* %3, align 8
  %19322 = add i64 %19321, 6
  store i64 %19322, i64* %3, align 8
  %19323 = inttoptr i64 %19320 to i32*
  %19324 = load i32, i32* %19323, align 4
  %19325 = zext i32 %19324 to i64
  store i64 %19325, i64* %RAX.i3587.phi.trans.insert, align 8
  %19326 = add i64 %19319, -180
  %19327 = add i64 %19321, 12
  store i64 %19327, i64* %3, align 8
  %19328 = inttoptr i64 %19326 to i32*
  store i32 %19324, i32* %19328, align 4
  %19329 = load i64, i64* %RBP.i, align 8
  %19330 = add i64 %19329, -188
  %19331 = load i64, i64* %3, align 8
  %19332 = add i64 %19331, 10
  store i64 %19332, i64* %3, align 8
  %19333 = inttoptr i64 %19330 to i32*
  store i32 0, i32* %19333, align 4
  %.pre394 = load i64, i64* %3, align 8
  br label %block_.L_422ce0

block_.L_422ce0:                                  ; preds = %block_.L_422edd, %block_.L_422cbe
  %19334 = phi i64 [ %.pre394, %block_.L_422cbe ], [ %20435, %block_.L_422edd ]
  %MEMORY.85 = phi %struct.Memory* [ %MEMORY.84, %block_.L_422cbe ], [ %MEMORY.86, %block_.L_422edd ]
  %19335 = load i64, i64* %RBP.i, align 8
  %19336 = add i64 %19335, -188
  %19337 = add i64 %19334, 6
  store i64 %19337, i64* %3, align 8
  %19338 = inttoptr i64 %19336 to i32*
  %19339 = load i32, i32* %19338, align 4
  %19340 = zext i32 %19339 to i64
  store i64 %19340, i64* %RAX.i3587.phi.trans.insert, align 8
  %19341 = add i64 %19335, -76
  %19342 = add i64 %19334, 9
  store i64 %19342, i64* %3, align 8
  %19343 = inttoptr i64 %19341 to i32*
  %19344 = load i32, i32* %19343, align 4
  %19345 = sub i32 %19339, %19344
  %19346 = icmp ult i32 %19339, %19344
  %19347 = zext i1 %19346 to i8
  store i8 %19347, i8* %32, align 1
  %19348 = and i32 %19345, 255
  %19349 = tail call i32 @llvm.ctpop.i32(i32 %19348)
  %19350 = trunc i32 %19349 to i8
  %19351 = and i8 %19350, 1
  %19352 = xor i8 %19351, 1
  store i8 %19352, i8* %39, align 1
  %19353 = xor i32 %19344, %19339
  %19354 = xor i32 %19353, %19345
  %19355 = lshr i32 %19354, 4
  %19356 = trunc i32 %19355 to i8
  %19357 = and i8 %19356, 1
  store i8 %19357, i8* %45, align 1
  %19358 = icmp eq i32 %19345, 0
  %19359 = zext i1 %19358 to i8
  store i8 %19359, i8* %48, align 1
  %19360 = lshr i32 %19345, 31
  %19361 = trunc i32 %19360 to i8
  store i8 %19361, i8* %51, align 1
  %19362 = lshr i32 %19339, 31
  %19363 = lshr i32 %19344, 31
  %19364 = xor i32 %19363, %19362
  %19365 = xor i32 %19360, %19362
  %19366 = add nuw nsw i32 %19365, %19364
  %19367 = icmp eq i32 %19366, 2
  %19368 = zext i1 %19367 to i8
  store i8 %19368, i8* %57, align 1
  %19369 = icmp ne i8 %19361, 0
  %19370 = xor i1 %19369, %19367
  %.v521 = select i1 %19370, i64 15, i64 553
  %19371 = add i64 %19334, %.v521
  store i64 %19371, i64* %3, align 8
  br i1 %19370, label %block_422cef, label %block_.L_422f0e.loopexit

block_422cef:                                     ; preds = %block_.L_422ce0
  %19372 = add i64 %19335, -200
  %19373 = add i64 %19371, 10
  store i64 %19373, i64* %3, align 8
  %19374 = inttoptr i64 %19372 to i32*
  store i32 1, i32* %19374, align 4
  %19375 = load i64, i64* %RBP.i, align 8
  %19376 = add i64 %19375, -192
  %19377 = load i64, i64* %3, align 8
  %19378 = add i64 %19377, 10
  store i64 %19378, i64* %3, align 8
  %19379 = inttoptr i64 %19376 to i32*
  store i32 0, i32* %19379, align 4
  %.pre395 = load i64, i64* %3, align 8
  br label %block_.L_422d03

block_.L_422d03:                                  ; preds = %block_.L_422eb2, %block_422cef
  %19380 = phi i64 [ %.pre395, %block_422cef ], [ %20370, %block_.L_422eb2 ]
  %MEMORY.86 = phi %struct.Memory* [ %MEMORY.85, %block_422cef ], [ %MEMORY.89, %block_.L_422eb2 ]
  %19381 = load i64, i64* %RBP.i, align 8
  %19382 = add i64 %19381, -192
  %19383 = add i64 %19380, 7
  store i64 %19383, i64* %3, align 8
  %19384 = inttoptr i64 %19382 to i32*
  %19385 = load i32, i32* %19384, align 4
  %19386 = add i32 %19385, -6
  %19387 = icmp ult i32 %19385, 6
  %19388 = zext i1 %19387 to i8
  store i8 %19388, i8* %32, align 1
  %19389 = and i32 %19386, 255
  %19390 = tail call i32 @llvm.ctpop.i32(i32 %19389)
  %19391 = trunc i32 %19390 to i8
  %19392 = and i8 %19391, 1
  %19393 = xor i8 %19392, 1
  store i8 %19393, i8* %39, align 1
  %19394 = xor i32 %19386, %19385
  %19395 = lshr i32 %19394, 4
  %19396 = trunc i32 %19395 to i8
  %19397 = and i8 %19396, 1
  store i8 %19397, i8* %45, align 1
  %19398 = icmp eq i32 %19386, 0
  %19399 = zext i1 %19398 to i8
  store i8 %19399, i8* %48, align 1
  %19400 = lshr i32 %19386, 31
  %19401 = trunc i32 %19400 to i8
  store i8 %19401, i8* %51, align 1
  %19402 = lshr i32 %19385, 31
  %19403 = xor i32 %19400, %19402
  %19404 = add nuw nsw i32 %19403, %19402
  %19405 = icmp eq i32 %19404, 2
  %19406 = zext i1 %19405 to i8
  store i8 %19406, i8* %57, align 1
  %19407 = icmp ne i8 %19401, 0
  %19408 = xor i1 %19407, %19405
  %.v522 = select i1 %19408, i64 13, i64 456
  %19409 = add i64 %19380, %.v522
  store i64 %19409, i64* %3, align 8
  br i1 %19408, label %block_422d10, label %block_.L_422ecb

block_422d10:                                     ; preds = %block_.L_422d03
  %19410 = add i64 %19381, -184
  %19411 = add i64 %19409, 6
  store i64 %19411, i64* %3, align 8
  %19412 = inttoptr i64 %19410 to i32*
  %19413 = load i32, i32* %19412, align 4
  %19414 = zext i32 %19413 to i64
  store i64 %19414, i64* %RAX.i3587.phi.trans.insert, align 8
  %19415 = add i64 %19409, 13
  store i64 %19415, i64* %3, align 8
  %19416 = load i32, i32* %19384, align 4
  %19417 = sext i32 %19416 to i64
  store i64 %19417, i64* %RCX.i4260.pre-phi, align 8
  %19418 = shl nsw i64 %19417, 2
  %19419 = add nsw i64 %19418, 7125056
  %19420 = add i64 %19409, 20
  store i64 %19420, i64* %3, align 8
  %19421 = inttoptr i64 %19419 to i32*
  %19422 = load i32, i32* %19421, align 4
  %19423 = add i32 %19422, %19413
  %19424 = zext i32 %19423 to i64
  store i64 %19424, i64* %RAX.i3587.phi.trans.insert, align 8
  %19425 = icmp ult i32 %19423, %19413
  %19426 = icmp ult i32 %19423, %19422
  %19427 = or i1 %19425, %19426
  %19428 = zext i1 %19427 to i8
  store i8 %19428, i8* %32, align 1
  %19429 = and i32 %19423, 255
  %19430 = tail call i32 @llvm.ctpop.i32(i32 %19429)
  %19431 = trunc i32 %19430 to i8
  %19432 = and i8 %19431, 1
  %19433 = xor i8 %19432, 1
  store i8 %19433, i8* %39, align 1
  %19434 = xor i32 %19422, %19413
  %19435 = xor i32 %19434, %19423
  %19436 = lshr i32 %19435, 4
  %19437 = trunc i32 %19436 to i8
  %19438 = and i8 %19437, 1
  store i8 %19438, i8* %45, align 1
  %19439 = icmp eq i32 %19423, 0
  %19440 = zext i1 %19439 to i8
  store i8 %19440, i8* %48, align 1
  %19441 = lshr i32 %19423, 31
  %19442 = trunc i32 %19441 to i8
  store i8 %19442, i8* %51, align 1
  %19443 = lshr i32 %19413, 31
  %19444 = lshr i32 %19422, 31
  %19445 = xor i32 %19441, %19443
  %19446 = xor i32 %19441, %19444
  %19447 = add nuw nsw i32 %19445, %19446
  %19448 = icmp eq i32 %19447, 2
  %19449 = zext i1 %19448 to i8
  store i8 %19449, i8* %57, align 1
  %19450 = add i64 %19381, -96
  %19451 = add i64 %19409, 23
  store i64 %19451, i64* %3, align 8
  %19452 = inttoptr i64 %19450 to i32*
  store i32 %19423, i32* %19452, align 4
  %19453 = load i64, i64* %RBP.i, align 8
  %19454 = add i64 %19453, -180
  %19455 = load i64, i64* %3, align 8
  %19456 = add i64 %19455, 6
  store i64 %19456, i64* %3, align 8
  %19457 = inttoptr i64 %19454 to i32*
  %19458 = load i32, i32* %19457, align 4
  %19459 = zext i32 %19458 to i64
  store i64 %19459, i64* %RAX.i3587.phi.trans.insert, align 8
  %19460 = add i64 %19453, -192
  %19461 = add i64 %19455, 13
  store i64 %19461, i64* %3, align 8
  %19462 = inttoptr i64 %19460 to i32*
  %19463 = load i32, i32* %19462, align 4
  %19464 = sext i32 %19463 to i64
  store i64 %19464, i64* %RCX.i4260.pre-phi, align 8
  %19465 = shl nsw i64 %19464, 2
  %19466 = add nsw i64 %19465, 7125088
  %19467 = add i64 %19455, 20
  store i64 %19467, i64* %3, align 8
  %19468 = inttoptr i64 %19466 to i32*
  %19469 = load i32, i32* %19468, align 4
  %19470 = add i32 %19469, %19458
  %19471 = zext i32 %19470 to i64
  store i64 %19471, i64* %RAX.i3587.phi.trans.insert, align 8
  %19472 = icmp ult i32 %19470, %19458
  %19473 = icmp ult i32 %19470, %19469
  %19474 = or i1 %19472, %19473
  %19475 = zext i1 %19474 to i8
  store i8 %19475, i8* %32, align 1
  %19476 = and i32 %19470, 255
  %19477 = tail call i32 @llvm.ctpop.i32(i32 %19476)
  %19478 = trunc i32 %19477 to i8
  %19479 = and i8 %19478, 1
  %19480 = xor i8 %19479, 1
  store i8 %19480, i8* %39, align 1
  %19481 = xor i32 %19469, %19458
  %19482 = xor i32 %19481, %19470
  %19483 = lshr i32 %19482, 4
  %19484 = trunc i32 %19483 to i8
  %19485 = and i8 %19484, 1
  store i8 %19485, i8* %45, align 1
  %19486 = icmp eq i32 %19470, 0
  %19487 = zext i1 %19486 to i8
  store i8 %19487, i8* %48, align 1
  %19488 = lshr i32 %19470, 31
  %19489 = trunc i32 %19488 to i8
  store i8 %19489, i8* %51, align 1
  %19490 = lshr i32 %19458, 31
  %19491 = lshr i32 %19469, 31
  %19492 = xor i32 %19488, %19490
  %19493 = xor i32 %19488, %19491
  %19494 = add nuw nsw i32 %19492, %19493
  %19495 = icmp eq i32 %19494, 2
  %19496 = zext i1 %19495 to i8
  store i8 %19496, i8* %57, align 1
  %19497 = add i64 %19453, -100
  %19498 = add i64 %19455, 23
  store i64 %19498, i64* %3, align 8
  %19499 = inttoptr i64 %19497 to i32*
  store i32 %19470, i32* %19499, align 4
  %19500 = load i64, i64* %RBP.i, align 8
  %19501 = add i64 %19500, -96
  %19502 = load i64, i64* %3, align 8
  %19503 = add i64 %19502, 3
  store i64 %19503, i64* %3, align 8
  %19504 = inttoptr i64 %19501 to i32*
  %19505 = load i32, i32* %19504, align 4
  %19506 = zext i32 %19505 to i64
  store i64 %19506, i64* %RAX.i3587.phi.trans.insert, align 8
  %19507 = add i64 %19500, -160
  %19508 = add i64 %19502, 9
  store i64 %19508, i64* %3, align 8
  %19509 = inttoptr i64 %19507 to i32*
  %19510 = load i32, i32* %19509, align 4
  %19511 = sub i32 %19505, %19510
  %19512 = zext i32 %19511 to i64
  store i64 %19512, i64* %RAX.i3587.phi.trans.insert, align 8
  %19513 = icmp ult i32 %19505, %19510
  %19514 = zext i1 %19513 to i8
  store i8 %19514, i8* %32, align 1
  %19515 = and i32 %19511, 255
  %19516 = tail call i32 @llvm.ctpop.i32(i32 %19515)
  %19517 = trunc i32 %19516 to i8
  %19518 = and i8 %19517, 1
  %19519 = xor i8 %19518, 1
  store i8 %19519, i8* %39, align 1
  %19520 = xor i32 %19510, %19505
  %19521 = xor i32 %19520, %19511
  %19522 = lshr i32 %19521, 4
  %19523 = trunc i32 %19522 to i8
  %19524 = and i8 %19523, 1
  store i8 %19524, i8* %45, align 1
  %19525 = icmp eq i32 %19511, 0
  %19526 = zext i1 %19525 to i8
  store i8 %19526, i8* %48, align 1
  %19527 = lshr i32 %19511, 31
  %19528 = trunc i32 %19527 to i8
  store i8 %19528, i8* %51, align 1
  %19529 = lshr i32 %19505, 31
  %19530 = lshr i32 %19510, 31
  %19531 = xor i32 %19530, %19529
  %19532 = xor i32 %19527, %19529
  %19533 = add nuw nsw i32 %19532, %19531
  %19534 = icmp eq i32 %19533, 2
  %19535 = zext i1 %19534 to i8
  store i8 %19535, i8* %57, align 1
  store i64 %19512, i64* %RDI.i1133, align 8
  %19536 = add i64 %19502, -138558
  %19537 = add i64 %19502, 16
  %19538 = load i64, i64* %6, align 8
  %19539 = add i64 %19538, -8
  %19540 = inttoptr i64 %19539 to i64*
  store i64 %19537, i64* %19540, align 8
  store i64 %19539, i64* %6, align 8
  store i64 %19536, i64* %3, align 8
  %19541 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.86)
  %19542 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %19543 = load i64, i64* %RBP.i, align 8
  %19544 = add i64 %19543, -76
  %19545 = load i64, i64* %3, align 8
  %19546 = add i64 %19545, 3
  store i64 %19546, i64* %3, align 8
  %19547 = inttoptr i64 %19544 to i32*
  %19548 = load i32, i32* %19547, align 4
  %19549 = sub i32 %19542, %19548
  %19550 = icmp ult i32 %19542, %19548
  %19551 = zext i1 %19550 to i8
  store i8 %19551, i8* %32, align 1
  %19552 = and i32 %19549, 255
  %19553 = tail call i32 @llvm.ctpop.i32(i32 %19552)
  %19554 = trunc i32 %19553 to i8
  %19555 = and i8 %19554, 1
  %19556 = xor i8 %19555, 1
  store i8 %19556, i8* %39, align 1
  %19557 = xor i32 %19548, %19542
  %19558 = xor i32 %19557, %19549
  %19559 = lshr i32 %19558, 4
  %19560 = trunc i32 %19559 to i8
  %19561 = and i8 %19560, 1
  store i8 %19561, i8* %45, align 1
  %19562 = icmp eq i32 %19549, 0
  %19563 = zext i1 %19562 to i8
  store i8 %19563, i8* %48, align 1
  %19564 = lshr i32 %19549, 31
  %19565 = trunc i32 %19564 to i8
  store i8 %19565, i8* %51, align 1
  %19566 = lshr i32 %19542, 31
  %19567 = lshr i32 %19548, 31
  %19568 = xor i32 %19567, %19566
  %19569 = xor i32 %19564, %19566
  %19570 = add nuw nsw i32 %19569, %19568
  %19571 = icmp eq i32 %19570, 2
  %19572 = zext i1 %19571 to i8
  store i8 %19572, i8* %57, align 1
  %19573 = icmp ne i8 %19565, 0
  %19574 = xor i1 %19573, %19571
  %.demorgan455 = or i1 %19562, %19574
  %.v524 = select i1 %.demorgan455, i64 9, i64 356
  %19575 = add i64 %19545, %.v524
  store i64 %19575, i64* %3, align 8
  br i1 %.demorgan455, label %block_422d57, label %block_.L_422eb2

block_422d57:                                     ; preds = %block_422d10
  %19576 = add i64 %19543, -100
  %19577 = add i64 %19575, 3
  store i64 %19577, i64* %3, align 8
  %19578 = inttoptr i64 %19576 to i32*
  %19579 = load i32, i32* %19578, align 4
  %19580 = zext i32 %19579 to i64
  store i64 %19580, i64* %RAX.i3587.phi.trans.insert, align 8
  %19581 = add i64 %19543, -164
  %19582 = add i64 %19575, 9
  store i64 %19582, i64* %3, align 8
  %19583 = inttoptr i64 %19581 to i32*
  %19584 = load i32, i32* %19583, align 4
  %19585 = sub i32 %19579, %19584
  %19586 = zext i32 %19585 to i64
  store i64 %19586, i64* %RAX.i3587.phi.trans.insert, align 8
  %19587 = icmp ult i32 %19579, %19584
  %19588 = zext i1 %19587 to i8
  store i8 %19588, i8* %32, align 1
  %19589 = and i32 %19585, 255
  %19590 = tail call i32 @llvm.ctpop.i32(i32 %19589)
  %19591 = trunc i32 %19590 to i8
  %19592 = and i8 %19591, 1
  %19593 = xor i8 %19592, 1
  store i8 %19593, i8* %39, align 1
  %19594 = xor i32 %19584, %19579
  %19595 = xor i32 %19594, %19585
  %19596 = lshr i32 %19595, 4
  %19597 = trunc i32 %19596 to i8
  %19598 = and i8 %19597, 1
  store i8 %19598, i8* %45, align 1
  %19599 = icmp eq i32 %19585, 0
  %19600 = zext i1 %19599 to i8
  store i8 %19600, i8* %48, align 1
  %19601 = lshr i32 %19585, 31
  %19602 = trunc i32 %19601 to i8
  store i8 %19602, i8* %51, align 1
  %19603 = lshr i32 %19579, 31
  %19604 = lshr i32 %19584, 31
  %19605 = xor i32 %19604, %19603
  %19606 = xor i32 %19601, %19603
  %19607 = add nuw nsw i32 %19606, %19605
  %19608 = icmp eq i32 %19607, 2
  %19609 = zext i1 %19608 to i8
  store i8 %19609, i8* %57, align 1
  store i64 %19586, i64* %RDI.i1133, align 8
  %19610 = add i64 %19575, -138583
  %19611 = add i64 %19575, 16
  %19612 = load i64, i64* %6, align 8
  %19613 = add i64 %19612, -8
  %19614 = inttoptr i64 %19613 to i64*
  store i64 %19611, i64* %19614, align 8
  store i64 %19613, i64* %6, align 8
  store i64 %19610, i64* %3, align 8
  %19615 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %19541)
  %19616 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %19617 = load i64, i64* %RBP.i, align 8
  %19618 = add i64 %19617, -76
  %19619 = load i64, i64* %3, align 8
  %19620 = add i64 %19619, 3
  store i64 %19620, i64* %3, align 8
  %19621 = inttoptr i64 %19618 to i32*
  %19622 = load i32, i32* %19621, align 4
  %19623 = sub i32 %19616, %19622
  %19624 = icmp ult i32 %19616, %19622
  %19625 = zext i1 %19624 to i8
  store i8 %19625, i8* %32, align 1
  %19626 = and i32 %19623, 255
  %19627 = tail call i32 @llvm.ctpop.i32(i32 %19626)
  %19628 = trunc i32 %19627 to i8
  %19629 = and i8 %19628, 1
  %19630 = xor i8 %19629, 1
  store i8 %19630, i8* %39, align 1
  %19631 = xor i32 %19622, %19616
  %19632 = xor i32 %19631, %19623
  %19633 = lshr i32 %19632, 4
  %19634 = trunc i32 %19633 to i8
  %19635 = and i8 %19634, 1
  store i8 %19635, i8* %45, align 1
  %19636 = icmp eq i32 %19623, 0
  %19637 = zext i1 %19636 to i8
  store i8 %19637, i8* %48, align 1
  %19638 = lshr i32 %19623, 31
  %19639 = trunc i32 %19638 to i8
  store i8 %19639, i8* %51, align 1
  %19640 = lshr i32 %19616, 31
  %19641 = lshr i32 %19622, 31
  %19642 = xor i32 %19641, %19640
  %19643 = xor i32 %19638, %19640
  %19644 = add nuw nsw i32 %19643, %19642
  %19645 = icmp eq i32 %19644, 2
  %19646 = zext i1 %19645 to i8
  store i8 %19646, i8* %57, align 1
  %19647 = icmp ne i8 %19639, 0
  %19648 = xor i1 %19647, %19645
  %.demorgan456 = or i1 %19636, %19648
  %.v525 = select i1 %.demorgan456, i64 9, i64 331
  %19649 = add i64 %19619, %.v525
  store i64 %19649, i64* %3, align 8
  br i1 %.demorgan456, label %block_422d70, label %block_.L_422eb2

block_422d70:                                     ; preds = %block_422d57
  %19650 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %19650, i64* %RAX.i3587.phi.trans.insert, align 8
  %19651 = add i64 %19617, -100
  %19652 = add i64 %19649, 11
  store i64 %19652, i64* %3, align 8
  %19653 = inttoptr i64 %19651 to i32*
  %19654 = load i32, i32* %19653, align 4
  %19655 = zext i32 %19654 to i64
  store i64 %19655, i64* %RCX.i4260.pre-phi, align 8
  %19656 = add i64 %19617, -164
  %19657 = add i64 %19649, 17
  store i64 %19657, i64* %3, align 8
  %19658 = inttoptr i64 %19656 to i32*
  %19659 = load i32, i32* %19658, align 4
  %19660 = sub i32 %19654, %19659
  %19661 = zext i32 %19660 to i64
  store i64 %19661, i64* %RCX.i4260.pre-phi, align 8
  %19662 = icmp ult i32 %19654, %19659
  %19663 = zext i1 %19662 to i8
  store i8 %19663, i8* %32, align 1
  %19664 = and i32 %19660, 255
  %19665 = tail call i32 @llvm.ctpop.i32(i32 %19664)
  %19666 = trunc i32 %19665 to i8
  %19667 = and i8 %19666, 1
  %19668 = xor i8 %19667, 1
  store i8 %19668, i8* %39, align 1
  %19669 = xor i32 %19659, %19654
  %19670 = xor i32 %19669, %19660
  %19671 = lshr i32 %19670, 4
  %19672 = trunc i32 %19671 to i8
  %19673 = and i8 %19672, 1
  store i8 %19673, i8* %45, align 1
  %19674 = icmp eq i32 %19660, 0
  %19675 = zext i1 %19674 to i8
  store i8 %19675, i8* %48, align 1
  %19676 = lshr i32 %19660, 31
  %19677 = trunc i32 %19676 to i8
  store i8 %19677, i8* %51, align 1
  %19678 = lshr i32 %19654, 31
  %19679 = lshr i32 %19659, 31
  %19680 = xor i32 %19679, %19678
  %19681 = xor i32 %19676, %19678
  %19682 = add nuw nsw i32 %19681, %19680
  %19683 = icmp eq i32 %19682, 2
  %19684 = zext i1 %19683 to i8
  store i8 %19684, i8* %57, align 1
  %19685 = add i64 %19649, 20
  store i64 %19685, i64* %3, align 8
  %19686 = load i32, i32* %19621, align 4
  %19687 = add i32 %19686, %19660
  %19688 = zext i32 %19687 to i64
  store i64 %19688, i64* %RCX.i4260.pre-phi, align 8
  %19689 = icmp ult i32 %19687, %19660
  %19690 = icmp ult i32 %19687, %19686
  %19691 = or i1 %19689, %19690
  %19692 = zext i1 %19691 to i8
  store i8 %19692, i8* %32, align 1
  %19693 = and i32 %19687, 255
  %19694 = tail call i32 @llvm.ctpop.i32(i32 %19693)
  %19695 = trunc i32 %19694 to i8
  %19696 = and i8 %19695, 1
  %19697 = xor i8 %19696, 1
  store i8 %19697, i8* %39, align 1
  %19698 = xor i32 %19686, %19660
  %19699 = xor i32 %19698, %19687
  %19700 = lshr i32 %19699, 4
  %19701 = trunc i32 %19700 to i8
  %19702 = and i8 %19701, 1
  store i8 %19702, i8* %45, align 1
  %19703 = icmp eq i32 %19687, 0
  %19704 = zext i1 %19703 to i8
  store i8 %19704, i8* %48, align 1
  %19705 = lshr i32 %19687, 31
  %19706 = trunc i32 %19705 to i8
  store i8 %19706, i8* %51, align 1
  %19707 = lshr i32 %19686, 31
  %19708 = xor i32 %19705, %19676
  %19709 = xor i32 %19705, %19707
  %19710 = add nuw nsw i32 %19708, %19709
  %19711 = icmp eq i32 %19710, 2
  %19712 = zext i1 %19711 to i8
  store i8 %19712, i8* %57, align 1
  %19713 = sext i32 %19687 to i64
  store i64 %19713, i64* %RDX.i4317.pre-phi, align 8
  %19714 = shl nsw i64 %19713, 3
  %19715 = add i64 %19650, %19714
  %19716 = add i64 %19649, 27
  store i64 %19716, i64* %3, align 8
  %19717 = inttoptr i64 %19715 to i64*
  %19718 = load i64, i64* %19717, align 8
  store i64 %19718, i64* %RAX.i3587.phi.trans.insert, align 8
  %19719 = add i64 %19617, -96
  %19720 = add i64 %19649, 30
  store i64 %19720, i64* %3, align 8
  %19721 = inttoptr i64 %19719 to i32*
  %19722 = load i32, i32* %19721, align 4
  %19723 = zext i32 %19722 to i64
  store i64 %19723, i64* %RCX.i4260.pre-phi, align 8
  %19724 = load i64, i64* %RBP.i, align 8
  %19725 = add i64 %19724, -160
  %19726 = add i64 %19649, 36
  store i64 %19726, i64* %3, align 8
  %19727 = inttoptr i64 %19725 to i32*
  %19728 = load i32, i32* %19727, align 4
  %19729 = sub i32 %19722, %19728
  %19730 = zext i32 %19729 to i64
  store i64 %19730, i64* %RCX.i4260.pre-phi, align 8
  %19731 = icmp ult i32 %19722, %19728
  %19732 = zext i1 %19731 to i8
  store i8 %19732, i8* %32, align 1
  %19733 = and i32 %19729, 255
  %19734 = tail call i32 @llvm.ctpop.i32(i32 %19733)
  %19735 = trunc i32 %19734 to i8
  %19736 = and i8 %19735, 1
  %19737 = xor i8 %19736, 1
  store i8 %19737, i8* %39, align 1
  %19738 = xor i32 %19728, %19722
  %19739 = xor i32 %19738, %19729
  %19740 = lshr i32 %19739, 4
  %19741 = trunc i32 %19740 to i8
  %19742 = and i8 %19741, 1
  store i8 %19742, i8* %45, align 1
  %19743 = icmp eq i32 %19729, 0
  %19744 = zext i1 %19743 to i8
  store i8 %19744, i8* %48, align 1
  %19745 = lshr i32 %19729, 31
  %19746 = trunc i32 %19745 to i8
  store i8 %19746, i8* %51, align 1
  %19747 = lshr i32 %19722, 31
  %19748 = lshr i32 %19728, 31
  %19749 = xor i32 %19748, %19747
  %19750 = xor i32 %19745, %19747
  %19751 = add nuw nsw i32 %19750, %19749
  %19752 = icmp eq i32 %19751, 2
  %19753 = zext i1 %19752 to i8
  store i8 %19753, i8* %57, align 1
  %19754 = add i64 %19724, -76
  %19755 = add i64 %19649, 39
  store i64 %19755, i64* %3, align 8
  %19756 = inttoptr i64 %19754 to i32*
  %19757 = load i32, i32* %19756, align 4
  %19758 = add i32 %19757, %19729
  %19759 = zext i32 %19758 to i64
  store i64 %19759, i64* %RCX.i4260.pre-phi, align 8
  %19760 = icmp ult i32 %19758, %19729
  %19761 = icmp ult i32 %19758, %19757
  %19762 = or i1 %19760, %19761
  %19763 = zext i1 %19762 to i8
  store i8 %19763, i8* %32, align 1
  %19764 = and i32 %19758, 255
  %19765 = tail call i32 @llvm.ctpop.i32(i32 %19764)
  %19766 = trunc i32 %19765 to i8
  %19767 = and i8 %19766, 1
  %19768 = xor i8 %19767, 1
  store i8 %19768, i8* %39, align 1
  %19769 = xor i32 %19757, %19729
  %19770 = xor i32 %19769, %19758
  %19771 = lshr i32 %19770, 4
  %19772 = trunc i32 %19771 to i8
  %19773 = and i8 %19772, 1
  store i8 %19773, i8* %45, align 1
  %19774 = icmp eq i32 %19758, 0
  %19775 = zext i1 %19774 to i8
  store i8 %19775, i8* %48, align 1
  %19776 = lshr i32 %19758, 31
  %19777 = trunc i32 %19776 to i8
  store i8 %19777, i8* %51, align 1
  %19778 = lshr i32 %19757, 31
  %19779 = xor i32 %19776, %19745
  %19780 = xor i32 %19776, %19778
  %19781 = add nuw nsw i32 %19779, %19780
  %19782 = icmp eq i32 %19781, 2
  %19783 = zext i1 %19782 to i8
  store i8 %19783, i8* %57, align 1
  %19784 = sext i32 %19758 to i64
  store i64 %19784, i64* %RDX.i4317.pre-phi, align 8
  %19785 = shl nsw i64 %19784, 2
  %19786 = add i64 %19718, %19785
  %19787 = add i64 %19649, 46
  store i64 %19787, i64* %3, align 8
  %19788 = inttoptr i64 %19786 to i32*
  %19789 = load i32, i32* %19788, align 4
  store i8 0, i8* %32, align 1
  %19790 = and i32 %19789, 255
  %19791 = tail call i32 @llvm.ctpop.i32(i32 %19790)
  %19792 = trunc i32 %19791 to i8
  %19793 = and i8 %19792, 1
  %19794 = xor i8 %19793, 1
  store i8 %19794, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %19795 = icmp eq i32 %19789, 0
  %19796 = zext i1 %19795 to i8
  store i8 %19796, i8* %48, align 1
  %19797 = lshr i32 %19789, 31
  %19798 = trunc i32 %19797 to i8
  store i8 %19798, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v526 = select i1 %19795, i64 52, i64 317
  %19799 = add i64 %19649, %.v526
  store i64 %19799, i64* %3, align 8
  br i1 %19795, label %block_422da4, label %block_.L_422ead

block_422da4:                                     ; preds = %block_422d70
  %19800 = load i64, i64* %RBP.i, align 8
  %19801 = add i64 %19800, -132
  %19802 = add i64 %19799, 6
  store i64 %19802, i64* %3, align 8
  %19803 = inttoptr i64 %19801 to i32*
  %19804 = load i32, i32* %19803, align 4
  %19805 = zext i32 %19804 to i64
  store i64 %19805, i64* %RAX.i3587.phi.trans.insert, align 8
  %19806 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %19806, i64* %RCX.i4260.pre-phi, align 8
  %19807 = add i64 %19800, -96
  %19808 = add i64 %19799, 17
  store i64 %19808, i64* %3, align 8
  %19809 = inttoptr i64 %19807 to i32*
  %19810 = load i32, i32* %19809, align 4
  %19811 = zext i32 %19810 to i64
  store i64 %19811, i64* %RDX.i4317.pre-phi, align 8
  %19812 = add i64 %19800, -136
  %19813 = add i64 %19799, 23
  store i64 %19813, i64* %3, align 8
  %19814 = inttoptr i64 %19812 to i32*
  %19815 = load i32, i32* %19814, align 4
  %19816 = zext i32 %19815 to i64
  store i64 %19816, i64* %RSI.i739, align 8
  %19817 = add i64 %19800, -416
  %19818 = add i64 %19799, 30
  store i64 %19818, i64* %3, align 8
  %19819 = inttoptr i64 %19817 to i64*
  store i64 %19806, i64* %19819, align 8
  %19820 = load i32, i32* %ESI.i1656, align 4
  %19821 = zext i32 %19820 to i64
  %19822 = load i64, i64* %3, align 8
  store i64 %19821, i64* %RCX.i4260.pre-phi, align 8
  %19823 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %19824 = add i64 %19822, 4
  store i64 %19824, i64* %3, align 8
  %19825 = trunc i32 %19820 to i5
  switch i5 %19825, label %19832 [
    i5 0, label %routine_shll__cl___edx.exit543
    i5 1, label %19826
  ]

; <label>:19826:                                  ; preds = %block_422da4
  %19827 = trunc i64 %19823 to i32
  %19828 = shl i32 %19827, 1
  %19829 = icmp slt i32 %19827, 0
  %19830 = icmp slt i32 %19828, 0
  %19831 = xor i1 %19829, %19830
  br label %19842

; <label>:19832:                                  ; preds = %block_422da4
  %19833 = and i32 %19820, 31
  %19834 = zext i32 %19833 to i64
  %19835 = add nuw nsw i64 %19834, 4294967295
  %19836 = and i64 %19823, 4294967295
  %19837 = and i64 %19835, 4294967295
  %19838 = shl i64 %19836, %19837
  %19839 = trunc i64 %19838 to i32
  %19840 = icmp slt i32 %19839, 0
  %19841 = shl i32 %19839, 1
  br label %19842

; <label>:19842:                                  ; preds = %19832, %19826
  %19843 = phi i1 [ %19829, %19826 ], [ %19840, %19832 ]
  %19844 = phi i1 [ %19831, %19826 ], [ false, %19832 ]
  %19845 = phi i32 [ %19828, %19826 ], [ %19841, %19832 ]
  %19846 = zext i32 %19845 to i64
  store i64 %19846, i64* %RDX.i4317.pre-phi, align 8
  %19847 = zext i1 %19843 to i8
  store i8 %19847, i8* %32, align 1
  %19848 = and i32 %19845, 254
  %19849 = tail call i32 @llvm.ctpop.i32(i32 %19848)
  %19850 = trunc i32 %19849 to i8
  %19851 = and i8 %19850, 1
  %19852 = xor i8 %19851, 1
  store i8 %19852, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %19853 = icmp eq i32 %19845, 0
  %19854 = zext i1 %19853 to i8
  store i8 %19854, i8* %48, align 1
  %19855 = lshr i32 %19845, 31
  %19856 = trunc i32 %19855 to i8
  store i8 %19856, i8* %51, align 1
  %19857 = zext i1 %19844 to i8
  store i8 %19857, i8* %57, align 1
  br label %routine_shll__cl___edx.exit543

routine_shll__cl___edx.exit543:                   ; preds = %19842, %block_422da4
  %19858 = phi i64 [ %19846, %19842 ], [ %19823, %block_422da4 ]
  %19859 = load i64, i64* %RBP.i, align 8
  %19860 = add i64 %19859, -152
  %19861 = add i64 %19822, 10
  store i64 %19861, i64* %3, align 8
  %19862 = trunc i64 %19858 to i32
  %19863 = inttoptr i64 %19860 to i32*
  %19864 = load i32, i32* %19863, align 4
  %19865 = sub i32 %19862, %19864
  %19866 = zext i32 %19865 to i64
  store i64 %19866, i64* %RDX.i4317.pre-phi, align 8
  %19867 = icmp ult i32 %19862, %19864
  %19868 = zext i1 %19867 to i8
  store i8 %19868, i8* %32, align 1
  %19869 = and i32 %19865, 255
  %19870 = tail call i32 @llvm.ctpop.i32(i32 %19869)
  %19871 = trunc i32 %19870 to i8
  %19872 = and i8 %19871, 1
  %19873 = xor i8 %19872, 1
  store i8 %19873, i8* %39, align 1
  %19874 = xor i32 %19864, %19862
  %19875 = xor i32 %19874, %19865
  %19876 = lshr i32 %19875, 4
  %19877 = trunc i32 %19876 to i8
  %19878 = and i8 %19877, 1
  store i8 %19878, i8* %45, align 1
  %19879 = icmp eq i32 %19865, 0
  %19880 = zext i1 %19879 to i8
  store i8 %19880, i8* %48, align 1
  %19881 = lshr i32 %19865, 31
  %19882 = trunc i32 %19881 to i8
  store i8 %19882, i8* %51, align 1
  %19883 = lshr i32 %19862, 31
  %19884 = lshr i32 %19864, 31
  %19885 = xor i32 %19884, %19883
  %19886 = xor i32 %19881, %19883
  %19887 = add nuw nsw i32 %19886, %19885
  %19888 = icmp eq i32 %19887, 2
  %19889 = zext i1 %19888 to i8
  store i8 %19889, i8* %57, align 1
  %19890 = sext i32 %19865 to i64
  store i64 %19890, i64* %RDI.i1133, align 8
  %19891 = add i64 %19859, -416
  %19892 = add i64 %19822, 20
  store i64 %19892, i64* %3, align 8
  %19893 = inttoptr i64 %19891 to i64*
  %19894 = load i64, i64* %19893, align 8
  store i64 %19894, i64* %R8.i5602, align 8
  %19895 = shl nsw i64 %19890, 2
  %19896 = add i64 %19895, %19894
  %19897 = add i64 %19822, 24
  store i64 %19897, i64* %3, align 8
  %19898 = inttoptr i64 %19896 to i32*
  %19899 = load i32, i32* %19898, align 4
  %19900 = zext i32 %19899 to i64
  store i64 %19900, i64* %RDX.i4317.pre-phi, align 8
  %19901 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %19901, i64* %RDI.i1133, align 8
  %19902 = add i64 %19859, -100
  %19903 = add i64 %19822, 35
  store i64 %19903, i64* %3, align 8
  %19904 = inttoptr i64 %19902 to i32*
  %19905 = load i32, i32* %19904, align 4
  %19906 = zext i32 %19905 to i64
  store i64 %19906, i64* %RSI.i739, align 8
  %19907 = add i64 %19859, -136
  %19908 = add i64 %19822, 41
  store i64 %19908, i64* %3, align 8
  %19909 = inttoptr i64 %19907 to i32*
  %19910 = load i32, i32* %19909, align 4
  %19911 = zext i32 %19910 to i64
  store i64 %19911, i64* %RCX.i4260.pre-phi, align 8
  %19912 = add i64 %19822, 43
  store i64 %19912, i64* %3, align 8
  %19913 = trunc i32 %19910 to i5
  switch i5 %19913, label %19919 [
    i5 0, label %routine_shll__cl___esi.exit518
    i5 1, label %19914
  ]

; <label>:19914:                                  ; preds = %routine_shll__cl___edx.exit543
  %19915 = shl i32 %19905, 1
  %19916 = icmp slt i32 %19905, 0
  %19917 = icmp slt i32 %19915, 0
  %19918 = xor i1 %19916, %19917
  br label %19928

; <label>:19919:                                  ; preds = %routine_shll__cl___edx.exit543
  %19920 = and i32 %19910, 31
  %19921 = zext i32 %19920 to i64
  %19922 = add nuw nsw i64 %19921, 4294967295
  %19923 = and i64 %19922, 4294967295
  %19924 = shl i64 %19906, %19923
  %19925 = trunc i64 %19924 to i32
  %19926 = icmp slt i32 %19925, 0
  %19927 = shl i32 %19925, 1
  br label %19928

; <label>:19928:                                  ; preds = %19919, %19914
  %19929 = phi i1 [ %19916, %19914 ], [ %19926, %19919 ]
  %19930 = phi i1 [ %19918, %19914 ], [ false, %19919 ]
  %19931 = phi i32 [ %19915, %19914 ], [ %19927, %19919 ]
  %19932 = zext i32 %19931 to i64
  store i64 %19932, i64* %RSI.i739, align 8
  %19933 = zext i1 %19929 to i8
  store i8 %19933, i8* %32, align 1
  %19934 = and i32 %19931, 254
  %19935 = tail call i32 @llvm.ctpop.i32(i32 %19934)
  %19936 = trunc i32 %19935 to i8
  %19937 = and i8 %19936, 1
  %19938 = xor i8 %19937, 1
  store i8 %19938, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %19939 = icmp eq i32 %19931, 0
  %19940 = zext i1 %19939 to i8
  store i8 %19940, i8* %48, align 1
  %19941 = lshr i32 %19931, 31
  %19942 = trunc i32 %19941 to i8
  store i8 %19942, i8* %51, align 1
  %19943 = zext i1 %19930 to i8
  store i8 %19943, i8* %57, align 1
  br label %routine_shll__cl___esi.exit518

routine_shll__cl___esi.exit518:                   ; preds = %19928, %routine_shll__cl___edx.exit543
  %19944 = phi i32 [ %19931, %19928 ], [ %19905, %routine_shll__cl___edx.exit543 ]
  %19945 = add i64 %19859, -156
  %19946 = add i64 %19822, 49
  store i64 %19946, i64* %3, align 8
  %19947 = inttoptr i64 %19945 to i32*
  %19948 = load i32, i32* %19947, align 4
  %19949 = sub i32 %19944, %19948
  %19950 = zext i32 %19949 to i64
  store i64 %19950, i64* %RSI.i739, align 8
  %19951 = icmp ult i32 %19944, %19948
  %19952 = zext i1 %19951 to i8
  store i8 %19952, i8* %32, align 1
  %19953 = and i32 %19949, 255
  %19954 = tail call i32 @llvm.ctpop.i32(i32 %19953)
  %19955 = trunc i32 %19954 to i8
  %19956 = and i8 %19955, 1
  %19957 = xor i8 %19956, 1
  store i8 %19957, i8* %39, align 1
  %19958 = xor i32 %19948, %19944
  %19959 = xor i32 %19958, %19949
  %19960 = lshr i32 %19959, 4
  %19961 = trunc i32 %19960 to i8
  %19962 = and i8 %19961, 1
  store i8 %19962, i8* %45, align 1
  %19963 = icmp eq i32 %19949, 0
  %19964 = zext i1 %19963 to i8
  store i8 %19964, i8* %48, align 1
  %19965 = lshr i32 %19949, 31
  %19966 = trunc i32 %19965 to i8
  store i8 %19966, i8* %51, align 1
  %19967 = lshr i32 %19944, 31
  %19968 = lshr i32 %19948, 31
  %19969 = xor i32 %19968, %19967
  %19970 = xor i32 %19965, %19967
  %19971 = add nuw nsw i32 %19970, %19969
  %19972 = icmp eq i32 %19971, 2
  %19973 = zext i1 %19972 to i8
  store i8 %19973, i8* %57, align 1
  %19974 = sext i32 %19949 to i64
  store i64 %19974, i64* %R9.i5580, align 8
  %19975 = shl nsw i64 %19974, 2
  %19976 = add i64 %19901, %19975
  %19977 = add i64 %19822, 56
  store i64 %19977, i64* %3, align 8
  %19978 = inttoptr i64 %19976 to i32*
  %19979 = load i32, i32* %19978, align 4
  %19980 = add i32 %19979, %19899
  %19981 = zext i32 %19980 to i64
  store i64 %19981, i64* %RDX.i4317.pre-phi, align 8
  %19982 = icmp ult i32 %19980, %19899
  %19983 = icmp ult i32 %19980, %19979
  %19984 = or i1 %19982, %19983
  %19985 = zext i1 %19984 to i8
  store i8 %19985, i8* %32, align 1
  %19986 = and i32 %19980, 255
  %19987 = tail call i32 @llvm.ctpop.i32(i32 %19986)
  %19988 = trunc i32 %19987 to i8
  %19989 = and i8 %19988, 1
  %19990 = xor i8 %19989, 1
  store i8 %19990, i8* %39, align 1
  %19991 = xor i32 %19979, %19899
  %19992 = xor i32 %19991, %19980
  %19993 = lshr i32 %19992, 4
  %19994 = trunc i32 %19993 to i8
  %19995 = and i8 %19994, 1
  store i8 %19995, i8* %45, align 1
  %19996 = icmp eq i32 %19980, 0
  %19997 = zext i1 %19996 to i8
  store i8 %19997, i8* %48, align 1
  %19998 = lshr i32 %19980, 31
  %19999 = trunc i32 %19998 to i8
  store i8 %19999, i8* %51, align 1
  %20000 = lshr i32 %19899, 31
  %20001 = lshr i32 %19979, 31
  %20002 = xor i32 %19998, %20000
  %20003 = xor i32 %19998, %20001
  %20004 = add nuw nsw i32 %20002, %20003
  %20005 = icmp eq i32 %20004, 2
  %20006 = zext i1 %20005 to i8
  store i8 %20006, i8* %57, align 1
  %20007 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %20008 = shl i64 %20007, 32
  %20009 = ashr exact i64 %20008, 32
  %20010 = sext i32 %19980 to i64
  %20011 = mul nsw i64 %20010, %20009
  %20012 = shl i64 %20011, 32
  %20013 = ashr i64 %20012, 47
  %20014 = lshr i64 %20013, 1
  %20015 = trunc i64 %20013 to i8
  %20016 = and i8 %20015, 1
  %20017 = trunc i64 %20014 to i32
  %20018 = and i64 %20014, 4294967295
  store i64 %20018, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %20016, i8* %32, align 1
  %20019 = and i32 %20017, 255
  %20020 = tail call i32 @llvm.ctpop.i32(i32 %20019)
  %20021 = trunc i32 %20020 to i8
  %20022 = and i8 %20021, 1
  %20023 = xor i8 %20022, 1
  store i8 %20023, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %20024 = icmp eq i32 %20017, 0
  %20025 = zext i1 %20024 to i8
  store i8 %20025, i8* %48, align 1
  %20026 = lshr i64 %20013, 32
  %20027 = trunc i64 %20026 to i8
  %20028 = and i8 %20027, 1
  store i8 %20028, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %20029 = load i64, i64* %RBP.i, align 8
  %20030 = add i64 %20029, -104
  %20031 = trunc i64 %20014 to i32
  %20032 = add i64 %19822, 65
  store i64 %20032, i64* %3, align 8
  %20033 = inttoptr i64 %20030 to i32*
  store i32 %20031, i32* %20033, align 4
  %20034 = load i64, i64* %RBP.i, align 8
  %20035 = add i64 %20034, -128
  %20036 = load i64, i64* %3, align 8
  %20037 = add i64 %20036, 4
  store i64 %20037, i64* %3, align 8
  %20038 = inttoptr i64 %20035 to i64*
  %20039 = load i64, i64* %20038, align 8
  store i64 %20039, i64* %RDI.i1133, align 8
  %20040 = add i64 %20034, -32
  %20041 = add i64 %20036, 8
  store i64 %20041, i64* %3, align 8
  %20042 = inttoptr i64 %20040 to i64*
  %20043 = load i64, i64* %20042, align 8
  store i64 %20043, i64* %RSI.i739, align 8
  %20044 = add i64 %20034, -112
  %20045 = add i64 %20036, 12
  store i64 %20045, i64* %3, align 8
  %20046 = inttoptr i64 %20044 to i64*
  %20047 = load i64, i64* %20046, align 8
  store i64 %20047, i64* %RDX.i4317.pre-phi, align 8
  %20048 = add i64 %20034, -140
  %20049 = add i64 %20036, 18
  store i64 %20049, i64* %3, align 8
  %20050 = inttoptr i64 %20048 to i32*
  %20051 = load i32, i32* %20050, align 4
  %20052 = zext i32 %20051 to i64
  store i64 %20052, i64* %RCX.i4260.pre-phi, align 8
  %20053 = add i64 %20034, -144
  %20054 = add i64 %20036, 25
  store i64 %20054, i64* %3, align 8
  %20055 = inttoptr i64 %20053 to i32*
  %20056 = load i32, i32* %20055, align 4
  %20057 = zext i32 %20056 to i64
  store i64 %20057, i64* %R8.i5602, align 8
  %20058 = add i64 %20034, -148
  %20059 = add i64 %20036, 32
  store i64 %20059, i64* %3, align 8
  %20060 = inttoptr i64 %20058 to i32*
  %20061 = load i32, i32* %20060, align 4
  %20062 = zext i32 %20061 to i64
  store i64 %20062, i64* %R9.i5580, align 8
  %20063 = add i64 %20034, -104
  %20064 = add i64 %20036, 35
  store i64 %20064, i64* %3, align 8
  %20065 = inttoptr i64 %20063 to i32*
  %20066 = load i32, i32* %20065, align 4
  %20067 = zext i32 %20066 to i64
  store i64 %20067, i64* %RAX.i3587.phi.trans.insert, align 8
  %20068 = add i64 %20034, -80
  %20069 = add i64 %20036, 39
  store i64 %20069, i64* %3, align 8
  %20070 = inttoptr i64 %20068 to i32*
  %20071 = load i32, i32* %20070, align 4
  %20072 = zext i32 %20071 to i64
  store i64 %20072, i64* %68, align 8
  %20073 = add i64 %20034, -96
  %20074 = add i64 %20036, 43
  store i64 %20074, i64* %3, align 8
  %20075 = inttoptr i64 %20073 to i32*
  %20076 = load i32, i32* %20075, align 4
  %20077 = zext i32 %20076 to i64
  store i64 %20077, i64* %R11.i, align 8
  %20078 = add i64 %20034, -100
  %20079 = add i64 %20036, 46
  store i64 %20079, i64* %3, align 8
  %20080 = inttoptr i64 %20078 to i32*
  %20081 = load i32, i32* %20080, align 4
  %20082 = zext i32 %20081 to i64
  store i64 %20082, i64* %RBX.i615, align 8
  %20083 = load i32*, i32** %2119, align 8
  %20084 = add i64 %20036, 49
  store i64 %20084, i64* %3, align 8
  store i32 %20066, i32* %20083, align 4
  %20085 = load i64, i64* %6, align 8
  %20086 = add i64 %20085, 8
  %20087 = load i32, i32* %R10D.i761, align 4
  %20088 = load i64, i64* %3, align 8
  %20089 = add i64 %20088, 5
  store i64 %20089, i64* %3, align 8
  %20090 = inttoptr i64 %20086 to i32*
  store i32 %20087, i32* %20090, align 4
  %20091 = load i64, i64* %6, align 8
  %20092 = add i64 %20091, 16
  %20093 = load i32, i32* %R11D.i5540, align 4
  %20094 = load i64, i64* %3, align 8
  %20095 = add i64 %20094, 5
  store i64 %20095, i64* %3, align 8
  %20096 = inttoptr i64 %20092 to i32*
  store i32 %20093, i32* %20096, align 4
  %20097 = load i64, i64* %6, align 8
  %20098 = add i64 %20097, 24
  %20099 = load i32, i32* %EBX.i5525, align 4
  %20100 = load i64, i64* %3, align 8
  %20101 = add i64 %20100, 4
  store i64 %20101, i64* %3, align 8
  %20102 = inttoptr i64 %20098 to i32*
  store i32 %20099, i32* %20102, align 4
  %20103 = load i64, i64* %3, align 8
  %20104 = add i64 %20103, -10642
  %20105 = add i64 %20103, 5
  %20106 = load i64, i64* %6, align 8
  %20107 = add i64 %20106, -8
  %20108 = inttoptr i64 %20107 to i64*
  store i64 %20105, i64* %20108, align 8
  store i64 %20107, i64* %6, align 8
  store i64 %20104, i64* %3, align 8
  %call2_422e42 = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %20104, %struct.Memory* %19615)
  %20109 = load i64, i64* %RBP.i, align 8
  %20110 = add i64 %20109, -104
  %20111 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %20112 = load i64, i64* %3, align 8
  %20113 = add i64 %20112, 3
  store i64 %20113, i64* %3, align 8
  %20114 = inttoptr i64 %20110 to i32*
  store i32 %20111, i32* %20114, align 4
  %20115 = load i64, i64* %RBP.i, align 8
  %20116 = add i64 %20115, -104
  %20117 = load i64, i64* %3, align 8
  %20118 = add i64 %20117, 3
  store i64 %20118, i64* %3, align 8
  %20119 = inttoptr i64 %20116 to i32*
  %20120 = load i32, i32* %20119, align 4
  %20121 = zext i32 %20120 to i64
  store i64 %20121, i64* %RAX.i3587.phi.trans.insert, align 8
  %20122 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %20122, i64* %RDX.i4317.pre-phi, align 8
  %20123 = add i64 %20115, -100
  %20124 = add i64 %20117, 14
  store i64 %20124, i64* %3, align 8
  %20125 = inttoptr i64 %20123 to i32*
  %20126 = load i32, i32* %20125, align 4
  %20127 = zext i32 %20126 to i64
  store i64 %20127, i64* %RCX.i4260.pre-phi, align 8
  %20128 = add i64 %20115, -164
  %20129 = add i64 %20117, 20
  store i64 %20129, i64* %3, align 8
  %20130 = inttoptr i64 %20128 to i32*
  %20131 = load i32, i32* %20130, align 4
  %20132 = sub i32 %20126, %20131
  %20133 = zext i32 %20132 to i64
  store i64 %20133, i64* %RCX.i4260.pre-phi, align 8
  %20134 = icmp ult i32 %20126, %20131
  %20135 = zext i1 %20134 to i8
  store i8 %20135, i8* %32, align 1
  %20136 = and i32 %20132, 255
  %20137 = tail call i32 @llvm.ctpop.i32(i32 %20136)
  %20138 = trunc i32 %20137 to i8
  %20139 = and i8 %20138, 1
  %20140 = xor i8 %20139, 1
  store i8 %20140, i8* %39, align 1
  %20141 = xor i32 %20131, %20126
  %20142 = xor i32 %20141, %20132
  %20143 = lshr i32 %20142, 4
  %20144 = trunc i32 %20143 to i8
  %20145 = and i8 %20144, 1
  store i8 %20145, i8* %45, align 1
  %20146 = icmp eq i32 %20132, 0
  %20147 = zext i1 %20146 to i8
  store i8 %20147, i8* %48, align 1
  %20148 = lshr i32 %20132, 31
  %20149 = trunc i32 %20148 to i8
  store i8 %20149, i8* %51, align 1
  %20150 = lshr i32 %20126, 31
  %20151 = lshr i32 %20131, 31
  %20152 = xor i32 %20151, %20150
  %20153 = xor i32 %20148, %20150
  %20154 = add nuw nsw i32 %20153, %20152
  %20155 = icmp eq i32 %20154, 2
  %20156 = zext i1 %20155 to i8
  store i8 %20156, i8* %57, align 1
  %20157 = add i64 %20115, -76
  %20158 = add i64 %20117, 23
  store i64 %20158, i64* %3, align 8
  %20159 = inttoptr i64 %20157 to i32*
  %20160 = load i32, i32* %20159, align 4
  %20161 = add i32 %20160, %20132
  %20162 = zext i32 %20161 to i64
  store i64 %20162, i64* %RCX.i4260.pre-phi, align 8
  %20163 = icmp ult i32 %20161, %20132
  %20164 = icmp ult i32 %20161, %20160
  %20165 = or i1 %20163, %20164
  %20166 = zext i1 %20165 to i8
  store i8 %20166, i8* %32, align 1
  %20167 = and i32 %20161, 255
  %20168 = tail call i32 @llvm.ctpop.i32(i32 %20167)
  %20169 = trunc i32 %20168 to i8
  %20170 = and i8 %20169, 1
  %20171 = xor i8 %20170, 1
  store i8 %20171, i8* %39, align 1
  %20172 = xor i32 %20160, %20132
  %20173 = xor i32 %20172, %20161
  %20174 = lshr i32 %20173, 4
  %20175 = trunc i32 %20174 to i8
  %20176 = and i8 %20175, 1
  store i8 %20176, i8* %45, align 1
  %20177 = icmp eq i32 %20161, 0
  %20178 = zext i1 %20177 to i8
  store i8 %20178, i8* %48, align 1
  %20179 = lshr i32 %20161, 31
  %20180 = trunc i32 %20179 to i8
  store i8 %20180, i8* %51, align 1
  %20181 = lshr i32 %20160, 31
  %20182 = xor i32 %20179, %20148
  %20183 = xor i32 %20179, %20181
  %20184 = add nuw nsw i32 %20182, %20183
  %20185 = icmp eq i32 %20184, 2
  %20186 = zext i1 %20185 to i8
  store i8 %20186, i8* %57, align 1
  %20187 = sext i32 %20161 to i64
  store i64 %20187, i64* %RSI.i739, align 8
  %20188 = shl nsw i64 %20187, 3
  %20189 = add i64 %20122, %20188
  %20190 = add i64 %20117, 30
  store i64 %20190, i64* %3, align 8
  %20191 = inttoptr i64 %20189 to i64*
  %20192 = load i64, i64* %20191, align 8
  store i64 %20192, i64* %RDX.i4317.pre-phi, align 8
  %20193 = load i64, i64* %RBP.i, align 8
  %20194 = add i64 %20193, -96
  %20195 = add i64 %20117, 33
  store i64 %20195, i64* %3, align 8
  %20196 = inttoptr i64 %20194 to i32*
  %20197 = load i32, i32* %20196, align 4
  %20198 = zext i32 %20197 to i64
  store i64 %20198, i64* %RCX.i4260.pre-phi, align 8
  %20199 = add i64 %20193, -160
  %20200 = add i64 %20117, 39
  store i64 %20200, i64* %3, align 8
  %20201 = inttoptr i64 %20199 to i32*
  %20202 = load i32, i32* %20201, align 4
  %20203 = sub i32 %20197, %20202
  %20204 = zext i32 %20203 to i64
  store i64 %20204, i64* %RCX.i4260.pre-phi, align 8
  %20205 = icmp ult i32 %20197, %20202
  %20206 = zext i1 %20205 to i8
  store i8 %20206, i8* %32, align 1
  %20207 = and i32 %20203, 255
  %20208 = tail call i32 @llvm.ctpop.i32(i32 %20207)
  %20209 = trunc i32 %20208 to i8
  %20210 = and i8 %20209, 1
  %20211 = xor i8 %20210, 1
  store i8 %20211, i8* %39, align 1
  %20212 = xor i32 %20202, %20197
  %20213 = xor i32 %20212, %20203
  %20214 = lshr i32 %20213, 4
  %20215 = trunc i32 %20214 to i8
  %20216 = and i8 %20215, 1
  store i8 %20216, i8* %45, align 1
  %20217 = icmp eq i32 %20203, 0
  %20218 = zext i1 %20217 to i8
  store i8 %20218, i8* %48, align 1
  %20219 = lshr i32 %20203, 31
  %20220 = trunc i32 %20219 to i8
  store i8 %20220, i8* %51, align 1
  %20221 = lshr i32 %20197, 31
  %20222 = lshr i32 %20202, 31
  %20223 = xor i32 %20222, %20221
  %20224 = xor i32 %20219, %20221
  %20225 = add nuw nsw i32 %20224, %20223
  %20226 = icmp eq i32 %20225, 2
  %20227 = zext i1 %20226 to i8
  store i8 %20227, i8* %57, align 1
  %20228 = add i64 %20193, -76
  %20229 = add i64 %20117, 42
  store i64 %20229, i64* %3, align 8
  %20230 = inttoptr i64 %20228 to i32*
  %20231 = load i32, i32* %20230, align 4
  %20232 = add i32 %20231, %20203
  %20233 = zext i32 %20232 to i64
  store i64 %20233, i64* %RCX.i4260.pre-phi, align 8
  %20234 = icmp ult i32 %20232, %20203
  %20235 = icmp ult i32 %20232, %20231
  %20236 = or i1 %20234, %20235
  %20237 = zext i1 %20236 to i8
  store i8 %20237, i8* %32, align 1
  %20238 = and i32 %20232, 255
  %20239 = tail call i32 @llvm.ctpop.i32(i32 %20238)
  %20240 = trunc i32 %20239 to i8
  %20241 = and i8 %20240, 1
  %20242 = xor i8 %20241, 1
  store i8 %20242, i8* %39, align 1
  %20243 = xor i32 %20231, %20203
  %20244 = xor i32 %20243, %20232
  %20245 = lshr i32 %20244, 4
  %20246 = trunc i32 %20245 to i8
  %20247 = and i8 %20246, 1
  store i8 %20247, i8* %45, align 1
  %20248 = icmp eq i32 %20232, 0
  %20249 = zext i1 %20248 to i8
  store i8 %20249, i8* %48, align 1
  %20250 = lshr i32 %20232, 31
  %20251 = trunc i32 %20250 to i8
  store i8 %20251, i8* %51, align 1
  %20252 = lshr i32 %20231, 31
  %20253 = xor i32 %20250, %20219
  %20254 = xor i32 %20250, %20252
  %20255 = add nuw nsw i32 %20253, %20254
  %20256 = icmp eq i32 %20255, 2
  %20257 = zext i1 %20256 to i8
  store i8 %20257, i8* %57, align 1
  %20258 = sext i32 %20232 to i64
  store i64 %20258, i64* %RSI.i739, align 8
  %20259 = shl nsw i64 %20258, 2
  %20260 = add i64 %20192, %20259
  %20261 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %20262 = add i64 %20117, 48
  store i64 %20262, i64* %3, align 8
  %20263 = inttoptr i64 %20260 to i32*
  store i32 %20261, i32* %20263, align 4
  %20264 = load i64, i64* %RBP.i, align 8
  %20265 = add i64 %20264, -104
  %20266 = load i64, i64* %3, align 8
  %20267 = add i64 %20266, 3
  store i64 %20267, i64* %3, align 8
  %20268 = inttoptr i64 %20265 to i32*
  %20269 = load i32, i32* %20268, align 4
  %20270 = zext i32 %20269 to i64
  store i64 %20270, i64* %RAX.i3587.phi.trans.insert, align 8
  %20271 = add i64 %20264, -80
  %20272 = add i64 %20266, 6
  store i64 %20272, i64* %3, align 8
  %20273 = inttoptr i64 %20271 to i32*
  %20274 = load i32, i32* %20273, align 4
  %20275 = sub i32 %20269, %20274
  %20276 = icmp ult i32 %20269, %20274
  %20277 = zext i1 %20276 to i8
  store i8 %20277, i8* %32, align 1
  %20278 = and i32 %20275, 255
  %20279 = tail call i32 @llvm.ctpop.i32(i32 %20278)
  %20280 = trunc i32 %20279 to i8
  %20281 = and i8 %20280, 1
  %20282 = xor i8 %20281, 1
  store i8 %20282, i8* %39, align 1
  %20283 = xor i32 %20274, %20269
  %20284 = xor i32 %20283, %20275
  %20285 = lshr i32 %20284, 4
  %20286 = trunc i32 %20285 to i8
  %20287 = and i8 %20286, 1
  store i8 %20287, i8* %45, align 1
  %20288 = icmp eq i32 %20275, 0
  %20289 = zext i1 %20288 to i8
  store i8 %20289, i8* %48, align 1
  %20290 = lshr i32 %20275, 31
  %20291 = trunc i32 %20290 to i8
  store i8 %20291, i8* %51, align 1
  %20292 = lshr i32 %20269, 31
  %20293 = lshr i32 %20274, 31
  %20294 = xor i32 %20293, %20292
  %20295 = xor i32 %20290, %20292
  %20296 = add nuw nsw i32 %20295, %20294
  %20297 = icmp eq i32 %20296, 2
  %20298 = zext i1 %20297 to i8
  store i8 %20298, i8* %57, align 1
  %20299 = icmp ne i8 %20291, 0
  %20300 = xor i1 %20299, %20297
  %.v527 = select i1 %20300, i64 12, i64 46
  %20301 = add i64 %20266, %.v527
  store i64 %20301, i64* %3, align 8
  br i1 %20300, label %block_422e86, label %block_.L_422ea8

block_422e86:                                     ; preds = %routine_shll__cl___esi.exit518
  %20302 = add i64 %20264, -96
  %20303 = add i64 %20301, 3
  store i64 %20303, i64* %3, align 8
  %20304 = inttoptr i64 %20302 to i32*
  %20305 = load i32, i32* %20304, align 4
  %20306 = zext i32 %20305 to i64
  store i64 %20306, i64* %RAX.i3587.phi.trans.insert, align 8
  %20307 = add i64 %20264, -168
  %20308 = add i64 %20301, 9
  store i64 %20308, i64* %3, align 8
  %20309 = inttoptr i64 %20307 to i32*
  store i32 %20305, i32* %20309, align 4
  %20310 = load i64, i64* %RBP.i, align 8
  %20311 = add i64 %20310, -100
  %20312 = load i64, i64* %3, align 8
  %20313 = add i64 %20312, 3
  store i64 %20313, i64* %3, align 8
  %20314 = inttoptr i64 %20311 to i32*
  %20315 = load i32, i32* %20314, align 4
  %20316 = zext i32 %20315 to i64
  store i64 %20316, i64* %RAX.i3587.phi.trans.insert, align 8
  %20317 = add i64 %20310, -172
  %20318 = add i64 %20312, 9
  store i64 %20318, i64* %3, align 8
  %20319 = inttoptr i64 %20317 to i32*
  store i32 %20315, i32* %20319, align 4
  %20320 = load i64, i64* %RBP.i, align 8
  %20321 = add i64 %20320, -104
  %20322 = load i64, i64* %3, align 8
  %20323 = add i64 %20322, 3
  store i64 %20323, i64* %3, align 8
  %20324 = inttoptr i64 %20321 to i32*
  %20325 = load i32, i32* %20324, align 4
  %20326 = zext i32 %20325 to i64
  store i64 %20326, i64* %RAX.i3587.phi.trans.insert, align 8
  %20327 = add i64 %20320, -80
  %20328 = add i64 %20322, 6
  store i64 %20328, i64* %3, align 8
  %20329 = inttoptr i64 %20327 to i32*
  store i32 %20325, i32* %20329, align 4
  %20330 = load i64, i64* %RBP.i, align 8
  %20331 = add i64 %20330, -200
  %20332 = load i64, i64* %3, align 8
  %20333 = add i64 %20332, 10
  store i64 %20333, i64* %3, align 8
  %20334 = inttoptr i64 %20331 to i32*
  store i32 0, i32* %20334, align 4
  %.pre400 = load i64, i64* %3, align 8
  br label %block_.L_422ea8

block_.L_422ea8:                                  ; preds = %routine_shll__cl___esi.exit518, %block_422e86
  %20335 = phi i64 [ %20301, %routine_shll__cl___esi.exit518 ], [ %.pre400, %block_422e86 ]
  %20336 = add i64 %20335, 5
  store i64 %20336, i64* %3, align 8
  br label %block_.L_422ead

block_.L_422ead:                                  ; preds = %block_422d70, %block_.L_422ea8
  %20337 = phi i64 [ %19799, %block_422d70 ], [ %20336, %block_.L_422ea8 ]
  %MEMORY.88 = phi %struct.Memory* [ %19615, %block_422d70 ], [ %call2_422e42, %block_.L_422ea8 ]
  %20338 = add i64 %20337, 5
  store i64 %20338, i64* %3, align 8
  %.pre401 = load i64, i64* %RBP.i, align 8
  br label %block_.L_422eb2

block_.L_422eb2:                                  ; preds = %block_422d57, %block_422d10, %block_.L_422ead
  %20339 = phi i64 [ %19543, %block_422d10 ], [ %19617, %block_422d57 ], [ %.pre401, %block_.L_422ead ]
  %20340 = phi i64 [ %19575, %block_422d10 ], [ %19649, %block_422d57 ], [ %20338, %block_.L_422ead ]
  %MEMORY.89 = phi %struct.Memory* [ %19541, %block_422d10 ], [ %19615, %block_422d57 ], [ %MEMORY.88, %block_.L_422ead ]
  %20341 = add i64 %20339, -192
  %20342 = add i64 %20340, 11
  store i64 %20342, i64* %3, align 8
  %20343 = inttoptr i64 %20341 to i32*
  %20344 = load i32, i32* %20343, align 4
  %20345 = add i32 %20344, 1
  %20346 = zext i32 %20345 to i64
  store i64 %20346, i64* %RAX.i3587.phi.trans.insert, align 8
  %20347 = icmp eq i32 %20344, -1
  %20348 = icmp eq i32 %20345, 0
  %20349 = or i1 %20347, %20348
  %20350 = zext i1 %20349 to i8
  store i8 %20350, i8* %32, align 1
  %20351 = and i32 %20345, 255
  %20352 = tail call i32 @llvm.ctpop.i32(i32 %20351)
  %20353 = trunc i32 %20352 to i8
  %20354 = and i8 %20353, 1
  %20355 = xor i8 %20354, 1
  store i8 %20355, i8* %39, align 1
  %20356 = xor i32 %20345, %20344
  %20357 = lshr i32 %20356, 4
  %20358 = trunc i32 %20357 to i8
  %20359 = and i8 %20358, 1
  store i8 %20359, i8* %45, align 1
  %20360 = zext i1 %20348 to i8
  store i8 %20360, i8* %48, align 1
  %20361 = lshr i32 %20345, 31
  %20362 = trunc i32 %20361 to i8
  store i8 %20362, i8* %51, align 1
  %20363 = lshr i32 %20344, 31
  %20364 = xor i32 %20361, %20363
  %20365 = add nuw nsw i32 %20364, %20361
  %20366 = icmp eq i32 %20365, 2
  %20367 = zext i1 %20366 to i8
  store i8 %20367, i8* %57, align 1
  %20368 = add i64 %20340, 20
  store i64 %20368, i64* %3, align 8
  store i32 %20345, i32* %20343, align 4
  %20369 = load i64, i64* %3, align 8
  %20370 = add i64 %20369, -451
  store i64 %20370, i64* %3, align 8
  br label %block_.L_422d03

block_.L_422ecb:                                  ; preds = %block_.L_422d03
  %20371 = add i64 %19381, -200
  %20372 = add i64 %19409, 7
  store i64 %20372, i64* %3, align 8
  %20373 = inttoptr i64 %20371 to i32*
  %20374 = load i32, i32* %20373, align 4
  store i8 0, i8* %32, align 1
  %20375 = and i32 %20374, 255
  %20376 = tail call i32 @llvm.ctpop.i32(i32 %20375)
  %20377 = trunc i32 %20376 to i8
  %20378 = and i8 %20377, 1
  %20379 = xor i8 %20378, 1
  store i8 %20379, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %20380 = icmp eq i32 %20374, 0
  %20381 = zext i1 %20380 to i8
  store i8 %20381, i8* %48, align 1
  %20382 = lshr i32 %20374, 31
  %20383 = trunc i32 %20382 to i8
  store i8 %20383, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v523 = select i1 %20380, i64 18, i64 13
  %20384 = add i64 %19409, %.v523
  store i64 %20384, i64* %3, align 8
  br i1 %20380, label %block_.L_422edd, label %block_422ed8

block_422ed8:                                     ; preds = %block_.L_422ecb
  %20385 = add i64 %20384, 49
  store i64 %20385, i64* %3, align 8
  br label %block_.L_422f0e

block_.L_422edd:                                  ; preds = %block_.L_422ecb
  %20386 = add i64 %19381, -168
  %20387 = add i64 %20384, 6
  store i64 %20387, i64* %3, align 8
  %20388 = inttoptr i64 %20386 to i32*
  %20389 = load i32, i32* %20388, align 4
  %20390 = zext i32 %20389 to i64
  store i64 %20390, i64* %RAX.i3587.phi.trans.insert, align 8
  %20391 = add i64 %19381, -184
  %20392 = add i64 %20384, 12
  store i64 %20392, i64* %3, align 8
  %20393 = inttoptr i64 %20391 to i32*
  store i32 %20389, i32* %20393, align 4
  %20394 = load i64, i64* %RBP.i, align 8
  %20395 = add i64 %20394, -172
  %20396 = load i64, i64* %3, align 8
  %20397 = add i64 %20396, 6
  store i64 %20397, i64* %3, align 8
  %20398 = inttoptr i64 %20395 to i32*
  %20399 = load i32, i32* %20398, align 4
  %20400 = zext i32 %20399 to i64
  store i64 %20400, i64* %RAX.i3587.phi.trans.insert, align 8
  %20401 = add i64 %20394, -180
  %20402 = add i64 %20396, 12
  store i64 %20402, i64* %3, align 8
  %20403 = inttoptr i64 %20401 to i32*
  store i32 %20399, i32* %20403, align 4
  %20404 = load i64, i64* %RBP.i, align 8
  %20405 = add i64 %20404, -188
  %20406 = load i64, i64* %3, align 8
  %20407 = add i64 %20406, 6
  store i64 %20407, i64* %3, align 8
  %20408 = inttoptr i64 %20405 to i32*
  %20409 = load i32, i32* %20408, align 4
  %20410 = add i32 %20409, 1
  %20411 = zext i32 %20410 to i64
  store i64 %20411, i64* %RAX.i3587.phi.trans.insert, align 8
  %20412 = icmp eq i32 %20409, -1
  %20413 = icmp eq i32 %20410, 0
  %20414 = or i1 %20412, %20413
  %20415 = zext i1 %20414 to i8
  store i8 %20415, i8* %32, align 1
  %20416 = and i32 %20410, 255
  %20417 = tail call i32 @llvm.ctpop.i32(i32 %20416)
  %20418 = trunc i32 %20417 to i8
  %20419 = and i8 %20418, 1
  %20420 = xor i8 %20419, 1
  store i8 %20420, i8* %39, align 1
  %20421 = xor i32 %20410, %20409
  %20422 = lshr i32 %20421, 4
  %20423 = trunc i32 %20422 to i8
  %20424 = and i8 %20423, 1
  store i8 %20424, i8* %45, align 1
  %20425 = zext i1 %20413 to i8
  store i8 %20425, i8* %48, align 1
  %20426 = lshr i32 %20410, 31
  %20427 = trunc i32 %20426 to i8
  store i8 %20427, i8* %51, align 1
  %20428 = lshr i32 %20409, 31
  %20429 = xor i32 %20426, %20428
  %20430 = add nuw nsw i32 %20429, %20426
  %20431 = icmp eq i32 %20430, 2
  %20432 = zext i1 %20431 to i8
  store i8 %20432, i8* %57, align 1
  %20433 = add i64 %20406, 15
  store i64 %20433, i64* %3, align 8
  store i32 %20410, i32* %20408, align 4
  %20434 = load i64, i64* %3, align 8
  %20435 = add i64 %20434, -548
  store i64 %20435, i64* %3, align 8
  br label %block_.L_422ce0

block_.L_422f0e.loopexit:                         ; preds = %block_.L_422ce0
  br label %block_.L_422f0e

block_.L_422f0e.loopexit721:                      ; preds = %routine_ucomiss__xmm0___xmm1.exit807, %routine_ucomiss__xmm0___xmm1.exit759, %routine_ucomiss__xmm0___xmm1.exit714
  %.ph = phi i64 [ %19179, %routine_ucomiss__xmm0___xmm1.exit714 ], [ %18996, %routine_ucomiss__xmm0___xmm1.exit759 ], [ %18778, %routine_ucomiss__xmm0___xmm1.exit807 ]
  %.sink163.ph = phi i64 [ 692, %routine_ucomiss__xmm0___xmm1.exit714 ], [ 792, %routine_ucomiss__xmm0___xmm1.exit759 ], [ 902, %routine_ucomiss__xmm0___xmm1.exit807 ]
  %MEMORY.91.ph = phi %struct.Memory* [ %19176, %routine_ucomiss__xmm0___xmm1.exit714 ], [ %18993, %routine_ucomiss__xmm0___xmm1.exit759 ], [ %18775, %routine_ucomiss__xmm0___xmm1.exit807 ]
  br label %block_.L_422f0e

block_.L_422f0e:                                  ; preds = %block_.L_422f0e.loopexit721, %block_.L_422f0e.loopexit, %routine_ucomiss__xmm0___xmm1.exit4315, %block_422ed8, %routine_ucomiss__xmm0___xmm1.exit1185, %routine_ucomiss__xmm0___xmm1.exit1231, %routine_ucomiss__xmm0___xmm1.exit1280, %routine_ucomiss__xmm0___xmm1.exit1630, %routine_ucomiss__xmm0___xmm1.exit1676, %routine_ucomiss__xmm0___xmm1.exit1724, %routine_ucomiss__xmm0___xmm1.exit2901, %routine_ucomiss__xmm0___xmm1.exit2946, %routine_ucomiss__xmm0___xmm1.exit2995
  %20436 = phi i64 [ %10857, %routine_ucomiss__xmm0___xmm1.exit2995 ], [ %11089, %routine_ucomiss__xmm0___xmm1.exit2946 ], [ %11286, %routine_ucomiss__xmm0___xmm1.exit2901 ], [ %15368, %routine_ucomiss__xmm0___xmm1.exit1724 ], [ %15600, %routine_ucomiss__xmm0___xmm1.exit1676 ], [ %15797, %routine_ucomiss__xmm0___xmm1.exit1630 ], [ %17031, %routine_ucomiss__xmm0___xmm1.exit1280 ], [ %17263, %routine_ucomiss__xmm0___xmm1.exit1231 ], [ %17460, %routine_ucomiss__xmm0___xmm1.exit1185 ], [ %20385, %block_422ed8 ], [ %6301, %routine_ucomiss__xmm0___xmm1.exit4315 ], [ %19371, %block_.L_422f0e.loopexit ], [ %.ph, %block_.L_422f0e.loopexit721 ]
  %.sink163 = phi i64 [ 4684, %routine_ucomiss__xmm0___xmm1.exit2995 ], [ 4574, %routine_ucomiss__xmm0___xmm1.exit2946 ], [ 4474, %routine_ucomiss__xmm0___xmm1.exit2901 ], [ 2584, %routine_ucomiss__xmm0___xmm1.exit1724 ], [ 2474, %routine_ucomiss__xmm0___xmm1.exit1676 ], [ 2374, %routine_ucomiss__xmm0___xmm1.exit1630 ], [ 1786, %routine_ucomiss__xmm0___xmm1.exit1280 ], [ 1676, %routine_ucomiss__xmm0___xmm1.exit1231 ], [ 1576, %routine_ucomiss__xmm0___xmm1.exit1185 ], [ 5, %block_422ed8 ], [ 6828, %routine_ucomiss__xmm0___xmm1.exit4315 ], [ 5, %block_.L_422f0e.loopexit ], [ %.sink163.ph, %block_.L_422f0e.loopexit721 ]
  %MEMORY.91 = phi %struct.Memory* [ %10854, %routine_ucomiss__xmm0___xmm1.exit2995 ], [ %11086, %routine_ucomiss__xmm0___xmm1.exit2946 ], [ %11283, %routine_ucomiss__xmm0___xmm1.exit2901 ], [ %15365, %routine_ucomiss__xmm0___xmm1.exit1724 ], [ %15597, %routine_ucomiss__xmm0___xmm1.exit1676 ], [ %15794, %routine_ucomiss__xmm0___xmm1.exit1630 ], [ %17028, %routine_ucomiss__xmm0___xmm1.exit1280 ], [ %17260, %routine_ucomiss__xmm0___xmm1.exit1231 ], [ %17457, %routine_ucomiss__xmm0___xmm1.exit1185 ], [ %MEMORY.86, %block_422ed8 ], [ %6298, %routine_ucomiss__xmm0___xmm1.exit4315 ], [ %MEMORY.85, %block_.L_422f0e.loopexit ], [ %MEMORY.91.ph, %block_.L_422f0e.loopexit721 ]
  %20437 = add i64 %20436, %.sink163
  %20438 = load i64, i64* %RBP.i, align 8
  %20439 = add i64 %20438, -168
  %20440 = add i64 %20437, 6
  store i64 %20440, i64* %3, align 8
  %20441 = inttoptr i64 %20439 to i32*
  %20442 = load i32, i32* %20441, align 4
  %20443 = zext i32 %20442 to i64
  store i64 %20443, i64* %RAX.i3587.phi.trans.insert, align 8
  %20444 = add i64 %20438, -184
  %20445 = add i64 %20437, 12
  store i64 %20445, i64* %3, align 8
  %20446 = inttoptr i64 %20444 to i32*
  store i32 %20442, i32* %20446, align 4
  %20447 = load i64, i64* %RBP.i, align 8
  %20448 = add i64 %20447, -172
  %20449 = load i64, i64* %3, align 8
  %20450 = add i64 %20449, 6
  store i64 %20450, i64* %3, align 8
  %20451 = inttoptr i64 %20448 to i32*
  %20452 = load i32, i32* %20451, align 4
  %20453 = zext i32 %20452 to i64
  store i64 %20453, i64* %RAX.i3587.phi.trans.insert, align 8
  %20454 = add i64 %20447, -180
  %20455 = add i64 %20449, 12
  store i64 %20455, i64* %3, align 8
  %20456 = inttoptr i64 %20454 to i32*
  store i32 %20452, i32* %20456, align 4
  %20457 = load i64, i64* %RBP.i, align 8
  %20458 = add i64 %20457, -188
  %20459 = load i64, i64* %3, align 8
  %20460 = add i64 %20459, 10
  store i64 %20460, i64* %3, align 8
  %20461 = inttoptr i64 %20458 to i32*
  store i32 0, i32* %20461, align 4
  %.pre396 = load i64, i64* %3, align 8
  br label %block_.L_422f30

block_.L_422f30:                                  ; preds = %block_.L_423137, %block_.L_422f0e
  %20462 = phi i64 [ %.pre396, %block_.L_422f0e ], [ %21568, %block_.L_423137 ]
  %MEMORY.92 = phi %struct.Memory* [ %MEMORY.91, %block_.L_422f0e ], [ %MEMORY.93, %block_.L_423137 ]
  %20463 = load i64, i64* %RBP.i, align 8
  %20464 = add i64 %20463, -188
  %20465 = add i64 %20462, 6
  store i64 %20465, i64* %3, align 8
  %20466 = inttoptr i64 %20464 to i32*
  %20467 = load i32, i32* %20466, align 4
  %20468 = zext i32 %20467 to i64
  store i64 %20468, i64* %RAX.i3587.phi.trans.insert, align 8
  %20469 = add i64 %20463, -76
  %20470 = add i64 %20462, 9
  store i64 %20470, i64* %3, align 8
  %20471 = inttoptr i64 %20469 to i32*
  %20472 = load i32, i32* %20471, align 4
  %20473 = sub i32 %20467, %20472
  %20474 = icmp ult i32 %20467, %20472
  %20475 = zext i1 %20474 to i8
  store i8 %20475, i8* %32, align 1
  %20476 = and i32 %20473, 255
  %20477 = tail call i32 @llvm.ctpop.i32(i32 %20476)
  %20478 = trunc i32 %20477 to i8
  %20479 = and i8 %20478, 1
  %20480 = xor i8 %20479, 1
  store i8 %20480, i8* %39, align 1
  %20481 = xor i32 %20472, %20467
  %20482 = xor i32 %20481, %20473
  %20483 = lshr i32 %20482, 4
  %20484 = trunc i32 %20483 to i8
  %20485 = and i8 %20484, 1
  store i8 %20485, i8* %45, align 1
  %20486 = icmp eq i32 %20473, 0
  %20487 = zext i1 %20486 to i8
  store i8 %20487, i8* %48, align 1
  %20488 = lshr i32 %20473, 31
  %20489 = trunc i32 %20488 to i8
  store i8 %20489, i8* %51, align 1
  %20490 = lshr i32 %20467, 31
  %20491 = lshr i32 %20472, 31
  %20492 = xor i32 %20491, %20490
  %20493 = xor i32 %20488, %20490
  %20494 = add nuw nsw i32 %20493, %20492
  %20495 = icmp eq i32 %20494, 2
  %20496 = zext i1 %20495 to i8
  store i8 %20496, i8* %57, align 1
  %20497 = icmp ne i8 %20489, 0
  %20498 = xor i1 %20497, %20495
  %.v513 = select i1 %20498, i64 15, i64 563
  %20499 = add i64 %20462, %.v513
  store i64 %20499, i64* %3, align 8
  br i1 %20498, label %block_422f3f, label %block_.L_423163.loopexit

block_422f3f:                                     ; preds = %block_.L_422f30
  %20500 = add i64 %20463, -196
  %20501 = add i64 %20499, 10
  store i64 %20501, i64* %3, align 8
  %20502 = inttoptr i64 %20500 to i32*
  store i32 65536, i32* %20502, align 4
  %20503 = load i64, i64* %RBP.i, align 8
  %20504 = add i64 %20503, -200
  %20505 = load i64, i64* %3, align 8
  %20506 = add i64 %20505, 10
  store i64 %20506, i64* %3, align 8
  %20507 = inttoptr i64 %20504 to i32*
  store i32 1, i32* %20507, align 4
  %20508 = load i64, i64* %RBP.i, align 8
  %20509 = add i64 %20508, -192
  %20510 = load i64, i64* %3, align 8
  %20511 = add i64 %20510, 10
  store i64 %20511, i64* %3, align 8
  %20512 = inttoptr i64 %20509 to i32*
  store i32 0, i32* %20512, align 4
  %.pre397 = load i64, i64* %3, align 8
  br label %block_.L_422f5d

block_.L_422f5d:                                  ; preds = %block_.L_42310c, %block_422f3f
  %20513 = phi i64 [ %.pre397, %block_422f3f ], [ %21503, %block_.L_42310c ]
  %MEMORY.93 = phi %struct.Memory* [ %MEMORY.92, %block_422f3f ], [ %MEMORY.96, %block_.L_42310c ]
  %20514 = load i64, i64* %RBP.i, align 8
  %20515 = add i64 %20514, -192
  %20516 = add i64 %20513, 7
  store i64 %20516, i64* %3, align 8
  %20517 = inttoptr i64 %20515 to i32*
  %20518 = load i32, i32* %20517, align 4
  %20519 = add i32 %20518, -4
  %20520 = icmp ult i32 %20518, 4
  %20521 = zext i1 %20520 to i8
  store i8 %20521, i8* %32, align 1
  %20522 = and i32 %20519, 255
  %20523 = tail call i32 @llvm.ctpop.i32(i32 %20522)
  %20524 = trunc i32 %20523 to i8
  %20525 = and i8 %20524, 1
  %20526 = xor i8 %20525, 1
  store i8 %20526, i8* %39, align 1
  %20527 = xor i32 %20519, %20518
  %20528 = lshr i32 %20527, 4
  %20529 = trunc i32 %20528 to i8
  %20530 = and i8 %20529, 1
  store i8 %20530, i8* %45, align 1
  %20531 = icmp eq i32 %20519, 0
  %20532 = zext i1 %20531 to i8
  store i8 %20532, i8* %48, align 1
  %20533 = lshr i32 %20519, 31
  %20534 = trunc i32 %20533 to i8
  store i8 %20534, i8* %51, align 1
  %20535 = lshr i32 %20518, 31
  %20536 = xor i32 %20533, %20535
  %20537 = add nuw nsw i32 %20536, %20535
  %20538 = icmp eq i32 %20537, 2
  %20539 = zext i1 %20538 to i8
  store i8 %20539, i8* %57, align 1
  %20540 = icmp ne i8 %20534, 0
  %20541 = xor i1 %20540, %20538
  %.v514 = select i1 %20541, i64 13, i64 456
  %20542 = add i64 %20513, %.v514
  store i64 %20542, i64* %3, align 8
  br i1 %20541, label %block_422f6a, label %block_.L_423125

block_422f6a:                                     ; preds = %block_.L_422f5d
  %20543 = add i64 %20514, -184
  %20544 = add i64 %20542, 6
  store i64 %20544, i64* %3, align 8
  %20545 = inttoptr i64 %20543 to i32*
  %20546 = load i32, i32* %20545, align 4
  %20547 = zext i32 %20546 to i64
  store i64 %20547, i64* %RAX.i3587.phi.trans.insert, align 8
  %20548 = add i64 %20542, 13
  store i64 %20548, i64* %3, align 8
  %20549 = load i32, i32* %20517, align 4
  %20550 = sext i32 %20549 to i64
  store i64 %20550, i64* %RCX.i4260.pre-phi, align 8
  %20551 = shl nsw i64 %20550, 2
  %20552 = add nsw i64 %20551, 7124896
  %20553 = add i64 %20542, 20
  store i64 %20553, i64* %3, align 8
  %20554 = inttoptr i64 %20552 to i32*
  %20555 = load i32, i32* %20554, align 4
  %20556 = add i32 %20555, %20546
  %20557 = zext i32 %20556 to i64
  store i64 %20557, i64* %RAX.i3587.phi.trans.insert, align 8
  %20558 = icmp ult i32 %20556, %20546
  %20559 = icmp ult i32 %20556, %20555
  %20560 = or i1 %20558, %20559
  %20561 = zext i1 %20560 to i8
  store i8 %20561, i8* %32, align 1
  %20562 = and i32 %20556, 255
  %20563 = tail call i32 @llvm.ctpop.i32(i32 %20562)
  %20564 = trunc i32 %20563 to i8
  %20565 = and i8 %20564, 1
  %20566 = xor i8 %20565, 1
  store i8 %20566, i8* %39, align 1
  %20567 = xor i32 %20555, %20546
  %20568 = xor i32 %20567, %20556
  %20569 = lshr i32 %20568, 4
  %20570 = trunc i32 %20569 to i8
  %20571 = and i8 %20570, 1
  store i8 %20571, i8* %45, align 1
  %20572 = icmp eq i32 %20556, 0
  %20573 = zext i1 %20572 to i8
  store i8 %20573, i8* %48, align 1
  %20574 = lshr i32 %20556, 31
  %20575 = trunc i32 %20574 to i8
  store i8 %20575, i8* %51, align 1
  %20576 = lshr i32 %20546, 31
  %20577 = lshr i32 %20555, 31
  %20578 = xor i32 %20574, %20576
  %20579 = xor i32 %20574, %20577
  %20580 = add nuw nsw i32 %20578, %20579
  %20581 = icmp eq i32 %20580, 2
  %20582 = zext i1 %20581 to i8
  store i8 %20582, i8* %57, align 1
  %20583 = add i64 %20514, -96
  %20584 = add i64 %20542, 23
  store i64 %20584, i64* %3, align 8
  %20585 = inttoptr i64 %20583 to i32*
  store i32 %20556, i32* %20585, align 4
  %20586 = load i64, i64* %RBP.i, align 8
  %20587 = add i64 %20586, -180
  %20588 = load i64, i64* %3, align 8
  %20589 = add i64 %20588, 6
  store i64 %20589, i64* %3, align 8
  %20590 = inttoptr i64 %20587 to i32*
  %20591 = load i32, i32* %20590, align 4
  %20592 = zext i32 %20591 to i64
  store i64 %20592, i64* %RAX.i3587.phi.trans.insert, align 8
  %20593 = add i64 %20586, -192
  %20594 = add i64 %20588, 13
  store i64 %20594, i64* %3, align 8
  %20595 = inttoptr i64 %20593 to i32*
  %20596 = load i32, i32* %20595, align 4
  %20597 = sext i32 %20596 to i64
  store i64 %20597, i64* %RCX.i4260.pre-phi, align 8
  %20598 = shl nsw i64 %20597, 2
  %20599 = add nsw i64 %20598, 7124912
  %20600 = add i64 %20588, 20
  store i64 %20600, i64* %3, align 8
  %20601 = inttoptr i64 %20599 to i32*
  %20602 = load i32, i32* %20601, align 4
  %20603 = add i32 %20602, %20591
  %20604 = zext i32 %20603 to i64
  store i64 %20604, i64* %RAX.i3587.phi.trans.insert, align 8
  %20605 = icmp ult i32 %20603, %20591
  %20606 = icmp ult i32 %20603, %20602
  %20607 = or i1 %20605, %20606
  %20608 = zext i1 %20607 to i8
  store i8 %20608, i8* %32, align 1
  %20609 = and i32 %20603, 255
  %20610 = tail call i32 @llvm.ctpop.i32(i32 %20609)
  %20611 = trunc i32 %20610 to i8
  %20612 = and i8 %20611, 1
  %20613 = xor i8 %20612, 1
  store i8 %20613, i8* %39, align 1
  %20614 = xor i32 %20602, %20591
  %20615 = xor i32 %20614, %20603
  %20616 = lshr i32 %20615, 4
  %20617 = trunc i32 %20616 to i8
  %20618 = and i8 %20617, 1
  store i8 %20618, i8* %45, align 1
  %20619 = icmp eq i32 %20603, 0
  %20620 = zext i1 %20619 to i8
  store i8 %20620, i8* %48, align 1
  %20621 = lshr i32 %20603, 31
  %20622 = trunc i32 %20621 to i8
  store i8 %20622, i8* %51, align 1
  %20623 = lshr i32 %20591, 31
  %20624 = lshr i32 %20602, 31
  %20625 = xor i32 %20621, %20623
  %20626 = xor i32 %20621, %20624
  %20627 = add nuw nsw i32 %20625, %20626
  %20628 = icmp eq i32 %20627, 2
  %20629 = zext i1 %20628 to i8
  store i8 %20629, i8* %57, align 1
  %20630 = add i64 %20586, -100
  %20631 = add i64 %20588, 23
  store i64 %20631, i64* %3, align 8
  %20632 = inttoptr i64 %20630 to i32*
  store i32 %20603, i32* %20632, align 4
  %20633 = load i64, i64* %RBP.i, align 8
  %20634 = add i64 %20633, -96
  %20635 = load i64, i64* %3, align 8
  %20636 = add i64 %20635, 3
  store i64 %20636, i64* %3, align 8
  %20637 = inttoptr i64 %20634 to i32*
  %20638 = load i32, i32* %20637, align 4
  %20639 = zext i32 %20638 to i64
  store i64 %20639, i64* %RAX.i3587.phi.trans.insert, align 8
  %20640 = add i64 %20633, -160
  %20641 = add i64 %20635, 9
  store i64 %20641, i64* %3, align 8
  %20642 = inttoptr i64 %20640 to i32*
  %20643 = load i32, i32* %20642, align 4
  %20644 = sub i32 %20638, %20643
  %20645 = zext i32 %20644 to i64
  store i64 %20645, i64* %RAX.i3587.phi.trans.insert, align 8
  %20646 = icmp ult i32 %20638, %20643
  %20647 = zext i1 %20646 to i8
  store i8 %20647, i8* %32, align 1
  %20648 = and i32 %20644, 255
  %20649 = tail call i32 @llvm.ctpop.i32(i32 %20648)
  %20650 = trunc i32 %20649 to i8
  %20651 = and i8 %20650, 1
  %20652 = xor i8 %20651, 1
  store i8 %20652, i8* %39, align 1
  %20653 = xor i32 %20643, %20638
  %20654 = xor i32 %20653, %20644
  %20655 = lshr i32 %20654, 4
  %20656 = trunc i32 %20655 to i8
  %20657 = and i8 %20656, 1
  store i8 %20657, i8* %45, align 1
  %20658 = icmp eq i32 %20644, 0
  %20659 = zext i1 %20658 to i8
  store i8 %20659, i8* %48, align 1
  %20660 = lshr i32 %20644, 31
  %20661 = trunc i32 %20660 to i8
  store i8 %20661, i8* %51, align 1
  %20662 = lshr i32 %20638, 31
  %20663 = lshr i32 %20643, 31
  %20664 = xor i32 %20663, %20662
  %20665 = xor i32 %20660, %20662
  %20666 = add nuw nsw i32 %20665, %20664
  %20667 = icmp eq i32 %20666, 2
  %20668 = zext i1 %20667 to i8
  store i8 %20668, i8* %57, align 1
  store i64 %20645, i64* %RDI.i1133, align 8
  %20669 = add i64 %20635, -139160
  %20670 = add i64 %20635, 16
  %20671 = load i64, i64* %6, align 8
  %20672 = add i64 %20671, -8
  %20673 = inttoptr i64 %20672 to i64*
  store i64 %20670, i64* %20673, align 8
  store i64 %20672, i64* %6, align 8
  store i64 %20669, i64* %3, align 8
  %20674 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.93)
  %20675 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %20676 = load i64, i64* %RBP.i, align 8
  %20677 = add i64 %20676, -76
  %20678 = load i64, i64* %3, align 8
  %20679 = add i64 %20678, 3
  store i64 %20679, i64* %3, align 8
  %20680 = inttoptr i64 %20677 to i32*
  %20681 = load i32, i32* %20680, align 4
  %20682 = sub i32 %20675, %20681
  %20683 = icmp ult i32 %20675, %20681
  %20684 = zext i1 %20683 to i8
  store i8 %20684, i8* %32, align 1
  %20685 = and i32 %20682, 255
  %20686 = tail call i32 @llvm.ctpop.i32(i32 %20685)
  %20687 = trunc i32 %20686 to i8
  %20688 = and i8 %20687, 1
  %20689 = xor i8 %20688, 1
  store i8 %20689, i8* %39, align 1
  %20690 = xor i32 %20681, %20675
  %20691 = xor i32 %20690, %20682
  %20692 = lshr i32 %20691, 4
  %20693 = trunc i32 %20692 to i8
  %20694 = and i8 %20693, 1
  store i8 %20694, i8* %45, align 1
  %20695 = icmp eq i32 %20682, 0
  %20696 = zext i1 %20695 to i8
  store i8 %20696, i8* %48, align 1
  %20697 = lshr i32 %20682, 31
  %20698 = trunc i32 %20697 to i8
  store i8 %20698, i8* %51, align 1
  %20699 = lshr i32 %20675, 31
  %20700 = lshr i32 %20681, 31
  %20701 = xor i32 %20700, %20699
  %20702 = xor i32 %20697, %20699
  %20703 = add nuw nsw i32 %20702, %20701
  %20704 = icmp eq i32 %20703, 2
  %20705 = zext i1 %20704 to i8
  store i8 %20705, i8* %57, align 1
  %20706 = icmp ne i8 %20698, 0
  %20707 = xor i1 %20706, %20704
  %.demorgan453 = or i1 %20695, %20707
  %.v516 = select i1 %.demorgan453, i64 9, i64 356
  %20708 = add i64 %20678, %.v516
  store i64 %20708, i64* %3, align 8
  br i1 %.demorgan453, label %block_422fb1, label %block_.L_42310c

block_422fb1:                                     ; preds = %block_422f6a
  %20709 = add i64 %20676, -100
  %20710 = add i64 %20708, 3
  store i64 %20710, i64* %3, align 8
  %20711 = inttoptr i64 %20709 to i32*
  %20712 = load i32, i32* %20711, align 4
  %20713 = zext i32 %20712 to i64
  store i64 %20713, i64* %RAX.i3587.phi.trans.insert, align 8
  %20714 = add i64 %20676, -164
  %20715 = add i64 %20708, 9
  store i64 %20715, i64* %3, align 8
  %20716 = inttoptr i64 %20714 to i32*
  %20717 = load i32, i32* %20716, align 4
  %20718 = sub i32 %20712, %20717
  %20719 = zext i32 %20718 to i64
  store i64 %20719, i64* %RAX.i3587.phi.trans.insert, align 8
  %20720 = icmp ult i32 %20712, %20717
  %20721 = zext i1 %20720 to i8
  store i8 %20721, i8* %32, align 1
  %20722 = and i32 %20718, 255
  %20723 = tail call i32 @llvm.ctpop.i32(i32 %20722)
  %20724 = trunc i32 %20723 to i8
  %20725 = and i8 %20724, 1
  %20726 = xor i8 %20725, 1
  store i8 %20726, i8* %39, align 1
  %20727 = xor i32 %20717, %20712
  %20728 = xor i32 %20727, %20718
  %20729 = lshr i32 %20728, 4
  %20730 = trunc i32 %20729 to i8
  %20731 = and i8 %20730, 1
  store i8 %20731, i8* %45, align 1
  %20732 = icmp eq i32 %20718, 0
  %20733 = zext i1 %20732 to i8
  store i8 %20733, i8* %48, align 1
  %20734 = lshr i32 %20718, 31
  %20735 = trunc i32 %20734 to i8
  store i8 %20735, i8* %51, align 1
  %20736 = lshr i32 %20712, 31
  %20737 = lshr i32 %20717, 31
  %20738 = xor i32 %20737, %20736
  %20739 = xor i32 %20734, %20736
  %20740 = add nuw nsw i32 %20739, %20738
  %20741 = icmp eq i32 %20740, 2
  %20742 = zext i1 %20741 to i8
  store i8 %20742, i8* %57, align 1
  store i64 %20719, i64* %RDI.i1133, align 8
  %20743 = add i64 %20708, -139185
  %20744 = add i64 %20708, 16
  %20745 = load i64, i64* %6, align 8
  %20746 = add i64 %20745, -8
  %20747 = inttoptr i64 %20746 to i64*
  store i64 %20744, i64* %20747, align 8
  store i64 %20746, i64* %6, align 8
  store i64 %20743, i64* %3, align 8
  %20748 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %20674)
  %20749 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %20750 = load i64, i64* %RBP.i, align 8
  %20751 = add i64 %20750, -76
  %20752 = load i64, i64* %3, align 8
  %20753 = add i64 %20752, 3
  store i64 %20753, i64* %3, align 8
  %20754 = inttoptr i64 %20751 to i32*
  %20755 = load i32, i32* %20754, align 4
  %20756 = sub i32 %20749, %20755
  %20757 = icmp ult i32 %20749, %20755
  %20758 = zext i1 %20757 to i8
  store i8 %20758, i8* %32, align 1
  %20759 = and i32 %20756, 255
  %20760 = tail call i32 @llvm.ctpop.i32(i32 %20759)
  %20761 = trunc i32 %20760 to i8
  %20762 = and i8 %20761, 1
  %20763 = xor i8 %20762, 1
  store i8 %20763, i8* %39, align 1
  %20764 = xor i32 %20755, %20749
  %20765 = xor i32 %20764, %20756
  %20766 = lshr i32 %20765, 4
  %20767 = trunc i32 %20766 to i8
  %20768 = and i8 %20767, 1
  store i8 %20768, i8* %45, align 1
  %20769 = icmp eq i32 %20756, 0
  %20770 = zext i1 %20769 to i8
  store i8 %20770, i8* %48, align 1
  %20771 = lshr i32 %20756, 31
  %20772 = trunc i32 %20771 to i8
  store i8 %20772, i8* %51, align 1
  %20773 = lshr i32 %20749, 31
  %20774 = lshr i32 %20755, 31
  %20775 = xor i32 %20774, %20773
  %20776 = xor i32 %20771, %20773
  %20777 = add nuw nsw i32 %20776, %20775
  %20778 = icmp eq i32 %20777, 2
  %20779 = zext i1 %20778 to i8
  store i8 %20779, i8* %57, align 1
  %20780 = icmp ne i8 %20772, 0
  %20781 = xor i1 %20780, %20778
  %.demorgan454 = or i1 %20769, %20781
  %.v517 = select i1 %.demorgan454, i64 9, i64 331
  %20782 = add i64 %20752, %.v517
  store i64 %20782, i64* %3, align 8
  br i1 %.demorgan454, label %block_422fca, label %block_.L_42310c

block_422fca:                                     ; preds = %block_422fb1
  %20783 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %20783, i64* %RAX.i3587.phi.trans.insert, align 8
  %20784 = add i64 %20750, -100
  %20785 = add i64 %20782, 11
  store i64 %20785, i64* %3, align 8
  %20786 = inttoptr i64 %20784 to i32*
  %20787 = load i32, i32* %20786, align 4
  %20788 = zext i32 %20787 to i64
  store i64 %20788, i64* %RCX.i4260.pre-phi, align 8
  %20789 = add i64 %20750, -164
  %20790 = add i64 %20782, 17
  store i64 %20790, i64* %3, align 8
  %20791 = inttoptr i64 %20789 to i32*
  %20792 = load i32, i32* %20791, align 4
  %20793 = sub i32 %20787, %20792
  %20794 = zext i32 %20793 to i64
  store i64 %20794, i64* %RCX.i4260.pre-phi, align 8
  %20795 = icmp ult i32 %20787, %20792
  %20796 = zext i1 %20795 to i8
  store i8 %20796, i8* %32, align 1
  %20797 = and i32 %20793, 255
  %20798 = tail call i32 @llvm.ctpop.i32(i32 %20797)
  %20799 = trunc i32 %20798 to i8
  %20800 = and i8 %20799, 1
  %20801 = xor i8 %20800, 1
  store i8 %20801, i8* %39, align 1
  %20802 = xor i32 %20792, %20787
  %20803 = xor i32 %20802, %20793
  %20804 = lshr i32 %20803, 4
  %20805 = trunc i32 %20804 to i8
  %20806 = and i8 %20805, 1
  store i8 %20806, i8* %45, align 1
  %20807 = icmp eq i32 %20793, 0
  %20808 = zext i1 %20807 to i8
  store i8 %20808, i8* %48, align 1
  %20809 = lshr i32 %20793, 31
  %20810 = trunc i32 %20809 to i8
  store i8 %20810, i8* %51, align 1
  %20811 = lshr i32 %20787, 31
  %20812 = lshr i32 %20792, 31
  %20813 = xor i32 %20812, %20811
  %20814 = xor i32 %20809, %20811
  %20815 = add nuw nsw i32 %20814, %20813
  %20816 = icmp eq i32 %20815, 2
  %20817 = zext i1 %20816 to i8
  store i8 %20817, i8* %57, align 1
  %20818 = add i64 %20782, 20
  store i64 %20818, i64* %3, align 8
  %20819 = load i32, i32* %20754, align 4
  %20820 = add i32 %20819, %20793
  %20821 = zext i32 %20820 to i64
  store i64 %20821, i64* %RCX.i4260.pre-phi, align 8
  %20822 = icmp ult i32 %20820, %20793
  %20823 = icmp ult i32 %20820, %20819
  %20824 = or i1 %20822, %20823
  %20825 = zext i1 %20824 to i8
  store i8 %20825, i8* %32, align 1
  %20826 = and i32 %20820, 255
  %20827 = tail call i32 @llvm.ctpop.i32(i32 %20826)
  %20828 = trunc i32 %20827 to i8
  %20829 = and i8 %20828, 1
  %20830 = xor i8 %20829, 1
  store i8 %20830, i8* %39, align 1
  %20831 = xor i32 %20819, %20793
  %20832 = xor i32 %20831, %20820
  %20833 = lshr i32 %20832, 4
  %20834 = trunc i32 %20833 to i8
  %20835 = and i8 %20834, 1
  store i8 %20835, i8* %45, align 1
  %20836 = icmp eq i32 %20820, 0
  %20837 = zext i1 %20836 to i8
  store i8 %20837, i8* %48, align 1
  %20838 = lshr i32 %20820, 31
  %20839 = trunc i32 %20838 to i8
  store i8 %20839, i8* %51, align 1
  %20840 = lshr i32 %20819, 31
  %20841 = xor i32 %20838, %20809
  %20842 = xor i32 %20838, %20840
  %20843 = add nuw nsw i32 %20841, %20842
  %20844 = icmp eq i32 %20843, 2
  %20845 = zext i1 %20844 to i8
  store i8 %20845, i8* %57, align 1
  %20846 = sext i32 %20820 to i64
  store i64 %20846, i64* %RDX.i4317.pre-phi, align 8
  %20847 = shl nsw i64 %20846, 3
  %20848 = add i64 %20783, %20847
  %20849 = add i64 %20782, 27
  store i64 %20849, i64* %3, align 8
  %20850 = inttoptr i64 %20848 to i64*
  %20851 = load i64, i64* %20850, align 8
  store i64 %20851, i64* %RAX.i3587.phi.trans.insert, align 8
  %20852 = add i64 %20750, -96
  %20853 = add i64 %20782, 30
  store i64 %20853, i64* %3, align 8
  %20854 = inttoptr i64 %20852 to i32*
  %20855 = load i32, i32* %20854, align 4
  %20856 = zext i32 %20855 to i64
  store i64 %20856, i64* %RCX.i4260.pre-phi, align 8
  %20857 = load i64, i64* %RBP.i, align 8
  %20858 = add i64 %20857, -160
  %20859 = add i64 %20782, 36
  store i64 %20859, i64* %3, align 8
  %20860 = inttoptr i64 %20858 to i32*
  %20861 = load i32, i32* %20860, align 4
  %20862 = sub i32 %20855, %20861
  %20863 = zext i32 %20862 to i64
  store i64 %20863, i64* %RCX.i4260.pre-phi, align 8
  %20864 = icmp ult i32 %20855, %20861
  %20865 = zext i1 %20864 to i8
  store i8 %20865, i8* %32, align 1
  %20866 = and i32 %20862, 255
  %20867 = tail call i32 @llvm.ctpop.i32(i32 %20866)
  %20868 = trunc i32 %20867 to i8
  %20869 = and i8 %20868, 1
  %20870 = xor i8 %20869, 1
  store i8 %20870, i8* %39, align 1
  %20871 = xor i32 %20861, %20855
  %20872 = xor i32 %20871, %20862
  %20873 = lshr i32 %20872, 4
  %20874 = trunc i32 %20873 to i8
  %20875 = and i8 %20874, 1
  store i8 %20875, i8* %45, align 1
  %20876 = icmp eq i32 %20862, 0
  %20877 = zext i1 %20876 to i8
  store i8 %20877, i8* %48, align 1
  %20878 = lshr i32 %20862, 31
  %20879 = trunc i32 %20878 to i8
  store i8 %20879, i8* %51, align 1
  %20880 = lshr i32 %20855, 31
  %20881 = lshr i32 %20861, 31
  %20882 = xor i32 %20881, %20880
  %20883 = xor i32 %20878, %20880
  %20884 = add nuw nsw i32 %20883, %20882
  %20885 = icmp eq i32 %20884, 2
  %20886 = zext i1 %20885 to i8
  store i8 %20886, i8* %57, align 1
  %20887 = add i64 %20857, -76
  %20888 = add i64 %20782, 39
  store i64 %20888, i64* %3, align 8
  %20889 = inttoptr i64 %20887 to i32*
  %20890 = load i32, i32* %20889, align 4
  %20891 = add i32 %20890, %20862
  %20892 = zext i32 %20891 to i64
  store i64 %20892, i64* %RCX.i4260.pre-phi, align 8
  %20893 = icmp ult i32 %20891, %20862
  %20894 = icmp ult i32 %20891, %20890
  %20895 = or i1 %20893, %20894
  %20896 = zext i1 %20895 to i8
  store i8 %20896, i8* %32, align 1
  %20897 = and i32 %20891, 255
  %20898 = tail call i32 @llvm.ctpop.i32(i32 %20897)
  %20899 = trunc i32 %20898 to i8
  %20900 = and i8 %20899, 1
  %20901 = xor i8 %20900, 1
  store i8 %20901, i8* %39, align 1
  %20902 = xor i32 %20890, %20862
  %20903 = xor i32 %20902, %20891
  %20904 = lshr i32 %20903, 4
  %20905 = trunc i32 %20904 to i8
  %20906 = and i8 %20905, 1
  store i8 %20906, i8* %45, align 1
  %20907 = icmp eq i32 %20891, 0
  %20908 = zext i1 %20907 to i8
  store i8 %20908, i8* %48, align 1
  %20909 = lshr i32 %20891, 31
  %20910 = trunc i32 %20909 to i8
  store i8 %20910, i8* %51, align 1
  %20911 = lshr i32 %20890, 31
  %20912 = xor i32 %20909, %20878
  %20913 = xor i32 %20909, %20911
  %20914 = add nuw nsw i32 %20912, %20913
  %20915 = icmp eq i32 %20914, 2
  %20916 = zext i1 %20915 to i8
  store i8 %20916, i8* %57, align 1
  %20917 = sext i32 %20891 to i64
  store i64 %20917, i64* %RDX.i4317.pre-phi, align 8
  %20918 = shl nsw i64 %20917, 2
  %20919 = add i64 %20851, %20918
  %20920 = add i64 %20782, 46
  store i64 %20920, i64* %3, align 8
  %20921 = inttoptr i64 %20919 to i32*
  %20922 = load i32, i32* %20921, align 4
  store i8 0, i8* %32, align 1
  %20923 = and i32 %20922, 255
  %20924 = tail call i32 @llvm.ctpop.i32(i32 %20923)
  %20925 = trunc i32 %20924 to i8
  %20926 = and i8 %20925, 1
  %20927 = xor i8 %20926, 1
  store i8 %20927, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %20928 = icmp eq i32 %20922, 0
  %20929 = zext i1 %20928 to i8
  store i8 %20929, i8* %48, align 1
  %20930 = lshr i32 %20922, 31
  %20931 = trunc i32 %20930 to i8
  store i8 %20931, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v518 = select i1 %20928, i64 52, i64 317
  %20932 = add i64 %20782, %.v518
  store i64 %20932, i64* %3, align 8
  br i1 %20928, label %block_422ffe, label %block_.L_423107

block_422ffe:                                     ; preds = %block_422fca
  %20933 = load i64, i64* %RBP.i, align 8
  %20934 = add i64 %20933, -132
  %20935 = add i64 %20932, 6
  store i64 %20935, i64* %3, align 8
  %20936 = inttoptr i64 %20934 to i32*
  %20937 = load i32, i32* %20936, align 4
  %20938 = zext i32 %20937 to i64
  store i64 %20938, i64* %RAX.i3587.phi.trans.insert, align 8
  %20939 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %20939, i64* %RCX.i4260.pre-phi, align 8
  %20940 = add i64 %20933, -96
  %20941 = add i64 %20932, 17
  store i64 %20941, i64* %3, align 8
  %20942 = inttoptr i64 %20940 to i32*
  %20943 = load i32, i32* %20942, align 4
  %20944 = zext i32 %20943 to i64
  store i64 %20944, i64* %RDX.i4317.pre-phi, align 8
  %20945 = add i64 %20933, -136
  %20946 = add i64 %20932, 23
  store i64 %20946, i64* %3, align 8
  %20947 = inttoptr i64 %20945 to i32*
  %20948 = load i32, i32* %20947, align 4
  %20949 = zext i32 %20948 to i64
  store i64 %20949, i64* %RSI.i739, align 8
  %20950 = add i64 %20933, -424
  %20951 = add i64 %20932, 30
  store i64 %20951, i64* %3, align 8
  %20952 = inttoptr i64 %20950 to i64*
  store i64 %20939, i64* %20952, align 8
  %20953 = load i32, i32* %ESI.i1656, align 4
  %20954 = zext i32 %20953 to i64
  %20955 = load i64, i64* %3, align 8
  store i64 %20954, i64* %RCX.i4260.pre-phi, align 8
  %20956 = load i64, i64* %RDX.i4317.pre-phi, align 8
  %20957 = add i64 %20955, 4
  store i64 %20957, i64* %3, align 8
  %20958 = trunc i32 %20953 to i5
  switch i5 %20958, label %20965 [
    i5 0, label %routine_shll__cl___edx.exit
    i5 1, label %20959
  ]

; <label>:20959:                                  ; preds = %block_422ffe
  %20960 = trunc i64 %20956 to i32
  %20961 = shl i32 %20960, 1
  %20962 = icmp slt i32 %20960, 0
  %20963 = icmp slt i32 %20961, 0
  %20964 = xor i1 %20962, %20963
  br label %20975

; <label>:20965:                                  ; preds = %block_422ffe
  %20966 = and i32 %20953, 31
  %20967 = zext i32 %20966 to i64
  %20968 = add nuw nsw i64 %20967, 4294967295
  %20969 = and i64 %20956, 4294967295
  %20970 = and i64 %20968, 4294967295
  %20971 = shl i64 %20969, %20970
  %20972 = trunc i64 %20971 to i32
  %20973 = icmp slt i32 %20972, 0
  %20974 = shl i32 %20972, 1
  br label %20975

; <label>:20975:                                  ; preds = %20965, %20959
  %20976 = phi i1 [ %20962, %20959 ], [ %20973, %20965 ]
  %20977 = phi i1 [ %20964, %20959 ], [ false, %20965 ]
  %20978 = phi i32 [ %20961, %20959 ], [ %20974, %20965 ]
  %20979 = zext i32 %20978 to i64
  store i64 %20979, i64* %RDX.i4317.pre-phi, align 8
  %20980 = zext i1 %20976 to i8
  store i8 %20980, i8* %32, align 1
  %20981 = and i32 %20978, 254
  %20982 = tail call i32 @llvm.ctpop.i32(i32 %20981)
  %20983 = trunc i32 %20982 to i8
  %20984 = and i8 %20983, 1
  %20985 = xor i8 %20984, 1
  store i8 %20985, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %20986 = icmp eq i32 %20978, 0
  %20987 = zext i1 %20986 to i8
  store i8 %20987, i8* %48, align 1
  %20988 = lshr i32 %20978, 31
  %20989 = trunc i32 %20988 to i8
  store i8 %20989, i8* %51, align 1
  %20990 = zext i1 %20977 to i8
  store i8 %20990, i8* %57, align 1
  br label %routine_shll__cl___edx.exit

routine_shll__cl___edx.exit:                      ; preds = %20975, %block_422ffe
  %20991 = phi i64 [ %20979, %20975 ], [ %20956, %block_422ffe ]
  %20992 = load i64, i64* %RBP.i, align 8
  %20993 = add i64 %20992, -152
  %20994 = add i64 %20955, 10
  store i64 %20994, i64* %3, align 8
  %20995 = trunc i64 %20991 to i32
  %20996 = inttoptr i64 %20993 to i32*
  %20997 = load i32, i32* %20996, align 4
  %20998 = sub i32 %20995, %20997
  %20999 = zext i32 %20998 to i64
  store i64 %20999, i64* %RDX.i4317.pre-phi, align 8
  %21000 = icmp ult i32 %20995, %20997
  %21001 = zext i1 %21000 to i8
  store i8 %21001, i8* %32, align 1
  %21002 = and i32 %20998, 255
  %21003 = tail call i32 @llvm.ctpop.i32(i32 %21002)
  %21004 = trunc i32 %21003 to i8
  %21005 = and i8 %21004, 1
  %21006 = xor i8 %21005, 1
  store i8 %21006, i8* %39, align 1
  %21007 = xor i32 %20997, %20995
  %21008 = xor i32 %21007, %20998
  %21009 = lshr i32 %21008, 4
  %21010 = trunc i32 %21009 to i8
  %21011 = and i8 %21010, 1
  store i8 %21011, i8* %45, align 1
  %21012 = icmp eq i32 %20998, 0
  %21013 = zext i1 %21012 to i8
  store i8 %21013, i8* %48, align 1
  %21014 = lshr i32 %20998, 31
  %21015 = trunc i32 %21014 to i8
  store i8 %21015, i8* %51, align 1
  %21016 = lshr i32 %20995, 31
  %21017 = lshr i32 %20997, 31
  %21018 = xor i32 %21017, %21016
  %21019 = xor i32 %21014, %21016
  %21020 = add nuw nsw i32 %21019, %21018
  %21021 = icmp eq i32 %21020, 2
  %21022 = zext i1 %21021 to i8
  store i8 %21022, i8* %57, align 1
  %21023 = sext i32 %20998 to i64
  store i64 %21023, i64* %RDI.i1133, align 8
  %21024 = add i64 %20992, -424
  %21025 = add i64 %20955, 20
  store i64 %21025, i64* %3, align 8
  %21026 = inttoptr i64 %21024 to i64*
  %21027 = load i64, i64* %21026, align 8
  store i64 %21027, i64* %R8.i5602, align 8
  %21028 = shl nsw i64 %21023, 2
  %21029 = add i64 %21028, %21027
  %21030 = add i64 %20955, 24
  store i64 %21030, i64* %3, align 8
  %21031 = inttoptr i64 %21029 to i32*
  %21032 = load i32, i32* %21031, align 4
  %21033 = zext i32 %21032 to i64
  store i64 %21033, i64* %RDX.i4317.pre-phi, align 8
  %21034 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %21034, i64* %RDI.i1133, align 8
  %21035 = add i64 %20992, -100
  %21036 = add i64 %20955, 35
  store i64 %21036, i64* %3, align 8
  %21037 = inttoptr i64 %21035 to i32*
  %21038 = load i32, i32* %21037, align 4
  %21039 = zext i32 %21038 to i64
  store i64 %21039, i64* %RSI.i739, align 8
  %21040 = add i64 %20992, -136
  %21041 = add i64 %20955, 41
  store i64 %21041, i64* %3, align 8
  %21042 = inttoptr i64 %21040 to i32*
  %21043 = load i32, i32* %21042, align 4
  %21044 = zext i32 %21043 to i64
  store i64 %21044, i64* %RCX.i4260.pre-phi, align 8
  %21045 = add i64 %20955, 43
  store i64 %21045, i64* %3, align 8
  %21046 = trunc i32 %21043 to i5
  switch i5 %21046, label %21052 [
    i5 0, label %routine_shll__cl___esi.exit
    i5 1, label %21047
  ]

; <label>:21047:                                  ; preds = %routine_shll__cl___edx.exit
  %21048 = shl i32 %21038, 1
  %21049 = icmp slt i32 %21038, 0
  %21050 = icmp slt i32 %21048, 0
  %21051 = xor i1 %21049, %21050
  br label %21061

; <label>:21052:                                  ; preds = %routine_shll__cl___edx.exit
  %21053 = and i32 %21043, 31
  %21054 = zext i32 %21053 to i64
  %21055 = add nuw nsw i64 %21054, 4294967295
  %21056 = and i64 %21055, 4294967295
  %21057 = shl i64 %21039, %21056
  %21058 = trunc i64 %21057 to i32
  %21059 = icmp slt i32 %21058, 0
  %21060 = shl i32 %21058, 1
  br label %21061

; <label>:21061:                                  ; preds = %21052, %21047
  %21062 = phi i1 [ %21049, %21047 ], [ %21059, %21052 ]
  %21063 = phi i1 [ %21051, %21047 ], [ false, %21052 ]
  %21064 = phi i32 [ %21048, %21047 ], [ %21060, %21052 ]
  %21065 = zext i32 %21064 to i64
  store i64 %21065, i64* %RSI.i739, align 8
  %21066 = zext i1 %21062 to i8
  store i8 %21066, i8* %32, align 1
  %21067 = and i32 %21064, 254
  %21068 = tail call i32 @llvm.ctpop.i32(i32 %21067)
  %21069 = trunc i32 %21068 to i8
  %21070 = and i8 %21069, 1
  %21071 = xor i8 %21070, 1
  store i8 %21071, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %21072 = icmp eq i32 %21064, 0
  %21073 = zext i1 %21072 to i8
  store i8 %21073, i8* %48, align 1
  %21074 = lshr i32 %21064, 31
  %21075 = trunc i32 %21074 to i8
  store i8 %21075, i8* %51, align 1
  %21076 = zext i1 %21063 to i8
  store i8 %21076, i8* %57, align 1
  br label %routine_shll__cl___esi.exit

routine_shll__cl___esi.exit:                      ; preds = %21061, %routine_shll__cl___edx.exit
  %21077 = phi i32 [ %21064, %21061 ], [ %21038, %routine_shll__cl___edx.exit ]
  %21078 = add i64 %20992, -156
  %21079 = add i64 %20955, 49
  store i64 %21079, i64* %3, align 8
  %21080 = inttoptr i64 %21078 to i32*
  %21081 = load i32, i32* %21080, align 4
  %21082 = sub i32 %21077, %21081
  %21083 = zext i32 %21082 to i64
  store i64 %21083, i64* %RSI.i739, align 8
  %21084 = icmp ult i32 %21077, %21081
  %21085 = zext i1 %21084 to i8
  store i8 %21085, i8* %32, align 1
  %21086 = and i32 %21082, 255
  %21087 = tail call i32 @llvm.ctpop.i32(i32 %21086)
  %21088 = trunc i32 %21087 to i8
  %21089 = and i8 %21088, 1
  %21090 = xor i8 %21089, 1
  store i8 %21090, i8* %39, align 1
  %21091 = xor i32 %21081, %21077
  %21092 = xor i32 %21091, %21082
  %21093 = lshr i32 %21092, 4
  %21094 = trunc i32 %21093 to i8
  %21095 = and i8 %21094, 1
  store i8 %21095, i8* %45, align 1
  %21096 = icmp eq i32 %21082, 0
  %21097 = zext i1 %21096 to i8
  store i8 %21097, i8* %48, align 1
  %21098 = lshr i32 %21082, 31
  %21099 = trunc i32 %21098 to i8
  store i8 %21099, i8* %51, align 1
  %21100 = lshr i32 %21077, 31
  %21101 = lshr i32 %21081, 31
  %21102 = xor i32 %21101, %21100
  %21103 = xor i32 %21098, %21100
  %21104 = add nuw nsw i32 %21103, %21102
  %21105 = icmp eq i32 %21104, 2
  %21106 = zext i1 %21105 to i8
  store i8 %21106, i8* %57, align 1
  %21107 = sext i32 %21082 to i64
  store i64 %21107, i64* %R9.i5580, align 8
  %21108 = shl nsw i64 %21107, 2
  %21109 = add i64 %21034, %21108
  %21110 = add i64 %20955, 56
  store i64 %21110, i64* %3, align 8
  %21111 = inttoptr i64 %21109 to i32*
  %21112 = load i32, i32* %21111, align 4
  %21113 = add i32 %21112, %21032
  %21114 = zext i32 %21113 to i64
  store i64 %21114, i64* %RDX.i4317.pre-phi, align 8
  %21115 = icmp ult i32 %21113, %21032
  %21116 = icmp ult i32 %21113, %21112
  %21117 = or i1 %21115, %21116
  %21118 = zext i1 %21117 to i8
  store i8 %21118, i8* %32, align 1
  %21119 = and i32 %21113, 255
  %21120 = tail call i32 @llvm.ctpop.i32(i32 %21119)
  %21121 = trunc i32 %21120 to i8
  %21122 = and i8 %21121, 1
  %21123 = xor i8 %21122, 1
  store i8 %21123, i8* %39, align 1
  %21124 = xor i32 %21112, %21032
  %21125 = xor i32 %21124, %21113
  %21126 = lshr i32 %21125, 4
  %21127 = trunc i32 %21126 to i8
  %21128 = and i8 %21127, 1
  store i8 %21128, i8* %45, align 1
  %21129 = icmp eq i32 %21113, 0
  %21130 = zext i1 %21129 to i8
  store i8 %21130, i8* %48, align 1
  %21131 = lshr i32 %21113, 31
  %21132 = trunc i32 %21131 to i8
  store i8 %21132, i8* %51, align 1
  %21133 = lshr i32 %21032, 31
  %21134 = lshr i32 %21112, 31
  %21135 = xor i32 %21131, %21133
  %21136 = xor i32 %21131, %21134
  %21137 = add nuw nsw i32 %21135, %21136
  %21138 = icmp eq i32 %21137, 2
  %21139 = zext i1 %21138 to i8
  store i8 %21139, i8* %57, align 1
  %21140 = load i64, i64* %RAX.i3587.phi.trans.insert, align 8
  %21141 = shl i64 %21140, 32
  %21142 = ashr exact i64 %21141, 32
  %21143 = sext i32 %21113 to i64
  %21144 = mul nsw i64 %21143, %21142
  %21145 = shl i64 %21144, 32
  %21146 = ashr i64 %21145, 47
  %21147 = lshr i64 %21146, 1
  %21148 = trunc i64 %21146 to i8
  %21149 = and i8 %21148, 1
  %21150 = trunc i64 %21147 to i32
  %21151 = and i64 %21147, 4294967295
  store i64 %21151, i64* %RAX.i3587.phi.trans.insert, align 8
  store i8 %21149, i8* %32, align 1
  %21152 = and i32 %21150, 255
  %21153 = tail call i32 @llvm.ctpop.i32(i32 %21152)
  %21154 = trunc i32 %21153 to i8
  %21155 = and i8 %21154, 1
  %21156 = xor i8 %21155, 1
  store i8 %21156, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %21157 = icmp eq i32 %21150, 0
  %21158 = zext i1 %21157 to i8
  store i8 %21158, i8* %48, align 1
  %21159 = lshr i64 %21146, 32
  %21160 = trunc i64 %21159 to i8
  %21161 = and i8 %21160, 1
  store i8 %21161, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %21162 = load i64, i64* %RBP.i, align 8
  %21163 = add i64 %21162, -104
  %21164 = trunc i64 %21147 to i32
  %21165 = add i64 %20955, 65
  store i64 %21165, i64* %3, align 8
  %21166 = inttoptr i64 %21163 to i32*
  store i32 %21164, i32* %21166, align 4
  %21167 = load i64, i64* %RBP.i, align 8
  %21168 = add i64 %21167, -128
  %21169 = load i64, i64* %3, align 8
  %21170 = add i64 %21169, 4
  store i64 %21170, i64* %3, align 8
  %21171 = inttoptr i64 %21168 to i64*
  %21172 = load i64, i64* %21171, align 8
  store i64 %21172, i64* %RDI.i1133, align 8
  %21173 = add i64 %21167, -32
  %21174 = add i64 %21169, 8
  store i64 %21174, i64* %3, align 8
  %21175 = inttoptr i64 %21173 to i64*
  %21176 = load i64, i64* %21175, align 8
  store i64 %21176, i64* %RSI.i739, align 8
  %21177 = add i64 %21167, -112
  %21178 = add i64 %21169, 12
  store i64 %21178, i64* %3, align 8
  %21179 = inttoptr i64 %21177 to i64*
  %21180 = load i64, i64* %21179, align 8
  store i64 %21180, i64* %RDX.i4317.pre-phi, align 8
  %21181 = add i64 %21167, -140
  %21182 = add i64 %21169, 18
  store i64 %21182, i64* %3, align 8
  %21183 = inttoptr i64 %21181 to i32*
  %21184 = load i32, i32* %21183, align 4
  %21185 = zext i32 %21184 to i64
  store i64 %21185, i64* %RCX.i4260.pre-phi, align 8
  %21186 = add i64 %21167, -144
  %21187 = add i64 %21169, 25
  store i64 %21187, i64* %3, align 8
  %21188 = inttoptr i64 %21186 to i32*
  %21189 = load i32, i32* %21188, align 4
  %21190 = zext i32 %21189 to i64
  store i64 %21190, i64* %R8.i5602, align 8
  %21191 = add i64 %21167, -148
  %21192 = add i64 %21169, 32
  store i64 %21192, i64* %3, align 8
  %21193 = inttoptr i64 %21191 to i32*
  %21194 = load i32, i32* %21193, align 4
  %21195 = zext i32 %21194 to i64
  store i64 %21195, i64* %R9.i5580, align 8
  %21196 = add i64 %21167, -104
  %21197 = add i64 %21169, 35
  store i64 %21197, i64* %3, align 8
  %21198 = inttoptr i64 %21196 to i32*
  %21199 = load i32, i32* %21198, align 4
  %21200 = zext i32 %21199 to i64
  store i64 %21200, i64* %RAX.i3587.phi.trans.insert, align 8
  %21201 = add i64 %21167, -80
  %21202 = add i64 %21169, 39
  store i64 %21202, i64* %3, align 8
  %21203 = inttoptr i64 %21201 to i32*
  %21204 = load i32, i32* %21203, align 4
  %21205 = zext i32 %21204 to i64
  store i64 %21205, i64* %68, align 8
  %21206 = add i64 %21167, -96
  %21207 = add i64 %21169, 43
  store i64 %21207, i64* %3, align 8
  %21208 = inttoptr i64 %21206 to i32*
  %21209 = load i32, i32* %21208, align 4
  %21210 = zext i32 %21209 to i64
  store i64 %21210, i64* %R11.i, align 8
  %21211 = add i64 %21167, -100
  %21212 = add i64 %21169, 46
  store i64 %21212, i64* %3, align 8
  %21213 = inttoptr i64 %21211 to i32*
  %21214 = load i32, i32* %21213, align 4
  %21215 = zext i32 %21214 to i64
  store i64 %21215, i64* %RBX.i615, align 8
  %21216 = load i32*, i32** %2119, align 8
  %21217 = add i64 %21169, 49
  store i64 %21217, i64* %3, align 8
  store i32 %21199, i32* %21216, align 4
  %21218 = load i64, i64* %6, align 8
  %21219 = add i64 %21218, 8
  %21220 = load i32, i32* %R10D.i761, align 4
  %21221 = load i64, i64* %3, align 8
  %21222 = add i64 %21221, 5
  store i64 %21222, i64* %3, align 8
  %21223 = inttoptr i64 %21219 to i32*
  store i32 %21220, i32* %21223, align 4
  %21224 = load i64, i64* %6, align 8
  %21225 = add i64 %21224, 16
  %21226 = load i32, i32* %R11D.i5540, align 4
  %21227 = load i64, i64* %3, align 8
  %21228 = add i64 %21227, 5
  store i64 %21228, i64* %3, align 8
  %21229 = inttoptr i64 %21225 to i32*
  store i32 %21226, i32* %21229, align 4
  %21230 = load i64, i64* %6, align 8
  %21231 = add i64 %21230, 24
  %21232 = load i32, i32* %EBX.i5525, align 4
  %21233 = load i64, i64* %3, align 8
  %21234 = add i64 %21233, 4
  store i64 %21234, i64* %3, align 8
  %21235 = inttoptr i64 %21231 to i32*
  store i32 %21232, i32* %21235, align 4
  %21236 = load i64, i64* %3, align 8
  %21237 = add i64 %21236, -11244
  %21238 = add i64 %21236, 5
  %21239 = load i64, i64* %6, align 8
  %21240 = add i64 %21239, -8
  %21241 = inttoptr i64 %21240 to i64*
  store i64 %21238, i64* %21241, align 8
  store i64 %21240, i64* %6, align 8
  store i64 %21237, i64* %3, align 8
  %call2_42309c = tail call %struct.Memory* @sub_4204b0.PartCalMad(%struct.State* nonnull %0, i64 %21237, %struct.Memory* %20748)
  %21242 = load i64, i64* %RBP.i, align 8
  %21243 = add i64 %21242, -104
  %21244 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %21245 = load i64, i64* %3, align 8
  %21246 = add i64 %21245, 3
  store i64 %21246, i64* %3, align 8
  %21247 = inttoptr i64 %21243 to i32*
  store i32 %21244, i32* %21247, align 4
  %21248 = load i64, i64* %RBP.i, align 8
  %21249 = add i64 %21248, -104
  %21250 = load i64, i64* %3, align 8
  %21251 = add i64 %21250, 3
  store i64 %21251, i64* %3, align 8
  %21252 = inttoptr i64 %21249 to i32*
  %21253 = load i32, i32* %21252, align 4
  %21254 = zext i32 %21253 to i64
  store i64 %21254, i64* %RAX.i3587.phi.trans.insert, align 8
  %21255 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %21255, i64* %RDX.i4317.pre-phi, align 8
  %21256 = add i64 %21248, -100
  %21257 = add i64 %21250, 14
  store i64 %21257, i64* %3, align 8
  %21258 = inttoptr i64 %21256 to i32*
  %21259 = load i32, i32* %21258, align 4
  %21260 = zext i32 %21259 to i64
  store i64 %21260, i64* %RCX.i4260.pre-phi, align 8
  %21261 = add i64 %21248, -164
  %21262 = add i64 %21250, 20
  store i64 %21262, i64* %3, align 8
  %21263 = inttoptr i64 %21261 to i32*
  %21264 = load i32, i32* %21263, align 4
  %21265 = sub i32 %21259, %21264
  %21266 = zext i32 %21265 to i64
  store i64 %21266, i64* %RCX.i4260.pre-phi, align 8
  %21267 = icmp ult i32 %21259, %21264
  %21268 = zext i1 %21267 to i8
  store i8 %21268, i8* %32, align 1
  %21269 = and i32 %21265, 255
  %21270 = tail call i32 @llvm.ctpop.i32(i32 %21269)
  %21271 = trunc i32 %21270 to i8
  %21272 = and i8 %21271, 1
  %21273 = xor i8 %21272, 1
  store i8 %21273, i8* %39, align 1
  %21274 = xor i32 %21264, %21259
  %21275 = xor i32 %21274, %21265
  %21276 = lshr i32 %21275, 4
  %21277 = trunc i32 %21276 to i8
  %21278 = and i8 %21277, 1
  store i8 %21278, i8* %45, align 1
  %21279 = icmp eq i32 %21265, 0
  %21280 = zext i1 %21279 to i8
  store i8 %21280, i8* %48, align 1
  %21281 = lshr i32 %21265, 31
  %21282 = trunc i32 %21281 to i8
  store i8 %21282, i8* %51, align 1
  %21283 = lshr i32 %21259, 31
  %21284 = lshr i32 %21264, 31
  %21285 = xor i32 %21284, %21283
  %21286 = xor i32 %21281, %21283
  %21287 = add nuw nsw i32 %21286, %21285
  %21288 = icmp eq i32 %21287, 2
  %21289 = zext i1 %21288 to i8
  store i8 %21289, i8* %57, align 1
  %21290 = add i64 %21248, -76
  %21291 = add i64 %21250, 23
  store i64 %21291, i64* %3, align 8
  %21292 = inttoptr i64 %21290 to i32*
  %21293 = load i32, i32* %21292, align 4
  %21294 = add i32 %21293, %21265
  %21295 = zext i32 %21294 to i64
  store i64 %21295, i64* %RCX.i4260.pre-phi, align 8
  %21296 = icmp ult i32 %21294, %21265
  %21297 = icmp ult i32 %21294, %21293
  %21298 = or i1 %21296, %21297
  %21299 = zext i1 %21298 to i8
  store i8 %21299, i8* %32, align 1
  %21300 = and i32 %21294, 255
  %21301 = tail call i32 @llvm.ctpop.i32(i32 %21300)
  %21302 = trunc i32 %21301 to i8
  %21303 = and i8 %21302, 1
  %21304 = xor i8 %21303, 1
  store i8 %21304, i8* %39, align 1
  %21305 = xor i32 %21293, %21265
  %21306 = xor i32 %21305, %21294
  %21307 = lshr i32 %21306, 4
  %21308 = trunc i32 %21307 to i8
  %21309 = and i8 %21308, 1
  store i8 %21309, i8* %45, align 1
  %21310 = icmp eq i32 %21294, 0
  %21311 = zext i1 %21310 to i8
  store i8 %21311, i8* %48, align 1
  %21312 = lshr i32 %21294, 31
  %21313 = trunc i32 %21312 to i8
  store i8 %21313, i8* %51, align 1
  %21314 = lshr i32 %21293, 31
  %21315 = xor i32 %21312, %21281
  %21316 = xor i32 %21312, %21314
  %21317 = add nuw nsw i32 %21315, %21316
  %21318 = icmp eq i32 %21317, 2
  %21319 = zext i1 %21318 to i8
  store i8 %21319, i8* %57, align 1
  %21320 = sext i32 %21294 to i64
  store i64 %21320, i64* %RSI.i739, align 8
  %21321 = shl nsw i64 %21320, 3
  %21322 = add i64 %21255, %21321
  %21323 = add i64 %21250, 30
  store i64 %21323, i64* %3, align 8
  %21324 = inttoptr i64 %21322 to i64*
  %21325 = load i64, i64* %21324, align 8
  store i64 %21325, i64* %RDX.i4317.pre-phi, align 8
  %21326 = load i64, i64* %RBP.i, align 8
  %21327 = add i64 %21326, -96
  %21328 = add i64 %21250, 33
  store i64 %21328, i64* %3, align 8
  %21329 = inttoptr i64 %21327 to i32*
  %21330 = load i32, i32* %21329, align 4
  %21331 = zext i32 %21330 to i64
  store i64 %21331, i64* %RCX.i4260.pre-phi, align 8
  %21332 = add i64 %21326, -160
  %21333 = add i64 %21250, 39
  store i64 %21333, i64* %3, align 8
  %21334 = inttoptr i64 %21332 to i32*
  %21335 = load i32, i32* %21334, align 4
  %21336 = sub i32 %21330, %21335
  %21337 = zext i32 %21336 to i64
  store i64 %21337, i64* %RCX.i4260.pre-phi, align 8
  %21338 = icmp ult i32 %21330, %21335
  %21339 = zext i1 %21338 to i8
  store i8 %21339, i8* %32, align 1
  %21340 = and i32 %21336, 255
  %21341 = tail call i32 @llvm.ctpop.i32(i32 %21340)
  %21342 = trunc i32 %21341 to i8
  %21343 = and i8 %21342, 1
  %21344 = xor i8 %21343, 1
  store i8 %21344, i8* %39, align 1
  %21345 = xor i32 %21335, %21330
  %21346 = xor i32 %21345, %21336
  %21347 = lshr i32 %21346, 4
  %21348 = trunc i32 %21347 to i8
  %21349 = and i8 %21348, 1
  store i8 %21349, i8* %45, align 1
  %21350 = icmp eq i32 %21336, 0
  %21351 = zext i1 %21350 to i8
  store i8 %21351, i8* %48, align 1
  %21352 = lshr i32 %21336, 31
  %21353 = trunc i32 %21352 to i8
  store i8 %21353, i8* %51, align 1
  %21354 = lshr i32 %21330, 31
  %21355 = lshr i32 %21335, 31
  %21356 = xor i32 %21355, %21354
  %21357 = xor i32 %21352, %21354
  %21358 = add nuw nsw i32 %21357, %21356
  %21359 = icmp eq i32 %21358, 2
  %21360 = zext i1 %21359 to i8
  store i8 %21360, i8* %57, align 1
  %21361 = add i64 %21326, -76
  %21362 = add i64 %21250, 42
  store i64 %21362, i64* %3, align 8
  %21363 = inttoptr i64 %21361 to i32*
  %21364 = load i32, i32* %21363, align 4
  %21365 = add i32 %21364, %21336
  %21366 = zext i32 %21365 to i64
  store i64 %21366, i64* %RCX.i4260.pre-phi, align 8
  %21367 = icmp ult i32 %21365, %21336
  %21368 = icmp ult i32 %21365, %21364
  %21369 = or i1 %21367, %21368
  %21370 = zext i1 %21369 to i8
  store i8 %21370, i8* %32, align 1
  %21371 = and i32 %21365, 255
  %21372 = tail call i32 @llvm.ctpop.i32(i32 %21371)
  %21373 = trunc i32 %21372 to i8
  %21374 = and i8 %21373, 1
  %21375 = xor i8 %21374, 1
  store i8 %21375, i8* %39, align 1
  %21376 = xor i32 %21364, %21336
  %21377 = xor i32 %21376, %21365
  %21378 = lshr i32 %21377, 4
  %21379 = trunc i32 %21378 to i8
  %21380 = and i8 %21379, 1
  store i8 %21380, i8* %45, align 1
  %21381 = icmp eq i32 %21365, 0
  %21382 = zext i1 %21381 to i8
  store i8 %21382, i8* %48, align 1
  %21383 = lshr i32 %21365, 31
  %21384 = trunc i32 %21383 to i8
  store i8 %21384, i8* %51, align 1
  %21385 = lshr i32 %21364, 31
  %21386 = xor i32 %21383, %21352
  %21387 = xor i32 %21383, %21385
  %21388 = add nuw nsw i32 %21386, %21387
  %21389 = icmp eq i32 %21388, 2
  %21390 = zext i1 %21389 to i8
  store i8 %21390, i8* %57, align 1
  %21391 = sext i32 %21365 to i64
  store i64 %21391, i64* %RSI.i739, align 8
  %21392 = shl nsw i64 %21391, 2
  %21393 = add i64 %21325, %21392
  %21394 = load i32, i32* %EAX.i4185.pre-phi, align 4
  %21395 = add i64 %21250, 48
  store i64 %21395, i64* %3, align 8
  %21396 = inttoptr i64 %21393 to i32*
  store i32 %21394, i32* %21396, align 4
  %21397 = load i64, i64* %RBP.i, align 8
  %21398 = add i64 %21397, -104
  %21399 = load i64, i64* %3, align 8
  %21400 = add i64 %21399, 3
  store i64 %21400, i64* %3, align 8
  %21401 = inttoptr i64 %21398 to i32*
  %21402 = load i32, i32* %21401, align 4
  %21403 = zext i32 %21402 to i64
  store i64 %21403, i64* %RAX.i3587.phi.trans.insert, align 8
  %21404 = add i64 %21397, -80
  %21405 = add i64 %21399, 6
  store i64 %21405, i64* %3, align 8
  %21406 = inttoptr i64 %21404 to i32*
  %21407 = load i32, i32* %21406, align 4
  %21408 = sub i32 %21402, %21407
  %21409 = icmp ult i32 %21402, %21407
  %21410 = zext i1 %21409 to i8
  store i8 %21410, i8* %32, align 1
  %21411 = and i32 %21408, 255
  %21412 = tail call i32 @llvm.ctpop.i32(i32 %21411)
  %21413 = trunc i32 %21412 to i8
  %21414 = and i8 %21413, 1
  %21415 = xor i8 %21414, 1
  store i8 %21415, i8* %39, align 1
  %21416 = xor i32 %21407, %21402
  %21417 = xor i32 %21416, %21408
  %21418 = lshr i32 %21417, 4
  %21419 = trunc i32 %21418 to i8
  %21420 = and i8 %21419, 1
  store i8 %21420, i8* %45, align 1
  %21421 = icmp eq i32 %21408, 0
  %21422 = zext i1 %21421 to i8
  store i8 %21422, i8* %48, align 1
  %21423 = lshr i32 %21408, 31
  %21424 = trunc i32 %21423 to i8
  store i8 %21424, i8* %51, align 1
  %21425 = lshr i32 %21402, 31
  %21426 = lshr i32 %21407, 31
  %21427 = xor i32 %21426, %21425
  %21428 = xor i32 %21423, %21425
  %21429 = add nuw nsw i32 %21428, %21427
  %21430 = icmp eq i32 %21429, 2
  %21431 = zext i1 %21430 to i8
  store i8 %21431, i8* %57, align 1
  %21432 = icmp ne i8 %21424, 0
  %21433 = xor i1 %21432, %21430
  %.v519 = select i1 %21433, i64 12, i64 46
  %21434 = add i64 %21399, %.v519
  store i64 %21434, i64* %3, align 8
  br i1 %21433, label %block_4230e0, label %block_.L_423102

block_4230e0:                                     ; preds = %routine_shll__cl___esi.exit
  %21435 = add i64 %21397, -96
  %21436 = add i64 %21434, 3
  store i64 %21436, i64* %3, align 8
  %21437 = inttoptr i64 %21435 to i32*
  %21438 = load i32, i32* %21437, align 4
  %21439 = zext i32 %21438 to i64
  store i64 %21439, i64* %RAX.i3587.phi.trans.insert, align 8
  %21440 = add i64 %21397, -168
  %21441 = add i64 %21434, 9
  store i64 %21441, i64* %3, align 8
  %21442 = inttoptr i64 %21440 to i32*
  store i32 %21438, i32* %21442, align 4
  %21443 = load i64, i64* %RBP.i, align 8
  %21444 = add i64 %21443, -100
  %21445 = load i64, i64* %3, align 8
  %21446 = add i64 %21445, 3
  store i64 %21446, i64* %3, align 8
  %21447 = inttoptr i64 %21444 to i32*
  %21448 = load i32, i32* %21447, align 4
  %21449 = zext i32 %21448 to i64
  store i64 %21449, i64* %RAX.i3587.phi.trans.insert, align 8
  %21450 = add i64 %21443, -172
  %21451 = add i64 %21445, 9
  store i64 %21451, i64* %3, align 8
  %21452 = inttoptr i64 %21450 to i32*
  store i32 %21448, i32* %21452, align 4
  %21453 = load i64, i64* %RBP.i, align 8
  %21454 = add i64 %21453, -104
  %21455 = load i64, i64* %3, align 8
  %21456 = add i64 %21455, 3
  store i64 %21456, i64* %3, align 8
  %21457 = inttoptr i64 %21454 to i32*
  %21458 = load i32, i32* %21457, align 4
  %21459 = zext i32 %21458 to i64
  store i64 %21459, i64* %RAX.i3587.phi.trans.insert, align 8
  %21460 = add i64 %21453, -80
  %21461 = add i64 %21455, 6
  store i64 %21461, i64* %3, align 8
  %21462 = inttoptr i64 %21460 to i32*
  store i32 %21458, i32* %21462, align 4
  %21463 = load i64, i64* %RBP.i, align 8
  %21464 = add i64 %21463, -200
  %21465 = load i64, i64* %3, align 8
  %21466 = add i64 %21465, 10
  store i64 %21466, i64* %3, align 8
  %21467 = inttoptr i64 %21464 to i32*
  store i32 0, i32* %21467, align 4
  %.pre398 = load i64, i64* %3, align 8
  br label %block_.L_423102

block_.L_423102:                                  ; preds = %routine_shll__cl___esi.exit, %block_4230e0
  %21468 = phi i64 [ %21434, %routine_shll__cl___esi.exit ], [ %.pre398, %block_4230e0 ]
  %21469 = add i64 %21468, 5
  store i64 %21469, i64* %3, align 8
  br label %block_.L_423107

block_.L_423107:                                  ; preds = %block_422fca, %block_.L_423102
  %21470 = phi i64 [ %20932, %block_422fca ], [ %21469, %block_.L_423102 ]
  %MEMORY.95 = phi %struct.Memory* [ %20748, %block_422fca ], [ %call2_42309c, %block_.L_423102 ]
  %21471 = add i64 %21470, 5
  store i64 %21471, i64* %3, align 8
  %.pre399 = load i64, i64* %RBP.i, align 8
  br label %block_.L_42310c

block_.L_42310c:                                  ; preds = %block_422fb1, %block_422f6a, %block_.L_423107
  %21472 = phi i64 [ %20676, %block_422f6a ], [ %20750, %block_422fb1 ], [ %.pre399, %block_.L_423107 ]
  %21473 = phi i64 [ %20708, %block_422f6a ], [ %20782, %block_422fb1 ], [ %21471, %block_.L_423107 ]
  %MEMORY.96 = phi %struct.Memory* [ %20674, %block_422f6a ], [ %20748, %block_422fb1 ], [ %MEMORY.95, %block_.L_423107 ]
  %21474 = add i64 %21472, -192
  %21475 = add i64 %21473, 11
  store i64 %21475, i64* %3, align 8
  %21476 = inttoptr i64 %21474 to i32*
  %21477 = load i32, i32* %21476, align 4
  %21478 = add i32 %21477, 1
  %21479 = zext i32 %21478 to i64
  store i64 %21479, i64* %RAX.i3587.phi.trans.insert, align 8
  %21480 = icmp eq i32 %21477, -1
  %21481 = icmp eq i32 %21478, 0
  %21482 = or i1 %21480, %21481
  %21483 = zext i1 %21482 to i8
  store i8 %21483, i8* %32, align 1
  %21484 = and i32 %21478, 255
  %21485 = tail call i32 @llvm.ctpop.i32(i32 %21484)
  %21486 = trunc i32 %21485 to i8
  %21487 = and i8 %21486, 1
  %21488 = xor i8 %21487, 1
  store i8 %21488, i8* %39, align 1
  %21489 = xor i32 %21478, %21477
  %21490 = lshr i32 %21489, 4
  %21491 = trunc i32 %21490 to i8
  %21492 = and i8 %21491, 1
  store i8 %21492, i8* %45, align 1
  %21493 = zext i1 %21481 to i8
  store i8 %21493, i8* %48, align 1
  %21494 = lshr i32 %21478, 31
  %21495 = trunc i32 %21494 to i8
  store i8 %21495, i8* %51, align 1
  %21496 = lshr i32 %21477, 31
  %21497 = xor i32 %21494, %21496
  %21498 = add nuw nsw i32 %21497, %21494
  %21499 = icmp eq i32 %21498, 2
  %21500 = zext i1 %21499 to i8
  store i8 %21500, i8* %57, align 1
  %21501 = add i64 %21473, 20
  store i64 %21501, i64* %3, align 8
  store i32 %21478, i32* %21476, align 4
  %21502 = load i64, i64* %3, align 8
  %21503 = add i64 %21502, -451
  store i64 %21503, i64* %3, align 8
  br label %block_.L_422f5d

block_.L_423125:                                  ; preds = %block_.L_422f5d
  %21504 = add i64 %20514, -200
  %21505 = add i64 %20542, 7
  store i64 %21505, i64* %3, align 8
  %21506 = inttoptr i64 %21504 to i32*
  %21507 = load i32, i32* %21506, align 4
  store i8 0, i8* %32, align 1
  %21508 = and i32 %21507, 255
  %21509 = tail call i32 @llvm.ctpop.i32(i32 %21508)
  %21510 = trunc i32 %21509 to i8
  %21511 = and i8 %21510, 1
  %21512 = xor i8 %21511, 1
  store i8 %21512, i8* %39, align 1
  store i8 0, i8* %45, align 1
  %21513 = icmp eq i32 %21507, 0
  %21514 = zext i1 %21513 to i8
  store i8 %21514, i8* %48, align 1
  %21515 = lshr i32 %21507, 31
  %21516 = trunc i32 %21515 to i8
  store i8 %21516, i8* %51, align 1
  store i8 0, i8* %57, align 1
  %.v515 = select i1 %21513, i64 18, i64 13
  %21517 = add i64 %20542, %.v515
  store i64 %21517, i64* %3, align 8
  br i1 %21513, label %block_.L_423137, label %block_423132

block_423132:                                     ; preds = %block_.L_423125
  %21518 = add i64 %21517, 49
  store i64 %21518, i64* %3, align 8
  br label %block_.L_423163

block_.L_423137:                                  ; preds = %block_.L_423125
  %21519 = add i64 %20514, -168
  %21520 = add i64 %21517, 6
  store i64 %21520, i64* %3, align 8
  %21521 = inttoptr i64 %21519 to i32*
  %21522 = load i32, i32* %21521, align 4
  %21523 = zext i32 %21522 to i64
  store i64 %21523, i64* %RAX.i3587.phi.trans.insert, align 8
  %21524 = add i64 %20514, -184
  %21525 = add i64 %21517, 12
  store i64 %21525, i64* %3, align 8
  %21526 = inttoptr i64 %21524 to i32*
  store i32 %21522, i32* %21526, align 4
  %21527 = load i64, i64* %RBP.i, align 8
  %21528 = add i64 %21527, -172
  %21529 = load i64, i64* %3, align 8
  %21530 = add i64 %21529, 6
  store i64 %21530, i64* %3, align 8
  %21531 = inttoptr i64 %21528 to i32*
  %21532 = load i32, i32* %21531, align 4
  %21533 = zext i32 %21532 to i64
  store i64 %21533, i64* %RAX.i3587.phi.trans.insert, align 8
  %21534 = add i64 %21527, -180
  %21535 = add i64 %21529, 12
  store i64 %21535, i64* %3, align 8
  %21536 = inttoptr i64 %21534 to i32*
  store i32 %21532, i32* %21536, align 4
  %21537 = load i64, i64* %RBP.i, align 8
  %21538 = add i64 %21537, -188
  %21539 = load i64, i64* %3, align 8
  %21540 = add i64 %21539, 6
  store i64 %21540, i64* %3, align 8
  %21541 = inttoptr i64 %21538 to i32*
  %21542 = load i32, i32* %21541, align 4
  %21543 = add i32 %21542, 1
  %21544 = zext i32 %21543 to i64
  store i64 %21544, i64* %RAX.i3587.phi.trans.insert, align 8
  %21545 = icmp eq i32 %21542, -1
  %21546 = icmp eq i32 %21543, 0
  %21547 = or i1 %21545, %21546
  %21548 = zext i1 %21547 to i8
  store i8 %21548, i8* %32, align 1
  %21549 = and i32 %21543, 255
  %21550 = tail call i32 @llvm.ctpop.i32(i32 %21549)
  %21551 = trunc i32 %21550 to i8
  %21552 = and i8 %21551, 1
  %21553 = xor i8 %21552, 1
  store i8 %21553, i8* %39, align 1
  %21554 = xor i32 %21543, %21542
  %21555 = lshr i32 %21554, 4
  %21556 = trunc i32 %21555 to i8
  %21557 = and i8 %21556, 1
  store i8 %21557, i8* %45, align 1
  %21558 = zext i1 %21546 to i8
  store i8 %21558, i8* %48, align 1
  %21559 = lshr i32 %21543, 31
  %21560 = trunc i32 %21559 to i8
  store i8 %21560, i8* %51, align 1
  %21561 = lshr i32 %21542, 31
  %21562 = xor i32 %21559, %21561
  %21563 = add nuw nsw i32 %21562, %21559
  %21564 = icmp eq i32 %21563, 2
  %21565 = zext i1 %21564 to i8
  store i8 %21565, i8* %57, align 1
  %21566 = add i64 %21539, 15
  store i64 %21566, i64* %3, align 8
  store i32 %21543, i32* %21541, align 4
  %21567 = load i64, i64* %3, align 8
  %21568 = add i64 %21567, -558
  store i64 %21568, i64* %3, align 8
  br label %block_.L_422f30

block_.L_423163.loopexit:                         ; preds = %block_.L_422f30
  br label %block_.L_423163

block_.L_423163:                                  ; preds = %block_.L_423163.loopexit, %block_423132
  %21569 = phi i64 [ %21518, %block_423132 ], [ %20499, %block_.L_423163.loopexit ]
  %21570 = phi i64 [ %20514, %block_423132 ], [ %20463, %block_.L_423163.loopexit ]
  %MEMORY.97 = phi %struct.Memory* [ %MEMORY.93, %block_423132 ], [ %MEMORY.92, %block_.L_423163.loopexit ]
  %21571 = add i64 %21570, -168
  %21572 = add i64 %21569, 6
  store i64 %21572, i64* %3, align 8
  %21573 = inttoptr i64 %21571 to i32*
  %21574 = load i32, i32* %21573, align 4
  %21575 = zext i32 %21574 to i64
  store i64 %21575, i64* %RAX.i3587.phi.trans.insert, align 8
  %21576 = add i64 %21570, -44
  %21577 = add i64 %21569, 9
  store i64 %21577, i64* %3, align 8
  %21578 = inttoptr i64 %21576 to i32*
  %21579 = load i32, i32* %21578, align 4
  %21580 = sub i32 %21574, %21579
  %21581 = zext i32 %21580 to i64
  store i64 %21581, i64* %RAX.i3587.phi.trans.insert, align 8
  %21582 = icmp ult i32 %21574, %21579
  %21583 = zext i1 %21582 to i8
  store i8 %21583, i8* %32, align 1
  %21584 = and i32 %21580, 255
  %21585 = tail call i32 @llvm.ctpop.i32(i32 %21584)
  %21586 = trunc i32 %21585 to i8
  %21587 = and i8 %21586, 1
  %21588 = xor i8 %21587, 1
  store i8 %21588, i8* %39, align 1
  %21589 = xor i32 %21579, %21574
  %21590 = xor i32 %21589, %21580
  %21591 = lshr i32 %21590, 4
  %21592 = trunc i32 %21591 to i8
  %21593 = and i8 %21592, 1
  store i8 %21593, i8* %45, align 1
  %21594 = icmp eq i32 %21580, 0
  %21595 = zext i1 %21594 to i8
  store i8 %21595, i8* %48, align 1
  %21596 = lshr i32 %21580, 31
  %21597 = trunc i32 %21596 to i8
  store i8 %21597, i8* %51, align 1
  %21598 = lshr i32 %21574, 31
  %21599 = lshr i32 %21579, 31
  %21600 = xor i32 %21599, %21598
  %21601 = xor i32 %21596, %21598
  %21602 = add nuw nsw i32 %21601, %21600
  %21603 = icmp eq i32 %21602, 2
  %21604 = zext i1 %21603 to i8
  store i8 %21604, i8* %57, align 1
  %CX.i30 = bitcast %union.anon* %108 to i16*
  %21605 = trunc i32 %21580 to i16
  store i16 %21605, i16* %CX.i30, align 2
  %21606 = add i64 %21570, -64
  %21607 = add i64 %21569, 16
  store i64 %21607, i64* %3, align 8
  %21608 = inttoptr i64 %21606 to i64*
  %21609 = load i64, i64* %21608, align 8
  store i64 %21609, i64* %RDX.i4317.pre-phi, align 8
  %21610 = add i64 %21569, 19
  store i64 %21610, i64* %3, align 8
  %21611 = inttoptr i64 %21609 to i16*
  store i16 %21605, i16* %21611, align 2
  %21612 = load i64, i64* %RBP.i, align 8
  %21613 = add i64 %21612, -172
  %21614 = load i64, i64* %3, align 8
  %21615 = add i64 %21614, 6
  store i64 %21615, i64* %3, align 8
  %21616 = inttoptr i64 %21613 to i32*
  %21617 = load i32, i32* %21616, align 4
  %21618 = zext i32 %21617 to i64
  store i64 %21618, i64* %RAX.i3587.phi.trans.insert, align 8
  %21619 = add i64 %21612, -48
  %21620 = add i64 %21614, 9
  store i64 %21620, i64* %3, align 8
  %21621 = inttoptr i64 %21619 to i32*
  %21622 = load i32, i32* %21621, align 4
  %21623 = sub i32 %21617, %21622
  %21624 = zext i32 %21623 to i64
  store i64 %21624, i64* %RAX.i3587.phi.trans.insert, align 8
  %21625 = icmp ult i32 %21617, %21622
  %21626 = zext i1 %21625 to i8
  store i8 %21626, i8* %32, align 1
  %21627 = and i32 %21623, 255
  %21628 = tail call i32 @llvm.ctpop.i32(i32 %21627)
  %21629 = trunc i32 %21628 to i8
  %21630 = and i8 %21629, 1
  %21631 = xor i8 %21630, 1
  store i8 %21631, i8* %39, align 1
  %21632 = xor i32 %21622, %21617
  %21633 = xor i32 %21632, %21623
  %21634 = lshr i32 %21633, 4
  %21635 = trunc i32 %21634 to i8
  %21636 = and i8 %21635, 1
  store i8 %21636, i8* %45, align 1
  %21637 = icmp eq i32 %21623, 0
  %21638 = zext i1 %21637 to i8
  store i8 %21638, i8* %48, align 1
  %21639 = lshr i32 %21623, 31
  %21640 = trunc i32 %21639 to i8
  store i8 %21640, i8* %51, align 1
  %21641 = lshr i32 %21617, 31
  %21642 = lshr i32 %21622, 31
  %21643 = xor i32 %21642, %21641
  %21644 = xor i32 %21639, %21641
  %21645 = add nuw nsw i32 %21644, %21643
  %21646 = icmp eq i32 %21645, 2
  %21647 = zext i1 %21646 to i8
  store i8 %21647, i8* %57, align 1
  %21648 = trunc i32 %21623 to i16
  store i16 %21648, i16* %CX.i30, align 2
  %21649 = add i64 %21612, -72
  %21650 = add i64 %21614, 16
  store i64 %21650, i64* %3, align 8
  %21651 = inttoptr i64 %21649 to i64*
  %21652 = load i64, i64* %21651, align 8
  store i64 %21652, i64* %RDX.i4317.pre-phi, align 8
  %21653 = add i64 %21614, 19
  store i64 %21653, i64* %3, align 8
  %21654 = inttoptr i64 %21652 to i16*
  store i16 %21648, i16* %21654, align 2
  %21655 = load i64, i64* %RBP.i, align 8
  %21656 = add i64 %21655, -80
  %21657 = load i64, i64* %3, align 8
  %21658 = add i64 %21657, 3
  store i64 %21658, i64* %3, align 8
  %21659 = inttoptr i64 %21656 to i32*
  %21660 = load i32, i32* %21659, align 4
  %21661 = zext i32 %21660 to i64
  store i64 %21661, i64* %RAX.i3587.phi.trans.insert, align 8
  %21662 = load i64, i64* %6, align 8
  %21663 = add i64 %21662, 440
  store i64 %21663, i64* %6, align 8
  %21664 = icmp ugt i64 %21662, -441
  %21665 = zext i1 %21664 to i8
  store i8 %21665, i8* %32, align 1
  %21666 = trunc i64 %21663 to i32
  %21667 = and i32 %21666, 255
  %21668 = tail call i32 @llvm.ctpop.i32(i32 %21667)
  %21669 = trunc i32 %21668 to i8
  %21670 = and i8 %21669, 1
  %21671 = xor i8 %21670, 1
  store i8 %21671, i8* %39, align 1
  %21672 = xor i64 %21662, 16
  %21673 = xor i64 %21672, %21663
  %21674 = lshr i64 %21673, 4
  %21675 = trunc i64 %21674 to i8
  %21676 = and i8 %21675, 1
  store i8 %21676, i8* %45, align 1
  %21677 = icmp eq i64 %21663, 0
  %21678 = zext i1 %21677 to i8
  store i8 %21678, i8* %48, align 1
  %21679 = lshr i64 %21663, 63
  %21680 = trunc i64 %21679 to i8
  store i8 %21680, i8* %51, align 1
  %21681 = lshr i64 %21662, 63
  %21682 = xor i64 %21679, %21681
  %21683 = add nuw nsw i64 %21682, %21679
  %21684 = icmp eq i64 %21683, 2
  %21685 = zext i1 %21684 to i8
  store i8 %21685, i8* %57, align 1
  %21686 = add i64 %21657, 11
  store i64 %21686, i64* %3, align 8
  %21687 = add i64 %21662, 448
  %21688 = inttoptr i64 %21663 to i64*
  %21689 = load i64, i64* %21688, align 8
  store i64 %21689, i64* %RBX.i615, align 8
  store i64 %21687, i64* %6, align 8
  %21690 = add i64 %21657, 13
  store i64 %21690, i64* %3, align 8
  %21691 = add i64 %21662, 456
  %21692 = inttoptr i64 %21687 to i64*
  %21693 = load i64, i64* %21692, align 8
  store i64 %21693, i64* %R14.i599, align 8
  store i64 %21691, i64* %6, align 8
  %21694 = add i64 %21657, 15
  store i64 %21694, i64* %3, align 8
  %21695 = add i64 %21662, 464
  %21696 = inttoptr i64 %21691 to i64*
  %21697 = load i64, i64* %21696, align 8
  store i64 %21697, i64* %R15.i285, align 8
  store i64 %21695, i64* %6, align 8
  %21698 = add i64 %21657, 16
  store i64 %21698, i64* %3, align 8
  %21699 = add i64 %21662, 472
  %21700 = inttoptr i64 %21695 to i64*
  %21701 = load i64, i64* %21700, align 8
  store i64 %21701, i64* %RBP.i, align 8
  store i64 %21699, i64* %6, align 8
  %21702 = add i64 %21657, 17
  store i64 %21702, i64* %3, align 8
  %21703 = inttoptr i64 %21699 to i64*
  %21704 = load i64, i64* %21703, align 8
  store i64 %21704, i64* %3, align 8
  %21705 = add i64 %21662, 480
  store i64 %21705, i64* %6, align 8
  ret %struct.Memory* %MEMORY.97
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__r15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %3 = load i64, i64* %R15, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__r14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %3 = load i64, i64* %R14, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x1b8___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -440
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 440
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si___ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %SI, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x38__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x30__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, 48
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x20__rbp____rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x18__rbp____r14w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, 24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R14W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x10__rbp____r15w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, 16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R15W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__MINUS0x22__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -34
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i32, i32* %R9D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r15w__MINUS0x36__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -54
  %6 = load i16, i16* %R15W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r14w__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i16, i16* %R14W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rbx__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %RBX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r11__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %R11, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__MINUS0x4c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11ad0__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 72400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4207de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3758__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 14168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0xc__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x278___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 632
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x214__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovnel__ecx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = load i64, i64* %RSI, align 8
  %12 = select i1 %10, i64 %5, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4207eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x9108f__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x9108f__rip__type* @G_0x9108f__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x9108f__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x9108f__rip__type* @G_0x9108f__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x74__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x722b20___rcx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = shl i64 %3, 3
  %5 = add i64 %4, 7482144
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswq_MINUS0x22__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -34
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1920__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_MINUS0x58__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, %11
  store double %12, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -132
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x54__rcx__rdx_8____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 84
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -140
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x50__rcx__rdx_8____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 80
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -144
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x90__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -148
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x88__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RAX, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x36__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -54
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -152
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x38__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -156
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x40__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = bitcast i64* %RDX to i16**
  %4 = load i16*, i16** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i16, i16* %4, align 2
  %8 = sext i16 %7 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -160
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x48__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -164
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4d4__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xcc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -204
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11ad0__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 72400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_42096e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x3c__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42097f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x3c__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x4c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -76
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_420a01(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x34__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x4c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x90__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -144
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_420a01(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x4c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x8c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -140
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x49e480___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x49e480_type* @G__0x49e480 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420a0f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x49e4c0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x49e4c0_type* @G__0x49e4c0 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__esi___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RSI, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6d32d0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RCX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RCX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memset_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x22__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -34
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_420ae9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x6cd480(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_420ad1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_0x70d4b0___rax_4____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, 7394480
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 9
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = bitcast %union.VectorReg* %3 to i32*
  store i32 %11, i32* %12, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 4
  %14 = bitcast i8* %13 to float*
  store float 0.000000e+00, float* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %16 = bitcast i64* %15 to float*
  store float 0.000000e+00, float* %16, align 1
  %17 = getelementptr inbounds i8, i8* %4, i64 12
  %18 = bitcast i8* %17 to float*
  store float 0.000000e+00, float* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6cd480___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull_0x6cd480___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  %6 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %7 = shl i64 %3, 32
  %8 = ashr exact i64 %7, 32
  %9 = sext i32 %6 to i64
  %10 = mul nsw i64 %9, %8
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %RCX, align 8
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__ecx___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divss__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = extractelement <2 x float> %9, i32 0
  %16 = extractelement <2 x float> %14, i32 0
  %17 = fdiv float %15, %16
  %18 = bitcast [32 x %union.VectorReg]* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %9 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %5, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %12, i32 0
  %24 = bitcast i64* %10 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %12, i32 1
  %26 = getelementptr inbounds i8, i8* %5, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subss_0x724300___rax_4____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, 7488256
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 9
  store i64 %9, i64* %PC, align 8
  %10 = bitcast %union.VectorReg* %3 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13 = bitcast i64* %12 to <2 x i32>*
  %14 = load <2 x i32>, <2 x i32>* %13, align 1
  %15 = inttoptr i64 %7 to float*
  %16 = load float, float* %15, align 4
  %17 = extractelement <2 x float> %11, i32 0
  %18 = fsub float %17, %16
  %19 = bitcast %union.VectorReg* %3 to float*
  store float %18, float* %19, align 1
  %20 = bitcast <2 x float> %11 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i32 1
  %22 = getelementptr inbounds i8, i8* %4, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  %24 = extractelement <2 x i32> %14, i32 0
  %25 = bitcast i64* %12 to i32*
  store i32 %24, i32* %25, align 1
  %26 = extractelement <2 x i32> %14, i32 1
  %27 = getelementptr inbounds i8, i8* %4, i64 12
  %28 = bitcast i8* %27 to i32*
  store i32 %26, i32* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm0__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -208
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subss_0x6f8ee0___rax_4____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, 7311072
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 9
  store i64 %9, i64* %PC, align 8
  %10 = bitcast %union.VectorReg* %3 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13 = bitcast i64* %12 to <2 x i32>*
  %14 = load <2 x i32>, <2 x i32>* %13, align 1
  %15 = inttoptr i64 %7 to float*
  %16 = load float, float* %15, align 4
  %17 = extractelement <2 x float> %11, i32 0
  %18 = fsub float %17, %16
  %19 = bitcast %union.VectorReg* %3 to float*
  store float %18, float* %19, align 1
  %20 = bitcast <2 x float> %11 to <2 x i32>
  %21 = extractelement <2 x i32> %20, i32 1
  %22 = getelementptr inbounds i8, i8* %4, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  %24 = extractelement <2 x i32> %14, i32 0
  %25 = bitcast i64* %12 to i32*
  store i32 %24, i32* %25, align 1
  %26 = extractelement <2 x i32> %14, i32 1
  %27 = getelementptr inbounds i8, i8* %4, i64 12
  %28 = bitcast i8* %27 to i32*
  store i32 %26, i32* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm0__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420ae4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_xorps__xmm0___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420c32(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_420b90(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x6d1900(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_420b78(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6d1900___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull_0x6d1900___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  %6 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %7 = shl i64 %3, 32
  %8 = ashr exact i64 %7, 32
  %9 = sext i32 %6 to i64
  %10 = mul nsw i64 %9, %8
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %RCX, align 8
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420b8b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420c2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x72369c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_420c15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x72369c___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull_0x72369c___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  %6 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %7 = shl i64 %3, 32
  %8 = ashr exact i64 %7, 32
  %9 = sext i32 %6 to i64
  %10 = mul nsw i64 %9, %8
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %RCX, align 8
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420c28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x84__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6f8f00___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x88__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RDX, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x98__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -152
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xf0__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___r8__rdi_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6f8f00___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6f8f00_type* @G_0x6f8f00 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RSI, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x9c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -156
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rdi__r9_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %R9, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RDX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RAX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x10___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 47
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x80__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x20__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x70__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x90__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -144
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x94__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -148
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____ebx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = bitcast i64* %RSP to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__0x8__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d__0x10__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 16
  %6 = load i32, i32* %R11D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ebx__0x18__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %EBX = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 24
  %6 = load i32, i32* %EBX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.PartCalMad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6d32d0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6d32d0_type* @G_0x6d32d0 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4c__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rdx__rsi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x50__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -80
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_420d28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -168
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -172
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_420f08(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x6cb7a0___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 7124896
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %3 to i32
  %10 = inttoptr i64 %6 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %9
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %RAX, align 8
  %14 = icmp ult i32 %12, %9
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %9
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %9, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x6cb7b0___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 7124912
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %3 to i32
  %10 = inttoptr i64 %6 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %9
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %RAX, align 8
  %14 = icmp ult i32 %12, %9
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %9
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %9, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xa0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -160
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.abs_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_420eef(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xa4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -164
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xa4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -164
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x4c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xa0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -160
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0____rax__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = and i32 %10, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = icmp eq i32 %10, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i32 %10, 31
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_420eea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xf8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xf8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_420ee5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420eea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420eef(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420ef4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -192
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_420d4a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x2c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -44
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_420f26(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -48
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_421281(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_42109c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_421097(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x100__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x100__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_421092(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421097(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42109c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42127c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_421263(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42125e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x108__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x108__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_421259(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42125e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421263(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421268(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4210be(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421281(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_42149e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6d1fa0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x10c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -268
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -268
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6d1fa4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x110__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x110__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_42143a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_421435(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x118__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x118__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_421430(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421435(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42143a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x72369c___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__eax___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl_0x72369c___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to <2 x i32>*
  %8 = load <2 x i32>, <2 x i32>* %7, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to <2 x i32>*
  %11 = load <2 x i32>, <2 x i32>* %10, align 1
  %12 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %13 = sitofp i32 %12 to float
  %14 = bitcast %union.VectorReg* %3 to float*
  store float %13, float* %14, align 1
  %15 = extractelement <2 x i32> %8, i32 1
  %16 = getelementptr inbounds i8, i8* %4, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %11, i32 0
  %19 = bitcast i64* %9 to i32*
  store i32 %18, i32* %19, align 1
  %20 = extractelement <2 x i32> %11, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulss_MINUS0xd4__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -212
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to float*
  %15 = load float, float* %14, align 4
  %16 = extractelement <2 x float> %10, i32 0
  %17 = fmul float %16, %15
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %10 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 0
  %24 = bitcast i64* %11 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %13, i32 1
  %26 = getelementptr inbounds i8, i8* %4, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomiss__xmm0___xmm1(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %4 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 1
  %9 = extractelement <2 x float> %8, i32 0
  %10 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 1
  %12 = extractelement <2 x float> %11, i32 0
  %13 = fcmp uno float %9, %12
  br i1 %13, label %14, label %24

; <label>:14:                                     ; preds = %block_400488
  %15 = fadd float %9, %12
  %16 = bitcast float %15 to i32
  %17 = and i32 %16, 2143289344
  %18 = icmp eq i32 %17, 2139095040
  %19 = and i32 %16, 4194303
  %20 = icmp ne i32 %19, 0
  %21 = and i1 %18, %20
  br i1 %21, label %22, label %30

; <label>:22:                                     ; preds = %14
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = fcmp ogt float %9, %12
  br i1 %25, label %30, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp olt float %9, %12
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %26
  %29 = fcmp oeq float %9, %12
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %28, %26, %24, %14
  %31 = phi i8 [ 0, %24 ], [ 0, %26 ], [ 1, %28 ], [ 1, %14 ]
  %32 = phi i8 [ 0, %24 ], [ 0, %26 ], [ 0, %28 ], [ 1, %14 ]
  %33 = phi i8 [ 0, %24 ], [ 1, %26 ], [ 0, %28 ], [ 1, %14 ]
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %30, %28
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %40, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %37, %22
  %41 = phi %struct.Memory* [ %23, %22 ], [ %2, %37 ]
  ret %struct.Memory* %41
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_421467(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422f0e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulss_MINUS0xd0__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -208
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to float*
  %15 = load float, float* %14, align 4
  %16 = extractelement <2 x float> %10, i32 0
  %17 = fmul float %16, %15
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %10 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 0
  %24 = bitcast i64* %11 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %13, i32 1
  %26 = getelementptr inbounds i8, i8* %4, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_421494(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422cbe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421499(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42149e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x22__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -34
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4214c4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x22__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -34
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, 1
  %8 = icmp ne i32 %4, -1
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %4, 16
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %4, 31
  %30 = xor i32 %29, 1
  %31 = xor i32 %26, %29
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4214e5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_421699(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x722ca8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x722ca8_type* @G_0x722ca8 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl_MINUS0xcc__rbp_(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = inttoptr i64 %4 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = shl nuw i64 %14, 32
  %19 = or i64 %18, %10
  %20 = sdiv i64 %19, %17
  %21 = shl i64 %20, 32
  %22 = ashr exact i64 %21, 32
  %23 = icmp eq i64 %20, %22
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %block_400488
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:26:                                     ; preds = %block_400488
  %27 = srem i64 %19, %17
  %28 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %29 = and i64 %20, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %31 = and i64 %27, 4294967295
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %26, %24
  %38 = phi %struct.Memory* [ %25, %24 ], [ %2, %26 ]
  ret %struct.Memory* %38
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_421699(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x70fd54___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x70fd54_type* @G_0x70fd54 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x11c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -284
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x11c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -284
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x70fd58___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x70fd58_type* @G_0x70fd58 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -288
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x120__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_421694(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_42168f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x128__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42168a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42168f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421694(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421699(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0xb40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4218b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4216c5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_4216fb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4218af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4216fb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -2
  %8 = icmp ult i32 %4, 2
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x710010___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x12c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -300
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x12c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -300
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x710014___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x130__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -304
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x130__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_4218aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4218a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x138__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x138__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4218a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4218a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4218aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4218af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421aad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4218cb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_4218f4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_421aa8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x13c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -316
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x13c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -316
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x140__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -320
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x140__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -320
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_421aa3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_421a9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x148__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -328
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x148__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -328
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_421a99(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421a9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421aa3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421aa8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_421c8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_421c74(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_421c6f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x150__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x150__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_421c6a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421c6f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421c74(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421c79(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421acf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_421cfe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x6cd480___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl_0x6cd480___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to <2 x i32>*
  %8 = load <2 x i32>, <2 x i32>* %7, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to <2 x i32>*
  %11 = load <2 x i32>, <2 x i32>* %10, align 1
  %12 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %13 = sitofp i32 %12 to float
  %14 = bitcast %union.VectorReg* %3 to float*
  store float %13, float* %14, align 1
  %15 = extractelement <2 x i32> %8, i32 1
  %16 = getelementptr inbounds i8, i8* %4, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %11, i32 0
  %19 = bitcast i64* %9 to i32*
  store i32 %18, i32* %19, align 1
  %20 = extractelement <2 x i32> %11, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_421cc7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_421cf4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421cf9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421dd5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_421d6c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_421d35(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_421d62(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421d67(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421dd0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x6d1900___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl_0x6d1900___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to <2 x i32>*
  %8 = load <2 x i32>, <2 x i32>* %7, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to <2 x i32>*
  %11 = load <2 x i32>, <2 x i32>* %10, align 1
  %12 = load i32, i32* bitcast (%G_0x6d1900_type* @G_0x6d1900 to i32*), align 8
  %13 = sitofp i32 %12 to float
  %14 = bitcast %union.VectorReg* %3 to float*
  store float %13, float* %14, align 1
  %15 = extractelement <2 x i32> %8, i32 1
  %16 = getelementptr inbounds i8, i8* %4, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %11, i32 0
  %19 = bitcast i64* %9 to i32*
  store i32 %18, i32* %19, align 1
  %20 = extractelement <2 x i32> %11, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_421d99(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_421dc6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421dcb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -6
  %10 = icmp ult i32 %8, 6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_421de4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421de9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xbc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x154__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -340
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x154__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -340
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_422161(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xbc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -176
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xb0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -176
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_421fc6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_421fc1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -352
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x160__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -352
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_421fbc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421fc1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421fc6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xb0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -176
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_422148(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_422143(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x168__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42213e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422143(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422148(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42214d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_421e0b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x16c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -364
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x16c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -364
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_4224c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_422326(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_422321(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x178__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -376
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x178__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42231c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422321(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422326(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_4224a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4224a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x180__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x180__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_42249e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4224a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4224a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4224ad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42216b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_422532(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_4224fb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422528(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42252d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422609(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4225a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422569(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422596(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42259b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422604(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_4225cd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_4225fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4225ff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x19__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -25
  %10 = icmp ult i32 %8, 25
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4227df(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6d09a0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6d09a0_type* @G_0x6d09a0 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x5c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x711c50___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x711c50_type* @G_0x711c50 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_4227cc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4227c7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x188__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x188__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4227c2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4227c7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4227cc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4227d1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422628(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_422850(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422819(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422846(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42284b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422927(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4228be(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422887(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_4228b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4228b9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422922(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_4228eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422918(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42291d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -396
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_422cb9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x10__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -16
  %10 = icmp ult i32 %8, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_422b46(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6cb7c0___rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = shl i64 %3, 2
  %5 = add i64 %4, 7124928
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull_MINUS0xbc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = shl i64 %3, 32
  %11 = ashr exact i64 %10, 32
  %12 = sext i32 %9 to i64
  %13 = mul nsw i64 %12, %11
  %14 = trunc i64 %13 to i32
  %15 = and i64 %13, 4294967295
  store i64 %15, i64* %RDX, align 8
  %16 = shl i64 %13, 32
  %17 = ashr exact i64 %16, 32
  %18 = icmp ne i64 %17, %13
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i32 %14, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6cb800___rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = shl i64 %3, 2
  %5 = add i64 %4, 7124992
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_422b2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_422b28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x198__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -408
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x198__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -408
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_422b23(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422b28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422b2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422b32(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42296c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_422ca0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_422bc4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422b8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422bba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422bbf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422c9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_422c32(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422bfb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422c28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422c2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422c96(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422c5f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_422c8c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422c91(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422ca0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422ca5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422931(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_422f09(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -6
  %10 = icmp ult i32 %8, 6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_422ecb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x6cb840___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 7125056
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %3 to i32
  %10 = inttoptr i64 %6 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %9
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %RAX, align 8
  %14 = icmp ult i32 %12, %9
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %9
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %9, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x6cb860___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 7125088
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %3 to i32
  %10 = inttoptr i64 %6 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %9
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %RAX, align 8
  %14 = icmp ult i32 %12, %9
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %9
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %9, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_422eb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_422ead(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1a0__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_422ea8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422ead(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422eb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422eb7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422d03(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_422edd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422f09(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422ce0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_423163(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x10000__MINUS0xc4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 65536, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_423125(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_42310c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_423107(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -424
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1a8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_423102(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_423107(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_42310c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_423111(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422f5d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_423137(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_423163(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_422f30(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x2c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx____rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = bitcast i64* %RDX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x1b8___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 440
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -441
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBX, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__r14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %R14, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__r15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %R15, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
