; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: alwaysinline
define %struct.Memory* @Get_Reference_Pixel(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -648
  store i64 %11, i64* %6, align 8
  %12 = icmp ult i64 %8, 640
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i82 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
  store i64 4, i64* %RAX.i82, align 8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %RDI.i129 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
  %41 = add i64 %7, -16
  %42 = load i64, i64* %RDI.i129, align 8
  %43 = add i64 %10, 19
  store i64 %43, i64* %3, align 8
  %44 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %44, align 8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI.i168 = bitcast %union.anon* %45 to i32*
  %46 = load i64, i64* %RBP.i, align 8
  %47 = add i64 %46, -12
  %48 = load i32, i32* %ESI.i168, align 4
  %49 = load i64, i64* %3, align 8
  %50 = add i64 %49, 3
  store i64 %50, i64* %3, align 8
  %51 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %51, align 4
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX.i443 = bitcast %union.anon* %52 to i32*
  %53 = load i64, i64* %RBP.i, align 8
  %54 = add i64 %53, -16
  %55 = load i32, i32* %EDX.i443, align 4
  %56 = load i64, i64* %3, align 8
  %57 = add i64 %56, 3
  store i64 %57, i64* %3, align 8
  %58 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %58, align 4
  %59 = load i64, i64* %RBP.i, align 8
  %60 = add i64 %59, -44
  %61 = load i64, i64* %3, align 8
  %62 = add i64 %61, 7
  store i64 %62, i64* %3, align 8
  %63 = inttoptr i64 %60 to i32*
  store i32 0, i32* %63, align 4
  %RDX.i532 = getelementptr inbounds %union.anon, %union.anon* %52, i64 0, i32 0
  %64 = load i64, i64* %RBP.i, align 8
  %65 = add i64 %64, -16
  %66 = load i64, i64* %3, align 8
  %67 = add i64 %66, 3
  store i64 %67, i64* %3, align 8
  %68 = inttoptr i64 %65 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %69, 3
  %71 = zext i32 %70 to i64
  store i64 %71, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  %72 = tail call i32 @llvm.ctpop.i32(i32 %70)
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %21, align 1
  %76 = icmp eq i32 %70, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %78 = add i64 %64, -20
  %79 = add i64 %66, 9
  store i64 %79, i64* %3, align 8
  %80 = inttoptr i64 %78 to i32*
  store i32 %70, i32* %80, align 4
  %81 = load i64, i64* %RBP.i, align 8
  %82 = add i64 %81, -12
  %83 = load i64, i64* %3, align 8
  %84 = add i64 %83, 3
  store i64 %84, i64* %3, align 8
  %85 = inttoptr i64 %82 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = and i32 %86, 3
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  %89 = tail call i32 @llvm.ctpop.i32(i32 %87)
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = xor i8 %91, 1
  store i8 %92, i8* %21, align 1
  %93 = icmp eq i32 %87, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %95 = add i64 %81, -28
  %96 = add i64 %83, 9
  store i64 %96, i64* %3, align 8
  %97 = inttoptr i64 %95 to i32*
  store i32 %87, i32* %97, align 4
  %98 = load i64, i64* %RBP.i, align 8
  %99 = add i64 %98, -16
  %100 = load i64, i64* %3, align 8
  %101 = add i64 %100, 3
  store i64 %101, i64* %3, align 8
  %102 = inttoptr i64 %99 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = zext i32 %103 to i64
  store i64 %104, i64* %RDX.i532, align 8
  %105 = add i64 %98, -20
  %106 = add i64 %100, 6
  store i64 %106, i64* %3, align 8
  %107 = inttoptr i64 %105 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = sub i32 %103, %108
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDX.i532, align 8
  %111 = icmp ult i32 %103, %108
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %14, align 1
  %113 = and i32 %109, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113)
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %21, align 1
  %118 = xor i32 %108, %103
  %119 = xor i32 %118, %109
  %120 = lshr i32 %119, 4
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1
  %123 = icmp eq i32 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1
  %125 = lshr i32 %109, 31
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %32, align 1
  %127 = lshr i32 %103, 31
  %128 = lshr i32 %108, 31
  %129 = xor i32 %128, %127
  %130 = xor i32 %125, %127
  %131 = add nuw nsw i32 %130, %129
  %132 = icmp eq i32 %131, 2
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %38, align 1
  %EAX.i1056 = bitcast %union.anon* %39 to i32*
  %134 = add i64 %98, -100
  %135 = load i32, i32* %EAX.i1056, align 4
  %136 = add i64 %100, 9
  store i64 %136, i64* %3, align 8
  %137 = inttoptr i64 %134 to i32*
  store i32 %135, i32* %137, align 4
  %138 = load i32, i32* %EDX.i443, align 4
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %3, align 8
  store i64 %139, i64* %RAX.i82, align 8
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %142 = sext i32 %138 to i64
  %143 = lshr i64 %142, 32
  store i64 %143, i64* %141, align 8
  %RSI.i1183 = getelementptr inbounds %union.anon, %union.anon* %45, i64 0, i32 0
  %144 = load i64, i64* %RBP.i, align 8
  %145 = add i64 %144, -100
  %146 = add i64 %140, 6
  store i64 %146, i64* %3, align 8
  %147 = inttoptr i64 %145 to i32*
  %148 = load i32, i32* %147, align 4
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RSI.i1183, align 8
  %150 = add i64 %140, 8
  store i64 %150, i64* %3, align 8
  %151 = sext i32 %148 to i64
  %152 = shl nuw i64 %143, 32
  %153 = or i64 %152, %139
  %154 = sdiv i64 %153, %151
  %155 = shl i64 %154, 32
  %156 = ashr exact i64 %155, 32
  %157 = icmp eq i64 %154, %156
  br i1 %157, label %160, label %158

; <label>:158:                                    ; preds = %entry
  %159 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %150, %struct.Memory* %2)
  %.pre = load i64, i64* %RBP.i, align 8
  %.pre137 = load i32, i32* %EAX.i1056, align 4
  %.pre138 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit1233

; <label>:160:                                    ; preds = %entry
  %161 = srem i64 %153, %151
  %162 = and i64 %154, 4294967295
  store i64 %162, i64* %RAX.i82, align 8
  %163 = and i64 %161, 4294967295
  store i64 %163, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %164 = trunc i64 %154 to i32
  br label %routine_idivl__esi.exit1233

routine_idivl__esi.exit1233:                      ; preds = %160, %158
  %165 = phi i64 [ %.pre138, %158 ], [ %150, %160 ]
  %166 = phi i32 [ %.pre137, %158 ], [ %164, %160 ]
  %167 = phi i64 [ %.pre, %158 ], [ %144, %160 ]
  %168 = phi %struct.Memory* [ %159, %158 ], [ %2, %160 ]
  %169 = add i64 %167, -16
  %170 = add i64 %165, 3
  store i64 %170, i64* %3, align 8
  %171 = inttoptr i64 %169 to i32*
  store i32 %166, i32* %171, align 4
  %172 = load i64, i64* %RBP.i, align 8
  %173 = add i64 %172, -12
  %174 = load i64, i64* %3, align 8
  %175 = add i64 %174, 3
  store i64 %175, i64* %3, align 8
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RAX.i82, align 8
  %179 = add i64 %172, -28
  %180 = add i64 %174, 6
  store i64 %180, i64* %3, align 8
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = sub i32 %177, %182
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RAX.i82, align 8
  %185 = icmp ult i32 %177, %182
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %14, align 1
  %187 = and i32 %183, 255
  %188 = tail call i32 @llvm.ctpop.i32(i32 %187)
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  store i8 %191, i8* %21, align 1
  %192 = xor i32 %182, %177
  %193 = xor i32 %192, %183
  %194 = lshr i32 %193, 4
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  store i8 %196, i8* %26, align 1
  %197 = icmp eq i32 %183, 0
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %29, align 1
  %199 = lshr i32 %183, 31
  %200 = trunc i32 %199 to i8
  store i8 %200, i8* %32, align 1
  %201 = lshr i32 %177, 31
  %202 = lshr i32 %182, 31
  %203 = xor i32 %202, %201
  %204 = xor i32 %199, %201
  %205 = add nuw nsw i32 %204, %203
  %206 = icmp eq i32 %205, 2
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %38, align 1
  %208 = sext i32 %183 to i64
  %209 = lshr i64 %208, 32
  store i64 %209, i64* %141, align 8
  %210 = load i32, i32* %ESI.i168, align 4
  %211 = add i64 %174, 9
  store i64 %211, i64* %3, align 8
  %212 = sext i32 %210 to i64
  %213 = shl nuw i64 %209, 32
  %214 = or i64 %213, %184
  %215 = sdiv i64 %214, %212
  %216 = shl i64 %215, 32
  %217 = ashr exact i64 %216, 32
  %218 = icmp eq i64 %215, %217
  br i1 %218, label %221, label %219

; <label>:219:                                    ; preds = %routine_idivl__esi.exit1233
  %220 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %211, %struct.Memory* %168)
  %.pre139 = load i64, i64* %RBP.i, align 8
  %.pre140 = load i32, i32* %EAX.i1056, align 4
  %.pre141 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit1699

; <label>:221:                                    ; preds = %routine_idivl__esi.exit1233
  %222 = srem i64 %214, %212
  %223 = and i64 %215, 4294967295
  store i64 %223, i64* %RAX.i82, align 8
  %224 = and i64 %222, 4294967295
  store i64 %224, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %225 = trunc i64 %215 to i32
  br label %routine_idivl__esi.exit1699

routine_idivl__esi.exit1699:                      ; preds = %221, %219
  %226 = phi i64 [ %.pre141, %219 ], [ %211, %221 ]
  %227 = phi i32 [ %.pre140, %219 ], [ %225, %221 ]
  %228 = phi i64 [ %.pre139, %219 ], [ %172, %221 ]
  %229 = phi %struct.Memory* [ %220, %219 ], [ %168, %221 ]
  %230 = add i64 %228, -12
  %231 = add i64 %226, 3
  store i64 %231, i64* %3, align 8
  %232 = inttoptr i64 %230 to i32*
  store i32 %227, i32* %232, align 4
  %233 = load i64, i64* %3, align 8
  %234 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %234, i64* %RDI.i129, align 8
  %235 = add i64 %234, 52
  %236 = add i64 %233, 11
  store i64 %236, i64* %3, align 8
  %237 = inttoptr i64 %235 to i32*
  %238 = load i32, i32* %237, align 4
  %239 = add i32 %238, -1
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RAX.i82, align 8
  %241 = icmp eq i32 %238, 0
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %14, align 1
  %243 = and i32 %239, 255
  %244 = tail call i32 @llvm.ctpop.i32(i32 %243)
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  store i8 %247, i8* %21, align 1
  %248 = xor i32 %239, %238
  %249 = lshr i32 %248, 4
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  store i8 %251, i8* %26, align 1
  %252 = icmp eq i32 %239, 0
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %29, align 1
  %254 = lshr i32 %239, 31
  %255 = trunc i32 %254 to i8
  store i8 %255, i8* %32, align 1
  %256 = lshr i32 %238, 31
  %257 = xor i32 %254, %256
  %258 = add nuw nsw i32 %257, %256
  %259 = icmp eq i32 %258, 2
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %38, align 1
  %261 = load i64, i64* %RBP.i, align 8
  %262 = add i64 %261, -36
  %263 = add i64 %233, 17
  store i64 %263, i64* %3, align 8
  %264 = inttoptr i64 %262 to i32*
  store i32 %239, i32* %264, align 4
  %265 = load i64, i64* %3, align 8
  %266 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %266, i64* %RDI.i129, align 8
  %267 = add i64 %266, 60
  %268 = add i64 %265, 11
  store i64 %268, i64* %3, align 8
  %269 = inttoptr i64 %267 to i32*
  %270 = load i32, i32* %269, align 4
  %271 = add i32 %270, -1
  %272 = zext i32 %271 to i64
  store i64 %272, i64* %RAX.i82, align 8
  %273 = icmp eq i32 %270, 0
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %14, align 1
  %275 = and i32 %271, 255
  %276 = tail call i32 @llvm.ctpop.i32(i32 %275)
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = xor i8 %278, 1
  store i8 %279, i8* %21, align 1
  %280 = xor i32 %271, %270
  %281 = lshr i32 %280, 4
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  store i8 %283, i8* %26, align 1
  %284 = icmp eq i32 %271, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %29, align 1
  %286 = lshr i32 %271, 31
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %32, align 1
  %288 = lshr i32 %270, 31
  %289 = xor i32 %286, %288
  %290 = add nuw nsw i32 %289, %288
  %291 = icmp eq i32 %290, 2
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %38, align 1
  %293 = load i64, i64* %RBP.i, align 8
  %294 = add i64 %293, -40
  %295 = add i64 %265, 17
  store i64 %295, i64* %3, align 8
  %296 = inttoptr i64 %294 to i32*
  store i32 %271, i32* %296, align 4
  %297 = load i64, i64* %RBP.i, align 8
  %298 = add i64 %297, -20
  %299 = load i64, i64* %3, align 8
  %300 = add i64 %299, 4
  store i64 %300, i64* %3, align 8
  %301 = inttoptr i64 %298 to i32*
  %302 = load i32, i32* %301, align 4
  store i8 0, i8* %14, align 1
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303)
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %308 = icmp eq i32 %302, 0
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %29, align 1
  %310 = lshr i32 %302, 31
  %311 = trunc i32 %310 to i8
  store i8 %311, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v399 = select i1 %308, i64 10, i64 275
  %312 = add i64 %299, %.v399
  store i64 %312, i64* %3, align 8
  %313 = add i64 %297, -28
  br i1 %308, label %block_41b03f, label %routine_idivl__esi.exit1699.block_.L_41b148_crit_edge

routine_idivl__esi.exit1699.block_.L_41b148_crit_edge: ; preds = %routine_idivl__esi.exit1699
  %.pre391 = inttoptr i64 %313 to i32*
  br label %block_.L_41b148

block_41b03f:                                     ; preds = %routine_idivl__esi.exit1699
  %314 = add i64 %312, 4
  store i64 %314, i64* %3, align 8
  %315 = inttoptr i64 %313 to i32*
  %316 = load i32, i32* %315, align 4
  store i8 0, i8* %14, align 1
  %317 = and i32 %316, 255
  %318 = tail call i32 @llvm.ctpop.i32(i32 %317)
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  store i8 %321, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %322 = icmp eq i32 %316, 0
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %29, align 1
  %324 = lshr i32 %316, 31
  %325 = trunc i32 %324 to i8
  store i8 %325, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v489 = select i1 %322, i64 10, i64 265
  %326 = add i64 %312, %.v489
  store i64 %326, i64* %3, align 8
  br i1 %322, label %block_41b049, label %block_.L_41b148

block_41b049:                                     ; preds = %block_41b03f
  %327 = add i64 %297, -8
  %328 = add i64 %326, 4
  store i64 %328, i64* %3, align 8
  %329 = inttoptr i64 %327 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %RAX.i82, align 8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i2561 = getelementptr inbounds %union.anon, %union.anon* %331, i64 0, i32 0
  %332 = add i64 %297, -40
  %333 = add i64 %326, 7
  store i64 %333, i64* %3, align 8
  %334 = inttoptr i64 %332 to i32*
  %335 = load i32, i32* %334, align 4
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RCX.i2561, align 8
  %337 = add i64 %297, -12
  %338 = add i64 %326, 10
  store i64 %338, i64* %3, align 8
  %339 = inttoptr i64 %337 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = sub i32 %335, %340
  %342 = icmp ult i32 %335, %340
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %14, align 1
  %344 = and i32 %341, 255
  %345 = tail call i32 @llvm.ctpop.i32(i32 %344)
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  store i8 %348, i8* %21, align 1
  %349 = xor i32 %340, %335
  %350 = xor i32 %349, %341
  %351 = lshr i32 %350, 4
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %26, align 1
  %354 = icmp eq i32 %341, 0
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %29, align 1
  %356 = lshr i32 %341, 31
  %357 = trunc i32 %356 to i8
  store i8 %357, i8* %32, align 1
  %358 = lshr i32 %335, 31
  %359 = lshr i32 %340, 31
  %360 = xor i32 %359, %358
  %361 = xor i32 %356, %358
  %362 = add nuw nsw i32 %361, %360
  %363 = icmp eq i32 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %38, align 1
  %365 = add i64 %297, -112
  %366 = add i64 %326, 14
  store i64 %366, i64* %3, align 8
  %367 = inttoptr i64 %365 to i64*
  store i64 %330, i64* %367, align 8
  %368 = load i64, i64* %3, align 8
  %369 = load i8, i8* %32, align 1
  %370 = icmp ne i8 %369, 0
  %371 = load i8, i8* %38, align 1
  %372 = icmp ne i8 %371, 0
  %373 = xor i1 %370, %372
  %.v519 = select i1 %373, i64 6, i64 17
  %374 = add i64 %368, %.v519
  store i64 %374, i64* %3, align 8
  %375 = load i64, i64* %RBP.i, align 8
  br i1 %373, label %block_41b05d, label %block_.L_41b068

block_41b05d:                                     ; preds = %block_41b049
  %376 = add i64 %375, -40
  %377 = add i64 %374, 3
  store i64 %377, i64* %3, align 8
  %378 = inttoptr i64 %376 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %RAX.i82, align 8
  %381 = add i64 %375, -116
  %382 = add i64 %374, 6
  store i64 %382, i64* %3, align 8
  %383 = inttoptr i64 %381 to i32*
  store i32 %379, i32* %383, align 4
  %384 = load i64, i64* %3, align 8
  %385 = add i64 %384, 11
  store i64 %385, i64* %3, align 8
  br label %block_.L_41b06e

block_.L_41b068:                                  ; preds = %block_41b049
  %386 = add i64 %375, -12
  %387 = add i64 %374, 3
  store i64 %387, i64* %3, align 8
  %388 = inttoptr i64 %386 to i32*
  %389 = load i32, i32* %388, align 4
  %390 = zext i32 %389 to i64
  store i64 %390, i64* %RAX.i82, align 8
  %391 = add i64 %375, -116
  %392 = add i64 %374, 6
  store i64 %392, i64* %3, align 8
  %393 = inttoptr i64 %391 to i32*
  store i32 %389, i32* %393, align 4
  %.pre142 = load i64, i64* %3, align 8
  br label %block_.L_41b06e

block_.L_41b06e:                                  ; preds = %block_.L_41b068, %block_41b05d
  %394 = phi i64 [ %.pre142, %block_.L_41b068 ], [ %385, %block_41b05d ]
  %395 = load i64, i64* %RBP.i, align 8
  %396 = add i64 %395, -116
  %397 = add i64 %394, 3
  store i64 %397, i64* %3, align 8
  %398 = inttoptr i64 %396 to i32*
  %399 = load i32, i32* %398, align 4
  %400 = zext i32 %399 to i64
  store i64 %400, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i2561, align 8
  %401 = sub i32 0, %399
  %402 = icmp ne i32 %399, 0
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %14, align 1
  %404 = and i32 %401, 255
  %405 = tail call i32 @llvm.ctpop.i32(i32 %404)
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  store i8 %408, i8* %21, align 1
  %409 = xor i32 %399, %401
  %410 = lshr i32 %409, 4
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  store i8 %412, i8* %26, align 1
  %413 = icmp eq i32 %399, 0
  %414 = zext i1 %413 to i8
  store i8 %414, i8* %29, align 1
  %415 = lshr i32 %401, 31
  %416 = trunc i32 %415 to i8
  store i8 %416, i8* %32, align 1
  %417 = lshr i32 %399, 31
  %418 = add nuw nsw i32 %415, %417
  %419 = icmp eq i32 %418, 2
  %420 = zext i1 %419 to i8
  store i8 %420, i8* %38, align 1
  %421 = icmp ne i8 %416, 0
  %422 = xor i1 %421, %419
  %423 = or i1 %413, %422
  %.v490 = select i1 %423, i64 23, i64 13
  %424 = add i64 %394, %.v490
  store i64 %424, i64* %3, align 8
  br i1 %423, label %block_.L_41b085, label %block_41b07b

block_41b07b:                                     ; preds = %block_.L_41b06e
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %425 = add i64 %395, -120
  %426 = add i64 %424, 5
  store i64 %426, i64* %3, align 8
  %427 = inttoptr i64 %425 to i32*
  store i32 0, i32* %427, align 4
  %428 = load i64, i64* %3, align 8
  %429 = add i64 %428, 40
  store i64 %429, i64* %3, align 8
  br label %block_.L_41b0a8

block_.L_41b085:                                  ; preds = %block_.L_41b06e
  %430 = add i64 %395, -40
  %431 = add i64 %424, 3
  store i64 %431, i64* %3, align 8
  %432 = inttoptr i64 %430 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = zext i32 %433 to i64
  store i64 %434, i64* %RAX.i82, align 8
  %435 = add i64 %395, -12
  %436 = add i64 %424, 6
  store i64 %436, i64* %3, align 8
  %437 = inttoptr i64 %435 to i32*
  %438 = load i32, i32* %437, align 4
  %439 = sub i32 %433, %438
  %440 = icmp ult i32 %433, %438
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %14, align 1
  %442 = and i32 %439, 255
  %443 = tail call i32 @llvm.ctpop.i32(i32 %442)
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  store i8 %446, i8* %21, align 1
  %447 = xor i32 %438, %433
  %448 = xor i32 %447, %439
  %449 = lshr i32 %448, 4
  %450 = trunc i32 %449 to i8
  %451 = and i8 %450, 1
  store i8 %451, i8* %26, align 1
  %452 = icmp eq i32 %439, 0
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %29, align 1
  %454 = lshr i32 %439, 31
  %455 = trunc i32 %454 to i8
  store i8 %455, i8* %32, align 1
  %456 = lshr i32 %433, 31
  %457 = lshr i32 %438, 31
  %458 = xor i32 %457, %456
  %459 = xor i32 %454, %456
  %460 = add nuw nsw i32 %459, %458
  %461 = icmp eq i32 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %38, align 1
  %463 = icmp ne i8 %455, 0
  %464 = xor i1 %463, %461
  %.v493 = select i1 %464, i64 12, i64 23
  %465 = add i64 %424, %.v493
  %466 = add i64 %465, 3
  store i64 %466, i64* %3, align 8
  br i1 %464, label %block_41b091, label %block_.L_41b09c

block_41b091:                                     ; preds = %block_.L_41b085
  %467 = load i32, i32* %432, align 4
  %468 = zext i32 %467 to i64
  store i64 %468, i64* %RAX.i82, align 8
  %469 = add i64 %395, -124
  %470 = add i64 %465, 6
  store i64 %470, i64* %3, align 8
  %471 = inttoptr i64 %469 to i32*
  store i32 %467, i32* %471, align 4
  %472 = load i64, i64* %3, align 8
  %473 = add i64 %472, 11
  store i64 %473, i64* %3, align 8
  br label %block_.L_41b0a2

block_.L_41b09c:                                  ; preds = %block_.L_41b085
  %474 = load i32, i32* %437, align 4
  %475 = zext i32 %474 to i64
  store i64 %475, i64* %RAX.i82, align 8
  %476 = add i64 %395, -124
  %477 = add i64 %465, 6
  store i64 %477, i64* %3, align 8
  %478 = inttoptr i64 %476 to i32*
  store i32 %474, i32* %478, align 4
  %.pre143 = load i64, i64* %3, align 8
  br label %block_.L_41b0a2

block_.L_41b0a2:                                  ; preds = %block_.L_41b09c, %block_41b091
  %479 = phi i64 [ %.pre143, %block_.L_41b09c ], [ %473, %block_41b091 ]
  %480 = load i64, i64* %RBP.i, align 8
  %481 = add i64 %480, -124
  %482 = add i64 %479, 3
  store i64 %482, i64* %3, align 8
  %483 = inttoptr i64 %481 to i32*
  %484 = load i32, i32* %483, align 4
  %485 = zext i32 %484 to i64
  store i64 %485, i64* %RAX.i82, align 8
  %486 = add i64 %480, -120
  %487 = add i64 %479, 6
  store i64 %487, i64* %3, align 8
  %488 = inttoptr i64 %486 to i32*
  store i32 %484, i32* %488, align 4
  %.pre144 = load i64, i64* %3, align 8
  br label %block_.L_41b0a8

block_.L_41b0a8:                                  ; preds = %block_.L_41b0a2, %block_41b07b
  %489 = phi i64 [ %.pre144, %block_.L_41b0a2 ], [ %429, %block_41b07b ]
  %490 = load i64, i64* %RBP.i, align 8
  %491 = add i64 %490, -120
  %492 = add i64 %489, 3
  store i64 %492, i64* %3, align 8
  %493 = inttoptr i64 %491 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RAX.i82, align 8
  %496 = sext i32 %494 to i64
  store i64 %496, i64* %RCX.i2561, align 8
  %497 = add i64 %490, -112
  %498 = add i64 %489, 10
  store i64 %498, i64* %3, align 8
  %499 = inttoptr i64 %497 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %RDX.i532, align 8
  %501 = shl nsw i64 %496, 3
  %502 = add i64 %501, %500
  %503 = add i64 %489, 14
  store i64 %503, i64* %3, align 8
  %504 = inttoptr i64 %502 to i64*
  %505 = load i64, i64* %504, align 8
  store i64 %505, i64* %RCX.i2561, align 8
  %506 = add i64 %490, -36
  %507 = add i64 %489, 17
  store i64 %507, i64* %3, align 8
  %508 = inttoptr i64 %506 to i32*
  %509 = load i32, i32* %508, align 4
  %510 = zext i32 %509 to i64
  store i64 %510, i64* %RAX.i82, align 8
  %511 = add i64 %490, -16
  %512 = add i64 %489, 20
  store i64 %512, i64* %3, align 8
  %513 = inttoptr i64 %511 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = sub i32 %509, %514
  %516 = icmp ult i32 %509, %514
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %14, align 1
  %518 = and i32 %515, 255
  %519 = tail call i32 @llvm.ctpop.i32(i32 %518)
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  store i8 %522, i8* %21, align 1
  %523 = xor i32 %514, %509
  %524 = xor i32 %523, %515
  %525 = lshr i32 %524, 4
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  store i8 %527, i8* %26, align 1
  %528 = icmp eq i32 %515, 0
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %29, align 1
  %530 = lshr i32 %515, 31
  %531 = trunc i32 %530 to i8
  store i8 %531, i8* %32, align 1
  %532 = lshr i32 %509, 31
  %533 = lshr i32 %514, 31
  %534 = xor i32 %533, %532
  %535 = xor i32 %530, %532
  %536 = add nuw nsw i32 %535, %534
  %537 = icmp eq i32 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %38, align 1
  %539 = add i64 %490, -136
  %540 = add i64 %489, 27
  store i64 %540, i64* %3, align 8
  %541 = inttoptr i64 %539 to i64*
  store i64 %505, i64* %541, align 8
  %542 = load i64, i64* %3, align 8
  %543 = load i8, i8* %32, align 1
  %544 = icmp ne i8 %543, 0
  %545 = load i8, i8* %38, align 1
  %546 = icmp ne i8 %545, 0
  %547 = xor i1 %544, %546
  %.v520 = select i1 %547, i64 6, i64 20
  %548 = add i64 %542, %.v520
  store i64 %548, i64* %3, align 8
  %549 = load i64, i64* %RBP.i, align 8
  br i1 %547, label %block_41b0c9, label %block_.L_41b0d7

block_41b0c9:                                     ; preds = %block_.L_41b0a8
  %550 = add i64 %549, -36
  %551 = add i64 %548, 3
  store i64 %551, i64* %3, align 8
  %552 = inttoptr i64 %550 to i32*
  %553 = load i32, i32* %552, align 4
  %554 = zext i32 %553 to i64
  store i64 %554, i64* %RAX.i82, align 8
  %555 = add i64 %549, -140
  %556 = add i64 %548, 9
  store i64 %556, i64* %3, align 8
  %557 = inttoptr i64 %555 to i32*
  store i32 %553, i32* %557, align 4
  %558 = load i64, i64* %3, align 8
  %559 = add i64 %558, 14
  store i64 %559, i64* %3, align 8
  br label %block_.L_41b0e0

block_.L_41b0d7:                                  ; preds = %block_.L_41b0a8
  %560 = add i64 %549, -16
  %561 = add i64 %548, 3
  store i64 %561, i64* %3, align 8
  %562 = inttoptr i64 %560 to i32*
  %563 = load i32, i32* %562, align 4
  %564 = zext i32 %563 to i64
  store i64 %564, i64* %RAX.i82, align 8
  %565 = add i64 %549, -140
  %566 = add i64 %548, 9
  store i64 %566, i64* %3, align 8
  %567 = inttoptr i64 %565 to i32*
  store i32 %563, i32* %567, align 4
  %.pre145 = load i64, i64* %3, align 8
  br label %block_.L_41b0e0

block_.L_41b0e0:                                  ; preds = %block_.L_41b0d7, %block_41b0c9
  %568 = phi i64 [ %.pre145, %block_.L_41b0d7 ], [ %559, %block_41b0c9 ]
  %569 = load i64, i64* %RBP.i, align 8
  %570 = add i64 %569, -140
  %571 = add i64 %568, 6
  store i64 %571, i64* %3, align 8
  %572 = inttoptr i64 %570 to i32*
  %573 = load i32, i32* %572, align 4
  %574 = zext i32 %573 to i64
  store i64 %574, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i2561, align 8
  %575 = sub i32 0, %573
  %576 = icmp ne i32 %573, 0
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %14, align 1
  %578 = and i32 %575, 255
  %579 = tail call i32 @llvm.ctpop.i32(i32 %578)
  %580 = trunc i32 %579 to i8
  %581 = and i8 %580, 1
  %582 = xor i8 %581, 1
  store i8 %582, i8* %21, align 1
  %583 = xor i32 %573, %575
  %584 = lshr i32 %583, 4
  %585 = trunc i32 %584 to i8
  %586 = and i8 %585, 1
  store i8 %586, i8* %26, align 1
  %587 = icmp eq i32 %573, 0
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %29, align 1
  %589 = lshr i32 %575, 31
  %590 = trunc i32 %589 to i8
  store i8 %590, i8* %32, align 1
  %591 = lshr i32 %573, 31
  %592 = add nuw nsw i32 %589, %591
  %593 = icmp eq i32 %592, 2
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %38, align 1
  %595 = icmp ne i8 %590, 0
  %596 = xor i1 %595, %593
  %597 = or i1 %587, %596
  %.v491 = select i1 %597, i64 29, i64 16
  %598 = add i64 %568, %.v491
  store i64 %598, i64* %3, align 8
  br i1 %597, label %block_.L_41b0fd, label %block_41b0f0

block_41b0f0:                                     ; preds = %block_.L_41b0e0
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %599 = add i64 %569, -144
  %600 = add i64 %598, 8
  store i64 %600, i64* %3, align 8
  %601 = inttoptr i64 %599 to i32*
  store i32 0, i32* %601, align 4
  %602 = load i64, i64* %3, align 8
  %603 = add i64 %602, 52
  store i64 %603, i64* %3, align 8
  br label %block_.L_41b12c

block_.L_41b0fd:                                  ; preds = %block_.L_41b0e0
  %604 = add i64 %569, -36
  %605 = add i64 %598, 3
  store i64 %605, i64* %3, align 8
  %606 = inttoptr i64 %604 to i32*
  %607 = load i32, i32* %606, align 4
  %608 = zext i32 %607 to i64
  store i64 %608, i64* %RAX.i82, align 8
  %609 = add i64 %569, -16
  %610 = add i64 %598, 6
  store i64 %610, i64* %3, align 8
  %611 = inttoptr i64 %609 to i32*
  %612 = load i32, i32* %611, align 4
  %613 = sub i32 %607, %612
  %614 = icmp ult i32 %607, %612
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %14, align 1
  %616 = and i32 %613, 255
  %617 = tail call i32 @llvm.ctpop.i32(i32 %616)
  %618 = trunc i32 %617 to i8
  %619 = and i8 %618, 1
  %620 = xor i8 %619, 1
  store i8 %620, i8* %21, align 1
  %621 = xor i32 %612, %607
  %622 = xor i32 %621, %613
  %623 = lshr i32 %622, 4
  %624 = trunc i32 %623 to i8
  %625 = and i8 %624, 1
  store i8 %625, i8* %26, align 1
  %626 = icmp eq i32 %613, 0
  %627 = zext i1 %626 to i8
  store i8 %627, i8* %29, align 1
  %628 = lshr i32 %613, 31
  %629 = trunc i32 %628 to i8
  store i8 %629, i8* %32, align 1
  %630 = lshr i32 %607, 31
  %631 = lshr i32 %612, 31
  %632 = xor i32 %631, %630
  %633 = xor i32 %628, %630
  %634 = add nuw nsw i32 %633, %632
  %635 = icmp eq i32 %634, 2
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %38, align 1
  %637 = icmp ne i8 %629, 0
  %638 = xor i1 %637, %635
  %.v492 = select i1 %638, i64 12, i64 26
  %639 = add i64 %598, %.v492
  %640 = add i64 %639, 3
  store i64 %640, i64* %3, align 8
  br i1 %638, label %block_41b109, label %block_.L_41b117

block_41b109:                                     ; preds = %block_.L_41b0fd
  %641 = load i32, i32* %606, align 4
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RAX.i82, align 8
  %643 = add i64 %569, -148
  %644 = add i64 %639, 9
  store i64 %644, i64* %3, align 8
  %645 = inttoptr i64 %643 to i32*
  store i32 %641, i32* %645, align 4
  %646 = load i64, i64* %3, align 8
  %647 = add i64 %646, 14
  store i64 %647, i64* %3, align 8
  br label %block_.L_41b120

block_.L_41b117:                                  ; preds = %block_.L_41b0fd
  %648 = load i32, i32* %611, align 4
  %649 = zext i32 %648 to i64
  store i64 %649, i64* %RAX.i82, align 8
  %650 = add i64 %569, -148
  %651 = add i64 %639, 9
  store i64 %651, i64* %3, align 8
  %652 = inttoptr i64 %650 to i32*
  store i32 %648, i32* %652, align 4
  %.pre146 = load i64, i64* %3, align 8
  br label %block_.L_41b120

block_.L_41b120:                                  ; preds = %block_.L_41b117, %block_41b109
  %653 = phi i64 [ %.pre146, %block_.L_41b117 ], [ %647, %block_41b109 ]
  %654 = load i64, i64* %RBP.i, align 8
  %655 = add i64 %654, -148
  %656 = add i64 %653, 6
  store i64 %656, i64* %3, align 8
  %657 = inttoptr i64 %655 to i32*
  %658 = load i32, i32* %657, align 4
  %659 = zext i32 %658 to i64
  store i64 %659, i64* %RAX.i82, align 8
  %660 = add i64 %654, -144
  %661 = add i64 %653, 12
  store i64 %661, i64* %3, align 8
  %662 = inttoptr i64 %660 to i32*
  store i32 %658, i32* %662, align 4
  %.pre147 = load i64, i64* %3, align 8
  br label %block_.L_41b12c

block_.L_41b12c:                                  ; preds = %block_.L_41b120, %block_41b0f0
  %663 = phi i64 [ %.pre147, %block_.L_41b120 ], [ %603, %block_41b0f0 ]
  %664 = load i64, i64* %RBP.i, align 8
  %665 = add i64 %664, -144
  %666 = add i64 %663, 6
  store i64 %666, i64* %3, align 8
  %667 = inttoptr i64 %665 to i32*
  %668 = load i32, i32* %667, align 4
  %669 = zext i32 %668 to i64
  store i64 %669, i64* %RAX.i82, align 8
  %670 = sext i32 %668 to i64
  store i64 %670, i64* %RCX.i2561, align 8
  %671 = add i64 %664, -136
  %672 = add i64 %663, 16
  store i64 %672, i64* %3, align 8
  %673 = inttoptr i64 %671 to i64*
  %674 = load i64, i64* %673, align 8
  store i64 %674, i64* %RDX.i532, align 8
  %675 = shl nsw i64 %670, 1
  %676 = add i64 %675, %674
  %677 = add i64 %663, 20
  store i64 %677, i64* %3, align 8
  %678 = inttoptr i64 %676 to i16*
  %679 = load i16, i16* %678, align 2
  %680 = zext i16 %679 to i64
  store i64 %680, i64* %RAX.i82, align 8
  %681 = add i64 %664, -44
  %682 = zext i16 %679 to i32
  %683 = add i64 %663, 23
  store i64 %683, i64* %3, align 8
  %684 = inttoptr i64 %681 to i32*
  store i32 %682, i32* %684, align 4
  %685 = load i64, i64* %3, align 8
  %686 = add i64 %685, 6341
  br label %block_.L_41ca08

block_.L_41b148:                                  ; preds = %block_41b03f, %routine_idivl__esi.exit1699.block_.L_41b148_crit_edge
  %.pre-phi392 = phi i32* [ %.pre391, %routine_idivl__esi.exit1699.block_.L_41b148_crit_edge ], [ %315, %block_41b03f ]
  %687 = phi i64 [ %312, %routine_idivl__esi.exit1699.block_.L_41b148_crit_edge ], [ %326, %block_41b03f ]
  %688 = add i64 %687, 4
  store i64 %688, i64* %3, align 8
  %689 = load i32, i32* %.pre-phi392, align 4
  store i8 0, i8* %14, align 1
  %690 = and i32 %689, 255
  %691 = tail call i32 @llvm.ctpop.i32(i32 %690)
  %692 = trunc i32 %691 to i8
  %693 = and i8 %692, 1
  %694 = xor i8 %693, 1
  store i8 %694, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %695 = icmp eq i32 %689, 0
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %29, align 1
  %697 = lshr i32 %689, 31
  %698 = trunc i32 %697 to i8
  store i8 %698, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v400 = select i1 %695, i64 10, i64 1043
  %699 = add i64 %687, %.v400
  store i64 %699, i64* %3, align 8
  br i1 %695, label %block_41b152, label %block_.L_41b55b

block_41b152:                                     ; preds = %block_.L_41b148
  %700 = add i64 %297, -40
  %701 = add i64 %699, 3
  store i64 %701, i64* %3, align 8
  %702 = inttoptr i64 %700 to i32*
  %703 = load i32, i32* %702, align 4
  %704 = zext i32 %703 to i64
  store i64 %704, i64* %RAX.i82, align 8
  %705 = add i64 %297, -12
  %706 = add i64 %699, 6
  store i64 %706, i64* %3, align 8
  %707 = inttoptr i64 %705 to i32*
  %708 = load i32, i32* %707, align 4
  %709 = sub i32 %703, %708
  %710 = icmp ult i32 %703, %708
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %14, align 1
  %712 = and i32 %709, 255
  %713 = tail call i32 @llvm.ctpop.i32(i32 %712)
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = xor i8 %715, 1
  store i8 %716, i8* %21, align 1
  %717 = xor i32 %708, %703
  %718 = xor i32 %717, %709
  %719 = lshr i32 %718, 4
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  store i8 %721, i8* %26, align 1
  %722 = icmp eq i32 %709, 0
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %29, align 1
  %724 = lshr i32 %709, 31
  %725 = trunc i32 %724 to i8
  store i8 %725, i8* %32, align 1
  %726 = lshr i32 %703, 31
  %727 = lshr i32 %708, 31
  %728 = xor i32 %727, %726
  %729 = xor i32 %724, %726
  %730 = add nuw nsw i32 %729, %728
  %731 = icmp eq i32 %730, 2
  %732 = zext i1 %731 to i8
  store i8 %732, i8* %38, align 1
  %733 = icmp ne i8 %725, 0
  %734 = xor i1 %733, %731
  %.v473 = select i1 %734, i64 12, i64 26
  %735 = add i64 %699, %.v473
  %736 = add i64 %735, 3
  store i64 %736, i64* %3, align 8
  br i1 %734, label %block_41b15e, label %block_.L_41b16c

block_41b15e:                                     ; preds = %block_41b152
  %737 = load i32, i32* %702, align 4
  %738 = zext i32 %737 to i64
  store i64 %738, i64* %RAX.i82, align 8
  %739 = add i64 %297, -152
  %740 = add i64 %735, 9
  store i64 %740, i64* %3, align 8
  %741 = inttoptr i64 %739 to i32*
  store i32 %737, i32* %741, align 4
  %742 = load i64, i64* %3, align 8
  %743 = add i64 %742, 14
  store i64 %743, i64* %3, align 8
  br label %block_.L_41b175

block_.L_41b16c:                                  ; preds = %block_41b152
  %744 = load i32, i32* %707, align 4
  %745 = zext i32 %744 to i64
  store i64 %745, i64* %RAX.i82, align 8
  %746 = add i64 %297, -152
  %747 = add i64 %735, 9
  store i64 %747, i64* %3, align 8
  %748 = inttoptr i64 %746 to i32*
  store i32 %744, i32* %748, align 4
  %.pre148 = load i64, i64* %3, align 8
  br label %block_.L_41b175

block_.L_41b175:                                  ; preds = %block_.L_41b16c, %block_41b15e
  %749 = phi i64 [ %.pre148, %block_.L_41b16c ], [ %743, %block_41b15e ]
  %750 = load i64, i64* %RBP.i, align 8
  %751 = add i64 %750, -152
  %752 = add i64 %749, 6
  store i64 %752, i64* %3, align 8
  %753 = inttoptr i64 %751 to i32*
  %754 = load i32, i32* %753, align 4
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RAX.i82, align 8
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX.i3787 = bitcast %union.anon* %756 to i32*
  %RCX.i3788 = getelementptr inbounds %union.anon, %union.anon* %756, i64 0, i32 0
  store i64 0, i64* %RCX.i3788, align 8
  %757 = sub i32 0, %754
  %758 = icmp ne i32 %754, 0
  %759 = zext i1 %758 to i8
  store i8 %759, i8* %14, align 1
  %760 = and i32 %757, 255
  %761 = tail call i32 @llvm.ctpop.i32(i32 %760)
  %762 = trunc i32 %761 to i8
  %763 = and i8 %762, 1
  %764 = xor i8 %763, 1
  store i8 %764, i8* %21, align 1
  %765 = xor i32 %754, %757
  %766 = lshr i32 %765, 4
  %767 = trunc i32 %766 to i8
  %768 = and i8 %767, 1
  store i8 %768, i8* %26, align 1
  %769 = icmp eq i32 %754, 0
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %29, align 1
  %771 = lshr i32 %757, 31
  %772 = trunc i32 %771 to i8
  store i8 %772, i8* %32, align 1
  %773 = lshr i32 %754, 31
  %774 = add nuw nsw i32 %771, %773
  %775 = icmp eq i32 %774, 2
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %38, align 1
  %777 = icmp ne i8 %772, 0
  %778 = xor i1 %777, %775
  %779 = or i1 %769, %778
  %.v474 = select i1 %779, i64 29, i64 16
  %780 = add i64 %749, %.v474
  store i64 %780, i64* %3, align 8
  br i1 %779, label %block_.L_41b192, label %block_41b185

block_41b185:                                     ; preds = %block_.L_41b175
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %781 = add i64 %750, -156
  %782 = add i64 %780, 8
  store i64 %782, i64* %3, align 8
  %783 = inttoptr i64 %781 to i32*
  store i32 0, i32* %783, align 4
  %784 = load i64, i64* %3, align 8
  %785 = add i64 %784, 52
  store i64 %785, i64* %3, align 8
  br label %block_.L_41b1c1

block_.L_41b192:                                  ; preds = %block_.L_41b175
  %786 = add i64 %750, -40
  %787 = add i64 %780, 3
  store i64 %787, i64* %3, align 8
  %788 = inttoptr i64 %786 to i32*
  %789 = load i32, i32* %788, align 4
  %790 = zext i32 %789 to i64
  store i64 %790, i64* %RAX.i82, align 8
  %791 = add i64 %750, -12
  %792 = add i64 %780, 6
  store i64 %792, i64* %3, align 8
  %793 = inttoptr i64 %791 to i32*
  %794 = load i32, i32* %793, align 4
  %795 = sub i32 %789, %794
  %796 = icmp ult i32 %789, %794
  %797 = zext i1 %796 to i8
  store i8 %797, i8* %14, align 1
  %798 = and i32 %795, 255
  %799 = tail call i32 @llvm.ctpop.i32(i32 %798)
  %800 = trunc i32 %799 to i8
  %801 = and i8 %800, 1
  %802 = xor i8 %801, 1
  store i8 %802, i8* %21, align 1
  %803 = xor i32 %794, %789
  %804 = xor i32 %803, %795
  %805 = lshr i32 %804, 4
  %806 = trunc i32 %805 to i8
  %807 = and i8 %806, 1
  store i8 %807, i8* %26, align 1
  %808 = icmp eq i32 %795, 0
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %29, align 1
  %810 = lshr i32 %795, 31
  %811 = trunc i32 %810 to i8
  store i8 %811, i8* %32, align 1
  %812 = lshr i32 %789, 31
  %813 = lshr i32 %794, 31
  %814 = xor i32 %813, %812
  %815 = xor i32 %810, %812
  %816 = add nuw nsw i32 %815, %814
  %817 = icmp eq i32 %816, 2
  %818 = zext i1 %817 to i8
  store i8 %818, i8* %38, align 1
  %819 = icmp ne i8 %811, 0
  %820 = xor i1 %819, %817
  %.v488 = select i1 %820, i64 12, i64 26
  %821 = add i64 %780, %.v488
  %822 = add i64 %821, 3
  store i64 %822, i64* %3, align 8
  br i1 %820, label %block_41b19e, label %block_.L_41b1ac

block_41b19e:                                     ; preds = %block_.L_41b192
  %823 = load i32, i32* %788, align 4
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RAX.i82, align 8
  %825 = add i64 %750, -160
  %826 = add i64 %821, 9
  store i64 %826, i64* %3, align 8
  %827 = inttoptr i64 %825 to i32*
  store i32 %823, i32* %827, align 4
  %828 = load i64, i64* %3, align 8
  %829 = add i64 %828, 14
  store i64 %829, i64* %3, align 8
  br label %block_.L_41b1b5

block_.L_41b1ac:                                  ; preds = %block_.L_41b192
  %830 = load i32, i32* %793, align 4
  %831 = zext i32 %830 to i64
  store i64 %831, i64* %RAX.i82, align 8
  %832 = add i64 %750, -160
  %833 = add i64 %821, 9
  store i64 %833, i64* %3, align 8
  %834 = inttoptr i64 %832 to i32*
  store i32 %830, i32* %834, align 4
  %.pre149 = load i64, i64* %3, align 8
  br label %block_.L_41b1b5

block_.L_41b1b5:                                  ; preds = %block_.L_41b1ac, %block_41b19e
  %835 = phi i64 [ %.pre149, %block_.L_41b1ac ], [ %829, %block_41b19e ]
  %836 = load i64, i64* %RBP.i, align 8
  %837 = add i64 %836, -160
  %838 = add i64 %835, 6
  store i64 %838, i64* %3, align 8
  %839 = inttoptr i64 %837 to i32*
  %840 = load i32, i32* %839, align 4
  %841 = zext i32 %840 to i64
  store i64 %841, i64* %RAX.i82, align 8
  %842 = add i64 %836, -156
  %843 = add i64 %835, 12
  store i64 %843, i64* %3, align 8
  %844 = inttoptr i64 %842 to i32*
  store i32 %840, i32* %844, align 4
  %.pre150 = load i64, i64* %3, align 8
  br label %block_.L_41b1c1

block_.L_41b1c1:                                  ; preds = %block_.L_41b1b5, %block_41b185
  %845 = phi i64 [ %.pre150, %block_.L_41b1b5 ], [ %785, %block_41b185 ]
  %846 = load i64, i64* %RBP.i, align 8
  %847 = add i64 %846, -156
  %848 = add i64 %845, 6
  store i64 %848, i64* %3, align 8
  %849 = inttoptr i64 %847 to i32*
  %850 = load i32, i32* %849, align 4
  %851 = zext i32 %850 to i64
  store i64 %851, i64* %RAX.i82, align 8
  %852 = add i64 %846, -60
  %853 = add i64 %845, 9
  store i64 %853, i64* %3, align 8
  %854 = inttoptr i64 %852 to i32*
  store i32 %850, i32* %854, align 4
  %855 = load i64, i64* %RBP.i, align 8
  %856 = add i64 %855, -24
  %857 = load i64, i64* %3, align 8
  %858 = add i64 %857, 7
  store i64 %858, i64* %3, align 8
  %859 = inttoptr i64 %856 to i32*
  store i32 -2, i32* %859, align 4
  %.pre151 = load i64, i64* %3, align 8
  br label %block_.L_41b1d1

block_.L_41b1d1:                                  ; preds = %block_.L_41b25a, %block_.L_41b1c1
  %860 = phi i64 [ %1253, %block_.L_41b25a ], [ %.pre151, %block_.L_41b1c1 ]
  %861 = load i64, i64* %RBP.i, align 8
  %862 = add i64 %861, -24
  %863 = add i64 %860, 4
  store i64 %863, i64* %3, align 8
  %864 = inttoptr i64 %862 to i32*
  %865 = load i32, i32* %864, align 4
  %866 = add i32 %865, -4
  %867 = icmp ult i32 %865, 4
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %14, align 1
  %869 = and i32 %866, 255
  %870 = tail call i32 @llvm.ctpop.i32(i32 %869)
  %871 = trunc i32 %870 to i8
  %872 = and i8 %871, 1
  %873 = xor i8 %872, 1
  store i8 %873, i8* %21, align 1
  %874 = xor i32 %866, %865
  %875 = lshr i32 %874, 4
  %876 = trunc i32 %875 to i8
  %877 = and i8 %876, 1
  store i8 %877, i8* %26, align 1
  %878 = icmp eq i32 %866, 0
  %879 = zext i1 %878 to i8
  store i8 %879, i8* %29, align 1
  %880 = lshr i32 %866, 31
  %881 = trunc i32 %880 to i8
  store i8 %881, i8* %32, align 1
  %882 = lshr i32 %865, 31
  %883 = xor i32 %880, %882
  %884 = add nuw nsw i32 %883, %882
  %885 = icmp eq i32 %884, 2
  %886 = zext i1 %885 to i8
  store i8 %886, i8* %38, align 1
  %887 = icmp ne i8 %881, 0
  %888 = xor i1 %887, %885
  %.v475 = select i1 %888, i64 10, i64 203
  %889 = add i64 %860, %.v475
  store i64 %889, i64* %3, align 8
  br i1 %888, label %block_41b1db, label %block_.L_41b29c

block_41b1db:                                     ; preds = %block_.L_41b1d1
  %890 = add i64 %861, -36
  %891 = add i64 %889, 3
  store i64 %891, i64* %3, align 8
  %892 = inttoptr i64 %890 to i32*
  %893 = load i32, i32* %892, align 4
  %894 = zext i32 %893 to i64
  store i64 %894, i64* %RAX.i82, align 8
  %895 = add i64 %861, -16
  %896 = add i64 %889, 6
  store i64 %896, i64* %3, align 8
  %897 = inttoptr i64 %895 to i32*
  %898 = load i32, i32* %897, align 4
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RCX.i3788, align 8
  %900 = add i64 %889, 9
  store i64 %900, i64* %3, align 8
  %901 = load i32, i32* %864, align 4
  %902 = add i32 %901, %898
  %903 = zext i32 %902 to i64
  store i64 %903, i64* %RCX.i3788, align 8
  %904 = lshr i32 %902, 31
  %905 = sub i32 %893, %902
  %906 = icmp ult i32 %893, %902
  %907 = zext i1 %906 to i8
  store i8 %907, i8* %14, align 1
  %908 = and i32 %905, 255
  %909 = tail call i32 @llvm.ctpop.i32(i32 %908)
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  store i8 %912, i8* %21, align 1
  %913 = xor i32 %902, %893
  %914 = xor i32 %913, %905
  %915 = lshr i32 %914, 4
  %916 = trunc i32 %915 to i8
  %917 = and i8 %916, 1
  store i8 %917, i8* %26, align 1
  %918 = icmp eq i32 %905, 0
  %919 = zext i1 %918 to i8
  store i8 %919, i8* %29, align 1
  %920 = lshr i32 %905, 31
  %921 = trunc i32 %920 to i8
  store i8 %921, i8* %32, align 1
  %922 = lshr i32 %893, 31
  %923 = xor i32 %904, %922
  %924 = xor i32 %920, %922
  %925 = add nuw nsw i32 %924, %923
  %926 = icmp eq i32 %925, 2
  %927 = zext i1 %926 to i8
  store i8 %927, i8* %38, align 1
  %928 = icmp ne i8 %921, 0
  %929 = xor i1 %928, %926
  %.v485 = select i1 %929, i64 17, i64 31
  %930 = add i64 %889, %.v485
  %931 = add i64 %930, 3
  store i64 %931, i64* %3, align 8
  br i1 %929, label %block_41b1ec, label %block_.L_41b1fa

block_41b1ec:                                     ; preds = %block_41b1db
  %932 = load i32, i32* %892, align 4
  %933 = zext i32 %932 to i64
  store i64 %933, i64* %RAX.i82, align 8
  %934 = add i64 %861, -164
  %935 = add i64 %930, 9
  store i64 %935, i64* %3, align 8
  %936 = inttoptr i64 %934 to i32*
  store i32 %932, i32* %936, align 4
  %937 = load i64, i64* %3, align 8
  %938 = add i64 %937, 17
  store i64 %938, i64* %3, align 8
  br label %block_.L_41b206

block_.L_41b1fa:                                  ; preds = %block_41b1db
  %939 = load i32, i32* %897, align 4
  %940 = zext i32 %939 to i64
  store i64 %940, i64* %RAX.i82, align 8
  %941 = add i64 %930, 6
  store i64 %941, i64* %3, align 8
  %942 = load i32, i32* %864, align 4
  %943 = add i32 %942, %939
  %944 = zext i32 %943 to i64
  store i64 %944, i64* %RAX.i82, align 8
  %945 = icmp ult i32 %943, %939
  %946 = icmp ult i32 %943, %942
  %947 = or i1 %945, %946
  %948 = zext i1 %947 to i8
  store i8 %948, i8* %14, align 1
  %949 = and i32 %943, 255
  %950 = tail call i32 @llvm.ctpop.i32(i32 %949)
  %951 = trunc i32 %950 to i8
  %952 = and i8 %951, 1
  %953 = xor i8 %952, 1
  store i8 %953, i8* %21, align 1
  %954 = xor i32 %942, %939
  %955 = xor i32 %954, %943
  %956 = lshr i32 %955, 4
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  store i8 %958, i8* %26, align 1
  %959 = icmp eq i32 %943, 0
  %960 = zext i1 %959 to i8
  store i8 %960, i8* %29, align 1
  %961 = lshr i32 %943, 31
  %962 = trunc i32 %961 to i8
  store i8 %962, i8* %32, align 1
  %963 = lshr i32 %939, 31
  %964 = lshr i32 %942, 31
  %965 = xor i32 %961, %963
  %966 = xor i32 %961, %964
  %967 = add nuw nsw i32 %965, %966
  %968 = icmp eq i32 %967, 2
  %969 = zext i1 %968 to i8
  store i8 %969, i8* %38, align 1
  %970 = add i64 %861, -164
  %971 = add i64 %930, 12
  store i64 %971, i64* %3, align 8
  %972 = inttoptr i64 %970 to i32*
  store i32 %943, i32* %972, align 4
  %.pre180 = load i64, i64* %3, align 8
  br label %block_.L_41b206

block_.L_41b206:                                  ; preds = %block_.L_41b1fa, %block_41b1ec
  %973 = phi i64 [ %.pre180, %block_.L_41b1fa ], [ %938, %block_41b1ec ]
  %974 = load i64, i64* %RBP.i, align 8
  %975 = add i64 %974, -164
  %976 = add i64 %973, 6
  store i64 %976, i64* %3, align 8
  %977 = inttoptr i64 %975 to i32*
  %978 = load i32, i32* %977, align 4
  %979 = zext i32 %978 to i64
  store i64 %979, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i3788, align 8
  %980 = sub i32 0, %978
  %981 = icmp ne i32 %978, 0
  %982 = zext i1 %981 to i8
  store i8 %982, i8* %14, align 1
  %983 = and i32 %980, 255
  %984 = tail call i32 @llvm.ctpop.i32(i32 %983)
  %985 = trunc i32 %984 to i8
  %986 = and i8 %985, 1
  %987 = xor i8 %986, 1
  store i8 %987, i8* %21, align 1
  %988 = xor i32 %978, %980
  %989 = lshr i32 %988, 4
  %990 = trunc i32 %989 to i8
  %991 = and i8 %990, 1
  store i8 %991, i8* %26, align 1
  %992 = icmp eq i32 %978, 0
  %993 = zext i1 %992 to i8
  store i8 %993, i8* %29, align 1
  %994 = lshr i32 %980, 31
  %995 = trunc i32 %994 to i8
  store i8 %995, i8* %32, align 1
  %996 = lshr i32 %978, 31
  %997 = add nuw nsw i32 %994, %996
  %998 = icmp eq i32 %997, 2
  %999 = zext i1 %998 to i8
  store i8 %999, i8* %38, align 1
  %1000 = icmp ne i8 %995, 0
  %1001 = xor i1 %1000, %998
  %1002 = or i1 %992, %1001
  %.v486 = select i1 %1002, i64 29, i64 16
  %1003 = add i64 %973, %.v486
  store i64 %1003, i64* %3, align 8
  br i1 %1002, label %block_.L_41b223, label %block_41b216

block_41b216:                                     ; preds = %block_.L_41b206
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %1004 = add i64 %974, -168
  %1005 = add i64 %1003, 8
  store i64 %1005, i64* %3, align 8
  %1006 = inttoptr i64 %1004 to i32*
  store i32 0, i32* %1006, align 4
  %1007 = load i64, i64* %3, align 8
  %1008 = add i64 %1007, 60
  store i64 %1008, i64* %3, align 8
  br label %block_.L_41b25a

block_.L_41b223:                                  ; preds = %block_.L_41b206
  %1009 = add i64 %974, -36
  %1010 = add i64 %1003, 3
  store i64 %1010, i64* %3, align 8
  %1011 = inttoptr i64 %1009 to i32*
  %1012 = load i32, i32* %1011, align 4
  %1013 = zext i32 %1012 to i64
  store i64 %1013, i64* %RAX.i82, align 8
  %1014 = add i64 %974, -16
  %1015 = add i64 %1003, 6
  store i64 %1015, i64* %3, align 8
  %1016 = inttoptr i64 %1014 to i32*
  %1017 = load i32, i32* %1016, align 4
  %1018 = zext i32 %1017 to i64
  store i64 %1018, i64* %RCX.i3788, align 8
  %1019 = add i64 %974, -24
  %1020 = add i64 %1003, 9
  store i64 %1020, i64* %3, align 8
  %1021 = inttoptr i64 %1019 to i32*
  %1022 = load i32, i32* %1021, align 4
  %1023 = add i32 %1022, %1017
  %1024 = zext i32 %1023 to i64
  store i64 %1024, i64* %RCX.i3788, align 8
  %1025 = lshr i32 %1023, 31
  %1026 = sub i32 %1012, %1023
  %1027 = icmp ult i32 %1012, %1023
  %1028 = zext i1 %1027 to i8
  store i8 %1028, i8* %14, align 1
  %1029 = and i32 %1026, 255
  %1030 = tail call i32 @llvm.ctpop.i32(i32 %1029)
  %1031 = trunc i32 %1030 to i8
  %1032 = and i8 %1031, 1
  %1033 = xor i8 %1032, 1
  store i8 %1033, i8* %21, align 1
  %1034 = xor i32 %1023, %1012
  %1035 = xor i32 %1034, %1026
  %1036 = lshr i32 %1035, 4
  %1037 = trunc i32 %1036 to i8
  %1038 = and i8 %1037, 1
  store i8 %1038, i8* %26, align 1
  %1039 = icmp eq i32 %1026, 0
  %1040 = zext i1 %1039 to i8
  store i8 %1040, i8* %29, align 1
  %1041 = lshr i32 %1026, 31
  %1042 = trunc i32 %1041 to i8
  store i8 %1042, i8* %32, align 1
  %1043 = lshr i32 %1012, 31
  %1044 = xor i32 %1025, %1043
  %1045 = xor i32 %1041, %1043
  %1046 = add nuw nsw i32 %1045, %1044
  %1047 = icmp eq i32 %1046, 2
  %1048 = zext i1 %1047 to i8
  store i8 %1048, i8* %38, align 1
  %1049 = icmp ne i8 %1042, 0
  %1050 = xor i1 %1049, %1047
  %.v487 = select i1 %1050, i64 17, i64 31
  %1051 = add i64 %1003, %.v487
  %1052 = add i64 %1051, 3
  store i64 %1052, i64* %3, align 8
  br i1 %1050, label %block_41b234, label %block_.L_41b242

block_41b234:                                     ; preds = %block_.L_41b223
  %1053 = load i32, i32* %1011, align 4
  %1054 = zext i32 %1053 to i64
  store i64 %1054, i64* %RAX.i82, align 8
  %1055 = add i64 %974, -172
  %1056 = add i64 %1051, 9
  store i64 %1056, i64* %3, align 8
  %1057 = inttoptr i64 %1055 to i32*
  store i32 %1053, i32* %1057, align 4
  %1058 = load i64, i64* %3, align 8
  %1059 = add i64 %1058, 17
  store i64 %1059, i64* %3, align 8
  br label %block_.L_41b24e

block_.L_41b242:                                  ; preds = %block_.L_41b223
  %1060 = load i32, i32* %1016, align 4
  %1061 = zext i32 %1060 to i64
  store i64 %1061, i64* %RAX.i82, align 8
  %1062 = add i64 %1051, 6
  store i64 %1062, i64* %3, align 8
  %1063 = load i32, i32* %1021, align 4
  %1064 = add i32 %1063, %1060
  %1065 = zext i32 %1064 to i64
  store i64 %1065, i64* %RAX.i82, align 8
  %1066 = icmp ult i32 %1064, %1060
  %1067 = icmp ult i32 %1064, %1063
  %1068 = or i1 %1066, %1067
  %1069 = zext i1 %1068 to i8
  store i8 %1069, i8* %14, align 1
  %1070 = and i32 %1064, 255
  %1071 = tail call i32 @llvm.ctpop.i32(i32 %1070)
  %1072 = trunc i32 %1071 to i8
  %1073 = and i8 %1072, 1
  %1074 = xor i8 %1073, 1
  store i8 %1074, i8* %21, align 1
  %1075 = xor i32 %1063, %1060
  %1076 = xor i32 %1075, %1064
  %1077 = lshr i32 %1076, 4
  %1078 = trunc i32 %1077 to i8
  %1079 = and i8 %1078, 1
  store i8 %1079, i8* %26, align 1
  %1080 = icmp eq i32 %1064, 0
  %1081 = zext i1 %1080 to i8
  store i8 %1081, i8* %29, align 1
  %1082 = lshr i32 %1064, 31
  %1083 = trunc i32 %1082 to i8
  store i8 %1083, i8* %32, align 1
  %1084 = lshr i32 %1060, 31
  %1085 = lshr i32 %1063, 31
  %1086 = xor i32 %1082, %1084
  %1087 = xor i32 %1082, %1085
  %1088 = add nuw nsw i32 %1086, %1087
  %1089 = icmp eq i32 %1088, 2
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %38, align 1
  %1091 = add i64 %974, -172
  %1092 = add i64 %1051, 12
  store i64 %1092, i64* %3, align 8
  %1093 = inttoptr i64 %1091 to i32*
  store i32 %1064, i32* %1093, align 4
  %.pre181 = load i64, i64* %3, align 8
  br label %block_.L_41b24e

block_.L_41b24e:                                  ; preds = %block_.L_41b242, %block_41b234
  %1094 = phi i64 [ %.pre181, %block_.L_41b242 ], [ %1059, %block_41b234 ]
  %1095 = load i64, i64* %RBP.i, align 8
  %1096 = add i64 %1095, -172
  %1097 = add i64 %1094, 6
  store i64 %1097, i64* %3, align 8
  %1098 = inttoptr i64 %1096 to i32*
  %1099 = load i32, i32* %1098, align 4
  %1100 = zext i32 %1099 to i64
  store i64 %1100, i64* %RAX.i82, align 8
  %1101 = add i64 %1095, -168
  %1102 = add i64 %1094, 12
  store i64 %1102, i64* %3, align 8
  %1103 = inttoptr i64 %1101 to i32*
  store i32 %1099, i32* %1103, align 4
  %.pre182 = load i64, i64* %3, align 8
  br label %block_.L_41b25a

block_.L_41b25a:                                  ; preds = %block_.L_41b24e, %block_41b216
  %1104 = phi i64 [ %.pre182, %block_.L_41b24e ], [ %1008, %block_41b216 ]
  %1105 = load i64, i64* %RBP.i, align 8
  %1106 = add i64 %1105, -168
  %1107 = add i64 %1104, 6
  store i64 %1107, i64* %3, align 8
  %1108 = inttoptr i64 %1106 to i32*
  %1109 = load i32, i32* %1108, align 4
  %1110 = zext i32 %1109 to i64
  store i64 %1110, i64* %RAX.i82, align 8
  %1111 = add i64 %1105, -56
  %1112 = add i64 %1104, 9
  store i64 %1112, i64* %3, align 8
  %1113 = inttoptr i64 %1111 to i32*
  store i32 %1109, i32* %1113, align 4
  %1114 = load i64, i64* %RBP.i, align 8
  %1115 = add i64 %1114, -8
  %1116 = load i64, i64* %3, align 8
  %1117 = add i64 %1116, 4
  store i64 %1117, i64* %3, align 8
  %1118 = inttoptr i64 %1115 to i64*
  %1119 = load i64, i64* %1118, align 8
  store i64 %1119, i64* %RCX.i3788, align 8
  %1120 = add i64 %1114, -60
  %1121 = add i64 %1116, 8
  store i64 %1121, i64* %3, align 8
  %1122 = inttoptr i64 %1120 to i32*
  %1123 = load i32, i32* %1122, align 4
  %1124 = sext i32 %1123 to i64
  store i64 %1124, i64* %RDX.i532, align 8
  %1125 = shl nsw i64 %1124, 3
  %1126 = add i64 %1125, %1119
  %1127 = add i64 %1116, 12
  store i64 %1127, i64* %3, align 8
  %1128 = inttoptr i64 %1126 to i64*
  %1129 = load i64, i64* %1128, align 8
  store i64 %1129, i64* %RCX.i3788, align 8
  %1130 = add i64 %1114, -56
  %1131 = add i64 %1116, 16
  store i64 %1131, i64* %3, align 8
  %1132 = inttoptr i64 %1130 to i32*
  %1133 = load i32, i32* %1132, align 4
  %1134 = sext i32 %1133 to i64
  store i64 %1134, i64* %RDX.i532, align 8
  %1135 = shl nsw i64 %1134, 1
  %1136 = add i64 %1135, %1129
  %1137 = add i64 %1116, 20
  store i64 %1137, i64* %3, align 8
  %1138 = inttoptr i64 %1136 to i16*
  %1139 = load i16, i16* %1138, align 2
  %1140 = zext i16 %1139 to i64
  store i64 %1140, i64* %RAX.i82, align 8
  %1141 = add i64 %1114, -24
  %1142 = add i64 %1116, 23
  store i64 %1142, i64* %3, align 8
  %1143 = inttoptr i64 %1141 to i32*
  %1144 = load i32, i32* %1143, align 4
  %1145 = add i32 %1144, 2
  %1146 = zext i32 %1145 to i64
  store i64 %1146, i64* %RSI.i1183, align 8
  %1147 = icmp ugt i32 %1144, -3
  %1148 = zext i1 %1147 to i8
  store i8 %1148, i8* %14, align 1
  %1149 = and i32 %1145, 255
  %1150 = tail call i32 @llvm.ctpop.i32(i32 %1149)
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = xor i8 %1152, 1
  store i8 %1153, i8* %21, align 1
  %1154 = xor i32 %1145, %1144
  %1155 = lshr i32 %1154, 4
  %1156 = trunc i32 %1155 to i8
  %1157 = and i8 %1156, 1
  store i8 %1157, i8* %26, align 1
  %1158 = icmp eq i32 %1145, 0
  %1159 = zext i1 %1158 to i8
  store i8 %1159, i8* %29, align 1
  %1160 = lshr i32 %1145, 31
  %1161 = trunc i32 %1160 to i8
  store i8 %1161, i8* %32, align 1
  %1162 = lshr i32 %1144, 31
  %1163 = xor i32 %1160, %1162
  %1164 = add nuw nsw i32 %1163, %1160
  %1165 = icmp eq i32 %1164, 2
  %1166 = zext i1 %1165 to i8
  store i8 %1166, i8* %38, align 1
  %1167 = sext i32 %1145 to i64
  store i64 %1167, i64* %RCX.i3788, align 8
  %1168 = shl nsw i64 %1167, 2
  %1169 = add nsw i64 %1168, 4950704
  %1170 = add i64 %1116, 37
  store i64 %1170, i64* %3, align 8
  %1171 = inttoptr i64 %1169 to i32*
  %1172 = load i32, i32* %1171, align 4
  %1173 = sext i32 %1172 to i64
  %1174 = mul nsw i64 %1173, %1140
  %1175 = trunc i64 %1174 to i32
  %1176 = and i64 %1174, 4294967295
  store i64 %1176, i64* %RAX.i82, align 8
  %1177 = shl i64 %1174, 32
  %1178 = ashr exact i64 %1177, 32
  %1179 = icmp ne i64 %1178, %1174
  %1180 = zext i1 %1179 to i8
  store i8 %1180, i8* %14, align 1
  %1181 = and i32 %1175, 255
  %1182 = tail call i32 @llvm.ctpop.i32(i32 %1181)
  %1183 = trunc i32 %1182 to i8
  %1184 = and i8 %1183, 1
  %1185 = xor i8 %1184, 1
  store i8 %1185, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %1186 = lshr i32 %1175, 31
  %1187 = trunc i32 %1186 to i8
  store i8 %1187, i8* %32, align 1
  store i8 %1180, i8* %38, align 1
  %1188 = load i64, i64* %RBP.i, align 8
  %1189 = add i64 %1188, -44
  %1190 = add i64 %1116, 40
  store i64 %1190, i64* %3, align 8
  %1191 = trunc i64 %1174 to i32
  %1192 = inttoptr i64 %1189 to i32*
  %1193 = load i32, i32* %1192, align 4
  %1194 = add i32 %1193, %1191
  %1195 = zext i32 %1194 to i64
  store i64 %1195, i64* %RAX.i82, align 8
  %1196 = icmp ult i32 %1194, %1191
  %1197 = icmp ult i32 %1194, %1193
  %1198 = or i1 %1196, %1197
  %1199 = zext i1 %1198 to i8
  store i8 %1199, i8* %14, align 1
  %1200 = and i32 %1194, 255
  %1201 = tail call i32 @llvm.ctpop.i32(i32 %1200)
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  store i8 %1204, i8* %21, align 1
  %1205 = xor i32 %1193, %1191
  %1206 = xor i32 %1205, %1194
  %1207 = lshr i32 %1206, 4
  %1208 = trunc i32 %1207 to i8
  %1209 = and i8 %1208, 1
  store i8 %1209, i8* %26, align 1
  %1210 = icmp eq i32 %1194, 0
  %1211 = zext i1 %1210 to i8
  store i8 %1211, i8* %29, align 1
  %1212 = lshr i32 %1194, 31
  %1213 = trunc i32 %1212 to i8
  store i8 %1213, i8* %32, align 1
  %1214 = lshr i32 %1191, 31
  %1215 = lshr i32 %1193, 31
  %1216 = xor i32 %1212, %1214
  %1217 = xor i32 %1212, %1215
  %1218 = add nuw nsw i32 %1216, %1217
  %1219 = icmp eq i32 %1218, 2
  %1220 = zext i1 %1219 to i8
  store i8 %1220, i8* %38, align 1
  %1221 = add i64 %1116, 43
  store i64 %1221, i64* %3, align 8
  store i32 %1194, i32* %1192, align 4
  %1222 = load i64, i64* %RBP.i, align 8
  %1223 = add i64 %1222, -24
  %1224 = load i64, i64* %3, align 8
  %1225 = add i64 %1224, 3
  store i64 %1225, i64* %3, align 8
  %1226 = inttoptr i64 %1223 to i32*
  %1227 = load i32, i32* %1226, align 4
  %1228 = add i32 %1227, 1
  %1229 = zext i32 %1228 to i64
  store i64 %1229, i64* %RAX.i82, align 8
  %1230 = icmp eq i32 %1227, -1
  %1231 = icmp eq i32 %1228, 0
  %1232 = or i1 %1230, %1231
  %1233 = zext i1 %1232 to i8
  store i8 %1233, i8* %14, align 1
  %1234 = and i32 %1228, 255
  %1235 = tail call i32 @llvm.ctpop.i32(i32 %1234)
  %1236 = trunc i32 %1235 to i8
  %1237 = and i8 %1236, 1
  %1238 = xor i8 %1237, 1
  store i8 %1238, i8* %21, align 1
  %1239 = xor i32 %1228, %1227
  %1240 = lshr i32 %1239, 4
  %1241 = trunc i32 %1240 to i8
  %1242 = and i8 %1241, 1
  store i8 %1242, i8* %26, align 1
  %1243 = zext i1 %1231 to i8
  store i8 %1243, i8* %29, align 1
  %1244 = lshr i32 %1228, 31
  %1245 = trunc i32 %1244 to i8
  store i8 %1245, i8* %32, align 1
  %1246 = lshr i32 %1227, 31
  %1247 = xor i32 %1244, %1246
  %1248 = add nuw nsw i32 %1247, %1244
  %1249 = icmp eq i32 %1248, 2
  %1250 = zext i1 %1249 to i8
  store i8 %1250, i8* %38, align 1
  %1251 = add i64 %1224, 9
  store i64 %1251, i64* %3, align 8
  store i32 %1228, i32* %1226, align 4
  %1252 = load i64, i64* %3, align 8
  %1253 = add i64 %1252, -198
  store i64 %1253, i64* %3, align 8
  br label %block_.L_41b1d1

block_.L_41b29c:                                  ; preds = %block_.L_41b1d1
  store i64 32, i64* %RAX.i82, align 8
  %1254 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1254, i64* %RCX.i3788, align 8
  %1255 = add i64 %1254, 72684
  %1256 = add i64 %889, 19
  store i64 %1256, i64* %3, align 8
  %1257 = inttoptr i64 %1255 to i32*
  %1258 = load i32, i32* %1257, align 4
  %1259 = zext i32 %1258 to i64
  store i64 %1259, i64* %RDX.i532, align 8
  %1260 = add i64 %861, -44
  %1261 = add i64 %889, 22
  store i64 %1261, i64* %3, align 8
  %1262 = inttoptr i64 %1260 to i32*
  %1263 = load i32, i32* %1262, align 4
  %1264 = add i32 %1263, 16
  %1265 = zext i32 %1264 to i64
  store i64 %1265, i64* %RSI.i1183, align 8
  %1266 = icmp ugt i32 %1263, -17
  %1267 = zext i1 %1266 to i8
  store i8 %1267, i8* %14, align 1
  %1268 = and i32 %1264, 255
  %1269 = tail call i32 @llvm.ctpop.i32(i32 %1268)
  %1270 = trunc i32 %1269 to i8
  %1271 = and i8 %1270, 1
  %1272 = xor i8 %1271, 1
  store i8 %1272, i8* %21, align 1
  %1273 = xor i32 %1263, 16
  %1274 = xor i32 %1273, %1264
  %1275 = lshr i32 %1274, 4
  %1276 = trunc i32 %1275 to i8
  %1277 = and i8 %1276, 1
  store i8 %1277, i8* %26, align 1
  %1278 = icmp eq i32 %1264, 0
  %1279 = zext i1 %1278 to i8
  store i8 %1279, i8* %29, align 1
  %1280 = lshr i32 %1264, 31
  %1281 = trunc i32 %1280 to i8
  store i8 %1281, i8* %32, align 1
  %1282 = lshr i32 %1263, 31
  %1283 = xor i32 %1280, %1282
  %1284 = add nuw nsw i32 %1283, %1280
  %1285 = icmp eq i32 %1284, 2
  %1286 = zext i1 %1285 to i8
  store i8 %1286, i8* %38, align 1
  %1287 = add i64 %861, -176
  %1288 = add i64 %889, 31
  store i64 %1288, i64* %3, align 8
  %1289 = inttoptr i64 %1287 to i32*
  store i32 32, i32* %1289, align 4
  %1290 = load i32, i32* %ESI.i168, align 4
  %1291 = zext i32 %1290 to i64
  %1292 = load i64, i64* %3, align 8
  store i64 %1291, i64* %RAX.i82, align 8
  %1293 = load i64, i64* %RBP.i, align 8
  %1294 = add i64 %1293, -180
  %1295 = load i32, i32* %EDX.i443, align 4
  %1296 = add i64 %1292, 8
  store i64 %1296, i64* %3, align 8
  %1297 = inttoptr i64 %1294 to i32*
  store i32 %1295, i32* %1297, align 4
  %1298 = load i64, i64* %3, align 8
  %1299 = load i32, i32* %EAX.i1056, align 8
  %1300 = sext i32 %1299 to i64
  %1301 = lshr i64 %1300, 32
  store i64 %1301, i64* %141, align 8
  %1302 = load i64, i64* %RBP.i, align 8
  %1303 = add i64 %1302, -176
  %1304 = add i64 %1298, 7
  store i64 %1304, i64* %3, align 8
  %1305 = inttoptr i64 %1303 to i32*
  %1306 = load i32, i32* %1305, align 4
  %1307 = zext i32 %1306 to i64
  store i64 %1307, i64* %RSI.i1183, align 8
  %1308 = add i64 %1298, 9
  store i64 %1308, i64* %3, align 8
  %1309 = zext i32 %1299 to i64
  %1310 = sext i32 %1306 to i64
  %1311 = shl nuw i64 %1301, 32
  %1312 = or i64 %1311, %1309
  %1313 = sdiv i64 %1312, %1310
  %1314 = shl i64 %1313, 32
  %1315 = ashr exact i64 %1314, 32
  %1316 = icmp eq i64 %1313, %1315
  br i1 %1316, label %1319, label %1317

; <label>:1317:                                   ; preds = %block_.L_41b29c
  %1318 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1308, %struct.Memory* %229)
  %.pre152 = load i64, i64* %RBP.i, align 8
  %.pre153 = load i64, i64* %3, align 8
  %.pre154 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit3580

; <label>:1319:                                   ; preds = %block_.L_41b29c
  %1320 = srem i64 %1312, %1310
  %1321 = and i64 %1313, 4294967295
  store i64 %1321, i64* %RAX.i82, align 8
  %1322 = and i64 %1320, 4294967295
  store i64 %1322, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %1323 = trunc i64 %1313 to i32
  br label %routine_idivl__esi.exit3580

routine_idivl__esi.exit3580:                      ; preds = %1319, %1317
  %1324 = phi i32 [ %.pre154, %1317 ], [ %1323, %1319 ]
  %1325 = phi i64 [ %.pre153, %1317 ], [ %1308, %1319 ]
  %1326 = phi i64 [ %.pre152, %1317 ], [ %1302, %1319 ]
  %1327 = phi %struct.Memory* [ %1318, %1317 ], [ %229, %1319 ]
  %1328 = add i64 %1326, -180
  %1329 = add i64 %1325, 6
  store i64 %1329, i64* %3, align 8
  %1330 = inttoptr i64 %1328 to i32*
  %1331 = load i32, i32* %1330, align 4
  %1332 = zext i32 %1331 to i64
  store i64 %1332, i64* %RDI.i129, align 8
  %1333 = sub i32 %1331, %1324
  %1334 = icmp ult i32 %1331, %1324
  %1335 = zext i1 %1334 to i8
  store i8 %1335, i8* %14, align 1
  %1336 = and i32 %1333, 255
  %1337 = tail call i32 @llvm.ctpop.i32(i32 %1336)
  %1338 = trunc i32 %1337 to i8
  %1339 = and i8 %1338, 1
  %1340 = xor i8 %1339, 1
  store i8 %1340, i8* %21, align 1
  %1341 = xor i32 %1324, %1331
  %1342 = xor i32 %1341, %1333
  %1343 = lshr i32 %1342, 4
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  store i8 %1345, i8* %26, align 1
  %1346 = icmp eq i32 %1333, 0
  %1347 = zext i1 %1346 to i8
  store i8 %1347, i8* %29, align 1
  %1348 = lshr i32 %1333, 31
  %1349 = trunc i32 %1348 to i8
  store i8 %1349, i8* %32, align 1
  %1350 = lshr i32 %1331, 31
  %1351 = lshr i32 %1324, 31
  %1352 = xor i32 %1351, %1350
  %1353 = xor i32 %1348, %1350
  %1354 = add nuw nsw i32 %1353, %1352
  %1355 = icmp eq i32 %1354, 2
  %1356 = zext i1 %1355 to i8
  store i8 %1356, i8* %38, align 1
  %1357 = icmp ne i8 %1349, 0
  %1358 = xor i1 %1357, %1355
  %.v476 = select i1 %1358, i64 14, i64 39
  %1359 = add i64 %1325, %.v476
  store i64 %1359, i64* %3, align 8
  br i1 %1358, label %block_41b2da, label %block_.L_41b2f3

block_41b2da:                                     ; preds = %routine_idivl__esi.exit3580
  %1360 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1360, i64* %RAX.i82, align 8
  %1361 = add i64 %1360, 72684
  %1362 = add i64 %1359, 14
  store i64 %1362, i64* %3, align 8
  %1363 = inttoptr i64 %1361 to i32*
  %1364 = load i32, i32* %1363, align 4
  %1365 = zext i32 %1364 to i64
  store i64 %1365, i64* %RCX.i3788, align 8
  %1366 = add i64 %1326, -184
  %1367 = add i64 %1359, 20
  store i64 %1367, i64* %3, align 8
  %1368 = inttoptr i64 %1366 to i32*
  store i32 %1364, i32* %1368, align 4
  %1369 = load i64, i64* %3, align 8
  %1370 = add i64 %1369, 39
  store i64 %1370, i64* %3, align 8
  br label %block_.L_41b315

block_.L_41b2f3:                                  ; preds = %routine_idivl__esi.exit3580
  store i64 32, i64* %RAX.i82, align 8
  %1371 = add i64 %1326, -44
  %1372 = add i64 %1359, 8
  store i64 %1372, i64* %3, align 8
  %1373 = inttoptr i64 %1371 to i32*
  %1374 = load i32, i32* %1373, align 4
  %1375 = add i32 %1374, 16
  %1376 = zext i32 %1375 to i64
  store i64 %1376, i64* %RCX.i3788, align 8
  %1377 = icmp ugt i32 %1374, -17
  %1378 = zext i1 %1377 to i8
  store i8 %1378, i8* %14, align 1
  %1379 = and i32 %1375, 255
  %1380 = tail call i32 @llvm.ctpop.i32(i32 %1379)
  %1381 = trunc i32 %1380 to i8
  %1382 = and i8 %1381, 1
  %1383 = xor i8 %1382, 1
  store i8 %1383, i8* %21, align 1
  %1384 = xor i32 %1374, 16
  %1385 = xor i32 %1384, %1375
  %1386 = lshr i32 %1385, 4
  %1387 = trunc i32 %1386 to i8
  %1388 = and i8 %1387, 1
  store i8 %1388, i8* %26, align 1
  %1389 = icmp eq i32 %1375, 0
  %1390 = zext i1 %1389 to i8
  store i8 %1390, i8* %29, align 1
  %1391 = lshr i32 %1375, 31
  %1392 = trunc i32 %1391 to i8
  store i8 %1392, i8* %32, align 1
  %1393 = lshr i32 %1374, 31
  %1394 = xor i32 %1391, %1393
  %1395 = add nuw nsw i32 %1394, %1391
  %1396 = icmp eq i32 %1395, 2
  %1397 = zext i1 %1396 to i8
  store i8 %1397, i8* %38, align 1
  %1398 = add i64 %1326, -188
  %1399 = add i64 %1359, 17
  store i64 %1399, i64* %3, align 8
  %1400 = inttoptr i64 %1398 to i32*
  store i32 32, i32* %1400, align 4
  %1401 = load i32, i32* %ECX.i3787, align 4
  %1402 = zext i32 %1401 to i64
  %1403 = load i64, i64* %3, align 8
  store i64 %1402, i64* %RAX.i82, align 8
  %1404 = sext i32 %1401 to i64
  %1405 = lshr i64 %1404, 32
  store i64 %1405, i64* %141, align 8
  %1406 = load i64, i64* %RBP.i, align 8
  %1407 = add i64 %1406, -188
  %1408 = add i64 %1403, 9
  store i64 %1408, i64* %3, align 8
  %1409 = inttoptr i64 %1407 to i32*
  %1410 = load i32, i32* %1409, align 4
  %1411 = zext i32 %1410 to i64
  store i64 %1411, i64* %RCX.i3788, align 8
  %1412 = add i64 %1403, 11
  store i64 %1412, i64* %3, align 8
  %1413 = sext i32 %1410 to i64
  %1414 = shl nuw i64 %1405, 32
  %1415 = or i64 %1414, %1402
  %1416 = sdiv i64 %1415, %1413
  %1417 = shl i64 %1416, 32
  %1418 = ashr exact i64 %1417, 32
  %1419 = icmp eq i64 %1416, %1418
  br i1 %1419, label %1422, label %1420

; <label>:1420:                                   ; preds = %block_.L_41b2f3
  %1421 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1412, %struct.Memory* %1327)
  %.pre155 = load i64, i64* %RBP.i, align 8
  %.pre156 = load i32, i32* %EAX.i1056, align 4
  %.pre157 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3541

; <label>:1422:                                   ; preds = %block_.L_41b2f3
  %1423 = srem i64 %1415, %1413
  %1424 = and i64 %1416, 4294967295
  store i64 %1424, i64* %RAX.i82, align 8
  %1425 = and i64 %1423, 4294967295
  store i64 %1425, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %1426 = trunc i64 %1416 to i32
  br label %routine_idivl__ecx.exit3541

routine_idivl__ecx.exit3541:                      ; preds = %1422, %1420
  %1427 = phi i64 [ %.pre157, %1420 ], [ %1412, %1422 ]
  %1428 = phi i32 [ %.pre156, %1420 ], [ %1426, %1422 ]
  %1429 = phi i64 [ %.pre155, %1420 ], [ %1406, %1422 ]
  %1430 = phi %struct.Memory* [ %1421, %1420 ], [ %1327, %1422 ]
  %1431 = add i64 %1429, -184
  %1432 = add i64 %1427, 6
  store i64 %1432, i64* %3, align 8
  %1433 = inttoptr i64 %1431 to i32*
  store i32 %1428, i32* %1433, align 4
  %.pre158 = load i64, i64* %3, align 8
  br label %block_.L_41b315

block_.L_41b315:                                  ; preds = %routine_idivl__ecx.exit3541, %block_41b2da
  %1434 = phi i64 [ %.pre158, %routine_idivl__ecx.exit3541 ], [ %1370, %block_41b2da ]
  %MEMORY.14 = phi %struct.Memory* [ %1430, %routine_idivl__ecx.exit3541 ], [ %1327, %block_41b2da ]
  %1435 = load i64, i64* %RBP.i, align 8
  %1436 = add i64 %1435, -184
  %1437 = add i64 %1434, 6
  store i64 %1437, i64* %3, align 8
  %1438 = inttoptr i64 %1436 to i32*
  %1439 = load i32, i32* %1438, align 4
  %1440 = zext i32 %1439 to i64
  store i64 %1440, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i3788, align 8
  %1441 = sub i32 0, %1439
  %1442 = icmp ne i32 %1439, 0
  %1443 = zext i1 %1442 to i8
  store i8 %1443, i8* %14, align 1
  %1444 = and i32 %1441, 255
  %1445 = tail call i32 @llvm.ctpop.i32(i32 %1444)
  %1446 = trunc i32 %1445 to i8
  %1447 = and i8 %1446, 1
  %1448 = xor i8 %1447, 1
  store i8 %1448, i8* %21, align 1
  %1449 = xor i32 %1439, %1441
  %1450 = lshr i32 %1449, 4
  %1451 = trunc i32 %1450 to i8
  %1452 = and i8 %1451, 1
  store i8 %1452, i8* %26, align 1
  %1453 = icmp eq i32 %1439, 0
  %1454 = zext i1 %1453 to i8
  store i8 %1454, i8* %29, align 1
  %1455 = lshr i32 %1441, 31
  %1456 = trunc i32 %1455 to i8
  store i8 %1456, i8* %32, align 1
  %1457 = lshr i32 %1439, 31
  %1458 = add nuw nsw i32 %1455, %1457
  %1459 = icmp eq i32 %1458, 2
  %1460 = zext i1 %1459 to i8
  store i8 %1460, i8* %38, align 1
  %1461 = icmp ne i8 %1456, 0
  %1462 = xor i1 %1461, %1459
  %1463 = or i1 %1453, %1462
  %.v477 = select i1 %1463, i64 29, i64 16
  %1464 = add i64 %1434, %.v477
  store i64 %1464, i64* %3, align 8
  br i1 %1463, label %block_.L_41b332, label %block_41b325

block_41b325:                                     ; preds = %block_.L_41b315
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %1465 = add i64 %1435, -192
  %1466 = add i64 %1464, 8
  store i64 %1466, i64* %3, align 8
  %1467 = inttoptr i64 %1465 to i32*
  store i32 0, i32* %1467, align 4
  %1468 = load i64, i64* %3, align 8
  %1469 = add i64 %1468, 138
  store i64 %1469, i64* %3, align 8
  br label %block_.L_41b3b7

block_.L_41b332:                                  ; preds = %block_.L_41b315
  store i64 32, i64* %RAX.i82, align 8
  %1470 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1470, i64* %RCX.i3788, align 8
  %1471 = add i64 %1470, 72684
  %1472 = add i64 %1464, 19
  store i64 %1472, i64* %3, align 8
  %1473 = inttoptr i64 %1471 to i32*
  %1474 = load i32, i32* %1473, align 4
  %1475 = zext i32 %1474 to i64
  store i64 %1475, i64* %RDX.i532, align 8
  %1476 = add i64 %1435, -44
  %1477 = add i64 %1464, 22
  store i64 %1477, i64* %3, align 8
  %1478 = inttoptr i64 %1476 to i32*
  %1479 = load i32, i32* %1478, align 4
  %1480 = add i32 %1479, 16
  %1481 = zext i32 %1480 to i64
  store i64 %1481, i64* %RSI.i1183, align 8
  %1482 = icmp ugt i32 %1479, -17
  %1483 = zext i1 %1482 to i8
  store i8 %1483, i8* %14, align 1
  %1484 = and i32 %1480, 255
  %1485 = tail call i32 @llvm.ctpop.i32(i32 %1484)
  %1486 = trunc i32 %1485 to i8
  %1487 = and i8 %1486, 1
  %1488 = xor i8 %1487, 1
  store i8 %1488, i8* %21, align 1
  %1489 = xor i32 %1479, 16
  %1490 = xor i32 %1489, %1480
  %1491 = lshr i32 %1490, 4
  %1492 = trunc i32 %1491 to i8
  %1493 = and i8 %1492, 1
  store i8 %1493, i8* %26, align 1
  %1494 = icmp eq i32 %1480, 0
  %1495 = zext i1 %1494 to i8
  store i8 %1495, i8* %29, align 1
  %1496 = lshr i32 %1480, 31
  %1497 = trunc i32 %1496 to i8
  store i8 %1497, i8* %32, align 1
  %1498 = lshr i32 %1479, 31
  %1499 = xor i32 %1496, %1498
  %1500 = add nuw nsw i32 %1499, %1496
  %1501 = icmp eq i32 %1500, 2
  %1502 = zext i1 %1501 to i8
  store i8 %1502, i8* %38, align 1
  %1503 = add i64 %1435, -196
  %1504 = add i64 %1464, 31
  store i64 %1504, i64* %3, align 8
  %1505 = inttoptr i64 %1503 to i32*
  store i32 32, i32* %1505, align 4
  %1506 = load i32, i32* %ESI.i168, align 4
  %1507 = zext i32 %1506 to i64
  %1508 = load i64, i64* %3, align 8
  store i64 %1507, i64* %RAX.i82, align 8
  %1509 = load i64, i64* %RBP.i, align 8
  %1510 = add i64 %1509, -200
  %1511 = load i32, i32* %EDX.i443, align 4
  %1512 = add i64 %1508, 8
  store i64 %1512, i64* %3, align 8
  %1513 = inttoptr i64 %1510 to i32*
  store i32 %1511, i32* %1513, align 4
  %1514 = load i64, i64* %3, align 8
  %1515 = load i32, i32* %EAX.i1056, align 8
  %1516 = sext i32 %1515 to i64
  %1517 = lshr i64 %1516, 32
  store i64 %1517, i64* %141, align 8
  %1518 = load i64, i64* %RBP.i, align 8
  %1519 = add i64 %1518, -196
  %1520 = add i64 %1514, 7
  store i64 %1520, i64* %3, align 8
  %1521 = inttoptr i64 %1519 to i32*
  %1522 = load i32, i32* %1521, align 4
  %1523 = zext i32 %1522 to i64
  store i64 %1523, i64* %RSI.i1183, align 8
  %1524 = add i64 %1514, 9
  store i64 %1524, i64* %3, align 8
  %1525 = zext i32 %1515 to i64
  %1526 = sext i32 %1522 to i64
  %1527 = shl nuw i64 %1517, 32
  %1528 = or i64 %1527, %1525
  %1529 = sdiv i64 %1528, %1526
  %1530 = shl i64 %1529, 32
  %1531 = ashr exact i64 %1530, 32
  %1532 = icmp eq i64 %1529, %1531
  br i1 %1532, label %1535, label %1533

; <label>:1533:                                   ; preds = %block_.L_41b332
  %1534 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1524, %struct.Memory* %MEMORY.14)
  %.pre159 = load i64, i64* %RBP.i, align 8
  %.pre160 = load i64, i64* %3, align 8
  %.pre161 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit3490

; <label>:1535:                                   ; preds = %block_.L_41b332
  %1536 = srem i64 %1528, %1526
  %1537 = and i64 %1529, 4294967295
  store i64 %1537, i64* %RAX.i82, align 8
  %1538 = and i64 %1536, 4294967295
  store i64 %1538, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %1539 = trunc i64 %1529 to i32
  br label %routine_idivl__esi.exit3490

routine_idivl__esi.exit3490:                      ; preds = %1535, %1533
  %1540 = phi i32 [ %.pre161, %1533 ], [ %1539, %1535 ]
  %1541 = phi i64 [ %.pre160, %1533 ], [ %1524, %1535 ]
  %1542 = phi i64 [ %.pre159, %1533 ], [ %1518, %1535 ]
  %1543 = phi %struct.Memory* [ %1534, %1533 ], [ %MEMORY.14, %1535 ]
  %1544 = add i64 %1542, -200
  %1545 = add i64 %1541, 6
  store i64 %1545, i64* %3, align 8
  %1546 = inttoptr i64 %1544 to i32*
  %1547 = load i32, i32* %1546, align 4
  %1548 = zext i32 %1547 to i64
  store i64 %1548, i64* %RDI.i129, align 8
  %1549 = sub i32 %1547, %1540
  %1550 = icmp ult i32 %1547, %1540
  %1551 = zext i1 %1550 to i8
  store i8 %1551, i8* %14, align 1
  %1552 = and i32 %1549, 255
  %1553 = tail call i32 @llvm.ctpop.i32(i32 %1552)
  %1554 = trunc i32 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = xor i8 %1555, 1
  store i8 %1556, i8* %21, align 1
  %1557 = xor i32 %1540, %1547
  %1558 = xor i32 %1557, %1549
  %1559 = lshr i32 %1558, 4
  %1560 = trunc i32 %1559 to i8
  %1561 = and i8 %1560, 1
  store i8 %1561, i8* %26, align 1
  %1562 = icmp eq i32 %1549, 0
  %1563 = zext i1 %1562 to i8
  store i8 %1563, i8* %29, align 1
  %1564 = lshr i32 %1549, 31
  %1565 = trunc i32 %1564 to i8
  store i8 %1565, i8* %32, align 1
  %1566 = lshr i32 %1547, 31
  %1567 = lshr i32 %1540, 31
  %1568 = xor i32 %1567, %1566
  %1569 = xor i32 %1564, %1566
  %1570 = add nuw nsw i32 %1569, %1568
  %1571 = icmp eq i32 %1570, 2
  %1572 = zext i1 %1571 to i8
  store i8 %1572, i8* %38, align 1
  %1573 = icmp ne i8 %1565, 0
  %1574 = xor i1 %1573, %1571
  %.v484 = select i1 %1574, i64 14, i64 39
  %1575 = add i64 %1541, %.v484
  store i64 %1575, i64* %3, align 8
  br i1 %1574, label %block_41b370, label %block_.L_41b389

block_41b370:                                     ; preds = %routine_idivl__esi.exit3490
  %1576 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1576, i64* %RAX.i82, align 8
  %1577 = add i64 %1576, 72684
  %1578 = add i64 %1575, 14
  store i64 %1578, i64* %3, align 8
  %1579 = inttoptr i64 %1577 to i32*
  %1580 = load i32, i32* %1579, align 4
  %1581 = zext i32 %1580 to i64
  store i64 %1581, i64* %RCX.i3788, align 8
  %1582 = add i64 %1542, -204
  %1583 = add i64 %1575, 20
  store i64 %1583, i64* %3, align 8
  %1584 = inttoptr i64 %1582 to i32*
  store i32 %1580, i32* %1584, align 4
  %1585 = load i64, i64* %3, align 8
  %1586 = add i64 %1585, 39
  store i64 %1586, i64* %3, align 8
  br label %block_.L_41b3ab

block_.L_41b389:                                  ; preds = %routine_idivl__esi.exit3490
  store i64 32, i64* %RAX.i82, align 8
  %1587 = add i64 %1542, -44
  %1588 = add i64 %1575, 8
  store i64 %1588, i64* %3, align 8
  %1589 = inttoptr i64 %1587 to i32*
  %1590 = load i32, i32* %1589, align 4
  %1591 = add i32 %1590, 16
  %1592 = zext i32 %1591 to i64
  store i64 %1592, i64* %RCX.i3788, align 8
  %1593 = icmp ugt i32 %1590, -17
  %1594 = zext i1 %1593 to i8
  store i8 %1594, i8* %14, align 1
  %1595 = and i32 %1591, 255
  %1596 = tail call i32 @llvm.ctpop.i32(i32 %1595)
  %1597 = trunc i32 %1596 to i8
  %1598 = and i8 %1597, 1
  %1599 = xor i8 %1598, 1
  store i8 %1599, i8* %21, align 1
  %1600 = xor i32 %1590, 16
  %1601 = xor i32 %1600, %1591
  %1602 = lshr i32 %1601, 4
  %1603 = trunc i32 %1602 to i8
  %1604 = and i8 %1603, 1
  store i8 %1604, i8* %26, align 1
  %1605 = icmp eq i32 %1591, 0
  %1606 = zext i1 %1605 to i8
  store i8 %1606, i8* %29, align 1
  %1607 = lshr i32 %1591, 31
  %1608 = trunc i32 %1607 to i8
  store i8 %1608, i8* %32, align 1
  %1609 = lshr i32 %1590, 31
  %1610 = xor i32 %1607, %1609
  %1611 = add nuw nsw i32 %1610, %1607
  %1612 = icmp eq i32 %1611, 2
  %1613 = zext i1 %1612 to i8
  store i8 %1613, i8* %38, align 1
  %1614 = add i64 %1542, -208
  %1615 = add i64 %1575, 17
  store i64 %1615, i64* %3, align 8
  %1616 = inttoptr i64 %1614 to i32*
  store i32 32, i32* %1616, align 4
  %1617 = load i32, i32* %ECX.i3787, align 4
  %1618 = zext i32 %1617 to i64
  %1619 = load i64, i64* %3, align 8
  store i64 %1618, i64* %RAX.i82, align 8
  %1620 = sext i32 %1617 to i64
  %1621 = lshr i64 %1620, 32
  store i64 %1621, i64* %141, align 8
  %1622 = load i64, i64* %RBP.i, align 8
  %1623 = add i64 %1622, -208
  %1624 = add i64 %1619, 9
  store i64 %1624, i64* %3, align 8
  %1625 = inttoptr i64 %1623 to i32*
  %1626 = load i32, i32* %1625, align 4
  %1627 = zext i32 %1626 to i64
  store i64 %1627, i64* %RCX.i3788, align 8
  %1628 = add i64 %1619, 11
  store i64 %1628, i64* %3, align 8
  %1629 = sext i32 %1626 to i64
  %1630 = shl nuw i64 %1621, 32
  %1631 = or i64 %1630, %1618
  %1632 = sdiv i64 %1631, %1629
  %1633 = shl i64 %1632, 32
  %1634 = ashr exact i64 %1633, 32
  %1635 = icmp eq i64 %1632, %1634
  br i1 %1635, label %1638, label %1636

; <label>:1636:                                   ; preds = %block_.L_41b389
  %1637 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1628, %struct.Memory* %1543)
  %.pre162 = load i64, i64* %RBP.i, align 8
  %.pre163 = load i32, i32* %EAX.i1056, align 4
  %.pre164 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3451

; <label>:1638:                                   ; preds = %block_.L_41b389
  %1639 = srem i64 %1631, %1629
  %1640 = and i64 %1632, 4294967295
  store i64 %1640, i64* %RAX.i82, align 8
  %1641 = and i64 %1639, 4294967295
  store i64 %1641, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %1642 = trunc i64 %1632 to i32
  br label %routine_idivl__ecx.exit3451

routine_idivl__ecx.exit3451:                      ; preds = %1638, %1636
  %1643 = phi i64 [ %.pre164, %1636 ], [ %1628, %1638 ]
  %1644 = phi i32 [ %.pre163, %1636 ], [ %1642, %1638 ]
  %1645 = phi i64 [ %.pre162, %1636 ], [ %1622, %1638 ]
  %1646 = phi %struct.Memory* [ %1637, %1636 ], [ %1543, %1638 ]
  %1647 = add i64 %1645, -204
  %1648 = add i64 %1643, 6
  store i64 %1648, i64* %3, align 8
  %1649 = inttoptr i64 %1647 to i32*
  store i32 %1644, i32* %1649, align 4
  %.pre165 = load i64, i64* %3, align 8
  br label %block_.L_41b3ab

block_.L_41b3ab:                                  ; preds = %routine_idivl__ecx.exit3451, %block_41b370
  %1650 = phi i64 [ %.pre165, %routine_idivl__ecx.exit3451 ], [ %1586, %block_41b370 ]
  %MEMORY.15 = phi %struct.Memory* [ %1646, %routine_idivl__ecx.exit3451 ], [ %1543, %block_41b370 ]
  %1651 = load i64, i64* %RBP.i, align 8
  %1652 = add i64 %1651, -204
  %1653 = add i64 %1650, 6
  store i64 %1653, i64* %3, align 8
  %1654 = inttoptr i64 %1652 to i32*
  %1655 = load i32, i32* %1654, align 4
  %1656 = zext i32 %1655 to i64
  store i64 %1656, i64* %RAX.i82, align 8
  %1657 = add i64 %1651, -192
  %1658 = add i64 %1650, 12
  store i64 %1658, i64* %3, align 8
  %1659 = inttoptr i64 %1657 to i32*
  store i32 %1655, i32* %1659, align 4
  %.pre166 = load i64, i64* %3, align 8
  br label %block_.L_41b3b7

block_.L_41b3b7:                                  ; preds = %block_.L_41b3ab, %block_41b325
  %1660 = phi i64 [ %.pre166, %block_.L_41b3ab ], [ %1469, %block_41b325 ]
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.15, %block_.L_41b3ab ], [ %MEMORY.14, %block_41b325 ]
  %1661 = load i64, i64* %RBP.i, align 8
  %1662 = add i64 %1661, -192
  %1663 = add i64 %1660, 6
  store i64 %1663, i64* %3, align 8
  %1664 = inttoptr i64 %1662 to i32*
  %1665 = load i32, i32* %1664, align 4
  %1666 = zext i32 %1665 to i64
  store i64 %1666, i64* %RAX.i82, align 8
  %1667 = add i64 %1661, -44
  %1668 = add i64 %1660, 9
  store i64 %1668, i64* %3, align 8
  %1669 = inttoptr i64 %1667 to i32*
  store i32 %1665, i32* %1669, align 4
  %1670 = load i64, i64* %RBP.i, align 8
  %1671 = add i64 %1670, -20
  %1672 = load i64, i64* %3, align 8
  %1673 = add i64 %1672, 4
  store i64 %1673, i64* %3, align 8
  %1674 = inttoptr i64 %1671 to i32*
  %1675 = load i32, i32* %1674, align 4
  %1676 = add i32 %1675, -1
  %1677 = icmp eq i32 %1675, 0
  %1678 = zext i1 %1677 to i8
  store i8 %1678, i8* %14, align 1
  %1679 = and i32 %1676, 255
  %1680 = tail call i32 @llvm.ctpop.i32(i32 %1679)
  %1681 = trunc i32 %1680 to i8
  %1682 = and i8 %1681, 1
  %1683 = xor i8 %1682, 1
  store i8 %1683, i8* %21, align 1
  %1684 = xor i32 %1676, %1675
  %1685 = lshr i32 %1684, 4
  %1686 = trunc i32 %1685 to i8
  %1687 = and i8 %1686, 1
  store i8 %1687, i8* %26, align 1
  %1688 = icmp eq i32 %1676, 0
  %1689 = zext i1 %1688 to i8
  store i8 %1689, i8* %29, align 1
  %1690 = lshr i32 %1676, 31
  %1691 = trunc i32 %1690 to i8
  store i8 %1691, i8* %32, align 1
  %1692 = lshr i32 %1675, 31
  %1693 = xor i32 %1690, %1692
  %1694 = add nuw nsw i32 %1693, %1692
  %1695 = icmp eq i32 %1694, 2
  %1696 = zext i1 %1695 to i8
  store i8 %1696, i8* %38, align 1
  %.v478 = select i1 %1688, i64 10, i64 195
  %1697 = add i64 %1672, %.v478
  store i64 %1697, i64* %3, align 8
  br i1 %1688, label %block_41b3ca, label %block_.L_41b483

block_41b3ca:                                     ; preds = %block_.L_41b3b7
  %1698 = add i64 %1670, -44
  %1699 = add i64 %1697, 3
  store i64 %1699, i64* %3, align 8
  %1700 = inttoptr i64 %1698 to i32*
  %1701 = load i32, i32* %1700, align 4
  %1702 = zext i32 %1701 to i64
  store i64 %1702, i64* %RAX.i82, align 8
  %1703 = add i64 %1670, -8
  %1704 = add i64 %1697, 7
  store i64 %1704, i64* %3, align 8
  %1705 = inttoptr i64 %1703 to i64*
  %1706 = load i64, i64* %1705, align 8
  store i64 %1706, i64* %RCX.i3788, align 8
  %1707 = add i64 %1670, -60
  %1708 = add i64 %1697, 11
  store i64 %1708, i64* %3, align 8
  %1709 = inttoptr i64 %1707 to i32*
  %1710 = load i32, i32* %1709, align 4
  %1711 = sext i32 %1710 to i64
  store i64 %1711, i64* %RDX.i532, align 8
  %1712 = shl nsw i64 %1711, 3
  %1713 = add i64 %1712, %1706
  %1714 = add i64 %1697, 15
  store i64 %1714, i64* %3, align 8
  %1715 = inttoptr i64 %1713 to i64*
  %1716 = load i64, i64* %1715, align 8
  store i64 %1716, i64* %RCX.i3788, align 8
  %1717 = add i64 %1670, -36
  %1718 = add i64 %1697, 18
  store i64 %1718, i64* %3, align 8
  %1719 = inttoptr i64 %1717 to i32*
  %1720 = load i32, i32* %1719, align 4
  %1721 = zext i32 %1720 to i64
  store i64 %1721, i64* %RSI.i1183, align 8
  %1722 = add i64 %1670, -16
  %1723 = add i64 %1697, 21
  store i64 %1723, i64* %3, align 8
  %1724 = inttoptr i64 %1722 to i32*
  %1725 = load i32, i32* %1724, align 4
  %1726 = sub i32 %1720, %1725
  %1727 = icmp ult i32 %1720, %1725
  %1728 = zext i1 %1727 to i8
  store i8 %1728, i8* %14, align 1
  %1729 = and i32 %1726, 255
  %1730 = tail call i32 @llvm.ctpop.i32(i32 %1729)
  %1731 = trunc i32 %1730 to i8
  %1732 = and i8 %1731, 1
  %1733 = xor i8 %1732, 1
  store i8 %1733, i8* %21, align 1
  %1734 = xor i32 %1725, %1720
  %1735 = xor i32 %1734, %1726
  %1736 = lshr i32 %1735, 4
  %1737 = trunc i32 %1736 to i8
  %1738 = and i8 %1737, 1
  store i8 %1738, i8* %26, align 1
  %1739 = icmp eq i32 %1726, 0
  %1740 = zext i1 %1739 to i8
  store i8 %1740, i8* %29, align 1
  %1741 = lshr i32 %1726, 31
  %1742 = trunc i32 %1741 to i8
  store i8 %1742, i8* %32, align 1
  %1743 = lshr i32 %1720, 31
  %1744 = lshr i32 %1725, 31
  %1745 = xor i32 %1744, %1743
  %1746 = xor i32 %1741, %1743
  %1747 = add nuw nsw i32 %1746, %1745
  %1748 = icmp eq i32 %1747, 2
  %1749 = zext i1 %1748 to i8
  store i8 %1749, i8* %38, align 1
  %1750 = add i64 %1670, -212
  %1751 = add i64 %1697, 27
  store i64 %1751, i64* %3, align 8
  %1752 = inttoptr i64 %1750 to i32*
  store i32 %1701, i32* %1752, align 4
  %1753 = load i64, i64* %RBP.i, align 8
  %1754 = add i64 %1753, -224
  %1755 = load i64, i64* %RCX.i3788, align 8
  %1756 = load i64, i64* %3, align 8
  %1757 = add i64 %1756, 7
  store i64 %1757, i64* %3, align 8
  %1758 = inttoptr i64 %1754 to i64*
  store i64 %1755, i64* %1758, align 8
  %1759 = load i64, i64* %3, align 8
  %1760 = load i8, i8* %32, align 1
  %1761 = icmp ne i8 %1760, 0
  %1762 = load i8, i8* %38, align 1
  %1763 = icmp ne i8 %1762, 0
  %1764 = xor i1 %1761, %1763
  %.v518 = select i1 %1764, i64 6, i64 20
  %1765 = add i64 %1759, %.v518
  store i64 %1765, i64* %3, align 8
  %1766 = load i64, i64* %RBP.i, align 8
  br i1 %1764, label %block_41b3f2, label %block_.L_41b400

block_41b3f2:                                     ; preds = %block_41b3ca
  %1767 = add i64 %1766, -36
  %1768 = add i64 %1765, 3
  store i64 %1768, i64* %3, align 8
  %1769 = inttoptr i64 %1767 to i32*
  %1770 = load i32, i32* %1769, align 4
  %1771 = zext i32 %1770 to i64
  store i64 %1771, i64* %RAX.i82, align 8
  %1772 = add i64 %1766, -228
  %1773 = add i64 %1765, 9
  store i64 %1773, i64* %3, align 8
  %1774 = inttoptr i64 %1772 to i32*
  store i32 %1770, i32* %1774, align 4
  %1775 = load i64, i64* %3, align 8
  %1776 = add i64 %1775, 14
  store i64 %1776, i64* %3, align 8
  br label %block_.L_41b409

block_.L_41b400:                                  ; preds = %block_41b3ca
  %1777 = add i64 %1766, -16
  %1778 = add i64 %1765, 3
  store i64 %1778, i64* %3, align 8
  %1779 = inttoptr i64 %1777 to i32*
  %1780 = load i32, i32* %1779, align 4
  %1781 = zext i32 %1780 to i64
  store i64 %1781, i64* %RAX.i82, align 8
  %1782 = add i64 %1766, -228
  %1783 = add i64 %1765, 9
  store i64 %1783, i64* %3, align 8
  %1784 = inttoptr i64 %1782 to i32*
  store i32 %1780, i32* %1784, align 4
  %.pre167 = load i64, i64* %3, align 8
  br label %block_.L_41b409

block_.L_41b409:                                  ; preds = %block_.L_41b400, %block_41b3f2
  %1785 = phi i64 [ %.pre167, %block_.L_41b400 ], [ %1776, %block_41b3f2 ]
  %1786 = load i64, i64* %RBP.i, align 8
  %1787 = add i64 %1786, -228
  %1788 = add i64 %1785, 6
  store i64 %1788, i64* %3, align 8
  %1789 = inttoptr i64 %1787 to i32*
  %1790 = load i32, i32* %1789, align 4
  %1791 = zext i32 %1790 to i64
  store i64 %1791, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i3788, align 8
  %1792 = sub i32 0, %1790
  %1793 = icmp ne i32 %1790, 0
  %1794 = zext i1 %1793 to i8
  store i8 %1794, i8* %14, align 1
  %1795 = and i32 %1792, 255
  %1796 = tail call i32 @llvm.ctpop.i32(i32 %1795)
  %1797 = trunc i32 %1796 to i8
  %1798 = and i8 %1797, 1
  %1799 = xor i8 %1798, 1
  store i8 %1799, i8* %21, align 1
  %1800 = xor i32 %1790, %1792
  %1801 = lshr i32 %1800, 4
  %1802 = trunc i32 %1801 to i8
  %1803 = and i8 %1802, 1
  store i8 %1803, i8* %26, align 1
  %1804 = icmp eq i32 %1790, 0
  %1805 = zext i1 %1804 to i8
  store i8 %1805, i8* %29, align 1
  %1806 = lshr i32 %1792, 31
  %1807 = trunc i32 %1806 to i8
  store i8 %1807, i8* %32, align 1
  %1808 = lshr i32 %1790, 31
  %1809 = add nuw nsw i32 %1806, %1808
  %1810 = icmp eq i32 %1809, 2
  %1811 = zext i1 %1810 to i8
  store i8 %1811, i8* %38, align 1
  %1812 = icmp ne i8 %1807, 0
  %1813 = xor i1 %1812, %1810
  %1814 = or i1 %1804, %1813
  %.v482 = select i1 %1814, i64 29, i64 16
  %1815 = add i64 %1785, %.v482
  store i64 %1815, i64* %3, align 8
  br i1 %1814, label %block_.L_41b426, label %block_41b419

block_41b419:                                     ; preds = %block_.L_41b409
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %1816 = add i64 %1786, -232
  %1817 = add i64 %1815, 8
  store i64 %1817, i64* %3, align 8
  %1818 = inttoptr i64 %1816 to i32*
  store i32 0, i32* %1818, align 4
  %1819 = load i64, i64* %3, align 8
  %1820 = add i64 %1819, 52
  store i64 %1820, i64* %3, align 8
  br label %block_.L_41b455

block_.L_41b426:                                  ; preds = %block_.L_41b409
  %1821 = add i64 %1786, -36
  %1822 = add i64 %1815, 3
  store i64 %1822, i64* %3, align 8
  %1823 = inttoptr i64 %1821 to i32*
  %1824 = load i32, i32* %1823, align 4
  %1825 = zext i32 %1824 to i64
  store i64 %1825, i64* %RAX.i82, align 8
  %1826 = add i64 %1786, -16
  %1827 = add i64 %1815, 6
  store i64 %1827, i64* %3, align 8
  %1828 = inttoptr i64 %1826 to i32*
  %1829 = load i32, i32* %1828, align 4
  %1830 = sub i32 %1824, %1829
  %1831 = icmp ult i32 %1824, %1829
  %1832 = zext i1 %1831 to i8
  store i8 %1832, i8* %14, align 1
  %1833 = and i32 %1830, 255
  %1834 = tail call i32 @llvm.ctpop.i32(i32 %1833)
  %1835 = trunc i32 %1834 to i8
  %1836 = and i8 %1835, 1
  %1837 = xor i8 %1836, 1
  store i8 %1837, i8* %21, align 1
  %1838 = xor i32 %1829, %1824
  %1839 = xor i32 %1838, %1830
  %1840 = lshr i32 %1839, 4
  %1841 = trunc i32 %1840 to i8
  %1842 = and i8 %1841, 1
  store i8 %1842, i8* %26, align 1
  %1843 = icmp eq i32 %1830, 0
  %1844 = zext i1 %1843 to i8
  store i8 %1844, i8* %29, align 1
  %1845 = lshr i32 %1830, 31
  %1846 = trunc i32 %1845 to i8
  store i8 %1846, i8* %32, align 1
  %1847 = lshr i32 %1824, 31
  %1848 = lshr i32 %1829, 31
  %1849 = xor i32 %1848, %1847
  %1850 = xor i32 %1845, %1847
  %1851 = add nuw nsw i32 %1850, %1849
  %1852 = icmp eq i32 %1851, 2
  %1853 = zext i1 %1852 to i8
  store i8 %1853, i8* %38, align 1
  %1854 = icmp ne i8 %1846, 0
  %1855 = xor i1 %1854, %1852
  %.v483 = select i1 %1855, i64 12, i64 26
  %1856 = add i64 %1815, %.v483
  %1857 = add i64 %1856, 3
  store i64 %1857, i64* %3, align 8
  br i1 %1855, label %block_41b432, label %block_.L_41b440

block_41b432:                                     ; preds = %block_.L_41b426
  %1858 = load i32, i32* %1823, align 4
  %1859 = zext i32 %1858 to i64
  store i64 %1859, i64* %RAX.i82, align 8
  %1860 = add i64 %1786, -236
  %1861 = add i64 %1856, 9
  store i64 %1861, i64* %3, align 8
  %1862 = inttoptr i64 %1860 to i32*
  store i32 %1858, i32* %1862, align 4
  %1863 = load i64, i64* %3, align 8
  %1864 = add i64 %1863, 14
  store i64 %1864, i64* %3, align 8
  br label %block_.L_41b449

block_.L_41b440:                                  ; preds = %block_.L_41b426
  %1865 = load i32, i32* %1828, align 4
  %1866 = zext i32 %1865 to i64
  store i64 %1866, i64* %RAX.i82, align 8
  %1867 = add i64 %1786, -236
  %1868 = add i64 %1856, 9
  store i64 %1868, i64* %3, align 8
  %1869 = inttoptr i64 %1867 to i32*
  store i32 %1865, i32* %1869, align 4
  %.pre168 = load i64, i64* %3, align 8
  br label %block_.L_41b449

block_.L_41b449:                                  ; preds = %block_.L_41b440, %block_41b432
  %1870 = phi i64 [ %.pre168, %block_.L_41b440 ], [ %1864, %block_41b432 ]
  %1871 = load i64, i64* %RBP.i, align 8
  %1872 = add i64 %1871, -236
  %1873 = add i64 %1870, 6
  store i64 %1873, i64* %3, align 8
  %1874 = inttoptr i64 %1872 to i32*
  %1875 = load i32, i32* %1874, align 4
  %1876 = zext i32 %1875 to i64
  store i64 %1876, i64* %RAX.i82, align 8
  %1877 = add i64 %1871, -232
  %1878 = add i64 %1870, 12
  store i64 %1878, i64* %3, align 8
  %1879 = inttoptr i64 %1877 to i32*
  store i32 %1875, i32* %1879, align 4
  %.pre169 = load i64, i64* %3, align 8
  br label %block_.L_41b455

block_.L_41b455:                                  ; preds = %block_.L_41b449, %block_41b419
  %1880 = phi i64 [ %.pre169, %block_.L_41b449 ], [ %1820, %block_41b419 ]
  %1881 = load i64, i64* %RBP.i, align 8
  %1882 = add i64 %1881, -232
  %1883 = add i64 %1880, 6
  store i64 %1883, i64* %3, align 8
  %1884 = inttoptr i64 %1882 to i32*
  %1885 = load i32, i32* %1884, align 4
  %1886 = zext i32 %1885 to i64
  store i64 %1886, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i3788, align 8
  %1887 = sext i32 %1885 to i64
  store i64 %1887, i64* %RDX.i532, align 8
  %1888 = add i64 %1881, -224
  %1889 = add i64 %1880, 21
  store i64 %1889, i64* %3, align 8
  %1890 = inttoptr i64 %1888 to i64*
  %1891 = load i64, i64* %1890, align 8
  store i64 %1891, i64* %RSI.i1183, align 8
  %1892 = shl nsw i64 %1887, 1
  %1893 = add i64 %1892, %1891
  %1894 = add i64 %1880, 25
  store i64 %1894, i64* %3, align 8
  %1895 = inttoptr i64 %1893 to i16*
  %1896 = load i16, i16* %1895, align 2
  %1897 = zext i16 %1896 to i64
  store i64 %1897, i64* %RAX.i82, align 8
  %1898 = add i64 %1881, -212
  %1899 = add i64 %1880, 31
  store i64 %1899, i64* %3, align 8
  %1900 = inttoptr i64 %1898 to i32*
  %1901 = load i32, i32* %1900, align 4
  %1902 = zext i16 %1896 to i32
  %1903 = add i32 %1902, %1901
  %1904 = zext i32 %1903 to i64
  store i64 %1904, i64* %RDI.i129, align 8
  %1905 = icmp ult i32 %1903, %1901
  %1906 = icmp ult i32 %1903, %1902
  %1907 = or i1 %1905, %1906
  %1908 = zext i1 %1907 to i8
  store i8 %1908, i8* %14, align 1
  %1909 = and i32 %1903, 255
  %1910 = tail call i32 @llvm.ctpop.i32(i32 %1909)
  %1911 = trunc i32 %1910 to i8
  %1912 = and i8 %1911, 1
  %1913 = xor i8 %1912, 1
  store i8 %1913, i8* %21, align 1
  %1914 = xor i32 %1902, %1901
  %1915 = xor i32 %1914, %1903
  %1916 = lshr i32 %1915, 4
  %1917 = trunc i32 %1916 to i8
  %1918 = and i8 %1917, 1
  store i8 %1918, i8* %26, align 1
  %1919 = icmp eq i32 %1903, 0
  %1920 = zext i1 %1919 to i8
  store i8 %1920, i8* %29, align 1
  %1921 = lshr i32 %1903, 31
  %1922 = trunc i32 %1921 to i8
  store i8 %1922, i8* %32, align 1
  %1923 = lshr i32 %1901, 31
  %1924 = xor i32 %1921, %1923
  %1925 = add nuw nsw i32 %1924, %1921
  %1926 = icmp eq i32 %1925, 2
  %1927 = zext i1 %1926 to i8
  store i8 %1927, i8* %38, align 1
  store i64 %1904, i64* %RAX.i82, align 8
  %1928 = sext i32 %1903 to i64
  %1929 = lshr i64 %1928, 32
  store i64 %1929, i64* %141, align 8
  %1930 = add i64 %1880, 38
  store i64 %1930, i64* %3, align 8
  %1931 = shl nuw i64 %1929, 32
  %1932 = or i64 %1931, %1904
  %1933 = sdiv i64 %1932, 2
  %1934 = shl i64 %1933, 32
  %1935 = ashr exact i64 %1934, 32
  %1936 = icmp eq i64 %1933, %1935
  br i1 %1936, label %1939, label %1937

; <label>:1937:                                   ; preds = %block_.L_41b455
  %1938 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1930, %struct.Memory* %MEMORY.16)
  %.pre170 = load i64, i64* %RBP.i, align 8
  %.pre171 = load i32, i32* %EAX.i1056, align 4
  %.pre172 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3321

; <label>:1939:                                   ; preds = %block_.L_41b455
  %1940 = srem i64 %1932, 2
  %1941 = and i64 %1933, 4294967295
  store i64 %1941, i64* %RAX.i82, align 8
  %1942 = and i64 %1940, 4294967295
  store i64 %1942, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %1943 = trunc i64 %1933 to i32
  br label %routine_idivl__ecx.exit3321

routine_idivl__ecx.exit3321:                      ; preds = %1939, %1937
  %1944 = phi i64 [ %.pre172, %1937 ], [ %1930, %1939 ]
  %1945 = phi i32 [ %.pre171, %1937 ], [ %1943, %1939 ]
  %1946 = phi i64 [ %.pre170, %1937 ], [ %1881, %1939 ]
  %1947 = phi %struct.Memory* [ %1938, %1937 ], [ %MEMORY.16, %1939 ]
  %1948 = add i64 %1946, -44
  %1949 = add i64 %1944, 3
  store i64 %1949, i64* %3, align 8
  %1950 = inttoptr i64 %1948 to i32*
  store i32 %1945, i32* %1950, align 4
  %1951 = load i64, i64* %3, align 8
  %1952 = add i64 %1951, 216
  br label %block_.L_41b556

block_.L_41b483:                                  ; preds = %block_.L_41b3b7
  %1953 = add i64 %1697, 4
  store i64 %1953, i64* %3, align 8
  %1954 = load i32, i32* %1674, align 4
  %1955 = add i32 %1954, -3
  %1956 = icmp ult i32 %1954, 3
  %1957 = zext i1 %1956 to i8
  store i8 %1957, i8* %14, align 1
  %1958 = and i32 %1955, 255
  %1959 = tail call i32 @llvm.ctpop.i32(i32 %1958)
  %1960 = trunc i32 %1959 to i8
  %1961 = and i8 %1960, 1
  %1962 = xor i8 %1961, 1
  store i8 %1962, i8* %21, align 1
  %1963 = xor i32 %1955, %1954
  %1964 = lshr i32 %1963, 4
  %1965 = trunc i32 %1964 to i8
  %1966 = and i8 %1965, 1
  store i8 %1966, i8* %26, align 1
  %1967 = icmp eq i32 %1955, 0
  %1968 = zext i1 %1967 to i8
  store i8 %1968, i8* %29, align 1
  %1969 = lshr i32 %1955, 31
  %1970 = trunc i32 %1969 to i8
  store i8 %1970, i8* %32, align 1
  %1971 = lshr i32 %1954, 31
  %1972 = xor i32 %1969, %1971
  %1973 = add nuw nsw i32 %1972, %1971
  %1974 = icmp eq i32 %1973, 2
  %1975 = zext i1 %1974 to i8
  store i8 %1975, i8* %38, align 1
  %.v479 = select i1 %1967, i64 10, i64 206
  %1976 = add i64 %1697, %.v479
  store i64 %1976, i64* %3, align 8
  br i1 %1967, label %block_41b48d, label %block_.L_41b551

block_41b48d:                                     ; preds = %block_.L_41b483
  %1977 = add i64 %1670, -44
  %1978 = add i64 %1976, 3
  store i64 %1978, i64* %3, align 8
  %1979 = inttoptr i64 %1977 to i32*
  %1980 = load i32, i32* %1979, align 4
  %1981 = zext i32 %1980 to i64
  store i64 %1981, i64* %RAX.i82, align 8
  %1982 = add i64 %1670, -8
  %1983 = add i64 %1976, 7
  store i64 %1983, i64* %3, align 8
  %1984 = inttoptr i64 %1982 to i64*
  %1985 = load i64, i64* %1984, align 8
  store i64 %1985, i64* %RCX.i3788, align 8
  %1986 = add i64 %1670, -60
  %1987 = add i64 %1976, 11
  store i64 %1987, i64* %3, align 8
  %1988 = inttoptr i64 %1986 to i32*
  %1989 = load i32, i32* %1988, align 4
  %1990 = sext i32 %1989 to i64
  store i64 %1990, i64* %RDX.i532, align 8
  %1991 = shl nsw i64 %1990, 3
  %1992 = add i64 %1991, %1985
  %1993 = add i64 %1976, 15
  store i64 %1993, i64* %3, align 8
  %1994 = inttoptr i64 %1992 to i64*
  %1995 = load i64, i64* %1994, align 8
  store i64 %1995, i64* %RCX.i3788, align 8
  %1996 = add i64 %1670, -36
  %1997 = add i64 %1976, 18
  store i64 %1997, i64* %3, align 8
  %1998 = inttoptr i64 %1996 to i32*
  %1999 = load i32, i32* %1998, align 4
  %2000 = zext i32 %1999 to i64
  store i64 %2000, i64* %RSI.i1183, align 8
  %2001 = add i64 %1670, -16
  %2002 = add i64 %1976, 21
  store i64 %2002, i64* %3, align 8
  %2003 = inttoptr i64 %2001 to i32*
  %2004 = load i32, i32* %2003, align 4
  %2005 = add i32 %2004, 1
  %2006 = zext i32 %2005 to i64
  store i64 %2006, i64* %RDI.i129, align 8
  %2007 = lshr i32 %2005, 31
  %2008 = sub i32 %1999, %2005
  %2009 = icmp ult i32 %1999, %2005
  %2010 = zext i1 %2009 to i8
  store i8 %2010, i8* %14, align 1
  %2011 = and i32 %2008, 255
  %2012 = tail call i32 @llvm.ctpop.i32(i32 %2011)
  %2013 = trunc i32 %2012 to i8
  %2014 = and i8 %2013, 1
  %2015 = xor i8 %2014, 1
  store i8 %2015, i8* %21, align 1
  %2016 = xor i32 %2005, %1999
  %2017 = xor i32 %2016, %2008
  %2018 = lshr i32 %2017, 4
  %2019 = trunc i32 %2018 to i8
  %2020 = and i8 %2019, 1
  store i8 %2020, i8* %26, align 1
  %2021 = icmp eq i32 %2008, 0
  %2022 = zext i1 %2021 to i8
  store i8 %2022, i8* %29, align 1
  %2023 = lshr i32 %2008, 31
  %2024 = trunc i32 %2023 to i8
  store i8 %2024, i8* %32, align 1
  %2025 = lshr i32 %1999, 31
  %2026 = xor i32 %2007, %2025
  %2027 = xor i32 %2023, %2025
  %2028 = add nuw nsw i32 %2027, %2026
  %2029 = icmp eq i32 %2028, 2
  %2030 = zext i1 %2029 to i8
  store i8 %2030, i8* %38, align 1
  %2031 = load i64, i64* %RBP.i, align 8
  %2032 = add i64 %2031, -240
  %2033 = load i32, i32* %EAX.i1056, align 4
  %2034 = add i64 %1976, 32
  store i64 %2034, i64* %3, align 8
  %2035 = inttoptr i64 %2032 to i32*
  store i32 %2033, i32* %2035, align 4
  %2036 = load i64, i64* %RBP.i, align 8
  %2037 = add i64 %2036, -248
  %2038 = load i64, i64* %RCX.i3788, align 8
  %2039 = load i64, i64* %3, align 8
  %2040 = add i64 %2039, 7
  store i64 %2040, i64* %3, align 8
  %2041 = inttoptr i64 %2037 to i64*
  store i64 %2038, i64* %2041, align 8
  %2042 = load i64, i64* %3, align 8
  %2043 = load i8, i8* %32, align 1
  %2044 = icmp ne i8 %2043, 0
  %2045 = load i8, i8* %38, align 1
  %2046 = icmp ne i8 %2045, 0
  %2047 = xor i1 %2044, %2046
  %.v517 = select i1 %2047, i64 6, i64 20
  %2048 = add i64 %2042, %.v517
  store i64 %2048, i64* %3, align 8
  %2049 = load i64, i64* %RBP.i, align 8
  br i1 %2047, label %block_41b4ba, label %block_.L_41b4c8

block_41b4ba:                                     ; preds = %block_41b48d
  %2050 = add i64 %2049, -36
  %2051 = add i64 %2048, 3
  store i64 %2051, i64* %3, align 8
  %2052 = inttoptr i64 %2050 to i32*
  %2053 = load i32, i32* %2052, align 4
  %2054 = zext i32 %2053 to i64
  store i64 %2054, i64* %RAX.i82, align 8
  %2055 = add i64 %2049, -252
  %2056 = add i64 %2048, 9
  store i64 %2056, i64* %3, align 8
  %2057 = inttoptr i64 %2055 to i32*
  store i32 %2053, i32* %2057, align 4
  %2058 = load i64, i64* %3, align 8
  %2059 = add i64 %2058, 17
  store i64 %2059, i64* %3, align 8
  br label %block_.L_41b4d4

block_.L_41b4c8:                                  ; preds = %block_41b48d
  %2060 = add i64 %2049, -16
  %2061 = add i64 %2048, 3
  store i64 %2061, i64* %3, align 8
  %2062 = inttoptr i64 %2060 to i32*
  %2063 = load i32, i32* %2062, align 4
  %2064 = add i32 %2063, 1
  %2065 = zext i32 %2064 to i64
  store i64 %2065, i64* %RAX.i82, align 8
  %2066 = icmp eq i32 %2063, -1
  %2067 = icmp eq i32 %2064, 0
  %2068 = or i1 %2066, %2067
  %2069 = zext i1 %2068 to i8
  store i8 %2069, i8* %14, align 1
  %2070 = and i32 %2064, 255
  %2071 = tail call i32 @llvm.ctpop.i32(i32 %2070)
  %2072 = trunc i32 %2071 to i8
  %2073 = and i8 %2072, 1
  %2074 = xor i8 %2073, 1
  store i8 %2074, i8* %21, align 1
  %2075 = xor i32 %2064, %2063
  %2076 = lshr i32 %2075, 4
  %2077 = trunc i32 %2076 to i8
  %2078 = and i8 %2077, 1
  store i8 %2078, i8* %26, align 1
  %2079 = zext i1 %2067 to i8
  store i8 %2079, i8* %29, align 1
  %2080 = lshr i32 %2064, 31
  %2081 = trunc i32 %2080 to i8
  store i8 %2081, i8* %32, align 1
  %2082 = lshr i32 %2063, 31
  %2083 = xor i32 %2080, %2082
  %2084 = add nuw nsw i32 %2083, %2080
  %2085 = icmp eq i32 %2084, 2
  %2086 = zext i1 %2085 to i8
  store i8 %2086, i8* %38, align 1
  %2087 = add i64 %2049, -252
  %2088 = add i64 %2048, 12
  store i64 %2088, i64* %3, align 8
  %2089 = inttoptr i64 %2087 to i32*
  store i32 %2064, i32* %2089, align 4
  %.pre173 = load i64, i64* %3, align 8
  br label %block_.L_41b4d4

block_.L_41b4d4:                                  ; preds = %block_.L_41b4c8, %block_41b4ba
  %2090 = phi i64 [ %.pre173, %block_.L_41b4c8 ], [ %2059, %block_41b4ba ]
  %2091 = load i64, i64* %RBP.i, align 8
  %2092 = add i64 %2091, -252
  %2093 = add i64 %2090, 6
  store i64 %2093, i64* %3, align 8
  %2094 = inttoptr i64 %2092 to i32*
  %2095 = load i32, i32* %2094, align 4
  %2096 = zext i32 %2095 to i64
  store i64 %2096, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i3788, align 8
  %2097 = sub i32 0, %2095
  %2098 = icmp ne i32 %2095, 0
  %2099 = zext i1 %2098 to i8
  store i8 %2099, i8* %14, align 1
  %2100 = and i32 %2097, 255
  %2101 = tail call i32 @llvm.ctpop.i32(i32 %2100)
  %2102 = trunc i32 %2101 to i8
  %2103 = and i8 %2102, 1
  %2104 = xor i8 %2103, 1
  store i8 %2104, i8* %21, align 1
  %2105 = xor i32 %2095, %2097
  %2106 = lshr i32 %2105, 4
  %2107 = trunc i32 %2106 to i8
  %2108 = and i8 %2107, 1
  store i8 %2108, i8* %26, align 1
  %2109 = icmp eq i32 %2095, 0
  %2110 = zext i1 %2109 to i8
  store i8 %2110, i8* %29, align 1
  %2111 = lshr i32 %2097, 31
  %2112 = trunc i32 %2111 to i8
  store i8 %2112, i8* %32, align 1
  %2113 = lshr i32 %2095, 31
  %2114 = add nuw nsw i32 %2111, %2113
  %2115 = icmp eq i32 %2114, 2
  %2116 = zext i1 %2115 to i8
  store i8 %2116, i8* %38, align 1
  %2117 = icmp ne i8 %2112, 0
  %2118 = xor i1 %2117, %2115
  %2119 = or i1 %2109, %2118
  %.v480 = select i1 %2119, i64 29, i64 16
  %2120 = add i64 %2090, %.v480
  store i64 %2120, i64* %3, align 8
  br i1 %2119, label %block_.L_41b4f1, label %block_41b4e4

block_41b4e4:                                     ; preds = %block_.L_41b4d4
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %2121 = add i64 %2091, -256
  %2122 = add i64 %2120, 8
  store i64 %2122, i64* %3, align 8
  %2123 = inttoptr i64 %2121 to i32*
  store i32 0, i32* %2123, align 4
  %2124 = load i64, i64* %3, align 8
  %2125 = add i64 %2124, 60
  store i64 %2125, i64* %3, align 8
  br label %block_.L_41b528

block_.L_41b4f1:                                  ; preds = %block_.L_41b4d4
  %2126 = add i64 %2091, -36
  %2127 = add i64 %2120, 3
  store i64 %2127, i64* %3, align 8
  %2128 = inttoptr i64 %2126 to i32*
  %2129 = load i32, i32* %2128, align 4
  %2130 = zext i32 %2129 to i64
  store i64 %2130, i64* %RAX.i82, align 8
  %2131 = add i64 %2091, -16
  %2132 = add i64 %2120, 6
  store i64 %2132, i64* %3, align 8
  %2133 = inttoptr i64 %2131 to i32*
  %2134 = load i32, i32* %2133, align 4
  %2135 = add i32 %2134, 1
  %2136 = zext i32 %2135 to i64
  store i64 %2136, i64* %RCX.i3788, align 8
  %2137 = lshr i32 %2135, 31
  %2138 = sub i32 %2129, %2135
  %2139 = icmp ult i32 %2129, %2135
  %2140 = zext i1 %2139 to i8
  store i8 %2140, i8* %14, align 1
  %2141 = and i32 %2138, 255
  %2142 = tail call i32 @llvm.ctpop.i32(i32 %2141)
  %2143 = trunc i32 %2142 to i8
  %2144 = and i8 %2143, 1
  %2145 = xor i8 %2144, 1
  store i8 %2145, i8* %21, align 1
  %2146 = xor i32 %2135, %2129
  %2147 = xor i32 %2146, %2138
  %2148 = lshr i32 %2147, 4
  %2149 = trunc i32 %2148 to i8
  %2150 = and i8 %2149, 1
  store i8 %2150, i8* %26, align 1
  %2151 = icmp eq i32 %2138, 0
  %2152 = zext i1 %2151 to i8
  store i8 %2152, i8* %29, align 1
  %2153 = lshr i32 %2138, 31
  %2154 = trunc i32 %2153 to i8
  store i8 %2154, i8* %32, align 1
  %2155 = lshr i32 %2129, 31
  %2156 = xor i32 %2137, %2155
  %2157 = xor i32 %2153, %2155
  %2158 = add nuw nsw i32 %2157, %2156
  %2159 = icmp eq i32 %2158, 2
  %2160 = zext i1 %2159 to i8
  store i8 %2160, i8* %38, align 1
  %2161 = icmp ne i8 %2154, 0
  %2162 = xor i1 %2161, %2159
  %.v481 = select i1 %2162, i64 17, i64 31
  %2163 = add i64 %2120, %.v481
  %2164 = add i64 %2163, 3
  store i64 %2164, i64* %3, align 8
  br i1 %2162, label %block_41b502, label %block_.L_41b510

block_41b502:                                     ; preds = %block_.L_41b4f1
  %2165 = load i32, i32* %2128, align 4
  %2166 = zext i32 %2165 to i64
  store i64 %2166, i64* %RAX.i82, align 8
  %2167 = add i64 %2091, -260
  %2168 = add i64 %2163, 9
  store i64 %2168, i64* %3, align 8
  %2169 = inttoptr i64 %2167 to i32*
  store i32 %2165, i32* %2169, align 4
  %2170 = load i64, i64* %3, align 8
  %2171 = add i64 %2170, 17
  store i64 %2171, i64* %3, align 8
  br label %block_.L_41b51c

block_.L_41b510:                                  ; preds = %block_.L_41b4f1
  %2172 = load i32, i32* %2133, align 4
  %2173 = add i32 %2172, 1
  %2174 = zext i32 %2173 to i64
  store i64 %2174, i64* %RAX.i82, align 8
  %2175 = icmp eq i32 %2172, -1
  %2176 = icmp eq i32 %2173, 0
  %2177 = or i1 %2175, %2176
  %2178 = zext i1 %2177 to i8
  store i8 %2178, i8* %14, align 1
  %2179 = and i32 %2173, 255
  %2180 = tail call i32 @llvm.ctpop.i32(i32 %2179)
  %2181 = trunc i32 %2180 to i8
  %2182 = and i8 %2181, 1
  %2183 = xor i8 %2182, 1
  store i8 %2183, i8* %21, align 1
  %2184 = xor i32 %2173, %2172
  %2185 = lshr i32 %2184, 4
  %2186 = trunc i32 %2185 to i8
  %2187 = and i8 %2186, 1
  store i8 %2187, i8* %26, align 1
  %2188 = zext i1 %2176 to i8
  store i8 %2188, i8* %29, align 1
  %2189 = lshr i32 %2173, 31
  %2190 = trunc i32 %2189 to i8
  store i8 %2190, i8* %32, align 1
  %2191 = lshr i32 %2172, 31
  %2192 = xor i32 %2189, %2191
  %2193 = add nuw nsw i32 %2192, %2189
  %2194 = icmp eq i32 %2193, 2
  %2195 = zext i1 %2194 to i8
  store i8 %2195, i8* %38, align 1
  %2196 = add i64 %2091, -260
  %2197 = add i64 %2163, 12
  store i64 %2197, i64* %3, align 8
  %2198 = inttoptr i64 %2196 to i32*
  store i32 %2173, i32* %2198, align 4
  %.pre174 = load i64, i64* %3, align 8
  br label %block_.L_41b51c

block_.L_41b51c:                                  ; preds = %block_.L_41b510, %block_41b502
  %2199 = phi i64 [ %.pre174, %block_.L_41b510 ], [ %2171, %block_41b502 ]
  %2200 = load i64, i64* %RBP.i, align 8
  %2201 = add i64 %2200, -260
  %2202 = add i64 %2199, 6
  store i64 %2202, i64* %3, align 8
  %2203 = inttoptr i64 %2201 to i32*
  %2204 = load i32, i32* %2203, align 4
  %2205 = zext i32 %2204 to i64
  store i64 %2205, i64* %RAX.i82, align 8
  %2206 = add i64 %2200, -256
  %2207 = add i64 %2199, 12
  store i64 %2207, i64* %3, align 8
  %2208 = inttoptr i64 %2206 to i32*
  store i32 %2204, i32* %2208, align 4
  %.pre175 = load i64, i64* %3, align 8
  br label %block_.L_41b528

block_.L_41b528:                                  ; preds = %block_.L_41b51c, %block_41b4e4
  %2209 = phi i64 [ %.pre175, %block_.L_41b51c ], [ %2125, %block_41b4e4 ]
  %2210 = load i64, i64* %RBP.i, align 8
  %2211 = add i64 %2210, -256
  %2212 = add i64 %2209, 6
  store i64 %2212, i64* %3, align 8
  %2213 = inttoptr i64 %2211 to i32*
  %2214 = load i32, i32* %2213, align 4
  %2215 = zext i32 %2214 to i64
  store i64 %2215, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i3788, align 8
  %2216 = sext i32 %2214 to i64
  store i64 %2216, i64* %RDX.i532, align 8
  %2217 = add i64 %2210, -248
  %2218 = add i64 %2209, 21
  store i64 %2218, i64* %3, align 8
  %2219 = inttoptr i64 %2217 to i64*
  %2220 = load i64, i64* %2219, align 8
  store i64 %2220, i64* %RSI.i1183, align 8
  %2221 = shl nsw i64 %2216, 1
  %2222 = add i64 %2221, %2220
  %2223 = add i64 %2209, 25
  store i64 %2223, i64* %3, align 8
  %2224 = inttoptr i64 %2222 to i16*
  %2225 = load i16, i16* %2224, align 2
  %2226 = zext i16 %2225 to i64
  store i64 %2226, i64* %RAX.i82, align 8
  %2227 = add i64 %2210, -240
  %2228 = add i64 %2209, 31
  store i64 %2228, i64* %3, align 8
  %2229 = inttoptr i64 %2227 to i32*
  %2230 = load i32, i32* %2229, align 4
  %2231 = zext i16 %2225 to i32
  %2232 = add i32 %2231, %2230
  %2233 = zext i32 %2232 to i64
  store i64 %2233, i64* %RDI.i129, align 8
  %2234 = icmp ult i32 %2232, %2230
  %2235 = icmp ult i32 %2232, %2231
  %2236 = or i1 %2234, %2235
  %2237 = zext i1 %2236 to i8
  store i8 %2237, i8* %14, align 1
  %2238 = and i32 %2232, 255
  %2239 = tail call i32 @llvm.ctpop.i32(i32 %2238)
  %2240 = trunc i32 %2239 to i8
  %2241 = and i8 %2240, 1
  %2242 = xor i8 %2241, 1
  store i8 %2242, i8* %21, align 1
  %2243 = xor i32 %2231, %2230
  %2244 = xor i32 %2243, %2232
  %2245 = lshr i32 %2244, 4
  %2246 = trunc i32 %2245 to i8
  %2247 = and i8 %2246, 1
  store i8 %2247, i8* %26, align 1
  %2248 = icmp eq i32 %2232, 0
  %2249 = zext i1 %2248 to i8
  store i8 %2249, i8* %29, align 1
  %2250 = lshr i32 %2232, 31
  %2251 = trunc i32 %2250 to i8
  store i8 %2251, i8* %32, align 1
  %2252 = lshr i32 %2230, 31
  %2253 = xor i32 %2250, %2252
  %2254 = add nuw nsw i32 %2253, %2250
  %2255 = icmp eq i32 %2254, 2
  %2256 = zext i1 %2255 to i8
  store i8 %2256, i8* %38, align 1
  store i64 %2233, i64* %RAX.i82, align 8
  %2257 = sext i32 %2232 to i64
  %2258 = lshr i64 %2257, 32
  store i64 %2258, i64* %141, align 8
  %2259 = add i64 %2209, 38
  store i64 %2259, i64* %3, align 8
  %2260 = shl nuw i64 %2258, 32
  %2261 = or i64 %2260, %2233
  %2262 = sdiv i64 %2261, 2
  %2263 = shl i64 %2262, 32
  %2264 = ashr exact i64 %2263, 32
  %2265 = icmp eq i64 %2262, %2264
  br i1 %2265, label %2268, label %2266

; <label>:2266:                                   ; preds = %block_.L_41b528
  %2267 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2259, %struct.Memory* %MEMORY.16)
  %.pre176 = load i64, i64* %RBP.i, align 8
  %.pre177 = load i32, i32* %EAX.i1056, align 4
  %.pre178 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3190

; <label>:2268:                                   ; preds = %block_.L_41b528
  %2269 = srem i64 %2261, 2
  %2270 = and i64 %2262, 4294967295
  store i64 %2270, i64* %RAX.i82, align 8
  %2271 = and i64 %2269, 4294967295
  store i64 %2271, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %2272 = trunc i64 %2262 to i32
  br label %routine_idivl__ecx.exit3190

routine_idivl__ecx.exit3190:                      ; preds = %2268, %2266
  %2273 = phi i64 [ %.pre178, %2266 ], [ %2259, %2268 ]
  %2274 = phi i32 [ %.pre177, %2266 ], [ %2272, %2268 ]
  %2275 = phi i64 [ %.pre176, %2266 ], [ %2210, %2268 ]
  %2276 = phi %struct.Memory* [ %2267, %2266 ], [ %MEMORY.16, %2268 ]
  %2277 = add i64 %2275, -44
  %2278 = add i64 %2273, 3
  store i64 %2278, i64* %3, align 8
  %2279 = inttoptr i64 %2277 to i32*
  store i32 %2274, i32* %2279, align 4
  %.pre179 = load i64, i64* %3, align 8
  br label %block_.L_41b551

block_.L_41b551:                                  ; preds = %block_.L_41b483, %routine_idivl__ecx.exit3190
  %2280 = phi i64 [ %1976, %block_.L_41b483 ], [ %.pre179, %routine_idivl__ecx.exit3190 ]
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.16, %block_.L_41b483 ], [ %2276, %routine_idivl__ecx.exit3190 ]
  %2281 = add i64 %2280, 5
  store i64 %2281, i64* %3, align 8
  br label %block_.L_41b556

block_.L_41b556:                                  ; preds = %block_.L_41b551, %routine_idivl__ecx.exit3321
  %storemerge109 = phi i64 [ %1952, %routine_idivl__ecx.exit3321 ], [ %2281, %block_.L_41b551 ]
  %MEMORY.24 = phi %struct.Memory* [ %1947, %routine_idivl__ecx.exit3321 ], [ %MEMORY.23, %block_.L_41b551 ]
  %2282 = add i64 %storemerge109, 5293
  br label %block_.L_41ca03

block_.L_41b55b:                                  ; preds = %block_.L_41b148
  %2283 = add i64 %699, 4
  store i64 %2283, i64* %3, align 8
  %2284 = load i32, i32* %301, align 4
  store i8 0, i8* %14, align 1
  %2285 = and i32 %2284, 255
  %2286 = tail call i32 @llvm.ctpop.i32(i32 %2285)
  %2287 = trunc i32 %2286 to i8
  %2288 = and i8 %2287, 1
  %2289 = xor i8 %2288, 1
  store i8 %2289, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %2290 = icmp eq i32 %2284, 0
  %2291 = zext i1 %2290 to i8
  store i8 %2291, i8* %29, align 1
  %2292 = lshr i32 %2284, 31
  %2293 = trunc i32 %2292 to i8
  store i8 %2293, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v401 = select i1 %2290, i64 10, i64 1049
  %2294 = add i64 %699, %.v401
  store i64 %2294, i64* %3, align 8
  br i1 %2290, label %block_41b565, label %block_.L_41b974

block_41b565:                                     ; preds = %block_.L_41b55b
  %2295 = add i64 %297, -36
  %2296 = add i64 %2294, 3
  store i64 %2296, i64* %3, align 8
  %2297 = inttoptr i64 %2295 to i32*
  %2298 = load i32, i32* %2297, align 4
  %2299 = zext i32 %2298 to i64
  store i64 %2299, i64* %RAX.i82, align 8
  %2300 = add i64 %297, -16
  %2301 = add i64 %2294, 6
  store i64 %2301, i64* %3, align 8
  %2302 = inttoptr i64 %2300 to i32*
  %2303 = load i32, i32* %2302, align 4
  %2304 = sub i32 %2298, %2303
  %2305 = icmp ult i32 %2298, %2303
  %2306 = zext i1 %2305 to i8
  store i8 %2306, i8* %14, align 1
  %2307 = and i32 %2304, 255
  %2308 = tail call i32 @llvm.ctpop.i32(i32 %2307)
  %2309 = trunc i32 %2308 to i8
  %2310 = and i8 %2309, 1
  %2311 = xor i8 %2310, 1
  store i8 %2311, i8* %21, align 1
  %2312 = xor i32 %2303, %2298
  %2313 = xor i32 %2312, %2304
  %2314 = lshr i32 %2313, 4
  %2315 = trunc i32 %2314 to i8
  %2316 = and i8 %2315, 1
  store i8 %2316, i8* %26, align 1
  %2317 = icmp eq i32 %2304, 0
  %2318 = zext i1 %2317 to i8
  store i8 %2318, i8* %29, align 1
  %2319 = lshr i32 %2304, 31
  %2320 = trunc i32 %2319 to i8
  store i8 %2320, i8* %32, align 1
  %2321 = lshr i32 %2298, 31
  %2322 = lshr i32 %2303, 31
  %2323 = xor i32 %2322, %2321
  %2324 = xor i32 %2319, %2321
  %2325 = add nuw nsw i32 %2324, %2323
  %2326 = icmp eq i32 %2325, 2
  %2327 = zext i1 %2326 to i8
  store i8 %2327, i8* %38, align 1
  %2328 = icmp ne i8 %2320, 0
  %2329 = xor i1 %2328, %2326
  %.v457 = select i1 %2329, i64 12, i64 26
  %2330 = add i64 %2294, %.v457
  %2331 = add i64 %2330, 3
  store i64 %2331, i64* %3, align 8
  br i1 %2329, label %block_41b571, label %block_.L_41b57f

block_41b571:                                     ; preds = %block_41b565
  %2332 = load i32, i32* %2297, align 4
  %2333 = zext i32 %2332 to i64
  store i64 %2333, i64* %RAX.i82, align 8
  %2334 = add i64 %297, -264
  %2335 = add i64 %2330, 9
  store i64 %2335, i64* %3, align 8
  %2336 = inttoptr i64 %2334 to i32*
  store i32 %2332, i32* %2336, align 4
  %2337 = load i64, i64* %3, align 8
  %2338 = add i64 %2337, 14
  store i64 %2338, i64* %3, align 8
  br label %block_.L_41b588

block_.L_41b57f:                                  ; preds = %block_41b565
  %2339 = load i32, i32* %2302, align 4
  %2340 = zext i32 %2339 to i64
  store i64 %2340, i64* %RAX.i82, align 8
  %2341 = add i64 %297, -264
  %2342 = add i64 %2330, 9
  store i64 %2342, i64* %3, align 8
  %2343 = inttoptr i64 %2341 to i32*
  store i32 %2339, i32* %2343, align 4
  %.pre183 = load i64, i64* %3, align 8
  br label %block_.L_41b588

block_.L_41b588:                                  ; preds = %block_.L_41b57f, %block_41b571
  %2344 = phi i64 [ %.pre183, %block_.L_41b57f ], [ %2338, %block_41b571 ]
  %2345 = load i64, i64* %RBP.i, align 8
  %2346 = add i64 %2345, -264
  %2347 = add i64 %2344, 6
  store i64 %2347, i64* %3, align 8
  %2348 = inttoptr i64 %2346 to i32*
  %2349 = load i32, i32* %2348, align 4
  %2350 = zext i32 %2349 to i64
  store i64 %2350, i64* %RAX.i82, align 8
  %2351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX.i3155 = bitcast %union.anon* %2351 to i32*
  %RCX.i3156 = getelementptr inbounds %union.anon, %union.anon* %2351, i64 0, i32 0
  store i64 0, i64* %RCX.i3156, align 8
  %2352 = sub i32 0, %2349
  %2353 = icmp ne i32 %2349, 0
  %2354 = zext i1 %2353 to i8
  store i8 %2354, i8* %14, align 1
  %2355 = and i32 %2352, 255
  %2356 = tail call i32 @llvm.ctpop.i32(i32 %2355)
  %2357 = trunc i32 %2356 to i8
  %2358 = and i8 %2357, 1
  %2359 = xor i8 %2358, 1
  store i8 %2359, i8* %21, align 1
  %2360 = xor i32 %2349, %2352
  %2361 = lshr i32 %2360, 4
  %2362 = trunc i32 %2361 to i8
  %2363 = and i8 %2362, 1
  store i8 %2363, i8* %26, align 1
  %2364 = icmp eq i32 %2349, 0
  %2365 = zext i1 %2364 to i8
  store i8 %2365, i8* %29, align 1
  %2366 = lshr i32 %2352, 31
  %2367 = trunc i32 %2366 to i8
  store i8 %2367, i8* %32, align 1
  %2368 = lshr i32 %2349, 31
  %2369 = add nuw nsw i32 %2366, %2368
  %2370 = icmp eq i32 %2369, 2
  %2371 = zext i1 %2370 to i8
  store i8 %2371, i8* %38, align 1
  %2372 = icmp ne i8 %2367, 0
  %2373 = xor i1 %2372, %2370
  %2374 = or i1 %2364, %2373
  %.v458 = select i1 %2374, i64 29, i64 16
  %2375 = add i64 %2344, %.v458
  store i64 %2375, i64* %3, align 8
  br i1 %2374, label %block_.L_41b5a5, label %block_41b598

block_41b598:                                     ; preds = %block_.L_41b588
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %2376 = add i64 %2345, -268
  %2377 = add i64 %2375, 8
  store i64 %2377, i64* %3, align 8
  %2378 = inttoptr i64 %2376 to i32*
  store i32 0, i32* %2378, align 4
  %2379 = load i64, i64* %3, align 8
  %2380 = add i64 %2379, 52
  store i64 %2380, i64* %3, align 8
  br label %block_.L_41b5d4

block_.L_41b5a5:                                  ; preds = %block_.L_41b588
  %2381 = add i64 %2345, -36
  %2382 = add i64 %2375, 3
  store i64 %2382, i64* %3, align 8
  %2383 = inttoptr i64 %2381 to i32*
  %2384 = load i32, i32* %2383, align 4
  %2385 = zext i32 %2384 to i64
  store i64 %2385, i64* %RAX.i82, align 8
  %2386 = add i64 %2345, -16
  %2387 = add i64 %2375, 6
  store i64 %2387, i64* %3, align 8
  %2388 = inttoptr i64 %2386 to i32*
  %2389 = load i32, i32* %2388, align 4
  %2390 = sub i32 %2384, %2389
  %2391 = icmp ult i32 %2384, %2389
  %2392 = zext i1 %2391 to i8
  store i8 %2392, i8* %14, align 1
  %2393 = and i32 %2390, 255
  %2394 = tail call i32 @llvm.ctpop.i32(i32 %2393)
  %2395 = trunc i32 %2394 to i8
  %2396 = and i8 %2395, 1
  %2397 = xor i8 %2396, 1
  store i8 %2397, i8* %21, align 1
  %2398 = xor i32 %2389, %2384
  %2399 = xor i32 %2398, %2390
  %2400 = lshr i32 %2399, 4
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  store i8 %2402, i8* %26, align 1
  %2403 = icmp eq i32 %2390, 0
  %2404 = zext i1 %2403 to i8
  store i8 %2404, i8* %29, align 1
  %2405 = lshr i32 %2390, 31
  %2406 = trunc i32 %2405 to i8
  store i8 %2406, i8* %32, align 1
  %2407 = lshr i32 %2384, 31
  %2408 = lshr i32 %2389, 31
  %2409 = xor i32 %2408, %2407
  %2410 = xor i32 %2405, %2407
  %2411 = add nuw nsw i32 %2410, %2409
  %2412 = icmp eq i32 %2411, 2
  %2413 = zext i1 %2412 to i8
  store i8 %2413, i8* %38, align 1
  %2414 = icmp ne i8 %2406, 0
  %2415 = xor i1 %2414, %2412
  %.v472 = select i1 %2415, i64 12, i64 26
  %2416 = add i64 %2375, %.v472
  %2417 = add i64 %2416, 3
  store i64 %2417, i64* %3, align 8
  br i1 %2415, label %block_41b5b1, label %block_.L_41b5bf

block_41b5b1:                                     ; preds = %block_.L_41b5a5
  %2418 = load i32, i32* %2383, align 4
  %2419 = zext i32 %2418 to i64
  store i64 %2419, i64* %RAX.i82, align 8
  %2420 = add i64 %2345, -272
  %2421 = add i64 %2416, 9
  store i64 %2421, i64* %3, align 8
  %2422 = inttoptr i64 %2420 to i32*
  store i32 %2418, i32* %2422, align 4
  %2423 = load i64, i64* %3, align 8
  %2424 = add i64 %2423, 14
  store i64 %2424, i64* %3, align 8
  br label %block_.L_41b5c8

block_.L_41b5bf:                                  ; preds = %block_.L_41b5a5
  %2425 = load i32, i32* %2388, align 4
  %2426 = zext i32 %2425 to i64
  store i64 %2426, i64* %RAX.i82, align 8
  %2427 = add i64 %2345, -272
  %2428 = add i64 %2416, 9
  store i64 %2428, i64* %3, align 8
  %2429 = inttoptr i64 %2427 to i32*
  store i32 %2425, i32* %2429, align 4
  %.pre184 = load i64, i64* %3, align 8
  br label %block_.L_41b5c8

block_.L_41b5c8:                                  ; preds = %block_.L_41b5bf, %block_41b5b1
  %2430 = phi i64 [ %.pre184, %block_.L_41b5bf ], [ %2424, %block_41b5b1 ]
  %2431 = load i64, i64* %RBP.i, align 8
  %2432 = add i64 %2431, -272
  %2433 = add i64 %2430, 6
  store i64 %2433, i64* %3, align 8
  %2434 = inttoptr i64 %2432 to i32*
  %2435 = load i32, i32* %2434, align 4
  %2436 = zext i32 %2435 to i64
  store i64 %2436, i64* %RAX.i82, align 8
  %2437 = add i64 %2431, -268
  %2438 = add i64 %2430, 12
  store i64 %2438, i64* %3, align 8
  %2439 = inttoptr i64 %2437 to i32*
  store i32 %2435, i32* %2439, align 4
  %.pre185 = load i64, i64* %3, align 8
  br label %block_.L_41b5d4

block_.L_41b5d4:                                  ; preds = %block_.L_41b5c8, %block_41b598
  %2440 = phi i64 [ %.pre185, %block_.L_41b5c8 ], [ %2380, %block_41b598 ]
  %2441 = load i64, i64* %RBP.i, align 8
  %2442 = add i64 %2441, -268
  %2443 = add i64 %2440, 6
  store i64 %2443, i64* %3, align 8
  %2444 = inttoptr i64 %2442 to i32*
  %2445 = load i32, i32* %2444, align 4
  %2446 = zext i32 %2445 to i64
  store i64 %2446, i64* %RAX.i82, align 8
  %2447 = add i64 %2441, -56
  %2448 = add i64 %2440, 9
  store i64 %2448, i64* %3, align 8
  %2449 = inttoptr i64 %2447 to i32*
  store i32 %2445, i32* %2449, align 4
  %2450 = load i64, i64* %RBP.i, align 8
  %2451 = add i64 %2450, -32
  %2452 = load i64, i64* %3, align 8
  %2453 = add i64 %2452, 7
  store i64 %2453, i64* %3, align 8
  %2454 = inttoptr i64 %2451 to i32*
  store i32 -2, i32* %2454, align 4
  %.pre186 = load i64, i64* %3, align 8
  br label %block_.L_41b5e4

block_.L_41b5e4:                                  ; preds = %block_.L_41b66d, %block_.L_41b5d4
  %2455 = phi i64 [ %2848, %block_.L_41b66d ], [ %.pre186, %block_.L_41b5d4 ]
  %2456 = load i64, i64* %RBP.i, align 8
  %2457 = add i64 %2456, -32
  %2458 = add i64 %2455, 4
  store i64 %2458, i64* %3, align 8
  %2459 = inttoptr i64 %2457 to i32*
  %2460 = load i32, i32* %2459, align 4
  %2461 = add i32 %2460, -4
  %2462 = icmp ult i32 %2460, 4
  %2463 = zext i1 %2462 to i8
  store i8 %2463, i8* %14, align 1
  %2464 = and i32 %2461, 255
  %2465 = tail call i32 @llvm.ctpop.i32(i32 %2464)
  %2466 = trunc i32 %2465 to i8
  %2467 = and i8 %2466, 1
  %2468 = xor i8 %2467, 1
  store i8 %2468, i8* %21, align 1
  %2469 = xor i32 %2461, %2460
  %2470 = lshr i32 %2469, 4
  %2471 = trunc i32 %2470 to i8
  %2472 = and i8 %2471, 1
  store i8 %2472, i8* %26, align 1
  %2473 = icmp eq i32 %2461, 0
  %2474 = zext i1 %2473 to i8
  store i8 %2474, i8* %29, align 1
  %2475 = lshr i32 %2461, 31
  %2476 = trunc i32 %2475 to i8
  store i8 %2476, i8* %32, align 1
  %2477 = lshr i32 %2460, 31
  %2478 = xor i32 %2475, %2477
  %2479 = add nuw nsw i32 %2478, %2477
  %2480 = icmp eq i32 %2479, 2
  %2481 = zext i1 %2480 to i8
  store i8 %2481, i8* %38, align 1
  %2482 = icmp ne i8 %2476, 0
  %2483 = xor i1 %2482, %2480
  %.v459 = select i1 %2483, i64 10, i64 203
  %2484 = add i64 %2455, %.v459
  store i64 %2484, i64* %3, align 8
  br i1 %2483, label %block_41b5ee, label %block_.L_41b6af

block_41b5ee:                                     ; preds = %block_.L_41b5e4
  %2485 = add i64 %2456, -40
  %2486 = add i64 %2484, 3
  store i64 %2486, i64* %3, align 8
  %2487 = inttoptr i64 %2485 to i32*
  %2488 = load i32, i32* %2487, align 4
  %2489 = zext i32 %2488 to i64
  store i64 %2489, i64* %RAX.i82, align 8
  %2490 = add i64 %2456, -12
  %2491 = add i64 %2484, 6
  store i64 %2491, i64* %3, align 8
  %2492 = inttoptr i64 %2490 to i32*
  %2493 = load i32, i32* %2492, align 4
  %2494 = zext i32 %2493 to i64
  store i64 %2494, i64* %RCX.i3156, align 8
  %2495 = add i64 %2484, 9
  store i64 %2495, i64* %3, align 8
  %2496 = load i32, i32* %2459, align 4
  %2497 = add i32 %2496, %2493
  %2498 = zext i32 %2497 to i64
  store i64 %2498, i64* %RCX.i3156, align 8
  %2499 = lshr i32 %2497, 31
  %2500 = sub i32 %2488, %2497
  %2501 = icmp ult i32 %2488, %2497
  %2502 = zext i1 %2501 to i8
  store i8 %2502, i8* %14, align 1
  %2503 = and i32 %2500, 255
  %2504 = tail call i32 @llvm.ctpop.i32(i32 %2503)
  %2505 = trunc i32 %2504 to i8
  %2506 = and i8 %2505, 1
  %2507 = xor i8 %2506, 1
  store i8 %2507, i8* %21, align 1
  %2508 = xor i32 %2497, %2488
  %2509 = xor i32 %2508, %2500
  %2510 = lshr i32 %2509, 4
  %2511 = trunc i32 %2510 to i8
  %2512 = and i8 %2511, 1
  store i8 %2512, i8* %26, align 1
  %2513 = icmp eq i32 %2500, 0
  %2514 = zext i1 %2513 to i8
  store i8 %2514, i8* %29, align 1
  %2515 = lshr i32 %2500, 31
  %2516 = trunc i32 %2515 to i8
  store i8 %2516, i8* %32, align 1
  %2517 = lshr i32 %2488, 31
  %2518 = xor i32 %2499, %2517
  %2519 = xor i32 %2515, %2517
  %2520 = add nuw nsw i32 %2519, %2518
  %2521 = icmp eq i32 %2520, 2
  %2522 = zext i1 %2521 to i8
  store i8 %2522, i8* %38, align 1
  %2523 = icmp ne i8 %2516, 0
  %2524 = xor i1 %2523, %2521
  %.v469 = select i1 %2524, i64 17, i64 31
  %2525 = add i64 %2484, %.v469
  %2526 = add i64 %2525, 3
  store i64 %2526, i64* %3, align 8
  br i1 %2524, label %block_41b5ff, label %block_.L_41b60d

block_41b5ff:                                     ; preds = %block_41b5ee
  %2527 = load i32, i32* %2487, align 4
  %2528 = zext i32 %2527 to i64
  store i64 %2528, i64* %RAX.i82, align 8
  %2529 = add i64 %2456, -276
  %2530 = add i64 %2525, 9
  store i64 %2530, i64* %3, align 8
  %2531 = inttoptr i64 %2529 to i32*
  store i32 %2527, i32* %2531, align 4
  %2532 = load i64, i64* %3, align 8
  %2533 = add i64 %2532, 17
  store i64 %2533, i64* %3, align 8
  br label %block_.L_41b619

block_.L_41b60d:                                  ; preds = %block_41b5ee
  %2534 = load i32, i32* %2492, align 4
  %2535 = zext i32 %2534 to i64
  store i64 %2535, i64* %RAX.i82, align 8
  %2536 = add i64 %2525, 6
  store i64 %2536, i64* %3, align 8
  %2537 = load i32, i32* %2459, align 4
  %2538 = add i32 %2537, %2534
  %2539 = zext i32 %2538 to i64
  store i64 %2539, i64* %RAX.i82, align 8
  %2540 = icmp ult i32 %2538, %2534
  %2541 = icmp ult i32 %2538, %2537
  %2542 = or i1 %2540, %2541
  %2543 = zext i1 %2542 to i8
  store i8 %2543, i8* %14, align 1
  %2544 = and i32 %2538, 255
  %2545 = tail call i32 @llvm.ctpop.i32(i32 %2544)
  %2546 = trunc i32 %2545 to i8
  %2547 = and i8 %2546, 1
  %2548 = xor i8 %2547, 1
  store i8 %2548, i8* %21, align 1
  %2549 = xor i32 %2537, %2534
  %2550 = xor i32 %2549, %2538
  %2551 = lshr i32 %2550, 4
  %2552 = trunc i32 %2551 to i8
  %2553 = and i8 %2552, 1
  store i8 %2553, i8* %26, align 1
  %2554 = icmp eq i32 %2538, 0
  %2555 = zext i1 %2554 to i8
  store i8 %2555, i8* %29, align 1
  %2556 = lshr i32 %2538, 31
  %2557 = trunc i32 %2556 to i8
  store i8 %2557, i8* %32, align 1
  %2558 = lshr i32 %2534, 31
  %2559 = lshr i32 %2537, 31
  %2560 = xor i32 %2556, %2558
  %2561 = xor i32 %2556, %2559
  %2562 = add nuw nsw i32 %2560, %2561
  %2563 = icmp eq i32 %2562, 2
  %2564 = zext i1 %2563 to i8
  store i8 %2564, i8* %38, align 1
  %2565 = add i64 %2456, -276
  %2566 = add i64 %2525, 12
  store i64 %2566, i64* %3, align 8
  %2567 = inttoptr i64 %2565 to i32*
  store i32 %2538, i32* %2567, align 4
  %.pre213 = load i64, i64* %3, align 8
  br label %block_.L_41b619

block_.L_41b619:                                  ; preds = %block_.L_41b60d, %block_41b5ff
  %2568 = phi i64 [ %.pre213, %block_.L_41b60d ], [ %2533, %block_41b5ff ]
  %2569 = load i64, i64* %RBP.i, align 8
  %2570 = add i64 %2569, -276
  %2571 = add i64 %2568, 6
  store i64 %2571, i64* %3, align 8
  %2572 = inttoptr i64 %2570 to i32*
  %2573 = load i32, i32* %2572, align 4
  %2574 = zext i32 %2573 to i64
  store i64 %2574, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i3156, align 8
  %2575 = sub i32 0, %2573
  %2576 = icmp ne i32 %2573, 0
  %2577 = zext i1 %2576 to i8
  store i8 %2577, i8* %14, align 1
  %2578 = and i32 %2575, 255
  %2579 = tail call i32 @llvm.ctpop.i32(i32 %2578)
  %2580 = trunc i32 %2579 to i8
  %2581 = and i8 %2580, 1
  %2582 = xor i8 %2581, 1
  store i8 %2582, i8* %21, align 1
  %2583 = xor i32 %2573, %2575
  %2584 = lshr i32 %2583, 4
  %2585 = trunc i32 %2584 to i8
  %2586 = and i8 %2585, 1
  store i8 %2586, i8* %26, align 1
  %2587 = icmp eq i32 %2573, 0
  %2588 = zext i1 %2587 to i8
  store i8 %2588, i8* %29, align 1
  %2589 = lshr i32 %2575, 31
  %2590 = trunc i32 %2589 to i8
  store i8 %2590, i8* %32, align 1
  %2591 = lshr i32 %2573, 31
  %2592 = add nuw nsw i32 %2589, %2591
  %2593 = icmp eq i32 %2592, 2
  %2594 = zext i1 %2593 to i8
  store i8 %2594, i8* %38, align 1
  %2595 = icmp ne i8 %2590, 0
  %2596 = xor i1 %2595, %2593
  %2597 = or i1 %2587, %2596
  %.v470 = select i1 %2597, i64 29, i64 16
  %2598 = add i64 %2568, %.v470
  store i64 %2598, i64* %3, align 8
  br i1 %2597, label %block_.L_41b636, label %block_41b629

block_41b629:                                     ; preds = %block_.L_41b619
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %2599 = add i64 %2569, -280
  %2600 = add i64 %2598, 8
  store i64 %2600, i64* %3, align 8
  %2601 = inttoptr i64 %2599 to i32*
  store i32 0, i32* %2601, align 4
  %2602 = load i64, i64* %3, align 8
  %2603 = add i64 %2602, 60
  store i64 %2603, i64* %3, align 8
  br label %block_.L_41b66d

block_.L_41b636:                                  ; preds = %block_.L_41b619
  %2604 = add i64 %2569, -40
  %2605 = add i64 %2598, 3
  store i64 %2605, i64* %3, align 8
  %2606 = inttoptr i64 %2604 to i32*
  %2607 = load i32, i32* %2606, align 4
  %2608 = zext i32 %2607 to i64
  store i64 %2608, i64* %RAX.i82, align 8
  %2609 = add i64 %2569, -12
  %2610 = add i64 %2598, 6
  store i64 %2610, i64* %3, align 8
  %2611 = inttoptr i64 %2609 to i32*
  %2612 = load i32, i32* %2611, align 4
  %2613 = zext i32 %2612 to i64
  store i64 %2613, i64* %RCX.i3156, align 8
  %2614 = add i64 %2569, -32
  %2615 = add i64 %2598, 9
  store i64 %2615, i64* %3, align 8
  %2616 = inttoptr i64 %2614 to i32*
  %2617 = load i32, i32* %2616, align 4
  %2618 = add i32 %2617, %2612
  %2619 = zext i32 %2618 to i64
  store i64 %2619, i64* %RCX.i3156, align 8
  %2620 = lshr i32 %2618, 31
  %2621 = sub i32 %2607, %2618
  %2622 = icmp ult i32 %2607, %2618
  %2623 = zext i1 %2622 to i8
  store i8 %2623, i8* %14, align 1
  %2624 = and i32 %2621, 255
  %2625 = tail call i32 @llvm.ctpop.i32(i32 %2624)
  %2626 = trunc i32 %2625 to i8
  %2627 = and i8 %2626, 1
  %2628 = xor i8 %2627, 1
  store i8 %2628, i8* %21, align 1
  %2629 = xor i32 %2618, %2607
  %2630 = xor i32 %2629, %2621
  %2631 = lshr i32 %2630, 4
  %2632 = trunc i32 %2631 to i8
  %2633 = and i8 %2632, 1
  store i8 %2633, i8* %26, align 1
  %2634 = icmp eq i32 %2621, 0
  %2635 = zext i1 %2634 to i8
  store i8 %2635, i8* %29, align 1
  %2636 = lshr i32 %2621, 31
  %2637 = trunc i32 %2636 to i8
  store i8 %2637, i8* %32, align 1
  %2638 = lshr i32 %2607, 31
  %2639 = xor i32 %2620, %2638
  %2640 = xor i32 %2636, %2638
  %2641 = add nuw nsw i32 %2640, %2639
  %2642 = icmp eq i32 %2641, 2
  %2643 = zext i1 %2642 to i8
  store i8 %2643, i8* %38, align 1
  %2644 = icmp ne i8 %2637, 0
  %2645 = xor i1 %2644, %2642
  %.v471 = select i1 %2645, i64 17, i64 31
  %2646 = add i64 %2598, %.v471
  %2647 = add i64 %2646, 3
  store i64 %2647, i64* %3, align 8
  br i1 %2645, label %block_41b647, label %block_.L_41b655

block_41b647:                                     ; preds = %block_.L_41b636
  %2648 = load i32, i32* %2606, align 4
  %2649 = zext i32 %2648 to i64
  store i64 %2649, i64* %RAX.i82, align 8
  %2650 = add i64 %2569, -284
  %2651 = add i64 %2646, 9
  store i64 %2651, i64* %3, align 8
  %2652 = inttoptr i64 %2650 to i32*
  store i32 %2648, i32* %2652, align 4
  %2653 = load i64, i64* %3, align 8
  %2654 = add i64 %2653, 17
  store i64 %2654, i64* %3, align 8
  br label %block_.L_41b661

block_.L_41b655:                                  ; preds = %block_.L_41b636
  %2655 = load i32, i32* %2611, align 4
  %2656 = zext i32 %2655 to i64
  store i64 %2656, i64* %RAX.i82, align 8
  %2657 = add i64 %2646, 6
  store i64 %2657, i64* %3, align 8
  %2658 = load i32, i32* %2616, align 4
  %2659 = add i32 %2658, %2655
  %2660 = zext i32 %2659 to i64
  store i64 %2660, i64* %RAX.i82, align 8
  %2661 = icmp ult i32 %2659, %2655
  %2662 = icmp ult i32 %2659, %2658
  %2663 = or i1 %2661, %2662
  %2664 = zext i1 %2663 to i8
  store i8 %2664, i8* %14, align 1
  %2665 = and i32 %2659, 255
  %2666 = tail call i32 @llvm.ctpop.i32(i32 %2665)
  %2667 = trunc i32 %2666 to i8
  %2668 = and i8 %2667, 1
  %2669 = xor i8 %2668, 1
  store i8 %2669, i8* %21, align 1
  %2670 = xor i32 %2658, %2655
  %2671 = xor i32 %2670, %2659
  %2672 = lshr i32 %2671, 4
  %2673 = trunc i32 %2672 to i8
  %2674 = and i8 %2673, 1
  store i8 %2674, i8* %26, align 1
  %2675 = icmp eq i32 %2659, 0
  %2676 = zext i1 %2675 to i8
  store i8 %2676, i8* %29, align 1
  %2677 = lshr i32 %2659, 31
  %2678 = trunc i32 %2677 to i8
  store i8 %2678, i8* %32, align 1
  %2679 = lshr i32 %2655, 31
  %2680 = lshr i32 %2658, 31
  %2681 = xor i32 %2677, %2679
  %2682 = xor i32 %2677, %2680
  %2683 = add nuw nsw i32 %2681, %2682
  %2684 = icmp eq i32 %2683, 2
  %2685 = zext i1 %2684 to i8
  store i8 %2685, i8* %38, align 1
  %2686 = add i64 %2569, -284
  %2687 = add i64 %2646, 12
  store i64 %2687, i64* %3, align 8
  %2688 = inttoptr i64 %2686 to i32*
  store i32 %2659, i32* %2688, align 4
  %.pre214 = load i64, i64* %3, align 8
  br label %block_.L_41b661

block_.L_41b661:                                  ; preds = %block_.L_41b655, %block_41b647
  %2689 = phi i64 [ %.pre214, %block_.L_41b655 ], [ %2654, %block_41b647 ]
  %2690 = load i64, i64* %RBP.i, align 8
  %2691 = add i64 %2690, -284
  %2692 = add i64 %2689, 6
  store i64 %2692, i64* %3, align 8
  %2693 = inttoptr i64 %2691 to i32*
  %2694 = load i32, i32* %2693, align 4
  %2695 = zext i32 %2694 to i64
  store i64 %2695, i64* %RAX.i82, align 8
  %2696 = add i64 %2690, -280
  %2697 = add i64 %2689, 12
  store i64 %2697, i64* %3, align 8
  %2698 = inttoptr i64 %2696 to i32*
  store i32 %2694, i32* %2698, align 4
  %.pre215 = load i64, i64* %3, align 8
  br label %block_.L_41b66d

block_.L_41b66d:                                  ; preds = %block_.L_41b661, %block_41b629
  %2699 = phi i64 [ %.pre215, %block_.L_41b661 ], [ %2603, %block_41b629 ]
  %2700 = load i64, i64* %RBP.i, align 8
  %2701 = add i64 %2700, -280
  %2702 = add i64 %2699, 6
  store i64 %2702, i64* %3, align 8
  %2703 = inttoptr i64 %2701 to i32*
  %2704 = load i32, i32* %2703, align 4
  %2705 = zext i32 %2704 to i64
  store i64 %2705, i64* %RAX.i82, align 8
  %2706 = add i64 %2700, -60
  %2707 = add i64 %2699, 9
  store i64 %2707, i64* %3, align 8
  %2708 = inttoptr i64 %2706 to i32*
  store i32 %2704, i32* %2708, align 4
  %2709 = load i64, i64* %RBP.i, align 8
  %2710 = add i64 %2709, -8
  %2711 = load i64, i64* %3, align 8
  %2712 = add i64 %2711, 4
  store i64 %2712, i64* %3, align 8
  %2713 = inttoptr i64 %2710 to i64*
  %2714 = load i64, i64* %2713, align 8
  store i64 %2714, i64* %RCX.i3156, align 8
  %2715 = add i64 %2709, -60
  %2716 = add i64 %2711, 8
  store i64 %2716, i64* %3, align 8
  %2717 = inttoptr i64 %2715 to i32*
  %2718 = load i32, i32* %2717, align 4
  %2719 = sext i32 %2718 to i64
  store i64 %2719, i64* %RDX.i532, align 8
  %2720 = shl nsw i64 %2719, 3
  %2721 = add i64 %2720, %2714
  %2722 = add i64 %2711, 12
  store i64 %2722, i64* %3, align 8
  %2723 = inttoptr i64 %2721 to i64*
  %2724 = load i64, i64* %2723, align 8
  store i64 %2724, i64* %RCX.i3156, align 8
  %2725 = add i64 %2709, -56
  %2726 = add i64 %2711, 16
  store i64 %2726, i64* %3, align 8
  %2727 = inttoptr i64 %2725 to i32*
  %2728 = load i32, i32* %2727, align 4
  %2729 = sext i32 %2728 to i64
  store i64 %2729, i64* %RDX.i532, align 8
  %2730 = shl nsw i64 %2729, 1
  %2731 = add i64 %2730, %2724
  %2732 = add i64 %2711, 20
  store i64 %2732, i64* %3, align 8
  %2733 = inttoptr i64 %2731 to i16*
  %2734 = load i16, i16* %2733, align 2
  %2735 = zext i16 %2734 to i64
  store i64 %2735, i64* %RAX.i82, align 8
  %2736 = add i64 %2709, -32
  %2737 = add i64 %2711, 23
  store i64 %2737, i64* %3, align 8
  %2738 = inttoptr i64 %2736 to i32*
  %2739 = load i32, i32* %2738, align 4
  %2740 = add i32 %2739, 2
  %2741 = zext i32 %2740 to i64
  store i64 %2741, i64* %RSI.i1183, align 8
  %2742 = icmp ugt i32 %2739, -3
  %2743 = zext i1 %2742 to i8
  store i8 %2743, i8* %14, align 1
  %2744 = and i32 %2740, 255
  %2745 = tail call i32 @llvm.ctpop.i32(i32 %2744)
  %2746 = trunc i32 %2745 to i8
  %2747 = and i8 %2746, 1
  %2748 = xor i8 %2747, 1
  store i8 %2748, i8* %21, align 1
  %2749 = xor i32 %2740, %2739
  %2750 = lshr i32 %2749, 4
  %2751 = trunc i32 %2750 to i8
  %2752 = and i8 %2751, 1
  store i8 %2752, i8* %26, align 1
  %2753 = icmp eq i32 %2740, 0
  %2754 = zext i1 %2753 to i8
  store i8 %2754, i8* %29, align 1
  %2755 = lshr i32 %2740, 31
  %2756 = trunc i32 %2755 to i8
  store i8 %2756, i8* %32, align 1
  %2757 = lshr i32 %2739, 31
  %2758 = xor i32 %2755, %2757
  %2759 = add nuw nsw i32 %2758, %2755
  %2760 = icmp eq i32 %2759, 2
  %2761 = zext i1 %2760 to i8
  store i8 %2761, i8* %38, align 1
  %2762 = sext i32 %2740 to i64
  store i64 %2762, i64* %RCX.i3156, align 8
  %2763 = shl nsw i64 %2762, 2
  %2764 = add nsw i64 %2763, 4950704
  %2765 = add i64 %2711, 37
  store i64 %2765, i64* %3, align 8
  %2766 = inttoptr i64 %2764 to i32*
  %2767 = load i32, i32* %2766, align 4
  %2768 = sext i32 %2767 to i64
  %2769 = mul nsw i64 %2768, %2735
  %2770 = trunc i64 %2769 to i32
  %2771 = and i64 %2769, 4294967295
  store i64 %2771, i64* %RAX.i82, align 8
  %2772 = shl i64 %2769, 32
  %2773 = ashr exact i64 %2772, 32
  %2774 = icmp ne i64 %2773, %2769
  %2775 = zext i1 %2774 to i8
  store i8 %2775, i8* %14, align 1
  %2776 = and i32 %2770, 255
  %2777 = tail call i32 @llvm.ctpop.i32(i32 %2776)
  %2778 = trunc i32 %2777 to i8
  %2779 = and i8 %2778, 1
  %2780 = xor i8 %2779, 1
  store i8 %2780, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %2781 = lshr i32 %2770, 31
  %2782 = trunc i32 %2781 to i8
  store i8 %2782, i8* %32, align 1
  store i8 %2775, i8* %38, align 1
  %2783 = load i64, i64* %RBP.i, align 8
  %2784 = add i64 %2783, -44
  %2785 = add i64 %2711, 40
  store i64 %2785, i64* %3, align 8
  %2786 = trunc i64 %2769 to i32
  %2787 = inttoptr i64 %2784 to i32*
  %2788 = load i32, i32* %2787, align 4
  %2789 = add i32 %2788, %2786
  %2790 = zext i32 %2789 to i64
  store i64 %2790, i64* %RAX.i82, align 8
  %2791 = icmp ult i32 %2789, %2786
  %2792 = icmp ult i32 %2789, %2788
  %2793 = or i1 %2791, %2792
  %2794 = zext i1 %2793 to i8
  store i8 %2794, i8* %14, align 1
  %2795 = and i32 %2789, 255
  %2796 = tail call i32 @llvm.ctpop.i32(i32 %2795)
  %2797 = trunc i32 %2796 to i8
  %2798 = and i8 %2797, 1
  %2799 = xor i8 %2798, 1
  store i8 %2799, i8* %21, align 1
  %2800 = xor i32 %2788, %2786
  %2801 = xor i32 %2800, %2789
  %2802 = lshr i32 %2801, 4
  %2803 = trunc i32 %2802 to i8
  %2804 = and i8 %2803, 1
  store i8 %2804, i8* %26, align 1
  %2805 = icmp eq i32 %2789, 0
  %2806 = zext i1 %2805 to i8
  store i8 %2806, i8* %29, align 1
  %2807 = lshr i32 %2789, 31
  %2808 = trunc i32 %2807 to i8
  store i8 %2808, i8* %32, align 1
  %2809 = lshr i32 %2786, 31
  %2810 = lshr i32 %2788, 31
  %2811 = xor i32 %2807, %2809
  %2812 = xor i32 %2807, %2810
  %2813 = add nuw nsw i32 %2811, %2812
  %2814 = icmp eq i32 %2813, 2
  %2815 = zext i1 %2814 to i8
  store i8 %2815, i8* %38, align 1
  %2816 = add i64 %2711, 43
  store i64 %2816, i64* %3, align 8
  store i32 %2789, i32* %2787, align 4
  %2817 = load i64, i64* %RBP.i, align 8
  %2818 = add i64 %2817, -32
  %2819 = load i64, i64* %3, align 8
  %2820 = add i64 %2819, 3
  store i64 %2820, i64* %3, align 8
  %2821 = inttoptr i64 %2818 to i32*
  %2822 = load i32, i32* %2821, align 4
  %2823 = add i32 %2822, 1
  %2824 = zext i32 %2823 to i64
  store i64 %2824, i64* %RAX.i82, align 8
  %2825 = icmp eq i32 %2822, -1
  %2826 = icmp eq i32 %2823, 0
  %2827 = or i1 %2825, %2826
  %2828 = zext i1 %2827 to i8
  store i8 %2828, i8* %14, align 1
  %2829 = and i32 %2823, 255
  %2830 = tail call i32 @llvm.ctpop.i32(i32 %2829)
  %2831 = trunc i32 %2830 to i8
  %2832 = and i8 %2831, 1
  %2833 = xor i8 %2832, 1
  store i8 %2833, i8* %21, align 1
  %2834 = xor i32 %2823, %2822
  %2835 = lshr i32 %2834, 4
  %2836 = trunc i32 %2835 to i8
  %2837 = and i8 %2836, 1
  store i8 %2837, i8* %26, align 1
  %2838 = zext i1 %2826 to i8
  store i8 %2838, i8* %29, align 1
  %2839 = lshr i32 %2823, 31
  %2840 = trunc i32 %2839 to i8
  store i8 %2840, i8* %32, align 1
  %2841 = lshr i32 %2822, 31
  %2842 = xor i32 %2839, %2841
  %2843 = add nuw nsw i32 %2842, %2839
  %2844 = icmp eq i32 %2843, 2
  %2845 = zext i1 %2844 to i8
  store i8 %2845, i8* %38, align 1
  %2846 = add i64 %2819, 9
  store i64 %2846, i64* %3, align 8
  store i32 %2823, i32* %2821, align 4
  %2847 = load i64, i64* %3, align 8
  %2848 = add i64 %2847, -198
  store i64 %2848, i64* %3, align 8
  br label %block_.L_41b5e4

block_.L_41b6af:                                  ; preds = %block_.L_41b5e4
  store i64 32, i64* %RAX.i82, align 8
  %2849 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2849, i64* %RCX.i3156, align 8
  %2850 = add i64 %2849, 72684
  %2851 = add i64 %2484, 19
  store i64 %2851, i64* %3, align 8
  %2852 = inttoptr i64 %2850 to i32*
  %2853 = load i32, i32* %2852, align 4
  %2854 = zext i32 %2853 to i64
  store i64 %2854, i64* %RDX.i532, align 8
  %2855 = add i64 %2456, -44
  %2856 = add i64 %2484, 22
  store i64 %2856, i64* %3, align 8
  %2857 = inttoptr i64 %2855 to i32*
  %2858 = load i32, i32* %2857, align 4
  %2859 = add i32 %2858, 16
  %2860 = zext i32 %2859 to i64
  store i64 %2860, i64* %RSI.i1183, align 8
  %2861 = icmp ugt i32 %2858, -17
  %2862 = zext i1 %2861 to i8
  store i8 %2862, i8* %14, align 1
  %2863 = and i32 %2859, 255
  %2864 = tail call i32 @llvm.ctpop.i32(i32 %2863)
  %2865 = trunc i32 %2864 to i8
  %2866 = and i8 %2865, 1
  %2867 = xor i8 %2866, 1
  store i8 %2867, i8* %21, align 1
  %2868 = xor i32 %2858, 16
  %2869 = xor i32 %2868, %2859
  %2870 = lshr i32 %2869, 4
  %2871 = trunc i32 %2870 to i8
  %2872 = and i8 %2871, 1
  store i8 %2872, i8* %26, align 1
  %2873 = icmp eq i32 %2859, 0
  %2874 = zext i1 %2873 to i8
  store i8 %2874, i8* %29, align 1
  %2875 = lshr i32 %2859, 31
  %2876 = trunc i32 %2875 to i8
  store i8 %2876, i8* %32, align 1
  %2877 = lshr i32 %2858, 31
  %2878 = xor i32 %2875, %2877
  %2879 = add nuw nsw i32 %2878, %2875
  %2880 = icmp eq i32 %2879, 2
  %2881 = zext i1 %2880 to i8
  store i8 %2881, i8* %38, align 1
  %2882 = add i64 %2456, -288
  %2883 = add i64 %2484, 31
  store i64 %2883, i64* %3, align 8
  %2884 = inttoptr i64 %2882 to i32*
  store i32 32, i32* %2884, align 4
  %2885 = load i32, i32* %ESI.i168, align 4
  %2886 = zext i32 %2885 to i64
  %2887 = load i64, i64* %3, align 8
  store i64 %2886, i64* %RAX.i82, align 8
  %2888 = load i64, i64* %RBP.i, align 8
  %2889 = add i64 %2888, -292
  %2890 = load i32, i32* %EDX.i443, align 4
  %2891 = add i64 %2887, 8
  store i64 %2891, i64* %3, align 8
  %2892 = inttoptr i64 %2889 to i32*
  store i32 %2890, i32* %2892, align 4
  %2893 = load i64, i64* %3, align 8
  %2894 = load i32, i32* %EAX.i1056, align 8
  %2895 = sext i32 %2894 to i64
  %2896 = lshr i64 %2895, 32
  store i64 %2896, i64* %141, align 8
  %2897 = load i64, i64* %RBP.i, align 8
  %2898 = add i64 %2897, -288
  %2899 = add i64 %2893, 7
  store i64 %2899, i64* %3, align 8
  %2900 = inttoptr i64 %2898 to i32*
  %2901 = load i32, i32* %2900, align 4
  %2902 = zext i32 %2901 to i64
  store i64 %2902, i64* %RSI.i1183, align 8
  %2903 = add i64 %2893, 9
  store i64 %2903, i64* %3, align 8
  %2904 = zext i32 %2894 to i64
  %2905 = sext i32 %2901 to i64
  %2906 = shl nuw i64 %2896, 32
  %2907 = or i64 %2906, %2904
  %2908 = sdiv i64 %2907, %2905
  %2909 = shl i64 %2908, 32
  %2910 = ashr exact i64 %2909, 32
  %2911 = icmp eq i64 %2908, %2910
  br i1 %2911, label %2914, label %2912

; <label>:2912:                                   ; preds = %block_.L_41b6af
  %2913 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2903, %struct.Memory* %229)
  %.pre187 = load i64, i64* %RBP.i, align 8
  %.pre188 = load i64, i64* %3, align 8
  %.pre189 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit2948

; <label>:2914:                                   ; preds = %block_.L_41b6af
  %2915 = srem i64 %2907, %2905
  %2916 = and i64 %2908, 4294967295
  store i64 %2916, i64* %RAX.i82, align 8
  %2917 = and i64 %2915, 4294967295
  store i64 %2917, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %2918 = trunc i64 %2908 to i32
  br label %routine_idivl__esi.exit2948

routine_idivl__esi.exit2948:                      ; preds = %2914, %2912
  %2919 = phi i32 [ %.pre189, %2912 ], [ %2918, %2914 ]
  %2920 = phi i64 [ %.pre188, %2912 ], [ %2903, %2914 ]
  %2921 = phi i64 [ %.pre187, %2912 ], [ %2897, %2914 ]
  %2922 = phi %struct.Memory* [ %2913, %2912 ], [ %229, %2914 ]
  %2923 = add i64 %2921, -292
  %2924 = add i64 %2920, 6
  store i64 %2924, i64* %3, align 8
  %2925 = inttoptr i64 %2923 to i32*
  %2926 = load i32, i32* %2925, align 4
  %2927 = zext i32 %2926 to i64
  store i64 %2927, i64* %RDI.i129, align 8
  %2928 = sub i32 %2926, %2919
  %2929 = icmp ult i32 %2926, %2919
  %2930 = zext i1 %2929 to i8
  store i8 %2930, i8* %14, align 1
  %2931 = and i32 %2928, 255
  %2932 = tail call i32 @llvm.ctpop.i32(i32 %2931)
  %2933 = trunc i32 %2932 to i8
  %2934 = and i8 %2933, 1
  %2935 = xor i8 %2934, 1
  store i8 %2935, i8* %21, align 1
  %2936 = xor i32 %2919, %2926
  %2937 = xor i32 %2936, %2928
  %2938 = lshr i32 %2937, 4
  %2939 = trunc i32 %2938 to i8
  %2940 = and i8 %2939, 1
  store i8 %2940, i8* %26, align 1
  %2941 = icmp eq i32 %2928, 0
  %2942 = zext i1 %2941 to i8
  store i8 %2942, i8* %29, align 1
  %2943 = lshr i32 %2928, 31
  %2944 = trunc i32 %2943 to i8
  store i8 %2944, i8* %32, align 1
  %2945 = lshr i32 %2926, 31
  %2946 = lshr i32 %2919, 31
  %2947 = xor i32 %2946, %2945
  %2948 = xor i32 %2943, %2945
  %2949 = add nuw nsw i32 %2948, %2947
  %2950 = icmp eq i32 %2949, 2
  %2951 = zext i1 %2950 to i8
  store i8 %2951, i8* %38, align 1
  %2952 = icmp ne i8 %2944, 0
  %2953 = xor i1 %2952, %2950
  %.v460 = select i1 %2953, i64 14, i64 39
  %2954 = add i64 %2920, %.v460
  store i64 %2954, i64* %3, align 8
  br i1 %2953, label %block_41b6ed, label %block_.L_41b706

block_41b6ed:                                     ; preds = %routine_idivl__esi.exit2948
  %2955 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2955, i64* %RAX.i82, align 8
  %2956 = add i64 %2955, 72684
  %2957 = add i64 %2954, 14
  store i64 %2957, i64* %3, align 8
  %2958 = inttoptr i64 %2956 to i32*
  %2959 = load i32, i32* %2958, align 4
  %2960 = zext i32 %2959 to i64
  store i64 %2960, i64* %RCX.i3156, align 8
  %2961 = add i64 %2921, -296
  %2962 = add i64 %2954, 20
  store i64 %2962, i64* %3, align 8
  %2963 = inttoptr i64 %2961 to i32*
  store i32 %2959, i32* %2963, align 4
  %2964 = load i64, i64* %3, align 8
  %2965 = add i64 %2964, 39
  store i64 %2965, i64* %3, align 8
  br label %block_.L_41b728

block_.L_41b706:                                  ; preds = %routine_idivl__esi.exit2948
  store i64 32, i64* %RAX.i82, align 8
  %2966 = add i64 %2921, -44
  %2967 = add i64 %2954, 8
  store i64 %2967, i64* %3, align 8
  %2968 = inttoptr i64 %2966 to i32*
  %2969 = load i32, i32* %2968, align 4
  %2970 = add i32 %2969, 16
  %2971 = zext i32 %2970 to i64
  store i64 %2971, i64* %RCX.i3156, align 8
  %2972 = icmp ugt i32 %2969, -17
  %2973 = zext i1 %2972 to i8
  store i8 %2973, i8* %14, align 1
  %2974 = and i32 %2970, 255
  %2975 = tail call i32 @llvm.ctpop.i32(i32 %2974)
  %2976 = trunc i32 %2975 to i8
  %2977 = and i8 %2976, 1
  %2978 = xor i8 %2977, 1
  store i8 %2978, i8* %21, align 1
  %2979 = xor i32 %2969, 16
  %2980 = xor i32 %2979, %2970
  %2981 = lshr i32 %2980, 4
  %2982 = trunc i32 %2981 to i8
  %2983 = and i8 %2982, 1
  store i8 %2983, i8* %26, align 1
  %2984 = icmp eq i32 %2970, 0
  %2985 = zext i1 %2984 to i8
  store i8 %2985, i8* %29, align 1
  %2986 = lshr i32 %2970, 31
  %2987 = trunc i32 %2986 to i8
  store i8 %2987, i8* %32, align 1
  %2988 = lshr i32 %2969, 31
  %2989 = xor i32 %2986, %2988
  %2990 = add nuw nsw i32 %2989, %2986
  %2991 = icmp eq i32 %2990, 2
  %2992 = zext i1 %2991 to i8
  store i8 %2992, i8* %38, align 1
  %2993 = add i64 %2921, -300
  %2994 = add i64 %2954, 17
  store i64 %2994, i64* %3, align 8
  %2995 = inttoptr i64 %2993 to i32*
  store i32 32, i32* %2995, align 4
  %2996 = load i32, i32* %ECX.i3155, align 4
  %2997 = zext i32 %2996 to i64
  %2998 = load i64, i64* %3, align 8
  store i64 %2997, i64* %RAX.i82, align 8
  %2999 = sext i32 %2996 to i64
  %3000 = lshr i64 %2999, 32
  store i64 %3000, i64* %141, align 8
  %3001 = load i64, i64* %RBP.i, align 8
  %3002 = add i64 %3001, -300
  %3003 = add i64 %2998, 9
  store i64 %3003, i64* %3, align 8
  %3004 = inttoptr i64 %3002 to i32*
  %3005 = load i32, i32* %3004, align 4
  %3006 = zext i32 %3005 to i64
  store i64 %3006, i64* %RCX.i3156, align 8
  %3007 = add i64 %2998, 11
  store i64 %3007, i64* %3, align 8
  %3008 = sext i32 %3005 to i64
  %3009 = shl nuw i64 %3000, 32
  %3010 = or i64 %3009, %2997
  %3011 = sdiv i64 %3010, %3008
  %3012 = shl i64 %3011, 32
  %3013 = ashr exact i64 %3012, 32
  %3014 = icmp eq i64 %3011, %3013
  br i1 %3014, label %3017, label %3015

; <label>:3015:                                   ; preds = %block_.L_41b706
  %3016 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3007, %struct.Memory* %2922)
  %.pre190 = load i64, i64* %RBP.i, align 8
  %.pre191 = load i32, i32* %EAX.i1056, align 4
  %.pre192 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2909

; <label>:3017:                                   ; preds = %block_.L_41b706
  %3018 = srem i64 %3010, %3008
  %3019 = and i64 %3011, 4294967295
  store i64 %3019, i64* %RAX.i82, align 8
  %3020 = and i64 %3018, 4294967295
  store i64 %3020, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %3021 = trunc i64 %3011 to i32
  br label %routine_idivl__ecx.exit2909

routine_idivl__ecx.exit2909:                      ; preds = %3017, %3015
  %3022 = phi i64 [ %.pre192, %3015 ], [ %3007, %3017 ]
  %3023 = phi i32 [ %.pre191, %3015 ], [ %3021, %3017 ]
  %3024 = phi i64 [ %.pre190, %3015 ], [ %3001, %3017 ]
  %3025 = phi %struct.Memory* [ %3016, %3015 ], [ %2922, %3017 ]
  %3026 = add i64 %3024, -296
  %3027 = add i64 %3022, 6
  store i64 %3027, i64* %3, align 8
  %3028 = inttoptr i64 %3026 to i32*
  store i32 %3023, i32* %3028, align 4
  %.pre193 = load i64, i64* %3, align 8
  br label %block_.L_41b728

block_.L_41b728:                                  ; preds = %routine_idivl__ecx.exit2909, %block_41b6ed
  %3029 = phi i64 [ %.pre193, %routine_idivl__ecx.exit2909 ], [ %2965, %block_41b6ed ]
  %MEMORY.32 = phi %struct.Memory* [ %3025, %routine_idivl__ecx.exit2909 ], [ %2922, %block_41b6ed ]
  %3030 = load i64, i64* %RBP.i, align 8
  %3031 = add i64 %3030, -296
  %3032 = add i64 %3029, 6
  store i64 %3032, i64* %3, align 8
  %3033 = inttoptr i64 %3031 to i32*
  %3034 = load i32, i32* %3033, align 4
  %3035 = zext i32 %3034 to i64
  store i64 %3035, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i3156, align 8
  %3036 = sub i32 0, %3034
  %3037 = icmp ne i32 %3034, 0
  %3038 = zext i1 %3037 to i8
  store i8 %3038, i8* %14, align 1
  %3039 = and i32 %3036, 255
  %3040 = tail call i32 @llvm.ctpop.i32(i32 %3039)
  %3041 = trunc i32 %3040 to i8
  %3042 = and i8 %3041, 1
  %3043 = xor i8 %3042, 1
  store i8 %3043, i8* %21, align 1
  %3044 = xor i32 %3034, %3036
  %3045 = lshr i32 %3044, 4
  %3046 = trunc i32 %3045 to i8
  %3047 = and i8 %3046, 1
  store i8 %3047, i8* %26, align 1
  %3048 = icmp eq i32 %3034, 0
  %3049 = zext i1 %3048 to i8
  store i8 %3049, i8* %29, align 1
  %3050 = lshr i32 %3036, 31
  %3051 = trunc i32 %3050 to i8
  store i8 %3051, i8* %32, align 1
  %3052 = lshr i32 %3034, 31
  %3053 = add nuw nsw i32 %3050, %3052
  %3054 = icmp eq i32 %3053, 2
  %3055 = zext i1 %3054 to i8
  store i8 %3055, i8* %38, align 1
  %3056 = icmp ne i8 %3051, 0
  %3057 = xor i1 %3056, %3054
  %3058 = or i1 %3048, %3057
  %.v461 = select i1 %3058, i64 29, i64 16
  %3059 = add i64 %3029, %.v461
  store i64 %3059, i64* %3, align 8
  br i1 %3058, label %block_.L_41b745, label %block_41b738

block_41b738:                                     ; preds = %block_.L_41b728
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %3060 = add i64 %3030, -304
  %3061 = add i64 %3059, 8
  store i64 %3061, i64* %3, align 8
  %3062 = inttoptr i64 %3060 to i32*
  store i32 0, i32* %3062, align 4
  %3063 = load i64, i64* %3, align 8
  %3064 = add i64 %3063, 138
  store i64 %3064, i64* %3, align 8
  br label %block_.L_41b7ca

block_.L_41b745:                                  ; preds = %block_.L_41b728
  store i64 32, i64* %RAX.i82, align 8
  %3065 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3065, i64* %RCX.i3156, align 8
  %3066 = add i64 %3065, 72684
  %3067 = add i64 %3059, 19
  store i64 %3067, i64* %3, align 8
  %3068 = inttoptr i64 %3066 to i32*
  %3069 = load i32, i32* %3068, align 4
  %3070 = zext i32 %3069 to i64
  store i64 %3070, i64* %RDX.i532, align 8
  %3071 = add i64 %3030, -44
  %3072 = add i64 %3059, 22
  store i64 %3072, i64* %3, align 8
  %3073 = inttoptr i64 %3071 to i32*
  %3074 = load i32, i32* %3073, align 4
  %3075 = add i32 %3074, 16
  %3076 = zext i32 %3075 to i64
  store i64 %3076, i64* %RSI.i1183, align 8
  %3077 = icmp ugt i32 %3074, -17
  %3078 = zext i1 %3077 to i8
  store i8 %3078, i8* %14, align 1
  %3079 = and i32 %3075, 255
  %3080 = tail call i32 @llvm.ctpop.i32(i32 %3079)
  %3081 = trunc i32 %3080 to i8
  %3082 = and i8 %3081, 1
  %3083 = xor i8 %3082, 1
  store i8 %3083, i8* %21, align 1
  %3084 = xor i32 %3074, 16
  %3085 = xor i32 %3084, %3075
  %3086 = lshr i32 %3085, 4
  %3087 = trunc i32 %3086 to i8
  %3088 = and i8 %3087, 1
  store i8 %3088, i8* %26, align 1
  %3089 = icmp eq i32 %3075, 0
  %3090 = zext i1 %3089 to i8
  store i8 %3090, i8* %29, align 1
  %3091 = lshr i32 %3075, 31
  %3092 = trunc i32 %3091 to i8
  store i8 %3092, i8* %32, align 1
  %3093 = lshr i32 %3074, 31
  %3094 = xor i32 %3091, %3093
  %3095 = add nuw nsw i32 %3094, %3091
  %3096 = icmp eq i32 %3095, 2
  %3097 = zext i1 %3096 to i8
  store i8 %3097, i8* %38, align 1
  %3098 = add i64 %3030, -308
  %3099 = add i64 %3059, 31
  store i64 %3099, i64* %3, align 8
  %3100 = inttoptr i64 %3098 to i32*
  store i32 32, i32* %3100, align 4
  %3101 = load i32, i32* %ESI.i168, align 4
  %3102 = zext i32 %3101 to i64
  %3103 = load i64, i64* %3, align 8
  store i64 %3102, i64* %RAX.i82, align 8
  %3104 = load i64, i64* %RBP.i, align 8
  %3105 = add i64 %3104, -312
  %3106 = load i32, i32* %EDX.i443, align 4
  %3107 = add i64 %3103, 8
  store i64 %3107, i64* %3, align 8
  %3108 = inttoptr i64 %3105 to i32*
  store i32 %3106, i32* %3108, align 4
  %3109 = load i64, i64* %3, align 8
  %3110 = load i32, i32* %EAX.i1056, align 8
  %3111 = sext i32 %3110 to i64
  %3112 = lshr i64 %3111, 32
  store i64 %3112, i64* %141, align 8
  %3113 = load i64, i64* %RBP.i, align 8
  %3114 = add i64 %3113, -308
  %3115 = add i64 %3109, 7
  store i64 %3115, i64* %3, align 8
  %3116 = inttoptr i64 %3114 to i32*
  %3117 = load i32, i32* %3116, align 4
  %3118 = zext i32 %3117 to i64
  store i64 %3118, i64* %RSI.i1183, align 8
  %3119 = add i64 %3109, 9
  store i64 %3119, i64* %3, align 8
  %3120 = zext i32 %3110 to i64
  %3121 = sext i32 %3117 to i64
  %3122 = shl nuw i64 %3112, 32
  %3123 = or i64 %3122, %3120
  %3124 = sdiv i64 %3123, %3121
  %3125 = shl i64 %3124, 32
  %3126 = ashr exact i64 %3125, 32
  %3127 = icmp eq i64 %3124, %3126
  br i1 %3127, label %3130, label %3128

; <label>:3128:                                   ; preds = %block_.L_41b745
  %3129 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3119, %struct.Memory* %MEMORY.32)
  %.pre194 = load i64, i64* %RBP.i, align 8
  %.pre195 = load i64, i64* %3, align 8
  %.pre196 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit2860

; <label>:3130:                                   ; preds = %block_.L_41b745
  %3131 = srem i64 %3123, %3121
  %3132 = and i64 %3124, 4294967295
  store i64 %3132, i64* %RAX.i82, align 8
  %3133 = and i64 %3131, 4294967295
  store i64 %3133, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %3134 = trunc i64 %3124 to i32
  br label %routine_idivl__esi.exit2860

routine_idivl__esi.exit2860:                      ; preds = %3130, %3128
  %3135 = phi i32 [ %.pre196, %3128 ], [ %3134, %3130 ]
  %3136 = phi i64 [ %.pre195, %3128 ], [ %3119, %3130 ]
  %3137 = phi i64 [ %.pre194, %3128 ], [ %3113, %3130 ]
  %3138 = phi %struct.Memory* [ %3129, %3128 ], [ %MEMORY.32, %3130 ]
  %3139 = add i64 %3137, -312
  %3140 = add i64 %3136, 6
  store i64 %3140, i64* %3, align 8
  %3141 = inttoptr i64 %3139 to i32*
  %3142 = load i32, i32* %3141, align 4
  %3143 = zext i32 %3142 to i64
  store i64 %3143, i64* %RDI.i129, align 8
  %3144 = sub i32 %3142, %3135
  %3145 = icmp ult i32 %3142, %3135
  %3146 = zext i1 %3145 to i8
  store i8 %3146, i8* %14, align 1
  %3147 = and i32 %3144, 255
  %3148 = tail call i32 @llvm.ctpop.i32(i32 %3147)
  %3149 = trunc i32 %3148 to i8
  %3150 = and i8 %3149, 1
  %3151 = xor i8 %3150, 1
  store i8 %3151, i8* %21, align 1
  %3152 = xor i32 %3135, %3142
  %3153 = xor i32 %3152, %3144
  %3154 = lshr i32 %3153, 4
  %3155 = trunc i32 %3154 to i8
  %3156 = and i8 %3155, 1
  store i8 %3156, i8* %26, align 1
  %3157 = icmp eq i32 %3144, 0
  %3158 = zext i1 %3157 to i8
  store i8 %3158, i8* %29, align 1
  %3159 = lshr i32 %3144, 31
  %3160 = trunc i32 %3159 to i8
  store i8 %3160, i8* %32, align 1
  %3161 = lshr i32 %3142, 31
  %3162 = lshr i32 %3135, 31
  %3163 = xor i32 %3162, %3161
  %3164 = xor i32 %3159, %3161
  %3165 = add nuw nsw i32 %3164, %3163
  %3166 = icmp eq i32 %3165, 2
  %3167 = zext i1 %3166 to i8
  store i8 %3167, i8* %38, align 1
  %3168 = icmp ne i8 %3160, 0
  %3169 = xor i1 %3168, %3166
  %.v468 = select i1 %3169, i64 14, i64 39
  %3170 = add i64 %3136, %.v468
  store i64 %3170, i64* %3, align 8
  br i1 %3169, label %block_41b783, label %block_.L_41b79c

block_41b783:                                     ; preds = %routine_idivl__esi.exit2860
  %3171 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3171, i64* %RAX.i82, align 8
  %3172 = add i64 %3171, 72684
  %3173 = add i64 %3170, 14
  store i64 %3173, i64* %3, align 8
  %3174 = inttoptr i64 %3172 to i32*
  %3175 = load i32, i32* %3174, align 4
  %3176 = zext i32 %3175 to i64
  store i64 %3176, i64* %RCX.i3156, align 8
  %3177 = add i64 %3137, -316
  %3178 = add i64 %3170, 20
  store i64 %3178, i64* %3, align 8
  %3179 = inttoptr i64 %3177 to i32*
  store i32 %3175, i32* %3179, align 4
  %3180 = load i64, i64* %3, align 8
  %3181 = add i64 %3180, 39
  store i64 %3181, i64* %3, align 8
  br label %block_.L_41b7be

block_.L_41b79c:                                  ; preds = %routine_idivl__esi.exit2860
  store i64 32, i64* %RAX.i82, align 8
  %3182 = add i64 %3137, -44
  %3183 = add i64 %3170, 8
  store i64 %3183, i64* %3, align 8
  %3184 = inttoptr i64 %3182 to i32*
  %3185 = load i32, i32* %3184, align 4
  %3186 = add i32 %3185, 16
  %3187 = zext i32 %3186 to i64
  store i64 %3187, i64* %RCX.i3156, align 8
  %3188 = icmp ugt i32 %3185, -17
  %3189 = zext i1 %3188 to i8
  store i8 %3189, i8* %14, align 1
  %3190 = and i32 %3186, 255
  %3191 = tail call i32 @llvm.ctpop.i32(i32 %3190)
  %3192 = trunc i32 %3191 to i8
  %3193 = and i8 %3192, 1
  %3194 = xor i8 %3193, 1
  store i8 %3194, i8* %21, align 1
  %3195 = xor i32 %3185, 16
  %3196 = xor i32 %3195, %3186
  %3197 = lshr i32 %3196, 4
  %3198 = trunc i32 %3197 to i8
  %3199 = and i8 %3198, 1
  store i8 %3199, i8* %26, align 1
  %3200 = icmp eq i32 %3186, 0
  %3201 = zext i1 %3200 to i8
  store i8 %3201, i8* %29, align 1
  %3202 = lshr i32 %3186, 31
  %3203 = trunc i32 %3202 to i8
  store i8 %3203, i8* %32, align 1
  %3204 = lshr i32 %3185, 31
  %3205 = xor i32 %3202, %3204
  %3206 = add nuw nsw i32 %3205, %3202
  %3207 = icmp eq i32 %3206, 2
  %3208 = zext i1 %3207 to i8
  store i8 %3208, i8* %38, align 1
  %3209 = add i64 %3137, -320
  %3210 = add i64 %3170, 17
  store i64 %3210, i64* %3, align 8
  %3211 = inttoptr i64 %3209 to i32*
  store i32 32, i32* %3211, align 4
  %3212 = load i32, i32* %ECX.i3155, align 4
  %3213 = zext i32 %3212 to i64
  %3214 = load i64, i64* %3, align 8
  store i64 %3213, i64* %RAX.i82, align 8
  %3215 = sext i32 %3212 to i64
  %3216 = lshr i64 %3215, 32
  store i64 %3216, i64* %141, align 8
  %3217 = load i64, i64* %RBP.i, align 8
  %3218 = add i64 %3217, -320
  %3219 = add i64 %3214, 9
  store i64 %3219, i64* %3, align 8
  %3220 = inttoptr i64 %3218 to i32*
  %3221 = load i32, i32* %3220, align 4
  %3222 = zext i32 %3221 to i64
  store i64 %3222, i64* %RCX.i3156, align 8
  %3223 = add i64 %3214, 11
  store i64 %3223, i64* %3, align 8
  %3224 = sext i32 %3221 to i64
  %3225 = shl nuw i64 %3216, 32
  %3226 = or i64 %3225, %3213
  %3227 = sdiv i64 %3226, %3224
  %3228 = shl i64 %3227, 32
  %3229 = ashr exact i64 %3228, 32
  %3230 = icmp eq i64 %3227, %3229
  br i1 %3230, label %3233, label %3231

; <label>:3231:                                   ; preds = %block_.L_41b79c
  %3232 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3223, %struct.Memory* %3138)
  %.pre197 = load i64, i64* %RBP.i, align 8
  %.pre198 = load i32, i32* %EAX.i1056, align 4
  %.pre199 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2821

; <label>:3233:                                   ; preds = %block_.L_41b79c
  %3234 = srem i64 %3226, %3224
  %3235 = and i64 %3227, 4294967295
  store i64 %3235, i64* %RAX.i82, align 8
  %3236 = and i64 %3234, 4294967295
  store i64 %3236, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %3237 = trunc i64 %3227 to i32
  br label %routine_idivl__ecx.exit2821

routine_idivl__ecx.exit2821:                      ; preds = %3233, %3231
  %3238 = phi i64 [ %.pre199, %3231 ], [ %3223, %3233 ]
  %3239 = phi i32 [ %.pre198, %3231 ], [ %3237, %3233 ]
  %3240 = phi i64 [ %.pre197, %3231 ], [ %3217, %3233 ]
  %3241 = phi %struct.Memory* [ %3232, %3231 ], [ %3138, %3233 ]
  %3242 = add i64 %3240, -316
  %3243 = add i64 %3238, 6
  store i64 %3243, i64* %3, align 8
  %3244 = inttoptr i64 %3242 to i32*
  store i32 %3239, i32* %3244, align 4
  %.pre200 = load i64, i64* %3, align 8
  br label %block_.L_41b7be

block_.L_41b7be:                                  ; preds = %routine_idivl__ecx.exit2821, %block_41b783
  %3245 = phi i64 [ %.pre200, %routine_idivl__ecx.exit2821 ], [ %3181, %block_41b783 ]
  %MEMORY.33 = phi %struct.Memory* [ %3241, %routine_idivl__ecx.exit2821 ], [ %3138, %block_41b783 ]
  %3246 = load i64, i64* %RBP.i, align 8
  %3247 = add i64 %3246, -316
  %3248 = add i64 %3245, 6
  store i64 %3248, i64* %3, align 8
  %3249 = inttoptr i64 %3247 to i32*
  %3250 = load i32, i32* %3249, align 4
  %3251 = zext i32 %3250 to i64
  store i64 %3251, i64* %RAX.i82, align 8
  %3252 = add i64 %3246, -304
  %3253 = add i64 %3245, 12
  store i64 %3253, i64* %3, align 8
  %3254 = inttoptr i64 %3252 to i32*
  store i32 %3250, i32* %3254, align 4
  %.pre201 = load i64, i64* %3, align 8
  br label %block_.L_41b7ca

block_.L_41b7ca:                                  ; preds = %block_.L_41b7be, %block_41b738
  %3255 = phi i64 [ %.pre201, %block_.L_41b7be ], [ %3064, %block_41b738 ]
  %MEMORY.34 = phi %struct.Memory* [ %MEMORY.33, %block_.L_41b7be ], [ %MEMORY.32, %block_41b738 ]
  %3256 = load i64, i64* %RBP.i, align 8
  %3257 = add i64 %3256, -304
  %3258 = add i64 %3255, 6
  store i64 %3258, i64* %3, align 8
  %3259 = inttoptr i64 %3257 to i32*
  %3260 = load i32, i32* %3259, align 4
  %3261 = zext i32 %3260 to i64
  store i64 %3261, i64* %RAX.i82, align 8
  %3262 = add i64 %3256, -44
  %3263 = add i64 %3255, 9
  store i64 %3263, i64* %3, align 8
  %3264 = inttoptr i64 %3262 to i32*
  store i32 %3260, i32* %3264, align 4
  %3265 = load i64, i64* %RBP.i, align 8
  %3266 = add i64 %3265, -28
  %3267 = load i64, i64* %3, align 8
  %3268 = add i64 %3267, 4
  store i64 %3268, i64* %3, align 8
  %3269 = inttoptr i64 %3266 to i32*
  %3270 = load i32, i32* %3269, align 4
  %3271 = add i32 %3270, -1
  %3272 = icmp eq i32 %3270, 0
  %3273 = zext i1 %3272 to i8
  store i8 %3273, i8* %14, align 1
  %3274 = and i32 %3271, 255
  %3275 = tail call i32 @llvm.ctpop.i32(i32 %3274)
  %3276 = trunc i32 %3275 to i8
  %3277 = and i8 %3276, 1
  %3278 = xor i8 %3277, 1
  store i8 %3278, i8* %21, align 1
  %3279 = xor i32 %3271, %3270
  %3280 = lshr i32 %3279, 4
  %3281 = trunc i32 %3280 to i8
  %3282 = and i8 %3281, 1
  store i8 %3282, i8* %26, align 1
  %3283 = icmp eq i32 %3271, 0
  %3284 = zext i1 %3283 to i8
  store i8 %3284, i8* %29, align 1
  %3285 = lshr i32 %3271, 31
  %3286 = trunc i32 %3285 to i8
  store i8 %3286, i8* %32, align 1
  %3287 = lshr i32 %3270, 31
  %3288 = xor i32 %3285, %3287
  %3289 = add nuw nsw i32 %3288, %3287
  %3290 = icmp eq i32 %3289, 2
  %3291 = zext i1 %3290 to i8
  store i8 %3291, i8* %38, align 1
  %.v462 = select i1 %3283, i64 10, i64 198
  %3292 = add i64 %3267, %.v462
  store i64 %3292, i64* %3, align 8
  br i1 %3283, label %block_41b7dd, label %block_.L_41b899

block_41b7dd:                                     ; preds = %block_.L_41b7ca
  %3293 = add i64 %3265, -44
  %3294 = add i64 %3292, 3
  store i64 %3294, i64* %3, align 8
  %3295 = inttoptr i64 %3293 to i32*
  %3296 = load i32, i32* %3295, align 4
  %3297 = zext i32 %3296 to i64
  store i64 %3297, i64* %RAX.i82, align 8
  %3298 = add i64 %3265, -8
  %3299 = add i64 %3292, 7
  store i64 %3299, i64* %3, align 8
  %3300 = inttoptr i64 %3298 to i64*
  %3301 = load i64, i64* %3300, align 8
  store i64 %3301, i64* %RCX.i3156, align 8
  %3302 = add i64 %3265, -40
  %3303 = add i64 %3292, 10
  store i64 %3303, i64* %3, align 8
  %3304 = inttoptr i64 %3302 to i32*
  %3305 = load i32, i32* %3304, align 4
  %3306 = zext i32 %3305 to i64
  store i64 %3306, i64* %RDX.i532, align 8
  %3307 = add i64 %3265, -12
  %3308 = add i64 %3292, 13
  store i64 %3308, i64* %3, align 8
  %3309 = inttoptr i64 %3307 to i32*
  %3310 = load i32, i32* %3309, align 4
  %3311 = sub i32 %3305, %3310
  %3312 = icmp ult i32 %3305, %3310
  %3313 = zext i1 %3312 to i8
  store i8 %3313, i8* %14, align 1
  %3314 = and i32 %3311, 255
  %3315 = tail call i32 @llvm.ctpop.i32(i32 %3314)
  %3316 = trunc i32 %3315 to i8
  %3317 = and i8 %3316, 1
  %3318 = xor i8 %3317, 1
  store i8 %3318, i8* %21, align 1
  %3319 = xor i32 %3310, %3305
  %3320 = xor i32 %3319, %3311
  %3321 = lshr i32 %3320, 4
  %3322 = trunc i32 %3321 to i8
  %3323 = and i8 %3322, 1
  store i8 %3323, i8* %26, align 1
  %3324 = icmp eq i32 %3311, 0
  %3325 = zext i1 %3324 to i8
  store i8 %3325, i8* %29, align 1
  %3326 = lshr i32 %3311, 31
  %3327 = trunc i32 %3326 to i8
  store i8 %3327, i8* %32, align 1
  %3328 = lshr i32 %3305, 31
  %3329 = lshr i32 %3310, 31
  %3330 = xor i32 %3329, %3328
  %3331 = xor i32 %3326, %3328
  %3332 = add nuw nsw i32 %3331, %3330
  %3333 = icmp eq i32 %3332, 2
  %3334 = zext i1 %3333 to i8
  store i8 %3334, i8* %38, align 1
  %3335 = add i64 %3265, -324
  %3336 = add i64 %3292, 19
  store i64 %3336, i64* %3, align 8
  %3337 = inttoptr i64 %3335 to i32*
  store i32 %3296, i32* %3337, align 4
  %3338 = load i64, i64* %RBP.i, align 8
  %3339 = add i64 %3338, -336
  %3340 = load i64, i64* %RCX.i3156, align 8
  %3341 = load i64, i64* %3, align 8
  %3342 = add i64 %3341, 7
  store i64 %3342, i64* %3, align 8
  %3343 = inttoptr i64 %3339 to i64*
  store i64 %3340, i64* %3343, align 8
  %3344 = load i64, i64* %3, align 8
  %3345 = load i8, i8* %32, align 1
  %3346 = icmp ne i8 %3345, 0
  %3347 = load i8, i8* %38, align 1
  %3348 = icmp ne i8 %3347, 0
  %3349 = xor i1 %3346, %3348
  %.v516 = select i1 %3349, i64 6, i64 20
  %3350 = add i64 %3344, %.v516
  store i64 %3350, i64* %3, align 8
  %3351 = load i64, i64* %RBP.i, align 8
  br i1 %3349, label %block_41b7fd, label %block_.L_41b80b

block_41b7fd:                                     ; preds = %block_41b7dd
  %3352 = add i64 %3351, -40
  %3353 = add i64 %3350, 3
  store i64 %3353, i64* %3, align 8
  %3354 = inttoptr i64 %3352 to i32*
  %3355 = load i32, i32* %3354, align 4
  %3356 = zext i32 %3355 to i64
  store i64 %3356, i64* %RAX.i82, align 8
  %3357 = add i64 %3351, -340
  %3358 = add i64 %3350, 9
  store i64 %3358, i64* %3, align 8
  %3359 = inttoptr i64 %3357 to i32*
  store i32 %3355, i32* %3359, align 4
  %3360 = load i64, i64* %3, align 8
  %3361 = add i64 %3360, 14
  store i64 %3361, i64* %3, align 8
  br label %block_.L_41b814

block_.L_41b80b:                                  ; preds = %block_41b7dd
  %3362 = add i64 %3351, -12
  %3363 = add i64 %3350, 3
  store i64 %3363, i64* %3, align 8
  %3364 = inttoptr i64 %3362 to i32*
  %3365 = load i32, i32* %3364, align 4
  %3366 = zext i32 %3365 to i64
  store i64 %3366, i64* %RAX.i82, align 8
  %3367 = add i64 %3351, -340
  %3368 = add i64 %3350, 9
  store i64 %3368, i64* %3, align 8
  %3369 = inttoptr i64 %3367 to i32*
  store i32 %3365, i32* %3369, align 4
  %.pre202 = load i64, i64* %3, align 8
  br label %block_.L_41b814

block_.L_41b814:                                  ; preds = %block_.L_41b80b, %block_41b7fd
  %3370 = phi i64 [ %.pre202, %block_.L_41b80b ], [ %3361, %block_41b7fd ]
  %3371 = load i64, i64* %RBP.i, align 8
  %3372 = add i64 %3371, -340
  %3373 = add i64 %3370, 6
  store i64 %3373, i64* %3, align 8
  %3374 = inttoptr i64 %3372 to i32*
  %3375 = load i32, i32* %3374, align 4
  %3376 = zext i32 %3375 to i64
  store i64 %3376, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i3156, align 8
  %3377 = sub i32 0, %3375
  %3378 = icmp ne i32 %3375, 0
  %3379 = zext i1 %3378 to i8
  store i8 %3379, i8* %14, align 1
  %3380 = and i32 %3377, 255
  %3381 = tail call i32 @llvm.ctpop.i32(i32 %3380)
  %3382 = trunc i32 %3381 to i8
  %3383 = and i8 %3382, 1
  %3384 = xor i8 %3383, 1
  store i8 %3384, i8* %21, align 1
  %3385 = xor i32 %3375, %3377
  %3386 = lshr i32 %3385, 4
  %3387 = trunc i32 %3386 to i8
  %3388 = and i8 %3387, 1
  store i8 %3388, i8* %26, align 1
  %3389 = icmp eq i32 %3375, 0
  %3390 = zext i1 %3389 to i8
  store i8 %3390, i8* %29, align 1
  %3391 = lshr i32 %3377, 31
  %3392 = trunc i32 %3391 to i8
  store i8 %3392, i8* %32, align 1
  %3393 = lshr i32 %3375, 31
  %3394 = add nuw nsw i32 %3391, %3393
  %3395 = icmp eq i32 %3394, 2
  %3396 = zext i1 %3395 to i8
  store i8 %3396, i8* %38, align 1
  %3397 = icmp ne i8 %3392, 0
  %3398 = xor i1 %3397, %3395
  %3399 = or i1 %3389, %3398
  %.v466 = select i1 %3399, i64 29, i64 16
  %3400 = add i64 %3370, %.v466
  store i64 %3400, i64* %3, align 8
  br i1 %3399, label %block_.L_41b831, label %block_41b824

block_41b824:                                     ; preds = %block_.L_41b814
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %3401 = add i64 %3371, -344
  %3402 = add i64 %3400, 8
  store i64 %3402, i64* %3, align 8
  %3403 = inttoptr i64 %3401 to i32*
  store i32 0, i32* %3403, align 4
  %3404 = load i64, i64* %3, align 8
  %3405 = add i64 %3404, 52
  store i64 %3405, i64* %3, align 8
  br label %block_.L_41b860

block_.L_41b831:                                  ; preds = %block_.L_41b814
  %3406 = add i64 %3371, -40
  %3407 = add i64 %3400, 3
  store i64 %3407, i64* %3, align 8
  %3408 = inttoptr i64 %3406 to i32*
  %3409 = load i32, i32* %3408, align 4
  %3410 = zext i32 %3409 to i64
  store i64 %3410, i64* %RAX.i82, align 8
  %3411 = add i64 %3371, -12
  %3412 = add i64 %3400, 6
  store i64 %3412, i64* %3, align 8
  %3413 = inttoptr i64 %3411 to i32*
  %3414 = load i32, i32* %3413, align 4
  %3415 = sub i32 %3409, %3414
  %3416 = icmp ult i32 %3409, %3414
  %3417 = zext i1 %3416 to i8
  store i8 %3417, i8* %14, align 1
  %3418 = and i32 %3415, 255
  %3419 = tail call i32 @llvm.ctpop.i32(i32 %3418)
  %3420 = trunc i32 %3419 to i8
  %3421 = and i8 %3420, 1
  %3422 = xor i8 %3421, 1
  store i8 %3422, i8* %21, align 1
  %3423 = xor i32 %3414, %3409
  %3424 = xor i32 %3423, %3415
  %3425 = lshr i32 %3424, 4
  %3426 = trunc i32 %3425 to i8
  %3427 = and i8 %3426, 1
  store i8 %3427, i8* %26, align 1
  %3428 = icmp eq i32 %3415, 0
  %3429 = zext i1 %3428 to i8
  store i8 %3429, i8* %29, align 1
  %3430 = lshr i32 %3415, 31
  %3431 = trunc i32 %3430 to i8
  store i8 %3431, i8* %32, align 1
  %3432 = lshr i32 %3409, 31
  %3433 = lshr i32 %3414, 31
  %3434 = xor i32 %3433, %3432
  %3435 = xor i32 %3430, %3432
  %3436 = add nuw nsw i32 %3435, %3434
  %3437 = icmp eq i32 %3436, 2
  %3438 = zext i1 %3437 to i8
  store i8 %3438, i8* %38, align 1
  %3439 = icmp ne i8 %3431, 0
  %3440 = xor i1 %3439, %3437
  %.v467 = select i1 %3440, i64 12, i64 26
  %3441 = add i64 %3400, %.v467
  %3442 = add i64 %3441, 3
  store i64 %3442, i64* %3, align 8
  br i1 %3440, label %block_41b83d, label %block_.L_41b84b

block_41b83d:                                     ; preds = %block_.L_41b831
  %3443 = load i32, i32* %3408, align 4
  %3444 = zext i32 %3443 to i64
  store i64 %3444, i64* %RAX.i82, align 8
  %3445 = add i64 %3371, -348
  %3446 = add i64 %3441, 9
  store i64 %3446, i64* %3, align 8
  %3447 = inttoptr i64 %3445 to i32*
  store i32 %3443, i32* %3447, align 4
  %3448 = load i64, i64* %3, align 8
  %3449 = add i64 %3448, 14
  store i64 %3449, i64* %3, align 8
  br label %block_.L_41b854

block_.L_41b84b:                                  ; preds = %block_.L_41b831
  %3450 = load i32, i32* %3413, align 4
  %3451 = zext i32 %3450 to i64
  store i64 %3451, i64* %RAX.i82, align 8
  %3452 = add i64 %3371, -348
  %3453 = add i64 %3441, 9
  store i64 %3453, i64* %3, align 8
  %3454 = inttoptr i64 %3452 to i32*
  store i32 %3450, i32* %3454, align 4
  %.pre203 = load i64, i64* %3, align 8
  br label %block_.L_41b854

block_.L_41b854:                                  ; preds = %block_.L_41b84b, %block_41b83d
  %3455 = phi i64 [ %.pre203, %block_.L_41b84b ], [ %3449, %block_41b83d ]
  %3456 = load i64, i64* %RBP.i, align 8
  %3457 = add i64 %3456, -348
  %3458 = add i64 %3455, 6
  store i64 %3458, i64* %3, align 8
  %3459 = inttoptr i64 %3457 to i32*
  %3460 = load i32, i32* %3459, align 4
  %3461 = zext i32 %3460 to i64
  store i64 %3461, i64* %RAX.i82, align 8
  %3462 = add i64 %3456, -344
  %3463 = add i64 %3455, 12
  store i64 %3463, i64* %3, align 8
  %3464 = inttoptr i64 %3462 to i32*
  store i32 %3460, i32* %3464, align 4
  %.pre204 = load i64, i64* %3, align 8
  br label %block_.L_41b860

block_.L_41b860:                                  ; preds = %block_.L_41b854, %block_41b824
  %3465 = phi i64 [ %.pre204, %block_.L_41b854 ], [ %3405, %block_41b824 ]
  %3466 = load i64, i64* %RBP.i, align 8
  %3467 = add i64 %3466, -344
  %3468 = add i64 %3465, 6
  store i64 %3468, i64* %3, align 8
  %3469 = inttoptr i64 %3467 to i32*
  %3470 = load i32, i32* %3469, align 4
  %3471 = zext i32 %3470 to i64
  store i64 %3471, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i3156, align 8
  %3472 = sext i32 %3470 to i64
  store i64 %3472, i64* %RDX.i532, align 8
  %3473 = add i64 %3466, -336
  %3474 = add i64 %3465, 21
  store i64 %3474, i64* %3, align 8
  %3475 = inttoptr i64 %3473 to i64*
  %3476 = load i64, i64* %3475, align 8
  store i64 %3476, i64* %RSI.i1183, align 8
  %3477 = shl nsw i64 %3472, 3
  %3478 = add i64 %3477, %3476
  %3479 = add i64 %3465, 25
  store i64 %3479, i64* %3, align 8
  %3480 = inttoptr i64 %3478 to i64*
  %3481 = load i64, i64* %3480, align 8
  store i64 %3481, i64* %RDX.i532, align 8
  %3482 = add i64 %3466, -56
  %3483 = add i64 %3465, 29
  store i64 %3483, i64* %3, align 8
  %3484 = inttoptr i64 %3482 to i32*
  %3485 = load i32, i32* %3484, align 4
  %3486 = sext i32 %3485 to i64
  store i64 %3486, i64* %RDI.i129, align 8
  %3487 = shl nsw i64 %3486, 1
  %3488 = add i64 %3487, %3481
  %3489 = add i64 %3465, 33
  store i64 %3489, i64* %3, align 8
  %3490 = inttoptr i64 %3488 to i16*
  %3491 = load i16, i16* %3490, align 2
  %3492 = zext i16 %3491 to i64
  store i64 %3492, i64* %RAX.i82, align 8
  %3493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3494 = add i64 %3466, -324
  %3495 = add i64 %3465, 40
  store i64 %3495, i64* %3, align 8
  %3496 = inttoptr i64 %3494 to i32*
  %3497 = load i32, i32* %3496, align 4
  %3498 = zext i16 %3491 to i32
  %3499 = add i32 %3498, %3497
  %3500 = zext i32 %3499 to i64
  store i64 %3500, i64* %3493, align 8
  %3501 = icmp ult i32 %3499, %3497
  %3502 = icmp ult i32 %3499, %3498
  %3503 = or i1 %3501, %3502
  %3504 = zext i1 %3503 to i8
  store i8 %3504, i8* %14, align 1
  %3505 = and i32 %3499, 255
  %3506 = tail call i32 @llvm.ctpop.i32(i32 %3505)
  %3507 = trunc i32 %3506 to i8
  %3508 = and i8 %3507, 1
  %3509 = xor i8 %3508, 1
  store i8 %3509, i8* %21, align 1
  %3510 = xor i32 %3498, %3497
  %3511 = xor i32 %3510, %3499
  %3512 = lshr i32 %3511, 4
  %3513 = trunc i32 %3512 to i8
  %3514 = and i8 %3513, 1
  store i8 %3514, i8* %26, align 1
  %3515 = icmp eq i32 %3499, 0
  %3516 = zext i1 %3515 to i8
  store i8 %3516, i8* %29, align 1
  %3517 = lshr i32 %3499, 31
  %3518 = trunc i32 %3517 to i8
  store i8 %3518, i8* %32, align 1
  %3519 = lshr i32 %3497, 31
  %3520 = xor i32 %3517, %3519
  %3521 = add nuw nsw i32 %3520, %3517
  %3522 = icmp eq i32 %3521, 2
  %3523 = zext i1 %3522 to i8
  store i8 %3523, i8* %38, align 1
  store i64 %3500, i64* %RAX.i82, align 8
  %3524 = sext i32 %3499 to i64
  %3525 = lshr i64 %3524, 32
  store i64 %3525, i64* %141, align 8
  %3526 = add i64 %3465, 49
  store i64 %3526, i64* %3, align 8
  %3527 = shl nuw i64 %3525, 32
  %3528 = or i64 %3527, %3500
  %3529 = sdiv i64 %3528, 2
  %3530 = shl i64 %3529, 32
  %3531 = ashr exact i64 %3530, 32
  %3532 = icmp eq i64 %3529, %3531
  br i1 %3532, label %3535, label %3533

; <label>:3533:                                   ; preds = %block_.L_41b860
  %3534 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3526, %struct.Memory* %MEMORY.34)
  %.pre205 = load i32, i32* %EAX.i1056, align 4
  %.pre206 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2691

; <label>:3535:                                   ; preds = %block_.L_41b860
  %3536 = srem i64 %3528, 2
  %3537 = and i64 %3529, 4294967295
  store i64 %3537, i64* %RAX.i82, align 8
  %3538 = and i64 %3536, 4294967295
  store i64 %3538, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %3539 = trunc i64 %3529 to i32
  br label %routine_idivl__ecx.exit2691

routine_idivl__ecx.exit2691:                      ; preds = %3535, %3533
  %3540 = phi i64 [ %.pre206, %3533 ], [ %3526, %3535 ]
  %3541 = phi i32 [ %.pre205, %3533 ], [ %3539, %3535 ]
  %3542 = phi %struct.Memory* [ %3534, %3533 ], [ %MEMORY.34, %3535 ]
  %3543 = load i64, i64* %RBP.i, align 8
  %3544 = add i64 %3543, -44
  %3545 = add i64 %3540, 3
  store i64 %3545, i64* %3, align 8
  %3546 = inttoptr i64 %3544 to i32*
  store i32 %3541, i32* %3546, align 4
  %3547 = load i64, i64* %3, align 8
  %3548 = add i64 %3547, 219
  br label %block_.L_41b96f

block_.L_41b899:                                  ; preds = %block_.L_41b7ca
  %3549 = add i64 %3292, 4
  store i64 %3549, i64* %3, align 8
  %3550 = load i32, i32* %3269, align 4
  %3551 = add i32 %3550, -3
  %3552 = icmp ult i32 %3550, 3
  %3553 = zext i1 %3552 to i8
  store i8 %3553, i8* %14, align 1
  %3554 = and i32 %3551, 255
  %3555 = tail call i32 @llvm.ctpop.i32(i32 %3554)
  %3556 = trunc i32 %3555 to i8
  %3557 = and i8 %3556, 1
  %3558 = xor i8 %3557, 1
  store i8 %3558, i8* %21, align 1
  %3559 = xor i32 %3551, %3550
  %3560 = lshr i32 %3559, 4
  %3561 = trunc i32 %3560 to i8
  %3562 = and i8 %3561, 1
  store i8 %3562, i8* %26, align 1
  %3563 = icmp eq i32 %3551, 0
  %3564 = zext i1 %3563 to i8
  store i8 %3564, i8* %29, align 1
  %3565 = lshr i32 %3551, 31
  %3566 = trunc i32 %3565 to i8
  store i8 %3566, i8* %32, align 1
  %3567 = lshr i32 %3550, 31
  %3568 = xor i32 %3565, %3567
  %3569 = add nuw nsw i32 %3568, %3567
  %3570 = icmp eq i32 %3569, 2
  %3571 = zext i1 %3570 to i8
  store i8 %3571, i8* %38, align 1
  %.v463 = select i1 %3563, i64 10, i64 209
  %3572 = add i64 %3292, %.v463
  store i64 %3572, i64* %3, align 8
  br i1 %3563, label %block_41b8a3, label %block_.L_41b96a

block_41b8a3:                                     ; preds = %block_.L_41b899
  %3573 = add i64 %3265, -44
  %3574 = add i64 %3572, 3
  store i64 %3574, i64* %3, align 8
  %3575 = inttoptr i64 %3573 to i32*
  %3576 = load i32, i32* %3575, align 4
  %3577 = zext i32 %3576 to i64
  store i64 %3577, i64* %RAX.i82, align 8
  %3578 = add i64 %3265, -8
  %3579 = add i64 %3572, 7
  store i64 %3579, i64* %3, align 8
  %3580 = inttoptr i64 %3578 to i64*
  %3581 = load i64, i64* %3580, align 8
  store i64 %3581, i64* %RCX.i3156, align 8
  %3582 = add i64 %3265, -40
  %3583 = add i64 %3572, 10
  store i64 %3583, i64* %3, align 8
  %3584 = inttoptr i64 %3582 to i32*
  %3585 = load i32, i32* %3584, align 4
  %3586 = zext i32 %3585 to i64
  store i64 %3586, i64* %RDX.i532, align 8
  %3587 = add i64 %3265, -12
  %3588 = add i64 %3572, 13
  store i64 %3588, i64* %3, align 8
  %3589 = inttoptr i64 %3587 to i32*
  %3590 = load i32, i32* %3589, align 4
  %3591 = add i32 %3590, 1
  %3592 = zext i32 %3591 to i64
  store i64 %3592, i64* %RSI.i1183, align 8
  %3593 = lshr i32 %3591, 31
  %3594 = sub i32 %3585, %3591
  %3595 = icmp ult i32 %3585, %3591
  %3596 = zext i1 %3595 to i8
  store i8 %3596, i8* %14, align 1
  %3597 = and i32 %3594, 255
  %3598 = tail call i32 @llvm.ctpop.i32(i32 %3597)
  %3599 = trunc i32 %3598 to i8
  %3600 = and i8 %3599, 1
  %3601 = xor i8 %3600, 1
  store i8 %3601, i8* %21, align 1
  %3602 = xor i32 %3591, %3585
  %3603 = xor i32 %3602, %3594
  %3604 = lshr i32 %3603, 4
  %3605 = trunc i32 %3604 to i8
  %3606 = and i8 %3605, 1
  store i8 %3606, i8* %26, align 1
  %3607 = icmp eq i32 %3594, 0
  %3608 = zext i1 %3607 to i8
  store i8 %3608, i8* %29, align 1
  %3609 = lshr i32 %3594, 31
  %3610 = trunc i32 %3609 to i8
  store i8 %3610, i8* %32, align 1
  %3611 = lshr i32 %3585, 31
  %3612 = xor i32 %3593, %3611
  %3613 = xor i32 %3609, %3611
  %3614 = add nuw nsw i32 %3613, %3612
  %3615 = icmp eq i32 %3614, 2
  %3616 = zext i1 %3615 to i8
  store i8 %3616, i8* %38, align 1
  %3617 = add i64 %3265, -352
  %3618 = add i64 %3572, 24
  store i64 %3618, i64* %3, align 8
  %3619 = inttoptr i64 %3617 to i32*
  store i32 %3576, i32* %3619, align 4
  %3620 = load i64, i64* %RBP.i, align 8
  %3621 = add i64 %3620, -360
  %3622 = load i64, i64* %RCX.i3156, align 8
  %3623 = load i64, i64* %3, align 8
  %3624 = add i64 %3623, 7
  store i64 %3624, i64* %3, align 8
  %3625 = inttoptr i64 %3621 to i64*
  store i64 %3622, i64* %3625, align 8
  %3626 = load i64, i64* %3, align 8
  %3627 = load i8, i8* %32, align 1
  %3628 = icmp ne i8 %3627, 0
  %3629 = load i8, i8* %38, align 1
  %3630 = icmp ne i8 %3629, 0
  %3631 = xor i1 %3628, %3630
  %.v515 = select i1 %3631, i64 6, i64 20
  %3632 = add i64 %3626, %.v515
  store i64 %3632, i64* %3, align 8
  %3633 = load i64, i64* %RBP.i, align 8
  br i1 %3631, label %block_41b8c8, label %block_.L_41b8d6

block_41b8c8:                                     ; preds = %block_41b8a3
  %3634 = add i64 %3633, -40
  %3635 = add i64 %3632, 3
  store i64 %3635, i64* %3, align 8
  %3636 = inttoptr i64 %3634 to i32*
  %3637 = load i32, i32* %3636, align 4
  %3638 = zext i32 %3637 to i64
  store i64 %3638, i64* %RAX.i82, align 8
  %3639 = add i64 %3633, -364
  %3640 = add i64 %3632, 9
  store i64 %3640, i64* %3, align 8
  %3641 = inttoptr i64 %3639 to i32*
  store i32 %3637, i32* %3641, align 4
  %3642 = load i64, i64* %3, align 8
  %3643 = add i64 %3642, 17
  store i64 %3643, i64* %3, align 8
  br label %block_.L_41b8e2

block_.L_41b8d6:                                  ; preds = %block_41b8a3
  %3644 = add i64 %3633, -12
  %3645 = add i64 %3632, 3
  store i64 %3645, i64* %3, align 8
  %3646 = inttoptr i64 %3644 to i32*
  %3647 = load i32, i32* %3646, align 4
  %3648 = add i32 %3647, 1
  %3649 = zext i32 %3648 to i64
  store i64 %3649, i64* %RAX.i82, align 8
  %3650 = icmp eq i32 %3647, -1
  %3651 = icmp eq i32 %3648, 0
  %3652 = or i1 %3650, %3651
  %3653 = zext i1 %3652 to i8
  store i8 %3653, i8* %14, align 1
  %3654 = and i32 %3648, 255
  %3655 = tail call i32 @llvm.ctpop.i32(i32 %3654)
  %3656 = trunc i32 %3655 to i8
  %3657 = and i8 %3656, 1
  %3658 = xor i8 %3657, 1
  store i8 %3658, i8* %21, align 1
  %3659 = xor i32 %3648, %3647
  %3660 = lshr i32 %3659, 4
  %3661 = trunc i32 %3660 to i8
  %3662 = and i8 %3661, 1
  store i8 %3662, i8* %26, align 1
  %3663 = zext i1 %3651 to i8
  store i8 %3663, i8* %29, align 1
  %3664 = lshr i32 %3648, 31
  %3665 = trunc i32 %3664 to i8
  store i8 %3665, i8* %32, align 1
  %3666 = lshr i32 %3647, 31
  %3667 = xor i32 %3664, %3666
  %3668 = add nuw nsw i32 %3667, %3664
  %3669 = icmp eq i32 %3668, 2
  %3670 = zext i1 %3669 to i8
  store i8 %3670, i8* %38, align 1
  %3671 = add i64 %3633, -364
  %3672 = add i64 %3632, 12
  store i64 %3672, i64* %3, align 8
  %3673 = inttoptr i64 %3671 to i32*
  store i32 %3648, i32* %3673, align 4
  %.pre207 = load i64, i64* %3, align 8
  br label %block_.L_41b8e2

block_.L_41b8e2:                                  ; preds = %block_.L_41b8d6, %block_41b8c8
  %3674 = phi i64 [ %.pre207, %block_.L_41b8d6 ], [ %3643, %block_41b8c8 ]
  %3675 = load i64, i64* %RBP.i, align 8
  %3676 = add i64 %3675, -364
  %3677 = add i64 %3674, 6
  store i64 %3677, i64* %3, align 8
  %3678 = inttoptr i64 %3676 to i32*
  %3679 = load i32, i32* %3678, align 4
  %3680 = zext i32 %3679 to i64
  store i64 %3680, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i3156, align 8
  %3681 = sub i32 0, %3679
  %3682 = icmp ne i32 %3679, 0
  %3683 = zext i1 %3682 to i8
  store i8 %3683, i8* %14, align 1
  %3684 = and i32 %3681, 255
  %3685 = tail call i32 @llvm.ctpop.i32(i32 %3684)
  %3686 = trunc i32 %3685 to i8
  %3687 = and i8 %3686, 1
  %3688 = xor i8 %3687, 1
  store i8 %3688, i8* %21, align 1
  %3689 = xor i32 %3679, %3681
  %3690 = lshr i32 %3689, 4
  %3691 = trunc i32 %3690 to i8
  %3692 = and i8 %3691, 1
  store i8 %3692, i8* %26, align 1
  %3693 = icmp eq i32 %3679, 0
  %3694 = zext i1 %3693 to i8
  store i8 %3694, i8* %29, align 1
  %3695 = lshr i32 %3681, 31
  %3696 = trunc i32 %3695 to i8
  store i8 %3696, i8* %32, align 1
  %3697 = lshr i32 %3679, 31
  %3698 = add nuw nsw i32 %3695, %3697
  %3699 = icmp eq i32 %3698, 2
  %3700 = zext i1 %3699 to i8
  store i8 %3700, i8* %38, align 1
  %3701 = icmp ne i8 %3696, 0
  %3702 = xor i1 %3701, %3699
  %3703 = or i1 %3693, %3702
  %.v464 = select i1 %3703, i64 29, i64 16
  %3704 = add i64 %3674, %.v464
  store i64 %3704, i64* %3, align 8
  br i1 %3703, label %block_.L_41b8ff, label %block_41b8f2

block_41b8f2:                                     ; preds = %block_.L_41b8e2
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %3705 = add i64 %3675, -368
  %3706 = add i64 %3704, 8
  store i64 %3706, i64* %3, align 8
  %3707 = inttoptr i64 %3705 to i32*
  store i32 0, i32* %3707, align 4
  %3708 = load i64, i64* %3, align 8
  %3709 = add i64 %3708, 60
  store i64 %3709, i64* %3, align 8
  br label %block_.L_41b936

block_.L_41b8ff:                                  ; preds = %block_.L_41b8e2
  %3710 = add i64 %3675, -40
  %3711 = add i64 %3704, 3
  store i64 %3711, i64* %3, align 8
  %3712 = inttoptr i64 %3710 to i32*
  %3713 = load i32, i32* %3712, align 4
  %3714 = zext i32 %3713 to i64
  store i64 %3714, i64* %RAX.i82, align 8
  %3715 = add i64 %3675, -12
  %3716 = add i64 %3704, 6
  store i64 %3716, i64* %3, align 8
  %3717 = inttoptr i64 %3715 to i32*
  %3718 = load i32, i32* %3717, align 4
  %3719 = add i32 %3718, 1
  %3720 = zext i32 %3719 to i64
  store i64 %3720, i64* %RCX.i3156, align 8
  %3721 = lshr i32 %3719, 31
  %3722 = sub i32 %3713, %3719
  %3723 = icmp ult i32 %3713, %3719
  %3724 = zext i1 %3723 to i8
  store i8 %3724, i8* %14, align 1
  %3725 = and i32 %3722, 255
  %3726 = tail call i32 @llvm.ctpop.i32(i32 %3725)
  %3727 = trunc i32 %3726 to i8
  %3728 = and i8 %3727, 1
  %3729 = xor i8 %3728, 1
  store i8 %3729, i8* %21, align 1
  %3730 = xor i32 %3719, %3713
  %3731 = xor i32 %3730, %3722
  %3732 = lshr i32 %3731, 4
  %3733 = trunc i32 %3732 to i8
  %3734 = and i8 %3733, 1
  store i8 %3734, i8* %26, align 1
  %3735 = icmp eq i32 %3722, 0
  %3736 = zext i1 %3735 to i8
  store i8 %3736, i8* %29, align 1
  %3737 = lshr i32 %3722, 31
  %3738 = trunc i32 %3737 to i8
  store i8 %3738, i8* %32, align 1
  %3739 = lshr i32 %3713, 31
  %3740 = xor i32 %3721, %3739
  %3741 = xor i32 %3737, %3739
  %3742 = add nuw nsw i32 %3741, %3740
  %3743 = icmp eq i32 %3742, 2
  %3744 = zext i1 %3743 to i8
  store i8 %3744, i8* %38, align 1
  %3745 = icmp ne i8 %3738, 0
  %3746 = xor i1 %3745, %3743
  %.v465 = select i1 %3746, i64 17, i64 31
  %3747 = add i64 %3704, %.v465
  %3748 = add i64 %3747, 3
  store i64 %3748, i64* %3, align 8
  br i1 %3746, label %block_41b910, label %block_.L_41b91e

block_41b910:                                     ; preds = %block_.L_41b8ff
  %3749 = load i32, i32* %3712, align 4
  %3750 = zext i32 %3749 to i64
  store i64 %3750, i64* %RAX.i82, align 8
  %3751 = add i64 %3675, -372
  %3752 = add i64 %3747, 9
  store i64 %3752, i64* %3, align 8
  %3753 = inttoptr i64 %3751 to i32*
  store i32 %3749, i32* %3753, align 4
  %3754 = load i64, i64* %3, align 8
  %3755 = add i64 %3754, 17
  store i64 %3755, i64* %3, align 8
  br label %block_.L_41b92a

block_.L_41b91e:                                  ; preds = %block_.L_41b8ff
  %3756 = load i32, i32* %3717, align 4
  %3757 = add i32 %3756, 1
  %3758 = zext i32 %3757 to i64
  store i64 %3758, i64* %RAX.i82, align 8
  %3759 = icmp eq i32 %3756, -1
  %3760 = icmp eq i32 %3757, 0
  %3761 = or i1 %3759, %3760
  %3762 = zext i1 %3761 to i8
  store i8 %3762, i8* %14, align 1
  %3763 = and i32 %3757, 255
  %3764 = tail call i32 @llvm.ctpop.i32(i32 %3763)
  %3765 = trunc i32 %3764 to i8
  %3766 = and i8 %3765, 1
  %3767 = xor i8 %3766, 1
  store i8 %3767, i8* %21, align 1
  %3768 = xor i32 %3757, %3756
  %3769 = lshr i32 %3768, 4
  %3770 = trunc i32 %3769 to i8
  %3771 = and i8 %3770, 1
  store i8 %3771, i8* %26, align 1
  %3772 = zext i1 %3760 to i8
  store i8 %3772, i8* %29, align 1
  %3773 = lshr i32 %3757, 31
  %3774 = trunc i32 %3773 to i8
  store i8 %3774, i8* %32, align 1
  %3775 = lshr i32 %3756, 31
  %3776 = xor i32 %3773, %3775
  %3777 = add nuw nsw i32 %3776, %3773
  %3778 = icmp eq i32 %3777, 2
  %3779 = zext i1 %3778 to i8
  store i8 %3779, i8* %38, align 1
  %3780 = add i64 %3675, -372
  %3781 = add i64 %3747, 12
  store i64 %3781, i64* %3, align 8
  %3782 = inttoptr i64 %3780 to i32*
  store i32 %3757, i32* %3782, align 4
  %.pre208 = load i64, i64* %3, align 8
  br label %block_.L_41b92a

block_.L_41b92a:                                  ; preds = %block_.L_41b91e, %block_41b910
  %3783 = phi i64 [ %.pre208, %block_.L_41b91e ], [ %3755, %block_41b910 ]
  %3784 = load i64, i64* %RBP.i, align 8
  %3785 = add i64 %3784, -372
  %3786 = add i64 %3783, 6
  store i64 %3786, i64* %3, align 8
  %3787 = inttoptr i64 %3785 to i32*
  %3788 = load i32, i32* %3787, align 4
  %3789 = zext i32 %3788 to i64
  store i64 %3789, i64* %RAX.i82, align 8
  %3790 = add i64 %3784, -368
  %3791 = add i64 %3783, 12
  store i64 %3791, i64* %3, align 8
  %3792 = inttoptr i64 %3790 to i32*
  store i32 %3788, i32* %3792, align 4
  %.pre209 = load i64, i64* %3, align 8
  br label %block_.L_41b936

block_.L_41b936:                                  ; preds = %block_.L_41b92a, %block_41b8f2
  %3793 = phi i64 [ %.pre209, %block_.L_41b92a ], [ %3709, %block_41b8f2 ]
  %3794 = load i64, i64* %RBP.i, align 8
  %3795 = add i64 %3794, -368
  %3796 = add i64 %3793, 6
  store i64 %3796, i64* %3, align 8
  %3797 = inttoptr i64 %3795 to i32*
  %3798 = load i32, i32* %3797, align 4
  %3799 = zext i32 %3798 to i64
  store i64 %3799, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i3156, align 8
  %3800 = sext i32 %3798 to i64
  store i64 %3800, i64* %RDX.i532, align 8
  %3801 = add i64 %3794, -360
  %3802 = add i64 %3793, 21
  store i64 %3802, i64* %3, align 8
  %3803 = inttoptr i64 %3801 to i64*
  %3804 = load i64, i64* %3803, align 8
  store i64 %3804, i64* %RSI.i1183, align 8
  %3805 = shl nsw i64 %3800, 3
  %3806 = add i64 %3805, %3804
  %3807 = add i64 %3793, 25
  store i64 %3807, i64* %3, align 8
  %3808 = inttoptr i64 %3806 to i64*
  %3809 = load i64, i64* %3808, align 8
  store i64 %3809, i64* %RDX.i532, align 8
  %3810 = add i64 %3794, -56
  %3811 = add i64 %3793, 29
  store i64 %3811, i64* %3, align 8
  %3812 = inttoptr i64 %3810 to i32*
  %3813 = load i32, i32* %3812, align 4
  %3814 = sext i32 %3813 to i64
  store i64 %3814, i64* %RDI.i129, align 8
  %3815 = shl nsw i64 %3814, 1
  %3816 = add i64 %3815, %3809
  %3817 = add i64 %3793, 33
  store i64 %3817, i64* %3, align 8
  %3818 = inttoptr i64 %3816 to i16*
  %3819 = load i16, i16* %3818, align 2
  %3820 = zext i16 %3819 to i64
  store i64 %3820, i64* %RAX.i82, align 8
  %3821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3822 = add i64 %3794, -352
  %3823 = add i64 %3793, 40
  store i64 %3823, i64* %3, align 8
  %3824 = inttoptr i64 %3822 to i32*
  %3825 = load i32, i32* %3824, align 4
  %3826 = zext i16 %3819 to i32
  %3827 = add i32 %3826, %3825
  %3828 = zext i32 %3827 to i64
  store i64 %3828, i64* %3821, align 8
  %3829 = icmp ult i32 %3827, %3825
  %3830 = icmp ult i32 %3827, %3826
  %3831 = or i1 %3829, %3830
  %3832 = zext i1 %3831 to i8
  store i8 %3832, i8* %14, align 1
  %3833 = and i32 %3827, 255
  %3834 = tail call i32 @llvm.ctpop.i32(i32 %3833)
  %3835 = trunc i32 %3834 to i8
  %3836 = and i8 %3835, 1
  %3837 = xor i8 %3836, 1
  store i8 %3837, i8* %21, align 1
  %3838 = xor i32 %3826, %3825
  %3839 = xor i32 %3838, %3827
  %3840 = lshr i32 %3839, 4
  %3841 = trunc i32 %3840 to i8
  %3842 = and i8 %3841, 1
  store i8 %3842, i8* %26, align 1
  %3843 = icmp eq i32 %3827, 0
  %3844 = zext i1 %3843 to i8
  store i8 %3844, i8* %29, align 1
  %3845 = lshr i32 %3827, 31
  %3846 = trunc i32 %3845 to i8
  store i8 %3846, i8* %32, align 1
  %3847 = lshr i32 %3825, 31
  %3848 = xor i32 %3845, %3847
  %3849 = add nuw nsw i32 %3848, %3845
  %3850 = icmp eq i32 %3849, 2
  %3851 = zext i1 %3850 to i8
  store i8 %3851, i8* %38, align 1
  store i64 %3828, i64* %RAX.i82, align 8
  %3852 = sext i32 %3827 to i64
  %3853 = lshr i64 %3852, 32
  store i64 %3853, i64* %141, align 8
  %3854 = add i64 %3793, 49
  store i64 %3854, i64* %3, align 8
  %3855 = shl nuw i64 %3853, 32
  %3856 = or i64 %3855, %3828
  %3857 = sdiv i64 %3856, 2
  %3858 = shl i64 %3857, 32
  %3859 = ashr exact i64 %3858, 32
  %3860 = icmp eq i64 %3857, %3859
  br i1 %3860, label %3863, label %3861

; <label>:3861:                                   ; preds = %block_.L_41b936
  %3862 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3854, %struct.Memory* %MEMORY.34)
  %.pre210 = load i32, i32* %EAX.i1056, align 4
  %.pre211 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2559

; <label>:3863:                                   ; preds = %block_.L_41b936
  %3864 = srem i64 %3856, 2
  %3865 = and i64 %3857, 4294967295
  store i64 %3865, i64* %RAX.i82, align 8
  %3866 = and i64 %3864, 4294967295
  store i64 %3866, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %3867 = trunc i64 %3857 to i32
  br label %routine_idivl__ecx.exit2559

routine_idivl__ecx.exit2559:                      ; preds = %3863, %3861
  %3868 = phi i64 [ %.pre211, %3861 ], [ %3854, %3863 ]
  %3869 = phi i32 [ %.pre210, %3861 ], [ %3867, %3863 ]
  %3870 = phi %struct.Memory* [ %3862, %3861 ], [ %MEMORY.34, %3863 ]
  %3871 = load i64, i64* %RBP.i, align 8
  %3872 = add i64 %3871, -44
  %3873 = add i64 %3868, 3
  store i64 %3873, i64* %3, align 8
  %3874 = inttoptr i64 %3872 to i32*
  store i32 %3869, i32* %3874, align 4
  %.pre212 = load i64, i64* %3, align 8
  br label %block_.L_41b96a

block_.L_41b96a:                                  ; preds = %block_.L_41b899, %routine_idivl__ecx.exit2559
  %3875 = phi i64 [ %3572, %block_.L_41b899 ], [ %.pre212, %routine_idivl__ecx.exit2559 ]
  %MEMORY.41 = phi %struct.Memory* [ %MEMORY.34, %block_.L_41b899 ], [ %3870, %routine_idivl__ecx.exit2559 ]
  %3876 = add i64 %3875, 5
  store i64 %3876, i64* %3, align 8
  br label %block_.L_41b96f

block_.L_41b96f:                                  ; preds = %block_.L_41b96a, %routine_idivl__ecx.exit2691
  %storemerge111 = phi i64 [ %3548, %routine_idivl__ecx.exit2691 ], [ %3876, %block_.L_41b96a ]
  %MEMORY.42 = phi %struct.Memory* [ %3542, %routine_idivl__ecx.exit2691 ], [ %MEMORY.41, %block_.L_41b96a ]
  %3877 = add i64 %storemerge111, 4239
  br label %block_.L_41c9fe

block_.L_41b974:                                  ; preds = %block_.L_41b55b
  %3878 = add i64 %2294, 4
  store i64 %3878, i64* %3, align 8
  %3879 = load i32, i32* %301, align 4
  %3880 = add i32 %3879, -2
  %3881 = icmp ult i32 %3879, 2
  %3882 = zext i1 %3881 to i8
  store i8 %3882, i8* %14, align 1
  %3883 = and i32 %3880, 255
  %3884 = tail call i32 @llvm.ctpop.i32(i32 %3883)
  %3885 = trunc i32 %3884 to i8
  %3886 = and i8 %3885, 1
  %3887 = xor i8 %3886, 1
  store i8 %3887, i8* %21, align 1
  %3888 = xor i32 %3880, %3879
  %3889 = lshr i32 %3888, 4
  %3890 = trunc i32 %3889 to i8
  %3891 = and i8 %3890, 1
  store i8 %3891, i8* %26, align 1
  %3892 = icmp eq i32 %3880, 0
  %3893 = zext i1 %3892 to i8
  store i8 %3893, i8* %29, align 1
  %3894 = lshr i32 %3880, 31
  %3895 = trunc i32 %3894 to i8
  store i8 %3895, i8* %32, align 1
  %3896 = lshr i32 %3879, 31
  %3897 = xor i32 %3894, %3896
  %3898 = add nuw nsw i32 %3897, %3896
  %3899 = icmp eq i32 %3898, 2
  %3900 = zext i1 %3899 to i8
  store i8 %3900, i8* %38, align 1
  %.v402 = select i1 %3892, i64 10, i64 1437
  %3901 = add i64 %2294, %.v402
  store i64 %3901, i64* %3, align 8
  br i1 %3892, label %block_41b97e, label %block_.L_41bf11

block_41b97e:                                     ; preds = %block_.L_41b974
  %3902 = add i64 %297, -32
  %3903 = add i64 %3901, 7
  store i64 %3903, i64* %3, align 8
  %3904 = inttoptr i64 %3902 to i32*
  store i32 -2, i32* %3904, align 4
  %3905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i2537 = getelementptr inbounds %union.anon, %union.anon* %3905, i64 0, i32 0
  %ECX.i2532 = bitcast %union.anon* %3905 to i32*
  %.pre216 = load i64, i64* %3, align 8
  br label %block_.L_41b985

block_.L_41b985:                                  ; preds = %block_.L_41baf0, %block_41b97e
  %3906 = phi i64 [ %4634, %block_.L_41baf0 ], [ %.pre216, %block_41b97e ]
  %3907 = load i64, i64* %RBP.i, align 8
  %3908 = add i64 %3907, -32
  %3909 = add i64 %3906, 4
  store i64 %3909, i64* %3, align 8
  %3910 = inttoptr i64 %3908 to i32*
  %3911 = load i32, i32* %3910, align 4
  %3912 = add i32 %3911, -4
  %3913 = icmp ult i32 %3911, 4
  %3914 = zext i1 %3913 to i8
  store i8 %3914, i8* %14, align 1
  %3915 = and i32 %3912, 255
  %3916 = tail call i32 @llvm.ctpop.i32(i32 %3915)
  %3917 = trunc i32 %3916 to i8
  %3918 = and i8 %3917, 1
  %3919 = xor i8 %3918, 1
  store i8 %3919, i8* %21, align 1
  %3920 = xor i32 %3912, %3911
  %3921 = lshr i32 %3920, 4
  %3922 = trunc i32 %3921 to i8
  %3923 = and i8 %3922, 1
  store i8 %3923, i8* %26, align 1
  %3924 = icmp eq i32 %3912, 0
  %3925 = zext i1 %3924 to i8
  store i8 %3925, i8* %29, align 1
  %3926 = lshr i32 %3912, 31
  %3927 = trunc i32 %3926 to i8
  store i8 %3927, i8* %32, align 1
  %3928 = lshr i32 %3911, 31
  %3929 = xor i32 %3926, %3928
  %3930 = add nuw nsw i32 %3929, %3928
  %3931 = icmp eq i32 %3930, 2
  %3932 = zext i1 %3931 to i8
  store i8 %3932, i8* %38, align 1
  %3933 = icmp ne i8 %3927, 0
  %3934 = xor i1 %3933, %3931
  %.v = select i1 %3934, i64 10, i64 393
  %3935 = add i64 %3906, %.v
  %3936 = add i64 %3907, -44
  %3937 = add i64 %3935, 7
  store i64 %3937, i64* %3, align 8
  %3938 = inttoptr i64 %3936 to i32*
  store i32 0, i32* %3938, align 4
  %3939 = load i64, i64* %RBP.i, align 8
  br i1 %3934, label %block_41b98f, label %block_.L_41bb0e

block_41b98f:                                     ; preds = %block_.L_41b985
  %3940 = add i64 %3939, -40
  %3941 = load i64, i64* %3, align 8
  %3942 = add i64 %3941, 3
  store i64 %3942, i64* %3, align 8
  %3943 = inttoptr i64 %3940 to i32*
  %3944 = load i32, i32* %3943, align 4
  %3945 = zext i32 %3944 to i64
  store i64 %3945, i64* %RAX.i82, align 8
  %3946 = add i64 %3939, -12
  %3947 = add i64 %3941, 6
  store i64 %3947, i64* %3, align 8
  %3948 = inttoptr i64 %3946 to i32*
  %3949 = load i32, i32* %3948, align 4
  %3950 = zext i32 %3949 to i64
  store i64 %3950, i64* %RCX.i2537, align 8
  %3951 = add i64 %3939, -32
  %3952 = add i64 %3941, 9
  store i64 %3952, i64* %3, align 8
  %3953 = inttoptr i64 %3951 to i32*
  %3954 = load i32, i32* %3953, align 4
  %3955 = add i32 %3954, %3949
  %3956 = zext i32 %3955 to i64
  store i64 %3956, i64* %RCX.i2537, align 8
  %3957 = lshr i32 %3955, 31
  %3958 = sub i32 %3944, %3955
  %3959 = icmp ult i32 %3944, %3955
  %3960 = zext i1 %3959 to i8
  store i8 %3960, i8* %14, align 1
  %3961 = and i32 %3958, 255
  %3962 = tail call i32 @llvm.ctpop.i32(i32 %3961)
  %3963 = trunc i32 %3962 to i8
  %3964 = and i8 %3963, 1
  %3965 = xor i8 %3964, 1
  store i8 %3965, i8* %21, align 1
  %3966 = xor i32 %3955, %3944
  %3967 = xor i32 %3966, %3958
  %3968 = lshr i32 %3967, 4
  %3969 = trunc i32 %3968 to i8
  %3970 = and i8 %3969, 1
  store i8 %3970, i8* %26, align 1
  %3971 = icmp eq i32 %3958, 0
  %3972 = zext i1 %3971 to i8
  store i8 %3972, i8* %29, align 1
  %3973 = lshr i32 %3958, 31
  %3974 = trunc i32 %3973 to i8
  store i8 %3974, i8* %32, align 1
  %3975 = lshr i32 %3944, 31
  %3976 = xor i32 %3957, %3975
  %3977 = xor i32 %3973, %3975
  %3978 = add nuw nsw i32 %3977, %3976
  %3979 = icmp eq i32 %3978, 2
  %3980 = zext i1 %3979 to i8
  store i8 %3980, i8* %38, align 1
  %3981 = icmp ne i8 %3974, 0
  %3982 = xor i1 %3981, %3979
  %.v450 = select i1 %3982, i64 17, i64 31
  %3983 = add i64 %3941, %.v450
  %3984 = add i64 %3983, 3
  store i64 %3984, i64* %3, align 8
  br i1 %3982, label %block_41b9a7, label %block_.L_41b9b5

block_41b9a7:                                     ; preds = %block_41b98f
  %3985 = load i32, i32* %3943, align 4
  %3986 = zext i32 %3985 to i64
  store i64 %3986, i64* %RAX.i82, align 8
  %3987 = add i64 %3939, -376
  %3988 = add i64 %3983, 9
  store i64 %3988, i64* %3, align 8
  %3989 = inttoptr i64 %3987 to i32*
  store i32 %3985, i32* %3989, align 4
  %3990 = load i64, i64* %3, align 8
  %3991 = add i64 %3990, 17
  store i64 %3991, i64* %3, align 8
  br label %block_.L_41b9c1

block_.L_41b9b5:                                  ; preds = %block_41b98f
  %3992 = load i32, i32* %3948, align 4
  %3993 = zext i32 %3992 to i64
  store i64 %3993, i64* %RAX.i82, align 8
  %3994 = add i64 %3983, 6
  store i64 %3994, i64* %3, align 8
  %3995 = load i32, i32* %3953, align 4
  %3996 = add i32 %3995, %3992
  %3997 = zext i32 %3996 to i64
  store i64 %3997, i64* %RAX.i82, align 8
  %3998 = icmp ult i32 %3996, %3992
  %3999 = icmp ult i32 %3996, %3995
  %4000 = or i1 %3998, %3999
  %4001 = zext i1 %4000 to i8
  store i8 %4001, i8* %14, align 1
  %4002 = and i32 %3996, 255
  %4003 = tail call i32 @llvm.ctpop.i32(i32 %4002)
  %4004 = trunc i32 %4003 to i8
  %4005 = and i8 %4004, 1
  %4006 = xor i8 %4005, 1
  store i8 %4006, i8* %21, align 1
  %4007 = xor i32 %3995, %3992
  %4008 = xor i32 %4007, %3996
  %4009 = lshr i32 %4008, 4
  %4010 = trunc i32 %4009 to i8
  %4011 = and i8 %4010, 1
  store i8 %4011, i8* %26, align 1
  %4012 = icmp eq i32 %3996, 0
  %4013 = zext i1 %4012 to i8
  store i8 %4013, i8* %29, align 1
  %4014 = lshr i32 %3996, 31
  %4015 = trunc i32 %4014 to i8
  store i8 %4015, i8* %32, align 1
  %4016 = lshr i32 %3992, 31
  %4017 = lshr i32 %3995, 31
  %4018 = xor i32 %4014, %4016
  %4019 = xor i32 %4014, %4017
  %4020 = add nuw nsw i32 %4018, %4019
  %4021 = icmp eq i32 %4020, 2
  %4022 = zext i1 %4021 to i8
  store i8 %4022, i8* %38, align 1
  %4023 = add i64 %3939, -376
  %4024 = add i64 %3983, 12
  store i64 %4024, i64* %3, align 8
  %4025 = inttoptr i64 %4023 to i32*
  store i32 %3996, i32* %4025, align 4
  %.pre270 = load i64, i64* %3, align 8
  br label %block_.L_41b9c1

block_.L_41b9c1:                                  ; preds = %block_.L_41b9b5, %block_41b9a7
  %4026 = phi i64 [ %.pre270, %block_.L_41b9b5 ], [ %3991, %block_41b9a7 ]
  %4027 = load i64, i64* %RBP.i, align 8
  %4028 = add i64 %4027, -376
  %4029 = add i64 %4026, 6
  store i64 %4029, i64* %3, align 8
  %4030 = inttoptr i64 %4028 to i32*
  %4031 = load i32, i32* %4030, align 4
  %4032 = zext i32 %4031 to i64
  store i64 %4032, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i2537, align 8
  %4033 = sub i32 0, %4031
  %4034 = icmp ne i32 %4031, 0
  %4035 = zext i1 %4034 to i8
  store i8 %4035, i8* %14, align 1
  %4036 = and i32 %4033, 255
  %4037 = tail call i32 @llvm.ctpop.i32(i32 %4036)
  %4038 = trunc i32 %4037 to i8
  %4039 = and i8 %4038, 1
  %4040 = xor i8 %4039, 1
  store i8 %4040, i8* %21, align 1
  %4041 = xor i32 %4031, %4033
  %4042 = lshr i32 %4041, 4
  %4043 = trunc i32 %4042 to i8
  %4044 = and i8 %4043, 1
  store i8 %4044, i8* %26, align 1
  %4045 = icmp eq i32 %4031, 0
  %4046 = zext i1 %4045 to i8
  store i8 %4046, i8* %29, align 1
  %4047 = lshr i32 %4033, 31
  %4048 = trunc i32 %4047 to i8
  store i8 %4048, i8* %32, align 1
  %4049 = lshr i32 %4031, 31
  %4050 = add nuw nsw i32 %4047, %4049
  %4051 = icmp eq i32 %4050, 2
  %4052 = zext i1 %4051 to i8
  store i8 %4052, i8* %38, align 1
  %4053 = icmp ne i8 %4048, 0
  %4054 = xor i1 %4053, %4051
  %4055 = or i1 %4045, %4054
  %.v451 = select i1 %4055, i64 29, i64 16
  %4056 = add i64 %4026, %.v451
  store i64 %4056, i64* %3, align 8
  br i1 %4055, label %block_.L_41b9de, label %block_41b9d1

block_41b9d1:                                     ; preds = %block_.L_41b9c1
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %4057 = add i64 %4027, -380
  %4058 = add i64 %4056, 8
  store i64 %4058, i64* %3, align 8
  %4059 = inttoptr i64 %4057 to i32*
  store i32 0, i32* %4059, align 4
  %4060 = load i64, i64* %3, align 8
  %4061 = add i64 %4060, 60
  store i64 %4061, i64* %3, align 8
  br label %block_.L_41ba15

block_.L_41b9de:                                  ; preds = %block_.L_41b9c1
  %4062 = add i64 %4027, -40
  %4063 = add i64 %4056, 3
  store i64 %4063, i64* %3, align 8
  %4064 = inttoptr i64 %4062 to i32*
  %4065 = load i32, i32* %4064, align 4
  %4066 = zext i32 %4065 to i64
  store i64 %4066, i64* %RAX.i82, align 8
  %4067 = add i64 %4027, -12
  %4068 = add i64 %4056, 6
  store i64 %4068, i64* %3, align 8
  %4069 = inttoptr i64 %4067 to i32*
  %4070 = load i32, i32* %4069, align 4
  %4071 = zext i32 %4070 to i64
  store i64 %4071, i64* %RCX.i2537, align 8
  %4072 = add i64 %4027, -32
  %4073 = add i64 %4056, 9
  store i64 %4073, i64* %3, align 8
  %4074 = inttoptr i64 %4072 to i32*
  %4075 = load i32, i32* %4074, align 4
  %4076 = add i32 %4075, %4070
  %4077 = zext i32 %4076 to i64
  store i64 %4077, i64* %RCX.i2537, align 8
  %4078 = lshr i32 %4076, 31
  %4079 = sub i32 %4065, %4076
  %4080 = icmp ult i32 %4065, %4076
  %4081 = zext i1 %4080 to i8
  store i8 %4081, i8* %14, align 1
  %4082 = and i32 %4079, 255
  %4083 = tail call i32 @llvm.ctpop.i32(i32 %4082)
  %4084 = trunc i32 %4083 to i8
  %4085 = and i8 %4084, 1
  %4086 = xor i8 %4085, 1
  store i8 %4086, i8* %21, align 1
  %4087 = xor i32 %4076, %4065
  %4088 = xor i32 %4087, %4079
  %4089 = lshr i32 %4088, 4
  %4090 = trunc i32 %4089 to i8
  %4091 = and i8 %4090, 1
  store i8 %4091, i8* %26, align 1
  %4092 = icmp eq i32 %4079, 0
  %4093 = zext i1 %4092 to i8
  store i8 %4093, i8* %29, align 1
  %4094 = lshr i32 %4079, 31
  %4095 = trunc i32 %4094 to i8
  store i8 %4095, i8* %32, align 1
  %4096 = lshr i32 %4065, 31
  %4097 = xor i32 %4078, %4096
  %4098 = xor i32 %4094, %4096
  %4099 = add nuw nsw i32 %4098, %4097
  %4100 = icmp eq i32 %4099, 2
  %4101 = zext i1 %4100 to i8
  store i8 %4101, i8* %38, align 1
  %4102 = icmp ne i8 %4095, 0
  %4103 = xor i1 %4102, %4100
  %.v456 = select i1 %4103, i64 17, i64 31
  %4104 = add i64 %4056, %.v456
  %4105 = add i64 %4104, 3
  store i64 %4105, i64* %3, align 8
  br i1 %4103, label %block_41b9ef, label %block_.L_41b9fd

block_41b9ef:                                     ; preds = %block_.L_41b9de
  %4106 = load i32, i32* %4064, align 4
  %4107 = zext i32 %4106 to i64
  store i64 %4107, i64* %RAX.i82, align 8
  %4108 = add i64 %4027, -384
  %4109 = add i64 %4104, 9
  store i64 %4109, i64* %3, align 8
  %4110 = inttoptr i64 %4108 to i32*
  store i32 %4106, i32* %4110, align 4
  %4111 = load i64, i64* %3, align 8
  %4112 = add i64 %4111, 17
  store i64 %4112, i64* %3, align 8
  br label %block_.L_41ba09

block_.L_41b9fd:                                  ; preds = %block_.L_41b9de
  %4113 = load i32, i32* %4069, align 4
  %4114 = zext i32 %4113 to i64
  store i64 %4114, i64* %RAX.i82, align 8
  %4115 = add i64 %4104, 6
  store i64 %4115, i64* %3, align 8
  %4116 = load i32, i32* %4074, align 4
  %4117 = add i32 %4116, %4113
  %4118 = zext i32 %4117 to i64
  store i64 %4118, i64* %RAX.i82, align 8
  %4119 = icmp ult i32 %4117, %4113
  %4120 = icmp ult i32 %4117, %4116
  %4121 = or i1 %4119, %4120
  %4122 = zext i1 %4121 to i8
  store i8 %4122, i8* %14, align 1
  %4123 = and i32 %4117, 255
  %4124 = tail call i32 @llvm.ctpop.i32(i32 %4123)
  %4125 = trunc i32 %4124 to i8
  %4126 = and i8 %4125, 1
  %4127 = xor i8 %4126, 1
  store i8 %4127, i8* %21, align 1
  %4128 = xor i32 %4116, %4113
  %4129 = xor i32 %4128, %4117
  %4130 = lshr i32 %4129, 4
  %4131 = trunc i32 %4130 to i8
  %4132 = and i8 %4131, 1
  store i8 %4132, i8* %26, align 1
  %4133 = icmp eq i32 %4117, 0
  %4134 = zext i1 %4133 to i8
  store i8 %4134, i8* %29, align 1
  %4135 = lshr i32 %4117, 31
  %4136 = trunc i32 %4135 to i8
  store i8 %4136, i8* %32, align 1
  %4137 = lshr i32 %4113, 31
  %4138 = lshr i32 %4116, 31
  %4139 = xor i32 %4135, %4137
  %4140 = xor i32 %4135, %4138
  %4141 = add nuw nsw i32 %4139, %4140
  %4142 = icmp eq i32 %4141, 2
  %4143 = zext i1 %4142 to i8
  store i8 %4143, i8* %38, align 1
  %4144 = add i64 %4027, -384
  %4145 = add i64 %4104, 12
  store i64 %4145, i64* %3, align 8
  %4146 = inttoptr i64 %4144 to i32*
  store i32 %4117, i32* %4146, align 4
  %.pre271 = load i64, i64* %3, align 8
  br label %block_.L_41ba09

block_.L_41ba09:                                  ; preds = %block_.L_41b9fd, %block_41b9ef
  %4147 = phi i64 [ %.pre271, %block_.L_41b9fd ], [ %4112, %block_41b9ef ]
  %4148 = load i64, i64* %RBP.i, align 8
  %4149 = add i64 %4148, -384
  %4150 = add i64 %4147, 6
  store i64 %4150, i64* %3, align 8
  %4151 = inttoptr i64 %4149 to i32*
  %4152 = load i32, i32* %4151, align 4
  %4153 = zext i32 %4152 to i64
  store i64 %4153, i64* %RAX.i82, align 8
  %4154 = add i64 %4148, -380
  %4155 = add i64 %4147, 12
  store i64 %4155, i64* %3, align 8
  %4156 = inttoptr i64 %4154 to i32*
  store i32 %4152, i32* %4156, align 4
  %.pre272 = load i64, i64* %3, align 8
  br label %block_.L_41ba15

block_.L_41ba15:                                  ; preds = %block_.L_41ba09, %block_41b9d1
  %4157 = phi i64 [ %.pre272, %block_.L_41ba09 ], [ %4061, %block_41b9d1 ]
  %4158 = load i64, i64* %RBP.i, align 8
  %4159 = add i64 %4158, -380
  %4160 = add i64 %4157, 6
  store i64 %4160, i64* %3, align 8
  %4161 = inttoptr i64 %4159 to i32*
  %4162 = load i32, i32* %4161, align 4
  %4163 = zext i32 %4162 to i64
  store i64 %4163, i64* %RAX.i82, align 8
  %4164 = add i64 %4158, -60
  %4165 = add i64 %4157, 9
  store i64 %4165, i64* %3, align 8
  %4166 = inttoptr i64 %4164 to i32*
  store i32 %4162, i32* %4166, align 4
  %4167 = load i64, i64* %RBP.i, align 8
  %4168 = add i64 %4167, -24
  %4169 = load i64, i64* %3, align 8
  %4170 = add i64 %4169, 7
  store i64 %4170, i64* %3, align 8
  %4171 = inttoptr i64 %4168 to i32*
  store i32 -2, i32* %4171, align 4
  %.pre273 = load i64, i64* %3, align 8
  br label %block_.L_41ba25

block_.L_41ba25:                                  ; preds = %block_.L_41baae, %block_.L_41ba15
  %4172 = phi i64 [ %4565, %block_.L_41baae ], [ %.pre273, %block_.L_41ba15 ]
  %4173 = load i64, i64* %RBP.i, align 8
  %4174 = add i64 %4173, -24
  %4175 = add i64 %4172, 4
  store i64 %4175, i64* %3, align 8
  %4176 = inttoptr i64 %4174 to i32*
  %4177 = load i32, i32* %4176, align 4
  %4178 = add i32 %4177, -4
  %4179 = icmp ult i32 %4177, 4
  %4180 = zext i1 %4179 to i8
  store i8 %4180, i8* %14, align 1
  %4181 = and i32 %4178, 255
  %4182 = tail call i32 @llvm.ctpop.i32(i32 %4181)
  %4183 = trunc i32 %4182 to i8
  %4184 = and i8 %4183, 1
  %4185 = xor i8 %4184, 1
  store i8 %4185, i8* %21, align 1
  %4186 = xor i32 %4178, %4177
  %4187 = lshr i32 %4186, 4
  %4188 = trunc i32 %4187 to i8
  %4189 = and i8 %4188, 1
  store i8 %4189, i8* %26, align 1
  %4190 = icmp eq i32 %4178, 0
  %4191 = zext i1 %4190 to i8
  store i8 %4191, i8* %29, align 1
  %4192 = lshr i32 %4178, 31
  %4193 = trunc i32 %4192 to i8
  store i8 %4193, i8* %32, align 1
  %4194 = lshr i32 %4177, 31
  %4195 = xor i32 %4192, %4194
  %4196 = add nuw nsw i32 %4195, %4194
  %4197 = icmp eq i32 %4196, 2
  %4198 = zext i1 %4197 to i8
  store i8 %4198, i8* %38, align 1
  %4199 = icmp ne i8 %4193, 0
  %4200 = xor i1 %4199, %4197
  %.v452 = select i1 %4200, i64 10, i64 203
  %4201 = add i64 %4172, %.v452
  store i64 %4201, i64* %3, align 8
  br i1 %4200, label %block_41ba2f, label %block_.L_41baf0

block_41ba2f:                                     ; preds = %block_.L_41ba25
  %4202 = add i64 %4173, -36
  %4203 = add i64 %4201, 3
  store i64 %4203, i64* %3, align 8
  %4204 = inttoptr i64 %4202 to i32*
  %4205 = load i32, i32* %4204, align 4
  %4206 = zext i32 %4205 to i64
  store i64 %4206, i64* %RAX.i82, align 8
  %4207 = add i64 %4173, -16
  %4208 = add i64 %4201, 6
  store i64 %4208, i64* %3, align 8
  %4209 = inttoptr i64 %4207 to i32*
  %4210 = load i32, i32* %4209, align 4
  %4211 = zext i32 %4210 to i64
  store i64 %4211, i64* %RCX.i2537, align 8
  %4212 = add i64 %4201, 9
  store i64 %4212, i64* %3, align 8
  %4213 = load i32, i32* %4176, align 4
  %4214 = add i32 %4213, %4210
  %4215 = zext i32 %4214 to i64
  store i64 %4215, i64* %RCX.i2537, align 8
  %4216 = lshr i32 %4214, 31
  %4217 = sub i32 %4205, %4214
  %4218 = icmp ult i32 %4205, %4214
  %4219 = zext i1 %4218 to i8
  store i8 %4219, i8* %14, align 1
  %4220 = and i32 %4217, 255
  %4221 = tail call i32 @llvm.ctpop.i32(i32 %4220)
  %4222 = trunc i32 %4221 to i8
  %4223 = and i8 %4222, 1
  %4224 = xor i8 %4223, 1
  store i8 %4224, i8* %21, align 1
  %4225 = xor i32 %4214, %4205
  %4226 = xor i32 %4225, %4217
  %4227 = lshr i32 %4226, 4
  %4228 = trunc i32 %4227 to i8
  %4229 = and i8 %4228, 1
  store i8 %4229, i8* %26, align 1
  %4230 = icmp eq i32 %4217, 0
  %4231 = zext i1 %4230 to i8
  store i8 %4231, i8* %29, align 1
  %4232 = lshr i32 %4217, 31
  %4233 = trunc i32 %4232 to i8
  store i8 %4233, i8* %32, align 1
  %4234 = lshr i32 %4205, 31
  %4235 = xor i32 %4216, %4234
  %4236 = xor i32 %4232, %4234
  %4237 = add nuw nsw i32 %4236, %4235
  %4238 = icmp eq i32 %4237, 2
  %4239 = zext i1 %4238 to i8
  store i8 %4239, i8* %38, align 1
  %4240 = icmp ne i8 %4233, 0
  %4241 = xor i1 %4240, %4238
  %.v453 = select i1 %4241, i64 17, i64 31
  %4242 = add i64 %4201, %.v453
  %4243 = add i64 %4242, 3
  store i64 %4243, i64* %3, align 8
  br i1 %4241, label %block_41ba40, label %block_.L_41ba4e

block_41ba40:                                     ; preds = %block_41ba2f
  %4244 = load i32, i32* %4204, align 4
  %4245 = zext i32 %4244 to i64
  store i64 %4245, i64* %RAX.i82, align 8
  %4246 = add i64 %4173, -388
  %4247 = add i64 %4242, 9
  store i64 %4247, i64* %3, align 8
  %4248 = inttoptr i64 %4246 to i32*
  store i32 %4244, i32* %4248, align 4
  %4249 = load i64, i64* %3, align 8
  %4250 = add i64 %4249, 17
  store i64 %4250, i64* %3, align 8
  br label %block_.L_41ba5a

block_.L_41ba4e:                                  ; preds = %block_41ba2f
  %4251 = load i32, i32* %4209, align 4
  %4252 = zext i32 %4251 to i64
  store i64 %4252, i64* %RAX.i82, align 8
  %4253 = add i64 %4242, 6
  store i64 %4253, i64* %3, align 8
  %4254 = load i32, i32* %4176, align 4
  %4255 = add i32 %4254, %4251
  %4256 = zext i32 %4255 to i64
  store i64 %4256, i64* %RAX.i82, align 8
  %4257 = icmp ult i32 %4255, %4251
  %4258 = icmp ult i32 %4255, %4254
  %4259 = or i1 %4257, %4258
  %4260 = zext i1 %4259 to i8
  store i8 %4260, i8* %14, align 1
  %4261 = and i32 %4255, 255
  %4262 = tail call i32 @llvm.ctpop.i32(i32 %4261)
  %4263 = trunc i32 %4262 to i8
  %4264 = and i8 %4263, 1
  %4265 = xor i8 %4264, 1
  store i8 %4265, i8* %21, align 1
  %4266 = xor i32 %4254, %4251
  %4267 = xor i32 %4266, %4255
  %4268 = lshr i32 %4267, 4
  %4269 = trunc i32 %4268 to i8
  %4270 = and i8 %4269, 1
  store i8 %4270, i8* %26, align 1
  %4271 = icmp eq i32 %4255, 0
  %4272 = zext i1 %4271 to i8
  store i8 %4272, i8* %29, align 1
  %4273 = lshr i32 %4255, 31
  %4274 = trunc i32 %4273 to i8
  store i8 %4274, i8* %32, align 1
  %4275 = lshr i32 %4251, 31
  %4276 = lshr i32 %4254, 31
  %4277 = xor i32 %4273, %4275
  %4278 = xor i32 %4273, %4276
  %4279 = add nuw nsw i32 %4277, %4278
  %4280 = icmp eq i32 %4279, 2
  %4281 = zext i1 %4280 to i8
  store i8 %4281, i8* %38, align 1
  %4282 = add i64 %4173, -388
  %4283 = add i64 %4242, 12
  store i64 %4283, i64* %3, align 8
  %4284 = inttoptr i64 %4282 to i32*
  store i32 %4255, i32* %4284, align 4
  %.pre274 = load i64, i64* %3, align 8
  br label %block_.L_41ba5a

block_.L_41ba5a:                                  ; preds = %block_.L_41ba4e, %block_41ba40
  %4285 = phi i64 [ %.pre274, %block_.L_41ba4e ], [ %4250, %block_41ba40 ]
  %4286 = load i64, i64* %RBP.i, align 8
  %4287 = add i64 %4286, -388
  %4288 = add i64 %4285, 6
  store i64 %4288, i64* %3, align 8
  %4289 = inttoptr i64 %4287 to i32*
  %4290 = load i32, i32* %4289, align 4
  %4291 = zext i32 %4290 to i64
  store i64 %4291, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i2537, align 8
  %4292 = sub i32 0, %4290
  %4293 = icmp ne i32 %4290, 0
  %4294 = zext i1 %4293 to i8
  store i8 %4294, i8* %14, align 1
  %4295 = and i32 %4292, 255
  %4296 = tail call i32 @llvm.ctpop.i32(i32 %4295)
  %4297 = trunc i32 %4296 to i8
  %4298 = and i8 %4297, 1
  %4299 = xor i8 %4298, 1
  store i8 %4299, i8* %21, align 1
  %4300 = xor i32 %4290, %4292
  %4301 = lshr i32 %4300, 4
  %4302 = trunc i32 %4301 to i8
  %4303 = and i8 %4302, 1
  store i8 %4303, i8* %26, align 1
  %4304 = icmp eq i32 %4290, 0
  %4305 = zext i1 %4304 to i8
  store i8 %4305, i8* %29, align 1
  %4306 = lshr i32 %4292, 31
  %4307 = trunc i32 %4306 to i8
  store i8 %4307, i8* %32, align 1
  %4308 = lshr i32 %4290, 31
  %4309 = add nuw nsw i32 %4306, %4308
  %4310 = icmp eq i32 %4309, 2
  %4311 = zext i1 %4310 to i8
  store i8 %4311, i8* %38, align 1
  %4312 = icmp ne i8 %4307, 0
  %4313 = xor i1 %4312, %4310
  %4314 = or i1 %4304, %4313
  %.v454 = select i1 %4314, i64 29, i64 16
  %4315 = add i64 %4285, %.v454
  store i64 %4315, i64* %3, align 8
  br i1 %4314, label %block_.L_41ba77, label %block_41ba6a

block_41ba6a:                                     ; preds = %block_.L_41ba5a
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %4316 = add i64 %4286, -392
  %4317 = add i64 %4315, 8
  store i64 %4317, i64* %3, align 8
  %4318 = inttoptr i64 %4316 to i32*
  store i32 0, i32* %4318, align 4
  %4319 = load i64, i64* %3, align 8
  %4320 = add i64 %4319, 60
  store i64 %4320, i64* %3, align 8
  br label %block_.L_41baae

block_.L_41ba77:                                  ; preds = %block_.L_41ba5a
  %4321 = add i64 %4286, -36
  %4322 = add i64 %4315, 3
  store i64 %4322, i64* %3, align 8
  %4323 = inttoptr i64 %4321 to i32*
  %4324 = load i32, i32* %4323, align 4
  %4325 = zext i32 %4324 to i64
  store i64 %4325, i64* %RAX.i82, align 8
  %4326 = add i64 %4286, -16
  %4327 = add i64 %4315, 6
  store i64 %4327, i64* %3, align 8
  %4328 = inttoptr i64 %4326 to i32*
  %4329 = load i32, i32* %4328, align 4
  %4330 = zext i32 %4329 to i64
  store i64 %4330, i64* %RCX.i2537, align 8
  %4331 = add i64 %4286, -24
  %4332 = add i64 %4315, 9
  store i64 %4332, i64* %3, align 8
  %4333 = inttoptr i64 %4331 to i32*
  %4334 = load i32, i32* %4333, align 4
  %4335 = add i32 %4334, %4329
  %4336 = zext i32 %4335 to i64
  store i64 %4336, i64* %RCX.i2537, align 8
  %4337 = lshr i32 %4335, 31
  %4338 = sub i32 %4324, %4335
  %4339 = icmp ult i32 %4324, %4335
  %4340 = zext i1 %4339 to i8
  store i8 %4340, i8* %14, align 1
  %4341 = and i32 %4338, 255
  %4342 = tail call i32 @llvm.ctpop.i32(i32 %4341)
  %4343 = trunc i32 %4342 to i8
  %4344 = and i8 %4343, 1
  %4345 = xor i8 %4344, 1
  store i8 %4345, i8* %21, align 1
  %4346 = xor i32 %4335, %4324
  %4347 = xor i32 %4346, %4338
  %4348 = lshr i32 %4347, 4
  %4349 = trunc i32 %4348 to i8
  %4350 = and i8 %4349, 1
  store i8 %4350, i8* %26, align 1
  %4351 = icmp eq i32 %4338, 0
  %4352 = zext i1 %4351 to i8
  store i8 %4352, i8* %29, align 1
  %4353 = lshr i32 %4338, 31
  %4354 = trunc i32 %4353 to i8
  store i8 %4354, i8* %32, align 1
  %4355 = lshr i32 %4324, 31
  %4356 = xor i32 %4337, %4355
  %4357 = xor i32 %4353, %4355
  %4358 = add nuw nsw i32 %4357, %4356
  %4359 = icmp eq i32 %4358, 2
  %4360 = zext i1 %4359 to i8
  store i8 %4360, i8* %38, align 1
  %4361 = icmp ne i8 %4354, 0
  %4362 = xor i1 %4361, %4359
  %.v455 = select i1 %4362, i64 17, i64 31
  %4363 = add i64 %4315, %.v455
  %4364 = add i64 %4363, 3
  store i64 %4364, i64* %3, align 8
  br i1 %4362, label %block_41ba88, label %block_.L_41ba96

block_41ba88:                                     ; preds = %block_.L_41ba77
  %4365 = load i32, i32* %4323, align 4
  %4366 = zext i32 %4365 to i64
  store i64 %4366, i64* %RAX.i82, align 8
  %4367 = add i64 %4286, -396
  %4368 = add i64 %4363, 9
  store i64 %4368, i64* %3, align 8
  %4369 = inttoptr i64 %4367 to i32*
  store i32 %4365, i32* %4369, align 4
  %4370 = load i64, i64* %3, align 8
  %4371 = add i64 %4370, 17
  store i64 %4371, i64* %3, align 8
  br label %block_.L_41baa2

block_.L_41ba96:                                  ; preds = %block_.L_41ba77
  %4372 = load i32, i32* %4328, align 4
  %4373 = zext i32 %4372 to i64
  store i64 %4373, i64* %RAX.i82, align 8
  %4374 = add i64 %4363, 6
  store i64 %4374, i64* %3, align 8
  %4375 = load i32, i32* %4333, align 4
  %4376 = add i32 %4375, %4372
  %4377 = zext i32 %4376 to i64
  store i64 %4377, i64* %RAX.i82, align 8
  %4378 = icmp ult i32 %4376, %4372
  %4379 = icmp ult i32 %4376, %4375
  %4380 = or i1 %4378, %4379
  %4381 = zext i1 %4380 to i8
  store i8 %4381, i8* %14, align 1
  %4382 = and i32 %4376, 255
  %4383 = tail call i32 @llvm.ctpop.i32(i32 %4382)
  %4384 = trunc i32 %4383 to i8
  %4385 = and i8 %4384, 1
  %4386 = xor i8 %4385, 1
  store i8 %4386, i8* %21, align 1
  %4387 = xor i32 %4375, %4372
  %4388 = xor i32 %4387, %4376
  %4389 = lshr i32 %4388, 4
  %4390 = trunc i32 %4389 to i8
  %4391 = and i8 %4390, 1
  store i8 %4391, i8* %26, align 1
  %4392 = icmp eq i32 %4376, 0
  %4393 = zext i1 %4392 to i8
  store i8 %4393, i8* %29, align 1
  %4394 = lshr i32 %4376, 31
  %4395 = trunc i32 %4394 to i8
  store i8 %4395, i8* %32, align 1
  %4396 = lshr i32 %4372, 31
  %4397 = lshr i32 %4375, 31
  %4398 = xor i32 %4394, %4396
  %4399 = xor i32 %4394, %4397
  %4400 = add nuw nsw i32 %4398, %4399
  %4401 = icmp eq i32 %4400, 2
  %4402 = zext i1 %4401 to i8
  store i8 %4402, i8* %38, align 1
  %4403 = add i64 %4286, -396
  %4404 = add i64 %4363, 12
  store i64 %4404, i64* %3, align 8
  %4405 = inttoptr i64 %4403 to i32*
  store i32 %4376, i32* %4405, align 4
  %.pre275 = load i64, i64* %3, align 8
  br label %block_.L_41baa2

block_.L_41baa2:                                  ; preds = %block_.L_41ba96, %block_41ba88
  %4406 = phi i64 [ %.pre275, %block_.L_41ba96 ], [ %4371, %block_41ba88 ]
  %4407 = load i64, i64* %RBP.i, align 8
  %4408 = add i64 %4407, -396
  %4409 = add i64 %4406, 6
  store i64 %4409, i64* %3, align 8
  %4410 = inttoptr i64 %4408 to i32*
  %4411 = load i32, i32* %4410, align 4
  %4412 = zext i32 %4411 to i64
  store i64 %4412, i64* %RAX.i82, align 8
  %4413 = add i64 %4407, -392
  %4414 = add i64 %4406, 12
  store i64 %4414, i64* %3, align 8
  %4415 = inttoptr i64 %4413 to i32*
  store i32 %4411, i32* %4415, align 4
  %.pre276 = load i64, i64* %3, align 8
  br label %block_.L_41baae

block_.L_41baae:                                  ; preds = %block_.L_41baa2, %block_41ba6a
  %4416 = phi i64 [ %.pre276, %block_.L_41baa2 ], [ %4320, %block_41ba6a ]
  %4417 = load i64, i64* %RBP.i, align 8
  %4418 = add i64 %4417, -392
  %4419 = add i64 %4416, 6
  store i64 %4419, i64* %3, align 8
  %4420 = inttoptr i64 %4418 to i32*
  %4421 = load i32, i32* %4420, align 4
  %4422 = zext i32 %4421 to i64
  store i64 %4422, i64* %RAX.i82, align 8
  %4423 = add i64 %4417, -56
  %4424 = add i64 %4416, 9
  store i64 %4424, i64* %3, align 8
  %4425 = inttoptr i64 %4423 to i32*
  store i32 %4421, i32* %4425, align 4
  %4426 = load i64, i64* %RBP.i, align 8
  %4427 = add i64 %4426, -8
  %4428 = load i64, i64* %3, align 8
  %4429 = add i64 %4428, 4
  store i64 %4429, i64* %3, align 8
  %4430 = inttoptr i64 %4427 to i64*
  %4431 = load i64, i64* %4430, align 8
  store i64 %4431, i64* %RCX.i2537, align 8
  %4432 = add i64 %4426, -60
  %4433 = add i64 %4428, 8
  store i64 %4433, i64* %3, align 8
  %4434 = inttoptr i64 %4432 to i32*
  %4435 = load i32, i32* %4434, align 4
  %4436 = sext i32 %4435 to i64
  store i64 %4436, i64* %RDX.i532, align 8
  %4437 = shl nsw i64 %4436, 3
  %4438 = add i64 %4437, %4431
  %4439 = add i64 %4428, 12
  store i64 %4439, i64* %3, align 8
  %4440 = inttoptr i64 %4438 to i64*
  %4441 = load i64, i64* %4440, align 8
  store i64 %4441, i64* %RCX.i2537, align 8
  %4442 = add i64 %4426, -56
  %4443 = add i64 %4428, 16
  store i64 %4443, i64* %3, align 8
  %4444 = inttoptr i64 %4442 to i32*
  %4445 = load i32, i32* %4444, align 4
  %4446 = sext i32 %4445 to i64
  store i64 %4446, i64* %RDX.i532, align 8
  %4447 = shl nsw i64 %4446, 1
  %4448 = add i64 %4447, %4441
  %4449 = add i64 %4428, 20
  store i64 %4449, i64* %3, align 8
  %4450 = inttoptr i64 %4448 to i16*
  %4451 = load i16, i16* %4450, align 2
  %4452 = zext i16 %4451 to i64
  store i64 %4452, i64* %RAX.i82, align 8
  %4453 = add i64 %4426, -24
  %4454 = add i64 %4428, 23
  store i64 %4454, i64* %3, align 8
  %4455 = inttoptr i64 %4453 to i32*
  %4456 = load i32, i32* %4455, align 4
  %4457 = add i32 %4456, 2
  %4458 = zext i32 %4457 to i64
  store i64 %4458, i64* %RSI.i1183, align 8
  %4459 = icmp ugt i32 %4456, -3
  %4460 = zext i1 %4459 to i8
  store i8 %4460, i8* %14, align 1
  %4461 = and i32 %4457, 255
  %4462 = tail call i32 @llvm.ctpop.i32(i32 %4461)
  %4463 = trunc i32 %4462 to i8
  %4464 = and i8 %4463, 1
  %4465 = xor i8 %4464, 1
  store i8 %4465, i8* %21, align 1
  %4466 = xor i32 %4457, %4456
  %4467 = lshr i32 %4466, 4
  %4468 = trunc i32 %4467 to i8
  %4469 = and i8 %4468, 1
  store i8 %4469, i8* %26, align 1
  %4470 = icmp eq i32 %4457, 0
  %4471 = zext i1 %4470 to i8
  store i8 %4471, i8* %29, align 1
  %4472 = lshr i32 %4457, 31
  %4473 = trunc i32 %4472 to i8
  store i8 %4473, i8* %32, align 1
  %4474 = lshr i32 %4456, 31
  %4475 = xor i32 %4472, %4474
  %4476 = add nuw nsw i32 %4475, %4472
  %4477 = icmp eq i32 %4476, 2
  %4478 = zext i1 %4477 to i8
  store i8 %4478, i8* %38, align 1
  %4479 = sext i32 %4457 to i64
  store i64 %4479, i64* %RCX.i2537, align 8
  %4480 = shl nsw i64 %4479, 2
  %4481 = add nsw i64 %4480, 4950704
  %4482 = add i64 %4428, 37
  store i64 %4482, i64* %3, align 8
  %4483 = inttoptr i64 %4481 to i32*
  %4484 = load i32, i32* %4483, align 4
  %4485 = sext i32 %4484 to i64
  %4486 = mul nsw i64 %4485, %4452
  %4487 = trunc i64 %4486 to i32
  %4488 = and i64 %4486, 4294967295
  store i64 %4488, i64* %RAX.i82, align 8
  %4489 = shl i64 %4486, 32
  %4490 = ashr exact i64 %4489, 32
  %4491 = icmp ne i64 %4490, %4486
  %4492 = zext i1 %4491 to i8
  store i8 %4492, i8* %14, align 1
  %4493 = and i32 %4487, 255
  %4494 = tail call i32 @llvm.ctpop.i32(i32 %4493)
  %4495 = trunc i32 %4494 to i8
  %4496 = and i8 %4495, 1
  %4497 = xor i8 %4496, 1
  store i8 %4497, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %4498 = lshr i32 %4487, 31
  %4499 = trunc i32 %4498 to i8
  store i8 %4499, i8* %32, align 1
  store i8 %4492, i8* %38, align 1
  %4500 = load i64, i64* %RBP.i, align 8
  %4501 = add i64 %4500, -44
  %4502 = add i64 %4428, 40
  store i64 %4502, i64* %3, align 8
  %4503 = trunc i64 %4486 to i32
  %4504 = inttoptr i64 %4501 to i32*
  %4505 = load i32, i32* %4504, align 4
  %4506 = add i32 %4505, %4503
  %4507 = zext i32 %4506 to i64
  store i64 %4507, i64* %RAX.i82, align 8
  %4508 = icmp ult i32 %4506, %4503
  %4509 = icmp ult i32 %4506, %4505
  %4510 = or i1 %4508, %4509
  %4511 = zext i1 %4510 to i8
  store i8 %4511, i8* %14, align 1
  %4512 = and i32 %4506, 255
  %4513 = tail call i32 @llvm.ctpop.i32(i32 %4512)
  %4514 = trunc i32 %4513 to i8
  %4515 = and i8 %4514, 1
  %4516 = xor i8 %4515, 1
  store i8 %4516, i8* %21, align 1
  %4517 = xor i32 %4505, %4503
  %4518 = xor i32 %4517, %4506
  %4519 = lshr i32 %4518, 4
  %4520 = trunc i32 %4519 to i8
  %4521 = and i8 %4520, 1
  store i8 %4521, i8* %26, align 1
  %4522 = icmp eq i32 %4506, 0
  %4523 = zext i1 %4522 to i8
  store i8 %4523, i8* %29, align 1
  %4524 = lshr i32 %4506, 31
  %4525 = trunc i32 %4524 to i8
  store i8 %4525, i8* %32, align 1
  %4526 = lshr i32 %4503, 31
  %4527 = lshr i32 %4505, 31
  %4528 = xor i32 %4524, %4526
  %4529 = xor i32 %4524, %4527
  %4530 = add nuw nsw i32 %4528, %4529
  %4531 = icmp eq i32 %4530, 2
  %4532 = zext i1 %4531 to i8
  store i8 %4532, i8* %38, align 1
  %4533 = add i64 %4428, 43
  store i64 %4533, i64* %3, align 8
  store i32 %4506, i32* %4504, align 4
  %4534 = load i64, i64* %RBP.i, align 8
  %4535 = add i64 %4534, -24
  %4536 = load i64, i64* %3, align 8
  %4537 = add i64 %4536, 3
  store i64 %4537, i64* %3, align 8
  %4538 = inttoptr i64 %4535 to i32*
  %4539 = load i32, i32* %4538, align 4
  %4540 = add i32 %4539, 1
  %4541 = zext i32 %4540 to i64
  store i64 %4541, i64* %RAX.i82, align 8
  %4542 = icmp eq i32 %4539, -1
  %4543 = icmp eq i32 %4540, 0
  %4544 = or i1 %4542, %4543
  %4545 = zext i1 %4544 to i8
  store i8 %4545, i8* %14, align 1
  %4546 = and i32 %4540, 255
  %4547 = tail call i32 @llvm.ctpop.i32(i32 %4546)
  %4548 = trunc i32 %4547 to i8
  %4549 = and i8 %4548, 1
  %4550 = xor i8 %4549, 1
  store i8 %4550, i8* %21, align 1
  %4551 = xor i32 %4540, %4539
  %4552 = lshr i32 %4551, 4
  %4553 = trunc i32 %4552 to i8
  %4554 = and i8 %4553, 1
  store i8 %4554, i8* %26, align 1
  %4555 = zext i1 %4543 to i8
  store i8 %4555, i8* %29, align 1
  %4556 = lshr i32 %4540, 31
  %4557 = trunc i32 %4556 to i8
  store i8 %4557, i8* %32, align 1
  %4558 = lshr i32 %4539, 31
  %4559 = xor i32 %4556, %4558
  %4560 = add nuw nsw i32 %4559, %4556
  %4561 = icmp eq i32 %4560, 2
  %4562 = zext i1 %4561 to i8
  store i8 %4562, i8* %38, align 1
  %4563 = add i64 %4536, 9
  store i64 %4563, i64* %3, align 8
  store i32 %4540, i32* %4538, align 4
  %4564 = load i64, i64* %3, align 8
  %4565 = add i64 %4564, -198
  store i64 %4565, i64* %3, align 8
  br label %block_.L_41ba25

block_.L_41baf0:                                  ; preds = %block_.L_41ba25
  %4566 = add i64 %4173, -44
  %4567 = add i64 %4201, 3
  store i64 %4567, i64* %3, align 8
  %4568 = inttoptr i64 %4566 to i32*
  %4569 = load i32, i32* %4568, align 4
  %4570 = zext i32 %4569 to i64
  store i64 %4570, i64* %RAX.i82, align 8
  %4571 = add i64 %4173, -32
  %4572 = add i64 %4201, 6
  store i64 %4572, i64* %3, align 8
  %4573 = inttoptr i64 %4571 to i32*
  %4574 = load i32, i32* %4573, align 4
  %4575 = add i32 %4574, 2
  %4576 = zext i32 %4575 to i64
  store i64 %4576, i64* %RCX.i2537, align 8
  %4577 = icmp ugt i32 %4574, -3
  %4578 = zext i1 %4577 to i8
  store i8 %4578, i8* %14, align 1
  %4579 = and i32 %4575, 255
  %4580 = tail call i32 @llvm.ctpop.i32(i32 %4579)
  %4581 = trunc i32 %4580 to i8
  %4582 = and i8 %4581, 1
  %4583 = xor i8 %4582, 1
  store i8 %4583, i8* %21, align 1
  %4584 = xor i32 %4575, %4574
  %4585 = lshr i32 %4584, 4
  %4586 = trunc i32 %4585 to i8
  %4587 = and i8 %4586, 1
  store i8 %4587, i8* %26, align 1
  %4588 = icmp eq i32 %4575, 0
  %4589 = zext i1 %4588 to i8
  store i8 %4589, i8* %29, align 1
  %4590 = lshr i32 %4575, 31
  %4591 = trunc i32 %4590 to i8
  store i8 %4591, i8* %32, align 1
  %4592 = lshr i32 %4574, 31
  %4593 = xor i32 %4590, %4592
  %4594 = add nuw nsw i32 %4593, %4590
  %4595 = icmp eq i32 %4594, 2
  %4596 = zext i1 %4595 to i8
  store i8 %4596, i8* %38, align 1
  %4597 = sext i32 %4575 to i64
  store i64 %4597, i64* %RDX.i532, align 8
  %4598 = shl nsw i64 %4597, 2
  %4599 = add nsw i64 %4598, -96
  %4600 = add i64 %4599, %4173
  %4601 = add i64 %4201, 16
  store i64 %4601, i64* %3, align 8
  %4602 = inttoptr i64 %4600 to i32*
  store i32 %4569, i32* %4602, align 4
  %4603 = load i64, i64* %RBP.i, align 8
  %4604 = add i64 %4603, -32
  %4605 = load i64, i64* %3, align 8
  %4606 = add i64 %4605, 3
  store i64 %4606, i64* %3, align 8
  %4607 = inttoptr i64 %4604 to i32*
  %4608 = load i32, i32* %4607, align 4
  %4609 = add i32 %4608, 1
  %4610 = zext i32 %4609 to i64
  store i64 %4610, i64* %RAX.i82, align 8
  %4611 = icmp eq i32 %4608, -1
  %4612 = icmp eq i32 %4609, 0
  %4613 = or i1 %4611, %4612
  %4614 = zext i1 %4613 to i8
  store i8 %4614, i8* %14, align 1
  %4615 = and i32 %4609, 255
  %4616 = tail call i32 @llvm.ctpop.i32(i32 %4615)
  %4617 = trunc i32 %4616 to i8
  %4618 = and i8 %4617, 1
  %4619 = xor i8 %4618, 1
  store i8 %4619, i8* %21, align 1
  %4620 = xor i32 %4609, %4608
  %4621 = lshr i32 %4620, 4
  %4622 = trunc i32 %4621 to i8
  %4623 = and i8 %4622, 1
  store i8 %4623, i8* %26, align 1
  %4624 = zext i1 %4612 to i8
  store i8 %4624, i8* %29, align 1
  %4625 = lshr i32 %4609, 31
  %4626 = trunc i32 %4625 to i8
  store i8 %4626, i8* %32, align 1
  %4627 = lshr i32 %4608, 31
  %4628 = xor i32 %4625, %4627
  %4629 = add nuw nsw i32 %4628, %4625
  %4630 = icmp eq i32 %4629, 2
  %4631 = zext i1 %4630 to i8
  store i8 %4631, i8* %38, align 1
  %4632 = add i64 %4605, 9
  store i64 %4632, i64* %3, align 8
  store i32 %4609, i32* %4607, align 4
  %4633 = load i64, i64* %3, align 8
  %4634 = add i64 %4633, -388
  store i64 %4634, i64* %3, align 8
  br label %block_.L_41b985

block_.L_41bb0e:                                  ; preds = %block_.L_41b985
  %4635 = add i64 %3939, -32
  %4636 = load i64, i64* %3, align 8
  %4637 = add i64 %4636, 7
  store i64 %4637, i64* %3, align 8
  %4638 = inttoptr i64 %4635 to i32*
  store i32 -2, i32* %4638, align 4
  %RCX.i2284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %.pre217 = load i64, i64* %3, align 8
  br label %block_.L_41bb1c

block_.L_41bb1c:                                  ; preds = %block_41bb26, %block_.L_41bb0e
  %4639 = phi i64 [ %4812, %block_41bb26 ], [ %.pre217, %block_.L_41bb0e ]
  %4640 = load i64, i64* %RBP.i, align 8
  %4641 = add i64 %4640, -32
  %4642 = add i64 %4639, 4
  store i64 %4642, i64* %3, align 8
  %4643 = inttoptr i64 %4641 to i32*
  %4644 = load i32, i32* %4643, align 4
  %4645 = add i32 %4644, -4
  %4646 = icmp ult i32 %4644, 4
  %4647 = zext i1 %4646 to i8
  store i8 %4647, i8* %14, align 1
  %4648 = and i32 %4645, 255
  %4649 = tail call i32 @llvm.ctpop.i32(i32 %4648)
  %4650 = trunc i32 %4649 to i8
  %4651 = and i8 %4650, 1
  %4652 = xor i8 %4651, 1
  store i8 %4652, i8* %21, align 1
  %4653 = xor i32 %4645, %4644
  %4654 = lshr i32 %4653, 4
  %4655 = trunc i32 %4654 to i8
  %4656 = and i8 %4655, 1
  store i8 %4656, i8* %26, align 1
  %4657 = icmp eq i32 %4645, 0
  %4658 = zext i1 %4657 to i8
  store i8 %4658, i8* %29, align 1
  %4659 = lshr i32 %4645, 31
  %4660 = trunc i32 %4659 to i8
  store i8 %4660, i8* %32, align 1
  %4661 = lshr i32 %4644, 31
  %4662 = xor i32 %4659, %4661
  %4663 = add nuw nsw i32 %4662, %4661
  %4664 = icmp eq i32 %4663, 2
  %4665 = zext i1 %4664 to i8
  store i8 %4665, i8* %38, align 1
  %4666 = icmp ne i8 %4660, 0
  %4667 = xor i1 %4666, %4664
  %.v440 = select i1 %4667, i64 10, i64 60
  %4668 = add i64 %4639, %.v440
  store i64 %4668, i64* %3, align 8
  br i1 %4667, label %block_41bb26, label %block_.L_41bb58

block_41bb26:                                     ; preds = %block_.L_41bb1c
  %4669 = add i64 %4668, 3
  store i64 %4669, i64* %3, align 8
  %4670 = load i32, i32* %4643, align 4
  %4671 = add i32 %4670, 2
  %4672 = zext i32 %4671 to i64
  store i64 %4672, i64* %RAX.i82, align 8
  %4673 = icmp ugt i32 %4670, -3
  %4674 = zext i1 %4673 to i8
  store i8 %4674, i8* %14, align 1
  %4675 = and i32 %4671, 255
  %4676 = tail call i32 @llvm.ctpop.i32(i32 %4675)
  %4677 = trunc i32 %4676 to i8
  %4678 = and i8 %4677, 1
  %4679 = xor i8 %4678, 1
  store i8 %4679, i8* %21, align 1
  %4680 = xor i32 %4671, %4670
  %4681 = lshr i32 %4680, 4
  %4682 = trunc i32 %4681 to i8
  %4683 = and i8 %4682, 1
  store i8 %4683, i8* %26, align 1
  %4684 = icmp eq i32 %4671, 0
  %4685 = zext i1 %4684 to i8
  store i8 %4685, i8* %29, align 1
  %4686 = lshr i32 %4671, 31
  %4687 = trunc i32 %4686 to i8
  store i8 %4687, i8* %32, align 1
  %4688 = lshr i32 %4670, 31
  %4689 = xor i32 %4686, %4688
  %4690 = add nuw nsw i32 %4689, %4686
  %4691 = icmp eq i32 %4690, 2
  %4692 = zext i1 %4691 to i8
  store i8 %4692, i8* %38, align 1
  %4693 = sext i32 %4671 to i64
  store i64 %4693, i64* %RCX.i2284, align 8
  %4694 = shl nsw i64 %4693, 2
  %4695 = add nsw i64 %4694, -96
  %4696 = add i64 %4695, %4640
  %4697 = add i64 %4668, 13
  store i64 %4697, i64* %3, align 8
  %4698 = inttoptr i64 %4696 to i32*
  %4699 = load i32, i32* %4698, align 4
  %4700 = zext i32 %4699 to i64
  store i64 %4700, i64* %RAX.i82, align 8
  %4701 = add i64 %4668, 16
  store i64 %4701, i64* %3, align 8
  %4702 = load i32, i32* %4643, align 4
  %4703 = add i32 %4702, 2
  %4704 = zext i32 %4703 to i64
  store i64 %4704, i64* %RDX.i532, align 8
  %4705 = icmp ugt i32 %4702, -3
  %4706 = zext i1 %4705 to i8
  store i8 %4706, i8* %14, align 1
  %4707 = and i32 %4703, 255
  %4708 = tail call i32 @llvm.ctpop.i32(i32 %4707)
  %4709 = trunc i32 %4708 to i8
  %4710 = and i8 %4709, 1
  %4711 = xor i8 %4710, 1
  store i8 %4711, i8* %21, align 1
  %4712 = xor i32 %4703, %4702
  %4713 = lshr i32 %4712, 4
  %4714 = trunc i32 %4713 to i8
  %4715 = and i8 %4714, 1
  store i8 %4715, i8* %26, align 1
  %4716 = icmp eq i32 %4703, 0
  %4717 = zext i1 %4716 to i8
  store i8 %4717, i8* %29, align 1
  %4718 = lshr i32 %4703, 31
  %4719 = trunc i32 %4718 to i8
  store i8 %4719, i8* %32, align 1
  %4720 = lshr i32 %4702, 31
  %4721 = xor i32 %4718, %4720
  %4722 = add nuw nsw i32 %4721, %4718
  %4723 = icmp eq i32 %4722, 2
  %4724 = zext i1 %4723 to i8
  store i8 %4724, i8* %38, align 1
  %4725 = sext i32 %4703 to i64
  store i64 %4725, i64* %RCX.i2284, align 8
  %4726 = shl nsw i64 %4725, 2
  %4727 = add nsw i64 %4726, 4950704
  %4728 = add i64 %4668, 30
  store i64 %4728, i64* %3, align 8
  %4729 = inttoptr i64 %4727 to i32*
  %4730 = load i32, i32* %4729, align 4
  %4731 = sext i32 %4699 to i64
  %4732 = sext i32 %4730 to i64
  %4733 = mul nsw i64 %4732, %4731
  %4734 = trunc i64 %4733 to i32
  %4735 = and i64 %4733, 4294967295
  store i64 %4735, i64* %RAX.i82, align 8
  %4736 = shl i64 %4733, 32
  %4737 = ashr exact i64 %4736, 32
  %4738 = icmp ne i64 %4737, %4733
  %4739 = zext i1 %4738 to i8
  store i8 %4739, i8* %14, align 1
  %4740 = and i32 %4734, 255
  %4741 = tail call i32 @llvm.ctpop.i32(i32 %4740)
  %4742 = trunc i32 %4741 to i8
  %4743 = and i8 %4742, 1
  %4744 = xor i8 %4743, 1
  store i8 %4744, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %4745 = lshr i32 %4734, 31
  %4746 = trunc i32 %4745 to i8
  store i8 %4746, i8* %32, align 1
  store i8 %4739, i8* %38, align 1
  %4747 = load i64, i64* %RBP.i, align 8
  %4748 = add i64 %4747, -44
  %4749 = add i64 %4668, 33
  store i64 %4749, i64* %3, align 8
  %4750 = trunc i64 %4733 to i32
  %4751 = inttoptr i64 %4748 to i32*
  %4752 = load i32, i32* %4751, align 4
  %4753 = add i32 %4752, %4750
  %4754 = zext i32 %4753 to i64
  store i64 %4754, i64* %RAX.i82, align 8
  %4755 = icmp ult i32 %4753, %4750
  %4756 = icmp ult i32 %4753, %4752
  %4757 = or i1 %4755, %4756
  %4758 = zext i1 %4757 to i8
  store i8 %4758, i8* %14, align 1
  %4759 = and i32 %4753, 255
  %4760 = tail call i32 @llvm.ctpop.i32(i32 %4759)
  %4761 = trunc i32 %4760 to i8
  %4762 = and i8 %4761, 1
  %4763 = xor i8 %4762, 1
  store i8 %4763, i8* %21, align 1
  %4764 = xor i32 %4752, %4750
  %4765 = xor i32 %4764, %4753
  %4766 = lshr i32 %4765, 4
  %4767 = trunc i32 %4766 to i8
  %4768 = and i8 %4767, 1
  store i8 %4768, i8* %26, align 1
  %4769 = icmp eq i32 %4753, 0
  %4770 = zext i1 %4769 to i8
  store i8 %4770, i8* %29, align 1
  %4771 = lshr i32 %4753, 31
  %4772 = trunc i32 %4771 to i8
  store i8 %4772, i8* %32, align 1
  %4773 = lshr i32 %4750, 31
  %4774 = lshr i32 %4752, 31
  %4775 = xor i32 %4771, %4773
  %4776 = xor i32 %4771, %4774
  %4777 = add nuw nsw i32 %4775, %4776
  %4778 = icmp eq i32 %4777, 2
  %4779 = zext i1 %4778 to i8
  store i8 %4779, i8* %38, align 1
  %4780 = add i64 %4668, 36
  store i64 %4780, i64* %3, align 8
  store i32 %4753, i32* %4751, align 4
  %4781 = load i64, i64* %RBP.i, align 8
  %4782 = add i64 %4781, -32
  %4783 = load i64, i64* %3, align 8
  %4784 = add i64 %4783, 3
  store i64 %4784, i64* %3, align 8
  %4785 = inttoptr i64 %4782 to i32*
  %4786 = load i32, i32* %4785, align 4
  %4787 = add i32 %4786, 1
  %4788 = zext i32 %4787 to i64
  store i64 %4788, i64* %RAX.i82, align 8
  %4789 = icmp eq i32 %4786, -1
  %4790 = icmp eq i32 %4787, 0
  %4791 = or i1 %4789, %4790
  %4792 = zext i1 %4791 to i8
  store i8 %4792, i8* %14, align 1
  %4793 = and i32 %4787, 255
  %4794 = tail call i32 @llvm.ctpop.i32(i32 %4793)
  %4795 = trunc i32 %4794 to i8
  %4796 = and i8 %4795, 1
  %4797 = xor i8 %4796, 1
  store i8 %4797, i8* %21, align 1
  %4798 = xor i32 %4787, %4786
  %4799 = lshr i32 %4798, 4
  %4800 = trunc i32 %4799 to i8
  %4801 = and i8 %4800, 1
  store i8 %4801, i8* %26, align 1
  %4802 = zext i1 %4790 to i8
  store i8 %4802, i8* %29, align 1
  %4803 = lshr i32 %4787, 31
  %4804 = trunc i32 %4803 to i8
  store i8 %4804, i8* %32, align 1
  %4805 = lshr i32 %4786, 31
  %4806 = xor i32 %4803, %4805
  %4807 = add nuw nsw i32 %4806, %4803
  %4808 = icmp eq i32 %4807, 2
  %4809 = zext i1 %4808 to i8
  store i8 %4809, i8* %38, align 1
  %4810 = add i64 %4783, 9
  store i64 %4810, i64* %3, align 8
  store i32 %4787, i32* %4785, align 4
  %4811 = load i64, i64* %3, align 8
  %4812 = add i64 %4811, -55
  store i64 %4812, i64* %3, align 8
  br label %block_.L_41bb1c

block_.L_41bb58:                                  ; preds = %block_.L_41bb1c
  store i64 1024, i64* %RAX.i82, align 8
  %4813 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4813, i64* %RCX.i2537, align 8
  %4814 = add i64 %4813, 72684
  %4815 = add i64 %4668, 19
  store i64 %4815, i64* %3, align 8
  %4816 = inttoptr i64 %4814 to i32*
  %4817 = load i32, i32* %4816, align 4
  %4818 = zext i32 %4817 to i64
  store i64 %4818, i64* %RDX.i532, align 8
  %4819 = add i64 %4640, -44
  %4820 = add i64 %4668, 22
  store i64 %4820, i64* %3, align 8
  %4821 = inttoptr i64 %4819 to i32*
  %4822 = load i32, i32* %4821, align 4
  %4823 = add i32 %4822, 512
  %4824 = zext i32 %4823 to i64
  store i64 %4824, i64* %RSI.i1183, align 8
  %4825 = icmp ugt i32 %4822, -513
  %4826 = zext i1 %4825 to i8
  store i8 %4826, i8* %14, align 1
  %4827 = and i32 %4823, 255
  %4828 = tail call i32 @llvm.ctpop.i32(i32 %4827)
  %4829 = trunc i32 %4828 to i8
  %4830 = and i8 %4829, 1
  %4831 = xor i8 %4830, 1
  store i8 %4831, i8* %21, align 1
  %4832 = xor i32 %4823, %4822
  %4833 = lshr i32 %4832, 4
  %4834 = trunc i32 %4833 to i8
  %4835 = and i8 %4834, 1
  store i8 %4835, i8* %26, align 1
  %4836 = icmp eq i32 %4823, 0
  %4837 = zext i1 %4836 to i8
  store i8 %4837, i8* %29, align 1
  %4838 = lshr i32 %4823, 31
  %4839 = trunc i32 %4838 to i8
  store i8 %4839, i8* %32, align 1
  %4840 = lshr i32 %4822, 31
  %4841 = xor i32 %4838, %4840
  %4842 = add nuw nsw i32 %4841, %4838
  %4843 = icmp eq i32 %4842, 2
  %4844 = zext i1 %4843 to i8
  store i8 %4844, i8* %38, align 1
  %4845 = add i64 %4640, -400
  %4846 = add i64 %4668, 34
  store i64 %4846, i64* %3, align 8
  %4847 = inttoptr i64 %4845 to i32*
  store i32 1024, i32* %4847, align 4
  %4848 = load i32, i32* %ESI.i168, align 4
  %4849 = zext i32 %4848 to i64
  %4850 = load i64, i64* %3, align 8
  store i64 %4849, i64* %RAX.i82, align 8
  %4851 = load i64, i64* %RBP.i, align 8
  %4852 = add i64 %4851, -404
  %4853 = load i32, i32* %EDX.i443, align 4
  %4854 = add i64 %4850, 8
  store i64 %4854, i64* %3, align 8
  %4855 = inttoptr i64 %4852 to i32*
  store i32 %4853, i32* %4855, align 4
  %4856 = load i64, i64* %3, align 8
  %4857 = load i32, i32* %EAX.i1056, align 8
  %4858 = sext i32 %4857 to i64
  %4859 = lshr i64 %4858, 32
  store i64 %4859, i64* %141, align 8
  %4860 = load i64, i64* %RBP.i, align 8
  %4861 = add i64 %4860, -400
  %4862 = add i64 %4856, 7
  store i64 %4862, i64* %3, align 8
  %4863 = inttoptr i64 %4861 to i32*
  %4864 = load i32, i32* %4863, align 4
  %4865 = zext i32 %4864 to i64
  store i64 %4865, i64* %RSI.i1183, align 8
  %4866 = add i64 %4856, 9
  store i64 %4866, i64* %3, align 8
  %4867 = zext i32 %4857 to i64
  %4868 = sext i32 %4864 to i64
  %4869 = shl nuw i64 %4859, 32
  %4870 = or i64 %4869, %4867
  %4871 = sdiv i64 %4870, %4868
  %4872 = shl i64 %4871, 32
  %4873 = ashr exact i64 %4872, 32
  %4874 = icmp eq i64 %4871, %4873
  br i1 %4874, label %4877, label %4875

; <label>:4875:                                   ; preds = %block_.L_41bb58
  %4876 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4866, %struct.Memory* %229)
  %.pre218 = load i64, i64* %RBP.i, align 8
  %.pre219 = load i64, i64* %3, align 8
  %.pre220 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit2223

; <label>:4877:                                   ; preds = %block_.L_41bb58
  %4878 = srem i64 %4870, %4868
  %4879 = and i64 %4871, 4294967295
  store i64 %4879, i64* %RAX.i82, align 8
  %4880 = and i64 %4878, 4294967295
  store i64 %4880, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %4881 = trunc i64 %4871 to i32
  br label %routine_idivl__esi.exit2223

routine_idivl__esi.exit2223:                      ; preds = %4877, %4875
  %4882 = phi i32 [ %.pre220, %4875 ], [ %4881, %4877 ]
  %4883 = phi i64 [ %.pre219, %4875 ], [ %4866, %4877 ]
  %4884 = phi i64 [ %.pre218, %4875 ], [ %4860, %4877 ]
  %4885 = phi %struct.Memory* [ %4876, %4875 ], [ %229, %4877 ]
  %4886 = add i64 %4884, -404
  %4887 = add i64 %4883, 6
  store i64 %4887, i64* %3, align 8
  %4888 = inttoptr i64 %4886 to i32*
  %4889 = load i32, i32* %4888, align 4
  %4890 = zext i32 %4889 to i64
  store i64 %4890, i64* %RDI.i129, align 8
  %EDI.i2217 = bitcast %union.anon* %40 to i32*
  %4891 = sub i32 %4889, %4882
  %4892 = icmp ult i32 %4889, %4882
  %4893 = zext i1 %4892 to i8
  store i8 %4893, i8* %14, align 1
  %4894 = and i32 %4891, 255
  %4895 = tail call i32 @llvm.ctpop.i32(i32 %4894)
  %4896 = trunc i32 %4895 to i8
  %4897 = and i8 %4896, 1
  %4898 = xor i8 %4897, 1
  store i8 %4898, i8* %21, align 1
  %4899 = xor i32 %4882, %4889
  %4900 = xor i32 %4899, %4891
  %4901 = lshr i32 %4900, 4
  %4902 = trunc i32 %4901 to i8
  %4903 = and i8 %4902, 1
  store i8 %4903, i8* %26, align 1
  %4904 = icmp eq i32 %4891, 0
  %4905 = zext i1 %4904 to i8
  store i8 %4905, i8* %29, align 1
  %4906 = lshr i32 %4891, 31
  %4907 = trunc i32 %4906 to i8
  store i8 %4907, i8* %32, align 1
  %4908 = lshr i32 %4889, 31
  %4909 = lshr i32 %4882, 31
  %4910 = xor i32 %4909, %4908
  %4911 = xor i32 %4906, %4908
  %4912 = add nuw nsw i32 %4911, %4910
  %4913 = icmp eq i32 %4912, 2
  %4914 = zext i1 %4913 to i8
  store i8 %4914, i8* %38, align 1
  %4915 = icmp ne i8 %4907, 0
  %4916 = xor i1 %4915, %4913
  %.v441 = select i1 %4916, i64 14, i64 39
  %4917 = add i64 %4883, %.v441
  store i64 %4917, i64* %3, align 8
  br i1 %4916, label %block_41bb99, label %block_.L_41bbb2

block_41bb99:                                     ; preds = %routine_idivl__esi.exit2223
  %4918 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4918, i64* %RAX.i82, align 8
  %4919 = add i64 %4918, 72684
  %4920 = add i64 %4917, 14
  store i64 %4920, i64* %3, align 8
  %4921 = inttoptr i64 %4919 to i32*
  %4922 = load i32, i32* %4921, align 4
  %4923 = zext i32 %4922 to i64
  store i64 %4923, i64* %RCX.i2537, align 8
  %4924 = add i64 %4884, -408
  %4925 = add i64 %4917, 20
  store i64 %4925, i64* %3, align 8
  %4926 = inttoptr i64 %4924 to i32*
  store i32 %4922, i32* %4926, align 4
  %4927 = load i64, i64* %3, align 8
  %4928 = add i64 %4927, 42
  store i64 %4928, i64* %3, align 8
  br label %block_.L_41bbd7

block_.L_41bbb2:                                  ; preds = %routine_idivl__esi.exit2223
  store i64 1024, i64* %RAX.i82, align 8
  %4929 = add i64 %4884, -44
  %4930 = add i64 %4917, 8
  store i64 %4930, i64* %3, align 8
  %4931 = inttoptr i64 %4929 to i32*
  %4932 = load i32, i32* %4931, align 4
  %4933 = add i32 %4932, 512
  %4934 = zext i32 %4933 to i64
  store i64 %4934, i64* %RCX.i2537, align 8
  %4935 = icmp ugt i32 %4932, -513
  %4936 = zext i1 %4935 to i8
  store i8 %4936, i8* %14, align 1
  %4937 = and i32 %4933, 255
  %4938 = tail call i32 @llvm.ctpop.i32(i32 %4937)
  %4939 = trunc i32 %4938 to i8
  %4940 = and i8 %4939, 1
  %4941 = xor i8 %4940, 1
  store i8 %4941, i8* %21, align 1
  %4942 = xor i32 %4933, %4932
  %4943 = lshr i32 %4942, 4
  %4944 = trunc i32 %4943 to i8
  %4945 = and i8 %4944, 1
  store i8 %4945, i8* %26, align 1
  %4946 = icmp eq i32 %4933, 0
  %4947 = zext i1 %4946 to i8
  store i8 %4947, i8* %29, align 1
  %4948 = lshr i32 %4933, 31
  %4949 = trunc i32 %4948 to i8
  store i8 %4949, i8* %32, align 1
  %4950 = lshr i32 %4932, 31
  %4951 = xor i32 %4948, %4950
  %4952 = add nuw nsw i32 %4951, %4948
  %4953 = icmp eq i32 %4952, 2
  %4954 = zext i1 %4953 to i8
  store i8 %4954, i8* %38, align 1
  %4955 = add i64 %4884, -412
  %4956 = add i64 %4917, 20
  store i64 %4956, i64* %3, align 8
  %4957 = inttoptr i64 %4955 to i32*
  store i32 1024, i32* %4957, align 4
  %4958 = load i32, i32* %ECX.i2532, align 4
  %4959 = zext i32 %4958 to i64
  %4960 = load i64, i64* %3, align 8
  store i64 %4959, i64* %RAX.i82, align 8
  %4961 = sext i32 %4958 to i64
  %4962 = lshr i64 %4961, 32
  store i64 %4962, i64* %141, align 8
  %4963 = load i64, i64* %RBP.i, align 8
  %4964 = add i64 %4963, -412
  %4965 = add i64 %4960, 9
  store i64 %4965, i64* %3, align 8
  %4966 = inttoptr i64 %4964 to i32*
  %4967 = load i32, i32* %4966, align 4
  %4968 = zext i32 %4967 to i64
  store i64 %4968, i64* %RCX.i2537, align 8
  %4969 = add i64 %4960, 11
  store i64 %4969, i64* %3, align 8
  %4970 = sext i32 %4967 to i64
  %4971 = shl nuw i64 %4962, 32
  %4972 = or i64 %4971, %4959
  %4973 = sdiv i64 %4972, %4970
  %4974 = shl i64 %4973, 32
  %4975 = ashr exact i64 %4974, 32
  %4976 = icmp eq i64 %4973, %4975
  br i1 %4976, label %4979, label %4977

; <label>:4977:                                   ; preds = %block_.L_41bbb2
  %4978 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4969, %struct.Memory* %4885)
  %.pre221 = load i64, i64* %RBP.i, align 8
  %.pre222 = load i32, i32* %EAX.i1056, align 4
  %.pre223 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2186

; <label>:4979:                                   ; preds = %block_.L_41bbb2
  %4980 = srem i64 %4972, %4970
  %4981 = and i64 %4973, 4294967295
  store i64 %4981, i64* %RAX.i82, align 8
  %4982 = and i64 %4980, 4294967295
  store i64 %4982, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %4983 = trunc i64 %4973 to i32
  br label %routine_idivl__ecx.exit2186

routine_idivl__ecx.exit2186:                      ; preds = %4979, %4977
  %4984 = phi i64 [ %.pre223, %4977 ], [ %4969, %4979 ]
  %4985 = phi i32 [ %.pre222, %4977 ], [ %4983, %4979 ]
  %4986 = phi i64 [ %.pre221, %4977 ], [ %4963, %4979 ]
  %4987 = phi %struct.Memory* [ %4978, %4977 ], [ %4885, %4979 ]
  %4988 = add i64 %4986, -408
  %4989 = add i64 %4984, 6
  store i64 %4989, i64* %3, align 8
  %4990 = inttoptr i64 %4988 to i32*
  store i32 %4985, i32* %4990, align 4
  %.pre224 = load i64, i64* %3, align 8
  br label %block_.L_41bbd7

block_.L_41bbd7:                                  ; preds = %routine_idivl__ecx.exit2186, %block_41bb99
  %4991 = phi i64 [ %.pre224, %routine_idivl__ecx.exit2186 ], [ %4928, %block_41bb99 ]
  %MEMORY.52 = phi %struct.Memory* [ %4987, %routine_idivl__ecx.exit2186 ], [ %4885, %block_41bb99 ]
  %4992 = load i64, i64* %RBP.i, align 8
  %4993 = add i64 %4992, -408
  %4994 = add i64 %4991, 6
  store i64 %4994, i64* %3, align 8
  %4995 = inttoptr i64 %4993 to i32*
  %4996 = load i32, i32* %4995, align 4
  %4997 = zext i32 %4996 to i64
  store i64 %4997, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i2537, align 8
  %4998 = sub i32 0, %4996
  %4999 = icmp ne i32 %4996, 0
  %5000 = zext i1 %4999 to i8
  store i8 %5000, i8* %14, align 1
  %5001 = and i32 %4998, 255
  %5002 = tail call i32 @llvm.ctpop.i32(i32 %5001)
  %5003 = trunc i32 %5002 to i8
  %5004 = and i8 %5003, 1
  %5005 = xor i8 %5004, 1
  store i8 %5005, i8* %21, align 1
  %5006 = xor i32 %4996, %4998
  %5007 = lshr i32 %5006, 4
  %5008 = trunc i32 %5007 to i8
  %5009 = and i8 %5008, 1
  store i8 %5009, i8* %26, align 1
  %5010 = icmp eq i32 %4996, 0
  %5011 = zext i1 %5010 to i8
  store i8 %5011, i8* %29, align 1
  %5012 = lshr i32 %4998, 31
  %5013 = trunc i32 %5012 to i8
  store i8 %5013, i8* %32, align 1
  %5014 = lshr i32 %4996, 31
  %5015 = add nuw nsw i32 %5012, %5014
  %5016 = icmp eq i32 %5015, 2
  %5017 = zext i1 %5016 to i8
  store i8 %5017, i8* %38, align 1
  %5018 = icmp ne i8 %5013, 0
  %5019 = xor i1 %5018, %5016
  %5020 = or i1 %5010, %5019
  %.v442 = select i1 %5020, i64 29, i64 16
  %5021 = add i64 %4991, %.v442
  store i64 %5021, i64* %3, align 8
  br i1 %5020, label %block_.L_41bbf4, label %block_41bbe7

block_41bbe7:                                     ; preds = %block_.L_41bbd7
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %5022 = add i64 %4992, -416
  %5023 = add i64 %5021, 8
  store i64 %5023, i64* %3, align 8
  %5024 = inttoptr i64 %5022 to i32*
  store i32 0, i32* %5024, align 4
  %5025 = load i64, i64* %3, align 8
  %5026 = add i64 %5025, 144
  store i64 %5026, i64* %3, align 8
  br label %block_.L_41bc7f

block_.L_41bbf4:                                  ; preds = %block_.L_41bbd7
  store i64 1024, i64* %RAX.i82, align 8
  %5027 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5027, i64* %RCX.i2537, align 8
  %5028 = add i64 %5027, 72684
  %5029 = add i64 %5021, 19
  store i64 %5029, i64* %3, align 8
  %5030 = inttoptr i64 %5028 to i32*
  %5031 = load i32, i32* %5030, align 4
  %5032 = zext i32 %5031 to i64
  store i64 %5032, i64* %RDX.i532, align 8
  %5033 = add i64 %4992, -44
  %5034 = add i64 %5021, 22
  store i64 %5034, i64* %3, align 8
  %5035 = inttoptr i64 %5033 to i32*
  %5036 = load i32, i32* %5035, align 4
  %5037 = add i32 %5036, 512
  %5038 = zext i32 %5037 to i64
  store i64 %5038, i64* %RSI.i1183, align 8
  %5039 = icmp ugt i32 %5036, -513
  %5040 = zext i1 %5039 to i8
  store i8 %5040, i8* %14, align 1
  %5041 = and i32 %5037, 255
  %5042 = tail call i32 @llvm.ctpop.i32(i32 %5041)
  %5043 = trunc i32 %5042 to i8
  %5044 = and i8 %5043, 1
  %5045 = xor i8 %5044, 1
  store i8 %5045, i8* %21, align 1
  %5046 = xor i32 %5037, %5036
  %5047 = lshr i32 %5046, 4
  %5048 = trunc i32 %5047 to i8
  %5049 = and i8 %5048, 1
  store i8 %5049, i8* %26, align 1
  %5050 = icmp eq i32 %5037, 0
  %5051 = zext i1 %5050 to i8
  store i8 %5051, i8* %29, align 1
  %5052 = lshr i32 %5037, 31
  %5053 = trunc i32 %5052 to i8
  store i8 %5053, i8* %32, align 1
  %5054 = lshr i32 %5036, 31
  %5055 = xor i32 %5052, %5054
  %5056 = add nuw nsw i32 %5055, %5052
  %5057 = icmp eq i32 %5056, 2
  %5058 = zext i1 %5057 to i8
  store i8 %5058, i8* %38, align 1
  %5059 = add i64 %4992, -420
  %5060 = add i64 %5021, 34
  store i64 %5060, i64* %3, align 8
  %5061 = inttoptr i64 %5059 to i32*
  store i32 1024, i32* %5061, align 4
  %5062 = load i32, i32* %ESI.i168, align 4
  %5063 = zext i32 %5062 to i64
  %5064 = load i64, i64* %3, align 8
  store i64 %5063, i64* %RAX.i82, align 8
  %5065 = load i64, i64* %RBP.i, align 8
  %5066 = add i64 %5065, -424
  %5067 = load i32, i32* %EDX.i443, align 4
  %5068 = add i64 %5064, 8
  store i64 %5068, i64* %3, align 8
  %5069 = inttoptr i64 %5066 to i32*
  store i32 %5067, i32* %5069, align 4
  %5070 = load i64, i64* %3, align 8
  %5071 = load i32, i32* %EAX.i1056, align 8
  %5072 = sext i32 %5071 to i64
  %5073 = lshr i64 %5072, 32
  store i64 %5073, i64* %141, align 8
  %5074 = load i64, i64* %RBP.i, align 8
  %5075 = add i64 %5074, -420
  %5076 = add i64 %5070, 7
  store i64 %5076, i64* %3, align 8
  %5077 = inttoptr i64 %5075 to i32*
  %5078 = load i32, i32* %5077, align 4
  %5079 = zext i32 %5078 to i64
  store i64 %5079, i64* %RSI.i1183, align 8
  %5080 = add i64 %5070, 9
  store i64 %5080, i64* %3, align 8
  %5081 = zext i32 %5071 to i64
  %5082 = sext i32 %5078 to i64
  %5083 = shl nuw i64 %5073, 32
  %5084 = or i64 %5083, %5081
  %5085 = sdiv i64 %5084, %5082
  %5086 = shl i64 %5085, 32
  %5087 = ashr exact i64 %5086, 32
  %5088 = icmp eq i64 %5085, %5087
  br i1 %5088, label %5091, label %5089

; <label>:5089:                                   ; preds = %block_.L_41bbf4
  %5090 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5080, %struct.Memory* %MEMORY.52)
  %.pre225 = load i64, i64* %RBP.i, align 8
  %.pre226 = load i64, i64* %3, align 8
  %.pre227 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit2136

; <label>:5091:                                   ; preds = %block_.L_41bbf4
  %5092 = srem i64 %5084, %5082
  %5093 = and i64 %5085, 4294967295
  store i64 %5093, i64* %RAX.i82, align 8
  %5094 = and i64 %5092, 4294967295
  store i64 %5094, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5095 = trunc i64 %5085 to i32
  br label %routine_idivl__esi.exit2136

routine_idivl__esi.exit2136:                      ; preds = %5091, %5089
  %5096 = phi i32 [ %.pre227, %5089 ], [ %5095, %5091 ]
  %5097 = phi i64 [ %.pre226, %5089 ], [ %5080, %5091 ]
  %5098 = phi i64 [ %.pre225, %5089 ], [ %5074, %5091 ]
  %5099 = phi %struct.Memory* [ %5090, %5089 ], [ %MEMORY.52, %5091 ]
  %5100 = add i64 %5098, -424
  %5101 = add i64 %5097, 6
  store i64 %5101, i64* %3, align 8
  %5102 = inttoptr i64 %5100 to i32*
  %5103 = load i32, i32* %5102, align 4
  %5104 = zext i32 %5103 to i64
  store i64 %5104, i64* %RDI.i129, align 8
  %5105 = sub i32 %5103, %5096
  %5106 = icmp ult i32 %5103, %5096
  %5107 = zext i1 %5106 to i8
  store i8 %5107, i8* %14, align 1
  %5108 = and i32 %5105, 255
  %5109 = tail call i32 @llvm.ctpop.i32(i32 %5108)
  %5110 = trunc i32 %5109 to i8
  %5111 = and i8 %5110, 1
  %5112 = xor i8 %5111, 1
  store i8 %5112, i8* %21, align 1
  %5113 = xor i32 %5096, %5103
  %5114 = xor i32 %5113, %5105
  %5115 = lshr i32 %5114, 4
  %5116 = trunc i32 %5115 to i8
  %5117 = and i8 %5116, 1
  store i8 %5117, i8* %26, align 1
  %5118 = icmp eq i32 %5105, 0
  %5119 = zext i1 %5118 to i8
  store i8 %5119, i8* %29, align 1
  %5120 = lshr i32 %5105, 31
  %5121 = trunc i32 %5120 to i8
  store i8 %5121, i8* %32, align 1
  %5122 = lshr i32 %5103, 31
  %5123 = lshr i32 %5096, 31
  %5124 = xor i32 %5123, %5122
  %5125 = xor i32 %5120, %5122
  %5126 = add nuw nsw i32 %5125, %5124
  %5127 = icmp eq i32 %5126, 2
  %5128 = zext i1 %5127 to i8
  store i8 %5128, i8* %38, align 1
  %5129 = icmp ne i8 %5121, 0
  %5130 = xor i1 %5129, %5127
  %.v449 = select i1 %5130, i64 14, i64 39
  %5131 = add i64 %5097, %.v449
  store i64 %5131, i64* %3, align 8
  br i1 %5130, label %block_41bc35, label %block_.L_41bc4e

block_41bc35:                                     ; preds = %routine_idivl__esi.exit2136
  %5132 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5132, i64* %RAX.i82, align 8
  %5133 = add i64 %5132, 72684
  %5134 = add i64 %5131, 14
  store i64 %5134, i64* %3, align 8
  %5135 = inttoptr i64 %5133 to i32*
  %5136 = load i32, i32* %5135, align 4
  %5137 = zext i32 %5136 to i64
  store i64 %5137, i64* %RCX.i2537, align 8
  %5138 = add i64 %5098, -428
  %5139 = add i64 %5131, 20
  store i64 %5139, i64* %3, align 8
  %5140 = inttoptr i64 %5138 to i32*
  store i32 %5136, i32* %5140, align 4
  %5141 = load i64, i64* %3, align 8
  %5142 = add i64 %5141, 42
  store i64 %5142, i64* %3, align 8
  br label %block_.L_41bc73

block_.L_41bc4e:                                  ; preds = %routine_idivl__esi.exit2136
  store i64 1024, i64* %RAX.i82, align 8
  %5143 = add i64 %5098, -44
  %5144 = add i64 %5131, 8
  store i64 %5144, i64* %3, align 8
  %5145 = inttoptr i64 %5143 to i32*
  %5146 = load i32, i32* %5145, align 4
  %5147 = add i32 %5146, 512
  %5148 = zext i32 %5147 to i64
  store i64 %5148, i64* %RCX.i2537, align 8
  %5149 = icmp ugt i32 %5146, -513
  %5150 = zext i1 %5149 to i8
  store i8 %5150, i8* %14, align 1
  %5151 = and i32 %5147, 255
  %5152 = tail call i32 @llvm.ctpop.i32(i32 %5151)
  %5153 = trunc i32 %5152 to i8
  %5154 = and i8 %5153, 1
  %5155 = xor i8 %5154, 1
  store i8 %5155, i8* %21, align 1
  %5156 = xor i32 %5147, %5146
  %5157 = lshr i32 %5156, 4
  %5158 = trunc i32 %5157 to i8
  %5159 = and i8 %5158, 1
  store i8 %5159, i8* %26, align 1
  %5160 = icmp eq i32 %5147, 0
  %5161 = zext i1 %5160 to i8
  store i8 %5161, i8* %29, align 1
  %5162 = lshr i32 %5147, 31
  %5163 = trunc i32 %5162 to i8
  store i8 %5163, i8* %32, align 1
  %5164 = lshr i32 %5146, 31
  %5165 = xor i32 %5162, %5164
  %5166 = add nuw nsw i32 %5165, %5162
  %5167 = icmp eq i32 %5166, 2
  %5168 = zext i1 %5167 to i8
  store i8 %5168, i8* %38, align 1
  %5169 = add i64 %5098, -432
  %5170 = add i64 %5131, 20
  store i64 %5170, i64* %3, align 8
  %5171 = inttoptr i64 %5169 to i32*
  store i32 1024, i32* %5171, align 4
  %5172 = load i32, i32* %ECX.i2532, align 4
  %5173 = zext i32 %5172 to i64
  %5174 = load i64, i64* %3, align 8
  store i64 %5173, i64* %RAX.i82, align 8
  %5175 = sext i32 %5172 to i64
  %5176 = lshr i64 %5175, 32
  store i64 %5176, i64* %141, align 8
  %5177 = load i64, i64* %RBP.i, align 8
  %5178 = add i64 %5177, -432
  %5179 = add i64 %5174, 9
  store i64 %5179, i64* %3, align 8
  %5180 = inttoptr i64 %5178 to i32*
  %5181 = load i32, i32* %5180, align 4
  %5182 = zext i32 %5181 to i64
  store i64 %5182, i64* %RCX.i2537, align 8
  %5183 = add i64 %5174, 11
  store i64 %5183, i64* %3, align 8
  %5184 = sext i32 %5181 to i64
  %5185 = shl nuw i64 %5176, 32
  %5186 = or i64 %5185, %5173
  %5187 = sdiv i64 %5186, %5184
  %5188 = shl i64 %5187, 32
  %5189 = ashr exact i64 %5188, 32
  %5190 = icmp eq i64 %5187, %5189
  br i1 %5190, label %5193, label %5191

; <label>:5191:                                   ; preds = %block_.L_41bc4e
  %5192 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5183, %struct.Memory* %5099)
  %.pre228 = load i64, i64* %RBP.i, align 8
  %.pre229 = load i32, i32* %EAX.i1056, align 4
  %.pre230 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2099

; <label>:5193:                                   ; preds = %block_.L_41bc4e
  %5194 = srem i64 %5186, %5184
  %5195 = and i64 %5187, 4294967295
  store i64 %5195, i64* %RAX.i82, align 8
  %5196 = and i64 %5194, 4294967295
  store i64 %5196, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5197 = trunc i64 %5187 to i32
  br label %routine_idivl__ecx.exit2099

routine_idivl__ecx.exit2099:                      ; preds = %5193, %5191
  %5198 = phi i64 [ %.pre230, %5191 ], [ %5183, %5193 ]
  %5199 = phi i32 [ %.pre229, %5191 ], [ %5197, %5193 ]
  %5200 = phi i64 [ %.pre228, %5191 ], [ %5177, %5193 ]
  %5201 = phi %struct.Memory* [ %5192, %5191 ], [ %5099, %5193 ]
  %5202 = add i64 %5200, -428
  %5203 = add i64 %5198, 6
  store i64 %5203, i64* %3, align 8
  %5204 = inttoptr i64 %5202 to i32*
  store i32 %5199, i32* %5204, align 4
  %.pre231 = load i64, i64* %3, align 8
  br label %block_.L_41bc73

block_.L_41bc73:                                  ; preds = %routine_idivl__ecx.exit2099, %block_41bc35
  %5205 = phi i64 [ %.pre231, %routine_idivl__ecx.exit2099 ], [ %5142, %block_41bc35 ]
  %MEMORY.53 = phi %struct.Memory* [ %5201, %routine_idivl__ecx.exit2099 ], [ %5099, %block_41bc35 ]
  %5206 = load i64, i64* %RBP.i, align 8
  %5207 = add i64 %5206, -428
  %5208 = add i64 %5205, 6
  store i64 %5208, i64* %3, align 8
  %5209 = inttoptr i64 %5207 to i32*
  %5210 = load i32, i32* %5209, align 4
  %5211 = zext i32 %5210 to i64
  store i64 %5211, i64* %RAX.i82, align 8
  %5212 = add i64 %5206, -416
  %5213 = add i64 %5205, 12
  store i64 %5213, i64* %3, align 8
  %5214 = inttoptr i64 %5212 to i32*
  store i32 %5210, i32* %5214, align 4
  %.pre232 = load i64, i64* %3, align 8
  br label %block_.L_41bc7f

block_.L_41bc7f:                                  ; preds = %block_.L_41bc73, %block_41bbe7
  %5215 = phi i64 [ %.pre232, %block_.L_41bc73 ], [ %5026, %block_41bbe7 ]
  %MEMORY.54 = phi %struct.Memory* [ %MEMORY.53, %block_.L_41bc73 ], [ %MEMORY.52, %block_41bbe7 ]
  %5216 = load i64, i64* %RBP.i, align 8
  %5217 = add i64 %5216, -416
  %5218 = add i64 %5215, 6
  store i64 %5218, i64* %3, align 8
  %5219 = inttoptr i64 %5217 to i32*
  %5220 = load i32, i32* %5219, align 4
  %5221 = zext i32 %5220 to i64
  store i64 %5221, i64* %RAX.i82, align 8
  %5222 = add i64 %5216, -44
  %5223 = add i64 %5215, 9
  store i64 %5223, i64* %3, align 8
  %5224 = inttoptr i64 %5222 to i32*
  store i32 %5220, i32* %5224, align 4
  %5225 = load i64, i64* %RBP.i, align 8
  %5226 = add i64 %5225, -28
  %5227 = load i64, i64* %3, align 8
  %5228 = add i64 %5227, 4
  store i64 %5228, i64* %3, align 8
  %5229 = inttoptr i64 %5226 to i32*
  %5230 = load i32, i32* %5229, align 4
  %5231 = add i32 %5230, -1
  %5232 = icmp eq i32 %5230, 0
  %5233 = zext i1 %5232 to i8
  store i8 %5233, i8* %14, align 1
  %5234 = and i32 %5231, 255
  %5235 = tail call i32 @llvm.ctpop.i32(i32 %5234)
  %5236 = trunc i32 %5235 to i8
  %5237 = and i8 %5236, 1
  %5238 = xor i8 %5237, 1
  store i8 %5238, i8* %21, align 1
  %5239 = xor i32 %5231, %5230
  %5240 = lshr i32 %5239, 4
  %5241 = trunc i32 %5240 to i8
  %5242 = and i8 %5241, 1
  store i8 %5242, i8* %26, align 1
  %5243 = icmp eq i32 %5231, 0
  %5244 = zext i1 %5243 to i8
  store i8 %5244, i8* %29, align 1
  %5245 = lshr i32 %5231, 31
  %5246 = trunc i32 %5245 to i8
  store i8 %5246, i8* %32, align 1
  %5247 = lshr i32 %5230, 31
  %5248 = xor i32 %5245, %5247
  %5249 = add nuw nsw i32 %5248, %5247
  %5250 = icmp eq i32 %5249, 2
  %5251 = zext i1 %5250 to i8
  store i8 %5251, i8* %38, align 1
  %.v443 = select i1 %5243, i64 10, i64 322
  %5252 = add i64 %5227, %.v443
  store i64 %5252, i64* %3, align 8
  br i1 %5243, label %block_41bc92, label %block_.L_41bdca

block_41bc92:                                     ; preds = %block_.L_41bc7f
  store i64 32, i64* %RAX.i82, align 8
  %5253 = add i64 %5225, -44
  %5254 = add i64 %5252, 8
  store i64 %5254, i64* %3, align 8
  %5255 = inttoptr i64 %5253 to i32*
  %5256 = load i32, i32* %5255, align 4
  %5257 = zext i32 %5256 to i64
  store i64 %5257, i64* %RCX.i2537, align 8
  %5258 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5258, i64* %RDX.i532, align 8
  %5259 = add i64 %5258, 72684
  %5260 = add i64 %5252, 22
  store i64 %5260, i64* %3, align 8
  %5261 = inttoptr i64 %5259 to i32*
  %5262 = load i32, i32* %5261, align 4
  %5263 = zext i32 %5262 to i64
  store i64 %5263, i64* %RSI.i1183, align 8
  %5264 = add i64 %5225, -88
  %5265 = add i64 %5252, 25
  store i64 %5265, i64* %3, align 8
  %5266 = inttoptr i64 %5264 to i32*
  %5267 = load i32, i32* %5266, align 4
  %5268 = add i32 %5267, 16
  %5269 = zext i32 %5268 to i64
  store i64 %5269, i64* %RDI.i129, align 8
  %5270 = icmp ugt i32 %5267, -17
  %5271 = zext i1 %5270 to i8
  store i8 %5271, i8* %14, align 1
  %5272 = and i32 %5268, 255
  %5273 = tail call i32 @llvm.ctpop.i32(i32 %5272)
  %5274 = trunc i32 %5273 to i8
  %5275 = and i8 %5274, 1
  %5276 = xor i8 %5275, 1
  store i8 %5276, i8* %21, align 1
  %5277 = xor i32 %5267, 16
  %5278 = xor i32 %5277, %5268
  %5279 = lshr i32 %5278, 4
  %5280 = trunc i32 %5279 to i8
  %5281 = and i8 %5280, 1
  store i8 %5281, i8* %26, align 1
  %5282 = icmp eq i32 %5268, 0
  %5283 = zext i1 %5282 to i8
  store i8 %5283, i8* %29, align 1
  %5284 = lshr i32 %5268, 31
  %5285 = trunc i32 %5284 to i8
  store i8 %5285, i8* %32, align 1
  %5286 = lshr i32 %5267, 31
  %5287 = xor i32 %5284, %5286
  %5288 = add nuw nsw i32 %5287, %5284
  %5289 = icmp eq i32 %5288, 2
  %5290 = zext i1 %5289 to i8
  store i8 %5290, i8* %38, align 1
  %5291 = add i64 %5225, -436
  %5292 = add i64 %5252, 34
  store i64 %5292, i64* %3, align 8
  %5293 = inttoptr i64 %5291 to i32*
  store i32 32, i32* %5293, align 4
  %5294 = load i32, i32* %EDI.i2217, align 4
  %5295 = zext i32 %5294 to i64
  %5296 = load i64, i64* %3, align 8
  store i64 %5295, i64* %RAX.i82, align 8
  %5297 = sext i32 %5294 to i64
  %5298 = lshr i64 %5297, 32
  store i64 %5298, i64* %141, align 8
  %5299 = load i64, i64* %RBP.i, align 8
  %5300 = add i64 %5299, -436
  %5301 = add i64 %5296, 9
  store i64 %5301, i64* %3, align 8
  %5302 = inttoptr i64 %5300 to i32*
  %5303 = load i32, i32* %5302, align 4
  %5304 = zext i32 %5303 to i64
  store i64 %5304, i64* %RDI.i129, align 8
  %5305 = add i64 %5296, 11
  store i64 %5305, i64* %3, align 8
  %5306 = sext i32 %5303 to i64
  %5307 = shl nuw i64 %5298, 32
  %5308 = or i64 %5307, %5295
  %5309 = sdiv i64 %5308, %5306
  %5310 = shl i64 %5309, 32
  %5311 = ashr exact i64 %5310, 32
  %5312 = icmp eq i64 %5309, %5311
  br i1 %5312, label %5315, label %5313

; <label>:5313:                                   ; preds = %block_41bc92
  %5314 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5305, %struct.Memory* %MEMORY.54)
  %.pre233 = load i32, i32* %EAX.i1056, align 4
  %.pre234 = load i64, i64* %3, align 8
  %.pre235 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit2051

; <label>:5315:                                   ; preds = %block_41bc92
  %5316 = srem i64 %5308, %5306
  %5317 = and i64 %5309, 4294967295
  store i64 %5317, i64* %RAX.i82, align 8
  %5318 = and i64 %5316, 4294967295
  store i64 %5318, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5319 = trunc i64 %5309 to i32
  br label %routine_idivl__edi.exit2051

routine_idivl__edi.exit2051:                      ; preds = %5315, %5313
  %5320 = phi i64 [ %.pre235, %5313 ], [ %5299, %5315 ]
  %5321 = phi i64 [ %.pre234, %5313 ], [ %5305, %5315 ]
  %5322 = phi i32 [ %.pre233, %5313 ], [ %5319, %5315 ]
  %5323 = phi %struct.Memory* [ %5314, %5313 ], [ %MEMORY.54, %5315 ]
  %5324 = load i32, i32* %ESI.i168, align 4
  %5325 = sub i32 %5324, %5322
  %5326 = icmp ult i32 %5324, %5322
  %5327 = zext i1 %5326 to i8
  store i8 %5327, i8* %14, align 1
  %5328 = and i32 %5325, 255
  %5329 = tail call i32 @llvm.ctpop.i32(i32 %5328)
  %5330 = trunc i32 %5329 to i8
  %5331 = and i8 %5330, 1
  %5332 = xor i8 %5331, 1
  store i8 %5332, i8* %21, align 1
  %5333 = xor i32 %5322, %5324
  %5334 = xor i32 %5333, %5325
  %5335 = lshr i32 %5334, 4
  %5336 = trunc i32 %5335 to i8
  %5337 = and i8 %5336, 1
  store i8 %5337, i8* %26, align 1
  %5338 = icmp eq i32 %5325, 0
  %5339 = zext i1 %5338 to i8
  store i8 %5339, i8* %29, align 1
  %5340 = lshr i32 %5325, 31
  %5341 = trunc i32 %5340 to i8
  store i8 %5341, i8* %32, align 1
  %5342 = lshr i32 %5324, 31
  %5343 = lshr i32 %5322, 31
  %5344 = xor i32 %5343, %5342
  %5345 = xor i32 %5340, %5342
  %5346 = add nuw nsw i32 %5345, %5344
  %5347 = icmp eq i32 %5346, 2
  %5348 = zext i1 %5347 to i8
  store i8 %5348, i8* %38, align 1
  %5349 = add i64 %5320, -440
  %5350 = load i32, i32* %ECX.i2532, align 4
  %5351 = add i64 %5321, 8
  store i64 %5351, i64* %3, align 8
  %5352 = inttoptr i64 %5349 to i32*
  store i32 %5350, i32* %5352, align 4
  %5353 = load i64, i64* %3, align 8
  %5354 = load i8, i8* %32, align 1
  %5355 = icmp ne i8 %5354, 0
  %5356 = load i8, i8* %38, align 1
  %5357 = icmp ne i8 %5356, 0
  %5358 = xor i1 %5355, %5357
  %.v514 = select i1 %5358, i64 6, i64 31
  %5359 = add i64 %5353, %.v514
  store i64 %5359, i64* %3, align 8
  br i1 %5358, label %block_41bccd, label %block_.L_41bce6

block_41bccd:                                     ; preds = %routine_idivl__edi.exit2051
  %5360 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5360, i64* %RAX.i82, align 8
  %5361 = add i64 %5360, 72684
  %5362 = add i64 %5359, 14
  store i64 %5362, i64* %3, align 8
  %5363 = inttoptr i64 %5361 to i32*
  %5364 = load i32, i32* %5363, align 4
  %5365 = zext i32 %5364 to i64
  store i64 %5365, i64* %RCX.i2537, align 8
  %5366 = load i64, i64* %RBP.i, align 8
  %5367 = add i64 %5366, -444
  %5368 = add i64 %5359, 20
  store i64 %5368, i64* %3, align 8
  %5369 = inttoptr i64 %5367 to i32*
  store i32 %5364, i32* %5369, align 4
  %5370 = load i64, i64* %3, align 8
  %5371 = add i64 %5370, 39
  store i64 %5371, i64* %3, align 8
  br label %block_.L_41bd08

block_.L_41bce6:                                  ; preds = %routine_idivl__edi.exit2051
  store i64 32, i64* %RAX.i82, align 8
  %5372 = load i64, i64* %RBP.i, align 8
  %5373 = add i64 %5372, -88
  %5374 = add i64 %5359, 8
  store i64 %5374, i64* %3, align 8
  %5375 = inttoptr i64 %5373 to i32*
  %5376 = load i32, i32* %5375, align 4
  %5377 = add i32 %5376, 16
  %5378 = zext i32 %5377 to i64
  store i64 %5378, i64* %RCX.i2537, align 8
  %5379 = icmp ugt i32 %5376, -17
  %5380 = zext i1 %5379 to i8
  store i8 %5380, i8* %14, align 1
  %5381 = and i32 %5377, 255
  %5382 = tail call i32 @llvm.ctpop.i32(i32 %5381)
  %5383 = trunc i32 %5382 to i8
  %5384 = and i8 %5383, 1
  %5385 = xor i8 %5384, 1
  store i8 %5385, i8* %21, align 1
  %5386 = xor i32 %5376, 16
  %5387 = xor i32 %5386, %5377
  %5388 = lshr i32 %5387, 4
  %5389 = trunc i32 %5388 to i8
  %5390 = and i8 %5389, 1
  store i8 %5390, i8* %26, align 1
  %5391 = icmp eq i32 %5377, 0
  %5392 = zext i1 %5391 to i8
  store i8 %5392, i8* %29, align 1
  %5393 = lshr i32 %5377, 31
  %5394 = trunc i32 %5393 to i8
  store i8 %5394, i8* %32, align 1
  %5395 = lshr i32 %5376, 31
  %5396 = xor i32 %5393, %5395
  %5397 = add nuw nsw i32 %5396, %5393
  %5398 = icmp eq i32 %5397, 2
  %5399 = zext i1 %5398 to i8
  store i8 %5399, i8* %38, align 1
  %5400 = add i64 %5372, -448
  %5401 = add i64 %5359, 17
  store i64 %5401, i64* %3, align 8
  %5402 = inttoptr i64 %5400 to i32*
  store i32 32, i32* %5402, align 4
  %5403 = load i32, i32* %ECX.i2532, align 4
  %5404 = zext i32 %5403 to i64
  %5405 = load i64, i64* %3, align 8
  store i64 %5404, i64* %RAX.i82, align 8
  %5406 = sext i32 %5403 to i64
  %5407 = lshr i64 %5406, 32
  store i64 %5407, i64* %141, align 8
  %5408 = load i64, i64* %RBP.i, align 8
  %5409 = add i64 %5408, -448
  %5410 = add i64 %5405, 9
  store i64 %5410, i64* %3, align 8
  %5411 = inttoptr i64 %5409 to i32*
  %5412 = load i32, i32* %5411, align 4
  %5413 = zext i32 %5412 to i64
  store i64 %5413, i64* %RCX.i2537, align 8
  %5414 = add i64 %5405, 11
  store i64 %5414, i64* %3, align 8
  %5415 = sext i32 %5412 to i64
  %5416 = shl nuw i64 %5407, 32
  %5417 = or i64 %5416, %5404
  %5418 = sdiv i64 %5417, %5415
  %5419 = shl i64 %5418, 32
  %5420 = ashr exact i64 %5419, 32
  %5421 = icmp eq i64 %5418, %5420
  br i1 %5421, label %5424, label %5422

; <label>:5422:                                   ; preds = %block_.L_41bce6
  %5423 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5414, %struct.Memory* %5323)
  %.pre236 = load i64, i64* %RBP.i, align 8
  %.pre237 = load i32, i32* %EAX.i1056, align 4
  %.pre238 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit2012

; <label>:5424:                                   ; preds = %block_.L_41bce6
  %5425 = srem i64 %5417, %5415
  %5426 = and i64 %5418, 4294967295
  store i64 %5426, i64* %RAX.i82, align 8
  %5427 = and i64 %5425, 4294967295
  store i64 %5427, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5428 = trunc i64 %5418 to i32
  br label %routine_idivl__ecx.exit2012

routine_idivl__ecx.exit2012:                      ; preds = %5424, %5422
  %5429 = phi i64 [ %.pre238, %5422 ], [ %5414, %5424 ]
  %5430 = phi i32 [ %.pre237, %5422 ], [ %5428, %5424 ]
  %5431 = phi i64 [ %.pre236, %5422 ], [ %5408, %5424 ]
  %5432 = phi %struct.Memory* [ %5423, %5422 ], [ %5323, %5424 ]
  %5433 = add i64 %5431, -444
  %5434 = add i64 %5429, 6
  store i64 %5434, i64* %3, align 8
  %5435 = inttoptr i64 %5433 to i32*
  store i32 %5430, i32* %5435, align 4
  %.pre239 = load i64, i64* %3, align 8
  br label %block_.L_41bd08

block_.L_41bd08:                                  ; preds = %routine_idivl__ecx.exit2012, %block_41bccd
  %5436 = phi i64 [ %.pre239, %routine_idivl__ecx.exit2012 ], [ %5371, %block_41bccd ]
  %MEMORY.55 = phi %struct.Memory* [ %5432, %routine_idivl__ecx.exit2012 ], [ %5323, %block_41bccd ]
  %5437 = load i64, i64* %RBP.i, align 8
  %5438 = add i64 %5437, -444
  %5439 = add i64 %5436, 6
  store i64 %5439, i64* %3, align 8
  %5440 = inttoptr i64 %5438 to i32*
  %5441 = load i32, i32* %5440, align 4
  %5442 = zext i32 %5441 to i64
  store i64 %5442, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i2537, align 8
  %5443 = sub i32 0, %5441
  %5444 = icmp ne i32 %5441, 0
  %5445 = zext i1 %5444 to i8
  store i8 %5445, i8* %14, align 1
  %5446 = and i32 %5443, 255
  %5447 = tail call i32 @llvm.ctpop.i32(i32 %5446)
  %5448 = trunc i32 %5447 to i8
  %5449 = and i8 %5448, 1
  %5450 = xor i8 %5449, 1
  store i8 %5450, i8* %21, align 1
  %5451 = xor i32 %5441, %5443
  %5452 = lshr i32 %5451, 4
  %5453 = trunc i32 %5452 to i8
  %5454 = and i8 %5453, 1
  store i8 %5454, i8* %26, align 1
  %5455 = icmp eq i32 %5441, 0
  %5456 = zext i1 %5455 to i8
  store i8 %5456, i8* %29, align 1
  %5457 = lshr i32 %5443, 31
  %5458 = trunc i32 %5457 to i8
  store i8 %5458, i8* %32, align 1
  %5459 = lshr i32 %5441, 31
  %5460 = add nuw nsw i32 %5457, %5459
  %5461 = icmp eq i32 %5460, 2
  %5462 = zext i1 %5461 to i8
  store i8 %5462, i8* %38, align 1
  %5463 = icmp ne i8 %5458, 0
  %5464 = xor i1 %5463, %5461
  %5465 = or i1 %5455, %5464
  %.v447 = select i1 %5465, i64 29, i64 16
  %5466 = add i64 %5436, %.v447
  store i64 %5466, i64* %3, align 8
  br i1 %5465, label %block_.L_41bd25, label %block_41bd18

block_41bd18:                                     ; preds = %block_.L_41bd08
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %5467 = add i64 %5437, -452
  %5468 = add i64 %5466, 8
  store i64 %5468, i64* %3, align 8
  %5469 = inttoptr i64 %5467 to i32*
  store i32 0, i32* %5469, align 4
  %5470 = load i64, i64* %3, align 8
  %5471 = add i64 %5470, 138
  store i64 %5471, i64* %3, align 8
  br label %block_.L_41bdaa

block_.L_41bd25:                                  ; preds = %block_.L_41bd08
  store i64 32, i64* %RAX.i82, align 8
  %5472 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5472, i64* %RCX.i2537, align 8
  %5473 = add i64 %5472, 72684
  %5474 = add i64 %5466, 19
  store i64 %5474, i64* %3, align 8
  %5475 = inttoptr i64 %5473 to i32*
  %5476 = load i32, i32* %5475, align 4
  %5477 = zext i32 %5476 to i64
  store i64 %5477, i64* %RDX.i532, align 8
  %5478 = add i64 %5437, -88
  %5479 = add i64 %5466, 22
  store i64 %5479, i64* %3, align 8
  %5480 = inttoptr i64 %5478 to i32*
  %5481 = load i32, i32* %5480, align 4
  %5482 = add i32 %5481, 16
  %5483 = zext i32 %5482 to i64
  store i64 %5483, i64* %RSI.i1183, align 8
  %5484 = icmp ugt i32 %5481, -17
  %5485 = zext i1 %5484 to i8
  store i8 %5485, i8* %14, align 1
  %5486 = and i32 %5482, 255
  %5487 = tail call i32 @llvm.ctpop.i32(i32 %5486)
  %5488 = trunc i32 %5487 to i8
  %5489 = and i8 %5488, 1
  %5490 = xor i8 %5489, 1
  store i8 %5490, i8* %21, align 1
  %5491 = xor i32 %5481, 16
  %5492 = xor i32 %5491, %5482
  %5493 = lshr i32 %5492, 4
  %5494 = trunc i32 %5493 to i8
  %5495 = and i8 %5494, 1
  store i8 %5495, i8* %26, align 1
  %5496 = icmp eq i32 %5482, 0
  %5497 = zext i1 %5496 to i8
  store i8 %5497, i8* %29, align 1
  %5498 = lshr i32 %5482, 31
  %5499 = trunc i32 %5498 to i8
  store i8 %5499, i8* %32, align 1
  %5500 = lshr i32 %5481, 31
  %5501 = xor i32 %5498, %5500
  %5502 = add nuw nsw i32 %5501, %5498
  %5503 = icmp eq i32 %5502, 2
  %5504 = zext i1 %5503 to i8
  store i8 %5504, i8* %38, align 1
  %5505 = add i64 %5437, -456
  %5506 = add i64 %5466, 31
  store i64 %5506, i64* %3, align 8
  %5507 = inttoptr i64 %5505 to i32*
  store i32 32, i32* %5507, align 4
  %5508 = load i32, i32* %ESI.i168, align 4
  %5509 = zext i32 %5508 to i64
  %5510 = load i64, i64* %3, align 8
  store i64 %5509, i64* %RAX.i82, align 8
  %5511 = load i64, i64* %RBP.i, align 8
  %5512 = add i64 %5511, -460
  %5513 = load i32, i32* %EDX.i443, align 4
  %5514 = add i64 %5510, 8
  store i64 %5514, i64* %3, align 8
  %5515 = inttoptr i64 %5512 to i32*
  store i32 %5513, i32* %5515, align 4
  %5516 = load i64, i64* %3, align 8
  %5517 = load i32, i32* %EAX.i1056, align 8
  %5518 = sext i32 %5517 to i64
  %5519 = lshr i64 %5518, 32
  store i64 %5519, i64* %141, align 8
  %5520 = load i64, i64* %RBP.i, align 8
  %5521 = add i64 %5520, -456
  %5522 = add i64 %5516, 7
  store i64 %5522, i64* %3, align 8
  %5523 = inttoptr i64 %5521 to i32*
  %5524 = load i32, i32* %5523, align 4
  %5525 = zext i32 %5524 to i64
  store i64 %5525, i64* %RSI.i1183, align 8
  %5526 = add i64 %5516, 9
  store i64 %5526, i64* %3, align 8
  %5527 = zext i32 %5517 to i64
  %5528 = sext i32 %5524 to i64
  %5529 = shl nuw i64 %5519, 32
  %5530 = or i64 %5529, %5527
  %5531 = sdiv i64 %5530, %5528
  %5532 = shl i64 %5531, 32
  %5533 = ashr exact i64 %5532, 32
  %5534 = icmp eq i64 %5531, %5533
  br i1 %5534, label %5537, label %5535

; <label>:5535:                                   ; preds = %block_.L_41bd25
  %5536 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5526, %struct.Memory* %MEMORY.55)
  %.pre240 = load i64, i64* %RBP.i, align 8
  %.pre241 = load i64, i64* %3, align 8
  %.pre242 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit1962

; <label>:5537:                                   ; preds = %block_.L_41bd25
  %5538 = srem i64 %5530, %5528
  %5539 = and i64 %5531, 4294967295
  store i64 %5539, i64* %RAX.i82, align 8
  %5540 = and i64 %5538, 4294967295
  store i64 %5540, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5541 = trunc i64 %5531 to i32
  br label %routine_idivl__esi.exit1962

routine_idivl__esi.exit1962:                      ; preds = %5537, %5535
  %5542 = phi i32 [ %.pre242, %5535 ], [ %5541, %5537 ]
  %5543 = phi i64 [ %.pre241, %5535 ], [ %5526, %5537 ]
  %5544 = phi i64 [ %.pre240, %5535 ], [ %5520, %5537 ]
  %5545 = phi %struct.Memory* [ %5536, %5535 ], [ %MEMORY.55, %5537 ]
  %5546 = add i64 %5544, -460
  %5547 = add i64 %5543, 6
  store i64 %5547, i64* %3, align 8
  %5548 = inttoptr i64 %5546 to i32*
  %5549 = load i32, i32* %5548, align 4
  %5550 = zext i32 %5549 to i64
  store i64 %5550, i64* %RDI.i129, align 8
  %5551 = sub i32 %5549, %5542
  %5552 = icmp ult i32 %5549, %5542
  %5553 = zext i1 %5552 to i8
  store i8 %5553, i8* %14, align 1
  %5554 = and i32 %5551, 255
  %5555 = tail call i32 @llvm.ctpop.i32(i32 %5554)
  %5556 = trunc i32 %5555 to i8
  %5557 = and i8 %5556, 1
  %5558 = xor i8 %5557, 1
  store i8 %5558, i8* %21, align 1
  %5559 = xor i32 %5542, %5549
  %5560 = xor i32 %5559, %5551
  %5561 = lshr i32 %5560, 4
  %5562 = trunc i32 %5561 to i8
  %5563 = and i8 %5562, 1
  store i8 %5563, i8* %26, align 1
  %5564 = icmp eq i32 %5551, 0
  %5565 = zext i1 %5564 to i8
  store i8 %5565, i8* %29, align 1
  %5566 = lshr i32 %5551, 31
  %5567 = trunc i32 %5566 to i8
  store i8 %5567, i8* %32, align 1
  %5568 = lshr i32 %5549, 31
  %5569 = lshr i32 %5542, 31
  %5570 = xor i32 %5569, %5568
  %5571 = xor i32 %5566, %5568
  %5572 = add nuw nsw i32 %5571, %5570
  %5573 = icmp eq i32 %5572, 2
  %5574 = zext i1 %5573 to i8
  store i8 %5574, i8* %38, align 1
  %5575 = icmp ne i8 %5567, 0
  %5576 = xor i1 %5575, %5573
  %.v448 = select i1 %5576, i64 14, i64 39
  %5577 = add i64 %5543, %.v448
  store i64 %5577, i64* %3, align 8
  br i1 %5576, label %block_41bd63, label %block_.L_41bd7c

block_41bd63:                                     ; preds = %routine_idivl__esi.exit1962
  %5578 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5578, i64* %RAX.i82, align 8
  %5579 = add i64 %5578, 72684
  %5580 = add i64 %5577, 14
  store i64 %5580, i64* %3, align 8
  %5581 = inttoptr i64 %5579 to i32*
  %5582 = load i32, i32* %5581, align 4
  %5583 = zext i32 %5582 to i64
  store i64 %5583, i64* %RCX.i2537, align 8
  %5584 = add i64 %5544, -464
  %5585 = add i64 %5577, 20
  store i64 %5585, i64* %3, align 8
  %5586 = inttoptr i64 %5584 to i32*
  store i32 %5582, i32* %5586, align 4
  %5587 = load i64, i64* %3, align 8
  %5588 = add i64 %5587, 39
  store i64 %5588, i64* %3, align 8
  br label %block_.L_41bd9e

block_.L_41bd7c:                                  ; preds = %routine_idivl__esi.exit1962
  store i64 32, i64* %RAX.i82, align 8
  %5589 = add i64 %5544, -88
  %5590 = add i64 %5577, 8
  store i64 %5590, i64* %3, align 8
  %5591 = inttoptr i64 %5589 to i32*
  %5592 = load i32, i32* %5591, align 4
  %5593 = add i32 %5592, 16
  %5594 = zext i32 %5593 to i64
  store i64 %5594, i64* %RCX.i2537, align 8
  %5595 = icmp ugt i32 %5592, -17
  %5596 = zext i1 %5595 to i8
  store i8 %5596, i8* %14, align 1
  %5597 = and i32 %5593, 255
  %5598 = tail call i32 @llvm.ctpop.i32(i32 %5597)
  %5599 = trunc i32 %5598 to i8
  %5600 = and i8 %5599, 1
  %5601 = xor i8 %5600, 1
  store i8 %5601, i8* %21, align 1
  %5602 = xor i32 %5592, 16
  %5603 = xor i32 %5602, %5593
  %5604 = lshr i32 %5603, 4
  %5605 = trunc i32 %5604 to i8
  %5606 = and i8 %5605, 1
  store i8 %5606, i8* %26, align 1
  %5607 = icmp eq i32 %5593, 0
  %5608 = zext i1 %5607 to i8
  store i8 %5608, i8* %29, align 1
  %5609 = lshr i32 %5593, 31
  %5610 = trunc i32 %5609 to i8
  store i8 %5610, i8* %32, align 1
  %5611 = lshr i32 %5592, 31
  %5612 = xor i32 %5609, %5611
  %5613 = add nuw nsw i32 %5612, %5609
  %5614 = icmp eq i32 %5613, 2
  %5615 = zext i1 %5614 to i8
  store i8 %5615, i8* %38, align 1
  %5616 = add i64 %5544, -468
  %5617 = add i64 %5577, 17
  store i64 %5617, i64* %3, align 8
  %5618 = inttoptr i64 %5616 to i32*
  store i32 32, i32* %5618, align 4
  %5619 = load i32, i32* %ECX.i2532, align 4
  %5620 = zext i32 %5619 to i64
  %5621 = load i64, i64* %3, align 8
  store i64 %5620, i64* %RAX.i82, align 8
  %5622 = sext i32 %5619 to i64
  %5623 = lshr i64 %5622, 32
  store i64 %5623, i64* %141, align 8
  %5624 = load i64, i64* %RBP.i, align 8
  %5625 = add i64 %5624, -468
  %5626 = add i64 %5621, 9
  store i64 %5626, i64* %3, align 8
  %5627 = inttoptr i64 %5625 to i32*
  %5628 = load i32, i32* %5627, align 4
  %5629 = zext i32 %5628 to i64
  store i64 %5629, i64* %RCX.i2537, align 8
  %5630 = add i64 %5621, 11
  store i64 %5630, i64* %3, align 8
  %5631 = sext i32 %5628 to i64
  %5632 = shl nuw i64 %5623, 32
  %5633 = or i64 %5632, %5620
  %5634 = sdiv i64 %5633, %5631
  %5635 = shl i64 %5634, 32
  %5636 = ashr exact i64 %5635, 32
  %5637 = icmp eq i64 %5634, %5636
  br i1 %5637, label %5640, label %5638

; <label>:5638:                                   ; preds = %block_.L_41bd7c
  %5639 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5630, %struct.Memory* %5545)
  %.pre243 = load i64, i64* %RBP.i, align 8
  %.pre244 = load i32, i32* %EAX.i1056, align 4
  %.pre245 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1923

; <label>:5640:                                   ; preds = %block_.L_41bd7c
  %5641 = srem i64 %5633, %5631
  %5642 = and i64 %5634, 4294967295
  store i64 %5642, i64* %RAX.i82, align 8
  %5643 = and i64 %5641, 4294967295
  store i64 %5643, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5644 = trunc i64 %5634 to i32
  br label %routine_idivl__ecx.exit1923

routine_idivl__ecx.exit1923:                      ; preds = %5640, %5638
  %5645 = phi i64 [ %.pre245, %5638 ], [ %5630, %5640 ]
  %5646 = phi i32 [ %.pre244, %5638 ], [ %5644, %5640 ]
  %5647 = phi i64 [ %.pre243, %5638 ], [ %5624, %5640 ]
  %5648 = phi %struct.Memory* [ %5639, %5638 ], [ %5545, %5640 ]
  %5649 = add i64 %5647, -464
  %5650 = add i64 %5645, 6
  store i64 %5650, i64* %3, align 8
  %5651 = inttoptr i64 %5649 to i32*
  store i32 %5646, i32* %5651, align 4
  %.pre246 = load i64, i64* %3, align 8
  br label %block_.L_41bd9e

block_.L_41bd9e:                                  ; preds = %routine_idivl__ecx.exit1923, %block_41bd63
  %5652 = phi i64 [ %.pre246, %routine_idivl__ecx.exit1923 ], [ %5588, %block_41bd63 ]
  %MEMORY.56 = phi %struct.Memory* [ %5648, %routine_idivl__ecx.exit1923 ], [ %5545, %block_41bd63 ]
  %5653 = load i64, i64* %RBP.i, align 8
  %5654 = add i64 %5653, -464
  %5655 = add i64 %5652, 6
  store i64 %5655, i64* %3, align 8
  %5656 = inttoptr i64 %5654 to i32*
  %5657 = load i32, i32* %5656, align 4
  %5658 = zext i32 %5657 to i64
  store i64 %5658, i64* %RAX.i82, align 8
  %5659 = add i64 %5653, -452
  %5660 = add i64 %5652, 12
  store i64 %5660, i64* %3, align 8
  %5661 = inttoptr i64 %5659 to i32*
  store i32 %5657, i32* %5661, align 4
  %.pre247 = load i64, i64* %3, align 8
  br label %block_.L_41bdaa

block_.L_41bdaa:                                  ; preds = %block_.L_41bd9e, %block_41bd18
  %5662 = phi i64 [ %.pre247, %block_.L_41bd9e ], [ %5471, %block_41bd18 ]
  %MEMORY.57 = phi %struct.Memory* [ %MEMORY.56, %block_.L_41bd9e ], [ %MEMORY.55, %block_41bd18 ]
  %5663 = load i64, i64* %RBP.i, align 8
  %5664 = add i64 %5663, -452
  %5665 = add i64 %5662, 6
  store i64 %5665, i64* %3, align 8
  %5666 = inttoptr i64 %5664 to i32*
  %5667 = load i32, i32* %5666, align 4
  %5668 = zext i32 %5667 to i64
  store i64 %5668, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i2537, align 8
  %5669 = add i64 %5663, -440
  %5670 = add i64 %5662, 17
  store i64 %5670, i64* %3, align 8
  %5671 = inttoptr i64 %5669 to i32*
  %5672 = load i32, i32* %5671, align 4
  %5673 = add i32 %5667, %5672
  %5674 = zext i32 %5673 to i64
  %5675 = icmp ult i32 %5673, %5672
  %5676 = icmp ult i32 %5673, %5667
  %5677 = or i1 %5675, %5676
  %5678 = zext i1 %5677 to i8
  store i8 %5678, i8* %14, align 1
  %5679 = and i32 %5673, 255
  %5680 = tail call i32 @llvm.ctpop.i32(i32 %5679)
  %5681 = trunc i32 %5680 to i8
  %5682 = and i8 %5681, 1
  %5683 = xor i8 %5682, 1
  store i8 %5683, i8* %21, align 1
  %5684 = xor i32 %5667, %5672
  %5685 = xor i32 %5684, %5673
  %5686 = lshr i32 %5685, 4
  %5687 = trunc i32 %5686 to i8
  %5688 = and i8 %5687, 1
  store i8 %5688, i8* %26, align 1
  %5689 = icmp eq i32 %5673, 0
  %5690 = zext i1 %5689 to i8
  store i8 %5690, i8* %29, align 1
  %5691 = lshr i32 %5673, 31
  %5692 = trunc i32 %5691 to i8
  store i8 %5692, i8* %32, align 1
  %5693 = lshr i32 %5672, 31
  %5694 = lshr i32 %5667, 31
  %5695 = xor i32 %5691, %5693
  %5696 = xor i32 %5691, %5694
  %5697 = add nuw nsw i32 %5695, %5696
  %5698 = icmp eq i32 %5697, 2
  %5699 = zext i1 %5698 to i8
  store i8 %5699, i8* %38, align 1
  store i64 %5674, i64* %RAX.i82, align 8
  %5700 = sext i32 %5673 to i64
  %5701 = lshr i64 %5700, 32
  store i64 %5701, i64* %141, align 8
  %5702 = add i64 %5662, 24
  store i64 %5702, i64* %3, align 8
  %5703 = shl nuw i64 %5701, 32
  %5704 = or i64 %5703, %5674
  %5705 = sdiv i64 %5704, 2
  %5706 = shl i64 %5705, 32
  %5707 = ashr exact i64 %5706, 32
  %5708 = icmp eq i64 %5705, %5707
  br i1 %5708, label %5711, label %5709

; <label>:5709:                                   ; preds = %block_.L_41bdaa
  %5710 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5702, %struct.Memory* %MEMORY.57)
  %.pre248 = load i64, i64* %RBP.i, align 8
  %.pre249 = load i32, i32* %EAX.i1056, align 4
  %.pre250 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1894

; <label>:5711:                                   ; preds = %block_.L_41bdaa
  %5712 = srem i64 %5704, 2
  %5713 = and i64 %5705, 4294967295
  store i64 %5713, i64* %RAX.i82, align 8
  %5714 = and i64 %5712, 4294967295
  store i64 %5714, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5715 = trunc i64 %5705 to i32
  br label %routine_idivl__ecx.exit1894

routine_idivl__ecx.exit1894:                      ; preds = %5711, %5709
  %5716 = phi i64 [ %.pre250, %5709 ], [ %5702, %5711 ]
  %5717 = phi i32 [ %.pre249, %5709 ], [ %5715, %5711 ]
  %5718 = phi i64 [ %.pre248, %5709 ], [ %5663, %5711 ]
  %5719 = phi %struct.Memory* [ %5710, %5709 ], [ %MEMORY.57, %5711 ]
  %5720 = add i64 %5718, -44
  %5721 = add i64 %5716, 3
  store i64 %5721, i64* %3, align 8
  %5722 = inttoptr i64 %5720 to i32*
  store i32 %5717, i32* %5722, align 4
  %5723 = load i64, i64* %3, align 8
  %5724 = add i64 %5723, 327
  br label %block_.L_41bf0c

block_.L_41bdca:                                  ; preds = %block_.L_41bc7f
  %5725 = add i64 %5252, 4
  store i64 %5725, i64* %3, align 8
  %5726 = load i32, i32* %5229, align 4
  %5727 = add i32 %5726, -3
  %5728 = icmp ult i32 %5726, 3
  %5729 = zext i1 %5728 to i8
  store i8 %5729, i8* %14, align 1
  %5730 = and i32 %5727, 255
  %5731 = tail call i32 @llvm.ctpop.i32(i32 %5730)
  %5732 = trunc i32 %5731 to i8
  %5733 = and i8 %5732, 1
  %5734 = xor i8 %5733, 1
  store i8 %5734, i8* %21, align 1
  %5735 = xor i32 %5727, %5726
  %5736 = lshr i32 %5735, 4
  %5737 = trunc i32 %5736 to i8
  %5738 = and i8 %5737, 1
  store i8 %5738, i8* %26, align 1
  %5739 = icmp eq i32 %5727, 0
  %5740 = zext i1 %5739 to i8
  store i8 %5740, i8* %29, align 1
  %5741 = lshr i32 %5727, 31
  %5742 = trunc i32 %5741 to i8
  store i8 %5742, i8* %32, align 1
  %5743 = lshr i32 %5726, 31
  %5744 = xor i32 %5741, %5743
  %5745 = add nuw nsw i32 %5744, %5743
  %5746 = icmp eq i32 %5745, 2
  %5747 = zext i1 %5746 to i8
  store i8 %5747, i8* %38, align 1
  %.v444 = select i1 %5739, i64 10, i64 317
  %5748 = add i64 %5252, %.v444
  store i64 %5748, i64* %3, align 8
  br i1 %5739, label %block_41bdd4, label %block_.L_41bf07

block_41bdd4:                                     ; preds = %block_.L_41bdca
  store i64 32, i64* %RAX.i82, align 8
  %5749 = add i64 %5225, -44
  %5750 = add i64 %5748, 8
  store i64 %5750, i64* %3, align 8
  %5751 = inttoptr i64 %5749 to i32*
  %5752 = load i32, i32* %5751, align 4
  %5753 = zext i32 %5752 to i64
  store i64 %5753, i64* %RCX.i2537, align 8
  %5754 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5754, i64* %RDX.i532, align 8
  %5755 = add i64 %5754, 72684
  %5756 = add i64 %5748, 22
  store i64 %5756, i64* %3, align 8
  %5757 = inttoptr i64 %5755 to i32*
  %5758 = load i32, i32* %5757, align 4
  %5759 = zext i32 %5758 to i64
  store i64 %5759, i64* %RSI.i1183, align 8
  %5760 = add i64 %5225, -84
  %5761 = add i64 %5748, 25
  store i64 %5761, i64* %3, align 8
  %5762 = inttoptr i64 %5760 to i32*
  %5763 = load i32, i32* %5762, align 4
  %5764 = add i32 %5763, 16
  %5765 = zext i32 %5764 to i64
  store i64 %5765, i64* %RDI.i129, align 8
  %5766 = icmp ugt i32 %5763, -17
  %5767 = zext i1 %5766 to i8
  store i8 %5767, i8* %14, align 1
  %5768 = and i32 %5764, 255
  %5769 = tail call i32 @llvm.ctpop.i32(i32 %5768)
  %5770 = trunc i32 %5769 to i8
  %5771 = and i8 %5770, 1
  %5772 = xor i8 %5771, 1
  store i8 %5772, i8* %21, align 1
  %5773 = xor i32 %5763, 16
  %5774 = xor i32 %5773, %5764
  %5775 = lshr i32 %5774, 4
  %5776 = trunc i32 %5775 to i8
  %5777 = and i8 %5776, 1
  store i8 %5777, i8* %26, align 1
  %5778 = icmp eq i32 %5764, 0
  %5779 = zext i1 %5778 to i8
  store i8 %5779, i8* %29, align 1
  %5780 = lshr i32 %5764, 31
  %5781 = trunc i32 %5780 to i8
  store i8 %5781, i8* %32, align 1
  %5782 = lshr i32 %5763, 31
  %5783 = xor i32 %5780, %5782
  %5784 = add nuw nsw i32 %5783, %5780
  %5785 = icmp eq i32 %5784, 2
  %5786 = zext i1 %5785 to i8
  store i8 %5786, i8* %38, align 1
  %5787 = add i64 %5225, -472
  %5788 = add i64 %5748, 34
  store i64 %5788, i64* %3, align 8
  %5789 = inttoptr i64 %5787 to i32*
  store i32 32, i32* %5789, align 4
  %5790 = load i32, i32* %EDI.i2217, align 4
  %5791 = zext i32 %5790 to i64
  %5792 = load i64, i64* %3, align 8
  store i64 %5791, i64* %RAX.i82, align 8
  %5793 = sext i32 %5790 to i64
  %5794 = lshr i64 %5793, 32
  store i64 %5794, i64* %141, align 8
  %5795 = load i64, i64* %RBP.i, align 8
  %5796 = add i64 %5795, -472
  %5797 = add i64 %5792, 9
  store i64 %5797, i64* %3, align 8
  %5798 = inttoptr i64 %5796 to i32*
  %5799 = load i32, i32* %5798, align 4
  %5800 = zext i32 %5799 to i64
  store i64 %5800, i64* %RDI.i129, align 8
  %5801 = add i64 %5792, 11
  store i64 %5801, i64* %3, align 8
  %5802 = sext i32 %5799 to i64
  %5803 = shl nuw i64 %5794, 32
  %5804 = or i64 %5803, %5791
  %5805 = sdiv i64 %5804, %5802
  %5806 = shl i64 %5805, 32
  %5807 = ashr exact i64 %5806, 32
  %5808 = icmp eq i64 %5805, %5807
  br i1 %5808, label %5811, label %5809

; <label>:5809:                                   ; preds = %block_41bdd4
  %5810 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5801, %struct.Memory* %MEMORY.54)
  %.pre251 = load i32, i32* %EAX.i1056, align 4
  %.pre252 = load i64, i64* %3, align 8
  %.pre253 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit1856

; <label>:5811:                                   ; preds = %block_41bdd4
  %5812 = srem i64 %5804, %5802
  %5813 = and i64 %5805, 4294967295
  store i64 %5813, i64* %RAX.i82, align 8
  %5814 = and i64 %5812, 4294967295
  store i64 %5814, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5815 = trunc i64 %5805 to i32
  br label %routine_idivl__edi.exit1856

routine_idivl__edi.exit1856:                      ; preds = %5811, %5809
  %5816 = phi i64 [ %.pre253, %5809 ], [ %5795, %5811 ]
  %5817 = phi i64 [ %.pre252, %5809 ], [ %5801, %5811 ]
  %5818 = phi i32 [ %.pre251, %5809 ], [ %5815, %5811 ]
  %5819 = phi %struct.Memory* [ %5810, %5809 ], [ %MEMORY.54, %5811 ]
  %5820 = load i32, i32* %ESI.i168, align 4
  %5821 = sub i32 %5820, %5818
  %5822 = icmp ult i32 %5820, %5818
  %5823 = zext i1 %5822 to i8
  store i8 %5823, i8* %14, align 1
  %5824 = and i32 %5821, 255
  %5825 = tail call i32 @llvm.ctpop.i32(i32 %5824)
  %5826 = trunc i32 %5825 to i8
  %5827 = and i8 %5826, 1
  %5828 = xor i8 %5827, 1
  store i8 %5828, i8* %21, align 1
  %5829 = xor i32 %5818, %5820
  %5830 = xor i32 %5829, %5821
  %5831 = lshr i32 %5830, 4
  %5832 = trunc i32 %5831 to i8
  %5833 = and i8 %5832, 1
  store i8 %5833, i8* %26, align 1
  %5834 = icmp eq i32 %5821, 0
  %5835 = zext i1 %5834 to i8
  store i8 %5835, i8* %29, align 1
  %5836 = lshr i32 %5821, 31
  %5837 = trunc i32 %5836 to i8
  store i8 %5837, i8* %32, align 1
  %5838 = lshr i32 %5820, 31
  %5839 = lshr i32 %5818, 31
  %5840 = xor i32 %5839, %5838
  %5841 = xor i32 %5836, %5838
  %5842 = add nuw nsw i32 %5841, %5840
  %5843 = icmp eq i32 %5842, 2
  %5844 = zext i1 %5843 to i8
  store i8 %5844, i8* %38, align 1
  %5845 = add i64 %5816, -476
  %5846 = load i32, i32* %ECX.i2532, align 4
  %5847 = add i64 %5817, 8
  store i64 %5847, i64* %3, align 8
  %5848 = inttoptr i64 %5845 to i32*
  store i32 %5846, i32* %5848, align 4
  %5849 = load i64, i64* %3, align 8
  %5850 = load i8, i8* %32, align 1
  %5851 = icmp ne i8 %5850, 0
  %5852 = load i8, i8* %38, align 1
  %5853 = icmp ne i8 %5852, 0
  %5854 = xor i1 %5851, %5853
  %.v513 = select i1 %5854, i64 6, i64 31
  %5855 = add i64 %5849, %.v513
  store i64 %5855, i64* %3, align 8
  br i1 %5854, label %block_41be0f, label %block_.L_41be28

block_41be0f:                                     ; preds = %routine_idivl__edi.exit1856
  %5856 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5856, i64* %RAX.i82, align 8
  %5857 = add i64 %5856, 72684
  %5858 = add i64 %5855, 14
  store i64 %5858, i64* %3, align 8
  %5859 = inttoptr i64 %5857 to i32*
  %5860 = load i32, i32* %5859, align 4
  %5861 = zext i32 %5860 to i64
  store i64 %5861, i64* %RCX.i2537, align 8
  %5862 = load i64, i64* %RBP.i, align 8
  %5863 = add i64 %5862, -480
  %5864 = add i64 %5855, 20
  store i64 %5864, i64* %3, align 8
  %5865 = inttoptr i64 %5863 to i32*
  store i32 %5860, i32* %5865, align 4
  %5866 = load i64, i64* %3, align 8
  %5867 = add i64 %5866, 39
  store i64 %5867, i64* %3, align 8
  br label %block_.L_41be4a

block_.L_41be28:                                  ; preds = %routine_idivl__edi.exit1856
  store i64 32, i64* %RAX.i82, align 8
  %5868 = load i64, i64* %RBP.i, align 8
  %5869 = add i64 %5868, -84
  %5870 = add i64 %5855, 8
  store i64 %5870, i64* %3, align 8
  %5871 = inttoptr i64 %5869 to i32*
  %5872 = load i32, i32* %5871, align 4
  %5873 = add i32 %5872, 16
  %5874 = zext i32 %5873 to i64
  store i64 %5874, i64* %RCX.i2537, align 8
  %5875 = icmp ugt i32 %5872, -17
  %5876 = zext i1 %5875 to i8
  store i8 %5876, i8* %14, align 1
  %5877 = and i32 %5873, 255
  %5878 = tail call i32 @llvm.ctpop.i32(i32 %5877)
  %5879 = trunc i32 %5878 to i8
  %5880 = and i8 %5879, 1
  %5881 = xor i8 %5880, 1
  store i8 %5881, i8* %21, align 1
  %5882 = xor i32 %5872, 16
  %5883 = xor i32 %5882, %5873
  %5884 = lshr i32 %5883, 4
  %5885 = trunc i32 %5884 to i8
  %5886 = and i8 %5885, 1
  store i8 %5886, i8* %26, align 1
  %5887 = icmp eq i32 %5873, 0
  %5888 = zext i1 %5887 to i8
  store i8 %5888, i8* %29, align 1
  %5889 = lshr i32 %5873, 31
  %5890 = trunc i32 %5889 to i8
  store i8 %5890, i8* %32, align 1
  %5891 = lshr i32 %5872, 31
  %5892 = xor i32 %5889, %5891
  %5893 = add nuw nsw i32 %5892, %5889
  %5894 = icmp eq i32 %5893, 2
  %5895 = zext i1 %5894 to i8
  store i8 %5895, i8* %38, align 1
  %5896 = add i64 %5868, -484
  %5897 = add i64 %5855, 17
  store i64 %5897, i64* %3, align 8
  %5898 = inttoptr i64 %5896 to i32*
  store i32 32, i32* %5898, align 4
  %5899 = load i32, i32* %ECX.i2532, align 4
  %5900 = zext i32 %5899 to i64
  %5901 = load i64, i64* %3, align 8
  store i64 %5900, i64* %RAX.i82, align 8
  %5902 = sext i32 %5899 to i64
  %5903 = lshr i64 %5902, 32
  store i64 %5903, i64* %141, align 8
  %5904 = load i64, i64* %RBP.i, align 8
  %5905 = add i64 %5904, -484
  %5906 = add i64 %5901, 9
  store i64 %5906, i64* %3, align 8
  %5907 = inttoptr i64 %5905 to i32*
  %5908 = load i32, i32* %5907, align 4
  %5909 = zext i32 %5908 to i64
  store i64 %5909, i64* %RCX.i2537, align 8
  %5910 = add i64 %5901, 11
  store i64 %5910, i64* %3, align 8
  %5911 = sext i32 %5908 to i64
  %5912 = shl nuw i64 %5903, 32
  %5913 = or i64 %5912, %5900
  %5914 = sdiv i64 %5913, %5911
  %5915 = shl i64 %5914, 32
  %5916 = ashr exact i64 %5915, 32
  %5917 = icmp eq i64 %5914, %5916
  br i1 %5917, label %5920, label %5918

; <label>:5918:                                   ; preds = %block_.L_41be28
  %5919 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5910, %struct.Memory* %5819)
  %.pre254 = load i64, i64* %RBP.i, align 8
  %.pre255 = load i32, i32* %EAX.i1056, align 4
  %.pre256 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1818

; <label>:5920:                                   ; preds = %block_.L_41be28
  %5921 = srem i64 %5913, %5911
  %5922 = and i64 %5914, 4294967295
  store i64 %5922, i64* %RAX.i82, align 8
  %5923 = and i64 %5921, 4294967295
  store i64 %5923, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5924 = trunc i64 %5914 to i32
  br label %routine_idivl__ecx.exit1818

routine_idivl__ecx.exit1818:                      ; preds = %5920, %5918
  %5925 = phi i64 [ %.pre256, %5918 ], [ %5910, %5920 ]
  %5926 = phi i32 [ %.pre255, %5918 ], [ %5924, %5920 ]
  %5927 = phi i64 [ %.pre254, %5918 ], [ %5904, %5920 ]
  %5928 = phi %struct.Memory* [ %5919, %5918 ], [ %5819, %5920 ]
  %5929 = add i64 %5927, -480
  %5930 = add i64 %5925, 6
  store i64 %5930, i64* %3, align 8
  %5931 = inttoptr i64 %5929 to i32*
  store i32 %5926, i32* %5931, align 4
  %.pre257 = load i64, i64* %3, align 8
  br label %block_.L_41be4a

block_.L_41be4a:                                  ; preds = %routine_idivl__ecx.exit1818, %block_41be0f
  %5932 = phi i64 [ %.pre257, %routine_idivl__ecx.exit1818 ], [ %5867, %block_41be0f ]
  %MEMORY.58 = phi %struct.Memory* [ %5928, %routine_idivl__ecx.exit1818 ], [ %5819, %block_41be0f ]
  %5933 = load i64, i64* %RBP.i, align 8
  %5934 = add i64 %5933, -480
  %5935 = add i64 %5932, 6
  store i64 %5935, i64* %3, align 8
  %5936 = inttoptr i64 %5934 to i32*
  %5937 = load i32, i32* %5936, align 4
  %5938 = zext i32 %5937 to i64
  store i64 %5938, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i2537, align 8
  %5939 = sub i32 0, %5937
  %5940 = icmp ne i32 %5937, 0
  %5941 = zext i1 %5940 to i8
  store i8 %5941, i8* %14, align 1
  %5942 = and i32 %5939, 255
  %5943 = tail call i32 @llvm.ctpop.i32(i32 %5942)
  %5944 = trunc i32 %5943 to i8
  %5945 = and i8 %5944, 1
  %5946 = xor i8 %5945, 1
  store i8 %5946, i8* %21, align 1
  %5947 = xor i32 %5937, %5939
  %5948 = lshr i32 %5947, 4
  %5949 = trunc i32 %5948 to i8
  %5950 = and i8 %5949, 1
  store i8 %5950, i8* %26, align 1
  %5951 = icmp eq i32 %5937, 0
  %5952 = zext i1 %5951 to i8
  store i8 %5952, i8* %29, align 1
  %5953 = lshr i32 %5939, 31
  %5954 = trunc i32 %5953 to i8
  store i8 %5954, i8* %32, align 1
  %5955 = lshr i32 %5937, 31
  %5956 = add nuw nsw i32 %5953, %5955
  %5957 = icmp eq i32 %5956, 2
  %5958 = zext i1 %5957 to i8
  store i8 %5958, i8* %38, align 1
  %5959 = icmp ne i8 %5954, 0
  %5960 = xor i1 %5959, %5957
  %5961 = or i1 %5951, %5960
  %.v445 = select i1 %5961, i64 29, i64 16
  %5962 = add i64 %5932, %.v445
  store i64 %5962, i64* %3, align 8
  br i1 %5961, label %block_.L_41be67, label %block_41be5a

block_41be5a:                                     ; preds = %block_.L_41be4a
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %5963 = add i64 %5933, -488
  %5964 = add i64 %5962, 8
  store i64 %5964, i64* %3, align 8
  %5965 = inttoptr i64 %5963 to i32*
  store i32 0, i32* %5965, align 4
  %5966 = load i64, i64* %3, align 8
  %5967 = add i64 %5966, 138
  store i64 %5967, i64* %3, align 8
  br label %block_.L_41beec

block_.L_41be67:                                  ; preds = %block_.L_41be4a
  store i64 32, i64* %RAX.i82, align 8
  %5968 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5968, i64* %RCX.i2537, align 8
  %5969 = add i64 %5968, 72684
  %5970 = add i64 %5962, 19
  store i64 %5970, i64* %3, align 8
  %5971 = inttoptr i64 %5969 to i32*
  %5972 = load i32, i32* %5971, align 4
  %5973 = zext i32 %5972 to i64
  store i64 %5973, i64* %RDX.i532, align 8
  %5974 = add i64 %5933, -84
  %5975 = add i64 %5962, 22
  store i64 %5975, i64* %3, align 8
  %5976 = inttoptr i64 %5974 to i32*
  %5977 = load i32, i32* %5976, align 4
  %5978 = add i32 %5977, 16
  %5979 = zext i32 %5978 to i64
  store i64 %5979, i64* %RSI.i1183, align 8
  %5980 = icmp ugt i32 %5977, -17
  %5981 = zext i1 %5980 to i8
  store i8 %5981, i8* %14, align 1
  %5982 = and i32 %5978, 255
  %5983 = tail call i32 @llvm.ctpop.i32(i32 %5982)
  %5984 = trunc i32 %5983 to i8
  %5985 = and i8 %5984, 1
  %5986 = xor i8 %5985, 1
  store i8 %5986, i8* %21, align 1
  %5987 = xor i32 %5977, 16
  %5988 = xor i32 %5987, %5978
  %5989 = lshr i32 %5988, 4
  %5990 = trunc i32 %5989 to i8
  %5991 = and i8 %5990, 1
  store i8 %5991, i8* %26, align 1
  %5992 = icmp eq i32 %5978, 0
  %5993 = zext i1 %5992 to i8
  store i8 %5993, i8* %29, align 1
  %5994 = lshr i32 %5978, 31
  %5995 = trunc i32 %5994 to i8
  store i8 %5995, i8* %32, align 1
  %5996 = lshr i32 %5977, 31
  %5997 = xor i32 %5994, %5996
  %5998 = add nuw nsw i32 %5997, %5994
  %5999 = icmp eq i32 %5998, 2
  %6000 = zext i1 %5999 to i8
  store i8 %6000, i8* %38, align 1
  %6001 = add i64 %5933, -492
  %6002 = add i64 %5962, 31
  store i64 %6002, i64* %3, align 8
  %6003 = inttoptr i64 %6001 to i32*
  store i32 32, i32* %6003, align 4
  %6004 = load i32, i32* %ESI.i168, align 4
  %6005 = zext i32 %6004 to i64
  %6006 = load i64, i64* %3, align 8
  store i64 %6005, i64* %RAX.i82, align 8
  %6007 = load i64, i64* %RBP.i, align 8
  %6008 = add i64 %6007, -496
  %6009 = load i32, i32* %EDX.i443, align 4
  %6010 = add i64 %6006, 8
  store i64 %6010, i64* %3, align 8
  %6011 = inttoptr i64 %6008 to i32*
  store i32 %6009, i32* %6011, align 4
  %6012 = load i64, i64* %3, align 8
  %6013 = load i32, i32* %EAX.i1056, align 8
  %6014 = sext i32 %6013 to i64
  %6015 = lshr i64 %6014, 32
  store i64 %6015, i64* %141, align 8
  %6016 = load i64, i64* %RBP.i, align 8
  %6017 = add i64 %6016, -492
  %6018 = add i64 %6012, 7
  store i64 %6018, i64* %3, align 8
  %6019 = inttoptr i64 %6017 to i32*
  %6020 = load i32, i32* %6019, align 4
  %6021 = zext i32 %6020 to i64
  store i64 %6021, i64* %RSI.i1183, align 8
  %6022 = add i64 %6012, 9
  store i64 %6022, i64* %3, align 8
  %6023 = zext i32 %6013 to i64
  %6024 = sext i32 %6020 to i64
  %6025 = shl nuw i64 %6015, 32
  %6026 = or i64 %6025, %6023
  %6027 = sdiv i64 %6026, %6024
  %6028 = shl i64 %6027, 32
  %6029 = ashr exact i64 %6028, 32
  %6030 = icmp eq i64 %6027, %6029
  br i1 %6030, label %6033, label %6031

; <label>:6031:                                   ; preds = %block_.L_41be67
  %6032 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6022, %struct.Memory* %MEMORY.58)
  %.pre258 = load i64, i64* %RBP.i, align 8
  %.pre259 = load i64, i64* %3, align 8
  %.pre260 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit1767

; <label>:6033:                                   ; preds = %block_.L_41be67
  %6034 = srem i64 %6026, %6024
  %6035 = and i64 %6027, 4294967295
  store i64 %6035, i64* %RAX.i82, align 8
  %6036 = and i64 %6034, 4294967295
  store i64 %6036, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %6037 = trunc i64 %6027 to i32
  br label %routine_idivl__esi.exit1767

routine_idivl__esi.exit1767:                      ; preds = %6033, %6031
  %6038 = phi i32 [ %.pre260, %6031 ], [ %6037, %6033 ]
  %6039 = phi i64 [ %.pre259, %6031 ], [ %6022, %6033 ]
  %6040 = phi i64 [ %.pre258, %6031 ], [ %6016, %6033 ]
  %6041 = phi %struct.Memory* [ %6032, %6031 ], [ %MEMORY.58, %6033 ]
  %6042 = add i64 %6040, -496
  %6043 = add i64 %6039, 6
  store i64 %6043, i64* %3, align 8
  %6044 = inttoptr i64 %6042 to i32*
  %6045 = load i32, i32* %6044, align 4
  %6046 = zext i32 %6045 to i64
  store i64 %6046, i64* %RDI.i129, align 8
  %6047 = sub i32 %6045, %6038
  %6048 = icmp ult i32 %6045, %6038
  %6049 = zext i1 %6048 to i8
  store i8 %6049, i8* %14, align 1
  %6050 = and i32 %6047, 255
  %6051 = tail call i32 @llvm.ctpop.i32(i32 %6050)
  %6052 = trunc i32 %6051 to i8
  %6053 = and i8 %6052, 1
  %6054 = xor i8 %6053, 1
  store i8 %6054, i8* %21, align 1
  %6055 = xor i32 %6038, %6045
  %6056 = xor i32 %6055, %6047
  %6057 = lshr i32 %6056, 4
  %6058 = trunc i32 %6057 to i8
  %6059 = and i8 %6058, 1
  store i8 %6059, i8* %26, align 1
  %6060 = icmp eq i32 %6047, 0
  %6061 = zext i1 %6060 to i8
  store i8 %6061, i8* %29, align 1
  %6062 = lshr i32 %6047, 31
  %6063 = trunc i32 %6062 to i8
  store i8 %6063, i8* %32, align 1
  %6064 = lshr i32 %6045, 31
  %6065 = lshr i32 %6038, 31
  %6066 = xor i32 %6065, %6064
  %6067 = xor i32 %6062, %6064
  %6068 = add nuw nsw i32 %6067, %6066
  %6069 = icmp eq i32 %6068, 2
  %6070 = zext i1 %6069 to i8
  store i8 %6070, i8* %38, align 1
  %6071 = icmp ne i8 %6063, 0
  %6072 = xor i1 %6071, %6069
  %.v446 = select i1 %6072, i64 14, i64 39
  %6073 = add i64 %6039, %.v446
  store i64 %6073, i64* %3, align 8
  br i1 %6072, label %block_41bea5, label %block_.L_41bebe

block_41bea5:                                     ; preds = %routine_idivl__esi.exit1767
  %6074 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6074, i64* %RAX.i82, align 8
  %6075 = add i64 %6074, 72684
  %6076 = add i64 %6073, 14
  store i64 %6076, i64* %3, align 8
  %6077 = inttoptr i64 %6075 to i32*
  %6078 = load i32, i32* %6077, align 4
  %6079 = zext i32 %6078 to i64
  store i64 %6079, i64* %RCX.i2537, align 8
  %6080 = add i64 %6040, -500
  %6081 = add i64 %6073, 20
  store i64 %6081, i64* %3, align 8
  %6082 = inttoptr i64 %6080 to i32*
  store i32 %6078, i32* %6082, align 4
  %6083 = load i64, i64* %3, align 8
  %6084 = add i64 %6083, 39
  store i64 %6084, i64* %3, align 8
  br label %block_.L_41bee0

block_.L_41bebe:                                  ; preds = %routine_idivl__esi.exit1767
  store i64 32, i64* %RAX.i82, align 8
  %6085 = add i64 %6040, -84
  %6086 = add i64 %6073, 8
  store i64 %6086, i64* %3, align 8
  %6087 = inttoptr i64 %6085 to i32*
  %6088 = load i32, i32* %6087, align 4
  %6089 = add i32 %6088, 16
  %6090 = zext i32 %6089 to i64
  store i64 %6090, i64* %RCX.i2537, align 8
  %6091 = icmp ugt i32 %6088, -17
  %6092 = zext i1 %6091 to i8
  store i8 %6092, i8* %14, align 1
  %6093 = and i32 %6089, 255
  %6094 = tail call i32 @llvm.ctpop.i32(i32 %6093)
  %6095 = trunc i32 %6094 to i8
  %6096 = and i8 %6095, 1
  %6097 = xor i8 %6096, 1
  store i8 %6097, i8* %21, align 1
  %6098 = xor i32 %6088, 16
  %6099 = xor i32 %6098, %6089
  %6100 = lshr i32 %6099, 4
  %6101 = trunc i32 %6100 to i8
  %6102 = and i8 %6101, 1
  store i8 %6102, i8* %26, align 1
  %6103 = icmp eq i32 %6089, 0
  %6104 = zext i1 %6103 to i8
  store i8 %6104, i8* %29, align 1
  %6105 = lshr i32 %6089, 31
  %6106 = trunc i32 %6105 to i8
  store i8 %6106, i8* %32, align 1
  %6107 = lshr i32 %6088, 31
  %6108 = xor i32 %6105, %6107
  %6109 = add nuw nsw i32 %6108, %6105
  %6110 = icmp eq i32 %6109, 2
  %6111 = zext i1 %6110 to i8
  store i8 %6111, i8* %38, align 1
  %6112 = add i64 %6040, -504
  %6113 = add i64 %6073, 17
  store i64 %6113, i64* %3, align 8
  %6114 = inttoptr i64 %6112 to i32*
  store i32 32, i32* %6114, align 4
  %6115 = load i32, i32* %ECX.i2532, align 4
  %6116 = zext i32 %6115 to i64
  %6117 = load i64, i64* %3, align 8
  store i64 %6116, i64* %RAX.i82, align 8
  %6118 = sext i32 %6115 to i64
  %6119 = lshr i64 %6118, 32
  store i64 %6119, i64* %141, align 8
  %6120 = load i64, i64* %RBP.i, align 8
  %6121 = add i64 %6120, -504
  %6122 = add i64 %6117, 9
  store i64 %6122, i64* %3, align 8
  %6123 = inttoptr i64 %6121 to i32*
  %6124 = load i32, i32* %6123, align 4
  %6125 = zext i32 %6124 to i64
  store i64 %6125, i64* %RCX.i2537, align 8
  %6126 = add i64 %6117, 11
  store i64 %6126, i64* %3, align 8
  %6127 = sext i32 %6124 to i64
  %6128 = shl nuw i64 %6119, 32
  %6129 = or i64 %6128, %6116
  %6130 = sdiv i64 %6129, %6127
  %6131 = shl i64 %6130, 32
  %6132 = ashr exact i64 %6131, 32
  %6133 = icmp eq i64 %6130, %6132
  br i1 %6133, label %6136, label %6134

; <label>:6134:                                   ; preds = %block_.L_41bebe
  %6135 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6126, %struct.Memory* %6041)
  %.pre261 = load i64, i64* %RBP.i, align 8
  %.pre262 = load i32, i32* %EAX.i1056, align 4
  %.pre263 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1729

; <label>:6136:                                   ; preds = %block_.L_41bebe
  %6137 = srem i64 %6129, %6127
  %6138 = and i64 %6130, 4294967295
  store i64 %6138, i64* %RAX.i82, align 8
  %6139 = and i64 %6137, 4294967295
  store i64 %6139, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %6140 = trunc i64 %6130 to i32
  br label %routine_idivl__ecx.exit1729

routine_idivl__ecx.exit1729:                      ; preds = %6136, %6134
  %6141 = phi i64 [ %.pre263, %6134 ], [ %6126, %6136 ]
  %6142 = phi i32 [ %.pre262, %6134 ], [ %6140, %6136 ]
  %6143 = phi i64 [ %.pre261, %6134 ], [ %6120, %6136 ]
  %6144 = phi %struct.Memory* [ %6135, %6134 ], [ %6041, %6136 ]
  %6145 = add i64 %6143, -500
  %6146 = add i64 %6141, 6
  store i64 %6146, i64* %3, align 8
  %6147 = inttoptr i64 %6145 to i32*
  store i32 %6142, i32* %6147, align 4
  %.pre264 = load i64, i64* %3, align 8
  br label %block_.L_41bee0

block_.L_41bee0:                                  ; preds = %routine_idivl__ecx.exit1729, %block_41bea5
  %6148 = phi i64 [ %.pre264, %routine_idivl__ecx.exit1729 ], [ %6084, %block_41bea5 ]
  %MEMORY.59 = phi %struct.Memory* [ %6144, %routine_idivl__ecx.exit1729 ], [ %6041, %block_41bea5 ]
  %6149 = load i64, i64* %RBP.i, align 8
  %6150 = add i64 %6149, -500
  %6151 = add i64 %6148, 6
  store i64 %6151, i64* %3, align 8
  %6152 = inttoptr i64 %6150 to i32*
  %6153 = load i32, i32* %6152, align 4
  %6154 = zext i32 %6153 to i64
  store i64 %6154, i64* %RAX.i82, align 8
  %6155 = add i64 %6149, -488
  %6156 = add i64 %6148, 12
  store i64 %6156, i64* %3, align 8
  %6157 = inttoptr i64 %6155 to i32*
  store i32 %6153, i32* %6157, align 4
  %.pre265 = load i64, i64* %3, align 8
  br label %block_.L_41beec

block_.L_41beec:                                  ; preds = %block_.L_41bee0, %block_41be5a
  %6158 = phi i64 [ %.pre265, %block_.L_41bee0 ], [ %5967, %block_41be5a ]
  %MEMORY.60 = phi %struct.Memory* [ %MEMORY.59, %block_.L_41bee0 ], [ %MEMORY.58, %block_41be5a ]
  %6159 = load i64, i64* %RBP.i, align 8
  %6160 = add i64 %6159, -488
  %6161 = add i64 %6158, 6
  store i64 %6161, i64* %3, align 8
  %6162 = inttoptr i64 %6160 to i32*
  %6163 = load i32, i32* %6162, align 4
  %6164 = zext i32 %6163 to i64
  store i64 %6164, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i2537, align 8
  %6165 = add i64 %6159, -476
  %6166 = add i64 %6158, 17
  store i64 %6166, i64* %3, align 8
  %6167 = inttoptr i64 %6165 to i32*
  %6168 = load i32, i32* %6167, align 4
  %6169 = add i32 %6163, %6168
  %6170 = zext i32 %6169 to i64
  %6171 = icmp ult i32 %6169, %6168
  %6172 = icmp ult i32 %6169, %6163
  %6173 = or i1 %6171, %6172
  %6174 = zext i1 %6173 to i8
  store i8 %6174, i8* %14, align 1
  %6175 = and i32 %6169, 255
  %6176 = tail call i32 @llvm.ctpop.i32(i32 %6175)
  %6177 = trunc i32 %6176 to i8
  %6178 = and i8 %6177, 1
  %6179 = xor i8 %6178, 1
  store i8 %6179, i8* %21, align 1
  %6180 = xor i32 %6163, %6168
  %6181 = xor i32 %6180, %6169
  %6182 = lshr i32 %6181, 4
  %6183 = trunc i32 %6182 to i8
  %6184 = and i8 %6183, 1
  store i8 %6184, i8* %26, align 1
  %6185 = icmp eq i32 %6169, 0
  %6186 = zext i1 %6185 to i8
  store i8 %6186, i8* %29, align 1
  %6187 = lshr i32 %6169, 31
  %6188 = trunc i32 %6187 to i8
  store i8 %6188, i8* %32, align 1
  %6189 = lshr i32 %6168, 31
  %6190 = lshr i32 %6163, 31
  %6191 = xor i32 %6187, %6189
  %6192 = xor i32 %6187, %6190
  %6193 = add nuw nsw i32 %6191, %6192
  %6194 = icmp eq i32 %6193, 2
  %6195 = zext i1 %6194 to i8
  store i8 %6195, i8* %38, align 1
  store i64 %6170, i64* %RAX.i82, align 8
  %6196 = sext i32 %6169 to i64
  %6197 = lshr i64 %6196, 32
  store i64 %6197, i64* %141, align 8
  %6198 = add i64 %6158, 24
  store i64 %6198, i64* %3, align 8
  %6199 = shl nuw i64 %6197, 32
  %6200 = or i64 %6199, %6170
  %6201 = sdiv i64 %6200, 2
  %6202 = shl i64 %6201, 32
  %6203 = ashr exact i64 %6202, 32
  %6204 = icmp eq i64 %6201, %6203
  br i1 %6204, label %6207, label %6205

; <label>:6205:                                   ; preds = %block_.L_41beec
  %6206 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6198, %struct.Memory* %MEMORY.60)
  %.pre266 = load i64, i64* %RBP.i, align 8
  %.pre267 = load i32, i32* %EAX.i1056, align 4
  %.pre268 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1696

; <label>:6207:                                   ; preds = %block_.L_41beec
  %6208 = srem i64 %6200, 2
  %6209 = and i64 %6201, 4294967295
  store i64 %6209, i64* %RAX.i82, align 8
  %6210 = and i64 %6208, 4294967295
  store i64 %6210, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %6211 = trunc i64 %6201 to i32
  br label %routine_idivl__ecx.exit1696

routine_idivl__ecx.exit1696:                      ; preds = %6207, %6205
  %6212 = phi i64 [ %.pre268, %6205 ], [ %6198, %6207 ]
  %6213 = phi i32 [ %.pre267, %6205 ], [ %6211, %6207 ]
  %6214 = phi i64 [ %.pre266, %6205 ], [ %6159, %6207 ]
  %6215 = phi %struct.Memory* [ %6206, %6205 ], [ %MEMORY.60, %6207 ]
  %6216 = add i64 %6214, -44
  %6217 = add i64 %6212, 3
  store i64 %6217, i64* %3, align 8
  %6218 = inttoptr i64 %6216 to i32*
  store i32 %6213, i32* %6218, align 4
  %.pre269 = load i64, i64* %3, align 8
  br label %block_.L_41bf07

block_.L_41bf07:                                  ; preds = %block_.L_41bdca, %routine_idivl__ecx.exit1696
  %6219 = phi i64 [ %5748, %block_.L_41bdca ], [ %.pre269, %routine_idivl__ecx.exit1696 ]
  %MEMORY.61 = phi %struct.Memory* [ %MEMORY.54, %block_.L_41bdca ], [ %6215, %routine_idivl__ecx.exit1696 ]
  %6220 = add i64 %6219, 5
  store i64 %6220, i64* %3, align 8
  br label %block_.L_41bf0c

block_.L_41bf0c:                                  ; preds = %block_.L_41bf07, %routine_idivl__ecx.exit1894
  %storemerge113 = phi i64 [ %5724, %routine_idivl__ecx.exit1894 ], [ %6220, %block_.L_41bf07 ]
  %MEMORY.62 = phi %struct.Memory* [ %5719, %routine_idivl__ecx.exit1894 ], [ %MEMORY.61, %block_.L_41bf07 ]
  %6221 = add i64 %storemerge113, 2797
  br label %block_.L_41c9f9

block_.L_41bf11:                                  ; preds = %block_.L_41b974
  %6222 = add i64 %3901, 4
  store i64 %6222, i64* %3, align 8
  %6223 = load i32, i32* %.pre-phi392, align 4
  %6224 = add i32 %6223, -2
  %6225 = icmp ult i32 %6223, 2
  %6226 = zext i1 %6225 to i8
  store i8 %6226, i8* %14, align 1
  %6227 = and i32 %6224, 255
  %6228 = tail call i32 @llvm.ctpop.i32(i32 %6227)
  %6229 = trunc i32 %6228 to i8
  %6230 = and i8 %6229, 1
  %6231 = xor i8 %6230, 1
  store i8 %6231, i8* %21, align 1
  %6232 = xor i32 %6224, %6223
  %6233 = lshr i32 %6232, 4
  %6234 = trunc i32 %6233 to i8
  %6235 = and i8 %6234, 1
  store i8 %6235, i8* %26, align 1
  %6236 = icmp eq i32 %6224, 0
  %6237 = zext i1 %6236 to i8
  store i8 %6237, i8* %29, align 1
  %6238 = lshr i32 %6224, 31
  %6239 = trunc i32 %6238 to i8
  store i8 %6239, i8* %32, align 1
  %6240 = lshr i32 %6223, 31
  %6241 = xor i32 %6238, %6240
  %6242 = add nuw nsw i32 %6241, %6240
  %6243 = icmp eq i32 %6242, 2
  %6244 = zext i1 %6243 to i8
  store i8 %6244, i8* %38, align 1
  %.v403 = select i1 %6236, i64 10, i64 1422
  %6245 = add i64 %3901, %.v403
  store i64 %6245, i64* %3, align 8
  br i1 %6236, label %block_41bf1b, label %block_.L_41c49f

block_41bf1b:                                     ; preds = %block_.L_41bf11
  %6246 = add i64 %297, -24
  %6247 = add i64 %6245, 7
  store i64 %6247, i64* %3, align 8
  %6248 = inttoptr i64 %6246 to i32*
  store i32 -2, i32* %6248, align 4
  %6249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i1674 = getelementptr inbounds %union.anon, %union.anon* %6249, i64 0, i32 0
  %ECX.i1669 = bitcast %union.anon* %6249 to i32*
  %.pre277 = load i64, i64* %3, align 8
  br label %block_.L_41bf22

block_.L_41bf22:                                  ; preds = %block_.L_41c08d, %block_41bf1b
  %6250 = phi i64 [ %6978, %block_.L_41c08d ], [ %.pre277, %block_41bf1b ]
  %6251 = load i64, i64* %RBP.i, align 8
  %6252 = add i64 %6251, -24
  %6253 = add i64 %6250, 4
  store i64 %6253, i64* %3, align 8
  %6254 = inttoptr i64 %6252 to i32*
  %6255 = load i32, i32* %6254, align 4
  %6256 = add i32 %6255, -4
  %6257 = icmp ult i32 %6255, 4
  %6258 = zext i1 %6257 to i8
  store i8 %6258, i8* %14, align 1
  %6259 = and i32 %6256, 255
  %6260 = tail call i32 @llvm.ctpop.i32(i32 %6259)
  %6261 = trunc i32 %6260 to i8
  %6262 = and i8 %6261, 1
  %6263 = xor i8 %6262, 1
  store i8 %6263, i8* %21, align 1
  %6264 = xor i32 %6256, %6255
  %6265 = lshr i32 %6264, 4
  %6266 = trunc i32 %6265 to i8
  %6267 = and i8 %6266, 1
  store i8 %6267, i8* %26, align 1
  %6268 = icmp eq i32 %6256, 0
  %6269 = zext i1 %6268 to i8
  store i8 %6269, i8* %29, align 1
  %6270 = lshr i32 %6256, 31
  %6271 = trunc i32 %6270 to i8
  store i8 %6271, i8* %32, align 1
  %6272 = lshr i32 %6255, 31
  %6273 = xor i32 %6270, %6272
  %6274 = add nuw nsw i32 %6273, %6272
  %6275 = icmp eq i32 %6274, 2
  %6276 = zext i1 %6275 to i8
  store i8 %6276, i8* %38, align 1
  %6277 = icmp ne i8 %6271, 0
  %6278 = xor i1 %6277, %6275
  %.v396 = select i1 %6278, i64 10, i64 393
  %6279 = add i64 %6250, %.v396
  %6280 = add i64 %6251, -44
  %6281 = add i64 %6279, 7
  store i64 %6281, i64* %3, align 8
  %6282 = inttoptr i64 %6280 to i32*
  store i32 0, i32* %6282, align 4
  %6283 = load i64, i64* %RBP.i, align 8
  br i1 %6278, label %block_41bf2c, label %block_.L_41c0ab

block_41bf2c:                                     ; preds = %block_.L_41bf22
  %6284 = add i64 %6283, -36
  %6285 = load i64, i64* %3, align 8
  %6286 = add i64 %6285, 3
  store i64 %6286, i64* %3, align 8
  %6287 = inttoptr i64 %6284 to i32*
  %6288 = load i32, i32* %6287, align 4
  %6289 = zext i32 %6288 to i64
  store i64 %6289, i64* %RAX.i82, align 8
  %6290 = add i64 %6283, -16
  %6291 = add i64 %6285, 6
  store i64 %6291, i64* %3, align 8
  %6292 = inttoptr i64 %6290 to i32*
  %6293 = load i32, i32* %6292, align 4
  %6294 = zext i32 %6293 to i64
  store i64 %6294, i64* %RCX.i1674, align 8
  %6295 = add i64 %6283, -24
  %6296 = add i64 %6285, 9
  store i64 %6296, i64* %3, align 8
  %6297 = inttoptr i64 %6295 to i32*
  %6298 = load i32, i32* %6297, align 4
  %6299 = add i32 %6298, %6293
  %6300 = zext i32 %6299 to i64
  store i64 %6300, i64* %RCX.i1674, align 8
  %6301 = lshr i32 %6299, 31
  %6302 = sub i32 %6288, %6299
  %6303 = icmp ult i32 %6288, %6299
  %6304 = zext i1 %6303 to i8
  store i8 %6304, i8* %14, align 1
  %6305 = and i32 %6302, 255
  %6306 = tail call i32 @llvm.ctpop.i32(i32 %6305)
  %6307 = trunc i32 %6306 to i8
  %6308 = and i8 %6307, 1
  %6309 = xor i8 %6308, 1
  store i8 %6309, i8* %21, align 1
  %6310 = xor i32 %6299, %6288
  %6311 = xor i32 %6310, %6302
  %6312 = lshr i32 %6311, 4
  %6313 = trunc i32 %6312 to i8
  %6314 = and i8 %6313, 1
  store i8 %6314, i8* %26, align 1
  %6315 = icmp eq i32 %6302, 0
  %6316 = zext i1 %6315 to i8
  store i8 %6316, i8* %29, align 1
  %6317 = lshr i32 %6302, 31
  %6318 = trunc i32 %6317 to i8
  store i8 %6318, i8* %32, align 1
  %6319 = lshr i32 %6288, 31
  %6320 = xor i32 %6301, %6319
  %6321 = xor i32 %6317, %6319
  %6322 = add nuw nsw i32 %6321, %6320
  %6323 = icmp eq i32 %6322, 2
  %6324 = zext i1 %6323 to i8
  store i8 %6324, i8* %38, align 1
  %6325 = icmp ne i8 %6318, 0
  %6326 = xor i1 %6325, %6323
  %.v433 = select i1 %6326, i64 17, i64 31
  %6327 = add i64 %6285, %.v433
  %6328 = add i64 %6327, 3
  store i64 %6328, i64* %3, align 8
  br i1 %6326, label %block_41bf44, label %block_.L_41bf52

block_41bf44:                                     ; preds = %block_41bf2c
  %6329 = load i32, i32* %6287, align 4
  %6330 = zext i32 %6329 to i64
  store i64 %6330, i64* %RAX.i82, align 8
  %6331 = add i64 %6283, -508
  %6332 = add i64 %6327, 9
  store i64 %6332, i64* %3, align 8
  %6333 = inttoptr i64 %6331 to i32*
  store i32 %6329, i32* %6333, align 4
  %6334 = load i64, i64* %3, align 8
  %6335 = add i64 %6334, 17
  store i64 %6335, i64* %3, align 8
  br label %block_.L_41bf5e

block_.L_41bf52:                                  ; preds = %block_41bf2c
  %6336 = load i32, i32* %6292, align 4
  %6337 = zext i32 %6336 to i64
  store i64 %6337, i64* %RAX.i82, align 8
  %6338 = add i64 %6327, 6
  store i64 %6338, i64* %3, align 8
  %6339 = load i32, i32* %6297, align 4
  %6340 = add i32 %6339, %6336
  %6341 = zext i32 %6340 to i64
  store i64 %6341, i64* %RAX.i82, align 8
  %6342 = icmp ult i32 %6340, %6336
  %6343 = icmp ult i32 %6340, %6339
  %6344 = or i1 %6342, %6343
  %6345 = zext i1 %6344 to i8
  store i8 %6345, i8* %14, align 1
  %6346 = and i32 %6340, 255
  %6347 = tail call i32 @llvm.ctpop.i32(i32 %6346)
  %6348 = trunc i32 %6347 to i8
  %6349 = and i8 %6348, 1
  %6350 = xor i8 %6349, 1
  store i8 %6350, i8* %21, align 1
  %6351 = xor i32 %6339, %6336
  %6352 = xor i32 %6351, %6340
  %6353 = lshr i32 %6352, 4
  %6354 = trunc i32 %6353 to i8
  %6355 = and i8 %6354, 1
  store i8 %6355, i8* %26, align 1
  %6356 = icmp eq i32 %6340, 0
  %6357 = zext i1 %6356 to i8
  store i8 %6357, i8* %29, align 1
  %6358 = lshr i32 %6340, 31
  %6359 = trunc i32 %6358 to i8
  store i8 %6359, i8* %32, align 1
  %6360 = lshr i32 %6336, 31
  %6361 = lshr i32 %6339, 31
  %6362 = xor i32 %6358, %6360
  %6363 = xor i32 %6358, %6361
  %6364 = add nuw nsw i32 %6362, %6363
  %6365 = icmp eq i32 %6364, 2
  %6366 = zext i1 %6365 to i8
  store i8 %6366, i8* %38, align 1
  %6367 = add i64 %6283, -508
  %6368 = add i64 %6327, 12
  store i64 %6368, i64* %3, align 8
  %6369 = inttoptr i64 %6367 to i32*
  store i32 %6340, i32* %6369, align 4
  %.pre331 = load i64, i64* %3, align 8
  br label %block_.L_41bf5e

block_.L_41bf5e:                                  ; preds = %block_.L_41bf52, %block_41bf44
  %6370 = phi i64 [ %.pre331, %block_.L_41bf52 ], [ %6335, %block_41bf44 ]
  %6371 = load i64, i64* %RBP.i, align 8
  %6372 = add i64 %6371, -508
  %6373 = add i64 %6370, 6
  store i64 %6373, i64* %3, align 8
  %6374 = inttoptr i64 %6372 to i32*
  %6375 = load i32, i32* %6374, align 4
  %6376 = zext i32 %6375 to i64
  store i64 %6376, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i1674, align 8
  %6377 = sub i32 0, %6375
  %6378 = icmp ne i32 %6375, 0
  %6379 = zext i1 %6378 to i8
  store i8 %6379, i8* %14, align 1
  %6380 = and i32 %6377, 255
  %6381 = tail call i32 @llvm.ctpop.i32(i32 %6380)
  %6382 = trunc i32 %6381 to i8
  %6383 = and i8 %6382, 1
  %6384 = xor i8 %6383, 1
  store i8 %6384, i8* %21, align 1
  %6385 = xor i32 %6375, %6377
  %6386 = lshr i32 %6385, 4
  %6387 = trunc i32 %6386 to i8
  %6388 = and i8 %6387, 1
  store i8 %6388, i8* %26, align 1
  %6389 = icmp eq i32 %6375, 0
  %6390 = zext i1 %6389 to i8
  store i8 %6390, i8* %29, align 1
  %6391 = lshr i32 %6377, 31
  %6392 = trunc i32 %6391 to i8
  store i8 %6392, i8* %32, align 1
  %6393 = lshr i32 %6375, 31
  %6394 = add nuw nsw i32 %6391, %6393
  %6395 = icmp eq i32 %6394, 2
  %6396 = zext i1 %6395 to i8
  store i8 %6396, i8* %38, align 1
  %6397 = icmp ne i8 %6392, 0
  %6398 = xor i1 %6397, %6395
  %6399 = or i1 %6389, %6398
  %.v434 = select i1 %6399, i64 29, i64 16
  %6400 = add i64 %6370, %.v434
  store i64 %6400, i64* %3, align 8
  br i1 %6399, label %block_.L_41bf7b, label %block_41bf6e

block_41bf6e:                                     ; preds = %block_.L_41bf5e
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %6401 = add i64 %6371, -512
  %6402 = add i64 %6400, 8
  store i64 %6402, i64* %3, align 8
  %6403 = inttoptr i64 %6401 to i32*
  store i32 0, i32* %6403, align 4
  %6404 = load i64, i64* %3, align 8
  %6405 = add i64 %6404, 60
  store i64 %6405, i64* %3, align 8
  br label %block_.L_41bfb2

block_.L_41bf7b:                                  ; preds = %block_.L_41bf5e
  %6406 = add i64 %6371, -36
  %6407 = add i64 %6400, 3
  store i64 %6407, i64* %3, align 8
  %6408 = inttoptr i64 %6406 to i32*
  %6409 = load i32, i32* %6408, align 4
  %6410 = zext i32 %6409 to i64
  store i64 %6410, i64* %RAX.i82, align 8
  %6411 = add i64 %6371, -16
  %6412 = add i64 %6400, 6
  store i64 %6412, i64* %3, align 8
  %6413 = inttoptr i64 %6411 to i32*
  %6414 = load i32, i32* %6413, align 4
  %6415 = zext i32 %6414 to i64
  store i64 %6415, i64* %RCX.i1674, align 8
  %6416 = add i64 %6371, -24
  %6417 = add i64 %6400, 9
  store i64 %6417, i64* %3, align 8
  %6418 = inttoptr i64 %6416 to i32*
  %6419 = load i32, i32* %6418, align 4
  %6420 = add i32 %6419, %6414
  %6421 = zext i32 %6420 to i64
  store i64 %6421, i64* %RCX.i1674, align 8
  %6422 = lshr i32 %6420, 31
  %6423 = sub i32 %6409, %6420
  %6424 = icmp ult i32 %6409, %6420
  %6425 = zext i1 %6424 to i8
  store i8 %6425, i8* %14, align 1
  %6426 = and i32 %6423, 255
  %6427 = tail call i32 @llvm.ctpop.i32(i32 %6426)
  %6428 = trunc i32 %6427 to i8
  %6429 = and i8 %6428, 1
  %6430 = xor i8 %6429, 1
  store i8 %6430, i8* %21, align 1
  %6431 = xor i32 %6420, %6409
  %6432 = xor i32 %6431, %6423
  %6433 = lshr i32 %6432, 4
  %6434 = trunc i32 %6433 to i8
  %6435 = and i8 %6434, 1
  store i8 %6435, i8* %26, align 1
  %6436 = icmp eq i32 %6423, 0
  %6437 = zext i1 %6436 to i8
  store i8 %6437, i8* %29, align 1
  %6438 = lshr i32 %6423, 31
  %6439 = trunc i32 %6438 to i8
  store i8 %6439, i8* %32, align 1
  %6440 = lshr i32 %6409, 31
  %6441 = xor i32 %6422, %6440
  %6442 = xor i32 %6438, %6440
  %6443 = add nuw nsw i32 %6442, %6441
  %6444 = icmp eq i32 %6443, 2
  %6445 = zext i1 %6444 to i8
  store i8 %6445, i8* %38, align 1
  %6446 = icmp ne i8 %6439, 0
  %6447 = xor i1 %6446, %6444
  %.v439 = select i1 %6447, i64 17, i64 31
  %6448 = add i64 %6400, %.v439
  %6449 = add i64 %6448, 3
  store i64 %6449, i64* %3, align 8
  br i1 %6447, label %block_41bf8c, label %block_.L_41bf9a

block_41bf8c:                                     ; preds = %block_.L_41bf7b
  %6450 = load i32, i32* %6408, align 4
  %6451 = zext i32 %6450 to i64
  store i64 %6451, i64* %RAX.i82, align 8
  %6452 = add i64 %6371, -516
  %6453 = add i64 %6448, 9
  store i64 %6453, i64* %3, align 8
  %6454 = inttoptr i64 %6452 to i32*
  store i32 %6450, i32* %6454, align 4
  %6455 = load i64, i64* %3, align 8
  %6456 = add i64 %6455, 17
  store i64 %6456, i64* %3, align 8
  br label %block_.L_41bfa6

block_.L_41bf9a:                                  ; preds = %block_.L_41bf7b
  %6457 = load i32, i32* %6413, align 4
  %6458 = zext i32 %6457 to i64
  store i64 %6458, i64* %RAX.i82, align 8
  %6459 = add i64 %6448, 6
  store i64 %6459, i64* %3, align 8
  %6460 = load i32, i32* %6418, align 4
  %6461 = add i32 %6460, %6457
  %6462 = zext i32 %6461 to i64
  store i64 %6462, i64* %RAX.i82, align 8
  %6463 = icmp ult i32 %6461, %6457
  %6464 = icmp ult i32 %6461, %6460
  %6465 = or i1 %6463, %6464
  %6466 = zext i1 %6465 to i8
  store i8 %6466, i8* %14, align 1
  %6467 = and i32 %6461, 255
  %6468 = tail call i32 @llvm.ctpop.i32(i32 %6467)
  %6469 = trunc i32 %6468 to i8
  %6470 = and i8 %6469, 1
  %6471 = xor i8 %6470, 1
  store i8 %6471, i8* %21, align 1
  %6472 = xor i32 %6460, %6457
  %6473 = xor i32 %6472, %6461
  %6474 = lshr i32 %6473, 4
  %6475 = trunc i32 %6474 to i8
  %6476 = and i8 %6475, 1
  store i8 %6476, i8* %26, align 1
  %6477 = icmp eq i32 %6461, 0
  %6478 = zext i1 %6477 to i8
  store i8 %6478, i8* %29, align 1
  %6479 = lshr i32 %6461, 31
  %6480 = trunc i32 %6479 to i8
  store i8 %6480, i8* %32, align 1
  %6481 = lshr i32 %6457, 31
  %6482 = lshr i32 %6460, 31
  %6483 = xor i32 %6479, %6481
  %6484 = xor i32 %6479, %6482
  %6485 = add nuw nsw i32 %6483, %6484
  %6486 = icmp eq i32 %6485, 2
  %6487 = zext i1 %6486 to i8
  store i8 %6487, i8* %38, align 1
  %6488 = add i64 %6371, -516
  %6489 = add i64 %6448, 12
  store i64 %6489, i64* %3, align 8
  %6490 = inttoptr i64 %6488 to i32*
  store i32 %6461, i32* %6490, align 4
  %.pre332 = load i64, i64* %3, align 8
  br label %block_.L_41bfa6

block_.L_41bfa6:                                  ; preds = %block_.L_41bf9a, %block_41bf8c
  %6491 = phi i64 [ %.pre332, %block_.L_41bf9a ], [ %6456, %block_41bf8c ]
  %6492 = load i64, i64* %RBP.i, align 8
  %6493 = add i64 %6492, -516
  %6494 = add i64 %6491, 6
  store i64 %6494, i64* %3, align 8
  %6495 = inttoptr i64 %6493 to i32*
  %6496 = load i32, i32* %6495, align 4
  %6497 = zext i32 %6496 to i64
  store i64 %6497, i64* %RAX.i82, align 8
  %6498 = add i64 %6492, -512
  %6499 = add i64 %6491, 12
  store i64 %6499, i64* %3, align 8
  %6500 = inttoptr i64 %6498 to i32*
  store i32 %6496, i32* %6500, align 4
  %.pre333 = load i64, i64* %3, align 8
  br label %block_.L_41bfb2

block_.L_41bfb2:                                  ; preds = %block_.L_41bfa6, %block_41bf6e
  %6501 = phi i64 [ %.pre333, %block_.L_41bfa6 ], [ %6405, %block_41bf6e ]
  %6502 = load i64, i64* %RBP.i, align 8
  %6503 = add i64 %6502, -512
  %6504 = add i64 %6501, 6
  store i64 %6504, i64* %3, align 8
  %6505 = inttoptr i64 %6503 to i32*
  %6506 = load i32, i32* %6505, align 4
  %6507 = zext i32 %6506 to i64
  store i64 %6507, i64* %RAX.i82, align 8
  %6508 = add i64 %6502, -56
  %6509 = add i64 %6501, 9
  store i64 %6509, i64* %3, align 8
  %6510 = inttoptr i64 %6508 to i32*
  store i32 %6506, i32* %6510, align 4
  %6511 = load i64, i64* %RBP.i, align 8
  %6512 = add i64 %6511, -32
  %6513 = load i64, i64* %3, align 8
  %6514 = add i64 %6513, 7
  store i64 %6514, i64* %3, align 8
  %6515 = inttoptr i64 %6512 to i32*
  store i32 -2, i32* %6515, align 4
  %.pre334 = load i64, i64* %3, align 8
  br label %block_.L_41bfc2

block_.L_41bfc2:                                  ; preds = %block_.L_41c04b, %block_.L_41bfb2
  %6516 = phi i64 [ %6909, %block_.L_41c04b ], [ %.pre334, %block_.L_41bfb2 ]
  %6517 = load i64, i64* %RBP.i, align 8
  %6518 = add i64 %6517, -32
  %6519 = add i64 %6516, 4
  store i64 %6519, i64* %3, align 8
  %6520 = inttoptr i64 %6518 to i32*
  %6521 = load i32, i32* %6520, align 4
  %6522 = add i32 %6521, -4
  %6523 = icmp ult i32 %6521, 4
  %6524 = zext i1 %6523 to i8
  store i8 %6524, i8* %14, align 1
  %6525 = and i32 %6522, 255
  %6526 = tail call i32 @llvm.ctpop.i32(i32 %6525)
  %6527 = trunc i32 %6526 to i8
  %6528 = and i8 %6527, 1
  %6529 = xor i8 %6528, 1
  store i8 %6529, i8* %21, align 1
  %6530 = xor i32 %6522, %6521
  %6531 = lshr i32 %6530, 4
  %6532 = trunc i32 %6531 to i8
  %6533 = and i8 %6532, 1
  store i8 %6533, i8* %26, align 1
  %6534 = icmp eq i32 %6522, 0
  %6535 = zext i1 %6534 to i8
  store i8 %6535, i8* %29, align 1
  %6536 = lshr i32 %6522, 31
  %6537 = trunc i32 %6536 to i8
  store i8 %6537, i8* %32, align 1
  %6538 = lshr i32 %6521, 31
  %6539 = xor i32 %6536, %6538
  %6540 = add nuw nsw i32 %6539, %6538
  %6541 = icmp eq i32 %6540, 2
  %6542 = zext i1 %6541 to i8
  store i8 %6542, i8* %38, align 1
  %6543 = icmp ne i8 %6537, 0
  %6544 = xor i1 %6543, %6541
  %.v435 = select i1 %6544, i64 10, i64 203
  %6545 = add i64 %6516, %.v435
  store i64 %6545, i64* %3, align 8
  br i1 %6544, label %block_41bfcc, label %block_.L_41c08d

block_41bfcc:                                     ; preds = %block_.L_41bfc2
  %6546 = add i64 %6517, -40
  %6547 = add i64 %6545, 3
  store i64 %6547, i64* %3, align 8
  %6548 = inttoptr i64 %6546 to i32*
  %6549 = load i32, i32* %6548, align 4
  %6550 = zext i32 %6549 to i64
  store i64 %6550, i64* %RAX.i82, align 8
  %6551 = add i64 %6517, -12
  %6552 = add i64 %6545, 6
  store i64 %6552, i64* %3, align 8
  %6553 = inttoptr i64 %6551 to i32*
  %6554 = load i32, i32* %6553, align 4
  %6555 = zext i32 %6554 to i64
  store i64 %6555, i64* %RCX.i1674, align 8
  %6556 = add i64 %6545, 9
  store i64 %6556, i64* %3, align 8
  %6557 = load i32, i32* %6520, align 4
  %6558 = add i32 %6557, %6554
  %6559 = zext i32 %6558 to i64
  store i64 %6559, i64* %RCX.i1674, align 8
  %6560 = lshr i32 %6558, 31
  %6561 = sub i32 %6549, %6558
  %6562 = icmp ult i32 %6549, %6558
  %6563 = zext i1 %6562 to i8
  store i8 %6563, i8* %14, align 1
  %6564 = and i32 %6561, 255
  %6565 = tail call i32 @llvm.ctpop.i32(i32 %6564)
  %6566 = trunc i32 %6565 to i8
  %6567 = and i8 %6566, 1
  %6568 = xor i8 %6567, 1
  store i8 %6568, i8* %21, align 1
  %6569 = xor i32 %6558, %6549
  %6570 = xor i32 %6569, %6561
  %6571 = lshr i32 %6570, 4
  %6572 = trunc i32 %6571 to i8
  %6573 = and i8 %6572, 1
  store i8 %6573, i8* %26, align 1
  %6574 = icmp eq i32 %6561, 0
  %6575 = zext i1 %6574 to i8
  store i8 %6575, i8* %29, align 1
  %6576 = lshr i32 %6561, 31
  %6577 = trunc i32 %6576 to i8
  store i8 %6577, i8* %32, align 1
  %6578 = lshr i32 %6549, 31
  %6579 = xor i32 %6560, %6578
  %6580 = xor i32 %6576, %6578
  %6581 = add nuw nsw i32 %6580, %6579
  %6582 = icmp eq i32 %6581, 2
  %6583 = zext i1 %6582 to i8
  store i8 %6583, i8* %38, align 1
  %6584 = icmp ne i8 %6577, 0
  %6585 = xor i1 %6584, %6582
  %.v436 = select i1 %6585, i64 17, i64 31
  %6586 = add i64 %6545, %.v436
  %6587 = add i64 %6586, 3
  store i64 %6587, i64* %3, align 8
  br i1 %6585, label %block_41bfdd, label %block_.L_41bfeb

block_41bfdd:                                     ; preds = %block_41bfcc
  %6588 = load i32, i32* %6548, align 4
  %6589 = zext i32 %6588 to i64
  store i64 %6589, i64* %RAX.i82, align 8
  %6590 = add i64 %6517, -520
  %6591 = add i64 %6586, 9
  store i64 %6591, i64* %3, align 8
  %6592 = inttoptr i64 %6590 to i32*
  store i32 %6588, i32* %6592, align 4
  %6593 = load i64, i64* %3, align 8
  %6594 = add i64 %6593, 17
  store i64 %6594, i64* %3, align 8
  br label %block_.L_41bff7

block_.L_41bfeb:                                  ; preds = %block_41bfcc
  %6595 = load i32, i32* %6553, align 4
  %6596 = zext i32 %6595 to i64
  store i64 %6596, i64* %RAX.i82, align 8
  %6597 = add i64 %6586, 6
  store i64 %6597, i64* %3, align 8
  %6598 = load i32, i32* %6520, align 4
  %6599 = add i32 %6598, %6595
  %6600 = zext i32 %6599 to i64
  store i64 %6600, i64* %RAX.i82, align 8
  %6601 = icmp ult i32 %6599, %6595
  %6602 = icmp ult i32 %6599, %6598
  %6603 = or i1 %6601, %6602
  %6604 = zext i1 %6603 to i8
  store i8 %6604, i8* %14, align 1
  %6605 = and i32 %6599, 255
  %6606 = tail call i32 @llvm.ctpop.i32(i32 %6605)
  %6607 = trunc i32 %6606 to i8
  %6608 = and i8 %6607, 1
  %6609 = xor i8 %6608, 1
  store i8 %6609, i8* %21, align 1
  %6610 = xor i32 %6598, %6595
  %6611 = xor i32 %6610, %6599
  %6612 = lshr i32 %6611, 4
  %6613 = trunc i32 %6612 to i8
  %6614 = and i8 %6613, 1
  store i8 %6614, i8* %26, align 1
  %6615 = icmp eq i32 %6599, 0
  %6616 = zext i1 %6615 to i8
  store i8 %6616, i8* %29, align 1
  %6617 = lshr i32 %6599, 31
  %6618 = trunc i32 %6617 to i8
  store i8 %6618, i8* %32, align 1
  %6619 = lshr i32 %6595, 31
  %6620 = lshr i32 %6598, 31
  %6621 = xor i32 %6617, %6619
  %6622 = xor i32 %6617, %6620
  %6623 = add nuw nsw i32 %6621, %6622
  %6624 = icmp eq i32 %6623, 2
  %6625 = zext i1 %6624 to i8
  store i8 %6625, i8* %38, align 1
  %6626 = add i64 %6517, -520
  %6627 = add i64 %6586, 12
  store i64 %6627, i64* %3, align 8
  %6628 = inttoptr i64 %6626 to i32*
  store i32 %6599, i32* %6628, align 4
  %.pre335 = load i64, i64* %3, align 8
  br label %block_.L_41bff7

block_.L_41bff7:                                  ; preds = %block_.L_41bfeb, %block_41bfdd
  %6629 = phi i64 [ %.pre335, %block_.L_41bfeb ], [ %6594, %block_41bfdd ]
  %6630 = load i64, i64* %RBP.i, align 8
  %6631 = add i64 %6630, -520
  %6632 = add i64 %6629, 6
  store i64 %6632, i64* %3, align 8
  %6633 = inttoptr i64 %6631 to i32*
  %6634 = load i32, i32* %6633, align 4
  %6635 = zext i32 %6634 to i64
  store i64 %6635, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i1674, align 8
  %6636 = sub i32 0, %6634
  %6637 = icmp ne i32 %6634, 0
  %6638 = zext i1 %6637 to i8
  store i8 %6638, i8* %14, align 1
  %6639 = and i32 %6636, 255
  %6640 = tail call i32 @llvm.ctpop.i32(i32 %6639)
  %6641 = trunc i32 %6640 to i8
  %6642 = and i8 %6641, 1
  %6643 = xor i8 %6642, 1
  store i8 %6643, i8* %21, align 1
  %6644 = xor i32 %6634, %6636
  %6645 = lshr i32 %6644, 4
  %6646 = trunc i32 %6645 to i8
  %6647 = and i8 %6646, 1
  store i8 %6647, i8* %26, align 1
  %6648 = icmp eq i32 %6634, 0
  %6649 = zext i1 %6648 to i8
  store i8 %6649, i8* %29, align 1
  %6650 = lshr i32 %6636, 31
  %6651 = trunc i32 %6650 to i8
  store i8 %6651, i8* %32, align 1
  %6652 = lshr i32 %6634, 31
  %6653 = add nuw nsw i32 %6650, %6652
  %6654 = icmp eq i32 %6653, 2
  %6655 = zext i1 %6654 to i8
  store i8 %6655, i8* %38, align 1
  %6656 = icmp ne i8 %6651, 0
  %6657 = xor i1 %6656, %6654
  %6658 = or i1 %6648, %6657
  %.v437 = select i1 %6658, i64 29, i64 16
  %6659 = add i64 %6629, %.v437
  store i64 %6659, i64* %3, align 8
  br i1 %6658, label %block_.L_41c014, label %block_41c007

block_41c007:                                     ; preds = %block_.L_41bff7
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %6660 = add i64 %6630, -524
  %6661 = add i64 %6659, 8
  store i64 %6661, i64* %3, align 8
  %6662 = inttoptr i64 %6660 to i32*
  store i32 0, i32* %6662, align 4
  %6663 = load i64, i64* %3, align 8
  %6664 = add i64 %6663, 60
  store i64 %6664, i64* %3, align 8
  br label %block_.L_41c04b

block_.L_41c014:                                  ; preds = %block_.L_41bff7
  %6665 = add i64 %6630, -40
  %6666 = add i64 %6659, 3
  store i64 %6666, i64* %3, align 8
  %6667 = inttoptr i64 %6665 to i32*
  %6668 = load i32, i32* %6667, align 4
  %6669 = zext i32 %6668 to i64
  store i64 %6669, i64* %RAX.i82, align 8
  %6670 = add i64 %6630, -12
  %6671 = add i64 %6659, 6
  store i64 %6671, i64* %3, align 8
  %6672 = inttoptr i64 %6670 to i32*
  %6673 = load i32, i32* %6672, align 4
  %6674 = zext i32 %6673 to i64
  store i64 %6674, i64* %RCX.i1674, align 8
  %6675 = add i64 %6630, -32
  %6676 = add i64 %6659, 9
  store i64 %6676, i64* %3, align 8
  %6677 = inttoptr i64 %6675 to i32*
  %6678 = load i32, i32* %6677, align 4
  %6679 = add i32 %6678, %6673
  %6680 = zext i32 %6679 to i64
  store i64 %6680, i64* %RCX.i1674, align 8
  %6681 = lshr i32 %6679, 31
  %6682 = sub i32 %6668, %6679
  %6683 = icmp ult i32 %6668, %6679
  %6684 = zext i1 %6683 to i8
  store i8 %6684, i8* %14, align 1
  %6685 = and i32 %6682, 255
  %6686 = tail call i32 @llvm.ctpop.i32(i32 %6685)
  %6687 = trunc i32 %6686 to i8
  %6688 = and i8 %6687, 1
  %6689 = xor i8 %6688, 1
  store i8 %6689, i8* %21, align 1
  %6690 = xor i32 %6679, %6668
  %6691 = xor i32 %6690, %6682
  %6692 = lshr i32 %6691, 4
  %6693 = trunc i32 %6692 to i8
  %6694 = and i8 %6693, 1
  store i8 %6694, i8* %26, align 1
  %6695 = icmp eq i32 %6682, 0
  %6696 = zext i1 %6695 to i8
  store i8 %6696, i8* %29, align 1
  %6697 = lshr i32 %6682, 31
  %6698 = trunc i32 %6697 to i8
  store i8 %6698, i8* %32, align 1
  %6699 = lshr i32 %6668, 31
  %6700 = xor i32 %6681, %6699
  %6701 = xor i32 %6697, %6699
  %6702 = add nuw nsw i32 %6701, %6700
  %6703 = icmp eq i32 %6702, 2
  %6704 = zext i1 %6703 to i8
  store i8 %6704, i8* %38, align 1
  %6705 = icmp ne i8 %6698, 0
  %6706 = xor i1 %6705, %6703
  %.v438 = select i1 %6706, i64 17, i64 31
  %6707 = add i64 %6659, %.v438
  %6708 = add i64 %6707, 3
  store i64 %6708, i64* %3, align 8
  br i1 %6706, label %block_41c025, label %block_.L_41c033

block_41c025:                                     ; preds = %block_.L_41c014
  %6709 = load i32, i32* %6667, align 4
  %6710 = zext i32 %6709 to i64
  store i64 %6710, i64* %RAX.i82, align 8
  %6711 = add i64 %6630, -528
  %6712 = add i64 %6707, 9
  store i64 %6712, i64* %3, align 8
  %6713 = inttoptr i64 %6711 to i32*
  store i32 %6709, i32* %6713, align 4
  %6714 = load i64, i64* %3, align 8
  %6715 = add i64 %6714, 17
  store i64 %6715, i64* %3, align 8
  br label %block_.L_41c03f

block_.L_41c033:                                  ; preds = %block_.L_41c014
  %6716 = load i32, i32* %6672, align 4
  %6717 = zext i32 %6716 to i64
  store i64 %6717, i64* %RAX.i82, align 8
  %6718 = add i64 %6707, 6
  store i64 %6718, i64* %3, align 8
  %6719 = load i32, i32* %6677, align 4
  %6720 = add i32 %6719, %6716
  %6721 = zext i32 %6720 to i64
  store i64 %6721, i64* %RAX.i82, align 8
  %6722 = icmp ult i32 %6720, %6716
  %6723 = icmp ult i32 %6720, %6719
  %6724 = or i1 %6722, %6723
  %6725 = zext i1 %6724 to i8
  store i8 %6725, i8* %14, align 1
  %6726 = and i32 %6720, 255
  %6727 = tail call i32 @llvm.ctpop.i32(i32 %6726)
  %6728 = trunc i32 %6727 to i8
  %6729 = and i8 %6728, 1
  %6730 = xor i8 %6729, 1
  store i8 %6730, i8* %21, align 1
  %6731 = xor i32 %6719, %6716
  %6732 = xor i32 %6731, %6720
  %6733 = lshr i32 %6732, 4
  %6734 = trunc i32 %6733 to i8
  %6735 = and i8 %6734, 1
  store i8 %6735, i8* %26, align 1
  %6736 = icmp eq i32 %6720, 0
  %6737 = zext i1 %6736 to i8
  store i8 %6737, i8* %29, align 1
  %6738 = lshr i32 %6720, 31
  %6739 = trunc i32 %6738 to i8
  store i8 %6739, i8* %32, align 1
  %6740 = lshr i32 %6716, 31
  %6741 = lshr i32 %6719, 31
  %6742 = xor i32 %6738, %6740
  %6743 = xor i32 %6738, %6741
  %6744 = add nuw nsw i32 %6742, %6743
  %6745 = icmp eq i32 %6744, 2
  %6746 = zext i1 %6745 to i8
  store i8 %6746, i8* %38, align 1
  %6747 = add i64 %6630, -528
  %6748 = add i64 %6707, 12
  store i64 %6748, i64* %3, align 8
  %6749 = inttoptr i64 %6747 to i32*
  store i32 %6720, i32* %6749, align 4
  %.pre336 = load i64, i64* %3, align 8
  br label %block_.L_41c03f

block_.L_41c03f:                                  ; preds = %block_.L_41c033, %block_41c025
  %6750 = phi i64 [ %.pre336, %block_.L_41c033 ], [ %6715, %block_41c025 ]
  %6751 = load i64, i64* %RBP.i, align 8
  %6752 = add i64 %6751, -528
  %6753 = add i64 %6750, 6
  store i64 %6753, i64* %3, align 8
  %6754 = inttoptr i64 %6752 to i32*
  %6755 = load i32, i32* %6754, align 4
  %6756 = zext i32 %6755 to i64
  store i64 %6756, i64* %RAX.i82, align 8
  %6757 = add i64 %6751, -524
  %6758 = add i64 %6750, 12
  store i64 %6758, i64* %3, align 8
  %6759 = inttoptr i64 %6757 to i32*
  store i32 %6755, i32* %6759, align 4
  %.pre337 = load i64, i64* %3, align 8
  br label %block_.L_41c04b

block_.L_41c04b:                                  ; preds = %block_.L_41c03f, %block_41c007
  %6760 = phi i64 [ %.pre337, %block_.L_41c03f ], [ %6664, %block_41c007 ]
  %6761 = load i64, i64* %RBP.i, align 8
  %6762 = add i64 %6761, -524
  %6763 = add i64 %6760, 6
  store i64 %6763, i64* %3, align 8
  %6764 = inttoptr i64 %6762 to i32*
  %6765 = load i32, i32* %6764, align 4
  %6766 = zext i32 %6765 to i64
  store i64 %6766, i64* %RAX.i82, align 8
  %6767 = add i64 %6761, -60
  %6768 = add i64 %6760, 9
  store i64 %6768, i64* %3, align 8
  %6769 = inttoptr i64 %6767 to i32*
  store i32 %6765, i32* %6769, align 4
  %6770 = load i64, i64* %RBP.i, align 8
  %6771 = add i64 %6770, -8
  %6772 = load i64, i64* %3, align 8
  %6773 = add i64 %6772, 4
  store i64 %6773, i64* %3, align 8
  %6774 = inttoptr i64 %6771 to i64*
  %6775 = load i64, i64* %6774, align 8
  store i64 %6775, i64* %RCX.i1674, align 8
  %6776 = add i64 %6770, -60
  %6777 = add i64 %6772, 8
  store i64 %6777, i64* %3, align 8
  %6778 = inttoptr i64 %6776 to i32*
  %6779 = load i32, i32* %6778, align 4
  %6780 = sext i32 %6779 to i64
  store i64 %6780, i64* %RDX.i532, align 8
  %6781 = shl nsw i64 %6780, 3
  %6782 = add i64 %6781, %6775
  %6783 = add i64 %6772, 12
  store i64 %6783, i64* %3, align 8
  %6784 = inttoptr i64 %6782 to i64*
  %6785 = load i64, i64* %6784, align 8
  store i64 %6785, i64* %RCX.i1674, align 8
  %6786 = add i64 %6770, -56
  %6787 = add i64 %6772, 16
  store i64 %6787, i64* %3, align 8
  %6788 = inttoptr i64 %6786 to i32*
  %6789 = load i32, i32* %6788, align 4
  %6790 = sext i32 %6789 to i64
  store i64 %6790, i64* %RDX.i532, align 8
  %6791 = shl nsw i64 %6790, 1
  %6792 = add i64 %6791, %6785
  %6793 = add i64 %6772, 20
  store i64 %6793, i64* %3, align 8
  %6794 = inttoptr i64 %6792 to i16*
  %6795 = load i16, i16* %6794, align 2
  %6796 = zext i16 %6795 to i64
  store i64 %6796, i64* %RAX.i82, align 8
  %6797 = add i64 %6770, -32
  %6798 = add i64 %6772, 23
  store i64 %6798, i64* %3, align 8
  %6799 = inttoptr i64 %6797 to i32*
  %6800 = load i32, i32* %6799, align 4
  %6801 = add i32 %6800, 2
  %6802 = zext i32 %6801 to i64
  store i64 %6802, i64* %RSI.i1183, align 8
  %6803 = icmp ugt i32 %6800, -3
  %6804 = zext i1 %6803 to i8
  store i8 %6804, i8* %14, align 1
  %6805 = and i32 %6801, 255
  %6806 = tail call i32 @llvm.ctpop.i32(i32 %6805)
  %6807 = trunc i32 %6806 to i8
  %6808 = and i8 %6807, 1
  %6809 = xor i8 %6808, 1
  store i8 %6809, i8* %21, align 1
  %6810 = xor i32 %6801, %6800
  %6811 = lshr i32 %6810, 4
  %6812 = trunc i32 %6811 to i8
  %6813 = and i8 %6812, 1
  store i8 %6813, i8* %26, align 1
  %6814 = icmp eq i32 %6801, 0
  %6815 = zext i1 %6814 to i8
  store i8 %6815, i8* %29, align 1
  %6816 = lshr i32 %6801, 31
  %6817 = trunc i32 %6816 to i8
  store i8 %6817, i8* %32, align 1
  %6818 = lshr i32 %6800, 31
  %6819 = xor i32 %6816, %6818
  %6820 = add nuw nsw i32 %6819, %6816
  %6821 = icmp eq i32 %6820, 2
  %6822 = zext i1 %6821 to i8
  store i8 %6822, i8* %38, align 1
  %6823 = sext i32 %6801 to i64
  store i64 %6823, i64* %RCX.i1674, align 8
  %6824 = shl nsw i64 %6823, 2
  %6825 = add nsw i64 %6824, 4950704
  %6826 = add i64 %6772, 37
  store i64 %6826, i64* %3, align 8
  %6827 = inttoptr i64 %6825 to i32*
  %6828 = load i32, i32* %6827, align 4
  %6829 = sext i32 %6828 to i64
  %6830 = mul nsw i64 %6829, %6796
  %6831 = trunc i64 %6830 to i32
  %6832 = and i64 %6830, 4294967295
  store i64 %6832, i64* %RAX.i82, align 8
  %6833 = shl i64 %6830, 32
  %6834 = ashr exact i64 %6833, 32
  %6835 = icmp ne i64 %6834, %6830
  %6836 = zext i1 %6835 to i8
  store i8 %6836, i8* %14, align 1
  %6837 = and i32 %6831, 255
  %6838 = tail call i32 @llvm.ctpop.i32(i32 %6837)
  %6839 = trunc i32 %6838 to i8
  %6840 = and i8 %6839, 1
  %6841 = xor i8 %6840, 1
  store i8 %6841, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %6842 = lshr i32 %6831, 31
  %6843 = trunc i32 %6842 to i8
  store i8 %6843, i8* %32, align 1
  store i8 %6836, i8* %38, align 1
  %6844 = load i64, i64* %RBP.i, align 8
  %6845 = add i64 %6844, -44
  %6846 = add i64 %6772, 40
  store i64 %6846, i64* %3, align 8
  %6847 = trunc i64 %6830 to i32
  %6848 = inttoptr i64 %6845 to i32*
  %6849 = load i32, i32* %6848, align 4
  %6850 = add i32 %6849, %6847
  %6851 = zext i32 %6850 to i64
  store i64 %6851, i64* %RAX.i82, align 8
  %6852 = icmp ult i32 %6850, %6847
  %6853 = icmp ult i32 %6850, %6849
  %6854 = or i1 %6852, %6853
  %6855 = zext i1 %6854 to i8
  store i8 %6855, i8* %14, align 1
  %6856 = and i32 %6850, 255
  %6857 = tail call i32 @llvm.ctpop.i32(i32 %6856)
  %6858 = trunc i32 %6857 to i8
  %6859 = and i8 %6858, 1
  %6860 = xor i8 %6859, 1
  store i8 %6860, i8* %21, align 1
  %6861 = xor i32 %6849, %6847
  %6862 = xor i32 %6861, %6850
  %6863 = lshr i32 %6862, 4
  %6864 = trunc i32 %6863 to i8
  %6865 = and i8 %6864, 1
  store i8 %6865, i8* %26, align 1
  %6866 = icmp eq i32 %6850, 0
  %6867 = zext i1 %6866 to i8
  store i8 %6867, i8* %29, align 1
  %6868 = lshr i32 %6850, 31
  %6869 = trunc i32 %6868 to i8
  store i8 %6869, i8* %32, align 1
  %6870 = lshr i32 %6847, 31
  %6871 = lshr i32 %6849, 31
  %6872 = xor i32 %6868, %6870
  %6873 = xor i32 %6868, %6871
  %6874 = add nuw nsw i32 %6872, %6873
  %6875 = icmp eq i32 %6874, 2
  %6876 = zext i1 %6875 to i8
  store i8 %6876, i8* %38, align 1
  %6877 = add i64 %6772, 43
  store i64 %6877, i64* %3, align 8
  store i32 %6850, i32* %6848, align 4
  %6878 = load i64, i64* %RBP.i, align 8
  %6879 = add i64 %6878, -32
  %6880 = load i64, i64* %3, align 8
  %6881 = add i64 %6880, 3
  store i64 %6881, i64* %3, align 8
  %6882 = inttoptr i64 %6879 to i32*
  %6883 = load i32, i32* %6882, align 4
  %6884 = add i32 %6883, 1
  %6885 = zext i32 %6884 to i64
  store i64 %6885, i64* %RAX.i82, align 8
  %6886 = icmp eq i32 %6883, -1
  %6887 = icmp eq i32 %6884, 0
  %6888 = or i1 %6886, %6887
  %6889 = zext i1 %6888 to i8
  store i8 %6889, i8* %14, align 1
  %6890 = and i32 %6884, 255
  %6891 = tail call i32 @llvm.ctpop.i32(i32 %6890)
  %6892 = trunc i32 %6891 to i8
  %6893 = and i8 %6892, 1
  %6894 = xor i8 %6893, 1
  store i8 %6894, i8* %21, align 1
  %6895 = xor i32 %6884, %6883
  %6896 = lshr i32 %6895, 4
  %6897 = trunc i32 %6896 to i8
  %6898 = and i8 %6897, 1
  store i8 %6898, i8* %26, align 1
  %6899 = zext i1 %6887 to i8
  store i8 %6899, i8* %29, align 1
  %6900 = lshr i32 %6884, 31
  %6901 = trunc i32 %6900 to i8
  store i8 %6901, i8* %32, align 1
  %6902 = lshr i32 %6883, 31
  %6903 = xor i32 %6900, %6902
  %6904 = add nuw nsw i32 %6903, %6900
  %6905 = icmp eq i32 %6904, 2
  %6906 = zext i1 %6905 to i8
  store i8 %6906, i8* %38, align 1
  %6907 = add i64 %6880, 9
  store i64 %6907, i64* %3, align 8
  store i32 %6884, i32* %6882, align 4
  %6908 = load i64, i64* %3, align 8
  %6909 = add i64 %6908, -198
  store i64 %6909, i64* %3, align 8
  br label %block_.L_41bfc2

block_.L_41c08d:                                  ; preds = %block_.L_41bfc2
  %6910 = add i64 %6517, -44
  %6911 = add i64 %6545, 3
  store i64 %6911, i64* %3, align 8
  %6912 = inttoptr i64 %6910 to i32*
  %6913 = load i32, i32* %6912, align 4
  %6914 = zext i32 %6913 to i64
  store i64 %6914, i64* %RAX.i82, align 8
  %6915 = add i64 %6517, -24
  %6916 = add i64 %6545, 6
  store i64 %6916, i64* %3, align 8
  %6917 = inttoptr i64 %6915 to i32*
  %6918 = load i32, i32* %6917, align 4
  %6919 = add i32 %6918, 2
  %6920 = zext i32 %6919 to i64
  store i64 %6920, i64* %RCX.i1674, align 8
  %6921 = icmp ugt i32 %6918, -3
  %6922 = zext i1 %6921 to i8
  store i8 %6922, i8* %14, align 1
  %6923 = and i32 %6919, 255
  %6924 = tail call i32 @llvm.ctpop.i32(i32 %6923)
  %6925 = trunc i32 %6924 to i8
  %6926 = and i8 %6925, 1
  %6927 = xor i8 %6926, 1
  store i8 %6927, i8* %21, align 1
  %6928 = xor i32 %6919, %6918
  %6929 = lshr i32 %6928, 4
  %6930 = trunc i32 %6929 to i8
  %6931 = and i8 %6930, 1
  store i8 %6931, i8* %26, align 1
  %6932 = icmp eq i32 %6919, 0
  %6933 = zext i1 %6932 to i8
  store i8 %6933, i8* %29, align 1
  %6934 = lshr i32 %6919, 31
  %6935 = trunc i32 %6934 to i8
  store i8 %6935, i8* %32, align 1
  %6936 = lshr i32 %6918, 31
  %6937 = xor i32 %6934, %6936
  %6938 = add nuw nsw i32 %6937, %6934
  %6939 = icmp eq i32 %6938, 2
  %6940 = zext i1 %6939 to i8
  store i8 %6940, i8* %38, align 1
  %6941 = sext i32 %6919 to i64
  store i64 %6941, i64* %RDX.i532, align 8
  %6942 = shl nsw i64 %6941, 2
  %6943 = add nsw i64 %6942, -96
  %6944 = add i64 %6943, %6517
  %6945 = add i64 %6545, 16
  store i64 %6945, i64* %3, align 8
  %6946 = inttoptr i64 %6944 to i32*
  store i32 %6913, i32* %6946, align 4
  %6947 = load i64, i64* %RBP.i, align 8
  %6948 = add i64 %6947, -24
  %6949 = load i64, i64* %3, align 8
  %6950 = add i64 %6949, 3
  store i64 %6950, i64* %3, align 8
  %6951 = inttoptr i64 %6948 to i32*
  %6952 = load i32, i32* %6951, align 4
  %6953 = add i32 %6952, 1
  %6954 = zext i32 %6953 to i64
  store i64 %6954, i64* %RAX.i82, align 8
  %6955 = icmp eq i32 %6952, -1
  %6956 = icmp eq i32 %6953, 0
  %6957 = or i1 %6955, %6956
  %6958 = zext i1 %6957 to i8
  store i8 %6958, i8* %14, align 1
  %6959 = and i32 %6953, 255
  %6960 = tail call i32 @llvm.ctpop.i32(i32 %6959)
  %6961 = trunc i32 %6960 to i8
  %6962 = and i8 %6961, 1
  %6963 = xor i8 %6962, 1
  store i8 %6963, i8* %21, align 1
  %6964 = xor i32 %6953, %6952
  %6965 = lshr i32 %6964, 4
  %6966 = trunc i32 %6965 to i8
  %6967 = and i8 %6966, 1
  store i8 %6967, i8* %26, align 1
  %6968 = zext i1 %6956 to i8
  store i8 %6968, i8* %29, align 1
  %6969 = lshr i32 %6953, 31
  %6970 = trunc i32 %6969 to i8
  store i8 %6970, i8* %32, align 1
  %6971 = lshr i32 %6952, 31
  %6972 = xor i32 %6969, %6971
  %6973 = add nuw nsw i32 %6972, %6969
  %6974 = icmp eq i32 %6973, 2
  %6975 = zext i1 %6974 to i8
  store i8 %6975, i8* %38, align 1
  %6976 = add i64 %6949, 9
  store i64 %6976, i64* %3, align 8
  store i32 %6953, i32* %6951, align 4
  %6977 = load i64, i64* %3, align 8
  %6978 = add i64 %6977, -388
  store i64 %6978, i64* %3, align 8
  br label %block_.L_41bf22

block_.L_41c0ab:                                  ; preds = %block_.L_41bf22
  %6979 = add i64 %6283, -24
  %6980 = load i64, i64* %3, align 8
  %6981 = add i64 %6980, 7
  store i64 %6981, i64* %3, align 8
  %6982 = inttoptr i64 %6979 to i32*
  store i32 -2, i32* %6982, align 4
  %RCX.i1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %.pre278 = load i64, i64* %3, align 8
  br label %block_.L_41c0b9

block_.L_41c0b9:                                  ; preds = %block_41c0c3, %block_.L_41c0ab
  %6983 = phi i64 [ %7156, %block_41c0c3 ], [ %.pre278, %block_.L_41c0ab ]
  %6984 = load i64, i64* %RBP.i, align 8
  %6985 = add i64 %6984, -24
  %6986 = add i64 %6983, 4
  store i64 %6986, i64* %3, align 8
  %6987 = inttoptr i64 %6985 to i32*
  %6988 = load i32, i32* %6987, align 4
  %6989 = add i32 %6988, -4
  %6990 = icmp ult i32 %6988, 4
  %6991 = zext i1 %6990 to i8
  store i8 %6991, i8* %14, align 1
  %6992 = and i32 %6989, 255
  %6993 = tail call i32 @llvm.ctpop.i32(i32 %6992)
  %6994 = trunc i32 %6993 to i8
  %6995 = and i8 %6994, 1
  %6996 = xor i8 %6995, 1
  store i8 %6996, i8* %21, align 1
  %6997 = xor i32 %6989, %6988
  %6998 = lshr i32 %6997, 4
  %6999 = trunc i32 %6998 to i8
  %7000 = and i8 %6999, 1
  store i8 %7000, i8* %26, align 1
  %7001 = icmp eq i32 %6989, 0
  %7002 = zext i1 %7001 to i8
  store i8 %7002, i8* %29, align 1
  %7003 = lshr i32 %6989, 31
  %7004 = trunc i32 %7003 to i8
  store i8 %7004, i8* %32, align 1
  %7005 = lshr i32 %6988, 31
  %7006 = xor i32 %7003, %7005
  %7007 = add nuw nsw i32 %7006, %7005
  %7008 = icmp eq i32 %7007, 2
  %7009 = zext i1 %7008 to i8
  store i8 %7009, i8* %38, align 1
  %7010 = icmp ne i8 %7004, 0
  %7011 = xor i1 %7010, %7008
  %.v424 = select i1 %7011, i64 10, i64 60
  %7012 = add i64 %6983, %.v424
  store i64 %7012, i64* %3, align 8
  br i1 %7011, label %block_41c0c3, label %block_.L_41c0f5

block_41c0c3:                                     ; preds = %block_.L_41c0b9
  %7013 = add i64 %7012, 3
  store i64 %7013, i64* %3, align 8
  %7014 = load i32, i32* %6987, align 4
  %7015 = add i32 %7014, 2
  %7016 = zext i32 %7015 to i64
  store i64 %7016, i64* %RAX.i82, align 8
  %7017 = icmp ugt i32 %7014, -3
  %7018 = zext i1 %7017 to i8
  store i8 %7018, i8* %14, align 1
  %7019 = and i32 %7015, 255
  %7020 = tail call i32 @llvm.ctpop.i32(i32 %7019)
  %7021 = trunc i32 %7020 to i8
  %7022 = and i8 %7021, 1
  %7023 = xor i8 %7022, 1
  store i8 %7023, i8* %21, align 1
  %7024 = xor i32 %7015, %7014
  %7025 = lshr i32 %7024, 4
  %7026 = trunc i32 %7025 to i8
  %7027 = and i8 %7026, 1
  store i8 %7027, i8* %26, align 1
  %7028 = icmp eq i32 %7015, 0
  %7029 = zext i1 %7028 to i8
  store i8 %7029, i8* %29, align 1
  %7030 = lshr i32 %7015, 31
  %7031 = trunc i32 %7030 to i8
  store i8 %7031, i8* %32, align 1
  %7032 = lshr i32 %7014, 31
  %7033 = xor i32 %7030, %7032
  %7034 = add nuw nsw i32 %7033, %7030
  %7035 = icmp eq i32 %7034, 2
  %7036 = zext i1 %7035 to i8
  store i8 %7036, i8* %38, align 1
  %7037 = sext i32 %7015 to i64
  store i64 %7037, i64* %RCX.i1421, align 8
  %7038 = shl nsw i64 %7037, 2
  %7039 = add nsw i64 %7038, -96
  %7040 = add i64 %7039, %6984
  %7041 = add i64 %7012, 13
  store i64 %7041, i64* %3, align 8
  %7042 = inttoptr i64 %7040 to i32*
  %7043 = load i32, i32* %7042, align 4
  %7044 = zext i32 %7043 to i64
  store i64 %7044, i64* %RAX.i82, align 8
  %7045 = add i64 %7012, 16
  store i64 %7045, i64* %3, align 8
  %7046 = load i32, i32* %6987, align 4
  %7047 = add i32 %7046, 2
  %7048 = zext i32 %7047 to i64
  store i64 %7048, i64* %RDX.i532, align 8
  %7049 = icmp ugt i32 %7046, -3
  %7050 = zext i1 %7049 to i8
  store i8 %7050, i8* %14, align 1
  %7051 = and i32 %7047, 255
  %7052 = tail call i32 @llvm.ctpop.i32(i32 %7051)
  %7053 = trunc i32 %7052 to i8
  %7054 = and i8 %7053, 1
  %7055 = xor i8 %7054, 1
  store i8 %7055, i8* %21, align 1
  %7056 = xor i32 %7047, %7046
  %7057 = lshr i32 %7056, 4
  %7058 = trunc i32 %7057 to i8
  %7059 = and i8 %7058, 1
  store i8 %7059, i8* %26, align 1
  %7060 = icmp eq i32 %7047, 0
  %7061 = zext i1 %7060 to i8
  store i8 %7061, i8* %29, align 1
  %7062 = lshr i32 %7047, 31
  %7063 = trunc i32 %7062 to i8
  store i8 %7063, i8* %32, align 1
  %7064 = lshr i32 %7046, 31
  %7065 = xor i32 %7062, %7064
  %7066 = add nuw nsw i32 %7065, %7062
  %7067 = icmp eq i32 %7066, 2
  %7068 = zext i1 %7067 to i8
  store i8 %7068, i8* %38, align 1
  %7069 = sext i32 %7047 to i64
  store i64 %7069, i64* %RCX.i1421, align 8
  %7070 = shl nsw i64 %7069, 2
  %7071 = add nsw i64 %7070, 4950704
  %7072 = add i64 %7012, 30
  store i64 %7072, i64* %3, align 8
  %7073 = inttoptr i64 %7071 to i32*
  %7074 = load i32, i32* %7073, align 4
  %7075 = sext i32 %7043 to i64
  %7076 = sext i32 %7074 to i64
  %7077 = mul nsw i64 %7076, %7075
  %7078 = trunc i64 %7077 to i32
  %7079 = and i64 %7077, 4294967295
  store i64 %7079, i64* %RAX.i82, align 8
  %7080 = shl i64 %7077, 32
  %7081 = ashr exact i64 %7080, 32
  %7082 = icmp ne i64 %7081, %7077
  %7083 = zext i1 %7082 to i8
  store i8 %7083, i8* %14, align 1
  %7084 = and i32 %7078, 255
  %7085 = tail call i32 @llvm.ctpop.i32(i32 %7084)
  %7086 = trunc i32 %7085 to i8
  %7087 = and i8 %7086, 1
  %7088 = xor i8 %7087, 1
  store i8 %7088, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %7089 = lshr i32 %7078, 31
  %7090 = trunc i32 %7089 to i8
  store i8 %7090, i8* %32, align 1
  store i8 %7083, i8* %38, align 1
  %7091 = load i64, i64* %RBP.i, align 8
  %7092 = add i64 %7091, -44
  %7093 = add i64 %7012, 33
  store i64 %7093, i64* %3, align 8
  %7094 = trunc i64 %7077 to i32
  %7095 = inttoptr i64 %7092 to i32*
  %7096 = load i32, i32* %7095, align 4
  %7097 = add i32 %7096, %7094
  %7098 = zext i32 %7097 to i64
  store i64 %7098, i64* %RAX.i82, align 8
  %7099 = icmp ult i32 %7097, %7094
  %7100 = icmp ult i32 %7097, %7096
  %7101 = or i1 %7099, %7100
  %7102 = zext i1 %7101 to i8
  store i8 %7102, i8* %14, align 1
  %7103 = and i32 %7097, 255
  %7104 = tail call i32 @llvm.ctpop.i32(i32 %7103)
  %7105 = trunc i32 %7104 to i8
  %7106 = and i8 %7105, 1
  %7107 = xor i8 %7106, 1
  store i8 %7107, i8* %21, align 1
  %7108 = xor i32 %7096, %7094
  %7109 = xor i32 %7108, %7097
  %7110 = lshr i32 %7109, 4
  %7111 = trunc i32 %7110 to i8
  %7112 = and i8 %7111, 1
  store i8 %7112, i8* %26, align 1
  %7113 = icmp eq i32 %7097, 0
  %7114 = zext i1 %7113 to i8
  store i8 %7114, i8* %29, align 1
  %7115 = lshr i32 %7097, 31
  %7116 = trunc i32 %7115 to i8
  store i8 %7116, i8* %32, align 1
  %7117 = lshr i32 %7094, 31
  %7118 = lshr i32 %7096, 31
  %7119 = xor i32 %7115, %7117
  %7120 = xor i32 %7115, %7118
  %7121 = add nuw nsw i32 %7119, %7120
  %7122 = icmp eq i32 %7121, 2
  %7123 = zext i1 %7122 to i8
  store i8 %7123, i8* %38, align 1
  %7124 = add i64 %7012, 36
  store i64 %7124, i64* %3, align 8
  store i32 %7097, i32* %7095, align 4
  %7125 = load i64, i64* %RBP.i, align 8
  %7126 = add i64 %7125, -24
  %7127 = load i64, i64* %3, align 8
  %7128 = add i64 %7127, 3
  store i64 %7128, i64* %3, align 8
  %7129 = inttoptr i64 %7126 to i32*
  %7130 = load i32, i32* %7129, align 4
  %7131 = add i32 %7130, 1
  %7132 = zext i32 %7131 to i64
  store i64 %7132, i64* %RAX.i82, align 8
  %7133 = icmp eq i32 %7130, -1
  %7134 = icmp eq i32 %7131, 0
  %7135 = or i1 %7133, %7134
  %7136 = zext i1 %7135 to i8
  store i8 %7136, i8* %14, align 1
  %7137 = and i32 %7131, 255
  %7138 = tail call i32 @llvm.ctpop.i32(i32 %7137)
  %7139 = trunc i32 %7138 to i8
  %7140 = and i8 %7139, 1
  %7141 = xor i8 %7140, 1
  store i8 %7141, i8* %21, align 1
  %7142 = xor i32 %7131, %7130
  %7143 = lshr i32 %7142, 4
  %7144 = trunc i32 %7143 to i8
  %7145 = and i8 %7144, 1
  store i8 %7145, i8* %26, align 1
  %7146 = zext i1 %7134 to i8
  store i8 %7146, i8* %29, align 1
  %7147 = lshr i32 %7131, 31
  %7148 = trunc i32 %7147 to i8
  store i8 %7148, i8* %32, align 1
  %7149 = lshr i32 %7130, 31
  %7150 = xor i32 %7147, %7149
  %7151 = add nuw nsw i32 %7150, %7147
  %7152 = icmp eq i32 %7151, 2
  %7153 = zext i1 %7152 to i8
  store i8 %7153, i8* %38, align 1
  %7154 = add i64 %7127, 9
  store i64 %7154, i64* %3, align 8
  store i32 %7131, i32* %7129, align 4
  %7155 = load i64, i64* %3, align 8
  %7156 = add i64 %7155, -55
  store i64 %7156, i64* %3, align 8
  br label %block_.L_41c0b9

block_.L_41c0f5:                                  ; preds = %block_.L_41c0b9
  store i64 1024, i64* %RAX.i82, align 8
  %7157 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7157, i64* %RCX.i1674, align 8
  %7158 = add i64 %7157, 72684
  %7159 = add i64 %7012, 19
  store i64 %7159, i64* %3, align 8
  %7160 = inttoptr i64 %7158 to i32*
  %7161 = load i32, i32* %7160, align 4
  %7162 = zext i32 %7161 to i64
  store i64 %7162, i64* %RDX.i532, align 8
  %7163 = add i64 %6984, -44
  %7164 = add i64 %7012, 22
  store i64 %7164, i64* %3, align 8
  %7165 = inttoptr i64 %7163 to i32*
  %7166 = load i32, i32* %7165, align 4
  %7167 = add i32 %7166, 512
  %7168 = zext i32 %7167 to i64
  store i64 %7168, i64* %RSI.i1183, align 8
  %7169 = icmp ugt i32 %7166, -513
  %7170 = zext i1 %7169 to i8
  store i8 %7170, i8* %14, align 1
  %7171 = and i32 %7167, 255
  %7172 = tail call i32 @llvm.ctpop.i32(i32 %7171)
  %7173 = trunc i32 %7172 to i8
  %7174 = and i8 %7173, 1
  %7175 = xor i8 %7174, 1
  store i8 %7175, i8* %21, align 1
  %7176 = xor i32 %7167, %7166
  %7177 = lshr i32 %7176, 4
  %7178 = trunc i32 %7177 to i8
  %7179 = and i8 %7178, 1
  store i8 %7179, i8* %26, align 1
  %7180 = icmp eq i32 %7167, 0
  %7181 = zext i1 %7180 to i8
  store i8 %7181, i8* %29, align 1
  %7182 = lshr i32 %7167, 31
  %7183 = trunc i32 %7182 to i8
  store i8 %7183, i8* %32, align 1
  %7184 = lshr i32 %7166, 31
  %7185 = xor i32 %7182, %7184
  %7186 = add nuw nsw i32 %7185, %7182
  %7187 = icmp eq i32 %7186, 2
  %7188 = zext i1 %7187 to i8
  store i8 %7188, i8* %38, align 1
  %7189 = add i64 %6984, -532
  %7190 = add i64 %7012, 34
  store i64 %7190, i64* %3, align 8
  %7191 = inttoptr i64 %7189 to i32*
  store i32 1024, i32* %7191, align 4
  %7192 = load i32, i32* %ESI.i168, align 4
  %7193 = zext i32 %7192 to i64
  %7194 = load i64, i64* %3, align 8
  store i64 %7193, i64* %RAX.i82, align 8
  %7195 = load i64, i64* %RBP.i, align 8
  %7196 = add i64 %7195, -536
  %7197 = load i32, i32* %EDX.i443, align 4
  %7198 = add i64 %7194, 8
  store i64 %7198, i64* %3, align 8
  %7199 = inttoptr i64 %7196 to i32*
  store i32 %7197, i32* %7199, align 4
  %7200 = load i64, i64* %3, align 8
  %7201 = load i32, i32* %EAX.i1056, align 8
  %7202 = sext i32 %7201 to i64
  %7203 = lshr i64 %7202, 32
  store i64 %7203, i64* %141, align 8
  %7204 = load i64, i64* %RBP.i, align 8
  %7205 = add i64 %7204, -532
  %7206 = add i64 %7200, 7
  store i64 %7206, i64* %3, align 8
  %7207 = inttoptr i64 %7205 to i32*
  %7208 = load i32, i32* %7207, align 4
  %7209 = zext i32 %7208 to i64
  store i64 %7209, i64* %RSI.i1183, align 8
  %7210 = add i64 %7200, 9
  store i64 %7210, i64* %3, align 8
  %7211 = zext i32 %7201 to i64
  %7212 = sext i32 %7208 to i64
  %7213 = shl nuw i64 %7203, 32
  %7214 = or i64 %7213, %7211
  %7215 = sdiv i64 %7214, %7212
  %7216 = shl i64 %7215, 32
  %7217 = ashr exact i64 %7216, 32
  %7218 = icmp eq i64 %7215, %7217
  br i1 %7218, label %7221, label %7219

; <label>:7219:                                   ; preds = %block_.L_41c0f5
  %7220 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7210, %struct.Memory* %229)
  %.pre279 = load i64, i64* %RBP.i, align 8
  %.pre280 = load i64, i64* %3, align 8
  %.pre281 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit1362

; <label>:7221:                                   ; preds = %block_.L_41c0f5
  %7222 = srem i64 %7214, %7212
  %7223 = and i64 %7215, 4294967295
  store i64 %7223, i64* %RAX.i82, align 8
  %7224 = and i64 %7222, 4294967295
  store i64 %7224, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7225 = trunc i64 %7215 to i32
  br label %routine_idivl__esi.exit1362

routine_idivl__esi.exit1362:                      ; preds = %7221, %7219
  %7226 = phi i32 [ %.pre281, %7219 ], [ %7225, %7221 ]
  %7227 = phi i64 [ %.pre280, %7219 ], [ %7210, %7221 ]
  %7228 = phi i64 [ %.pre279, %7219 ], [ %7204, %7221 ]
  %7229 = phi %struct.Memory* [ %7220, %7219 ], [ %229, %7221 ]
  %7230 = add i64 %7228, -536
  %7231 = add i64 %7227, 6
  store i64 %7231, i64* %3, align 8
  %7232 = inttoptr i64 %7230 to i32*
  %7233 = load i32, i32* %7232, align 4
  %7234 = zext i32 %7233 to i64
  store i64 %7234, i64* %RDI.i129, align 8
  %EDI.i1356 = bitcast %union.anon* %40 to i32*
  %7235 = sub i32 %7233, %7226
  %7236 = icmp ult i32 %7233, %7226
  %7237 = zext i1 %7236 to i8
  store i8 %7237, i8* %14, align 1
  %7238 = and i32 %7235, 255
  %7239 = tail call i32 @llvm.ctpop.i32(i32 %7238)
  %7240 = trunc i32 %7239 to i8
  %7241 = and i8 %7240, 1
  %7242 = xor i8 %7241, 1
  store i8 %7242, i8* %21, align 1
  %7243 = xor i32 %7226, %7233
  %7244 = xor i32 %7243, %7235
  %7245 = lshr i32 %7244, 4
  %7246 = trunc i32 %7245 to i8
  %7247 = and i8 %7246, 1
  store i8 %7247, i8* %26, align 1
  %7248 = icmp eq i32 %7235, 0
  %7249 = zext i1 %7248 to i8
  store i8 %7249, i8* %29, align 1
  %7250 = lshr i32 %7235, 31
  %7251 = trunc i32 %7250 to i8
  store i8 %7251, i8* %32, align 1
  %7252 = lshr i32 %7233, 31
  %7253 = lshr i32 %7226, 31
  %7254 = xor i32 %7253, %7252
  %7255 = xor i32 %7250, %7252
  %7256 = add nuw nsw i32 %7255, %7254
  %7257 = icmp eq i32 %7256, 2
  %7258 = zext i1 %7257 to i8
  store i8 %7258, i8* %38, align 1
  %7259 = icmp ne i8 %7251, 0
  %7260 = xor i1 %7259, %7257
  %.v425 = select i1 %7260, i64 14, i64 39
  %7261 = add i64 %7227, %.v425
  store i64 %7261, i64* %3, align 8
  br i1 %7260, label %block_41c136, label %block_.L_41c14f

block_41c136:                                     ; preds = %routine_idivl__esi.exit1362
  %7262 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7262, i64* %RAX.i82, align 8
  %7263 = add i64 %7262, 72684
  %7264 = add i64 %7261, 14
  store i64 %7264, i64* %3, align 8
  %7265 = inttoptr i64 %7263 to i32*
  %7266 = load i32, i32* %7265, align 4
  %7267 = zext i32 %7266 to i64
  store i64 %7267, i64* %RCX.i1674, align 8
  %7268 = add i64 %7228, -540
  %7269 = add i64 %7261, 20
  store i64 %7269, i64* %3, align 8
  %7270 = inttoptr i64 %7268 to i32*
  store i32 %7266, i32* %7270, align 4
  %7271 = load i64, i64* %3, align 8
  %7272 = add i64 %7271, 42
  store i64 %7272, i64* %3, align 8
  br label %block_.L_41c174

block_.L_41c14f:                                  ; preds = %routine_idivl__esi.exit1362
  store i64 1024, i64* %RAX.i82, align 8
  %7273 = add i64 %7228, -44
  %7274 = add i64 %7261, 8
  store i64 %7274, i64* %3, align 8
  %7275 = inttoptr i64 %7273 to i32*
  %7276 = load i32, i32* %7275, align 4
  %7277 = add i32 %7276, 512
  %7278 = zext i32 %7277 to i64
  store i64 %7278, i64* %RCX.i1674, align 8
  %7279 = icmp ugt i32 %7276, -513
  %7280 = zext i1 %7279 to i8
  store i8 %7280, i8* %14, align 1
  %7281 = and i32 %7277, 255
  %7282 = tail call i32 @llvm.ctpop.i32(i32 %7281)
  %7283 = trunc i32 %7282 to i8
  %7284 = and i8 %7283, 1
  %7285 = xor i8 %7284, 1
  store i8 %7285, i8* %21, align 1
  %7286 = xor i32 %7277, %7276
  %7287 = lshr i32 %7286, 4
  %7288 = trunc i32 %7287 to i8
  %7289 = and i8 %7288, 1
  store i8 %7289, i8* %26, align 1
  %7290 = icmp eq i32 %7277, 0
  %7291 = zext i1 %7290 to i8
  store i8 %7291, i8* %29, align 1
  %7292 = lshr i32 %7277, 31
  %7293 = trunc i32 %7292 to i8
  store i8 %7293, i8* %32, align 1
  %7294 = lshr i32 %7276, 31
  %7295 = xor i32 %7292, %7294
  %7296 = add nuw nsw i32 %7295, %7292
  %7297 = icmp eq i32 %7296, 2
  %7298 = zext i1 %7297 to i8
  store i8 %7298, i8* %38, align 1
  %7299 = add i64 %7228, -544
  %7300 = add i64 %7261, 20
  store i64 %7300, i64* %3, align 8
  %7301 = inttoptr i64 %7299 to i32*
  store i32 1024, i32* %7301, align 4
  %7302 = load i32, i32* %ECX.i1669, align 4
  %7303 = zext i32 %7302 to i64
  %7304 = load i64, i64* %3, align 8
  store i64 %7303, i64* %RAX.i82, align 8
  %7305 = sext i32 %7302 to i64
  %7306 = lshr i64 %7305, 32
  store i64 %7306, i64* %141, align 8
  %7307 = load i64, i64* %RBP.i, align 8
  %7308 = add i64 %7307, -544
  %7309 = add i64 %7304, 9
  store i64 %7309, i64* %3, align 8
  %7310 = inttoptr i64 %7308 to i32*
  %7311 = load i32, i32* %7310, align 4
  %7312 = zext i32 %7311 to i64
  store i64 %7312, i64* %RCX.i1674, align 8
  %7313 = add i64 %7304, 11
  store i64 %7313, i64* %3, align 8
  %7314 = sext i32 %7311 to i64
  %7315 = shl nuw i64 %7306, 32
  %7316 = or i64 %7315, %7303
  %7317 = sdiv i64 %7316, %7314
  %7318 = shl i64 %7317, 32
  %7319 = ashr exact i64 %7318, 32
  %7320 = icmp eq i64 %7317, %7319
  br i1 %7320, label %7323, label %7321

; <label>:7321:                                   ; preds = %block_.L_41c14f
  %7322 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7313, %struct.Memory* %7229)
  %.pre282 = load i64, i64* %RBP.i, align 8
  %.pre283 = load i32, i32* %EAX.i1056, align 4
  %.pre284 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1323

; <label>:7323:                                   ; preds = %block_.L_41c14f
  %7324 = srem i64 %7316, %7314
  %7325 = and i64 %7317, 4294967295
  store i64 %7325, i64* %RAX.i82, align 8
  %7326 = and i64 %7324, 4294967295
  store i64 %7326, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7327 = trunc i64 %7317 to i32
  br label %routine_idivl__ecx.exit1323

routine_idivl__ecx.exit1323:                      ; preds = %7323, %7321
  %7328 = phi i64 [ %.pre284, %7321 ], [ %7313, %7323 ]
  %7329 = phi i32 [ %.pre283, %7321 ], [ %7327, %7323 ]
  %7330 = phi i64 [ %.pre282, %7321 ], [ %7307, %7323 ]
  %7331 = phi %struct.Memory* [ %7322, %7321 ], [ %7229, %7323 ]
  %7332 = add i64 %7330, -540
  %7333 = add i64 %7328, 6
  store i64 %7333, i64* %3, align 8
  %7334 = inttoptr i64 %7332 to i32*
  store i32 %7329, i32* %7334, align 4
  %.pre285 = load i64, i64* %3, align 8
  br label %block_.L_41c174

block_.L_41c174:                                  ; preds = %routine_idivl__ecx.exit1323, %block_41c136
  %7335 = phi i64 [ %.pre285, %routine_idivl__ecx.exit1323 ], [ %7272, %block_41c136 ]
  %MEMORY.72 = phi %struct.Memory* [ %7331, %routine_idivl__ecx.exit1323 ], [ %7229, %block_41c136 ]
  %7336 = load i64, i64* %RBP.i, align 8
  %7337 = add i64 %7336, -540
  %7338 = add i64 %7335, 6
  store i64 %7338, i64* %3, align 8
  %7339 = inttoptr i64 %7337 to i32*
  %7340 = load i32, i32* %7339, align 4
  %7341 = zext i32 %7340 to i64
  store i64 %7341, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i1674, align 8
  %7342 = sub i32 0, %7340
  %7343 = icmp ne i32 %7340, 0
  %7344 = zext i1 %7343 to i8
  store i8 %7344, i8* %14, align 1
  %7345 = and i32 %7342, 255
  %7346 = tail call i32 @llvm.ctpop.i32(i32 %7345)
  %7347 = trunc i32 %7346 to i8
  %7348 = and i8 %7347, 1
  %7349 = xor i8 %7348, 1
  store i8 %7349, i8* %21, align 1
  %7350 = xor i32 %7340, %7342
  %7351 = lshr i32 %7350, 4
  %7352 = trunc i32 %7351 to i8
  %7353 = and i8 %7352, 1
  store i8 %7353, i8* %26, align 1
  %7354 = icmp eq i32 %7340, 0
  %7355 = zext i1 %7354 to i8
  store i8 %7355, i8* %29, align 1
  %7356 = lshr i32 %7342, 31
  %7357 = trunc i32 %7356 to i8
  store i8 %7357, i8* %32, align 1
  %7358 = lshr i32 %7340, 31
  %7359 = add nuw nsw i32 %7356, %7358
  %7360 = icmp eq i32 %7359, 2
  %7361 = zext i1 %7360 to i8
  store i8 %7361, i8* %38, align 1
  %7362 = icmp ne i8 %7357, 0
  %7363 = xor i1 %7362, %7360
  %7364 = or i1 %7354, %7363
  %.v426 = select i1 %7364, i64 29, i64 16
  %7365 = add i64 %7335, %.v426
  store i64 %7365, i64* %3, align 8
  br i1 %7364, label %block_.L_41c191, label %block_41c184

block_41c184:                                     ; preds = %block_.L_41c174
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %7366 = add i64 %7336, -548
  %7367 = add i64 %7365, 8
  store i64 %7367, i64* %3, align 8
  %7368 = inttoptr i64 %7366 to i32*
  store i32 0, i32* %7368, align 4
  %7369 = load i64, i64* %3, align 8
  %7370 = add i64 %7369, 144
  store i64 %7370, i64* %3, align 8
  br label %block_.L_41c21c

block_.L_41c191:                                  ; preds = %block_.L_41c174
  store i64 1024, i64* %RAX.i82, align 8
  %7371 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7371, i64* %RCX.i1674, align 8
  %7372 = add i64 %7371, 72684
  %7373 = add i64 %7365, 19
  store i64 %7373, i64* %3, align 8
  %7374 = inttoptr i64 %7372 to i32*
  %7375 = load i32, i32* %7374, align 4
  %7376 = zext i32 %7375 to i64
  store i64 %7376, i64* %RDX.i532, align 8
  %7377 = add i64 %7336, -44
  %7378 = add i64 %7365, 22
  store i64 %7378, i64* %3, align 8
  %7379 = inttoptr i64 %7377 to i32*
  %7380 = load i32, i32* %7379, align 4
  %7381 = add i32 %7380, 512
  %7382 = zext i32 %7381 to i64
  store i64 %7382, i64* %RSI.i1183, align 8
  %7383 = icmp ugt i32 %7380, -513
  %7384 = zext i1 %7383 to i8
  store i8 %7384, i8* %14, align 1
  %7385 = and i32 %7381, 255
  %7386 = tail call i32 @llvm.ctpop.i32(i32 %7385)
  %7387 = trunc i32 %7386 to i8
  %7388 = and i8 %7387, 1
  %7389 = xor i8 %7388, 1
  store i8 %7389, i8* %21, align 1
  %7390 = xor i32 %7381, %7380
  %7391 = lshr i32 %7390, 4
  %7392 = trunc i32 %7391 to i8
  %7393 = and i8 %7392, 1
  store i8 %7393, i8* %26, align 1
  %7394 = icmp eq i32 %7381, 0
  %7395 = zext i1 %7394 to i8
  store i8 %7395, i8* %29, align 1
  %7396 = lshr i32 %7381, 31
  %7397 = trunc i32 %7396 to i8
  store i8 %7397, i8* %32, align 1
  %7398 = lshr i32 %7380, 31
  %7399 = xor i32 %7396, %7398
  %7400 = add nuw nsw i32 %7399, %7396
  %7401 = icmp eq i32 %7400, 2
  %7402 = zext i1 %7401 to i8
  store i8 %7402, i8* %38, align 1
  %7403 = add i64 %7336, -552
  %7404 = add i64 %7365, 34
  store i64 %7404, i64* %3, align 8
  %7405 = inttoptr i64 %7403 to i32*
  store i32 1024, i32* %7405, align 4
  %7406 = load i32, i32* %ESI.i168, align 4
  %7407 = zext i32 %7406 to i64
  %7408 = load i64, i64* %3, align 8
  store i64 %7407, i64* %RAX.i82, align 8
  %7409 = load i64, i64* %RBP.i, align 8
  %7410 = add i64 %7409, -556
  %7411 = load i32, i32* %EDX.i443, align 4
  %7412 = add i64 %7408, 8
  store i64 %7412, i64* %3, align 8
  %7413 = inttoptr i64 %7410 to i32*
  store i32 %7411, i32* %7413, align 4
  %7414 = load i64, i64* %3, align 8
  %7415 = load i32, i32* %EAX.i1056, align 8
  %7416 = sext i32 %7415 to i64
  %7417 = lshr i64 %7416, 32
  store i64 %7417, i64* %141, align 8
  %7418 = load i64, i64* %RBP.i, align 8
  %7419 = add i64 %7418, -552
  %7420 = add i64 %7414, 7
  store i64 %7420, i64* %3, align 8
  %7421 = inttoptr i64 %7419 to i32*
  %7422 = load i32, i32* %7421, align 4
  %7423 = zext i32 %7422 to i64
  store i64 %7423, i64* %RSI.i1183, align 8
  %7424 = add i64 %7414, 9
  store i64 %7424, i64* %3, align 8
  %7425 = zext i32 %7415 to i64
  %7426 = sext i32 %7422 to i64
  %7427 = shl nuw i64 %7417, 32
  %7428 = or i64 %7427, %7425
  %7429 = sdiv i64 %7428, %7426
  %7430 = shl i64 %7429, 32
  %7431 = ashr exact i64 %7430, 32
  %7432 = icmp eq i64 %7429, %7431
  br i1 %7432, label %7435, label %7433

; <label>:7433:                                   ; preds = %block_.L_41c191
  %7434 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7424, %struct.Memory* %MEMORY.72)
  %.pre286 = load i64, i64* %RBP.i, align 8
  %.pre287 = load i64, i64* %3, align 8
  %.pre288 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit1272

; <label>:7435:                                   ; preds = %block_.L_41c191
  %7436 = srem i64 %7428, %7426
  %7437 = and i64 %7429, 4294967295
  store i64 %7437, i64* %RAX.i82, align 8
  %7438 = and i64 %7436, 4294967295
  store i64 %7438, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7439 = trunc i64 %7429 to i32
  br label %routine_idivl__esi.exit1272

routine_idivl__esi.exit1272:                      ; preds = %7435, %7433
  %7440 = phi i32 [ %.pre288, %7433 ], [ %7439, %7435 ]
  %7441 = phi i64 [ %.pre287, %7433 ], [ %7424, %7435 ]
  %7442 = phi i64 [ %.pre286, %7433 ], [ %7418, %7435 ]
  %7443 = phi %struct.Memory* [ %7434, %7433 ], [ %MEMORY.72, %7435 ]
  %7444 = add i64 %7442, -556
  %7445 = add i64 %7441, 6
  store i64 %7445, i64* %3, align 8
  %7446 = inttoptr i64 %7444 to i32*
  %7447 = load i32, i32* %7446, align 4
  %7448 = zext i32 %7447 to i64
  store i64 %7448, i64* %RDI.i129, align 8
  %7449 = sub i32 %7447, %7440
  %7450 = icmp ult i32 %7447, %7440
  %7451 = zext i1 %7450 to i8
  store i8 %7451, i8* %14, align 1
  %7452 = and i32 %7449, 255
  %7453 = tail call i32 @llvm.ctpop.i32(i32 %7452)
  %7454 = trunc i32 %7453 to i8
  %7455 = and i8 %7454, 1
  %7456 = xor i8 %7455, 1
  store i8 %7456, i8* %21, align 1
  %7457 = xor i32 %7440, %7447
  %7458 = xor i32 %7457, %7449
  %7459 = lshr i32 %7458, 4
  %7460 = trunc i32 %7459 to i8
  %7461 = and i8 %7460, 1
  store i8 %7461, i8* %26, align 1
  %7462 = icmp eq i32 %7449, 0
  %7463 = zext i1 %7462 to i8
  store i8 %7463, i8* %29, align 1
  %7464 = lshr i32 %7449, 31
  %7465 = trunc i32 %7464 to i8
  store i8 %7465, i8* %32, align 1
  %7466 = lshr i32 %7447, 31
  %7467 = lshr i32 %7440, 31
  %7468 = xor i32 %7467, %7466
  %7469 = xor i32 %7464, %7466
  %7470 = add nuw nsw i32 %7469, %7468
  %7471 = icmp eq i32 %7470, 2
  %7472 = zext i1 %7471 to i8
  store i8 %7472, i8* %38, align 1
  %7473 = icmp ne i8 %7465, 0
  %7474 = xor i1 %7473, %7471
  %.v432 = select i1 %7474, i64 14, i64 39
  %7475 = add i64 %7441, %.v432
  store i64 %7475, i64* %3, align 8
  br i1 %7474, label %block_41c1d2, label %block_.L_41c1eb

block_41c1d2:                                     ; preds = %routine_idivl__esi.exit1272
  %7476 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7476, i64* %RAX.i82, align 8
  %7477 = add i64 %7476, 72684
  %7478 = add i64 %7475, 14
  store i64 %7478, i64* %3, align 8
  %7479 = inttoptr i64 %7477 to i32*
  %7480 = load i32, i32* %7479, align 4
  %7481 = zext i32 %7480 to i64
  store i64 %7481, i64* %RCX.i1674, align 8
  %7482 = add i64 %7442, -560
  %7483 = add i64 %7475, 20
  store i64 %7483, i64* %3, align 8
  %7484 = inttoptr i64 %7482 to i32*
  store i32 %7480, i32* %7484, align 4
  %7485 = load i64, i64* %3, align 8
  %7486 = add i64 %7485, 42
  store i64 %7486, i64* %3, align 8
  br label %block_.L_41c210

block_.L_41c1eb:                                  ; preds = %routine_idivl__esi.exit1272
  store i64 1024, i64* %RAX.i82, align 8
  %7487 = add i64 %7442, -44
  %7488 = add i64 %7475, 8
  store i64 %7488, i64* %3, align 8
  %7489 = inttoptr i64 %7487 to i32*
  %7490 = load i32, i32* %7489, align 4
  %7491 = add i32 %7490, 512
  %7492 = zext i32 %7491 to i64
  store i64 %7492, i64* %RCX.i1674, align 8
  %7493 = icmp ugt i32 %7490, -513
  %7494 = zext i1 %7493 to i8
  store i8 %7494, i8* %14, align 1
  %7495 = and i32 %7491, 255
  %7496 = tail call i32 @llvm.ctpop.i32(i32 %7495)
  %7497 = trunc i32 %7496 to i8
  %7498 = and i8 %7497, 1
  %7499 = xor i8 %7498, 1
  store i8 %7499, i8* %21, align 1
  %7500 = xor i32 %7491, %7490
  %7501 = lshr i32 %7500, 4
  %7502 = trunc i32 %7501 to i8
  %7503 = and i8 %7502, 1
  store i8 %7503, i8* %26, align 1
  %7504 = icmp eq i32 %7491, 0
  %7505 = zext i1 %7504 to i8
  store i8 %7505, i8* %29, align 1
  %7506 = lshr i32 %7491, 31
  %7507 = trunc i32 %7506 to i8
  store i8 %7507, i8* %32, align 1
  %7508 = lshr i32 %7490, 31
  %7509 = xor i32 %7506, %7508
  %7510 = add nuw nsw i32 %7509, %7506
  %7511 = icmp eq i32 %7510, 2
  %7512 = zext i1 %7511 to i8
  store i8 %7512, i8* %38, align 1
  %7513 = add i64 %7442, -564
  %7514 = add i64 %7475, 20
  store i64 %7514, i64* %3, align 8
  %7515 = inttoptr i64 %7513 to i32*
  store i32 1024, i32* %7515, align 4
  %7516 = load i32, i32* %ECX.i1669, align 4
  %7517 = zext i32 %7516 to i64
  %7518 = load i64, i64* %3, align 8
  store i64 %7517, i64* %RAX.i82, align 8
  %7519 = sext i32 %7516 to i64
  %7520 = lshr i64 %7519, 32
  store i64 %7520, i64* %141, align 8
  %7521 = load i64, i64* %RBP.i, align 8
  %7522 = add i64 %7521, -564
  %7523 = add i64 %7518, 9
  store i64 %7523, i64* %3, align 8
  %7524 = inttoptr i64 %7522 to i32*
  %7525 = load i32, i32* %7524, align 4
  %7526 = zext i32 %7525 to i64
  store i64 %7526, i64* %RCX.i1674, align 8
  %7527 = add i64 %7518, 11
  store i64 %7527, i64* %3, align 8
  %7528 = sext i32 %7525 to i64
  %7529 = shl nuw i64 %7520, 32
  %7530 = or i64 %7529, %7517
  %7531 = sdiv i64 %7530, %7528
  %7532 = shl i64 %7531, 32
  %7533 = ashr exact i64 %7532, 32
  %7534 = icmp eq i64 %7531, %7533
  br i1 %7534, label %7537, label %7535

; <label>:7535:                                   ; preds = %block_.L_41c1eb
  %7536 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7527, %struct.Memory* %7443)
  %.pre289 = load i64, i64* %RBP.i, align 8
  %.pre290 = load i32, i32* %EAX.i1056, align 4
  %.pre291 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1230

; <label>:7537:                                   ; preds = %block_.L_41c1eb
  %7538 = srem i64 %7530, %7528
  %7539 = and i64 %7531, 4294967295
  store i64 %7539, i64* %RAX.i82, align 8
  %7540 = and i64 %7538, 4294967295
  store i64 %7540, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7541 = trunc i64 %7531 to i32
  br label %routine_idivl__ecx.exit1230

routine_idivl__ecx.exit1230:                      ; preds = %7537, %7535
  %7542 = phi i64 [ %.pre291, %7535 ], [ %7527, %7537 ]
  %7543 = phi i32 [ %.pre290, %7535 ], [ %7541, %7537 ]
  %7544 = phi i64 [ %.pre289, %7535 ], [ %7521, %7537 ]
  %7545 = phi %struct.Memory* [ %7536, %7535 ], [ %7443, %7537 ]
  %7546 = add i64 %7544, -560
  %7547 = add i64 %7542, 6
  store i64 %7547, i64* %3, align 8
  %7548 = inttoptr i64 %7546 to i32*
  store i32 %7543, i32* %7548, align 4
  %.pre292 = load i64, i64* %3, align 8
  br label %block_.L_41c210

block_.L_41c210:                                  ; preds = %routine_idivl__ecx.exit1230, %block_41c1d2
  %7549 = phi i64 [ %.pre292, %routine_idivl__ecx.exit1230 ], [ %7486, %block_41c1d2 ]
  %MEMORY.73 = phi %struct.Memory* [ %7545, %routine_idivl__ecx.exit1230 ], [ %7443, %block_41c1d2 ]
  %7550 = load i64, i64* %RBP.i, align 8
  %7551 = add i64 %7550, -560
  %7552 = add i64 %7549, 6
  store i64 %7552, i64* %3, align 8
  %7553 = inttoptr i64 %7551 to i32*
  %7554 = load i32, i32* %7553, align 4
  %7555 = zext i32 %7554 to i64
  store i64 %7555, i64* %RAX.i82, align 8
  %7556 = add i64 %7550, -548
  %7557 = add i64 %7549, 12
  store i64 %7557, i64* %3, align 8
  %7558 = inttoptr i64 %7556 to i32*
  store i32 %7554, i32* %7558, align 4
  %.pre293 = load i64, i64* %3, align 8
  br label %block_.L_41c21c

block_.L_41c21c:                                  ; preds = %block_.L_41c210, %block_41c184
  %7559 = phi i64 [ %.pre293, %block_.L_41c210 ], [ %7370, %block_41c184 ]
  %MEMORY.74 = phi %struct.Memory* [ %MEMORY.73, %block_.L_41c210 ], [ %MEMORY.72, %block_41c184 ]
  %7560 = load i64, i64* %RBP.i, align 8
  %7561 = add i64 %7560, -548
  %7562 = add i64 %7559, 6
  store i64 %7562, i64* %3, align 8
  %7563 = inttoptr i64 %7561 to i32*
  %7564 = load i32, i32* %7563, align 4
  %7565 = zext i32 %7564 to i64
  store i64 %7565, i64* %RAX.i82, align 8
  %7566 = add i64 %7560, -44
  %7567 = add i64 %7559, 9
  store i64 %7567, i64* %3, align 8
  %7568 = inttoptr i64 %7566 to i32*
  store i32 %7564, i32* %7568, align 4
  %7569 = load i64, i64* %RBP.i, align 8
  %7570 = add i64 %7569, -20
  %7571 = load i64, i64* %3, align 8
  %7572 = add i64 %7571, 4
  store i64 %7572, i64* %3, align 8
  %7573 = inttoptr i64 %7570 to i32*
  %7574 = load i32, i32* %7573, align 4
  %7575 = add i32 %7574, -1
  %7576 = icmp eq i32 %7574, 0
  %7577 = zext i1 %7576 to i8
  store i8 %7577, i8* %14, align 1
  %7578 = and i32 %7575, 255
  %7579 = tail call i32 @llvm.ctpop.i32(i32 %7578)
  %7580 = trunc i32 %7579 to i8
  %7581 = and i8 %7580, 1
  %7582 = xor i8 %7581, 1
  store i8 %7582, i8* %21, align 1
  %7583 = xor i32 %7575, %7574
  %7584 = lshr i32 %7583, 4
  %7585 = trunc i32 %7584 to i8
  %7586 = and i8 %7585, 1
  store i8 %7586, i8* %26, align 1
  %7587 = icmp eq i32 %7575, 0
  %7588 = zext i1 %7587 to i8
  store i8 %7588, i8* %29, align 1
  %7589 = lshr i32 %7575, 31
  %7590 = trunc i32 %7589 to i8
  store i8 %7590, i8* %32, align 1
  %7591 = lshr i32 %7574, 31
  %7592 = xor i32 %7589, %7591
  %7593 = add nuw nsw i32 %7592, %7591
  %7594 = icmp eq i32 %7593, 2
  %7595 = zext i1 %7594 to i8
  store i8 %7595, i8* %38, align 1
  %.v427 = select i1 %7587, i64 10, i64 322
  %7596 = add i64 %7571, %.v427
  store i64 32, i64* %RAX.i82, align 8
  %7597 = add i64 %7569, -44
  %7598 = add i64 %7596, 8
  store i64 %7598, i64* %3, align 8
  %7599 = inttoptr i64 %7597 to i32*
  %7600 = load i32, i32* %7599, align 4
  %7601 = zext i32 %7600 to i64
  store i64 %7601, i64* %RCX.i1674, align 8
  %7602 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7602, i64* %RDX.i532, align 8
  %7603 = add i64 %7602, 72684
  %7604 = add i64 %7596, 22
  store i64 %7604, i64* %3, align 8
  %7605 = inttoptr i64 %7603 to i32*
  %7606 = load i32, i32* %7605, align 4
  %7607 = zext i32 %7606 to i64
  store i64 %7607, i64* %RSI.i1183, align 8
  br i1 %7587, label %block_41c22f, label %block_.L_41c367

block_41c22f:                                     ; preds = %block_.L_41c21c
  %7608 = add i64 %7569, -88
  %7609 = add i64 %7596, 25
  store i64 %7609, i64* %3, align 8
  %7610 = inttoptr i64 %7608 to i32*
  %7611 = load i32, i32* %7610, align 4
  %7612 = add i32 %7611, 16
  %7613 = zext i32 %7612 to i64
  store i64 %7613, i64* %RDI.i129, align 8
  %7614 = icmp ugt i32 %7611, -17
  %7615 = zext i1 %7614 to i8
  store i8 %7615, i8* %14, align 1
  %7616 = and i32 %7612, 255
  %7617 = tail call i32 @llvm.ctpop.i32(i32 %7616)
  %7618 = trunc i32 %7617 to i8
  %7619 = and i8 %7618, 1
  %7620 = xor i8 %7619, 1
  store i8 %7620, i8* %21, align 1
  %7621 = xor i32 %7611, 16
  %7622 = xor i32 %7621, %7612
  %7623 = lshr i32 %7622, 4
  %7624 = trunc i32 %7623 to i8
  %7625 = and i8 %7624, 1
  store i8 %7625, i8* %26, align 1
  %7626 = icmp eq i32 %7612, 0
  %7627 = zext i1 %7626 to i8
  store i8 %7627, i8* %29, align 1
  %7628 = lshr i32 %7612, 31
  %7629 = trunc i32 %7628 to i8
  store i8 %7629, i8* %32, align 1
  %7630 = lshr i32 %7611, 31
  %7631 = xor i32 %7628, %7630
  %7632 = add nuw nsw i32 %7631, %7628
  %7633 = icmp eq i32 %7632, 2
  %7634 = zext i1 %7633 to i8
  store i8 %7634, i8* %38, align 1
  %7635 = add i64 %7569, -568
  %7636 = add i64 %7596, 34
  store i64 %7636, i64* %3, align 8
  %7637 = inttoptr i64 %7635 to i32*
  store i32 32, i32* %7637, align 4
  %7638 = load i32, i32* %EDI.i1356, align 4
  %7639 = zext i32 %7638 to i64
  %7640 = load i64, i64* %3, align 8
  store i64 %7639, i64* %RAX.i82, align 8
  %7641 = sext i32 %7638 to i64
  %7642 = lshr i64 %7641, 32
  store i64 %7642, i64* %141, align 8
  %7643 = load i64, i64* %RBP.i, align 8
  %7644 = add i64 %7643, -568
  %7645 = add i64 %7640, 9
  store i64 %7645, i64* %3, align 8
  %7646 = inttoptr i64 %7644 to i32*
  %7647 = load i32, i32* %7646, align 4
  %7648 = zext i32 %7647 to i64
  store i64 %7648, i64* %RDI.i129, align 8
  %7649 = add i64 %7640, 11
  store i64 %7649, i64* %3, align 8
  %7650 = sext i32 %7647 to i64
  %7651 = shl nuw i64 %7642, 32
  %7652 = or i64 %7651, %7639
  %7653 = sdiv i64 %7652, %7650
  %7654 = shl i64 %7653, 32
  %7655 = ashr exact i64 %7654, 32
  %7656 = icmp eq i64 %7653, %7655
  br i1 %7656, label %7659, label %7657

; <label>:7657:                                   ; preds = %block_41c22f
  %7658 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7649, %struct.Memory* %MEMORY.74)
  %.pre294 = load i32, i32* %EAX.i1056, align 4
  %.pre295 = load i64, i64* %3, align 8
  %.pre296 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit1181

; <label>:7659:                                   ; preds = %block_41c22f
  %7660 = srem i64 %7652, %7650
  %7661 = and i64 %7653, 4294967295
  store i64 %7661, i64* %RAX.i82, align 8
  %7662 = and i64 %7660, 4294967295
  store i64 %7662, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7663 = trunc i64 %7653 to i32
  br label %routine_idivl__edi.exit1181

routine_idivl__edi.exit1181:                      ; preds = %7659, %7657
  %7664 = phi i64 [ %.pre296, %7657 ], [ %7643, %7659 ]
  %7665 = phi i64 [ %.pre295, %7657 ], [ %7649, %7659 ]
  %7666 = phi i32 [ %.pre294, %7657 ], [ %7663, %7659 ]
  %7667 = phi %struct.Memory* [ %7658, %7657 ], [ %MEMORY.74, %7659 ]
  %7668 = load i32, i32* %ESI.i168, align 4
  %7669 = sub i32 %7668, %7666
  %7670 = icmp ult i32 %7668, %7666
  %7671 = zext i1 %7670 to i8
  store i8 %7671, i8* %14, align 1
  %7672 = and i32 %7669, 255
  %7673 = tail call i32 @llvm.ctpop.i32(i32 %7672)
  %7674 = trunc i32 %7673 to i8
  %7675 = and i8 %7674, 1
  %7676 = xor i8 %7675, 1
  store i8 %7676, i8* %21, align 1
  %7677 = xor i32 %7666, %7668
  %7678 = xor i32 %7677, %7669
  %7679 = lshr i32 %7678, 4
  %7680 = trunc i32 %7679 to i8
  %7681 = and i8 %7680, 1
  store i8 %7681, i8* %26, align 1
  %7682 = icmp eq i32 %7669, 0
  %7683 = zext i1 %7682 to i8
  store i8 %7683, i8* %29, align 1
  %7684 = lshr i32 %7669, 31
  %7685 = trunc i32 %7684 to i8
  store i8 %7685, i8* %32, align 1
  %7686 = lshr i32 %7668, 31
  %7687 = lshr i32 %7666, 31
  %7688 = xor i32 %7687, %7686
  %7689 = xor i32 %7684, %7686
  %7690 = add nuw nsw i32 %7689, %7688
  %7691 = icmp eq i32 %7690, 2
  %7692 = zext i1 %7691 to i8
  store i8 %7692, i8* %38, align 1
  %7693 = add i64 %7664, -572
  %7694 = load i32, i32* %ECX.i1669, align 4
  %7695 = add i64 %7665, 8
  store i64 %7695, i64* %3, align 8
  %7696 = inttoptr i64 %7693 to i32*
  store i32 %7694, i32* %7696, align 4
  %7697 = load i64, i64* %3, align 8
  %7698 = load i8, i8* %32, align 1
  %7699 = icmp ne i8 %7698, 0
  %7700 = load i8, i8* %38, align 1
  %7701 = icmp ne i8 %7700, 0
  %7702 = xor i1 %7699, %7701
  %.v512 = select i1 %7702, i64 6, i64 31
  %7703 = add i64 %7697, %.v512
  store i64 %7703, i64* %3, align 8
  br i1 %7702, label %block_41c26a, label %block_.L_41c283

block_41c26a:                                     ; preds = %routine_idivl__edi.exit1181
  %7704 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7704, i64* %RAX.i82, align 8
  %7705 = add i64 %7704, 72684
  %7706 = add i64 %7703, 14
  store i64 %7706, i64* %3, align 8
  %7707 = inttoptr i64 %7705 to i32*
  %7708 = load i32, i32* %7707, align 4
  %7709 = zext i32 %7708 to i64
  store i64 %7709, i64* %RCX.i1674, align 8
  %7710 = load i64, i64* %RBP.i, align 8
  %7711 = add i64 %7710, -576
  %7712 = add i64 %7703, 20
  store i64 %7712, i64* %3, align 8
  %7713 = inttoptr i64 %7711 to i32*
  store i32 %7708, i32* %7713, align 4
  %7714 = load i64, i64* %3, align 8
  %7715 = add i64 %7714, 39
  store i64 %7715, i64* %3, align 8
  br label %block_.L_41c2a5

block_.L_41c283:                                  ; preds = %routine_idivl__edi.exit1181
  store i64 32, i64* %RAX.i82, align 8
  %7716 = load i64, i64* %RBP.i, align 8
  %7717 = add i64 %7716, -88
  %7718 = add i64 %7703, 8
  store i64 %7718, i64* %3, align 8
  %7719 = inttoptr i64 %7717 to i32*
  %7720 = load i32, i32* %7719, align 4
  %7721 = add i32 %7720, 16
  %7722 = zext i32 %7721 to i64
  store i64 %7722, i64* %RCX.i1674, align 8
  %7723 = icmp ugt i32 %7720, -17
  %7724 = zext i1 %7723 to i8
  store i8 %7724, i8* %14, align 1
  %7725 = and i32 %7721, 255
  %7726 = tail call i32 @llvm.ctpop.i32(i32 %7725)
  %7727 = trunc i32 %7726 to i8
  %7728 = and i8 %7727, 1
  %7729 = xor i8 %7728, 1
  store i8 %7729, i8* %21, align 1
  %7730 = xor i32 %7720, 16
  %7731 = xor i32 %7730, %7721
  %7732 = lshr i32 %7731, 4
  %7733 = trunc i32 %7732 to i8
  %7734 = and i8 %7733, 1
  store i8 %7734, i8* %26, align 1
  %7735 = icmp eq i32 %7721, 0
  %7736 = zext i1 %7735 to i8
  store i8 %7736, i8* %29, align 1
  %7737 = lshr i32 %7721, 31
  %7738 = trunc i32 %7737 to i8
  store i8 %7738, i8* %32, align 1
  %7739 = lshr i32 %7720, 31
  %7740 = xor i32 %7737, %7739
  %7741 = add nuw nsw i32 %7740, %7737
  %7742 = icmp eq i32 %7741, 2
  %7743 = zext i1 %7742 to i8
  store i8 %7743, i8* %38, align 1
  %7744 = add i64 %7716, -580
  %7745 = add i64 %7703, 17
  store i64 %7745, i64* %3, align 8
  %7746 = inttoptr i64 %7744 to i32*
  store i32 32, i32* %7746, align 4
  %7747 = load i32, i32* %ECX.i1669, align 4
  %7748 = zext i32 %7747 to i64
  %7749 = load i64, i64* %3, align 8
  store i64 %7748, i64* %RAX.i82, align 8
  %7750 = sext i32 %7747 to i64
  %7751 = lshr i64 %7750, 32
  store i64 %7751, i64* %141, align 8
  %7752 = load i64, i64* %RBP.i, align 8
  %7753 = add i64 %7752, -580
  %7754 = add i64 %7749, 9
  store i64 %7754, i64* %3, align 8
  %7755 = inttoptr i64 %7753 to i32*
  %7756 = load i32, i32* %7755, align 4
  %7757 = zext i32 %7756 to i64
  store i64 %7757, i64* %RCX.i1674, align 8
  %7758 = add i64 %7749, 11
  store i64 %7758, i64* %3, align 8
  %7759 = sext i32 %7756 to i64
  %7760 = shl nuw i64 %7751, 32
  %7761 = or i64 %7760, %7748
  %7762 = sdiv i64 %7761, %7759
  %7763 = shl i64 %7762, 32
  %7764 = ashr exact i64 %7763, 32
  %7765 = icmp eq i64 %7762, %7764
  br i1 %7765, label %7768, label %7766

; <label>:7766:                                   ; preds = %block_.L_41c283
  %7767 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7758, %struct.Memory* %7667)
  %.pre297 = load i64, i64* %RBP.i, align 8
  %.pre298 = load i32, i32* %EAX.i1056, align 4
  %.pre299 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1144

; <label>:7768:                                   ; preds = %block_.L_41c283
  %7769 = srem i64 %7761, %7759
  %7770 = and i64 %7762, 4294967295
  store i64 %7770, i64* %RAX.i82, align 8
  %7771 = and i64 %7769, 4294967295
  store i64 %7771, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7772 = trunc i64 %7762 to i32
  br label %routine_idivl__ecx.exit1144

routine_idivl__ecx.exit1144:                      ; preds = %7768, %7766
  %7773 = phi i64 [ %.pre299, %7766 ], [ %7758, %7768 ]
  %7774 = phi i32 [ %.pre298, %7766 ], [ %7772, %7768 ]
  %7775 = phi i64 [ %.pre297, %7766 ], [ %7752, %7768 ]
  %7776 = phi %struct.Memory* [ %7767, %7766 ], [ %7667, %7768 ]
  %7777 = add i64 %7775, -576
  %7778 = add i64 %7773, 6
  store i64 %7778, i64* %3, align 8
  %7779 = inttoptr i64 %7777 to i32*
  store i32 %7774, i32* %7779, align 4
  %.pre300 = load i64, i64* %3, align 8
  br label %block_.L_41c2a5

block_.L_41c2a5:                                  ; preds = %routine_idivl__ecx.exit1144, %block_41c26a
  %7780 = phi i64 [ %.pre300, %routine_idivl__ecx.exit1144 ], [ %7715, %block_41c26a ]
  %MEMORY.75 = phi %struct.Memory* [ %7776, %routine_idivl__ecx.exit1144 ], [ %7667, %block_41c26a ]
  %7781 = load i64, i64* %RBP.i, align 8
  %7782 = add i64 %7781, -576
  %7783 = add i64 %7780, 6
  store i64 %7783, i64* %3, align 8
  %7784 = inttoptr i64 %7782 to i32*
  %7785 = load i32, i32* %7784, align 4
  %7786 = zext i32 %7785 to i64
  store i64 %7786, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i1674, align 8
  %7787 = sub i32 0, %7785
  %7788 = icmp ne i32 %7785, 0
  %7789 = zext i1 %7788 to i8
  store i8 %7789, i8* %14, align 1
  %7790 = and i32 %7787, 255
  %7791 = tail call i32 @llvm.ctpop.i32(i32 %7790)
  %7792 = trunc i32 %7791 to i8
  %7793 = and i8 %7792, 1
  %7794 = xor i8 %7793, 1
  store i8 %7794, i8* %21, align 1
  %7795 = xor i32 %7785, %7787
  %7796 = lshr i32 %7795, 4
  %7797 = trunc i32 %7796 to i8
  %7798 = and i8 %7797, 1
  store i8 %7798, i8* %26, align 1
  %7799 = icmp eq i32 %7785, 0
  %7800 = zext i1 %7799 to i8
  store i8 %7800, i8* %29, align 1
  %7801 = lshr i32 %7787, 31
  %7802 = trunc i32 %7801 to i8
  store i8 %7802, i8* %32, align 1
  %7803 = lshr i32 %7785, 31
  %7804 = add nuw nsw i32 %7801, %7803
  %7805 = icmp eq i32 %7804, 2
  %7806 = zext i1 %7805 to i8
  store i8 %7806, i8* %38, align 1
  %7807 = icmp ne i8 %7802, 0
  %7808 = xor i1 %7807, %7805
  %7809 = or i1 %7799, %7808
  %.v430 = select i1 %7809, i64 29, i64 16
  %7810 = add i64 %7780, %.v430
  store i64 %7810, i64* %3, align 8
  br i1 %7809, label %block_.L_41c2c2, label %block_41c2b5

block_41c2b5:                                     ; preds = %block_.L_41c2a5
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %7811 = add i64 %7781, -584
  %7812 = add i64 %7810, 8
  store i64 %7812, i64* %3, align 8
  %7813 = inttoptr i64 %7811 to i32*
  store i32 0, i32* %7813, align 4
  %7814 = load i64, i64* %3, align 8
  %7815 = add i64 %7814, 138
  store i64 %7815, i64* %3, align 8
  br label %block_.L_41c347

block_.L_41c2c2:                                  ; preds = %block_.L_41c2a5
  store i64 32, i64* %RAX.i82, align 8
  %7816 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7816, i64* %RCX.i1674, align 8
  %7817 = add i64 %7816, 72684
  %7818 = add i64 %7810, 19
  store i64 %7818, i64* %3, align 8
  %7819 = inttoptr i64 %7817 to i32*
  %7820 = load i32, i32* %7819, align 4
  %7821 = zext i32 %7820 to i64
  store i64 %7821, i64* %RDX.i532, align 8
  %7822 = add i64 %7781, -88
  %7823 = add i64 %7810, 22
  store i64 %7823, i64* %3, align 8
  %7824 = inttoptr i64 %7822 to i32*
  %7825 = load i32, i32* %7824, align 4
  %7826 = add i32 %7825, 16
  %7827 = zext i32 %7826 to i64
  store i64 %7827, i64* %RSI.i1183, align 8
  %7828 = icmp ugt i32 %7825, -17
  %7829 = zext i1 %7828 to i8
  store i8 %7829, i8* %14, align 1
  %7830 = and i32 %7826, 255
  %7831 = tail call i32 @llvm.ctpop.i32(i32 %7830)
  %7832 = trunc i32 %7831 to i8
  %7833 = and i8 %7832, 1
  %7834 = xor i8 %7833, 1
  store i8 %7834, i8* %21, align 1
  %7835 = xor i32 %7825, 16
  %7836 = xor i32 %7835, %7826
  %7837 = lshr i32 %7836, 4
  %7838 = trunc i32 %7837 to i8
  %7839 = and i8 %7838, 1
  store i8 %7839, i8* %26, align 1
  %7840 = icmp eq i32 %7826, 0
  %7841 = zext i1 %7840 to i8
  store i8 %7841, i8* %29, align 1
  %7842 = lshr i32 %7826, 31
  %7843 = trunc i32 %7842 to i8
  store i8 %7843, i8* %32, align 1
  %7844 = lshr i32 %7825, 31
  %7845 = xor i32 %7842, %7844
  %7846 = add nuw nsw i32 %7845, %7842
  %7847 = icmp eq i32 %7846, 2
  %7848 = zext i1 %7847 to i8
  store i8 %7848, i8* %38, align 1
  %7849 = add i64 %7781, -588
  %7850 = add i64 %7810, 31
  store i64 %7850, i64* %3, align 8
  %7851 = inttoptr i64 %7849 to i32*
  store i32 32, i32* %7851, align 4
  %7852 = load i32, i32* %ESI.i168, align 4
  %7853 = zext i32 %7852 to i64
  %7854 = load i64, i64* %3, align 8
  store i64 %7853, i64* %RAX.i82, align 8
  %7855 = load i64, i64* %RBP.i, align 8
  %7856 = add i64 %7855, -592
  %7857 = load i32, i32* %EDX.i443, align 4
  %7858 = add i64 %7854, 8
  store i64 %7858, i64* %3, align 8
  %7859 = inttoptr i64 %7856 to i32*
  store i32 %7857, i32* %7859, align 4
  %7860 = load i64, i64* %3, align 8
  %7861 = load i32, i32* %EAX.i1056, align 8
  %7862 = sext i32 %7861 to i64
  %7863 = lshr i64 %7862, 32
  store i64 %7863, i64* %141, align 8
  %7864 = load i64, i64* %RBP.i, align 8
  %7865 = add i64 %7864, -588
  %7866 = add i64 %7860, 7
  store i64 %7866, i64* %3, align 8
  %7867 = inttoptr i64 %7865 to i32*
  %7868 = load i32, i32* %7867, align 4
  %7869 = zext i32 %7868 to i64
  store i64 %7869, i64* %RSI.i1183, align 8
  %7870 = add i64 %7860, 9
  store i64 %7870, i64* %3, align 8
  %7871 = zext i32 %7861 to i64
  %7872 = sext i32 %7868 to i64
  %7873 = shl nuw i64 %7863, 32
  %7874 = or i64 %7873, %7871
  %7875 = sdiv i64 %7874, %7872
  %7876 = shl i64 %7875, 32
  %7877 = ashr exact i64 %7876, 32
  %7878 = icmp eq i64 %7875, %7877
  br i1 %7878, label %7881, label %7879

; <label>:7879:                                   ; preds = %block_.L_41c2c2
  %7880 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7870, %struct.Memory* %MEMORY.75)
  %.pre301 = load i64, i64* %RBP.i, align 8
  %.pre302 = load i64, i64* %3, align 8
  %.pre303 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit1093

; <label>:7881:                                   ; preds = %block_.L_41c2c2
  %7882 = srem i64 %7874, %7872
  %7883 = and i64 %7875, 4294967295
  store i64 %7883, i64* %RAX.i82, align 8
  %7884 = and i64 %7882, 4294967295
  store i64 %7884, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7885 = trunc i64 %7875 to i32
  br label %routine_idivl__esi.exit1093

routine_idivl__esi.exit1093:                      ; preds = %7881, %7879
  %7886 = phi i32 [ %.pre303, %7879 ], [ %7885, %7881 ]
  %7887 = phi i64 [ %.pre302, %7879 ], [ %7870, %7881 ]
  %7888 = phi i64 [ %.pre301, %7879 ], [ %7864, %7881 ]
  %7889 = phi %struct.Memory* [ %7880, %7879 ], [ %MEMORY.75, %7881 ]
  %7890 = add i64 %7888, -592
  %7891 = add i64 %7887, 6
  store i64 %7891, i64* %3, align 8
  %7892 = inttoptr i64 %7890 to i32*
  %7893 = load i32, i32* %7892, align 4
  %7894 = zext i32 %7893 to i64
  store i64 %7894, i64* %RDI.i129, align 8
  %7895 = sub i32 %7893, %7886
  %7896 = icmp ult i32 %7893, %7886
  %7897 = zext i1 %7896 to i8
  store i8 %7897, i8* %14, align 1
  %7898 = and i32 %7895, 255
  %7899 = tail call i32 @llvm.ctpop.i32(i32 %7898)
  %7900 = trunc i32 %7899 to i8
  %7901 = and i8 %7900, 1
  %7902 = xor i8 %7901, 1
  store i8 %7902, i8* %21, align 1
  %7903 = xor i32 %7886, %7893
  %7904 = xor i32 %7903, %7895
  %7905 = lshr i32 %7904, 4
  %7906 = trunc i32 %7905 to i8
  %7907 = and i8 %7906, 1
  store i8 %7907, i8* %26, align 1
  %7908 = icmp eq i32 %7895, 0
  %7909 = zext i1 %7908 to i8
  store i8 %7909, i8* %29, align 1
  %7910 = lshr i32 %7895, 31
  %7911 = trunc i32 %7910 to i8
  store i8 %7911, i8* %32, align 1
  %7912 = lshr i32 %7893, 31
  %7913 = lshr i32 %7886, 31
  %7914 = xor i32 %7913, %7912
  %7915 = xor i32 %7910, %7912
  %7916 = add nuw nsw i32 %7915, %7914
  %7917 = icmp eq i32 %7916, 2
  %7918 = zext i1 %7917 to i8
  store i8 %7918, i8* %38, align 1
  %7919 = icmp ne i8 %7911, 0
  %7920 = xor i1 %7919, %7917
  %.v431 = select i1 %7920, i64 14, i64 39
  %7921 = add i64 %7887, %.v431
  store i64 %7921, i64* %3, align 8
  br i1 %7920, label %block_41c300, label %block_.L_41c319

block_41c300:                                     ; preds = %routine_idivl__esi.exit1093
  %7922 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7922, i64* %RAX.i82, align 8
  %7923 = add i64 %7922, 72684
  %7924 = add i64 %7921, 14
  store i64 %7924, i64* %3, align 8
  %7925 = inttoptr i64 %7923 to i32*
  %7926 = load i32, i32* %7925, align 4
  %7927 = zext i32 %7926 to i64
  store i64 %7927, i64* %RCX.i1674, align 8
  %7928 = add i64 %7888, -596
  %7929 = add i64 %7921, 20
  store i64 %7929, i64* %3, align 8
  %7930 = inttoptr i64 %7928 to i32*
  store i32 %7926, i32* %7930, align 4
  %7931 = load i64, i64* %3, align 8
  %7932 = add i64 %7931, 39
  store i64 %7932, i64* %3, align 8
  br label %block_.L_41c33b

block_.L_41c319:                                  ; preds = %routine_idivl__esi.exit1093
  store i64 32, i64* %RAX.i82, align 8
  %7933 = add i64 %7888, -88
  %7934 = add i64 %7921, 8
  store i64 %7934, i64* %3, align 8
  %7935 = inttoptr i64 %7933 to i32*
  %7936 = load i32, i32* %7935, align 4
  %7937 = add i32 %7936, 16
  %7938 = zext i32 %7937 to i64
  store i64 %7938, i64* %RCX.i1674, align 8
  %7939 = icmp ugt i32 %7936, -17
  %7940 = zext i1 %7939 to i8
  store i8 %7940, i8* %14, align 1
  %7941 = and i32 %7937, 255
  %7942 = tail call i32 @llvm.ctpop.i32(i32 %7941)
  %7943 = trunc i32 %7942 to i8
  %7944 = and i8 %7943, 1
  %7945 = xor i8 %7944, 1
  store i8 %7945, i8* %21, align 1
  %7946 = xor i32 %7936, 16
  %7947 = xor i32 %7946, %7937
  %7948 = lshr i32 %7947, 4
  %7949 = trunc i32 %7948 to i8
  %7950 = and i8 %7949, 1
  store i8 %7950, i8* %26, align 1
  %7951 = icmp eq i32 %7937, 0
  %7952 = zext i1 %7951 to i8
  store i8 %7952, i8* %29, align 1
  %7953 = lshr i32 %7937, 31
  %7954 = trunc i32 %7953 to i8
  store i8 %7954, i8* %32, align 1
  %7955 = lshr i32 %7936, 31
  %7956 = xor i32 %7953, %7955
  %7957 = add nuw nsw i32 %7956, %7953
  %7958 = icmp eq i32 %7957, 2
  %7959 = zext i1 %7958 to i8
  store i8 %7959, i8* %38, align 1
  %7960 = add i64 %7888, -600
  %7961 = add i64 %7921, 17
  store i64 %7961, i64* %3, align 8
  %7962 = inttoptr i64 %7960 to i32*
  store i32 32, i32* %7962, align 4
  %7963 = load i32, i32* %ECX.i1669, align 4
  %7964 = zext i32 %7963 to i64
  %7965 = load i64, i64* %3, align 8
  store i64 %7964, i64* %RAX.i82, align 8
  %7966 = sext i32 %7963 to i64
  %7967 = lshr i64 %7966, 32
  store i64 %7967, i64* %141, align 8
  %7968 = load i64, i64* %RBP.i, align 8
  %7969 = add i64 %7968, -600
  %7970 = add i64 %7965, 9
  store i64 %7970, i64* %3, align 8
  %7971 = inttoptr i64 %7969 to i32*
  %7972 = load i32, i32* %7971, align 4
  %7973 = zext i32 %7972 to i64
  store i64 %7973, i64* %RCX.i1674, align 8
  %7974 = add i64 %7965, 11
  store i64 %7974, i64* %3, align 8
  %7975 = sext i32 %7972 to i64
  %7976 = shl nuw i64 %7967, 32
  %7977 = or i64 %7976, %7964
  %7978 = sdiv i64 %7977, %7975
  %7979 = shl i64 %7978, 32
  %7980 = ashr exact i64 %7979, 32
  %7981 = icmp eq i64 %7978, %7980
  br i1 %7981, label %7984, label %7982

; <label>:7982:                                   ; preds = %block_.L_41c319
  %7983 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7974, %struct.Memory* %7889)
  %.pre304 = load i64, i64* %RBP.i, align 8
  %.pre305 = load i32, i32* %EAX.i1056, align 4
  %.pre306 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1054

; <label>:7984:                                   ; preds = %block_.L_41c319
  %7985 = srem i64 %7977, %7975
  %7986 = and i64 %7978, 4294967295
  store i64 %7986, i64* %RAX.i82, align 8
  %7987 = and i64 %7985, 4294967295
  store i64 %7987, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7988 = trunc i64 %7978 to i32
  br label %routine_idivl__ecx.exit1054

routine_idivl__ecx.exit1054:                      ; preds = %7984, %7982
  %7989 = phi i64 [ %.pre306, %7982 ], [ %7974, %7984 ]
  %7990 = phi i32 [ %.pre305, %7982 ], [ %7988, %7984 ]
  %7991 = phi i64 [ %.pre304, %7982 ], [ %7968, %7984 ]
  %7992 = phi %struct.Memory* [ %7983, %7982 ], [ %7889, %7984 ]
  %7993 = add i64 %7991, -596
  %7994 = add i64 %7989, 6
  store i64 %7994, i64* %3, align 8
  %7995 = inttoptr i64 %7993 to i32*
  store i32 %7990, i32* %7995, align 4
  %.pre307 = load i64, i64* %3, align 8
  br label %block_.L_41c33b

block_.L_41c33b:                                  ; preds = %routine_idivl__ecx.exit1054, %block_41c300
  %7996 = phi i64 [ %.pre307, %routine_idivl__ecx.exit1054 ], [ %7932, %block_41c300 ]
  %MEMORY.76 = phi %struct.Memory* [ %7992, %routine_idivl__ecx.exit1054 ], [ %7889, %block_41c300 ]
  %7997 = load i64, i64* %RBP.i, align 8
  %7998 = add i64 %7997, -596
  %7999 = add i64 %7996, 6
  store i64 %7999, i64* %3, align 8
  %8000 = inttoptr i64 %7998 to i32*
  %8001 = load i32, i32* %8000, align 4
  %8002 = zext i32 %8001 to i64
  store i64 %8002, i64* %RAX.i82, align 8
  %8003 = add i64 %7997, -584
  %8004 = add i64 %7996, 12
  store i64 %8004, i64* %3, align 8
  %8005 = inttoptr i64 %8003 to i32*
  store i32 %8001, i32* %8005, align 4
  %.pre308 = load i64, i64* %3, align 8
  br label %block_.L_41c347

block_.L_41c347:                                  ; preds = %block_.L_41c33b, %block_41c2b5
  %8006 = phi i64 [ %.pre308, %block_.L_41c33b ], [ %7815, %block_41c2b5 ]
  %MEMORY.77 = phi %struct.Memory* [ %MEMORY.76, %block_.L_41c33b ], [ %MEMORY.75, %block_41c2b5 ]
  %8007 = load i64, i64* %RBP.i, align 8
  %8008 = add i64 %8007, -584
  %8009 = add i64 %8006, 6
  store i64 %8009, i64* %3, align 8
  %8010 = inttoptr i64 %8008 to i32*
  %8011 = load i32, i32* %8010, align 4
  %8012 = zext i32 %8011 to i64
  store i64 %8012, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i1674, align 8
  %8013 = add i64 %8007, -572
  %8014 = add i64 %8006, 17
  store i64 %8014, i64* %3, align 8
  %8015 = inttoptr i64 %8013 to i32*
  %8016 = load i32, i32* %8015, align 4
  %8017 = add i32 %8011, %8016
  %8018 = zext i32 %8017 to i64
  %8019 = icmp ult i32 %8017, %8016
  %8020 = icmp ult i32 %8017, %8011
  %8021 = or i1 %8019, %8020
  %8022 = zext i1 %8021 to i8
  store i8 %8022, i8* %14, align 1
  %8023 = and i32 %8017, 255
  %8024 = tail call i32 @llvm.ctpop.i32(i32 %8023)
  %8025 = trunc i32 %8024 to i8
  %8026 = and i8 %8025, 1
  %8027 = xor i8 %8026, 1
  store i8 %8027, i8* %21, align 1
  %8028 = xor i32 %8011, %8016
  %8029 = xor i32 %8028, %8017
  %8030 = lshr i32 %8029, 4
  %8031 = trunc i32 %8030 to i8
  %8032 = and i8 %8031, 1
  store i8 %8032, i8* %26, align 1
  %8033 = icmp eq i32 %8017, 0
  %8034 = zext i1 %8033 to i8
  store i8 %8034, i8* %29, align 1
  %8035 = lshr i32 %8017, 31
  %8036 = trunc i32 %8035 to i8
  store i8 %8036, i8* %32, align 1
  %8037 = lshr i32 %8016, 31
  %8038 = lshr i32 %8011, 31
  %8039 = xor i32 %8035, %8037
  %8040 = xor i32 %8035, %8038
  %8041 = add nuw nsw i32 %8039, %8040
  %8042 = icmp eq i32 %8041, 2
  %8043 = zext i1 %8042 to i8
  store i8 %8043, i8* %38, align 1
  store i64 %8018, i64* %RAX.i82, align 8
  %8044 = sext i32 %8017 to i64
  %8045 = lshr i64 %8044, 32
  store i64 %8045, i64* %141, align 8
  %8046 = add i64 %8006, 24
  store i64 %8046, i64* %3, align 8
  %8047 = shl nuw i64 %8045, 32
  %8048 = or i64 %8047, %8018
  %8049 = sdiv i64 %8048, 2
  %8050 = shl i64 %8049, 32
  %8051 = ashr exact i64 %8050, 32
  %8052 = icmp eq i64 %8049, %8051
  br i1 %8052, label %8055, label %8053

; <label>:8053:                                   ; preds = %block_.L_41c347
  %8054 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8046, %struct.Memory* %MEMORY.77)
  %.pre309 = load i64, i64* %RBP.i, align 8
  %.pre310 = load i32, i32* %EAX.i1056, align 4
  %.pre311 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit1024

; <label>:8055:                                   ; preds = %block_.L_41c347
  %8056 = srem i64 %8048, 2
  %8057 = and i64 %8049, 4294967295
  store i64 %8057, i64* %RAX.i82, align 8
  %8058 = and i64 %8056, 4294967295
  store i64 %8058, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %8059 = trunc i64 %8049 to i32
  br label %routine_idivl__ecx.exit1024

routine_idivl__ecx.exit1024:                      ; preds = %8055, %8053
  %8060 = phi i64 [ %.pre311, %8053 ], [ %8046, %8055 ]
  %8061 = phi i32 [ %.pre310, %8053 ], [ %8059, %8055 ]
  %8062 = phi i64 [ %.pre309, %8053 ], [ %8007, %8055 ]
  %8063 = phi %struct.Memory* [ %8054, %8053 ], [ %MEMORY.77, %8055 ]
  %8064 = add i64 %8062, -44
  %8065 = add i64 %8060, 3
  store i64 %8065, i64* %3, align 8
  %8066 = inttoptr i64 %8064 to i32*
  store i32 %8061, i32* %8066, align 4
  %8067 = load i64, i64* %3, align 8
  %8068 = add i64 %8067, 312
  store i64 %8068, i64* %3, align 8
  br label %block_.L_41c49a

block_.L_41c367:                                  ; preds = %block_.L_41c21c
  %8069 = add i64 %7569, -84
  %8070 = add i64 %7596, 25
  store i64 %8070, i64* %3, align 8
  %8071 = inttoptr i64 %8069 to i32*
  %8072 = load i32, i32* %8071, align 4
  %8073 = add i32 %8072, 16
  %8074 = zext i32 %8073 to i64
  store i64 %8074, i64* %RDI.i129, align 8
  %8075 = icmp ugt i32 %8072, -17
  %8076 = zext i1 %8075 to i8
  store i8 %8076, i8* %14, align 1
  %8077 = and i32 %8073, 255
  %8078 = tail call i32 @llvm.ctpop.i32(i32 %8077)
  %8079 = trunc i32 %8078 to i8
  %8080 = and i8 %8079, 1
  %8081 = xor i8 %8080, 1
  store i8 %8081, i8* %21, align 1
  %8082 = xor i32 %8072, 16
  %8083 = xor i32 %8082, %8073
  %8084 = lshr i32 %8083, 4
  %8085 = trunc i32 %8084 to i8
  %8086 = and i8 %8085, 1
  store i8 %8086, i8* %26, align 1
  %8087 = icmp eq i32 %8073, 0
  %8088 = zext i1 %8087 to i8
  store i8 %8088, i8* %29, align 1
  %8089 = lshr i32 %8073, 31
  %8090 = trunc i32 %8089 to i8
  store i8 %8090, i8* %32, align 1
  %8091 = lshr i32 %8072, 31
  %8092 = xor i32 %8089, %8091
  %8093 = add nuw nsw i32 %8092, %8089
  %8094 = icmp eq i32 %8093, 2
  %8095 = zext i1 %8094 to i8
  store i8 %8095, i8* %38, align 1
  %8096 = add i64 %7569, -604
  %8097 = add i64 %7596, 34
  store i64 %8097, i64* %3, align 8
  %8098 = inttoptr i64 %8096 to i32*
  store i32 32, i32* %8098, align 4
  %8099 = load i32, i32* %EDI.i1356, align 4
  %8100 = zext i32 %8099 to i64
  %8101 = load i64, i64* %3, align 8
  store i64 %8100, i64* %RAX.i82, align 8
  %8102 = sext i32 %8099 to i64
  %8103 = lshr i64 %8102, 32
  store i64 %8103, i64* %141, align 8
  %8104 = load i64, i64* %RBP.i, align 8
  %8105 = add i64 %8104, -604
  %8106 = add i64 %8101, 9
  store i64 %8106, i64* %3, align 8
  %8107 = inttoptr i64 %8105 to i32*
  %8108 = load i32, i32* %8107, align 4
  %8109 = zext i32 %8108 to i64
  store i64 %8109, i64* %RDI.i129, align 8
  %8110 = add i64 %8101, 11
  store i64 %8110, i64* %3, align 8
  %8111 = sext i32 %8108 to i64
  %8112 = shl nuw i64 %8103, 32
  %8113 = or i64 %8112, %8100
  %8114 = sdiv i64 %8113, %8111
  %8115 = shl i64 %8114, 32
  %8116 = ashr exact i64 %8115, 32
  %8117 = icmp eq i64 %8114, %8116
  br i1 %8117, label %8120, label %8118

; <label>:8118:                                   ; preds = %block_.L_41c367
  %8119 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8110, %struct.Memory* %MEMORY.74)
  %.pre312 = load i32, i32* %EAX.i1056, align 4
  %.pre313 = load i64, i64* %3, align 8
  %.pre314 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit

; <label>:8120:                                   ; preds = %block_.L_41c367
  %8121 = srem i64 %8113, %8111
  %8122 = and i64 %8114, 4294967295
  store i64 %8122, i64* %RAX.i82, align 8
  %8123 = and i64 %8121, 4294967295
  store i64 %8123, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %8124 = trunc i64 %8114 to i32
  br label %routine_idivl__edi.exit

routine_idivl__edi.exit:                          ; preds = %8120, %8118
  %8125 = phi i64 [ %.pre314, %8118 ], [ %8104, %8120 ]
  %8126 = phi i64 [ %.pre313, %8118 ], [ %8110, %8120 ]
  %8127 = phi i32 [ %.pre312, %8118 ], [ %8124, %8120 ]
  %8128 = phi %struct.Memory* [ %8119, %8118 ], [ %MEMORY.74, %8120 ]
  %8129 = load i32, i32* %ESI.i168, align 4
  %8130 = sub i32 %8129, %8127
  %8131 = icmp ult i32 %8129, %8127
  %8132 = zext i1 %8131 to i8
  store i8 %8132, i8* %14, align 1
  %8133 = and i32 %8130, 255
  %8134 = tail call i32 @llvm.ctpop.i32(i32 %8133)
  %8135 = trunc i32 %8134 to i8
  %8136 = and i8 %8135, 1
  %8137 = xor i8 %8136, 1
  store i8 %8137, i8* %21, align 1
  %8138 = xor i32 %8127, %8129
  %8139 = xor i32 %8138, %8130
  %8140 = lshr i32 %8139, 4
  %8141 = trunc i32 %8140 to i8
  %8142 = and i8 %8141, 1
  store i8 %8142, i8* %26, align 1
  %8143 = icmp eq i32 %8130, 0
  %8144 = zext i1 %8143 to i8
  store i8 %8144, i8* %29, align 1
  %8145 = lshr i32 %8130, 31
  %8146 = trunc i32 %8145 to i8
  store i8 %8146, i8* %32, align 1
  %8147 = lshr i32 %8129, 31
  %8148 = lshr i32 %8127, 31
  %8149 = xor i32 %8148, %8147
  %8150 = xor i32 %8145, %8147
  %8151 = add nuw nsw i32 %8150, %8149
  %8152 = icmp eq i32 %8151, 2
  %8153 = zext i1 %8152 to i8
  store i8 %8153, i8* %38, align 1
  %8154 = add i64 %8125, -608
  %8155 = load i32, i32* %ECX.i1669, align 4
  %8156 = add i64 %8126, 8
  store i64 %8156, i64* %3, align 8
  %8157 = inttoptr i64 %8154 to i32*
  store i32 %8155, i32* %8157, align 4
  %8158 = load i64, i64* %3, align 8
  %8159 = load i8, i8* %32, align 1
  %8160 = icmp ne i8 %8159, 0
  %8161 = load i8, i8* %38, align 1
  %8162 = icmp ne i8 %8161, 0
  %8163 = xor i1 %8160, %8162
  %.v511 = select i1 %8163, i64 6, i64 31
  %8164 = add i64 %8158, %.v511
  store i64 %8164, i64* %3, align 8
  br i1 %8163, label %block_41c3a2, label %block_.L_41c3bb

block_41c3a2:                                     ; preds = %routine_idivl__edi.exit
  %8165 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8165, i64* %RAX.i82, align 8
  %8166 = add i64 %8165, 72684
  %8167 = add i64 %8164, 14
  store i64 %8167, i64* %3, align 8
  %8168 = inttoptr i64 %8166 to i32*
  %8169 = load i32, i32* %8168, align 4
  %8170 = zext i32 %8169 to i64
  store i64 %8170, i64* %RCX.i1674, align 8
  %8171 = load i64, i64* %RBP.i, align 8
  %8172 = add i64 %8171, -612
  %8173 = add i64 %8164, 20
  store i64 %8173, i64* %3, align 8
  %8174 = inttoptr i64 %8172 to i32*
  store i32 %8169, i32* %8174, align 4
  %8175 = load i64, i64* %3, align 8
  %8176 = add i64 %8175, 39
  store i64 %8176, i64* %3, align 8
  br label %block_.L_41c3dd

block_.L_41c3bb:                                  ; preds = %routine_idivl__edi.exit
  store i64 32, i64* %RAX.i82, align 8
  %8177 = load i64, i64* %RBP.i, align 8
  %8178 = add i64 %8177, -84
  %8179 = add i64 %8164, 8
  store i64 %8179, i64* %3, align 8
  %8180 = inttoptr i64 %8178 to i32*
  %8181 = load i32, i32* %8180, align 4
  %8182 = add i32 %8181, 16
  %8183 = zext i32 %8182 to i64
  store i64 %8183, i64* %RCX.i1674, align 8
  %8184 = icmp ugt i32 %8181, -17
  %8185 = zext i1 %8184 to i8
  store i8 %8185, i8* %14, align 1
  %8186 = and i32 %8182, 255
  %8187 = tail call i32 @llvm.ctpop.i32(i32 %8186)
  %8188 = trunc i32 %8187 to i8
  %8189 = and i8 %8188, 1
  %8190 = xor i8 %8189, 1
  store i8 %8190, i8* %21, align 1
  %8191 = xor i32 %8181, 16
  %8192 = xor i32 %8191, %8182
  %8193 = lshr i32 %8192, 4
  %8194 = trunc i32 %8193 to i8
  %8195 = and i8 %8194, 1
  store i8 %8195, i8* %26, align 1
  %8196 = icmp eq i32 %8182, 0
  %8197 = zext i1 %8196 to i8
  store i8 %8197, i8* %29, align 1
  %8198 = lshr i32 %8182, 31
  %8199 = trunc i32 %8198 to i8
  store i8 %8199, i8* %32, align 1
  %8200 = lshr i32 %8181, 31
  %8201 = xor i32 %8198, %8200
  %8202 = add nuw nsw i32 %8201, %8198
  %8203 = icmp eq i32 %8202, 2
  %8204 = zext i1 %8203 to i8
  store i8 %8204, i8* %38, align 1
  %8205 = add i64 %8177, -616
  %8206 = add i64 %8164, 17
  store i64 %8206, i64* %3, align 8
  %8207 = inttoptr i64 %8205 to i32*
  store i32 32, i32* %8207, align 4
  %8208 = load i32, i32* %ECX.i1669, align 4
  %8209 = zext i32 %8208 to i64
  %8210 = load i64, i64* %3, align 8
  store i64 %8209, i64* %RAX.i82, align 8
  %8211 = sext i32 %8208 to i64
  %8212 = lshr i64 %8211, 32
  store i64 %8212, i64* %141, align 8
  %8213 = load i64, i64* %RBP.i, align 8
  %8214 = add i64 %8213, -616
  %8215 = add i64 %8210, 9
  store i64 %8215, i64* %3, align 8
  %8216 = inttoptr i64 %8214 to i32*
  %8217 = load i32, i32* %8216, align 4
  %8218 = zext i32 %8217 to i64
  store i64 %8218, i64* %RCX.i1674, align 8
  %8219 = add i64 %8210, 11
  store i64 %8219, i64* %3, align 8
  %8220 = sext i32 %8217 to i64
  %8221 = shl nuw i64 %8212, 32
  %8222 = or i64 %8221, %8209
  %8223 = sdiv i64 %8222, %8220
  %8224 = shl i64 %8223, 32
  %8225 = ashr exact i64 %8224, 32
  %8226 = icmp eq i64 %8223, %8225
  br i1 %8226, label %8229, label %8227

; <label>:8227:                                   ; preds = %block_.L_41c3bb
  %8228 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8219, %struct.Memory* %8128)
  %.pre315 = load i64, i64* %RBP.i, align 8
  %.pre316 = load i32, i32* %EAX.i1056, align 4
  %.pre317 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit951

; <label>:8229:                                   ; preds = %block_.L_41c3bb
  %8230 = srem i64 %8222, %8220
  %8231 = and i64 %8223, 4294967295
  store i64 %8231, i64* %RAX.i82, align 8
  %8232 = and i64 %8230, 4294967295
  store i64 %8232, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %8233 = trunc i64 %8223 to i32
  br label %routine_idivl__ecx.exit951

routine_idivl__ecx.exit951:                       ; preds = %8229, %8227
  %8234 = phi i64 [ %.pre317, %8227 ], [ %8219, %8229 ]
  %8235 = phi i32 [ %.pre316, %8227 ], [ %8233, %8229 ]
  %8236 = phi i64 [ %.pre315, %8227 ], [ %8213, %8229 ]
  %8237 = phi %struct.Memory* [ %8228, %8227 ], [ %8128, %8229 ]
  %8238 = add i64 %8236, -612
  %8239 = add i64 %8234, 6
  store i64 %8239, i64* %3, align 8
  %8240 = inttoptr i64 %8238 to i32*
  store i32 %8235, i32* %8240, align 4
  %.pre318 = load i64, i64* %3, align 8
  br label %block_.L_41c3dd

block_.L_41c3dd:                                  ; preds = %routine_idivl__ecx.exit951, %block_41c3a2
  %8241 = phi i64 [ %.pre318, %routine_idivl__ecx.exit951 ], [ %8176, %block_41c3a2 ]
  %MEMORY.78 = phi %struct.Memory* [ %8237, %routine_idivl__ecx.exit951 ], [ %8128, %block_41c3a2 ]
  %8242 = load i64, i64* %RBP.i, align 8
  %8243 = add i64 %8242, -612
  %8244 = add i64 %8241, 6
  store i64 %8244, i64* %3, align 8
  %8245 = inttoptr i64 %8243 to i32*
  %8246 = load i32, i32* %8245, align 4
  %8247 = zext i32 %8246 to i64
  store i64 %8247, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i1674, align 8
  %8248 = sub i32 0, %8246
  %8249 = icmp ne i32 %8246, 0
  %8250 = zext i1 %8249 to i8
  store i8 %8250, i8* %14, align 1
  %8251 = and i32 %8248, 255
  %8252 = tail call i32 @llvm.ctpop.i32(i32 %8251)
  %8253 = trunc i32 %8252 to i8
  %8254 = and i8 %8253, 1
  %8255 = xor i8 %8254, 1
  store i8 %8255, i8* %21, align 1
  %8256 = xor i32 %8246, %8248
  %8257 = lshr i32 %8256, 4
  %8258 = trunc i32 %8257 to i8
  %8259 = and i8 %8258, 1
  store i8 %8259, i8* %26, align 1
  %8260 = icmp eq i32 %8246, 0
  %8261 = zext i1 %8260 to i8
  store i8 %8261, i8* %29, align 1
  %8262 = lshr i32 %8248, 31
  %8263 = trunc i32 %8262 to i8
  store i8 %8263, i8* %32, align 1
  %8264 = lshr i32 %8246, 31
  %8265 = add nuw nsw i32 %8262, %8264
  %8266 = icmp eq i32 %8265, 2
  %8267 = zext i1 %8266 to i8
  store i8 %8267, i8* %38, align 1
  %8268 = icmp ne i8 %8263, 0
  %8269 = xor i1 %8268, %8266
  %8270 = or i1 %8260, %8269
  %.v428 = select i1 %8270, i64 29, i64 16
  %8271 = add i64 %8241, %.v428
  store i64 %8271, i64* %3, align 8
  br i1 %8270, label %block_.L_41c3fa, label %block_41c3ed

block_41c3ed:                                     ; preds = %block_.L_41c3dd
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %8272 = add i64 %8242, -620
  %8273 = add i64 %8271, 8
  store i64 %8273, i64* %3, align 8
  %8274 = inttoptr i64 %8272 to i32*
  store i32 0, i32* %8274, align 4
  %8275 = load i64, i64* %3, align 8
  %8276 = add i64 %8275, 138
  store i64 %8276, i64* %3, align 8
  br label %block_.L_41c47f

block_.L_41c3fa:                                  ; preds = %block_.L_41c3dd
  store i64 32, i64* %RAX.i82, align 8
  %8277 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8277, i64* %RCX.i1674, align 8
  %8278 = add i64 %8277, 72684
  %8279 = add i64 %8271, 19
  store i64 %8279, i64* %3, align 8
  %8280 = inttoptr i64 %8278 to i32*
  %8281 = load i32, i32* %8280, align 4
  %8282 = zext i32 %8281 to i64
  store i64 %8282, i64* %RDX.i532, align 8
  %8283 = add i64 %8242, -84
  %8284 = add i64 %8271, 22
  store i64 %8284, i64* %3, align 8
  %8285 = inttoptr i64 %8283 to i32*
  %8286 = load i32, i32* %8285, align 4
  %8287 = add i32 %8286, 16
  %8288 = zext i32 %8287 to i64
  store i64 %8288, i64* %RSI.i1183, align 8
  %8289 = icmp ugt i32 %8286, -17
  %8290 = zext i1 %8289 to i8
  store i8 %8290, i8* %14, align 1
  %8291 = and i32 %8287, 255
  %8292 = tail call i32 @llvm.ctpop.i32(i32 %8291)
  %8293 = trunc i32 %8292 to i8
  %8294 = and i8 %8293, 1
  %8295 = xor i8 %8294, 1
  store i8 %8295, i8* %21, align 1
  %8296 = xor i32 %8286, 16
  %8297 = xor i32 %8296, %8287
  %8298 = lshr i32 %8297, 4
  %8299 = trunc i32 %8298 to i8
  %8300 = and i8 %8299, 1
  store i8 %8300, i8* %26, align 1
  %8301 = icmp eq i32 %8287, 0
  %8302 = zext i1 %8301 to i8
  store i8 %8302, i8* %29, align 1
  %8303 = lshr i32 %8287, 31
  %8304 = trunc i32 %8303 to i8
  store i8 %8304, i8* %32, align 1
  %8305 = lshr i32 %8286, 31
  %8306 = xor i32 %8303, %8305
  %8307 = add nuw nsw i32 %8306, %8303
  %8308 = icmp eq i32 %8307, 2
  %8309 = zext i1 %8308 to i8
  store i8 %8309, i8* %38, align 1
  %8310 = add i64 %8242, -624
  %8311 = add i64 %8271, 31
  store i64 %8311, i64* %3, align 8
  %8312 = inttoptr i64 %8310 to i32*
  store i32 32, i32* %8312, align 4
  %8313 = load i32, i32* %ESI.i168, align 4
  %8314 = zext i32 %8313 to i64
  %8315 = load i64, i64* %3, align 8
  store i64 %8314, i64* %RAX.i82, align 8
  %8316 = load i64, i64* %RBP.i, align 8
  %8317 = add i64 %8316, -628
  %8318 = load i32, i32* %EDX.i443, align 4
  %8319 = add i64 %8315, 8
  store i64 %8319, i64* %3, align 8
  %8320 = inttoptr i64 %8317 to i32*
  store i32 %8318, i32* %8320, align 4
  %8321 = load i64, i64* %3, align 8
  %8322 = load i32, i32* %EAX.i1056, align 8
  %8323 = sext i32 %8322 to i64
  %8324 = lshr i64 %8323, 32
  store i64 %8324, i64* %141, align 8
  %8325 = load i64, i64* %RBP.i, align 8
  %8326 = add i64 %8325, -624
  %8327 = add i64 %8321, 7
  store i64 %8327, i64* %3, align 8
  %8328 = inttoptr i64 %8326 to i32*
  %8329 = load i32, i32* %8328, align 4
  %8330 = zext i32 %8329 to i64
  store i64 %8330, i64* %RSI.i1183, align 8
  %8331 = add i64 %8321, 9
  store i64 %8331, i64* %3, align 8
  %8332 = zext i32 %8322 to i64
  %8333 = sext i32 %8329 to i64
  %8334 = shl nuw i64 %8324, 32
  %8335 = or i64 %8334, %8332
  %8336 = sdiv i64 %8335, %8333
  %8337 = shl i64 %8336, 32
  %8338 = ashr exact i64 %8337, 32
  %8339 = icmp eq i64 %8336, %8338
  br i1 %8339, label %8342, label %8340

; <label>:8340:                                   ; preds = %block_.L_41c3fa
  %8341 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8331, %struct.Memory* %MEMORY.78)
  %.pre319 = load i64, i64* %RBP.i, align 8
  %.pre320 = load i64, i64* %3, align 8
  %.pre321 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit901

; <label>:8342:                                   ; preds = %block_.L_41c3fa
  %8343 = srem i64 %8335, %8333
  %8344 = and i64 %8336, 4294967295
  store i64 %8344, i64* %RAX.i82, align 8
  %8345 = and i64 %8343, 4294967295
  store i64 %8345, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %8346 = trunc i64 %8336 to i32
  br label %routine_idivl__esi.exit901

routine_idivl__esi.exit901:                       ; preds = %8342, %8340
  %8347 = phi i32 [ %.pre321, %8340 ], [ %8346, %8342 ]
  %8348 = phi i64 [ %.pre320, %8340 ], [ %8331, %8342 ]
  %8349 = phi i64 [ %.pre319, %8340 ], [ %8325, %8342 ]
  %8350 = phi %struct.Memory* [ %8341, %8340 ], [ %MEMORY.78, %8342 ]
  %8351 = add i64 %8349, -628
  %8352 = add i64 %8348, 6
  store i64 %8352, i64* %3, align 8
  %8353 = inttoptr i64 %8351 to i32*
  %8354 = load i32, i32* %8353, align 4
  %8355 = zext i32 %8354 to i64
  store i64 %8355, i64* %RDI.i129, align 8
  %8356 = sub i32 %8354, %8347
  %8357 = icmp ult i32 %8354, %8347
  %8358 = zext i1 %8357 to i8
  store i8 %8358, i8* %14, align 1
  %8359 = and i32 %8356, 255
  %8360 = tail call i32 @llvm.ctpop.i32(i32 %8359)
  %8361 = trunc i32 %8360 to i8
  %8362 = and i8 %8361, 1
  %8363 = xor i8 %8362, 1
  store i8 %8363, i8* %21, align 1
  %8364 = xor i32 %8347, %8354
  %8365 = xor i32 %8364, %8356
  %8366 = lshr i32 %8365, 4
  %8367 = trunc i32 %8366 to i8
  %8368 = and i8 %8367, 1
  store i8 %8368, i8* %26, align 1
  %8369 = icmp eq i32 %8356, 0
  %8370 = zext i1 %8369 to i8
  store i8 %8370, i8* %29, align 1
  %8371 = lshr i32 %8356, 31
  %8372 = trunc i32 %8371 to i8
  store i8 %8372, i8* %32, align 1
  %8373 = lshr i32 %8354, 31
  %8374 = lshr i32 %8347, 31
  %8375 = xor i32 %8374, %8373
  %8376 = xor i32 %8371, %8373
  %8377 = add nuw nsw i32 %8376, %8375
  %8378 = icmp eq i32 %8377, 2
  %8379 = zext i1 %8378 to i8
  store i8 %8379, i8* %38, align 1
  %8380 = icmp ne i8 %8372, 0
  %8381 = xor i1 %8380, %8378
  %.v429 = select i1 %8381, i64 14, i64 39
  %8382 = add i64 %8348, %.v429
  store i64 %8382, i64* %3, align 8
  br i1 %8381, label %block_41c438, label %block_.L_41c451

block_41c438:                                     ; preds = %routine_idivl__esi.exit901
  %8383 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8383, i64* %RAX.i82, align 8
  %8384 = add i64 %8383, 72684
  %8385 = add i64 %8382, 14
  store i64 %8385, i64* %3, align 8
  %8386 = inttoptr i64 %8384 to i32*
  %8387 = load i32, i32* %8386, align 4
  %8388 = zext i32 %8387 to i64
  store i64 %8388, i64* %RCX.i1674, align 8
  %8389 = add i64 %8349, -632
  %8390 = add i64 %8382, 20
  store i64 %8390, i64* %3, align 8
  %8391 = inttoptr i64 %8389 to i32*
  store i32 %8387, i32* %8391, align 4
  %8392 = load i64, i64* %3, align 8
  %8393 = add i64 %8392, 39
  store i64 %8393, i64* %3, align 8
  br label %block_.L_41c473

block_.L_41c451:                                  ; preds = %routine_idivl__esi.exit901
  store i64 32, i64* %RAX.i82, align 8
  %8394 = add i64 %8349, -84
  %8395 = add i64 %8382, 8
  store i64 %8395, i64* %3, align 8
  %8396 = inttoptr i64 %8394 to i32*
  %8397 = load i32, i32* %8396, align 4
  %8398 = add i32 %8397, 16
  %8399 = zext i32 %8398 to i64
  store i64 %8399, i64* %RCX.i1674, align 8
  %8400 = icmp ugt i32 %8397, -17
  %8401 = zext i1 %8400 to i8
  store i8 %8401, i8* %14, align 1
  %8402 = and i32 %8398, 255
  %8403 = tail call i32 @llvm.ctpop.i32(i32 %8402)
  %8404 = trunc i32 %8403 to i8
  %8405 = and i8 %8404, 1
  %8406 = xor i8 %8405, 1
  store i8 %8406, i8* %21, align 1
  %8407 = xor i32 %8397, 16
  %8408 = xor i32 %8407, %8398
  %8409 = lshr i32 %8408, 4
  %8410 = trunc i32 %8409 to i8
  %8411 = and i8 %8410, 1
  store i8 %8411, i8* %26, align 1
  %8412 = icmp eq i32 %8398, 0
  %8413 = zext i1 %8412 to i8
  store i8 %8413, i8* %29, align 1
  %8414 = lshr i32 %8398, 31
  %8415 = trunc i32 %8414 to i8
  store i8 %8415, i8* %32, align 1
  %8416 = lshr i32 %8397, 31
  %8417 = xor i32 %8414, %8416
  %8418 = add nuw nsw i32 %8417, %8414
  %8419 = icmp eq i32 %8418, 2
  %8420 = zext i1 %8419 to i8
  store i8 %8420, i8* %38, align 1
  %8421 = add i64 %8349, -636
  %8422 = add i64 %8382, 17
  store i64 %8422, i64* %3, align 8
  %8423 = inttoptr i64 %8421 to i32*
  store i32 32, i32* %8423, align 4
  %8424 = load i32, i32* %ECX.i1669, align 4
  %8425 = zext i32 %8424 to i64
  %8426 = load i64, i64* %3, align 8
  store i64 %8425, i64* %RAX.i82, align 8
  %8427 = sext i32 %8424 to i64
  %8428 = lshr i64 %8427, 32
  store i64 %8428, i64* %141, align 8
  %8429 = load i64, i64* %RBP.i, align 8
  %8430 = add i64 %8429, -636
  %8431 = add i64 %8426, 9
  store i64 %8431, i64* %3, align 8
  %8432 = inttoptr i64 %8430 to i32*
  %8433 = load i32, i32* %8432, align 4
  %8434 = zext i32 %8433 to i64
  store i64 %8434, i64* %RCX.i1674, align 8
  %8435 = add i64 %8426, 11
  store i64 %8435, i64* %3, align 8
  %8436 = sext i32 %8433 to i64
  %8437 = shl nuw i64 %8428, 32
  %8438 = or i64 %8437, %8425
  %8439 = sdiv i64 %8438, %8436
  %8440 = shl i64 %8439, 32
  %8441 = ashr exact i64 %8440, 32
  %8442 = icmp eq i64 %8439, %8441
  br i1 %8442, label %8445, label %8443

; <label>:8443:                                   ; preds = %block_.L_41c451
  %8444 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8435, %struct.Memory* %8350)
  %.pre322 = load i64, i64* %RBP.i, align 8
  %.pre323 = load i32, i32* %EAX.i1056, align 4
  %.pre324 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit862

; <label>:8445:                                   ; preds = %block_.L_41c451
  %8446 = srem i64 %8438, %8436
  %8447 = and i64 %8439, 4294967295
  store i64 %8447, i64* %RAX.i82, align 8
  %8448 = and i64 %8446, 4294967295
  store i64 %8448, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %8449 = trunc i64 %8439 to i32
  br label %routine_idivl__ecx.exit862

routine_idivl__ecx.exit862:                       ; preds = %8445, %8443
  %8450 = phi i64 [ %.pre324, %8443 ], [ %8435, %8445 ]
  %8451 = phi i32 [ %.pre323, %8443 ], [ %8449, %8445 ]
  %8452 = phi i64 [ %.pre322, %8443 ], [ %8429, %8445 ]
  %8453 = phi %struct.Memory* [ %8444, %8443 ], [ %8350, %8445 ]
  %8454 = add i64 %8452, -632
  %8455 = add i64 %8450, 6
  store i64 %8455, i64* %3, align 8
  %8456 = inttoptr i64 %8454 to i32*
  store i32 %8451, i32* %8456, align 4
  %.pre325 = load i64, i64* %3, align 8
  br label %block_.L_41c473

block_.L_41c473:                                  ; preds = %routine_idivl__ecx.exit862, %block_41c438
  %8457 = phi i64 [ %.pre325, %routine_idivl__ecx.exit862 ], [ %8393, %block_41c438 ]
  %MEMORY.79 = phi %struct.Memory* [ %8453, %routine_idivl__ecx.exit862 ], [ %8350, %block_41c438 ]
  %8458 = load i64, i64* %RBP.i, align 8
  %8459 = add i64 %8458, -632
  %8460 = add i64 %8457, 6
  store i64 %8460, i64* %3, align 8
  %8461 = inttoptr i64 %8459 to i32*
  %8462 = load i32, i32* %8461, align 4
  %8463 = zext i32 %8462 to i64
  store i64 %8463, i64* %RAX.i82, align 8
  %8464 = add i64 %8458, -620
  %8465 = add i64 %8457, 12
  store i64 %8465, i64* %3, align 8
  %8466 = inttoptr i64 %8464 to i32*
  store i32 %8462, i32* %8466, align 4
  %.pre326 = load i64, i64* %3, align 8
  br label %block_.L_41c47f

block_.L_41c47f:                                  ; preds = %block_.L_41c473, %block_41c3ed
  %8467 = phi i64 [ %.pre326, %block_.L_41c473 ], [ %8276, %block_41c3ed ]
  %MEMORY.80 = phi %struct.Memory* [ %MEMORY.79, %block_.L_41c473 ], [ %MEMORY.78, %block_41c3ed ]
  %8468 = load i64, i64* %RBP.i, align 8
  %8469 = add i64 %8468, -620
  %8470 = add i64 %8467, 6
  store i64 %8470, i64* %3, align 8
  %8471 = inttoptr i64 %8469 to i32*
  %8472 = load i32, i32* %8471, align 4
  %8473 = zext i32 %8472 to i64
  store i64 %8473, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i1674, align 8
  %8474 = add i64 %8468, -608
  %8475 = add i64 %8467, 17
  store i64 %8475, i64* %3, align 8
  %8476 = inttoptr i64 %8474 to i32*
  %8477 = load i32, i32* %8476, align 4
  %8478 = add i32 %8472, %8477
  %8479 = zext i32 %8478 to i64
  %8480 = icmp ult i32 %8478, %8477
  %8481 = icmp ult i32 %8478, %8472
  %8482 = or i1 %8480, %8481
  %8483 = zext i1 %8482 to i8
  store i8 %8483, i8* %14, align 1
  %8484 = and i32 %8478, 255
  %8485 = tail call i32 @llvm.ctpop.i32(i32 %8484)
  %8486 = trunc i32 %8485 to i8
  %8487 = and i8 %8486, 1
  %8488 = xor i8 %8487, 1
  store i8 %8488, i8* %21, align 1
  %8489 = xor i32 %8472, %8477
  %8490 = xor i32 %8489, %8478
  %8491 = lshr i32 %8490, 4
  %8492 = trunc i32 %8491 to i8
  %8493 = and i8 %8492, 1
  store i8 %8493, i8* %26, align 1
  %8494 = icmp eq i32 %8478, 0
  %8495 = zext i1 %8494 to i8
  store i8 %8495, i8* %29, align 1
  %8496 = lshr i32 %8478, 31
  %8497 = trunc i32 %8496 to i8
  store i8 %8497, i8* %32, align 1
  %8498 = lshr i32 %8477, 31
  %8499 = lshr i32 %8472, 31
  %8500 = xor i32 %8496, %8498
  %8501 = xor i32 %8496, %8499
  %8502 = add nuw nsw i32 %8500, %8501
  %8503 = icmp eq i32 %8502, 2
  %8504 = zext i1 %8503 to i8
  store i8 %8504, i8* %38, align 1
  store i64 %8479, i64* %RAX.i82, align 8
  %8505 = sext i32 %8478 to i64
  %8506 = lshr i64 %8505, 32
  store i64 %8506, i64* %141, align 8
  %8507 = add i64 %8467, 24
  store i64 %8507, i64* %3, align 8
  %8508 = shl nuw i64 %8506, 32
  %8509 = or i64 %8508, %8479
  %8510 = sdiv i64 %8509, 2
  %8511 = shl i64 %8510, 32
  %8512 = ashr exact i64 %8511, 32
  %8513 = icmp eq i64 %8510, %8512
  br i1 %8513, label %8516, label %8514

; <label>:8514:                                   ; preds = %block_.L_41c47f
  %8515 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8507, %struct.Memory* %MEMORY.80)
  %.pre327 = load i64, i64* %RBP.i, align 8
  %.pre328 = load i32, i32* %EAX.i1056, align 4
  %.pre329 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit832

; <label>:8516:                                   ; preds = %block_.L_41c47f
  %8517 = srem i64 %8509, 2
  %8518 = and i64 %8510, 4294967295
  store i64 %8518, i64* %RAX.i82, align 8
  %8519 = and i64 %8517, 4294967295
  store i64 %8519, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %8520 = trunc i64 %8510 to i32
  br label %routine_idivl__ecx.exit832

routine_idivl__ecx.exit832:                       ; preds = %8516, %8514
  %8521 = phi i64 [ %.pre329, %8514 ], [ %8507, %8516 ]
  %8522 = phi i32 [ %.pre328, %8514 ], [ %8520, %8516 ]
  %8523 = phi i64 [ %.pre327, %8514 ], [ %8468, %8516 ]
  %8524 = phi %struct.Memory* [ %8515, %8514 ], [ %MEMORY.80, %8516 ]
  %8525 = add i64 %8523, -44
  %8526 = add i64 %8521, 3
  store i64 %8526, i64* %3, align 8
  %8527 = inttoptr i64 %8525 to i32*
  store i32 %8522, i32* %8527, align 4
  %.pre330 = load i64, i64* %3, align 8
  br label %block_.L_41c49a

block_.L_41c49a:                                  ; preds = %routine_idivl__ecx.exit832, %routine_idivl__ecx.exit1024
  %8528 = phi i64 [ %.pre330, %routine_idivl__ecx.exit832 ], [ %8068, %routine_idivl__ecx.exit1024 ]
  %MEMORY.81 = phi %struct.Memory* [ %8524, %routine_idivl__ecx.exit832 ], [ %8063, %routine_idivl__ecx.exit1024 ]
  %8529 = add i64 %8528, 1370
  store i64 %8529, i64* %3, align 8
  br label %block_.L_41c9f4

block_.L_41c49f:                                  ; preds = %block_.L_41bf11
  %8530 = add i64 %297, -44
  %8531 = add i64 %6245, 7
  store i64 %8531, i64* %3, align 8
  %8532 = inttoptr i64 %8530 to i32*
  store i32 0, i32* %8532, align 4
  %8533 = load i64, i64* %RBP.i, align 8
  %8534 = add i64 %8533, -28
  %8535 = load i64, i64* %3, align 8
  %8536 = add i64 %8535, 4
  store i64 %8536, i64* %3, align 8
  %8537 = inttoptr i64 %8534 to i32*
  %8538 = load i32, i32* %8537, align 4
  %8539 = add i32 %8538, -1
  %8540 = icmp eq i32 %8538, 0
  %8541 = zext i1 %8540 to i8
  store i8 %8541, i8* %14, align 1
  %8542 = and i32 %8539, 255
  %8543 = tail call i32 @llvm.ctpop.i32(i32 %8542)
  %8544 = trunc i32 %8543 to i8
  %8545 = and i8 %8544, 1
  %8546 = xor i8 %8545, 1
  store i8 %8546, i8* %21, align 1
  %8547 = xor i32 %8539, %8538
  %8548 = lshr i32 %8547, 4
  %8549 = trunc i32 %8548 to i8
  %8550 = and i8 %8549, 1
  store i8 %8550, i8* %26, align 1
  %8551 = icmp eq i32 %8539, 0
  %8552 = zext i1 %8551 to i8
  store i8 %8552, i8* %29, align 1
  %8553 = lshr i32 %8539, 31
  %8554 = trunc i32 %8553 to i8
  store i8 %8554, i8* %32, align 1
  %8555 = lshr i32 %8538, 31
  %8556 = xor i32 %8553, %8555
  %8557 = add nuw nsw i32 %8556, %8555
  %8558 = icmp eq i32 %8557, 2
  %8559 = zext i1 %8558 to i8
  store i8 %8559, i8* %38, align 1
  %.v397 = select i1 %8551, i64 10, i64 24
  %8560 = add i64 %8535, %.v397
  %8561 = add i64 %8533, -12
  %8562 = add i64 %8560, 3
  store i64 %8562, i64* %3, align 8
  %8563 = inttoptr i64 %8561 to i32*
  %8564 = load i32, i32* %8563, align 4
  %8565 = zext i32 %8564 to i64
  store i64 %8565, i64* %RAX.i82, align 8
  br i1 %8551, label %block_41c4b0, label %block_.L_41c4be

block_41c4b0:                                     ; preds = %block_.L_41c49f
  %8566 = add i64 %8533, -640
  %8567 = add i64 %8560, 9
  store i64 %8567, i64* %3, align 8
  %8568 = inttoptr i64 %8566 to i32*
  store i32 %8564, i32* %8568, align 4
  %8569 = load i64, i64* %3, align 8
  %8570 = add i64 %8569, 17
  store i64 %8570, i64* %3, align 8
  br label %block_.L_41c4ca

block_.L_41c4be:                                  ; preds = %block_.L_41c49f
  %8571 = add i32 %8564, 1
  %8572 = zext i32 %8571 to i64
  store i64 %8572, i64* %RAX.i82, align 8
  %8573 = icmp eq i32 %8564, -1
  %8574 = icmp eq i32 %8571, 0
  %8575 = or i1 %8573, %8574
  %8576 = zext i1 %8575 to i8
  store i8 %8576, i8* %14, align 1
  %8577 = and i32 %8571, 255
  %8578 = tail call i32 @llvm.ctpop.i32(i32 %8577)
  %8579 = trunc i32 %8578 to i8
  %8580 = and i8 %8579, 1
  %8581 = xor i8 %8580, 1
  store i8 %8581, i8* %21, align 1
  %8582 = xor i32 %8571, %8564
  %8583 = lshr i32 %8582, 4
  %8584 = trunc i32 %8583 to i8
  %8585 = and i8 %8584, 1
  store i8 %8585, i8* %26, align 1
  %8586 = zext i1 %8574 to i8
  store i8 %8586, i8* %29, align 1
  %8587 = lshr i32 %8571, 31
  %8588 = trunc i32 %8587 to i8
  store i8 %8588, i8* %32, align 1
  %8589 = lshr i32 %8564, 31
  %8590 = xor i32 %8587, %8589
  %8591 = add nuw nsw i32 %8590, %8587
  %8592 = icmp eq i32 %8591, 2
  %8593 = zext i1 %8592 to i8
  store i8 %8593, i8* %38, align 1
  %8594 = add i64 %8533, -640
  %8595 = add i64 %8560, 12
  store i64 %8595, i64* %3, align 8
  %8596 = inttoptr i64 %8594 to i32*
  store i32 %8571, i32* %8596, align 4
  %.pre338 = load i64, i64* %3, align 8
  br label %block_.L_41c4ca

block_.L_41c4ca:                                  ; preds = %block_.L_41c4be, %block_41c4b0
  %8597 = phi i64 [ %.pre338, %block_.L_41c4be ], [ %8570, %block_41c4b0 ]
  %8598 = load i64, i64* %RBP.i, align 8
  %8599 = add i64 %8598, -640
  %8600 = add i64 %8597, 6
  store i64 %8600, i64* %3, align 8
  %8601 = inttoptr i64 %8599 to i32*
  %8602 = load i32, i32* %8601, align 4
  %8603 = zext i32 %8602 to i64
  store i64 %8603, i64* %RAX.i82, align 8
  %8604 = add i64 %8598, -60
  %8605 = add i64 %8597, 9
  store i64 %8605, i64* %3, align 8
  %8606 = inttoptr i64 %8604 to i32*
  store i32 %8602, i32* %8606, align 4
  %8607 = load i64, i64* %RBP.i, align 8
  %8608 = add i64 %8607, -40
  %8609 = load i64, i64* %3, align 8
  %8610 = add i64 %8609, 3
  store i64 %8610, i64* %3, align 8
  %8611 = inttoptr i64 %8608 to i32*
  %8612 = load i32, i32* %8611, align 4
  %8613 = zext i32 %8612 to i64
  store i64 %8613, i64* %RAX.i82, align 8
  %8614 = add i64 %8607, -60
  %8615 = add i64 %8609, 6
  store i64 %8615, i64* %3, align 8
  %8616 = inttoptr i64 %8614 to i32*
  %8617 = load i32, i32* %8616, align 4
  %8618 = sub i32 %8612, %8617
  %8619 = icmp ult i32 %8612, %8617
  %8620 = zext i1 %8619 to i8
  store i8 %8620, i8* %14, align 1
  %8621 = and i32 %8618, 255
  %8622 = tail call i32 @llvm.ctpop.i32(i32 %8621)
  %8623 = trunc i32 %8622 to i8
  %8624 = and i8 %8623, 1
  %8625 = xor i8 %8624, 1
  store i8 %8625, i8* %21, align 1
  %8626 = xor i32 %8617, %8612
  %8627 = xor i32 %8626, %8618
  %8628 = lshr i32 %8627, 4
  %8629 = trunc i32 %8628 to i8
  %8630 = and i8 %8629, 1
  store i8 %8630, i8* %26, align 1
  %8631 = icmp eq i32 %8618, 0
  %8632 = zext i1 %8631 to i8
  store i8 %8632, i8* %29, align 1
  %8633 = lshr i32 %8618, 31
  %8634 = trunc i32 %8633 to i8
  store i8 %8634, i8* %32, align 1
  %8635 = lshr i32 %8612, 31
  %8636 = lshr i32 %8617, 31
  %8637 = xor i32 %8636, %8635
  %8638 = xor i32 %8633, %8635
  %8639 = add nuw nsw i32 %8638, %8637
  %8640 = icmp eq i32 %8639, 2
  %8641 = zext i1 %8640 to i8
  store i8 %8641, i8* %38, align 1
  %8642 = icmp ne i8 %8634, 0
  %8643 = xor i1 %8642, %8640
  %.v404 = select i1 %8643, i64 12, i64 26
  %8644 = add i64 %8609, %.v404
  %8645 = add i64 %8644, 3
  store i64 %8645, i64* %3, align 8
  br i1 %8643, label %block_41c4df, label %block_.L_41c4ed

block_41c4df:                                     ; preds = %block_.L_41c4ca
  %8646 = load i32, i32* %8611, align 4
  %8647 = zext i32 %8646 to i64
  store i64 %8647, i64* %RAX.i82, align 8
  %8648 = add i64 %8607, -644
  %8649 = add i64 %8644, 9
  store i64 %8649, i64* %3, align 8
  %8650 = inttoptr i64 %8648 to i32*
  store i32 %8646, i32* %8650, align 4
  %8651 = load i64, i64* %3, align 8
  %8652 = add i64 %8651, 14
  store i64 %8652, i64* %3, align 8
  br label %block_.L_41c4f6

block_.L_41c4ed:                                  ; preds = %block_.L_41c4ca
  %8653 = load i32, i32* %8616, align 4
  %8654 = zext i32 %8653 to i64
  store i64 %8654, i64* %RAX.i82, align 8
  %8655 = add i64 %8607, -644
  %8656 = add i64 %8644, 9
  store i64 %8656, i64* %3, align 8
  %8657 = inttoptr i64 %8655 to i32*
  store i32 %8653, i32* %8657, align 4
  %.pre339 = load i64, i64* %3, align 8
  br label %block_.L_41c4f6

block_.L_41c4f6:                                  ; preds = %block_.L_41c4ed, %block_41c4df
  %8658 = phi i64 [ %.pre339, %block_.L_41c4ed ], [ %8652, %block_41c4df ]
  %8659 = load i64, i64* %RBP.i, align 8
  %8660 = add i64 %8659, -644
  %8661 = add i64 %8658, 6
  store i64 %8661, i64* %3, align 8
  %8662 = inttoptr i64 %8660 to i32*
  %8663 = load i32, i32* %8662, align 4
  %8664 = zext i32 %8663 to i64
  store i64 %8664, i64* %RAX.i82, align 8
  %8665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX.i775 = bitcast %union.anon* %8665 to i32*
  %RCX.i776 = getelementptr inbounds %union.anon, %union.anon* %8665, i64 0, i32 0
  store i64 0, i64* %RCX.i776, align 8
  %8666 = sub i32 0, %8663
  %8667 = icmp ne i32 %8663, 0
  %8668 = zext i1 %8667 to i8
  store i8 %8668, i8* %14, align 1
  %8669 = and i32 %8666, 255
  %8670 = tail call i32 @llvm.ctpop.i32(i32 %8669)
  %8671 = trunc i32 %8670 to i8
  %8672 = and i8 %8671, 1
  %8673 = xor i8 %8672, 1
  store i8 %8673, i8* %21, align 1
  %8674 = xor i32 %8663, %8666
  %8675 = lshr i32 %8674, 4
  %8676 = trunc i32 %8675 to i8
  %8677 = and i8 %8676, 1
  store i8 %8677, i8* %26, align 1
  %8678 = icmp eq i32 %8663, 0
  %8679 = zext i1 %8678 to i8
  store i8 %8679, i8* %29, align 1
  %8680 = lshr i32 %8666, 31
  %8681 = trunc i32 %8680 to i8
  store i8 %8681, i8* %32, align 1
  %8682 = lshr i32 %8663, 31
  %8683 = add nuw nsw i32 %8680, %8682
  %8684 = icmp eq i32 %8683, 2
  %8685 = zext i1 %8684 to i8
  store i8 %8685, i8* %38, align 1
  %8686 = icmp ne i8 %8681, 0
  %8687 = xor i1 %8686, %8684
  %8688 = or i1 %8678, %8687
  %.v405 = select i1 %8688, i64 29, i64 16
  %8689 = add i64 %8658, %.v405
  store i64 %8689, i64* %3, align 8
  br i1 %8688, label %block_.L_41c513, label %block_41c506

block_41c506:                                     ; preds = %block_.L_41c4f6
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %8690 = add i64 %8659, -648
  %8691 = add i64 %8689, 8
  store i64 %8691, i64* %3, align 8
  %8692 = inttoptr i64 %8690 to i32*
  store i32 0, i32* %8692, align 4
  %8693 = load i64, i64* %3, align 8
  %8694 = add i64 %8693, 52
  store i64 %8694, i64* %3, align 8
  br label %block_.L_41c542

block_.L_41c513:                                  ; preds = %block_.L_41c4f6
  %8695 = add i64 %8659, -40
  %8696 = add i64 %8689, 3
  store i64 %8696, i64* %3, align 8
  %8697 = inttoptr i64 %8695 to i32*
  %8698 = load i32, i32* %8697, align 4
  %8699 = zext i32 %8698 to i64
  store i64 %8699, i64* %RAX.i82, align 8
  %8700 = add i64 %8659, -60
  %8701 = add i64 %8689, 6
  store i64 %8701, i64* %3, align 8
  %8702 = inttoptr i64 %8700 to i32*
  %8703 = load i32, i32* %8702, align 4
  %8704 = sub i32 %8698, %8703
  %8705 = icmp ult i32 %8698, %8703
  %8706 = zext i1 %8705 to i8
  store i8 %8706, i8* %14, align 1
  %8707 = and i32 %8704, 255
  %8708 = tail call i32 @llvm.ctpop.i32(i32 %8707)
  %8709 = trunc i32 %8708 to i8
  %8710 = and i8 %8709, 1
  %8711 = xor i8 %8710, 1
  store i8 %8711, i8* %21, align 1
  %8712 = xor i32 %8703, %8698
  %8713 = xor i32 %8712, %8704
  %8714 = lshr i32 %8713, 4
  %8715 = trunc i32 %8714 to i8
  %8716 = and i8 %8715, 1
  store i8 %8716, i8* %26, align 1
  %8717 = icmp eq i32 %8704, 0
  %8718 = zext i1 %8717 to i8
  store i8 %8718, i8* %29, align 1
  %8719 = lshr i32 %8704, 31
  %8720 = trunc i32 %8719 to i8
  store i8 %8720, i8* %32, align 1
  %8721 = lshr i32 %8698, 31
  %8722 = lshr i32 %8703, 31
  %8723 = xor i32 %8722, %8721
  %8724 = xor i32 %8719, %8721
  %8725 = add nuw nsw i32 %8724, %8723
  %8726 = icmp eq i32 %8725, 2
  %8727 = zext i1 %8726 to i8
  store i8 %8727, i8* %38, align 1
  %8728 = icmp ne i8 %8720, 0
  %8729 = xor i1 %8728, %8726
  %.v423 = select i1 %8729, i64 12, i64 26
  %8730 = add i64 %8689, %.v423
  %8731 = add i64 %8730, 3
  store i64 %8731, i64* %3, align 8
  br i1 %8729, label %block_41c51f, label %block_.L_41c52d

block_41c51f:                                     ; preds = %block_.L_41c513
  %8732 = load i32, i32* %8697, align 4
  %8733 = zext i32 %8732 to i64
  store i64 %8733, i64* %RAX.i82, align 8
  %8734 = add i64 %8659, -652
  %8735 = add i64 %8730, 9
  store i64 %8735, i64* %3, align 8
  %8736 = inttoptr i64 %8734 to i32*
  store i32 %8732, i32* %8736, align 4
  %8737 = load i64, i64* %3, align 8
  %8738 = add i64 %8737, 14
  store i64 %8738, i64* %3, align 8
  br label %block_.L_41c536

block_.L_41c52d:                                  ; preds = %block_.L_41c513
  %8739 = load i32, i32* %8702, align 4
  %8740 = zext i32 %8739 to i64
  store i64 %8740, i64* %RAX.i82, align 8
  %8741 = add i64 %8659, -652
  %8742 = add i64 %8730, 9
  store i64 %8742, i64* %3, align 8
  %8743 = inttoptr i64 %8741 to i32*
  store i32 %8739, i32* %8743, align 4
  %.pre340 = load i64, i64* %3, align 8
  br label %block_.L_41c536

block_.L_41c536:                                  ; preds = %block_.L_41c52d, %block_41c51f
  %8744 = phi i64 [ %.pre340, %block_.L_41c52d ], [ %8738, %block_41c51f ]
  %8745 = load i64, i64* %RBP.i, align 8
  %8746 = add i64 %8745, -652
  %8747 = add i64 %8744, 6
  store i64 %8747, i64* %3, align 8
  %8748 = inttoptr i64 %8746 to i32*
  %8749 = load i32, i32* %8748, align 4
  %8750 = zext i32 %8749 to i64
  store i64 %8750, i64* %RAX.i82, align 8
  %8751 = add i64 %8745, -648
  %8752 = add i64 %8744, 12
  store i64 %8752, i64* %3, align 8
  %8753 = inttoptr i64 %8751 to i32*
  store i32 %8749, i32* %8753, align 4
  %.pre341 = load i64, i64* %3, align 8
  br label %block_.L_41c542

block_.L_41c542:                                  ; preds = %block_.L_41c536, %block_41c506
  %8754 = phi i64 [ %.pre341, %block_.L_41c536 ], [ %8694, %block_41c506 ]
  %8755 = load i64, i64* %RBP.i, align 8
  %8756 = add i64 %8755, -648
  %8757 = add i64 %8754, 6
  store i64 %8757, i64* %3, align 8
  %8758 = inttoptr i64 %8756 to i32*
  %8759 = load i32, i32* %8758, align 4
  %8760 = zext i32 %8759 to i64
  store i64 %8760, i64* %RAX.i82, align 8
  %8761 = add i64 %8755, -60
  %8762 = add i64 %8754, 9
  store i64 %8762, i64* %3, align 8
  %8763 = inttoptr i64 %8761 to i32*
  store i32 %8759, i32* %8763, align 4
  %8764 = load i64, i64* %RBP.i, align 8
  %8765 = add i64 %8764, -24
  %8766 = load i64, i64* %3, align 8
  %8767 = add i64 %8766, 7
  store i64 %8767, i64* %3, align 8
  %8768 = inttoptr i64 %8765 to i32*
  store i32 -2, i32* %8768, align 4
  %.pre342 = load i64, i64* %3, align 8
  br label %block_.L_41c552

block_.L_41c552:                                  ; preds = %block_.L_41c5db, %block_.L_41c542
  %8769 = phi i64 [ %9162, %block_.L_41c5db ], [ %.pre342, %block_.L_41c542 ]
  %8770 = load i64, i64* %RBP.i, align 8
  %8771 = add i64 %8770, -24
  %8772 = add i64 %8769, 4
  store i64 %8772, i64* %3, align 8
  %8773 = inttoptr i64 %8771 to i32*
  %8774 = load i32, i32* %8773, align 4
  %8775 = add i32 %8774, -4
  %8776 = icmp ult i32 %8774, 4
  %8777 = zext i1 %8776 to i8
  store i8 %8777, i8* %14, align 1
  %8778 = and i32 %8775, 255
  %8779 = tail call i32 @llvm.ctpop.i32(i32 %8778)
  %8780 = trunc i32 %8779 to i8
  %8781 = and i8 %8780, 1
  %8782 = xor i8 %8781, 1
  store i8 %8782, i8* %21, align 1
  %8783 = xor i32 %8775, %8774
  %8784 = lshr i32 %8783, 4
  %8785 = trunc i32 %8784 to i8
  %8786 = and i8 %8785, 1
  store i8 %8786, i8* %26, align 1
  %8787 = icmp eq i32 %8775, 0
  %8788 = zext i1 %8787 to i8
  store i8 %8788, i8* %29, align 1
  %8789 = lshr i32 %8775, 31
  %8790 = trunc i32 %8789 to i8
  store i8 %8790, i8* %32, align 1
  %8791 = lshr i32 %8774, 31
  %8792 = xor i32 %8789, %8791
  %8793 = add nuw nsw i32 %8792, %8791
  %8794 = icmp eq i32 %8793, 2
  %8795 = zext i1 %8794 to i8
  store i8 %8795, i8* %38, align 1
  %8796 = icmp ne i8 %8790, 0
  %8797 = xor i1 %8796, %8794
  %.v406 = select i1 %8797, i64 10, i64 203
  %8798 = add i64 %8769, %.v406
  store i64 %8798, i64* %3, align 8
  br i1 %8797, label %block_41c55c, label %block_.L_41c61d

block_41c55c:                                     ; preds = %block_.L_41c552
  %8799 = add i64 %8770, -36
  %8800 = add i64 %8798, 3
  store i64 %8800, i64* %3, align 8
  %8801 = inttoptr i64 %8799 to i32*
  %8802 = load i32, i32* %8801, align 4
  %8803 = zext i32 %8802 to i64
  store i64 %8803, i64* %RAX.i82, align 8
  %8804 = add i64 %8770, -16
  %8805 = add i64 %8798, 6
  store i64 %8805, i64* %3, align 8
  %8806 = inttoptr i64 %8804 to i32*
  %8807 = load i32, i32* %8806, align 4
  %8808 = zext i32 %8807 to i64
  store i64 %8808, i64* %RCX.i776, align 8
  %8809 = add i64 %8798, 9
  store i64 %8809, i64* %3, align 8
  %8810 = load i32, i32* %8773, align 4
  %8811 = add i32 %8810, %8807
  %8812 = zext i32 %8811 to i64
  store i64 %8812, i64* %RCX.i776, align 8
  %8813 = lshr i32 %8811, 31
  %8814 = sub i32 %8802, %8811
  %8815 = icmp ult i32 %8802, %8811
  %8816 = zext i1 %8815 to i8
  store i8 %8816, i8* %14, align 1
  %8817 = and i32 %8814, 255
  %8818 = tail call i32 @llvm.ctpop.i32(i32 %8817)
  %8819 = trunc i32 %8818 to i8
  %8820 = and i8 %8819, 1
  %8821 = xor i8 %8820, 1
  store i8 %8821, i8* %21, align 1
  %8822 = xor i32 %8811, %8802
  %8823 = xor i32 %8822, %8814
  %8824 = lshr i32 %8823, 4
  %8825 = trunc i32 %8824 to i8
  %8826 = and i8 %8825, 1
  store i8 %8826, i8* %26, align 1
  %8827 = icmp eq i32 %8814, 0
  %8828 = zext i1 %8827 to i8
  store i8 %8828, i8* %29, align 1
  %8829 = lshr i32 %8814, 31
  %8830 = trunc i32 %8829 to i8
  store i8 %8830, i8* %32, align 1
  %8831 = lshr i32 %8802, 31
  %8832 = xor i32 %8813, %8831
  %8833 = xor i32 %8829, %8831
  %8834 = add nuw nsw i32 %8833, %8832
  %8835 = icmp eq i32 %8834, 2
  %8836 = zext i1 %8835 to i8
  store i8 %8836, i8* %38, align 1
  %8837 = icmp ne i8 %8830, 0
  %8838 = xor i1 %8837, %8835
  %.v420 = select i1 %8838, i64 17, i64 31
  %8839 = add i64 %8798, %.v420
  %8840 = add i64 %8839, 3
  store i64 %8840, i64* %3, align 8
  br i1 %8838, label %block_41c56d, label %block_.L_41c57b

block_41c56d:                                     ; preds = %block_41c55c
  %8841 = load i32, i32* %8801, align 4
  %8842 = zext i32 %8841 to i64
  store i64 %8842, i64* %RAX.i82, align 8
  %8843 = add i64 %8770, -656
  %8844 = add i64 %8839, 9
  store i64 %8844, i64* %3, align 8
  %8845 = inttoptr i64 %8843 to i32*
  store i32 %8841, i32* %8845, align 4
  %8846 = load i64, i64* %3, align 8
  %8847 = add i64 %8846, 17
  store i64 %8847, i64* %3, align 8
  br label %block_.L_41c587

block_.L_41c57b:                                  ; preds = %block_41c55c
  %8848 = load i32, i32* %8806, align 4
  %8849 = zext i32 %8848 to i64
  store i64 %8849, i64* %RAX.i82, align 8
  %8850 = add i64 %8839, 6
  store i64 %8850, i64* %3, align 8
  %8851 = load i32, i32* %8773, align 4
  %8852 = add i32 %8851, %8848
  %8853 = zext i32 %8852 to i64
  store i64 %8853, i64* %RAX.i82, align 8
  %8854 = icmp ult i32 %8852, %8848
  %8855 = icmp ult i32 %8852, %8851
  %8856 = or i1 %8854, %8855
  %8857 = zext i1 %8856 to i8
  store i8 %8857, i8* %14, align 1
  %8858 = and i32 %8852, 255
  %8859 = tail call i32 @llvm.ctpop.i32(i32 %8858)
  %8860 = trunc i32 %8859 to i8
  %8861 = and i8 %8860, 1
  %8862 = xor i8 %8861, 1
  store i8 %8862, i8* %21, align 1
  %8863 = xor i32 %8851, %8848
  %8864 = xor i32 %8863, %8852
  %8865 = lshr i32 %8864, 4
  %8866 = trunc i32 %8865 to i8
  %8867 = and i8 %8866, 1
  store i8 %8867, i8* %26, align 1
  %8868 = icmp eq i32 %8852, 0
  %8869 = zext i1 %8868 to i8
  store i8 %8869, i8* %29, align 1
  %8870 = lshr i32 %8852, 31
  %8871 = trunc i32 %8870 to i8
  store i8 %8871, i8* %32, align 1
  %8872 = lshr i32 %8848, 31
  %8873 = lshr i32 %8851, 31
  %8874 = xor i32 %8870, %8872
  %8875 = xor i32 %8870, %8873
  %8876 = add nuw nsw i32 %8874, %8875
  %8877 = icmp eq i32 %8876, 2
  %8878 = zext i1 %8877 to i8
  store i8 %8878, i8* %38, align 1
  %8879 = add i64 %8770, -656
  %8880 = add i64 %8839, 12
  store i64 %8880, i64* %3, align 8
  %8881 = inttoptr i64 %8879 to i32*
  store i32 %8852, i32* %8881, align 4
  %.pre385 = load i64, i64* %3, align 8
  br label %block_.L_41c587

block_.L_41c587:                                  ; preds = %block_.L_41c57b, %block_41c56d
  %8882 = phi i64 [ %.pre385, %block_.L_41c57b ], [ %8847, %block_41c56d ]
  %8883 = load i64, i64* %RBP.i, align 8
  %8884 = add i64 %8883, -656
  %8885 = add i64 %8882, 6
  store i64 %8885, i64* %3, align 8
  %8886 = inttoptr i64 %8884 to i32*
  %8887 = load i32, i32* %8886, align 4
  %8888 = zext i32 %8887 to i64
  store i64 %8888, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i776, align 8
  %8889 = sub i32 0, %8887
  %8890 = icmp ne i32 %8887, 0
  %8891 = zext i1 %8890 to i8
  store i8 %8891, i8* %14, align 1
  %8892 = and i32 %8889, 255
  %8893 = tail call i32 @llvm.ctpop.i32(i32 %8892)
  %8894 = trunc i32 %8893 to i8
  %8895 = and i8 %8894, 1
  %8896 = xor i8 %8895, 1
  store i8 %8896, i8* %21, align 1
  %8897 = xor i32 %8887, %8889
  %8898 = lshr i32 %8897, 4
  %8899 = trunc i32 %8898 to i8
  %8900 = and i8 %8899, 1
  store i8 %8900, i8* %26, align 1
  %8901 = icmp eq i32 %8887, 0
  %8902 = zext i1 %8901 to i8
  store i8 %8902, i8* %29, align 1
  %8903 = lshr i32 %8889, 31
  %8904 = trunc i32 %8903 to i8
  store i8 %8904, i8* %32, align 1
  %8905 = lshr i32 %8887, 31
  %8906 = add nuw nsw i32 %8903, %8905
  %8907 = icmp eq i32 %8906, 2
  %8908 = zext i1 %8907 to i8
  store i8 %8908, i8* %38, align 1
  %8909 = icmp ne i8 %8904, 0
  %8910 = xor i1 %8909, %8907
  %8911 = or i1 %8901, %8910
  %.v421 = select i1 %8911, i64 29, i64 16
  %8912 = add i64 %8882, %.v421
  store i64 %8912, i64* %3, align 8
  br i1 %8911, label %block_.L_41c5a4, label %block_41c597

block_41c597:                                     ; preds = %block_.L_41c587
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %8913 = add i64 %8883, -660
  %8914 = add i64 %8912, 8
  store i64 %8914, i64* %3, align 8
  %8915 = inttoptr i64 %8913 to i32*
  store i32 0, i32* %8915, align 4
  %8916 = load i64, i64* %3, align 8
  %8917 = add i64 %8916, 60
  store i64 %8917, i64* %3, align 8
  br label %block_.L_41c5db

block_.L_41c5a4:                                  ; preds = %block_.L_41c587
  %8918 = add i64 %8883, -36
  %8919 = add i64 %8912, 3
  store i64 %8919, i64* %3, align 8
  %8920 = inttoptr i64 %8918 to i32*
  %8921 = load i32, i32* %8920, align 4
  %8922 = zext i32 %8921 to i64
  store i64 %8922, i64* %RAX.i82, align 8
  %8923 = add i64 %8883, -16
  %8924 = add i64 %8912, 6
  store i64 %8924, i64* %3, align 8
  %8925 = inttoptr i64 %8923 to i32*
  %8926 = load i32, i32* %8925, align 4
  %8927 = zext i32 %8926 to i64
  store i64 %8927, i64* %RCX.i776, align 8
  %8928 = add i64 %8883, -24
  %8929 = add i64 %8912, 9
  store i64 %8929, i64* %3, align 8
  %8930 = inttoptr i64 %8928 to i32*
  %8931 = load i32, i32* %8930, align 4
  %8932 = add i32 %8931, %8926
  %8933 = zext i32 %8932 to i64
  store i64 %8933, i64* %RCX.i776, align 8
  %8934 = lshr i32 %8932, 31
  %8935 = sub i32 %8921, %8932
  %8936 = icmp ult i32 %8921, %8932
  %8937 = zext i1 %8936 to i8
  store i8 %8937, i8* %14, align 1
  %8938 = and i32 %8935, 255
  %8939 = tail call i32 @llvm.ctpop.i32(i32 %8938)
  %8940 = trunc i32 %8939 to i8
  %8941 = and i8 %8940, 1
  %8942 = xor i8 %8941, 1
  store i8 %8942, i8* %21, align 1
  %8943 = xor i32 %8932, %8921
  %8944 = xor i32 %8943, %8935
  %8945 = lshr i32 %8944, 4
  %8946 = trunc i32 %8945 to i8
  %8947 = and i8 %8946, 1
  store i8 %8947, i8* %26, align 1
  %8948 = icmp eq i32 %8935, 0
  %8949 = zext i1 %8948 to i8
  store i8 %8949, i8* %29, align 1
  %8950 = lshr i32 %8935, 31
  %8951 = trunc i32 %8950 to i8
  store i8 %8951, i8* %32, align 1
  %8952 = lshr i32 %8921, 31
  %8953 = xor i32 %8934, %8952
  %8954 = xor i32 %8950, %8952
  %8955 = add nuw nsw i32 %8954, %8953
  %8956 = icmp eq i32 %8955, 2
  %8957 = zext i1 %8956 to i8
  store i8 %8957, i8* %38, align 1
  %8958 = icmp ne i8 %8951, 0
  %8959 = xor i1 %8958, %8956
  %.v422 = select i1 %8959, i64 17, i64 31
  %8960 = add i64 %8912, %.v422
  %8961 = add i64 %8960, 3
  store i64 %8961, i64* %3, align 8
  br i1 %8959, label %block_41c5b5, label %block_.L_41c5c3

block_41c5b5:                                     ; preds = %block_.L_41c5a4
  %8962 = load i32, i32* %8920, align 4
  %8963 = zext i32 %8962 to i64
  store i64 %8963, i64* %RAX.i82, align 8
  %8964 = add i64 %8883, -664
  %8965 = add i64 %8960, 9
  store i64 %8965, i64* %3, align 8
  %8966 = inttoptr i64 %8964 to i32*
  store i32 %8962, i32* %8966, align 4
  %8967 = load i64, i64* %3, align 8
  %8968 = add i64 %8967, 17
  store i64 %8968, i64* %3, align 8
  br label %block_.L_41c5cf

block_.L_41c5c3:                                  ; preds = %block_.L_41c5a4
  %8969 = load i32, i32* %8925, align 4
  %8970 = zext i32 %8969 to i64
  store i64 %8970, i64* %RAX.i82, align 8
  %8971 = add i64 %8960, 6
  store i64 %8971, i64* %3, align 8
  %8972 = load i32, i32* %8930, align 4
  %8973 = add i32 %8972, %8969
  %8974 = zext i32 %8973 to i64
  store i64 %8974, i64* %RAX.i82, align 8
  %8975 = icmp ult i32 %8973, %8969
  %8976 = icmp ult i32 %8973, %8972
  %8977 = or i1 %8975, %8976
  %8978 = zext i1 %8977 to i8
  store i8 %8978, i8* %14, align 1
  %8979 = and i32 %8973, 255
  %8980 = tail call i32 @llvm.ctpop.i32(i32 %8979)
  %8981 = trunc i32 %8980 to i8
  %8982 = and i8 %8981, 1
  %8983 = xor i8 %8982, 1
  store i8 %8983, i8* %21, align 1
  %8984 = xor i32 %8972, %8969
  %8985 = xor i32 %8984, %8973
  %8986 = lshr i32 %8985, 4
  %8987 = trunc i32 %8986 to i8
  %8988 = and i8 %8987, 1
  store i8 %8988, i8* %26, align 1
  %8989 = icmp eq i32 %8973, 0
  %8990 = zext i1 %8989 to i8
  store i8 %8990, i8* %29, align 1
  %8991 = lshr i32 %8973, 31
  %8992 = trunc i32 %8991 to i8
  store i8 %8992, i8* %32, align 1
  %8993 = lshr i32 %8969, 31
  %8994 = lshr i32 %8972, 31
  %8995 = xor i32 %8991, %8993
  %8996 = xor i32 %8991, %8994
  %8997 = add nuw nsw i32 %8995, %8996
  %8998 = icmp eq i32 %8997, 2
  %8999 = zext i1 %8998 to i8
  store i8 %8999, i8* %38, align 1
  %9000 = add i64 %8883, -664
  %9001 = add i64 %8960, 12
  store i64 %9001, i64* %3, align 8
  %9002 = inttoptr i64 %9000 to i32*
  store i32 %8973, i32* %9002, align 4
  %.pre386 = load i64, i64* %3, align 8
  br label %block_.L_41c5cf

block_.L_41c5cf:                                  ; preds = %block_.L_41c5c3, %block_41c5b5
  %9003 = phi i64 [ %.pre386, %block_.L_41c5c3 ], [ %8968, %block_41c5b5 ]
  %9004 = load i64, i64* %RBP.i, align 8
  %9005 = add i64 %9004, -664
  %9006 = add i64 %9003, 6
  store i64 %9006, i64* %3, align 8
  %9007 = inttoptr i64 %9005 to i32*
  %9008 = load i32, i32* %9007, align 4
  %9009 = zext i32 %9008 to i64
  store i64 %9009, i64* %RAX.i82, align 8
  %9010 = add i64 %9004, -660
  %9011 = add i64 %9003, 12
  store i64 %9011, i64* %3, align 8
  %9012 = inttoptr i64 %9010 to i32*
  store i32 %9008, i32* %9012, align 4
  %.pre387 = load i64, i64* %3, align 8
  br label %block_.L_41c5db

block_.L_41c5db:                                  ; preds = %block_.L_41c5cf, %block_41c597
  %9013 = phi i64 [ %.pre387, %block_.L_41c5cf ], [ %8917, %block_41c597 ]
  %9014 = load i64, i64* %RBP.i, align 8
  %9015 = add i64 %9014, -660
  %9016 = add i64 %9013, 6
  store i64 %9016, i64* %3, align 8
  %9017 = inttoptr i64 %9015 to i32*
  %9018 = load i32, i32* %9017, align 4
  %9019 = zext i32 %9018 to i64
  store i64 %9019, i64* %RAX.i82, align 8
  %9020 = add i64 %9014, -56
  %9021 = add i64 %9013, 9
  store i64 %9021, i64* %3, align 8
  %9022 = inttoptr i64 %9020 to i32*
  store i32 %9018, i32* %9022, align 4
  %9023 = load i64, i64* %RBP.i, align 8
  %9024 = add i64 %9023, -8
  %9025 = load i64, i64* %3, align 8
  %9026 = add i64 %9025, 4
  store i64 %9026, i64* %3, align 8
  %9027 = inttoptr i64 %9024 to i64*
  %9028 = load i64, i64* %9027, align 8
  store i64 %9028, i64* %RCX.i776, align 8
  %9029 = add i64 %9023, -60
  %9030 = add i64 %9025, 8
  store i64 %9030, i64* %3, align 8
  %9031 = inttoptr i64 %9029 to i32*
  %9032 = load i32, i32* %9031, align 4
  %9033 = sext i32 %9032 to i64
  store i64 %9033, i64* %RDX.i532, align 8
  %9034 = shl nsw i64 %9033, 3
  %9035 = add i64 %9034, %9028
  %9036 = add i64 %9025, 12
  store i64 %9036, i64* %3, align 8
  %9037 = inttoptr i64 %9035 to i64*
  %9038 = load i64, i64* %9037, align 8
  store i64 %9038, i64* %RCX.i776, align 8
  %9039 = add i64 %9023, -56
  %9040 = add i64 %9025, 16
  store i64 %9040, i64* %3, align 8
  %9041 = inttoptr i64 %9039 to i32*
  %9042 = load i32, i32* %9041, align 4
  %9043 = sext i32 %9042 to i64
  store i64 %9043, i64* %RDX.i532, align 8
  %9044 = shl nsw i64 %9043, 1
  %9045 = add i64 %9044, %9038
  %9046 = add i64 %9025, 20
  store i64 %9046, i64* %3, align 8
  %9047 = inttoptr i64 %9045 to i16*
  %9048 = load i16, i16* %9047, align 2
  %9049 = zext i16 %9048 to i64
  store i64 %9049, i64* %RAX.i82, align 8
  %9050 = add i64 %9023, -24
  %9051 = add i64 %9025, 23
  store i64 %9051, i64* %3, align 8
  %9052 = inttoptr i64 %9050 to i32*
  %9053 = load i32, i32* %9052, align 4
  %9054 = add i32 %9053, 2
  %9055 = zext i32 %9054 to i64
  store i64 %9055, i64* %RSI.i1183, align 8
  %9056 = icmp ugt i32 %9053, -3
  %9057 = zext i1 %9056 to i8
  store i8 %9057, i8* %14, align 1
  %9058 = and i32 %9054, 255
  %9059 = tail call i32 @llvm.ctpop.i32(i32 %9058)
  %9060 = trunc i32 %9059 to i8
  %9061 = and i8 %9060, 1
  %9062 = xor i8 %9061, 1
  store i8 %9062, i8* %21, align 1
  %9063 = xor i32 %9054, %9053
  %9064 = lshr i32 %9063, 4
  %9065 = trunc i32 %9064 to i8
  %9066 = and i8 %9065, 1
  store i8 %9066, i8* %26, align 1
  %9067 = icmp eq i32 %9054, 0
  %9068 = zext i1 %9067 to i8
  store i8 %9068, i8* %29, align 1
  %9069 = lshr i32 %9054, 31
  %9070 = trunc i32 %9069 to i8
  store i8 %9070, i8* %32, align 1
  %9071 = lshr i32 %9053, 31
  %9072 = xor i32 %9069, %9071
  %9073 = add nuw nsw i32 %9072, %9069
  %9074 = icmp eq i32 %9073, 2
  %9075 = zext i1 %9074 to i8
  store i8 %9075, i8* %38, align 1
  %9076 = sext i32 %9054 to i64
  store i64 %9076, i64* %RCX.i776, align 8
  %9077 = shl nsw i64 %9076, 2
  %9078 = add nsw i64 %9077, 4950704
  %9079 = add i64 %9025, 37
  store i64 %9079, i64* %3, align 8
  %9080 = inttoptr i64 %9078 to i32*
  %9081 = load i32, i32* %9080, align 4
  %9082 = sext i32 %9081 to i64
  %9083 = mul nsw i64 %9082, %9049
  %9084 = trunc i64 %9083 to i32
  %9085 = and i64 %9083, 4294967295
  store i64 %9085, i64* %RAX.i82, align 8
  %9086 = shl i64 %9083, 32
  %9087 = ashr exact i64 %9086, 32
  %9088 = icmp ne i64 %9087, %9083
  %9089 = zext i1 %9088 to i8
  store i8 %9089, i8* %14, align 1
  %9090 = and i32 %9084, 255
  %9091 = tail call i32 @llvm.ctpop.i32(i32 %9090)
  %9092 = trunc i32 %9091 to i8
  %9093 = and i8 %9092, 1
  %9094 = xor i8 %9093, 1
  store i8 %9094, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %9095 = lshr i32 %9084, 31
  %9096 = trunc i32 %9095 to i8
  store i8 %9096, i8* %32, align 1
  store i8 %9089, i8* %38, align 1
  %9097 = load i64, i64* %RBP.i, align 8
  %9098 = add i64 %9097, -44
  %9099 = add i64 %9025, 40
  store i64 %9099, i64* %3, align 8
  %9100 = trunc i64 %9083 to i32
  %9101 = inttoptr i64 %9098 to i32*
  %9102 = load i32, i32* %9101, align 4
  %9103 = add i32 %9102, %9100
  %9104 = zext i32 %9103 to i64
  store i64 %9104, i64* %RAX.i82, align 8
  %9105 = icmp ult i32 %9103, %9100
  %9106 = icmp ult i32 %9103, %9102
  %9107 = or i1 %9105, %9106
  %9108 = zext i1 %9107 to i8
  store i8 %9108, i8* %14, align 1
  %9109 = and i32 %9103, 255
  %9110 = tail call i32 @llvm.ctpop.i32(i32 %9109)
  %9111 = trunc i32 %9110 to i8
  %9112 = and i8 %9111, 1
  %9113 = xor i8 %9112, 1
  store i8 %9113, i8* %21, align 1
  %9114 = xor i32 %9102, %9100
  %9115 = xor i32 %9114, %9103
  %9116 = lshr i32 %9115, 4
  %9117 = trunc i32 %9116 to i8
  %9118 = and i8 %9117, 1
  store i8 %9118, i8* %26, align 1
  %9119 = icmp eq i32 %9103, 0
  %9120 = zext i1 %9119 to i8
  store i8 %9120, i8* %29, align 1
  %9121 = lshr i32 %9103, 31
  %9122 = trunc i32 %9121 to i8
  store i8 %9122, i8* %32, align 1
  %9123 = lshr i32 %9100, 31
  %9124 = lshr i32 %9102, 31
  %9125 = xor i32 %9121, %9123
  %9126 = xor i32 %9121, %9124
  %9127 = add nuw nsw i32 %9125, %9126
  %9128 = icmp eq i32 %9127, 2
  %9129 = zext i1 %9128 to i8
  store i8 %9129, i8* %38, align 1
  %9130 = add i64 %9025, 43
  store i64 %9130, i64* %3, align 8
  store i32 %9103, i32* %9101, align 4
  %9131 = load i64, i64* %RBP.i, align 8
  %9132 = add i64 %9131, -24
  %9133 = load i64, i64* %3, align 8
  %9134 = add i64 %9133, 3
  store i64 %9134, i64* %3, align 8
  %9135 = inttoptr i64 %9132 to i32*
  %9136 = load i32, i32* %9135, align 4
  %9137 = add i32 %9136, 1
  %9138 = zext i32 %9137 to i64
  store i64 %9138, i64* %RAX.i82, align 8
  %9139 = icmp eq i32 %9136, -1
  %9140 = icmp eq i32 %9137, 0
  %9141 = or i1 %9139, %9140
  %9142 = zext i1 %9141 to i8
  store i8 %9142, i8* %14, align 1
  %9143 = and i32 %9137, 255
  %9144 = tail call i32 @llvm.ctpop.i32(i32 %9143)
  %9145 = trunc i32 %9144 to i8
  %9146 = and i8 %9145, 1
  %9147 = xor i8 %9146, 1
  store i8 %9147, i8* %21, align 1
  %9148 = xor i32 %9137, %9136
  %9149 = lshr i32 %9148, 4
  %9150 = trunc i32 %9149 to i8
  %9151 = and i8 %9150, 1
  store i8 %9151, i8* %26, align 1
  %9152 = zext i1 %9140 to i8
  store i8 %9152, i8* %29, align 1
  %9153 = lshr i32 %9137, 31
  %9154 = trunc i32 %9153 to i8
  store i8 %9154, i8* %32, align 1
  %9155 = lshr i32 %9136, 31
  %9156 = xor i32 %9153, %9155
  %9157 = add nuw nsw i32 %9156, %9153
  %9158 = icmp eq i32 %9157, 2
  %9159 = zext i1 %9158 to i8
  store i8 %9159, i8* %38, align 1
  %9160 = add i64 %9133, 9
  store i64 %9160, i64* %3, align 8
  store i32 %9137, i32* %9135, align 4
  %9161 = load i64, i64* %3, align 8
  %9162 = add i64 %9161, -198
  store i64 %9162, i64* %3, align 8
  br label %block_.L_41c552

block_.L_41c61d:                                  ; preds = %block_.L_41c552
  store i64 32, i64* %RAX.i82, align 8
  %9163 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9163, i64* %RCX.i776, align 8
  %9164 = add i64 %9163, 72684
  %9165 = add i64 %8798, 19
  store i64 %9165, i64* %3, align 8
  %9166 = inttoptr i64 %9164 to i32*
  %9167 = load i32, i32* %9166, align 4
  %9168 = zext i32 %9167 to i64
  store i64 %9168, i64* %RDX.i532, align 8
  %9169 = add i64 %8770, -44
  %9170 = add i64 %8798, 22
  store i64 %9170, i64* %3, align 8
  %9171 = inttoptr i64 %9169 to i32*
  %9172 = load i32, i32* %9171, align 4
  %9173 = add i32 %9172, 16
  %9174 = zext i32 %9173 to i64
  store i64 %9174, i64* %RSI.i1183, align 8
  %9175 = icmp ugt i32 %9172, -17
  %9176 = zext i1 %9175 to i8
  store i8 %9176, i8* %14, align 1
  %9177 = and i32 %9173, 255
  %9178 = tail call i32 @llvm.ctpop.i32(i32 %9177)
  %9179 = trunc i32 %9178 to i8
  %9180 = and i8 %9179, 1
  %9181 = xor i8 %9180, 1
  store i8 %9181, i8* %21, align 1
  %9182 = xor i32 %9172, 16
  %9183 = xor i32 %9182, %9173
  %9184 = lshr i32 %9183, 4
  %9185 = trunc i32 %9184 to i8
  %9186 = and i8 %9185, 1
  store i8 %9186, i8* %26, align 1
  %9187 = icmp eq i32 %9173, 0
  %9188 = zext i1 %9187 to i8
  store i8 %9188, i8* %29, align 1
  %9189 = lshr i32 %9173, 31
  %9190 = trunc i32 %9189 to i8
  store i8 %9190, i8* %32, align 1
  %9191 = lshr i32 %9172, 31
  %9192 = xor i32 %9189, %9191
  %9193 = add nuw nsw i32 %9192, %9189
  %9194 = icmp eq i32 %9193, 2
  %9195 = zext i1 %9194 to i8
  store i8 %9195, i8* %38, align 1
  %9196 = add i64 %8770, -668
  %9197 = add i64 %8798, 31
  store i64 %9197, i64* %3, align 8
  %9198 = inttoptr i64 %9196 to i32*
  store i32 32, i32* %9198, align 4
  %9199 = load i32, i32* %ESI.i168, align 4
  %9200 = zext i32 %9199 to i64
  %9201 = load i64, i64* %3, align 8
  store i64 %9200, i64* %RAX.i82, align 8
  %9202 = load i64, i64* %RBP.i, align 8
  %9203 = add i64 %9202, -672
  %9204 = load i32, i32* %EDX.i443, align 4
  %9205 = add i64 %9201, 8
  store i64 %9205, i64* %3, align 8
  %9206 = inttoptr i64 %9203 to i32*
  store i32 %9204, i32* %9206, align 4
  %9207 = load i64, i64* %3, align 8
  %9208 = load i32, i32* %EAX.i1056, align 8
  %9209 = sext i32 %9208 to i64
  %9210 = lshr i64 %9209, 32
  store i64 %9210, i64* %141, align 8
  %9211 = load i64, i64* %RBP.i, align 8
  %9212 = add i64 %9211, -668
  %9213 = add i64 %9207, 7
  store i64 %9213, i64* %3, align 8
  %9214 = inttoptr i64 %9212 to i32*
  %9215 = load i32, i32* %9214, align 4
  %9216 = zext i32 %9215 to i64
  store i64 %9216, i64* %RSI.i1183, align 8
  %9217 = add i64 %9207, 9
  store i64 %9217, i64* %3, align 8
  %9218 = zext i32 %9208 to i64
  %9219 = sext i32 %9215 to i64
  %9220 = shl nuw i64 %9210, 32
  %9221 = or i64 %9220, %9218
  %9222 = sdiv i64 %9221, %9219
  %9223 = shl i64 %9222, 32
  %9224 = ashr exact i64 %9223, 32
  %9225 = icmp eq i64 %9222, %9224
  br i1 %9225, label %9228, label %9226

; <label>:9226:                                   ; preds = %block_.L_41c61d
  %9227 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9217, %struct.Memory* %229)
  %.pre343 = load i64, i64* %RBP.i, align 8
  %.pre344 = load i64, i64* %3, align 8
  %.pre345 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit569

; <label>:9228:                                   ; preds = %block_.L_41c61d
  %9229 = srem i64 %9221, %9219
  %9230 = and i64 %9222, 4294967295
  store i64 %9230, i64* %RAX.i82, align 8
  %9231 = and i64 %9229, 4294967295
  store i64 %9231, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %9232 = trunc i64 %9222 to i32
  br label %routine_idivl__esi.exit569

routine_idivl__esi.exit569:                       ; preds = %9228, %9226
  %9233 = phi i32 [ %.pre345, %9226 ], [ %9232, %9228 ]
  %9234 = phi i64 [ %.pre344, %9226 ], [ %9217, %9228 ]
  %9235 = phi i64 [ %.pre343, %9226 ], [ %9211, %9228 ]
  %9236 = phi %struct.Memory* [ %9227, %9226 ], [ %229, %9228 ]
  %9237 = add i64 %9235, -672
  %9238 = add i64 %9234, 6
  store i64 %9238, i64* %3, align 8
  %9239 = inttoptr i64 %9237 to i32*
  %9240 = load i32, i32* %9239, align 4
  %9241 = zext i32 %9240 to i64
  store i64 %9241, i64* %RDI.i129, align 8
  %9242 = sub i32 %9240, %9233
  %9243 = icmp ult i32 %9240, %9233
  %9244 = zext i1 %9243 to i8
  store i8 %9244, i8* %14, align 1
  %9245 = and i32 %9242, 255
  %9246 = tail call i32 @llvm.ctpop.i32(i32 %9245)
  %9247 = trunc i32 %9246 to i8
  %9248 = and i8 %9247, 1
  %9249 = xor i8 %9248, 1
  store i8 %9249, i8* %21, align 1
  %9250 = xor i32 %9233, %9240
  %9251 = xor i32 %9250, %9242
  %9252 = lshr i32 %9251, 4
  %9253 = trunc i32 %9252 to i8
  %9254 = and i8 %9253, 1
  store i8 %9254, i8* %26, align 1
  %9255 = icmp eq i32 %9242, 0
  %9256 = zext i1 %9255 to i8
  store i8 %9256, i8* %29, align 1
  %9257 = lshr i32 %9242, 31
  %9258 = trunc i32 %9257 to i8
  store i8 %9258, i8* %32, align 1
  %9259 = lshr i32 %9240, 31
  %9260 = lshr i32 %9233, 31
  %9261 = xor i32 %9260, %9259
  %9262 = xor i32 %9257, %9259
  %9263 = add nuw nsw i32 %9262, %9261
  %9264 = icmp eq i32 %9263, 2
  %9265 = zext i1 %9264 to i8
  store i8 %9265, i8* %38, align 1
  %9266 = icmp ne i8 %9258, 0
  %9267 = xor i1 %9266, %9264
  %.v407 = select i1 %9267, i64 14, i64 39
  %9268 = add i64 %9234, %.v407
  store i64 %9268, i64* %3, align 8
  br i1 %9267, label %block_41c65b, label %block_.L_41c674

block_41c65b:                                     ; preds = %routine_idivl__esi.exit569
  %9269 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9269, i64* %RAX.i82, align 8
  %9270 = add i64 %9269, 72684
  %9271 = add i64 %9268, 14
  store i64 %9271, i64* %3, align 8
  %9272 = inttoptr i64 %9270 to i32*
  %9273 = load i32, i32* %9272, align 4
  %9274 = zext i32 %9273 to i64
  store i64 %9274, i64* %RCX.i776, align 8
  %9275 = add i64 %9235, -676
  %9276 = add i64 %9268, 20
  store i64 %9276, i64* %3, align 8
  %9277 = inttoptr i64 %9275 to i32*
  store i32 %9273, i32* %9277, align 4
  %9278 = load i64, i64* %3, align 8
  %9279 = add i64 %9278, 39
  store i64 %9279, i64* %3, align 8
  br label %block_.L_41c696

block_.L_41c674:                                  ; preds = %routine_idivl__esi.exit569
  store i64 32, i64* %RAX.i82, align 8
  %9280 = add i64 %9235, -44
  %9281 = add i64 %9268, 8
  store i64 %9281, i64* %3, align 8
  %9282 = inttoptr i64 %9280 to i32*
  %9283 = load i32, i32* %9282, align 4
  %9284 = add i32 %9283, 16
  %9285 = zext i32 %9284 to i64
  store i64 %9285, i64* %RCX.i776, align 8
  %9286 = icmp ugt i32 %9283, -17
  %9287 = zext i1 %9286 to i8
  store i8 %9287, i8* %14, align 1
  %9288 = and i32 %9284, 255
  %9289 = tail call i32 @llvm.ctpop.i32(i32 %9288)
  %9290 = trunc i32 %9289 to i8
  %9291 = and i8 %9290, 1
  %9292 = xor i8 %9291, 1
  store i8 %9292, i8* %21, align 1
  %9293 = xor i32 %9283, 16
  %9294 = xor i32 %9293, %9284
  %9295 = lshr i32 %9294, 4
  %9296 = trunc i32 %9295 to i8
  %9297 = and i8 %9296, 1
  store i8 %9297, i8* %26, align 1
  %9298 = icmp eq i32 %9284, 0
  %9299 = zext i1 %9298 to i8
  store i8 %9299, i8* %29, align 1
  %9300 = lshr i32 %9284, 31
  %9301 = trunc i32 %9300 to i8
  store i8 %9301, i8* %32, align 1
  %9302 = lshr i32 %9283, 31
  %9303 = xor i32 %9300, %9302
  %9304 = add nuw nsw i32 %9303, %9300
  %9305 = icmp eq i32 %9304, 2
  %9306 = zext i1 %9305 to i8
  store i8 %9306, i8* %38, align 1
  %9307 = add i64 %9235, -680
  %9308 = add i64 %9268, 17
  store i64 %9308, i64* %3, align 8
  %9309 = inttoptr i64 %9307 to i32*
  store i32 32, i32* %9309, align 4
  %9310 = load i32, i32* %ECX.i775, align 4
  %9311 = zext i32 %9310 to i64
  %9312 = load i64, i64* %3, align 8
  store i64 %9311, i64* %RAX.i82, align 8
  %9313 = sext i32 %9310 to i64
  %9314 = lshr i64 %9313, 32
  store i64 %9314, i64* %141, align 8
  %9315 = load i64, i64* %RBP.i, align 8
  %9316 = add i64 %9315, -680
  %9317 = add i64 %9312, 9
  store i64 %9317, i64* %3, align 8
  %9318 = inttoptr i64 %9316 to i32*
  %9319 = load i32, i32* %9318, align 4
  %9320 = zext i32 %9319 to i64
  store i64 %9320, i64* %RCX.i776, align 8
  %9321 = add i64 %9312, 11
  store i64 %9321, i64* %3, align 8
  %9322 = sext i32 %9319 to i64
  %9323 = shl nuw i64 %9314, 32
  %9324 = or i64 %9323, %9311
  %9325 = sdiv i64 %9324, %9322
  %9326 = shl i64 %9325, 32
  %9327 = ashr exact i64 %9326, 32
  %9328 = icmp eq i64 %9325, %9327
  br i1 %9328, label %9331, label %9329

; <label>:9329:                                   ; preds = %block_.L_41c674
  %9330 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9321, %struct.Memory* %9236)
  %.pre346 = load i64, i64* %RBP.i, align 8
  %.pre347 = load i32, i32* %EAX.i1056, align 4
  %.pre348 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit530

; <label>:9331:                                   ; preds = %block_.L_41c674
  %9332 = srem i64 %9324, %9322
  %9333 = and i64 %9325, 4294967295
  store i64 %9333, i64* %RAX.i82, align 8
  %9334 = and i64 %9332, 4294967295
  store i64 %9334, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %9335 = trunc i64 %9325 to i32
  br label %routine_idivl__ecx.exit530

routine_idivl__ecx.exit530:                       ; preds = %9331, %9329
  %9336 = phi i64 [ %.pre348, %9329 ], [ %9321, %9331 ]
  %9337 = phi i32 [ %.pre347, %9329 ], [ %9335, %9331 ]
  %9338 = phi i64 [ %.pre346, %9329 ], [ %9315, %9331 ]
  %9339 = phi %struct.Memory* [ %9330, %9329 ], [ %9236, %9331 ]
  %9340 = add i64 %9338, -676
  %9341 = add i64 %9336, 6
  store i64 %9341, i64* %3, align 8
  %9342 = inttoptr i64 %9340 to i32*
  store i32 %9337, i32* %9342, align 4
  %.pre349 = load i64, i64* %3, align 8
  br label %block_.L_41c696

block_.L_41c696:                                  ; preds = %routine_idivl__ecx.exit530, %block_41c65b
  %9343 = phi i64 [ %.pre349, %routine_idivl__ecx.exit530 ], [ %9279, %block_41c65b ]
  %MEMORY.90 = phi %struct.Memory* [ %9339, %routine_idivl__ecx.exit530 ], [ %9236, %block_41c65b ]
  %9344 = load i64, i64* %RBP.i, align 8
  %9345 = add i64 %9344, -676
  %9346 = add i64 %9343, 6
  store i64 %9346, i64* %3, align 8
  %9347 = inttoptr i64 %9345 to i32*
  %9348 = load i32, i32* %9347, align 4
  %9349 = zext i32 %9348 to i64
  store i64 %9349, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i776, align 8
  %9350 = sub i32 0, %9348
  %9351 = icmp ne i32 %9348, 0
  %9352 = zext i1 %9351 to i8
  store i8 %9352, i8* %14, align 1
  %9353 = and i32 %9350, 255
  %9354 = tail call i32 @llvm.ctpop.i32(i32 %9353)
  %9355 = trunc i32 %9354 to i8
  %9356 = and i8 %9355, 1
  %9357 = xor i8 %9356, 1
  store i8 %9357, i8* %21, align 1
  %9358 = xor i32 %9348, %9350
  %9359 = lshr i32 %9358, 4
  %9360 = trunc i32 %9359 to i8
  %9361 = and i8 %9360, 1
  store i8 %9361, i8* %26, align 1
  %9362 = icmp eq i32 %9348, 0
  %9363 = zext i1 %9362 to i8
  store i8 %9363, i8* %29, align 1
  %9364 = lshr i32 %9350, 31
  %9365 = trunc i32 %9364 to i8
  store i8 %9365, i8* %32, align 1
  %9366 = lshr i32 %9348, 31
  %9367 = add nuw nsw i32 %9364, %9366
  %9368 = icmp eq i32 %9367, 2
  %9369 = zext i1 %9368 to i8
  store i8 %9369, i8* %38, align 1
  %9370 = icmp ne i8 %9365, 0
  %9371 = xor i1 %9370, %9368
  %9372 = or i1 %9362, %9371
  %.v408 = select i1 %9372, i64 29, i64 16
  %9373 = add i64 %9343, %.v408
  store i64 %9373, i64* %3, align 8
  br i1 %9372, label %block_.L_41c6b3, label %block_41c6a6

block_41c6a6:                                     ; preds = %block_.L_41c696
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9374 = add i64 %9344, -684
  %9375 = add i64 %9373, 8
  store i64 %9375, i64* %3, align 8
  %9376 = inttoptr i64 %9374 to i32*
  store i32 0, i32* %9376, align 4
  %9377 = load i64, i64* %3, align 8
  %9378 = add i64 %9377, 138
  store i64 %9378, i64* %3, align 8
  br label %block_.L_41c738

block_.L_41c6b3:                                  ; preds = %block_.L_41c696
  store i64 32, i64* %RAX.i82, align 8
  %9379 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9379, i64* %RCX.i776, align 8
  %9380 = add i64 %9379, 72684
  %9381 = add i64 %9373, 19
  store i64 %9381, i64* %3, align 8
  %9382 = inttoptr i64 %9380 to i32*
  %9383 = load i32, i32* %9382, align 4
  %9384 = zext i32 %9383 to i64
  store i64 %9384, i64* %RDX.i532, align 8
  %9385 = add i64 %9344, -44
  %9386 = add i64 %9373, 22
  store i64 %9386, i64* %3, align 8
  %9387 = inttoptr i64 %9385 to i32*
  %9388 = load i32, i32* %9387, align 4
  %9389 = add i32 %9388, 16
  %9390 = zext i32 %9389 to i64
  store i64 %9390, i64* %RSI.i1183, align 8
  %9391 = icmp ugt i32 %9388, -17
  %9392 = zext i1 %9391 to i8
  store i8 %9392, i8* %14, align 1
  %9393 = and i32 %9389, 255
  %9394 = tail call i32 @llvm.ctpop.i32(i32 %9393)
  %9395 = trunc i32 %9394 to i8
  %9396 = and i8 %9395, 1
  %9397 = xor i8 %9396, 1
  store i8 %9397, i8* %21, align 1
  %9398 = xor i32 %9388, 16
  %9399 = xor i32 %9398, %9389
  %9400 = lshr i32 %9399, 4
  %9401 = trunc i32 %9400 to i8
  %9402 = and i8 %9401, 1
  store i8 %9402, i8* %26, align 1
  %9403 = icmp eq i32 %9389, 0
  %9404 = zext i1 %9403 to i8
  store i8 %9404, i8* %29, align 1
  %9405 = lshr i32 %9389, 31
  %9406 = trunc i32 %9405 to i8
  store i8 %9406, i8* %32, align 1
  %9407 = lshr i32 %9388, 31
  %9408 = xor i32 %9405, %9407
  %9409 = add nuw nsw i32 %9408, %9405
  %9410 = icmp eq i32 %9409, 2
  %9411 = zext i1 %9410 to i8
  store i8 %9411, i8* %38, align 1
  %9412 = add i64 %9344, -688
  %9413 = add i64 %9373, 31
  store i64 %9413, i64* %3, align 8
  %9414 = inttoptr i64 %9412 to i32*
  store i32 32, i32* %9414, align 4
  %9415 = load i32, i32* %ESI.i168, align 4
  %9416 = zext i32 %9415 to i64
  %9417 = load i64, i64* %3, align 8
  store i64 %9416, i64* %RAX.i82, align 8
  %9418 = load i64, i64* %RBP.i, align 8
  %9419 = add i64 %9418, -692
  %9420 = load i32, i32* %EDX.i443, align 4
  %9421 = add i64 %9417, 8
  store i64 %9421, i64* %3, align 8
  %9422 = inttoptr i64 %9419 to i32*
  store i32 %9420, i32* %9422, align 4
  %9423 = load i64, i64* %3, align 8
  %9424 = load i32, i32* %EAX.i1056, align 8
  %9425 = sext i32 %9424 to i64
  %9426 = lshr i64 %9425, 32
  store i64 %9426, i64* %141, align 8
  %9427 = load i64, i64* %RBP.i, align 8
  %9428 = add i64 %9427, -688
  %9429 = add i64 %9423, 7
  store i64 %9429, i64* %3, align 8
  %9430 = inttoptr i64 %9428 to i32*
  %9431 = load i32, i32* %9430, align 4
  %9432 = zext i32 %9431 to i64
  store i64 %9432, i64* %RSI.i1183, align 8
  %9433 = add i64 %9423, 9
  store i64 %9433, i64* %3, align 8
  %9434 = zext i32 %9424 to i64
  %9435 = sext i32 %9431 to i64
  %9436 = shl nuw i64 %9426, 32
  %9437 = or i64 %9436, %9434
  %9438 = sdiv i64 %9437, %9435
  %9439 = shl i64 %9438, 32
  %9440 = ashr exact i64 %9439, 32
  %9441 = icmp eq i64 %9438, %9440
  br i1 %9441, label %9444, label %9442

; <label>:9442:                                   ; preds = %block_.L_41c6b3
  %9443 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9433, %struct.Memory* %MEMORY.90)
  %.pre350 = load i64, i64* %RBP.i, align 8
  %.pre351 = load i64, i64* %3, align 8
  %.pre352 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit480

; <label>:9444:                                   ; preds = %block_.L_41c6b3
  %9445 = srem i64 %9437, %9435
  %9446 = and i64 %9438, 4294967295
  store i64 %9446, i64* %RAX.i82, align 8
  %9447 = and i64 %9445, 4294967295
  store i64 %9447, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %9448 = trunc i64 %9438 to i32
  br label %routine_idivl__esi.exit480

routine_idivl__esi.exit480:                       ; preds = %9444, %9442
  %9449 = phi i32 [ %.pre352, %9442 ], [ %9448, %9444 ]
  %9450 = phi i64 [ %.pre351, %9442 ], [ %9433, %9444 ]
  %9451 = phi i64 [ %.pre350, %9442 ], [ %9427, %9444 ]
  %9452 = phi %struct.Memory* [ %9443, %9442 ], [ %MEMORY.90, %9444 ]
  %9453 = add i64 %9451, -692
  %9454 = add i64 %9450, 6
  store i64 %9454, i64* %3, align 8
  %9455 = inttoptr i64 %9453 to i32*
  %9456 = load i32, i32* %9455, align 4
  %9457 = zext i32 %9456 to i64
  store i64 %9457, i64* %RDI.i129, align 8
  %9458 = sub i32 %9456, %9449
  %9459 = icmp ult i32 %9456, %9449
  %9460 = zext i1 %9459 to i8
  store i8 %9460, i8* %14, align 1
  %9461 = and i32 %9458, 255
  %9462 = tail call i32 @llvm.ctpop.i32(i32 %9461)
  %9463 = trunc i32 %9462 to i8
  %9464 = and i8 %9463, 1
  %9465 = xor i8 %9464, 1
  store i8 %9465, i8* %21, align 1
  %9466 = xor i32 %9449, %9456
  %9467 = xor i32 %9466, %9458
  %9468 = lshr i32 %9467, 4
  %9469 = trunc i32 %9468 to i8
  %9470 = and i8 %9469, 1
  store i8 %9470, i8* %26, align 1
  %9471 = icmp eq i32 %9458, 0
  %9472 = zext i1 %9471 to i8
  store i8 %9472, i8* %29, align 1
  %9473 = lshr i32 %9458, 31
  %9474 = trunc i32 %9473 to i8
  store i8 %9474, i8* %32, align 1
  %9475 = lshr i32 %9456, 31
  %9476 = lshr i32 %9449, 31
  %9477 = xor i32 %9476, %9475
  %9478 = xor i32 %9473, %9475
  %9479 = add nuw nsw i32 %9478, %9477
  %9480 = icmp eq i32 %9479, 2
  %9481 = zext i1 %9480 to i8
  store i8 %9481, i8* %38, align 1
  %9482 = icmp ne i8 %9474, 0
  %9483 = xor i1 %9482, %9480
  %.v419 = select i1 %9483, i64 14, i64 39
  %9484 = add i64 %9450, %.v419
  store i64 %9484, i64* %3, align 8
  br i1 %9483, label %block_41c6f1, label %block_.L_41c70a

block_41c6f1:                                     ; preds = %routine_idivl__esi.exit480
  %9485 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9485, i64* %RAX.i82, align 8
  %9486 = add i64 %9485, 72684
  %9487 = add i64 %9484, 14
  store i64 %9487, i64* %3, align 8
  %9488 = inttoptr i64 %9486 to i32*
  %9489 = load i32, i32* %9488, align 4
  %9490 = zext i32 %9489 to i64
  store i64 %9490, i64* %RCX.i776, align 8
  %9491 = add i64 %9451, -696
  %9492 = add i64 %9484, 20
  store i64 %9492, i64* %3, align 8
  %9493 = inttoptr i64 %9491 to i32*
  store i32 %9489, i32* %9493, align 4
  %9494 = load i64, i64* %3, align 8
  %9495 = add i64 %9494, 39
  store i64 %9495, i64* %3, align 8
  br label %block_.L_41c72c

block_.L_41c70a:                                  ; preds = %routine_idivl__esi.exit480
  store i64 32, i64* %RAX.i82, align 8
  %9496 = add i64 %9451, -44
  %9497 = add i64 %9484, 8
  store i64 %9497, i64* %3, align 8
  %9498 = inttoptr i64 %9496 to i32*
  %9499 = load i32, i32* %9498, align 4
  %9500 = add i32 %9499, 16
  %9501 = zext i32 %9500 to i64
  store i64 %9501, i64* %RCX.i776, align 8
  %9502 = icmp ugt i32 %9499, -17
  %9503 = zext i1 %9502 to i8
  store i8 %9503, i8* %14, align 1
  %9504 = and i32 %9500, 255
  %9505 = tail call i32 @llvm.ctpop.i32(i32 %9504)
  %9506 = trunc i32 %9505 to i8
  %9507 = and i8 %9506, 1
  %9508 = xor i8 %9507, 1
  store i8 %9508, i8* %21, align 1
  %9509 = xor i32 %9499, 16
  %9510 = xor i32 %9509, %9500
  %9511 = lshr i32 %9510, 4
  %9512 = trunc i32 %9511 to i8
  %9513 = and i8 %9512, 1
  store i8 %9513, i8* %26, align 1
  %9514 = icmp eq i32 %9500, 0
  %9515 = zext i1 %9514 to i8
  store i8 %9515, i8* %29, align 1
  %9516 = lshr i32 %9500, 31
  %9517 = trunc i32 %9516 to i8
  store i8 %9517, i8* %32, align 1
  %9518 = lshr i32 %9499, 31
  %9519 = xor i32 %9516, %9518
  %9520 = add nuw nsw i32 %9519, %9516
  %9521 = icmp eq i32 %9520, 2
  %9522 = zext i1 %9521 to i8
  store i8 %9522, i8* %38, align 1
  %9523 = add i64 %9451, -700
  %9524 = add i64 %9484, 17
  store i64 %9524, i64* %3, align 8
  %9525 = inttoptr i64 %9523 to i32*
  store i32 32, i32* %9525, align 4
  %9526 = load i32, i32* %ECX.i775, align 4
  %9527 = zext i32 %9526 to i64
  %9528 = load i64, i64* %3, align 8
  store i64 %9527, i64* %RAX.i82, align 8
  %9529 = sext i32 %9526 to i64
  %9530 = lshr i64 %9529, 32
  store i64 %9530, i64* %141, align 8
  %9531 = load i64, i64* %RBP.i, align 8
  %9532 = add i64 %9531, -700
  %9533 = add i64 %9528, 9
  store i64 %9533, i64* %3, align 8
  %9534 = inttoptr i64 %9532 to i32*
  %9535 = load i32, i32* %9534, align 4
  %9536 = zext i32 %9535 to i64
  store i64 %9536, i64* %RCX.i776, align 8
  %9537 = add i64 %9528, 11
  store i64 %9537, i64* %3, align 8
  %9538 = sext i32 %9535 to i64
  %9539 = shl nuw i64 %9530, 32
  %9540 = or i64 %9539, %9527
  %9541 = sdiv i64 %9540, %9538
  %9542 = shl i64 %9541, 32
  %9543 = ashr exact i64 %9542, 32
  %9544 = icmp eq i64 %9541, %9543
  br i1 %9544, label %9547, label %9545

; <label>:9545:                                   ; preds = %block_.L_41c70a
  %9546 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9537, %struct.Memory* %9452)
  %.pre353 = load i64, i64* %RBP.i, align 8
  %.pre354 = load i32, i32* %EAX.i1056, align 4
  %.pre355 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit441

; <label>:9547:                                   ; preds = %block_.L_41c70a
  %9548 = srem i64 %9540, %9538
  %9549 = and i64 %9541, 4294967295
  store i64 %9549, i64* %RAX.i82, align 8
  %9550 = and i64 %9548, 4294967295
  store i64 %9550, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %9551 = trunc i64 %9541 to i32
  br label %routine_idivl__ecx.exit441

routine_idivl__ecx.exit441:                       ; preds = %9547, %9545
  %9552 = phi i64 [ %.pre355, %9545 ], [ %9537, %9547 ]
  %9553 = phi i32 [ %.pre354, %9545 ], [ %9551, %9547 ]
  %9554 = phi i64 [ %.pre353, %9545 ], [ %9531, %9547 ]
  %9555 = phi %struct.Memory* [ %9546, %9545 ], [ %9452, %9547 ]
  %9556 = add i64 %9554, -696
  %9557 = add i64 %9552, 6
  store i64 %9557, i64* %3, align 8
  %9558 = inttoptr i64 %9556 to i32*
  store i32 %9553, i32* %9558, align 4
  %.pre356 = load i64, i64* %3, align 8
  br label %block_.L_41c72c

block_.L_41c72c:                                  ; preds = %routine_idivl__ecx.exit441, %block_41c6f1
  %9559 = phi i64 [ %.pre356, %routine_idivl__ecx.exit441 ], [ %9495, %block_41c6f1 ]
  %MEMORY.91 = phi %struct.Memory* [ %9555, %routine_idivl__ecx.exit441 ], [ %9452, %block_41c6f1 ]
  %9560 = load i64, i64* %RBP.i, align 8
  %9561 = add i64 %9560, -696
  %9562 = add i64 %9559, 6
  store i64 %9562, i64* %3, align 8
  %9563 = inttoptr i64 %9561 to i32*
  %9564 = load i32, i32* %9563, align 4
  %9565 = zext i32 %9564 to i64
  store i64 %9565, i64* %RAX.i82, align 8
  %9566 = add i64 %9560, -684
  %9567 = add i64 %9559, 12
  store i64 %9567, i64* %3, align 8
  %9568 = inttoptr i64 %9566 to i32*
  store i32 %9564, i32* %9568, align 4
  %.pre357 = load i64, i64* %3, align 8
  br label %block_.L_41c738

block_.L_41c738:                                  ; preds = %block_.L_41c72c, %block_41c6a6
  %9569 = phi i64 [ %.pre357, %block_.L_41c72c ], [ %9378, %block_41c6a6 ]
  %MEMORY.92 = phi %struct.Memory* [ %MEMORY.91, %block_.L_41c72c ], [ %MEMORY.90, %block_41c6a6 ]
  %9570 = load i64, i64* %RBP.i, align 8
  %9571 = add i64 %9570, -684
  %9572 = add i64 %9569, 6
  store i64 %9572, i64* %3, align 8
  %9573 = inttoptr i64 %9571 to i32*
  %9574 = load i32, i32* %9573, align 4
  %9575 = zext i32 %9574 to i64
  store i64 %9575, i64* %RAX.i82, align 8
  %9576 = add i64 %9570, -48
  %9577 = add i64 %9569, 9
  store i64 %9577, i64* %3, align 8
  %9578 = inttoptr i64 %9576 to i32*
  store i32 %9574, i32* %9578, align 4
  %9579 = load i64, i64* %RBP.i, align 8
  %9580 = add i64 %9579, -44
  %9581 = load i64, i64* %3, align 8
  %9582 = add i64 %9581, 7
  store i64 %9582, i64* %3, align 8
  %9583 = inttoptr i64 %9580 to i32*
  store i32 0, i32* %9583, align 4
  %9584 = load i64, i64* %RBP.i, align 8
  %9585 = add i64 %9584, -20
  %9586 = load i64, i64* %3, align 8
  %9587 = add i64 %9586, 4
  store i64 %9587, i64* %3, align 8
  %9588 = inttoptr i64 %9585 to i32*
  %9589 = load i32, i32* %9588, align 4
  %9590 = add i32 %9589, -1
  %9591 = icmp eq i32 %9589, 0
  %9592 = zext i1 %9591 to i8
  store i8 %9592, i8* %14, align 1
  %9593 = and i32 %9590, 255
  %9594 = tail call i32 @llvm.ctpop.i32(i32 %9593)
  %9595 = trunc i32 %9594 to i8
  %9596 = and i8 %9595, 1
  %9597 = xor i8 %9596, 1
  store i8 %9597, i8* %21, align 1
  %9598 = xor i32 %9590, %9589
  %9599 = lshr i32 %9598, 4
  %9600 = trunc i32 %9599 to i8
  %9601 = and i8 %9600, 1
  store i8 %9601, i8* %26, align 1
  %9602 = icmp eq i32 %9590, 0
  %9603 = zext i1 %9602 to i8
  store i8 %9603, i8* %29, align 1
  %9604 = lshr i32 %9590, 31
  %9605 = trunc i32 %9604 to i8
  store i8 %9605, i8* %32, align 1
  %9606 = lshr i32 %9589, 31
  %9607 = xor i32 %9604, %9606
  %9608 = add nuw nsw i32 %9607, %9606
  %9609 = icmp eq i32 %9608, 2
  %9610 = zext i1 %9609 to i8
  store i8 %9610, i8* %38, align 1
  %.v398 = select i1 %9602, i64 10, i64 24
  %9611 = add i64 %9586, %.v398
  %9612 = add i64 %9584, -16
  %9613 = add i64 %9611, 3
  store i64 %9613, i64* %3, align 8
  %9614 = inttoptr i64 %9612 to i32*
  %9615 = load i32, i32* %9614, align 4
  %9616 = zext i32 %9615 to i64
  store i64 %9616, i64* %RAX.i82, align 8
  br i1 %9602, label %block_41c752, label %block_.L_41c760

block_41c752:                                     ; preds = %block_.L_41c738
  %9617 = add i64 %9584, -704
  %9618 = add i64 %9611, 9
  store i64 %9618, i64* %3, align 8
  %9619 = inttoptr i64 %9617 to i32*
  store i32 %9615, i32* %9619, align 4
  %9620 = load i64, i64* %3, align 8
  %9621 = add i64 %9620, 17
  store i64 %9621, i64* %3, align 8
  br label %block_.L_41c76c

block_.L_41c760:                                  ; preds = %block_.L_41c738
  %9622 = add i32 %9615, 1
  %9623 = zext i32 %9622 to i64
  store i64 %9623, i64* %RAX.i82, align 8
  %9624 = icmp eq i32 %9615, -1
  %9625 = icmp eq i32 %9622, 0
  %9626 = or i1 %9624, %9625
  %9627 = zext i1 %9626 to i8
  store i8 %9627, i8* %14, align 1
  %9628 = and i32 %9622, 255
  %9629 = tail call i32 @llvm.ctpop.i32(i32 %9628)
  %9630 = trunc i32 %9629 to i8
  %9631 = and i8 %9630, 1
  %9632 = xor i8 %9631, 1
  store i8 %9632, i8* %21, align 1
  %9633 = xor i32 %9622, %9615
  %9634 = lshr i32 %9633, 4
  %9635 = trunc i32 %9634 to i8
  %9636 = and i8 %9635, 1
  store i8 %9636, i8* %26, align 1
  %9637 = zext i1 %9625 to i8
  store i8 %9637, i8* %29, align 1
  %9638 = lshr i32 %9622, 31
  %9639 = trunc i32 %9638 to i8
  store i8 %9639, i8* %32, align 1
  %9640 = lshr i32 %9615, 31
  %9641 = xor i32 %9638, %9640
  %9642 = add nuw nsw i32 %9641, %9638
  %9643 = icmp eq i32 %9642, 2
  %9644 = zext i1 %9643 to i8
  store i8 %9644, i8* %38, align 1
  %9645 = add i64 %9584, -704
  %9646 = add i64 %9611, 12
  store i64 %9646, i64* %3, align 8
  %9647 = inttoptr i64 %9645 to i32*
  store i32 %9622, i32* %9647, align 4
  %.pre358 = load i64, i64* %3, align 8
  br label %block_.L_41c76c

block_.L_41c76c:                                  ; preds = %block_.L_41c760, %block_41c752
  %9648 = phi i64 [ %.pre358, %block_.L_41c760 ], [ %9621, %block_41c752 ]
  %9649 = load i64, i64* %RBP.i, align 8
  %9650 = add i64 %9649, -704
  %9651 = add i64 %9648, 6
  store i64 %9651, i64* %3, align 8
  %9652 = inttoptr i64 %9650 to i32*
  %9653 = load i32, i32* %9652, align 4
  %9654 = zext i32 %9653 to i64
  store i64 %9654, i64* %RAX.i82, align 8
  %9655 = add i64 %9649, -56
  %9656 = add i64 %9648, 9
  store i64 %9656, i64* %3, align 8
  %9657 = inttoptr i64 %9655 to i32*
  store i32 %9653, i32* %9657, align 4
  %9658 = load i64, i64* %RBP.i, align 8
  %9659 = add i64 %9658, -36
  %9660 = load i64, i64* %3, align 8
  %9661 = add i64 %9660, 3
  store i64 %9661, i64* %3, align 8
  %9662 = inttoptr i64 %9659 to i32*
  %9663 = load i32, i32* %9662, align 4
  %9664 = zext i32 %9663 to i64
  store i64 %9664, i64* %RAX.i82, align 8
  %9665 = add i64 %9658, -56
  %9666 = add i64 %9660, 6
  store i64 %9666, i64* %3, align 8
  %9667 = inttoptr i64 %9665 to i32*
  %9668 = load i32, i32* %9667, align 4
  %9669 = sub i32 %9663, %9668
  %9670 = icmp ult i32 %9663, %9668
  %9671 = zext i1 %9670 to i8
  store i8 %9671, i8* %14, align 1
  %9672 = and i32 %9669, 255
  %9673 = tail call i32 @llvm.ctpop.i32(i32 %9672)
  %9674 = trunc i32 %9673 to i8
  %9675 = and i8 %9674, 1
  %9676 = xor i8 %9675, 1
  store i8 %9676, i8* %21, align 1
  %9677 = xor i32 %9668, %9663
  %9678 = xor i32 %9677, %9669
  %9679 = lshr i32 %9678, 4
  %9680 = trunc i32 %9679 to i8
  %9681 = and i8 %9680, 1
  store i8 %9681, i8* %26, align 1
  %9682 = icmp eq i32 %9669, 0
  %9683 = zext i1 %9682 to i8
  store i8 %9683, i8* %29, align 1
  %9684 = lshr i32 %9669, 31
  %9685 = trunc i32 %9684 to i8
  store i8 %9685, i8* %32, align 1
  %9686 = lshr i32 %9663, 31
  %9687 = lshr i32 %9668, 31
  %9688 = xor i32 %9687, %9686
  %9689 = xor i32 %9684, %9686
  %9690 = add nuw nsw i32 %9689, %9688
  %9691 = icmp eq i32 %9690, 2
  %9692 = zext i1 %9691 to i8
  store i8 %9692, i8* %38, align 1
  %9693 = icmp ne i8 %9685, 0
  %9694 = xor i1 %9693, %9691
  %.v409 = select i1 %9694, i64 12, i64 26
  %9695 = add i64 %9660, %.v409
  %9696 = add i64 %9695, 3
  store i64 %9696, i64* %3, align 8
  br i1 %9694, label %block_41c781, label %block_.L_41c78f

block_41c781:                                     ; preds = %block_.L_41c76c
  %9697 = load i32, i32* %9662, align 4
  %9698 = zext i32 %9697 to i64
  store i64 %9698, i64* %RAX.i82, align 8
  %9699 = add i64 %9658, -708
  %9700 = add i64 %9695, 9
  store i64 %9700, i64* %3, align 8
  %9701 = inttoptr i64 %9699 to i32*
  store i32 %9697, i32* %9701, align 4
  %9702 = load i64, i64* %3, align 8
  %9703 = add i64 %9702, 14
  store i64 %9703, i64* %3, align 8
  br label %block_.L_41c798

block_.L_41c78f:                                  ; preds = %block_.L_41c76c
  %9704 = load i32, i32* %9667, align 4
  %9705 = zext i32 %9704 to i64
  store i64 %9705, i64* %RAX.i82, align 8
  %9706 = add i64 %9658, -708
  %9707 = add i64 %9695, 9
  store i64 %9707, i64* %3, align 8
  %9708 = inttoptr i64 %9706 to i32*
  store i32 %9704, i32* %9708, align 4
  %.pre359 = load i64, i64* %3, align 8
  br label %block_.L_41c798

block_.L_41c798:                                  ; preds = %block_.L_41c78f, %block_41c781
  %9709 = phi i64 [ %.pre359, %block_.L_41c78f ], [ %9703, %block_41c781 ]
  %9710 = load i64, i64* %RBP.i, align 8
  %9711 = add i64 %9710, -708
  %9712 = add i64 %9709, 6
  store i64 %9712, i64* %3, align 8
  %9713 = inttoptr i64 %9711 to i32*
  %9714 = load i32, i32* %9713, align 4
  %9715 = zext i32 %9714 to i64
  store i64 %9715, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i776, align 8
  %9716 = sub i32 0, %9714
  %9717 = icmp ne i32 %9714, 0
  %9718 = zext i1 %9717 to i8
  store i8 %9718, i8* %14, align 1
  %9719 = and i32 %9716, 255
  %9720 = tail call i32 @llvm.ctpop.i32(i32 %9719)
  %9721 = trunc i32 %9720 to i8
  %9722 = and i8 %9721, 1
  %9723 = xor i8 %9722, 1
  store i8 %9723, i8* %21, align 1
  %9724 = xor i32 %9714, %9716
  %9725 = lshr i32 %9724, 4
  %9726 = trunc i32 %9725 to i8
  %9727 = and i8 %9726, 1
  store i8 %9727, i8* %26, align 1
  %9728 = icmp eq i32 %9714, 0
  %9729 = zext i1 %9728 to i8
  store i8 %9729, i8* %29, align 1
  %9730 = lshr i32 %9716, 31
  %9731 = trunc i32 %9730 to i8
  store i8 %9731, i8* %32, align 1
  %9732 = lshr i32 %9714, 31
  %9733 = add nuw nsw i32 %9730, %9732
  %9734 = icmp eq i32 %9733, 2
  %9735 = zext i1 %9734 to i8
  store i8 %9735, i8* %38, align 1
  %9736 = icmp ne i8 %9731, 0
  %9737 = xor i1 %9736, %9734
  %9738 = or i1 %9728, %9737
  %.v410 = select i1 %9738, i64 29, i64 16
  %9739 = add i64 %9709, %.v410
  store i64 %9739, i64* %3, align 8
  br i1 %9738, label %block_.L_41c7b5, label %block_41c7a8

block_41c7a8:                                     ; preds = %block_.L_41c798
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9740 = add i64 %9710, -712
  %9741 = add i64 %9739, 8
  store i64 %9741, i64* %3, align 8
  %9742 = inttoptr i64 %9740 to i32*
  store i32 0, i32* %9742, align 4
  %9743 = load i64, i64* %3, align 8
  %9744 = add i64 %9743, 52
  store i64 %9744, i64* %3, align 8
  br label %block_.L_41c7e4

block_.L_41c7b5:                                  ; preds = %block_.L_41c798
  %9745 = add i64 %9710, -36
  %9746 = add i64 %9739, 3
  store i64 %9746, i64* %3, align 8
  %9747 = inttoptr i64 %9745 to i32*
  %9748 = load i32, i32* %9747, align 4
  %9749 = zext i32 %9748 to i64
  store i64 %9749, i64* %RAX.i82, align 8
  %9750 = add i64 %9710, -56
  %9751 = add i64 %9739, 6
  store i64 %9751, i64* %3, align 8
  %9752 = inttoptr i64 %9750 to i32*
  %9753 = load i32, i32* %9752, align 4
  %9754 = sub i32 %9748, %9753
  %9755 = icmp ult i32 %9748, %9753
  %9756 = zext i1 %9755 to i8
  store i8 %9756, i8* %14, align 1
  %9757 = and i32 %9754, 255
  %9758 = tail call i32 @llvm.ctpop.i32(i32 %9757)
  %9759 = trunc i32 %9758 to i8
  %9760 = and i8 %9759, 1
  %9761 = xor i8 %9760, 1
  store i8 %9761, i8* %21, align 1
  %9762 = xor i32 %9753, %9748
  %9763 = xor i32 %9762, %9754
  %9764 = lshr i32 %9763, 4
  %9765 = trunc i32 %9764 to i8
  %9766 = and i8 %9765, 1
  store i8 %9766, i8* %26, align 1
  %9767 = icmp eq i32 %9754, 0
  %9768 = zext i1 %9767 to i8
  store i8 %9768, i8* %29, align 1
  %9769 = lshr i32 %9754, 31
  %9770 = trunc i32 %9769 to i8
  store i8 %9770, i8* %32, align 1
  %9771 = lshr i32 %9748, 31
  %9772 = lshr i32 %9753, 31
  %9773 = xor i32 %9772, %9771
  %9774 = xor i32 %9769, %9771
  %9775 = add nuw nsw i32 %9774, %9773
  %9776 = icmp eq i32 %9775, 2
  %9777 = zext i1 %9776 to i8
  store i8 %9777, i8* %38, align 1
  %9778 = icmp ne i8 %9770, 0
  %9779 = xor i1 %9778, %9776
  %.v418 = select i1 %9779, i64 12, i64 26
  %9780 = add i64 %9739, %.v418
  %9781 = add i64 %9780, 3
  store i64 %9781, i64* %3, align 8
  br i1 %9779, label %block_41c7c1, label %block_.L_41c7cf

block_41c7c1:                                     ; preds = %block_.L_41c7b5
  %9782 = load i32, i32* %9747, align 4
  %9783 = zext i32 %9782 to i64
  store i64 %9783, i64* %RAX.i82, align 8
  %9784 = add i64 %9710, -716
  %9785 = add i64 %9780, 9
  store i64 %9785, i64* %3, align 8
  %9786 = inttoptr i64 %9784 to i32*
  store i32 %9782, i32* %9786, align 4
  %9787 = load i64, i64* %3, align 8
  %9788 = add i64 %9787, 14
  store i64 %9788, i64* %3, align 8
  br label %block_.L_41c7d8

block_.L_41c7cf:                                  ; preds = %block_.L_41c7b5
  %9789 = load i32, i32* %9752, align 4
  %9790 = zext i32 %9789 to i64
  store i64 %9790, i64* %RAX.i82, align 8
  %9791 = add i64 %9710, -716
  %9792 = add i64 %9780, 9
  store i64 %9792, i64* %3, align 8
  %9793 = inttoptr i64 %9791 to i32*
  store i32 %9789, i32* %9793, align 4
  %.pre360 = load i64, i64* %3, align 8
  br label %block_.L_41c7d8

block_.L_41c7d8:                                  ; preds = %block_.L_41c7cf, %block_41c7c1
  %9794 = phi i64 [ %.pre360, %block_.L_41c7cf ], [ %9788, %block_41c7c1 ]
  %9795 = load i64, i64* %RBP.i, align 8
  %9796 = add i64 %9795, -716
  %9797 = add i64 %9794, 6
  store i64 %9797, i64* %3, align 8
  %9798 = inttoptr i64 %9796 to i32*
  %9799 = load i32, i32* %9798, align 4
  %9800 = zext i32 %9799 to i64
  store i64 %9800, i64* %RAX.i82, align 8
  %9801 = add i64 %9795, -712
  %9802 = add i64 %9794, 12
  store i64 %9802, i64* %3, align 8
  %9803 = inttoptr i64 %9801 to i32*
  store i32 %9799, i32* %9803, align 4
  %.pre361 = load i64, i64* %3, align 8
  br label %block_.L_41c7e4

block_.L_41c7e4:                                  ; preds = %block_.L_41c7d8, %block_41c7a8
  %9804 = phi i64 [ %.pre361, %block_.L_41c7d8 ], [ %9744, %block_41c7a8 ]
  %9805 = load i64, i64* %RBP.i, align 8
  %9806 = add i64 %9805, -712
  %9807 = add i64 %9804, 6
  store i64 %9807, i64* %3, align 8
  %9808 = inttoptr i64 %9806 to i32*
  %9809 = load i32, i32* %9808, align 4
  %9810 = zext i32 %9809 to i64
  store i64 %9810, i64* %RAX.i82, align 8
  %9811 = add i64 %9805, -56
  %9812 = add i64 %9804, 9
  store i64 %9812, i64* %3, align 8
  %9813 = inttoptr i64 %9811 to i32*
  store i32 %9809, i32* %9813, align 4
  %9814 = load i64, i64* %RBP.i, align 8
  %9815 = add i64 %9814, -32
  %9816 = load i64, i64* %3, align 8
  %9817 = add i64 %9816, 7
  store i64 %9817, i64* %3, align 8
  %9818 = inttoptr i64 %9815 to i32*
  store i32 -2, i32* %9818, align 4
  %.pre362 = load i64, i64* %3, align 8
  br label %block_.L_41c7f4

block_.L_41c7f4:                                  ; preds = %block_.L_41c87d, %block_.L_41c7e4
  %9819 = phi i64 [ %10212, %block_.L_41c87d ], [ %.pre362, %block_.L_41c7e4 ]
  %9820 = load i64, i64* %RBP.i, align 8
  %9821 = add i64 %9820, -32
  %9822 = add i64 %9819, 4
  store i64 %9822, i64* %3, align 8
  %9823 = inttoptr i64 %9821 to i32*
  %9824 = load i32, i32* %9823, align 4
  %9825 = add i32 %9824, -4
  %9826 = icmp ult i32 %9824, 4
  %9827 = zext i1 %9826 to i8
  store i8 %9827, i8* %14, align 1
  %9828 = and i32 %9825, 255
  %9829 = tail call i32 @llvm.ctpop.i32(i32 %9828)
  %9830 = trunc i32 %9829 to i8
  %9831 = and i8 %9830, 1
  %9832 = xor i8 %9831, 1
  store i8 %9832, i8* %21, align 1
  %9833 = xor i32 %9825, %9824
  %9834 = lshr i32 %9833, 4
  %9835 = trunc i32 %9834 to i8
  %9836 = and i8 %9835, 1
  store i8 %9836, i8* %26, align 1
  %9837 = icmp eq i32 %9825, 0
  %9838 = zext i1 %9837 to i8
  store i8 %9838, i8* %29, align 1
  %9839 = lshr i32 %9825, 31
  %9840 = trunc i32 %9839 to i8
  store i8 %9840, i8* %32, align 1
  %9841 = lshr i32 %9824, 31
  %9842 = xor i32 %9839, %9841
  %9843 = add nuw nsw i32 %9842, %9841
  %9844 = icmp eq i32 %9843, 2
  %9845 = zext i1 %9844 to i8
  store i8 %9845, i8* %38, align 1
  %9846 = icmp ne i8 %9840, 0
  %9847 = xor i1 %9846, %9844
  %.v411 = select i1 %9847, i64 10, i64 203
  %9848 = add i64 %9819, %.v411
  store i64 %9848, i64* %3, align 8
  br i1 %9847, label %block_41c7fe, label %block_.L_41c8bf

block_41c7fe:                                     ; preds = %block_.L_41c7f4
  %9849 = add i64 %9820, -40
  %9850 = add i64 %9848, 3
  store i64 %9850, i64* %3, align 8
  %9851 = inttoptr i64 %9849 to i32*
  %9852 = load i32, i32* %9851, align 4
  %9853 = zext i32 %9852 to i64
  store i64 %9853, i64* %RAX.i82, align 8
  %9854 = add i64 %9820, -12
  %9855 = add i64 %9848, 6
  store i64 %9855, i64* %3, align 8
  %9856 = inttoptr i64 %9854 to i32*
  %9857 = load i32, i32* %9856, align 4
  %9858 = zext i32 %9857 to i64
  store i64 %9858, i64* %RCX.i776, align 8
  %9859 = add i64 %9848, 9
  store i64 %9859, i64* %3, align 8
  %9860 = load i32, i32* %9823, align 4
  %9861 = add i32 %9860, %9857
  %9862 = zext i32 %9861 to i64
  store i64 %9862, i64* %RCX.i776, align 8
  %9863 = lshr i32 %9861, 31
  %9864 = sub i32 %9852, %9861
  %9865 = icmp ult i32 %9852, %9861
  %9866 = zext i1 %9865 to i8
  store i8 %9866, i8* %14, align 1
  %9867 = and i32 %9864, 255
  %9868 = tail call i32 @llvm.ctpop.i32(i32 %9867)
  %9869 = trunc i32 %9868 to i8
  %9870 = and i8 %9869, 1
  %9871 = xor i8 %9870, 1
  store i8 %9871, i8* %21, align 1
  %9872 = xor i32 %9861, %9852
  %9873 = xor i32 %9872, %9864
  %9874 = lshr i32 %9873, 4
  %9875 = trunc i32 %9874 to i8
  %9876 = and i8 %9875, 1
  store i8 %9876, i8* %26, align 1
  %9877 = icmp eq i32 %9864, 0
  %9878 = zext i1 %9877 to i8
  store i8 %9878, i8* %29, align 1
  %9879 = lshr i32 %9864, 31
  %9880 = trunc i32 %9879 to i8
  store i8 %9880, i8* %32, align 1
  %9881 = lshr i32 %9852, 31
  %9882 = xor i32 %9863, %9881
  %9883 = xor i32 %9879, %9881
  %9884 = add nuw nsw i32 %9883, %9882
  %9885 = icmp eq i32 %9884, 2
  %9886 = zext i1 %9885 to i8
  store i8 %9886, i8* %38, align 1
  %9887 = icmp ne i8 %9880, 0
  %9888 = xor i1 %9887, %9885
  %.v415 = select i1 %9888, i64 17, i64 31
  %9889 = add i64 %9848, %.v415
  %9890 = add i64 %9889, 3
  store i64 %9890, i64* %3, align 8
  br i1 %9888, label %block_41c80f, label %block_.L_41c81d

block_41c80f:                                     ; preds = %block_41c7fe
  %9891 = load i32, i32* %9851, align 4
  %9892 = zext i32 %9891 to i64
  store i64 %9892, i64* %RAX.i82, align 8
  %9893 = add i64 %9820, -720
  %9894 = add i64 %9889, 9
  store i64 %9894, i64* %3, align 8
  %9895 = inttoptr i64 %9893 to i32*
  store i32 %9891, i32* %9895, align 4
  %9896 = load i64, i64* %3, align 8
  %9897 = add i64 %9896, 17
  store i64 %9897, i64* %3, align 8
  br label %block_.L_41c829

block_.L_41c81d:                                  ; preds = %block_41c7fe
  %9898 = load i32, i32* %9856, align 4
  %9899 = zext i32 %9898 to i64
  store i64 %9899, i64* %RAX.i82, align 8
  %9900 = add i64 %9889, 6
  store i64 %9900, i64* %3, align 8
  %9901 = load i32, i32* %9823, align 4
  %9902 = add i32 %9901, %9898
  %9903 = zext i32 %9902 to i64
  store i64 %9903, i64* %RAX.i82, align 8
  %9904 = icmp ult i32 %9902, %9898
  %9905 = icmp ult i32 %9902, %9901
  %9906 = or i1 %9904, %9905
  %9907 = zext i1 %9906 to i8
  store i8 %9907, i8* %14, align 1
  %9908 = and i32 %9902, 255
  %9909 = tail call i32 @llvm.ctpop.i32(i32 %9908)
  %9910 = trunc i32 %9909 to i8
  %9911 = and i8 %9910, 1
  %9912 = xor i8 %9911, 1
  store i8 %9912, i8* %21, align 1
  %9913 = xor i32 %9901, %9898
  %9914 = xor i32 %9913, %9902
  %9915 = lshr i32 %9914, 4
  %9916 = trunc i32 %9915 to i8
  %9917 = and i8 %9916, 1
  store i8 %9917, i8* %26, align 1
  %9918 = icmp eq i32 %9902, 0
  %9919 = zext i1 %9918 to i8
  store i8 %9919, i8* %29, align 1
  %9920 = lshr i32 %9902, 31
  %9921 = trunc i32 %9920 to i8
  store i8 %9921, i8* %32, align 1
  %9922 = lshr i32 %9898, 31
  %9923 = lshr i32 %9901, 31
  %9924 = xor i32 %9920, %9922
  %9925 = xor i32 %9920, %9923
  %9926 = add nuw nsw i32 %9924, %9925
  %9927 = icmp eq i32 %9926, 2
  %9928 = zext i1 %9927 to i8
  store i8 %9928, i8* %38, align 1
  %9929 = add i64 %9820, -720
  %9930 = add i64 %9889, 12
  store i64 %9930, i64* %3, align 8
  %9931 = inttoptr i64 %9929 to i32*
  store i32 %9902, i32* %9931, align 4
  %.pre382 = load i64, i64* %3, align 8
  br label %block_.L_41c829

block_.L_41c829:                                  ; preds = %block_.L_41c81d, %block_41c80f
  %9932 = phi i64 [ %.pre382, %block_.L_41c81d ], [ %9897, %block_41c80f ]
  %9933 = load i64, i64* %RBP.i, align 8
  %9934 = add i64 %9933, -720
  %9935 = add i64 %9932, 6
  store i64 %9935, i64* %3, align 8
  %9936 = inttoptr i64 %9934 to i32*
  %9937 = load i32, i32* %9936, align 4
  %9938 = zext i32 %9937 to i64
  store i64 %9938, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i776, align 8
  %9939 = sub i32 0, %9937
  %9940 = icmp ne i32 %9937, 0
  %9941 = zext i1 %9940 to i8
  store i8 %9941, i8* %14, align 1
  %9942 = and i32 %9939, 255
  %9943 = tail call i32 @llvm.ctpop.i32(i32 %9942)
  %9944 = trunc i32 %9943 to i8
  %9945 = and i8 %9944, 1
  %9946 = xor i8 %9945, 1
  store i8 %9946, i8* %21, align 1
  %9947 = xor i32 %9937, %9939
  %9948 = lshr i32 %9947, 4
  %9949 = trunc i32 %9948 to i8
  %9950 = and i8 %9949, 1
  store i8 %9950, i8* %26, align 1
  %9951 = icmp eq i32 %9937, 0
  %9952 = zext i1 %9951 to i8
  store i8 %9952, i8* %29, align 1
  %9953 = lshr i32 %9939, 31
  %9954 = trunc i32 %9953 to i8
  store i8 %9954, i8* %32, align 1
  %9955 = lshr i32 %9937, 31
  %9956 = add nuw nsw i32 %9953, %9955
  %9957 = icmp eq i32 %9956, 2
  %9958 = zext i1 %9957 to i8
  store i8 %9958, i8* %38, align 1
  %9959 = icmp ne i8 %9954, 0
  %9960 = xor i1 %9959, %9957
  %9961 = or i1 %9951, %9960
  %.v416 = select i1 %9961, i64 29, i64 16
  %9962 = add i64 %9932, %.v416
  store i64 %9962, i64* %3, align 8
  br i1 %9961, label %block_.L_41c846, label %block_41c839

block_41c839:                                     ; preds = %block_.L_41c829
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9963 = add i64 %9933, -724
  %9964 = add i64 %9962, 8
  store i64 %9964, i64* %3, align 8
  %9965 = inttoptr i64 %9963 to i32*
  store i32 0, i32* %9965, align 4
  %9966 = load i64, i64* %3, align 8
  %9967 = add i64 %9966, 60
  store i64 %9967, i64* %3, align 8
  br label %block_.L_41c87d

block_.L_41c846:                                  ; preds = %block_.L_41c829
  %9968 = add i64 %9933, -40
  %9969 = add i64 %9962, 3
  store i64 %9969, i64* %3, align 8
  %9970 = inttoptr i64 %9968 to i32*
  %9971 = load i32, i32* %9970, align 4
  %9972 = zext i32 %9971 to i64
  store i64 %9972, i64* %RAX.i82, align 8
  %9973 = add i64 %9933, -12
  %9974 = add i64 %9962, 6
  store i64 %9974, i64* %3, align 8
  %9975 = inttoptr i64 %9973 to i32*
  %9976 = load i32, i32* %9975, align 4
  %9977 = zext i32 %9976 to i64
  store i64 %9977, i64* %RCX.i776, align 8
  %9978 = add i64 %9933, -32
  %9979 = add i64 %9962, 9
  store i64 %9979, i64* %3, align 8
  %9980 = inttoptr i64 %9978 to i32*
  %9981 = load i32, i32* %9980, align 4
  %9982 = add i32 %9981, %9976
  %9983 = zext i32 %9982 to i64
  store i64 %9983, i64* %RCX.i776, align 8
  %9984 = lshr i32 %9982, 31
  %9985 = sub i32 %9971, %9982
  %9986 = icmp ult i32 %9971, %9982
  %9987 = zext i1 %9986 to i8
  store i8 %9987, i8* %14, align 1
  %9988 = and i32 %9985, 255
  %9989 = tail call i32 @llvm.ctpop.i32(i32 %9988)
  %9990 = trunc i32 %9989 to i8
  %9991 = and i8 %9990, 1
  %9992 = xor i8 %9991, 1
  store i8 %9992, i8* %21, align 1
  %9993 = xor i32 %9982, %9971
  %9994 = xor i32 %9993, %9985
  %9995 = lshr i32 %9994, 4
  %9996 = trunc i32 %9995 to i8
  %9997 = and i8 %9996, 1
  store i8 %9997, i8* %26, align 1
  %9998 = icmp eq i32 %9985, 0
  %9999 = zext i1 %9998 to i8
  store i8 %9999, i8* %29, align 1
  %10000 = lshr i32 %9985, 31
  %10001 = trunc i32 %10000 to i8
  store i8 %10001, i8* %32, align 1
  %10002 = lshr i32 %9971, 31
  %10003 = xor i32 %9984, %10002
  %10004 = xor i32 %10000, %10002
  %10005 = add nuw nsw i32 %10004, %10003
  %10006 = icmp eq i32 %10005, 2
  %10007 = zext i1 %10006 to i8
  store i8 %10007, i8* %38, align 1
  %10008 = icmp ne i8 %10001, 0
  %10009 = xor i1 %10008, %10006
  %.v417 = select i1 %10009, i64 17, i64 31
  %10010 = add i64 %9962, %.v417
  %10011 = add i64 %10010, 3
  store i64 %10011, i64* %3, align 8
  br i1 %10009, label %block_41c857, label %block_.L_41c865

block_41c857:                                     ; preds = %block_.L_41c846
  %10012 = load i32, i32* %9970, align 4
  %10013 = zext i32 %10012 to i64
  store i64 %10013, i64* %RAX.i82, align 8
  %10014 = add i64 %9933, -728
  %10015 = add i64 %10010, 9
  store i64 %10015, i64* %3, align 8
  %10016 = inttoptr i64 %10014 to i32*
  store i32 %10012, i32* %10016, align 4
  %10017 = load i64, i64* %3, align 8
  %10018 = add i64 %10017, 17
  store i64 %10018, i64* %3, align 8
  br label %block_.L_41c871

block_.L_41c865:                                  ; preds = %block_.L_41c846
  %10019 = load i32, i32* %9975, align 4
  %10020 = zext i32 %10019 to i64
  store i64 %10020, i64* %RAX.i82, align 8
  %10021 = add i64 %10010, 6
  store i64 %10021, i64* %3, align 8
  %10022 = load i32, i32* %9980, align 4
  %10023 = add i32 %10022, %10019
  %10024 = zext i32 %10023 to i64
  store i64 %10024, i64* %RAX.i82, align 8
  %10025 = icmp ult i32 %10023, %10019
  %10026 = icmp ult i32 %10023, %10022
  %10027 = or i1 %10025, %10026
  %10028 = zext i1 %10027 to i8
  store i8 %10028, i8* %14, align 1
  %10029 = and i32 %10023, 255
  %10030 = tail call i32 @llvm.ctpop.i32(i32 %10029)
  %10031 = trunc i32 %10030 to i8
  %10032 = and i8 %10031, 1
  %10033 = xor i8 %10032, 1
  store i8 %10033, i8* %21, align 1
  %10034 = xor i32 %10022, %10019
  %10035 = xor i32 %10034, %10023
  %10036 = lshr i32 %10035, 4
  %10037 = trunc i32 %10036 to i8
  %10038 = and i8 %10037, 1
  store i8 %10038, i8* %26, align 1
  %10039 = icmp eq i32 %10023, 0
  %10040 = zext i1 %10039 to i8
  store i8 %10040, i8* %29, align 1
  %10041 = lshr i32 %10023, 31
  %10042 = trunc i32 %10041 to i8
  store i8 %10042, i8* %32, align 1
  %10043 = lshr i32 %10019, 31
  %10044 = lshr i32 %10022, 31
  %10045 = xor i32 %10041, %10043
  %10046 = xor i32 %10041, %10044
  %10047 = add nuw nsw i32 %10045, %10046
  %10048 = icmp eq i32 %10047, 2
  %10049 = zext i1 %10048 to i8
  store i8 %10049, i8* %38, align 1
  %10050 = add i64 %9933, -728
  %10051 = add i64 %10010, 12
  store i64 %10051, i64* %3, align 8
  %10052 = inttoptr i64 %10050 to i32*
  store i32 %10023, i32* %10052, align 4
  %.pre383 = load i64, i64* %3, align 8
  br label %block_.L_41c871

block_.L_41c871:                                  ; preds = %block_.L_41c865, %block_41c857
  %10053 = phi i64 [ %.pre383, %block_.L_41c865 ], [ %10018, %block_41c857 ]
  %10054 = load i64, i64* %RBP.i, align 8
  %10055 = add i64 %10054, -728
  %10056 = add i64 %10053, 6
  store i64 %10056, i64* %3, align 8
  %10057 = inttoptr i64 %10055 to i32*
  %10058 = load i32, i32* %10057, align 4
  %10059 = zext i32 %10058 to i64
  store i64 %10059, i64* %RAX.i82, align 8
  %10060 = add i64 %10054, -724
  %10061 = add i64 %10053, 12
  store i64 %10061, i64* %3, align 8
  %10062 = inttoptr i64 %10060 to i32*
  store i32 %10058, i32* %10062, align 4
  %.pre384 = load i64, i64* %3, align 8
  br label %block_.L_41c87d

block_.L_41c87d:                                  ; preds = %block_.L_41c871, %block_41c839
  %10063 = phi i64 [ %.pre384, %block_.L_41c871 ], [ %9967, %block_41c839 ]
  %10064 = load i64, i64* %RBP.i, align 8
  %10065 = add i64 %10064, -724
  %10066 = add i64 %10063, 6
  store i64 %10066, i64* %3, align 8
  %10067 = inttoptr i64 %10065 to i32*
  %10068 = load i32, i32* %10067, align 4
  %10069 = zext i32 %10068 to i64
  store i64 %10069, i64* %RAX.i82, align 8
  %10070 = add i64 %10064, -60
  %10071 = add i64 %10063, 9
  store i64 %10071, i64* %3, align 8
  %10072 = inttoptr i64 %10070 to i32*
  store i32 %10068, i32* %10072, align 4
  %10073 = load i64, i64* %RBP.i, align 8
  %10074 = add i64 %10073, -8
  %10075 = load i64, i64* %3, align 8
  %10076 = add i64 %10075, 4
  store i64 %10076, i64* %3, align 8
  %10077 = inttoptr i64 %10074 to i64*
  %10078 = load i64, i64* %10077, align 8
  store i64 %10078, i64* %RCX.i776, align 8
  %10079 = add i64 %10073, -60
  %10080 = add i64 %10075, 8
  store i64 %10080, i64* %3, align 8
  %10081 = inttoptr i64 %10079 to i32*
  %10082 = load i32, i32* %10081, align 4
  %10083 = sext i32 %10082 to i64
  store i64 %10083, i64* %RDX.i532, align 8
  %10084 = shl nsw i64 %10083, 3
  %10085 = add i64 %10084, %10078
  %10086 = add i64 %10075, 12
  store i64 %10086, i64* %3, align 8
  %10087 = inttoptr i64 %10085 to i64*
  %10088 = load i64, i64* %10087, align 8
  store i64 %10088, i64* %RCX.i776, align 8
  %10089 = add i64 %10073, -56
  %10090 = add i64 %10075, 16
  store i64 %10090, i64* %3, align 8
  %10091 = inttoptr i64 %10089 to i32*
  %10092 = load i32, i32* %10091, align 4
  %10093 = sext i32 %10092 to i64
  store i64 %10093, i64* %RDX.i532, align 8
  %10094 = shl nsw i64 %10093, 1
  %10095 = add i64 %10094, %10088
  %10096 = add i64 %10075, 20
  store i64 %10096, i64* %3, align 8
  %10097 = inttoptr i64 %10095 to i16*
  %10098 = load i16, i16* %10097, align 2
  %10099 = zext i16 %10098 to i64
  store i64 %10099, i64* %RAX.i82, align 8
  %10100 = add i64 %10073, -32
  %10101 = add i64 %10075, 23
  store i64 %10101, i64* %3, align 8
  %10102 = inttoptr i64 %10100 to i32*
  %10103 = load i32, i32* %10102, align 4
  %10104 = add i32 %10103, 2
  %10105 = zext i32 %10104 to i64
  store i64 %10105, i64* %RSI.i1183, align 8
  %10106 = icmp ugt i32 %10103, -3
  %10107 = zext i1 %10106 to i8
  store i8 %10107, i8* %14, align 1
  %10108 = and i32 %10104, 255
  %10109 = tail call i32 @llvm.ctpop.i32(i32 %10108)
  %10110 = trunc i32 %10109 to i8
  %10111 = and i8 %10110, 1
  %10112 = xor i8 %10111, 1
  store i8 %10112, i8* %21, align 1
  %10113 = xor i32 %10104, %10103
  %10114 = lshr i32 %10113, 4
  %10115 = trunc i32 %10114 to i8
  %10116 = and i8 %10115, 1
  store i8 %10116, i8* %26, align 1
  %10117 = icmp eq i32 %10104, 0
  %10118 = zext i1 %10117 to i8
  store i8 %10118, i8* %29, align 1
  %10119 = lshr i32 %10104, 31
  %10120 = trunc i32 %10119 to i8
  store i8 %10120, i8* %32, align 1
  %10121 = lshr i32 %10103, 31
  %10122 = xor i32 %10119, %10121
  %10123 = add nuw nsw i32 %10122, %10119
  %10124 = icmp eq i32 %10123, 2
  %10125 = zext i1 %10124 to i8
  store i8 %10125, i8* %38, align 1
  %10126 = sext i32 %10104 to i64
  store i64 %10126, i64* %RCX.i776, align 8
  %10127 = shl nsw i64 %10126, 2
  %10128 = add nsw i64 %10127, 4950704
  %10129 = add i64 %10075, 37
  store i64 %10129, i64* %3, align 8
  %10130 = inttoptr i64 %10128 to i32*
  %10131 = load i32, i32* %10130, align 4
  %10132 = sext i32 %10131 to i64
  %10133 = mul nsw i64 %10132, %10099
  %10134 = trunc i64 %10133 to i32
  %10135 = and i64 %10133, 4294967295
  store i64 %10135, i64* %RAX.i82, align 8
  %10136 = shl i64 %10133, 32
  %10137 = ashr exact i64 %10136, 32
  %10138 = icmp ne i64 %10137, %10133
  %10139 = zext i1 %10138 to i8
  store i8 %10139, i8* %14, align 1
  %10140 = and i32 %10134, 255
  %10141 = tail call i32 @llvm.ctpop.i32(i32 %10140)
  %10142 = trunc i32 %10141 to i8
  %10143 = and i8 %10142, 1
  %10144 = xor i8 %10143, 1
  store i8 %10144, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %10145 = lshr i32 %10134, 31
  %10146 = trunc i32 %10145 to i8
  store i8 %10146, i8* %32, align 1
  store i8 %10139, i8* %38, align 1
  %10147 = load i64, i64* %RBP.i, align 8
  %10148 = add i64 %10147, -44
  %10149 = add i64 %10075, 40
  store i64 %10149, i64* %3, align 8
  %10150 = trunc i64 %10133 to i32
  %10151 = inttoptr i64 %10148 to i32*
  %10152 = load i32, i32* %10151, align 4
  %10153 = add i32 %10152, %10150
  %10154 = zext i32 %10153 to i64
  store i64 %10154, i64* %RAX.i82, align 8
  %10155 = icmp ult i32 %10153, %10150
  %10156 = icmp ult i32 %10153, %10152
  %10157 = or i1 %10155, %10156
  %10158 = zext i1 %10157 to i8
  store i8 %10158, i8* %14, align 1
  %10159 = and i32 %10153, 255
  %10160 = tail call i32 @llvm.ctpop.i32(i32 %10159)
  %10161 = trunc i32 %10160 to i8
  %10162 = and i8 %10161, 1
  %10163 = xor i8 %10162, 1
  store i8 %10163, i8* %21, align 1
  %10164 = xor i32 %10152, %10150
  %10165 = xor i32 %10164, %10153
  %10166 = lshr i32 %10165, 4
  %10167 = trunc i32 %10166 to i8
  %10168 = and i8 %10167, 1
  store i8 %10168, i8* %26, align 1
  %10169 = icmp eq i32 %10153, 0
  %10170 = zext i1 %10169 to i8
  store i8 %10170, i8* %29, align 1
  %10171 = lshr i32 %10153, 31
  %10172 = trunc i32 %10171 to i8
  store i8 %10172, i8* %32, align 1
  %10173 = lshr i32 %10150, 31
  %10174 = lshr i32 %10152, 31
  %10175 = xor i32 %10171, %10173
  %10176 = xor i32 %10171, %10174
  %10177 = add nuw nsw i32 %10175, %10176
  %10178 = icmp eq i32 %10177, 2
  %10179 = zext i1 %10178 to i8
  store i8 %10179, i8* %38, align 1
  %10180 = add i64 %10075, 43
  store i64 %10180, i64* %3, align 8
  store i32 %10153, i32* %10151, align 4
  %10181 = load i64, i64* %RBP.i, align 8
  %10182 = add i64 %10181, -32
  %10183 = load i64, i64* %3, align 8
  %10184 = add i64 %10183, 3
  store i64 %10184, i64* %3, align 8
  %10185 = inttoptr i64 %10182 to i32*
  %10186 = load i32, i32* %10185, align 4
  %10187 = add i32 %10186, 1
  %10188 = zext i32 %10187 to i64
  store i64 %10188, i64* %RAX.i82, align 8
  %10189 = icmp eq i32 %10186, -1
  %10190 = icmp eq i32 %10187, 0
  %10191 = or i1 %10189, %10190
  %10192 = zext i1 %10191 to i8
  store i8 %10192, i8* %14, align 1
  %10193 = and i32 %10187, 255
  %10194 = tail call i32 @llvm.ctpop.i32(i32 %10193)
  %10195 = trunc i32 %10194 to i8
  %10196 = and i8 %10195, 1
  %10197 = xor i8 %10196, 1
  store i8 %10197, i8* %21, align 1
  %10198 = xor i32 %10187, %10186
  %10199 = lshr i32 %10198, 4
  %10200 = trunc i32 %10199 to i8
  %10201 = and i8 %10200, 1
  store i8 %10201, i8* %26, align 1
  %10202 = zext i1 %10190 to i8
  store i8 %10202, i8* %29, align 1
  %10203 = lshr i32 %10187, 31
  %10204 = trunc i32 %10203 to i8
  store i8 %10204, i8* %32, align 1
  %10205 = lshr i32 %10186, 31
  %10206 = xor i32 %10203, %10205
  %10207 = add nuw nsw i32 %10206, %10203
  %10208 = icmp eq i32 %10207, 2
  %10209 = zext i1 %10208 to i8
  store i8 %10209, i8* %38, align 1
  %10210 = add i64 %10183, 9
  store i64 %10210, i64* %3, align 8
  store i32 %10187, i32* %10185, align 4
  %10211 = load i64, i64* %3, align 8
  %10212 = add i64 %10211, -198
  store i64 %10212, i64* %3, align 8
  br label %block_.L_41c7f4

block_.L_41c8bf:                                  ; preds = %block_.L_41c7f4
  store i64 32, i64* %RAX.i82, align 8
  %10213 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10213, i64* %RCX.i776, align 8
  %10214 = add i64 %10213, 72684
  %10215 = add i64 %9848, 19
  store i64 %10215, i64* %3, align 8
  %10216 = inttoptr i64 %10214 to i32*
  %10217 = load i32, i32* %10216, align 4
  %10218 = zext i32 %10217 to i64
  store i64 %10218, i64* %RDX.i532, align 8
  %10219 = add i64 %9820, -44
  %10220 = add i64 %9848, 22
  store i64 %10220, i64* %3, align 8
  %10221 = inttoptr i64 %10219 to i32*
  %10222 = load i32, i32* %10221, align 4
  %10223 = add i32 %10222, 16
  %10224 = zext i32 %10223 to i64
  store i64 %10224, i64* %RSI.i1183, align 8
  %10225 = icmp ugt i32 %10222, -17
  %10226 = zext i1 %10225 to i8
  store i8 %10226, i8* %14, align 1
  %10227 = and i32 %10223, 255
  %10228 = tail call i32 @llvm.ctpop.i32(i32 %10227)
  %10229 = trunc i32 %10228 to i8
  %10230 = and i8 %10229, 1
  %10231 = xor i8 %10230, 1
  store i8 %10231, i8* %21, align 1
  %10232 = xor i32 %10222, 16
  %10233 = xor i32 %10232, %10223
  %10234 = lshr i32 %10233, 4
  %10235 = trunc i32 %10234 to i8
  %10236 = and i8 %10235, 1
  store i8 %10236, i8* %26, align 1
  %10237 = icmp eq i32 %10223, 0
  %10238 = zext i1 %10237 to i8
  store i8 %10238, i8* %29, align 1
  %10239 = lshr i32 %10223, 31
  %10240 = trunc i32 %10239 to i8
  store i8 %10240, i8* %32, align 1
  %10241 = lshr i32 %10222, 31
  %10242 = xor i32 %10239, %10241
  %10243 = add nuw nsw i32 %10242, %10239
  %10244 = icmp eq i32 %10243, 2
  %10245 = zext i1 %10244 to i8
  store i8 %10245, i8* %38, align 1
  %10246 = add i64 %9820, -732
  %10247 = add i64 %9848, 31
  store i64 %10247, i64* %3, align 8
  %10248 = inttoptr i64 %10246 to i32*
  store i32 32, i32* %10248, align 4
  %10249 = load i32, i32* %ESI.i168, align 4
  %10250 = zext i32 %10249 to i64
  %10251 = load i64, i64* %3, align 8
  store i64 %10250, i64* %RAX.i82, align 8
  %10252 = load i64, i64* %RBP.i, align 8
  %10253 = add i64 %10252, -736
  %10254 = load i32, i32* %EDX.i443, align 4
  %10255 = add i64 %10251, 8
  store i64 %10255, i64* %3, align 8
  %10256 = inttoptr i64 %10253 to i32*
  store i32 %10254, i32* %10256, align 4
  %10257 = load i64, i64* %3, align 8
  %10258 = load i32, i32* %EAX.i1056, align 8
  %10259 = sext i32 %10258 to i64
  %10260 = lshr i64 %10259, 32
  store i64 %10260, i64* %141, align 8
  %10261 = load i64, i64* %RBP.i, align 8
  %10262 = add i64 %10261, -732
  %10263 = add i64 %10257, 7
  store i64 %10263, i64* %3, align 8
  %10264 = inttoptr i64 %10262 to i32*
  %10265 = load i32, i32* %10264, align 4
  %10266 = zext i32 %10265 to i64
  store i64 %10266, i64* %RSI.i1183, align 8
  %10267 = add i64 %10257, 9
  store i64 %10267, i64* %3, align 8
  %10268 = zext i32 %10258 to i64
  %10269 = sext i32 %10265 to i64
  %10270 = shl nuw i64 %10260, 32
  %10271 = or i64 %10270, %10268
  %10272 = sdiv i64 %10271, %10269
  %10273 = shl i64 %10272, 32
  %10274 = ashr exact i64 %10273, 32
  %10275 = icmp eq i64 %10272, %10274
  br i1 %10275, label %10278, label %10276

; <label>:10276:                                  ; preds = %block_.L_41c8bf
  %10277 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10267, %struct.Memory* %MEMORY.92)
  %.pre363 = load i64, i64* %RBP.i, align 8
  %.pre364 = load i64, i64* %3, align 8
  %.pre365 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit166

; <label>:10278:                                  ; preds = %block_.L_41c8bf
  %10279 = srem i64 %10271, %10269
  %10280 = and i64 %10272, 4294967295
  store i64 %10280, i64* %RAX.i82, align 8
  %10281 = and i64 %10279, 4294967295
  store i64 %10281, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %10282 = trunc i64 %10272 to i32
  br label %routine_idivl__esi.exit166

routine_idivl__esi.exit166:                       ; preds = %10278, %10276
  %10283 = phi i32 [ %.pre365, %10276 ], [ %10282, %10278 ]
  %10284 = phi i64 [ %.pre364, %10276 ], [ %10267, %10278 ]
  %10285 = phi i64 [ %.pre363, %10276 ], [ %10261, %10278 ]
  %10286 = phi %struct.Memory* [ %10277, %10276 ], [ %MEMORY.92, %10278 ]
  %10287 = add i64 %10285, -736
  %10288 = add i64 %10284, 6
  store i64 %10288, i64* %3, align 8
  %10289 = inttoptr i64 %10287 to i32*
  %10290 = load i32, i32* %10289, align 4
  %10291 = zext i32 %10290 to i64
  store i64 %10291, i64* %RDI.i129, align 8
  %10292 = sub i32 %10290, %10283
  %10293 = icmp ult i32 %10290, %10283
  %10294 = zext i1 %10293 to i8
  store i8 %10294, i8* %14, align 1
  %10295 = and i32 %10292, 255
  %10296 = tail call i32 @llvm.ctpop.i32(i32 %10295)
  %10297 = trunc i32 %10296 to i8
  %10298 = and i8 %10297, 1
  %10299 = xor i8 %10298, 1
  store i8 %10299, i8* %21, align 1
  %10300 = xor i32 %10283, %10290
  %10301 = xor i32 %10300, %10292
  %10302 = lshr i32 %10301, 4
  %10303 = trunc i32 %10302 to i8
  %10304 = and i8 %10303, 1
  store i8 %10304, i8* %26, align 1
  %10305 = icmp eq i32 %10292, 0
  %10306 = zext i1 %10305 to i8
  store i8 %10306, i8* %29, align 1
  %10307 = lshr i32 %10292, 31
  %10308 = trunc i32 %10307 to i8
  store i8 %10308, i8* %32, align 1
  %10309 = lshr i32 %10290, 31
  %10310 = lshr i32 %10283, 31
  %10311 = xor i32 %10310, %10309
  %10312 = xor i32 %10307, %10309
  %10313 = add nuw nsw i32 %10312, %10311
  %10314 = icmp eq i32 %10313, 2
  %10315 = zext i1 %10314 to i8
  store i8 %10315, i8* %38, align 1
  %10316 = icmp ne i8 %10308, 0
  %10317 = xor i1 %10316, %10314
  %.v412 = select i1 %10317, i64 14, i64 39
  %10318 = add i64 %10284, %.v412
  store i64 %10318, i64* %3, align 8
  br i1 %10317, label %block_41c8fd, label %block_.L_41c916

block_41c8fd:                                     ; preds = %routine_idivl__esi.exit166
  %10319 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10319, i64* %RAX.i82, align 8
  %10320 = add i64 %10319, 72684
  %10321 = add i64 %10318, 14
  store i64 %10321, i64* %3, align 8
  %10322 = inttoptr i64 %10320 to i32*
  %10323 = load i32, i32* %10322, align 4
  %10324 = zext i32 %10323 to i64
  store i64 %10324, i64* %RCX.i776, align 8
  %10325 = add i64 %10285, -740
  %10326 = add i64 %10318, 20
  store i64 %10326, i64* %3, align 8
  %10327 = inttoptr i64 %10325 to i32*
  store i32 %10323, i32* %10327, align 4
  %10328 = load i64, i64* %3, align 8
  %10329 = add i64 %10328, 39
  store i64 %10329, i64* %3, align 8
  br label %block_.L_41c938

block_.L_41c916:                                  ; preds = %routine_idivl__esi.exit166
  store i64 32, i64* %RAX.i82, align 8
  %10330 = add i64 %10285, -44
  %10331 = add i64 %10318, 8
  store i64 %10331, i64* %3, align 8
  %10332 = inttoptr i64 %10330 to i32*
  %10333 = load i32, i32* %10332, align 4
  %10334 = add i32 %10333, 16
  %10335 = zext i32 %10334 to i64
  store i64 %10335, i64* %RCX.i776, align 8
  %10336 = icmp ugt i32 %10333, -17
  %10337 = zext i1 %10336 to i8
  store i8 %10337, i8* %14, align 1
  %10338 = and i32 %10334, 255
  %10339 = tail call i32 @llvm.ctpop.i32(i32 %10338)
  %10340 = trunc i32 %10339 to i8
  %10341 = and i8 %10340, 1
  %10342 = xor i8 %10341, 1
  store i8 %10342, i8* %21, align 1
  %10343 = xor i32 %10333, 16
  %10344 = xor i32 %10343, %10334
  %10345 = lshr i32 %10344, 4
  %10346 = trunc i32 %10345 to i8
  %10347 = and i8 %10346, 1
  store i8 %10347, i8* %26, align 1
  %10348 = icmp eq i32 %10334, 0
  %10349 = zext i1 %10348 to i8
  store i8 %10349, i8* %29, align 1
  %10350 = lshr i32 %10334, 31
  %10351 = trunc i32 %10350 to i8
  store i8 %10351, i8* %32, align 1
  %10352 = lshr i32 %10333, 31
  %10353 = xor i32 %10350, %10352
  %10354 = add nuw nsw i32 %10353, %10350
  %10355 = icmp eq i32 %10354, 2
  %10356 = zext i1 %10355 to i8
  store i8 %10356, i8* %38, align 1
  %10357 = add i64 %10285, -744
  %10358 = add i64 %10318, 17
  store i64 %10358, i64* %3, align 8
  %10359 = inttoptr i64 %10357 to i32*
  store i32 32, i32* %10359, align 4
  %10360 = load i32, i32* %ECX.i775, align 4
  %10361 = zext i32 %10360 to i64
  %10362 = load i64, i64* %3, align 8
  store i64 %10361, i64* %RAX.i82, align 8
  %10363 = sext i32 %10360 to i64
  %10364 = lshr i64 %10363, 32
  store i64 %10364, i64* %141, align 8
  %10365 = load i64, i64* %RBP.i, align 8
  %10366 = add i64 %10365, -744
  %10367 = add i64 %10362, 9
  store i64 %10367, i64* %3, align 8
  %10368 = inttoptr i64 %10366 to i32*
  %10369 = load i32, i32* %10368, align 4
  %10370 = zext i32 %10369 to i64
  store i64 %10370, i64* %RCX.i776, align 8
  %10371 = add i64 %10362, 11
  store i64 %10371, i64* %3, align 8
  %10372 = sext i32 %10369 to i64
  %10373 = shl nuw i64 %10364, 32
  %10374 = or i64 %10373, %10361
  %10375 = sdiv i64 %10374, %10372
  %10376 = shl i64 %10375, 32
  %10377 = ashr exact i64 %10376, 32
  %10378 = icmp eq i64 %10375, %10377
  br i1 %10378, label %10381, label %10379

; <label>:10379:                                  ; preds = %block_.L_41c916
  %10380 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10371, %struct.Memory* %10286)
  %.pre366 = load i64, i64* %RBP.i, align 8
  %.pre367 = load i32, i32* %EAX.i1056, align 4
  %.pre368 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit127

; <label>:10381:                                  ; preds = %block_.L_41c916
  %10382 = srem i64 %10374, %10372
  %10383 = and i64 %10375, 4294967295
  store i64 %10383, i64* %RAX.i82, align 8
  %10384 = and i64 %10382, 4294967295
  store i64 %10384, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %10385 = trunc i64 %10375 to i32
  br label %routine_idivl__ecx.exit127

routine_idivl__ecx.exit127:                       ; preds = %10381, %10379
  %10386 = phi i64 [ %.pre368, %10379 ], [ %10371, %10381 ]
  %10387 = phi i32 [ %.pre367, %10379 ], [ %10385, %10381 ]
  %10388 = phi i64 [ %.pre366, %10379 ], [ %10365, %10381 ]
  %10389 = phi %struct.Memory* [ %10380, %10379 ], [ %10286, %10381 ]
  %10390 = add i64 %10388, -740
  %10391 = add i64 %10386, 6
  store i64 %10391, i64* %3, align 8
  %10392 = inttoptr i64 %10390 to i32*
  store i32 %10387, i32* %10392, align 4
  %.pre369 = load i64, i64* %3, align 8
  br label %block_.L_41c938

block_.L_41c938:                                  ; preds = %routine_idivl__ecx.exit127, %block_41c8fd
  %10393 = phi i64 [ %.pre369, %routine_idivl__ecx.exit127 ], [ %10329, %block_41c8fd ]
  %MEMORY.101 = phi %struct.Memory* [ %10389, %routine_idivl__ecx.exit127 ], [ %10286, %block_41c8fd ]
  %10394 = load i64, i64* %RBP.i, align 8
  %10395 = add i64 %10394, -740
  %10396 = add i64 %10393, 6
  store i64 %10396, i64* %3, align 8
  %10397 = inttoptr i64 %10395 to i32*
  %10398 = load i32, i32* %10397, align 4
  %10399 = zext i32 %10398 to i64
  store i64 %10399, i64* %RAX.i82, align 8
  store i64 0, i64* %RCX.i776, align 8
  %10400 = sub i32 0, %10398
  %10401 = icmp ne i32 %10398, 0
  %10402 = zext i1 %10401 to i8
  store i8 %10402, i8* %14, align 1
  %10403 = and i32 %10400, 255
  %10404 = tail call i32 @llvm.ctpop.i32(i32 %10403)
  %10405 = trunc i32 %10404 to i8
  %10406 = and i8 %10405, 1
  %10407 = xor i8 %10406, 1
  store i8 %10407, i8* %21, align 1
  %10408 = xor i32 %10398, %10400
  %10409 = lshr i32 %10408, 4
  %10410 = trunc i32 %10409 to i8
  %10411 = and i8 %10410, 1
  store i8 %10411, i8* %26, align 1
  %10412 = icmp eq i32 %10398, 0
  %10413 = zext i1 %10412 to i8
  store i8 %10413, i8* %29, align 1
  %10414 = lshr i32 %10400, 31
  %10415 = trunc i32 %10414 to i8
  store i8 %10415, i8* %32, align 1
  %10416 = lshr i32 %10398, 31
  %10417 = add nuw nsw i32 %10414, %10416
  %10418 = icmp eq i32 %10417, 2
  %10419 = zext i1 %10418 to i8
  store i8 %10419, i8* %38, align 1
  %10420 = icmp ne i8 %10415, 0
  %10421 = xor i1 %10420, %10418
  %10422 = or i1 %10412, %10421
  %.v413 = select i1 %10422, i64 29, i64 16
  %10423 = add i64 %10393, %.v413
  store i64 %10423, i64* %3, align 8
  br i1 %10422, label %block_.L_41c955, label %block_41c948

block_41c948:                                     ; preds = %block_.L_41c938
  store i64 0, i64* %RAX.i82, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %10424 = add i64 %10394, -748
  %10425 = add i64 %10423, 8
  store i64 %10425, i64* %3, align 8
  %10426 = inttoptr i64 %10424 to i32*
  store i32 0, i32* %10426, align 4
  %10427 = load i64, i64* %3, align 8
  %10428 = add i64 %10427, 138
  store i64 %10428, i64* %3, align 8
  br label %block_.L_41c9da

block_.L_41c955:                                  ; preds = %block_.L_41c938
  store i64 32, i64* %RAX.i82, align 8
  %10429 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10429, i64* %RCX.i776, align 8
  %10430 = add i64 %10429, 72684
  %10431 = add i64 %10423, 19
  store i64 %10431, i64* %3, align 8
  %10432 = inttoptr i64 %10430 to i32*
  %10433 = load i32, i32* %10432, align 4
  %10434 = zext i32 %10433 to i64
  store i64 %10434, i64* %RDX.i532, align 8
  %10435 = add i64 %10394, -44
  %10436 = add i64 %10423, 22
  store i64 %10436, i64* %3, align 8
  %10437 = inttoptr i64 %10435 to i32*
  %10438 = load i32, i32* %10437, align 4
  %10439 = add i32 %10438, 16
  %10440 = zext i32 %10439 to i64
  store i64 %10440, i64* %RSI.i1183, align 8
  %10441 = icmp ugt i32 %10438, -17
  %10442 = zext i1 %10441 to i8
  store i8 %10442, i8* %14, align 1
  %10443 = and i32 %10439, 255
  %10444 = tail call i32 @llvm.ctpop.i32(i32 %10443)
  %10445 = trunc i32 %10444 to i8
  %10446 = and i8 %10445, 1
  %10447 = xor i8 %10446, 1
  store i8 %10447, i8* %21, align 1
  %10448 = xor i32 %10438, 16
  %10449 = xor i32 %10448, %10439
  %10450 = lshr i32 %10449, 4
  %10451 = trunc i32 %10450 to i8
  %10452 = and i8 %10451, 1
  store i8 %10452, i8* %26, align 1
  %10453 = icmp eq i32 %10439, 0
  %10454 = zext i1 %10453 to i8
  store i8 %10454, i8* %29, align 1
  %10455 = lshr i32 %10439, 31
  %10456 = trunc i32 %10455 to i8
  store i8 %10456, i8* %32, align 1
  %10457 = lshr i32 %10438, 31
  %10458 = xor i32 %10455, %10457
  %10459 = add nuw nsw i32 %10458, %10455
  %10460 = icmp eq i32 %10459, 2
  %10461 = zext i1 %10460 to i8
  store i8 %10461, i8* %38, align 1
  %10462 = add i64 %10394, -752
  %10463 = add i64 %10423, 31
  store i64 %10463, i64* %3, align 8
  %10464 = inttoptr i64 %10462 to i32*
  store i32 32, i32* %10464, align 4
  %10465 = load i32, i32* %ESI.i168, align 4
  %10466 = zext i32 %10465 to i64
  %10467 = load i64, i64* %3, align 8
  store i64 %10466, i64* %RAX.i82, align 8
  %10468 = load i64, i64* %RBP.i, align 8
  %10469 = add i64 %10468, -756
  %10470 = load i32, i32* %EDX.i443, align 4
  %10471 = add i64 %10467, 8
  store i64 %10471, i64* %3, align 8
  %10472 = inttoptr i64 %10469 to i32*
  store i32 %10470, i32* %10472, align 4
  %10473 = load i64, i64* %3, align 8
  %10474 = load i32, i32* %EAX.i1056, align 8
  %10475 = sext i32 %10474 to i64
  %10476 = lshr i64 %10475, 32
  store i64 %10476, i64* %141, align 8
  %10477 = load i64, i64* %RBP.i, align 8
  %10478 = add i64 %10477, -752
  %10479 = add i64 %10473, 7
  store i64 %10479, i64* %3, align 8
  %10480 = inttoptr i64 %10478 to i32*
  %10481 = load i32, i32* %10480, align 4
  %10482 = zext i32 %10481 to i64
  store i64 %10482, i64* %RSI.i1183, align 8
  %10483 = add i64 %10473, 9
  store i64 %10483, i64* %3, align 8
  %10484 = zext i32 %10474 to i64
  %10485 = sext i32 %10481 to i64
  %10486 = shl nuw i64 %10476, 32
  %10487 = or i64 %10486, %10484
  %10488 = sdiv i64 %10487, %10485
  %10489 = shl i64 %10488, 32
  %10490 = ashr exact i64 %10489, 32
  %10491 = icmp eq i64 %10488, %10490
  br i1 %10491, label %10494, label %10492

; <label>:10492:                                  ; preds = %block_.L_41c955
  %10493 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10483, %struct.Memory* %MEMORY.101)
  %.pre370 = load i64, i64* %RBP.i, align 8
  %.pre371 = load i64, i64* %3, align 8
  %.pre372 = load i32, i32* %EAX.i1056, align 4
  br label %routine_idivl__esi.exit

; <label>:10494:                                  ; preds = %block_.L_41c955
  %10495 = srem i64 %10487, %10485
  %10496 = and i64 %10488, 4294967295
  store i64 %10496, i64* %RAX.i82, align 8
  %10497 = and i64 %10495, 4294967295
  store i64 %10497, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %10498 = trunc i64 %10488 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %10494, %10492
  %10499 = phi i32 [ %.pre372, %10492 ], [ %10498, %10494 ]
  %10500 = phi i64 [ %.pre371, %10492 ], [ %10483, %10494 ]
  %10501 = phi i64 [ %.pre370, %10492 ], [ %10477, %10494 ]
  %10502 = phi %struct.Memory* [ %10493, %10492 ], [ %MEMORY.101, %10494 ]
  %10503 = add i64 %10501, -756
  %10504 = add i64 %10500, 6
  store i64 %10504, i64* %3, align 8
  %10505 = inttoptr i64 %10503 to i32*
  %10506 = load i32, i32* %10505, align 4
  %10507 = zext i32 %10506 to i64
  store i64 %10507, i64* %RDI.i129, align 8
  %10508 = sub i32 %10506, %10499
  %10509 = icmp ult i32 %10506, %10499
  %10510 = zext i1 %10509 to i8
  store i8 %10510, i8* %14, align 1
  %10511 = and i32 %10508, 255
  %10512 = tail call i32 @llvm.ctpop.i32(i32 %10511)
  %10513 = trunc i32 %10512 to i8
  %10514 = and i8 %10513, 1
  %10515 = xor i8 %10514, 1
  store i8 %10515, i8* %21, align 1
  %10516 = xor i32 %10499, %10506
  %10517 = xor i32 %10516, %10508
  %10518 = lshr i32 %10517, 4
  %10519 = trunc i32 %10518 to i8
  %10520 = and i8 %10519, 1
  store i8 %10520, i8* %26, align 1
  %10521 = icmp eq i32 %10508, 0
  %10522 = zext i1 %10521 to i8
  store i8 %10522, i8* %29, align 1
  %10523 = lshr i32 %10508, 31
  %10524 = trunc i32 %10523 to i8
  store i8 %10524, i8* %32, align 1
  %10525 = lshr i32 %10506, 31
  %10526 = lshr i32 %10499, 31
  %10527 = xor i32 %10526, %10525
  %10528 = xor i32 %10523, %10525
  %10529 = add nuw nsw i32 %10528, %10527
  %10530 = icmp eq i32 %10529, 2
  %10531 = zext i1 %10530 to i8
  store i8 %10531, i8* %38, align 1
  %10532 = icmp ne i8 %10524, 0
  %10533 = xor i1 %10532, %10530
  %.v414 = select i1 %10533, i64 14, i64 39
  %10534 = add i64 %10500, %.v414
  store i64 %10534, i64* %3, align 8
  br i1 %10533, label %block_41c993, label %block_.L_41c9ac

block_41c993:                                     ; preds = %routine_idivl__esi.exit
  %10535 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10535, i64* %RAX.i82, align 8
  %10536 = add i64 %10535, 72684
  %10537 = add i64 %10534, 14
  store i64 %10537, i64* %3, align 8
  %10538 = inttoptr i64 %10536 to i32*
  %10539 = load i32, i32* %10538, align 4
  %10540 = zext i32 %10539 to i64
  store i64 %10540, i64* %RCX.i776, align 8
  %10541 = add i64 %10501, -760
  %10542 = add i64 %10534, 20
  store i64 %10542, i64* %3, align 8
  %10543 = inttoptr i64 %10541 to i32*
  store i32 %10539, i32* %10543, align 4
  %10544 = load i64, i64* %3, align 8
  %10545 = add i64 %10544, 39
  store i64 %10545, i64* %3, align 8
  br label %block_.L_41c9ce

block_.L_41c9ac:                                  ; preds = %routine_idivl__esi.exit
  store i64 32, i64* %RAX.i82, align 8
  %10546 = add i64 %10501, -44
  %10547 = add i64 %10534, 8
  store i64 %10547, i64* %3, align 8
  %10548 = inttoptr i64 %10546 to i32*
  %10549 = load i32, i32* %10548, align 4
  %10550 = add i32 %10549, 16
  %10551 = zext i32 %10550 to i64
  store i64 %10551, i64* %RCX.i776, align 8
  %10552 = icmp ugt i32 %10549, -17
  %10553 = zext i1 %10552 to i8
  store i8 %10553, i8* %14, align 1
  %10554 = and i32 %10550, 255
  %10555 = tail call i32 @llvm.ctpop.i32(i32 %10554)
  %10556 = trunc i32 %10555 to i8
  %10557 = and i8 %10556, 1
  %10558 = xor i8 %10557, 1
  store i8 %10558, i8* %21, align 1
  %10559 = xor i32 %10549, 16
  %10560 = xor i32 %10559, %10550
  %10561 = lshr i32 %10560, 4
  %10562 = trunc i32 %10561 to i8
  %10563 = and i8 %10562, 1
  store i8 %10563, i8* %26, align 1
  %10564 = icmp eq i32 %10550, 0
  %10565 = zext i1 %10564 to i8
  store i8 %10565, i8* %29, align 1
  %10566 = lshr i32 %10550, 31
  %10567 = trunc i32 %10566 to i8
  store i8 %10567, i8* %32, align 1
  %10568 = lshr i32 %10549, 31
  %10569 = xor i32 %10566, %10568
  %10570 = add nuw nsw i32 %10569, %10566
  %10571 = icmp eq i32 %10570, 2
  %10572 = zext i1 %10571 to i8
  store i8 %10572, i8* %38, align 1
  %10573 = add i64 %10501, -764
  %10574 = add i64 %10534, 17
  store i64 %10574, i64* %3, align 8
  %10575 = inttoptr i64 %10573 to i32*
  store i32 32, i32* %10575, align 4
  %10576 = load i32, i32* %ECX.i775, align 4
  %10577 = zext i32 %10576 to i64
  %10578 = load i64, i64* %3, align 8
  store i64 %10577, i64* %RAX.i82, align 8
  %10579 = sext i32 %10576 to i64
  %10580 = lshr i64 %10579, 32
  store i64 %10580, i64* %141, align 8
  %10581 = load i64, i64* %RBP.i, align 8
  %10582 = add i64 %10581, -764
  %10583 = add i64 %10578, 9
  store i64 %10583, i64* %3, align 8
  %10584 = inttoptr i64 %10582 to i32*
  %10585 = load i32, i32* %10584, align 4
  %10586 = zext i32 %10585 to i64
  store i64 %10586, i64* %RCX.i776, align 8
  %10587 = add i64 %10578, 11
  store i64 %10587, i64* %3, align 8
  %10588 = sext i32 %10585 to i64
  %10589 = shl nuw i64 %10580, 32
  %10590 = or i64 %10589, %10577
  %10591 = sdiv i64 %10590, %10588
  %10592 = shl i64 %10591, 32
  %10593 = ashr exact i64 %10592, 32
  %10594 = icmp eq i64 %10591, %10593
  br i1 %10594, label %10597, label %10595

; <label>:10595:                                  ; preds = %block_.L_41c9ac
  %10596 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10587, %struct.Memory* %10502)
  %.pre373 = load i64, i64* %RBP.i, align 8
  %.pre374 = load i32, i32* %EAX.i1056, align 4
  %.pre375 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit46

; <label>:10597:                                  ; preds = %block_.L_41c9ac
  %10598 = srem i64 %10590, %10588
  %10599 = and i64 %10591, 4294967295
  store i64 %10599, i64* %RAX.i82, align 8
  %10600 = and i64 %10598, 4294967295
  store i64 %10600, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %10601 = trunc i64 %10591 to i32
  br label %routine_idivl__ecx.exit46

routine_idivl__ecx.exit46:                        ; preds = %10597, %10595
  %10602 = phi i64 [ %.pre375, %10595 ], [ %10587, %10597 ]
  %10603 = phi i32 [ %.pre374, %10595 ], [ %10601, %10597 ]
  %10604 = phi i64 [ %.pre373, %10595 ], [ %10581, %10597 ]
  %10605 = phi %struct.Memory* [ %10596, %10595 ], [ %10502, %10597 ]
  %10606 = add i64 %10604, -760
  %10607 = add i64 %10602, 6
  store i64 %10607, i64* %3, align 8
  %10608 = inttoptr i64 %10606 to i32*
  store i32 %10603, i32* %10608, align 4
  %.pre376 = load i64, i64* %3, align 8
  br label %block_.L_41c9ce

block_.L_41c9ce:                                  ; preds = %routine_idivl__ecx.exit46, %block_41c993
  %10609 = phi i64 [ %.pre376, %routine_idivl__ecx.exit46 ], [ %10545, %block_41c993 ]
  %MEMORY.102 = phi %struct.Memory* [ %10605, %routine_idivl__ecx.exit46 ], [ %10502, %block_41c993 ]
  %10610 = load i64, i64* %RBP.i, align 8
  %10611 = add i64 %10610, -760
  %10612 = add i64 %10609, 6
  store i64 %10612, i64* %3, align 8
  %10613 = inttoptr i64 %10611 to i32*
  %10614 = load i32, i32* %10613, align 4
  %10615 = zext i32 %10614 to i64
  store i64 %10615, i64* %RAX.i82, align 8
  %10616 = add i64 %10610, -748
  %10617 = add i64 %10609, 12
  store i64 %10617, i64* %3, align 8
  %10618 = inttoptr i64 %10616 to i32*
  store i32 %10614, i32* %10618, align 4
  %.pre377 = load i64, i64* %3, align 8
  br label %block_.L_41c9da

block_.L_41c9da:                                  ; preds = %block_.L_41c9ce, %block_41c948
  %10619 = phi i64 [ %.pre377, %block_.L_41c9ce ], [ %10428, %block_41c948 ]
  %MEMORY.103 = phi %struct.Memory* [ %MEMORY.102, %block_.L_41c9ce ], [ %MEMORY.101, %block_41c948 ]
  %10620 = load i64, i64* %RBP.i, align 8
  %10621 = add i64 %10620, -748
  %10622 = add i64 %10619, 6
  store i64 %10622, i64* %3, align 8
  %10623 = inttoptr i64 %10621 to i32*
  %10624 = load i32, i32* %10623, align 4
  %10625 = zext i32 %10624 to i64
  store i64 %10625, i64* %RAX.i82, align 8
  store i64 2, i64* %RCX.i776, align 8
  %10626 = add i64 %10620, -52
  %10627 = add i64 %10619, 14
  store i64 %10627, i64* %3, align 8
  %10628 = inttoptr i64 %10626 to i32*
  store i32 %10624, i32* %10628, align 4
  %10629 = load i64, i64* %RBP.i, align 8
  %10630 = add i64 %10629, -48
  %10631 = load i64, i64* %3, align 8
  %10632 = add i64 %10631, 3
  store i64 %10632, i64* %3, align 8
  %10633 = inttoptr i64 %10630 to i32*
  %10634 = load i32, i32* %10633, align 4
  %10635 = zext i32 %10634 to i64
  store i64 %10635, i64* %RAX.i82, align 8
  %10636 = add i64 %10629, -52
  %10637 = add i64 %10631, 6
  store i64 %10637, i64* %3, align 8
  %10638 = inttoptr i64 %10636 to i32*
  %10639 = load i32, i32* %10638, align 4
  %10640 = add i32 %10639, %10634
  %10641 = zext i32 %10640 to i64
  store i64 %10641, i64* %RAX.i82, align 8
  %10642 = icmp ult i32 %10640, %10634
  %10643 = icmp ult i32 %10640, %10639
  %10644 = or i1 %10642, %10643
  %10645 = zext i1 %10644 to i8
  store i8 %10645, i8* %14, align 1
  %10646 = and i32 %10640, 255
  %10647 = tail call i32 @llvm.ctpop.i32(i32 %10646)
  %10648 = trunc i32 %10647 to i8
  %10649 = and i8 %10648, 1
  %10650 = xor i8 %10649, 1
  store i8 %10650, i8* %21, align 1
  %10651 = xor i32 %10639, %10634
  %10652 = xor i32 %10651, %10640
  %10653 = lshr i32 %10652, 4
  %10654 = trunc i32 %10653 to i8
  %10655 = and i8 %10654, 1
  store i8 %10655, i8* %26, align 1
  %10656 = icmp eq i32 %10640, 0
  %10657 = zext i1 %10656 to i8
  store i8 %10657, i8* %29, align 1
  %10658 = lshr i32 %10640, 31
  %10659 = trunc i32 %10658 to i8
  store i8 %10659, i8* %32, align 1
  %10660 = lshr i32 %10634, 31
  %10661 = lshr i32 %10639, 31
  %10662 = xor i32 %10658, %10660
  %10663 = xor i32 %10658, %10661
  %10664 = add nuw nsw i32 %10662, %10663
  %10665 = icmp eq i32 %10664, 2
  %10666 = zext i1 %10665 to i8
  store i8 %10666, i8* %38, align 1
  %10667 = sext i32 %10640 to i64
  %10668 = lshr i64 %10667, 32
  store i64 %10668, i64* %141, align 8
  %10669 = load i32, i32* %ECX.i775, align 4
  %10670 = add i64 %10631, 9
  store i64 %10670, i64* %3, align 8
  %10671 = sext i32 %10669 to i64
  %10672 = shl nuw i64 %10668, 32
  %10673 = or i64 %10672, %10641
  %10674 = sdiv i64 %10673, %10671
  %10675 = shl i64 %10674, 32
  %10676 = ashr exact i64 %10675, 32
  %10677 = icmp eq i64 %10674, %10676
  br i1 %10677, label %10680, label %10678

; <label>:10678:                                  ; preds = %block_.L_41c9da
  %10679 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10670, %struct.Memory* %MEMORY.103)
  %.pre378 = load i64, i64* %RBP.i, align 8
  %.pre379 = load i32, i32* %EAX.i1056, align 4
  %.pre380 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit

; <label>:10680:                                  ; preds = %block_.L_41c9da
  %10681 = srem i64 %10673, %10671
  %10682 = and i64 %10674, 4294967295
  store i64 %10682, i64* %RAX.i82, align 8
  %10683 = and i64 %10681, 4294967295
  store i64 %10683, i64* %RDX.i532, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %10684 = trunc i64 %10674 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %10680, %10678
  %10685 = phi i64 [ %.pre380, %10678 ], [ %10670, %10680 ]
  %10686 = phi i32 [ %.pre379, %10678 ], [ %10684, %10680 ]
  %10687 = phi i64 [ %.pre378, %10678 ], [ %10629, %10680 ]
  %10688 = phi %struct.Memory* [ %10679, %10678 ], [ %MEMORY.103, %10680 ]
  %10689 = add i64 %10687, -44
  %10690 = add i64 %10685, 3
  store i64 %10690, i64* %3, align 8
  %10691 = inttoptr i64 %10689 to i32*
  store i32 %10686, i32* %10691, align 4
  %.pre381 = load i64, i64* %3, align 8
  br label %block_.L_41c9f4

block_.L_41c9f4:                                  ; preds = %routine_idivl__ecx.exit, %block_.L_41c49a
  %.pre395.pre-phi = phi %union.anon* [ %8665, %routine_idivl__ecx.exit ], [ %6249, %block_.L_41c49a ]
  %10692 = phi i64 [ %.pre381, %routine_idivl__ecx.exit ], [ %8529, %block_.L_41c49a ]
  %MEMORY.104 = phi %struct.Memory* [ %10688, %routine_idivl__ecx.exit ], [ %MEMORY.81, %block_.L_41c49a ]
  %10693 = add i64 %10692, 5
  store i64 %10693, i64* %3, align 8
  br label %block_.L_41c9f9

block_.L_41c9f9:                                  ; preds = %block_.L_41c9f4, %block_.L_41bf0c
  %.pre394.pre-phi = phi %union.anon* [ %.pre395.pre-phi, %block_.L_41c9f4 ], [ %3905, %block_.L_41bf0c ]
  %storemerge114 = phi i64 [ %10693, %block_.L_41c9f4 ], [ %6221, %block_.L_41bf0c ]
  %MEMORY.105 = phi %struct.Memory* [ %MEMORY.104, %block_.L_41c9f4 ], [ %MEMORY.62, %block_.L_41bf0c ]
  %10694 = add i64 %storemerge114, 5
  store i64 %10694, i64* %3, align 8
  br label %block_.L_41c9fe

block_.L_41c9fe:                                  ; preds = %block_.L_41c9f9, %block_.L_41b96f
  %.pre393.pre-phi = phi %union.anon* [ %.pre394.pre-phi, %block_.L_41c9f9 ], [ %2351, %block_.L_41b96f ]
  %storemerge112 = phi i64 [ %10694, %block_.L_41c9f9 ], [ %3877, %block_.L_41b96f ]
  %MEMORY.106 = phi %struct.Memory* [ %MEMORY.105, %block_.L_41c9f9 ], [ %MEMORY.42, %block_.L_41b96f ]
  %10695 = add i64 %storemerge112, 5
  store i64 %10695, i64* %3, align 8
  br label %block_.L_41ca03

block_.L_41ca03:                                  ; preds = %block_.L_41c9fe, %block_.L_41b556
  %.pre388.pre-phi = phi %union.anon* [ %.pre393.pre-phi, %block_.L_41c9fe ], [ %756, %block_.L_41b556 ]
  %storemerge110 = phi i64 [ %10695, %block_.L_41c9fe ], [ %2282, %block_.L_41b556 ]
  %MEMORY.107 = phi %struct.Memory* [ %MEMORY.106, %block_.L_41c9fe ], [ %MEMORY.24, %block_.L_41b556 ]
  %10696 = add i64 %storemerge110, 5
  store i64 %10696, i64* %3, align 8
  br label %block_.L_41ca08

block_.L_41ca08:                                  ; preds = %block_.L_41ca03, %block_.L_41b12c
  %.pre-phi = phi %union.anon* [ %.pre388.pre-phi, %block_.L_41ca03 ], [ %331, %block_.L_41b12c ]
  %storemerge = phi i64 [ %10696, %block_.L_41ca03 ], [ %686, %block_.L_41b12c ]
  %MEMORY.108 = phi %struct.Memory* [ %MEMORY.107, %block_.L_41ca03 ], [ %229, %block_.L_41b12c ]
  %10697 = load i64, i64* %RBP.i, align 8
  %10698 = add i64 %10697, -44
  %10699 = add i64 %storemerge, 3
  store i64 %10699, i64* %3, align 8
  %10700 = inttoptr i64 %10698 to i32*
  %10701 = load i32, i32* %10700, align 4
  %CL.i7 = bitcast %union.anon* %.pre-phi to i8*
  %10702 = trunc i32 %10701 to i8
  store i8 %10702, i8* %CL.i7, align 1
  %.mask = and i32 %10701, 255
  %10703 = zext i32 %.mask to i64
  store i64 %10703, i64* %RAX.i82, align 8
  %10704 = load i64, i64* %6, align 8
  %10705 = add i64 %10704, 640
  store i64 %10705, i64* %6, align 8
  %10706 = icmp ugt i64 %10704, -641
  %10707 = zext i1 %10706 to i8
  store i8 %10707, i8* %14, align 1
  %10708 = trunc i64 %10705 to i32
  %10709 = and i32 %10708, 255
  %10710 = tail call i32 @llvm.ctpop.i32(i32 %10709)
  %10711 = trunc i32 %10710 to i8
  %10712 = and i8 %10711, 1
  %10713 = xor i8 %10712, 1
  store i8 %10713, i8* %21, align 1
  %10714 = xor i64 %10705, %10704
  %10715 = lshr i64 %10714, 4
  %10716 = trunc i64 %10715 to i8
  %10717 = and i8 %10716, 1
  store i8 %10717, i8* %26, align 1
  %10718 = icmp eq i64 %10705, 0
  %10719 = zext i1 %10718 to i8
  store i8 %10719, i8* %29, align 1
  %10720 = lshr i64 %10705, 63
  %10721 = trunc i64 %10720 to i8
  store i8 %10721, i8* %32, align 1
  %10722 = lshr i64 %10704, 63
  %10723 = xor i64 %10720, %10722
  %10724 = add nuw nsw i64 %10723, %10720
  %10725 = icmp eq i64 %10724, 2
  %10726 = zext i1 %10725 to i8
  store i8 %10726, i8* %38, align 1
  %10727 = add i64 %storemerge, 16
  store i64 %10727, i64* %3, align 8
  %10728 = add i64 %10704, 648
  %10729 = inttoptr i64 %10705 to i64*
  %10730 = load i64, i64* %10729, align 8
  store i64 %10730, i64* %RBP.i, align 8
  store i64 %10728, i64* %6, align 8
  %10731 = add i64 %storemerge, 17
  store i64 %10731, i64* %3, align 8
  %10732 = inttoptr i64 %10728 to i64*
  %10733 = load i64, i64* %10732, align 8
  store i64 %10733, i64* %3, align 8
  %10734 = add i64 %10704, 656
  store i64 %10734, i64* %6, align 8
  ret %struct.Memory* %MEMORY.108
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x280___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -640
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 640
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %28
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x3___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 3
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i32 %7, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x14__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x1c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x34__rdi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x3c__rdi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41b148(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -12
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b068(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b06e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x74__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__ecx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b085(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -120
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b0a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -12
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b09c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -124
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b0a2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x7c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -124
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x78__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x70__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rcx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x10__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -16
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b0d7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -140
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b0e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b0fd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -144
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b12c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b117(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -148
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b120(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x94__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x90__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x88__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rdx__rcx_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ca08(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41b55b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b16c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -152
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b175(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x98__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b192(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -156
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b1c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b1ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -160
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b1b5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x9c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xfffffffe__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b29c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x18__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b1fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -164
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b206(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x18__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b223(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -168
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b25a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b242(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -172
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b24e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x3c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rcx__rdx_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull_0x4b8ab0___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 4950704
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = shl i64 %3, 32
  %12 = ashr exact i64 %11, 32
  %13 = sext i32 %10 to i64
  %14 = mul nsw i64 %13, %12
  %15 = trunc i64 %14 to i32
  %16 = and i64 %14, 4294967295
  store i64 %16, i64* %RAX, align 8
  %17 = shl i64 %14, 32
  %18 = ashr exact i64 %17, 32
  %19 = icmp ne i64 %18, %14
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1
  %22 = and i32 %15, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22)
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1
  %30 = lshr i32 %15, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %20, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x2c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b1d1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x20___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 32, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x10___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -17
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -176
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xb4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -180
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb4__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDI, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b2f3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b315(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x10___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -17
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xbc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b332(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -192
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b3b7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -196
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -200
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc8__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b389(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xcc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -204
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b3ab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -208
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xcc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -204
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xcc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41b483(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x10__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -16
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b400(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b409(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b426(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b455(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b440(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -236
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b449(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xe0__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rsi__rdx_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RDI, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b556(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41b551(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edi___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ESI, align 4
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -240
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xf8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b4c8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xfc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -252
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b4d4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b4f1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x100__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -256
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b528(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b510(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x104__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -260
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b51c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x104__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x100__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xf8__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf0__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ca03(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41b974(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b57f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x108__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -264
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b588(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x108__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b5a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x10c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -268
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b5d4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b5bf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x110__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b5c8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x110__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -268
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xfffffffe__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b6af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x20__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b60d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x114__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -276
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b619(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x114__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -276
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b636(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x118__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -280
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b66d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b655(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x11c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -284
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b661(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x11c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -284
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x118__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b5e4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -288
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x124__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -292
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x120__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x124__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b706(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -296
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b728(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x12c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -300
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x12c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -300
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -296
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x128__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b745(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x130__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -304
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b7ca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x134__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -308
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x138__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -312
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x134__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -308
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x138__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b79c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x13c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -316
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b7be(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x140__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -320
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x140__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -320
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x13c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -316
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x13c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -316
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x130__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41b899(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -12
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x144__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -324
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x150__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b80b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x154__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -340
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b814(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x154__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -340
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b831(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x158__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -344
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b860(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b84b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x15c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -348
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b854(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x15c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -348
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x158__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -344
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x150__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi__rdx_8____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rdx__rdi_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x144__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -324
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R8D, align 4
  %7 = load i32, i32* %EAX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = add i32 %7, %6
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %5, align 8
  %12 = icmp ult i32 %10, %6
  %13 = icmp ult i32 %10, %7
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %7, %6
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %6, 31
  %36 = lshr i32 %7, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b96f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41b96a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__esi___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDX, align 4
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -352
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b8d6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x16c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -364
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b8e2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x16c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -364
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b8ff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -368
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b936(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b91e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -372
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b92a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x174__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -372
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x170__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -368
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x168__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x160__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -352
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c9fe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41bf11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bb0e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b9b5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x178__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -376
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b9c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x178__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41b9de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x17c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -380
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ba15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41b9fd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x180__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -384
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ba09(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x180__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x17c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41baf0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41ba4e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x184__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -388
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ba5a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x184__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41ba77(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x188__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -392
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41baae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41ba96(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -396
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41baa2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x188__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ba25(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x60__rbp__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -96
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41b985(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bb58(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -96
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bb1c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x400___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1024, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x200___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 512
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -513
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x190__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -400
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x194__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x190__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x194__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bbb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x198__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -408
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bbd7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x200___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 512
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -513
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x19c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -412
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x19c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -412
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x198__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -408
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x198__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -408
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41bbf4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -416
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bc7f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -420
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -424
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -420
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a8__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bc4e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -428
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bc73(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -432
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -428
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1ac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -428
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41bdca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x58__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x10___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp ugt i32 %6, -17
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -436
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b4__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -436
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__edi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ESI, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -440
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bce6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -444
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bd08(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x58__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -448
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -444
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1bc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41bd25(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -452
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bdaa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x58__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -456
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -460
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1cc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -460
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bd7c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -464
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bd9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -468
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -468
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -464
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -452
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bf0c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41bf07(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -472
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d8__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -472
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -476
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41be28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -480
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41be4a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -484
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -484
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -480
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41be67(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -488
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41beec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -492
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -496
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1ec__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -492
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f0__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bebe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -500
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bee0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -504
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -500
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -500
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -488
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1dc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -476
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c9f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c49f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c0ab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bf52(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -508
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bf5e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -508
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41bf7b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x200__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -512
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bfb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bf9a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x204__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -516
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bfa6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x204__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -516
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x200__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c08d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bfeb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x208__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -520
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bff7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x208__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c014(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -524
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c04b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c033(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x210__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -528
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c03f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x210__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -524
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bfc2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bf22(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c0f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c0b9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x214__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -532
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x218__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -536
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x214__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x218__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c14f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x21c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -540
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c174(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x220__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -544
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x220__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x21c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -540
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x21c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -540
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c191(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x224__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -548
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c21c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x228__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -552
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x22c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -556
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x228__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -552
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x22c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c1eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x230__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -560
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c210(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x234__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -564
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x234__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -564
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x230__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -560
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x230__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x224__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -548
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c367(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x238__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -568
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x238__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -568
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x23c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -572
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c283(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x240__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -576
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c2a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x244__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -580
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x244__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -580
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x240__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -576
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x240__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -576
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c2c2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x248__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -584
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c347(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x24c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -588
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x250__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -592
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -588
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x250__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -592
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c319(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x254__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -596
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c33b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x258__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -600
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x258__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x254__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -596
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x254__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -596
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x248__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -584
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x23c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -572
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c49a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x25c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -604
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x25c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -604
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x260__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -608
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c3bb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x264__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -612
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c3dd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x268__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -616
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x268__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -616
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x264__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -612
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x264__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -612
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c3fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x26c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -620
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c47f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x270__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -624
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x274__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -628
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x270__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x274__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -628
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c451(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x278__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -632
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c473(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x27c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -636
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -636
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x278__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -632
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x278__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -632
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x26c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -620
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x260__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c9f4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c4be(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x280__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -640
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c4ca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x280__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -640
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -60
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c4ed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x284__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -644
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c4f6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x284__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -644
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c513(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x288__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -648
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c542(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c52d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x28c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -652
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c536(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -652
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x288__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -648
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c61d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c57b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x290__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -656
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c587(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x290__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -656
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c5a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x294__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -660
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c5db(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c5c3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x298__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -664
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c5cf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x298__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -664
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x294__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -660
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c552(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x29c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -668
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -672
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x29c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a0__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -672
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c674(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -676
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c696(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -680
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -680
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -676
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -676
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c6b3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -684
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c738(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -688
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -692
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2b0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -688
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2b4__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -692
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c70a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -696
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c72c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -700
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2bc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -696
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2b8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -696
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c760(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -704
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c76c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x38__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -56
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c78f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -708
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c798(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -708
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c7b5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -712
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c7e4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c7cf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -716
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c7d8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2cc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c8bf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c81d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -720
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c829(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2d0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -720
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c846(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -724
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c87d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c865(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -728
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c871(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2d8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -728
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2d4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -724
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c7f4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -732
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -736
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2dc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -732
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e0__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c916(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -740
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c938(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -744
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -744
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -740
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -740
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c955(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -748
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c9da(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -752
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x2f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -756
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -752
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f4__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -756
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c9ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x2f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -760
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c9ce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -764
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2fc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -764
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -760
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -760
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -748
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x34__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al___cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %AL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl__cl___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i8, i8* %CL, align 1
  %5 = zext i8 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x280___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 640
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -641
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
