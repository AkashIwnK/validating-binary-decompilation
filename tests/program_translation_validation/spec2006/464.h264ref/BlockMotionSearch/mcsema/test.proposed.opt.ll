; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x25be7e__rip__type = type <{ [8 x i8] }>
%G_0x25befb__rip__type = type <{ [8 x i8] }>
%G_0x25d9ed__rip__type = type <{ [8 x i8] }>
%G_0x25da6a__rip__type = type <{ [8 x i8] }>
%G_0x25da89__rip__type = type <{ [4 x i8] }>
%G_0x2a0544__rip__type = type <{ [4 x i8] }>
%G_0x2a054a__rip__type = type <{ [4 x i8] }>
%G_0x2a059c__rip__type = type <{ [4 x i8] }>
%G_0x2a05bd__rip__type = type <{ [4 x i8] }>
%G_0x2a05c3__rip__type = type <{ [4 x i8] }>
%G_0x409e8__rip__type = type <{ [8 x i8] }>
%G_0x40b26__rip__type = type <{ [8 x i8] }>
%G_0x41318__rip__type = type <{ [8 x i8] }>
%G_0x42302__rip__type = type <{ [8 x i8] }>
%G_0x42312__rip__type = type <{ [8 x i8] }>
%G_0x423dd__rip__type = type <{ [8 x i8] }>
%G_0x423ed__rip__type = type <{ [8 x i8] }>
%G_0x4dc85__rip__type = type <{ [4 x i8] }>
%G_0x4dfef__rip__type = type <{ [4 x i8] }>
%G_0x6cb8f8_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x6cd3b0_type = type <{ [8 x i8] }>
%G_0x6cd468_type = type <{ [8 x i8] }>
%G_0x6cd480_type = type <{ [4 x i8] }>
%G_0x6d1f98_type = type <{ [4 x i8] }>
%G_0x6d1fa0_type = type <{ [4 x i8] }>
%G_0x6d1fa4_type = type <{ [4 x i8] }>
%G_0x6d32c4_type = type <{ [4 x i8] }>
%G_0x6f934c_type = type <{ [1 x i8] }>
%G_0x6f968c_type = type <{ [4 x i8] }>
%G_0x6f9734_type = type <{ [4 x i8] }>
%G_0x70fcf0_type = type <{ [8 x i8] }>
%G_0x70fd54_type = type <{ [4 x i8] }>
%G_0x70fd58_type = type <{ [4 x i8] }>
%G_0x710010_type = type <{ [4 x i8] }>
%G_0x710014_type = type <{ [4 x i8] }>
%G_0x722ca8_type = type <{ [4 x i8] }>
%G_0x72369c_type = type <{ [4 x i8] }>
%G_0x726418_type = type <{ [8 x i8] }>
%G__0x6cbc30_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x25be7e__rip_ = global %G_0x25be7e__rip__type zeroinitializer
@G_0x25befb__rip_ = global %G_0x25befb__rip__type zeroinitializer
@G_0x25d9ed__rip_ = global %G_0x25d9ed__rip__type zeroinitializer
@G_0x25da6a__rip_ = global %G_0x25da6a__rip__type zeroinitializer
@G_0x25da89__rip_ = global %G_0x25da89__rip__type zeroinitializer
@G_0x2a0544__rip_ = global %G_0x2a0544__rip__type zeroinitializer
@G_0x2a054a__rip_ = global %G_0x2a054a__rip__type zeroinitializer
@G_0x2a059c__rip_ = global %G_0x2a059c__rip__type zeroinitializer
@G_0x2a05bd__rip_ = global %G_0x2a05bd__rip__type zeroinitializer
@G_0x2a05c3__rip_ = global %G_0x2a05c3__rip__type zeroinitializer
@G_0x409e8__rip_ = global %G_0x409e8__rip__type zeroinitializer
@G_0x40b26__rip_ = global %G_0x40b26__rip__type zeroinitializer
@G_0x41318__rip_ = global %G_0x41318__rip__type zeroinitializer
@G_0x42302__rip_ = global %G_0x42302__rip__type zeroinitializer
@G_0x42312__rip_ = global %G_0x42312__rip__type zeroinitializer
@G_0x423dd__rip_ = global %G_0x423dd__rip__type zeroinitializer
@G_0x423ed__rip_ = global %G_0x423ed__rip__type zeroinitializer
@G_0x4dc85__rip_ = global %G_0x4dc85__rip__type zeroinitializer
@G_0x4dfef__rip_ = global %G_0x4dfef__rip__type zeroinitializer
@G_0x6cb8f8 = local_unnamed_addr global %G_0x6cb8f8_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x6cd3b0 = local_unnamed_addr global %G_0x6cd3b0_type zeroinitializer
@G_0x6cd468 = local_unnamed_addr global %G_0x6cd468_type zeroinitializer
@G_0x6cd480 = local_unnamed_addr global %G_0x6cd480_type zeroinitializer
@G_0x6d1f98 = local_unnamed_addr global %G_0x6d1f98_type zeroinitializer
@G_0x6d1fa0 = local_unnamed_addr global %G_0x6d1fa0_type zeroinitializer
@G_0x6d1fa4 = local_unnamed_addr global %G_0x6d1fa4_type zeroinitializer
@G_0x6d32c4 = local_unnamed_addr global %G_0x6d32c4_type zeroinitializer
@G_0x6f934c = local_unnamed_addr global %G_0x6f934c_type zeroinitializer
@G_0x6f968c = local_unnamed_addr global %G_0x6f968c_type zeroinitializer
@G_0x6f9734 = local_unnamed_addr global %G_0x6f9734_type zeroinitializer
@G_0x70fcf0 = local_unnamed_addr global %G_0x70fcf0_type zeroinitializer
@G_0x70fd54 = local_unnamed_addr global %G_0x70fd54_type zeroinitializer
@G_0x70fd58 = local_unnamed_addr global %G_0x70fd58_type zeroinitializer
@G_0x710010 = local_unnamed_addr global %G_0x710010_type zeroinitializer
@G_0x710014 = local_unnamed_addr global %G_0x710014_type zeroinitializer
@G_0x722ca8 = local_unnamed_addr global %G_0x722ca8_type zeroinitializer
@G_0x72369c = local_unnamed_addr global %G_0x72369c_type zeroinitializer
@G_0x726418 = local_unnamed_addr global %G_0x726418_type zeroinitializer
@G__0x6cbc30 = global %G__0x6cbc30_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #0

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #0

declare extern_weak x86_64_sysvcc i64 @floor(i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_45ca00.SetMotionVectorPredictor(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_420700.FastIntegerPelBlockMotionSearch(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_45ee30.FastFullPelBlockMotionSearch(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_423bb0.FastSubPelBlockMotionSearch(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_460230.SubPelBlockMotionSearch(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4711a0.FindSkipModeMotionVector(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4716e0.GetSkipCostMB(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_462170.FullPelBlockMotionBiPred(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4634d0.SubPelBlockSearchBiPred(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @BlockMotionSearch(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15.i1647 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %12 = load i64, i64* %R15.i1647, align 8
  %13 = add i64 %10, 5
  store i64 %13, i64* %3, align 8
  %14 = add i64 %7, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14.i2839 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %17 = load i64, i64* %R14.i2839, align 8
  %18 = load i64, i64* %3, align 8
  %19 = add i64 %18, 2
  store i64 %19, i64* %3, align 8
  %20 = add i64 %7, -24
  %21 = inttoptr i64 %20 to i64*
  store i64 %17, i64* %21, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13.i2854 = getelementptr inbounds %union.anon, %union.anon* %22, i64 0, i32 0
  %23 = load i64, i64* %R13.i2854, align 8
  %24 = load i64, i64* %3, align 8
  %25 = add i64 %24, 2
  store i64 %25, i64* %3, align 8
  %26 = add i64 %7, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %R12.i4237 = getelementptr inbounds %union.anon, %union.anon* %28, i64 0, i32 0
  %29 = load i64, i64* %R12.i4237, align 8
  %30 = load i64, i64* %3, align 8
  %31 = add i64 %30, 2
  store i64 %31, i64* %3, align 8
  %32 = add i64 %7, -40
  %33 = inttoptr i64 %32 to i64*
  store i64 %29, i64* %33, align 8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %RBX.i4440 = getelementptr inbounds %union.anon, %union.anon* %34, i64 0, i32 0
  %35 = load i64, i64* %RBX.i4440, align 8
  %36 = load i64, i64* %3, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %3, align 8
  %38 = add i64 %7, -48
  %39 = inttoptr i64 %38 to i64*
  store i64 %35, i64* %39, align 8
  %40 = load i64, i64* %3, align 8
  %41 = add i64 %7, -696
  store i64 %41, i64* %6, align 8
  %42 = icmp ult i64 %38, 648
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = tail call i32 @llvm.ctpop.i32(i32 %46)
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1
  %52 = xor i64 %38, %41
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1
  %57 = icmp eq i64 %41, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1
  %60 = lshr i64 %41, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1
  %63 = lshr i64 %38, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX.i4810 = bitcast %union.anon* %69 to i16*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI.i = bitcast %union.anon* %70 to i16*
  %71 = load i16, i16* %DI.i, align 2
  store i16 %71, i16* %AX.i4810, align 2
  %72 = load i64, i64* %RBP.i, align 8
  %73 = add i64 %72, -42
  %74 = add i64 %40, 14
  store i64 %74, i64* %3, align 8
  %75 = inttoptr i64 %73 to i16*
  store i16 %71, i16* %75, align 2
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI.i5193 = bitcast %union.anon* %76 to i32*
  %77 = load i64, i64* %RBP.i, align 8
  %78 = add i64 %77, -48
  %79 = load i32, i32* %ESI.i5193, align 4
  %80 = load i64, i64* %3, align 8
  %81 = add i64 %80, 3
  store i64 %81, i64* %3, align 8
  %82 = inttoptr i64 %78 to i32*
  store i32 %79, i32* %82, align 4
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX.i5379 = bitcast %union.anon* %83 to i32*
  %84 = load i64, i64* %RBP.i, align 8
  %85 = add i64 %84, -52
  %86 = load i32, i32* %EDX.i5379, align 4
  %87 = load i64, i64* %3, align 8
  %88 = add i64 %87, 3
  store i64 %88, i64* %3, align 8
  %89 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %89, align 4
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX.i5565 = bitcast %union.anon* %90 to i32*
  %91 = load i64, i64* %RBP.i, align 8
  %92 = add i64 %91, -56
  %93 = load i32, i32* %ECX.i5565, align 4
  %94 = load i64, i64* %3, align 8
  %95 = add i64 %94, 3
  store i64 %95, i64* %3, align 8
  %96 = inttoptr i64 %92 to i32*
  store i32 %93, i32* %96, align 4
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D.i5751 = bitcast %union.anon* %97 to i32*
  %98 = load i64, i64* %RBP.i, align 8
  %99 = add i64 %98, -60
  %100 = load i32, i32* %R8D.i5751, align 4
  %101 = load i64, i64* %3, align 8
  %102 = add i64 %101, 4
  store i64 %102, i64* %3, align 8
  %103 = inttoptr i64 %99 to i32*
  store i32 %100, i32* %103, align 4
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D.i6071 = bitcast %union.anon* %104 to i32*
  %105 = load i64, i64* %RBP.i, align 8
  %106 = add i64 %105, -64
  %107 = load i32, i32* %R9D.i6071, align 4
  %108 = load i64, i64* %3, align 8
  %109 = add i64 %108, 4
  store i64 %109, i64* %3, align 8
  %110 = inttoptr i64 %106 to i32*
  store i32 %107, i32* %110, align 4
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %112 = load i64, i64* %RBP.i, align 8
  %113 = add i64 %112, -72
  %114 = load i64, i64* %3, align 8
  %115 = add i64 %114, 5
  store i64 %115, i64* %3, align 8
  %116 = bitcast [32 x %union.VectorReg]* %111 to double*
  %117 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %111, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %118 = load i64, i64* %117, align 1
  %119 = inttoptr i64 %113 to i64*
  store i64 %118, i64* %119, align 8
  %120 = load i64, i64* %RBP.i, align 8
  %121 = add i64 %120, -92
  %122 = load i64, i64* %3, align 8
  %123 = add i64 %122, 7
  store i64 %123, i64* %3, align 8
  %124 = inttoptr i64 %121 to i32*
  store i32 2147483647, i32* %124, align 4
  %RCX.i6189 = getelementptr inbounds %union.anon, %union.anon* %90, i64 0, i32 0
  %125 = load i64, i64* %RBP.i, align 8
  %126 = add i64 %125, -92
  %127 = load i64, i64* %3, align 8
  %128 = add i64 %127, 3
  store i64 %128, i64* %3, align 8
  %129 = inttoptr i64 %126 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RCX.i6189, align 8
  %132 = add i64 %125, -96
  %133 = add i64 %127, 6
  store i64 %133, i64* %3, align 8
  %134 = inttoptr i64 %132 to i32*
  store i32 %130, i32* %134, align 4
  %135 = load i64, i64* %RBP.i, align 8
  %136 = add i64 %135, -52
  %137 = load i64, i64* %3, align 8
  %138 = add i64 %137, 3
  store i64 %138, i64* %3, align 8
  %139 = inttoptr i64 %136 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = sext i32 %140 to i64
  %142 = ashr i64 %141, 1
  %143 = lshr i64 %142, 1
  %144 = trunc i64 %142 to i8
  %145 = and i8 %144, 1
  %146 = trunc i64 %143 to i32
  %147 = and i64 %143, 4294967295
  store i64 %147, i64* %RCX.i6189, align 8
  store i8 %145, i8* %44, align 1
  %148 = and i32 %146, 255
  %149 = tail call i32 @llvm.ctpop.i32(i32 %148)
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  store i8 %152, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %153 = icmp eq i32 %146, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %59, align 1
  %155 = lshr i64 %142, 32
  %156 = trunc i64 %155 to i8
  %157 = and i8 %156, 1
  store i8 %157, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %158 = add i64 %135, -100
  %159 = trunc i64 %143 to i32
  %160 = add i64 %137, 9
  store i64 %160, i64* %3, align 8
  %161 = inttoptr i64 %158 to i32*
  store i32 %159, i32* %161, align 4
  %162 = load i64, i64* %RBP.i, align 8
  %163 = add i64 %162, -56
  %164 = load i64, i64* %3, align 8
  %165 = add i64 %164, 3
  store i64 %165, i64* %3, align 8
  %166 = inttoptr i64 %163 to i32*
  %167 = load i32, i32* %166, align 4
  %168 = sext i32 %167 to i64
  %169 = ashr i64 %168, 1
  %170 = lshr i64 %169, 1
  %171 = trunc i64 %169 to i8
  %172 = and i8 %171, 1
  %173 = trunc i64 %170 to i32
  %174 = and i64 %170, 4294967295
  store i64 %174, i64* %RCX.i6189, align 8
  store i8 %172, i8* %44, align 1
  %175 = and i32 %173, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175)
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %180 = icmp eq i32 %173, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %59, align 1
  %182 = lshr i64 %169, 32
  %183 = trunc i64 %182 to i8
  %184 = and i8 %183, 1
  store i8 %184, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %185 = add i64 %162, -104
  %186 = trunc i64 %170 to i32
  %187 = add i64 %164, 9
  store i64 %187, i64* %3, align 8
  %188 = inttoptr i64 %185 to i32*
  store i32 %186, i32* %188, align 4
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10.i6168 = getelementptr inbounds %union.anon, %union.anon* %189, i64 0, i32 0
  %190 = load i64, i64* %3, align 8
  %191 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %191, i64* %R10.i6168, align 8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11.i6166 = getelementptr inbounds %union.anon, %union.anon* %192, i64 0, i32 0
  %193 = load i64, i64* %RBP.i, align 8
  %194 = add i64 %193, -60
  %195 = add i64 %190, 12
  store i64 %195, i64* %3, align 8
  %196 = inttoptr i64 %194 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = sext i32 %197 to i64
  store i64 %198, i64* %R11.i6166, align 8
  %199 = shl nsw i64 %198, 3
  %200 = add i64 %191, 80
  %201 = add i64 %200, %199
  %202 = add i64 %190, 17
  store i64 %202, i64* %3, align 8
  %203 = inttoptr i64 %201 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = zext i32 %204 to i64
  store i64 %205, i64* %RCX.i6189, align 8
  %206 = add i64 %193, -108
  %207 = add i64 %190, 20
  store i64 %207, i64* %3, align 8
  %208 = inttoptr i64 %206 to i32*
  store i32 %204, i32* %208, align 4
  %209 = load i64, i64* %3, align 8
  %210 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %210, i64* %R10.i6168, align 8
  %211 = load i64, i64* %RBP.i, align 8
  %212 = add i64 %211, -60
  %213 = add i64 %209, 12
  store i64 %213, i64* %3, align 8
  %214 = inttoptr i64 %212 to i32*
  %215 = load i32, i32* %214, align 4
  %216 = sext i32 %215 to i64
  store i64 %216, i64* %R11.i6166, align 8
  %217 = shl nsw i64 %216, 3
  %218 = add i64 %210, 84
  %219 = add i64 %218, %217
  %220 = add i64 %209, 17
  store i64 %220, i64* %3, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = zext i32 %222 to i64
  store i64 %223, i64* %RCX.i6189, align 8
  %224 = add i64 %211, -112
  %225 = add i64 %209, 20
  store i64 %225, i64* %3, align 8
  %226 = inttoptr i64 %224 to i32*
  store i32 %222, i32* %226, align 4
  %227 = load i64, i64* %3, align 8
  %228 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %228, i64* %R10.i6168, align 8
  %229 = add i64 %228, 168
  %230 = add i64 %227, 15
  store i64 %230, i64* %3, align 8
  %231 = inttoptr i64 %229 to i32*
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %RCX.i6189, align 8
  %234 = load i64, i64* %RBP.i, align 8
  %235 = add i64 %234, -52
  %236 = add i64 %227, 18
  store i64 %236, i64* %3, align 8
  %237 = inttoptr i64 %235 to i32*
  %238 = load i32, i32* %237, align 4
  %239 = add i32 %238, %232
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RCX.i6189, align 8
  %241 = icmp ult i32 %239, %232
  %242 = icmp ult i32 %239, %238
  %243 = or i1 %241, %242
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %44, align 1
  %245 = and i32 %239, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245)
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %51, align 1
  %250 = xor i32 %238, %232
  %251 = xor i32 %250, %239
  %252 = lshr i32 %251, 4
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  store i8 %254, i8* %56, align 1
  %255 = icmp eq i32 %239, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %59, align 1
  %257 = lshr i32 %239, 31
  %258 = trunc i32 %257 to i8
  store i8 %258, i8* %62, align 1
  %259 = lshr i32 %232, 31
  %260 = lshr i32 %238, 31
  %261 = xor i32 %257, %259
  %262 = xor i32 %257, %260
  %263 = add nuw nsw i32 %261, %262
  %264 = icmp eq i32 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %68, align 1
  %266 = add i64 %234, -116
  %267 = add i64 %227, 21
  store i64 %267, i64* %3, align 8
  %268 = inttoptr i64 %266 to i32*
  store i32 %239, i32* %268, align 4
  %269 = load i64, i64* %3, align 8
  %270 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %270, i64* %R10.i6168, align 8
  %271 = add i64 %270, 172
  %272 = add i64 %269, 15
  store i64 %272, i64* %3, align 8
  %273 = inttoptr i64 %271 to i32*
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RCX.i6189, align 8
  %276 = load i64, i64* %RBP.i, align 8
  %277 = add i64 %276, -56
  %278 = add i64 %269, 18
  store i64 %278, i64* %3, align 8
  %279 = inttoptr i64 %277 to i32*
  %280 = load i32, i32* %279, align 4
  %281 = add i32 %280, %274
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %RCX.i6189, align 8
  %283 = icmp ult i32 %281, %274
  %284 = icmp ult i32 %281, %280
  %285 = or i1 %283, %284
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %44, align 1
  %287 = and i32 %281, 255
  %288 = tail call i32 @llvm.ctpop.i32(i32 %287)
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  store i8 %291, i8* %51, align 1
  %292 = xor i32 %280, %274
  %293 = xor i32 %292, %281
  %294 = lshr i32 %293, 4
  %295 = trunc i32 %294 to i8
  %296 = and i8 %295, 1
  store i8 %296, i8* %56, align 1
  %297 = icmp eq i32 %281, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %59, align 1
  %299 = lshr i32 %281, 31
  %300 = trunc i32 %299 to i8
  store i8 %300, i8* %62, align 1
  %301 = lshr i32 %274, 31
  %302 = lshr i32 %280, 31
  %303 = xor i32 %299, %301
  %304 = xor i32 %299, %302
  %305 = add nuw nsw i32 %303, %304
  %306 = icmp eq i32 %305, 2
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %68, align 1
  %308 = add i64 %276, -120
  %309 = add i64 %269, 21
  store i64 %309, i64* %3, align 8
  %310 = inttoptr i64 %308 to i32*
  store i32 %281, i32* %310, align 4
  %311 = load i64, i64* %3, align 8
  %312 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %312, i64* %R10.i6168, align 8
  %313 = add i64 %312, 6504
  %314 = add i64 %311, 15
  store i64 %314, i64* %3, align 8
  %315 = inttoptr i64 %313 to i64*
  %316 = load i64, i64* %315, align 8
  store i64 %316, i64* %R10.i6168, align 8
  %317 = load i64, i64* %RBP.i, align 8
  %318 = add i64 %317, -48
  %319 = add i64 %311, 19
  store i64 %319, i64* %3, align 8
  %320 = inttoptr i64 %318 to i32*
  %321 = load i32, i32* %320, align 4
  %322 = sext i32 %321 to i64
  store i64 %322, i64* %R11.i6166, align 8
  %323 = shl nsw i64 %322, 3
  %324 = add i64 %323, %316
  %325 = add i64 %311, 23
  store i64 %325, i64* %3, align 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = add i64 %317, -136
  %329 = add i64 %311, 30
  store i64 %329, i64* %3, align 8
  %330 = inttoptr i64 %328 to i64*
  store i64 %327, i64* %330, align 8
  %331 = load i64, i64* %3, align 8
  %332 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %332, i64* %R10.i6168, align 8
  %333 = add i64 %332, 71928
  %334 = add i64 %331, 15
  store i64 %334, i64* %3, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  %337 = load i64, i64* %RBP.i, align 8
  %338 = add i64 %337, -144
  %339 = add i64 %331, 22
  store i64 %339, i64* %3, align 8
  %340 = inttoptr i64 %338 to i64*
  store i64 %336, i64* %340, align 8
  %341 = load i64, i64* %RBP.i, align 8
  %342 = add i64 %341, -184
  %343 = load i64, i64* %3, align 8
  %344 = add i64 %343, 10
  store i64 %344, i64* %3, align 8
  %345 = inttoptr i64 %342 to i32*
  store i32 0, i32* %345, align 4
  %346 = load i64, i64* %RBP.i, align 8
  %347 = add i64 %346, -188
  %348 = load i64, i64* %3, align 8
  %349 = add i64 %348, 10
  store i64 %349, i64* %3, align 8
  %350 = inttoptr i64 %347 to i32*
  store i32 0, i32* %350, align 4
  %351 = load i64, i64* %RBP.i, align 8
  %352 = add i64 %351, -160
  %353 = load i64, i64* %3, align 8
  %354 = add i64 %353, 11
  store i64 %354, i64* %3, align 8
  %355 = inttoptr i64 %352 to i64*
  store i64 0, i64* %355, align 8
  %356 = load i64, i64* %RBP.i, align 8
  %357 = add i64 %356, -152
  %358 = load i64, i64* %3, align 8
  %359 = add i64 %358, 9
  store i64 %359, i64* %3, align 8
  %360 = inttoptr i64 %357 to i16*
  store i16 0, i16* %360, align 2
  %361 = load i64, i64* %RBP.i, align 8
  %362 = add i64 %361, -150
  %363 = load i64, i64* %3, align 8
  %364 = add i64 %363, 9
  store i64 %364, i64* %3, align 8
  %365 = inttoptr i64 %362 to i16*
  store i16 0, i16* %365, align 2
  %366 = load i64, i64* %RBP.i, align 8
  %367 = add i64 %366, -148
  %368 = load i64, i64* %3, align 8
  %369 = add i64 %368, 9
  store i64 %369, i64* %3, align 8
  %370 = inttoptr i64 %367 to i16*
  store i16 0, i16* %370, align 2
  %371 = load i64, i64* %3, align 8
  %372 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %372, i64* %R10.i6168, align 8
  %373 = add i64 %372, 3292
  %374 = add i64 %371, 16
  store i64 %374, i64* %3, align 8
  %375 = inttoptr i64 %373 to i32*
  %376 = load i32, i32* %375, align 4
  store i8 0, i8* %44, align 1
  %377 = and i32 %376, 255
  %378 = tail call i32 @llvm.ctpop.i32(i32 %377)
  %379 = trunc i32 %378 to i8
  %380 = and i8 %379, 1
  %381 = xor i8 %380, 1
  store i8 %381, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %382 = icmp eq i32 %376, 0
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %59, align 1
  %384 = lshr i32 %376, 31
  %385 = trunc i32 %384 to i8
  store i8 %385, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v254 = select i1 %382, i64 108, i64 22
  %386 = add i64 %371, %.v254
  store i64 %386, i64* %3, align 8
  %.pre243 = getelementptr inbounds %union.anon, %union.anon* %69, i64 0, i32 0
  br i1 %382, label %block_.L_46e69c, label %block_46e646

block_46e646:                                     ; preds = %entry
  store i64 %372, i64* %.pre243, align 8
  %387 = add i64 %372, 1236
  %388 = add i64 %386, 14
  store i64 %388, i64* %3, align 8
  %389 = inttoptr i64 %387 to i32*
  %390 = load i32, i32* %389, align 4
  %391 = zext i32 %390 to i64
  store i64 %391, i64* %RCX.i6189, align 8
  %392 = load i64, i64* %RBP.i, align 8
  %393 = add i64 %392, -184
  %394 = add i64 %386, 20
  store i64 %394, i64* %3, align 8
  %395 = inttoptr i64 %393 to i32*
  store i32 %390, i32* %395, align 4
  %396 = load i64, i64* %RBP.i, align 8
  %397 = add i64 %396, -184
  %398 = load i64, i64* %3, align 8
  %399 = add i64 %398, 7
  store i64 %399, i64* %3, align 8
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400, align 4
  store i8 0, i8* %44, align 1
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402)
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %407 = icmp eq i32 %401, 0
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %59, align 1
  %409 = lshr i32 %401, 31
  %410 = trunc i32 %409 to i8
  store i8 %410, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v255 = select i1 %407, i64 41, i64 13
  %411 = add i64 %398, %.v255
  store i64 %411, i64* %3, align 8
  br i1 %407, label %block_.L_46e683, label %block_46e667

block_46e667:                                     ; preds = %block_46e646
  %412 = load i32, i32* bitcast (%G_0x722ca8_type* @G_0x722ca8 to i32*), align 8
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %.pre243, align 8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %415 = sext i32 %412 to i64
  %416 = lshr i64 %415, 32
  store i64 %416, i64* %414, align 8
  %417 = add i64 %411, 14
  store i64 %417, i64* %3, align 8
  %418 = load i32, i32* %400, align 4
  %419 = sext i32 %418 to i64
  %420 = shl nuw i64 %416, 32
  %421 = or i64 %420, %413
  %422 = sdiv i64 %421, %419
  %423 = shl i64 %422, 32
  %424 = ashr exact i64 %423, 32
  %425 = icmp eq i64 %422, %424
  br i1 %425, label %428, label %426

; <label>:426:                                    ; preds = %block_46e667
  %427 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %417, %struct.Memory* %2)
  %RDX.i6066.phi.trans.insert = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0
  %.pre = load i64, i64* %RDX.i6066.phi.trans.insert, align 8
  %.pre142 = load i64, i64* %3, align 8
  %.pre143 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl_MINUS0xb8__rbp_.exit6069

; <label>:428:                                    ; preds = %block_46e667
  %429 = srem i64 %421, %419
  %430 = and i64 %422, 4294967295
  store i64 %430, i64* %.pre243, align 8
  %431 = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0
  %432 = and i64 %429, 4294967295
  store i64 %432, i64* %431, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  br label %routine_idivl_MINUS0xb8__rbp_.exit6069

routine_idivl_MINUS0xb8__rbp_.exit6069:           ; preds = %428, %426
  %RDX.i6066.pre-phi = phi i64* [ %431, %428 ], [ %RDX.i6066.phi.trans.insert, %426 ]
  %433 = phi i64 [ %396, %428 ], [ %.pre143, %426 ]
  %434 = phi i64 [ %417, %428 ], [ %.pre142, %426 ]
  %435 = phi i64 [ %432, %428 ], [ %.pre, %426 ]
  %436 = phi %struct.Memory* [ %2, %428 ], [ %427, %426 ]
  %437 = trunc i64 %435 to i32
  %438 = add i32 %437, 1
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %RDX.i6066.pre-phi, align 8
  %440 = icmp eq i32 %437, -1
  %441 = icmp eq i32 %438, 0
  %442 = or i1 %440, %441
  %443 = zext i1 %442 to i8
  store i8 %443, i8* %44, align 1
  %444 = and i32 %438, 255
  %445 = tail call i32 @llvm.ctpop.i32(i32 %444)
  %446 = trunc i32 %445 to i8
  %447 = and i8 %446, 1
  %448 = xor i8 %447, 1
  store i8 %448, i8* %51, align 1
  %449 = xor i32 %438, %437
  %450 = lshr i32 %449, 4
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  store i8 %452, i8* %56, align 1
  %453 = zext i1 %441 to i8
  store i8 %453, i8* %59, align 1
  %454 = lshr i32 %438, 31
  %455 = trunc i32 %454 to i8
  store i8 %455, i8* %62, align 1
  %456 = lshr i32 %437, 31
  %457 = xor i32 %454, %456
  %458 = add nuw nsw i32 %457, %454
  %459 = icmp eq i32 %458, 2
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %68, align 1
  %461 = add i64 %433, -240
  %462 = add i64 %434, 9
  store i64 %462, i64* %3, align 8
  %463 = inttoptr i64 %461 to i32*
  store i32 %438, i32* %463, align 4
  %464 = load i64, i64* %3, align 8
  %465 = add i64 %464, 18
  br label %block_.L_46e690

block_.L_46e683:                                  ; preds = %block_46e646
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %466 = add i64 %396, -240
  %467 = add i64 %411, 8
  store i64 %467, i64* %3, align 8
  %468 = inttoptr i64 %466 to i32*
  store i32 0, i32* %468, align 4
  %469 = load i64, i64* %3, align 8
  %470 = add i64 %469, 5
  store i64 %470, i64* %3, align 8
  br label %block_.L_46e690

block_.L_46e690:                                  ; preds = %block_.L_46e683, %routine_idivl_MINUS0xb8__rbp_.exit6069
  %storemerge = phi i64 [ %465, %routine_idivl_MINUS0xb8__rbp_.exit6069 ], [ %470, %block_.L_46e683 ]
  %MEMORY.0 = phi %struct.Memory* [ %436, %routine_idivl_MINUS0xb8__rbp_.exit6069 ], [ %2, %block_.L_46e683 ]
  %471 = load i64, i64* %RBP.i, align 8
  %472 = add i64 %471, -240
  %473 = add i64 %storemerge, 6
  store i64 %473, i64* %3, align 8
  %474 = inttoptr i64 %472 to i32*
  %475 = load i32, i32* %474, align 4
  %476 = zext i32 %475 to i64
  store i64 %476, i64* %.pre243, align 8
  %477 = add i64 %471, -188
  %478 = add i64 %storemerge, 12
  store i64 %478, i64* %3, align 8
  %479 = inttoptr i64 %477 to i32*
  store i32 %475, i32* %479, align 4
  %.pre144 = load i64, i64* %3, align 8
  br label %block_.L_46e69c

block_.L_46e69c:                                  ; preds = %entry, %block_.L_46e690
  %480 = phi i64 [ %.pre144, %block_.L_46e690 ], [ %386, %entry ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_.L_46e690 ], [ %2, %entry ]
  %EAX.i6004.pre-phi = bitcast %union.anon* %69 to i32*
  %481 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %481, i64* %.pre243, align 8
  %482 = add i64 %481, 71920
  %483 = add i64 %480, 15
  store i64 %483, i64* %3, align 8
  %484 = inttoptr i64 %482 to i64*
  %485 = load i64, i64* %484, align 8
  store i64 %485, i64* %.pre243, align 8
  %486 = load i64, i64* %RBP.i, align 8
  %487 = add i64 %486, -100
  %488 = add i64 %480, 19
  store i64 %488, i64* %3, align 8
  %489 = inttoptr i64 %487 to i32*
  %490 = load i32, i32* %489, align 4
  %491 = sext i32 %490 to i64
  store i64 %491, i64* %RCX.i6189, align 8
  %492 = shl nsw i64 %491, 3
  %493 = add i64 %492, %485
  %494 = add i64 %480, 23
  store i64 %494, i64* %3, align 8
  %495 = inttoptr i64 %493 to i64*
  %496 = load i64, i64* %495, align 8
  store i64 %496, i64* %.pre243, align 8
  %497 = add i64 %486, -104
  %498 = add i64 %480, 27
  store i64 %498, i64* %3, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = sext i32 %500 to i64
  store i64 %501, i64* %RCX.i6189, align 8
  %502 = shl nsw i64 %501, 3
  %503 = add i64 %502, %496
  %504 = add i64 %480, 31
  store i64 %504, i64* %3, align 8
  %505 = inttoptr i64 %503 to i64*
  %506 = load i64, i64* %505, align 8
  store i64 %506, i64* %.pre243, align 8
  %507 = add i64 %486, -48
  %508 = add i64 %480, 35
  store i64 %508, i64* %3, align 8
  %509 = inttoptr i64 %507 to i32*
  %510 = load i32, i32* %509, align 4
  %511 = sext i32 %510 to i64
  store i64 %511, i64* %RCX.i6189, align 8
  %512 = shl nsw i64 %511, 3
  %513 = add i64 %512, %506
  %514 = add i64 %480, 39
  store i64 %514, i64* %3, align 8
  %515 = inttoptr i64 %513 to i64*
  %516 = load i64, i64* %515, align 8
  store i64 %516, i64* %.pre243, align 8
  %517 = add i64 %486, -42
  %518 = add i64 %480, 44
  store i64 %518, i64* %3, align 8
  %519 = inttoptr i64 %517 to i16*
  %520 = load i16, i16* %519, align 2
  %521 = sext i16 %520 to i64
  store i64 %521, i64* %RCX.i6189, align 8
  %522 = shl nsw i64 %521, 3
  %523 = add i64 %522, %516
  %524 = add i64 %480, 48
  store i64 %524, i64* %3, align 8
  %525 = inttoptr i64 %523 to i64*
  %526 = load i64, i64* %525, align 8
  store i64 %526, i64* %.pre243, align 8
  %527 = add i64 %486, -60
  %528 = add i64 %480, 52
  store i64 %528, i64* %3, align 8
  %529 = inttoptr i64 %527 to i32*
  %530 = load i32, i32* %529, align 4
  %531 = sext i32 %530 to i64
  store i64 %531, i64* %RCX.i6189, align 8
  %532 = shl nsw i64 %531, 3
  %533 = add i64 %532, %526
  %534 = add i64 %480, 56
  store i64 %534, i64* %3, align 8
  %535 = inttoptr i64 %533 to i64*
  %536 = load i64, i64* %535, align 8
  store i64 %536, i64* %.pre243, align 8
  %537 = add i64 %486, -128
  %538 = add i64 %480, 60
  store i64 %538, i64* %3, align 8
  %539 = inttoptr i64 %537 to i64*
  store i64 %536, i64* %539, align 8
  %540 = load i64, i64* %RBP.i, align 8
  %541 = add i64 %540, -88
  %542 = load i64, i64* %3, align 8
  %543 = add i64 %542, 7
  store i64 %543, i64* %3, align 8
  %544 = inttoptr i64 %541 to i32*
  store i32 0, i32* %544, align 4
  %RDX.i5984 = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0
  %SI.i5967 = bitcast %union.anon* %76 to i16*
  %.pre145 = load i64, i64* %3, align 8
  br label %block_.L_46e6df

block_.L_46e6df:                                  ; preds = %block_.L_46e742, %block_.L_46e69c
  %545 = phi i64 [ %788, %block_.L_46e742 ], [ %.pre145, %block_.L_46e69c ]
  %546 = load i64, i64* %RBP.i, align 8
  %547 = add i64 %546, -88
  %548 = add i64 %545, 3
  store i64 %548, i64* %3, align 8
  %549 = inttoptr i64 %547 to i32*
  %550 = load i32, i32* %549, align 4
  %551 = zext i32 %550 to i64
  store i64 %551, i64* %.pre243, align 8
  %552 = add i64 %546, -112
  %553 = add i64 %545, 6
  store i64 %553, i64* %3, align 8
  %554 = inttoptr i64 %552 to i32*
  %555 = load i32, i32* %554, align 4
  %556 = sub i32 %550, %555
  %557 = icmp ult i32 %550, %555
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %44, align 1
  %559 = and i32 %556, 255
  %560 = tail call i32 @llvm.ctpop.i32(i32 %559)
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = xor i8 %562, 1
  store i8 %563, i8* %51, align 1
  %564 = xor i32 %555, %550
  %565 = xor i32 %564, %556
  %566 = lshr i32 %565, 4
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  store i8 %568, i8* %56, align 1
  %569 = icmp eq i32 %556, 0
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %59, align 1
  %571 = lshr i32 %556, 31
  %572 = trunc i32 %571 to i8
  store i8 %572, i8* %62, align 1
  %573 = lshr i32 %550, 31
  %574 = lshr i32 %555, 31
  %575 = xor i32 %574, %573
  %576 = xor i32 %571, %573
  %577 = add nuw nsw i32 %576, %575
  %578 = icmp eq i32 %577, 2
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %68, align 1
  %580 = icmp ne i8 %572, 0
  %581 = xor i1 %580, %578
  %.v256 = select i1 %581, i64 12, i64 118
  %582 = add i64 %545, %.v256
  store i64 %582, i64* %3, align 8
  br i1 %581, label %block_46e6eb, label %block_.L_46e755

block_46e6eb:                                     ; preds = %block_.L_46e6df
  %583 = add i64 %546, -84
  %584 = add i64 %582, 7
  store i64 %584, i64* %3, align 8
  %585 = inttoptr i64 %583 to i32*
  store i32 0, i32* %585, align 4
  %.pre228 = load i64, i64* %3, align 8
  br label %block_.L_46e6f2

block_.L_46e6f2:                                  ; preds = %block_46e6fe, %block_46e6eb
  %586 = phi i64 [ %758, %block_46e6fe ], [ %.pre228, %block_46e6eb ]
  %587 = load i64, i64* %RBP.i, align 8
  %588 = add i64 %587, -84
  %589 = add i64 %586, 3
  store i64 %589, i64* %3, align 8
  %590 = inttoptr i64 %588 to i32*
  %591 = load i32, i32* %590, align 4
  %592 = zext i32 %591 to i64
  store i64 %592, i64* %.pre243, align 8
  %593 = add i64 %587, -108
  %594 = add i64 %586, 6
  store i64 %594, i64* %3, align 8
  %595 = inttoptr i64 %593 to i32*
  %596 = load i32, i32* %595, align 4
  %597 = sub i32 %591, %596
  %598 = icmp ult i32 %591, %596
  %599 = zext i1 %598 to i8
  store i8 %599, i8* %44, align 1
  %600 = and i32 %597, 255
  %601 = tail call i32 @llvm.ctpop.i32(i32 %600)
  %602 = trunc i32 %601 to i8
  %603 = and i8 %602, 1
  %604 = xor i8 %603, 1
  store i8 %604, i8* %51, align 1
  %605 = xor i32 %596, %591
  %606 = xor i32 %605, %597
  %607 = lshr i32 %606, 4
  %608 = trunc i32 %607 to i8
  %609 = and i8 %608, 1
  store i8 %609, i8* %56, align 1
  %610 = icmp eq i32 %597, 0
  %611 = zext i1 %610 to i8
  store i8 %611, i8* %59, align 1
  %612 = lshr i32 %597, 31
  %613 = trunc i32 %612 to i8
  store i8 %613, i8* %62, align 1
  %614 = lshr i32 %591, 31
  %615 = lshr i32 %596, 31
  %616 = xor i32 %615, %614
  %617 = xor i32 %612, %614
  %618 = add nuw nsw i32 %617, %616
  %619 = icmp eq i32 %618, 2
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %68, align 1
  %621 = icmp ne i8 %613, 0
  %622 = xor i1 %621, %619
  %.v253 = select i1 %622, i64 12, i64 80
  %623 = add i64 %586, %.v253
  store i64 %623, i64* %3, align 8
  br i1 %622, label %block_46e6fe, label %block_.L_46e742

block_46e6fe:                                     ; preds = %block_.L_46e6f2
  %624 = load i64, i64* bitcast (%G_0x726418_type* @G_0x726418 to i64*), align 8
  store i64 %624, i64* %.pre243, align 8
  %625 = add i64 %587, -120
  %626 = add i64 %623, 11
  store i64 %626, i64* %3, align 8
  %627 = inttoptr i64 %625 to i32*
  %628 = load i32, i32* %627, align 4
  %629 = zext i32 %628 to i64
  store i64 %629, i64* %RCX.i6189, align 8
  %630 = add i64 %587, -88
  %631 = add i64 %623, 14
  store i64 %631, i64* %3, align 8
  %632 = inttoptr i64 %630 to i32*
  %633 = load i32, i32* %632, align 4
  %634 = add i32 %633, %628
  %635 = zext i32 %634 to i64
  store i64 %635, i64* %RCX.i6189, align 8
  %636 = icmp ult i32 %634, %628
  %637 = icmp ult i32 %634, %633
  %638 = or i1 %636, %637
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %44, align 1
  %640 = and i32 %634, 255
  %641 = tail call i32 @llvm.ctpop.i32(i32 %640)
  %642 = trunc i32 %641 to i8
  %643 = and i8 %642, 1
  %644 = xor i8 %643, 1
  store i8 %644, i8* %51, align 1
  %645 = xor i32 %633, %628
  %646 = xor i32 %645, %634
  %647 = lshr i32 %646, 4
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  store i8 %649, i8* %56, align 1
  %650 = icmp eq i32 %634, 0
  %651 = zext i1 %650 to i8
  store i8 %651, i8* %59, align 1
  %652 = lshr i32 %634, 31
  %653 = trunc i32 %652 to i8
  store i8 %653, i8* %62, align 1
  %654 = lshr i32 %628, 31
  %655 = lshr i32 %633, 31
  %656 = xor i32 %652, %654
  %657 = xor i32 %652, %655
  %658 = add nuw nsw i32 %656, %657
  %659 = icmp eq i32 %658, 2
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %68, align 1
  %661 = sext i32 %634 to i64
  store i64 %661, i64* %RDX.i5984, align 8
  %662 = shl nsw i64 %661, 3
  %663 = add i64 %624, %662
  %664 = add i64 %623, 21
  store i64 %664, i64* %3, align 8
  %665 = inttoptr i64 %663 to i64*
  %666 = load i64, i64* %665, align 8
  store i64 %666, i64* %.pre243, align 8
  %667 = add i64 %587, -116
  %668 = add i64 %623, 24
  store i64 %668, i64* %3, align 8
  %669 = inttoptr i64 %667 to i32*
  %670 = load i32, i32* %669, align 4
  %671 = zext i32 %670 to i64
  store i64 %671, i64* %RCX.i6189, align 8
  %672 = add i64 %623, 27
  store i64 %672, i64* %3, align 8
  %673 = load i32, i32* %590, align 4
  %674 = add i32 %673, %670
  %675 = zext i32 %674 to i64
  store i64 %675, i64* %RCX.i6189, align 8
  %676 = icmp ult i32 %674, %670
  %677 = icmp ult i32 %674, %673
  %678 = or i1 %676, %677
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %44, align 1
  %680 = and i32 %674, 255
  %681 = tail call i32 @llvm.ctpop.i32(i32 %680)
  %682 = trunc i32 %681 to i8
  %683 = and i8 %682, 1
  %684 = xor i8 %683, 1
  store i8 %684, i8* %51, align 1
  %685 = xor i32 %673, %670
  %686 = xor i32 %685, %674
  %687 = lshr i32 %686, 4
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  store i8 %689, i8* %56, align 1
  %690 = icmp eq i32 %674, 0
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %59, align 1
  %692 = lshr i32 %674, 31
  %693 = trunc i32 %692 to i8
  store i8 %693, i8* %62, align 1
  %694 = lshr i32 %670, 31
  %695 = lshr i32 %673, 31
  %696 = xor i32 %692, %694
  %697 = xor i32 %692, %695
  %698 = add nuw nsw i32 %696, %697
  %699 = icmp eq i32 %698, 2
  %700 = zext i1 %699 to i8
  store i8 %700, i8* %68, align 1
  %701 = sext i32 %674 to i64
  store i64 %701, i64* %RDX.i5984, align 8
  %702 = shl nsw i64 %701, 1
  %703 = add i64 %666, %702
  %704 = add i64 %623, 34
  store i64 %704, i64* %3, align 8
  %705 = inttoptr i64 %703 to i16*
  %706 = load i16, i16* %705, align 2
  store i16 %706, i16* %SI.i5967, align 2
  %707 = load i64, i64* %RBP.i, align 8
  %708 = add i64 %707, -88
  %709 = add i64 %623, 38
  store i64 %709, i64* %3, align 8
  %710 = inttoptr i64 %708 to i32*
  %711 = load i32, i32* %710, align 4
  %712 = sext i32 %711 to i64
  store i64 %712, i64* %.pre243, align 8
  %713 = shl nsw i64 %712, 3
  %714 = add nsw i64 %713, 7126064
  %715 = add i64 %623, 46
  store i64 %715, i64* %3, align 8
  %716 = inttoptr i64 %714 to i64*
  %717 = load i64, i64* %716, align 8
  store i64 %717, i64* %.pre243, align 8
  %718 = add i64 %707, -84
  %719 = add i64 %623, 50
  store i64 %719, i64* %3, align 8
  %720 = inttoptr i64 %718 to i32*
  %721 = load i32, i32* %720, align 4
  %722 = sext i32 %721 to i64
  store i64 %722, i64* %RDX.i5984, align 8
  %723 = shl nsw i64 %722, 1
  %724 = add i64 %723, %717
  %725 = add i64 %623, 54
  store i64 %725, i64* %3, align 8
  %726 = inttoptr i64 %724 to i16*
  store i16 %706, i16* %726, align 2
  %727 = load i64, i64* %RBP.i, align 8
  %728 = add i64 %727, -84
  %729 = load i64, i64* %3, align 8
  %730 = add i64 %729, 3
  store i64 %730, i64* %3, align 8
  %731 = inttoptr i64 %728 to i32*
  %732 = load i32, i32* %731, align 4
  %733 = add i32 %732, 1
  %734 = zext i32 %733 to i64
  store i64 %734, i64* %.pre243, align 8
  %735 = icmp eq i32 %732, -1
  %736 = icmp eq i32 %733, 0
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  store i8 %738, i8* %44, align 1
  %739 = and i32 %733, 255
  %740 = tail call i32 @llvm.ctpop.i32(i32 %739)
  %741 = trunc i32 %740 to i8
  %742 = and i8 %741, 1
  %743 = xor i8 %742, 1
  store i8 %743, i8* %51, align 1
  %744 = xor i32 %733, %732
  %745 = lshr i32 %744, 4
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  store i8 %747, i8* %56, align 1
  %748 = zext i1 %736 to i8
  store i8 %748, i8* %59, align 1
  %749 = lshr i32 %733, 31
  %750 = trunc i32 %749 to i8
  store i8 %750, i8* %62, align 1
  %751 = lshr i32 %732, 31
  %752 = xor i32 %749, %751
  %753 = add nuw nsw i32 %752, %749
  %754 = icmp eq i32 %753, 2
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %68, align 1
  %756 = add i64 %729, 9
  store i64 %756, i64* %3, align 8
  store i32 %733, i32* %731, align 4
  %757 = load i64, i64* %3, align 8
  %758 = add i64 %757, -75
  store i64 %758, i64* %3, align 8
  br label %block_.L_46e6f2

block_.L_46e742:                                  ; preds = %block_.L_46e6f2
  %759 = add i64 %587, -88
  %760 = add i64 %623, 8
  store i64 %760, i64* %3, align 8
  %761 = inttoptr i64 %759 to i32*
  %762 = load i32, i32* %761, align 4
  %763 = add i32 %762, 1
  %764 = zext i32 %763 to i64
  store i64 %764, i64* %.pre243, align 8
  %765 = icmp eq i32 %762, -1
  %766 = icmp eq i32 %763, 0
  %767 = or i1 %765, %766
  %768 = zext i1 %767 to i8
  store i8 %768, i8* %44, align 1
  %769 = and i32 %763, 255
  %770 = tail call i32 @llvm.ctpop.i32(i32 %769)
  %771 = trunc i32 %770 to i8
  %772 = and i8 %771, 1
  %773 = xor i8 %772, 1
  store i8 %773, i8* %51, align 1
  %774 = xor i32 %763, %762
  %775 = lshr i32 %774, 4
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  store i8 %777, i8* %56, align 1
  %778 = zext i1 %766 to i8
  store i8 %778, i8* %59, align 1
  %779 = lshr i32 %763, 31
  %780 = trunc i32 %779 to i8
  store i8 %780, i8* %62, align 1
  %781 = lshr i32 %762, 31
  %782 = xor i32 %779, %781
  %783 = add nuw nsw i32 %782, %779
  %784 = icmp eq i32 %783, 2
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %68, align 1
  %786 = add i64 %623, 14
  store i64 %786, i64* %3, align 8
  store i32 %763, i32* %761, align 4
  %787 = load i64, i64* %3, align 8
  %788 = add i64 %787, -113
  store i64 %788, i64* %3, align 8
  br label %block_.L_46e6df

block_.L_46e755:                                  ; preds = %block_.L_46e6df
  %789 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %789, i64* %.pre243, align 8
  %790 = add i64 %789, 3292
  %791 = add i64 %582, 15
  store i64 %791, i64* %3, align 8
  %792 = inttoptr i64 %790 to i32*
  %793 = load i32, i32* %792, align 4
  store i8 0, i8* %44, align 1
  %794 = and i32 %793, 255
  %795 = tail call i32 @llvm.ctpop.i32(i32 %794)
  %796 = trunc i32 %795 to i8
  %797 = and i8 %796, 1
  %798 = xor i8 %797, 1
  store i8 %798, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %799 = icmp eq i32 %793, 0
  %800 = zext i1 %799 to i8
  store i8 %800, i8* %59, align 1
  %801 = lshr i32 %793, 31
  %802 = trunc i32 %801 to i8
  store i8 %802, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v257 = select i1 %799, i64 5491, i64 21
  %803 = add i64 %582, %.v257
  store i64 %803, i64* %3, align 8
  br i1 %799, label %block_.L_46fcc8, label %block_46e76a

block_46e76a:                                     ; preds = %block_.L_46e755
  %804 = add i64 %546, -60
  %805 = add i64 %803, 4
  store i64 %805, i64* %3, align 8
  %806 = inttoptr i64 %804 to i32*
  %807 = load i32, i32* %806, align 4
  %808 = add i32 %807, -6
  %809 = icmp ult i32 %807, 6
  %810 = zext i1 %809 to i8
  store i8 %810, i8* %44, align 1
  %811 = and i32 %808, 255
  %812 = tail call i32 @llvm.ctpop.i32(i32 %811)
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  store i8 %815, i8* %51, align 1
  %816 = xor i32 %808, %807
  %817 = lshr i32 %816, 4
  %818 = trunc i32 %817 to i8
  %819 = and i8 %818, 1
  store i8 %819, i8* %56, align 1
  %820 = icmp eq i32 %808, 0
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %59, align 1
  %822 = lshr i32 %808, 31
  %823 = trunc i32 %822 to i8
  store i8 %823, i8* %62, align 1
  %824 = lshr i32 %807, 31
  %825 = xor i32 %822, %824
  %826 = add nuw nsw i32 %825, %824
  %827 = icmp eq i32 %826, 2
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %68, align 1
  %829 = icmp ne i8 %823, 0
  %830 = xor i1 %829, %827
  %831 = or i1 %820, %830
  %.v258 = select i1 %831, i64 334, i64 10
  %832 = add i64 %803, %.v258
  store i64 %832, i64* %3, align 8
  br i1 %831, label %block_.L_46e8b8, label %block_46e774

block_46e774:                                     ; preds = %block_46e76a
  %833 = add i64 %546, -144
  %834 = add i64 %832, 7
  store i64 %834, i64* %3, align 8
  %835 = inttoptr i64 %833 to i64*
  %836 = load i64, i64* %835, align 8
  store i64 %836, i64* %.pre243, align 8
  %837 = add i64 %546, -100
  %838 = add i64 %832, 11
  store i64 %838, i64* %3, align 8
  %839 = inttoptr i64 %837 to i32*
  %840 = load i32, i32* %839, align 4
  %841 = sext i32 %840 to i64
  store i64 %841, i64* %RCX.i6189, align 8
  %842 = shl nsw i64 %841, 3
  %843 = add i64 %842, %836
  %844 = add i64 %832, 15
  store i64 %844, i64* %3, align 8
  %845 = inttoptr i64 %843 to i64*
  %846 = load i64, i64* %845, align 8
  store i64 %846, i64* %.pre243, align 8
  %847 = add i64 %546, -104
  %848 = add i64 %832, 19
  store i64 %848, i64* %3, align 8
  %849 = inttoptr i64 %847 to i32*
  %850 = load i32, i32* %849, align 4
  %851 = sext i32 %850 to i64
  store i64 %851, i64* %RCX.i6189, align 8
  %852 = shl nsw i64 %851, 3
  %853 = add i64 %852, %846
  %854 = add i64 %832, 23
  store i64 %854, i64* %3, align 8
  %855 = inttoptr i64 %853 to i64*
  %856 = load i64, i64* %855, align 8
  store i64 %856, i64* %.pre243, align 8
  %857 = add i64 %546, -48
  %858 = add i64 %832, 27
  store i64 %858, i64* %3, align 8
  %859 = inttoptr i64 %857 to i32*
  %860 = load i32, i32* %859, align 4
  %861 = sext i32 %860 to i64
  store i64 %861, i64* %RCX.i6189, align 8
  %862 = shl nsw i64 %861, 3
  %863 = add i64 %862, %856
  %864 = add i64 %832, 31
  store i64 %864, i64* %3, align 8
  %865 = inttoptr i64 %863 to i64*
  %866 = load i64, i64* %865, align 8
  store i64 %866, i64* %.pre243, align 8
  %867 = add i64 %546, -42
  %868 = add i64 %832, 36
  store i64 %868, i64* %3, align 8
  %869 = inttoptr i64 %867 to i16*
  %870 = load i16, i16* %869, align 2
  %871 = sext i16 %870 to i64
  store i64 %871, i64* %RCX.i6189, align 8
  %872 = shl nsw i64 %871, 3
  %873 = add i64 %872, %866
  %874 = add i64 %832, 40
  store i64 %874, i64* %3, align 8
  %875 = inttoptr i64 %873 to i64*
  %876 = load i64, i64* %875, align 8
  store i64 %876, i64* %.pre243, align 8
  %877 = add i64 %876, 40
  %878 = add i64 %832, 44
  store i64 %878, i64* %3, align 8
  %879 = inttoptr i64 %877 to i64*
  %880 = load i64, i64* %879, align 8
  store i64 %880, i64* %.pre243, align 8
  %881 = add i64 %832, 47
  store i64 %881, i64* %3, align 8
  %882 = inttoptr i64 %880 to i16*
  %883 = load i16, i16* %882, align 2
  %884 = sext i16 %883 to i64
  %885 = and i64 %884, 4294967295
  store i64 %885, i64* %RDX.i5984, align 8
  %886 = sext i16 %883 to i32
  store i32 %886, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %887 = add i64 %832, 61
  store i64 %887, i64* %3, align 8
  %888 = load i64, i64* %835, align 8
  store i64 %888, i64* %.pre243, align 8
  %889 = add i64 %832, 65
  store i64 %889, i64* %3, align 8
  %890 = load i32, i32* %839, align 4
  %891 = sext i32 %890 to i64
  store i64 %891, i64* %RCX.i6189, align 8
  %892 = shl nsw i64 %891, 3
  %893 = add i64 %892, %888
  %894 = add i64 %832, 69
  store i64 %894, i64* %3, align 8
  %895 = inttoptr i64 %893 to i64*
  %896 = load i64, i64* %895, align 8
  store i64 %896, i64* %.pre243, align 8
  %897 = add i64 %832, 73
  store i64 %897, i64* %3, align 8
  %898 = load i32, i32* %849, align 4
  %899 = sext i32 %898 to i64
  store i64 %899, i64* %RCX.i6189, align 8
  %900 = shl nsw i64 %899, 3
  %901 = add i64 %900, %896
  %902 = add i64 %832, 77
  store i64 %902, i64* %3, align 8
  %903 = inttoptr i64 %901 to i64*
  %904 = load i64, i64* %903, align 8
  store i64 %904, i64* %.pre243, align 8
  %905 = load i64, i64* %RBP.i, align 8
  %906 = add i64 %905, -48
  %907 = add i64 %832, 81
  store i64 %907, i64* %3, align 8
  %908 = inttoptr i64 %906 to i32*
  %909 = load i32, i32* %908, align 4
  %910 = sext i32 %909 to i64
  store i64 %910, i64* %RCX.i6189, align 8
  %911 = shl nsw i64 %910, 3
  %912 = add i64 %911, %904
  %913 = add i64 %832, 85
  store i64 %913, i64* %3, align 8
  %914 = inttoptr i64 %912 to i64*
  %915 = load i64, i64* %914, align 8
  store i64 %915, i64* %.pre243, align 8
  %916 = add i64 %905, -42
  %917 = add i64 %832, 90
  store i64 %917, i64* %3, align 8
  %918 = inttoptr i64 %916 to i16*
  %919 = load i16, i16* %918, align 2
  %920 = sext i16 %919 to i64
  store i64 %920, i64* %RCX.i6189, align 8
  %921 = shl nsw i64 %920, 3
  %922 = add i64 %921, %915
  %923 = add i64 %832, 94
  store i64 %923, i64* %3, align 8
  %924 = inttoptr i64 %922 to i64*
  %925 = load i64, i64* %924, align 8
  store i64 %925, i64* %.pre243, align 8
  %926 = add i64 %925, 40
  %927 = add i64 %832, 98
  store i64 %927, i64* %3, align 8
  %928 = inttoptr i64 %926 to i64*
  %929 = load i64, i64* %928, align 8
  store i64 %929, i64* %.pre243, align 8
  %930 = add i64 %929, 2
  %931 = add i64 %832, 102
  store i64 %931, i64* %3, align 8
  %932 = inttoptr i64 %930 to i16*
  %933 = load i16, i16* %932, align 2
  %934 = sext i16 %933 to i64
  %935 = and i64 %934, 4294967295
  store i64 %935, i64* %RDX.i5984, align 8
  %936 = sext i16 %933 to i32
  store i32 %936, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %937 = add i64 %832, 113
  store i64 %937, i64* %3, align 8
  %938 = load i32, i32* %908, align 4
  %939 = add i32 %938, -1
  %940 = icmp eq i32 %938, 0
  %941 = zext i1 %940 to i8
  store i8 %941, i8* %44, align 1
  %942 = and i32 %939, 255
  %943 = tail call i32 @llvm.ctpop.i32(i32 %942)
  %944 = trunc i32 %943 to i8
  %945 = and i8 %944, 1
  %946 = xor i8 %945, 1
  store i8 %946, i8* %51, align 1
  %947 = xor i32 %939, %938
  %948 = lshr i32 %947, 4
  %949 = trunc i32 %948 to i8
  %950 = and i8 %949, 1
  store i8 %950, i8* %56, align 1
  %951 = icmp eq i32 %939, 0
  %952 = zext i1 %951 to i8
  store i8 %952, i8* %59, align 1
  %953 = lshr i32 %939, 31
  %954 = trunc i32 %953 to i8
  store i8 %954, i8* %62, align 1
  %955 = lshr i32 %938, 31
  %956 = xor i32 %953, %955
  %957 = add nuw nsw i32 %956, %955
  %958 = icmp eq i32 %957, 2
  %959 = zext i1 %958 to i8
  store i8 %959, i8* %68, align 1
  %.v259 = select i1 %951, i64 119, i64 201
  %960 = add i64 %832, %.v259
  %961 = add i64 %960, 8
  store i64 %961, i64* %3, align 8
  br i1 %951, label %block_46e7eb, label %block_.L_46e83d

block_46e7eb:                                     ; preds = %block_46e774
  %962 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %962, i64* %.pre243, align 8
  %963 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %963, i64* %RCX.i6189, align 8
  %964 = add i64 %963, 152
  %965 = add i64 %960, 22
  store i64 %965, i64* %3, align 8
  %966 = inttoptr i64 %964 to i32*
  %967 = load i32, i32* %966, align 4
  %968 = sext i32 %967 to i64
  %969 = ashr i64 %968, 1
  %970 = lshr i64 %969, 1
  %971 = trunc i64 %969 to i8
  %972 = and i8 %971, 1
  %973 = trunc i64 %970 to i32
  %974 = and i64 %970, 4294967295
  store i64 %974, i64* %RDX.i5984, align 8
  store i8 %972, i8* %44, align 1
  %975 = and i32 %973, 255
  %976 = tail call i32 @llvm.ctpop.i32(i32 %975)
  %977 = trunc i32 %976 to i8
  %978 = and i8 %977, 1
  %979 = xor i8 %978, 1
  store i8 %979, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %980 = icmp eq i32 %973, 0
  %981 = zext i1 %980 to i8
  store i8 %981, i8* %59, align 1
  %982 = lshr i64 %969, 32
  %983 = trunc i64 %982 to i8
  %984 = and i8 %983, 1
  store i8 %984, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %985 = add i64 %905, -100
  %986 = add i64 %960, 28
  store i64 %986, i64* %3, align 8
  %987 = trunc i64 %970 to i32
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988, align 4
  %990 = add i32 %989, %987
  %991 = zext i32 %990 to i64
  store i64 %991, i64* %RDX.i5984, align 8
  %992 = icmp ult i32 %990, %987
  %993 = icmp ult i32 %990, %989
  %994 = or i1 %992, %993
  %995 = zext i1 %994 to i8
  store i8 %995, i8* %44, align 1
  %996 = and i32 %990, 255
  %997 = tail call i32 @llvm.ctpop.i32(i32 %996)
  %998 = trunc i32 %997 to i8
  %999 = and i8 %998, 1
  %1000 = xor i8 %999, 1
  store i8 %1000, i8* %51, align 1
  %1001 = xor i32 %989, %987
  %1002 = xor i32 %1001, %990
  %1003 = lshr i32 %1002, 4
  %1004 = trunc i32 %1003 to i8
  %1005 = and i8 %1004, 1
  store i8 %1005, i8* %56, align 1
  %1006 = icmp eq i32 %990, 0
  %1007 = zext i1 %1006 to i8
  store i8 %1007, i8* %59, align 1
  %1008 = lshr i32 %990, 31
  %1009 = trunc i32 %1008 to i8
  store i8 %1009, i8* %62, align 1
  %1010 = lshr i64 %969, 32
  %1011 = trunc i64 %1010 to i32
  %1012 = and i32 %1011, 1
  %1013 = lshr i32 %989, 31
  %1014 = xor i32 %1008, %1012
  %1015 = xor i32 %1008, %1013
  %1016 = add nuw nsw i32 %1014, %1015
  %1017 = icmp eq i32 %1016, 2
  %1018 = zext i1 %1017 to i8
  store i8 %1018, i8* %68, align 1
  %1019 = sext i32 %990 to i64
  store i64 %1019, i64* %RCX.i6189, align 8
  %1020 = shl nsw i64 %1019, 3
  %1021 = add i64 %962, %1020
  %1022 = add i64 %960, 35
  store i64 %1022, i64* %3, align 8
  %1023 = inttoptr i64 %1021 to i64*
  %1024 = load i64, i64* %1023, align 8
  store i64 %1024, i64* %.pre243, align 8
  store i64 %963, i64* %RCX.i6189, align 8
  %1025 = add i64 %963, 156
  %1026 = add i64 %960, 49
  store i64 %1026, i64* %3, align 8
  %1027 = inttoptr i64 %1025 to i32*
  %1028 = load i32, i32* %1027, align 4
  %1029 = sext i32 %1028 to i64
  %1030 = ashr i64 %1029, 1
  %1031 = lshr i64 %1030, 1
  %1032 = trunc i64 %1030 to i8
  %1033 = and i8 %1032, 1
  %1034 = trunc i64 %1031 to i32
  %1035 = and i64 %1031, 4294967295
  store i64 %1035, i64* %RDX.i5984, align 8
  store i8 %1033, i8* %44, align 1
  %1036 = and i32 %1034, 255
  %1037 = tail call i32 @llvm.ctpop.i32(i32 %1036)
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = xor i8 %1039, 1
  store i8 %1040, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1041 = icmp eq i32 %1034, 0
  %1042 = zext i1 %1041 to i8
  store i8 %1042, i8* %59, align 1
  %1043 = lshr i64 %1030, 32
  %1044 = trunc i64 %1043 to i8
  %1045 = and i8 %1044, 1
  store i8 %1045, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1046 = load i64, i64* %RBP.i, align 8
  %1047 = add i64 %1046, -104
  %1048 = add i64 %960, 55
  store i64 %1048, i64* %3, align 8
  %1049 = trunc i64 %1031 to i32
  %1050 = inttoptr i64 %1047 to i32*
  %1051 = load i32, i32* %1050, align 4
  %1052 = add i32 %1051, %1049
  %1053 = zext i32 %1052 to i64
  store i64 %1053, i64* %RDX.i5984, align 8
  %1054 = icmp ult i32 %1052, %1049
  %1055 = icmp ult i32 %1052, %1051
  %1056 = or i1 %1054, %1055
  %1057 = zext i1 %1056 to i8
  store i8 %1057, i8* %44, align 1
  %1058 = and i32 %1052, 255
  %1059 = tail call i32 @llvm.ctpop.i32(i32 %1058)
  %1060 = trunc i32 %1059 to i8
  %1061 = and i8 %1060, 1
  %1062 = xor i8 %1061, 1
  store i8 %1062, i8* %51, align 1
  %1063 = xor i32 %1051, %1049
  %1064 = xor i32 %1063, %1052
  %1065 = lshr i32 %1064, 4
  %1066 = trunc i32 %1065 to i8
  %1067 = and i8 %1066, 1
  store i8 %1067, i8* %56, align 1
  %1068 = icmp eq i32 %1052, 0
  %1069 = zext i1 %1068 to i8
  store i8 %1069, i8* %59, align 1
  %1070 = lshr i32 %1052, 31
  %1071 = trunc i32 %1070 to i8
  store i8 %1071, i8* %62, align 1
  %1072 = lshr i64 %1030, 32
  %1073 = trunc i64 %1072 to i32
  %1074 = and i32 %1073, 1
  %1075 = lshr i32 %1051, 31
  %1076 = xor i32 %1070, %1074
  %1077 = xor i32 %1070, %1075
  %1078 = add nuw nsw i32 %1076, %1077
  %1079 = icmp eq i32 %1078, 2
  %1080 = zext i1 %1079 to i8
  store i8 %1080, i8* %68, align 1
  %1081 = sext i32 %1052 to i64
  store i64 %1081, i64* %RCX.i6189, align 8
  %1082 = shl nsw i64 %1081, 3
  %1083 = add i64 %1024, %1082
  %1084 = add i64 %960, 62
  store i64 %1084, i64* %3, align 8
  %1085 = inttoptr i64 %1083 to i64*
  %1086 = load i64, i64* %1085, align 8
  store i64 %1086, i64* %.pre243, align 8
  %1087 = add i64 %960, 65
  store i64 %1087, i64* %3, align 8
  %1088 = inttoptr i64 %1086 to i64*
  %1089 = load i64, i64* %1088, align 8
  store i64 %1089, i64* %.pre243, align 8
  %1090 = add i64 %1089, 40
  %1091 = add i64 %960, 69
  store i64 %1091, i64* %3, align 8
  %1092 = inttoptr i64 %1090 to i64*
  %1093 = load i64, i64* %1092, align 8
  store i64 %1093, i64* %.pre243, align 8
  %1094 = add i64 %960, 71
  store i64 %1094, i64* %3, align 8
  %1095 = inttoptr i64 %1093 to i32*
  %1096 = load i32, i32* %1095, align 4
  %1097 = zext i32 %1096 to i64
  store i64 %1097, i64* %RDX.i5984, align 8
  %1098 = add i64 %1046, -244
  %1099 = add i64 %960, 77
  store i64 %1099, i64* %3, align 8
  %1100 = inttoptr i64 %1098 to i32*
  store i32 %1096, i32* %1100, align 4
  %1101 = load i64, i64* %3, align 8
  %1102 = add i64 %1101, 88
  store i64 %1102, i64* %3, align 8
  br label %block_.L_46e890

block_.L_46e83d:                                  ; preds = %block_46e774
  %1103 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %1103, i64* %.pre243, align 8
  %1104 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1104, i64* %RCX.i6189, align 8
  %1105 = add i64 %1104, 152
  %1106 = add i64 %960, 22
  store i64 %1106, i64* %3, align 8
  %1107 = inttoptr i64 %1105 to i32*
  %1108 = load i32, i32* %1107, align 4
  %1109 = sext i32 %1108 to i64
  %1110 = ashr i64 %1109, 1
  %1111 = lshr i64 %1110, 1
  %1112 = trunc i64 %1110 to i8
  %1113 = and i8 %1112, 1
  %1114 = trunc i64 %1111 to i32
  %1115 = and i64 %1111, 4294967295
  store i64 %1115, i64* %RDX.i5984, align 8
  store i8 %1113, i8* %44, align 1
  %1116 = and i32 %1114, 255
  %1117 = tail call i32 @llvm.ctpop.i32(i32 %1116)
  %1118 = trunc i32 %1117 to i8
  %1119 = and i8 %1118, 1
  %1120 = xor i8 %1119, 1
  store i8 %1120, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1121 = icmp eq i32 %1114, 0
  %1122 = zext i1 %1121 to i8
  store i8 %1122, i8* %59, align 1
  %1123 = lshr i64 %1110, 32
  %1124 = trunc i64 %1123 to i8
  %1125 = and i8 %1124, 1
  store i8 %1125, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1126 = add i64 %905, -100
  %1127 = add i64 %960, 28
  store i64 %1127, i64* %3, align 8
  %1128 = trunc i64 %1111 to i32
  %1129 = inttoptr i64 %1126 to i32*
  %1130 = load i32, i32* %1129, align 4
  %1131 = add i32 %1130, %1128
  %1132 = zext i32 %1131 to i64
  store i64 %1132, i64* %RDX.i5984, align 8
  %1133 = icmp ult i32 %1131, %1128
  %1134 = icmp ult i32 %1131, %1130
  %1135 = or i1 %1133, %1134
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %44, align 1
  %1137 = and i32 %1131, 255
  %1138 = tail call i32 @llvm.ctpop.i32(i32 %1137)
  %1139 = trunc i32 %1138 to i8
  %1140 = and i8 %1139, 1
  %1141 = xor i8 %1140, 1
  store i8 %1141, i8* %51, align 1
  %1142 = xor i32 %1130, %1128
  %1143 = xor i32 %1142, %1131
  %1144 = lshr i32 %1143, 4
  %1145 = trunc i32 %1144 to i8
  %1146 = and i8 %1145, 1
  store i8 %1146, i8* %56, align 1
  %1147 = icmp eq i32 %1131, 0
  %1148 = zext i1 %1147 to i8
  store i8 %1148, i8* %59, align 1
  %1149 = lshr i32 %1131, 31
  %1150 = trunc i32 %1149 to i8
  store i8 %1150, i8* %62, align 1
  %1151 = lshr i64 %1110, 32
  %1152 = trunc i64 %1151 to i32
  %1153 = and i32 %1152, 1
  %1154 = lshr i32 %1130, 31
  %1155 = xor i32 %1149, %1153
  %1156 = xor i32 %1149, %1154
  %1157 = add nuw nsw i32 %1155, %1156
  %1158 = icmp eq i32 %1157, 2
  %1159 = zext i1 %1158 to i8
  store i8 %1159, i8* %68, align 1
  %1160 = sext i32 %1131 to i64
  store i64 %1160, i64* %RCX.i6189, align 8
  %1161 = shl nsw i64 %1160, 3
  %1162 = add i64 %1103, %1161
  %1163 = add i64 %960, 35
  store i64 %1163, i64* %3, align 8
  %1164 = inttoptr i64 %1162 to i64*
  %1165 = load i64, i64* %1164, align 8
  store i64 %1165, i64* %.pre243, align 8
  store i64 %1104, i64* %RCX.i6189, align 8
  %1166 = add i64 %1104, 156
  %1167 = add i64 %960, 49
  store i64 %1167, i64* %3, align 8
  %1168 = inttoptr i64 %1166 to i32*
  %1169 = load i32, i32* %1168, align 4
  %1170 = sext i32 %1169 to i64
  %1171 = ashr i64 %1170, 1
  %1172 = lshr i64 %1171, 1
  %1173 = trunc i64 %1171 to i8
  %1174 = and i8 %1173, 1
  %1175 = trunc i64 %1172 to i32
  %1176 = and i64 %1172, 4294967295
  store i64 %1176, i64* %RDX.i5984, align 8
  store i8 %1174, i8* %44, align 1
  %1177 = and i32 %1175, 255
  %1178 = tail call i32 @llvm.ctpop.i32(i32 %1177)
  %1179 = trunc i32 %1178 to i8
  %1180 = and i8 %1179, 1
  %1181 = xor i8 %1180, 1
  store i8 %1181, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1182 = icmp eq i32 %1175, 0
  %1183 = zext i1 %1182 to i8
  store i8 %1183, i8* %59, align 1
  %1184 = lshr i64 %1171, 32
  %1185 = trunc i64 %1184 to i8
  %1186 = and i8 %1185, 1
  store i8 %1186, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1187 = load i64, i64* %RBP.i, align 8
  %1188 = add i64 %1187, -104
  %1189 = add i64 %960, 55
  store i64 %1189, i64* %3, align 8
  %1190 = trunc i64 %1172 to i32
  %1191 = inttoptr i64 %1188 to i32*
  %1192 = load i32, i32* %1191, align 4
  %1193 = add i32 %1192, %1190
  %1194 = zext i32 %1193 to i64
  store i64 %1194, i64* %RDX.i5984, align 8
  %1195 = icmp ult i32 %1193, %1190
  %1196 = icmp ult i32 %1193, %1192
  %1197 = or i1 %1195, %1196
  %1198 = zext i1 %1197 to i8
  store i8 %1198, i8* %44, align 1
  %1199 = and i32 %1193, 255
  %1200 = tail call i32 @llvm.ctpop.i32(i32 %1199)
  %1201 = trunc i32 %1200 to i8
  %1202 = and i8 %1201, 1
  %1203 = xor i8 %1202, 1
  store i8 %1203, i8* %51, align 1
  %1204 = xor i32 %1192, %1190
  %1205 = xor i32 %1204, %1193
  %1206 = lshr i32 %1205, 4
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  store i8 %1208, i8* %56, align 1
  %1209 = icmp eq i32 %1193, 0
  %1210 = zext i1 %1209 to i8
  store i8 %1210, i8* %59, align 1
  %1211 = lshr i32 %1193, 31
  %1212 = trunc i32 %1211 to i8
  store i8 %1212, i8* %62, align 1
  %1213 = lshr i64 %1171, 32
  %1214 = trunc i64 %1213 to i32
  %1215 = and i32 %1214, 1
  %1216 = lshr i32 %1192, 31
  %1217 = xor i32 %1211, %1215
  %1218 = xor i32 %1211, %1216
  %1219 = add nuw nsw i32 %1217, %1218
  %1220 = icmp eq i32 %1219, 2
  %1221 = zext i1 %1220 to i8
  store i8 %1221, i8* %68, align 1
  %1222 = sext i32 %1193 to i64
  store i64 %1222, i64* %RCX.i6189, align 8
  %1223 = shl nsw i64 %1222, 3
  %1224 = add i64 %1165, %1223
  %1225 = add i64 %960, 62
  store i64 %1225, i64* %3, align 8
  %1226 = inttoptr i64 %1224 to i64*
  %1227 = load i64, i64* %1226, align 8
  store i64 %1227, i64* %.pre243, align 8
  %1228 = add i64 %1187, -42
  %1229 = add i64 %960, 67
  store i64 %1229, i64* %3, align 8
  %1230 = inttoptr i64 %1228 to i16*
  %1231 = load i16, i16* %1230, align 2
  %1232 = sext i16 %1231 to i64
  store i64 %1232, i64* %RCX.i6189, align 8
  %1233 = shl nsw i64 %1232, 3
  %1234 = add i64 %1233, %1227
  %1235 = add i64 %960, 71
  store i64 %1235, i64* %3, align 8
  %1236 = inttoptr i64 %1234 to i64*
  %1237 = load i64, i64* %1236, align 8
  store i64 %1237, i64* %.pre243, align 8
  %1238 = add i64 %1237, 40
  %1239 = add i64 %960, 75
  store i64 %1239, i64* %3, align 8
  %1240 = inttoptr i64 %1238 to i64*
  %1241 = load i64, i64* %1240, align 8
  store i64 %1241, i64* %.pre243, align 8
  %1242 = add i64 %960, 77
  store i64 %1242, i64* %3, align 8
  %1243 = inttoptr i64 %1241 to i32*
  %1244 = load i32, i32* %1243, align 4
  %1245 = zext i32 %1244 to i64
  store i64 %1245, i64* %RDX.i5984, align 8
  %1246 = add i64 %1187, -244
  %1247 = add i64 %960, 83
  store i64 %1247, i64* %3, align 8
  %1248 = inttoptr i64 %1246 to i32*
  store i32 %1244, i32* %1248, align 4
  %.pre146 = load i64, i64* %3, align 8
  br label %block_.L_46e890

block_.L_46e890:                                  ; preds = %block_.L_46e83d, %block_46e7eb
  %1249 = phi i64 [ %.pre146, %block_.L_46e83d ], [ %1102, %block_46e7eb ]
  %1250 = load i64, i64* %RBP.i, align 8
  %1251 = add i64 %1250, -244
  %1252 = add i64 %1249, 6
  store i64 %1252, i64* %3, align 8
  %1253 = inttoptr i64 %1251 to i32*
  %1254 = load i32, i32* %1253, align 4
  %1255 = zext i32 %1254 to i64
  store i64 2, i64* %RCX.i6189, align 8
  store i32 %1254, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i64 %1255, i64* %.pre243, align 8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1257 = sext i32 %1254 to i64
  %1258 = lshr i64 %1257, 32
  store i64 %1258, i64* %1256, align 8
  %1259 = add i64 %1249, 28
  store i64 %1259, i64* %3, align 8
  %1260 = shl nuw i64 %1258, 32
  %1261 = or i64 %1260, %1255
  %1262 = sdiv i64 %1261, 2
  %1263 = shl i64 %1262, 32
  %1264 = ashr exact i64 %1263, 32
  %1265 = icmp eq i64 %1262, %1264
  br i1 %1265, label %1268, label %1266

; <label>:1266:                                   ; preds = %block_.L_46e890
  %1267 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1259, %struct.Memory* %MEMORY.1)
  %.pre147 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %.pre148 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit5749

; <label>:1268:                                   ; preds = %block_.L_46e890
  %1269 = srem i64 %1261, 2
  %1270 = and i64 %1262, 4294967295
  store i64 %1270, i64* %.pre243, align 8
  %1271 = and i64 %1269, 4294967295
  store i64 %1271, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1272 = trunc i64 %1262 to i32
  br label %routine_idivl__ecx.exit5749

routine_idivl__ecx.exit5749:                      ; preds = %1268, %1266
  %1273 = phi i64 [ %.pre148, %1266 ], [ %1259, %1268 ]
  %1274 = phi i32 [ %.pre147, %1266 ], [ %1272, %1268 ]
  %1275 = phi %struct.Memory* [ %1267, %1266 ], [ %MEMORY.1, %1268 ]
  %1276 = add i64 %1273, 7
  store i64 %1276, i64* %3, align 8
  store i32 %1274, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %1277 = add i64 %1273, 1024
  br label %block_.L_46ecac

block_.L_46e8b8:                                  ; preds = %block_46e76a
  %1278 = add i64 %832, 4
  store i64 %1278, i64* %3, align 8
  %1279 = load i32, i32* %806, align 4
  %1280 = add i32 %1279, -4
  %1281 = icmp ult i32 %1279, 4
  %1282 = zext i1 %1281 to i8
  store i8 %1282, i8* %44, align 1
  %1283 = and i32 %1280, 255
  %1284 = tail call i32 @llvm.ctpop.i32(i32 %1283)
  %1285 = trunc i32 %1284 to i8
  %1286 = and i8 %1285, 1
  %1287 = xor i8 %1286, 1
  store i8 %1287, i8* %51, align 1
  %1288 = xor i32 %1280, %1279
  %1289 = lshr i32 %1288, 4
  %1290 = trunc i32 %1289 to i8
  %1291 = and i8 %1290, 1
  store i8 %1291, i8* %56, align 1
  %1292 = icmp eq i32 %1280, 0
  %1293 = zext i1 %1292 to i8
  store i8 %1293, i8* %59, align 1
  %1294 = lshr i32 %1280, 31
  %1295 = trunc i32 %1294 to i8
  store i8 %1295, i8* %62, align 1
  %1296 = lshr i32 %1279, 31
  %1297 = xor i32 %1294, %1296
  %1298 = add nuw nsw i32 %1297, %1296
  %1299 = icmp eq i32 %1298, 2
  %1300 = zext i1 %1299 to i8
  store i8 %1300, i8* %68, align 1
  %1301 = icmp ne i8 %1295, 0
  %1302 = xor i1 %1301, %1299
  %1303 = or i1 %1292, %1302
  %.v325 = select i1 %1303, i64 334, i64 10
  %1304 = add i64 %832, %.v325
  store i64 %1304, i64* %3, align 8
  br i1 %1303, label %block_.L_46ea06, label %block_46e8c2

block_46e8c2:                                     ; preds = %block_.L_46e8b8
  %1305 = add i64 %546, -144
  %1306 = add i64 %1304, 7
  store i64 %1306, i64* %3, align 8
  %1307 = inttoptr i64 %1305 to i64*
  %1308 = load i64, i64* %1307, align 8
  store i64 %1308, i64* %.pre243, align 8
  %1309 = add i64 %546, -100
  %1310 = add i64 %1304, 11
  store i64 %1310, i64* %3, align 8
  %1311 = inttoptr i64 %1309 to i32*
  %1312 = load i32, i32* %1311, align 4
  %1313 = sext i32 %1312 to i64
  store i64 %1313, i64* %RCX.i6189, align 8
  %1314 = shl nsw i64 %1313, 3
  %1315 = add i64 %1314, %1308
  %1316 = add i64 %1304, 15
  store i64 %1316, i64* %3, align 8
  %1317 = inttoptr i64 %1315 to i64*
  %1318 = load i64, i64* %1317, align 8
  store i64 %1318, i64* %.pre243, align 8
  %1319 = add i64 %546, -104
  %1320 = add i64 %1304, 19
  store i64 %1320, i64* %3, align 8
  %1321 = inttoptr i64 %1319 to i32*
  %1322 = load i32, i32* %1321, align 4
  %1323 = sext i32 %1322 to i64
  store i64 %1323, i64* %RCX.i6189, align 8
  %1324 = shl nsw i64 %1323, 3
  %1325 = add i64 %1324, %1318
  %1326 = add i64 %1304, 23
  store i64 %1326, i64* %3, align 8
  %1327 = inttoptr i64 %1325 to i64*
  %1328 = load i64, i64* %1327, align 8
  store i64 %1328, i64* %.pre243, align 8
  %1329 = add i64 %546, -48
  %1330 = add i64 %1304, 27
  store i64 %1330, i64* %3, align 8
  %1331 = inttoptr i64 %1329 to i32*
  %1332 = load i32, i32* %1331, align 4
  %1333 = sext i32 %1332 to i64
  store i64 %1333, i64* %RCX.i6189, align 8
  %1334 = shl nsw i64 %1333, 3
  %1335 = add i64 %1334, %1328
  %1336 = add i64 %1304, 31
  store i64 %1336, i64* %3, align 8
  %1337 = inttoptr i64 %1335 to i64*
  %1338 = load i64, i64* %1337, align 8
  store i64 %1338, i64* %.pre243, align 8
  %1339 = add i64 %546, -42
  %1340 = add i64 %1304, 36
  store i64 %1340, i64* %3, align 8
  %1341 = inttoptr i64 %1339 to i16*
  %1342 = load i16, i16* %1341, align 2
  %1343 = sext i16 %1342 to i64
  store i64 %1343, i64* %RCX.i6189, align 8
  %1344 = shl nsw i64 %1343, 3
  %1345 = add i64 %1344, %1338
  %1346 = add i64 %1304, 40
  store i64 %1346, i64* %3, align 8
  %1347 = inttoptr i64 %1345 to i64*
  %1348 = load i64, i64* %1347, align 8
  store i64 %1348, i64* %.pre243, align 8
  %1349 = add i64 %1348, 32
  %1350 = add i64 %1304, 44
  store i64 %1350, i64* %3, align 8
  %1351 = inttoptr i64 %1349 to i64*
  %1352 = load i64, i64* %1351, align 8
  store i64 %1352, i64* %.pre243, align 8
  %1353 = add i64 %1304, 47
  store i64 %1353, i64* %3, align 8
  %1354 = inttoptr i64 %1352 to i16*
  %1355 = load i16, i16* %1354, align 2
  %1356 = sext i16 %1355 to i64
  %1357 = and i64 %1356, 4294967295
  store i64 %1357, i64* %RDX.i5984, align 8
  %1358 = sext i16 %1355 to i32
  store i32 %1358, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %1359 = add i64 %1304, 61
  store i64 %1359, i64* %3, align 8
  %1360 = load i64, i64* %1307, align 8
  store i64 %1360, i64* %.pre243, align 8
  %1361 = add i64 %1304, 65
  store i64 %1361, i64* %3, align 8
  %1362 = load i32, i32* %1311, align 4
  %1363 = sext i32 %1362 to i64
  store i64 %1363, i64* %RCX.i6189, align 8
  %1364 = shl nsw i64 %1363, 3
  %1365 = add i64 %1364, %1360
  %1366 = add i64 %1304, 69
  store i64 %1366, i64* %3, align 8
  %1367 = inttoptr i64 %1365 to i64*
  %1368 = load i64, i64* %1367, align 8
  store i64 %1368, i64* %.pre243, align 8
  %1369 = add i64 %1304, 73
  store i64 %1369, i64* %3, align 8
  %1370 = load i32, i32* %1321, align 4
  %1371 = sext i32 %1370 to i64
  store i64 %1371, i64* %RCX.i6189, align 8
  %1372 = shl nsw i64 %1371, 3
  %1373 = add i64 %1372, %1368
  %1374 = add i64 %1304, 77
  store i64 %1374, i64* %3, align 8
  %1375 = inttoptr i64 %1373 to i64*
  %1376 = load i64, i64* %1375, align 8
  store i64 %1376, i64* %.pre243, align 8
  %1377 = load i64, i64* %RBP.i, align 8
  %1378 = add i64 %1377, -48
  %1379 = add i64 %1304, 81
  store i64 %1379, i64* %3, align 8
  %1380 = inttoptr i64 %1378 to i32*
  %1381 = load i32, i32* %1380, align 4
  %1382 = sext i32 %1381 to i64
  store i64 %1382, i64* %RCX.i6189, align 8
  %1383 = shl nsw i64 %1382, 3
  %1384 = add i64 %1383, %1376
  %1385 = add i64 %1304, 85
  store i64 %1385, i64* %3, align 8
  %1386 = inttoptr i64 %1384 to i64*
  %1387 = load i64, i64* %1386, align 8
  store i64 %1387, i64* %.pre243, align 8
  %1388 = add i64 %1377, -42
  %1389 = add i64 %1304, 90
  store i64 %1389, i64* %3, align 8
  %1390 = inttoptr i64 %1388 to i16*
  %1391 = load i16, i16* %1390, align 2
  %1392 = sext i16 %1391 to i64
  store i64 %1392, i64* %RCX.i6189, align 8
  %1393 = shl nsw i64 %1392, 3
  %1394 = add i64 %1393, %1387
  %1395 = add i64 %1304, 94
  store i64 %1395, i64* %3, align 8
  %1396 = inttoptr i64 %1394 to i64*
  %1397 = load i64, i64* %1396, align 8
  store i64 %1397, i64* %.pre243, align 8
  %1398 = add i64 %1397, 32
  %1399 = add i64 %1304, 98
  store i64 %1399, i64* %3, align 8
  %1400 = inttoptr i64 %1398 to i64*
  %1401 = load i64, i64* %1400, align 8
  store i64 %1401, i64* %.pre243, align 8
  %1402 = add i64 %1401, 2
  %1403 = add i64 %1304, 102
  store i64 %1403, i64* %3, align 8
  %1404 = inttoptr i64 %1402 to i16*
  %1405 = load i16, i16* %1404, align 2
  %1406 = sext i16 %1405 to i64
  %1407 = and i64 %1406, 4294967295
  store i64 %1407, i64* %RDX.i5984, align 8
  %1408 = sext i16 %1405 to i32
  store i32 %1408, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %1409 = add i64 %1304, 113
  store i64 %1409, i64* %3, align 8
  %1410 = load i32, i32* %1380, align 4
  %1411 = add i32 %1410, -1
  %1412 = icmp eq i32 %1410, 0
  %1413 = zext i1 %1412 to i8
  store i8 %1413, i8* %44, align 1
  %1414 = and i32 %1411, 255
  %1415 = tail call i32 @llvm.ctpop.i32(i32 %1414)
  %1416 = trunc i32 %1415 to i8
  %1417 = and i8 %1416, 1
  %1418 = xor i8 %1417, 1
  store i8 %1418, i8* %51, align 1
  %1419 = xor i32 %1411, %1410
  %1420 = lshr i32 %1419, 4
  %1421 = trunc i32 %1420 to i8
  %1422 = and i8 %1421, 1
  store i8 %1422, i8* %56, align 1
  %1423 = icmp eq i32 %1411, 0
  %1424 = zext i1 %1423 to i8
  store i8 %1424, i8* %59, align 1
  %1425 = lshr i32 %1411, 31
  %1426 = trunc i32 %1425 to i8
  store i8 %1426, i8* %62, align 1
  %1427 = lshr i32 %1410, 31
  %1428 = xor i32 %1425, %1427
  %1429 = add nuw nsw i32 %1428, %1427
  %1430 = icmp eq i32 %1429, 2
  %1431 = zext i1 %1430 to i8
  store i8 %1431, i8* %68, align 1
  %.v326 = select i1 %1423, i64 119, i64 201
  %1432 = add i64 %1304, %.v326
  %1433 = add i64 %1432, 8
  store i64 %1433, i64* %3, align 8
  br i1 %1423, label %block_46e939, label %block_.L_46e98b

block_46e939:                                     ; preds = %block_46e8c2
  %1434 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %1434, i64* %.pre243, align 8
  %1435 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1435, i64* %RCX.i6189, align 8
  %1436 = add i64 %1435, 152
  %1437 = add i64 %1432, 22
  store i64 %1437, i64* %3, align 8
  %1438 = inttoptr i64 %1436 to i32*
  %1439 = load i32, i32* %1438, align 4
  %1440 = sext i32 %1439 to i64
  %1441 = ashr i64 %1440, 1
  %1442 = lshr i64 %1441, 1
  %1443 = trunc i64 %1441 to i8
  %1444 = and i8 %1443, 1
  %1445 = trunc i64 %1442 to i32
  %1446 = and i64 %1442, 4294967295
  store i64 %1446, i64* %RDX.i5984, align 8
  store i8 %1444, i8* %44, align 1
  %1447 = and i32 %1445, 255
  %1448 = tail call i32 @llvm.ctpop.i32(i32 %1447)
  %1449 = trunc i32 %1448 to i8
  %1450 = and i8 %1449, 1
  %1451 = xor i8 %1450, 1
  store i8 %1451, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1452 = icmp eq i32 %1445, 0
  %1453 = zext i1 %1452 to i8
  store i8 %1453, i8* %59, align 1
  %1454 = lshr i64 %1441, 32
  %1455 = trunc i64 %1454 to i8
  %1456 = and i8 %1455, 1
  store i8 %1456, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1457 = add i64 %1377, -100
  %1458 = add i64 %1432, 28
  store i64 %1458, i64* %3, align 8
  %1459 = trunc i64 %1442 to i32
  %1460 = inttoptr i64 %1457 to i32*
  %1461 = load i32, i32* %1460, align 4
  %1462 = add i32 %1461, %1459
  %1463 = zext i32 %1462 to i64
  store i64 %1463, i64* %RDX.i5984, align 8
  %1464 = icmp ult i32 %1462, %1459
  %1465 = icmp ult i32 %1462, %1461
  %1466 = or i1 %1464, %1465
  %1467 = zext i1 %1466 to i8
  store i8 %1467, i8* %44, align 1
  %1468 = and i32 %1462, 255
  %1469 = tail call i32 @llvm.ctpop.i32(i32 %1468)
  %1470 = trunc i32 %1469 to i8
  %1471 = and i8 %1470, 1
  %1472 = xor i8 %1471, 1
  store i8 %1472, i8* %51, align 1
  %1473 = xor i32 %1461, %1459
  %1474 = xor i32 %1473, %1462
  %1475 = lshr i32 %1474, 4
  %1476 = trunc i32 %1475 to i8
  %1477 = and i8 %1476, 1
  store i8 %1477, i8* %56, align 1
  %1478 = icmp eq i32 %1462, 0
  %1479 = zext i1 %1478 to i8
  store i8 %1479, i8* %59, align 1
  %1480 = lshr i32 %1462, 31
  %1481 = trunc i32 %1480 to i8
  store i8 %1481, i8* %62, align 1
  %1482 = lshr i64 %1441, 32
  %1483 = trunc i64 %1482 to i32
  %1484 = and i32 %1483, 1
  %1485 = lshr i32 %1461, 31
  %1486 = xor i32 %1480, %1484
  %1487 = xor i32 %1480, %1485
  %1488 = add nuw nsw i32 %1486, %1487
  %1489 = icmp eq i32 %1488, 2
  %1490 = zext i1 %1489 to i8
  store i8 %1490, i8* %68, align 1
  %1491 = sext i32 %1462 to i64
  store i64 %1491, i64* %RCX.i6189, align 8
  %1492 = shl nsw i64 %1491, 3
  %1493 = add i64 %1434, %1492
  %1494 = add i64 %1432, 35
  store i64 %1494, i64* %3, align 8
  %1495 = inttoptr i64 %1493 to i64*
  %1496 = load i64, i64* %1495, align 8
  store i64 %1496, i64* %.pre243, align 8
  store i64 %1435, i64* %RCX.i6189, align 8
  %1497 = add i64 %1435, 156
  %1498 = add i64 %1432, 49
  store i64 %1498, i64* %3, align 8
  %1499 = inttoptr i64 %1497 to i32*
  %1500 = load i32, i32* %1499, align 4
  %1501 = sext i32 %1500 to i64
  %1502 = ashr i64 %1501, 1
  %1503 = lshr i64 %1502, 1
  %1504 = trunc i64 %1502 to i8
  %1505 = and i8 %1504, 1
  %1506 = trunc i64 %1503 to i32
  %1507 = and i64 %1503, 4294967295
  store i64 %1507, i64* %RDX.i5984, align 8
  store i8 %1505, i8* %44, align 1
  %1508 = and i32 %1506, 255
  %1509 = tail call i32 @llvm.ctpop.i32(i32 %1508)
  %1510 = trunc i32 %1509 to i8
  %1511 = and i8 %1510, 1
  %1512 = xor i8 %1511, 1
  store i8 %1512, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1513 = icmp eq i32 %1506, 0
  %1514 = zext i1 %1513 to i8
  store i8 %1514, i8* %59, align 1
  %1515 = lshr i64 %1502, 32
  %1516 = trunc i64 %1515 to i8
  %1517 = and i8 %1516, 1
  store i8 %1517, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1518 = load i64, i64* %RBP.i, align 8
  %1519 = add i64 %1518, -104
  %1520 = add i64 %1432, 55
  store i64 %1520, i64* %3, align 8
  %1521 = trunc i64 %1503 to i32
  %1522 = inttoptr i64 %1519 to i32*
  %1523 = load i32, i32* %1522, align 4
  %1524 = add i32 %1523, %1521
  %1525 = zext i32 %1524 to i64
  store i64 %1525, i64* %RDX.i5984, align 8
  %1526 = icmp ult i32 %1524, %1521
  %1527 = icmp ult i32 %1524, %1523
  %1528 = or i1 %1526, %1527
  %1529 = zext i1 %1528 to i8
  store i8 %1529, i8* %44, align 1
  %1530 = and i32 %1524, 255
  %1531 = tail call i32 @llvm.ctpop.i32(i32 %1530)
  %1532 = trunc i32 %1531 to i8
  %1533 = and i8 %1532, 1
  %1534 = xor i8 %1533, 1
  store i8 %1534, i8* %51, align 1
  %1535 = xor i32 %1523, %1521
  %1536 = xor i32 %1535, %1524
  %1537 = lshr i32 %1536, 4
  %1538 = trunc i32 %1537 to i8
  %1539 = and i8 %1538, 1
  store i8 %1539, i8* %56, align 1
  %1540 = icmp eq i32 %1524, 0
  %1541 = zext i1 %1540 to i8
  store i8 %1541, i8* %59, align 1
  %1542 = lshr i32 %1524, 31
  %1543 = trunc i32 %1542 to i8
  store i8 %1543, i8* %62, align 1
  %1544 = lshr i64 %1502, 32
  %1545 = trunc i64 %1544 to i32
  %1546 = and i32 %1545, 1
  %1547 = lshr i32 %1523, 31
  %1548 = xor i32 %1542, %1546
  %1549 = xor i32 %1542, %1547
  %1550 = add nuw nsw i32 %1548, %1549
  %1551 = icmp eq i32 %1550, 2
  %1552 = zext i1 %1551 to i8
  store i8 %1552, i8* %68, align 1
  %1553 = sext i32 %1524 to i64
  store i64 %1553, i64* %RCX.i6189, align 8
  %1554 = shl nsw i64 %1553, 3
  %1555 = add i64 %1496, %1554
  %1556 = add i64 %1432, 62
  store i64 %1556, i64* %3, align 8
  %1557 = inttoptr i64 %1555 to i64*
  %1558 = load i64, i64* %1557, align 8
  store i64 %1558, i64* %.pre243, align 8
  %1559 = add i64 %1432, 65
  store i64 %1559, i64* %3, align 8
  %1560 = inttoptr i64 %1558 to i64*
  %1561 = load i64, i64* %1560, align 8
  store i64 %1561, i64* %.pre243, align 8
  %1562 = add i64 %1561, 32
  %1563 = add i64 %1432, 69
  store i64 %1563, i64* %3, align 8
  %1564 = inttoptr i64 %1562 to i64*
  %1565 = load i64, i64* %1564, align 8
  store i64 %1565, i64* %.pre243, align 8
  %1566 = add i64 %1432, 71
  store i64 %1566, i64* %3, align 8
  %1567 = inttoptr i64 %1565 to i32*
  %1568 = load i32, i32* %1567, align 4
  %1569 = zext i32 %1568 to i64
  store i64 %1569, i64* %RDX.i5984, align 8
  %1570 = add i64 %1518, -248
  %1571 = add i64 %1432, 77
  store i64 %1571, i64* %3, align 8
  %1572 = inttoptr i64 %1570 to i32*
  store i32 %1568, i32* %1572, align 4
  %1573 = load i64, i64* %3, align 8
  %1574 = add i64 %1573, 88
  store i64 %1574, i64* %3, align 8
  br label %block_.L_46e9de

block_.L_46e98b:                                  ; preds = %block_46e8c2
  %1575 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %1575, i64* %.pre243, align 8
  %1576 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1576, i64* %RCX.i6189, align 8
  %1577 = add i64 %1576, 152
  %1578 = add i64 %1432, 22
  store i64 %1578, i64* %3, align 8
  %1579 = inttoptr i64 %1577 to i32*
  %1580 = load i32, i32* %1579, align 4
  %1581 = sext i32 %1580 to i64
  %1582 = ashr i64 %1581, 1
  %1583 = lshr i64 %1582, 1
  %1584 = trunc i64 %1582 to i8
  %1585 = and i8 %1584, 1
  %1586 = trunc i64 %1583 to i32
  %1587 = and i64 %1583, 4294967295
  store i64 %1587, i64* %RDX.i5984, align 8
  store i8 %1585, i8* %44, align 1
  %1588 = and i32 %1586, 255
  %1589 = tail call i32 @llvm.ctpop.i32(i32 %1588)
  %1590 = trunc i32 %1589 to i8
  %1591 = and i8 %1590, 1
  %1592 = xor i8 %1591, 1
  store i8 %1592, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1593 = icmp eq i32 %1586, 0
  %1594 = zext i1 %1593 to i8
  store i8 %1594, i8* %59, align 1
  %1595 = lshr i64 %1582, 32
  %1596 = trunc i64 %1595 to i8
  %1597 = and i8 %1596, 1
  store i8 %1597, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1598 = add i64 %1377, -100
  %1599 = add i64 %1432, 28
  store i64 %1599, i64* %3, align 8
  %1600 = trunc i64 %1583 to i32
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601, align 4
  %1603 = add i32 %1602, %1600
  %1604 = zext i32 %1603 to i64
  store i64 %1604, i64* %RDX.i5984, align 8
  %1605 = icmp ult i32 %1603, %1600
  %1606 = icmp ult i32 %1603, %1602
  %1607 = or i1 %1605, %1606
  %1608 = zext i1 %1607 to i8
  store i8 %1608, i8* %44, align 1
  %1609 = and i32 %1603, 255
  %1610 = tail call i32 @llvm.ctpop.i32(i32 %1609)
  %1611 = trunc i32 %1610 to i8
  %1612 = and i8 %1611, 1
  %1613 = xor i8 %1612, 1
  store i8 %1613, i8* %51, align 1
  %1614 = xor i32 %1602, %1600
  %1615 = xor i32 %1614, %1603
  %1616 = lshr i32 %1615, 4
  %1617 = trunc i32 %1616 to i8
  %1618 = and i8 %1617, 1
  store i8 %1618, i8* %56, align 1
  %1619 = icmp eq i32 %1603, 0
  %1620 = zext i1 %1619 to i8
  store i8 %1620, i8* %59, align 1
  %1621 = lshr i32 %1603, 31
  %1622 = trunc i32 %1621 to i8
  store i8 %1622, i8* %62, align 1
  %1623 = lshr i64 %1582, 32
  %1624 = trunc i64 %1623 to i32
  %1625 = and i32 %1624, 1
  %1626 = lshr i32 %1602, 31
  %1627 = xor i32 %1621, %1625
  %1628 = xor i32 %1621, %1626
  %1629 = add nuw nsw i32 %1627, %1628
  %1630 = icmp eq i32 %1629, 2
  %1631 = zext i1 %1630 to i8
  store i8 %1631, i8* %68, align 1
  %1632 = sext i32 %1603 to i64
  store i64 %1632, i64* %RCX.i6189, align 8
  %1633 = shl nsw i64 %1632, 3
  %1634 = add i64 %1575, %1633
  %1635 = add i64 %1432, 35
  store i64 %1635, i64* %3, align 8
  %1636 = inttoptr i64 %1634 to i64*
  %1637 = load i64, i64* %1636, align 8
  store i64 %1637, i64* %.pre243, align 8
  store i64 %1576, i64* %RCX.i6189, align 8
  %1638 = add i64 %1576, 156
  %1639 = add i64 %1432, 49
  store i64 %1639, i64* %3, align 8
  %1640 = inttoptr i64 %1638 to i32*
  %1641 = load i32, i32* %1640, align 4
  %1642 = sext i32 %1641 to i64
  %1643 = ashr i64 %1642, 1
  %1644 = lshr i64 %1643, 1
  %1645 = trunc i64 %1643 to i8
  %1646 = and i8 %1645, 1
  %1647 = trunc i64 %1644 to i32
  %1648 = and i64 %1644, 4294967295
  store i64 %1648, i64* %RDX.i5984, align 8
  store i8 %1646, i8* %44, align 1
  %1649 = and i32 %1647, 255
  %1650 = tail call i32 @llvm.ctpop.i32(i32 %1649)
  %1651 = trunc i32 %1650 to i8
  %1652 = and i8 %1651, 1
  %1653 = xor i8 %1652, 1
  store i8 %1653, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1654 = icmp eq i32 %1647, 0
  %1655 = zext i1 %1654 to i8
  store i8 %1655, i8* %59, align 1
  %1656 = lshr i64 %1643, 32
  %1657 = trunc i64 %1656 to i8
  %1658 = and i8 %1657, 1
  store i8 %1658, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1659 = load i64, i64* %RBP.i, align 8
  %1660 = add i64 %1659, -104
  %1661 = add i64 %1432, 55
  store i64 %1661, i64* %3, align 8
  %1662 = trunc i64 %1644 to i32
  %1663 = inttoptr i64 %1660 to i32*
  %1664 = load i32, i32* %1663, align 4
  %1665 = add i32 %1664, %1662
  %1666 = zext i32 %1665 to i64
  store i64 %1666, i64* %RDX.i5984, align 8
  %1667 = icmp ult i32 %1665, %1662
  %1668 = icmp ult i32 %1665, %1664
  %1669 = or i1 %1667, %1668
  %1670 = zext i1 %1669 to i8
  store i8 %1670, i8* %44, align 1
  %1671 = and i32 %1665, 255
  %1672 = tail call i32 @llvm.ctpop.i32(i32 %1671)
  %1673 = trunc i32 %1672 to i8
  %1674 = and i8 %1673, 1
  %1675 = xor i8 %1674, 1
  store i8 %1675, i8* %51, align 1
  %1676 = xor i32 %1664, %1662
  %1677 = xor i32 %1676, %1665
  %1678 = lshr i32 %1677, 4
  %1679 = trunc i32 %1678 to i8
  %1680 = and i8 %1679, 1
  store i8 %1680, i8* %56, align 1
  %1681 = icmp eq i32 %1665, 0
  %1682 = zext i1 %1681 to i8
  store i8 %1682, i8* %59, align 1
  %1683 = lshr i32 %1665, 31
  %1684 = trunc i32 %1683 to i8
  store i8 %1684, i8* %62, align 1
  %1685 = lshr i64 %1643, 32
  %1686 = trunc i64 %1685 to i32
  %1687 = and i32 %1686, 1
  %1688 = lshr i32 %1664, 31
  %1689 = xor i32 %1683, %1687
  %1690 = xor i32 %1683, %1688
  %1691 = add nuw nsw i32 %1689, %1690
  %1692 = icmp eq i32 %1691, 2
  %1693 = zext i1 %1692 to i8
  store i8 %1693, i8* %68, align 1
  %1694 = sext i32 %1665 to i64
  store i64 %1694, i64* %RCX.i6189, align 8
  %1695 = shl nsw i64 %1694, 3
  %1696 = add i64 %1637, %1695
  %1697 = add i64 %1432, 62
  store i64 %1697, i64* %3, align 8
  %1698 = inttoptr i64 %1696 to i64*
  %1699 = load i64, i64* %1698, align 8
  store i64 %1699, i64* %.pre243, align 8
  %1700 = add i64 %1659, -42
  %1701 = add i64 %1432, 67
  store i64 %1701, i64* %3, align 8
  %1702 = inttoptr i64 %1700 to i16*
  %1703 = load i16, i16* %1702, align 2
  %1704 = sext i16 %1703 to i64
  store i64 %1704, i64* %RCX.i6189, align 8
  %1705 = shl nsw i64 %1704, 3
  %1706 = add i64 %1705, %1699
  %1707 = add i64 %1432, 71
  store i64 %1707, i64* %3, align 8
  %1708 = inttoptr i64 %1706 to i64*
  %1709 = load i64, i64* %1708, align 8
  store i64 %1709, i64* %.pre243, align 8
  %1710 = add i64 %1709, 32
  %1711 = add i64 %1432, 75
  store i64 %1711, i64* %3, align 8
  %1712 = inttoptr i64 %1710 to i64*
  %1713 = load i64, i64* %1712, align 8
  store i64 %1713, i64* %.pre243, align 8
  %1714 = add i64 %1432, 77
  store i64 %1714, i64* %3, align 8
  %1715 = inttoptr i64 %1713 to i32*
  %1716 = load i32, i32* %1715, align 4
  %1717 = zext i32 %1716 to i64
  store i64 %1717, i64* %RDX.i5984, align 8
  %1718 = add i64 %1659, -248
  %1719 = add i64 %1432, 83
  store i64 %1719, i64* %3, align 8
  %1720 = inttoptr i64 %1718 to i32*
  store i32 %1716, i32* %1720, align 4
  %.pre149 = load i64, i64* %3, align 8
  br label %block_.L_46e9de

block_.L_46e9de:                                  ; preds = %block_.L_46e98b, %block_46e939
  %1721 = phi i64 [ %.pre149, %block_.L_46e98b ], [ %1574, %block_46e939 ]
  %1722 = load i64, i64* %RBP.i, align 8
  %1723 = add i64 %1722, -248
  %1724 = add i64 %1721, 6
  store i64 %1724, i64* %3, align 8
  %1725 = inttoptr i64 %1723 to i32*
  %1726 = load i32, i32* %1725, align 4
  %1727 = zext i32 %1726 to i64
  store i64 2, i64* %RCX.i6189, align 8
  store i32 %1726, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i64 %1727, i64* %.pre243, align 8
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1729 = sext i32 %1726 to i64
  %1730 = lshr i64 %1729, 32
  store i64 %1730, i64* %1728, align 8
  %1731 = add i64 %1721, 28
  store i64 %1731, i64* %3, align 8
  %1732 = shl nuw i64 %1730, 32
  %1733 = or i64 %1732, %1727
  %1734 = sdiv i64 %1733, 2
  %1735 = shl i64 %1734, 32
  %1736 = ashr exact i64 %1735, 32
  %1737 = icmp eq i64 %1734, %1736
  br i1 %1737, label %1740, label %1738

; <label>:1738:                                   ; preds = %block_.L_46e9de
  %1739 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1731, %struct.Memory* %MEMORY.1)
  %.pre150 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %.pre151 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit5563

; <label>:1740:                                   ; preds = %block_.L_46e9de
  %1741 = srem i64 %1733, 2
  %1742 = and i64 %1734, 4294967295
  store i64 %1742, i64* %.pre243, align 8
  %1743 = and i64 %1741, 4294967295
  store i64 %1743, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1744 = trunc i64 %1734 to i32
  br label %routine_idivl__ecx.exit5563

routine_idivl__ecx.exit5563:                      ; preds = %1740, %1738
  %1745 = phi i64 [ %.pre151, %1738 ], [ %1731, %1740 ]
  %1746 = phi i32 [ %.pre150, %1738 ], [ %1744, %1740 ]
  %1747 = phi %struct.Memory* [ %1739, %1738 ], [ %MEMORY.1, %1740 ]
  %1748 = add i64 %1745, 7
  store i64 %1748, i64* %3, align 8
  store i32 %1746, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %1749 = add i64 %1745, 685
  br label %block_.L_46eca7

block_.L_46ea06:                                  ; preds = %block_.L_46e8b8
  %1750 = add i64 %1304, 4
  store i64 %1750, i64* %3, align 8
  %1751 = load i32, i32* %806, align 4
  %1752 = add i32 %1751, -4
  %1753 = icmp ult i32 %1751, 4
  %1754 = zext i1 %1753 to i8
  store i8 %1754, i8* %44, align 1
  %1755 = and i32 %1752, 255
  %1756 = tail call i32 @llvm.ctpop.i32(i32 %1755)
  %1757 = trunc i32 %1756 to i8
  %1758 = and i8 %1757, 1
  %1759 = xor i8 %1758, 1
  store i8 %1759, i8* %51, align 1
  %1760 = xor i32 %1752, %1751
  %1761 = lshr i32 %1760, 4
  %1762 = trunc i32 %1761 to i8
  %1763 = and i8 %1762, 1
  store i8 %1763, i8* %56, align 1
  %1764 = icmp eq i32 %1752, 0
  %1765 = zext i1 %1764 to i8
  store i8 %1765, i8* %59, align 1
  %1766 = lshr i32 %1752, 31
  %1767 = trunc i32 %1766 to i8
  store i8 %1767, i8* %62, align 1
  %1768 = lshr i32 %1751, 31
  %1769 = xor i32 %1766, %1768
  %1770 = add nuw nsw i32 %1769, %1768
  %1771 = icmp eq i32 %1770, 2
  %1772 = zext i1 %1771 to i8
  store i8 %1772, i8* %68, align 1
  %.v327 = select i1 %1764, i64 10, i64 334
  %1773 = add i64 %1304, %.v327
  store i64 %1773, i64* %3, align 8
  br i1 %1764, label %block_46ea10, label %block_.L_46eb54

block_46ea10:                                     ; preds = %block_.L_46ea06
  %1774 = add i64 %546, -144
  %1775 = add i64 %1773, 7
  store i64 %1775, i64* %3, align 8
  %1776 = inttoptr i64 %1774 to i64*
  %1777 = load i64, i64* %1776, align 8
  store i64 %1777, i64* %.pre243, align 8
  %1778 = add i64 %546, -100
  %1779 = add i64 %1773, 11
  store i64 %1779, i64* %3, align 8
  %1780 = inttoptr i64 %1778 to i32*
  %1781 = load i32, i32* %1780, align 4
  %1782 = sext i32 %1781 to i64
  store i64 %1782, i64* %RCX.i6189, align 8
  %1783 = shl nsw i64 %1782, 3
  %1784 = add i64 %1783, %1777
  %1785 = add i64 %1773, 15
  store i64 %1785, i64* %3, align 8
  %1786 = inttoptr i64 %1784 to i64*
  %1787 = load i64, i64* %1786, align 8
  store i64 %1787, i64* %.pre243, align 8
  %1788 = add i64 %546, -104
  %1789 = add i64 %1773, 19
  store i64 %1789, i64* %3, align 8
  %1790 = inttoptr i64 %1788 to i32*
  %1791 = load i32, i32* %1790, align 4
  %1792 = sext i32 %1791 to i64
  store i64 %1792, i64* %RCX.i6189, align 8
  %1793 = shl nsw i64 %1792, 3
  %1794 = add i64 %1793, %1787
  %1795 = add i64 %1773, 23
  store i64 %1795, i64* %3, align 8
  %1796 = inttoptr i64 %1794 to i64*
  %1797 = load i64, i64* %1796, align 8
  store i64 %1797, i64* %.pre243, align 8
  %1798 = add i64 %546, -48
  %1799 = add i64 %1773, 27
  store i64 %1799, i64* %3, align 8
  %1800 = inttoptr i64 %1798 to i32*
  %1801 = load i32, i32* %1800, align 4
  %1802 = sext i32 %1801 to i64
  store i64 %1802, i64* %RCX.i6189, align 8
  %1803 = shl nsw i64 %1802, 3
  %1804 = add i64 %1803, %1797
  %1805 = add i64 %1773, 31
  store i64 %1805, i64* %3, align 8
  %1806 = inttoptr i64 %1804 to i64*
  %1807 = load i64, i64* %1806, align 8
  store i64 %1807, i64* %.pre243, align 8
  %1808 = add i64 %546, -42
  %1809 = add i64 %1773, 36
  store i64 %1809, i64* %3, align 8
  %1810 = inttoptr i64 %1808 to i16*
  %1811 = load i16, i16* %1810, align 2
  %1812 = sext i16 %1811 to i64
  store i64 %1812, i64* %RCX.i6189, align 8
  %1813 = shl nsw i64 %1812, 3
  %1814 = add i64 %1813, %1807
  %1815 = add i64 %1773, 40
  store i64 %1815, i64* %3, align 8
  %1816 = inttoptr i64 %1814 to i64*
  %1817 = load i64, i64* %1816, align 8
  store i64 %1817, i64* %.pre243, align 8
  %1818 = add i64 %1817, 16
  %1819 = add i64 %1773, 44
  store i64 %1819, i64* %3, align 8
  %1820 = inttoptr i64 %1818 to i64*
  %1821 = load i64, i64* %1820, align 8
  store i64 %1821, i64* %.pre243, align 8
  %1822 = add i64 %1773, 47
  store i64 %1822, i64* %3, align 8
  %1823 = inttoptr i64 %1821 to i16*
  %1824 = load i16, i16* %1823, align 2
  %1825 = sext i16 %1824 to i64
  %1826 = and i64 %1825, 4294967295
  store i64 %1826, i64* %RDX.i5984, align 8
  %1827 = sext i16 %1824 to i32
  store i32 %1827, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %1828 = add i64 %1773, 61
  store i64 %1828, i64* %3, align 8
  %1829 = load i64, i64* %1776, align 8
  store i64 %1829, i64* %.pre243, align 8
  %1830 = add i64 %1773, 65
  store i64 %1830, i64* %3, align 8
  %1831 = load i32, i32* %1780, align 4
  %1832 = sext i32 %1831 to i64
  store i64 %1832, i64* %RCX.i6189, align 8
  %1833 = shl nsw i64 %1832, 3
  %1834 = add i64 %1833, %1829
  %1835 = add i64 %1773, 69
  store i64 %1835, i64* %3, align 8
  %1836 = inttoptr i64 %1834 to i64*
  %1837 = load i64, i64* %1836, align 8
  store i64 %1837, i64* %.pre243, align 8
  %1838 = add i64 %1773, 73
  store i64 %1838, i64* %3, align 8
  %1839 = load i32, i32* %1790, align 4
  %1840 = sext i32 %1839 to i64
  store i64 %1840, i64* %RCX.i6189, align 8
  %1841 = shl nsw i64 %1840, 3
  %1842 = add i64 %1841, %1837
  %1843 = add i64 %1773, 77
  store i64 %1843, i64* %3, align 8
  %1844 = inttoptr i64 %1842 to i64*
  %1845 = load i64, i64* %1844, align 8
  store i64 %1845, i64* %.pre243, align 8
  %1846 = load i64, i64* %RBP.i, align 8
  %1847 = add i64 %1846, -48
  %1848 = add i64 %1773, 81
  store i64 %1848, i64* %3, align 8
  %1849 = inttoptr i64 %1847 to i32*
  %1850 = load i32, i32* %1849, align 4
  %1851 = sext i32 %1850 to i64
  store i64 %1851, i64* %RCX.i6189, align 8
  %1852 = shl nsw i64 %1851, 3
  %1853 = add i64 %1852, %1845
  %1854 = add i64 %1773, 85
  store i64 %1854, i64* %3, align 8
  %1855 = inttoptr i64 %1853 to i64*
  %1856 = load i64, i64* %1855, align 8
  store i64 %1856, i64* %.pre243, align 8
  %1857 = add i64 %1846, -42
  %1858 = add i64 %1773, 90
  store i64 %1858, i64* %3, align 8
  %1859 = inttoptr i64 %1857 to i16*
  %1860 = load i16, i16* %1859, align 2
  %1861 = sext i16 %1860 to i64
  store i64 %1861, i64* %RCX.i6189, align 8
  %1862 = shl nsw i64 %1861, 3
  %1863 = add i64 %1862, %1856
  %1864 = add i64 %1773, 94
  store i64 %1864, i64* %3, align 8
  %1865 = inttoptr i64 %1863 to i64*
  %1866 = load i64, i64* %1865, align 8
  store i64 %1866, i64* %.pre243, align 8
  %1867 = add i64 %1866, 16
  %1868 = add i64 %1773, 98
  store i64 %1868, i64* %3, align 8
  %1869 = inttoptr i64 %1867 to i64*
  %1870 = load i64, i64* %1869, align 8
  store i64 %1870, i64* %.pre243, align 8
  %1871 = add i64 %1870, 2
  %1872 = add i64 %1773, 102
  store i64 %1872, i64* %3, align 8
  %1873 = inttoptr i64 %1871 to i16*
  %1874 = load i16, i16* %1873, align 2
  %1875 = sext i16 %1874 to i64
  %1876 = and i64 %1875, 4294967295
  store i64 %1876, i64* %RDX.i5984, align 8
  %1877 = sext i16 %1874 to i32
  store i32 %1877, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %1878 = add i64 %1773, 113
  store i64 %1878, i64* %3, align 8
  %1879 = load i32, i32* %1849, align 4
  %1880 = add i32 %1879, -1
  %1881 = icmp eq i32 %1879, 0
  %1882 = zext i1 %1881 to i8
  store i8 %1882, i8* %44, align 1
  %1883 = and i32 %1880, 255
  %1884 = tail call i32 @llvm.ctpop.i32(i32 %1883)
  %1885 = trunc i32 %1884 to i8
  %1886 = and i8 %1885, 1
  %1887 = xor i8 %1886, 1
  store i8 %1887, i8* %51, align 1
  %1888 = xor i32 %1880, %1879
  %1889 = lshr i32 %1888, 4
  %1890 = trunc i32 %1889 to i8
  %1891 = and i8 %1890, 1
  store i8 %1891, i8* %56, align 1
  %1892 = icmp eq i32 %1880, 0
  %1893 = zext i1 %1892 to i8
  store i8 %1893, i8* %59, align 1
  %1894 = lshr i32 %1880, 31
  %1895 = trunc i32 %1894 to i8
  store i8 %1895, i8* %62, align 1
  %1896 = lshr i32 %1879, 31
  %1897 = xor i32 %1894, %1896
  %1898 = add nuw nsw i32 %1897, %1896
  %1899 = icmp eq i32 %1898, 2
  %1900 = zext i1 %1899 to i8
  store i8 %1900, i8* %68, align 1
  %.v330 = select i1 %1892, i64 119, i64 201
  %1901 = add i64 %1773, %.v330
  %1902 = add i64 %1901, 8
  store i64 %1902, i64* %3, align 8
  br i1 %1892, label %block_46ea87, label %block_.L_46ead9

block_46ea87:                                     ; preds = %block_46ea10
  %1903 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %1903, i64* %.pre243, align 8
  %1904 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1904, i64* %RCX.i6189, align 8
  %1905 = add i64 %1904, 152
  %1906 = add i64 %1901, 22
  store i64 %1906, i64* %3, align 8
  %1907 = inttoptr i64 %1905 to i32*
  %1908 = load i32, i32* %1907, align 4
  %1909 = sext i32 %1908 to i64
  %1910 = ashr i64 %1909, 1
  %1911 = lshr i64 %1910, 1
  %1912 = trunc i64 %1910 to i8
  %1913 = and i8 %1912, 1
  %1914 = trunc i64 %1911 to i32
  %1915 = and i64 %1911, 4294967295
  store i64 %1915, i64* %RDX.i5984, align 8
  store i8 %1913, i8* %44, align 1
  %1916 = and i32 %1914, 255
  %1917 = tail call i32 @llvm.ctpop.i32(i32 %1916)
  %1918 = trunc i32 %1917 to i8
  %1919 = and i8 %1918, 1
  %1920 = xor i8 %1919, 1
  store i8 %1920, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1921 = icmp eq i32 %1914, 0
  %1922 = zext i1 %1921 to i8
  store i8 %1922, i8* %59, align 1
  %1923 = lshr i64 %1910, 32
  %1924 = trunc i64 %1923 to i8
  %1925 = and i8 %1924, 1
  store i8 %1925, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1926 = add i64 %1846, -100
  %1927 = add i64 %1901, 28
  store i64 %1927, i64* %3, align 8
  %1928 = trunc i64 %1911 to i32
  %1929 = inttoptr i64 %1926 to i32*
  %1930 = load i32, i32* %1929, align 4
  %1931 = add i32 %1930, %1928
  %1932 = zext i32 %1931 to i64
  store i64 %1932, i64* %RDX.i5984, align 8
  %1933 = icmp ult i32 %1931, %1928
  %1934 = icmp ult i32 %1931, %1930
  %1935 = or i1 %1933, %1934
  %1936 = zext i1 %1935 to i8
  store i8 %1936, i8* %44, align 1
  %1937 = and i32 %1931, 255
  %1938 = tail call i32 @llvm.ctpop.i32(i32 %1937)
  %1939 = trunc i32 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = xor i8 %1940, 1
  store i8 %1941, i8* %51, align 1
  %1942 = xor i32 %1930, %1928
  %1943 = xor i32 %1942, %1931
  %1944 = lshr i32 %1943, 4
  %1945 = trunc i32 %1944 to i8
  %1946 = and i8 %1945, 1
  store i8 %1946, i8* %56, align 1
  %1947 = icmp eq i32 %1931, 0
  %1948 = zext i1 %1947 to i8
  store i8 %1948, i8* %59, align 1
  %1949 = lshr i32 %1931, 31
  %1950 = trunc i32 %1949 to i8
  store i8 %1950, i8* %62, align 1
  %1951 = lshr i64 %1910, 32
  %1952 = trunc i64 %1951 to i32
  %1953 = and i32 %1952, 1
  %1954 = lshr i32 %1930, 31
  %1955 = xor i32 %1949, %1953
  %1956 = xor i32 %1949, %1954
  %1957 = add nuw nsw i32 %1955, %1956
  %1958 = icmp eq i32 %1957, 2
  %1959 = zext i1 %1958 to i8
  store i8 %1959, i8* %68, align 1
  %1960 = sext i32 %1931 to i64
  store i64 %1960, i64* %RCX.i6189, align 8
  %1961 = shl nsw i64 %1960, 3
  %1962 = add i64 %1903, %1961
  %1963 = add i64 %1901, 35
  store i64 %1963, i64* %3, align 8
  %1964 = inttoptr i64 %1962 to i64*
  %1965 = load i64, i64* %1964, align 8
  store i64 %1965, i64* %.pre243, align 8
  store i64 %1904, i64* %RCX.i6189, align 8
  %1966 = add i64 %1904, 156
  %1967 = add i64 %1901, 49
  store i64 %1967, i64* %3, align 8
  %1968 = inttoptr i64 %1966 to i32*
  %1969 = load i32, i32* %1968, align 4
  %1970 = sext i32 %1969 to i64
  %1971 = ashr i64 %1970, 1
  %1972 = lshr i64 %1971, 1
  %1973 = trunc i64 %1971 to i8
  %1974 = and i8 %1973, 1
  %1975 = trunc i64 %1972 to i32
  %1976 = and i64 %1972, 4294967295
  store i64 %1976, i64* %RDX.i5984, align 8
  store i8 %1974, i8* %44, align 1
  %1977 = and i32 %1975, 255
  %1978 = tail call i32 @llvm.ctpop.i32(i32 %1977)
  %1979 = trunc i32 %1978 to i8
  %1980 = and i8 %1979, 1
  %1981 = xor i8 %1980, 1
  store i8 %1981, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %1982 = icmp eq i32 %1975, 0
  %1983 = zext i1 %1982 to i8
  store i8 %1983, i8* %59, align 1
  %1984 = lshr i64 %1971, 32
  %1985 = trunc i64 %1984 to i8
  %1986 = and i8 %1985, 1
  store i8 %1986, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %1987 = load i64, i64* %RBP.i, align 8
  %1988 = add i64 %1987, -104
  %1989 = add i64 %1901, 55
  store i64 %1989, i64* %3, align 8
  %1990 = trunc i64 %1972 to i32
  %1991 = inttoptr i64 %1988 to i32*
  %1992 = load i32, i32* %1991, align 4
  %1993 = add i32 %1992, %1990
  %1994 = zext i32 %1993 to i64
  store i64 %1994, i64* %RDX.i5984, align 8
  %1995 = icmp ult i32 %1993, %1990
  %1996 = icmp ult i32 %1993, %1992
  %1997 = or i1 %1995, %1996
  %1998 = zext i1 %1997 to i8
  store i8 %1998, i8* %44, align 1
  %1999 = and i32 %1993, 255
  %2000 = tail call i32 @llvm.ctpop.i32(i32 %1999)
  %2001 = trunc i32 %2000 to i8
  %2002 = and i8 %2001, 1
  %2003 = xor i8 %2002, 1
  store i8 %2003, i8* %51, align 1
  %2004 = xor i32 %1992, %1990
  %2005 = xor i32 %2004, %1993
  %2006 = lshr i32 %2005, 4
  %2007 = trunc i32 %2006 to i8
  %2008 = and i8 %2007, 1
  store i8 %2008, i8* %56, align 1
  %2009 = icmp eq i32 %1993, 0
  %2010 = zext i1 %2009 to i8
  store i8 %2010, i8* %59, align 1
  %2011 = lshr i32 %1993, 31
  %2012 = trunc i32 %2011 to i8
  store i8 %2012, i8* %62, align 1
  %2013 = lshr i64 %1971, 32
  %2014 = trunc i64 %2013 to i32
  %2015 = and i32 %2014, 1
  %2016 = lshr i32 %1992, 31
  %2017 = xor i32 %2011, %2015
  %2018 = xor i32 %2011, %2016
  %2019 = add nuw nsw i32 %2017, %2018
  %2020 = icmp eq i32 %2019, 2
  %2021 = zext i1 %2020 to i8
  store i8 %2021, i8* %68, align 1
  %2022 = sext i32 %1993 to i64
  store i64 %2022, i64* %RCX.i6189, align 8
  %2023 = shl nsw i64 %2022, 3
  %2024 = add i64 %1965, %2023
  %2025 = add i64 %1901, 62
  store i64 %2025, i64* %3, align 8
  %2026 = inttoptr i64 %2024 to i64*
  %2027 = load i64, i64* %2026, align 8
  store i64 %2027, i64* %.pre243, align 8
  %2028 = add i64 %1901, 65
  store i64 %2028, i64* %3, align 8
  %2029 = inttoptr i64 %2027 to i64*
  %2030 = load i64, i64* %2029, align 8
  store i64 %2030, i64* %.pre243, align 8
  %2031 = add i64 %2030, 16
  %2032 = add i64 %1901, 69
  store i64 %2032, i64* %3, align 8
  %2033 = inttoptr i64 %2031 to i64*
  %2034 = load i64, i64* %2033, align 8
  store i64 %2034, i64* %.pre243, align 8
  %2035 = add i64 %1901, 71
  store i64 %2035, i64* %3, align 8
  %2036 = inttoptr i64 %2034 to i32*
  %2037 = load i32, i32* %2036, align 4
  %2038 = zext i32 %2037 to i64
  store i64 %2038, i64* %RDX.i5984, align 8
  %2039 = add i64 %1987, -252
  %2040 = add i64 %1901, 77
  store i64 %2040, i64* %3, align 8
  %2041 = inttoptr i64 %2039 to i32*
  store i32 %2037, i32* %2041, align 4
  %2042 = load i64, i64* %3, align 8
  %2043 = add i64 %2042, 88
  store i64 %2043, i64* %3, align 8
  br label %block_.L_46eb2c

block_.L_46ead9:                                  ; preds = %block_46ea10
  %2044 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %2044, i64* %.pre243, align 8
  %2045 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2045, i64* %RCX.i6189, align 8
  %2046 = add i64 %2045, 152
  %2047 = add i64 %1901, 22
  store i64 %2047, i64* %3, align 8
  %2048 = inttoptr i64 %2046 to i32*
  %2049 = load i32, i32* %2048, align 4
  %2050 = sext i32 %2049 to i64
  %2051 = ashr i64 %2050, 1
  %2052 = lshr i64 %2051, 1
  %2053 = trunc i64 %2051 to i8
  %2054 = and i8 %2053, 1
  %2055 = trunc i64 %2052 to i32
  %2056 = and i64 %2052, 4294967295
  store i64 %2056, i64* %RDX.i5984, align 8
  store i8 %2054, i8* %44, align 1
  %2057 = and i32 %2055, 255
  %2058 = tail call i32 @llvm.ctpop.i32(i32 %2057)
  %2059 = trunc i32 %2058 to i8
  %2060 = and i8 %2059, 1
  %2061 = xor i8 %2060, 1
  store i8 %2061, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2062 = icmp eq i32 %2055, 0
  %2063 = zext i1 %2062 to i8
  store i8 %2063, i8* %59, align 1
  %2064 = lshr i64 %2051, 32
  %2065 = trunc i64 %2064 to i8
  %2066 = and i8 %2065, 1
  store i8 %2066, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2067 = add i64 %1846, -100
  %2068 = add i64 %1901, 28
  store i64 %2068, i64* %3, align 8
  %2069 = trunc i64 %2052 to i32
  %2070 = inttoptr i64 %2067 to i32*
  %2071 = load i32, i32* %2070, align 4
  %2072 = add i32 %2071, %2069
  %2073 = zext i32 %2072 to i64
  store i64 %2073, i64* %RDX.i5984, align 8
  %2074 = icmp ult i32 %2072, %2069
  %2075 = icmp ult i32 %2072, %2071
  %2076 = or i1 %2074, %2075
  %2077 = zext i1 %2076 to i8
  store i8 %2077, i8* %44, align 1
  %2078 = and i32 %2072, 255
  %2079 = tail call i32 @llvm.ctpop.i32(i32 %2078)
  %2080 = trunc i32 %2079 to i8
  %2081 = and i8 %2080, 1
  %2082 = xor i8 %2081, 1
  store i8 %2082, i8* %51, align 1
  %2083 = xor i32 %2071, %2069
  %2084 = xor i32 %2083, %2072
  %2085 = lshr i32 %2084, 4
  %2086 = trunc i32 %2085 to i8
  %2087 = and i8 %2086, 1
  store i8 %2087, i8* %56, align 1
  %2088 = icmp eq i32 %2072, 0
  %2089 = zext i1 %2088 to i8
  store i8 %2089, i8* %59, align 1
  %2090 = lshr i32 %2072, 31
  %2091 = trunc i32 %2090 to i8
  store i8 %2091, i8* %62, align 1
  %2092 = lshr i64 %2051, 32
  %2093 = trunc i64 %2092 to i32
  %2094 = and i32 %2093, 1
  %2095 = lshr i32 %2071, 31
  %2096 = xor i32 %2090, %2094
  %2097 = xor i32 %2090, %2095
  %2098 = add nuw nsw i32 %2096, %2097
  %2099 = icmp eq i32 %2098, 2
  %2100 = zext i1 %2099 to i8
  store i8 %2100, i8* %68, align 1
  %2101 = sext i32 %2072 to i64
  store i64 %2101, i64* %RCX.i6189, align 8
  %2102 = shl nsw i64 %2101, 3
  %2103 = add i64 %2044, %2102
  %2104 = add i64 %1901, 35
  store i64 %2104, i64* %3, align 8
  %2105 = inttoptr i64 %2103 to i64*
  %2106 = load i64, i64* %2105, align 8
  store i64 %2106, i64* %.pre243, align 8
  store i64 %2045, i64* %RCX.i6189, align 8
  %2107 = add i64 %2045, 156
  %2108 = add i64 %1901, 49
  store i64 %2108, i64* %3, align 8
  %2109 = inttoptr i64 %2107 to i32*
  %2110 = load i32, i32* %2109, align 4
  %2111 = sext i32 %2110 to i64
  %2112 = ashr i64 %2111, 1
  %2113 = lshr i64 %2112, 1
  %2114 = trunc i64 %2112 to i8
  %2115 = and i8 %2114, 1
  %2116 = trunc i64 %2113 to i32
  %2117 = and i64 %2113, 4294967295
  store i64 %2117, i64* %RDX.i5984, align 8
  store i8 %2115, i8* %44, align 1
  %2118 = and i32 %2116, 255
  %2119 = tail call i32 @llvm.ctpop.i32(i32 %2118)
  %2120 = trunc i32 %2119 to i8
  %2121 = and i8 %2120, 1
  %2122 = xor i8 %2121, 1
  store i8 %2122, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2123 = icmp eq i32 %2116, 0
  %2124 = zext i1 %2123 to i8
  store i8 %2124, i8* %59, align 1
  %2125 = lshr i64 %2112, 32
  %2126 = trunc i64 %2125 to i8
  %2127 = and i8 %2126, 1
  store i8 %2127, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2128 = load i64, i64* %RBP.i, align 8
  %2129 = add i64 %2128, -104
  %2130 = add i64 %1901, 55
  store i64 %2130, i64* %3, align 8
  %2131 = trunc i64 %2113 to i32
  %2132 = inttoptr i64 %2129 to i32*
  %2133 = load i32, i32* %2132, align 4
  %2134 = add i32 %2133, %2131
  %2135 = zext i32 %2134 to i64
  store i64 %2135, i64* %RDX.i5984, align 8
  %2136 = icmp ult i32 %2134, %2131
  %2137 = icmp ult i32 %2134, %2133
  %2138 = or i1 %2136, %2137
  %2139 = zext i1 %2138 to i8
  store i8 %2139, i8* %44, align 1
  %2140 = and i32 %2134, 255
  %2141 = tail call i32 @llvm.ctpop.i32(i32 %2140)
  %2142 = trunc i32 %2141 to i8
  %2143 = and i8 %2142, 1
  %2144 = xor i8 %2143, 1
  store i8 %2144, i8* %51, align 1
  %2145 = xor i32 %2133, %2131
  %2146 = xor i32 %2145, %2134
  %2147 = lshr i32 %2146, 4
  %2148 = trunc i32 %2147 to i8
  %2149 = and i8 %2148, 1
  store i8 %2149, i8* %56, align 1
  %2150 = icmp eq i32 %2134, 0
  %2151 = zext i1 %2150 to i8
  store i8 %2151, i8* %59, align 1
  %2152 = lshr i32 %2134, 31
  %2153 = trunc i32 %2152 to i8
  store i8 %2153, i8* %62, align 1
  %2154 = lshr i64 %2112, 32
  %2155 = trunc i64 %2154 to i32
  %2156 = and i32 %2155, 1
  %2157 = lshr i32 %2133, 31
  %2158 = xor i32 %2152, %2156
  %2159 = xor i32 %2152, %2157
  %2160 = add nuw nsw i32 %2158, %2159
  %2161 = icmp eq i32 %2160, 2
  %2162 = zext i1 %2161 to i8
  store i8 %2162, i8* %68, align 1
  %2163 = sext i32 %2134 to i64
  store i64 %2163, i64* %RCX.i6189, align 8
  %2164 = shl nsw i64 %2163, 3
  %2165 = add i64 %2106, %2164
  %2166 = add i64 %1901, 62
  store i64 %2166, i64* %3, align 8
  %2167 = inttoptr i64 %2165 to i64*
  %2168 = load i64, i64* %2167, align 8
  store i64 %2168, i64* %.pre243, align 8
  %2169 = add i64 %2128, -42
  %2170 = add i64 %1901, 67
  store i64 %2170, i64* %3, align 8
  %2171 = inttoptr i64 %2169 to i16*
  %2172 = load i16, i16* %2171, align 2
  %2173 = sext i16 %2172 to i64
  store i64 %2173, i64* %RCX.i6189, align 8
  %2174 = shl nsw i64 %2173, 3
  %2175 = add i64 %2174, %2168
  %2176 = add i64 %1901, 71
  store i64 %2176, i64* %3, align 8
  %2177 = inttoptr i64 %2175 to i64*
  %2178 = load i64, i64* %2177, align 8
  store i64 %2178, i64* %.pre243, align 8
  %2179 = add i64 %2178, 16
  %2180 = add i64 %1901, 75
  store i64 %2180, i64* %3, align 8
  %2181 = inttoptr i64 %2179 to i64*
  %2182 = load i64, i64* %2181, align 8
  store i64 %2182, i64* %.pre243, align 8
  %2183 = add i64 %1901, 77
  store i64 %2183, i64* %3, align 8
  %2184 = inttoptr i64 %2182 to i32*
  %2185 = load i32, i32* %2184, align 4
  %2186 = zext i32 %2185 to i64
  store i64 %2186, i64* %RDX.i5984, align 8
  %2187 = add i64 %2128, -252
  %2188 = add i64 %1901, 83
  store i64 %2188, i64* %3, align 8
  %2189 = inttoptr i64 %2187 to i32*
  store i32 %2185, i32* %2189, align 4
  %.pre152 = load i64, i64* %3, align 8
  br label %block_.L_46eb2c

block_.L_46eb2c:                                  ; preds = %block_.L_46ead9, %block_46ea87
  %2190 = phi i64 [ %.pre152, %block_.L_46ead9 ], [ %2043, %block_46ea87 ]
  %2191 = load i64, i64* %RBP.i, align 8
  %2192 = add i64 %2191, -252
  %2193 = add i64 %2190, 6
  store i64 %2193, i64* %3, align 8
  %2194 = inttoptr i64 %2192 to i32*
  %2195 = load i32, i32* %2194, align 4
  %2196 = zext i32 %2195 to i64
  store i64 2, i64* %RCX.i6189, align 8
  store i32 %2195, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i64 %2196, i64* %.pre243, align 8
  %2197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2198 = sext i32 %2195 to i64
  %2199 = lshr i64 %2198, 32
  store i64 %2199, i64* %2197, align 8
  %2200 = add i64 %2190, 28
  store i64 %2200, i64* %3, align 8
  %2201 = shl nuw i64 %2199, 32
  %2202 = or i64 %2201, %2196
  %2203 = sdiv i64 %2202, 2
  %2204 = shl i64 %2203, 32
  %2205 = ashr exact i64 %2204, 32
  %2206 = icmp eq i64 %2203, %2205
  br i1 %2206, label %2209, label %2207

; <label>:2207:                                   ; preds = %block_.L_46eb2c
  %2208 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2200, %struct.Memory* %MEMORY.1)
  %.pre153 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %.pre154 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit5377

; <label>:2209:                                   ; preds = %block_.L_46eb2c
  %2210 = srem i64 %2202, 2
  %2211 = and i64 %2203, 4294967295
  store i64 %2211, i64* %.pre243, align 8
  %2212 = and i64 %2210, 4294967295
  store i64 %2212, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2213 = trunc i64 %2203 to i32
  br label %routine_idivl__ecx.exit5377

routine_idivl__ecx.exit5377:                      ; preds = %2209, %2207
  %2214 = phi i64 [ %.pre154, %2207 ], [ %2200, %2209 ]
  %2215 = phi i32 [ %.pre153, %2207 ], [ %2213, %2209 ]
  %2216 = phi %struct.Memory* [ %2208, %2207 ], [ %MEMORY.1, %2209 ]
  %2217 = add i64 %2214, 7
  store i64 %2217, i64* %3, align 8
  store i32 %2215, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %2218 = add i64 %2214, 346
  br label %block_.L_46eca2

block_.L_46eb54:                                  ; preds = %block_.L_46ea06
  %2219 = add i64 %1773, 4
  store i64 %2219, i64* %3, align 8
  %2220 = load i32, i32* %806, align 4
  %2221 = add i32 %2220, -1
  %2222 = icmp eq i32 %2220, 0
  %2223 = zext i1 %2222 to i8
  store i8 %2223, i8* %44, align 1
  %2224 = and i32 %2221, 255
  %2225 = tail call i32 @llvm.ctpop.i32(i32 %2224)
  %2226 = trunc i32 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = xor i8 %2227, 1
  store i8 %2228, i8* %51, align 1
  %2229 = xor i32 %2221, %2220
  %2230 = lshr i32 %2229, 4
  %2231 = trunc i32 %2230 to i8
  %2232 = and i8 %2231, 1
  store i8 %2232, i8* %56, align 1
  %2233 = icmp eq i32 %2221, 0
  %2234 = zext i1 %2233 to i8
  store i8 %2234, i8* %59, align 1
  %2235 = lshr i32 %2221, 31
  %2236 = trunc i32 %2235 to i8
  store i8 %2236, i8* %62, align 1
  %2237 = lshr i32 %2220, 31
  %2238 = xor i32 %2235, %2237
  %2239 = add nuw nsw i32 %2238, %2237
  %2240 = icmp eq i32 %2239, 2
  %2241 = zext i1 %2240 to i8
  store i8 %2241, i8* %68, align 1
  %2242 = icmp ne i8 %2236, 0
  %2243 = xor i1 %2242, %2240
  %2244 = or i1 %2233, %2243
  %.v328 = select i1 %2244, i64 329, i64 10
  %2245 = add i64 %1773, %.v328
  store i64 %2245, i64* %3, align 8
  br i1 %2244, label %block_.L_46ec9d, label %block_46eb5e

block_46eb5e:                                     ; preds = %block_.L_46eb54
  %2246 = add i64 %546, -144
  %2247 = add i64 %2245, 7
  store i64 %2247, i64* %3, align 8
  %2248 = inttoptr i64 %2246 to i64*
  %2249 = load i64, i64* %2248, align 8
  store i64 %2249, i64* %.pre243, align 8
  %2250 = add i64 %546, -100
  %2251 = add i64 %2245, 11
  store i64 %2251, i64* %3, align 8
  %2252 = inttoptr i64 %2250 to i32*
  %2253 = load i32, i32* %2252, align 4
  %2254 = sext i32 %2253 to i64
  store i64 %2254, i64* %RCX.i6189, align 8
  %2255 = shl nsw i64 %2254, 3
  %2256 = add i64 %2255, %2249
  %2257 = add i64 %2245, 15
  store i64 %2257, i64* %3, align 8
  %2258 = inttoptr i64 %2256 to i64*
  %2259 = load i64, i64* %2258, align 8
  store i64 %2259, i64* %.pre243, align 8
  %2260 = add i64 %546, -104
  %2261 = add i64 %2245, 19
  store i64 %2261, i64* %3, align 8
  %2262 = inttoptr i64 %2260 to i32*
  %2263 = load i32, i32* %2262, align 4
  %2264 = sext i32 %2263 to i64
  store i64 %2264, i64* %RCX.i6189, align 8
  %2265 = shl nsw i64 %2264, 3
  %2266 = add i64 %2265, %2259
  %2267 = add i64 %2245, 23
  store i64 %2267, i64* %3, align 8
  %2268 = inttoptr i64 %2266 to i64*
  %2269 = load i64, i64* %2268, align 8
  store i64 %2269, i64* %.pre243, align 8
  %2270 = add i64 %546, -48
  %2271 = add i64 %2245, 27
  store i64 %2271, i64* %3, align 8
  %2272 = inttoptr i64 %2270 to i32*
  %2273 = load i32, i32* %2272, align 4
  %2274 = sext i32 %2273 to i64
  store i64 %2274, i64* %RCX.i6189, align 8
  %2275 = shl nsw i64 %2274, 3
  %2276 = add i64 %2275, %2269
  %2277 = add i64 %2245, 31
  store i64 %2277, i64* %3, align 8
  %2278 = inttoptr i64 %2276 to i64*
  %2279 = load i64, i64* %2278, align 8
  store i64 %2279, i64* %.pre243, align 8
  %2280 = add i64 %546, -42
  %2281 = add i64 %2245, 36
  store i64 %2281, i64* %3, align 8
  %2282 = inttoptr i64 %2280 to i16*
  %2283 = load i16, i16* %2282, align 2
  %2284 = sext i16 %2283 to i64
  store i64 %2284, i64* %RCX.i6189, align 8
  %2285 = shl nsw i64 %2284, 3
  %2286 = add i64 %2285, %2279
  %2287 = add i64 %2245, 40
  store i64 %2287, i64* %3, align 8
  %2288 = inttoptr i64 %2286 to i64*
  %2289 = load i64, i64* %2288, align 8
  store i64 %2289, i64* %.pre243, align 8
  %2290 = add i64 %2289, 8
  %2291 = add i64 %2245, 44
  store i64 %2291, i64* %3, align 8
  %2292 = inttoptr i64 %2290 to i64*
  %2293 = load i64, i64* %2292, align 8
  store i64 %2293, i64* %.pre243, align 8
  %2294 = add i64 %2245, 47
  store i64 %2294, i64* %3, align 8
  %2295 = inttoptr i64 %2293 to i16*
  %2296 = load i16, i16* %2295, align 2
  %2297 = sext i16 %2296 to i64
  %2298 = and i64 %2297, 4294967295
  store i64 %2298, i64* %RDX.i5984, align 8
  %2299 = sext i16 %2296 to i32
  store i32 %2299, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %2300 = add i64 %2245, 61
  store i64 %2300, i64* %3, align 8
  %2301 = load i64, i64* %2248, align 8
  store i64 %2301, i64* %.pre243, align 8
  %2302 = add i64 %2245, 65
  store i64 %2302, i64* %3, align 8
  %2303 = load i32, i32* %2252, align 4
  %2304 = sext i32 %2303 to i64
  store i64 %2304, i64* %RCX.i6189, align 8
  %2305 = shl nsw i64 %2304, 3
  %2306 = add i64 %2305, %2301
  %2307 = add i64 %2245, 69
  store i64 %2307, i64* %3, align 8
  %2308 = inttoptr i64 %2306 to i64*
  %2309 = load i64, i64* %2308, align 8
  store i64 %2309, i64* %.pre243, align 8
  %2310 = add i64 %2245, 73
  store i64 %2310, i64* %3, align 8
  %2311 = load i32, i32* %2262, align 4
  %2312 = sext i32 %2311 to i64
  store i64 %2312, i64* %RCX.i6189, align 8
  %2313 = shl nsw i64 %2312, 3
  %2314 = add i64 %2313, %2309
  %2315 = add i64 %2245, 77
  store i64 %2315, i64* %3, align 8
  %2316 = inttoptr i64 %2314 to i64*
  %2317 = load i64, i64* %2316, align 8
  store i64 %2317, i64* %.pre243, align 8
  %2318 = load i64, i64* %RBP.i, align 8
  %2319 = add i64 %2318, -48
  %2320 = add i64 %2245, 81
  store i64 %2320, i64* %3, align 8
  %2321 = inttoptr i64 %2319 to i32*
  %2322 = load i32, i32* %2321, align 4
  %2323 = sext i32 %2322 to i64
  store i64 %2323, i64* %RCX.i6189, align 8
  %2324 = shl nsw i64 %2323, 3
  %2325 = add i64 %2324, %2317
  %2326 = add i64 %2245, 85
  store i64 %2326, i64* %3, align 8
  %2327 = inttoptr i64 %2325 to i64*
  %2328 = load i64, i64* %2327, align 8
  store i64 %2328, i64* %.pre243, align 8
  %2329 = add i64 %2318, -42
  %2330 = add i64 %2245, 90
  store i64 %2330, i64* %3, align 8
  %2331 = inttoptr i64 %2329 to i16*
  %2332 = load i16, i16* %2331, align 2
  %2333 = sext i16 %2332 to i64
  store i64 %2333, i64* %RCX.i6189, align 8
  %2334 = shl nsw i64 %2333, 3
  %2335 = add i64 %2334, %2328
  %2336 = add i64 %2245, 94
  store i64 %2336, i64* %3, align 8
  %2337 = inttoptr i64 %2335 to i64*
  %2338 = load i64, i64* %2337, align 8
  store i64 %2338, i64* %.pre243, align 8
  %2339 = add i64 %2338, 8
  %2340 = add i64 %2245, 98
  store i64 %2340, i64* %3, align 8
  %2341 = inttoptr i64 %2339 to i64*
  %2342 = load i64, i64* %2341, align 8
  store i64 %2342, i64* %.pre243, align 8
  %2343 = add i64 %2342, 2
  %2344 = add i64 %2245, 102
  store i64 %2344, i64* %3, align 8
  %2345 = inttoptr i64 %2343 to i16*
  %2346 = load i16, i16* %2345, align 2
  %2347 = sext i16 %2346 to i64
  %2348 = and i64 %2347, 4294967295
  store i64 %2348, i64* %RDX.i5984, align 8
  %2349 = sext i16 %2346 to i32
  store i32 %2349, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %2350 = add i64 %2245, 113
  store i64 %2350, i64* %3, align 8
  %2351 = load i32, i32* %2321, align 4
  %2352 = add i32 %2351, -1
  %2353 = icmp eq i32 %2351, 0
  %2354 = zext i1 %2353 to i8
  store i8 %2354, i8* %44, align 1
  %2355 = and i32 %2352, 255
  %2356 = tail call i32 @llvm.ctpop.i32(i32 %2355)
  %2357 = trunc i32 %2356 to i8
  %2358 = and i8 %2357, 1
  %2359 = xor i8 %2358, 1
  store i8 %2359, i8* %51, align 1
  %2360 = xor i32 %2352, %2351
  %2361 = lshr i32 %2360, 4
  %2362 = trunc i32 %2361 to i8
  %2363 = and i8 %2362, 1
  store i8 %2363, i8* %56, align 1
  %2364 = icmp eq i32 %2352, 0
  %2365 = zext i1 %2364 to i8
  store i8 %2365, i8* %59, align 1
  %2366 = lshr i32 %2352, 31
  %2367 = trunc i32 %2366 to i8
  store i8 %2367, i8* %62, align 1
  %2368 = lshr i32 %2351, 31
  %2369 = xor i32 %2366, %2368
  %2370 = add nuw nsw i32 %2369, %2368
  %2371 = icmp eq i32 %2370, 2
  %2372 = zext i1 %2371 to i8
  store i8 %2372, i8* %68, align 1
  %.v329 = select i1 %2364, i64 119, i64 201
  %2373 = add i64 %2245, %.v329
  %2374 = add i64 %2373, 8
  store i64 %2374, i64* %3, align 8
  br i1 %2364, label %block_46ebd5, label %block_.L_46ec27

block_46ebd5:                                     ; preds = %block_46eb5e
  %2375 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %2375, i64* %.pre243, align 8
  %2376 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2376, i64* %RCX.i6189, align 8
  %2377 = add i64 %2376, 152
  %2378 = add i64 %2373, 22
  store i64 %2378, i64* %3, align 8
  %2379 = inttoptr i64 %2377 to i32*
  %2380 = load i32, i32* %2379, align 4
  %2381 = sext i32 %2380 to i64
  %2382 = ashr i64 %2381, 1
  %2383 = lshr i64 %2382, 1
  %2384 = trunc i64 %2382 to i8
  %2385 = and i8 %2384, 1
  %2386 = trunc i64 %2383 to i32
  %2387 = and i64 %2383, 4294967295
  store i64 %2387, i64* %RDX.i5984, align 8
  store i8 %2385, i8* %44, align 1
  %2388 = and i32 %2386, 255
  %2389 = tail call i32 @llvm.ctpop.i32(i32 %2388)
  %2390 = trunc i32 %2389 to i8
  %2391 = and i8 %2390, 1
  %2392 = xor i8 %2391, 1
  store i8 %2392, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2393 = icmp eq i32 %2386, 0
  %2394 = zext i1 %2393 to i8
  store i8 %2394, i8* %59, align 1
  %2395 = lshr i64 %2382, 32
  %2396 = trunc i64 %2395 to i8
  %2397 = and i8 %2396, 1
  store i8 %2397, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2398 = add i64 %2318, -100
  %2399 = add i64 %2373, 28
  store i64 %2399, i64* %3, align 8
  %2400 = trunc i64 %2383 to i32
  %2401 = inttoptr i64 %2398 to i32*
  %2402 = load i32, i32* %2401, align 4
  %2403 = add i32 %2402, %2400
  %2404 = zext i32 %2403 to i64
  store i64 %2404, i64* %RDX.i5984, align 8
  %2405 = icmp ult i32 %2403, %2400
  %2406 = icmp ult i32 %2403, %2402
  %2407 = or i1 %2405, %2406
  %2408 = zext i1 %2407 to i8
  store i8 %2408, i8* %44, align 1
  %2409 = and i32 %2403, 255
  %2410 = tail call i32 @llvm.ctpop.i32(i32 %2409)
  %2411 = trunc i32 %2410 to i8
  %2412 = and i8 %2411, 1
  %2413 = xor i8 %2412, 1
  store i8 %2413, i8* %51, align 1
  %2414 = xor i32 %2402, %2400
  %2415 = xor i32 %2414, %2403
  %2416 = lshr i32 %2415, 4
  %2417 = trunc i32 %2416 to i8
  %2418 = and i8 %2417, 1
  store i8 %2418, i8* %56, align 1
  %2419 = icmp eq i32 %2403, 0
  %2420 = zext i1 %2419 to i8
  store i8 %2420, i8* %59, align 1
  %2421 = lshr i32 %2403, 31
  %2422 = trunc i32 %2421 to i8
  store i8 %2422, i8* %62, align 1
  %2423 = lshr i64 %2382, 32
  %2424 = trunc i64 %2423 to i32
  %2425 = and i32 %2424, 1
  %2426 = lshr i32 %2402, 31
  %2427 = xor i32 %2421, %2425
  %2428 = xor i32 %2421, %2426
  %2429 = add nuw nsw i32 %2427, %2428
  %2430 = icmp eq i32 %2429, 2
  %2431 = zext i1 %2430 to i8
  store i8 %2431, i8* %68, align 1
  %2432 = sext i32 %2403 to i64
  store i64 %2432, i64* %RCX.i6189, align 8
  %2433 = shl nsw i64 %2432, 3
  %2434 = add i64 %2375, %2433
  %2435 = add i64 %2373, 35
  store i64 %2435, i64* %3, align 8
  %2436 = inttoptr i64 %2434 to i64*
  %2437 = load i64, i64* %2436, align 8
  store i64 %2437, i64* %.pre243, align 8
  store i64 %2376, i64* %RCX.i6189, align 8
  %2438 = add i64 %2376, 156
  %2439 = add i64 %2373, 49
  store i64 %2439, i64* %3, align 8
  %2440 = inttoptr i64 %2438 to i32*
  %2441 = load i32, i32* %2440, align 4
  %2442 = sext i32 %2441 to i64
  %2443 = ashr i64 %2442, 1
  %2444 = lshr i64 %2443, 1
  %2445 = trunc i64 %2443 to i8
  %2446 = and i8 %2445, 1
  %2447 = trunc i64 %2444 to i32
  %2448 = and i64 %2444, 4294967295
  store i64 %2448, i64* %RDX.i5984, align 8
  store i8 %2446, i8* %44, align 1
  %2449 = and i32 %2447, 255
  %2450 = tail call i32 @llvm.ctpop.i32(i32 %2449)
  %2451 = trunc i32 %2450 to i8
  %2452 = and i8 %2451, 1
  %2453 = xor i8 %2452, 1
  store i8 %2453, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2454 = icmp eq i32 %2447, 0
  %2455 = zext i1 %2454 to i8
  store i8 %2455, i8* %59, align 1
  %2456 = lshr i64 %2443, 32
  %2457 = trunc i64 %2456 to i8
  %2458 = and i8 %2457, 1
  store i8 %2458, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2459 = load i64, i64* %RBP.i, align 8
  %2460 = add i64 %2459, -104
  %2461 = add i64 %2373, 55
  store i64 %2461, i64* %3, align 8
  %2462 = trunc i64 %2444 to i32
  %2463 = inttoptr i64 %2460 to i32*
  %2464 = load i32, i32* %2463, align 4
  %2465 = add i32 %2464, %2462
  %2466 = zext i32 %2465 to i64
  store i64 %2466, i64* %RDX.i5984, align 8
  %2467 = icmp ult i32 %2465, %2462
  %2468 = icmp ult i32 %2465, %2464
  %2469 = or i1 %2467, %2468
  %2470 = zext i1 %2469 to i8
  store i8 %2470, i8* %44, align 1
  %2471 = and i32 %2465, 255
  %2472 = tail call i32 @llvm.ctpop.i32(i32 %2471)
  %2473 = trunc i32 %2472 to i8
  %2474 = and i8 %2473, 1
  %2475 = xor i8 %2474, 1
  store i8 %2475, i8* %51, align 1
  %2476 = xor i32 %2464, %2462
  %2477 = xor i32 %2476, %2465
  %2478 = lshr i32 %2477, 4
  %2479 = trunc i32 %2478 to i8
  %2480 = and i8 %2479, 1
  store i8 %2480, i8* %56, align 1
  %2481 = icmp eq i32 %2465, 0
  %2482 = zext i1 %2481 to i8
  store i8 %2482, i8* %59, align 1
  %2483 = lshr i32 %2465, 31
  %2484 = trunc i32 %2483 to i8
  store i8 %2484, i8* %62, align 1
  %2485 = lshr i64 %2443, 32
  %2486 = trunc i64 %2485 to i32
  %2487 = and i32 %2486, 1
  %2488 = lshr i32 %2464, 31
  %2489 = xor i32 %2483, %2487
  %2490 = xor i32 %2483, %2488
  %2491 = add nuw nsw i32 %2489, %2490
  %2492 = icmp eq i32 %2491, 2
  %2493 = zext i1 %2492 to i8
  store i8 %2493, i8* %68, align 1
  %2494 = sext i32 %2465 to i64
  store i64 %2494, i64* %RCX.i6189, align 8
  %2495 = shl nsw i64 %2494, 3
  %2496 = add i64 %2437, %2495
  %2497 = add i64 %2373, 62
  store i64 %2497, i64* %3, align 8
  %2498 = inttoptr i64 %2496 to i64*
  %2499 = load i64, i64* %2498, align 8
  store i64 %2499, i64* %.pre243, align 8
  %2500 = add i64 %2373, 65
  store i64 %2500, i64* %3, align 8
  %2501 = inttoptr i64 %2499 to i64*
  %2502 = load i64, i64* %2501, align 8
  store i64 %2502, i64* %.pre243, align 8
  %2503 = add i64 %2502, 8
  %2504 = add i64 %2373, 69
  store i64 %2504, i64* %3, align 8
  %2505 = inttoptr i64 %2503 to i64*
  %2506 = load i64, i64* %2505, align 8
  store i64 %2506, i64* %.pre243, align 8
  %2507 = add i64 %2373, 71
  store i64 %2507, i64* %3, align 8
  %2508 = inttoptr i64 %2506 to i32*
  %2509 = load i32, i32* %2508, align 4
  %2510 = zext i32 %2509 to i64
  store i64 %2510, i64* %RDX.i5984, align 8
  %2511 = add i64 %2459, -256
  %2512 = add i64 %2373, 77
  store i64 %2512, i64* %3, align 8
  %2513 = inttoptr i64 %2511 to i32*
  store i32 %2509, i32* %2513, align 4
  %2514 = load i64, i64* %3, align 8
  %2515 = add i64 %2514, 88
  store i64 %2515, i64* %3, align 8
  br label %block_.L_46ec7a

block_.L_46ec27:                                  ; preds = %block_46eb5e
  %2516 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %2516, i64* %.pre243, align 8
  %2517 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2517, i64* %RCX.i6189, align 8
  %2518 = add i64 %2517, 152
  %2519 = add i64 %2373, 22
  store i64 %2519, i64* %3, align 8
  %2520 = inttoptr i64 %2518 to i32*
  %2521 = load i32, i32* %2520, align 4
  %2522 = sext i32 %2521 to i64
  %2523 = ashr i64 %2522, 1
  %2524 = lshr i64 %2523, 1
  %2525 = trunc i64 %2523 to i8
  %2526 = and i8 %2525, 1
  %2527 = trunc i64 %2524 to i32
  %2528 = and i64 %2524, 4294967295
  store i64 %2528, i64* %RDX.i5984, align 8
  store i8 %2526, i8* %44, align 1
  %2529 = and i32 %2527, 255
  %2530 = tail call i32 @llvm.ctpop.i32(i32 %2529)
  %2531 = trunc i32 %2530 to i8
  %2532 = and i8 %2531, 1
  %2533 = xor i8 %2532, 1
  store i8 %2533, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2534 = icmp eq i32 %2527, 0
  %2535 = zext i1 %2534 to i8
  store i8 %2535, i8* %59, align 1
  %2536 = lshr i64 %2523, 32
  %2537 = trunc i64 %2536 to i8
  %2538 = and i8 %2537, 1
  store i8 %2538, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2539 = add i64 %2318, -100
  %2540 = add i64 %2373, 28
  store i64 %2540, i64* %3, align 8
  %2541 = trunc i64 %2524 to i32
  %2542 = inttoptr i64 %2539 to i32*
  %2543 = load i32, i32* %2542, align 4
  %2544 = add i32 %2543, %2541
  %2545 = zext i32 %2544 to i64
  store i64 %2545, i64* %RDX.i5984, align 8
  %2546 = icmp ult i32 %2544, %2541
  %2547 = icmp ult i32 %2544, %2543
  %2548 = or i1 %2546, %2547
  %2549 = zext i1 %2548 to i8
  store i8 %2549, i8* %44, align 1
  %2550 = and i32 %2544, 255
  %2551 = tail call i32 @llvm.ctpop.i32(i32 %2550)
  %2552 = trunc i32 %2551 to i8
  %2553 = and i8 %2552, 1
  %2554 = xor i8 %2553, 1
  store i8 %2554, i8* %51, align 1
  %2555 = xor i32 %2543, %2541
  %2556 = xor i32 %2555, %2544
  %2557 = lshr i32 %2556, 4
  %2558 = trunc i32 %2557 to i8
  %2559 = and i8 %2558, 1
  store i8 %2559, i8* %56, align 1
  %2560 = icmp eq i32 %2544, 0
  %2561 = zext i1 %2560 to i8
  store i8 %2561, i8* %59, align 1
  %2562 = lshr i32 %2544, 31
  %2563 = trunc i32 %2562 to i8
  store i8 %2563, i8* %62, align 1
  %2564 = lshr i64 %2523, 32
  %2565 = trunc i64 %2564 to i32
  %2566 = and i32 %2565, 1
  %2567 = lshr i32 %2543, 31
  %2568 = xor i32 %2562, %2566
  %2569 = xor i32 %2562, %2567
  %2570 = add nuw nsw i32 %2568, %2569
  %2571 = icmp eq i32 %2570, 2
  %2572 = zext i1 %2571 to i8
  store i8 %2572, i8* %68, align 1
  %2573 = sext i32 %2544 to i64
  store i64 %2573, i64* %RCX.i6189, align 8
  %2574 = shl nsw i64 %2573, 3
  %2575 = add i64 %2516, %2574
  %2576 = add i64 %2373, 35
  store i64 %2576, i64* %3, align 8
  %2577 = inttoptr i64 %2575 to i64*
  %2578 = load i64, i64* %2577, align 8
  store i64 %2578, i64* %.pre243, align 8
  store i64 %2517, i64* %RCX.i6189, align 8
  %2579 = add i64 %2517, 156
  %2580 = add i64 %2373, 49
  store i64 %2580, i64* %3, align 8
  %2581 = inttoptr i64 %2579 to i32*
  %2582 = load i32, i32* %2581, align 4
  %2583 = sext i32 %2582 to i64
  %2584 = ashr i64 %2583, 1
  %2585 = lshr i64 %2584, 1
  %2586 = trunc i64 %2584 to i8
  %2587 = and i8 %2586, 1
  %2588 = trunc i64 %2585 to i32
  %2589 = and i64 %2585, 4294967295
  store i64 %2589, i64* %RDX.i5984, align 8
  store i8 %2587, i8* %44, align 1
  %2590 = and i32 %2588, 255
  %2591 = tail call i32 @llvm.ctpop.i32(i32 %2590)
  %2592 = trunc i32 %2591 to i8
  %2593 = and i8 %2592, 1
  %2594 = xor i8 %2593, 1
  store i8 %2594, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2595 = icmp eq i32 %2588, 0
  %2596 = zext i1 %2595 to i8
  store i8 %2596, i8* %59, align 1
  %2597 = lshr i64 %2584, 32
  %2598 = trunc i64 %2597 to i8
  %2599 = and i8 %2598, 1
  store i8 %2599, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2600 = load i64, i64* %RBP.i, align 8
  %2601 = add i64 %2600, -104
  %2602 = add i64 %2373, 55
  store i64 %2602, i64* %3, align 8
  %2603 = trunc i64 %2585 to i32
  %2604 = inttoptr i64 %2601 to i32*
  %2605 = load i32, i32* %2604, align 4
  %2606 = add i32 %2605, %2603
  %2607 = zext i32 %2606 to i64
  store i64 %2607, i64* %RDX.i5984, align 8
  %2608 = icmp ult i32 %2606, %2603
  %2609 = icmp ult i32 %2606, %2605
  %2610 = or i1 %2608, %2609
  %2611 = zext i1 %2610 to i8
  store i8 %2611, i8* %44, align 1
  %2612 = and i32 %2606, 255
  %2613 = tail call i32 @llvm.ctpop.i32(i32 %2612)
  %2614 = trunc i32 %2613 to i8
  %2615 = and i8 %2614, 1
  %2616 = xor i8 %2615, 1
  store i8 %2616, i8* %51, align 1
  %2617 = xor i32 %2605, %2603
  %2618 = xor i32 %2617, %2606
  %2619 = lshr i32 %2618, 4
  %2620 = trunc i32 %2619 to i8
  %2621 = and i8 %2620, 1
  store i8 %2621, i8* %56, align 1
  %2622 = icmp eq i32 %2606, 0
  %2623 = zext i1 %2622 to i8
  store i8 %2623, i8* %59, align 1
  %2624 = lshr i32 %2606, 31
  %2625 = trunc i32 %2624 to i8
  store i8 %2625, i8* %62, align 1
  %2626 = lshr i64 %2584, 32
  %2627 = trunc i64 %2626 to i32
  %2628 = and i32 %2627, 1
  %2629 = lshr i32 %2605, 31
  %2630 = xor i32 %2624, %2628
  %2631 = xor i32 %2624, %2629
  %2632 = add nuw nsw i32 %2630, %2631
  %2633 = icmp eq i32 %2632, 2
  %2634 = zext i1 %2633 to i8
  store i8 %2634, i8* %68, align 1
  %2635 = sext i32 %2606 to i64
  store i64 %2635, i64* %RCX.i6189, align 8
  %2636 = shl nsw i64 %2635, 3
  %2637 = add i64 %2578, %2636
  %2638 = add i64 %2373, 62
  store i64 %2638, i64* %3, align 8
  %2639 = inttoptr i64 %2637 to i64*
  %2640 = load i64, i64* %2639, align 8
  store i64 %2640, i64* %.pre243, align 8
  %2641 = add i64 %2600, -42
  %2642 = add i64 %2373, 67
  store i64 %2642, i64* %3, align 8
  %2643 = inttoptr i64 %2641 to i16*
  %2644 = load i16, i16* %2643, align 2
  %2645 = sext i16 %2644 to i64
  store i64 %2645, i64* %RCX.i6189, align 8
  %2646 = shl nsw i64 %2645, 3
  %2647 = add i64 %2646, %2640
  %2648 = add i64 %2373, 71
  store i64 %2648, i64* %3, align 8
  %2649 = inttoptr i64 %2647 to i64*
  %2650 = load i64, i64* %2649, align 8
  store i64 %2650, i64* %.pre243, align 8
  %2651 = add i64 %2650, 8
  %2652 = add i64 %2373, 75
  store i64 %2652, i64* %3, align 8
  %2653 = inttoptr i64 %2651 to i64*
  %2654 = load i64, i64* %2653, align 8
  store i64 %2654, i64* %.pre243, align 8
  %2655 = add i64 %2373, 77
  store i64 %2655, i64* %3, align 8
  %2656 = inttoptr i64 %2654 to i32*
  %2657 = load i32, i32* %2656, align 4
  %2658 = zext i32 %2657 to i64
  store i64 %2658, i64* %RDX.i5984, align 8
  %2659 = add i64 %2600, -256
  %2660 = add i64 %2373, 83
  store i64 %2660, i64* %3, align 8
  %2661 = inttoptr i64 %2659 to i32*
  store i32 %2657, i32* %2661, align 4
  %.pre155 = load i64, i64* %3, align 8
  br label %block_.L_46ec7a

block_.L_46ec7a:                                  ; preds = %block_.L_46ec27, %block_46ebd5
  %2662 = phi i64 [ %.pre155, %block_.L_46ec27 ], [ %2515, %block_46ebd5 ]
  %2663 = load i64, i64* %RBP.i, align 8
  %2664 = add i64 %2663, -256
  %2665 = add i64 %2662, 6
  store i64 %2665, i64* %3, align 8
  %2666 = inttoptr i64 %2664 to i32*
  %2667 = load i32, i32* %2666, align 4
  %2668 = zext i32 %2667 to i64
  store i64 2, i64* %RCX.i6189, align 8
  store i32 %2667, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i64 %2668, i64* %.pre243, align 8
  %2669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2670 = sext i32 %2667 to i64
  %2671 = lshr i64 %2670, 32
  store i64 %2671, i64* %2669, align 8
  %2672 = add i64 %2662, 28
  store i64 %2672, i64* %3, align 8
  %2673 = shl nuw i64 %2671, 32
  %2674 = or i64 %2673, %2668
  %2675 = sdiv i64 %2674, 2
  %2676 = shl i64 %2675, 32
  %2677 = ashr exact i64 %2676, 32
  %2678 = icmp eq i64 %2675, %2677
  br i1 %2678, label %2681, label %2679

; <label>:2679:                                   ; preds = %block_.L_46ec7a
  %2680 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2672, %struct.Memory* %MEMORY.1)
  %.pre156 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %.pre157 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit5191

; <label>:2681:                                   ; preds = %block_.L_46ec7a
  %2682 = srem i64 %2674, 2
  %2683 = and i64 %2675, 4294967295
  store i64 %2683, i64* %.pre243, align 8
  %2684 = and i64 %2682, 4294967295
  store i64 %2684, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2685 = trunc i64 %2675 to i32
  br label %routine_idivl__ecx.exit5191

routine_idivl__ecx.exit5191:                      ; preds = %2681, %2679
  %2686 = phi i64 [ %.pre157, %2679 ], [ %2672, %2681 ]
  %2687 = phi i32 [ %.pre156, %2679 ], [ %2685, %2681 ]
  %2688 = phi %struct.Memory* [ %2680, %2679 ], [ %MEMORY.1, %2681 ]
  %2689 = add i64 %2686, 7
  store i64 %2689, i64* %3, align 8
  store i32 %2687, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  br label %block_.L_46ec9d

block_.L_46ec9d:                                  ; preds = %routine_idivl__ecx.exit5191, %block_.L_46eb54
  %2690 = phi i64 [ %2245, %block_.L_46eb54 ], [ %2689, %routine_idivl__ecx.exit5191 ]
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.1, %block_.L_46eb54 ], [ %2688, %routine_idivl__ecx.exit5191 ]
  %2691 = add i64 %2690, 5
  store i64 %2691, i64* %3, align 8
  br label %block_.L_46eca2

block_.L_46eca2:                                  ; preds = %block_.L_46ec9d, %routine_idivl__ecx.exit5377
  %storemerge104 = phi i64 [ %2218, %routine_idivl__ecx.exit5377 ], [ %2691, %block_.L_46ec9d ]
  %MEMORY.9 = phi %struct.Memory* [ %2216, %routine_idivl__ecx.exit5377 ], [ %MEMORY.8, %block_.L_46ec9d ]
  %2692 = add i64 %storemerge104, 5
  store i64 %2692, i64* %3, align 8
  br label %block_.L_46eca7

block_.L_46eca7:                                  ; preds = %block_.L_46eca2, %routine_idivl__ecx.exit5563
  %storemerge103 = phi i64 [ %1749, %routine_idivl__ecx.exit5563 ], [ %2692, %block_.L_46eca2 ]
  %MEMORY.10 = phi %struct.Memory* [ %1747, %routine_idivl__ecx.exit5563 ], [ %MEMORY.9, %block_.L_46eca2 ]
  %2693 = add i64 %storemerge103, 5
  store i64 %2693, i64* %3, align 8
  br label %block_.L_46ecac

block_.L_46ecac:                                  ; preds = %block_.L_46eca7, %routine_idivl__ecx.exit5749
  %storemerge89 = phi i64 [ %1277, %routine_idivl__ecx.exit5749 ], [ %2693, %block_.L_46eca7 ]
  %MEMORY.11 = phi %struct.Memory* [ %1275, %routine_idivl__ecx.exit5749 ], [ %MEMORY.10, %block_.L_46eca7 ]
  %2694 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2694, i64* %.pre243, align 8
  %2695 = add i64 %2694, 24
  %2696 = add i64 %storemerge89, 12
  store i64 %2696, i64* %3, align 8
  %2697 = inttoptr i64 %2695 to i32*
  %2698 = load i32, i32* %2697, align 4
  %2699 = add i32 %2698, -1
  %2700 = icmp eq i32 %2698, 0
  %2701 = zext i1 %2700 to i8
  store i8 %2701, i8* %44, align 1
  %2702 = and i32 %2699, 255
  %2703 = tail call i32 @llvm.ctpop.i32(i32 %2702)
  %2704 = trunc i32 %2703 to i8
  %2705 = and i8 %2704, 1
  %2706 = xor i8 %2705, 1
  store i8 %2706, i8* %51, align 1
  %2707 = xor i32 %2699, %2698
  %2708 = lshr i32 %2707, 4
  %2709 = trunc i32 %2708 to i8
  %2710 = and i8 %2709, 1
  store i8 %2710, i8* %56, align 1
  %2711 = icmp eq i32 %2699, 0
  %2712 = zext i1 %2711 to i8
  store i8 %2712, i8* %59, align 1
  %2713 = lshr i32 %2699, 31
  %2714 = trunc i32 %2713 to i8
  store i8 %2714, i8* %62, align 1
  %2715 = lshr i32 %2698, 31
  %2716 = xor i32 %2713, %2715
  %2717 = add nuw nsw i32 %2716, %2715
  %2718 = icmp eq i32 %2717, 2
  %2719 = zext i1 %2718 to i8
  store i8 %2719, i8* %68, align 1
  %.v260 = select i1 %2711, i64 18, i64 1390
  %2720 = add i64 %storemerge89, %.v260
  store i64 %2720, i64* %3, align 8
  br i1 %2711, label %block_46ecbe, label %block_.L_46f21a

block_46ecbe:                                     ; preds = %block_.L_46ecac
  store i64 %2694, i64* %.pre243, align 8
  %2721 = add i64 %2694, 72496
  %2722 = add i64 %2720, 15
  store i64 %2722, i64* %3, align 8
  %2723 = inttoptr i64 %2721 to i32*
  %2724 = load i32, i32* %2723, align 4
  store i8 0, i8* %44, align 1
  %2725 = and i32 %2724, 255
  %2726 = tail call i32 @llvm.ctpop.i32(i32 %2725)
  %2727 = trunc i32 %2726 to i8
  %2728 = and i8 %2727, 1
  %2729 = xor i8 %2728, 1
  store i8 %2729, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2730 = icmp eq i32 %2724, 0
  %2731 = zext i1 %2730 to i8
  store i8 %2731, i8* %59, align 1
  %2732 = lshr i32 %2724, 31
  %2733 = trunc i32 %2732 to i8
  store i8 %2733, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2734 = icmp ne i8 %2733, 0
  %2735 = or i1 %2730, %2734
  %.v316 = select i1 %2735, i64 1372, i64 21
  %2736 = add i64 %2720, %.v316
  store i64 %2736, i64* %3, align 8
  br i1 %2735, label %block_.L_46f21a, label %block_46ecd3

block_46ecd3:                                     ; preds = %block_46ecbe
  %2737 = load i64, i64* %RBP.i, align 8
  %2738 = add i64 %2737, -60
  %2739 = add i64 %2736, 4
  store i64 %2739, i64* %3, align 8
  %2740 = inttoptr i64 %2738 to i32*
  %2741 = load i32, i32* %2740, align 4
  %2742 = add i32 %2741, -6
  %2743 = icmp ult i32 %2741, 6
  %2744 = zext i1 %2743 to i8
  store i8 %2744, i8* %44, align 1
  %2745 = and i32 %2742, 255
  %2746 = tail call i32 @llvm.ctpop.i32(i32 %2745)
  %2747 = trunc i32 %2746 to i8
  %2748 = and i8 %2747, 1
  %2749 = xor i8 %2748, 1
  store i8 %2749, i8* %51, align 1
  %2750 = xor i32 %2742, %2741
  %2751 = lshr i32 %2750, 4
  %2752 = trunc i32 %2751 to i8
  %2753 = and i8 %2752, 1
  store i8 %2753, i8* %56, align 1
  %2754 = icmp eq i32 %2742, 0
  %2755 = zext i1 %2754 to i8
  store i8 %2755, i8* %59, align 1
  %2756 = lshr i32 %2742, 31
  %2757 = trunc i32 %2756 to i8
  store i8 %2757, i8* %62, align 1
  %2758 = lshr i32 %2741, 31
  %2759 = xor i32 %2756, %2758
  %2760 = add nuw nsw i32 %2759, %2758
  %2761 = icmp eq i32 %2760, 2
  %2762 = zext i1 %2761 to i8
  store i8 %2762, i8* %68, align 1
  %2763 = icmp ne i8 %2757, 0
  %2764 = xor i1 %2763, %2761
  %2765 = or i1 %2754, %2764
  %.v317 = select i1 %2765, i64 334, i64 10
  %2766 = add i64 %2736, %.v317
  store i64 %2766, i64* %3, align 8
  br i1 %2765, label %block_.L_46ee21, label %block_46ecdd

block_46ecdd:                                     ; preds = %block_46ecd3
  %2767 = add i64 %2737, -144
  %2768 = add i64 %2766, 7
  store i64 %2768, i64* %3, align 8
  %2769 = inttoptr i64 %2767 to i64*
  %2770 = load i64, i64* %2769, align 8
  store i64 %2770, i64* %.pre243, align 8
  %2771 = add i64 %2737, -100
  %2772 = add i64 %2766, 11
  store i64 %2772, i64* %3, align 8
  %2773 = inttoptr i64 %2771 to i32*
  %2774 = load i32, i32* %2773, align 4
  %2775 = sext i32 %2774 to i64
  store i64 %2775, i64* %RCX.i6189, align 8
  %2776 = shl nsw i64 %2775, 3
  %2777 = add i64 %2776, %2770
  %2778 = add i64 %2766, 15
  store i64 %2778, i64* %3, align 8
  %2779 = inttoptr i64 %2777 to i64*
  %2780 = load i64, i64* %2779, align 8
  store i64 %2780, i64* %.pre243, align 8
  %2781 = add i64 %2737, -104
  %2782 = add i64 %2766, 19
  store i64 %2782, i64* %3, align 8
  %2783 = inttoptr i64 %2781 to i32*
  %2784 = load i32, i32* %2783, align 4
  %2785 = sext i32 %2784 to i64
  store i64 %2785, i64* %RCX.i6189, align 8
  %2786 = shl nsw i64 %2785, 3
  %2787 = add i64 %2786, %2780
  %2788 = add i64 %2766, 23
  store i64 %2788, i64* %3, align 8
  %2789 = inttoptr i64 %2787 to i64*
  %2790 = load i64, i64* %2789, align 8
  store i64 %2790, i64* %.pre243, align 8
  %2791 = add i64 %2737, -48
  %2792 = add i64 %2766, 27
  store i64 %2792, i64* %3, align 8
  %2793 = inttoptr i64 %2791 to i32*
  %2794 = load i32, i32* %2793, align 4
  %2795 = sext i32 %2794 to i64
  store i64 %2795, i64* %RCX.i6189, align 8
  %2796 = shl nsw i64 %2795, 3
  %2797 = add i64 %2796, %2790
  %2798 = add i64 %2766, 31
  store i64 %2798, i64* %3, align 8
  %2799 = inttoptr i64 %2797 to i64*
  %2800 = load i64, i64* %2799, align 8
  store i64 %2800, i64* %.pre243, align 8
  %2801 = add i64 %2737, -42
  %2802 = add i64 %2766, 36
  store i64 %2802, i64* %3, align 8
  %2803 = inttoptr i64 %2801 to i16*
  %2804 = load i16, i16* %2803, align 2
  %2805 = sext i16 %2804 to i64
  store i64 %2805, i64* %RCX.i6189, align 8
  %2806 = shl nsw i64 %2805, 3
  %2807 = add i64 %2806, %2800
  %2808 = add i64 %2766, 40
  store i64 %2808, i64* %3, align 8
  %2809 = inttoptr i64 %2807 to i64*
  %2810 = load i64, i64* %2809, align 8
  store i64 %2810, i64* %.pre243, align 8
  %2811 = add i64 %2810, 40
  %2812 = add i64 %2766, 44
  store i64 %2812, i64* %3, align 8
  %2813 = inttoptr i64 %2811 to i64*
  %2814 = load i64, i64* %2813, align 8
  store i64 %2814, i64* %.pre243, align 8
  %2815 = add i64 %2766, 47
  store i64 %2815, i64* %3, align 8
  %2816 = inttoptr i64 %2814 to i16*
  %2817 = load i16, i16* %2816, align 2
  %2818 = sext i16 %2817 to i64
  %2819 = and i64 %2818, 4294967295
  store i64 %2819, i64* %RDX.i5984, align 8
  %2820 = sext i16 %2817 to i32
  store i32 %2820, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %2821 = add i64 %2766, 61
  store i64 %2821, i64* %3, align 8
  %2822 = load i64, i64* %2769, align 8
  store i64 %2822, i64* %.pre243, align 8
  %2823 = add i64 %2766, 65
  store i64 %2823, i64* %3, align 8
  %2824 = load i32, i32* %2773, align 4
  %2825 = sext i32 %2824 to i64
  store i64 %2825, i64* %RCX.i6189, align 8
  %2826 = shl nsw i64 %2825, 3
  %2827 = add i64 %2826, %2822
  %2828 = add i64 %2766, 69
  store i64 %2828, i64* %3, align 8
  %2829 = inttoptr i64 %2827 to i64*
  %2830 = load i64, i64* %2829, align 8
  store i64 %2830, i64* %.pre243, align 8
  %2831 = add i64 %2766, 73
  store i64 %2831, i64* %3, align 8
  %2832 = load i32, i32* %2783, align 4
  %2833 = sext i32 %2832 to i64
  store i64 %2833, i64* %RCX.i6189, align 8
  %2834 = shl nsw i64 %2833, 3
  %2835 = add i64 %2834, %2830
  %2836 = add i64 %2766, 77
  store i64 %2836, i64* %3, align 8
  %2837 = inttoptr i64 %2835 to i64*
  %2838 = load i64, i64* %2837, align 8
  store i64 %2838, i64* %.pre243, align 8
  %2839 = load i64, i64* %RBP.i, align 8
  %2840 = add i64 %2839, -48
  %2841 = add i64 %2766, 81
  store i64 %2841, i64* %3, align 8
  %2842 = inttoptr i64 %2840 to i32*
  %2843 = load i32, i32* %2842, align 4
  %2844 = sext i32 %2843 to i64
  store i64 %2844, i64* %RCX.i6189, align 8
  %2845 = shl nsw i64 %2844, 3
  %2846 = add i64 %2845, %2838
  %2847 = add i64 %2766, 85
  store i64 %2847, i64* %3, align 8
  %2848 = inttoptr i64 %2846 to i64*
  %2849 = load i64, i64* %2848, align 8
  store i64 %2849, i64* %.pre243, align 8
  %2850 = add i64 %2839, -42
  %2851 = add i64 %2766, 90
  store i64 %2851, i64* %3, align 8
  %2852 = inttoptr i64 %2850 to i16*
  %2853 = load i16, i16* %2852, align 2
  %2854 = sext i16 %2853 to i64
  store i64 %2854, i64* %RCX.i6189, align 8
  %2855 = shl nsw i64 %2854, 3
  %2856 = add i64 %2855, %2849
  %2857 = add i64 %2766, 94
  store i64 %2857, i64* %3, align 8
  %2858 = inttoptr i64 %2856 to i64*
  %2859 = load i64, i64* %2858, align 8
  store i64 %2859, i64* %.pre243, align 8
  %2860 = add i64 %2859, 40
  %2861 = add i64 %2766, 98
  store i64 %2861, i64* %3, align 8
  %2862 = inttoptr i64 %2860 to i64*
  %2863 = load i64, i64* %2862, align 8
  store i64 %2863, i64* %.pre243, align 8
  %2864 = add i64 %2863, 2
  %2865 = add i64 %2766, 102
  store i64 %2865, i64* %3, align 8
  %2866 = inttoptr i64 %2864 to i16*
  %2867 = load i16, i16* %2866, align 2
  %2868 = sext i16 %2867 to i64
  %2869 = and i64 %2868, 4294967295
  store i64 %2869, i64* %RDX.i5984, align 8
  %2870 = sext i16 %2867 to i32
  store i32 %2870, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %2871 = add i64 %2766, 113
  store i64 %2871, i64* %3, align 8
  %2872 = load i32, i32* %2842, align 4
  %2873 = add i32 %2872, -1
  %2874 = icmp eq i32 %2872, 0
  %2875 = zext i1 %2874 to i8
  store i8 %2875, i8* %44, align 1
  %2876 = and i32 %2873, 255
  %2877 = tail call i32 @llvm.ctpop.i32(i32 %2876)
  %2878 = trunc i32 %2877 to i8
  %2879 = and i8 %2878, 1
  %2880 = xor i8 %2879, 1
  store i8 %2880, i8* %51, align 1
  %2881 = xor i32 %2873, %2872
  %2882 = lshr i32 %2881, 4
  %2883 = trunc i32 %2882 to i8
  %2884 = and i8 %2883, 1
  store i8 %2884, i8* %56, align 1
  %2885 = icmp eq i32 %2873, 0
  %2886 = zext i1 %2885 to i8
  store i8 %2886, i8* %59, align 1
  %2887 = lshr i32 %2873, 31
  %2888 = trunc i32 %2887 to i8
  store i8 %2888, i8* %62, align 1
  %2889 = lshr i32 %2872, 31
  %2890 = xor i32 %2887, %2889
  %2891 = add nuw nsw i32 %2890, %2889
  %2892 = icmp eq i32 %2891, 2
  %2893 = zext i1 %2892 to i8
  store i8 %2893, i8* %68, align 1
  %.v318 = select i1 %2885, i64 119, i64 201
  %2894 = add i64 %2766, %.v318
  %2895 = add i64 %2894, 8
  store i64 %2895, i64* %3, align 8
  br i1 %2885, label %block_46ed54, label %block_.L_46eda6

block_46ed54:                                     ; preds = %block_46ecdd
  %2896 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %2896, i64* %.pre243, align 8
  %2897 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2897, i64* %RCX.i6189, align 8
  %2898 = add i64 %2897, 152
  %2899 = add i64 %2894, 22
  store i64 %2899, i64* %3, align 8
  %2900 = inttoptr i64 %2898 to i32*
  %2901 = load i32, i32* %2900, align 4
  %2902 = sext i32 %2901 to i64
  %2903 = ashr i64 %2902, 1
  %2904 = lshr i64 %2903, 1
  %2905 = trunc i64 %2903 to i8
  %2906 = and i8 %2905, 1
  %2907 = trunc i64 %2904 to i32
  %2908 = and i64 %2904, 4294967295
  store i64 %2908, i64* %RDX.i5984, align 8
  store i8 %2906, i8* %44, align 1
  %2909 = and i32 %2907, 255
  %2910 = tail call i32 @llvm.ctpop.i32(i32 %2909)
  %2911 = trunc i32 %2910 to i8
  %2912 = and i8 %2911, 1
  %2913 = xor i8 %2912, 1
  store i8 %2913, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2914 = icmp eq i32 %2907, 0
  %2915 = zext i1 %2914 to i8
  store i8 %2915, i8* %59, align 1
  %2916 = lshr i64 %2903, 32
  %2917 = trunc i64 %2916 to i8
  %2918 = and i8 %2917, 1
  store i8 %2918, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2919 = add i64 %2839, -100
  %2920 = add i64 %2894, 28
  store i64 %2920, i64* %3, align 8
  %2921 = trunc i64 %2904 to i32
  %2922 = inttoptr i64 %2919 to i32*
  %2923 = load i32, i32* %2922, align 4
  %2924 = add i32 %2923, %2921
  %2925 = zext i32 %2924 to i64
  store i64 %2925, i64* %RDX.i5984, align 8
  %2926 = icmp ult i32 %2924, %2921
  %2927 = icmp ult i32 %2924, %2923
  %2928 = or i1 %2926, %2927
  %2929 = zext i1 %2928 to i8
  store i8 %2929, i8* %44, align 1
  %2930 = and i32 %2924, 255
  %2931 = tail call i32 @llvm.ctpop.i32(i32 %2930)
  %2932 = trunc i32 %2931 to i8
  %2933 = and i8 %2932, 1
  %2934 = xor i8 %2933, 1
  store i8 %2934, i8* %51, align 1
  %2935 = xor i32 %2923, %2921
  %2936 = xor i32 %2935, %2924
  %2937 = lshr i32 %2936, 4
  %2938 = trunc i32 %2937 to i8
  %2939 = and i8 %2938, 1
  store i8 %2939, i8* %56, align 1
  %2940 = icmp eq i32 %2924, 0
  %2941 = zext i1 %2940 to i8
  store i8 %2941, i8* %59, align 1
  %2942 = lshr i32 %2924, 31
  %2943 = trunc i32 %2942 to i8
  store i8 %2943, i8* %62, align 1
  %2944 = lshr i64 %2903, 32
  %2945 = trunc i64 %2944 to i32
  %2946 = and i32 %2945, 1
  %2947 = lshr i32 %2923, 31
  %2948 = xor i32 %2942, %2946
  %2949 = xor i32 %2942, %2947
  %2950 = add nuw nsw i32 %2948, %2949
  %2951 = icmp eq i32 %2950, 2
  %2952 = zext i1 %2951 to i8
  store i8 %2952, i8* %68, align 1
  %2953 = sext i32 %2924 to i64
  store i64 %2953, i64* %RCX.i6189, align 8
  %2954 = shl nsw i64 %2953, 3
  %2955 = add i64 %2896, %2954
  %2956 = add i64 %2894, 35
  store i64 %2956, i64* %3, align 8
  %2957 = inttoptr i64 %2955 to i64*
  %2958 = load i64, i64* %2957, align 8
  store i64 %2958, i64* %.pre243, align 8
  store i64 %2897, i64* %RCX.i6189, align 8
  %2959 = add i64 %2897, 156
  %2960 = add i64 %2894, 49
  store i64 %2960, i64* %3, align 8
  %2961 = inttoptr i64 %2959 to i32*
  %2962 = load i32, i32* %2961, align 4
  %2963 = sext i32 %2962 to i64
  %2964 = ashr i64 %2963, 1
  %2965 = lshr i64 %2964, 1
  %2966 = trunc i64 %2964 to i8
  %2967 = and i8 %2966, 1
  %2968 = trunc i64 %2965 to i32
  %2969 = and i64 %2965, 4294967295
  store i64 %2969, i64* %RDX.i5984, align 8
  store i8 %2967, i8* %44, align 1
  %2970 = and i32 %2968, 255
  %2971 = tail call i32 @llvm.ctpop.i32(i32 %2970)
  %2972 = trunc i32 %2971 to i8
  %2973 = and i8 %2972, 1
  %2974 = xor i8 %2973, 1
  store i8 %2974, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %2975 = icmp eq i32 %2968, 0
  %2976 = zext i1 %2975 to i8
  store i8 %2976, i8* %59, align 1
  %2977 = lshr i64 %2964, 32
  %2978 = trunc i64 %2977 to i8
  %2979 = and i8 %2978, 1
  store i8 %2979, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %2980 = load i64, i64* %RBP.i, align 8
  %2981 = add i64 %2980, -104
  %2982 = add i64 %2894, 55
  store i64 %2982, i64* %3, align 8
  %2983 = trunc i64 %2965 to i32
  %2984 = inttoptr i64 %2981 to i32*
  %2985 = load i32, i32* %2984, align 4
  %2986 = add i32 %2985, %2983
  %2987 = zext i32 %2986 to i64
  store i64 %2987, i64* %RDX.i5984, align 8
  %2988 = icmp ult i32 %2986, %2983
  %2989 = icmp ult i32 %2986, %2985
  %2990 = or i1 %2988, %2989
  %2991 = zext i1 %2990 to i8
  store i8 %2991, i8* %44, align 1
  %2992 = and i32 %2986, 255
  %2993 = tail call i32 @llvm.ctpop.i32(i32 %2992)
  %2994 = trunc i32 %2993 to i8
  %2995 = and i8 %2994, 1
  %2996 = xor i8 %2995, 1
  store i8 %2996, i8* %51, align 1
  %2997 = xor i32 %2985, %2983
  %2998 = xor i32 %2997, %2986
  %2999 = lshr i32 %2998, 4
  %3000 = trunc i32 %2999 to i8
  %3001 = and i8 %3000, 1
  store i8 %3001, i8* %56, align 1
  %3002 = icmp eq i32 %2986, 0
  %3003 = zext i1 %3002 to i8
  store i8 %3003, i8* %59, align 1
  %3004 = lshr i32 %2986, 31
  %3005 = trunc i32 %3004 to i8
  store i8 %3005, i8* %62, align 1
  %3006 = lshr i64 %2964, 32
  %3007 = trunc i64 %3006 to i32
  %3008 = and i32 %3007, 1
  %3009 = lshr i32 %2985, 31
  %3010 = xor i32 %3004, %3008
  %3011 = xor i32 %3004, %3009
  %3012 = add nuw nsw i32 %3010, %3011
  %3013 = icmp eq i32 %3012, 2
  %3014 = zext i1 %3013 to i8
  store i8 %3014, i8* %68, align 1
  %3015 = sext i32 %2986 to i64
  store i64 %3015, i64* %RCX.i6189, align 8
  %3016 = shl nsw i64 %3015, 3
  %3017 = add i64 %2958, %3016
  %3018 = add i64 %2894, 62
  store i64 %3018, i64* %3, align 8
  %3019 = inttoptr i64 %3017 to i64*
  %3020 = load i64, i64* %3019, align 8
  store i64 %3020, i64* %.pre243, align 8
  %3021 = add i64 %2894, 65
  store i64 %3021, i64* %3, align 8
  %3022 = inttoptr i64 %3020 to i64*
  %3023 = load i64, i64* %3022, align 8
  store i64 %3023, i64* %.pre243, align 8
  %3024 = add i64 %3023, 40
  %3025 = add i64 %2894, 69
  store i64 %3025, i64* %3, align 8
  %3026 = inttoptr i64 %3024 to i64*
  %3027 = load i64, i64* %3026, align 8
  store i64 %3027, i64* %.pre243, align 8
  %3028 = add i64 %2894, 71
  store i64 %3028, i64* %3, align 8
  %3029 = inttoptr i64 %3027 to i32*
  %3030 = load i32, i32* %3029, align 4
  %3031 = zext i32 %3030 to i64
  store i64 %3031, i64* %RDX.i5984, align 8
  %3032 = add i64 %2980, -260
  %3033 = add i64 %2894, 77
  store i64 %3033, i64* %3, align 8
  %3034 = inttoptr i64 %3032 to i32*
  store i32 %3030, i32* %3034, align 4
  %3035 = load i64, i64* %3, align 8
  %3036 = add i64 %3035, 88
  store i64 %3036, i64* %3, align 8
  br label %block_.L_46edf9

block_.L_46eda6:                                  ; preds = %block_46ecdd
  %3037 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %3037, i64* %.pre243, align 8
  %3038 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3038, i64* %RCX.i6189, align 8
  %3039 = add i64 %3038, 152
  %3040 = add i64 %2894, 22
  store i64 %3040, i64* %3, align 8
  %3041 = inttoptr i64 %3039 to i32*
  %3042 = load i32, i32* %3041, align 4
  %3043 = sext i32 %3042 to i64
  %3044 = ashr i64 %3043, 1
  %3045 = lshr i64 %3044, 1
  %3046 = trunc i64 %3044 to i8
  %3047 = and i8 %3046, 1
  %3048 = trunc i64 %3045 to i32
  %3049 = and i64 %3045, 4294967295
  store i64 %3049, i64* %RDX.i5984, align 8
  store i8 %3047, i8* %44, align 1
  %3050 = and i32 %3048, 255
  %3051 = tail call i32 @llvm.ctpop.i32(i32 %3050)
  %3052 = trunc i32 %3051 to i8
  %3053 = and i8 %3052, 1
  %3054 = xor i8 %3053, 1
  store i8 %3054, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3055 = icmp eq i32 %3048, 0
  %3056 = zext i1 %3055 to i8
  store i8 %3056, i8* %59, align 1
  %3057 = lshr i64 %3044, 32
  %3058 = trunc i64 %3057 to i8
  %3059 = and i8 %3058, 1
  store i8 %3059, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3060 = add i64 %2839, -100
  %3061 = add i64 %2894, 28
  store i64 %3061, i64* %3, align 8
  %3062 = trunc i64 %3045 to i32
  %3063 = inttoptr i64 %3060 to i32*
  %3064 = load i32, i32* %3063, align 4
  %3065 = add i32 %3064, %3062
  %3066 = zext i32 %3065 to i64
  store i64 %3066, i64* %RDX.i5984, align 8
  %3067 = icmp ult i32 %3065, %3062
  %3068 = icmp ult i32 %3065, %3064
  %3069 = or i1 %3067, %3068
  %3070 = zext i1 %3069 to i8
  store i8 %3070, i8* %44, align 1
  %3071 = and i32 %3065, 255
  %3072 = tail call i32 @llvm.ctpop.i32(i32 %3071)
  %3073 = trunc i32 %3072 to i8
  %3074 = and i8 %3073, 1
  %3075 = xor i8 %3074, 1
  store i8 %3075, i8* %51, align 1
  %3076 = xor i32 %3064, %3062
  %3077 = xor i32 %3076, %3065
  %3078 = lshr i32 %3077, 4
  %3079 = trunc i32 %3078 to i8
  %3080 = and i8 %3079, 1
  store i8 %3080, i8* %56, align 1
  %3081 = icmp eq i32 %3065, 0
  %3082 = zext i1 %3081 to i8
  store i8 %3082, i8* %59, align 1
  %3083 = lshr i32 %3065, 31
  %3084 = trunc i32 %3083 to i8
  store i8 %3084, i8* %62, align 1
  %3085 = lshr i64 %3044, 32
  %3086 = trunc i64 %3085 to i32
  %3087 = and i32 %3086, 1
  %3088 = lshr i32 %3064, 31
  %3089 = xor i32 %3083, %3087
  %3090 = xor i32 %3083, %3088
  %3091 = add nuw nsw i32 %3089, %3090
  %3092 = icmp eq i32 %3091, 2
  %3093 = zext i1 %3092 to i8
  store i8 %3093, i8* %68, align 1
  %3094 = sext i32 %3065 to i64
  store i64 %3094, i64* %RCX.i6189, align 8
  %3095 = shl nsw i64 %3094, 3
  %3096 = add i64 %3037, %3095
  %3097 = add i64 %2894, 35
  store i64 %3097, i64* %3, align 8
  %3098 = inttoptr i64 %3096 to i64*
  %3099 = load i64, i64* %3098, align 8
  store i64 %3099, i64* %.pre243, align 8
  store i64 %3038, i64* %RCX.i6189, align 8
  %3100 = add i64 %3038, 156
  %3101 = add i64 %2894, 49
  store i64 %3101, i64* %3, align 8
  %3102 = inttoptr i64 %3100 to i32*
  %3103 = load i32, i32* %3102, align 4
  %3104 = sext i32 %3103 to i64
  %3105 = ashr i64 %3104, 1
  %3106 = lshr i64 %3105, 1
  %3107 = trunc i64 %3105 to i8
  %3108 = and i8 %3107, 1
  %3109 = trunc i64 %3106 to i32
  %3110 = and i64 %3106, 4294967295
  store i64 %3110, i64* %RDX.i5984, align 8
  store i8 %3108, i8* %44, align 1
  %3111 = and i32 %3109, 255
  %3112 = tail call i32 @llvm.ctpop.i32(i32 %3111)
  %3113 = trunc i32 %3112 to i8
  %3114 = and i8 %3113, 1
  %3115 = xor i8 %3114, 1
  store i8 %3115, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3116 = icmp eq i32 %3109, 0
  %3117 = zext i1 %3116 to i8
  store i8 %3117, i8* %59, align 1
  %3118 = lshr i64 %3105, 32
  %3119 = trunc i64 %3118 to i8
  %3120 = and i8 %3119, 1
  store i8 %3120, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3121 = load i64, i64* %RBP.i, align 8
  %3122 = add i64 %3121, -104
  %3123 = add i64 %2894, 55
  store i64 %3123, i64* %3, align 8
  %3124 = trunc i64 %3106 to i32
  %3125 = inttoptr i64 %3122 to i32*
  %3126 = load i32, i32* %3125, align 4
  %3127 = add i32 %3126, %3124
  %3128 = zext i32 %3127 to i64
  store i64 %3128, i64* %RDX.i5984, align 8
  %3129 = icmp ult i32 %3127, %3124
  %3130 = icmp ult i32 %3127, %3126
  %3131 = or i1 %3129, %3130
  %3132 = zext i1 %3131 to i8
  store i8 %3132, i8* %44, align 1
  %3133 = and i32 %3127, 255
  %3134 = tail call i32 @llvm.ctpop.i32(i32 %3133)
  %3135 = trunc i32 %3134 to i8
  %3136 = and i8 %3135, 1
  %3137 = xor i8 %3136, 1
  store i8 %3137, i8* %51, align 1
  %3138 = xor i32 %3126, %3124
  %3139 = xor i32 %3138, %3127
  %3140 = lshr i32 %3139, 4
  %3141 = trunc i32 %3140 to i8
  %3142 = and i8 %3141, 1
  store i8 %3142, i8* %56, align 1
  %3143 = icmp eq i32 %3127, 0
  %3144 = zext i1 %3143 to i8
  store i8 %3144, i8* %59, align 1
  %3145 = lshr i32 %3127, 31
  %3146 = trunc i32 %3145 to i8
  store i8 %3146, i8* %62, align 1
  %3147 = lshr i64 %3105, 32
  %3148 = trunc i64 %3147 to i32
  %3149 = and i32 %3148, 1
  %3150 = lshr i32 %3126, 31
  %3151 = xor i32 %3145, %3149
  %3152 = xor i32 %3145, %3150
  %3153 = add nuw nsw i32 %3151, %3152
  %3154 = icmp eq i32 %3153, 2
  %3155 = zext i1 %3154 to i8
  store i8 %3155, i8* %68, align 1
  %3156 = sext i32 %3127 to i64
  store i64 %3156, i64* %RCX.i6189, align 8
  %3157 = shl nsw i64 %3156, 3
  %3158 = add i64 %3099, %3157
  %3159 = add i64 %2894, 62
  store i64 %3159, i64* %3, align 8
  %3160 = inttoptr i64 %3158 to i64*
  %3161 = load i64, i64* %3160, align 8
  store i64 %3161, i64* %.pre243, align 8
  %3162 = add i64 %3121, -42
  %3163 = add i64 %2894, 67
  store i64 %3163, i64* %3, align 8
  %3164 = inttoptr i64 %3162 to i16*
  %3165 = load i16, i16* %3164, align 2
  %3166 = sext i16 %3165 to i64
  store i64 %3166, i64* %RCX.i6189, align 8
  %3167 = shl nsw i64 %3166, 3
  %3168 = add i64 %3167, %3161
  %3169 = add i64 %2894, 71
  store i64 %3169, i64* %3, align 8
  %3170 = inttoptr i64 %3168 to i64*
  %3171 = load i64, i64* %3170, align 8
  store i64 %3171, i64* %.pre243, align 8
  %3172 = add i64 %3171, 40
  %3173 = add i64 %2894, 75
  store i64 %3173, i64* %3, align 8
  %3174 = inttoptr i64 %3172 to i64*
  %3175 = load i64, i64* %3174, align 8
  store i64 %3175, i64* %.pre243, align 8
  %3176 = add i64 %2894, 77
  store i64 %3176, i64* %3, align 8
  %3177 = inttoptr i64 %3175 to i32*
  %3178 = load i32, i32* %3177, align 4
  %3179 = zext i32 %3178 to i64
  store i64 %3179, i64* %RDX.i5984, align 8
  %3180 = add i64 %3121, -260
  %3181 = add i64 %2894, 83
  store i64 %3181, i64* %3, align 8
  %3182 = inttoptr i64 %3180 to i32*
  store i32 %3178, i32* %3182, align 4
  %.pre158 = load i64, i64* %3, align 8
  br label %block_.L_46edf9

block_.L_46edf9:                                  ; preds = %block_.L_46eda6, %block_46ed54
  %3183 = phi i64 [ %.pre158, %block_.L_46eda6 ], [ %3036, %block_46ed54 ]
  %3184 = load i64, i64* %RBP.i, align 8
  %3185 = add i64 %3184, -260
  %3186 = add i64 %3183, 6
  store i64 %3186, i64* %3, align 8
  %3187 = inttoptr i64 %3185 to i32*
  %3188 = load i32, i32* %3187, align 4
  %3189 = zext i32 %3188 to i64
  store i64 2, i64* %RCX.i6189, align 8
  store i32 %3188, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i64 %3189, i64* %.pre243, align 8
  %3190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3191 = sext i32 %3188 to i64
  %3192 = lshr i64 %3191, 32
  store i64 %3192, i64* %3190, align 8
  %3193 = add i64 %3183, 28
  store i64 %3193, i64* %3, align 8
  %3194 = shl nuw i64 %3192, 32
  %3195 = or i64 %3194, %3189
  %3196 = sdiv i64 %3195, 2
  %3197 = shl i64 %3196, 32
  %3198 = ashr exact i64 %3197, 32
  %3199 = icmp eq i64 %3196, %3198
  br i1 %3199, label %3202, label %3200

; <label>:3200:                                   ; preds = %block_.L_46edf9
  %3201 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3193, %struct.Memory* %MEMORY.11)
  %.pre159 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %.pre160 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4993

; <label>:3202:                                   ; preds = %block_.L_46edf9
  %3203 = srem i64 %3195, 2
  %3204 = and i64 %3196, 4294967295
  store i64 %3204, i64* %.pre243, align 8
  %3205 = and i64 %3203, 4294967295
  store i64 %3205, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3206 = trunc i64 %3196 to i32
  br label %routine_idivl__ecx.exit4993

routine_idivl__ecx.exit4993:                      ; preds = %3202, %3200
  %3207 = phi i64 [ %.pre160, %3200 ], [ %3193, %3202 ]
  %3208 = phi i32 [ %.pre159, %3200 ], [ %3206, %3202 ]
  %3209 = phi %struct.Memory* [ %3201, %3200 ], [ %MEMORY.11, %3202 ]
  %3210 = add i64 %3207, 7
  store i64 %3210, i64* %3, align 8
  store i32 %3208, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %3211 = add i64 %3207, 1024
  br label %block_.L_46f215

block_.L_46ee21:                                  ; preds = %block_46ecd3
  %3212 = add i64 %2766, 4
  store i64 %3212, i64* %3, align 8
  %3213 = load i32, i32* %2740, align 4
  %3214 = add i32 %3213, -4
  %3215 = icmp ult i32 %3213, 4
  %3216 = zext i1 %3215 to i8
  store i8 %3216, i8* %44, align 1
  %3217 = and i32 %3214, 255
  %3218 = tail call i32 @llvm.ctpop.i32(i32 %3217)
  %3219 = trunc i32 %3218 to i8
  %3220 = and i8 %3219, 1
  %3221 = xor i8 %3220, 1
  store i8 %3221, i8* %51, align 1
  %3222 = xor i32 %3214, %3213
  %3223 = lshr i32 %3222, 4
  %3224 = trunc i32 %3223 to i8
  %3225 = and i8 %3224, 1
  store i8 %3225, i8* %56, align 1
  %3226 = icmp eq i32 %3214, 0
  %3227 = zext i1 %3226 to i8
  store i8 %3227, i8* %59, align 1
  %3228 = lshr i32 %3214, 31
  %3229 = trunc i32 %3228 to i8
  store i8 %3229, i8* %62, align 1
  %3230 = lshr i32 %3213, 31
  %3231 = xor i32 %3228, %3230
  %3232 = add nuw nsw i32 %3231, %3230
  %3233 = icmp eq i32 %3232, 2
  %3234 = zext i1 %3233 to i8
  store i8 %3234, i8* %68, align 1
  %3235 = icmp ne i8 %3229, 0
  %3236 = xor i1 %3235, %3233
  %3237 = or i1 %3226, %3236
  %.v319 = select i1 %3237, i64 334, i64 10
  %3238 = add i64 %2766, %.v319
  store i64 %3238, i64* %3, align 8
  br i1 %3237, label %block_.L_46ef6f, label %block_46ee2b

block_46ee2b:                                     ; preds = %block_.L_46ee21
  %3239 = add i64 %2737, -144
  %3240 = add i64 %3238, 7
  store i64 %3240, i64* %3, align 8
  %3241 = inttoptr i64 %3239 to i64*
  %3242 = load i64, i64* %3241, align 8
  store i64 %3242, i64* %.pre243, align 8
  %3243 = add i64 %2737, -100
  %3244 = add i64 %3238, 11
  store i64 %3244, i64* %3, align 8
  %3245 = inttoptr i64 %3243 to i32*
  %3246 = load i32, i32* %3245, align 4
  %3247 = sext i32 %3246 to i64
  store i64 %3247, i64* %RCX.i6189, align 8
  %3248 = shl nsw i64 %3247, 3
  %3249 = add i64 %3248, %3242
  %3250 = add i64 %3238, 15
  store i64 %3250, i64* %3, align 8
  %3251 = inttoptr i64 %3249 to i64*
  %3252 = load i64, i64* %3251, align 8
  store i64 %3252, i64* %.pre243, align 8
  %3253 = add i64 %2737, -104
  %3254 = add i64 %3238, 19
  store i64 %3254, i64* %3, align 8
  %3255 = inttoptr i64 %3253 to i32*
  %3256 = load i32, i32* %3255, align 4
  %3257 = sext i32 %3256 to i64
  store i64 %3257, i64* %RCX.i6189, align 8
  %3258 = shl nsw i64 %3257, 3
  %3259 = add i64 %3258, %3252
  %3260 = add i64 %3238, 23
  store i64 %3260, i64* %3, align 8
  %3261 = inttoptr i64 %3259 to i64*
  %3262 = load i64, i64* %3261, align 8
  store i64 %3262, i64* %.pre243, align 8
  %3263 = add i64 %2737, -48
  %3264 = add i64 %3238, 27
  store i64 %3264, i64* %3, align 8
  %3265 = inttoptr i64 %3263 to i32*
  %3266 = load i32, i32* %3265, align 4
  %3267 = sext i32 %3266 to i64
  store i64 %3267, i64* %RCX.i6189, align 8
  %3268 = shl nsw i64 %3267, 3
  %3269 = add i64 %3268, %3262
  %3270 = add i64 %3238, 31
  store i64 %3270, i64* %3, align 8
  %3271 = inttoptr i64 %3269 to i64*
  %3272 = load i64, i64* %3271, align 8
  store i64 %3272, i64* %.pre243, align 8
  %3273 = add i64 %2737, -42
  %3274 = add i64 %3238, 36
  store i64 %3274, i64* %3, align 8
  %3275 = inttoptr i64 %3273 to i16*
  %3276 = load i16, i16* %3275, align 2
  %3277 = sext i16 %3276 to i64
  store i64 %3277, i64* %RCX.i6189, align 8
  %3278 = shl nsw i64 %3277, 3
  %3279 = add i64 %3278, %3272
  %3280 = add i64 %3238, 40
  store i64 %3280, i64* %3, align 8
  %3281 = inttoptr i64 %3279 to i64*
  %3282 = load i64, i64* %3281, align 8
  store i64 %3282, i64* %.pre243, align 8
  %3283 = add i64 %3282, 32
  %3284 = add i64 %3238, 44
  store i64 %3284, i64* %3, align 8
  %3285 = inttoptr i64 %3283 to i64*
  %3286 = load i64, i64* %3285, align 8
  store i64 %3286, i64* %.pre243, align 8
  %3287 = add i64 %3238, 47
  store i64 %3287, i64* %3, align 8
  %3288 = inttoptr i64 %3286 to i16*
  %3289 = load i16, i16* %3288, align 2
  %3290 = sext i16 %3289 to i64
  %3291 = and i64 %3290, 4294967295
  store i64 %3291, i64* %RDX.i5984, align 8
  %3292 = sext i16 %3289 to i32
  store i32 %3292, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %3293 = add i64 %3238, 61
  store i64 %3293, i64* %3, align 8
  %3294 = load i64, i64* %3241, align 8
  store i64 %3294, i64* %.pre243, align 8
  %3295 = add i64 %3238, 65
  store i64 %3295, i64* %3, align 8
  %3296 = load i32, i32* %3245, align 4
  %3297 = sext i32 %3296 to i64
  store i64 %3297, i64* %RCX.i6189, align 8
  %3298 = shl nsw i64 %3297, 3
  %3299 = add i64 %3298, %3294
  %3300 = add i64 %3238, 69
  store i64 %3300, i64* %3, align 8
  %3301 = inttoptr i64 %3299 to i64*
  %3302 = load i64, i64* %3301, align 8
  store i64 %3302, i64* %.pre243, align 8
  %3303 = add i64 %3238, 73
  store i64 %3303, i64* %3, align 8
  %3304 = load i32, i32* %3255, align 4
  %3305 = sext i32 %3304 to i64
  store i64 %3305, i64* %RCX.i6189, align 8
  %3306 = shl nsw i64 %3305, 3
  %3307 = add i64 %3306, %3302
  %3308 = add i64 %3238, 77
  store i64 %3308, i64* %3, align 8
  %3309 = inttoptr i64 %3307 to i64*
  %3310 = load i64, i64* %3309, align 8
  store i64 %3310, i64* %.pre243, align 8
  %3311 = load i64, i64* %RBP.i, align 8
  %3312 = add i64 %3311, -48
  %3313 = add i64 %3238, 81
  store i64 %3313, i64* %3, align 8
  %3314 = inttoptr i64 %3312 to i32*
  %3315 = load i32, i32* %3314, align 4
  %3316 = sext i32 %3315 to i64
  store i64 %3316, i64* %RCX.i6189, align 8
  %3317 = shl nsw i64 %3316, 3
  %3318 = add i64 %3317, %3310
  %3319 = add i64 %3238, 85
  store i64 %3319, i64* %3, align 8
  %3320 = inttoptr i64 %3318 to i64*
  %3321 = load i64, i64* %3320, align 8
  store i64 %3321, i64* %.pre243, align 8
  %3322 = add i64 %3311, -42
  %3323 = add i64 %3238, 90
  store i64 %3323, i64* %3, align 8
  %3324 = inttoptr i64 %3322 to i16*
  %3325 = load i16, i16* %3324, align 2
  %3326 = sext i16 %3325 to i64
  store i64 %3326, i64* %RCX.i6189, align 8
  %3327 = shl nsw i64 %3326, 3
  %3328 = add i64 %3327, %3321
  %3329 = add i64 %3238, 94
  store i64 %3329, i64* %3, align 8
  %3330 = inttoptr i64 %3328 to i64*
  %3331 = load i64, i64* %3330, align 8
  store i64 %3331, i64* %.pre243, align 8
  %3332 = add i64 %3331, 32
  %3333 = add i64 %3238, 98
  store i64 %3333, i64* %3, align 8
  %3334 = inttoptr i64 %3332 to i64*
  %3335 = load i64, i64* %3334, align 8
  store i64 %3335, i64* %.pre243, align 8
  %3336 = add i64 %3335, 2
  %3337 = add i64 %3238, 102
  store i64 %3337, i64* %3, align 8
  %3338 = inttoptr i64 %3336 to i16*
  %3339 = load i16, i16* %3338, align 2
  %3340 = sext i16 %3339 to i64
  %3341 = and i64 %3340, 4294967295
  store i64 %3341, i64* %RDX.i5984, align 8
  %3342 = sext i16 %3339 to i32
  store i32 %3342, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %3343 = add i64 %3238, 113
  store i64 %3343, i64* %3, align 8
  %3344 = load i32, i32* %3314, align 4
  %3345 = add i32 %3344, -1
  %3346 = icmp eq i32 %3344, 0
  %3347 = zext i1 %3346 to i8
  store i8 %3347, i8* %44, align 1
  %3348 = and i32 %3345, 255
  %3349 = tail call i32 @llvm.ctpop.i32(i32 %3348)
  %3350 = trunc i32 %3349 to i8
  %3351 = and i8 %3350, 1
  %3352 = xor i8 %3351, 1
  store i8 %3352, i8* %51, align 1
  %3353 = xor i32 %3345, %3344
  %3354 = lshr i32 %3353, 4
  %3355 = trunc i32 %3354 to i8
  %3356 = and i8 %3355, 1
  store i8 %3356, i8* %56, align 1
  %3357 = icmp eq i32 %3345, 0
  %3358 = zext i1 %3357 to i8
  store i8 %3358, i8* %59, align 1
  %3359 = lshr i32 %3345, 31
  %3360 = trunc i32 %3359 to i8
  store i8 %3360, i8* %62, align 1
  %3361 = lshr i32 %3344, 31
  %3362 = xor i32 %3359, %3361
  %3363 = add nuw nsw i32 %3362, %3361
  %3364 = icmp eq i32 %3363, 2
  %3365 = zext i1 %3364 to i8
  store i8 %3365, i8* %68, align 1
  %.v320 = select i1 %3357, i64 119, i64 201
  %3366 = add i64 %3238, %.v320
  %3367 = add i64 %3366, 8
  store i64 %3367, i64* %3, align 8
  br i1 %3357, label %block_46eea2, label %block_.L_46eef4

block_46eea2:                                     ; preds = %block_46ee2b
  %3368 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %3368, i64* %.pre243, align 8
  %3369 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3369, i64* %RCX.i6189, align 8
  %3370 = add i64 %3369, 152
  %3371 = add i64 %3366, 22
  store i64 %3371, i64* %3, align 8
  %3372 = inttoptr i64 %3370 to i32*
  %3373 = load i32, i32* %3372, align 4
  %3374 = sext i32 %3373 to i64
  %3375 = ashr i64 %3374, 1
  %3376 = lshr i64 %3375, 1
  %3377 = trunc i64 %3375 to i8
  %3378 = and i8 %3377, 1
  %3379 = trunc i64 %3376 to i32
  %3380 = and i64 %3376, 4294967295
  store i64 %3380, i64* %RDX.i5984, align 8
  store i8 %3378, i8* %44, align 1
  %3381 = and i32 %3379, 255
  %3382 = tail call i32 @llvm.ctpop.i32(i32 %3381)
  %3383 = trunc i32 %3382 to i8
  %3384 = and i8 %3383, 1
  %3385 = xor i8 %3384, 1
  store i8 %3385, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3386 = icmp eq i32 %3379, 0
  %3387 = zext i1 %3386 to i8
  store i8 %3387, i8* %59, align 1
  %3388 = lshr i64 %3375, 32
  %3389 = trunc i64 %3388 to i8
  %3390 = and i8 %3389, 1
  store i8 %3390, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3391 = add i64 %3311, -100
  %3392 = add i64 %3366, 28
  store i64 %3392, i64* %3, align 8
  %3393 = trunc i64 %3376 to i32
  %3394 = inttoptr i64 %3391 to i32*
  %3395 = load i32, i32* %3394, align 4
  %3396 = add i32 %3395, %3393
  %3397 = zext i32 %3396 to i64
  store i64 %3397, i64* %RDX.i5984, align 8
  %3398 = icmp ult i32 %3396, %3393
  %3399 = icmp ult i32 %3396, %3395
  %3400 = or i1 %3398, %3399
  %3401 = zext i1 %3400 to i8
  store i8 %3401, i8* %44, align 1
  %3402 = and i32 %3396, 255
  %3403 = tail call i32 @llvm.ctpop.i32(i32 %3402)
  %3404 = trunc i32 %3403 to i8
  %3405 = and i8 %3404, 1
  %3406 = xor i8 %3405, 1
  store i8 %3406, i8* %51, align 1
  %3407 = xor i32 %3395, %3393
  %3408 = xor i32 %3407, %3396
  %3409 = lshr i32 %3408, 4
  %3410 = trunc i32 %3409 to i8
  %3411 = and i8 %3410, 1
  store i8 %3411, i8* %56, align 1
  %3412 = icmp eq i32 %3396, 0
  %3413 = zext i1 %3412 to i8
  store i8 %3413, i8* %59, align 1
  %3414 = lshr i32 %3396, 31
  %3415 = trunc i32 %3414 to i8
  store i8 %3415, i8* %62, align 1
  %3416 = lshr i64 %3375, 32
  %3417 = trunc i64 %3416 to i32
  %3418 = and i32 %3417, 1
  %3419 = lshr i32 %3395, 31
  %3420 = xor i32 %3414, %3418
  %3421 = xor i32 %3414, %3419
  %3422 = add nuw nsw i32 %3420, %3421
  %3423 = icmp eq i32 %3422, 2
  %3424 = zext i1 %3423 to i8
  store i8 %3424, i8* %68, align 1
  %3425 = sext i32 %3396 to i64
  store i64 %3425, i64* %RCX.i6189, align 8
  %3426 = shl nsw i64 %3425, 3
  %3427 = add i64 %3368, %3426
  %3428 = add i64 %3366, 35
  store i64 %3428, i64* %3, align 8
  %3429 = inttoptr i64 %3427 to i64*
  %3430 = load i64, i64* %3429, align 8
  store i64 %3430, i64* %.pre243, align 8
  store i64 %3369, i64* %RCX.i6189, align 8
  %3431 = add i64 %3369, 156
  %3432 = add i64 %3366, 49
  store i64 %3432, i64* %3, align 8
  %3433 = inttoptr i64 %3431 to i32*
  %3434 = load i32, i32* %3433, align 4
  %3435 = sext i32 %3434 to i64
  %3436 = ashr i64 %3435, 1
  %3437 = lshr i64 %3436, 1
  %3438 = trunc i64 %3436 to i8
  %3439 = and i8 %3438, 1
  %3440 = trunc i64 %3437 to i32
  %3441 = and i64 %3437, 4294967295
  store i64 %3441, i64* %RDX.i5984, align 8
  store i8 %3439, i8* %44, align 1
  %3442 = and i32 %3440, 255
  %3443 = tail call i32 @llvm.ctpop.i32(i32 %3442)
  %3444 = trunc i32 %3443 to i8
  %3445 = and i8 %3444, 1
  %3446 = xor i8 %3445, 1
  store i8 %3446, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3447 = icmp eq i32 %3440, 0
  %3448 = zext i1 %3447 to i8
  store i8 %3448, i8* %59, align 1
  %3449 = lshr i64 %3436, 32
  %3450 = trunc i64 %3449 to i8
  %3451 = and i8 %3450, 1
  store i8 %3451, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3452 = load i64, i64* %RBP.i, align 8
  %3453 = add i64 %3452, -104
  %3454 = add i64 %3366, 55
  store i64 %3454, i64* %3, align 8
  %3455 = trunc i64 %3437 to i32
  %3456 = inttoptr i64 %3453 to i32*
  %3457 = load i32, i32* %3456, align 4
  %3458 = add i32 %3457, %3455
  %3459 = zext i32 %3458 to i64
  store i64 %3459, i64* %RDX.i5984, align 8
  %3460 = icmp ult i32 %3458, %3455
  %3461 = icmp ult i32 %3458, %3457
  %3462 = or i1 %3460, %3461
  %3463 = zext i1 %3462 to i8
  store i8 %3463, i8* %44, align 1
  %3464 = and i32 %3458, 255
  %3465 = tail call i32 @llvm.ctpop.i32(i32 %3464)
  %3466 = trunc i32 %3465 to i8
  %3467 = and i8 %3466, 1
  %3468 = xor i8 %3467, 1
  store i8 %3468, i8* %51, align 1
  %3469 = xor i32 %3457, %3455
  %3470 = xor i32 %3469, %3458
  %3471 = lshr i32 %3470, 4
  %3472 = trunc i32 %3471 to i8
  %3473 = and i8 %3472, 1
  store i8 %3473, i8* %56, align 1
  %3474 = icmp eq i32 %3458, 0
  %3475 = zext i1 %3474 to i8
  store i8 %3475, i8* %59, align 1
  %3476 = lshr i32 %3458, 31
  %3477 = trunc i32 %3476 to i8
  store i8 %3477, i8* %62, align 1
  %3478 = lshr i64 %3436, 32
  %3479 = trunc i64 %3478 to i32
  %3480 = and i32 %3479, 1
  %3481 = lshr i32 %3457, 31
  %3482 = xor i32 %3476, %3480
  %3483 = xor i32 %3476, %3481
  %3484 = add nuw nsw i32 %3482, %3483
  %3485 = icmp eq i32 %3484, 2
  %3486 = zext i1 %3485 to i8
  store i8 %3486, i8* %68, align 1
  %3487 = sext i32 %3458 to i64
  store i64 %3487, i64* %RCX.i6189, align 8
  %3488 = shl nsw i64 %3487, 3
  %3489 = add i64 %3430, %3488
  %3490 = add i64 %3366, 62
  store i64 %3490, i64* %3, align 8
  %3491 = inttoptr i64 %3489 to i64*
  %3492 = load i64, i64* %3491, align 8
  store i64 %3492, i64* %.pre243, align 8
  %3493 = add i64 %3366, 65
  store i64 %3493, i64* %3, align 8
  %3494 = inttoptr i64 %3492 to i64*
  %3495 = load i64, i64* %3494, align 8
  store i64 %3495, i64* %.pre243, align 8
  %3496 = add i64 %3495, 32
  %3497 = add i64 %3366, 69
  store i64 %3497, i64* %3, align 8
  %3498 = inttoptr i64 %3496 to i64*
  %3499 = load i64, i64* %3498, align 8
  store i64 %3499, i64* %.pre243, align 8
  %3500 = add i64 %3366, 71
  store i64 %3500, i64* %3, align 8
  %3501 = inttoptr i64 %3499 to i32*
  %3502 = load i32, i32* %3501, align 4
  %3503 = zext i32 %3502 to i64
  store i64 %3503, i64* %RDX.i5984, align 8
  %3504 = add i64 %3452, -264
  %3505 = add i64 %3366, 77
  store i64 %3505, i64* %3, align 8
  %3506 = inttoptr i64 %3504 to i32*
  store i32 %3502, i32* %3506, align 4
  %3507 = load i64, i64* %3, align 8
  %3508 = add i64 %3507, 88
  store i64 %3508, i64* %3, align 8
  br label %block_.L_46ef47

block_.L_46eef4:                                  ; preds = %block_46ee2b
  %3509 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %3509, i64* %.pre243, align 8
  %3510 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3510, i64* %RCX.i6189, align 8
  %3511 = add i64 %3510, 152
  %3512 = add i64 %3366, 22
  store i64 %3512, i64* %3, align 8
  %3513 = inttoptr i64 %3511 to i32*
  %3514 = load i32, i32* %3513, align 4
  %3515 = sext i32 %3514 to i64
  %3516 = ashr i64 %3515, 1
  %3517 = lshr i64 %3516, 1
  %3518 = trunc i64 %3516 to i8
  %3519 = and i8 %3518, 1
  %3520 = trunc i64 %3517 to i32
  %3521 = and i64 %3517, 4294967295
  store i64 %3521, i64* %RDX.i5984, align 8
  store i8 %3519, i8* %44, align 1
  %3522 = and i32 %3520, 255
  %3523 = tail call i32 @llvm.ctpop.i32(i32 %3522)
  %3524 = trunc i32 %3523 to i8
  %3525 = and i8 %3524, 1
  %3526 = xor i8 %3525, 1
  store i8 %3526, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3527 = icmp eq i32 %3520, 0
  %3528 = zext i1 %3527 to i8
  store i8 %3528, i8* %59, align 1
  %3529 = lshr i64 %3516, 32
  %3530 = trunc i64 %3529 to i8
  %3531 = and i8 %3530, 1
  store i8 %3531, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3532 = add i64 %3311, -100
  %3533 = add i64 %3366, 28
  store i64 %3533, i64* %3, align 8
  %3534 = trunc i64 %3517 to i32
  %3535 = inttoptr i64 %3532 to i32*
  %3536 = load i32, i32* %3535, align 4
  %3537 = add i32 %3536, %3534
  %3538 = zext i32 %3537 to i64
  store i64 %3538, i64* %RDX.i5984, align 8
  %3539 = icmp ult i32 %3537, %3534
  %3540 = icmp ult i32 %3537, %3536
  %3541 = or i1 %3539, %3540
  %3542 = zext i1 %3541 to i8
  store i8 %3542, i8* %44, align 1
  %3543 = and i32 %3537, 255
  %3544 = tail call i32 @llvm.ctpop.i32(i32 %3543)
  %3545 = trunc i32 %3544 to i8
  %3546 = and i8 %3545, 1
  %3547 = xor i8 %3546, 1
  store i8 %3547, i8* %51, align 1
  %3548 = xor i32 %3536, %3534
  %3549 = xor i32 %3548, %3537
  %3550 = lshr i32 %3549, 4
  %3551 = trunc i32 %3550 to i8
  %3552 = and i8 %3551, 1
  store i8 %3552, i8* %56, align 1
  %3553 = icmp eq i32 %3537, 0
  %3554 = zext i1 %3553 to i8
  store i8 %3554, i8* %59, align 1
  %3555 = lshr i32 %3537, 31
  %3556 = trunc i32 %3555 to i8
  store i8 %3556, i8* %62, align 1
  %3557 = lshr i64 %3516, 32
  %3558 = trunc i64 %3557 to i32
  %3559 = and i32 %3558, 1
  %3560 = lshr i32 %3536, 31
  %3561 = xor i32 %3555, %3559
  %3562 = xor i32 %3555, %3560
  %3563 = add nuw nsw i32 %3561, %3562
  %3564 = icmp eq i32 %3563, 2
  %3565 = zext i1 %3564 to i8
  store i8 %3565, i8* %68, align 1
  %3566 = sext i32 %3537 to i64
  store i64 %3566, i64* %RCX.i6189, align 8
  %3567 = shl nsw i64 %3566, 3
  %3568 = add i64 %3509, %3567
  %3569 = add i64 %3366, 35
  store i64 %3569, i64* %3, align 8
  %3570 = inttoptr i64 %3568 to i64*
  %3571 = load i64, i64* %3570, align 8
  store i64 %3571, i64* %.pre243, align 8
  store i64 %3510, i64* %RCX.i6189, align 8
  %3572 = add i64 %3510, 156
  %3573 = add i64 %3366, 49
  store i64 %3573, i64* %3, align 8
  %3574 = inttoptr i64 %3572 to i32*
  %3575 = load i32, i32* %3574, align 4
  %3576 = sext i32 %3575 to i64
  %3577 = ashr i64 %3576, 1
  %3578 = lshr i64 %3577, 1
  %3579 = trunc i64 %3577 to i8
  %3580 = and i8 %3579, 1
  %3581 = trunc i64 %3578 to i32
  %3582 = and i64 %3578, 4294967295
  store i64 %3582, i64* %RDX.i5984, align 8
  store i8 %3580, i8* %44, align 1
  %3583 = and i32 %3581, 255
  %3584 = tail call i32 @llvm.ctpop.i32(i32 %3583)
  %3585 = trunc i32 %3584 to i8
  %3586 = and i8 %3585, 1
  %3587 = xor i8 %3586, 1
  store i8 %3587, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3588 = icmp eq i32 %3581, 0
  %3589 = zext i1 %3588 to i8
  store i8 %3589, i8* %59, align 1
  %3590 = lshr i64 %3577, 32
  %3591 = trunc i64 %3590 to i8
  %3592 = and i8 %3591, 1
  store i8 %3592, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3593 = load i64, i64* %RBP.i, align 8
  %3594 = add i64 %3593, -104
  %3595 = add i64 %3366, 55
  store i64 %3595, i64* %3, align 8
  %3596 = trunc i64 %3578 to i32
  %3597 = inttoptr i64 %3594 to i32*
  %3598 = load i32, i32* %3597, align 4
  %3599 = add i32 %3598, %3596
  %3600 = zext i32 %3599 to i64
  store i64 %3600, i64* %RDX.i5984, align 8
  %3601 = icmp ult i32 %3599, %3596
  %3602 = icmp ult i32 %3599, %3598
  %3603 = or i1 %3601, %3602
  %3604 = zext i1 %3603 to i8
  store i8 %3604, i8* %44, align 1
  %3605 = and i32 %3599, 255
  %3606 = tail call i32 @llvm.ctpop.i32(i32 %3605)
  %3607 = trunc i32 %3606 to i8
  %3608 = and i8 %3607, 1
  %3609 = xor i8 %3608, 1
  store i8 %3609, i8* %51, align 1
  %3610 = xor i32 %3598, %3596
  %3611 = xor i32 %3610, %3599
  %3612 = lshr i32 %3611, 4
  %3613 = trunc i32 %3612 to i8
  %3614 = and i8 %3613, 1
  store i8 %3614, i8* %56, align 1
  %3615 = icmp eq i32 %3599, 0
  %3616 = zext i1 %3615 to i8
  store i8 %3616, i8* %59, align 1
  %3617 = lshr i32 %3599, 31
  %3618 = trunc i32 %3617 to i8
  store i8 %3618, i8* %62, align 1
  %3619 = lshr i64 %3577, 32
  %3620 = trunc i64 %3619 to i32
  %3621 = and i32 %3620, 1
  %3622 = lshr i32 %3598, 31
  %3623 = xor i32 %3617, %3621
  %3624 = xor i32 %3617, %3622
  %3625 = add nuw nsw i32 %3623, %3624
  %3626 = icmp eq i32 %3625, 2
  %3627 = zext i1 %3626 to i8
  store i8 %3627, i8* %68, align 1
  %3628 = sext i32 %3599 to i64
  store i64 %3628, i64* %RCX.i6189, align 8
  %3629 = shl nsw i64 %3628, 3
  %3630 = add i64 %3571, %3629
  %3631 = add i64 %3366, 62
  store i64 %3631, i64* %3, align 8
  %3632 = inttoptr i64 %3630 to i64*
  %3633 = load i64, i64* %3632, align 8
  store i64 %3633, i64* %.pre243, align 8
  %3634 = add i64 %3593, -42
  %3635 = add i64 %3366, 67
  store i64 %3635, i64* %3, align 8
  %3636 = inttoptr i64 %3634 to i16*
  %3637 = load i16, i16* %3636, align 2
  %3638 = sext i16 %3637 to i64
  store i64 %3638, i64* %RCX.i6189, align 8
  %3639 = shl nsw i64 %3638, 3
  %3640 = add i64 %3639, %3633
  %3641 = add i64 %3366, 71
  store i64 %3641, i64* %3, align 8
  %3642 = inttoptr i64 %3640 to i64*
  %3643 = load i64, i64* %3642, align 8
  store i64 %3643, i64* %.pre243, align 8
  %3644 = add i64 %3643, 32
  %3645 = add i64 %3366, 75
  store i64 %3645, i64* %3, align 8
  %3646 = inttoptr i64 %3644 to i64*
  %3647 = load i64, i64* %3646, align 8
  store i64 %3647, i64* %.pre243, align 8
  %3648 = add i64 %3366, 77
  store i64 %3648, i64* %3, align 8
  %3649 = inttoptr i64 %3647 to i32*
  %3650 = load i32, i32* %3649, align 4
  %3651 = zext i32 %3650 to i64
  store i64 %3651, i64* %RDX.i5984, align 8
  %3652 = add i64 %3593, -264
  %3653 = add i64 %3366, 83
  store i64 %3653, i64* %3, align 8
  %3654 = inttoptr i64 %3652 to i32*
  store i32 %3650, i32* %3654, align 4
  %.pre161 = load i64, i64* %3, align 8
  br label %block_.L_46ef47

block_.L_46ef47:                                  ; preds = %block_.L_46eef4, %block_46eea2
  %3655 = phi i64 [ %.pre161, %block_.L_46eef4 ], [ %3508, %block_46eea2 ]
  %3656 = load i64, i64* %RBP.i, align 8
  %3657 = add i64 %3656, -264
  %3658 = add i64 %3655, 6
  store i64 %3658, i64* %3, align 8
  %3659 = inttoptr i64 %3657 to i32*
  %3660 = load i32, i32* %3659, align 4
  %3661 = zext i32 %3660 to i64
  store i64 2, i64* %RCX.i6189, align 8
  store i32 %3660, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i64 %3661, i64* %.pre243, align 8
  %3662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3663 = sext i32 %3660 to i64
  %3664 = lshr i64 %3663, 32
  store i64 %3664, i64* %3662, align 8
  %3665 = add i64 %3655, 28
  store i64 %3665, i64* %3, align 8
  %3666 = shl nuw i64 %3664, 32
  %3667 = or i64 %3666, %3661
  %3668 = sdiv i64 %3667, 2
  %3669 = shl i64 %3668, 32
  %3670 = ashr exact i64 %3669, 32
  %3671 = icmp eq i64 %3668, %3670
  br i1 %3671, label %3674, label %3672

; <label>:3672:                                   ; preds = %block_.L_46ef47
  %3673 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3665, %struct.Memory* %MEMORY.11)
  %.pre162 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %.pre163 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4808

; <label>:3674:                                   ; preds = %block_.L_46ef47
  %3675 = srem i64 %3667, 2
  %3676 = and i64 %3668, 4294967295
  store i64 %3676, i64* %.pre243, align 8
  %3677 = and i64 %3675, 4294967295
  store i64 %3677, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3678 = trunc i64 %3668 to i32
  br label %routine_idivl__ecx.exit4808

routine_idivl__ecx.exit4808:                      ; preds = %3674, %3672
  %3679 = phi i64 [ %.pre163, %3672 ], [ %3665, %3674 ]
  %3680 = phi i32 [ %.pre162, %3672 ], [ %3678, %3674 ]
  %3681 = phi %struct.Memory* [ %3673, %3672 ], [ %MEMORY.11, %3674 ]
  %3682 = add i64 %3679, 7
  store i64 %3682, i64* %3, align 8
  store i32 %3680, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %3683 = add i64 %3679, 685
  br label %block_.L_46f210

block_.L_46ef6f:                                  ; preds = %block_.L_46ee21
  %3684 = add i64 %3238, 4
  store i64 %3684, i64* %3, align 8
  %3685 = load i32, i32* %2740, align 4
  %3686 = add i32 %3685, -4
  %3687 = icmp ult i32 %3685, 4
  %3688 = zext i1 %3687 to i8
  store i8 %3688, i8* %44, align 1
  %3689 = and i32 %3686, 255
  %3690 = tail call i32 @llvm.ctpop.i32(i32 %3689)
  %3691 = trunc i32 %3690 to i8
  %3692 = and i8 %3691, 1
  %3693 = xor i8 %3692, 1
  store i8 %3693, i8* %51, align 1
  %3694 = xor i32 %3686, %3685
  %3695 = lshr i32 %3694, 4
  %3696 = trunc i32 %3695 to i8
  %3697 = and i8 %3696, 1
  store i8 %3697, i8* %56, align 1
  %3698 = icmp eq i32 %3686, 0
  %3699 = zext i1 %3698 to i8
  store i8 %3699, i8* %59, align 1
  %3700 = lshr i32 %3686, 31
  %3701 = trunc i32 %3700 to i8
  store i8 %3701, i8* %62, align 1
  %3702 = lshr i32 %3685, 31
  %3703 = xor i32 %3700, %3702
  %3704 = add nuw nsw i32 %3703, %3702
  %3705 = icmp eq i32 %3704, 2
  %3706 = zext i1 %3705 to i8
  store i8 %3706, i8* %68, align 1
  %.v321 = select i1 %3698, i64 10, i64 334
  %3707 = add i64 %3238, %.v321
  store i64 %3707, i64* %3, align 8
  br i1 %3698, label %block_46ef79, label %block_.L_46f0bd

block_46ef79:                                     ; preds = %block_.L_46ef6f
  %3708 = add i64 %2737, -144
  %3709 = add i64 %3707, 7
  store i64 %3709, i64* %3, align 8
  %3710 = inttoptr i64 %3708 to i64*
  %3711 = load i64, i64* %3710, align 8
  store i64 %3711, i64* %.pre243, align 8
  %3712 = add i64 %2737, -100
  %3713 = add i64 %3707, 11
  store i64 %3713, i64* %3, align 8
  %3714 = inttoptr i64 %3712 to i32*
  %3715 = load i32, i32* %3714, align 4
  %3716 = sext i32 %3715 to i64
  store i64 %3716, i64* %RCX.i6189, align 8
  %3717 = shl nsw i64 %3716, 3
  %3718 = add i64 %3717, %3711
  %3719 = add i64 %3707, 15
  store i64 %3719, i64* %3, align 8
  %3720 = inttoptr i64 %3718 to i64*
  %3721 = load i64, i64* %3720, align 8
  store i64 %3721, i64* %.pre243, align 8
  %3722 = add i64 %2737, -104
  %3723 = add i64 %3707, 19
  store i64 %3723, i64* %3, align 8
  %3724 = inttoptr i64 %3722 to i32*
  %3725 = load i32, i32* %3724, align 4
  %3726 = sext i32 %3725 to i64
  store i64 %3726, i64* %RCX.i6189, align 8
  %3727 = shl nsw i64 %3726, 3
  %3728 = add i64 %3727, %3721
  %3729 = add i64 %3707, 23
  store i64 %3729, i64* %3, align 8
  %3730 = inttoptr i64 %3728 to i64*
  %3731 = load i64, i64* %3730, align 8
  store i64 %3731, i64* %.pre243, align 8
  %3732 = add i64 %2737, -48
  %3733 = add i64 %3707, 27
  store i64 %3733, i64* %3, align 8
  %3734 = inttoptr i64 %3732 to i32*
  %3735 = load i32, i32* %3734, align 4
  %3736 = sext i32 %3735 to i64
  store i64 %3736, i64* %RCX.i6189, align 8
  %3737 = shl nsw i64 %3736, 3
  %3738 = add i64 %3737, %3731
  %3739 = add i64 %3707, 31
  store i64 %3739, i64* %3, align 8
  %3740 = inttoptr i64 %3738 to i64*
  %3741 = load i64, i64* %3740, align 8
  store i64 %3741, i64* %.pre243, align 8
  %3742 = add i64 %2737, -42
  %3743 = add i64 %3707, 36
  store i64 %3743, i64* %3, align 8
  %3744 = inttoptr i64 %3742 to i16*
  %3745 = load i16, i16* %3744, align 2
  %3746 = sext i16 %3745 to i64
  store i64 %3746, i64* %RCX.i6189, align 8
  %3747 = shl nsw i64 %3746, 3
  %3748 = add i64 %3747, %3741
  %3749 = add i64 %3707, 40
  store i64 %3749, i64* %3, align 8
  %3750 = inttoptr i64 %3748 to i64*
  %3751 = load i64, i64* %3750, align 8
  store i64 %3751, i64* %.pre243, align 8
  %3752 = add i64 %3751, 16
  %3753 = add i64 %3707, 44
  store i64 %3753, i64* %3, align 8
  %3754 = inttoptr i64 %3752 to i64*
  %3755 = load i64, i64* %3754, align 8
  store i64 %3755, i64* %.pre243, align 8
  %3756 = add i64 %3707, 47
  store i64 %3756, i64* %3, align 8
  %3757 = inttoptr i64 %3755 to i16*
  %3758 = load i16, i16* %3757, align 2
  %3759 = sext i16 %3758 to i64
  %3760 = and i64 %3759, 4294967295
  store i64 %3760, i64* %RDX.i5984, align 8
  %3761 = sext i16 %3758 to i32
  store i32 %3761, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %3762 = add i64 %3707, 61
  store i64 %3762, i64* %3, align 8
  %3763 = load i64, i64* %3710, align 8
  store i64 %3763, i64* %.pre243, align 8
  %3764 = add i64 %3707, 65
  store i64 %3764, i64* %3, align 8
  %3765 = load i32, i32* %3714, align 4
  %3766 = sext i32 %3765 to i64
  store i64 %3766, i64* %RCX.i6189, align 8
  %3767 = shl nsw i64 %3766, 3
  %3768 = add i64 %3767, %3763
  %3769 = add i64 %3707, 69
  store i64 %3769, i64* %3, align 8
  %3770 = inttoptr i64 %3768 to i64*
  %3771 = load i64, i64* %3770, align 8
  store i64 %3771, i64* %.pre243, align 8
  %3772 = add i64 %3707, 73
  store i64 %3772, i64* %3, align 8
  %3773 = load i32, i32* %3724, align 4
  %3774 = sext i32 %3773 to i64
  store i64 %3774, i64* %RCX.i6189, align 8
  %3775 = shl nsw i64 %3774, 3
  %3776 = add i64 %3775, %3771
  %3777 = add i64 %3707, 77
  store i64 %3777, i64* %3, align 8
  %3778 = inttoptr i64 %3776 to i64*
  %3779 = load i64, i64* %3778, align 8
  store i64 %3779, i64* %.pre243, align 8
  %3780 = load i64, i64* %RBP.i, align 8
  %3781 = add i64 %3780, -48
  %3782 = add i64 %3707, 81
  store i64 %3782, i64* %3, align 8
  %3783 = inttoptr i64 %3781 to i32*
  %3784 = load i32, i32* %3783, align 4
  %3785 = sext i32 %3784 to i64
  store i64 %3785, i64* %RCX.i6189, align 8
  %3786 = shl nsw i64 %3785, 3
  %3787 = add i64 %3786, %3779
  %3788 = add i64 %3707, 85
  store i64 %3788, i64* %3, align 8
  %3789 = inttoptr i64 %3787 to i64*
  %3790 = load i64, i64* %3789, align 8
  store i64 %3790, i64* %.pre243, align 8
  %3791 = add i64 %3780, -42
  %3792 = add i64 %3707, 90
  store i64 %3792, i64* %3, align 8
  %3793 = inttoptr i64 %3791 to i16*
  %3794 = load i16, i16* %3793, align 2
  %3795 = sext i16 %3794 to i64
  store i64 %3795, i64* %RCX.i6189, align 8
  %3796 = shl nsw i64 %3795, 3
  %3797 = add i64 %3796, %3790
  %3798 = add i64 %3707, 94
  store i64 %3798, i64* %3, align 8
  %3799 = inttoptr i64 %3797 to i64*
  %3800 = load i64, i64* %3799, align 8
  store i64 %3800, i64* %.pre243, align 8
  %3801 = add i64 %3800, 16
  %3802 = add i64 %3707, 98
  store i64 %3802, i64* %3, align 8
  %3803 = inttoptr i64 %3801 to i64*
  %3804 = load i64, i64* %3803, align 8
  store i64 %3804, i64* %.pre243, align 8
  %3805 = add i64 %3804, 2
  %3806 = add i64 %3707, 102
  store i64 %3806, i64* %3, align 8
  %3807 = inttoptr i64 %3805 to i16*
  %3808 = load i16, i16* %3807, align 2
  %3809 = sext i16 %3808 to i64
  %3810 = and i64 %3809, 4294967295
  store i64 %3810, i64* %RDX.i5984, align 8
  %3811 = sext i16 %3808 to i32
  store i32 %3811, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %3812 = add i64 %3707, 113
  store i64 %3812, i64* %3, align 8
  %3813 = load i32, i32* %3783, align 4
  %3814 = add i32 %3813, -1
  %3815 = icmp eq i32 %3813, 0
  %3816 = zext i1 %3815 to i8
  store i8 %3816, i8* %44, align 1
  %3817 = and i32 %3814, 255
  %3818 = tail call i32 @llvm.ctpop.i32(i32 %3817)
  %3819 = trunc i32 %3818 to i8
  %3820 = and i8 %3819, 1
  %3821 = xor i8 %3820, 1
  store i8 %3821, i8* %51, align 1
  %3822 = xor i32 %3814, %3813
  %3823 = lshr i32 %3822, 4
  %3824 = trunc i32 %3823 to i8
  %3825 = and i8 %3824, 1
  store i8 %3825, i8* %56, align 1
  %3826 = icmp eq i32 %3814, 0
  %3827 = zext i1 %3826 to i8
  store i8 %3827, i8* %59, align 1
  %3828 = lshr i32 %3814, 31
  %3829 = trunc i32 %3828 to i8
  store i8 %3829, i8* %62, align 1
  %3830 = lshr i32 %3813, 31
  %3831 = xor i32 %3828, %3830
  %3832 = add nuw nsw i32 %3831, %3830
  %3833 = icmp eq i32 %3832, 2
  %3834 = zext i1 %3833 to i8
  store i8 %3834, i8* %68, align 1
  %.v324 = select i1 %3826, i64 119, i64 201
  %3835 = add i64 %3707, %.v324
  %3836 = add i64 %3835, 8
  store i64 %3836, i64* %3, align 8
  br i1 %3826, label %block_46eff0, label %block_.L_46f042

block_46eff0:                                     ; preds = %block_46ef79
  %3837 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %3837, i64* %.pre243, align 8
  %3838 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3838, i64* %RCX.i6189, align 8
  %3839 = add i64 %3838, 152
  %3840 = add i64 %3835, 22
  store i64 %3840, i64* %3, align 8
  %3841 = inttoptr i64 %3839 to i32*
  %3842 = load i32, i32* %3841, align 4
  %3843 = sext i32 %3842 to i64
  %3844 = ashr i64 %3843, 1
  %3845 = lshr i64 %3844, 1
  %3846 = trunc i64 %3844 to i8
  %3847 = and i8 %3846, 1
  %3848 = trunc i64 %3845 to i32
  %3849 = and i64 %3845, 4294967295
  store i64 %3849, i64* %RDX.i5984, align 8
  store i8 %3847, i8* %44, align 1
  %3850 = and i32 %3848, 255
  %3851 = tail call i32 @llvm.ctpop.i32(i32 %3850)
  %3852 = trunc i32 %3851 to i8
  %3853 = and i8 %3852, 1
  %3854 = xor i8 %3853, 1
  store i8 %3854, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3855 = icmp eq i32 %3848, 0
  %3856 = zext i1 %3855 to i8
  store i8 %3856, i8* %59, align 1
  %3857 = lshr i64 %3844, 32
  %3858 = trunc i64 %3857 to i8
  %3859 = and i8 %3858, 1
  store i8 %3859, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3860 = add i64 %3780, -100
  %3861 = add i64 %3835, 28
  store i64 %3861, i64* %3, align 8
  %3862 = trunc i64 %3845 to i32
  %3863 = inttoptr i64 %3860 to i32*
  %3864 = load i32, i32* %3863, align 4
  %3865 = add i32 %3864, %3862
  %3866 = zext i32 %3865 to i64
  store i64 %3866, i64* %RDX.i5984, align 8
  %3867 = icmp ult i32 %3865, %3862
  %3868 = icmp ult i32 %3865, %3864
  %3869 = or i1 %3867, %3868
  %3870 = zext i1 %3869 to i8
  store i8 %3870, i8* %44, align 1
  %3871 = and i32 %3865, 255
  %3872 = tail call i32 @llvm.ctpop.i32(i32 %3871)
  %3873 = trunc i32 %3872 to i8
  %3874 = and i8 %3873, 1
  %3875 = xor i8 %3874, 1
  store i8 %3875, i8* %51, align 1
  %3876 = xor i32 %3864, %3862
  %3877 = xor i32 %3876, %3865
  %3878 = lshr i32 %3877, 4
  %3879 = trunc i32 %3878 to i8
  %3880 = and i8 %3879, 1
  store i8 %3880, i8* %56, align 1
  %3881 = icmp eq i32 %3865, 0
  %3882 = zext i1 %3881 to i8
  store i8 %3882, i8* %59, align 1
  %3883 = lshr i32 %3865, 31
  %3884 = trunc i32 %3883 to i8
  store i8 %3884, i8* %62, align 1
  %3885 = lshr i64 %3844, 32
  %3886 = trunc i64 %3885 to i32
  %3887 = and i32 %3886, 1
  %3888 = lshr i32 %3864, 31
  %3889 = xor i32 %3883, %3887
  %3890 = xor i32 %3883, %3888
  %3891 = add nuw nsw i32 %3889, %3890
  %3892 = icmp eq i32 %3891, 2
  %3893 = zext i1 %3892 to i8
  store i8 %3893, i8* %68, align 1
  %3894 = sext i32 %3865 to i64
  store i64 %3894, i64* %RCX.i6189, align 8
  %3895 = shl nsw i64 %3894, 3
  %3896 = add i64 %3837, %3895
  %3897 = add i64 %3835, 35
  store i64 %3897, i64* %3, align 8
  %3898 = inttoptr i64 %3896 to i64*
  %3899 = load i64, i64* %3898, align 8
  store i64 %3899, i64* %.pre243, align 8
  store i64 %3838, i64* %RCX.i6189, align 8
  %3900 = add i64 %3838, 156
  %3901 = add i64 %3835, 49
  store i64 %3901, i64* %3, align 8
  %3902 = inttoptr i64 %3900 to i32*
  %3903 = load i32, i32* %3902, align 4
  %3904 = sext i32 %3903 to i64
  %3905 = ashr i64 %3904, 1
  %3906 = lshr i64 %3905, 1
  %3907 = trunc i64 %3905 to i8
  %3908 = and i8 %3907, 1
  %3909 = trunc i64 %3906 to i32
  %3910 = and i64 %3906, 4294967295
  store i64 %3910, i64* %RDX.i5984, align 8
  store i8 %3908, i8* %44, align 1
  %3911 = and i32 %3909, 255
  %3912 = tail call i32 @llvm.ctpop.i32(i32 %3911)
  %3913 = trunc i32 %3912 to i8
  %3914 = and i8 %3913, 1
  %3915 = xor i8 %3914, 1
  store i8 %3915, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3916 = icmp eq i32 %3909, 0
  %3917 = zext i1 %3916 to i8
  store i8 %3917, i8* %59, align 1
  %3918 = lshr i64 %3905, 32
  %3919 = trunc i64 %3918 to i8
  %3920 = and i8 %3919, 1
  store i8 %3920, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %3921 = load i64, i64* %RBP.i, align 8
  %3922 = add i64 %3921, -104
  %3923 = add i64 %3835, 55
  store i64 %3923, i64* %3, align 8
  %3924 = trunc i64 %3906 to i32
  %3925 = inttoptr i64 %3922 to i32*
  %3926 = load i32, i32* %3925, align 4
  %3927 = add i32 %3926, %3924
  %3928 = zext i32 %3927 to i64
  store i64 %3928, i64* %RDX.i5984, align 8
  %3929 = icmp ult i32 %3927, %3924
  %3930 = icmp ult i32 %3927, %3926
  %3931 = or i1 %3929, %3930
  %3932 = zext i1 %3931 to i8
  store i8 %3932, i8* %44, align 1
  %3933 = and i32 %3927, 255
  %3934 = tail call i32 @llvm.ctpop.i32(i32 %3933)
  %3935 = trunc i32 %3934 to i8
  %3936 = and i8 %3935, 1
  %3937 = xor i8 %3936, 1
  store i8 %3937, i8* %51, align 1
  %3938 = xor i32 %3926, %3924
  %3939 = xor i32 %3938, %3927
  %3940 = lshr i32 %3939, 4
  %3941 = trunc i32 %3940 to i8
  %3942 = and i8 %3941, 1
  store i8 %3942, i8* %56, align 1
  %3943 = icmp eq i32 %3927, 0
  %3944 = zext i1 %3943 to i8
  store i8 %3944, i8* %59, align 1
  %3945 = lshr i32 %3927, 31
  %3946 = trunc i32 %3945 to i8
  store i8 %3946, i8* %62, align 1
  %3947 = lshr i64 %3905, 32
  %3948 = trunc i64 %3947 to i32
  %3949 = and i32 %3948, 1
  %3950 = lshr i32 %3926, 31
  %3951 = xor i32 %3945, %3949
  %3952 = xor i32 %3945, %3950
  %3953 = add nuw nsw i32 %3951, %3952
  %3954 = icmp eq i32 %3953, 2
  %3955 = zext i1 %3954 to i8
  store i8 %3955, i8* %68, align 1
  %3956 = sext i32 %3927 to i64
  store i64 %3956, i64* %RCX.i6189, align 8
  %3957 = shl nsw i64 %3956, 3
  %3958 = add i64 %3899, %3957
  %3959 = add i64 %3835, 62
  store i64 %3959, i64* %3, align 8
  %3960 = inttoptr i64 %3958 to i64*
  %3961 = load i64, i64* %3960, align 8
  store i64 %3961, i64* %.pre243, align 8
  %3962 = add i64 %3835, 65
  store i64 %3962, i64* %3, align 8
  %3963 = inttoptr i64 %3961 to i64*
  %3964 = load i64, i64* %3963, align 8
  store i64 %3964, i64* %.pre243, align 8
  %3965 = add i64 %3964, 16
  %3966 = add i64 %3835, 69
  store i64 %3966, i64* %3, align 8
  %3967 = inttoptr i64 %3965 to i64*
  %3968 = load i64, i64* %3967, align 8
  store i64 %3968, i64* %.pre243, align 8
  %3969 = add i64 %3835, 71
  store i64 %3969, i64* %3, align 8
  %3970 = inttoptr i64 %3968 to i32*
  %3971 = load i32, i32* %3970, align 4
  %3972 = zext i32 %3971 to i64
  store i64 %3972, i64* %RDX.i5984, align 8
  %3973 = add i64 %3921, -268
  %3974 = add i64 %3835, 77
  store i64 %3974, i64* %3, align 8
  %3975 = inttoptr i64 %3973 to i32*
  store i32 %3971, i32* %3975, align 4
  %3976 = load i64, i64* %3, align 8
  %3977 = add i64 %3976, 88
  store i64 %3977, i64* %3, align 8
  br label %block_.L_46f095

block_.L_46f042:                                  ; preds = %block_46ef79
  %3978 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %3978, i64* %.pre243, align 8
  %3979 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3979, i64* %RCX.i6189, align 8
  %3980 = add i64 %3979, 152
  %3981 = add i64 %3835, 22
  store i64 %3981, i64* %3, align 8
  %3982 = inttoptr i64 %3980 to i32*
  %3983 = load i32, i32* %3982, align 4
  %3984 = sext i32 %3983 to i64
  %3985 = ashr i64 %3984, 1
  %3986 = lshr i64 %3985, 1
  %3987 = trunc i64 %3985 to i8
  %3988 = and i8 %3987, 1
  %3989 = trunc i64 %3986 to i32
  %3990 = and i64 %3986, 4294967295
  store i64 %3990, i64* %RDX.i5984, align 8
  store i8 %3988, i8* %44, align 1
  %3991 = and i32 %3989, 255
  %3992 = tail call i32 @llvm.ctpop.i32(i32 %3991)
  %3993 = trunc i32 %3992 to i8
  %3994 = and i8 %3993, 1
  %3995 = xor i8 %3994, 1
  store i8 %3995, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %3996 = icmp eq i32 %3989, 0
  %3997 = zext i1 %3996 to i8
  store i8 %3997, i8* %59, align 1
  %3998 = lshr i64 %3985, 32
  %3999 = trunc i64 %3998 to i8
  %4000 = and i8 %3999, 1
  store i8 %4000, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4001 = add i64 %3780, -100
  %4002 = add i64 %3835, 28
  store i64 %4002, i64* %3, align 8
  %4003 = trunc i64 %3986 to i32
  %4004 = inttoptr i64 %4001 to i32*
  %4005 = load i32, i32* %4004, align 4
  %4006 = add i32 %4005, %4003
  %4007 = zext i32 %4006 to i64
  store i64 %4007, i64* %RDX.i5984, align 8
  %4008 = icmp ult i32 %4006, %4003
  %4009 = icmp ult i32 %4006, %4005
  %4010 = or i1 %4008, %4009
  %4011 = zext i1 %4010 to i8
  store i8 %4011, i8* %44, align 1
  %4012 = and i32 %4006, 255
  %4013 = tail call i32 @llvm.ctpop.i32(i32 %4012)
  %4014 = trunc i32 %4013 to i8
  %4015 = and i8 %4014, 1
  %4016 = xor i8 %4015, 1
  store i8 %4016, i8* %51, align 1
  %4017 = xor i32 %4005, %4003
  %4018 = xor i32 %4017, %4006
  %4019 = lshr i32 %4018, 4
  %4020 = trunc i32 %4019 to i8
  %4021 = and i8 %4020, 1
  store i8 %4021, i8* %56, align 1
  %4022 = icmp eq i32 %4006, 0
  %4023 = zext i1 %4022 to i8
  store i8 %4023, i8* %59, align 1
  %4024 = lshr i32 %4006, 31
  %4025 = trunc i32 %4024 to i8
  store i8 %4025, i8* %62, align 1
  %4026 = lshr i64 %3985, 32
  %4027 = trunc i64 %4026 to i32
  %4028 = and i32 %4027, 1
  %4029 = lshr i32 %4005, 31
  %4030 = xor i32 %4024, %4028
  %4031 = xor i32 %4024, %4029
  %4032 = add nuw nsw i32 %4030, %4031
  %4033 = icmp eq i32 %4032, 2
  %4034 = zext i1 %4033 to i8
  store i8 %4034, i8* %68, align 1
  %4035 = sext i32 %4006 to i64
  store i64 %4035, i64* %RCX.i6189, align 8
  %4036 = shl nsw i64 %4035, 3
  %4037 = add i64 %3978, %4036
  %4038 = add i64 %3835, 35
  store i64 %4038, i64* %3, align 8
  %4039 = inttoptr i64 %4037 to i64*
  %4040 = load i64, i64* %4039, align 8
  store i64 %4040, i64* %.pre243, align 8
  store i64 %3979, i64* %RCX.i6189, align 8
  %4041 = add i64 %3979, 156
  %4042 = add i64 %3835, 49
  store i64 %4042, i64* %3, align 8
  %4043 = inttoptr i64 %4041 to i32*
  %4044 = load i32, i32* %4043, align 4
  %4045 = sext i32 %4044 to i64
  %4046 = ashr i64 %4045, 1
  %4047 = lshr i64 %4046, 1
  %4048 = trunc i64 %4046 to i8
  %4049 = and i8 %4048, 1
  %4050 = trunc i64 %4047 to i32
  %4051 = and i64 %4047, 4294967295
  store i64 %4051, i64* %RDX.i5984, align 8
  store i8 %4049, i8* %44, align 1
  %4052 = and i32 %4050, 255
  %4053 = tail call i32 @llvm.ctpop.i32(i32 %4052)
  %4054 = trunc i32 %4053 to i8
  %4055 = and i8 %4054, 1
  %4056 = xor i8 %4055, 1
  store i8 %4056, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4057 = icmp eq i32 %4050, 0
  %4058 = zext i1 %4057 to i8
  store i8 %4058, i8* %59, align 1
  %4059 = lshr i64 %4046, 32
  %4060 = trunc i64 %4059 to i8
  %4061 = and i8 %4060, 1
  store i8 %4061, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4062 = load i64, i64* %RBP.i, align 8
  %4063 = add i64 %4062, -104
  %4064 = add i64 %3835, 55
  store i64 %4064, i64* %3, align 8
  %4065 = trunc i64 %4047 to i32
  %4066 = inttoptr i64 %4063 to i32*
  %4067 = load i32, i32* %4066, align 4
  %4068 = add i32 %4067, %4065
  %4069 = zext i32 %4068 to i64
  store i64 %4069, i64* %RDX.i5984, align 8
  %4070 = icmp ult i32 %4068, %4065
  %4071 = icmp ult i32 %4068, %4067
  %4072 = or i1 %4070, %4071
  %4073 = zext i1 %4072 to i8
  store i8 %4073, i8* %44, align 1
  %4074 = and i32 %4068, 255
  %4075 = tail call i32 @llvm.ctpop.i32(i32 %4074)
  %4076 = trunc i32 %4075 to i8
  %4077 = and i8 %4076, 1
  %4078 = xor i8 %4077, 1
  store i8 %4078, i8* %51, align 1
  %4079 = xor i32 %4067, %4065
  %4080 = xor i32 %4079, %4068
  %4081 = lshr i32 %4080, 4
  %4082 = trunc i32 %4081 to i8
  %4083 = and i8 %4082, 1
  store i8 %4083, i8* %56, align 1
  %4084 = icmp eq i32 %4068, 0
  %4085 = zext i1 %4084 to i8
  store i8 %4085, i8* %59, align 1
  %4086 = lshr i32 %4068, 31
  %4087 = trunc i32 %4086 to i8
  store i8 %4087, i8* %62, align 1
  %4088 = lshr i64 %4046, 32
  %4089 = trunc i64 %4088 to i32
  %4090 = and i32 %4089, 1
  %4091 = lshr i32 %4067, 31
  %4092 = xor i32 %4086, %4090
  %4093 = xor i32 %4086, %4091
  %4094 = add nuw nsw i32 %4092, %4093
  %4095 = icmp eq i32 %4094, 2
  %4096 = zext i1 %4095 to i8
  store i8 %4096, i8* %68, align 1
  %4097 = sext i32 %4068 to i64
  store i64 %4097, i64* %RCX.i6189, align 8
  %4098 = shl nsw i64 %4097, 3
  %4099 = add i64 %4040, %4098
  %4100 = add i64 %3835, 62
  store i64 %4100, i64* %3, align 8
  %4101 = inttoptr i64 %4099 to i64*
  %4102 = load i64, i64* %4101, align 8
  store i64 %4102, i64* %.pre243, align 8
  %4103 = add i64 %4062, -42
  %4104 = add i64 %3835, 67
  store i64 %4104, i64* %3, align 8
  %4105 = inttoptr i64 %4103 to i16*
  %4106 = load i16, i16* %4105, align 2
  %4107 = sext i16 %4106 to i64
  store i64 %4107, i64* %RCX.i6189, align 8
  %4108 = shl nsw i64 %4107, 3
  %4109 = add i64 %4108, %4102
  %4110 = add i64 %3835, 71
  store i64 %4110, i64* %3, align 8
  %4111 = inttoptr i64 %4109 to i64*
  %4112 = load i64, i64* %4111, align 8
  store i64 %4112, i64* %.pre243, align 8
  %4113 = add i64 %4112, 16
  %4114 = add i64 %3835, 75
  store i64 %4114, i64* %3, align 8
  %4115 = inttoptr i64 %4113 to i64*
  %4116 = load i64, i64* %4115, align 8
  store i64 %4116, i64* %.pre243, align 8
  %4117 = add i64 %3835, 77
  store i64 %4117, i64* %3, align 8
  %4118 = inttoptr i64 %4116 to i32*
  %4119 = load i32, i32* %4118, align 4
  %4120 = zext i32 %4119 to i64
  store i64 %4120, i64* %RDX.i5984, align 8
  %4121 = add i64 %4062, -268
  %4122 = add i64 %3835, 83
  store i64 %4122, i64* %3, align 8
  %4123 = inttoptr i64 %4121 to i32*
  store i32 %4119, i32* %4123, align 4
  %.pre164 = load i64, i64* %3, align 8
  br label %block_.L_46f095

block_.L_46f095:                                  ; preds = %block_.L_46f042, %block_46eff0
  %4124 = phi i64 [ %.pre164, %block_.L_46f042 ], [ %3977, %block_46eff0 ]
  %4125 = load i64, i64* %RBP.i, align 8
  %4126 = add i64 %4125, -268
  %4127 = add i64 %4124, 6
  store i64 %4127, i64* %3, align 8
  %4128 = inttoptr i64 %4126 to i32*
  %4129 = load i32, i32* %4128, align 4
  %4130 = zext i32 %4129 to i64
  store i64 2, i64* %RCX.i6189, align 8
  store i32 %4129, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i64 %4130, i64* %.pre243, align 8
  %4131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4132 = sext i32 %4129 to i64
  %4133 = lshr i64 %4132, 32
  store i64 %4133, i64* %4131, align 8
  %4134 = add i64 %4124, 28
  store i64 %4134, i64* %3, align 8
  %4135 = shl nuw i64 %4133, 32
  %4136 = or i64 %4135, %4130
  %4137 = sdiv i64 %4136, 2
  %4138 = shl i64 %4137, 32
  %4139 = ashr exact i64 %4138, 32
  %4140 = icmp eq i64 %4137, %4139
  br i1 %4140, label %4143, label %4141

; <label>:4141:                                   ; preds = %block_.L_46f095
  %4142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4134, %struct.Memory* %MEMORY.11)
  %.pre165 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %.pre166 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4623

; <label>:4143:                                   ; preds = %block_.L_46f095
  %4144 = srem i64 %4136, 2
  %4145 = and i64 %4137, 4294967295
  store i64 %4145, i64* %.pre243, align 8
  %4146 = and i64 %4144, 4294967295
  store i64 %4146, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4147 = trunc i64 %4137 to i32
  br label %routine_idivl__ecx.exit4623

routine_idivl__ecx.exit4623:                      ; preds = %4143, %4141
  %4148 = phi i64 [ %.pre166, %4141 ], [ %4134, %4143 ]
  %4149 = phi i32 [ %.pre165, %4141 ], [ %4147, %4143 ]
  %4150 = phi %struct.Memory* [ %4142, %4141 ], [ %MEMORY.11, %4143 ]
  %4151 = add i64 %4148, 7
  store i64 %4151, i64* %3, align 8
  store i32 %4149, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %4152 = add i64 %4148, 346
  br label %block_.L_46f20b

block_.L_46f0bd:                                  ; preds = %block_.L_46ef6f
  %4153 = add i64 %3707, 4
  store i64 %4153, i64* %3, align 8
  %4154 = load i32, i32* %2740, align 4
  %4155 = add i32 %4154, -1
  %4156 = icmp eq i32 %4154, 0
  %4157 = zext i1 %4156 to i8
  store i8 %4157, i8* %44, align 1
  %4158 = and i32 %4155, 255
  %4159 = tail call i32 @llvm.ctpop.i32(i32 %4158)
  %4160 = trunc i32 %4159 to i8
  %4161 = and i8 %4160, 1
  %4162 = xor i8 %4161, 1
  store i8 %4162, i8* %51, align 1
  %4163 = xor i32 %4155, %4154
  %4164 = lshr i32 %4163, 4
  %4165 = trunc i32 %4164 to i8
  %4166 = and i8 %4165, 1
  store i8 %4166, i8* %56, align 1
  %4167 = icmp eq i32 %4155, 0
  %4168 = zext i1 %4167 to i8
  store i8 %4168, i8* %59, align 1
  %4169 = lshr i32 %4155, 31
  %4170 = trunc i32 %4169 to i8
  store i8 %4170, i8* %62, align 1
  %4171 = lshr i32 %4154, 31
  %4172 = xor i32 %4169, %4171
  %4173 = add nuw nsw i32 %4172, %4171
  %4174 = icmp eq i32 %4173, 2
  %4175 = zext i1 %4174 to i8
  store i8 %4175, i8* %68, align 1
  %4176 = icmp ne i8 %4170, 0
  %4177 = xor i1 %4176, %4174
  %4178 = or i1 %4167, %4177
  %.v322 = select i1 %4178, i64 329, i64 10
  %4179 = add i64 %3707, %.v322
  store i64 %4179, i64* %3, align 8
  br i1 %4178, label %block_.L_46f206, label %block_46f0c7

block_46f0c7:                                     ; preds = %block_.L_46f0bd
  %4180 = add i64 %2737, -144
  %4181 = add i64 %4179, 7
  store i64 %4181, i64* %3, align 8
  %4182 = inttoptr i64 %4180 to i64*
  %4183 = load i64, i64* %4182, align 8
  store i64 %4183, i64* %.pre243, align 8
  %4184 = add i64 %2737, -100
  %4185 = add i64 %4179, 11
  store i64 %4185, i64* %3, align 8
  %4186 = inttoptr i64 %4184 to i32*
  %4187 = load i32, i32* %4186, align 4
  %4188 = sext i32 %4187 to i64
  store i64 %4188, i64* %RCX.i6189, align 8
  %4189 = shl nsw i64 %4188, 3
  %4190 = add i64 %4189, %4183
  %4191 = add i64 %4179, 15
  store i64 %4191, i64* %3, align 8
  %4192 = inttoptr i64 %4190 to i64*
  %4193 = load i64, i64* %4192, align 8
  store i64 %4193, i64* %.pre243, align 8
  %4194 = add i64 %2737, -104
  %4195 = add i64 %4179, 19
  store i64 %4195, i64* %3, align 8
  %4196 = inttoptr i64 %4194 to i32*
  %4197 = load i32, i32* %4196, align 4
  %4198 = sext i32 %4197 to i64
  store i64 %4198, i64* %RCX.i6189, align 8
  %4199 = shl nsw i64 %4198, 3
  %4200 = add i64 %4199, %4193
  %4201 = add i64 %4179, 23
  store i64 %4201, i64* %3, align 8
  %4202 = inttoptr i64 %4200 to i64*
  %4203 = load i64, i64* %4202, align 8
  store i64 %4203, i64* %.pre243, align 8
  %4204 = add i64 %2737, -48
  %4205 = add i64 %4179, 27
  store i64 %4205, i64* %3, align 8
  %4206 = inttoptr i64 %4204 to i32*
  %4207 = load i32, i32* %4206, align 4
  %4208 = sext i32 %4207 to i64
  store i64 %4208, i64* %RCX.i6189, align 8
  %4209 = shl nsw i64 %4208, 3
  %4210 = add i64 %4209, %4203
  %4211 = add i64 %4179, 31
  store i64 %4211, i64* %3, align 8
  %4212 = inttoptr i64 %4210 to i64*
  %4213 = load i64, i64* %4212, align 8
  store i64 %4213, i64* %.pre243, align 8
  %4214 = add i64 %2737, -42
  %4215 = add i64 %4179, 36
  store i64 %4215, i64* %3, align 8
  %4216 = inttoptr i64 %4214 to i16*
  %4217 = load i16, i16* %4216, align 2
  %4218 = sext i16 %4217 to i64
  store i64 %4218, i64* %RCX.i6189, align 8
  %4219 = shl nsw i64 %4218, 3
  %4220 = add i64 %4219, %4213
  %4221 = add i64 %4179, 40
  store i64 %4221, i64* %3, align 8
  %4222 = inttoptr i64 %4220 to i64*
  %4223 = load i64, i64* %4222, align 8
  store i64 %4223, i64* %.pre243, align 8
  %4224 = add i64 %4223, 8
  %4225 = add i64 %4179, 44
  store i64 %4225, i64* %3, align 8
  %4226 = inttoptr i64 %4224 to i64*
  %4227 = load i64, i64* %4226, align 8
  store i64 %4227, i64* %.pre243, align 8
  %4228 = add i64 %4179, 47
  store i64 %4228, i64* %3, align 8
  %4229 = inttoptr i64 %4227 to i16*
  %4230 = load i16, i16* %4229, align 2
  %4231 = sext i16 %4230 to i64
  %4232 = and i64 %4231, 4294967295
  store i64 %4232, i64* %RDX.i5984, align 8
  %4233 = sext i16 %4230 to i32
  store i32 %4233, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  %4234 = add i64 %4179, 61
  store i64 %4234, i64* %3, align 8
  %4235 = load i64, i64* %4182, align 8
  store i64 %4235, i64* %.pre243, align 8
  %4236 = add i64 %4179, 65
  store i64 %4236, i64* %3, align 8
  %4237 = load i32, i32* %4186, align 4
  %4238 = sext i32 %4237 to i64
  store i64 %4238, i64* %RCX.i6189, align 8
  %4239 = shl nsw i64 %4238, 3
  %4240 = add i64 %4239, %4235
  %4241 = add i64 %4179, 69
  store i64 %4241, i64* %3, align 8
  %4242 = inttoptr i64 %4240 to i64*
  %4243 = load i64, i64* %4242, align 8
  store i64 %4243, i64* %.pre243, align 8
  %4244 = add i64 %4179, 73
  store i64 %4244, i64* %3, align 8
  %4245 = load i32, i32* %4196, align 4
  %4246 = sext i32 %4245 to i64
  store i64 %4246, i64* %RCX.i6189, align 8
  %4247 = shl nsw i64 %4246, 3
  %4248 = add i64 %4247, %4243
  %4249 = add i64 %4179, 77
  store i64 %4249, i64* %3, align 8
  %4250 = inttoptr i64 %4248 to i64*
  %4251 = load i64, i64* %4250, align 8
  store i64 %4251, i64* %.pre243, align 8
  %4252 = load i64, i64* %RBP.i, align 8
  %4253 = add i64 %4252, -48
  %4254 = add i64 %4179, 81
  store i64 %4254, i64* %3, align 8
  %4255 = inttoptr i64 %4253 to i32*
  %4256 = load i32, i32* %4255, align 4
  %4257 = sext i32 %4256 to i64
  store i64 %4257, i64* %RCX.i6189, align 8
  %4258 = shl nsw i64 %4257, 3
  %4259 = add i64 %4258, %4251
  %4260 = add i64 %4179, 85
  store i64 %4260, i64* %3, align 8
  %4261 = inttoptr i64 %4259 to i64*
  %4262 = load i64, i64* %4261, align 8
  store i64 %4262, i64* %.pre243, align 8
  %4263 = add i64 %4252, -42
  %4264 = add i64 %4179, 90
  store i64 %4264, i64* %3, align 8
  %4265 = inttoptr i64 %4263 to i16*
  %4266 = load i16, i16* %4265, align 2
  %4267 = sext i16 %4266 to i64
  store i64 %4267, i64* %RCX.i6189, align 8
  %4268 = shl nsw i64 %4267, 3
  %4269 = add i64 %4268, %4262
  %4270 = add i64 %4179, 94
  store i64 %4270, i64* %3, align 8
  %4271 = inttoptr i64 %4269 to i64*
  %4272 = load i64, i64* %4271, align 8
  store i64 %4272, i64* %.pre243, align 8
  %4273 = add i64 %4272, 8
  %4274 = add i64 %4179, 98
  store i64 %4274, i64* %3, align 8
  %4275 = inttoptr i64 %4273 to i64*
  %4276 = load i64, i64* %4275, align 8
  store i64 %4276, i64* %.pre243, align 8
  %4277 = add i64 %4276, 2
  %4278 = add i64 %4179, 102
  store i64 %4278, i64* %3, align 8
  %4279 = inttoptr i64 %4277 to i16*
  %4280 = load i16, i16* %4279, align 2
  %4281 = sext i16 %4280 to i64
  %4282 = and i64 %4281, 4294967295
  store i64 %4282, i64* %RDX.i5984, align 8
  %4283 = sext i16 %4280 to i32
  store i32 %4283, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  %4284 = add i64 %4179, 113
  store i64 %4284, i64* %3, align 8
  %4285 = load i32, i32* %4255, align 4
  %4286 = add i32 %4285, -1
  %4287 = icmp eq i32 %4285, 0
  %4288 = zext i1 %4287 to i8
  store i8 %4288, i8* %44, align 1
  %4289 = and i32 %4286, 255
  %4290 = tail call i32 @llvm.ctpop.i32(i32 %4289)
  %4291 = trunc i32 %4290 to i8
  %4292 = and i8 %4291, 1
  %4293 = xor i8 %4292, 1
  store i8 %4293, i8* %51, align 1
  %4294 = xor i32 %4286, %4285
  %4295 = lshr i32 %4294, 4
  %4296 = trunc i32 %4295 to i8
  %4297 = and i8 %4296, 1
  store i8 %4297, i8* %56, align 1
  %4298 = icmp eq i32 %4286, 0
  %4299 = zext i1 %4298 to i8
  store i8 %4299, i8* %59, align 1
  %4300 = lshr i32 %4286, 31
  %4301 = trunc i32 %4300 to i8
  store i8 %4301, i8* %62, align 1
  %4302 = lshr i32 %4285, 31
  %4303 = xor i32 %4300, %4302
  %4304 = add nuw nsw i32 %4303, %4302
  %4305 = icmp eq i32 %4304, 2
  %4306 = zext i1 %4305 to i8
  store i8 %4306, i8* %68, align 1
  %.v323 = select i1 %4298, i64 119, i64 201
  %4307 = add i64 %4179, %.v323
  %4308 = add i64 %4307, 8
  store i64 %4308, i64* %3, align 8
  br i1 %4298, label %block_46f13e, label %block_.L_46f190

block_46f13e:                                     ; preds = %block_46f0c7
  %4309 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %4309, i64* %.pre243, align 8
  %4310 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4310, i64* %RCX.i6189, align 8
  %4311 = add i64 %4310, 152
  %4312 = add i64 %4307, 22
  store i64 %4312, i64* %3, align 8
  %4313 = inttoptr i64 %4311 to i32*
  %4314 = load i32, i32* %4313, align 4
  %4315 = sext i32 %4314 to i64
  %4316 = ashr i64 %4315, 1
  %4317 = lshr i64 %4316, 1
  %4318 = trunc i64 %4316 to i8
  %4319 = and i8 %4318, 1
  %4320 = trunc i64 %4317 to i32
  %4321 = and i64 %4317, 4294967295
  store i64 %4321, i64* %RDX.i5984, align 8
  store i8 %4319, i8* %44, align 1
  %4322 = and i32 %4320, 255
  %4323 = tail call i32 @llvm.ctpop.i32(i32 %4322)
  %4324 = trunc i32 %4323 to i8
  %4325 = and i8 %4324, 1
  %4326 = xor i8 %4325, 1
  store i8 %4326, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4327 = icmp eq i32 %4320, 0
  %4328 = zext i1 %4327 to i8
  store i8 %4328, i8* %59, align 1
  %4329 = lshr i64 %4316, 32
  %4330 = trunc i64 %4329 to i8
  %4331 = and i8 %4330, 1
  store i8 %4331, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4332 = add i64 %4252, -100
  %4333 = add i64 %4307, 28
  store i64 %4333, i64* %3, align 8
  %4334 = trunc i64 %4317 to i32
  %4335 = inttoptr i64 %4332 to i32*
  %4336 = load i32, i32* %4335, align 4
  %4337 = add i32 %4336, %4334
  %4338 = zext i32 %4337 to i64
  store i64 %4338, i64* %RDX.i5984, align 8
  %4339 = icmp ult i32 %4337, %4334
  %4340 = icmp ult i32 %4337, %4336
  %4341 = or i1 %4339, %4340
  %4342 = zext i1 %4341 to i8
  store i8 %4342, i8* %44, align 1
  %4343 = and i32 %4337, 255
  %4344 = tail call i32 @llvm.ctpop.i32(i32 %4343)
  %4345 = trunc i32 %4344 to i8
  %4346 = and i8 %4345, 1
  %4347 = xor i8 %4346, 1
  store i8 %4347, i8* %51, align 1
  %4348 = xor i32 %4336, %4334
  %4349 = xor i32 %4348, %4337
  %4350 = lshr i32 %4349, 4
  %4351 = trunc i32 %4350 to i8
  %4352 = and i8 %4351, 1
  store i8 %4352, i8* %56, align 1
  %4353 = icmp eq i32 %4337, 0
  %4354 = zext i1 %4353 to i8
  store i8 %4354, i8* %59, align 1
  %4355 = lshr i32 %4337, 31
  %4356 = trunc i32 %4355 to i8
  store i8 %4356, i8* %62, align 1
  %4357 = lshr i64 %4316, 32
  %4358 = trunc i64 %4357 to i32
  %4359 = and i32 %4358, 1
  %4360 = lshr i32 %4336, 31
  %4361 = xor i32 %4355, %4359
  %4362 = xor i32 %4355, %4360
  %4363 = add nuw nsw i32 %4361, %4362
  %4364 = icmp eq i32 %4363, 2
  %4365 = zext i1 %4364 to i8
  store i8 %4365, i8* %68, align 1
  %4366 = sext i32 %4337 to i64
  store i64 %4366, i64* %RCX.i6189, align 8
  %4367 = shl nsw i64 %4366, 3
  %4368 = add i64 %4309, %4367
  %4369 = add i64 %4307, 35
  store i64 %4369, i64* %3, align 8
  %4370 = inttoptr i64 %4368 to i64*
  %4371 = load i64, i64* %4370, align 8
  store i64 %4371, i64* %.pre243, align 8
  store i64 %4310, i64* %RCX.i6189, align 8
  %4372 = add i64 %4310, 156
  %4373 = add i64 %4307, 49
  store i64 %4373, i64* %3, align 8
  %4374 = inttoptr i64 %4372 to i32*
  %4375 = load i32, i32* %4374, align 4
  %4376 = sext i32 %4375 to i64
  %4377 = ashr i64 %4376, 1
  %4378 = lshr i64 %4377, 1
  %4379 = trunc i64 %4377 to i8
  %4380 = and i8 %4379, 1
  %4381 = trunc i64 %4378 to i32
  %4382 = and i64 %4378, 4294967295
  store i64 %4382, i64* %RDX.i5984, align 8
  store i8 %4380, i8* %44, align 1
  %4383 = and i32 %4381, 255
  %4384 = tail call i32 @llvm.ctpop.i32(i32 %4383)
  %4385 = trunc i32 %4384 to i8
  %4386 = and i8 %4385, 1
  %4387 = xor i8 %4386, 1
  store i8 %4387, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4388 = icmp eq i32 %4381, 0
  %4389 = zext i1 %4388 to i8
  store i8 %4389, i8* %59, align 1
  %4390 = lshr i64 %4377, 32
  %4391 = trunc i64 %4390 to i8
  %4392 = and i8 %4391, 1
  store i8 %4392, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4393 = load i64, i64* %RBP.i, align 8
  %4394 = add i64 %4393, -104
  %4395 = add i64 %4307, 55
  store i64 %4395, i64* %3, align 8
  %4396 = trunc i64 %4378 to i32
  %4397 = inttoptr i64 %4394 to i32*
  %4398 = load i32, i32* %4397, align 4
  %4399 = add i32 %4398, %4396
  %4400 = zext i32 %4399 to i64
  store i64 %4400, i64* %RDX.i5984, align 8
  %4401 = icmp ult i32 %4399, %4396
  %4402 = icmp ult i32 %4399, %4398
  %4403 = or i1 %4401, %4402
  %4404 = zext i1 %4403 to i8
  store i8 %4404, i8* %44, align 1
  %4405 = and i32 %4399, 255
  %4406 = tail call i32 @llvm.ctpop.i32(i32 %4405)
  %4407 = trunc i32 %4406 to i8
  %4408 = and i8 %4407, 1
  %4409 = xor i8 %4408, 1
  store i8 %4409, i8* %51, align 1
  %4410 = xor i32 %4398, %4396
  %4411 = xor i32 %4410, %4399
  %4412 = lshr i32 %4411, 4
  %4413 = trunc i32 %4412 to i8
  %4414 = and i8 %4413, 1
  store i8 %4414, i8* %56, align 1
  %4415 = icmp eq i32 %4399, 0
  %4416 = zext i1 %4415 to i8
  store i8 %4416, i8* %59, align 1
  %4417 = lshr i32 %4399, 31
  %4418 = trunc i32 %4417 to i8
  store i8 %4418, i8* %62, align 1
  %4419 = lshr i64 %4377, 32
  %4420 = trunc i64 %4419 to i32
  %4421 = and i32 %4420, 1
  %4422 = lshr i32 %4398, 31
  %4423 = xor i32 %4417, %4421
  %4424 = xor i32 %4417, %4422
  %4425 = add nuw nsw i32 %4423, %4424
  %4426 = icmp eq i32 %4425, 2
  %4427 = zext i1 %4426 to i8
  store i8 %4427, i8* %68, align 1
  %4428 = sext i32 %4399 to i64
  store i64 %4428, i64* %RCX.i6189, align 8
  %4429 = shl nsw i64 %4428, 3
  %4430 = add i64 %4371, %4429
  %4431 = add i64 %4307, 62
  store i64 %4431, i64* %3, align 8
  %4432 = inttoptr i64 %4430 to i64*
  %4433 = load i64, i64* %4432, align 8
  store i64 %4433, i64* %.pre243, align 8
  %4434 = add i64 %4307, 65
  store i64 %4434, i64* %3, align 8
  %4435 = inttoptr i64 %4433 to i64*
  %4436 = load i64, i64* %4435, align 8
  store i64 %4436, i64* %.pre243, align 8
  %4437 = add i64 %4436, 8
  %4438 = add i64 %4307, 69
  store i64 %4438, i64* %3, align 8
  %4439 = inttoptr i64 %4437 to i64*
  %4440 = load i64, i64* %4439, align 8
  store i64 %4440, i64* %.pre243, align 8
  %4441 = add i64 %4307, 71
  store i64 %4441, i64* %3, align 8
  %4442 = inttoptr i64 %4440 to i32*
  %4443 = load i32, i32* %4442, align 4
  %4444 = zext i32 %4443 to i64
  store i64 %4444, i64* %RDX.i5984, align 8
  %4445 = add i64 %4393, -272
  %4446 = add i64 %4307, 77
  store i64 %4446, i64* %3, align 8
  %4447 = inttoptr i64 %4445 to i32*
  store i32 %4443, i32* %4447, align 4
  %4448 = load i64, i64* %3, align 8
  %4449 = add i64 %4448, 88
  store i64 %4449, i64* %3, align 8
  br label %block_.L_46f1e3

block_.L_46f190:                                  ; preds = %block_46f0c7
  %4450 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %4450, i64* %.pre243, align 8
  %4451 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4451, i64* %RCX.i6189, align 8
  %4452 = add i64 %4451, 152
  %4453 = add i64 %4307, 22
  store i64 %4453, i64* %3, align 8
  %4454 = inttoptr i64 %4452 to i32*
  %4455 = load i32, i32* %4454, align 4
  %4456 = sext i32 %4455 to i64
  %4457 = ashr i64 %4456, 1
  %4458 = lshr i64 %4457, 1
  %4459 = trunc i64 %4457 to i8
  %4460 = and i8 %4459, 1
  %4461 = trunc i64 %4458 to i32
  %4462 = and i64 %4458, 4294967295
  store i64 %4462, i64* %RDX.i5984, align 8
  store i8 %4460, i8* %44, align 1
  %4463 = and i32 %4461, 255
  %4464 = tail call i32 @llvm.ctpop.i32(i32 %4463)
  %4465 = trunc i32 %4464 to i8
  %4466 = and i8 %4465, 1
  %4467 = xor i8 %4466, 1
  store i8 %4467, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4468 = icmp eq i32 %4461, 0
  %4469 = zext i1 %4468 to i8
  store i8 %4469, i8* %59, align 1
  %4470 = lshr i64 %4457, 32
  %4471 = trunc i64 %4470 to i8
  %4472 = and i8 %4471, 1
  store i8 %4472, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4473 = add i64 %4252, -100
  %4474 = add i64 %4307, 28
  store i64 %4474, i64* %3, align 8
  %4475 = trunc i64 %4458 to i32
  %4476 = inttoptr i64 %4473 to i32*
  %4477 = load i32, i32* %4476, align 4
  %4478 = add i32 %4477, %4475
  %4479 = zext i32 %4478 to i64
  store i64 %4479, i64* %RDX.i5984, align 8
  %4480 = icmp ult i32 %4478, %4475
  %4481 = icmp ult i32 %4478, %4477
  %4482 = or i1 %4480, %4481
  %4483 = zext i1 %4482 to i8
  store i8 %4483, i8* %44, align 1
  %4484 = and i32 %4478, 255
  %4485 = tail call i32 @llvm.ctpop.i32(i32 %4484)
  %4486 = trunc i32 %4485 to i8
  %4487 = and i8 %4486, 1
  %4488 = xor i8 %4487, 1
  store i8 %4488, i8* %51, align 1
  %4489 = xor i32 %4477, %4475
  %4490 = xor i32 %4489, %4478
  %4491 = lshr i32 %4490, 4
  %4492 = trunc i32 %4491 to i8
  %4493 = and i8 %4492, 1
  store i8 %4493, i8* %56, align 1
  %4494 = icmp eq i32 %4478, 0
  %4495 = zext i1 %4494 to i8
  store i8 %4495, i8* %59, align 1
  %4496 = lshr i32 %4478, 31
  %4497 = trunc i32 %4496 to i8
  store i8 %4497, i8* %62, align 1
  %4498 = lshr i64 %4457, 32
  %4499 = trunc i64 %4498 to i32
  %4500 = and i32 %4499, 1
  %4501 = lshr i32 %4477, 31
  %4502 = xor i32 %4496, %4500
  %4503 = xor i32 %4496, %4501
  %4504 = add nuw nsw i32 %4502, %4503
  %4505 = icmp eq i32 %4504, 2
  %4506 = zext i1 %4505 to i8
  store i8 %4506, i8* %68, align 1
  %4507 = sext i32 %4478 to i64
  store i64 %4507, i64* %RCX.i6189, align 8
  %4508 = shl nsw i64 %4507, 3
  %4509 = add i64 %4450, %4508
  %4510 = add i64 %4307, 35
  store i64 %4510, i64* %3, align 8
  %4511 = inttoptr i64 %4509 to i64*
  %4512 = load i64, i64* %4511, align 8
  store i64 %4512, i64* %.pre243, align 8
  store i64 %4451, i64* %RCX.i6189, align 8
  %4513 = add i64 %4451, 156
  %4514 = add i64 %4307, 49
  store i64 %4514, i64* %3, align 8
  %4515 = inttoptr i64 %4513 to i32*
  %4516 = load i32, i32* %4515, align 4
  %4517 = sext i32 %4516 to i64
  %4518 = ashr i64 %4517, 1
  %4519 = lshr i64 %4518, 1
  %4520 = trunc i64 %4518 to i8
  %4521 = and i8 %4520, 1
  %4522 = trunc i64 %4519 to i32
  %4523 = and i64 %4519, 4294967295
  store i64 %4523, i64* %RDX.i5984, align 8
  store i8 %4521, i8* %44, align 1
  %4524 = and i32 %4522, 255
  %4525 = tail call i32 @llvm.ctpop.i32(i32 %4524)
  %4526 = trunc i32 %4525 to i8
  %4527 = and i8 %4526, 1
  %4528 = xor i8 %4527, 1
  store i8 %4528, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4529 = icmp eq i32 %4522, 0
  %4530 = zext i1 %4529 to i8
  store i8 %4530, i8* %59, align 1
  %4531 = lshr i64 %4518, 32
  %4532 = trunc i64 %4531 to i8
  %4533 = and i8 %4532, 1
  store i8 %4533, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4534 = load i64, i64* %RBP.i, align 8
  %4535 = add i64 %4534, -104
  %4536 = add i64 %4307, 55
  store i64 %4536, i64* %3, align 8
  %4537 = trunc i64 %4519 to i32
  %4538 = inttoptr i64 %4535 to i32*
  %4539 = load i32, i32* %4538, align 4
  %4540 = add i32 %4539, %4537
  %4541 = zext i32 %4540 to i64
  store i64 %4541, i64* %RDX.i5984, align 8
  %4542 = icmp ult i32 %4540, %4537
  %4543 = icmp ult i32 %4540, %4539
  %4544 = or i1 %4542, %4543
  %4545 = zext i1 %4544 to i8
  store i8 %4545, i8* %44, align 1
  %4546 = and i32 %4540, 255
  %4547 = tail call i32 @llvm.ctpop.i32(i32 %4546)
  %4548 = trunc i32 %4547 to i8
  %4549 = and i8 %4548, 1
  %4550 = xor i8 %4549, 1
  store i8 %4550, i8* %51, align 1
  %4551 = xor i32 %4539, %4537
  %4552 = xor i32 %4551, %4540
  %4553 = lshr i32 %4552, 4
  %4554 = trunc i32 %4553 to i8
  %4555 = and i8 %4554, 1
  store i8 %4555, i8* %56, align 1
  %4556 = icmp eq i32 %4540, 0
  %4557 = zext i1 %4556 to i8
  store i8 %4557, i8* %59, align 1
  %4558 = lshr i32 %4540, 31
  %4559 = trunc i32 %4558 to i8
  store i8 %4559, i8* %62, align 1
  %4560 = lshr i64 %4518, 32
  %4561 = trunc i64 %4560 to i32
  %4562 = and i32 %4561, 1
  %4563 = lshr i32 %4539, 31
  %4564 = xor i32 %4558, %4562
  %4565 = xor i32 %4558, %4563
  %4566 = add nuw nsw i32 %4564, %4565
  %4567 = icmp eq i32 %4566, 2
  %4568 = zext i1 %4567 to i8
  store i8 %4568, i8* %68, align 1
  %4569 = sext i32 %4540 to i64
  store i64 %4569, i64* %RCX.i6189, align 8
  %4570 = shl nsw i64 %4569, 3
  %4571 = add i64 %4512, %4570
  %4572 = add i64 %4307, 62
  store i64 %4572, i64* %3, align 8
  %4573 = inttoptr i64 %4571 to i64*
  %4574 = load i64, i64* %4573, align 8
  store i64 %4574, i64* %.pre243, align 8
  %4575 = add i64 %4534, -42
  %4576 = add i64 %4307, 67
  store i64 %4576, i64* %3, align 8
  %4577 = inttoptr i64 %4575 to i16*
  %4578 = load i16, i16* %4577, align 2
  %4579 = sext i16 %4578 to i64
  store i64 %4579, i64* %RCX.i6189, align 8
  %4580 = shl nsw i64 %4579, 3
  %4581 = add i64 %4580, %4574
  %4582 = add i64 %4307, 71
  store i64 %4582, i64* %3, align 8
  %4583 = inttoptr i64 %4581 to i64*
  %4584 = load i64, i64* %4583, align 8
  store i64 %4584, i64* %.pre243, align 8
  %4585 = add i64 %4584, 8
  %4586 = add i64 %4307, 75
  store i64 %4586, i64* %3, align 8
  %4587 = inttoptr i64 %4585 to i64*
  %4588 = load i64, i64* %4587, align 8
  store i64 %4588, i64* %.pre243, align 8
  %4589 = add i64 %4307, 77
  store i64 %4589, i64* %3, align 8
  %4590 = inttoptr i64 %4588 to i32*
  %4591 = load i32, i32* %4590, align 4
  %4592 = zext i32 %4591 to i64
  store i64 %4592, i64* %RDX.i5984, align 8
  %4593 = add i64 %4534, -272
  %4594 = add i64 %4307, 83
  store i64 %4594, i64* %3, align 8
  %4595 = inttoptr i64 %4593 to i32*
  store i32 %4591, i32* %4595, align 4
  %.pre167 = load i64, i64* %3, align 8
  br label %block_.L_46f1e3

block_.L_46f1e3:                                  ; preds = %block_.L_46f190, %block_46f13e
  %4596 = phi i64 [ %.pre167, %block_.L_46f190 ], [ %4449, %block_46f13e ]
  %4597 = load i64, i64* %RBP.i, align 8
  %4598 = add i64 %4597, -272
  %4599 = add i64 %4596, 6
  store i64 %4599, i64* %3, align 8
  %4600 = inttoptr i64 %4598 to i32*
  %4601 = load i32, i32* %4600, align 4
  %4602 = zext i32 %4601 to i64
  store i64 2, i64* %RCX.i6189, align 8
  store i32 %4601, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  store i64 %4602, i64* %.pre243, align 8
  %4603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4604 = sext i32 %4601 to i64
  %4605 = lshr i64 %4604, 32
  store i64 %4605, i64* %4603, align 8
  %4606 = add i64 %4596, 28
  store i64 %4606, i64* %3, align 8
  %4607 = shl nuw i64 %4605, 32
  %4608 = or i64 %4607, %4602
  %4609 = sdiv i64 %4608, 2
  %4610 = shl i64 %4609, 32
  %4611 = ashr exact i64 %4610, 32
  %4612 = icmp eq i64 %4609, %4611
  br i1 %4612, label %4615, label %4613

; <label>:4613:                                   ; preds = %block_.L_46f1e3
  %4614 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4606, %struct.Memory* %MEMORY.11)
  %.pre168 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %.pre169 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4438

; <label>:4615:                                   ; preds = %block_.L_46f1e3
  %4616 = srem i64 %4608, 2
  %4617 = and i64 %4609, 4294967295
  store i64 %4617, i64* %.pre243, align 8
  %4618 = and i64 %4616, 4294967295
  store i64 %4618, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4619 = trunc i64 %4609 to i32
  br label %routine_idivl__ecx.exit4438

routine_idivl__ecx.exit4438:                      ; preds = %4615, %4613
  %4620 = phi i64 [ %.pre169, %4613 ], [ %4606, %4615 ]
  %4621 = phi i32 [ %.pre168, %4613 ], [ %4619, %4615 ]
  %4622 = phi %struct.Memory* [ %4614, %4613 ], [ %MEMORY.11, %4615 ]
  %4623 = add i64 %4620, 7
  store i64 %4623, i64* %3, align 8
  store i32 %4621, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  br label %block_.L_46f206

block_.L_46f206:                                  ; preds = %routine_idivl__ecx.exit4438, %block_.L_46f0bd
  %4624 = phi i64 [ %4179, %block_.L_46f0bd ], [ %4623, %routine_idivl__ecx.exit4438 ]
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.11, %block_.L_46f0bd ], [ %4622, %routine_idivl__ecx.exit4438 ]
  %4625 = add i64 %4624, 5
  store i64 %4625, i64* %3, align 8
  br label %block_.L_46f20b

block_.L_46f20b:                                  ; preds = %block_.L_46f206, %routine_idivl__ecx.exit4623
  %storemerge102 = phi i64 [ %4152, %routine_idivl__ecx.exit4623 ], [ %4625, %block_.L_46f206 ]
  %MEMORY.17 = phi %struct.Memory* [ %4150, %routine_idivl__ecx.exit4623 ], [ %MEMORY.16, %block_.L_46f206 ]
  %4626 = add i64 %storemerge102, 5
  store i64 %4626, i64* %3, align 8
  br label %block_.L_46f210

block_.L_46f210:                                  ; preds = %block_.L_46f20b, %routine_idivl__ecx.exit4808
  %storemerge101 = phi i64 [ %3683, %routine_idivl__ecx.exit4808 ], [ %4626, %block_.L_46f20b ]
  %MEMORY.18 = phi %struct.Memory* [ %3681, %routine_idivl__ecx.exit4808 ], [ %MEMORY.17, %block_.L_46f20b ]
  %4627 = add i64 %storemerge101, 5
  store i64 %4627, i64* %3, align 8
  br label %block_.L_46f215

block_.L_46f215:                                  ; preds = %block_.L_46f210, %routine_idivl__ecx.exit4993
  %storemerge90 = phi i64 [ %3211, %routine_idivl__ecx.exit4993 ], [ %4627, %block_.L_46f210 ]
  %MEMORY.19 = phi %struct.Memory* [ %3209, %routine_idivl__ecx.exit4993 ], [ %MEMORY.18, %block_.L_46f210 ]
  %4628 = add i64 %storemerge90, 5
  store i64 %4628, i64* %3, align 8
  br label %block_.L_46f21a

block_.L_46f21a:                                  ; preds = %block_.L_46ecac, %block_.L_46f215, %block_46ecbe
  %4629 = phi i64 [ %2720, %block_.L_46ecac ], [ %2736, %block_46ecbe ], [ %4628, %block_.L_46f215 ]
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.11, %block_.L_46ecac ], [ %MEMORY.11, %block_46ecbe ], [ %MEMORY.19, %block_.L_46f215 ]
  %4630 = load i32, i32* bitcast (%G_0x6f934c_type* @G_0x6f934c to i32*), align 8
  store i8 0, i8* %44, align 1
  %4631 = and i32 %4630, 255
  %4632 = tail call i32 @llvm.ctpop.i32(i32 %4631)
  %4633 = trunc i32 %4632 to i8
  %4634 = and i8 %4633, 1
  %4635 = xor i8 %4634, 1
  store i8 %4635, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4636 = icmp eq i32 %4630, 0
  %4637 = zext i1 %4636 to i8
  store i8 %4637, i8* %59, align 1
  %4638 = lshr i32 %4630, 31
  %4639 = trunc i32 %4638 to i8
  store i8 %4639, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v261 = select i1 %4636, i64 27, i64 14
  %4640 = add i64 %4629, %.v261
  store i64 %4640, i64* %3, align 8
  br i1 %4636, label %block_.L_46f235, label %block_46f228

block_46f228:                                     ; preds = %block_.L_46f21a
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %4641 = load i64, i64* %RBP.i, align 8
  %4642 = add i64 %4641, -276
  %4643 = add i64 %4640, 8
  store i64 %4643, i64* %3, align 8
  %4644 = inttoptr i64 %4642 to i32*
  store i32 0, i32* %4644, align 4
  %4645 = load i64, i64* %3, align 8
  %4646 = add i64 %4645, 18
  store i64 %4646, i64* %3, align 8
  br label %block_.L_46f242

block_.L_46f235:                                  ; preds = %block_.L_46f21a
  %4647 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %4648 = zext i32 %4647 to i64
  store i64 %4648, i64* %.pre243, align 8
  %4649 = load i64, i64* %RBP.i, align 8
  %4650 = add i64 %4649, -276
  %4651 = add i64 %4640, 13
  store i64 %4651, i64* %3, align 8
  %4652 = inttoptr i64 %4650 to i32*
  store i32 %4647, i32* %4652, align 4
  %.pre170 = load i64, i64* %3, align 8
  br label %block_.L_46f242

block_.L_46f242:                                  ; preds = %block_.L_46f235, %block_46f228
  %4653 = phi i64 [ %.pre170, %block_.L_46f235 ], [ %4646, %block_46f228 ]
  %4654 = load i64, i64* %RBP.i, align 8
  %4655 = add i64 %4654, -276
  %4656 = add i64 %4653, 6
  store i64 %4656, i64* %3, align 8
  %4657 = inttoptr i64 %4655 to i32*
  %4658 = load i32, i32* %4657, align 4
  %4659 = zext i32 %4658 to i64
  store i64 %4659, i64* %.pre243, align 8
  store i32 %4658, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %4660 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4660, i64* %RCX.i6189, align 8
  %4661 = add i64 %4653, 23
  store i64 %4661, i64* %3, align 8
  %4662 = inttoptr i64 %4660 to i32*
  %4663 = load i32, i32* %4662, align 4
  %4664 = zext i32 %4663 to i64
  store i64 %4664, i64* %.pre243, align 8
  %4665 = add i64 %4654, -42
  %4666 = add i64 %4653, 27
  store i64 %4666, i64* %3, align 8
  %4667 = inttoptr i64 %4665 to i16*
  %4668 = load i16, i16* %4667, align 2
  %4669 = sext i16 %4668 to i32
  %4670 = add nsw i32 %4669, 1
  %4671 = zext i32 %4670 to i64
  store i64 %4671, i64* %RDX.i5984, align 8
  %4672 = lshr i32 %4670, 31
  %4673 = sub i32 %4663, %4670
  %4674 = icmp ult i32 %4663, %4670
  %4675 = zext i1 %4674 to i8
  store i8 %4675, i8* %44, align 1
  %4676 = and i32 %4673, 255
  %4677 = tail call i32 @llvm.ctpop.i32(i32 %4676)
  %4678 = trunc i32 %4677 to i8
  %4679 = and i8 %4678, 1
  %4680 = xor i8 %4679, 1
  store i8 %4680, i8* %51, align 1
  %4681 = xor i32 %4670, %4663
  %4682 = xor i32 %4681, %4673
  %4683 = lshr i32 %4682, 4
  %4684 = trunc i32 %4683 to i8
  %4685 = and i8 %4684, 1
  store i8 %4685, i8* %56, align 1
  %4686 = icmp eq i32 %4673, 0
  %4687 = zext i1 %4686 to i8
  store i8 %4687, i8* %59, align 1
  %4688 = lshr i32 %4673, 31
  %4689 = trunc i32 %4688 to i8
  store i8 %4689, i8* %62, align 1
  %4690 = lshr i32 %4663, 31
  %4691 = xor i32 %4672, %4690
  %4692 = xor i32 %4688, %4690
  %4693 = add nuw nsw i32 %4692, %4691
  %4694 = icmp eq i32 %4693, 2
  %4695 = zext i1 %4694 to i8
  store i8 %4695, i8* %68, align 1
  %4696 = icmp ne i8 %4689, 0
  %4697 = xor i1 %4696, %4694
  %4698 = or i1 %4686, %4697
  %.v262 = select i1 %4698, i64 304, i64 38
  %4699 = add i64 %4653, %.v262
  store i64 %4699, i64* %3, align 8
  br i1 %4698, label %block_.L_46f242.block_.L_46f372_crit_edge, label %block_46f268

block_.L_46f242.block_.L_46f372_crit_edge:        ; preds = %block_.L_46f242
  %.pre171 = load i64, i64* %RBP.i, align 8
  br label %block_.L_46f372

block_46f268:                                     ; preds = %block_.L_46f242
  %4700 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %4700, i64* %.pre243, align 8
  store i64 %4660, i64* %RCX.i6189, align 8
  %4701 = add i64 %4660, 152
  %4702 = add i64 %4699, 22
  store i64 %4702, i64* %3, align 8
  %4703 = inttoptr i64 %4701 to i32*
  %4704 = load i32, i32* %4703, align 4
  %4705 = sext i32 %4704 to i64
  %4706 = ashr i64 %4705, 1
  %4707 = lshr i64 %4706, 1
  %4708 = trunc i64 %4706 to i8
  %4709 = and i8 %4708, 1
  %4710 = trunc i64 %4707 to i32
  %4711 = and i64 %4707, 4294967295
  store i64 %4711, i64* %RDX.i5984, align 8
  store i8 %4709, i8* %44, align 1
  %4712 = and i32 %4710, 255
  %4713 = tail call i32 @llvm.ctpop.i32(i32 %4712)
  %4714 = trunc i32 %4713 to i8
  %4715 = and i8 %4714, 1
  %4716 = xor i8 %4715, 1
  store i8 %4716, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4717 = icmp eq i32 %4710, 0
  %4718 = zext i1 %4717 to i8
  store i8 %4718, i8* %59, align 1
  %4719 = lshr i64 %4706, 32
  %4720 = trunc i64 %4719 to i8
  %4721 = and i8 %4720, 1
  store i8 %4721, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4722 = load i64, i64* %RBP.i, align 8
  %4723 = add i64 %4722, -100
  %4724 = add i64 %4699, 28
  store i64 %4724, i64* %3, align 8
  %4725 = trunc i64 %4707 to i32
  %4726 = inttoptr i64 %4723 to i32*
  %4727 = load i32, i32* %4726, align 4
  %4728 = add i32 %4727, %4725
  %4729 = zext i32 %4728 to i64
  store i64 %4729, i64* %RDX.i5984, align 8
  %4730 = icmp ult i32 %4728, %4725
  %4731 = icmp ult i32 %4728, %4727
  %4732 = or i1 %4730, %4731
  %4733 = zext i1 %4732 to i8
  store i8 %4733, i8* %44, align 1
  %4734 = and i32 %4728, 255
  %4735 = tail call i32 @llvm.ctpop.i32(i32 %4734)
  %4736 = trunc i32 %4735 to i8
  %4737 = and i8 %4736, 1
  %4738 = xor i8 %4737, 1
  store i8 %4738, i8* %51, align 1
  %4739 = xor i32 %4727, %4725
  %4740 = xor i32 %4739, %4728
  %4741 = lshr i32 %4740, 4
  %4742 = trunc i32 %4741 to i8
  %4743 = and i8 %4742, 1
  store i8 %4743, i8* %56, align 1
  %4744 = icmp eq i32 %4728, 0
  %4745 = zext i1 %4744 to i8
  store i8 %4745, i8* %59, align 1
  %4746 = lshr i32 %4728, 31
  %4747 = trunc i32 %4746 to i8
  store i8 %4747, i8* %62, align 1
  %4748 = lshr i64 %4706, 32
  %4749 = trunc i64 %4748 to i32
  %4750 = and i32 %4749, 1
  %4751 = lshr i32 %4727, 31
  %4752 = xor i32 %4746, %4750
  %4753 = xor i32 %4746, %4751
  %4754 = add nuw nsw i32 %4752, %4753
  %4755 = icmp eq i32 %4754, 2
  %4756 = zext i1 %4755 to i8
  store i8 %4756, i8* %68, align 1
  %4757 = sext i32 %4728 to i64
  store i64 %4757, i64* %RCX.i6189, align 8
  %4758 = shl nsw i64 %4757, 3
  %4759 = add i64 %4700, %4758
  %4760 = add i64 %4699, 35
  store i64 %4760, i64* %3, align 8
  %4761 = inttoptr i64 %4759 to i64*
  %4762 = load i64, i64* %4761, align 8
  store i64 %4762, i64* %.pre243, align 8
  store i64 %4660, i64* %RCX.i6189, align 8
  %4763 = add i64 %4660, 156
  %4764 = add i64 %4699, 49
  store i64 %4764, i64* %3, align 8
  %4765 = inttoptr i64 %4763 to i32*
  %4766 = load i32, i32* %4765, align 4
  %4767 = sext i32 %4766 to i64
  %4768 = ashr i64 %4767, 1
  %4769 = lshr i64 %4768, 1
  %4770 = trunc i64 %4768 to i8
  %4771 = and i8 %4770, 1
  %4772 = trunc i64 %4769 to i32
  %4773 = and i64 %4769, 4294967295
  store i64 %4773, i64* %RDX.i5984, align 8
  store i8 %4771, i8* %44, align 1
  %4774 = and i32 %4772, 255
  %4775 = tail call i32 @llvm.ctpop.i32(i32 %4774)
  %4776 = trunc i32 %4775 to i8
  %4777 = and i8 %4776, 1
  %4778 = xor i8 %4777, 1
  store i8 %4778, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4779 = icmp eq i32 %4772, 0
  %4780 = zext i1 %4779 to i8
  store i8 %4780, i8* %59, align 1
  %4781 = lshr i64 %4768, 32
  %4782 = trunc i64 %4781 to i8
  %4783 = and i8 %4782, 1
  store i8 %4783, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4784 = add i64 %4722, -104
  %4785 = add i64 %4699, 55
  store i64 %4785, i64* %3, align 8
  %4786 = trunc i64 %4769 to i32
  %4787 = inttoptr i64 %4784 to i32*
  %4788 = load i32, i32* %4787, align 4
  %4789 = add i32 %4788, %4786
  %4790 = zext i32 %4789 to i64
  store i64 %4790, i64* %RDX.i5984, align 8
  %4791 = icmp ult i32 %4789, %4786
  %4792 = icmp ult i32 %4789, %4788
  %4793 = or i1 %4791, %4792
  %4794 = zext i1 %4793 to i8
  store i8 %4794, i8* %44, align 1
  %4795 = and i32 %4789, 255
  %4796 = tail call i32 @llvm.ctpop.i32(i32 %4795)
  %4797 = trunc i32 %4796 to i8
  %4798 = and i8 %4797, 1
  %4799 = xor i8 %4798, 1
  store i8 %4799, i8* %51, align 1
  %4800 = xor i32 %4788, %4786
  %4801 = xor i32 %4800, %4789
  %4802 = lshr i32 %4801, 4
  %4803 = trunc i32 %4802 to i8
  %4804 = and i8 %4803, 1
  store i8 %4804, i8* %56, align 1
  %4805 = icmp eq i32 %4789, 0
  %4806 = zext i1 %4805 to i8
  store i8 %4806, i8* %59, align 1
  %4807 = lshr i32 %4789, 31
  %4808 = trunc i32 %4807 to i8
  store i8 %4808, i8* %62, align 1
  %4809 = lshr i64 %4768, 32
  %4810 = trunc i64 %4809 to i32
  %4811 = and i32 %4810, 1
  %4812 = lshr i32 %4788, 31
  %4813 = xor i32 %4807, %4811
  %4814 = xor i32 %4807, %4812
  %4815 = add nuw nsw i32 %4813, %4814
  %4816 = icmp eq i32 %4815, 2
  %4817 = zext i1 %4816 to i8
  store i8 %4817, i8* %68, align 1
  %4818 = sext i32 %4789 to i64
  store i64 %4818, i64* %RCX.i6189, align 8
  %4819 = shl nsw i64 %4818, 3
  %4820 = add i64 %4762, %4819
  %4821 = add i64 %4699, 62
  store i64 %4821, i64* %3, align 8
  %4822 = inttoptr i64 %4820 to i64*
  %4823 = load i64, i64* %4822, align 8
  store i64 %4823, i64* %.pre243, align 8
  %4824 = load i64, i64* %RBP.i, align 8
  %4825 = add i64 %4824, -42
  %4826 = add i64 %4699, 67
  store i64 %4826, i64* %3, align 8
  %4827 = inttoptr i64 %4825 to i16*
  %4828 = load i16, i16* %4827, align 2
  %4829 = sext i16 %4828 to i64
  store i64 %4829, i64* %RCX.i6189, align 8
  %4830 = shl nsw i64 %4829, 3
  %4831 = add i64 %4830, %4823
  %4832 = add i64 %4699, 71
  store i64 %4832, i64* %3, align 8
  %4833 = inttoptr i64 %4831 to i64*
  %4834 = load i64, i64* %4833, align 8
  store i64 %4834, i64* %.pre243, align 8
  %4835 = add i64 %4824, -60
  %4836 = add i64 %4699, 75
  store i64 %4836, i64* %3, align 8
  %4837 = inttoptr i64 %4835 to i32*
  %4838 = load i32, i32* %4837, align 4
  %4839 = sext i32 %4838 to i64
  store i64 %4839, i64* %RCX.i6189, align 8
  %4840 = shl nsw i64 %4839, 3
  %4841 = add i64 %4840, %4834
  %4842 = add i64 %4699, 79
  store i64 %4842, i64* %3, align 8
  %4843 = inttoptr i64 %4841 to i64*
  %4844 = load i64, i64* %4843, align 8
  store i64 %4844, i64* %.pre243, align 8
  %4845 = add i64 %4699, 81
  store i64 %4845, i64* %3, align 8
  %4846 = inttoptr i64 %4844 to i32*
  %4847 = load i32, i32* %4846, align 4
  %4848 = zext i32 %4847 to i64
  store i64 %4848, i64* %RDX.i5984, align 8
  store i32 %4847, i32* bitcast (%G_0x6d32c4_type* @G_0x6d32c4 to i32*), align 8
  %4849 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %4849, i64* %.pre243, align 8
  %4850 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4850, i64* %RCX.i6189, align 8
  %4851 = add i64 %4850, 152
  %4852 = add i64 %4699, 110
  store i64 %4852, i64* %3, align 8
  %4853 = inttoptr i64 %4851 to i32*
  %4854 = load i32, i32* %4853, align 4
  %4855 = sext i32 %4854 to i64
  %4856 = ashr i64 %4855, 1
  %4857 = lshr i64 %4856, 1
  %4858 = trunc i64 %4856 to i8
  %4859 = and i8 %4858, 1
  %4860 = trunc i64 %4857 to i32
  %4861 = and i64 %4857, 4294967295
  store i64 %4861, i64* %RDX.i5984, align 8
  store i8 %4859, i8* %44, align 1
  %4862 = and i32 %4860, 255
  %4863 = tail call i32 @llvm.ctpop.i32(i32 %4862)
  %4864 = trunc i32 %4863 to i8
  %4865 = and i8 %4864, 1
  %4866 = xor i8 %4865, 1
  store i8 %4866, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4867 = icmp eq i32 %4860, 0
  %4868 = zext i1 %4867 to i8
  store i8 %4868, i8* %59, align 1
  %4869 = lshr i64 %4856, 32
  %4870 = trunc i64 %4869 to i8
  %4871 = and i8 %4870, 1
  store i8 %4871, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4872 = add i64 %4824, -100
  %4873 = add i64 %4699, 116
  store i64 %4873, i64* %3, align 8
  %4874 = trunc i64 %4857 to i32
  %4875 = inttoptr i64 %4872 to i32*
  %4876 = load i32, i32* %4875, align 4
  %4877 = add i32 %4876, %4874
  %4878 = zext i32 %4877 to i64
  store i64 %4878, i64* %RDX.i5984, align 8
  %4879 = icmp ult i32 %4877, %4874
  %4880 = icmp ult i32 %4877, %4876
  %4881 = or i1 %4879, %4880
  %4882 = zext i1 %4881 to i8
  store i8 %4882, i8* %44, align 1
  %4883 = and i32 %4877, 255
  %4884 = tail call i32 @llvm.ctpop.i32(i32 %4883)
  %4885 = trunc i32 %4884 to i8
  %4886 = and i8 %4885, 1
  %4887 = xor i8 %4886, 1
  store i8 %4887, i8* %51, align 1
  %4888 = xor i32 %4876, %4874
  %4889 = xor i32 %4888, %4877
  %4890 = lshr i32 %4889, 4
  %4891 = trunc i32 %4890 to i8
  %4892 = and i8 %4891, 1
  store i8 %4892, i8* %56, align 1
  %4893 = icmp eq i32 %4877, 0
  %4894 = zext i1 %4893 to i8
  store i8 %4894, i8* %59, align 1
  %4895 = lshr i32 %4877, 31
  %4896 = trunc i32 %4895 to i8
  store i8 %4896, i8* %62, align 1
  %4897 = lshr i64 %4856, 32
  %4898 = trunc i64 %4897 to i32
  %4899 = and i32 %4898, 1
  %4900 = lshr i32 %4876, 31
  %4901 = xor i32 %4895, %4899
  %4902 = xor i32 %4895, %4900
  %4903 = add nuw nsw i32 %4901, %4902
  %4904 = icmp eq i32 %4903, 2
  %4905 = zext i1 %4904 to i8
  store i8 %4905, i8* %68, align 1
  %4906 = sext i32 %4877 to i64
  store i64 %4906, i64* %RCX.i6189, align 8
  %4907 = shl nsw i64 %4906, 3
  %4908 = add i64 %4849, %4907
  %4909 = add i64 %4699, 123
  store i64 %4909, i64* %3, align 8
  %4910 = inttoptr i64 %4908 to i64*
  %4911 = load i64, i64* %4910, align 8
  store i64 %4911, i64* %.pre243, align 8
  store i64 %4850, i64* %RCX.i6189, align 8
  %4912 = add i64 %4850, 156
  %4913 = add i64 %4699, 137
  store i64 %4913, i64* %3, align 8
  %4914 = inttoptr i64 %4912 to i32*
  %4915 = load i32, i32* %4914, align 4
  %4916 = sext i32 %4915 to i64
  %4917 = ashr i64 %4916, 1
  %4918 = lshr i64 %4917, 1
  %4919 = trunc i64 %4917 to i8
  %4920 = and i8 %4919, 1
  %4921 = trunc i64 %4918 to i32
  %4922 = and i64 %4918, 4294967295
  store i64 %4922, i64* %RDX.i5984, align 8
  store i8 %4920, i8* %44, align 1
  %4923 = and i32 %4921, 255
  %4924 = tail call i32 @llvm.ctpop.i32(i32 %4923)
  %4925 = trunc i32 %4924 to i8
  %4926 = and i8 %4925, 1
  %4927 = xor i8 %4926, 1
  store i8 %4927, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %4928 = icmp eq i32 %4921, 0
  %4929 = zext i1 %4928 to i8
  store i8 %4929, i8* %59, align 1
  %4930 = lshr i64 %4917, 32
  %4931 = trunc i64 %4930 to i8
  %4932 = and i8 %4931, 1
  store i8 %4932, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %4933 = load i64, i64* %RBP.i, align 8
  %4934 = add i64 %4933, -104
  %4935 = add i64 %4699, 143
  store i64 %4935, i64* %3, align 8
  %4936 = trunc i64 %4918 to i32
  %4937 = inttoptr i64 %4934 to i32*
  %4938 = load i32, i32* %4937, align 4
  %4939 = add i32 %4938, %4936
  %4940 = zext i32 %4939 to i64
  store i64 %4940, i64* %RDX.i5984, align 8
  %4941 = icmp ult i32 %4939, %4936
  %4942 = icmp ult i32 %4939, %4938
  %4943 = or i1 %4941, %4942
  %4944 = zext i1 %4943 to i8
  store i8 %4944, i8* %44, align 1
  %4945 = and i32 %4939, 255
  %4946 = tail call i32 @llvm.ctpop.i32(i32 %4945)
  %4947 = trunc i32 %4946 to i8
  %4948 = and i8 %4947, 1
  %4949 = xor i8 %4948, 1
  store i8 %4949, i8* %51, align 1
  %4950 = xor i32 %4938, %4936
  %4951 = xor i32 %4950, %4939
  %4952 = lshr i32 %4951, 4
  %4953 = trunc i32 %4952 to i8
  %4954 = and i8 %4953, 1
  store i8 %4954, i8* %56, align 1
  %4955 = icmp eq i32 %4939, 0
  %4956 = zext i1 %4955 to i8
  store i8 %4956, i8* %59, align 1
  %4957 = lshr i32 %4939, 31
  %4958 = trunc i32 %4957 to i8
  store i8 %4958, i8* %62, align 1
  %4959 = lshr i64 %4917, 32
  %4960 = trunc i64 %4959 to i32
  %4961 = and i32 %4960, 1
  %4962 = lshr i32 %4938, 31
  %4963 = xor i32 %4957, %4961
  %4964 = xor i32 %4957, %4962
  %4965 = add nuw nsw i32 %4963, %4964
  %4966 = icmp eq i32 %4965, 2
  %4967 = zext i1 %4966 to i8
  store i8 %4967, i8* %68, align 1
  %4968 = sext i32 %4939 to i64
  store i64 %4968, i64* %RCX.i6189, align 8
  %4969 = shl nsw i64 %4968, 3
  %4970 = add i64 %4911, %4969
  %4971 = add i64 %4699, 150
  store i64 %4971, i64* %3, align 8
  %4972 = inttoptr i64 %4970 to i64*
  %4973 = load i64, i64* %4972, align 8
  store i64 %4973, i64* %.pre243, align 8
  %4974 = add i64 %4933, -42
  %4975 = add i64 %4699, 155
  store i64 %4975, i64* %3, align 8
  %4976 = inttoptr i64 %4974 to i16*
  %4977 = load i16, i16* %4976, align 2
  %4978 = sext i16 %4977 to i64
  store i64 %4978, i64* %RCX.i6189, align 8
  %4979 = shl nsw i64 %4978, 3
  %4980 = add i64 %4979, %4973
  %4981 = add i64 %4699, 159
  store i64 %4981, i64* %3, align 8
  %4982 = inttoptr i64 %4980 to i64*
  %4983 = load i64, i64* %4982, align 8
  store i64 %4983, i64* %.pre243, align 8
  %4984 = add i64 %4933, -60
  %4985 = add i64 %4699, 163
  store i64 %4985, i64* %3, align 8
  %4986 = inttoptr i64 %4984 to i32*
  %4987 = load i32, i32* %4986, align 4
  %4988 = sext i32 %4987 to i64
  store i64 %4988, i64* %RCX.i6189, align 8
  %4989 = shl nsw i64 %4988, 3
  %4990 = add i64 %4989, %4983
  %4991 = add i64 %4699, 167
  store i64 %4991, i64* %3, align 8
  %4992 = inttoptr i64 %4990 to i64*
  %4993 = load i64, i64* %4992, align 8
  store i64 %4993, i64* %.pre243, align 8
  %4994 = add i64 %4993, 4
  %4995 = add i64 %4699, 170
  store i64 %4995, i64* %3, align 8
  %4996 = inttoptr i64 %4994 to i32*
  %4997 = load i32, i32* %4996, align 4
  %4998 = zext i32 %4997 to i64
  store i64 %4998, i64* %RDX.i5984, align 8
  store i32 %4997, i32* bitcast (%G_0x70fd54_type* @G_0x70fd54 to i32*), align 8
  %4999 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %4999, i64* %.pre243, align 8
  %5000 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5000, i64* %RCX.i6189, align 8
  %5001 = add i64 %5000, 152
  %5002 = add i64 %4699, 199
  store i64 %5002, i64* %3, align 8
  %5003 = inttoptr i64 %5001 to i32*
  %5004 = load i32, i32* %5003, align 4
  %5005 = sext i32 %5004 to i64
  %5006 = ashr i64 %5005, 1
  %5007 = lshr i64 %5006, 1
  %5008 = trunc i64 %5006 to i8
  %5009 = and i8 %5008, 1
  %5010 = trunc i64 %5007 to i32
  %5011 = and i64 %5007, 4294967295
  store i64 %5011, i64* %RDX.i5984, align 8
  store i8 %5009, i8* %44, align 1
  %5012 = and i32 %5010, 255
  %5013 = tail call i32 @llvm.ctpop.i32(i32 %5012)
  %5014 = trunc i32 %5013 to i8
  %5015 = and i8 %5014, 1
  %5016 = xor i8 %5015, 1
  store i8 %5016, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %5017 = icmp eq i32 %5010, 0
  %5018 = zext i1 %5017 to i8
  store i8 %5018, i8* %59, align 1
  %5019 = lshr i64 %5006, 32
  %5020 = trunc i64 %5019 to i8
  %5021 = and i8 %5020, 1
  store i8 %5021, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5022 = load i64, i64* %RBP.i, align 8
  %5023 = add i64 %5022, -100
  %5024 = add i64 %4699, 205
  store i64 %5024, i64* %3, align 8
  %5025 = trunc i64 %5007 to i32
  %5026 = inttoptr i64 %5023 to i32*
  %5027 = load i32, i32* %5026, align 4
  %5028 = add i32 %5027, %5025
  %5029 = zext i32 %5028 to i64
  store i64 %5029, i64* %RDX.i5984, align 8
  %5030 = icmp ult i32 %5028, %5025
  %5031 = icmp ult i32 %5028, %5027
  %5032 = or i1 %5030, %5031
  %5033 = zext i1 %5032 to i8
  store i8 %5033, i8* %44, align 1
  %5034 = and i32 %5028, 255
  %5035 = tail call i32 @llvm.ctpop.i32(i32 %5034)
  %5036 = trunc i32 %5035 to i8
  %5037 = and i8 %5036, 1
  %5038 = xor i8 %5037, 1
  store i8 %5038, i8* %51, align 1
  %5039 = xor i32 %5027, %5025
  %5040 = xor i32 %5039, %5028
  %5041 = lshr i32 %5040, 4
  %5042 = trunc i32 %5041 to i8
  %5043 = and i8 %5042, 1
  store i8 %5043, i8* %56, align 1
  %5044 = icmp eq i32 %5028, 0
  %5045 = zext i1 %5044 to i8
  store i8 %5045, i8* %59, align 1
  %5046 = lshr i32 %5028, 31
  %5047 = trunc i32 %5046 to i8
  store i8 %5047, i8* %62, align 1
  %5048 = lshr i64 %5006, 32
  %5049 = trunc i64 %5048 to i32
  %5050 = and i32 %5049, 1
  %5051 = lshr i32 %5027, 31
  %5052 = xor i32 %5046, %5050
  %5053 = xor i32 %5046, %5051
  %5054 = add nuw nsw i32 %5052, %5053
  %5055 = icmp eq i32 %5054, 2
  %5056 = zext i1 %5055 to i8
  store i8 %5056, i8* %68, align 1
  %5057 = sext i32 %5028 to i64
  store i64 %5057, i64* %RCX.i6189, align 8
  %5058 = shl nsw i64 %5057, 3
  %5059 = add i64 %4999, %5058
  %5060 = add i64 %4699, 212
  store i64 %5060, i64* %3, align 8
  %5061 = inttoptr i64 %5059 to i64*
  %5062 = load i64, i64* %5061, align 8
  store i64 %5062, i64* %.pre243, align 8
  store i64 %5000, i64* %RCX.i6189, align 8
  %5063 = add i64 %5000, 156
  %5064 = add i64 %4699, 226
  store i64 %5064, i64* %3, align 8
  %5065 = inttoptr i64 %5063 to i32*
  %5066 = load i32, i32* %5065, align 4
  %5067 = sext i32 %5066 to i64
  %5068 = ashr i64 %5067, 1
  %5069 = lshr i64 %5068, 1
  %5070 = trunc i64 %5068 to i8
  %5071 = and i8 %5070, 1
  %5072 = trunc i64 %5069 to i32
  %5073 = and i64 %5069, 4294967295
  store i64 %5073, i64* %RDX.i5984, align 8
  store i8 %5071, i8* %44, align 1
  %5074 = and i32 %5072, 255
  %5075 = tail call i32 @llvm.ctpop.i32(i32 %5074)
  %5076 = trunc i32 %5075 to i8
  %5077 = and i8 %5076, 1
  %5078 = xor i8 %5077, 1
  store i8 %5078, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %5079 = icmp eq i32 %5072, 0
  %5080 = zext i1 %5079 to i8
  store i8 %5080, i8* %59, align 1
  %5081 = lshr i64 %5068, 32
  %5082 = trunc i64 %5081 to i8
  %5083 = and i8 %5082, 1
  store i8 %5083, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5084 = add i64 %5022, -104
  %5085 = add i64 %4699, 232
  store i64 %5085, i64* %3, align 8
  %5086 = trunc i64 %5069 to i32
  %5087 = inttoptr i64 %5084 to i32*
  %5088 = load i32, i32* %5087, align 4
  %5089 = add i32 %5088, %5086
  %5090 = zext i32 %5089 to i64
  store i64 %5090, i64* %RDX.i5984, align 8
  %5091 = icmp ult i32 %5089, %5086
  %5092 = icmp ult i32 %5089, %5088
  %5093 = or i1 %5091, %5092
  %5094 = zext i1 %5093 to i8
  store i8 %5094, i8* %44, align 1
  %5095 = and i32 %5089, 255
  %5096 = tail call i32 @llvm.ctpop.i32(i32 %5095)
  %5097 = trunc i32 %5096 to i8
  %5098 = and i8 %5097, 1
  %5099 = xor i8 %5098, 1
  store i8 %5099, i8* %51, align 1
  %5100 = xor i32 %5088, %5086
  %5101 = xor i32 %5100, %5089
  %5102 = lshr i32 %5101, 4
  %5103 = trunc i32 %5102 to i8
  %5104 = and i8 %5103, 1
  store i8 %5104, i8* %56, align 1
  %5105 = icmp eq i32 %5089, 0
  %5106 = zext i1 %5105 to i8
  store i8 %5106, i8* %59, align 1
  %5107 = lshr i32 %5089, 31
  %5108 = trunc i32 %5107 to i8
  store i8 %5108, i8* %62, align 1
  %5109 = lshr i64 %5068, 32
  %5110 = trunc i64 %5109 to i32
  %5111 = and i32 %5110, 1
  %5112 = lshr i32 %5088, 31
  %5113 = xor i32 %5107, %5111
  %5114 = xor i32 %5107, %5112
  %5115 = add nuw nsw i32 %5113, %5114
  %5116 = icmp eq i32 %5115, 2
  %5117 = zext i1 %5116 to i8
  store i8 %5117, i8* %68, align 1
  %5118 = sext i32 %5089 to i64
  store i64 %5118, i64* %RCX.i6189, align 8
  %5119 = shl nsw i64 %5118, 3
  %5120 = add i64 %5062, %5119
  %5121 = add i64 %4699, 239
  store i64 %5121, i64* %3, align 8
  %5122 = inttoptr i64 %5120 to i64*
  %5123 = load i64, i64* %5122, align 8
  store i64 %5123, i64* %.pre243, align 8
  %5124 = load i64, i64* %RBP.i, align 8
  %5125 = add i64 %5124, -42
  %5126 = add i64 %4699, 244
  store i64 %5126, i64* %3, align 8
  %5127 = inttoptr i64 %5125 to i16*
  %5128 = load i16, i16* %5127, align 2
  %5129 = sext i16 %5128 to i64
  store i64 %5129, i64* %RCX.i6189, align 8
  %5130 = shl nsw i64 %5129, 3
  %5131 = add i64 %5130, %5123
  %5132 = add i64 %4699, 248
  store i64 %5132, i64* %3, align 8
  %5133 = inttoptr i64 %5131 to i64*
  %5134 = load i64, i64* %5133, align 8
  store i64 %5134, i64* %.pre243, align 8
  %5135 = add i64 %5124, -60
  %5136 = add i64 %4699, 252
  store i64 %5136, i64* %3, align 8
  %5137 = inttoptr i64 %5135 to i32*
  %5138 = load i32, i32* %5137, align 4
  %5139 = sext i32 %5138 to i64
  store i64 %5139, i64* %RCX.i6189, align 8
  %5140 = shl nsw i64 %5139, 3
  %5141 = add i64 %5140, %5134
  %5142 = add i64 %4699, 256
  store i64 %5142, i64* %3, align 8
  %5143 = inttoptr i64 %5141 to i64*
  %5144 = load i64, i64* %5143, align 8
  store i64 %5144, i64* %.pre243, align 8
  %5145 = add i64 %5144, 8
  %5146 = add i64 %4699, 259
  store i64 %5146, i64* %3, align 8
  %5147 = inttoptr i64 %5145 to i32*
  %5148 = load i32, i32* %5147, align 4
  %5149 = zext i32 %5148 to i64
  store i64 %5149, i64* %RDX.i5984, align 8
  %5150 = add i64 %4699, 266
  store i64 %5150, i64* %3, align 8
  store i32 %5148, i32* bitcast (%G_0x70fd58_type* @G_0x70fd58 to i32*), align 8
  br label %block_.L_46f372

block_.L_46f372:                                  ; preds = %block_.L_46f242.block_.L_46f372_crit_edge, %block_46f268
  %5151 = phi i64 [ %4699, %block_.L_46f242.block_.L_46f372_crit_edge ], [ %5150, %block_46f268 ]
  %5152 = phi i64 [ %.pre171, %block_.L_46f242.block_.L_46f372_crit_edge ], [ %5124, %block_46f268 ]
  %5153 = add i64 %5152, -48
  %5154 = add i64 %5151, 4
  store i64 %5154, i64* %3, align 8
  %5155 = inttoptr i64 %5153 to i32*
  %5156 = load i32, i32* %5155, align 4
  %5157 = add i32 %5156, -1
  %5158 = icmp eq i32 %5156, 0
  %5159 = zext i1 %5158 to i8
  store i8 %5159, i8* %44, align 1
  %5160 = and i32 %5157, 255
  %5161 = tail call i32 @llvm.ctpop.i32(i32 %5160)
  %5162 = trunc i32 %5161 to i8
  %5163 = and i8 %5162, 1
  %5164 = xor i8 %5163, 1
  store i8 %5164, i8* %51, align 1
  %5165 = xor i32 %5157, %5156
  %5166 = lshr i32 %5165, 4
  %5167 = trunc i32 %5166 to i8
  %5168 = and i8 %5167, 1
  store i8 %5168, i8* %56, align 1
  %5169 = icmp eq i32 %5157, 0
  %5170 = zext i1 %5169 to i8
  store i8 %5170, i8* %59, align 1
  %5171 = lshr i32 %5157, 31
  %5172 = trunc i32 %5171 to i8
  store i8 %5172, i8* %62, align 1
  %5173 = lshr i32 %5156, 31
  %5174 = xor i32 %5171, %5173
  %5175 = add nuw nsw i32 %5174, %5173
  %5176 = icmp eq i32 %5175, 2
  %5177 = zext i1 %5176 to i8
  store i8 %5177, i8* %68, align 1
  %.v263 = select i1 %5169, i64 10, i64 559
  %5178 = add i64 %5151, %.v263
  store i64 %5178, i64* %3, align 8
  br i1 %5169, label %block_46f37c, label %block_.L_46f5a1

block_46f37c:                                     ; preds = %block_.L_46f372
  %5179 = load i32, i32* bitcast (%G_0x722ca8_type* @G_0x722ca8 to i32*), align 8
  %5180 = zext i32 %5179 to i64
  store i64 %5180, i64* %.pre243, align 8
  %5181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5182 = sext i32 %5179 to i64
  %5183 = lshr i64 %5182, 32
  store i64 %5183, i64* %5181, align 8
  %5184 = add i64 %5152, -184
  %5185 = add i64 %5178, 14
  store i64 %5185, i64* %3, align 8
  %5186 = inttoptr i64 %5184 to i32*
  %5187 = load i32, i32* %5186, align 4
  %5188 = sext i32 %5187 to i64
  %5189 = shl nuw i64 %5183, 32
  %5190 = or i64 %5189, %5180
  %5191 = sdiv i64 %5190, %5188
  %5192 = shl i64 %5191, 32
  %5193 = ashr exact i64 %5192, 32
  %5194 = icmp eq i64 %5191, %5193
  br i1 %5194, label %5197, label %5195

; <label>:5195:                                   ; preds = %block_46f37c
  %5196 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5185, %struct.Memory* %MEMORY.20)
  %.pre172 = load i32, i32* %EDX.i5379, align 4
  %.pre173 = load i64, i64* %3, align 8
  br label %routine_idivl_MINUS0xb8__rbp_.exit

; <label>:5197:                                   ; preds = %block_46f37c
  %5198 = srem i64 %5190, %5188
  %5199 = and i64 %5191, 4294967295
  store i64 %5199, i64* %.pre243, align 8
  %5200 = and i64 %5198, 4294967295
  store i64 %5200, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5201 = trunc i64 %5198 to i32
  br label %routine_idivl_MINUS0xb8__rbp_.exit

routine_idivl_MINUS0xb8__rbp_.exit:               ; preds = %5197, %5195
  %5202 = phi i64 [ %.pre173, %5195 ], [ %5185, %5197 ]
  %5203 = phi i32 [ %.pre172, %5195 ], [ %5201, %5197 ]
  %5204 = phi %struct.Memory* [ %5196, %5195 ], [ %MEMORY.20, %5197 ]
  %5205 = add i32 %5203, -1
  %5206 = icmp eq i32 %5203, 0
  %5207 = zext i1 %5206 to i8
  store i8 %5207, i8* %44, align 1
  %5208 = and i32 %5205, 255
  %5209 = tail call i32 @llvm.ctpop.i32(i32 %5208)
  %5210 = trunc i32 %5209 to i8
  %5211 = and i8 %5210, 1
  %5212 = xor i8 %5211, 1
  store i8 %5212, i8* %51, align 1
  %5213 = xor i32 %5205, %5203
  %5214 = lshr i32 %5213, 4
  %5215 = trunc i32 %5214 to i8
  %5216 = and i8 %5215, 1
  store i8 %5216, i8* %56, align 1
  %5217 = icmp eq i32 %5205, 0
  %5218 = zext i1 %5217 to i8
  store i8 %5218, i8* %59, align 1
  %5219 = lshr i32 %5205, 31
  %5220 = trunc i32 %5219 to i8
  store i8 %5220, i8* %62, align 1
  %5221 = lshr i32 %5203, 31
  %5222 = xor i32 %5219, %5221
  %5223 = add nuw nsw i32 %5222, %5221
  %5224 = icmp eq i32 %5223, 2
  %5225 = zext i1 %5224 to i8
  store i8 %5225, i8* %68, align 1
  %5226 = icmp ne i8 %5220, 0
  %5227 = xor i1 %5226, %5224
  %5228 = or i1 %5217, %5227
  %.v315 = select i1 %5228, i64 535, i64 9
  %5229 = add i64 %5202, %.v315
  store i64 %5229, i64* %3, align 8
  br i1 %5228, label %block_.L_46f5a1, label %block_46f393

block_46f393:                                     ; preds = %routine_idivl_MINUS0xb8__rbp_.exit
  %5230 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %5230, i64* %.pre243, align 8
  %5231 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5231, i64* %RCX.i6189, align 8
  %5232 = add i64 %5231, 152
  %5233 = add i64 %5229, 22
  store i64 %5233, i64* %3, align 8
  %5234 = inttoptr i64 %5232 to i32*
  %5235 = load i32, i32* %5234, align 4
  %5236 = sext i32 %5235 to i64
  %5237 = ashr i64 %5236, 1
  %5238 = lshr i64 %5237, 1
  %5239 = trunc i64 %5237 to i8
  %5240 = and i8 %5239, 1
  %5241 = trunc i64 %5238 to i32
  %5242 = and i64 %5238, 4294967295
  store i64 %5242, i64* %RDX.i5984, align 8
  store i8 %5240, i8* %44, align 1
  %5243 = and i32 %5241, 255
  %5244 = tail call i32 @llvm.ctpop.i32(i32 %5243)
  %5245 = trunc i32 %5244 to i8
  %5246 = and i8 %5245, 1
  %5247 = xor i8 %5246, 1
  store i8 %5247, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %5248 = icmp eq i32 %5241, 0
  %5249 = zext i1 %5248 to i8
  store i8 %5249, i8* %59, align 1
  %5250 = lshr i64 %5237, 32
  %5251 = trunc i64 %5250 to i8
  %5252 = and i8 %5251, 1
  store i8 %5252, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5253 = load i64, i64* %RBP.i, align 8
  %5254 = add i64 %5253, -100
  %5255 = add i64 %5229, 28
  store i64 %5255, i64* %3, align 8
  %5256 = trunc i64 %5238 to i32
  %5257 = inttoptr i64 %5254 to i32*
  %5258 = load i32, i32* %5257, align 4
  %5259 = add i32 %5258, %5256
  %5260 = zext i32 %5259 to i64
  store i64 %5260, i64* %RDX.i5984, align 8
  %5261 = icmp ult i32 %5259, %5256
  %5262 = icmp ult i32 %5259, %5258
  %5263 = or i1 %5261, %5262
  %5264 = zext i1 %5263 to i8
  store i8 %5264, i8* %44, align 1
  %5265 = and i32 %5259, 255
  %5266 = tail call i32 @llvm.ctpop.i32(i32 %5265)
  %5267 = trunc i32 %5266 to i8
  %5268 = and i8 %5267, 1
  %5269 = xor i8 %5268, 1
  store i8 %5269, i8* %51, align 1
  %5270 = xor i32 %5258, %5256
  %5271 = xor i32 %5270, %5259
  %5272 = lshr i32 %5271, 4
  %5273 = trunc i32 %5272 to i8
  %5274 = and i8 %5273, 1
  store i8 %5274, i8* %56, align 1
  %5275 = icmp eq i32 %5259, 0
  %5276 = zext i1 %5275 to i8
  store i8 %5276, i8* %59, align 1
  %5277 = lshr i32 %5259, 31
  %5278 = trunc i32 %5277 to i8
  store i8 %5278, i8* %62, align 1
  %5279 = lshr i64 %5237, 32
  %5280 = trunc i64 %5279 to i32
  %5281 = and i32 %5280, 1
  %5282 = lshr i32 %5258, 31
  %5283 = xor i32 %5277, %5281
  %5284 = xor i32 %5277, %5282
  %5285 = add nuw nsw i32 %5283, %5284
  %5286 = icmp eq i32 %5285, 2
  %5287 = zext i1 %5286 to i8
  store i8 %5287, i8* %68, align 1
  %5288 = sext i32 %5259 to i64
  store i64 %5288, i64* %RCX.i6189, align 8
  %5289 = shl nsw i64 %5288, 3
  %5290 = add i64 %5230, %5289
  %5291 = add i64 %5229, 35
  store i64 %5291, i64* %3, align 8
  %5292 = inttoptr i64 %5290 to i64*
  %5293 = load i64, i64* %5292, align 8
  store i64 %5293, i64* %.pre243, align 8
  store i64 %5231, i64* %RCX.i6189, align 8
  %5294 = add i64 %5231, 156
  %5295 = add i64 %5229, 49
  store i64 %5295, i64* %3, align 8
  %5296 = inttoptr i64 %5294 to i32*
  %5297 = load i32, i32* %5296, align 4
  %5298 = sext i32 %5297 to i64
  %5299 = ashr i64 %5298, 1
  %5300 = lshr i64 %5299, 1
  %5301 = trunc i64 %5299 to i8
  %5302 = and i8 %5301, 1
  %5303 = trunc i64 %5300 to i32
  %5304 = and i64 %5300, 4294967295
  store i64 %5304, i64* %RDX.i5984, align 8
  store i8 %5302, i8* %44, align 1
  %5305 = and i32 %5303, 255
  %5306 = tail call i32 @llvm.ctpop.i32(i32 %5305)
  %5307 = trunc i32 %5306 to i8
  %5308 = and i8 %5307, 1
  %5309 = xor i8 %5308, 1
  store i8 %5309, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %5310 = icmp eq i32 %5303, 0
  %5311 = zext i1 %5310 to i8
  store i8 %5311, i8* %59, align 1
  %5312 = lshr i64 %5299, 32
  %5313 = trunc i64 %5312 to i8
  %5314 = and i8 %5313, 1
  store i8 %5314, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5315 = add i64 %5253, -104
  %5316 = add i64 %5229, 55
  store i64 %5316, i64* %3, align 8
  %5317 = trunc i64 %5300 to i32
  %5318 = inttoptr i64 %5315 to i32*
  %5319 = load i32, i32* %5318, align 4
  %5320 = add i32 %5319, %5317
  %5321 = zext i32 %5320 to i64
  store i64 %5321, i64* %RDX.i5984, align 8
  %5322 = icmp ult i32 %5320, %5317
  %5323 = icmp ult i32 %5320, %5319
  %5324 = or i1 %5322, %5323
  %5325 = zext i1 %5324 to i8
  store i8 %5325, i8* %44, align 1
  %5326 = and i32 %5320, 255
  %5327 = tail call i32 @llvm.ctpop.i32(i32 %5326)
  %5328 = trunc i32 %5327 to i8
  %5329 = and i8 %5328, 1
  %5330 = xor i8 %5329, 1
  store i8 %5330, i8* %51, align 1
  %5331 = xor i32 %5319, %5317
  %5332 = xor i32 %5331, %5320
  %5333 = lshr i32 %5332, 4
  %5334 = trunc i32 %5333 to i8
  %5335 = and i8 %5334, 1
  store i8 %5335, i8* %56, align 1
  %5336 = icmp eq i32 %5320, 0
  %5337 = zext i1 %5336 to i8
  store i8 %5337, i8* %59, align 1
  %5338 = lshr i32 %5320, 31
  %5339 = trunc i32 %5338 to i8
  store i8 %5339, i8* %62, align 1
  %5340 = lshr i64 %5299, 32
  %5341 = trunc i64 %5340 to i32
  %5342 = and i32 %5341, 1
  %5343 = lshr i32 %5319, 31
  %5344 = xor i32 %5338, %5342
  %5345 = xor i32 %5338, %5343
  %5346 = add nuw nsw i32 %5344, %5345
  %5347 = icmp eq i32 %5346, 2
  %5348 = zext i1 %5347 to i8
  store i8 %5348, i8* %68, align 1
  %5349 = sext i32 %5320 to i64
  store i64 %5349, i64* %RCX.i6189, align 8
  %5350 = shl nsw i64 %5349, 3
  %5351 = add i64 %5293, %5350
  %5352 = add i64 %5229, 62
  store i64 %5352, i64* %3, align 8
  %5353 = inttoptr i64 %5351 to i64*
  %5354 = load i64, i64* %5353, align 8
  store i64 %5354, i64* %.pre243, align 8
  %5355 = load i64, i64* %RBP.i, align 8
  %5356 = add i64 %5355, -42
  %5357 = add i64 %5229, 67
  store i64 %5357, i64* %3, align 8
  %5358 = inttoptr i64 %5356 to i16*
  %5359 = load i16, i16* %5358, align 2
  %5360 = sext i16 %5359 to i64
  store i64 %5360, i64* %RCX.i6189, align 8
  %5361 = shl nsw i64 %5360, 3
  %5362 = add i64 %5361, %5354
  %5363 = add i64 %5229, 71
  store i64 %5363, i64* %3, align 8
  %5364 = inttoptr i64 %5362 to i64*
  %5365 = load i64, i64* %5364, align 8
  store i64 %5365, i64* %.pre243, align 8
  %5366 = add i64 %5355, -60
  %5367 = add i64 %5229, 75
  store i64 %5367, i64* %3, align 8
  %5368 = inttoptr i64 %5366 to i32*
  %5369 = load i32, i32* %5368, align 4
  %5370 = sext i32 %5369 to i64
  store i64 %5370, i64* %RCX.i6189, align 8
  %5371 = shl nsw i64 %5370, 3
  %5372 = add i64 %5371, %5365
  %5373 = add i64 %5229, 79
  store i64 %5373, i64* %3, align 8
  %5374 = inttoptr i64 %5372 to i64*
  %5375 = load i64, i64* %5374, align 8
  store i64 %5375, i64* %.pre243, align 8
  %5376 = add i64 %5229, 81
  store i64 %5376, i64* %3, align 8
  %5377 = inttoptr i64 %5375 to i32*
  %5378 = load i32, i32* %5377, align 4
  %5379 = zext i32 %5378 to i64
  store i64 %5379, i64* %RDX.i5984, align 8
  store i32 %5378, i32* bitcast (%G_0x6d32c4_type* @G_0x6d32c4 to i32*), align 8
  %5380 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %5380, i64* %.pre243, align 8
  %5381 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5381, i64* %RCX.i6189, align 8
  %5382 = add i64 %5381, 152
  %5383 = add i64 %5229, 110
  store i64 %5383, i64* %3, align 8
  %5384 = inttoptr i64 %5382 to i32*
  %5385 = load i32, i32* %5384, align 4
  %5386 = sext i32 %5385 to i64
  %5387 = ashr i64 %5386, 1
  %5388 = lshr i64 %5387, 1
  %5389 = trunc i64 %5387 to i8
  %5390 = and i8 %5389, 1
  %5391 = trunc i64 %5388 to i32
  %5392 = and i64 %5388, 4294967295
  store i64 %5392, i64* %RDX.i5984, align 8
  store i8 %5390, i8* %44, align 1
  %5393 = and i32 %5391, 255
  %5394 = tail call i32 @llvm.ctpop.i32(i32 %5393)
  %5395 = trunc i32 %5394 to i8
  %5396 = and i8 %5395, 1
  %5397 = xor i8 %5396, 1
  store i8 %5397, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %5398 = icmp eq i32 %5391, 0
  %5399 = zext i1 %5398 to i8
  store i8 %5399, i8* %59, align 1
  %5400 = lshr i64 %5387, 32
  %5401 = trunc i64 %5400 to i8
  %5402 = and i8 %5401, 1
  store i8 %5402, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5403 = add i64 %5355, -100
  %5404 = add i64 %5229, 116
  store i64 %5404, i64* %3, align 8
  %5405 = trunc i64 %5388 to i32
  %5406 = inttoptr i64 %5403 to i32*
  %5407 = load i32, i32* %5406, align 4
  %5408 = add i32 %5407, %5405
  %5409 = zext i32 %5408 to i64
  store i64 %5409, i64* %RDX.i5984, align 8
  %5410 = icmp ult i32 %5408, %5405
  %5411 = icmp ult i32 %5408, %5407
  %5412 = or i1 %5410, %5411
  %5413 = zext i1 %5412 to i8
  store i8 %5413, i8* %44, align 1
  %5414 = and i32 %5408, 255
  %5415 = tail call i32 @llvm.ctpop.i32(i32 %5414)
  %5416 = trunc i32 %5415 to i8
  %5417 = and i8 %5416, 1
  %5418 = xor i8 %5417, 1
  store i8 %5418, i8* %51, align 1
  %5419 = xor i32 %5407, %5405
  %5420 = xor i32 %5419, %5408
  %5421 = lshr i32 %5420, 4
  %5422 = trunc i32 %5421 to i8
  %5423 = and i8 %5422, 1
  store i8 %5423, i8* %56, align 1
  %5424 = icmp eq i32 %5408, 0
  %5425 = zext i1 %5424 to i8
  store i8 %5425, i8* %59, align 1
  %5426 = lshr i32 %5408, 31
  %5427 = trunc i32 %5426 to i8
  store i8 %5427, i8* %62, align 1
  %5428 = lshr i64 %5387, 32
  %5429 = trunc i64 %5428 to i32
  %5430 = and i32 %5429, 1
  %5431 = lshr i32 %5407, 31
  %5432 = xor i32 %5426, %5430
  %5433 = xor i32 %5426, %5431
  %5434 = add nuw nsw i32 %5432, %5433
  %5435 = icmp eq i32 %5434, 2
  %5436 = zext i1 %5435 to i8
  store i8 %5436, i8* %68, align 1
  %5437 = sext i32 %5408 to i64
  store i64 %5437, i64* %RCX.i6189, align 8
  %5438 = shl nsw i64 %5437, 3
  %5439 = add i64 %5380, %5438
  %5440 = add i64 %5229, 123
  store i64 %5440, i64* %3, align 8
  %5441 = inttoptr i64 %5439 to i64*
  %5442 = load i64, i64* %5441, align 8
  store i64 %5442, i64* %.pre243, align 8
  store i64 %5381, i64* %RCX.i6189, align 8
  %5443 = add i64 %5381, 156
  %5444 = add i64 %5229, 137
  store i64 %5444, i64* %3, align 8
  %5445 = inttoptr i64 %5443 to i32*
  %5446 = load i32, i32* %5445, align 4
  %5447 = sext i32 %5446 to i64
  %5448 = ashr i64 %5447, 1
  %5449 = lshr i64 %5448, 1
  %5450 = trunc i64 %5448 to i8
  %5451 = and i8 %5450, 1
  %5452 = trunc i64 %5449 to i32
  %5453 = and i64 %5449, 4294967295
  store i64 %5453, i64* %RDX.i5984, align 8
  store i8 %5451, i8* %44, align 1
  %5454 = and i32 %5452, 255
  %5455 = tail call i32 @llvm.ctpop.i32(i32 %5454)
  %5456 = trunc i32 %5455 to i8
  %5457 = and i8 %5456, 1
  %5458 = xor i8 %5457, 1
  store i8 %5458, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %5459 = icmp eq i32 %5452, 0
  %5460 = zext i1 %5459 to i8
  store i8 %5460, i8* %59, align 1
  %5461 = lshr i64 %5448, 32
  %5462 = trunc i64 %5461 to i8
  %5463 = and i8 %5462, 1
  store i8 %5463, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5464 = load i64, i64* %RBP.i, align 8
  %5465 = add i64 %5464, -104
  %5466 = add i64 %5229, 143
  store i64 %5466, i64* %3, align 8
  %5467 = trunc i64 %5449 to i32
  %5468 = inttoptr i64 %5465 to i32*
  %5469 = load i32, i32* %5468, align 4
  %5470 = add i32 %5469, %5467
  %5471 = zext i32 %5470 to i64
  store i64 %5471, i64* %RDX.i5984, align 8
  %5472 = icmp ult i32 %5470, %5467
  %5473 = icmp ult i32 %5470, %5469
  %5474 = or i1 %5472, %5473
  %5475 = zext i1 %5474 to i8
  store i8 %5475, i8* %44, align 1
  %5476 = and i32 %5470, 255
  %5477 = tail call i32 @llvm.ctpop.i32(i32 %5476)
  %5478 = trunc i32 %5477 to i8
  %5479 = and i8 %5478, 1
  %5480 = xor i8 %5479, 1
  store i8 %5480, i8* %51, align 1
  %5481 = xor i32 %5469, %5467
  %5482 = xor i32 %5481, %5470
  %5483 = lshr i32 %5482, 4
  %5484 = trunc i32 %5483 to i8
  %5485 = and i8 %5484, 1
  store i8 %5485, i8* %56, align 1
  %5486 = icmp eq i32 %5470, 0
  %5487 = zext i1 %5486 to i8
  store i8 %5487, i8* %59, align 1
  %5488 = lshr i32 %5470, 31
  %5489 = trunc i32 %5488 to i8
  store i8 %5489, i8* %62, align 1
  %5490 = lshr i64 %5448, 32
  %5491 = trunc i64 %5490 to i32
  %5492 = and i32 %5491, 1
  %5493 = lshr i32 %5469, 31
  %5494 = xor i32 %5488, %5492
  %5495 = xor i32 %5488, %5493
  %5496 = add nuw nsw i32 %5494, %5495
  %5497 = icmp eq i32 %5496, 2
  %5498 = zext i1 %5497 to i8
  store i8 %5498, i8* %68, align 1
  %5499 = sext i32 %5470 to i64
  store i64 %5499, i64* %RCX.i6189, align 8
  %5500 = shl nsw i64 %5499, 3
  %5501 = add i64 %5442, %5500
  %5502 = add i64 %5229, 150
  store i64 %5502, i64* %3, align 8
  %5503 = inttoptr i64 %5501 to i64*
  %5504 = load i64, i64* %5503, align 8
  store i64 %5504, i64* %.pre243, align 8
  %5505 = add i64 %5229, 153
  store i64 %5505, i64* %3, align 8
  %5506 = inttoptr i64 %5504 to i64*
  %5507 = load i64, i64* %5506, align 8
  store i64 %5507, i64* %.pre243, align 8
  %5508 = add i64 %5464, -60
  %5509 = add i64 %5229, 157
  store i64 %5509, i64* %3, align 8
  %5510 = inttoptr i64 %5508 to i32*
  %5511 = load i32, i32* %5510, align 4
  %5512 = sext i32 %5511 to i64
  store i64 %5512, i64* %RCX.i6189, align 8
  %5513 = shl nsw i64 %5512, 3
  %5514 = add i64 %5513, %5507
  %5515 = add i64 %5229, 161
  store i64 %5515, i64* %3, align 8
  %5516 = inttoptr i64 %5514 to i64*
  %5517 = load i64, i64* %5516, align 8
  store i64 %5517, i64* %.pre243, align 8
  %5518 = add i64 %5517, 4
  %5519 = add i64 %5229, 166
  store i64 %5519, i64* %3, align 8
  %5520 = inttoptr i64 %5518 to i32*
  %5521 = load i32, i32* %5520, align 4
  %5522 = sitofp i32 %5521 to double
  store double %5522, double* %116, align 1
  %5523 = add i64 %5464, -188
  %5524 = add i64 %5229, 173
  store i64 %5524, i64* %3, align 8
  %5525 = inttoptr i64 %5523 to i32*
  %5526 = load i32, i32* %5525, align 4
  %5527 = add i32 %5526, -1
  %5528 = icmp eq i32 %5526, 0
  %5529 = zext i1 %5528 to i8
  store i8 %5529, i8* %44, align 1
  %5530 = and i32 %5527, 255
  %5531 = tail call i32 @llvm.ctpop.i32(i32 %5530)
  %5532 = trunc i32 %5531 to i8
  %5533 = and i8 %5532, 1
  %5534 = xor i8 %5533, 1
  store i8 %5534, i8* %51, align 1
  %5535 = xor i32 %5527, %5526
  %5536 = lshr i32 %5535, 4
  %5537 = trunc i32 %5536 to i8
  %5538 = and i8 %5537, 1
  store i8 %5538, i8* %56, align 1
  %5539 = icmp eq i32 %5527, 0
  %5540 = zext i1 %5539 to i8
  store i8 %5540, i8* %59, align 1
  %5541 = lshr i32 %5527, 31
  %5542 = trunc i32 %5541 to i8
  store i8 %5542, i8* %62, align 1
  %5543 = lshr i32 %5526, 31
  %5544 = xor i32 %5541, %5543
  %5545 = add nuw nsw i32 %5544, %5543
  %5546 = icmp eq i32 %5545, 2
  %5547 = zext i1 %5546 to i8
  store i8 %5547, i8* %68, align 1
  %5548 = load i64, i64* %RBP.i, align 8
  %5549 = add i64 %5548, -288
  %5550 = add i64 %5229, 181
  store i64 %5550, i64* %3, align 8
  %5551 = inttoptr i64 %5549 to double*
  store double %5522, double* %5551, align 8
  %5552 = load i64, i64* %3, align 8
  %5553 = load i8, i8* %59, align 1
  %5554 = icmp eq i8 %5553, 0
  %.v358 = select i1 %5554, i64 27, i64 6
  %5555 = add i64 %5552, %.v358
  store i64 %5555, i64* %3, align 8
  br i1 %5554, label %block_.L_46f463, label %block_46f44e

block_46f44e:                                     ; preds = %block_46f393
  %5556 = load i64, i64* %RBP.i, align 8
  %5557 = add i64 %5556, -184
  %5558 = add i64 %5555, 8
  store i64 %5558, i64* %3, align 8
  %5559 = inttoptr i64 %5557 to i32*
  %5560 = load i32, i32* %5559, align 4
  %5561 = sitofp i32 %5560 to double
  store double %5561, double* %116, align 1
  %5562 = add i64 %5556, -296
  %5563 = add i64 %5555, 16
  store i64 %5563, i64* %3, align 8
  %5564 = inttoptr i64 %5562 to double*
  store double %5561, double* %5564, align 8
  %5565 = load i64, i64* %3, align 8
  %5566 = add i64 %5565, 73
  store i64 %5566, i64* %3, align 8
  %.pre230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre231 = bitcast i64* %.pre230 to double*
  %.pre233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %.pre235 = bitcast %union.VectorReg* %.pre233 to double*
  %.pre237 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %.pre233, i64 0, i32 0, i32 0, i32 0, i64 0
  %.pre239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %.pre241 = bitcast i64* %.pre239 to double*
  br label %block_.L_46f4a7

block_.L_46f463:                                  ; preds = %block_46f393
  %5567 = add i64 %5555, ptrtoint (%G_0x423dd__rip__type* @G_0x423dd__rip_ to i64)
  %5568 = add i64 %5555, 8
  store i64 %5568, i64* %3, align 8
  %5569 = inttoptr i64 %5567 to i64*
  %5570 = load i64, i64* %5569, align 8
  store i64 %5570, i64* %117, align 1
  %5571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %5572 = bitcast i64* %5571 to double*
  store double 0.000000e+00, double* %5572, align 1
  %5573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5574 = add i64 %5555, add (i64 ptrtoint (%G_0x423ed__rip__type* @G_0x423ed__rip_ to i64), i64 8)
  %5575 = add i64 %5555, 16
  store i64 %5575, i64* %3, align 8
  %5576 = inttoptr i64 %5574 to i64*
  %5577 = load i64, i64* %5576, align 8
  %5578 = bitcast %union.VectorReg* %5573 to double*
  %5579 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5573, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %5577, i64* %5579, align 1
  %5580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %5581 = bitcast i64* %5580 to double*
  store double 0.000000e+00, double* %5581, align 1
  %5582 = load i64, i64* %RBP.i, align 8
  %5583 = add i64 %5582, -184
  %5584 = add i64 %5555, 22
  store i64 %5584, i64* %3, align 8
  %5585 = inttoptr i64 %5583 to i32*
  %5586 = load i32, i32* %5585, align 4
  %5587 = zext i32 %5586 to i64
  store i64 %5587, i64* %.pre243, align 8
  %5588 = add i64 %5582, -188
  %5589 = add i64 %5555, 28
  store i64 %5589, i64* %3, align 8
  %5590 = inttoptr i64 %5588 to i32*
  %5591 = load i32, i32* %5590, align 4
  %5592 = sub i32 %5586, %5591
  %5593 = zext i32 %5592 to i64
  store i64 %5593, i64* %.pre243, align 8
  %5594 = icmp ult i32 %5586, %5591
  %5595 = zext i1 %5594 to i8
  store i8 %5595, i8* %44, align 1
  %5596 = and i32 %5592, 255
  %5597 = tail call i32 @llvm.ctpop.i32(i32 %5596)
  %5598 = trunc i32 %5597 to i8
  %5599 = and i8 %5598, 1
  %5600 = xor i8 %5599, 1
  store i8 %5600, i8* %51, align 1
  %5601 = xor i32 %5591, %5586
  %5602 = xor i32 %5601, %5592
  %5603 = lshr i32 %5602, 4
  %5604 = trunc i32 %5603 to i8
  %5605 = and i8 %5604, 1
  store i8 %5605, i8* %56, align 1
  %5606 = icmp eq i32 %5592, 0
  %5607 = zext i1 %5606 to i8
  store i8 %5607, i8* %59, align 1
  %5608 = lshr i32 %5592, 31
  %5609 = trunc i32 %5608 to i8
  store i8 %5609, i8* %62, align 1
  %5610 = lshr i32 %5586, 31
  %5611 = lshr i32 %5591, 31
  %5612 = xor i32 %5611, %5610
  %5613 = xor i32 %5608, %5610
  %5614 = add nuw nsw i32 %5613, %5612
  %5615 = icmp eq i32 %5614, 2
  %5616 = zext i1 %5615 to i8
  store i8 %5616, i8* %68, align 1
  %5617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5618 = sitofp i32 %5592 to double
  %5619 = bitcast %union.VectorReg* %5617 to double*
  %5620 = bitcast i64 %5577 to double
  %5621 = fadd double %5618, %5620
  store double %5621, double* %5619, align 1
  %5622 = add i64 %5555, 42
  store i64 %5622, i64* %3, align 8
  %5623 = load i32, i32* %5585, align 4
  %5624 = zext i32 %5623 to i64
  store i64 %5624, i64* %.pre243, align 8
  %5625 = add i64 %5555, 48
  store i64 %5625, i64* %3, align 8
  %5626 = load i32, i32* %5590, align 4
  %5627 = sub i32 %5623, %5626
  %5628 = zext i32 %5627 to i64
  store i64 %5628, i64* %.pre243, align 8
  %5629 = icmp ult i32 %5623, %5626
  %5630 = zext i1 %5629 to i8
  store i8 %5630, i8* %44, align 1
  %5631 = and i32 %5627, 255
  %5632 = tail call i32 @llvm.ctpop.i32(i32 %5631)
  %5633 = trunc i32 %5632 to i8
  %5634 = and i8 %5633, 1
  %5635 = xor i8 %5634, 1
  store i8 %5635, i8* %51, align 1
  %5636 = xor i32 %5626, %5623
  %5637 = xor i32 %5636, %5627
  %5638 = lshr i32 %5637, 4
  %5639 = trunc i32 %5638 to i8
  %5640 = and i8 %5639, 1
  store i8 %5640, i8* %56, align 1
  %5641 = icmp eq i32 %5627, 0
  %5642 = zext i1 %5641 to i8
  store i8 %5642, i8* %59, align 1
  %5643 = lshr i32 %5627, 31
  %5644 = trunc i32 %5643 to i8
  store i8 %5644, i8* %62, align 1
  %5645 = lshr i32 %5623, 31
  %5646 = lshr i32 %5626, 31
  %5647 = xor i32 %5646, %5645
  %5648 = xor i32 %5643, %5645
  %5649 = add nuw nsw i32 %5648, %5647
  %5650 = icmp eq i32 %5649, 2
  %5651 = zext i1 %5650 to i8
  store i8 %5651, i8* %68, align 1
  %5652 = sitofp i32 %5627 to double
  %5653 = load double, double* %116, align 1
  %5654 = fadd double %5652, %5653
  store double %5654, double* %5578, align 1
  %5655 = fdiv double %5621, %5654
  store double %5655, double* %5619, align 1
  %5656 = load i64, i64* %RBP.i, align 8
  %5657 = add i64 %5656, -296
  %5658 = add i64 %5555, 68
  store i64 %5658, i64* %3, align 8
  %5659 = inttoptr i64 %5657 to double*
  store double %5655, double* %5659, align 8
  %.pre174 = load i64, i64* %3, align 8
  br label %block_.L_46f4a7

block_.L_46f4a7:                                  ; preds = %block_.L_46f463, %block_46f44e
  %.pre-phi242 = phi double* [ %5581, %block_.L_46f463 ], [ %.pre241, %block_46f44e ]
  %.pre-phi240 = phi i64* [ %5580, %block_.L_46f463 ], [ %.pre239, %block_46f44e ]
  %.pre-phi238 = phi i64* [ %5579, %block_.L_46f463 ], [ %.pre237, %block_46f44e ]
  %.pre-phi236 = phi double* [ %5578, %block_.L_46f463 ], [ %.pre235, %block_46f44e ]
  %.pre-phi232 = phi double* [ %5572, %block_.L_46f463 ], [ %.pre231, %block_46f44e ]
  %5660 = phi i64 [ %.pre174, %block_.L_46f463 ], [ %5566, %block_46f44e ]
  %5661 = load i64, i64* %RBP.i, align 8
  %5662 = add i64 %5661, -296
  %5663 = add i64 %5660, 8
  store i64 %5663, i64* %3, align 8
  %5664 = inttoptr i64 %5662 to i64*
  %5665 = load i64, i64* %5664, align 8
  store i64 %5665, i64* %117, align 1
  store double 0.000000e+00, double* %.pre-phi232, align 1
  %5666 = add i64 %5661, -288
  %5667 = add i64 %5660, 16
  store i64 %5667, i64* %3, align 8
  %5668 = inttoptr i64 %5666 to i64*
  %5669 = load i64, i64* %5668, align 8
  store i64 %5669, i64* %.pre-phi238, align 1
  store double 0.000000e+00, double* %.pre-phi242, align 1
  %5670 = bitcast i64 %5669 to double
  %5671 = bitcast i64 %5665 to double
  %5672 = fmul double %5670, %5671
  store double %5672, double* %.pre-phi236, align 1
  store i64 0, i64* %.pre-phi240, align 1
  %5673 = tail call double @llvm.trunc.f64(double %5672)
  %5674 = tail call double @llvm.fabs.f64(double %5673)
  %5675 = fcmp ogt double %5674, 0x41DFFFFFFFC00000
  %5676 = fptosi double %5673 to i32
  %5677 = zext i32 %5676 to i64
  %5678 = select i1 %5675, i64 2147483648, i64 %5677
  store i64 %5678, i64* %.pre243, align 8
  %5679 = trunc i64 %5678 to i32
  store i32 %5679, i32* bitcast (%G_0x70fd54_type* @G_0x70fd54 to i32*), align 8
  %5680 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %5680, i64* %RCX.i6189, align 8
  %5681 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5681, i64* %RDX.i5984, align 8
  %5682 = add i64 %5681, 152
  %5683 = add i64 %5660, 53
  store i64 %5683, i64* %3, align 8
  %5684 = inttoptr i64 %5682 to i32*
  %5685 = load i32, i32* %5684, align 4
  %5686 = sext i32 %5685 to i64
  %5687 = ashr i64 %5686, 1
  %5688 = lshr i64 %5687, 1
  %5689 = trunc i64 %5687 to i8
  %5690 = and i8 %5689, 1
  %5691 = trunc i64 %5688 to i32
  %5692 = and i64 %5688, 4294967295
  store i64 %5692, i64* %.pre243, align 8
  store i8 %5690, i8* %44, align 1
  %5693 = and i32 %5691, 255
  %5694 = tail call i32 @llvm.ctpop.i32(i32 %5693)
  %5695 = trunc i32 %5694 to i8
  %5696 = and i8 %5695, 1
  %5697 = xor i8 %5696, 1
  store i8 %5697, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %5698 = icmp eq i32 %5691, 0
  %5699 = zext i1 %5698 to i8
  store i8 %5699, i8* %59, align 1
  %5700 = lshr i64 %5687, 32
  %5701 = trunc i64 %5700 to i8
  %5702 = and i8 %5701, 1
  store i8 %5702, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5703 = add i64 %5661, -100
  %5704 = add i64 %5660, 59
  store i64 %5704, i64* %3, align 8
  %5705 = trunc i64 %5688 to i32
  %5706 = inttoptr i64 %5703 to i32*
  %5707 = load i32, i32* %5706, align 4
  %5708 = add i32 %5707, %5705
  %5709 = zext i32 %5708 to i64
  store i64 %5709, i64* %.pre243, align 8
  %5710 = icmp ult i32 %5708, %5705
  %5711 = icmp ult i32 %5708, %5707
  %5712 = or i1 %5710, %5711
  %5713 = zext i1 %5712 to i8
  store i8 %5713, i8* %44, align 1
  %5714 = and i32 %5708, 255
  %5715 = tail call i32 @llvm.ctpop.i32(i32 %5714)
  %5716 = trunc i32 %5715 to i8
  %5717 = and i8 %5716, 1
  %5718 = xor i8 %5717, 1
  store i8 %5718, i8* %51, align 1
  %5719 = xor i32 %5707, %5705
  %5720 = xor i32 %5719, %5708
  %5721 = lshr i32 %5720, 4
  %5722 = trunc i32 %5721 to i8
  %5723 = and i8 %5722, 1
  store i8 %5723, i8* %56, align 1
  %5724 = icmp eq i32 %5708, 0
  %5725 = zext i1 %5724 to i8
  store i8 %5725, i8* %59, align 1
  %5726 = lshr i32 %5708, 31
  %5727 = trunc i32 %5726 to i8
  store i8 %5727, i8* %62, align 1
  %5728 = lshr i64 %5687, 32
  %5729 = trunc i64 %5728 to i32
  %5730 = and i32 %5729, 1
  %5731 = lshr i32 %5707, 31
  %5732 = xor i32 %5726, %5730
  %5733 = xor i32 %5726, %5731
  %5734 = add nuw nsw i32 %5732, %5733
  %5735 = icmp eq i32 %5734, 2
  %5736 = zext i1 %5735 to i8
  store i8 %5736, i8* %68, align 1
  %5737 = sext i32 %5708 to i64
  store i64 %5737, i64* %RDX.i5984, align 8
  %5738 = shl nsw i64 %5737, 3
  %5739 = add i64 %5680, %5738
  %5740 = add i64 %5660, 66
  store i64 %5740, i64* %3, align 8
  %5741 = inttoptr i64 %5739 to i64*
  %5742 = load i64, i64* %5741, align 8
  store i64 %5742, i64* %RCX.i6189, align 8
  store i64 %5681, i64* %RDX.i5984, align 8
  %5743 = add i64 %5681, 156
  %5744 = add i64 %5660, 80
  store i64 %5744, i64* %3, align 8
  %5745 = inttoptr i64 %5743 to i32*
  %5746 = load i32, i32* %5745, align 4
  %5747 = sext i32 %5746 to i64
  %5748 = ashr i64 %5747, 1
  %5749 = lshr i64 %5748, 1
  %5750 = trunc i64 %5748 to i8
  %5751 = and i8 %5750, 1
  %5752 = trunc i64 %5749 to i32
  %5753 = and i64 %5749, 4294967295
  store i64 %5753, i64* %.pre243, align 8
  store i8 %5751, i8* %44, align 1
  %5754 = and i32 %5752, 255
  %5755 = tail call i32 @llvm.ctpop.i32(i32 %5754)
  %5756 = trunc i32 %5755 to i8
  %5757 = and i8 %5756, 1
  %5758 = xor i8 %5757, 1
  store i8 %5758, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %5759 = icmp eq i32 %5752, 0
  %5760 = zext i1 %5759 to i8
  store i8 %5760, i8* %59, align 1
  %5761 = lshr i64 %5748, 32
  %5762 = trunc i64 %5761 to i8
  %5763 = and i8 %5762, 1
  store i8 %5763, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %5764 = load i64, i64* %RBP.i, align 8
  %5765 = add i64 %5764, -104
  %5766 = add i64 %5660, 86
  store i64 %5766, i64* %3, align 8
  %5767 = trunc i64 %5749 to i32
  %5768 = inttoptr i64 %5765 to i32*
  %5769 = load i32, i32* %5768, align 4
  %5770 = add i32 %5769, %5767
  %5771 = zext i32 %5770 to i64
  store i64 %5771, i64* %.pre243, align 8
  %5772 = icmp ult i32 %5770, %5767
  %5773 = icmp ult i32 %5770, %5769
  %5774 = or i1 %5772, %5773
  %5775 = zext i1 %5774 to i8
  store i8 %5775, i8* %44, align 1
  %5776 = and i32 %5770, 255
  %5777 = tail call i32 @llvm.ctpop.i32(i32 %5776)
  %5778 = trunc i32 %5777 to i8
  %5779 = and i8 %5778, 1
  %5780 = xor i8 %5779, 1
  store i8 %5780, i8* %51, align 1
  %5781 = xor i32 %5769, %5767
  %5782 = xor i32 %5781, %5770
  %5783 = lshr i32 %5782, 4
  %5784 = trunc i32 %5783 to i8
  %5785 = and i8 %5784, 1
  store i8 %5785, i8* %56, align 1
  %5786 = icmp eq i32 %5770, 0
  %5787 = zext i1 %5786 to i8
  store i8 %5787, i8* %59, align 1
  %5788 = lshr i32 %5770, 31
  %5789 = trunc i32 %5788 to i8
  store i8 %5789, i8* %62, align 1
  %5790 = lshr i64 %5748, 32
  %5791 = trunc i64 %5790 to i32
  %5792 = and i32 %5791, 1
  %5793 = lshr i32 %5769, 31
  %5794 = xor i32 %5788, %5792
  %5795 = xor i32 %5788, %5793
  %5796 = add nuw nsw i32 %5794, %5795
  %5797 = icmp eq i32 %5796, 2
  %5798 = zext i1 %5797 to i8
  store i8 %5798, i8* %68, align 1
  %5799 = sext i32 %5770 to i64
  store i64 %5799, i64* %RDX.i5984, align 8
  %5800 = shl nsw i64 %5799, 3
  %5801 = add i64 %5742, %5800
  %5802 = add i64 %5660, 93
  store i64 %5802, i64* %3, align 8
  %5803 = inttoptr i64 %5801 to i64*
  %5804 = load i64, i64* %5803, align 8
  store i64 %5804, i64* %RCX.i6189, align 8
  %5805 = add i64 %5660, 96
  store i64 %5805, i64* %3, align 8
  %5806 = inttoptr i64 %5804 to i64*
  %5807 = load i64, i64* %5806, align 8
  store i64 %5807, i64* %RCX.i6189, align 8
  %5808 = add i64 %5764, -60
  %5809 = add i64 %5660, 100
  store i64 %5809, i64* %3, align 8
  %5810 = inttoptr i64 %5808 to i32*
  %5811 = load i32, i32* %5810, align 4
  %5812 = sext i32 %5811 to i64
  store i64 %5812, i64* %RDX.i5984, align 8
  %5813 = shl nsw i64 %5812, 3
  %5814 = add i64 %5813, %5807
  %5815 = add i64 %5660, 104
  store i64 %5815, i64* %3, align 8
  %5816 = inttoptr i64 %5814 to i64*
  %5817 = load i64, i64* %5816, align 8
  store i64 %5817, i64* %RCX.i6189, align 8
  %5818 = add i64 %5817, 8
  %5819 = add i64 %5660, 109
  store i64 %5819, i64* %3, align 8
  %5820 = inttoptr i64 %5818 to i32*
  %5821 = load i32, i32* %5820, align 4
  %5822 = sitofp i32 %5821 to double
  store double %5822, double* %116, align 1
  %5823 = add i64 %5764, -188
  %5824 = add i64 %5660, 116
  store i64 %5824, i64* %3, align 8
  %5825 = inttoptr i64 %5823 to i32*
  %5826 = load i32, i32* %5825, align 4
  %5827 = add i32 %5826, -1
  %5828 = icmp eq i32 %5826, 0
  %5829 = zext i1 %5828 to i8
  store i8 %5829, i8* %44, align 1
  %5830 = and i32 %5827, 255
  %5831 = tail call i32 @llvm.ctpop.i32(i32 %5830)
  %5832 = trunc i32 %5831 to i8
  %5833 = and i8 %5832, 1
  %5834 = xor i8 %5833, 1
  store i8 %5834, i8* %51, align 1
  %5835 = xor i32 %5827, %5826
  %5836 = lshr i32 %5835, 4
  %5837 = trunc i32 %5836 to i8
  %5838 = and i8 %5837, 1
  store i8 %5838, i8* %56, align 1
  %5839 = icmp eq i32 %5827, 0
  %5840 = zext i1 %5839 to i8
  store i8 %5840, i8* %59, align 1
  %5841 = lshr i32 %5827, 31
  %5842 = trunc i32 %5841 to i8
  store i8 %5842, i8* %62, align 1
  %5843 = lshr i32 %5826, 31
  %5844 = xor i32 %5841, %5843
  %5845 = add nuw nsw i32 %5844, %5843
  %5846 = icmp eq i32 %5845, 2
  %5847 = zext i1 %5846 to i8
  store i8 %5847, i8* %68, align 1
  %5848 = load i64, i64* %RBP.i, align 8
  %5849 = add i64 %5848, -304
  %5850 = add i64 %5660, 124
  store i64 %5850, i64* %3, align 8
  %5851 = inttoptr i64 %5849 to double*
  store double %5822, double* %5851, align 8
  %5852 = load i64, i64* %3, align 8
  %5853 = load i8, i8* %59, align 1
  %5854 = icmp eq i8 %5853, 0
  %.v359 = select i1 %5854, i64 27, i64 6
  %5855 = add i64 %5852, %.v359
  store i64 %5855, i64* %3, align 8
  br i1 %5854, label %block_.L_46f53e, label %block_46f529

block_46f529:                                     ; preds = %block_.L_46f4a7
  %5856 = load i64, i64* %RBP.i, align 8
  %5857 = add i64 %5856, -184
  %5858 = add i64 %5855, 8
  store i64 %5858, i64* %3, align 8
  %5859 = inttoptr i64 %5857 to i32*
  %5860 = load i32, i32* %5859, align 4
  %5861 = sitofp i32 %5860 to double
  store double %5861, double* %116, align 1
  %5862 = add i64 %5856, -312
  %5863 = add i64 %5855, 16
  store i64 %5863, i64* %3, align 8
  %5864 = inttoptr i64 %5862 to double*
  store double %5861, double* %5864, align 8
  %5865 = load i64, i64* %3, align 8
  %5866 = add i64 %5865, 73
  store i64 %5866, i64* %3, align 8
  br label %block_.L_46f582

block_.L_46f53e:                                  ; preds = %block_.L_46f4a7
  %5867 = add i64 %5855, ptrtoint (%G_0x42302__rip__type* @G_0x42302__rip_ to i64)
  %5868 = add i64 %5855, 8
  store i64 %5868, i64* %3, align 8
  %5869 = inttoptr i64 %5867 to i64*
  %5870 = load i64, i64* %5869, align 8
  store i64 %5870, i64* %117, align 1
  store double 0.000000e+00, double* %.pre-phi232, align 1
  %5871 = add i64 %5855, add (i64 ptrtoint (%G_0x42312__rip__type* @G_0x42312__rip_ to i64), i64 8)
  %5872 = add i64 %5855, 16
  store i64 %5872, i64* %3, align 8
  %5873 = inttoptr i64 %5871 to i64*
  %5874 = load i64, i64* %5873, align 8
  store i64 %5874, i64* %.pre-phi238, align 1
  store double 0.000000e+00, double* %.pre-phi242, align 1
  %5875 = load i64, i64* %RBP.i, align 8
  %5876 = add i64 %5875, -184
  %5877 = add i64 %5855, 22
  store i64 %5877, i64* %3, align 8
  %5878 = inttoptr i64 %5876 to i32*
  %5879 = load i32, i32* %5878, align 4
  %5880 = zext i32 %5879 to i64
  store i64 %5880, i64* %.pre243, align 8
  %5881 = add i64 %5875, -188
  %5882 = add i64 %5855, 28
  store i64 %5882, i64* %3, align 8
  %5883 = inttoptr i64 %5881 to i32*
  %5884 = load i32, i32* %5883, align 4
  %5885 = sub i32 %5879, %5884
  %5886 = zext i32 %5885 to i64
  store i64 %5886, i64* %.pre243, align 8
  %5887 = icmp ult i32 %5879, %5884
  %5888 = zext i1 %5887 to i8
  store i8 %5888, i8* %44, align 1
  %5889 = and i32 %5885, 255
  %5890 = tail call i32 @llvm.ctpop.i32(i32 %5889)
  %5891 = trunc i32 %5890 to i8
  %5892 = and i8 %5891, 1
  %5893 = xor i8 %5892, 1
  store i8 %5893, i8* %51, align 1
  %5894 = xor i32 %5884, %5879
  %5895 = xor i32 %5894, %5885
  %5896 = lshr i32 %5895, 4
  %5897 = trunc i32 %5896 to i8
  %5898 = and i8 %5897, 1
  store i8 %5898, i8* %56, align 1
  %5899 = icmp eq i32 %5885, 0
  %5900 = zext i1 %5899 to i8
  store i8 %5900, i8* %59, align 1
  %5901 = lshr i32 %5885, 31
  %5902 = trunc i32 %5901 to i8
  store i8 %5902, i8* %62, align 1
  %5903 = lshr i32 %5879, 31
  %5904 = lshr i32 %5884, 31
  %5905 = xor i32 %5904, %5903
  %5906 = xor i32 %5901, %5903
  %5907 = add nuw nsw i32 %5906, %5905
  %5908 = icmp eq i32 %5907, 2
  %5909 = zext i1 %5908 to i8
  store i8 %5909, i8* %68, align 1
  %5910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5911 = sitofp i32 %5885 to double
  %5912 = bitcast %union.VectorReg* %5910 to double*
  %5913 = bitcast i64 %5874 to double
  %5914 = fadd double %5911, %5913
  store double %5914, double* %5912, align 1
  %5915 = add i64 %5855, 42
  store i64 %5915, i64* %3, align 8
  %5916 = load i32, i32* %5878, align 4
  %5917 = zext i32 %5916 to i64
  store i64 %5917, i64* %.pre243, align 8
  %5918 = add i64 %5855, 48
  store i64 %5918, i64* %3, align 8
  %5919 = load i32, i32* %5883, align 4
  %5920 = sub i32 %5916, %5919
  %5921 = zext i32 %5920 to i64
  store i64 %5921, i64* %.pre243, align 8
  %5922 = icmp ult i32 %5916, %5919
  %5923 = zext i1 %5922 to i8
  store i8 %5923, i8* %44, align 1
  %5924 = and i32 %5920, 255
  %5925 = tail call i32 @llvm.ctpop.i32(i32 %5924)
  %5926 = trunc i32 %5925 to i8
  %5927 = and i8 %5926, 1
  %5928 = xor i8 %5927, 1
  store i8 %5928, i8* %51, align 1
  %5929 = xor i32 %5919, %5916
  %5930 = xor i32 %5929, %5920
  %5931 = lshr i32 %5930, 4
  %5932 = trunc i32 %5931 to i8
  %5933 = and i8 %5932, 1
  store i8 %5933, i8* %56, align 1
  %5934 = icmp eq i32 %5920, 0
  %5935 = zext i1 %5934 to i8
  store i8 %5935, i8* %59, align 1
  %5936 = lshr i32 %5920, 31
  %5937 = trunc i32 %5936 to i8
  store i8 %5937, i8* %62, align 1
  %5938 = lshr i32 %5916, 31
  %5939 = lshr i32 %5919, 31
  %5940 = xor i32 %5939, %5938
  %5941 = xor i32 %5936, %5938
  %5942 = add nuw nsw i32 %5941, %5940
  %5943 = icmp eq i32 %5942, 2
  %5944 = zext i1 %5943 to i8
  store i8 %5944, i8* %68, align 1
  %5945 = sitofp i32 %5920 to double
  %5946 = load double, double* %116, align 1
  %5947 = fadd double %5945, %5946
  store double %5947, double* %.pre-phi236, align 1
  %5948 = fdiv double %5914, %5947
  store double %5948, double* %5912, align 1
  %5949 = load i64, i64* %RBP.i, align 8
  %5950 = add i64 %5949, -312
  %5951 = add i64 %5855, 68
  store i64 %5951, i64* %3, align 8
  %5952 = inttoptr i64 %5950 to double*
  store double %5948, double* %5952, align 8
  %.pre175 = load i64, i64* %3, align 8
  br label %block_.L_46f582

block_.L_46f582:                                  ; preds = %block_.L_46f53e, %block_46f529
  %5953 = phi i64 [ %.pre175, %block_.L_46f53e ], [ %5866, %block_46f529 ]
  %5954 = load i64, i64* %RBP.i, align 8
  %5955 = add i64 %5954, -312
  %5956 = add i64 %5953, 8
  store i64 %5956, i64* %3, align 8
  %5957 = inttoptr i64 %5955 to i64*
  %5958 = load i64, i64* %5957, align 8
  store i64 %5958, i64* %117, align 1
  store double 0.000000e+00, double* %.pre-phi232, align 1
  %5959 = add i64 %5954, -304
  %5960 = add i64 %5953, 16
  store i64 %5960, i64* %3, align 8
  %5961 = inttoptr i64 %5959 to i64*
  %5962 = load i64, i64* %5961, align 8
  store i64 %5962, i64* %.pre-phi238, align 1
  store double 0.000000e+00, double* %.pre-phi242, align 1
  %.cast = bitcast i64 %5962 to double
  %5963 = bitcast i64 %5958 to double
  %5964 = fmul double %.cast, %5963
  store double %5964, double* %.pre-phi236, align 1
  store i64 0, i64* %.pre-phi240, align 1
  %5965 = tail call double @llvm.trunc.f64(double %5964)
  %5966 = tail call double @llvm.fabs.f64(double %5965)
  %5967 = fcmp ogt double %5966, 0x41DFFFFFFFC00000
  %5968 = fptosi double %5965 to i32
  %5969 = zext i32 %5968 to i64
  %5970 = select i1 %5967, i64 2147483648, i64 %5969
  store i64 %5970, i64* %.pre243, align 8
  %5971 = trunc i64 %5970 to i32
  %5972 = add i64 %5953, 31
  store i64 %5972, i64* %3, align 8
  store i32 %5971, i32* bitcast (%G_0x70fd58_type* @G_0x70fd58 to i32*), align 8
  br label %block_.L_46f5a1

block_.L_46f5a1:                                  ; preds = %block_.L_46f372, %block_.L_46f582, %routine_idivl_MINUS0xb8__rbp_.exit
  %5973 = phi i64 [ %5178, %block_.L_46f372 ], [ %5229, %routine_idivl_MINUS0xb8__rbp_.exit ], [ %5972, %block_.L_46f582 ]
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.20, %block_.L_46f372 ], [ %5204, %routine_idivl_MINUS0xb8__rbp_.exit ], [ %5204, %block_.L_46f582 ]
  %5974 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5974, i64* %.pre243, align 8
  %5975 = add i64 %5974, 2880
  %5976 = add i64 %5973, 15
  store i64 %5976, i64* %3, align 8
  %5977 = inttoptr i64 %5975 to i32*
  %5978 = load i32, i32* %5977, align 4
  %5979 = add i32 %5978, -1
  %5980 = icmp eq i32 %5978, 0
  %5981 = zext i1 %5980 to i8
  store i8 %5981, i8* %44, align 1
  %5982 = and i32 %5979, 255
  %5983 = tail call i32 @llvm.ctpop.i32(i32 %5982)
  %5984 = trunc i32 %5983 to i8
  %5985 = and i8 %5984, 1
  %5986 = xor i8 %5985, 1
  store i8 %5986, i8* %51, align 1
  %5987 = xor i32 %5979, %5978
  %5988 = lshr i32 %5987, 4
  %5989 = trunc i32 %5988 to i8
  %5990 = and i8 %5989, 1
  store i8 %5990, i8* %56, align 1
  %5991 = icmp eq i32 %5979, 0
  %5992 = zext i1 %5991 to i8
  store i8 %5992, i8* %59, align 1
  %5993 = lshr i32 %5979, 31
  %5994 = trunc i32 %5993 to i8
  store i8 %5994, i8* %62, align 1
  %5995 = lshr i32 %5978, 31
  %5996 = xor i32 %5993, %5995
  %5997 = add nuw nsw i32 %5996, %5995
  %5998 = icmp eq i32 %5997, 2
  %5999 = zext i1 %5998 to i8
  store i8 %5999, i8* %68, align 1
  %.v264 = select i1 %5991, i64 21, i64 952
  %6000 = add i64 %5973, %.v264
  store i64 %6000, i64* %3, align 8
  br i1 %5991, label %block_46f5b6, label %block_.L_46f959

block_46f5b6:                                     ; preds = %block_.L_46f5a1
  %6001 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6001, i64* %.pre243, align 8
  %6002 = add i64 %6001, 24
  %6003 = add i64 %6000, 12
  store i64 %6003, i64* %3, align 8
  %6004 = inttoptr i64 %6002 to i32*
  %6005 = load i32, i32* %6004, align 4
  store i8 0, i8* %44, align 1
  %6006 = and i32 %6005, 255
  %6007 = tail call i32 @llvm.ctpop.i32(i32 %6006)
  %6008 = trunc i32 %6007 to i8
  %6009 = and i8 %6008, 1
  %6010 = xor i8 %6009, 1
  store i8 %6010, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6011 = icmp eq i32 %6005, 0
  %6012 = zext i1 %6011 to i8
  store i8 %6012, i8* %59, align 1
  %6013 = lshr i32 %6005, 31
  %6014 = trunc i32 %6013 to i8
  store i8 %6014, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v307 = select i1 %6011, i64 18, i64 465
  %6015 = add i64 %6000, %.v307
  store i64 %6015, i64* %3, align 8
  br i1 %6011, label %block_46f5c8, label %block_.L_46f787

block_46f5c8:                                     ; preds = %block_46f5b6
  %6016 = load i64, i64* %RBP.i, align 8
  %6017 = add i64 %6016, -42
  %6018 = add i64 %6015, 4
  store i64 %6018, i64* %3, align 8
  %6019 = inttoptr i64 %6017 to i16*
  %6020 = load i16, i16* %6019, align 2
  %6021 = sext i16 %6020 to i64
  %6022 = and i64 %6021, 4294967295
  store i64 %6022, i64* %.pre243, align 8
  %6023 = sext i16 %6020 to i32
  %6024 = add nsw i32 %6023, -1
  %6025 = icmp eq i16 %6020, 0
  %6026 = zext i1 %6025 to i8
  store i8 %6026, i8* %44, align 1
  %6027 = and i32 %6024, 255
  %6028 = tail call i32 @llvm.ctpop.i32(i32 %6027)
  %6029 = trunc i32 %6028 to i8
  %6030 = and i8 %6029, 1
  %6031 = xor i8 %6030, 1
  store i8 %6031, i8* %51, align 1
  %6032 = xor i32 %6024, %6023
  %6033 = lshr i32 %6032, 4
  %6034 = trunc i32 %6033 to i8
  %6035 = and i8 %6034, 1
  store i8 %6035, i8* %56, align 1
  %6036 = icmp eq i32 %6024, 0
  %6037 = zext i1 %6036 to i8
  store i8 %6037, i8* %59, align 1
  %6038 = lshr i32 %6024, 31
  %6039 = trunc i32 %6038 to i8
  store i8 %6039, i8* %62, align 1
  %6040 = lshr i32 %6023, 31
  %6041 = xor i32 %6038, %6040
  %6042 = add nuw nsw i32 %6041, %6040
  %6043 = icmp eq i32 %6042, 2
  %6044 = zext i1 %6043 to i8
  store i8 %6044, i8* %68, align 1
  %6045 = icmp ne i8 %6039, 0
  %6046 = xor i1 %6045, %6043
  %6047 = or i1 %6036, %6046
  %.v313 = select i1 %6047, i64 447, i64 13
  %6048 = add i64 %6015, %.v313
  store i64 %6048, i64* %3, align 8
  br i1 %6047, label %block_.L_46f787, label %block_46f5d5

block_46f5d5:                                     ; preds = %block_46f5c8
  %6049 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %6049, i64* %.pre243, align 8
  store i64 %6001, i64* %RCX.i6189, align 8
  %6050 = add i64 %6001, 152
  %6051 = add i64 %6048, 22
  store i64 %6051, i64* %3, align 8
  %6052 = inttoptr i64 %6050 to i32*
  %6053 = load i32, i32* %6052, align 4
  %6054 = sext i32 %6053 to i64
  %6055 = ashr i64 %6054, 1
  %6056 = lshr i64 %6055, 1
  %6057 = trunc i64 %6055 to i8
  %6058 = and i8 %6057, 1
  %6059 = trunc i64 %6056 to i32
  %6060 = and i64 %6056, 4294967295
  store i64 %6060, i64* %RDX.i5984, align 8
  store i8 %6058, i8* %44, align 1
  %6061 = and i32 %6059, 255
  %6062 = tail call i32 @llvm.ctpop.i32(i32 %6061)
  %6063 = trunc i32 %6062 to i8
  %6064 = and i8 %6063, 1
  %6065 = xor i8 %6064, 1
  store i8 %6065, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6066 = icmp eq i32 %6059, 0
  %6067 = zext i1 %6066 to i8
  store i8 %6067, i8* %59, align 1
  %6068 = lshr i64 %6055, 32
  %6069 = trunc i64 %6068 to i8
  %6070 = and i8 %6069, 1
  store i8 %6070, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6071 = add i64 %6016, -100
  %6072 = add i64 %6048, 28
  store i64 %6072, i64* %3, align 8
  %6073 = trunc i64 %6056 to i32
  %6074 = inttoptr i64 %6071 to i32*
  %6075 = load i32, i32* %6074, align 4
  %6076 = add i32 %6075, %6073
  %6077 = zext i32 %6076 to i64
  store i64 %6077, i64* %RDX.i5984, align 8
  %6078 = icmp ult i32 %6076, %6073
  %6079 = icmp ult i32 %6076, %6075
  %6080 = or i1 %6078, %6079
  %6081 = zext i1 %6080 to i8
  store i8 %6081, i8* %44, align 1
  %6082 = and i32 %6076, 255
  %6083 = tail call i32 @llvm.ctpop.i32(i32 %6082)
  %6084 = trunc i32 %6083 to i8
  %6085 = and i8 %6084, 1
  %6086 = xor i8 %6085, 1
  store i8 %6086, i8* %51, align 1
  %6087 = xor i32 %6075, %6073
  %6088 = xor i32 %6087, %6076
  %6089 = lshr i32 %6088, 4
  %6090 = trunc i32 %6089 to i8
  %6091 = and i8 %6090, 1
  store i8 %6091, i8* %56, align 1
  %6092 = icmp eq i32 %6076, 0
  %6093 = zext i1 %6092 to i8
  store i8 %6093, i8* %59, align 1
  %6094 = lshr i32 %6076, 31
  %6095 = trunc i32 %6094 to i8
  store i8 %6095, i8* %62, align 1
  %6096 = lshr i64 %6055, 32
  %6097 = trunc i64 %6096 to i32
  %6098 = and i32 %6097, 1
  %6099 = lshr i32 %6075, 31
  %6100 = xor i32 %6094, %6098
  %6101 = xor i32 %6094, %6099
  %6102 = add nuw nsw i32 %6100, %6101
  %6103 = icmp eq i32 %6102, 2
  %6104 = zext i1 %6103 to i8
  store i8 %6104, i8* %68, align 1
  %6105 = sext i32 %6076 to i64
  store i64 %6105, i64* %RCX.i6189, align 8
  %6106 = shl nsw i64 %6105, 3
  %6107 = add i64 %6049, %6106
  %6108 = add i64 %6048, 35
  store i64 %6108, i64* %3, align 8
  %6109 = inttoptr i64 %6107 to i64*
  %6110 = load i64, i64* %6109, align 8
  store i64 %6110, i64* %.pre243, align 8
  store i64 %6001, i64* %RCX.i6189, align 8
  %6111 = add i64 %6001, 156
  %6112 = add i64 %6048, 49
  store i64 %6112, i64* %3, align 8
  %6113 = inttoptr i64 %6111 to i32*
  %6114 = load i32, i32* %6113, align 4
  %6115 = sext i32 %6114 to i64
  %6116 = ashr i64 %6115, 1
  %6117 = lshr i64 %6116, 1
  %6118 = trunc i64 %6116 to i8
  %6119 = and i8 %6118, 1
  %6120 = trunc i64 %6117 to i32
  %6121 = and i64 %6117, 4294967295
  store i64 %6121, i64* %RDX.i5984, align 8
  store i8 %6119, i8* %44, align 1
  %6122 = and i32 %6120, 255
  %6123 = tail call i32 @llvm.ctpop.i32(i32 %6122)
  %6124 = trunc i32 %6123 to i8
  %6125 = and i8 %6124, 1
  %6126 = xor i8 %6125, 1
  store i8 %6126, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6127 = icmp eq i32 %6120, 0
  %6128 = zext i1 %6127 to i8
  store i8 %6128, i8* %59, align 1
  %6129 = lshr i64 %6116, 32
  %6130 = trunc i64 %6129 to i8
  %6131 = and i8 %6130, 1
  store i8 %6131, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6132 = load i64, i64* %RBP.i, align 8
  %6133 = add i64 %6132, -104
  %6134 = add i64 %6048, 55
  store i64 %6134, i64* %3, align 8
  %6135 = trunc i64 %6117 to i32
  %6136 = inttoptr i64 %6133 to i32*
  %6137 = load i32, i32* %6136, align 4
  %6138 = add i32 %6137, %6135
  %6139 = zext i32 %6138 to i64
  store i64 %6139, i64* %RDX.i5984, align 8
  %6140 = icmp ult i32 %6138, %6135
  %6141 = icmp ult i32 %6138, %6137
  %6142 = or i1 %6140, %6141
  %6143 = zext i1 %6142 to i8
  store i8 %6143, i8* %44, align 1
  %6144 = and i32 %6138, 255
  %6145 = tail call i32 @llvm.ctpop.i32(i32 %6144)
  %6146 = trunc i32 %6145 to i8
  %6147 = and i8 %6146, 1
  %6148 = xor i8 %6147, 1
  store i8 %6148, i8* %51, align 1
  %6149 = xor i32 %6137, %6135
  %6150 = xor i32 %6149, %6138
  %6151 = lshr i32 %6150, 4
  %6152 = trunc i32 %6151 to i8
  %6153 = and i8 %6152, 1
  store i8 %6153, i8* %56, align 1
  %6154 = icmp eq i32 %6138, 0
  %6155 = zext i1 %6154 to i8
  store i8 %6155, i8* %59, align 1
  %6156 = lshr i32 %6138, 31
  %6157 = trunc i32 %6156 to i8
  store i8 %6157, i8* %62, align 1
  %6158 = lshr i64 %6116, 32
  %6159 = trunc i64 %6158 to i32
  %6160 = and i32 %6159, 1
  %6161 = lshr i32 %6137, 31
  %6162 = xor i32 %6156, %6160
  %6163 = xor i32 %6156, %6161
  %6164 = add nuw nsw i32 %6162, %6163
  %6165 = icmp eq i32 %6164, 2
  %6166 = zext i1 %6165 to i8
  store i8 %6166, i8* %68, align 1
  %6167 = sext i32 %6138 to i64
  store i64 %6167, i64* %RCX.i6189, align 8
  %6168 = shl nsw i64 %6167, 3
  %6169 = add i64 %6110, %6168
  %6170 = add i64 %6048, 62
  store i64 %6170, i64* %3, align 8
  %6171 = inttoptr i64 %6169 to i64*
  %6172 = load i64, i64* %6171, align 8
  store i64 %6172, i64* %.pre243, align 8
  %6173 = add i64 %6132, -42
  %6174 = add i64 %6048, 66
  store i64 %6174, i64* %3, align 8
  %6175 = inttoptr i64 %6173 to i16*
  %6176 = load i16, i16* %6175, align 2
  %6177 = sext i16 %6176 to i32
  %6178 = add nsw i32 %6177, -2
  %6179 = zext i32 %6178 to i64
  store i64 %6179, i64* %RDX.i5984, align 8
  %6180 = icmp ult i16 %6176, 2
  %6181 = zext i1 %6180 to i8
  store i8 %6181, i8* %44, align 1
  %6182 = and i32 %6178, 255
  %6183 = tail call i32 @llvm.ctpop.i32(i32 %6182)
  %6184 = trunc i32 %6183 to i8
  %6185 = and i8 %6184, 1
  %6186 = xor i8 %6185, 1
  store i8 %6186, i8* %51, align 1
  %6187 = zext i16 %6176 to i32
  %6188 = xor i32 %6178, %6187
  %6189 = lshr i32 %6188, 4
  %6190 = trunc i32 %6189 to i8
  %6191 = and i8 %6190, 1
  store i8 %6191, i8* %56, align 1
  %6192 = icmp eq i32 %6178, 0
  %6193 = zext i1 %6192 to i8
  store i8 %6193, i8* %59, align 1
  %6194 = lshr i32 %6178, 31
  %6195 = trunc i32 %6194 to i8
  store i8 %6195, i8* %62, align 1
  %6196 = lshr i32 %6177, 31
  %6197 = xor i32 %6194, %6196
  %6198 = add nuw nsw i32 %6197, %6196
  %6199 = icmp eq i32 %6198, 2
  %6200 = zext i1 %6199 to i8
  store i8 %6200, i8* %68, align 1
  %6201 = sext i32 %6178 to i64
  store i64 %6201, i64* %RCX.i6189, align 8
  %6202 = shl nsw i64 %6201, 3
  %6203 = add i64 %6172, %6202
  %6204 = add i64 %6048, 76
  store i64 %6204, i64* %3, align 8
  %6205 = inttoptr i64 %6203 to i64*
  %6206 = load i64, i64* %6205, align 8
  store i64 %6206, i64* %.pre243, align 8
  %6207 = load i64, i64* %RBP.i, align 8
  %6208 = add i64 %6207, -60
  %6209 = add i64 %6048, 80
  store i64 %6209, i64* %3, align 8
  %6210 = inttoptr i64 %6208 to i32*
  %6211 = load i32, i32* %6210, align 4
  %6212 = sext i32 %6211 to i64
  store i64 %6212, i64* %RCX.i6189, align 8
  %6213 = shl nsw i64 %6212, 3
  %6214 = add i64 %6213, %6206
  %6215 = add i64 %6048, 84
  store i64 %6215, i64* %3, align 8
  %6216 = inttoptr i64 %6214 to i64*
  %6217 = load i64, i64* %6216, align 8
  store i64 %6217, i64* %.pre243, align 8
  %6218 = add i64 %6048, 86
  store i64 %6218, i64* %3, align 8
  %6219 = inttoptr i64 %6217 to i32*
  %6220 = load i32, i32* %6219, align 4
  %6221 = zext i32 %6220 to i64
  store i64 %6221, i64* %RDX.i5984, align 8
  store i32 %6220, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %6222 = load i32, i32* bitcast (%G_0x6f934c_type* @G_0x6f934c to i32*), align 8
  store i8 0, i8* %44, align 1
  %6223 = and i32 %6222, 255
  %6224 = tail call i32 @llvm.ctpop.i32(i32 %6223)
  %6225 = trunc i32 %6224 to i8
  %6226 = and i8 %6225, 1
  %6227 = xor i8 %6226, 1
  store i8 %6227, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6228 = icmp eq i32 %6222, 0
  %6229 = zext i1 %6228 to i8
  store i8 %6229, i8* %59, align 1
  %6230 = lshr i32 %6222, 31
  %6231 = trunc i32 %6230 to i8
  store i8 %6231, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v314 = select i1 %6228, i64 120, i64 107
  %6232 = add i64 %6048, %.v314
  store i64 %6232, i64* %3, align 8
  br i1 %6228, label %block_.L_46f64d, label %block_46f640

block_46f640:                                     ; preds = %block_46f5d5
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %6233 = add i64 %6207, -316
  %6234 = add i64 %6232, 8
  store i64 %6234, i64* %3, align 8
  %6235 = inttoptr i64 %6233 to i32*
  store i32 0, i32* %6235, align 4
  %6236 = load i64, i64* %3, align 8
  %6237 = add i64 %6236, 18
  store i64 %6237, i64* %3, align 8
  br label %block_.L_46f65a

block_.L_46f64d:                                  ; preds = %block_46f5d5
  store i64 %6221, i64* %.pre243, align 8
  %6238 = add i64 %6207, -316
  %6239 = add i64 %6232, 13
  store i64 %6239, i64* %3, align 8
  %6240 = inttoptr i64 %6238 to i32*
  store i32 %6220, i32* %6240, align 4
  %.pre176 = load i64, i64* %3, align 8
  br label %block_.L_46f65a

block_.L_46f65a:                                  ; preds = %block_.L_46f64d, %block_46f640
  %6241 = phi i64 [ %.pre176, %block_.L_46f64d ], [ %6237, %block_46f640 ]
  %6242 = load i64, i64* %RBP.i, align 8
  %6243 = add i64 %6242, -316
  %6244 = add i64 %6241, 6
  store i64 %6244, i64* %3, align 8
  %6245 = inttoptr i64 %6243 to i32*
  %6246 = load i32, i32* %6245, align 4
  %6247 = zext i32 %6246 to i64
  store i64 %6247, i64* %.pre243, align 8
  store i32 %6246, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %6248 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %6248, i64* %RCX.i6189, align 8
  %6249 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6249, i64* %RDX.i5984, align 8
  %6250 = add i64 %6249, 152
  %6251 = add i64 %6241, 35
  store i64 %6251, i64* %3, align 8
  %6252 = inttoptr i64 %6250 to i32*
  %6253 = load i32, i32* %6252, align 4
  %6254 = sext i32 %6253 to i64
  %6255 = ashr i64 %6254, 1
  %6256 = lshr i64 %6255, 1
  %6257 = trunc i64 %6255 to i8
  %6258 = and i8 %6257, 1
  %6259 = trunc i64 %6256 to i32
  %6260 = and i64 %6256, 4294967295
  store i64 %6260, i64* %.pre243, align 8
  store i8 %6258, i8* %44, align 1
  %6261 = and i32 %6259, 255
  %6262 = tail call i32 @llvm.ctpop.i32(i32 %6261)
  %6263 = trunc i32 %6262 to i8
  %6264 = and i8 %6263, 1
  %6265 = xor i8 %6264, 1
  store i8 %6265, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6266 = icmp eq i32 %6259, 0
  %6267 = zext i1 %6266 to i8
  store i8 %6267, i8* %59, align 1
  %6268 = lshr i64 %6255, 32
  %6269 = trunc i64 %6268 to i8
  %6270 = and i8 %6269, 1
  store i8 %6270, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6271 = add i64 %6242, -100
  %6272 = add i64 %6241, 41
  store i64 %6272, i64* %3, align 8
  %6273 = trunc i64 %6256 to i32
  %6274 = inttoptr i64 %6271 to i32*
  %6275 = load i32, i32* %6274, align 4
  %6276 = add i32 %6275, %6273
  %6277 = zext i32 %6276 to i64
  store i64 %6277, i64* %.pre243, align 8
  %6278 = icmp ult i32 %6276, %6273
  %6279 = icmp ult i32 %6276, %6275
  %6280 = or i1 %6278, %6279
  %6281 = zext i1 %6280 to i8
  store i8 %6281, i8* %44, align 1
  %6282 = and i32 %6276, 255
  %6283 = tail call i32 @llvm.ctpop.i32(i32 %6282)
  %6284 = trunc i32 %6283 to i8
  %6285 = and i8 %6284, 1
  %6286 = xor i8 %6285, 1
  store i8 %6286, i8* %51, align 1
  %6287 = xor i32 %6275, %6273
  %6288 = xor i32 %6287, %6276
  %6289 = lshr i32 %6288, 4
  %6290 = trunc i32 %6289 to i8
  %6291 = and i8 %6290, 1
  store i8 %6291, i8* %56, align 1
  %6292 = icmp eq i32 %6276, 0
  %6293 = zext i1 %6292 to i8
  store i8 %6293, i8* %59, align 1
  %6294 = lshr i32 %6276, 31
  %6295 = trunc i32 %6294 to i8
  store i8 %6295, i8* %62, align 1
  %6296 = lshr i64 %6255, 32
  %6297 = trunc i64 %6296 to i32
  %6298 = and i32 %6297, 1
  %6299 = lshr i32 %6275, 31
  %6300 = xor i32 %6294, %6298
  %6301 = xor i32 %6294, %6299
  %6302 = add nuw nsw i32 %6300, %6301
  %6303 = icmp eq i32 %6302, 2
  %6304 = zext i1 %6303 to i8
  store i8 %6304, i8* %68, align 1
  %6305 = sext i32 %6276 to i64
  store i64 %6305, i64* %RDX.i5984, align 8
  %6306 = shl nsw i64 %6305, 3
  %6307 = add i64 %6248, %6306
  %6308 = add i64 %6241, 48
  store i64 %6308, i64* %3, align 8
  %6309 = inttoptr i64 %6307 to i64*
  %6310 = load i64, i64* %6309, align 8
  store i64 %6310, i64* %RCX.i6189, align 8
  store i64 %6249, i64* %RDX.i5984, align 8
  %6311 = add i64 %6249, 156
  %6312 = add i64 %6241, 62
  store i64 %6312, i64* %3, align 8
  %6313 = inttoptr i64 %6311 to i32*
  %6314 = load i32, i32* %6313, align 4
  %6315 = sext i32 %6314 to i64
  %6316 = ashr i64 %6315, 1
  %6317 = lshr i64 %6316, 1
  %6318 = trunc i64 %6316 to i8
  %6319 = and i8 %6318, 1
  %6320 = trunc i64 %6317 to i32
  %6321 = and i64 %6317, 4294967295
  store i64 %6321, i64* %.pre243, align 8
  store i8 %6319, i8* %44, align 1
  %6322 = and i32 %6320, 255
  %6323 = tail call i32 @llvm.ctpop.i32(i32 %6322)
  %6324 = trunc i32 %6323 to i8
  %6325 = and i8 %6324, 1
  %6326 = xor i8 %6325, 1
  store i8 %6326, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6327 = icmp eq i32 %6320, 0
  %6328 = zext i1 %6327 to i8
  store i8 %6328, i8* %59, align 1
  %6329 = lshr i64 %6316, 32
  %6330 = trunc i64 %6329 to i8
  %6331 = and i8 %6330, 1
  store i8 %6331, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6332 = load i64, i64* %RBP.i, align 8
  %6333 = add i64 %6332, -104
  %6334 = add i64 %6241, 68
  store i64 %6334, i64* %3, align 8
  %6335 = trunc i64 %6317 to i32
  %6336 = inttoptr i64 %6333 to i32*
  %6337 = load i32, i32* %6336, align 4
  %6338 = add i32 %6337, %6335
  %6339 = zext i32 %6338 to i64
  store i64 %6339, i64* %.pre243, align 8
  %6340 = icmp ult i32 %6338, %6335
  %6341 = icmp ult i32 %6338, %6337
  %6342 = or i1 %6340, %6341
  %6343 = zext i1 %6342 to i8
  store i8 %6343, i8* %44, align 1
  %6344 = and i32 %6338, 255
  %6345 = tail call i32 @llvm.ctpop.i32(i32 %6344)
  %6346 = trunc i32 %6345 to i8
  %6347 = and i8 %6346, 1
  %6348 = xor i8 %6347, 1
  store i8 %6348, i8* %51, align 1
  %6349 = xor i32 %6337, %6335
  %6350 = xor i32 %6349, %6338
  %6351 = lshr i32 %6350, 4
  %6352 = trunc i32 %6351 to i8
  %6353 = and i8 %6352, 1
  store i8 %6353, i8* %56, align 1
  %6354 = icmp eq i32 %6338, 0
  %6355 = zext i1 %6354 to i8
  store i8 %6355, i8* %59, align 1
  %6356 = lshr i32 %6338, 31
  %6357 = trunc i32 %6356 to i8
  store i8 %6357, i8* %62, align 1
  %6358 = lshr i64 %6316, 32
  %6359 = trunc i64 %6358 to i32
  %6360 = and i32 %6359, 1
  %6361 = lshr i32 %6337, 31
  %6362 = xor i32 %6356, %6360
  %6363 = xor i32 %6356, %6361
  %6364 = add nuw nsw i32 %6362, %6363
  %6365 = icmp eq i32 %6364, 2
  %6366 = zext i1 %6365 to i8
  store i8 %6366, i8* %68, align 1
  %6367 = sext i32 %6338 to i64
  store i64 %6367, i64* %RDX.i5984, align 8
  %6368 = shl nsw i64 %6367, 3
  %6369 = add i64 %6310, %6368
  %6370 = add i64 %6241, 75
  store i64 %6370, i64* %3, align 8
  %6371 = inttoptr i64 %6369 to i64*
  %6372 = load i64, i64* %6371, align 8
  store i64 %6372, i64* %RCX.i6189, align 8
  %6373 = add i64 %6332, -42
  %6374 = add i64 %6241, 79
  store i64 %6374, i64* %3, align 8
  %6375 = inttoptr i64 %6373 to i16*
  %6376 = load i16, i16* %6375, align 2
  %6377 = sext i16 %6376 to i32
  %6378 = add nsw i32 %6377, -2
  %6379 = zext i32 %6378 to i64
  store i64 %6379, i64* %.pre243, align 8
  %6380 = icmp ult i16 %6376, 2
  %6381 = zext i1 %6380 to i8
  store i8 %6381, i8* %44, align 1
  %6382 = and i32 %6378, 255
  %6383 = tail call i32 @llvm.ctpop.i32(i32 %6382)
  %6384 = trunc i32 %6383 to i8
  %6385 = and i8 %6384, 1
  %6386 = xor i8 %6385, 1
  store i8 %6386, i8* %51, align 1
  %6387 = zext i16 %6376 to i32
  %6388 = xor i32 %6378, %6387
  %6389 = lshr i32 %6388, 4
  %6390 = trunc i32 %6389 to i8
  %6391 = and i8 %6390, 1
  store i8 %6391, i8* %56, align 1
  %6392 = icmp eq i32 %6378, 0
  %6393 = zext i1 %6392 to i8
  store i8 %6393, i8* %59, align 1
  %6394 = lshr i32 %6378, 31
  %6395 = trunc i32 %6394 to i8
  store i8 %6395, i8* %62, align 1
  %6396 = lshr i32 %6377, 31
  %6397 = xor i32 %6394, %6396
  %6398 = add nuw nsw i32 %6397, %6396
  %6399 = icmp eq i32 %6398, 2
  %6400 = zext i1 %6399 to i8
  store i8 %6400, i8* %68, align 1
  %6401 = sext i32 %6378 to i64
  store i64 %6401, i64* %RDX.i5984, align 8
  %6402 = shl nsw i64 %6401, 3
  %6403 = add i64 %6372, %6402
  %6404 = add i64 %6241, 89
  store i64 %6404, i64* %3, align 8
  %6405 = inttoptr i64 %6403 to i64*
  %6406 = load i64, i64* %6405, align 8
  store i64 %6406, i64* %RCX.i6189, align 8
  %6407 = load i64, i64* %RBP.i, align 8
  %6408 = add i64 %6407, -60
  %6409 = add i64 %6241, 93
  store i64 %6409, i64* %3, align 8
  %6410 = inttoptr i64 %6408 to i32*
  %6411 = load i32, i32* %6410, align 4
  %6412 = sext i32 %6411 to i64
  store i64 %6412, i64* %RDX.i5984, align 8
  %6413 = shl nsw i64 %6412, 3
  %6414 = add i64 %6413, %6406
  %6415 = add i64 %6241, 97
  store i64 %6415, i64* %3, align 8
  %6416 = inttoptr i64 %6414 to i64*
  %6417 = load i64, i64* %6416, align 8
  store i64 %6417, i64* %RCX.i6189, align 8
  %6418 = add i64 %6417, 4
  %6419 = add i64 %6241, 100
  store i64 %6419, i64* %3, align 8
  %6420 = inttoptr i64 %6418 to i32*
  %6421 = load i32, i32* %6420, align 4
  %6422 = zext i32 %6421 to i64
  store i32 %6421, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  store i64 %6422, i64* %.pre243, align 8
  %RSI.i3817 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %6423 = add i64 %6407, -42
  %6424 = add i64 %6241, 118
  store i64 %6424, i64* %3, align 8
  %6425 = inttoptr i64 %6423 to i16*
  %6426 = load i16, i16* %6425, align 2
  %6427 = ashr i16 %6426, 1
  %addconv = add nsw i16 %6427, 1
  %6428 = sext i16 %addconv to i64
  %6429 = and i64 %6428, 4294967295
  store i64 %6429, i64* %RSI.i3817, align 8
  %6430 = sext i32 %6421 to i64
  %6431 = sext i16 %addconv to i64
  %6432 = mul nsw i64 %6431, %6430
  %6433 = trunc i64 %6432 to i32
  %6434 = and i64 %6432, 4294967295
  store i64 %6434, i64* %.pre243, align 8
  %6435 = shl i64 %6432, 32
  %6436 = ashr exact i64 %6435, 32
  %6437 = icmp ne i64 %6436, %6432
  %6438 = zext i1 %6437 to i8
  store i8 %6438, i8* %44, align 1
  %6439 = and i32 %6433, 255
  %6440 = tail call i32 @llvm.ctpop.i32(i32 %6439)
  %6441 = trunc i32 %6440 to i8
  %6442 = and i8 %6441, 1
  %6443 = xor i8 %6442, 1
  store i8 %6443, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %6444 = lshr i32 %6433, 31
  %6445 = trunc i32 %6444 to i8
  store i8 %6445, i8* %62, align 1
  store i8 %6438, i8* %68, align 1
  %6446 = bitcast [32 x %union.VectorReg]* %111 to i8*
  %6447 = trunc i64 %6432 to i32
  %6448 = bitcast [32 x %union.VectorReg]* %111 to <2 x i32>*
  %6449 = load <2 x i32>, <2 x i32>* %6448, align 1
  %6450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %6451 = bitcast i64* %6450 to <2 x i32>*
  %6452 = load <2 x i32>, <2 x i32>* %6451, align 1
  %6453 = sitofp i32 %6447 to float
  %6454 = bitcast [32 x %union.VectorReg]* %111 to float*
  store float %6453, float* %6454, align 1
  %6455 = extractelement <2 x i32> %6449, i32 1
  %6456 = getelementptr inbounds i8, i8* %6446, i64 4
  %6457 = bitcast i8* %6456 to i32*
  store i32 %6455, i32* %6457, align 1
  %6458 = extractelement <2 x i32> %6452, i32 0
  %6459 = bitcast i64* %6450 to i32*
  store i32 %6458, i32* %6459, align 1
  %6460 = extractelement <2 x i32> %6452, i32 1
  %6461 = getelementptr inbounds i8, i8* %6446, i64 12
  %6462 = bitcast i8* %6461 to i32*
  store i32 %6460, i32* %6462, align 1
  %6463 = load i64, i64* %RBP.i, align 8
  %6464 = add i64 %6463, -42
  %6465 = add i64 %6241, 134
  store i64 %6465, i64* %3, align 8
  %6466 = inttoptr i64 %6464 to i16*
  %6467 = load i16, i16* %6466, align 2
  %6468 = sext i16 %6467 to i64
  %6469 = ashr i64 %6468, 1
  %6470 = trunc i16 %6467 to i8
  %6471 = and i8 %6470, 1
  %6472 = trunc i64 %6469 to i32
  store i8 %6471, i8* %44, align 1
  %6473 = and i32 %6472, 255
  %6474 = tail call i32 @llvm.ctpop.i32(i32 %6473)
  %6475 = trunc i32 %6474 to i8
  %6476 = and i8 %6475, 1
  %6477 = xor i8 %6476, 1
  store i8 %6477, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6478 = icmp eq i32 %6472, 0
  %6479 = zext i1 %6478 to i8
  store i8 %6479, i8* %59, align 1
  %6480 = lshr i64 %6469, 31
  %6481 = trunc i64 %6480 to i8
  %6482 = and i8 %6481, 1
  store i8 %6482, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6484 = bitcast %union.VectorReg* %6483 to i8*
  %6485 = trunc i64 %6469 to i32
  %6486 = bitcast %union.VectorReg* %6483 to <2 x i32>*
  %6487 = load <2 x i32>, <2 x i32>* %6486, align 1
  %6488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %6489 = bitcast i64* %6488 to <2 x i32>*
  %6490 = load <2 x i32>, <2 x i32>* %6489, align 1
  %6491 = sitofp i32 %6485 to float
  %6492 = bitcast %union.VectorReg* %6483 to float*
  store float %6491, float* %6492, align 1
  %6493 = extractelement <2 x i32> %6487, i32 1
  %6494 = getelementptr inbounds i8, i8* %6484, i64 4
  %6495 = bitcast i8* %6494 to i32*
  store i32 %6493, i32* %6495, align 1
  %6496 = extractelement <2 x i32> %6490, i32 0
  %6497 = bitcast i64* %6488 to i32*
  store i32 %6496, i32* %6497, align 1
  %6498 = extractelement <2 x i32> %6490, i32 1
  %6499 = getelementptr inbounds i8, i8* %6484, i64 12
  %6500 = bitcast i8* %6499 to i32*
  store i32 %6498, i32* %6500, align 1
  %6501 = bitcast [32 x %union.VectorReg]* %111 to <2 x float>*
  %6502 = load <2 x float>, <2 x float>* %6501, align 1
  %6503 = load <2 x i32>, <2 x i32>* %6451, align 1
  %6504 = bitcast %union.VectorReg* %6483 to <2 x float>*
  %6505 = load <2 x float>, <2 x float>* %6504, align 1
  %6506 = extractelement <2 x float> %6502, i32 0
  %6507 = extractelement <2 x float> %6505, i32 0
  %6508 = fdiv float %6506, %6507
  store float %6508, float* %6454, align 1
  %6509 = bitcast <2 x float> %6502 to <2 x i32>
  %6510 = extractelement <2 x i32> %6509, i32 1
  store i32 %6510, i32* %6457, align 1
  %6511 = extractelement <2 x i32> %6503, i32 0
  store i32 %6511, i32* %6459, align 1
  %6512 = extractelement <2 x i32> %6503, i32 1
  store i32 %6512, i32* %6462, align 1
  %6513 = load <2 x float>, <2 x float>* %6501, align 1
  %6514 = extractelement <2 x float> %6513, i32 0
  %6515 = tail call float @llvm.trunc.f32(float %6514)
  %6516 = tail call float @llvm.fabs.f32(float %6515)
  %6517 = fcmp ogt float %6516, 0x41E0000000000000
  %6518 = fptosi float %6515 to i32
  %6519 = zext i32 %6518 to i64
  %6520 = select i1 %6517, i64 2147483648, i64 %6519
  store i64 %6520, i64* %.pre243, align 8
  %6521 = trunc i64 %6520 to i32
  store i32 %6521, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  %6522 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %6522, i64* %RCX.i6189, align 8
  %6523 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %6523, i64* %RDX.i5984, align 8
  %6524 = add i64 %6523, 152
  %6525 = add i64 %6241, 177
  store i64 %6525, i64* %3, align 8
  %6526 = inttoptr i64 %6524 to i32*
  %6527 = load i32, i32* %6526, align 4
  %6528 = sext i32 %6527 to i64
  %6529 = ashr i64 %6528, 1
  %6530 = lshr i64 %6529, 1
  %6531 = trunc i64 %6529 to i8
  %6532 = and i8 %6531, 1
  %6533 = trunc i64 %6530 to i32
  %6534 = and i64 %6530, 4294967295
  store i64 %6534, i64* %.pre243, align 8
  store i8 %6532, i8* %44, align 1
  %6535 = and i32 %6533, 255
  %6536 = tail call i32 @llvm.ctpop.i32(i32 %6535)
  %6537 = trunc i32 %6536 to i8
  %6538 = and i8 %6537, 1
  %6539 = xor i8 %6538, 1
  store i8 %6539, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6540 = icmp eq i32 %6533, 0
  %6541 = zext i1 %6540 to i8
  store i8 %6541, i8* %59, align 1
  %6542 = lshr i64 %6529, 32
  %6543 = trunc i64 %6542 to i8
  %6544 = and i8 %6543, 1
  store i8 %6544, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6545 = load i64, i64* %RBP.i, align 8
  %6546 = add i64 %6545, -100
  %6547 = add i64 %6241, 183
  store i64 %6547, i64* %3, align 8
  %6548 = trunc i64 %6530 to i32
  %6549 = inttoptr i64 %6546 to i32*
  %6550 = load i32, i32* %6549, align 4
  %6551 = add i32 %6550, %6548
  %6552 = zext i32 %6551 to i64
  store i64 %6552, i64* %.pre243, align 8
  %6553 = icmp ult i32 %6551, %6548
  %6554 = icmp ult i32 %6551, %6550
  %6555 = or i1 %6553, %6554
  %6556 = zext i1 %6555 to i8
  store i8 %6556, i8* %44, align 1
  %6557 = and i32 %6551, 255
  %6558 = tail call i32 @llvm.ctpop.i32(i32 %6557)
  %6559 = trunc i32 %6558 to i8
  %6560 = and i8 %6559, 1
  %6561 = xor i8 %6560, 1
  store i8 %6561, i8* %51, align 1
  %6562 = xor i32 %6550, %6548
  %6563 = xor i32 %6562, %6551
  %6564 = lshr i32 %6563, 4
  %6565 = trunc i32 %6564 to i8
  %6566 = and i8 %6565, 1
  store i8 %6566, i8* %56, align 1
  %6567 = icmp eq i32 %6551, 0
  %6568 = zext i1 %6567 to i8
  store i8 %6568, i8* %59, align 1
  %6569 = lshr i32 %6551, 31
  %6570 = trunc i32 %6569 to i8
  store i8 %6570, i8* %62, align 1
  %6571 = lshr i64 %6529, 32
  %6572 = trunc i64 %6571 to i32
  %6573 = and i32 %6572, 1
  %6574 = lshr i32 %6550, 31
  %6575 = xor i32 %6569, %6573
  %6576 = xor i32 %6569, %6574
  %6577 = add nuw nsw i32 %6575, %6576
  %6578 = icmp eq i32 %6577, 2
  %6579 = zext i1 %6578 to i8
  store i8 %6579, i8* %68, align 1
  %6580 = sext i32 %6551 to i64
  store i64 %6580, i64* %RDX.i5984, align 8
  %6581 = shl nsw i64 %6580, 3
  %6582 = add i64 %6522, %6581
  %6583 = add i64 %6241, 190
  store i64 %6583, i64* %3, align 8
  %6584 = inttoptr i64 %6582 to i64*
  %6585 = load i64, i64* %6584, align 8
  store i64 %6585, i64* %RCX.i6189, align 8
  store i64 %6523, i64* %RDX.i5984, align 8
  %6586 = add i64 %6523, 156
  %6587 = add i64 %6241, 204
  store i64 %6587, i64* %3, align 8
  %6588 = inttoptr i64 %6586 to i32*
  %6589 = load i32, i32* %6588, align 4
  %6590 = sext i32 %6589 to i64
  %6591 = ashr i64 %6590, 1
  %6592 = lshr i64 %6591, 1
  %6593 = trunc i64 %6591 to i8
  %6594 = and i8 %6593, 1
  %6595 = trunc i64 %6592 to i32
  %6596 = and i64 %6592, 4294967295
  store i64 %6596, i64* %.pre243, align 8
  store i8 %6594, i8* %44, align 1
  %6597 = and i32 %6595, 255
  %6598 = tail call i32 @llvm.ctpop.i32(i32 %6597)
  %6599 = trunc i32 %6598 to i8
  %6600 = and i8 %6599, 1
  %6601 = xor i8 %6600, 1
  store i8 %6601, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6602 = icmp eq i32 %6595, 0
  %6603 = zext i1 %6602 to i8
  store i8 %6603, i8* %59, align 1
  %6604 = lshr i64 %6591, 32
  %6605 = trunc i64 %6604 to i8
  %6606 = and i8 %6605, 1
  store i8 %6606, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6607 = add i64 %6545, -104
  %6608 = add i64 %6241, 210
  store i64 %6608, i64* %3, align 8
  %6609 = trunc i64 %6592 to i32
  %6610 = inttoptr i64 %6607 to i32*
  %6611 = load i32, i32* %6610, align 4
  %6612 = add i32 %6611, %6609
  %6613 = zext i32 %6612 to i64
  store i64 %6613, i64* %.pre243, align 8
  %6614 = icmp ult i32 %6612, %6609
  %6615 = icmp ult i32 %6612, %6611
  %6616 = or i1 %6614, %6615
  %6617 = zext i1 %6616 to i8
  store i8 %6617, i8* %44, align 1
  %6618 = and i32 %6612, 255
  %6619 = tail call i32 @llvm.ctpop.i32(i32 %6618)
  %6620 = trunc i32 %6619 to i8
  %6621 = and i8 %6620, 1
  %6622 = xor i8 %6621, 1
  store i8 %6622, i8* %51, align 1
  %6623 = xor i32 %6611, %6609
  %6624 = xor i32 %6623, %6612
  %6625 = lshr i32 %6624, 4
  %6626 = trunc i32 %6625 to i8
  %6627 = and i8 %6626, 1
  store i8 %6627, i8* %56, align 1
  %6628 = icmp eq i32 %6612, 0
  %6629 = zext i1 %6628 to i8
  store i8 %6629, i8* %59, align 1
  %6630 = lshr i32 %6612, 31
  %6631 = trunc i32 %6630 to i8
  store i8 %6631, i8* %62, align 1
  %6632 = lshr i64 %6591, 32
  %6633 = trunc i64 %6632 to i32
  %6634 = and i32 %6633, 1
  %6635 = lshr i32 %6611, 31
  %6636 = xor i32 %6630, %6634
  %6637 = xor i32 %6630, %6635
  %6638 = add nuw nsw i32 %6636, %6637
  %6639 = icmp eq i32 %6638, 2
  %6640 = zext i1 %6639 to i8
  store i8 %6640, i8* %68, align 1
  %6641 = sext i32 %6612 to i64
  store i64 %6641, i64* %RDX.i5984, align 8
  %6642 = shl nsw i64 %6641, 3
  %6643 = add i64 %6585, %6642
  %6644 = add i64 %6241, 217
  store i64 %6644, i64* %3, align 8
  %6645 = inttoptr i64 %6643 to i64*
  %6646 = load i64, i64* %6645, align 8
  store i64 %6646, i64* %RCX.i6189, align 8
  %6647 = load i64, i64* %RBP.i, align 8
  %6648 = add i64 %6647, -42
  %6649 = add i64 %6241, 221
  store i64 %6649, i64* %3, align 8
  %6650 = inttoptr i64 %6648 to i16*
  %6651 = load i16, i16* %6650, align 2
  %6652 = sext i16 %6651 to i32
  %6653 = add nsw i32 %6652, -2
  %6654 = zext i32 %6653 to i64
  store i64 %6654, i64* %.pre243, align 8
  %6655 = icmp ult i16 %6651, 2
  %6656 = zext i1 %6655 to i8
  store i8 %6656, i8* %44, align 1
  %6657 = and i32 %6653, 255
  %6658 = tail call i32 @llvm.ctpop.i32(i32 %6657)
  %6659 = trunc i32 %6658 to i8
  %6660 = and i8 %6659, 1
  %6661 = xor i8 %6660, 1
  store i8 %6661, i8* %51, align 1
  %6662 = zext i16 %6651 to i32
  %6663 = xor i32 %6653, %6662
  %6664 = lshr i32 %6663, 4
  %6665 = trunc i32 %6664 to i8
  %6666 = and i8 %6665, 1
  store i8 %6666, i8* %56, align 1
  %6667 = icmp eq i32 %6653, 0
  %6668 = zext i1 %6667 to i8
  store i8 %6668, i8* %59, align 1
  %6669 = lshr i32 %6653, 31
  %6670 = trunc i32 %6669 to i8
  store i8 %6670, i8* %62, align 1
  %6671 = lshr i32 %6652, 31
  %6672 = xor i32 %6669, %6671
  %6673 = add nuw nsw i32 %6672, %6671
  %6674 = icmp eq i32 %6673, 2
  %6675 = zext i1 %6674 to i8
  store i8 %6675, i8* %68, align 1
  %6676 = sext i32 %6653 to i64
  store i64 %6676, i64* %RDX.i5984, align 8
  %6677 = shl nsw i64 %6676, 3
  %6678 = add i64 %6646, %6677
  %6679 = add i64 %6241, 231
  store i64 %6679, i64* %3, align 8
  %6680 = inttoptr i64 %6678 to i64*
  %6681 = load i64, i64* %6680, align 8
  store i64 %6681, i64* %RCX.i6189, align 8
  %6682 = add i64 %6647, -60
  %6683 = add i64 %6241, 235
  store i64 %6683, i64* %3, align 8
  %6684 = inttoptr i64 %6682 to i32*
  %6685 = load i32, i32* %6684, align 4
  %6686 = sext i32 %6685 to i64
  store i64 %6686, i64* %RDX.i5984, align 8
  %6687 = shl nsw i64 %6686, 3
  %6688 = add i64 %6687, %6681
  %6689 = add i64 %6241, 239
  store i64 %6689, i64* %3, align 8
  %6690 = inttoptr i64 %6688 to i64*
  %6691 = load i64, i64* %6690, align 8
  store i64 %6691, i64* %RCX.i6189, align 8
  %6692 = add i64 %6691, 8
  %6693 = add i64 %6241, 242
  store i64 %6693, i64* %3, align 8
  %6694 = inttoptr i64 %6692 to i32*
  %6695 = load i32, i32* %6694, align 4
  %6696 = zext i32 %6695 to i64
  store i32 %6695, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  store i64 %6696, i64* %.pre243, align 8
  %6697 = add i64 %6241, 260
  store i64 %6697, i64* %3, align 8
  %6698 = load i16, i16* %6650, align 2
  %6699 = ashr i16 %6698, 1
  %addconv360 = add nsw i16 %6699, 1
  %6700 = sext i16 %addconv360 to i64
  %6701 = and i64 %6700, 4294967295
  store i64 %6701, i64* %RSI.i3817, align 8
  %6702 = sext i32 %6695 to i64
  %6703 = sext i16 %addconv360 to i64
  %6704 = mul nsw i64 %6703, %6702
  %6705 = trunc i64 %6704 to i32
  %6706 = and i64 %6704, 4294967295
  store i64 %6706, i64* %.pre243, align 8
  %6707 = shl i64 %6704, 32
  %6708 = ashr exact i64 %6707, 32
  %6709 = icmp ne i64 %6708, %6704
  %6710 = zext i1 %6709 to i8
  store i8 %6710, i8* %44, align 1
  %6711 = and i32 %6705, 255
  %6712 = tail call i32 @llvm.ctpop.i32(i32 %6711)
  %6713 = trunc i32 %6712 to i8
  %6714 = and i8 %6713, 1
  %6715 = xor i8 %6714, 1
  store i8 %6715, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %6716 = lshr i32 %6705, 31
  %6717 = trunc i32 %6716 to i8
  store i8 %6717, i8* %62, align 1
  store i8 %6710, i8* %68, align 1
  %6718 = trunc i64 %6704 to i32
  %6719 = load <2 x i32>, <2 x i32>* %6448, align 1
  %6720 = load <2 x i32>, <2 x i32>* %6451, align 1
  %6721 = sitofp i32 %6718 to float
  store float %6721, float* %6454, align 1
  %6722 = extractelement <2 x i32> %6719, i32 1
  store i32 %6722, i32* %6457, align 1
  %6723 = extractelement <2 x i32> %6720, i32 0
  store i32 %6723, i32* %6459, align 1
  %6724 = extractelement <2 x i32> %6720, i32 1
  store i32 %6724, i32* %6462, align 1
  %6725 = load i64, i64* %RBP.i, align 8
  %6726 = add i64 %6725, -42
  %6727 = add i64 %6241, 276
  store i64 %6727, i64* %3, align 8
  %6728 = inttoptr i64 %6726 to i16*
  %6729 = load i16, i16* %6728, align 2
  %6730 = sext i16 %6729 to i64
  %6731 = ashr i64 %6730, 1
  %6732 = trunc i16 %6729 to i8
  %6733 = and i8 %6732, 1
  %6734 = trunc i64 %6731 to i32
  store i8 %6733, i8* %44, align 1
  %6735 = and i32 %6734, 255
  %6736 = tail call i32 @llvm.ctpop.i32(i32 %6735)
  %6737 = trunc i32 %6736 to i8
  %6738 = and i8 %6737, 1
  %6739 = xor i8 %6738, 1
  store i8 %6739, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6740 = icmp eq i32 %6734, 0
  %6741 = zext i1 %6740 to i8
  store i8 %6741, i8* %59, align 1
  %6742 = lshr i64 %6731, 31
  %6743 = trunc i64 %6742 to i8
  %6744 = and i8 %6743, 1
  store i8 %6744, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6745 = trunc i64 %6731 to i32
  %6746 = load <2 x i32>, <2 x i32>* %6486, align 1
  %6747 = load <2 x i32>, <2 x i32>* %6489, align 1
  %6748 = sitofp i32 %6745 to float
  store float %6748, float* %6492, align 1
  %6749 = extractelement <2 x i32> %6746, i32 1
  store i32 %6749, i32* %6495, align 1
  %6750 = extractelement <2 x i32> %6747, i32 0
  store i32 %6750, i32* %6497, align 1
  %6751 = extractelement <2 x i32> %6747, i32 1
  store i32 %6751, i32* %6500, align 1
  %6752 = load <2 x float>, <2 x float>* %6501, align 1
  %6753 = load <2 x i32>, <2 x i32>* %6451, align 1
  %6754 = load <2 x float>, <2 x float>* %6504, align 1
  %6755 = extractelement <2 x float> %6752, i32 0
  %6756 = extractelement <2 x float> %6754, i32 0
  %6757 = fdiv float %6755, %6756
  store float %6757, float* %6454, align 1
  %6758 = bitcast <2 x float> %6752 to <2 x i32>
  %6759 = extractelement <2 x i32> %6758, i32 1
  store i32 %6759, i32* %6457, align 1
  %6760 = extractelement <2 x i32> %6753, i32 0
  store i32 %6760, i32* %6459, align 1
  %6761 = extractelement <2 x i32> %6753, i32 1
  store i32 %6761, i32* %6462, align 1
  %6762 = load <2 x float>, <2 x float>* %6501, align 1
  %6763 = extractelement <2 x float> %6762, i32 0
  %6764 = tail call float @llvm.trunc.f32(float %6763)
  %6765 = tail call float @llvm.fabs.f32(float %6764)
  %6766 = fcmp ogt float %6765, 0x41E0000000000000
  %6767 = fptosi float %6764 to i32
  %6768 = zext i32 %6767 to i64
  %6769 = select i1 %6766, i64 2147483648, i64 %6768
  store i64 %6769, i64* %.pre243, align 8
  %6770 = trunc i64 %6769 to i32
  %6771 = add i64 %6241, 297
  store i64 %6771, i64* %3, align 8
  store i32 %6770, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  %.pre177 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  br label %block_.L_46f787

block_.L_46f787:                                  ; preds = %block_46f5b6, %block_.L_46f65a, %block_46f5c8
  %6772 = phi i64 [ %.pre177, %block_.L_46f65a ], [ %6001, %block_46f5c8 ], [ %6001, %block_46f5b6 ]
  %6773 = phi i64 [ %6771, %block_.L_46f65a ], [ %6048, %block_46f5c8 ], [ %6015, %block_46f5b6 ]
  store i64 %6772, i64* %.pre243, align 8
  %6774 = add i64 %6772, 24
  %6775 = add i64 %6773, 12
  store i64 %6775, i64* %3, align 8
  %6776 = inttoptr i64 %6774 to i32*
  %6777 = load i32, i32* %6776, align 4
  %6778 = add i32 %6777, -1
  %6779 = icmp eq i32 %6777, 0
  %6780 = zext i1 %6779 to i8
  store i8 %6780, i8* %44, align 1
  %6781 = and i32 %6778, 255
  %6782 = tail call i32 @llvm.ctpop.i32(i32 %6781)
  %6783 = trunc i32 %6782 to i8
  %6784 = and i8 %6783, 1
  %6785 = xor i8 %6784, 1
  store i8 %6785, i8* %51, align 1
  %6786 = xor i32 %6778, %6777
  %6787 = lshr i32 %6786, 4
  %6788 = trunc i32 %6787 to i8
  %6789 = and i8 %6788, 1
  store i8 %6789, i8* %56, align 1
  %6790 = icmp eq i32 %6778, 0
  %6791 = zext i1 %6790 to i8
  store i8 %6791, i8* %59, align 1
  %6792 = lshr i32 %6778, 31
  %6793 = trunc i32 %6792 to i8
  store i8 %6793, i8* %62, align 1
  %6794 = lshr i32 %6777, 31
  %6795 = xor i32 %6792, %6794
  %6796 = add nuw nsw i32 %6795, %6794
  %6797 = icmp eq i32 %6796, 2
  %6798 = zext i1 %6797 to i8
  store i8 %6798, i8* %68, align 1
  %.v308 = select i1 %6790, i64 18, i64 461
  %6799 = add i64 %6773, %.v308
  store i64 %6799, i64* %3, align 8
  br i1 %6790, label %block_46f799, label %block_.L_46f954

block_46f799:                                     ; preds = %block_.L_46f787
  %6800 = load i64, i64* %RBP.i, align 8
  %6801 = add i64 %6800, -48
  %6802 = add i64 %6799, 4
  store i64 %6802, i64* %3, align 8
  %6803 = inttoptr i64 %6801 to i32*
  %6804 = load i32, i32* %6803, align 4
  store i8 0, i8* %44, align 1
  %6805 = and i32 %6804, 255
  %6806 = tail call i32 @llvm.ctpop.i32(i32 %6805)
  %6807 = trunc i32 %6806 to i8
  %6808 = and i8 %6807, 1
  %6809 = xor i8 %6808, 1
  store i8 %6809, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6810 = icmp eq i32 %6804, 0
  %6811 = zext i1 %6810 to i8
  store i8 %6811, i8* %59, align 1
  %6812 = lshr i32 %6804, 31
  %6813 = trunc i32 %6812 to i8
  store i8 %6813, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v309 = select i1 %6810, i64 10, i64 443
  %6814 = add i64 %6799, %.v309
  store i64 %6814, i64* %3, align 8
  br i1 %6810, label %block_46f7a3, label %block_.L_46f954

block_46f7a3:                                     ; preds = %block_46f799
  %6815 = add i64 %6800, -42
  %6816 = add i64 %6814, 4
  store i64 %6816, i64* %3, align 8
  %6817 = inttoptr i64 %6815 to i16*
  %6818 = load i16, i16* %6817, align 2
  %6819 = sext i16 %6818 to i64
  %6820 = and i64 %6819, 4294967295
  store i64 %6820, i64* %.pre243, align 8
  %6821 = sext i16 %6818 to i32
  store i8 0, i8* %44, align 1
  %6822 = and i32 %6821, 255
  %6823 = tail call i32 @llvm.ctpop.i32(i32 %6822)
  %6824 = trunc i32 %6823 to i8
  %6825 = and i8 %6824, 1
  %6826 = xor i8 %6825, 1
  store i8 %6826, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6827 = icmp eq i16 %6818, 0
  %6828 = zext i1 %6827 to i8
  store i8 %6828, i8* %59, align 1
  %6829 = lshr i32 %6821, 31
  %6830 = trunc i32 %6829 to i8
  store i8 %6830, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v310 = select i1 %6827, i64 26, i64 13
  %6831 = add i64 %6814, %.v310
  store i64 %6831, i64* %3, align 8
  br i1 %6827, label %block_.L_46f7bd, label %block_46f7b0

block_46f7b0:                                     ; preds = %block_46f7a3
  %6832 = add i64 %6831, 4
  store i64 %6832, i64* %3, align 8
  %6833 = load i16, i16* %6817, align 2
  %6834 = sext i16 %6833 to i64
  %6835 = and i64 %6834, 4294967295
  store i64 %6835, i64* %.pre243, align 8
  %6836 = sext i16 %6833 to i32
  %6837 = add nsw i32 %6836, -1
  %6838 = icmp eq i16 %6833, 0
  %6839 = zext i1 %6838 to i8
  store i8 %6839, i8* %44, align 1
  %6840 = and i32 %6837, 255
  %6841 = tail call i32 @llvm.ctpop.i32(i32 %6840)
  %6842 = trunc i32 %6841 to i8
  %6843 = and i8 %6842, 1
  %6844 = xor i8 %6843, 1
  store i8 %6844, i8* %51, align 1
  %6845 = xor i32 %6837, %6836
  %6846 = lshr i32 %6845, 4
  %6847 = trunc i32 %6846 to i8
  %6848 = and i8 %6847, 1
  store i8 %6848, i8* %56, align 1
  %6849 = icmp eq i32 %6837, 0
  %6850 = zext i1 %6849 to i8
  store i8 %6850, i8* %59, align 1
  %6851 = lshr i32 %6837, 31
  %6852 = trunc i32 %6851 to i8
  store i8 %6852, i8* %62, align 1
  %6853 = lshr i32 %6836, 31
  %6854 = xor i32 %6851, %6853
  %6855 = add nuw nsw i32 %6854, %6853
  %6856 = icmp eq i32 %6855, 2
  %6857 = zext i1 %6856 to i8
  store i8 %6857, i8* %68, align 1
  %.v311 = select i1 %6849, i64 13, i64 420
  %6858 = add i64 %6831, %.v311
  store i64 %6858, i64* %3, align 8
  br i1 %6849, label %block_.L_46f7bd, label %block_.L_46f954

block_.L_46f7bd:                                  ; preds = %block_46f7b0, %block_46f7a3
  %6859 = phi i64 [ %6858, %block_46f7b0 ], [ %6831, %block_46f7a3 ]
  %6860 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %6860, i64* %.pre243, align 8
  store i64 %6772, i64* %RCX.i6189, align 8
  %6861 = add i64 %6772, 152
  %6862 = add i64 %6859, 22
  store i64 %6862, i64* %3, align 8
  %6863 = inttoptr i64 %6861 to i32*
  %6864 = load i32, i32* %6863, align 4
  %6865 = sext i32 %6864 to i64
  %6866 = ashr i64 %6865, 1
  %6867 = lshr i64 %6866, 1
  %6868 = trunc i64 %6866 to i8
  %6869 = and i8 %6868, 1
  %6870 = trunc i64 %6867 to i32
  %6871 = and i64 %6867, 4294967295
  store i64 %6871, i64* %RDX.i5984, align 8
  store i8 %6869, i8* %44, align 1
  %6872 = and i32 %6870, 255
  %6873 = tail call i32 @llvm.ctpop.i32(i32 %6872)
  %6874 = trunc i32 %6873 to i8
  %6875 = and i8 %6874, 1
  %6876 = xor i8 %6875, 1
  store i8 %6876, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6877 = icmp eq i32 %6870, 0
  %6878 = zext i1 %6877 to i8
  store i8 %6878, i8* %59, align 1
  %6879 = lshr i64 %6866, 32
  %6880 = trunc i64 %6879 to i8
  %6881 = and i8 %6880, 1
  store i8 %6881, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6882 = add i64 %6800, -100
  %6883 = add i64 %6859, 28
  store i64 %6883, i64* %3, align 8
  %6884 = trunc i64 %6867 to i32
  %6885 = inttoptr i64 %6882 to i32*
  %6886 = load i32, i32* %6885, align 4
  %6887 = add i32 %6886, %6884
  %6888 = zext i32 %6887 to i64
  store i64 %6888, i64* %RDX.i5984, align 8
  %6889 = icmp ult i32 %6887, %6884
  %6890 = icmp ult i32 %6887, %6886
  %6891 = or i1 %6889, %6890
  %6892 = zext i1 %6891 to i8
  store i8 %6892, i8* %44, align 1
  %6893 = and i32 %6887, 255
  %6894 = tail call i32 @llvm.ctpop.i32(i32 %6893)
  %6895 = trunc i32 %6894 to i8
  %6896 = and i8 %6895, 1
  %6897 = xor i8 %6896, 1
  store i8 %6897, i8* %51, align 1
  %6898 = xor i32 %6886, %6884
  %6899 = xor i32 %6898, %6887
  %6900 = lshr i32 %6899, 4
  %6901 = trunc i32 %6900 to i8
  %6902 = and i8 %6901, 1
  store i8 %6902, i8* %56, align 1
  %6903 = icmp eq i32 %6887, 0
  %6904 = zext i1 %6903 to i8
  store i8 %6904, i8* %59, align 1
  %6905 = lshr i32 %6887, 31
  %6906 = trunc i32 %6905 to i8
  store i8 %6906, i8* %62, align 1
  %6907 = lshr i64 %6866, 32
  %6908 = trunc i64 %6907 to i32
  %6909 = and i32 %6908, 1
  %6910 = lshr i32 %6886, 31
  %6911 = xor i32 %6905, %6909
  %6912 = xor i32 %6905, %6910
  %6913 = add nuw nsw i32 %6911, %6912
  %6914 = icmp eq i32 %6913, 2
  %6915 = zext i1 %6914 to i8
  store i8 %6915, i8* %68, align 1
  %6916 = sext i32 %6887 to i64
  store i64 %6916, i64* %RCX.i6189, align 8
  %6917 = shl nsw i64 %6916, 3
  %6918 = add i64 %6860, %6917
  %6919 = add i64 %6859, 35
  store i64 %6919, i64* %3, align 8
  %6920 = inttoptr i64 %6918 to i64*
  %6921 = load i64, i64* %6920, align 8
  store i64 %6921, i64* %.pre243, align 8
  store i64 %6772, i64* %RCX.i6189, align 8
  %6922 = add i64 %6772, 156
  %6923 = add i64 %6859, 49
  store i64 %6923, i64* %3, align 8
  %6924 = inttoptr i64 %6922 to i32*
  %6925 = load i32, i32* %6924, align 4
  %6926 = sext i32 %6925 to i64
  %6927 = ashr i64 %6926, 1
  %6928 = lshr i64 %6927, 1
  %6929 = trunc i64 %6927 to i8
  %6930 = and i8 %6929, 1
  %6931 = trunc i64 %6928 to i32
  %6932 = and i64 %6928, 4294967295
  store i64 %6932, i64* %RDX.i5984, align 8
  store i8 %6930, i8* %44, align 1
  %6933 = and i32 %6931, 255
  %6934 = tail call i32 @llvm.ctpop.i32(i32 %6933)
  %6935 = trunc i32 %6934 to i8
  %6936 = and i8 %6935, 1
  %6937 = xor i8 %6936, 1
  store i8 %6937, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %6938 = icmp eq i32 %6931, 0
  %6939 = zext i1 %6938 to i8
  store i8 %6939, i8* %59, align 1
  %6940 = lshr i64 %6927, 32
  %6941 = trunc i64 %6940 to i8
  %6942 = and i8 %6941, 1
  store i8 %6942, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %6943 = load i64, i64* %RBP.i, align 8
  %6944 = add i64 %6943, -104
  %6945 = add i64 %6859, 55
  store i64 %6945, i64* %3, align 8
  %6946 = trunc i64 %6928 to i32
  %6947 = inttoptr i64 %6944 to i32*
  %6948 = load i32, i32* %6947, align 4
  %6949 = add i32 %6948, %6946
  %6950 = zext i32 %6949 to i64
  store i64 %6950, i64* %RDX.i5984, align 8
  %6951 = icmp ult i32 %6949, %6946
  %6952 = icmp ult i32 %6949, %6948
  %6953 = or i1 %6951, %6952
  %6954 = zext i1 %6953 to i8
  store i8 %6954, i8* %44, align 1
  %6955 = and i32 %6949, 255
  %6956 = tail call i32 @llvm.ctpop.i32(i32 %6955)
  %6957 = trunc i32 %6956 to i8
  %6958 = and i8 %6957, 1
  %6959 = xor i8 %6958, 1
  store i8 %6959, i8* %51, align 1
  %6960 = xor i32 %6948, %6946
  %6961 = xor i32 %6960, %6949
  %6962 = lshr i32 %6961, 4
  %6963 = trunc i32 %6962 to i8
  %6964 = and i8 %6963, 1
  store i8 %6964, i8* %56, align 1
  %6965 = icmp eq i32 %6949, 0
  %6966 = zext i1 %6965 to i8
  store i8 %6966, i8* %59, align 1
  %6967 = lshr i32 %6949, 31
  %6968 = trunc i32 %6967 to i8
  store i8 %6968, i8* %62, align 1
  %6969 = lshr i64 %6927, 32
  %6970 = trunc i64 %6969 to i32
  %6971 = and i32 %6970, 1
  %6972 = lshr i32 %6948, 31
  %6973 = xor i32 %6967, %6971
  %6974 = xor i32 %6967, %6972
  %6975 = add nuw nsw i32 %6973, %6974
  %6976 = icmp eq i32 %6975, 2
  %6977 = zext i1 %6976 to i8
  store i8 %6977, i8* %68, align 1
  %6978 = sext i32 %6949 to i64
  store i64 %6978, i64* %RCX.i6189, align 8
  %6979 = shl nsw i64 %6978, 3
  %6980 = add i64 %6921, %6979
  %6981 = add i64 %6859, 62
  store i64 %6981, i64* %3, align 8
  %6982 = inttoptr i64 %6980 to i64*
  %6983 = load i64, i64* %6982, align 8
  store i64 %6983, i64* %.pre243, align 8
  %6984 = add i64 %6859, 65
  store i64 %6984, i64* %3, align 8
  %6985 = inttoptr i64 %6983 to i64*
  %6986 = load i64, i64* %6985, align 8
  store i64 %6986, i64* %.pre243, align 8
  %6987 = add i64 %6943, -60
  %6988 = add i64 %6859, 69
  store i64 %6988, i64* %3, align 8
  %6989 = inttoptr i64 %6987 to i32*
  %6990 = load i32, i32* %6989, align 4
  %6991 = sext i32 %6990 to i64
  store i64 %6991, i64* %RCX.i6189, align 8
  %6992 = shl nsw i64 %6991, 3
  %6993 = add i64 %6992, %6986
  %6994 = add i64 %6859, 73
  store i64 %6994, i64* %3, align 8
  %6995 = inttoptr i64 %6993 to i64*
  %6996 = load i64, i64* %6995, align 8
  store i64 %6996, i64* %.pre243, align 8
  %6997 = add i64 %6859, 75
  store i64 %6997, i64* %3, align 8
  %6998 = inttoptr i64 %6996 to i32*
  %6999 = load i32, i32* %6998, align 4
  %7000 = zext i32 %6999 to i64
  store i64 %7000, i64* %RDX.i5984, align 8
  store i32 %6999, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %7001 = load i32, i32* bitcast (%G_0x6f934c_type* @G_0x6f934c to i32*), align 8
  store i8 0, i8* %44, align 1
  %7002 = and i32 %7001, 255
  %7003 = tail call i32 @llvm.ctpop.i32(i32 %7002)
  %7004 = trunc i32 %7003 to i8
  %7005 = and i8 %7004, 1
  %7006 = xor i8 %7005, 1
  store i8 %7006, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7007 = icmp eq i32 %7001, 0
  %7008 = zext i1 %7007 to i8
  store i8 %7008, i8* %59, align 1
  %7009 = lshr i32 %7001, 31
  %7010 = trunc i32 %7009 to i8
  store i8 %7010, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v312 = select i1 %7007, i64 109, i64 96
  %7011 = add i64 %6859, %.v312
  store i64 %7011, i64* %3, align 8
  br i1 %7007, label %block_.L_46f82a, label %block_46f81d

block_46f81d:                                     ; preds = %block_.L_46f7bd
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %7012 = load i64, i64* %RBP.i, align 8
  %7013 = add i64 %7012, -320
  %7014 = add i64 %7011, 8
  store i64 %7014, i64* %3, align 8
  %7015 = inttoptr i64 %7013 to i32*
  store i32 0, i32* %7015, align 4
  %7016 = load i64, i64* %3, align 8
  %7017 = add i64 %7016, 18
  store i64 %7017, i64* %3, align 8
  br label %block_.L_46f837

block_.L_46f82a:                                  ; preds = %block_.L_46f7bd
  store i64 %7000, i64* %.pre243, align 8
  %7018 = load i64, i64* %RBP.i, align 8
  %7019 = add i64 %7018, -320
  %7020 = add i64 %7011, 13
  store i64 %7020, i64* %3, align 8
  %7021 = inttoptr i64 %7019 to i32*
  store i32 %6999, i32* %7021, align 4
  %.pre178 = load i64, i64* %3, align 8
  br label %block_.L_46f837

block_.L_46f837:                                  ; preds = %block_.L_46f82a, %block_46f81d
  %7022 = phi i64 [ %.pre178, %block_.L_46f82a ], [ %7017, %block_46f81d ]
  %7023 = load i64, i64* %RBP.i, align 8
  %7024 = add i64 %7023, -320
  %7025 = add i64 %7022, 6
  store i64 %7025, i64* %3, align 8
  %7026 = inttoptr i64 %7024 to i32*
  %7027 = load i32, i32* %7026, align 4
  %7028 = zext i32 %7027 to i64
  store i64 %7028, i64* %.pre243, align 8
  %7029 = bitcast [32 x %union.VectorReg]* %111 to i8*
  %7030 = add i64 %7022, add (i64 ptrtoint (%G_0x4dfef__rip__type* @G_0x4dfef__rip_ to i64), i64 6)
  %7031 = add i64 %7022, 14
  store i64 %7031, i64* %3, align 8
  %7032 = inttoptr i64 %7030 to i32*
  %7033 = load i32, i32* %7032, align 4
  %7034 = bitcast [32 x %union.VectorReg]* %111 to i32*
  store i32 %7033, i32* %7034, align 1
  %7035 = getelementptr inbounds i8, i8* %7029, i64 4
  %7036 = bitcast i8* %7035 to float*
  store float 0.000000e+00, float* %7036, align 1
  %7037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %7038 = bitcast i64* %7037 to float*
  store float 0.000000e+00, float* %7038, align 1
  %7039 = getelementptr inbounds i8, i8* %7029, i64 12
  %7040 = bitcast i8* %7039 to float*
  store float 0.000000e+00, float* %7040, align 1
  store i64 0, i64* %RCX.i6189, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  store i32 %7027, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %7041 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %7041, i64* %RDX.i5984, align 8
  %RSI.i3609 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %7042 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7042, i64* %RSI.i3609, align 8
  %7043 = add i64 %7042, 152
  %7044 = add i64 %7022, 45
  store i64 %7044, i64* %3, align 8
  %7045 = inttoptr i64 %7043 to i32*
  %7046 = load i32, i32* %7045, align 4
  %7047 = sext i32 %7046 to i64
  %7048 = ashr i64 %7047, 1
  %7049 = lshr i64 %7048, 1
  %7050 = trunc i64 %7048 to i8
  %7051 = and i8 %7050, 1
  %7052 = trunc i64 %7049 to i32
  %7053 = and i64 %7049, 4294967295
  store i64 %7053, i64* %.pre243, align 8
  store i8 %7051, i8* %44, align 1
  %7054 = and i32 %7052, 255
  %7055 = tail call i32 @llvm.ctpop.i32(i32 %7054)
  %7056 = trunc i32 %7055 to i8
  %7057 = and i8 %7056, 1
  %7058 = xor i8 %7057, 1
  store i8 %7058, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7059 = icmp eq i32 %7052, 0
  %7060 = zext i1 %7059 to i8
  store i8 %7060, i8* %59, align 1
  %7061 = lshr i64 %7048, 32
  %7062 = trunc i64 %7061 to i8
  %7063 = and i8 %7062, 1
  store i8 %7063, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %7064 = add i64 %7023, -100
  %7065 = add i64 %7022, 51
  store i64 %7065, i64* %3, align 8
  %7066 = trunc i64 %7049 to i32
  %7067 = inttoptr i64 %7064 to i32*
  %7068 = load i32, i32* %7067, align 4
  %7069 = add i32 %7068, %7066
  %7070 = zext i32 %7069 to i64
  store i64 %7070, i64* %.pre243, align 8
  %7071 = icmp ult i32 %7069, %7066
  %7072 = icmp ult i32 %7069, %7068
  %7073 = or i1 %7071, %7072
  %7074 = zext i1 %7073 to i8
  store i8 %7074, i8* %44, align 1
  %7075 = and i32 %7069, 255
  %7076 = tail call i32 @llvm.ctpop.i32(i32 %7075)
  %7077 = trunc i32 %7076 to i8
  %7078 = and i8 %7077, 1
  %7079 = xor i8 %7078, 1
  store i8 %7079, i8* %51, align 1
  %7080 = xor i32 %7068, %7066
  %7081 = xor i32 %7080, %7069
  %7082 = lshr i32 %7081, 4
  %7083 = trunc i32 %7082 to i8
  %7084 = and i8 %7083, 1
  store i8 %7084, i8* %56, align 1
  %7085 = icmp eq i32 %7069, 0
  %7086 = zext i1 %7085 to i8
  store i8 %7086, i8* %59, align 1
  %7087 = lshr i32 %7069, 31
  %7088 = trunc i32 %7087 to i8
  store i8 %7088, i8* %62, align 1
  %7089 = lshr i64 %7048, 32
  %7090 = trunc i64 %7089 to i32
  %7091 = and i32 %7090, 1
  %7092 = lshr i32 %7068, 31
  %7093 = xor i32 %7087, %7091
  %7094 = xor i32 %7087, %7092
  %7095 = add nuw nsw i32 %7093, %7094
  %7096 = icmp eq i32 %7095, 2
  %7097 = zext i1 %7096 to i8
  store i8 %7097, i8* %68, align 1
  %7098 = sext i32 %7069 to i64
  store i64 %7098, i64* %RSI.i3609, align 8
  %7099 = shl nsw i64 %7098, 3
  %7100 = add i64 %7041, %7099
  %7101 = add i64 %7022, 58
  store i64 %7101, i64* %3, align 8
  %7102 = inttoptr i64 %7100 to i64*
  %7103 = load i64, i64* %7102, align 8
  store i64 %7103, i64* %RDX.i5984, align 8
  store i64 %7042, i64* %RSI.i3609, align 8
  %7104 = add i64 %7042, 156
  %7105 = add i64 %7022, 72
  store i64 %7105, i64* %3, align 8
  %7106 = inttoptr i64 %7104 to i32*
  %7107 = load i32, i32* %7106, align 4
  %7108 = sext i32 %7107 to i64
  %7109 = ashr i64 %7108, 1
  %7110 = lshr i64 %7109, 1
  %7111 = trunc i64 %7109 to i8
  %7112 = and i8 %7111, 1
  %7113 = trunc i64 %7110 to i32
  %7114 = and i64 %7110, 4294967295
  store i64 %7114, i64* %.pre243, align 8
  store i8 %7112, i8* %44, align 1
  %7115 = and i32 %7113, 255
  %7116 = tail call i32 @llvm.ctpop.i32(i32 %7115)
  %7117 = trunc i32 %7116 to i8
  %7118 = and i8 %7117, 1
  %7119 = xor i8 %7118, 1
  store i8 %7119, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7120 = icmp eq i32 %7113, 0
  %7121 = zext i1 %7120 to i8
  store i8 %7121, i8* %59, align 1
  %7122 = lshr i64 %7109, 32
  %7123 = trunc i64 %7122 to i8
  %7124 = and i8 %7123, 1
  store i8 %7124, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %7125 = load i64, i64* %RBP.i, align 8
  %7126 = add i64 %7125, -104
  %7127 = add i64 %7022, 78
  store i64 %7127, i64* %3, align 8
  %7128 = trunc i64 %7110 to i32
  %7129 = inttoptr i64 %7126 to i32*
  %7130 = load i32, i32* %7129, align 4
  %7131 = add i32 %7130, %7128
  %7132 = zext i32 %7131 to i64
  store i64 %7132, i64* %.pre243, align 8
  %7133 = icmp ult i32 %7131, %7128
  %7134 = icmp ult i32 %7131, %7130
  %7135 = or i1 %7133, %7134
  %7136 = zext i1 %7135 to i8
  store i8 %7136, i8* %44, align 1
  %7137 = and i32 %7131, 255
  %7138 = tail call i32 @llvm.ctpop.i32(i32 %7137)
  %7139 = trunc i32 %7138 to i8
  %7140 = and i8 %7139, 1
  %7141 = xor i8 %7140, 1
  store i8 %7141, i8* %51, align 1
  %7142 = xor i32 %7130, %7128
  %7143 = xor i32 %7142, %7131
  %7144 = lshr i32 %7143, 4
  %7145 = trunc i32 %7144 to i8
  %7146 = and i8 %7145, 1
  store i8 %7146, i8* %56, align 1
  %7147 = icmp eq i32 %7131, 0
  %7148 = zext i1 %7147 to i8
  store i8 %7148, i8* %59, align 1
  %7149 = lshr i32 %7131, 31
  %7150 = trunc i32 %7149 to i8
  store i8 %7150, i8* %62, align 1
  %7151 = lshr i64 %7109, 32
  %7152 = trunc i64 %7151 to i32
  %7153 = and i32 %7152, 1
  %7154 = lshr i32 %7130, 31
  %7155 = xor i32 %7149, %7153
  %7156 = xor i32 %7149, %7154
  %7157 = add nuw nsw i32 %7155, %7156
  %7158 = icmp eq i32 %7157, 2
  %7159 = zext i1 %7158 to i8
  store i8 %7159, i8* %68, align 1
  %7160 = sext i32 %7131 to i64
  store i64 %7160, i64* %RSI.i3609, align 8
  %7161 = shl nsw i64 %7160, 3
  %7162 = add i64 %7103, %7161
  %7163 = add i64 %7022, 85
  store i64 %7163, i64* %3, align 8
  %7164 = inttoptr i64 %7162 to i64*
  %7165 = load i64, i64* %7164, align 8
  store i64 %7165, i64* %RDX.i5984, align 8
  %7166 = add i64 %7125, -42
  %7167 = add i64 %7022, 90
  store i64 %7167, i64* %3, align 8
  %7168 = inttoptr i64 %7166 to i16*
  %7169 = load i16, i16* %7168, align 2
  %7170 = sext i16 %7169 to i64
  store i64 %7170, i64* %RSI.i3609, align 8
  %7171 = shl nsw i64 %7170, 3
  %7172 = add i64 %7171, %7165
  %7173 = add i64 %7022, 94
  store i64 %7173, i64* %3, align 8
  %7174 = inttoptr i64 %7172 to i64*
  %7175 = load i64, i64* %7174, align 8
  store i64 %7175, i64* %RDX.i5984, align 8
  %7176 = add i64 %7125, -60
  %7177 = add i64 %7022, 98
  store i64 %7177, i64* %3, align 8
  %7178 = inttoptr i64 %7176 to i32*
  %7179 = load i32, i32* %7178, align 4
  %7180 = sext i32 %7179 to i64
  store i64 %7180, i64* %RSI.i3609, align 8
  %7181 = shl nsw i64 %7180, 3
  %7182 = add i64 %7181, %7175
  %7183 = add i64 %7022, 102
  store i64 %7183, i64* %3, align 8
  %7184 = inttoptr i64 %7182 to i64*
  %7185 = load i64, i64* %7184, align 8
  store i64 %7185, i64* %RDX.i5984, align 8
  %7186 = add i64 %7185, 4
  %7187 = add i64 %7022, 105
  store i64 %7187, i64* %3, align 8
  %7188 = inttoptr i64 %7186 to i32*
  %7189 = load i32, i32* %7188, align 4
  %7190 = zext i32 %7189 to i64
  store i64 %7190, i64* %.pre243, align 8
  %RDI.i3562 = getelementptr inbounds %union.anon, %union.anon* %70, i64 0, i32 0
  %7191 = load i32, i32* %ECX.i5565, align 4
  %7192 = zext i32 %7191 to i64
  store i64 %7192, i64* %RDI.i3562, align 8
  %7193 = add i64 %7125, -188
  %7194 = add i64 %7022, 113
  store i64 %7194, i64* %3, align 8
  %7195 = inttoptr i64 %7193 to i32*
  %7196 = load i32, i32* %7195, align 4
  %7197 = sub i32 %7191, %7196
  %7198 = zext i32 %7197 to i64
  store i64 %7198, i64* %RDI.i3562, align 8
  %7199 = sext i32 %7189 to i64
  %7200 = sext i32 %7197 to i64
  %7201 = mul nsw i64 %7200, %7199
  %7202 = trunc i64 %7201 to i32
  %7203 = and i64 %7201, 4294967295
  store i64 %7203, i64* %.pre243, align 8
  %7204 = shl i64 %7201, 32
  %7205 = ashr exact i64 %7204, 32
  %7206 = icmp ne i64 %7205, %7201
  %7207 = zext i1 %7206 to i8
  store i8 %7207, i8* %44, align 1
  %7208 = and i32 %7202, 255
  %7209 = tail call i32 @llvm.ctpop.i32(i32 %7208)
  %7210 = trunc i32 %7209 to i8
  %7211 = and i8 %7210, 1
  %7212 = xor i8 %7211, 1
  store i8 %7212, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %7213 = lshr i32 %7202, 31
  %7214 = trunc i32 %7213 to i8
  store i8 %7214, i8* %62, align 1
  store i8 %7207, i8* %68, align 1
  %7215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7216 = bitcast %union.VectorReg* %7215 to i8*
  %7217 = trunc i64 %7201 to i32
  %7218 = bitcast %union.VectorReg* %7215 to <2 x i32>*
  %7219 = load <2 x i32>, <2 x i32>* %7218, align 1
  %7220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %7221 = bitcast i64* %7220 to <2 x i32>*
  %7222 = load <2 x i32>, <2 x i32>* %7221, align 1
  %7223 = sitofp i32 %7217 to float
  %7224 = bitcast %union.VectorReg* %7215 to float*
  store float %7223, float* %7224, align 1
  %7225 = extractelement <2 x i32> %7219, i32 1
  %7226 = getelementptr inbounds i8, i8* %7216, i64 4
  %7227 = bitcast i8* %7226 to i32*
  store i32 %7225, i32* %7227, align 1
  %7228 = extractelement <2 x i32> %7222, i32 0
  %7229 = bitcast i64* %7220 to i32*
  store i32 %7228, i32* %7229, align 1
  %7230 = extractelement <2 x i32> %7222, i32 1
  %7231 = getelementptr inbounds i8, i8* %7216, i64 12
  %7232 = bitcast i8* %7231 to i32*
  store i32 %7230, i32* %7232, align 1
  %7233 = load i64, i64* %RBP.i, align 8
  %7234 = add i64 %7233, -184
  %7235 = add i64 %7022, 126
  store i64 %7235, i64* %3, align 8
  %7236 = inttoptr i64 %7234 to i32*
  %7237 = load i32, i32* %7236, align 4
  %7238 = zext i32 %7237 to i64
  store i64 %7238, i64* %.pre243, align 8
  %7239 = add i64 %7233, -188
  %7240 = add i64 %7022, 132
  store i64 %7240, i64* %3, align 8
  %7241 = inttoptr i64 %7239 to i32*
  %7242 = load i32, i32* %7241, align 4
  %7243 = sub i32 %7237, %7242
  %7244 = icmp ult i32 %7237, %7242
  %7245 = zext i1 %7244 to i8
  store i8 %7245, i8* %44, align 1
  %7246 = and i32 %7243, 255
  %7247 = tail call i32 @llvm.ctpop.i32(i32 %7246)
  %7248 = trunc i32 %7247 to i8
  %7249 = and i8 %7248, 1
  %7250 = xor i8 %7249, 1
  store i8 %7250, i8* %51, align 1
  %7251 = xor i32 %7242, %7237
  %7252 = xor i32 %7251, %7243
  %7253 = lshr i32 %7252, 4
  %7254 = trunc i32 %7253 to i8
  %7255 = and i8 %7254, 1
  store i8 %7255, i8* %56, align 1
  %7256 = icmp eq i32 %7243, 0
  %7257 = zext i1 %7256 to i8
  store i8 %7257, i8* %59, align 1
  %7258 = lshr i32 %7243, 31
  %7259 = trunc i32 %7258 to i8
  store i8 %7259, i8* %62, align 1
  %7260 = lshr i32 %7237, 31
  %7261 = lshr i32 %7242, 31
  %7262 = xor i32 %7261, %7260
  %7263 = xor i32 %7258, %7260
  %7264 = add nuw nsw i32 %7263, %7262
  %7265 = icmp eq i32 %7264, 2
  %7266 = zext i1 %7265 to i8
  store i8 %7266, i8* %68, align 1
  %7267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %7268 = bitcast %union.VectorReg* %7267 to i8*
  %7269 = bitcast %union.VectorReg* %7267 to <2 x i32>*
  %7270 = load <2 x i32>, <2 x i32>* %7269, align 1
  %7271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %7272 = bitcast i64* %7271 to <2 x i32>*
  %7273 = load <2 x i32>, <2 x i32>* %7272, align 1
  %7274 = sitofp i32 %7243 to float
  %7275 = bitcast %union.VectorReg* %7267 to float*
  store float %7274, float* %7275, align 1
  %7276 = extractelement <2 x i32> %7270, i32 1
  %7277 = getelementptr inbounds i8, i8* %7268, i64 4
  %7278 = bitcast i8* %7277 to i32*
  store i32 %7276, i32* %7278, align 1
  %7279 = extractelement <2 x i32> %7273, i32 0
  %7280 = bitcast i64* %7271 to i32*
  store i32 %7279, i32* %7280, align 1
  %7281 = extractelement <2 x i32> %7273, i32 1
  %7282 = getelementptr inbounds i8, i8* %7268, i64 12
  %7283 = bitcast i8* %7282 to i32*
  store i32 %7281, i32* %7283, align 1
  %7284 = bitcast %union.VectorReg* %7267 to <2 x float>*
  %7285 = load <2 x float>, <2 x float>* %7284, align 1
  %7286 = load <2 x i32>, <2 x i32>* %7272, align 1
  %7287 = bitcast [32 x %union.VectorReg]* %111 to <2 x float>*
  %7288 = load <2 x float>, <2 x float>* %7287, align 1
  %7289 = extractelement <2 x float> %7285, i32 0
  %7290 = extractelement <2 x float> %7288, i32 0
  %7291 = fadd float %7289, %7290
  store float %7291, float* %7275, align 1
  %7292 = bitcast <2 x float> %7285 to <2 x i32>
  %7293 = extractelement <2 x i32> %7292, i32 1
  store i32 %7293, i32* %7278, align 1
  %7294 = extractelement <2 x i32> %7286, i32 0
  store i32 %7294, i32* %7280, align 1
  %7295 = extractelement <2 x i32> %7286, i32 1
  store i32 %7295, i32* %7283, align 1
  %7296 = bitcast %union.VectorReg* %7215 to <2 x float>*
  %7297 = load <2 x float>, <2 x float>* %7296, align 1
  %7298 = load <2 x i32>, <2 x i32>* %7221, align 1
  %7299 = load <2 x float>, <2 x float>* %7284, align 1
  %7300 = extractelement <2 x float> %7297, i32 0
  %7301 = extractelement <2 x float> %7299, i32 0
  %7302 = fdiv float %7300, %7301
  store float %7302, float* %7224, align 1
  %7303 = bitcast <2 x float> %7297 to <2 x i32>
  %7304 = extractelement <2 x i32> %7303, i32 1
  store i32 %7304, i32* %7227, align 1
  %7305 = extractelement <2 x i32> %7298, i32 0
  store i32 %7305, i32* %7229, align 1
  %7306 = extractelement <2 x i32> %7298, i32 1
  store i32 %7306, i32* %7232, align 1
  %7307 = load <2 x float>, <2 x float>* %7296, align 1
  %7308 = extractelement <2 x float> %7307, i32 0
  %7309 = tail call float @llvm.trunc.f32(float %7308)
  %7310 = tail call float @llvm.fabs.f32(float %7309)
  %7311 = fcmp ogt float %7310, 0x41E0000000000000
  %7312 = fptosi float %7309 to i32
  %7313 = zext i32 %7312 to i64
  %7314 = select i1 %7311, i64 2147483648, i64 %7313
  store i64 %7314, i64* %.pre243, align 8
  %7315 = trunc i64 %7314 to i32
  store i32 %7315, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  %7316 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %7316, i64* %RDX.i5984, align 8
  %7317 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7317, i64* %RSI.i3609, align 8
  %7318 = add i64 %7317, 152
  %7319 = add i64 %7022, 177
  store i64 %7319, i64* %3, align 8
  %7320 = inttoptr i64 %7318 to i32*
  %7321 = load i32, i32* %7320, align 4
  %7322 = sext i32 %7321 to i64
  %7323 = ashr i64 %7322, 1
  %7324 = lshr i64 %7323, 1
  %7325 = trunc i64 %7323 to i8
  %7326 = and i8 %7325, 1
  %7327 = trunc i64 %7324 to i32
  %7328 = and i64 %7324, 4294967295
  store i64 %7328, i64* %.pre243, align 8
  store i8 %7326, i8* %44, align 1
  %7329 = and i32 %7327, 255
  %7330 = tail call i32 @llvm.ctpop.i32(i32 %7329)
  %7331 = trunc i32 %7330 to i8
  %7332 = and i8 %7331, 1
  %7333 = xor i8 %7332, 1
  store i8 %7333, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7334 = icmp eq i32 %7327, 0
  %7335 = zext i1 %7334 to i8
  store i8 %7335, i8* %59, align 1
  %7336 = lshr i64 %7323, 32
  %7337 = trunc i64 %7336 to i8
  %7338 = and i8 %7337, 1
  store i8 %7338, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %7339 = load i64, i64* %RBP.i, align 8
  %7340 = add i64 %7339, -100
  %7341 = add i64 %7022, 183
  store i64 %7341, i64* %3, align 8
  %7342 = trunc i64 %7324 to i32
  %7343 = inttoptr i64 %7340 to i32*
  %7344 = load i32, i32* %7343, align 4
  %7345 = add i32 %7344, %7342
  %7346 = zext i32 %7345 to i64
  store i64 %7346, i64* %.pre243, align 8
  %7347 = icmp ult i32 %7345, %7342
  %7348 = icmp ult i32 %7345, %7344
  %7349 = or i1 %7347, %7348
  %7350 = zext i1 %7349 to i8
  store i8 %7350, i8* %44, align 1
  %7351 = and i32 %7345, 255
  %7352 = tail call i32 @llvm.ctpop.i32(i32 %7351)
  %7353 = trunc i32 %7352 to i8
  %7354 = and i8 %7353, 1
  %7355 = xor i8 %7354, 1
  store i8 %7355, i8* %51, align 1
  %7356 = xor i32 %7344, %7342
  %7357 = xor i32 %7356, %7345
  %7358 = lshr i32 %7357, 4
  %7359 = trunc i32 %7358 to i8
  %7360 = and i8 %7359, 1
  store i8 %7360, i8* %56, align 1
  %7361 = icmp eq i32 %7345, 0
  %7362 = zext i1 %7361 to i8
  store i8 %7362, i8* %59, align 1
  %7363 = lshr i32 %7345, 31
  %7364 = trunc i32 %7363 to i8
  store i8 %7364, i8* %62, align 1
  %7365 = lshr i64 %7323, 32
  %7366 = trunc i64 %7365 to i32
  %7367 = and i32 %7366, 1
  %7368 = lshr i32 %7344, 31
  %7369 = xor i32 %7363, %7367
  %7370 = xor i32 %7363, %7368
  %7371 = add nuw nsw i32 %7369, %7370
  %7372 = icmp eq i32 %7371, 2
  %7373 = zext i1 %7372 to i8
  store i8 %7373, i8* %68, align 1
  %7374 = sext i32 %7345 to i64
  store i64 %7374, i64* %RSI.i3609, align 8
  %7375 = shl nsw i64 %7374, 3
  %7376 = add i64 %7316, %7375
  %7377 = add i64 %7022, 190
  store i64 %7377, i64* %3, align 8
  %7378 = inttoptr i64 %7376 to i64*
  %7379 = load i64, i64* %7378, align 8
  store i64 %7379, i64* %RDX.i5984, align 8
  store i64 %7317, i64* %RSI.i3609, align 8
  %7380 = add i64 %7317, 156
  %7381 = add i64 %7022, 204
  store i64 %7381, i64* %3, align 8
  %7382 = inttoptr i64 %7380 to i32*
  %7383 = load i32, i32* %7382, align 4
  %7384 = sext i32 %7383 to i64
  %7385 = ashr i64 %7384, 1
  %7386 = lshr i64 %7385, 1
  %7387 = trunc i64 %7385 to i8
  %7388 = and i8 %7387, 1
  %7389 = trunc i64 %7386 to i32
  %7390 = and i64 %7386, 4294967295
  store i64 %7390, i64* %.pre243, align 8
  store i8 %7388, i8* %44, align 1
  %7391 = and i32 %7389, 255
  %7392 = tail call i32 @llvm.ctpop.i32(i32 %7391)
  %7393 = trunc i32 %7392 to i8
  %7394 = and i8 %7393, 1
  %7395 = xor i8 %7394, 1
  store i8 %7395, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7396 = icmp eq i32 %7389, 0
  %7397 = zext i1 %7396 to i8
  store i8 %7397, i8* %59, align 1
  %7398 = lshr i64 %7385, 32
  %7399 = trunc i64 %7398 to i8
  %7400 = and i8 %7399, 1
  store i8 %7400, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %7401 = add i64 %7339, -104
  %7402 = add i64 %7022, 210
  store i64 %7402, i64* %3, align 8
  %7403 = trunc i64 %7386 to i32
  %7404 = inttoptr i64 %7401 to i32*
  %7405 = load i32, i32* %7404, align 4
  %7406 = add i32 %7405, %7403
  %7407 = zext i32 %7406 to i64
  store i64 %7407, i64* %.pre243, align 8
  %7408 = icmp ult i32 %7406, %7403
  %7409 = icmp ult i32 %7406, %7405
  %7410 = or i1 %7408, %7409
  %7411 = zext i1 %7410 to i8
  store i8 %7411, i8* %44, align 1
  %7412 = and i32 %7406, 255
  %7413 = tail call i32 @llvm.ctpop.i32(i32 %7412)
  %7414 = trunc i32 %7413 to i8
  %7415 = and i8 %7414, 1
  %7416 = xor i8 %7415, 1
  store i8 %7416, i8* %51, align 1
  %7417 = xor i32 %7405, %7403
  %7418 = xor i32 %7417, %7406
  %7419 = lshr i32 %7418, 4
  %7420 = trunc i32 %7419 to i8
  %7421 = and i8 %7420, 1
  store i8 %7421, i8* %56, align 1
  %7422 = icmp eq i32 %7406, 0
  %7423 = zext i1 %7422 to i8
  store i8 %7423, i8* %59, align 1
  %7424 = lshr i32 %7406, 31
  %7425 = trunc i32 %7424 to i8
  store i8 %7425, i8* %62, align 1
  %7426 = lshr i64 %7385, 32
  %7427 = trunc i64 %7426 to i32
  %7428 = and i32 %7427, 1
  %7429 = lshr i32 %7405, 31
  %7430 = xor i32 %7424, %7428
  %7431 = xor i32 %7424, %7429
  %7432 = add nuw nsw i32 %7430, %7431
  %7433 = icmp eq i32 %7432, 2
  %7434 = zext i1 %7433 to i8
  store i8 %7434, i8* %68, align 1
  %7435 = sext i32 %7406 to i64
  store i64 %7435, i64* %RSI.i3609, align 8
  %7436 = shl nsw i64 %7435, 3
  %7437 = add i64 %7379, %7436
  %7438 = add i64 %7022, 217
  store i64 %7438, i64* %3, align 8
  %7439 = inttoptr i64 %7437 to i64*
  %7440 = load i64, i64* %7439, align 8
  store i64 %7440, i64* %RDX.i5984, align 8
  %7441 = load i64, i64* %RBP.i, align 8
  %7442 = add i64 %7441, -42
  %7443 = add i64 %7022, 222
  store i64 %7443, i64* %3, align 8
  %7444 = inttoptr i64 %7442 to i16*
  %7445 = load i16, i16* %7444, align 2
  %7446 = sext i16 %7445 to i64
  store i64 %7446, i64* %RSI.i3609, align 8
  %7447 = shl nsw i64 %7446, 3
  %7448 = add i64 %7447, %7440
  %7449 = add i64 %7022, 226
  store i64 %7449, i64* %3, align 8
  %7450 = inttoptr i64 %7448 to i64*
  %7451 = load i64, i64* %7450, align 8
  store i64 %7451, i64* %RDX.i5984, align 8
  %7452 = add i64 %7441, -60
  %7453 = add i64 %7022, 230
  store i64 %7453, i64* %3, align 8
  %7454 = inttoptr i64 %7452 to i32*
  %7455 = load i32, i32* %7454, align 4
  %7456 = sext i32 %7455 to i64
  store i64 %7456, i64* %RSI.i3609, align 8
  %7457 = shl nsw i64 %7456, 3
  %7458 = add i64 %7457, %7451
  %7459 = add i64 %7022, 234
  store i64 %7459, i64* %3, align 8
  %7460 = inttoptr i64 %7458 to i64*
  %7461 = load i64, i64* %7460, align 8
  store i64 %7461, i64* %RDX.i5984, align 8
  %7462 = add i64 %7461, 8
  %7463 = add i64 %7022, 237
  store i64 %7463, i64* %3, align 8
  %7464 = inttoptr i64 %7462 to i32*
  %7465 = load i32, i32* %7464, align 4
  %7466 = zext i32 %7465 to i64
  store i64 %7466, i64* %.pre243, align 8
  %7467 = load i64, i64* %RCX.i6189, align 8
  %7468 = add i64 %7441, -188
  %7469 = add i64 %7022, 243
  store i64 %7469, i64* %3, align 8
  %7470 = trunc i64 %7467 to i32
  %7471 = inttoptr i64 %7468 to i32*
  %7472 = load i32, i32* %7471, align 4
  %7473 = sub i32 %7470, %7472
  %7474 = zext i32 %7473 to i64
  store i64 %7474, i64* %RCX.i6189, align 8
  %7475 = sext i32 %7465 to i64
  %7476 = sext i32 %7473 to i64
  %7477 = mul nsw i64 %7476, %7475
  %7478 = trunc i64 %7477 to i32
  %7479 = and i64 %7477, 4294967295
  store i64 %7479, i64* %.pre243, align 8
  %7480 = shl i64 %7477, 32
  %7481 = ashr exact i64 %7480, 32
  %7482 = icmp ne i64 %7481, %7477
  %7483 = zext i1 %7482 to i8
  store i8 %7483, i8* %44, align 1
  %7484 = and i32 %7478, 255
  %7485 = tail call i32 @llvm.ctpop.i32(i32 %7484)
  %7486 = trunc i32 %7485 to i8
  %7487 = and i8 %7486, 1
  %7488 = xor i8 %7487, 1
  store i8 %7488, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %7489 = lshr i32 %7478, 31
  %7490 = trunc i32 %7489 to i8
  store i8 %7490, i8* %62, align 1
  store i8 %7483, i8* %68, align 1
  %7491 = trunc i64 %7477 to i32
  %7492 = load <2 x i32>, <2 x i32>* %7218, align 1
  %7493 = load <2 x i32>, <2 x i32>* %7221, align 1
  %7494 = sitofp i32 %7491 to float
  store float %7494, float* %7224, align 1
  %7495 = extractelement <2 x i32> %7492, i32 1
  store i32 %7495, i32* %7227, align 1
  %7496 = extractelement <2 x i32> %7493, i32 0
  store i32 %7496, i32* %7229, align 1
  %7497 = extractelement <2 x i32> %7493, i32 1
  store i32 %7497, i32* %7232, align 1
  %7498 = load i64, i64* %RBP.i, align 8
  %7499 = add i64 %7498, -184
  %7500 = add i64 %7022, 256
  store i64 %7500, i64* %3, align 8
  %7501 = inttoptr i64 %7499 to i32*
  %7502 = load i32, i32* %7501, align 4
  %7503 = zext i32 %7502 to i64
  store i64 %7503, i64* %.pre243, align 8
  %7504 = add i64 %7498, -188
  %7505 = add i64 %7022, 262
  store i64 %7505, i64* %3, align 8
  %7506 = inttoptr i64 %7504 to i32*
  %7507 = load i32, i32* %7506, align 4
  %7508 = sub i32 %7502, %7507
  %7509 = icmp ult i32 %7502, %7507
  %7510 = zext i1 %7509 to i8
  store i8 %7510, i8* %44, align 1
  %7511 = and i32 %7508, 255
  %7512 = tail call i32 @llvm.ctpop.i32(i32 %7511)
  %7513 = trunc i32 %7512 to i8
  %7514 = and i8 %7513, 1
  %7515 = xor i8 %7514, 1
  store i8 %7515, i8* %51, align 1
  %7516 = xor i32 %7507, %7502
  %7517 = xor i32 %7516, %7508
  %7518 = lshr i32 %7517, 4
  %7519 = trunc i32 %7518 to i8
  %7520 = and i8 %7519, 1
  store i8 %7520, i8* %56, align 1
  %7521 = icmp eq i32 %7508, 0
  %7522 = zext i1 %7521 to i8
  store i8 %7522, i8* %59, align 1
  %7523 = lshr i32 %7508, 31
  %7524 = trunc i32 %7523 to i8
  store i8 %7524, i8* %62, align 1
  %7525 = lshr i32 %7502, 31
  %7526 = lshr i32 %7507, 31
  %7527 = xor i32 %7526, %7525
  %7528 = xor i32 %7523, %7525
  %7529 = add nuw nsw i32 %7528, %7527
  %7530 = icmp eq i32 %7529, 2
  %7531 = zext i1 %7530 to i8
  store i8 %7531, i8* %68, align 1
  %7532 = load <2 x i32>, <2 x i32>* %7269, align 1
  %7533 = load <2 x i32>, <2 x i32>* %7272, align 1
  %7534 = sitofp i32 %7508 to float
  store float %7534, float* %7275, align 1
  %7535 = extractelement <2 x i32> %7532, i32 1
  store i32 %7535, i32* %7278, align 1
  %7536 = extractelement <2 x i32> %7533, i32 0
  store i32 %7536, i32* %7280, align 1
  %7537 = extractelement <2 x i32> %7533, i32 1
  store i32 %7537, i32* %7283, align 1
  %7538 = load <2 x float>, <2 x float>* %7284, align 1
  %7539 = load <2 x i32>, <2 x i32>* %7272, align 1
  %7540 = load <2 x float>, <2 x float>* %7287, align 1
  %7541 = extractelement <2 x float> %7538, i32 0
  %7542 = extractelement <2 x float> %7540, i32 0
  %7543 = fadd float %7541, %7542
  store float %7543, float* %7275, align 1
  %7544 = bitcast <2 x float> %7538 to <2 x i32>
  %7545 = extractelement <2 x i32> %7544, i32 1
  store i32 %7545, i32* %7278, align 1
  %7546 = extractelement <2 x i32> %7539, i32 0
  store i32 %7546, i32* %7280, align 1
  %7547 = extractelement <2 x i32> %7539, i32 1
  store i32 %7547, i32* %7283, align 1
  %7548 = load <2 x float>, <2 x float>* %7296, align 1
  %7549 = load <2 x i32>, <2 x i32>* %7221, align 1
  %7550 = load <2 x float>, <2 x float>* %7284, align 1
  %7551 = extractelement <2 x float> %7548, i32 0
  %7552 = extractelement <2 x float> %7550, i32 0
  %7553 = fdiv float %7551, %7552
  store float %7553, float* %7224, align 1
  %7554 = bitcast <2 x float> %7548 to <2 x i32>
  %7555 = extractelement <2 x i32> %7554, i32 1
  store i32 %7555, i32* %7227, align 1
  %7556 = extractelement <2 x i32> %7549, i32 0
  store i32 %7556, i32* %7229, align 1
  %7557 = extractelement <2 x i32> %7549, i32 1
  store i32 %7557, i32* %7232, align 1
  %7558 = load <2 x float>, <2 x float>* %7296, align 1
  %7559 = extractelement <2 x float> %7558, i32 0
  %7560 = tail call float @llvm.trunc.f32(float %7559)
  %7561 = tail call float @llvm.fabs.f32(float %7560)
  %7562 = fcmp ogt float %7561, 0x41E0000000000000
  %7563 = fptosi float %7560 to i32
  %7564 = zext i32 %7563 to i64
  %7565 = select i1 %7562, i64 2147483648, i64 %7564
  store i64 %7565, i64* %.pre243, align 8
  %7566 = trunc i64 %7565 to i32
  %7567 = add i64 %7022, 285
  store i64 %7567, i64* %3, align 8
  store i32 %7566, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  br label %block_.L_46f954

block_.L_46f954:                                  ; preds = %block_46f7b0, %block_46f799, %block_.L_46f787, %block_.L_46f837
  %7568 = phi i64 [ %7567, %block_.L_46f837 ], [ %6858, %block_46f7b0 ], [ %6814, %block_46f799 ], [ %6799, %block_.L_46f787 ]
  %7569 = add i64 %7568, 879
  br label %block_.L_46fcc3

block_.L_46f959:                                  ; preds = %block_.L_46f5a1
  %7570 = load i64, i64* %RBP.i, align 8
  %7571 = add i64 %7570, -42
  %7572 = add i64 %6000, 4
  store i64 %7572, i64* %3, align 8
  %7573 = inttoptr i64 %7571 to i16*
  %7574 = load i16, i16* %7573, align 2
  %7575 = sext i16 %7574 to i64
  %7576 = and i64 %7575, 4294967295
  store i64 %7576, i64* %.pre243, align 8
  %7577 = sext i16 %7574 to i32
  store i8 0, i8* %44, align 1
  %7578 = and i32 %7577, 255
  %7579 = tail call i32 @llvm.ctpop.i32(i32 %7578)
  %7580 = trunc i32 %7579 to i8
  %7581 = and i8 %7580, 1
  %7582 = xor i8 %7581, 1
  store i8 %7582, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7583 = icmp eq i16 %7574, 0
  %7584 = zext i1 %7583 to i8
  store i8 %7584, i8* %59, align 1
  %7585 = lshr i32 %7577, 31
  %7586 = trunc i32 %7585 to i8
  store i8 %7586, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %7587 = icmp ne i8 %7586, 0
  %7588 = or i1 %7583, %7587
  %.v265 = select i1 %7588, i64 421, i64 13
  %7589 = add i64 %6000, %.v265
  store i64 %7589, i64* %3, align 8
  br i1 %7588, label %block_.L_46fafe, label %block_46f966

block_46f966:                                     ; preds = %block_.L_46f959
  %7590 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %7590, i64* %.pre243, align 8
  %7591 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7591, i64* %RCX.i6189, align 8
  %7592 = add i64 %7591, 152
  %7593 = add i64 %7589, 22
  store i64 %7593, i64* %3, align 8
  %7594 = inttoptr i64 %7592 to i32*
  %7595 = load i32, i32* %7594, align 4
  %7596 = sext i32 %7595 to i64
  %7597 = ashr i64 %7596, 1
  %7598 = lshr i64 %7597, 1
  %7599 = trunc i64 %7597 to i8
  %7600 = and i8 %7599, 1
  %7601 = trunc i64 %7598 to i32
  %7602 = and i64 %7598, 4294967295
  store i64 %7602, i64* %RDX.i5984, align 8
  store i8 %7600, i8* %44, align 1
  %7603 = and i32 %7601, 255
  %7604 = tail call i32 @llvm.ctpop.i32(i32 %7603)
  %7605 = trunc i32 %7604 to i8
  %7606 = and i8 %7605, 1
  %7607 = xor i8 %7606, 1
  store i8 %7607, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7608 = icmp eq i32 %7601, 0
  %7609 = zext i1 %7608 to i8
  store i8 %7609, i8* %59, align 1
  %7610 = lshr i64 %7597, 32
  %7611 = trunc i64 %7610 to i8
  %7612 = and i8 %7611, 1
  store i8 %7612, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %7613 = add i64 %7570, -100
  %7614 = add i64 %7589, 28
  store i64 %7614, i64* %3, align 8
  %7615 = trunc i64 %7598 to i32
  %7616 = inttoptr i64 %7613 to i32*
  %7617 = load i32, i32* %7616, align 4
  %7618 = add i32 %7617, %7615
  %7619 = zext i32 %7618 to i64
  store i64 %7619, i64* %RDX.i5984, align 8
  %7620 = icmp ult i32 %7618, %7615
  %7621 = icmp ult i32 %7618, %7617
  %7622 = or i1 %7620, %7621
  %7623 = zext i1 %7622 to i8
  store i8 %7623, i8* %44, align 1
  %7624 = and i32 %7618, 255
  %7625 = tail call i32 @llvm.ctpop.i32(i32 %7624)
  %7626 = trunc i32 %7625 to i8
  %7627 = and i8 %7626, 1
  %7628 = xor i8 %7627, 1
  store i8 %7628, i8* %51, align 1
  %7629 = xor i32 %7617, %7615
  %7630 = xor i32 %7629, %7618
  %7631 = lshr i32 %7630, 4
  %7632 = trunc i32 %7631 to i8
  %7633 = and i8 %7632, 1
  store i8 %7633, i8* %56, align 1
  %7634 = icmp eq i32 %7618, 0
  %7635 = zext i1 %7634 to i8
  store i8 %7635, i8* %59, align 1
  %7636 = lshr i32 %7618, 31
  %7637 = trunc i32 %7636 to i8
  store i8 %7637, i8* %62, align 1
  %7638 = lshr i64 %7597, 32
  %7639 = trunc i64 %7638 to i32
  %7640 = and i32 %7639, 1
  %7641 = lshr i32 %7617, 31
  %7642 = xor i32 %7636, %7640
  %7643 = xor i32 %7636, %7641
  %7644 = add nuw nsw i32 %7642, %7643
  %7645 = icmp eq i32 %7644, 2
  %7646 = zext i1 %7645 to i8
  store i8 %7646, i8* %68, align 1
  %7647 = sext i32 %7618 to i64
  store i64 %7647, i64* %RCX.i6189, align 8
  %7648 = shl nsw i64 %7647, 3
  %7649 = add i64 %7590, %7648
  %7650 = add i64 %7589, 35
  store i64 %7650, i64* %3, align 8
  %7651 = inttoptr i64 %7649 to i64*
  %7652 = load i64, i64* %7651, align 8
  store i64 %7652, i64* %.pre243, align 8
  store i64 %7591, i64* %RCX.i6189, align 8
  %7653 = add i64 %7591, 156
  %7654 = add i64 %7589, 49
  store i64 %7654, i64* %3, align 8
  %7655 = inttoptr i64 %7653 to i32*
  %7656 = load i32, i32* %7655, align 4
  %7657 = sext i32 %7656 to i64
  %7658 = ashr i64 %7657, 1
  %7659 = lshr i64 %7658, 1
  %7660 = trunc i64 %7658 to i8
  %7661 = and i8 %7660, 1
  %7662 = trunc i64 %7659 to i32
  %7663 = and i64 %7659, 4294967295
  store i64 %7663, i64* %RDX.i5984, align 8
  store i8 %7661, i8* %44, align 1
  %7664 = and i32 %7662, 255
  %7665 = tail call i32 @llvm.ctpop.i32(i32 %7664)
  %7666 = trunc i32 %7665 to i8
  %7667 = and i8 %7666, 1
  %7668 = xor i8 %7667, 1
  store i8 %7668, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7669 = icmp eq i32 %7662, 0
  %7670 = zext i1 %7669 to i8
  store i8 %7670, i8* %59, align 1
  %7671 = lshr i64 %7658, 32
  %7672 = trunc i64 %7671 to i8
  %7673 = and i8 %7672, 1
  store i8 %7673, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %7674 = load i64, i64* %RBP.i, align 8
  %7675 = add i64 %7674, -104
  %7676 = add i64 %7589, 55
  store i64 %7676, i64* %3, align 8
  %7677 = trunc i64 %7659 to i32
  %7678 = inttoptr i64 %7675 to i32*
  %7679 = load i32, i32* %7678, align 4
  %7680 = add i32 %7679, %7677
  %7681 = zext i32 %7680 to i64
  store i64 %7681, i64* %RDX.i5984, align 8
  %7682 = icmp ult i32 %7680, %7677
  %7683 = icmp ult i32 %7680, %7679
  %7684 = or i1 %7682, %7683
  %7685 = zext i1 %7684 to i8
  store i8 %7685, i8* %44, align 1
  %7686 = and i32 %7680, 255
  %7687 = tail call i32 @llvm.ctpop.i32(i32 %7686)
  %7688 = trunc i32 %7687 to i8
  %7689 = and i8 %7688, 1
  %7690 = xor i8 %7689, 1
  store i8 %7690, i8* %51, align 1
  %7691 = xor i32 %7679, %7677
  %7692 = xor i32 %7691, %7680
  %7693 = lshr i32 %7692, 4
  %7694 = trunc i32 %7693 to i8
  %7695 = and i8 %7694, 1
  store i8 %7695, i8* %56, align 1
  %7696 = icmp eq i32 %7680, 0
  %7697 = zext i1 %7696 to i8
  store i8 %7697, i8* %59, align 1
  %7698 = lshr i32 %7680, 31
  %7699 = trunc i32 %7698 to i8
  store i8 %7699, i8* %62, align 1
  %7700 = lshr i64 %7658, 32
  %7701 = trunc i64 %7700 to i32
  %7702 = and i32 %7701, 1
  %7703 = lshr i32 %7679, 31
  %7704 = xor i32 %7698, %7702
  %7705 = xor i32 %7698, %7703
  %7706 = add nuw nsw i32 %7704, %7705
  %7707 = icmp eq i32 %7706, 2
  %7708 = zext i1 %7707 to i8
  store i8 %7708, i8* %68, align 1
  %7709 = sext i32 %7680 to i64
  store i64 %7709, i64* %RCX.i6189, align 8
  %7710 = shl nsw i64 %7709, 3
  %7711 = add i64 %7652, %7710
  %7712 = add i64 %7589, 62
  store i64 %7712, i64* %3, align 8
  %7713 = inttoptr i64 %7711 to i64*
  %7714 = load i64, i64* %7713, align 8
  store i64 %7714, i64* %.pre243, align 8
  %7715 = add i64 %7674, -42
  %7716 = add i64 %7589, 66
  store i64 %7716, i64* %3, align 8
  %7717 = inttoptr i64 %7715 to i16*
  %7718 = load i16, i16* %7717, align 2
  %7719 = sext i16 %7718 to i32
  %7720 = add nsw i32 %7719, -1
  %7721 = zext i32 %7720 to i64
  store i64 %7721, i64* %RDX.i5984, align 8
  %7722 = icmp eq i16 %7718, 0
  %7723 = zext i1 %7722 to i8
  store i8 %7723, i8* %44, align 1
  %7724 = and i32 %7720, 255
  %7725 = tail call i32 @llvm.ctpop.i32(i32 %7724)
  %7726 = trunc i32 %7725 to i8
  %7727 = and i8 %7726, 1
  %7728 = xor i8 %7727, 1
  store i8 %7728, i8* %51, align 1
  %7729 = zext i16 %7718 to i32
  %7730 = xor i32 %7720, %7729
  %7731 = lshr i32 %7730, 4
  %7732 = trunc i32 %7731 to i8
  %7733 = and i8 %7732, 1
  store i8 %7733, i8* %56, align 1
  %7734 = icmp eq i32 %7720, 0
  %7735 = zext i1 %7734 to i8
  store i8 %7735, i8* %59, align 1
  %7736 = lshr i32 %7720, 31
  %7737 = trunc i32 %7736 to i8
  store i8 %7737, i8* %62, align 1
  %7738 = lshr i32 %7719, 31
  %7739 = xor i32 %7736, %7738
  %7740 = add nuw nsw i32 %7739, %7738
  %7741 = icmp eq i32 %7740, 2
  %7742 = zext i1 %7741 to i8
  store i8 %7742, i8* %68, align 1
  %7743 = sext i32 %7720 to i64
  store i64 %7743, i64* %RCX.i6189, align 8
  %7744 = shl nsw i64 %7743, 3
  %7745 = add i64 %7714, %7744
  %7746 = add i64 %7589, 76
  store i64 %7746, i64* %3, align 8
  %7747 = inttoptr i64 %7745 to i64*
  %7748 = load i64, i64* %7747, align 8
  store i64 %7748, i64* %.pre243, align 8
  %7749 = load i64, i64* %RBP.i, align 8
  %7750 = add i64 %7749, -60
  %7751 = add i64 %7589, 80
  store i64 %7751, i64* %3, align 8
  %7752 = inttoptr i64 %7750 to i32*
  %7753 = load i32, i32* %7752, align 4
  %7754 = sext i32 %7753 to i64
  store i64 %7754, i64* %RCX.i6189, align 8
  %7755 = shl nsw i64 %7754, 3
  %7756 = add i64 %7755, %7748
  %7757 = add i64 %7589, 84
  store i64 %7757, i64* %3, align 8
  %7758 = inttoptr i64 %7756 to i64*
  %7759 = load i64, i64* %7758, align 8
  store i64 %7759, i64* %.pre243, align 8
  %7760 = add i64 %7589, 86
  store i64 %7760, i64* %3, align 8
  %7761 = inttoptr i64 %7759 to i32*
  %7762 = load i32, i32* %7761, align 4
  %7763 = zext i32 %7762 to i64
  store i64 %7763, i64* %RDX.i5984, align 8
  store i32 %7762, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %7764 = load i32, i32* bitcast (%G_0x6f934c_type* @G_0x6f934c to i32*), align 8
  store i8 0, i8* %44, align 1
  %7765 = and i32 %7764, 255
  %7766 = tail call i32 @llvm.ctpop.i32(i32 %7765)
  %7767 = trunc i32 %7766 to i8
  %7768 = and i8 %7767, 1
  %7769 = xor i8 %7768, 1
  store i8 %7769, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7770 = icmp eq i32 %7764, 0
  %7771 = zext i1 %7770 to i8
  store i8 %7771, i8* %59, align 1
  %7772 = lshr i32 %7764, 31
  %7773 = trunc i32 %7772 to i8
  store i8 %7773, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v266 = select i1 %7770, i64 120, i64 107
  %7774 = add i64 %7589, %.v266
  store i64 %7774, i64* %3, align 8
  br i1 %7770, label %block_.L_46f9de, label %block_46f9d1

block_46f9d1:                                     ; preds = %block_46f966
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %7775 = add i64 %7749, -324
  %7776 = add i64 %7774, 8
  store i64 %7776, i64* %3, align 8
  %7777 = inttoptr i64 %7775 to i32*
  store i32 0, i32* %7777, align 4
  %7778 = load i64, i64* %3, align 8
  %7779 = add i64 %7778, 18
  store i64 %7779, i64* %3, align 8
  br label %block_.L_46f9eb

block_.L_46f9de:                                  ; preds = %block_46f966
  store i64 %7763, i64* %.pre243, align 8
  %7780 = add i64 %7749, -324
  %7781 = add i64 %7774, 13
  store i64 %7781, i64* %3, align 8
  %7782 = inttoptr i64 %7780 to i32*
  store i32 %7762, i32* %7782, align 4
  %.pre179 = load i64, i64* %3, align 8
  br label %block_.L_46f9eb

block_.L_46f9eb:                                  ; preds = %block_.L_46f9de, %block_46f9d1
  %7783 = phi i64 [ %.pre179, %block_.L_46f9de ], [ %7779, %block_46f9d1 ]
  %7784 = load i64, i64* %RBP.i, align 8
  %7785 = add i64 %7784, -324
  %7786 = add i64 %7783, 6
  store i64 %7786, i64* %3, align 8
  %7787 = inttoptr i64 %7785 to i32*
  %7788 = load i32, i32* %7787, align 4
  %7789 = zext i32 %7788 to i64
  store i64 %7789, i64* %.pre243, align 8
  %7790 = add i64 %7783, add (i64 ptrtoint (%G_0x25da89__rip__type* @G_0x25da89__rip_ to i64), i64 6)
  %7791 = add i64 %7783, 12
  store i64 %7791, i64* %3, align 8
  %7792 = inttoptr i64 %7790 to i32*
  store i32 %7788, i32* %7792, align 4
  %7793 = load i64, i64* %3, align 8
  %7794 = add i64 %7793, ptrtoint (%G_0x25da6a__rip__type* @G_0x25da6a__rip_ to i64)
  %7795 = add i64 %7793, 7
  store i64 %7795, i64* %3, align 8
  %7796 = inttoptr i64 %7794 to i64*
  %7797 = load i64, i64* %7796, align 8
  store i64 %7797, i64* %RCX.i6189, align 8
  %7798 = add i64 %7793, add (i64 ptrtoint (%G_0x25befb__rip__type* @G_0x25befb__rip_ to i64), i64 7)
  %7799 = add i64 %7793, 14
  store i64 %7799, i64* %3, align 8
  %7800 = inttoptr i64 %7798 to i64*
  %7801 = load i64, i64* %7800, align 8
  store i64 %7801, i64* %RDX.i5984, align 8
  %7802 = add i64 %7801, 152
  %7803 = add i64 %7793, 20
  store i64 %7803, i64* %3, align 8
  %7804 = inttoptr i64 %7802 to i32*
  %7805 = load i32, i32* %7804, align 4
  %7806 = zext i32 %7805 to i64
  store i64 %7806, i64* %.pre243, align 8
  %RSI.i3363 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %7807 = add i64 %7801, 156
  %7808 = add i64 %7793, 26
  store i64 %7808, i64* %3, align 8
  %7809 = inttoptr i64 %7807 to i32*
  %7810 = load i32, i32* %7809, align 4
  %7811 = zext i32 %7810 to i64
  store i64 %7811, i64* %RSI.i3363, align 8
  %7812 = shl nuw i64 %7806, 32
  %7813 = ashr i64 %7812, 33
  %7814 = lshr i64 %7813, 1
  %7815 = trunc i64 %7813 to i8
  %7816 = and i8 %7815, 1
  %7817 = trunc i64 %7814 to i32
  %7818 = and i64 %7814, 4294967295
  store i64 %7818, i64* %.pre243, align 8
  store i8 %7816, i8* %44, align 1
  %7819 = and i32 %7817, 255
  %7820 = tail call i32 @llvm.ctpop.i32(i32 %7819)
  %7821 = trunc i32 %7820 to i8
  %7822 = and i8 %7821, 1
  %7823 = xor i8 %7822, 1
  store i8 %7823, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7824 = icmp eq i32 %7817, 0
  %7825 = zext i1 %7824 to i8
  store i8 %7825, i8* %59, align 1
  %7826 = lshr i64 %7813, 32
  %7827 = trunc i64 %7826 to i8
  %7828 = and i8 %7827, 1
  store i8 %7828, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %RDI.i3357 = getelementptr inbounds %union.anon, %union.anon* %70, i64 0, i32 0
  %7829 = load i64, i64* %RBP.i, align 8
  %7830 = add i64 %7829, -100
  %7831 = add i64 %7793, 32
  store i64 %7831, i64* %3, align 8
  %7832 = inttoptr i64 %7830 to i32*
  %7833 = load i32, i32* %7832, align 4
  %7834 = zext i32 %7833 to i64
  store i64 %7834, i64* %RDI.i3357, align 8
  %7835 = trunc i64 %7814 to i32
  %7836 = add i32 %7833, %7835
  %7837 = zext i32 %7836 to i64
  store i64 %7837, i64* %.pre243, align 8
  %7838 = icmp ult i32 %7836, %7835
  %7839 = icmp ult i32 %7836, %7833
  %7840 = or i1 %7838, %7839
  %7841 = zext i1 %7840 to i8
  store i8 %7841, i8* %44, align 1
  %7842 = and i32 %7836, 255
  %7843 = tail call i32 @llvm.ctpop.i32(i32 %7842)
  %7844 = trunc i32 %7843 to i8
  %7845 = and i8 %7844, 1
  %7846 = xor i8 %7845, 1
  store i8 %7846, i8* %51, align 1
  %7847 = xor i64 %7834, %7814
  %7848 = trunc i64 %7847 to i32
  %7849 = xor i32 %7848, %7836
  %7850 = lshr i32 %7849, 4
  %7851 = trunc i32 %7850 to i8
  %7852 = and i8 %7851, 1
  store i8 %7852, i8* %56, align 1
  %7853 = icmp eq i32 %7836, 0
  %7854 = zext i1 %7853 to i8
  store i8 %7854, i8* %59, align 1
  %7855 = lshr i32 %7836, 31
  %7856 = trunc i32 %7855 to i8
  store i8 %7856, i8* %62, align 1
  %7857 = lshr i64 %7813, 32
  %7858 = trunc i64 %7857 to i32
  %7859 = and i32 %7858, 1
  %7860 = lshr i32 %7833, 31
  %7861 = xor i32 %7855, %7859
  %7862 = xor i32 %7855, %7860
  %7863 = add nuw nsw i32 %7861, %7862
  %7864 = icmp eq i32 %7863, 2
  %7865 = zext i1 %7864 to i8
  store i8 %7865, i8* %68, align 1
  %7866 = sext i32 %7836 to i64
  store i64 %7866, i64* %RDX.i5984, align 8
  %7867 = load i64, i64* %RCX.i6189, align 8
  %7868 = shl nsw i64 %7866, 3
  %7869 = add i64 %7867, %7868
  %7870 = add i64 %7793, 41
  store i64 %7870, i64* %3, align 8
  %7871 = inttoptr i64 %7869 to i64*
  %7872 = load i64, i64* %7871, align 8
  store i64 %7872, i64* %RCX.i6189, align 8
  %7873 = shl nuw i64 %7811, 32
  %7874 = ashr i64 %7873, 33
  %7875 = lshr i64 %7874, 1
  %7876 = trunc i64 %7874 to i8
  %7877 = and i8 %7876, 1
  %7878 = trunc i64 %7875 to i32
  %7879 = and i64 %7875, 4294967295
  store i64 %7879, i64* %RSI.i3363, align 8
  store i8 %7877, i8* %44, align 1
  %7880 = and i32 %7878, 255
  %7881 = tail call i32 @llvm.ctpop.i32(i32 %7880)
  %7882 = trunc i32 %7881 to i8
  %7883 = and i8 %7882, 1
  %7884 = xor i8 %7883, 1
  store i8 %7884, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %7885 = icmp eq i32 %7878, 0
  %7886 = zext i1 %7885 to i8
  store i8 %7886, i8* %59, align 1
  %7887 = lshr i64 %7874, 32
  %7888 = trunc i64 %7887 to i8
  %7889 = and i8 %7888, 1
  store i8 %7889, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %7890 = add i64 %7829, -104
  %7891 = add i64 %7793, 47
  store i64 %7891, i64* %3, align 8
  %7892 = inttoptr i64 %7890 to i32*
  %7893 = load i32, i32* %7892, align 4
  %7894 = zext i32 %7893 to i64
  store i64 %7894, i64* %.pre243, align 8
  %7895 = trunc i64 %7875 to i32
  %7896 = add i32 %7893, %7895
  %7897 = zext i32 %7896 to i64
  store i64 %7897, i64* %RSI.i3363, align 8
  %7898 = icmp ult i32 %7896, %7895
  %7899 = icmp ult i32 %7896, %7893
  %7900 = or i1 %7898, %7899
  %7901 = zext i1 %7900 to i8
  store i8 %7901, i8* %44, align 1
  %7902 = and i32 %7896, 255
  %7903 = tail call i32 @llvm.ctpop.i32(i32 %7902)
  %7904 = trunc i32 %7903 to i8
  %7905 = and i8 %7904, 1
  %7906 = xor i8 %7905, 1
  store i8 %7906, i8* %51, align 1
  %7907 = xor i64 %7894, %7875
  %7908 = trunc i64 %7907 to i32
  %7909 = xor i32 %7908, %7896
  %7910 = lshr i32 %7909, 4
  %7911 = trunc i32 %7910 to i8
  %7912 = and i8 %7911, 1
  store i8 %7912, i8* %56, align 1
  %7913 = icmp eq i32 %7896, 0
  %7914 = zext i1 %7913 to i8
  store i8 %7914, i8* %59, align 1
  %7915 = lshr i32 %7896, 31
  %7916 = trunc i32 %7915 to i8
  store i8 %7916, i8* %62, align 1
  %7917 = lshr i64 %7874, 32
  %7918 = trunc i64 %7917 to i32
  %7919 = and i32 %7918, 1
  %7920 = lshr i32 %7893, 31
  %7921 = xor i32 %7915, %7919
  %7922 = xor i32 %7915, %7920
  %7923 = add nuw nsw i32 %7921, %7922
  %7924 = icmp eq i32 %7923, 2
  %7925 = zext i1 %7924 to i8
  store i8 %7925, i8* %68, align 1
  %7926 = sext i32 %7896 to i64
  store i64 %7926, i64* %RDX.i5984, align 8
  %7927 = shl nsw i64 %7926, 3
  %7928 = add i64 %7872, %7927
  %7929 = add i64 %7793, 56
  store i64 %7929, i64* %3, align 8
  %7930 = inttoptr i64 %7928 to i64*
  %7931 = load i64, i64* %7930, align 8
  store i64 %7931, i64* %RCX.i6189, align 8
  %7932 = load i64, i64* %RBP.i, align 8
  %7933 = add i64 %7932, -42
  %7934 = add i64 %7793, 60
  store i64 %7934, i64* %3, align 8
  %7935 = inttoptr i64 %7933 to i16*
  %7936 = load i16, i16* %7935, align 2
  %7937 = sext i16 %7936 to i32
  %7938 = add nsw i32 %7937, -1
  %7939 = zext i32 %7938 to i64
  store i64 %7939, i64* %.pre243, align 8
  %7940 = and i32 %7938, 255
  %7941 = tail call i32 @llvm.ctpop.i32(i32 %7940)
  %7942 = trunc i32 %7941 to i8
  %7943 = and i8 %7942, 1
  %7944 = xor i8 %7943, 1
  store i8 %7944, i8* %51, align 1
  %7945 = xor i32 %7938, %7937
  %7946 = lshr i32 %7945, 4
  %7947 = trunc i32 %7946 to i8
  %7948 = and i8 %7947, 1
  store i8 %7948, i8* %56, align 1
  %7949 = icmp eq i32 %7938, 0
  %7950 = zext i1 %7949 to i8
  store i8 %7950, i8* %59, align 1
  %7951 = lshr i32 %7938, 31
  %7952 = trunc i32 %7951 to i8
  store i8 %7952, i8* %62, align 1
  %7953 = lshr i32 %7937, 31
  %7954 = xor i32 %7951, %7953
  %7955 = add nuw nsw i32 %7954, %7953
  %7956 = icmp eq i32 %7955, 2
  %7957 = zext i1 %7956 to i8
  store i8 %7957, i8* %68, align 1
  %7958 = sext i32 %7938 to i64
  store i64 %7958, i64* %RDX.i5984, align 8
  %7959 = shl nsw i64 %7958, 3
  %7960 = add i64 %7931, %7959
  %7961 = add i64 %7793, 69
  store i64 %7961, i64* %3, align 8
  %7962 = inttoptr i64 %7960 to i64*
  %7963 = load i64, i64* %7962, align 8
  store i64 %7963, i64* %RCX.i6189, align 8
  %7964 = add i64 %7932, -60
  %7965 = add i64 %7793, 73
  store i64 %7965, i64* %3, align 8
  %7966 = inttoptr i64 %7964 to i32*
  %7967 = load i32, i32* %7966, align 4
  %7968 = sext i32 %7967 to i64
  store i64 %7968, i64* %RDX.i5984, align 8
  %7969 = shl nsw i64 %7968, 3
  %7970 = add i64 %7969, %7963
  %7971 = add i64 %7793, 77
  store i64 %7971, i64* %3, align 8
  %7972 = inttoptr i64 %7970 to i64*
  %7973 = load i64, i64* %7972, align 8
  store i64 %7973, i64* %RCX.i6189, align 8
  %7974 = add i64 %7973, 4
  %7975 = add i64 %7793, 80
  store i64 %7975, i64* %3, align 8
  %7976 = inttoptr i64 %7974 to i32*
  %7977 = load i32, i32* %7976, align 4
  %7978 = zext i32 %7977 to i64
  store i64 %7978, i64* %.pre243, align 8
  %7979 = add i64 %7793, add (i64 ptrtoint (%G_0x2a05c3__rip__type* @G_0x2a05c3__rip_ to i64), i64 80)
  %7980 = add i64 %7793, 86
  store i64 %7980, i64* %3, align 8
  %7981 = inttoptr i64 %7979 to i32*
  store i32 %7977, i32* %7981, align 4
  %7982 = load i64, i64* %3, align 8
  %7983 = add i64 %7982, ptrtoint (%G_0x2a05bd__rip__type* @G_0x2a05bd__rip_ to i64)
  %7984 = add i64 %7982, 6
  store i64 %7984, i64* %3, align 8
  %7985 = inttoptr i64 %7983 to i32*
  %7986 = load i32, i32* %7985, align 4
  %7987 = zext i32 %7986 to i64
  store i64 %7987, i64* %.pre243, align 8
  %7988 = load i64, i64* %RBP.i, align 8
  %7989 = add i64 %7988, -42
  %7990 = add i64 %7982, 10
  store i64 %7990, i64* %3, align 8
  %7991 = inttoptr i64 %7989 to i16*
  %7992 = load i16, i16* %7991, align 2
  %7993 = sext i16 %7992 to i64
  %7994 = and i64 %7993, 4294967295
  store i64 %7994, i64* %RSI.i3363, align 8
  %7995 = sext i16 %7992 to i32
  %7996 = add nsw i32 %7995, 1
  %7997 = zext i32 %7996 to i64
  store i64 %7997, i64* %RDI.i3357, align 8
  %7998 = sext i32 %7986 to i64
  %7999 = sext i32 %7996 to i64
  %8000 = mul nsw i64 %7999, %7998
  %8001 = trunc i64 %8000 to i32
  %8002 = shl i64 %8000, 32
  %8003 = ashr exact i64 %8002, 32
  %8004 = icmp ne i64 %8003, %8000
  %8005 = zext i1 %8004 to i8
  store i8 %8005, i8* %44, align 1
  %8006 = and i32 %8001, 255
  %8007 = tail call i32 @llvm.ctpop.i32(i32 %8006)
  %8008 = trunc i32 %8007 to i8
  %8009 = and i8 %8008, 1
  %8010 = xor i8 %8009, 1
  store i8 %8010, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %8011 = lshr i32 %8001, 31
  %8012 = trunc i32 %8011 to i8
  store i8 %8012, i8* %62, align 1
  store i8 %8005, i8* %68, align 1
  %8013 = bitcast [32 x %union.VectorReg]* %111 to i8*
  %8014 = trunc i64 %8000 to i32
  %8015 = bitcast [32 x %union.VectorReg]* %111 to <2 x i32>*
  %8016 = load <2 x i32>, <2 x i32>* %8015, align 1
  %8017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8018 = bitcast i64* %8017 to <2 x i32>*
  %8019 = load <2 x i32>, <2 x i32>* %8018, align 1
  %8020 = sitofp i32 %8014 to float
  %8021 = bitcast [32 x %union.VectorReg]* %111 to float*
  store float %8020, float* %8021, align 1
  %8022 = extractelement <2 x i32> %8016, i32 1
  %8023 = getelementptr inbounds i8, i8* %8013, i64 4
  %8024 = bitcast i8* %8023 to i32*
  store i32 %8022, i32* %8024, align 1
  %8025 = extractelement <2 x i32> %8019, i32 0
  %8026 = bitcast i64* %8017 to i32*
  store i32 %8025, i32* %8026, align 1
  %8027 = extractelement <2 x i32> %8019, i32 1
  %8028 = getelementptr inbounds i8, i8* %8013, i64 12
  %8029 = bitcast i8* %8028 to i32*
  store i32 %8027, i32* %8029, align 1
  %8030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8031 = bitcast %union.VectorReg* %8030 to i8*
  %8032 = bitcast %union.VectorReg* %8030 to <2 x i32>*
  %8033 = load <2 x i32>, <2 x i32>* %8032, align 1
  %8034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %8035 = bitcast i64* %8034 to <2 x i32>*
  %8036 = load <2 x i32>, <2 x i32>* %8035, align 1
  %8037 = sitofp i16 %7992 to float
  %8038 = bitcast %union.VectorReg* %8030 to float*
  store float %8037, float* %8038, align 1
  %8039 = extractelement <2 x i32> %8033, i32 1
  %8040 = getelementptr inbounds i8, i8* %8031, i64 4
  %8041 = bitcast i8* %8040 to i32*
  store i32 %8039, i32* %8041, align 1
  %8042 = extractelement <2 x i32> %8036, i32 0
  %8043 = bitcast i64* %8034 to i32*
  store i32 %8042, i32* %8043, align 1
  %8044 = extractelement <2 x i32> %8036, i32 1
  %8045 = getelementptr inbounds i8, i8* %8031, i64 12
  %8046 = bitcast i8* %8045 to i32*
  store i32 %8044, i32* %8046, align 1
  %8047 = bitcast [32 x %union.VectorReg]* %111 to <2 x float>*
  %8048 = load <2 x float>, <2 x float>* %8047, align 1
  %8049 = load <2 x i32>, <2 x i32>* %8018, align 1
  %8050 = bitcast %union.VectorReg* %8030 to <2 x float>*
  %8051 = load <2 x float>, <2 x float>* %8050, align 1
  %8052 = extractelement <2 x float> %8048, i32 0
  %8053 = extractelement <2 x float> %8051, i32 0
  %8054 = fdiv float %8052, %8053
  store float %8054, float* %8021, align 1
  %8055 = bitcast <2 x float> %8048 to <2 x i32>
  %8056 = extractelement <2 x i32> %8055, i32 1
  store i32 %8056, i32* %8024, align 1
  %8057 = extractelement <2 x i32> %8049, i32 0
  store i32 %8057, i32* %8026, align 1
  %8058 = extractelement <2 x i32> %8049, i32 1
  store i32 %8058, i32* %8029, align 1
  %8059 = load <2 x float>, <2 x float>* %8047, align 1
  %8060 = extractelement <2 x float> %8059, i32 0
  %8061 = tail call float @llvm.trunc.f32(float %8060)
  %8062 = tail call float @llvm.fabs.f32(float %8061)
  %8063 = fcmp ogt float %8062, 0x41E0000000000000
  %8064 = fptosi float %8061 to i32
  %8065 = zext i32 %8064 to i64
  %8066 = select i1 %8063, i64 2147483648, i64 %8065
  store i64 %8066, i64* %.pre243, align 8
  %8067 = add i64 %7982, add (i64 ptrtoint (%G_0x2a059c__rip__type* @G_0x2a059c__rip_ to i64), i64 33)
  %8068 = trunc i64 %8066 to i32
  %8069 = add i64 %7982, 39
  store i64 %8069, i64* %3, align 8
  %8070 = inttoptr i64 %8067 to i32*
  store i32 %8068, i32* %8070, align 4
  %8071 = load i64, i64* %3, align 8
  %8072 = add i64 %8071, ptrtoint (%G_0x25d9ed__rip__type* @G_0x25d9ed__rip_ to i64)
  %8073 = add i64 %8071, 7
  store i64 %8073, i64* %3, align 8
  %8074 = inttoptr i64 %8072 to i64*
  %8075 = load i64, i64* %8074, align 8
  store i64 %8075, i64* %RCX.i6189, align 8
  %8076 = add i64 %8071, add (i64 ptrtoint (%G_0x25be7e__rip__type* @G_0x25be7e__rip_ to i64), i64 7)
  %8077 = add i64 %8071, 14
  store i64 %8077, i64* %3, align 8
  %8078 = inttoptr i64 %8076 to i64*
  %8079 = load i64, i64* %8078, align 8
  store i64 %8079, i64* %RDX.i5984, align 8
  %8080 = add i64 %8079, 152
  %8081 = add i64 %8071, 20
  store i64 %8081, i64* %3, align 8
  %8082 = inttoptr i64 %8080 to i32*
  %8083 = load i32, i32* %8082, align 4
  %8084 = zext i32 %8083 to i64
  store i64 %8084, i64* %.pre243, align 8
  %8085 = add i64 %8079, 156
  %8086 = add i64 %8071, 26
  store i64 %8086, i64* %3, align 8
  %8087 = inttoptr i64 %8085 to i32*
  %8088 = load i32, i32* %8087, align 4
  %8089 = zext i32 %8088 to i64
  store i64 %8089, i64* %RSI.i3363, align 8
  %8090 = shl nuw i64 %8084, 32
  %8091 = ashr i64 %8090, 33
  %8092 = lshr i64 %8091, 1
  %8093 = trunc i64 %8091 to i8
  %8094 = and i8 %8093, 1
  %8095 = trunc i64 %8092 to i32
  %8096 = and i64 %8092, 4294967295
  store i64 %8096, i64* %.pre243, align 8
  store i8 %8094, i8* %44, align 1
  %8097 = and i32 %8095, 255
  %8098 = tail call i32 @llvm.ctpop.i32(i32 %8097)
  %8099 = trunc i32 %8098 to i8
  %8100 = and i8 %8099, 1
  %8101 = xor i8 %8100, 1
  store i8 %8101, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8102 = icmp eq i32 %8095, 0
  %8103 = zext i1 %8102 to i8
  store i8 %8103, i8* %59, align 1
  %8104 = lshr i64 %8091, 32
  %8105 = trunc i64 %8104 to i8
  %8106 = and i8 %8105, 1
  store i8 %8106, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %8107 = load i64, i64* %RBP.i, align 8
  %8108 = add i64 %8107, -100
  %8109 = add i64 %8071, 32
  store i64 %8109, i64* %3, align 8
  %8110 = inttoptr i64 %8108 to i32*
  %8111 = load i32, i32* %8110, align 4
  %8112 = zext i32 %8111 to i64
  store i64 %8112, i64* %RDI.i3357, align 8
  %8113 = trunc i64 %8092 to i32
  %8114 = add i32 %8111, %8113
  %8115 = zext i32 %8114 to i64
  store i64 %8115, i64* %.pre243, align 8
  %8116 = icmp ult i32 %8114, %8113
  %8117 = icmp ult i32 %8114, %8111
  %8118 = or i1 %8116, %8117
  %8119 = zext i1 %8118 to i8
  store i8 %8119, i8* %44, align 1
  %8120 = and i32 %8114, 255
  %8121 = tail call i32 @llvm.ctpop.i32(i32 %8120)
  %8122 = trunc i32 %8121 to i8
  %8123 = and i8 %8122, 1
  %8124 = xor i8 %8123, 1
  store i8 %8124, i8* %51, align 1
  %8125 = xor i64 %8112, %8092
  %8126 = trunc i64 %8125 to i32
  %8127 = xor i32 %8126, %8114
  %8128 = lshr i32 %8127, 4
  %8129 = trunc i32 %8128 to i8
  %8130 = and i8 %8129, 1
  store i8 %8130, i8* %56, align 1
  %8131 = icmp eq i32 %8114, 0
  %8132 = zext i1 %8131 to i8
  store i8 %8132, i8* %59, align 1
  %8133 = lshr i32 %8114, 31
  %8134 = trunc i32 %8133 to i8
  store i8 %8134, i8* %62, align 1
  %8135 = lshr i64 %8091, 32
  %8136 = trunc i64 %8135 to i32
  %8137 = and i32 %8136, 1
  %8138 = lshr i32 %8111, 31
  %8139 = xor i32 %8133, %8137
  %8140 = xor i32 %8133, %8138
  %8141 = add nuw nsw i32 %8139, %8140
  %8142 = icmp eq i32 %8141, 2
  %8143 = zext i1 %8142 to i8
  store i8 %8143, i8* %68, align 1
  %8144 = sext i32 %8114 to i64
  store i64 %8144, i64* %RDX.i5984, align 8
  %8145 = load i64, i64* %RCX.i6189, align 8
  %8146 = shl nsw i64 %8144, 3
  %8147 = add i64 %8145, %8146
  %8148 = add i64 %8071, 41
  store i64 %8148, i64* %3, align 8
  %8149 = inttoptr i64 %8147 to i64*
  %8150 = load i64, i64* %8149, align 8
  store i64 %8150, i64* %RCX.i6189, align 8
  %8151 = shl nuw i64 %8089, 32
  %8152 = ashr i64 %8151, 33
  %8153 = lshr i64 %8152, 1
  %8154 = trunc i64 %8152 to i8
  %8155 = and i8 %8154, 1
  %8156 = trunc i64 %8153 to i32
  %8157 = and i64 %8153, 4294967295
  store i64 %8157, i64* %RSI.i3363, align 8
  store i8 %8155, i8* %44, align 1
  %8158 = and i32 %8156, 255
  %8159 = tail call i32 @llvm.ctpop.i32(i32 %8158)
  %8160 = trunc i32 %8159 to i8
  %8161 = and i8 %8160, 1
  %8162 = xor i8 %8161, 1
  store i8 %8162, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8163 = icmp eq i32 %8156, 0
  %8164 = zext i1 %8163 to i8
  store i8 %8164, i8* %59, align 1
  %8165 = lshr i64 %8152, 32
  %8166 = trunc i64 %8165 to i8
  %8167 = and i8 %8166, 1
  store i8 %8167, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %8168 = add i64 %8107, -104
  %8169 = add i64 %8071, 47
  store i64 %8169, i64* %3, align 8
  %8170 = inttoptr i64 %8168 to i32*
  %8171 = load i32, i32* %8170, align 4
  %8172 = zext i32 %8171 to i64
  store i64 %8172, i64* %.pre243, align 8
  %8173 = trunc i64 %8153 to i32
  %8174 = add i32 %8171, %8173
  %8175 = zext i32 %8174 to i64
  store i64 %8175, i64* %RSI.i3363, align 8
  %8176 = icmp ult i32 %8174, %8173
  %8177 = icmp ult i32 %8174, %8171
  %8178 = or i1 %8176, %8177
  %8179 = zext i1 %8178 to i8
  store i8 %8179, i8* %44, align 1
  %8180 = and i32 %8174, 255
  %8181 = tail call i32 @llvm.ctpop.i32(i32 %8180)
  %8182 = trunc i32 %8181 to i8
  %8183 = and i8 %8182, 1
  %8184 = xor i8 %8183, 1
  store i8 %8184, i8* %51, align 1
  %8185 = xor i64 %8172, %8153
  %8186 = trunc i64 %8185 to i32
  %8187 = xor i32 %8186, %8174
  %8188 = lshr i32 %8187, 4
  %8189 = trunc i32 %8188 to i8
  %8190 = and i8 %8189, 1
  store i8 %8190, i8* %56, align 1
  %8191 = icmp eq i32 %8174, 0
  %8192 = zext i1 %8191 to i8
  store i8 %8192, i8* %59, align 1
  %8193 = lshr i32 %8174, 31
  %8194 = trunc i32 %8193 to i8
  store i8 %8194, i8* %62, align 1
  %8195 = lshr i64 %8152, 32
  %8196 = trunc i64 %8195 to i32
  %8197 = and i32 %8196, 1
  %8198 = lshr i32 %8171, 31
  %8199 = xor i32 %8193, %8197
  %8200 = xor i32 %8193, %8198
  %8201 = add nuw nsw i32 %8199, %8200
  %8202 = icmp eq i32 %8201, 2
  %8203 = zext i1 %8202 to i8
  store i8 %8203, i8* %68, align 1
  %8204 = sext i32 %8174 to i64
  store i64 %8204, i64* %RDX.i5984, align 8
  %8205 = shl nsw i64 %8204, 3
  %8206 = add i64 %8150, %8205
  %8207 = add i64 %8071, 56
  store i64 %8207, i64* %3, align 8
  %8208 = inttoptr i64 %8206 to i64*
  %8209 = load i64, i64* %8208, align 8
  store i64 %8209, i64* %RCX.i6189, align 8
  %8210 = load i64, i64* %RBP.i, align 8
  %8211 = add i64 %8210, -42
  %8212 = add i64 %8071, 60
  store i64 %8212, i64* %3, align 8
  %8213 = inttoptr i64 %8211 to i16*
  %8214 = load i16, i16* %8213, align 2
  %8215 = sext i16 %8214 to i32
  %8216 = add nsw i32 %8215, -1
  %8217 = zext i32 %8216 to i64
  store i64 %8217, i64* %.pre243, align 8
  %8218 = and i32 %8216, 255
  %8219 = tail call i32 @llvm.ctpop.i32(i32 %8218)
  %8220 = trunc i32 %8219 to i8
  %8221 = and i8 %8220, 1
  %8222 = xor i8 %8221, 1
  store i8 %8222, i8* %51, align 1
  %8223 = xor i32 %8216, %8215
  %8224 = lshr i32 %8223, 4
  %8225 = trunc i32 %8224 to i8
  %8226 = and i8 %8225, 1
  store i8 %8226, i8* %56, align 1
  %8227 = icmp eq i32 %8216, 0
  %8228 = zext i1 %8227 to i8
  store i8 %8228, i8* %59, align 1
  %8229 = lshr i32 %8216, 31
  %8230 = trunc i32 %8229 to i8
  store i8 %8230, i8* %62, align 1
  %8231 = lshr i32 %8215, 31
  %8232 = xor i32 %8229, %8231
  %8233 = add nuw nsw i32 %8232, %8231
  %8234 = icmp eq i32 %8233, 2
  %8235 = zext i1 %8234 to i8
  store i8 %8235, i8* %68, align 1
  %8236 = sext i32 %8216 to i64
  store i64 %8236, i64* %RDX.i5984, align 8
  %8237 = shl nsw i64 %8236, 3
  %8238 = add i64 %8209, %8237
  %8239 = add i64 %8071, 69
  store i64 %8239, i64* %3, align 8
  %8240 = inttoptr i64 %8238 to i64*
  %8241 = load i64, i64* %8240, align 8
  store i64 %8241, i64* %RCX.i6189, align 8
  %8242 = add i64 %8210, -60
  %8243 = add i64 %8071, 73
  store i64 %8243, i64* %3, align 8
  %8244 = inttoptr i64 %8242 to i32*
  %8245 = load i32, i32* %8244, align 4
  %8246 = sext i32 %8245 to i64
  store i64 %8246, i64* %RDX.i5984, align 8
  %8247 = shl nsw i64 %8246, 3
  %8248 = add i64 %8247, %8241
  %8249 = add i64 %8071, 77
  store i64 %8249, i64* %3, align 8
  %8250 = inttoptr i64 %8248 to i64*
  %8251 = load i64, i64* %8250, align 8
  store i64 %8251, i64* %RCX.i6189, align 8
  %8252 = add i64 %8251, 8
  %8253 = add i64 %8071, 80
  store i64 %8253, i64* %3, align 8
  %8254 = inttoptr i64 %8252 to i32*
  %8255 = load i32, i32* %8254, align 4
  %8256 = zext i32 %8255 to i64
  store i64 %8256, i64* %.pre243, align 8
  %8257 = add i64 %8071, add (i64 ptrtoint (%G_0x2a054a__rip__type* @G_0x2a054a__rip_ to i64), i64 80)
  %8258 = add i64 %8071, 86
  store i64 %8258, i64* %3, align 8
  %8259 = inttoptr i64 %8257 to i32*
  store i32 %8255, i32* %8259, align 4
  %8260 = load i64, i64* %3, align 8
  %8261 = add i64 %8260, ptrtoint (%G_0x2a0544__rip__type* @G_0x2a0544__rip_ to i64)
  %8262 = add i64 %8260, 6
  store i64 %8262, i64* %3, align 8
  %8263 = inttoptr i64 %8261 to i32*
  %8264 = load i32, i32* %8263, align 4
  %8265 = zext i32 %8264 to i64
  store i64 %8265, i64* %.pre243, align 8
  %8266 = load i64, i64* %RBP.i, align 8
  %8267 = add i64 %8266, -42
  %8268 = add i64 %8260, 10
  store i64 %8268, i64* %3, align 8
  %8269 = inttoptr i64 %8267 to i16*
  %8270 = load i16, i16* %8269, align 2
  %8271 = sext i16 %8270 to i64
  %8272 = and i64 %8271, 4294967295
  store i64 %8272, i64* %RSI.i3363, align 8
  %R8W.i3218 = bitcast %union.anon* %97 to i16*
  store i16 %8270, i16* %R8W.i3218, align 2
  %8273 = sext i16 %8270 to i32
  %8274 = add nsw i32 %8273, 1
  %8275 = zext i32 %8274 to i64
  store i64 %8275, i64* %RDI.i3357, align 8
  %8276 = sext i32 %8264 to i64
  %8277 = sext i32 %8274 to i64
  %8278 = mul nsw i64 %8277, %8276
  %8279 = trunc i64 %8278 to i32
  %8280 = shl i64 %8278, 32
  %8281 = ashr exact i64 %8280, 32
  %8282 = icmp ne i64 %8281, %8278
  %8283 = zext i1 %8282 to i8
  store i8 %8283, i8* %44, align 1
  %8284 = and i32 %8279, 255
  %8285 = tail call i32 @llvm.ctpop.i32(i32 %8284)
  %8286 = trunc i32 %8285 to i8
  %8287 = and i8 %8286, 1
  %8288 = xor i8 %8287, 1
  store i8 %8288, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %8289 = lshr i32 %8279, 31
  %8290 = trunc i32 %8289 to i8
  store i8 %8290, i8* %62, align 1
  store i8 %8283, i8* %68, align 1
  %8291 = trunc i64 %8278 to i32
  %8292 = load <2 x i32>, <2 x i32>* %8015, align 1
  %8293 = load <2 x i32>, <2 x i32>* %8018, align 1
  %8294 = sitofp i32 %8291 to float
  store float %8294, float* %8021, align 1
  %8295 = extractelement <2 x i32> %8292, i32 1
  store i32 %8295, i32* %8024, align 1
  %8296 = extractelement <2 x i32> %8293, i32 0
  store i32 %8296, i32* %8026, align 1
  %8297 = extractelement <2 x i32> %8293, i32 1
  store i32 %8297, i32* %8029, align 1
  %8298 = load <2 x i32>, <2 x i32>* %8032, align 1
  %8299 = load <2 x i32>, <2 x i32>* %8035, align 1
  %8300 = sitofp i16 %8270 to float
  store float %8300, float* %8038, align 1
  %8301 = extractelement <2 x i32> %8298, i32 1
  store i32 %8301, i32* %8041, align 1
  %8302 = extractelement <2 x i32> %8299, i32 0
  store i32 %8302, i32* %8043, align 1
  %8303 = extractelement <2 x i32> %8299, i32 1
  store i32 %8303, i32* %8046, align 1
  %8304 = load <2 x float>, <2 x float>* %8047, align 1
  %8305 = load <2 x i32>, <2 x i32>* %8018, align 1
  %8306 = load <2 x float>, <2 x float>* %8050, align 1
  %8307 = extractelement <2 x float> %8304, i32 0
  %8308 = extractelement <2 x float> %8306, i32 0
  %8309 = fdiv float %8307, %8308
  store float %8309, float* %8021, align 1
  %8310 = bitcast <2 x float> %8304 to <2 x i32>
  %8311 = extractelement <2 x i32> %8310, i32 1
  store i32 %8311, i32* %8024, align 1
  %8312 = extractelement <2 x i32> %8305, i32 0
  store i32 %8312, i32* %8026, align 1
  %8313 = extractelement <2 x i32> %8305, i32 1
  store i32 %8313, i32* %8029, align 1
  %8314 = load <2 x float>, <2 x float>* %8047, align 1
  %8315 = extractelement <2 x float> %8314, i32 0
  %8316 = tail call float @llvm.trunc.f32(float %8315)
  %8317 = tail call float @llvm.fabs.f32(float %8316)
  %8318 = fcmp ogt float %8317, 0x41E0000000000000
  %8319 = fptosi float %8316 to i32
  %8320 = zext i32 %8319 to i64
  %8321 = select i1 %8318, i64 2147483648, i64 %8320
  store i64 %8321, i64* %.pre243, align 8
  %8322 = trunc i64 %8321 to i32
  store i32 %8322, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  %8323 = load i64, i64* %RBP.i, align 8
  %8324 = add i64 %8323, -326
  %8325 = load i16, i16* %R8W.i3218, align 2
  %8326 = add i64 %8260, 52
  store i64 %8326, i64* %3, align 8
  %8327 = inttoptr i64 %8324 to i16*
  store i16 %8325, i16* %8327, align 2
  %.pre180 = load i64, i64* %3, align 8
  br label %block_.L_46fafe

block_.L_46fafe:                                  ; preds = %block_.L_46f9eb, %block_.L_46f959
  %8328 = phi i64 [ %.pre180, %block_.L_46f9eb ], [ %7589, %block_.L_46f959 ]
  %8329 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8329, i64* %.pre243, align 8
  %8330 = add i64 %8329, 24
  %8331 = add i64 %8328, 12
  store i64 %8331, i64* %3, align 8
  %8332 = inttoptr i64 %8330 to i32*
  %8333 = load i32, i32* %8332, align 4
  %8334 = add i32 %8333, -1
  %8335 = icmp eq i32 %8333, 0
  %8336 = zext i1 %8335 to i8
  store i8 %8336, i8* %44, align 1
  %8337 = and i32 %8334, 255
  %8338 = tail call i32 @llvm.ctpop.i32(i32 %8337)
  %8339 = trunc i32 %8338 to i8
  %8340 = and i8 %8339, 1
  %8341 = xor i8 %8340, 1
  store i8 %8341, i8* %51, align 1
  %8342 = xor i32 %8334, %8333
  %8343 = lshr i32 %8342, 4
  %8344 = trunc i32 %8343 to i8
  %8345 = and i8 %8344, 1
  store i8 %8345, i8* %56, align 1
  %8346 = icmp eq i32 %8334, 0
  %8347 = zext i1 %8346 to i8
  store i8 %8347, i8* %59, align 1
  %8348 = lshr i32 %8334, 31
  %8349 = trunc i32 %8348 to i8
  store i8 %8349, i8* %62, align 1
  %8350 = lshr i32 %8333, 31
  %8351 = xor i32 %8348, %8350
  %8352 = add nuw nsw i32 %8351, %8350
  %8353 = icmp eq i32 %8352, 2
  %8354 = zext i1 %8353 to i8
  store i8 %8354, i8* %68, align 1
  %.v267 = select i1 %8346, i64 18, i64 448
  %8355 = add i64 %8328, %.v267
  store i64 %8355, i64* %3, align 8
  br i1 %8346, label %block_46fb10, label %block_.L_46fcbe

block_46fb10:                                     ; preds = %block_.L_46fafe
  %8356 = load i64, i64* %RBP.i, align 8
  %8357 = add i64 %8356, -48
  %8358 = add i64 %8355, 4
  store i64 %8358, i64* %3, align 8
  %8359 = inttoptr i64 %8357 to i32*
  %8360 = load i32, i32* %8359, align 4
  store i8 0, i8* %44, align 1
  %8361 = and i32 %8360, 255
  %8362 = tail call i32 @llvm.ctpop.i32(i32 %8361)
  %8363 = trunc i32 %8362 to i8
  %8364 = and i8 %8363, 1
  %8365 = xor i8 %8364, 1
  store i8 %8365, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8366 = icmp eq i32 %8360, 0
  %8367 = zext i1 %8366 to i8
  store i8 %8367, i8* %59, align 1
  %8368 = lshr i32 %8360, 31
  %8369 = trunc i32 %8368 to i8
  store i8 %8369, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v304 = select i1 %8366, i64 10, i64 430
  %8370 = add i64 %8355, %.v304
  store i64 %8370, i64* %3, align 8
  br i1 %8366, label %block_46fb1a, label %block_.L_46fcbe

block_46fb1a:                                     ; preds = %block_46fb10
  %8371 = add i64 %8356, -42
  %8372 = add i64 %8370, 4
  store i64 %8372, i64* %3, align 8
  %8373 = inttoptr i64 %8371 to i16*
  %8374 = load i16, i16* %8373, align 2
  %8375 = sext i16 %8374 to i64
  %8376 = and i64 %8375, 4294967295
  store i64 %8376, i64* %.pre243, align 8
  %8377 = sext i16 %8374 to i32
  store i8 0, i8* %44, align 1
  %8378 = and i32 %8377, 255
  %8379 = tail call i32 @llvm.ctpop.i32(i32 %8378)
  %8380 = trunc i32 %8379 to i8
  %8381 = and i8 %8380, 1
  %8382 = xor i8 %8381, 1
  store i8 %8382, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8383 = icmp eq i16 %8374, 0
  %8384 = zext i1 %8383 to i8
  store i8 %8384, i8* %59, align 1
  %8385 = lshr i32 %8377, 31
  %8386 = trunc i32 %8385 to i8
  store i8 %8386, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v305 = select i1 %8383, i64 13, i64 420
  %8387 = add i64 %8370, %.v305
  store i64 %8387, i64* %3, align 8
  br i1 %8383, label %block_46fb27, label %block_.L_46fcbe

block_46fb27:                                     ; preds = %block_46fb1a
  %8388 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %8388, i64* %.pre243, align 8
  store i64 %8329, i64* %RCX.i6189, align 8
  %8389 = add i64 %8329, 152
  %8390 = add i64 %8387, 22
  store i64 %8390, i64* %3, align 8
  %8391 = inttoptr i64 %8389 to i32*
  %8392 = load i32, i32* %8391, align 4
  %8393 = sext i32 %8392 to i64
  %8394 = ashr i64 %8393, 1
  %8395 = lshr i64 %8394, 1
  %8396 = trunc i64 %8394 to i8
  %8397 = and i8 %8396, 1
  %8398 = trunc i64 %8395 to i32
  %8399 = and i64 %8395, 4294967295
  store i64 %8399, i64* %RDX.i5984, align 8
  store i8 %8397, i8* %44, align 1
  %8400 = and i32 %8398, 255
  %8401 = tail call i32 @llvm.ctpop.i32(i32 %8400)
  %8402 = trunc i32 %8401 to i8
  %8403 = and i8 %8402, 1
  %8404 = xor i8 %8403, 1
  store i8 %8404, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8405 = icmp eq i32 %8398, 0
  %8406 = zext i1 %8405 to i8
  store i8 %8406, i8* %59, align 1
  %8407 = lshr i64 %8394, 32
  %8408 = trunc i64 %8407 to i8
  %8409 = and i8 %8408, 1
  store i8 %8409, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %8410 = add i64 %8356, -100
  %8411 = add i64 %8387, 28
  store i64 %8411, i64* %3, align 8
  %8412 = trunc i64 %8395 to i32
  %8413 = inttoptr i64 %8410 to i32*
  %8414 = load i32, i32* %8413, align 4
  %8415 = add i32 %8414, %8412
  %8416 = zext i32 %8415 to i64
  store i64 %8416, i64* %RDX.i5984, align 8
  %8417 = icmp ult i32 %8415, %8412
  %8418 = icmp ult i32 %8415, %8414
  %8419 = or i1 %8417, %8418
  %8420 = zext i1 %8419 to i8
  store i8 %8420, i8* %44, align 1
  %8421 = and i32 %8415, 255
  %8422 = tail call i32 @llvm.ctpop.i32(i32 %8421)
  %8423 = trunc i32 %8422 to i8
  %8424 = and i8 %8423, 1
  %8425 = xor i8 %8424, 1
  store i8 %8425, i8* %51, align 1
  %8426 = xor i32 %8414, %8412
  %8427 = xor i32 %8426, %8415
  %8428 = lshr i32 %8427, 4
  %8429 = trunc i32 %8428 to i8
  %8430 = and i8 %8429, 1
  store i8 %8430, i8* %56, align 1
  %8431 = icmp eq i32 %8415, 0
  %8432 = zext i1 %8431 to i8
  store i8 %8432, i8* %59, align 1
  %8433 = lshr i32 %8415, 31
  %8434 = trunc i32 %8433 to i8
  store i8 %8434, i8* %62, align 1
  %8435 = lshr i64 %8394, 32
  %8436 = trunc i64 %8435 to i32
  %8437 = and i32 %8436, 1
  %8438 = lshr i32 %8414, 31
  %8439 = xor i32 %8433, %8437
  %8440 = xor i32 %8433, %8438
  %8441 = add nuw nsw i32 %8439, %8440
  %8442 = icmp eq i32 %8441, 2
  %8443 = zext i1 %8442 to i8
  store i8 %8443, i8* %68, align 1
  %8444 = sext i32 %8415 to i64
  store i64 %8444, i64* %RCX.i6189, align 8
  %8445 = shl nsw i64 %8444, 3
  %8446 = add i64 %8388, %8445
  %8447 = add i64 %8387, 35
  store i64 %8447, i64* %3, align 8
  %8448 = inttoptr i64 %8446 to i64*
  %8449 = load i64, i64* %8448, align 8
  store i64 %8449, i64* %.pre243, align 8
  store i64 %8329, i64* %RCX.i6189, align 8
  %8450 = add i64 %8329, 156
  %8451 = add i64 %8387, 49
  store i64 %8451, i64* %3, align 8
  %8452 = inttoptr i64 %8450 to i32*
  %8453 = load i32, i32* %8452, align 4
  %8454 = sext i32 %8453 to i64
  %8455 = ashr i64 %8454, 1
  %8456 = lshr i64 %8455, 1
  %8457 = trunc i64 %8455 to i8
  %8458 = and i8 %8457, 1
  %8459 = trunc i64 %8456 to i32
  %8460 = and i64 %8456, 4294967295
  store i64 %8460, i64* %RDX.i5984, align 8
  store i8 %8458, i8* %44, align 1
  %8461 = and i32 %8459, 255
  %8462 = tail call i32 @llvm.ctpop.i32(i32 %8461)
  %8463 = trunc i32 %8462 to i8
  %8464 = and i8 %8463, 1
  %8465 = xor i8 %8464, 1
  store i8 %8465, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8466 = icmp eq i32 %8459, 0
  %8467 = zext i1 %8466 to i8
  store i8 %8467, i8* %59, align 1
  %8468 = lshr i64 %8455, 32
  %8469 = trunc i64 %8468 to i8
  %8470 = and i8 %8469, 1
  store i8 %8470, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %8471 = load i64, i64* %RBP.i, align 8
  %8472 = add i64 %8471, -104
  %8473 = add i64 %8387, 55
  store i64 %8473, i64* %3, align 8
  %8474 = trunc i64 %8456 to i32
  %8475 = inttoptr i64 %8472 to i32*
  %8476 = load i32, i32* %8475, align 4
  %8477 = add i32 %8476, %8474
  %8478 = zext i32 %8477 to i64
  store i64 %8478, i64* %RDX.i5984, align 8
  %8479 = icmp ult i32 %8477, %8474
  %8480 = icmp ult i32 %8477, %8476
  %8481 = or i1 %8479, %8480
  %8482 = zext i1 %8481 to i8
  store i8 %8482, i8* %44, align 1
  %8483 = and i32 %8477, 255
  %8484 = tail call i32 @llvm.ctpop.i32(i32 %8483)
  %8485 = trunc i32 %8484 to i8
  %8486 = and i8 %8485, 1
  %8487 = xor i8 %8486, 1
  store i8 %8487, i8* %51, align 1
  %8488 = xor i32 %8476, %8474
  %8489 = xor i32 %8488, %8477
  %8490 = lshr i32 %8489, 4
  %8491 = trunc i32 %8490 to i8
  %8492 = and i8 %8491, 1
  store i8 %8492, i8* %56, align 1
  %8493 = icmp eq i32 %8477, 0
  %8494 = zext i1 %8493 to i8
  store i8 %8494, i8* %59, align 1
  %8495 = lshr i32 %8477, 31
  %8496 = trunc i32 %8495 to i8
  store i8 %8496, i8* %62, align 1
  %8497 = lshr i64 %8455, 32
  %8498 = trunc i64 %8497 to i32
  %8499 = and i32 %8498, 1
  %8500 = lshr i32 %8476, 31
  %8501 = xor i32 %8495, %8499
  %8502 = xor i32 %8495, %8500
  %8503 = add nuw nsw i32 %8501, %8502
  %8504 = icmp eq i32 %8503, 2
  %8505 = zext i1 %8504 to i8
  store i8 %8505, i8* %68, align 1
  %8506 = sext i32 %8477 to i64
  store i64 %8506, i64* %RCX.i6189, align 8
  %8507 = shl nsw i64 %8506, 3
  %8508 = add i64 %8449, %8507
  %8509 = add i64 %8387, 62
  store i64 %8509, i64* %3, align 8
  %8510 = inttoptr i64 %8508 to i64*
  %8511 = load i64, i64* %8510, align 8
  store i64 %8511, i64* %.pre243, align 8
  %8512 = add i64 %8387, 65
  store i64 %8512, i64* %3, align 8
  %8513 = inttoptr i64 %8511 to i64*
  %8514 = load i64, i64* %8513, align 8
  store i64 %8514, i64* %.pre243, align 8
  %8515 = add i64 %8471, -60
  %8516 = add i64 %8387, 69
  store i64 %8516, i64* %3, align 8
  %8517 = inttoptr i64 %8515 to i32*
  %8518 = load i32, i32* %8517, align 4
  %8519 = sext i32 %8518 to i64
  store i64 %8519, i64* %RCX.i6189, align 8
  %8520 = shl nsw i64 %8519, 3
  %8521 = add i64 %8520, %8514
  %8522 = add i64 %8387, 73
  store i64 %8522, i64* %3, align 8
  %8523 = inttoptr i64 %8521 to i64*
  %8524 = load i64, i64* %8523, align 8
  store i64 %8524, i64* %.pre243, align 8
  %8525 = add i64 %8387, 75
  store i64 %8525, i64* %3, align 8
  %8526 = inttoptr i64 %8524 to i32*
  %8527 = load i32, i32* %8526, align 4
  %8528 = zext i32 %8527 to i64
  store i64 %8528, i64* %RDX.i5984, align 8
  store i32 %8527, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %8529 = load i32, i32* bitcast (%G_0x6f934c_type* @G_0x6f934c to i32*), align 8
  store i8 0, i8* %44, align 1
  %8530 = and i32 %8529, 255
  %8531 = tail call i32 @llvm.ctpop.i32(i32 %8530)
  %8532 = trunc i32 %8531 to i8
  %8533 = and i8 %8532, 1
  %8534 = xor i8 %8533, 1
  store i8 %8534, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8535 = icmp eq i32 %8529, 0
  %8536 = zext i1 %8535 to i8
  store i8 %8536, i8* %59, align 1
  %8537 = lshr i32 %8529, 31
  %8538 = trunc i32 %8537 to i8
  store i8 %8538, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v306 = select i1 %8535, i64 109, i64 96
  %8539 = add i64 %8387, %.v306
  store i64 %8539, i64* %3, align 8
  br i1 %8535, label %block_.L_46fb94, label %block_46fb87

block_46fb87:                                     ; preds = %block_46fb27
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %8540 = load i64, i64* %RBP.i, align 8
  %8541 = add i64 %8540, -332
  %8542 = add i64 %8539, 8
  store i64 %8542, i64* %3, align 8
  %8543 = inttoptr i64 %8541 to i32*
  store i32 0, i32* %8543, align 4
  %8544 = load i64, i64* %3, align 8
  %8545 = add i64 %8544, 18
  store i64 %8545, i64* %3, align 8
  br label %block_.L_46fba1

block_.L_46fb94:                                  ; preds = %block_46fb27
  store i64 %8528, i64* %.pre243, align 8
  %8546 = load i64, i64* %RBP.i, align 8
  %8547 = add i64 %8546, -332
  %8548 = add i64 %8539, 13
  store i64 %8548, i64* %3, align 8
  %8549 = inttoptr i64 %8547 to i32*
  store i32 %8527, i32* %8549, align 4
  %.pre181 = load i64, i64* %3, align 8
  br label %block_.L_46fba1

block_.L_46fba1:                                  ; preds = %block_.L_46fb94, %block_46fb87
  %8550 = phi i64 [ %.pre181, %block_.L_46fb94 ], [ %8545, %block_46fb87 ]
  %8551 = load i64, i64* %RBP.i, align 8
  %8552 = add i64 %8551, -332
  %8553 = add i64 %8550, 6
  store i64 %8553, i64* %3, align 8
  %8554 = inttoptr i64 %8552 to i32*
  %8555 = load i32, i32* %8554, align 4
  %8556 = zext i32 %8555 to i64
  store i64 %8556, i64* %.pre243, align 8
  %8557 = bitcast [32 x %union.VectorReg]* %111 to i8*
  %8558 = add i64 %8550, add (i64 ptrtoint (%G_0x4dc85__rip__type* @G_0x4dc85__rip_ to i64), i64 6)
  %8559 = add i64 %8550, 14
  store i64 %8559, i64* %3, align 8
  %8560 = inttoptr i64 %8558 to i32*
  %8561 = load i32, i32* %8560, align 4
  %8562 = bitcast [32 x %union.VectorReg]* %111 to i32*
  store i32 %8561, i32* %8562, align 1
  %8563 = getelementptr inbounds i8, i8* %8557, i64 4
  %8564 = bitcast i8* %8563 to float*
  store float 0.000000e+00, float* %8564, align 1
  %8565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %8566 = bitcast i64* %8565 to float*
  store float 0.000000e+00, float* %8566, align 1
  %8567 = getelementptr inbounds i8, i8* %8557, i64 12
  %8568 = bitcast i8* %8567 to float*
  store float 0.000000e+00, float* %8568, align 1
  store i64 0, i64* %RCX.i6189, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  store i32 %8555, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %8569 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %8569, i64* %RDX.i5984, align 8
  %RSI.i3103 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %8570 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8570, i64* %RSI.i3103, align 8
  %8571 = add i64 %8570, 152
  %8572 = add i64 %8550, 45
  store i64 %8572, i64* %3, align 8
  %8573 = inttoptr i64 %8571 to i32*
  %8574 = load i32, i32* %8573, align 4
  %8575 = sext i32 %8574 to i64
  %8576 = ashr i64 %8575, 1
  %8577 = lshr i64 %8576, 1
  %8578 = trunc i64 %8576 to i8
  %8579 = and i8 %8578, 1
  %8580 = trunc i64 %8577 to i32
  %8581 = and i64 %8577, 4294967295
  store i64 %8581, i64* %.pre243, align 8
  store i8 %8579, i8* %44, align 1
  %8582 = and i32 %8580, 255
  %8583 = tail call i32 @llvm.ctpop.i32(i32 %8582)
  %8584 = trunc i32 %8583 to i8
  %8585 = and i8 %8584, 1
  %8586 = xor i8 %8585, 1
  store i8 %8586, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8587 = icmp eq i32 %8580, 0
  %8588 = zext i1 %8587 to i8
  store i8 %8588, i8* %59, align 1
  %8589 = lshr i64 %8576, 32
  %8590 = trunc i64 %8589 to i8
  %8591 = and i8 %8590, 1
  store i8 %8591, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %8592 = add i64 %8551, -100
  %8593 = add i64 %8550, 51
  store i64 %8593, i64* %3, align 8
  %8594 = trunc i64 %8577 to i32
  %8595 = inttoptr i64 %8592 to i32*
  %8596 = load i32, i32* %8595, align 4
  %8597 = add i32 %8596, %8594
  %8598 = zext i32 %8597 to i64
  store i64 %8598, i64* %.pre243, align 8
  %8599 = icmp ult i32 %8597, %8594
  %8600 = icmp ult i32 %8597, %8596
  %8601 = or i1 %8599, %8600
  %8602 = zext i1 %8601 to i8
  store i8 %8602, i8* %44, align 1
  %8603 = and i32 %8597, 255
  %8604 = tail call i32 @llvm.ctpop.i32(i32 %8603)
  %8605 = trunc i32 %8604 to i8
  %8606 = and i8 %8605, 1
  %8607 = xor i8 %8606, 1
  store i8 %8607, i8* %51, align 1
  %8608 = xor i32 %8596, %8594
  %8609 = xor i32 %8608, %8597
  %8610 = lshr i32 %8609, 4
  %8611 = trunc i32 %8610 to i8
  %8612 = and i8 %8611, 1
  store i8 %8612, i8* %56, align 1
  %8613 = icmp eq i32 %8597, 0
  %8614 = zext i1 %8613 to i8
  store i8 %8614, i8* %59, align 1
  %8615 = lshr i32 %8597, 31
  %8616 = trunc i32 %8615 to i8
  store i8 %8616, i8* %62, align 1
  %8617 = lshr i64 %8576, 32
  %8618 = trunc i64 %8617 to i32
  %8619 = and i32 %8618, 1
  %8620 = lshr i32 %8596, 31
  %8621 = xor i32 %8615, %8619
  %8622 = xor i32 %8615, %8620
  %8623 = add nuw nsw i32 %8621, %8622
  %8624 = icmp eq i32 %8623, 2
  %8625 = zext i1 %8624 to i8
  store i8 %8625, i8* %68, align 1
  %8626 = sext i32 %8597 to i64
  store i64 %8626, i64* %RSI.i3103, align 8
  %8627 = shl nsw i64 %8626, 3
  %8628 = add i64 %8569, %8627
  %8629 = add i64 %8550, 58
  store i64 %8629, i64* %3, align 8
  %8630 = inttoptr i64 %8628 to i64*
  %8631 = load i64, i64* %8630, align 8
  store i64 %8631, i64* %RDX.i5984, align 8
  store i64 %8570, i64* %RSI.i3103, align 8
  %8632 = add i64 %8570, 156
  %8633 = add i64 %8550, 72
  store i64 %8633, i64* %3, align 8
  %8634 = inttoptr i64 %8632 to i32*
  %8635 = load i32, i32* %8634, align 4
  %8636 = sext i32 %8635 to i64
  %8637 = ashr i64 %8636, 1
  %8638 = lshr i64 %8637, 1
  %8639 = trunc i64 %8637 to i8
  %8640 = and i8 %8639, 1
  %8641 = trunc i64 %8638 to i32
  %8642 = and i64 %8638, 4294967295
  store i64 %8642, i64* %.pre243, align 8
  store i8 %8640, i8* %44, align 1
  %8643 = and i32 %8641, 255
  %8644 = tail call i32 @llvm.ctpop.i32(i32 %8643)
  %8645 = trunc i32 %8644 to i8
  %8646 = and i8 %8645, 1
  %8647 = xor i8 %8646, 1
  store i8 %8647, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8648 = icmp eq i32 %8641, 0
  %8649 = zext i1 %8648 to i8
  store i8 %8649, i8* %59, align 1
  %8650 = lshr i64 %8637, 32
  %8651 = trunc i64 %8650 to i8
  %8652 = and i8 %8651, 1
  store i8 %8652, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %8653 = load i64, i64* %RBP.i, align 8
  %8654 = add i64 %8653, -104
  %8655 = add i64 %8550, 78
  store i64 %8655, i64* %3, align 8
  %8656 = trunc i64 %8638 to i32
  %8657 = inttoptr i64 %8654 to i32*
  %8658 = load i32, i32* %8657, align 4
  %8659 = add i32 %8658, %8656
  %8660 = zext i32 %8659 to i64
  store i64 %8660, i64* %.pre243, align 8
  %8661 = icmp ult i32 %8659, %8656
  %8662 = icmp ult i32 %8659, %8658
  %8663 = or i1 %8661, %8662
  %8664 = zext i1 %8663 to i8
  store i8 %8664, i8* %44, align 1
  %8665 = and i32 %8659, 255
  %8666 = tail call i32 @llvm.ctpop.i32(i32 %8665)
  %8667 = trunc i32 %8666 to i8
  %8668 = and i8 %8667, 1
  %8669 = xor i8 %8668, 1
  store i8 %8669, i8* %51, align 1
  %8670 = xor i32 %8658, %8656
  %8671 = xor i32 %8670, %8659
  %8672 = lshr i32 %8671, 4
  %8673 = trunc i32 %8672 to i8
  %8674 = and i8 %8673, 1
  store i8 %8674, i8* %56, align 1
  %8675 = icmp eq i32 %8659, 0
  %8676 = zext i1 %8675 to i8
  store i8 %8676, i8* %59, align 1
  %8677 = lshr i32 %8659, 31
  %8678 = trunc i32 %8677 to i8
  store i8 %8678, i8* %62, align 1
  %8679 = lshr i64 %8637, 32
  %8680 = trunc i64 %8679 to i32
  %8681 = and i32 %8680, 1
  %8682 = lshr i32 %8658, 31
  %8683 = xor i32 %8677, %8681
  %8684 = xor i32 %8677, %8682
  %8685 = add nuw nsw i32 %8683, %8684
  %8686 = icmp eq i32 %8685, 2
  %8687 = zext i1 %8686 to i8
  store i8 %8687, i8* %68, align 1
  %8688 = sext i32 %8659 to i64
  store i64 %8688, i64* %RSI.i3103, align 8
  %8689 = shl nsw i64 %8688, 3
  %8690 = add i64 %8631, %8689
  %8691 = add i64 %8550, 85
  store i64 %8691, i64* %3, align 8
  %8692 = inttoptr i64 %8690 to i64*
  %8693 = load i64, i64* %8692, align 8
  store i64 %8693, i64* %RDX.i5984, align 8
  %8694 = add i64 %8653, -42
  %8695 = add i64 %8550, 90
  store i64 %8695, i64* %3, align 8
  %8696 = inttoptr i64 %8694 to i16*
  %8697 = load i16, i16* %8696, align 2
  %8698 = sext i16 %8697 to i64
  store i64 %8698, i64* %RSI.i3103, align 8
  %8699 = shl nsw i64 %8698, 3
  %8700 = add i64 %8699, %8693
  %8701 = add i64 %8550, 94
  store i64 %8701, i64* %3, align 8
  %8702 = inttoptr i64 %8700 to i64*
  %8703 = load i64, i64* %8702, align 8
  store i64 %8703, i64* %RDX.i5984, align 8
  %8704 = add i64 %8653, -60
  %8705 = add i64 %8550, 98
  store i64 %8705, i64* %3, align 8
  %8706 = inttoptr i64 %8704 to i32*
  %8707 = load i32, i32* %8706, align 4
  %8708 = sext i32 %8707 to i64
  store i64 %8708, i64* %RSI.i3103, align 8
  %8709 = shl nsw i64 %8708, 3
  %8710 = add i64 %8709, %8703
  %8711 = add i64 %8550, 102
  store i64 %8711, i64* %3, align 8
  %8712 = inttoptr i64 %8710 to i64*
  %8713 = load i64, i64* %8712, align 8
  store i64 %8713, i64* %RDX.i5984, align 8
  %8714 = add i64 %8713, 4
  %8715 = add i64 %8550, 105
  store i64 %8715, i64* %3, align 8
  %8716 = inttoptr i64 %8714 to i32*
  %8717 = load i32, i32* %8716, align 4
  %8718 = zext i32 %8717 to i64
  store i64 %8718, i64* %.pre243, align 8
  %RDI.i3056 = getelementptr inbounds %union.anon, %union.anon* %70, i64 0, i32 0
  %8719 = load i32, i32* %ECX.i5565, align 4
  %8720 = zext i32 %8719 to i64
  store i64 %8720, i64* %RDI.i3056, align 8
  %8721 = add i64 %8653, -188
  %8722 = add i64 %8550, 113
  store i64 %8722, i64* %3, align 8
  %8723 = inttoptr i64 %8721 to i32*
  %8724 = load i32, i32* %8723, align 4
  %8725 = sub i32 %8719, %8724
  %8726 = zext i32 %8725 to i64
  store i64 %8726, i64* %RDI.i3056, align 8
  %8727 = sext i32 %8717 to i64
  %8728 = sext i32 %8725 to i64
  %8729 = mul nsw i64 %8728, %8727
  %8730 = trunc i64 %8729 to i32
  %8731 = and i64 %8729, 4294967295
  store i64 %8731, i64* %.pre243, align 8
  %8732 = shl i64 %8729, 32
  %8733 = ashr exact i64 %8732, 32
  %8734 = icmp ne i64 %8733, %8729
  %8735 = zext i1 %8734 to i8
  store i8 %8735, i8* %44, align 1
  %8736 = and i32 %8730, 255
  %8737 = tail call i32 @llvm.ctpop.i32(i32 %8736)
  %8738 = trunc i32 %8737 to i8
  %8739 = and i8 %8738, 1
  %8740 = xor i8 %8739, 1
  store i8 %8740, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %8741 = lshr i32 %8730, 31
  %8742 = trunc i32 %8741 to i8
  store i8 %8742, i8* %62, align 1
  store i8 %8735, i8* %68, align 1
  %8743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8744 = bitcast %union.VectorReg* %8743 to i8*
  %8745 = trunc i64 %8729 to i32
  %8746 = bitcast %union.VectorReg* %8743 to <2 x i32>*
  %8747 = load <2 x i32>, <2 x i32>* %8746, align 1
  %8748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %8749 = bitcast i64* %8748 to <2 x i32>*
  %8750 = load <2 x i32>, <2 x i32>* %8749, align 1
  %8751 = sitofp i32 %8745 to float
  %8752 = bitcast %union.VectorReg* %8743 to float*
  store float %8751, float* %8752, align 1
  %8753 = extractelement <2 x i32> %8747, i32 1
  %8754 = getelementptr inbounds i8, i8* %8744, i64 4
  %8755 = bitcast i8* %8754 to i32*
  store i32 %8753, i32* %8755, align 1
  %8756 = extractelement <2 x i32> %8750, i32 0
  %8757 = bitcast i64* %8748 to i32*
  store i32 %8756, i32* %8757, align 1
  %8758 = extractelement <2 x i32> %8750, i32 1
  %8759 = getelementptr inbounds i8, i8* %8744, i64 12
  %8760 = bitcast i8* %8759 to i32*
  store i32 %8758, i32* %8760, align 1
  %8761 = load i64, i64* %RBP.i, align 8
  %8762 = add i64 %8761, -184
  %8763 = add i64 %8550, 126
  store i64 %8763, i64* %3, align 8
  %8764 = inttoptr i64 %8762 to i32*
  %8765 = load i32, i32* %8764, align 4
  %8766 = zext i32 %8765 to i64
  store i64 %8766, i64* %.pre243, align 8
  %8767 = add i64 %8761, -188
  %8768 = add i64 %8550, 132
  store i64 %8768, i64* %3, align 8
  %8769 = inttoptr i64 %8767 to i32*
  %8770 = load i32, i32* %8769, align 4
  %8771 = sub i32 %8765, %8770
  %8772 = icmp ult i32 %8765, %8770
  %8773 = zext i1 %8772 to i8
  store i8 %8773, i8* %44, align 1
  %8774 = and i32 %8771, 255
  %8775 = tail call i32 @llvm.ctpop.i32(i32 %8774)
  %8776 = trunc i32 %8775 to i8
  %8777 = and i8 %8776, 1
  %8778 = xor i8 %8777, 1
  store i8 %8778, i8* %51, align 1
  %8779 = xor i32 %8770, %8765
  %8780 = xor i32 %8779, %8771
  %8781 = lshr i32 %8780, 4
  %8782 = trunc i32 %8781 to i8
  %8783 = and i8 %8782, 1
  store i8 %8783, i8* %56, align 1
  %8784 = icmp eq i32 %8771, 0
  %8785 = zext i1 %8784 to i8
  store i8 %8785, i8* %59, align 1
  %8786 = lshr i32 %8771, 31
  %8787 = trunc i32 %8786 to i8
  store i8 %8787, i8* %62, align 1
  %8788 = lshr i32 %8765, 31
  %8789 = lshr i32 %8770, 31
  %8790 = xor i32 %8789, %8788
  %8791 = xor i32 %8786, %8788
  %8792 = add nuw nsw i32 %8791, %8790
  %8793 = icmp eq i32 %8792, 2
  %8794 = zext i1 %8793 to i8
  store i8 %8794, i8* %68, align 1
  %8795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %8796 = bitcast %union.VectorReg* %8795 to i8*
  %8797 = bitcast %union.VectorReg* %8795 to <2 x i32>*
  %8798 = load <2 x i32>, <2 x i32>* %8797, align 1
  %8799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %8800 = bitcast i64* %8799 to <2 x i32>*
  %8801 = load <2 x i32>, <2 x i32>* %8800, align 1
  %8802 = sitofp i32 %8771 to float
  %8803 = bitcast %union.VectorReg* %8795 to float*
  store float %8802, float* %8803, align 1
  %8804 = extractelement <2 x i32> %8798, i32 1
  %8805 = getelementptr inbounds i8, i8* %8796, i64 4
  %8806 = bitcast i8* %8805 to i32*
  store i32 %8804, i32* %8806, align 1
  %8807 = extractelement <2 x i32> %8801, i32 0
  %8808 = bitcast i64* %8799 to i32*
  store i32 %8807, i32* %8808, align 1
  %8809 = extractelement <2 x i32> %8801, i32 1
  %8810 = getelementptr inbounds i8, i8* %8796, i64 12
  %8811 = bitcast i8* %8810 to i32*
  store i32 %8809, i32* %8811, align 1
  %8812 = bitcast %union.VectorReg* %8795 to <2 x float>*
  %8813 = load <2 x float>, <2 x float>* %8812, align 1
  %8814 = load <2 x i32>, <2 x i32>* %8800, align 1
  %8815 = bitcast [32 x %union.VectorReg]* %111 to <2 x float>*
  %8816 = load <2 x float>, <2 x float>* %8815, align 1
  %8817 = extractelement <2 x float> %8813, i32 0
  %8818 = extractelement <2 x float> %8816, i32 0
  %8819 = fadd float %8817, %8818
  store float %8819, float* %8803, align 1
  %8820 = bitcast <2 x float> %8813 to <2 x i32>
  %8821 = extractelement <2 x i32> %8820, i32 1
  store i32 %8821, i32* %8806, align 1
  %8822 = extractelement <2 x i32> %8814, i32 0
  store i32 %8822, i32* %8808, align 1
  %8823 = extractelement <2 x i32> %8814, i32 1
  store i32 %8823, i32* %8811, align 1
  %8824 = bitcast %union.VectorReg* %8743 to <2 x float>*
  %8825 = load <2 x float>, <2 x float>* %8824, align 1
  %8826 = load <2 x i32>, <2 x i32>* %8749, align 1
  %8827 = load <2 x float>, <2 x float>* %8812, align 1
  %8828 = extractelement <2 x float> %8825, i32 0
  %8829 = extractelement <2 x float> %8827, i32 0
  %8830 = fdiv float %8828, %8829
  store float %8830, float* %8752, align 1
  %8831 = bitcast <2 x float> %8825 to <2 x i32>
  %8832 = extractelement <2 x i32> %8831, i32 1
  store i32 %8832, i32* %8755, align 1
  %8833 = extractelement <2 x i32> %8826, i32 0
  store i32 %8833, i32* %8757, align 1
  %8834 = extractelement <2 x i32> %8826, i32 1
  store i32 %8834, i32* %8760, align 1
  %8835 = load <2 x float>, <2 x float>* %8824, align 1
  %8836 = extractelement <2 x float> %8835, i32 0
  %8837 = tail call float @llvm.trunc.f32(float %8836)
  %8838 = tail call float @llvm.fabs.f32(float %8837)
  %8839 = fcmp ogt float %8838, 0x41E0000000000000
  %8840 = fptosi float %8837 to i32
  %8841 = zext i32 %8840 to i64
  %8842 = select i1 %8839, i64 2147483648, i64 %8841
  store i64 %8842, i64* %.pre243, align 8
  %8843 = trunc i64 %8842 to i32
  store i32 %8843, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  %8844 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %8844, i64* %RDX.i5984, align 8
  %8845 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8845, i64* %RSI.i3103, align 8
  %8846 = add i64 %8845, 152
  %8847 = add i64 %8550, 177
  store i64 %8847, i64* %3, align 8
  %8848 = inttoptr i64 %8846 to i32*
  %8849 = load i32, i32* %8848, align 4
  %8850 = sext i32 %8849 to i64
  %8851 = ashr i64 %8850, 1
  %8852 = lshr i64 %8851, 1
  %8853 = trunc i64 %8851 to i8
  %8854 = and i8 %8853, 1
  %8855 = trunc i64 %8852 to i32
  %8856 = and i64 %8852, 4294967295
  store i64 %8856, i64* %.pre243, align 8
  store i8 %8854, i8* %44, align 1
  %8857 = and i32 %8855, 255
  %8858 = tail call i32 @llvm.ctpop.i32(i32 %8857)
  %8859 = trunc i32 %8858 to i8
  %8860 = and i8 %8859, 1
  %8861 = xor i8 %8860, 1
  store i8 %8861, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8862 = icmp eq i32 %8855, 0
  %8863 = zext i1 %8862 to i8
  store i8 %8863, i8* %59, align 1
  %8864 = lshr i64 %8851, 32
  %8865 = trunc i64 %8864 to i8
  %8866 = and i8 %8865, 1
  store i8 %8866, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %8867 = load i64, i64* %RBP.i, align 8
  %8868 = add i64 %8867, -100
  %8869 = add i64 %8550, 183
  store i64 %8869, i64* %3, align 8
  %8870 = trunc i64 %8852 to i32
  %8871 = inttoptr i64 %8868 to i32*
  %8872 = load i32, i32* %8871, align 4
  %8873 = add i32 %8872, %8870
  %8874 = zext i32 %8873 to i64
  store i64 %8874, i64* %.pre243, align 8
  %8875 = icmp ult i32 %8873, %8870
  %8876 = icmp ult i32 %8873, %8872
  %8877 = or i1 %8875, %8876
  %8878 = zext i1 %8877 to i8
  store i8 %8878, i8* %44, align 1
  %8879 = and i32 %8873, 255
  %8880 = tail call i32 @llvm.ctpop.i32(i32 %8879)
  %8881 = trunc i32 %8880 to i8
  %8882 = and i8 %8881, 1
  %8883 = xor i8 %8882, 1
  store i8 %8883, i8* %51, align 1
  %8884 = xor i32 %8872, %8870
  %8885 = xor i32 %8884, %8873
  %8886 = lshr i32 %8885, 4
  %8887 = trunc i32 %8886 to i8
  %8888 = and i8 %8887, 1
  store i8 %8888, i8* %56, align 1
  %8889 = icmp eq i32 %8873, 0
  %8890 = zext i1 %8889 to i8
  store i8 %8890, i8* %59, align 1
  %8891 = lshr i32 %8873, 31
  %8892 = trunc i32 %8891 to i8
  store i8 %8892, i8* %62, align 1
  %8893 = lshr i64 %8851, 32
  %8894 = trunc i64 %8893 to i32
  %8895 = and i32 %8894, 1
  %8896 = lshr i32 %8872, 31
  %8897 = xor i32 %8891, %8895
  %8898 = xor i32 %8891, %8896
  %8899 = add nuw nsw i32 %8897, %8898
  %8900 = icmp eq i32 %8899, 2
  %8901 = zext i1 %8900 to i8
  store i8 %8901, i8* %68, align 1
  %8902 = sext i32 %8873 to i64
  store i64 %8902, i64* %RSI.i3103, align 8
  %8903 = shl nsw i64 %8902, 3
  %8904 = add i64 %8844, %8903
  %8905 = add i64 %8550, 190
  store i64 %8905, i64* %3, align 8
  %8906 = inttoptr i64 %8904 to i64*
  %8907 = load i64, i64* %8906, align 8
  store i64 %8907, i64* %RDX.i5984, align 8
  store i64 %8845, i64* %RSI.i3103, align 8
  %8908 = add i64 %8845, 156
  %8909 = add i64 %8550, 204
  store i64 %8909, i64* %3, align 8
  %8910 = inttoptr i64 %8908 to i32*
  %8911 = load i32, i32* %8910, align 4
  %8912 = sext i32 %8911 to i64
  %8913 = ashr i64 %8912, 1
  %8914 = lshr i64 %8913, 1
  %8915 = trunc i64 %8913 to i8
  %8916 = and i8 %8915, 1
  %8917 = trunc i64 %8914 to i32
  %8918 = and i64 %8914, 4294967295
  store i64 %8918, i64* %.pre243, align 8
  store i8 %8916, i8* %44, align 1
  %8919 = and i32 %8917, 255
  %8920 = tail call i32 @llvm.ctpop.i32(i32 %8919)
  %8921 = trunc i32 %8920 to i8
  %8922 = and i8 %8921, 1
  %8923 = xor i8 %8922, 1
  store i8 %8923, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %8924 = icmp eq i32 %8917, 0
  %8925 = zext i1 %8924 to i8
  store i8 %8925, i8* %59, align 1
  %8926 = lshr i64 %8913, 32
  %8927 = trunc i64 %8926 to i8
  %8928 = and i8 %8927, 1
  store i8 %8928, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %8929 = add i64 %8867, -104
  %8930 = add i64 %8550, 210
  store i64 %8930, i64* %3, align 8
  %8931 = trunc i64 %8914 to i32
  %8932 = inttoptr i64 %8929 to i32*
  %8933 = load i32, i32* %8932, align 4
  %8934 = add i32 %8933, %8931
  %8935 = zext i32 %8934 to i64
  store i64 %8935, i64* %.pre243, align 8
  %8936 = icmp ult i32 %8934, %8931
  %8937 = icmp ult i32 %8934, %8933
  %8938 = or i1 %8936, %8937
  %8939 = zext i1 %8938 to i8
  store i8 %8939, i8* %44, align 1
  %8940 = and i32 %8934, 255
  %8941 = tail call i32 @llvm.ctpop.i32(i32 %8940)
  %8942 = trunc i32 %8941 to i8
  %8943 = and i8 %8942, 1
  %8944 = xor i8 %8943, 1
  store i8 %8944, i8* %51, align 1
  %8945 = xor i32 %8933, %8931
  %8946 = xor i32 %8945, %8934
  %8947 = lshr i32 %8946, 4
  %8948 = trunc i32 %8947 to i8
  %8949 = and i8 %8948, 1
  store i8 %8949, i8* %56, align 1
  %8950 = icmp eq i32 %8934, 0
  %8951 = zext i1 %8950 to i8
  store i8 %8951, i8* %59, align 1
  %8952 = lshr i32 %8934, 31
  %8953 = trunc i32 %8952 to i8
  store i8 %8953, i8* %62, align 1
  %8954 = lshr i64 %8913, 32
  %8955 = trunc i64 %8954 to i32
  %8956 = and i32 %8955, 1
  %8957 = lshr i32 %8933, 31
  %8958 = xor i32 %8952, %8956
  %8959 = xor i32 %8952, %8957
  %8960 = add nuw nsw i32 %8958, %8959
  %8961 = icmp eq i32 %8960, 2
  %8962 = zext i1 %8961 to i8
  store i8 %8962, i8* %68, align 1
  %8963 = sext i32 %8934 to i64
  store i64 %8963, i64* %RSI.i3103, align 8
  %8964 = shl nsw i64 %8963, 3
  %8965 = add i64 %8907, %8964
  %8966 = add i64 %8550, 217
  store i64 %8966, i64* %3, align 8
  %8967 = inttoptr i64 %8965 to i64*
  %8968 = load i64, i64* %8967, align 8
  store i64 %8968, i64* %RDX.i5984, align 8
  %8969 = load i64, i64* %RBP.i, align 8
  %8970 = add i64 %8969, -42
  %8971 = add i64 %8550, 222
  store i64 %8971, i64* %3, align 8
  %8972 = inttoptr i64 %8970 to i16*
  %8973 = load i16, i16* %8972, align 2
  %8974 = sext i16 %8973 to i64
  store i64 %8974, i64* %RSI.i3103, align 8
  %8975 = shl nsw i64 %8974, 3
  %8976 = add i64 %8975, %8968
  %8977 = add i64 %8550, 226
  store i64 %8977, i64* %3, align 8
  %8978 = inttoptr i64 %8976 to i64*
  %8979 = load i64, i64* %8978, align 8
  store i64 %8979, i64* %RDX.i5984, align 8
  %8980 = add i64 %8969, -60
  %8981 = add i64 %8550, 230
  store i64 %8981, i64* %3, align 8
  %8982 = inttoptr i64 %8980 to i32*
  %8983 = load i32, i32* %8982, align 4
  %8984 = sext i32 %8983 to i64
  store i64 %8984, i64* %RSI.i3103, align 8
  %8985 = shl nsw i64 %8984, 3
  %8986 = add i64 %8985, %8979
  %8987 = add i64 %8550, 234
  store i64 %8987, i64* %3, align 8
  %8988 = inttoptr i64 %8986 to i64*
  %8989 = load i64, i64* %8988, align 8
  store i64 %8989, i64* %RDX.i5984, align 8
  %8990 = add i64 %8989, 8
  %8991 = add i64 %8550, 237
  store i64 %8991, i64* %3, align 8
  %8992 = inttoptr i64 %8990 to i32*
  %8993 = load i32, i32* %8992, align 4
  %8994 = zext i32 %8993 to i64
  store i64 %8994, i64* %.pre243, align 8
  %8995 = load i64, i64* %RCX.i6189, align 8
  %8996 = add i64 %8969, -188
  %8997 = add i64 %8550, 243
  store i64 %8997, i64* %3, align 8
  %8998 = trunc i64 %8995 to i32
  %8999 = inttoptr i64 %8996 to i32*
  %9000 = load i32, i32* %8999, align 4
  %9001 = sub i32 %8998, %9000
  %9002 = zext i32 %9001 to i64
  store i64 %9002, i64* %RCX.i6189, align 8
  %9003 = sext i32 %8993 to i64
  %9004 = sext i32 %9001 to i64
  %9005 = mul nsw i64 %9004, %9003
  %9006 = trunc i64 %9005 to i32
  %9007 = and i64 %9005, 4294967295
  store i64 %9007, i64* %.pre243, align 8
  %9008 = shl i64 %9005, 32
  %9009 = ashr exact i64 %9008, 32
  %9010 = icmp ne i64 %9009, %9005
  %9011 = zext i1 %9010 to i8
  store i8 %9011, i8* %44, align 1
  %9012 = and i32 %9006, 255
  %9013 = tail call i32 @llvm.ctpop.i32(i32 %9012)
  %9014 = trunc i32 %9013 to i8
  %9015 = and i8 %9014, 1
  %9016 = xor i8 %9015, 1
  store i8 %9016, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %9017 = lshr i32 %9006, 31
  %9018 = trunc i32 %9017 to i8
  store i8 %9018, i8* %62, align 1
  store i8 %9011, i8* %68, align 1
  %9019 = trunc i64 %9005 to i32
  %9020 = load <2 x i32>, <2 x i32>* %8746, align 1
  %9021 = load <2 x i32>, <2 x i32>* %8749, align 1
  %9022 = sitofp i32 %9019 to float
  store float %9022, float* %8752, align 1
  %9023 = extractelement <2 x i32> %9020, i32 1
  store i32 %9023, i32* %8755, align 1
  %9024 = extractelement <2 x i32> %9021, i32 0
  store i32 %9024, i32* %8757, align 1
  %9025 = extractelement <2 x i32> %9021, i32 1
  store i32 %9025, i32* %8760, align 1
  %9026 = load i64, i64* %RBP.i, align 8
  %9027 = add i64 %9026, -184
  %9028 = add i64 %8550, 256
  store i64 %9028, i64* %3, align 8
  %9029 = inttoptr i64 %9027 to i32*
  %9030 = load i32, i32* %9029, align 4
  %9031 = zext i32 %9030 to i64
  store i64 %9031, i64* %.pre243, align 8
  %9032 = add i64 %9026, -188
  %9033 = add i64 %8550, 262
  store i64 %9033, i64* %3, align 8
  %9034 = inttoptr i64 %9032 to i32*
  %9035 = load i32, i32* %9034, align 4
  %9036 = sub i32 %9030, %9035
  %9037 = icmp ult i32 %9030, %9035
  %9038 = zext i1 %9037 to i8
  store i8 %9038, i8* %44, align 1
  %9039 = and i32 %9036, 255
  %9040 = tail call i32 @llvm.ctpop.i32(i32 %9039)
  %9041 = trunc i32 %9040 to i8
  %9042 = and i8 %9041, 1
  %9043 = xor i8 %9042, 1
  store i8 %9043, i8* %51, align 1
  %9044 = xor i32 %9035, %9030
  %9045 = xor i32 %9044, %9036
  %9046 = lshr i32 %9045, 4
  %9047 = trunc i32 %9046 to i8
  %9048 = and i8 %9047, 1
  store i8 %9048, i8* %56, align 1
  %9049 = icmp eq i32 %9036, 0
  %9050 = zext i1 %9049 to i8
  store i8 %9050, i8* %59, align 1
  %9051 = lshr i32 %9036, 31
  %9052 = trunc i32 %9051 to i8
  store i8 %9052, i8* %62, align 1
  %9053 = lshr i32 %9030, 31
  %9054 = lshr i32 %9035, 31
  %9055 = xor i32 %9054, %9053
  %9056 = xor i32 %9051, %9053
  %9057 = add nuw nsw i32 %9056, %9055
  %9058 = icmp eq i32 %9057, 2
  %9059 = zext i1 %9058 to i8
  store i8 %9059, i8* %68, align 1
  %9060 = load <2 x i32>, <2 x i32>* %8797, align 1
  %9061 = load <2 x i32>, <2 x i32>* %8800, align 1
  %9062 = sitofp i32 %9036 to float
  store float %9062, float* %8803, align 1
  %9063 = extractelement <2 x i32> %9060, i32 1
  store i32 %9063, i32* %8806, align 1
  %9064 = extractelement <2 x i32> %9061, i32 0
  store i32 %9064, i32* %8808, align 1
  %9065 = extractelement <2 x i32> %9061, i32 1
  store i32 %9065, i32* %8811, align 1
  %9066 = load <2 x float>, <2 x float>* %8812, align 1
  %9067 = load <2 x i32>, <2 x i32>* %8800, align 1
  %9068 = load <2 x float>, <2 x float>* %8815, align 1
  %9069 = extractelement <2 x float> %9066, i32 0
  %9070 = extractelement <2 x float> %9068, i32 0
  %9071 = fadd float %9069, %9070
  store float %9071, float* %8803, align 1
  %9072 = bitcast <2 x float> %9066 to <2 x i32>
  %9073 = extractelement <2 x i32> %9072, i32 1
  store i32 %9073, i32* %8806, align 1
  %9074 = extractelement <2 x i32> %9067, i32 0
  store i32 %9074, i32* %8808, align 1
  %9075 = extractelement <2 x i32> %9067, i32 1
  store i32 %9075, i32* %8811, align 1
  %9076 = load <2 x float>, <2 x float>* %8824, align 1
  %9077 = load <2 x i32>, <2 x i32>* %8749, align 1
  %9078 = load <2 x float>, <2 x float>* %8812, align 1
  %9079 = extractelement <2 x float> %9076, i32 0
  %9080 = extractelement <2 x float> %9078, i32 0
  %9081 = fdiv float %9079, %9080
  store float %9081, float* %8752, align 1
  %9082 = bitcast <2 x float> %9076 to <2 x i32>
  %9083 = extractelement <2 x i32> %9082, i32 1
  store i32 %9083, i32* %8755, align 1
  %9084 = extractelement <2 x i32> %9077, i32 0
  store i32 %9084, i32* %8757, align 1
  %9085 = extractelement <2 x i32> %9077, i32 1
  store i32 %9085, i32* %8760, align 1
  %9086 = load <2 x float>, <2 x float>* %8824, align 1
  %9087 = extractelement <2 x float> %9086, i32 0
  %9088 = tail call float @llvm.trunc.f32(float %9087)
  %9089 = tail call float @llvm.fabs.f32(float %9088)
  %9090 = fcmp ogt float %9089, 0x41E0000000000000
  %9091 = fptosi float %9088 to i32
  %9092 = zext i32 %9091 to i64
  %9093 = select i1 %9090, i64 2147483648, i64 %9092
  store i64 %9093, i64* %.pre243, align 8
  %9094 = trunc i64 %9093 to i32
  %9095 = add i64 %8550, 285
  store i64 %9095, i64* %3, align 8
  store i32 %9094, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  br label %block_.L_46fcbe

block_.L_46fcbe:                                  ; preds = %block_46fb1a, %block_46fb10, %block_.L_46fafe, %block_.L_46fba1
  %9096 = phi i64 [ %9095, %block_.L_46fba1 ], [ %8387, %block_46fb1a ], [ %8370, %block_46fb10 ], [ %8355, %block_.L_46fafe ]
  %9097 = add i64 %9096, 5
  store i64 %9097, i64* %3, align 8
  br label %block_.L_46fcc3

block_.L_46fcc3:                                  ; preds = %block_.L_46fcbe, %block_.L_46f954
  %storemerge91 = phi i64 [ %7569, %block_.L_46f954 ], [ %9097, %block_.L_46fcbe ]
  %9098 = add i64 %storemerge91, 5
  store i64 %9098, i64* %3, align 8
  %.pre182 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  br label %block_.L_46fcc8

block_.L_46fcc8:                                  ; preds = %block_.L_46fcc3, %block_.L_46e755
  %9099 = phi i64 [ %789, %block_.L_46e755 ], [ %.pre182, %block_.L_46fcc3 ]
  %9100 = phi i64 [ %803, %block_.L_46e755 ], [ %9098, %block_.L_46fcc3 ]
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.1, %block_.L_46e755 ], [ %MEMORY.25, %block_.L_46fcc3 ]
  store i64 %9099, i64* %.pre243, align 8
  %9101 = add i64 %9099, 3292
  %9102 = add i64 %9100, 15
  store i64 %9102, i64* %3, align 8
  %9103 = inttoptr i64 %9101 to i32*
  %9104 = load i32, i32* %9103, align 4
  store i8 0, i8* %44, align 1
  %9105 = and i32 %9104, 255
  %9106 = tail call i32 @llvm.ctpop.i32(i32 %9105)
  %9107 = trunc i32 %9106 to i8
  %9108 = and i8 %9107, 1
  %9109 = xor i8 %9108, 1
  store i8 %9109, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %9110 = icmp eq i32 %9104, 0
  %9111 = zext i1 %9110 to i8
  store i8 %9111, i8* %59, align 1
  %9112 = lshr i32 %9104, 31
  %9113 = trunc i32 %9112 to i8
  store i8 %9113, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v268 = select i1 %9110, i64 31, i64 21
  %9114 = add i64 %9100, %.v268
  store i64 %9114, i64* %3, align 8
  %.pre183 = load i64, i64* %RBP.i, align 8
  br i1 %9110, label %block_.L_46fce7, label %block_46fcdd

block_46fcdd:                                     ; preds = %block_.L_46fcc8
  %9115 = add i64 %.pre183, -60
  %9116 = add i64 %9114, 3
  store i64 %9116, i64* %3, align 8
  %9117 = inttoptr i64 %9115 to i32*
  %9118 = load i32, i32* %9117, align 4
  %9119 = zext i32 %9118 to i64
  store i64 %9119, i64* %.pre243, align 8
  %9120 = add i64 %9114, 10
  store i64 %9120, i64* %3, align 8
  store i32 %9118, i32* bitcast (%G_0x6f9734_type* @G_0x6f9734 to i32*), align 8
  br label %block_.L_46fce7

block_.L_46fce7:                                  ; preds = %block_.L_46fcc8, %block_46fcdd
  %9121 = phi i64 [ %9120, %block_46fcdd ], [ %9114, %block_.L_46fcc8 ]
  %RDI.i2935 = getelementptr inbounds %union.anon, %union.anon* %70, i64 0, i32 0
  %9122 = add i64 %.pre183, -128
  %9123 = add i64 %9121, 4
  store i64 %9123, i64* %3, align 8
  %9124 = inttoptr i64 %9122 to i64*
  %9125 = load i64, i64* %9124, align 8
  store i64 %9125, i64* %RDI.i2935, align 8
  %9126 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %9126, i64* %.pre243, align 8
  %RSI.i2931 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %9127 = add i64 %9126, 6480
  %9128 = add i64 %9121, 19
  store i64 %9128, i64* %3, align 8
  %9129 = inttoptr i64 %9127 to i64*
  %9130 = load i64, i64* %9129, align 8
  store i64 %9130, i64* %RSI.i2931, align 8
  store i64 %9126, i64* %.pre243, align 8
  %9131 = add i64 %9126, 6504
  %9132 = add i64 %9121, 34
  store i64 %9132, i64* %3, align 8
  %9133 = inttoptr i64 %9131 to i64*
  %9134 = load i64, i64* %9133, align 8
  store i64 %9134, i64* %RDX.i5984, align 8
  %CX.i2922 = bitcast %union.anon* %90 to i16*
  %9135 = add i64 %.pre183, -42
  %9136 = add i64 %9121, 38
  store i64 %9136, i64* %3, align 8
  %9137 = inttoptr i64 %9135 to i16*
  %9138 = load i16, i16* %9137, align 2
  store i16 %9138, i16* %CX.i2922, align 2
  %9139 = getelementptr inbounds %union.anon, %union.anon* %97, i64 0, i32 0
  %9140 = add i64 %.pre183, -48
  %9141 = add i64 %9121, 42
  store i64 %9141, i64* %3, align 8
  %9142 = inttoptr i64 %9140 to i32*
  %9143 = load i32, i32* %9142, align 4
  %9144 = zext i32 %9143 to i64
  store i64 %9144, i64* %9139, align 8
  %9145 = getelementptr inbounds %union.anon, %union.anon* %104, i64 0, i32 0
  %9146 = add i64 %.pre183, -100
  %9147 = add i64 %9121, 46
  store i64 %9147, i64* %3, align 8
  %9148 = inttoptr i64 %9146 to i32*
  %9149 = load i32, i32* %9148, align 4
  %9150 = zext i32 %9149 to i64
  store i64 %9150, i64* %9145, align 8
  %R10D.i2913 = bitcast %union.anon* %189 to i32*
  %9151 = add i64 %.pre183, -104
  %9152 = add i64 %9121, 50
  store i64 %9152, i64* %3, align 8
  %9153 = inttoptr i64 %9151 to i32*
  %9154 = load i32, i32* %9153, align 4
  %9155 = zext i32 %9154 to i64
  store i64 %9155, i64* %R10.i6168, align 8
  %R11D.i2910 = bitcast %union.anon* %192 to i32*
  %9156 = add i64 %.pre183, -108
  %9157 = add i64 %9121, 54
  store i64 %9157, i64* %3, align 8
  %9158 = inttoptr i64 %9156 to i32*
  %9159 = load i32, i32* %9158, align 4
  %9160 = zext i32 %9159 to i64
  store i64 %9160, i64* %R11.i6166, align 8
  %9161 = add i64 %.pre183, -112
  %9162 = add i64 %9121, 57
  store i64 %9162, i64* %3, align 8
  %9163 = inttoptr i64 %9161 to i32*
  %9164 = load i32, i32* %9163, align 4
  %9165 = zext i32 %9164 to i64
  store i64 %9165, i64* %RBX.i4440, align 8
  %9166 = sext i16 %9138 to i64
  %9167 = and i64 %9166, 4294967295
  store i64 %9167, i64* %RCX.i6189, align 8
  %9168 = bitcast i64* %6 to i32**
  %9169 = load i32*, i32** %9168, align 8
  %9170 = add i64 %9121, 64
  store i64 %9170, i64* %3, align 8
  store i32 %9154, i32* %9169, align 4
  %9171 = load i64, i64* %6, align 8
  %9172 = add i64 %9171, 8
  %9173 = load i32, i32* %R11D.i2910, align 4
  %9174 = load i64, i64* %3, align 8
  %9175 = add i64 %9174, 5
  store i64 %9175, i64* %3, align 8
  %9176 = inttoptr i64 %9172 to i32*
  store i32 %9173, i32* %9176, align 4
  %EBX.i2895 = bitcast %union.anon* %34 to i32*
  %9177 = load i64, i64* %6, align 8
  %9178 = add i64 %9177, 16
  %9179 = load i32, i32* %EBX.i2895, align 4
  %9180 = load i64, i64* %3, align 8
  %9181 = add i64 %9180, 4
  store i64 %9181, i64* %3, align 8
  %9182 = inttoptr i64 %9178 to i32*
  store i32 %9179, i32* %9182, align 4
  %9183 = load i64, i64* %3, align 8
  %9184 = add i64 %9183, -78640
  %9185 = add i64 %9183, 5
  %9186 = load i64, i64* %6, align 8
  %9187 = add i64 %9186, -8
  %9188 = inttoptr i64 %9187 to i64*
  store i64 %9185, i64* %9188, align 8
  store i64 %9187, i64* %6, align 8
  store i64 %9184, i64* %3, align 8
  %call2_46fd30 = tail call %struct.Memory* @sub_45ca00.SetMotionVectorPredictor(%struct.State* nonnull %0, i64 %9184, %struct.Memory* %MEMORY.36)
  %9189 = load i64, i64* %RBP.i, align 8
  %9190 = add i64 %9189, -128
  %9191 = load i64, i64* %3, align 8
  %9192 = add i64 %9191, 4
  store i64 %9192, i64* %3, align 8
  %9193 = inttoptr i64 %9190 to i64*
  %9194 = load i64, i64* %9193, align 8
  store i64 %9194, i64* %.pre243, align 8
  %R14W.i2888 = bitcast %union.anon* %16 to i16*
  %9195 = add i64 %9191, 8
  store i64 %9195, i64* %3, align 8
  %9196 = inttoptr i64 %9194 to i16*
  %9197 = load i16, i16* %9196, align 2
  store i16 %9197, i16* %R14W.i2888, align 2
  %9198 = add i64 %9189, -74
  %9199 = add i64 %9191, 13
  store i64 %9199, i64* %3, align 8
  %9200 = inttoptr i64 %9198 to i16*
  store i16 %9197, i16* %9200, align 2
  %9201 = load i64, i64* %RBP.i, align 8
  %9202 = add i64 %9201, -128
  %9203 = load i64, i64* %3, align 8
  %9204 = add i64 %9203, 4
  store i64 %9204, i64* %3, align 8
  %9205 = inttoptr i64 %9202 to i64*
  %9206 = load i64, i64* %9205, align 8
  store i64 %9206, i64* %.pre243, align 8
  %9207 = add i64 %9206, 2
  %9208 = add i64 %9203, 9
  store i64 %9208, i64* %3, align 8
  %9209 = inttoptr i64 %9207 to i16*
  %9210 = load i16, i16* %9209, align 2
  store i16 %9210, i16* %R14W.i2888, align 2
  %9211 = add i64 %9201, -76
  %9212 = add i64 %9203, 14
  store i64 %9212, i64* %3, align 8
  %9213 = inttoptr i64 %9211 to i16*
  store i16 %9210, i16* %9213, align 2
  %9214 = load i64, i64* %3, align 8
  %9215 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %9215, i64* %.pre243, align 8
  %9216 = add i64 %9215, 3292
  %9217 = add i64 %9214, 15
  store i64 %9217, i64* %3, align 8
  %9218 = inttoptr i64 %9216 to i32*
  %9219 = load i32, i32* %9218, align 4
  store i8 0, i8* %44, align 1
  %9220 = and i32 %9219, 255
  %9221 = tail call i32 @llvm.ctpop.i32(i32 %9220)
  %9222 = trunc i32 %9221 to i8
  %9223 = and i8 %9222, 1
  %9224 = xor i8 %9223, 1
  store i8 %9224, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %9225 = icmp eq i32 %9219, 0
  %9226 = zext i1 %9225 to i8
  store i8 %9226, i8* %59, align 1
  %9227 = lshr i32 %9219, 31
  %9228 = trunc i32 %9227 to i8
  store i8 %9228, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v269 = select i1 %9225, i64 821, i64 21
  %9229 = add i64 %9214, %.v269
  store i64 %9229, i64* %3, align 8
  br i1 %9225, label %block_.L_470085, label %block_46fd65

block_46fd65:                                     ; preds = %block_.L_46fce7
  store i64 4, i64* %.pre243, align 8
  %9230 = load i64, i64* %RBP.i, align 8
  %9231 = add i64 %9230, -74
  %9232 = add i64 %9229, 9
  store i64 %9232, i64* %3, align 8
  %9233 = inttoptr i64 %9231 to i16*
  %9234 = load i16, i16* %9233, align 2
  %9235 = sext i16 %9234 to i64
  %9236 = and i64 %9235, 4294967295
  store i64 %9236, i64* %RCX.i6189, align 8
  %9237 = add i64 %9230, -336
  %9238 = add i64 %9229, 15
  store i64 %9238, i64* %3, align 8
  %9239 = inttoptr i64 %9237 to i32*
  store i32 4, i32* %9239, align 4
  %9240 = load i32, i32* %ECX.i5565, align 4
  %9241 = zext i32 %9240 to i64
  %9242 = load i64, i64* %3, align 8
  store i64 %9241, i64* %.pre243, align 8
  %9243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9244 = sext i32 %9240 to i64
  %9245 = lshr i64 %9244, 32
  store i64 %9245, i64* %9243, align 8
  %9246 = load i64, i64* %RBP.i, align 8
  %9247 = add i64 %9246, -336
  %9248 = add i64 %9242, 9
  store i64 %9248, i64* %3, align 8
  %9249 = inttoptr i64 %9247 to i32*
  %9250 = load i32, i32* %9249, align 4
  %9251 = zext i32 %9250 to i64
  store i64 %9251, i64* %RCX.i6189, align 8
  %9252 = add i64 %9242, 11
  store i64 %9252, i64* %3, align 8
  %9253 = sext i32 %9250 to i64
  %9254 = shl nuw i64 %9245, 32
  %9255 = or i64 %9254, %9241
  %9256 = sdiv i64 %9255, %9253
  %9257 = shl i64 %9256, 32
  %9258 = ashr exact i64 %9257, 32
  %9259 = icmp eq i64 %9256, %9258
  br i1 %9259, label %9262, label %9260

; <label>:9260:                                   ; preds = %block_46fd65
  %9261 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9252, %struct.Memory* %call2_46fd30)
  %.pre184 = load i16, i16* %AX.i4810, align 2
  %.pre185 = load i64, i64* %3, align 8
  %.pre186 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2852

; <label>:9262:                                   ; preds = %block_46fd65
  %9263 = srem i64 %9255, %9253
  %9264 = and i64 %9256, 4294967295
  store i64 %9264, i64* %.pre243, align 8
  %9265 = and i64 %9263, 4294967295
  store i64 %9265, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %9266 = trunc i64 %9256 to i16
  br label %routine_idivl__ecx.exit2852

routine_idivl__ecx.exit2852:                      ; preds = %9262, %9260
  %9267 = phi i64 [ %.pre186, %9260 ], [ %9246, %9262 ]
  %9268 = phi i64 [ %.pre185, %9260 ], [ %9252, %9262 ]
  %9269 = phi i16 [ %.pre184, %9260 ], [ %9266, %9262 ]
  %9270 = phi %struct.Memory* [ %9261, %9260 ], [ %call2_46fd30, %9262 ]
  store i16 %9269, i16* %SI.i5967, align 2
  %9271 = add i64 %9267, -78
  %9272 = add i64 %9268, 7
  store i64 %9272, i64* %3, align 8
  %9273 = inttoptr i64 %9271 to i16*
  store i16 %9269, i16* %9273, align 2
  %9274 = load i64, i64* %RBP.i, align 8
  %9275 = add i64 %9274, -76
  %9276 = load i64, i64* %3, align 8
  %9277 = add i64 %9276, 4
  store i64 %9277, i64* %3, align 8
  %9278 = inttoptr i64 %9275 to i16*
  %9279 = load i16, i16* %9278, align 2
  %9280 = sext i16 %9279 to i64
  %9281 = and i64 %9280, 4294967295
  store i64 %9281, i64* %.pre243, align 8
  %9282 = sext i16 %9279 to i64
  %9283 = sext i16 %9279 to i64
  %9284 = lshr i64 %9283, 32
  store i64 %9284, i64* %9243, align 8
  %9285 = load i32, i32* %ECX.i5565, align 4
  %9286 = add i64 %9276, 7
  store i64 %9286, i64* %3, align 8
  %9287 = and i64 %9282, 4294967295
  %9288 = sext i32 %9285 to i64
  %9289 = shl nuw i64 %9284, 32
  %9290 = or i64 %9289, %9287
  %9291 = sdiv i64 %9290, %9288
  %9292 = shl i64 %9291, 32
  %9293 = ashr exact i64 %9292, 32
  %9294 = icmp eq i64 %9291, %9293
  br i1 %9294, label %9297, label %9295

; <label>:9295:                                   ; preds = %routine_idivl__ecx.exit2852
  %9296 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9286, %struct.Memory* %9270)
  %.pre187 = load i16, i16* %AX.i4810, align 2
  %.pre188 = load i64, i64* %3, align 8
  %.pre189 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2837

; <label>:9297:                                   ; preds = %routine_idivl__ecx.exit2852
  %9298 = srem i64 %9290, %9288
  %9299 = and i64 %9291, 4294967295
  store i64 %9299, i64* %.pre243, align 8
  %9300 = and i64 %9298, 4294967295
  store i64 %9300, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %9301 = trunc i64 %9291 to i16
  br label %routine_idivl__ecx.exit2837

routine_idivl__ecx.exit2837:                      ; preds = %9297, %9295
  %9302 = phi i64 [ %.pre189, %9295 ], [ %9274, %9297 ]
  %9303 = phi i64 [ %.pre188, %9295 ], [ %9286, %9297 ]
  %9304 = phi i16 [ %.pre187, %9295 ], [ %9301, %9297 ]
  %9305 = phi %struct.Memory* [ %9296, %9295 ], [ %9270, %9297 ]
  store i16 %9304, i16* %SI.i5967, align 2
  %9306 = add i64 %9302, -80
  %9307 = add i64 %9303, 7
  store i64 %9307, i64* %3, align 8
  %9308 = inttoptr i64 %9306 to i16*
  store i16 %9304, i16* %9308, align 2
  %9309 = load i64, i64* %3, align 8
  %9310 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %9310, i64* %RDI.i2935, align 8
  %9311 = add i64 %9310, 2464
  %9312 = add i64 %9309, 15
  store i64 %9312, i64* %3, align 8
  %9313 = inttoptr i64 %9311 to i32*
  %9314 = load i32, i32* %9313, align 4
  store i8 0, i8* %44, align 1
  %9315 = and i32 %9314, 255
  %9316 = tail call i32 @llvm.ctpop.i32(i32 %9315)
  %9317 = trunc i32 %9316 to i8
  %9318 = and i8 %9317, 1
  %9319 = xor i8 %9318, 1
  store i8 %9319, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %9320 = icmp eq i32 %9314, 0
  %9321 = zext i1 %9320 to i8
  store i8 %9321, i8* %59, align 1
  %9322 = lshr i32 %9314, 31
  %9323 = trunc i32 %9322 to i8
  store i8 %9323, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v270 = select i1 %9320, i64 21, i64 321
  %9324 = add i64 %9309, %.v270
  store i64 %9324, i64* %3, align 8
  br i1 %9320, label %block_46fda9, label %routine_idivl__ecx.exit2837.block_.L_46fed5_crit_edge

routine_idivl__ecx.exit2837.block_.L_46fed5_crit_edge: ; preds = %routine_idivl__ecx.exit2837
  %.pre245 = bitcast %union.anon* %83 to i16*
  br label %block_.L_46fed5

block_46fda9:                                     ; preds = %routine_idivl__ecx.exit2837
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %9325 = load i64, i64* %RBP.i, align 8
  %9326 = add i64 %9325, -64
  %9327 = add i64 %9324, 5
  store i64 %9327, i64* %3, align 8
  %9328 = inttoptr i64 %9326 to i32*
  %9329 = load i32, i32* %9328, align 4
  %9330 = sub i32 0, %9329
  %9331 = zext i32 %9330 to i64
  store i64 %9331, i64* %.pre243, align 8
  %9332 = icmp ne i32 %9329, 0
  %9333 = zext i1 %9332 to i8
  store i8 %9333, i8* %44, align 1
  %9334 = and i32 %9330, 255
  %9335 = tail call i32 @llvm.ctpop.i32(i32 %9334)
  %9336 = trunc i32 %9335 to i8
  %9337 = and i8 %9336, 1
  %9338 = xor i8 %9337, 1
  store i8 %9338, i8* %51, align 1
  %9339 = xor i32 %9329, %9330
  %9340 = lshr i32 %9339, 4
  %9341 = trunc i32 %9340 to i8
  %9342 = and i8 %9341, 1
  store i8 %9342, i8* %56, align 1
  %9343 = icmp eq i32 %9329, 0
  %9344 = zext i1 %9343 to i8
  store i8 %9344, i8* %59, align 1
  %9345 = lshr i32 %9330, 31
  %9346 = trunc i32 %9345 to i8
  store i8 %9346, i8* %62, align 1
  %9347 = lshr i32 %9329, 31
  %9348 = add nuw nsw i32 %9345, %9347
  %9349 = icmp eq i32 %9348, 2
  %9350 = zext i1 %9349 to i8
  store i8 %9350, i8* %68, align 1
  %9351 = add i64 %9324, 8
  store i64 %9351, i64* %3, align 8
  %9352 = load i32, i32* %9328, align 4
  %9353 = zext i32 %9352 to i64
  store i64 %9353, i64* %RCX.i6189, align 8
  %9354 = add i64 %9325, -78
  %9355 = add i64 %9324, 12
  store i64 %9355, i64* %3, align 8
  %9356 = inttoptr i64 %9354 to i16*
  %9357 = load i16, i16* %9356, align 2
  %9358 = sext i16 %9357 to i64
  %9359 = and i64 %9358, 4294967295
  store i64 %9359, i64* %RDX.i5984, align 8
  %9360 = sext i16 %9357 to i32
  %9361 = sub i32 %9352, %9360
  %9362 = icmp ult i32 %9352, %9360
  %9363 = zext i1 %9362 to i8
  store i8 %9363, i8* %44, align 1
  %9364 = and i32 %9361, 255
  %9365 = tail call i32 @llvm.ctpop.i32(i32 %9364)
  %9366 = trunc i32 %9365 to i8
  %9367 = and i8 %9366, 1
  %9368 = xor i8 %9367, 1
  store i8 %9368, i8* %51, align 1
  %9369 = xor i32 %9360, %9352
  %9370 = xor i32 %9369, %9361
  %9371 = lshr i32 %9370, 4
  %9372 = trunc i32 %9371 to i8
  %9373 = and i8 %9372, 1
  store i8 %9373, i8* %56, align 1
  %9374 = icmp eq i32 %9361, 0
  %9375 = zext i1 %9374 to i8
  store i8 %9375, i8* %59, align 1
  %9376 = lshr i32 %9361, 31
  %9377 = trunc i32 %9376 to i8
  store i8 %9377, i8* %62, align 1
  %9378 = lshr i32 %9352, 31
  %9379 = lshr i32 %9360, 31
  %9380 = xor i32 %9379, %9378
  %9381 = xor i32 %9376, %9378
  %9382 = add nuw nsw i32 %9381, %9380
  %9383 = icmp eq i32 %9382, 2
  %9384 = zext i1 %9383 to i8
  store i8 %9384, i8* %68, align 1
  %9385 = add i64 %9325, -340
  %9386 = add i64 %9324, 20
  store i64 %9386, i64* %3, align 8
  %9387 = inttoptr i64 %9385 to i32*
  store i32 %9330, i32* %9387, align 4
  %9388 = load i64, i64* %3, align 8
  %9389 = load i8, i8* %62, align 1
  %9390 = icmp ne i8 %9389, 0
  %9391 = load i8, i8* %68, align 1
  %9392 = icmp ne i8 %9391, 0
  %9393 = xor i1 %9390, %9392
  %.v356 = select i1 %9393, i64 6, i64 20
  %9394 = add i64 %9388, %.v356
  store i64 %9394, i64* %3, align 8
  %9395 = load i64, i64* %RBP.i, align 8
  br i1 %9393, label %block_46fdc3, label %block_.L_46fdd1

block_46fdc3:                                     ; preds = %block_46fda9
  %9396 = add i64 %9395, -64
  %9397 = add i64 %9394, 3
  store i64 %9397, i64* %3, align 8
  %9398 = inttoptr i64 %9396 to i32*
  %9399 = load i32, i32* %9398, align 4
  %9400 = zext i32 %9399 to i64
  store i64 %9400, i64* %.pre243, align 8
  %9401 = add i64 %9395, -344
  %9402 = add i64 %9394, 9
  store i64 %9402, i64* %3, align 8
  %9403 = inttoptr i64 %9401 to i32*
  store i32 %9399, i32* %9403, align 4
  %9404 = load i64, i64* %3, align 8
  %9405 = add i64 %9404, 15
  store i64 %9405, i64* %3, align 8
  br label %block_.L_46fddb

block_.L_46fdd1:                                  ; preds = %block_46fda9
  %9406 = add i64 %9395, -78
  %9407 = add i64 %9394, 4
  store i64 %9407, i64* %3, align 8
  %9408 = inttoptr i64 %9406 to i16*
  %9409 = load i16, i16* %9408, align 2
  %9410 = sext i16 %9409 to i64
  %9411 = and i64 %9410, 4294967295
  store i64 %9411, i64* %.pre243, align 8
  %9412 = add i64 %9395, -344
  %9413 = sext i16 %9409 to i32
  %9414 = add i64 %9394, 10
  store i64 %9414, i64* %3, align 8
  %9415 = inttoptr i64 %9412 to i32*
  store i32 %9413, i32* %9415, align 4
  %.pre190 = load i64, i64* %3, align 8
  br label %block_.L_46fddb

block_.L_46fddb:                                  ; preds = %block_.L_46fdd1, %block_46fdc3
  %9416 = phi i64 [ %.pre190, %block_.L_46fdd1 ], [ %9405, %block_46fdc3 ]
  %9417 = load i64, i64* %RBP.i, align 8
  %9418 = add i64 %9417, -344
  %9419 = add i64 %9416, 6
  store i64 %9419, i64* %3, align 8
  %9420 = inttoptr i64 %9418 to i32*
  %9421 = load i32, i32* %9420, align 4
  %9422 = zext i32 %9421 to i64
  store i64 %9422, i64* %.pre243, align 8
  %9423 = add i64 %9417, -340
  %9424 = add i64 %9416, 12
  store i64 %9424, i64* %3, align 8
  %9425 = inttoptr i64 %9423 to i32*
  %9426 = load i32, i32* %9425, align 4
  %9427 = zext i32 %9426 to i64
  store i64 %9427, i64* %RCX.i6189, align 8
  %9428 = sub i32 %9426, %9421
  %9429 = icmp ult i32 %9426, %9421
  %9430 = zext i1 %9429 to i8
  store i8 %9430, i8* %44, align 1
  %9431 = and i32 %9428, 255
  %9432 = tail call i32 @llvm.ctpop.i32(i32 %9431)
  %9433 = trunc i32 %9432 to i8
  %9434 = and i8 %9433, 1
  %9435 = xor i8 %9434, 1
  store i8 %9435, i8* %51, align 1
  %9436 = xor i32 %9421, %9426
  %9437 = xor i32 %9436, %9428
  %9438 = lshr i32 %9437, 4
  %9439 = trunc i32 %9438 to i8
  %9440 = and i8 %9439, 1
  store i8 %9440, i8* %56, align 1
  %9441 = icmp eq i32 %9428, 0
  %9442 = zext i1 %9441 to i8
  store i8 %9442, i8* %59, align 1
  %9443 = lshr i32 %9428, 31
  %9444 = trunc i32 %9443 to i8
  store i8 %9444, i8* %62, align 1
  %9445 = lshr i32 %9426, 31
  %9446 = lshr i32 %9421, 31
  %9447 = xor i32 %9446, %9445
  %9448 = xor i32 %9443, %9445
  %9449 = add nuw nsw i32 %9448, %9447
  %9450 = icmp eq i32 %9449, 2
  %9451 = zext i1 %9450 to i8
  store i8 %9451, i8* %68, align 1
  %9452 = icmp ne i8 %9444, 0
  %9453 = xor i1 %9452, %9450
  %9454 = or i1 %9441, %9453
  %.v300 = select i1 %9454, i64 36, i64 20
  %9455 = add i64 %9416, %.v300
  store i64 %9455, i64* %3, align 8
  br i1 %9454, label %block_.L_46fdff, label %block_46fdef

block_46fdef:                                     ; preds = %block_.L_46fddb
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %9456 = add i64 %9417, -64
  %9457 = add i64 %9455, 5
  store i64 %9457, i64* %3, align 8
  %9458 = inttoptr i64 %9456 to i32*
  %9459 = load i32, i32* %9458, align 4
  %9460 = sub i32 0, %9459
  %9461 = zext i32 %9460 to i64
  store i64 %9461, i64* %.pre243, align 8
  %9462 = icmp ne i32 %9459, 0
  %9463 = zext i1 %9462 to i8
  store i8 %9463, i8* %44, align 1
  %9464 = and i32 %9460, 255
  %9465 = tail call i32 @llvm.ctpop.i32(i32 %9464)
  %9466 = trunc i32 %9465 to i8
  %9467 = and i8 %9466, 1
  %9468 = xor i8 %9467, 1
  store i8 %9468, i8* %51, align 1
  %9469 = xor i32 %9459, %9460
  %9470 = lshr i32 %9469, 4
  %9471 = trunc i32 %9470 to i8
  %9472 = and i8 %9471, 1
  store i8 %9472, i8* %56, align 1
  %9473 = icmp eq i32 %9459, 0
  %9474 = zext i1 %9473 to i8
  store i8 %9474, i8* %59, align 1
  %9475 = lshr i32 %9460, 31
  %9476 = trunc i32 %9475 to i8
  store i8 %9476, i8* %62, align 1
  %9477 = lshr i32 %9459, 31
  %9478 = add nuw nsw i32 %9475, %9477
  %9479 = icmp eq i32 %9478, 2
  %9480 = zext i1 %9479 to i8
  store i8 %9480, i8* %68, align 1
  %9481 = add i64 %9417, -348
  %9482 = add i64 %9455, 11
  store i64 %9482, i64* %3, align 8
  %9483 = inttoptr i64 %9481 to i32*
  store i32 %9460, i32* %9483, align 4
  %9484 = load i64, i64* %3, align 8
  %9485 = add i64 %9484, 56
  store i64 %9485, i64* %3, align 8
  br label %block_.L_46fe32

block_.L_46fdff:                                  ; preds = %block_.L_46fddb
  %9486 = add i64 %9417, -64
  %9487 = add i64 %9455, 3
  store i64 %9487, i64* %3, align 8
  %9488 = inttoptr i64 %9486 to i32*
  %9489 = load i32, i32* %9488, align 4
  %9490 = zext i32 %9489 to i64
  store i64 %9490, i64* %.pre243, align 8
  %9491 = add i64 %9417, -78
  %9492 = add i64 %9455, 7
  store i64 %9492, i64* %3, align 8
  %9493 = inttoptr i64 %9491 to i16*
  %9494 = load i16, i16* %9493, align 2
  %9495 = sext i16 %9494 to i64
  %9496 = and i64 %9495, 4294967295
  store i64 %9496, i64* %RCX.i6189, align 8
  %9497 = sext i16 %9494 to i32
  %9498 = sub i32 %9489, %9497
  %9499 = icmp ult i32 %9489, %9497
  %9500 = zext i1 %9499 to i8
  store i8 %9500, i8* %44, align 1
  %9501 = and i32 %9498, 255
  %9502 = tail call i32 @llvm.ctpop.i32(i32 %9501)
  %9503 = trunc i32 %9502 to i8
  %9504 = and i8 %9503, 1
  %9505 = xor i8 %9504, 1
  store i8 %9505, i8* %51, align 1
  %9506 = xor i32 %9497, %9489
  %9507 = xor i32 %9506, %9498
  %9508 = lshr i32 %9507, 4
  %9509 = trunc i32 %9508 to i8
  %9510 = and i8 %9509, 1
  store i8 %9510, i8* %56, align 1
  %9511 = icmp eq i32 %9498, 0
  %9512 = zext i1 %9511 to i8
  store i8 %9512, i8* %59, align 1
  %9513 = lshr i32 %9498, 31
  %9514 = trunc i32 %9513 to i8
  store i8 %9514, i8* %62, align 1
  %9515 = lshr i32 %9489, 31
  %9516 = lshr i32 %9497, 31
  %9517 = xor i32 %9516, %9515
  %9518 = xor i32 %9513, %9515
  %9519 = add nuw nsw i32 %9518, %9517
  %9520 = icmp eq i32 %9519, 2
  %9521 = zext i1 %9520 to i8
  store i8 %9521, i8* %68, align 1
  %9522 = icmp ne i8 %9514, 0
  %9523 = xor i1 %9522, %9520
  %.v303 = select i1 %9523, i64 15, i64 29
  %9524 = add i64 %9455, %.v303
  store i64 %9524, i64* %3, align 8
  br i1 %9523, label %block_46fe0e, label %block_.L_46fe1c

block_46fe0e:                                     ; preds = %block_.L_46fdff
  %9525 = add i64 %9524, 3
  store i64 %9525, i64* %3, align 8
  %9526 = load i32, i32* %9488, align 4
  %9527 = zext i32 %9526 to i64
  store i64 %9527, i64* %.pre243, align 8
  %9528 = add i64 %9417, -352
  %9529 = add i64 %9524, 9
  store i64 %9529, i64* %3, align 8
  %9530 = inttoptr i64 %9528 to i32*
  store i32 %9526, i32* %9530, align 4
  %9531 = load i64, i64* %3, align 8
  %9532 = add i64 %9531, 15
  store i64 %9532, i64* %3, align 8
  br label %block_.L_46fe26

block_.L_46fe1c:                                  ; preds = %block_.L_46fdff
  %9533 = add i64 %9524, 4
  store i64 %9533, i64* %3, align 8
  %9534 = load i16, i16* %9493, align 2
  %9535 = sext i16 %9534 to i64
  %9536 = and i64 %9535, 4294967295
  store i64 %9536, i64* %.pre243, align 8
  %9537 = add i64 %9417, -352
  %9538 = sext i16 %9534 to i32
  %9539 = add i64 %9524, 10
  store i64 %9539, i64* %3, align 8
  %9540 = inttoptr i64 %9537 to i32*
  store i32 %9538, i32* %9540, align 4
  %.pre191 = load i64, i64* %3, align 8
  br label %block_.L_46fe26

block_.L_46fe26:                                  ; preds = %block_.L_46fe1c, %block_46fe0e
  %9541 = phi i64 [ %.pre191, %block_.L_46fe1c ], [ %9532, %block_46fe0e ]
  %9542 = load i64, i64* %RBP.i, align 8
  %9543 = add i64 %9542, -352
  %9544 = add i64 %9541, 6
  store i64 %9544, i64* %3, align 8
  %9545 = inttoptr i64 %9543 to i32*
  %9546 = load i32, i32* %9545, align 4
  %9547 = zext i32 %9546 to i64
  store i64 %9547, i64* %.pre243, align 8
  %9548 = add i64 %9542, -348
  %9549 = add i64 %9541, 12
  store i64 %9549, i64* %3, align 8
  %9550 = inttoptr i64 %9548 to i32*
  store i32 %9546, i32* %9550, align 4
  %.pre192 = load i64, i64* %3, align 8
  br label %block_.L_46fe32

block_.L_46fe32:                                  ; preds = %block_.L_46fe26, %block_46fdef
  %9551 = phi i64 [ %.pre192, %block_.L_46fe26 ], [ %9485, %block_46fdef ]
  %9552 = load i64, i64* %RBP.i, align 8
  %9553 = add i64 %9552, -348
  %9554 = add i64 %9551, 6
  store i64 %9554, i64* %3, align 8
  %9555 = inttoptr i64 %9553 to i32*
  %9556 = load i32, i32* %9555, align 4
  %9557 = zext i32 %9556 to i64
  store i64 %9557, i64* %.pre243, align 8
  store i64 0, i64* %RCX.i6189, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %DX.i2736 = bitcast %union.anon* %83 to i16*
  %9558 = trunc i32 %9556 to i16
  store i16 %9558, i16* %DX.i2736, align 2
  %9559 = add i64 %9552, -78
  %9560 = add i64 %9551, 15
  store i64 %9560, i64* %3, align 8
  %9561 = inttoptr i64 %9559 to i16*
  store i16 %9558, i16* %9561, align 2
  %9562 = load i64, i64* %RCX.i6189, align 8
  %9563 = load i64, i64* %RBP.i, align 8
  %9564 = add i64 %9563, -64
  %9565 = load i64, i64* %3, align 8
  %9566 = add i64 %9565, 3
  store i64 %9566, i64* %3, align 8
  %9567 = trunc i64 %9562 to i32
  %9568 = inttoptr i64 %9564 to i32*
  %9569 = load i32, i32* %9568, align 4
  %9570 = sub i32 %9567, %9569
  %9571 = zext i32 %9570 to i64
  store i64 %9571, i64* %RCX.i6189, align 8
  %9572 = icmp ult i32 %9567, %9569
  %9573 = zext i1 %9572 to i8
  store i8 %9573, i8* %44, align 1
  %9574 = and i32 %9570, 255
  %9575 = tail call i32 @llvm.ctpop.i32(i32 %9574)
  %9576 = trunc i32 %9575 to i8
  %9577 = and i8 %9576, 1
  %9578 = xor i8 %9577, 1
  store i8 %9578, i8* %51, align 1
  %9579 = xor i32 %9569, %9567
  %9580 = xor i32 %9579, %9570
  %9581 = lshr i32 %9580, 4
  %9582 = trunc i32 %9581 to i8
  %9583 = and i8 %9582, 1
  store i8 %9583, i8* %56, align 1
  %9584 = icmp eq i32 %9570, 0
  %9585 = zext i1 %9584 to i8
  store i8 %9585, i8* %59, align 1
  %9586 = lshr i32 %9570, 31
  %9587 = trunc i32 %9586 to i8
  store i8 %9587, i8* %62, align 1
  %9588 = lshr i32 %9567, 31
  %9589 = lshr i32 %9569, 31
  %9590 = xor i32 %9589, %9588
  %9591 = xor i32 %9586, %9588
  %9592 = add nuw nsw i32 %9591, %9590
  %9593 = icmp eq i32 %9592, 2
  %9594 = zext i1 %9593 to i8
  store i8 %9594, i8* %68, align 1
  %9595 = add i64 %9565, 6
  store i64 %9595, i64* %3, align 8
  %9596 = load i32, i32* %9568, align 4
  %9597 = zext i32 %9596 to i64
  store i64 %9597, i64* %.pre243, align 8
  %9598 = add i64 %9563, -80
  %9599 = add i64 %9565, 10
  store i64 %9599, i64* %3, align 8
  %9600 = inttoptr i64 %9598 to i16*
  %9601 = load i16, i16* %9600, align 2
  %9602 = sext i16 %9601 to i64
  %9603 = and i64 %9602, 4294967295
  store i64 %9603, i64* %RSI.i2931, align 8
  %9604 = sext i16 %9601 to i32
  %9605 = sub i32 %9596, %9604
  %9606 = icmp ult i32 %9596, %9604
  %9607 = zext i1 %9606 to i8
  store i8 %9607, i8* %44, align 1
  %9608 = and i32 %9605, 255
  %9609 = tail call i32 @llvm.ctpop.i32(i32 %9608)
  %9610 = trunc i32 %9609 to i8
  %9611 = and i8 %9610, 1
  %9612 = xor i8 %9611, 1
  store i8 %9612, i8* %51, align 1
  %9613 = xor i32 %9604, %9596
  %9614 = xor i32 %9613, %9605
  %9615 = lshr i32 %9614, 4
  %9616 = trunc i32 %9615 to i8
  %9617 = and i8 %9616, 1
  store i8 %9617, i8* %56, align 1
  %9618 = icmp eq i32 %9605, 0
  %9619 = zext i1 %9618 to i8
  store i8 %9619, i8* %59, align 1
  %9620 = lshr i32 %9605, 31
  %9621 = trunc i32 %9620 to i8
  store i8 %9621, i8* %62, align 1
  %9622 = lshr i32 %9596, 31
  %9623 = lshr i32 %9604, 31
  %9624 = xor i32 %9623, %9622
  %9625 = xor i32 %9620, %9622
  %9626 = add nuw nsw i32 %9625, %9624
  %9627 = icmp eq i32 %9626, 2
  %9628 = zext i1 %9627 to i8
  store i8 %9628, i8* %68, align 1
  %9629 = add i64 %9563, -356
  %9630 = add i64 %9565, 18
  store i64 %9630, i64* %3, align 8
  %9631 = inttoptr i64 %9629 to i32*
  store i32 %9570, i32* %9631, align 4
  %9632 = load i64, i64* %3, align 8
  %9633 = load i8, i8* %62, align 1
  %9634 = icmp ne i8 %9633, 0
  %9635 = load i8, i8* %68, align 1
  %9636 = icmp ne i8 %9635, 0
  %9637 = xor i1 %9634, %9636
  %.v357 = select i1 %9637, i64 6, i64 20
  %9638 = add i64 %9632, %.v357
  store i64 %9638, i64* %3, align 8
  %9639 = load i64, i64* %RBP.i, align 8
  br i1 %9637, label %block_46fe59, label %block_.L_46fe67

block_46fe59:                                     ; preds = %block_.L_46fe32
  %9640 = add i64 %9639, -64
  %9641 = add i64 %9638, 3
  store i64 %9641, i64* %3, align 8
  %9642 = inttoptr i64 %9640 to i32*
  %9643 = load i32, i32* %9642, align 4
  %9644 = zext i32 %9643 to i64
  store i64 %9644, i64* %.pre243, align 8
  %9645 = add i64 %9639, -360
  %9646 = add i64 %9638, 9
  store i64 %9646, i64* %3, align 8
  %9647 = inttoptr i64 %9645 to i32*
  store i32 %9643, i32* %9647, align 4
  %9648 = load i64, i64* %3, align 8
  %9649 = add i64 %9648, 15
  store i64 %9649, i64* %3, align 8
  br label %block_.L_46fe71

block_.L_46fe67:                                  ; preds = %block_.L_46fe32
  %9650 = add i64 %9639, -80
  %9651 = add i64 %9638, 4
  store i64 %9651, i64* %3, align 8
  %9652 = inttoptr i64 %9650 to i16*
  %9653 = load i16, i16* %9652, align 2
  %9654 = sext i16 %9653 to i64
  %9655 = and i64 %9654, 4294967295
  store i64 %9655, i64* %.pre243, align 8
  %9656 = add i64 %9639, -360
  %9657 = sext i16 %9653 to i32
  %9658 = add i64 %9638, 10
  store i64 %9658, i64* %3, align 8
  %9659 = inttoptr i64 %9656 to i32*
  store i32 %9657, i32* %9659, align 4
  %.pre193 = load i64, i64* %3, align 8
  br label %block_.L_46fe71

block_.L_46fe71:                                  ; preds = %block_.L_46fe67, %block_46fe59
  %9660 = phi i64 [ %.pre193, %block_.L_46fe67 ], [ %9649, %block_46fe59 ]
  %9661 = load i64, i64* %RBP.i, align 8
  %9662 = add i64 %9661, -360
  %9663 = add i64 %9660, 6
  store i64 %9663, i64* %3, align 8
  %9664 = inttoptr i64 %9662 to i32*
  %9665 = load i32, i32* %9664, align 4
  %9666 = zext i32 %9665 to i64
  store i64 %9666, i64* %.pre243, align 8
  %9667 = add i64 %9661, -356
  %9668 = add i64 %9660, 12
  store i64 %9668, i64* %3, align 8
  %9669 = inttoptr i64 %9667 to i32*
  %9670 = load i32, i32* %9669, align 4
  %9671 = zext i32 %9670 to i64
  store i64 %9671, i64* %RCX.i6189, align 8
  %9672 = sub i32 %9670, %9665
  %9673 = icmp ult i32 %9670, %9665
  %9674 = zext i1 %9673 to i8
  store i8 %9674, i8* %44, align 1
  %9675 = and i32 %9672, 255
  %9676 = tail call i32 @llvm.ctpop.i32(i32 %9675)
  %9677 = trunc i32 %9676 to i8
  %9678 = and i8 %9677, 1
  %9679 = xor i8 %9678, 1
  store i8 %9679, i8* %51, align 1
  %9680 = xor i32 %9665, %9670
  %9681 = xor i32 %9680, %9672
  %9682 = lshr i32 %9681, 4
  %9683 = trunc i32 %9682 to i8
  %9684 = and i8 %9683, 1
  store i8 %9684, i8* %56, align 1
  %9685 = icmp eq i32 %9672, 0
  %9686 = zext i1 %9685 to i8
  store i8 %9686, i8* %59, align 1
  %9687 = lshr i32 %9672, 31
  %9688 = trunc i32 %9687 to i8
  store i8 %9688, i8* %62, align 1
  %9689 = lshr i32 %9670, 31
  %9690 = lshr i32 %9665, 31
  %9691 = xor i32 %9690, %9689
  %9692 = xor i32 %9687, %9689
  %9693 = add nuw nsw i32 %9692, %9691
  %9694 = icmp eq i32 %9693, 2
  %9695 = zext i1 %9694 to i8
  store i8 %9695, i8* %68, align 1
  %9696 = icmp ne i8 %9688, 0
  %9697 = xor i1 %9696, %9694
  %9698 = or i1 %9685, %9697
  %.v301 = select i1 %9698, i64 36, i64 20
  %9699 = add i64 %9660, %.v301
  store i64 %9699, i64* %3, align 8
  br i1 %9698, label %block_.L_46fe95, label %block_46fe85

block_46fe85:                                     ; preds = %block_.L_46fe71
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %9700 = add i64 %9661, -64
  %9701 = add i64 %9699, 5
  store i64 %9701, i64* %3, align 8
  %9702 = inttoptr i64 %9700 to i32*
  %9703 = load i32, i32* %9702, align 4
  %9704 = sub i32 0, %9703
  %9705 = zext i32 %9704 to i64
  store i64 %9705, i64* %.pre243, align 8
  %9706 = icmp ne i32 %9703, 0
  %9707 = zext i1 %9706 to i8
  store i8 %9707, i8* %44, align 1
  %9708 = and i32 %9704, 255
  %9709 = tail call i32 @llvm.ctpop.i32(i32 %9708)
  %9710 = trunc i32 %9709 to i8
  %9711 = and i8 %9710, 1
  %9712 = xor i8 %9711, 1
  store i8 %9712, i8* %51, align 1
  %9713 = xor i32 %9703, %9704
  %9714 = lshr i32 %9713, 4
  %9715 = trunc i32 %9714 to i8
  %9716 = and i8 %9715, 1
  store i8 %9716, i8* %56, align 1
  %9717 = icmp eq i32 %9703, 0
  %9718 = zext i1 %9717 to i8
  store i8 %9718, i8* %59, align 1
  %9719 = lshr i32 %9704, 31
  %9720 = trunc i32 %9719 to i8
  store i8 %9720, i8* %62, align 1
  %9721 = lshr i32 %9703, 31
  %9722 = add nuw nsw i32 %9719, %9721
  %9723 = icmp eq i32 %9722, 2
  %9724 = zext i1 %9723 to i8
  store i8 %9724, i8* %68, align 1
  %9725 = add i64 %9661, -364
  %9726 = add i64 %9699, 11
  store i64 %9726, i64* %3, align 8
  %9727 = inttoptr i64 %9725 to i32*
  store i32 %9704, i32* %9727, align 4
  %9728 = load i64, i64* %3, align 8
  %9729 = add i64 %9728, 56
  store i64 %9729, i64* %3, align 8
  br label %block_.L_46fec8

block_.L_46fe95:                                  ; preds = %block_.L_46fe71
  %9730 = add i64 %9661, -64
  %9731 = add i64 %9699, 3
  store i64 %9731, i64* %3, align 8
  %9732 = inttoptr i64 %9730 to i32*
  %9733 = load i32, i32* %9732, align 4
  %9734 = zext i32 %9733 to i64
  store i64 %9734, i64* %.pre243, align 8
  %9735 = add i64 %9661, -80
  %9736 = add i64 %9699, 7
  store i64 %9736, i64* %3, align 8
  %9737 = inttoptr i64 %9735 to i16*
  %9738 = load i16, i16* %9737, align 2
  %9739 = sext i16 %9738 to i64
  %9740 = and i64 %9739, 4294967295
  store i64 %9740, i64* %RCX.i6189, align 8
  %9741 = sext i16 %9738 to i32
  %9742 = sub i32 %9733, %9741
  %9743 = icmp ult i32 %9733, %9741
  %9744 = zext i1 %9743 to i8
  store i8 %9744, i8* %44, align 1
  %9745 = and i32 %9742, 255
  %9746 = tail call i32 @llvm.ctpop.i32(i32 %9745)
  %9747 = trunc i32 %9746 to i8
  %9748 = and i8 %9747, 1
  %9749 = xor i8 %9748, 1
  store i8 %9749, i8* %51, align 1
  %9750 = xor i32 %9741, %9733
  %9751 = xor i32 %9750, %9742
  %9752 = lshr i32 %9751, 4
  %9753 = trunc i32 %9752 to i8
  %9754 = and i8 %9753, 1
  store i8 %9754, i8* %56, align 1
  %9755 = icmp eq i32 %9742, 0
  %9756 = zext i1 %9755 to i8
  store i8 %9756, i8* %59, align 1
  %9757 = lshr i32 %9742, 31
  %9758 = trunc i32 %9757 to i8
  store i8 %9758, i8* %62, align 1
  %9759 = lshr i32 %9733, 31
  %9760 = lshr i32 %9741, 31
  %9761 = xor i32 %9760, %9759
  %9762 = xor i32 %9757, %9759
  %9763 = add nuw nsw i32 %9762, %9761
  %9764 = icmp eq i32 %9763, 2
  %9765 = zext i1 %9764 to i8
  store i8 %9765, i8* %68, align 1
  %9766 = icmp ne i8 %9758, 0
  %9767 = xor i1 %9766, %9764
  %.v302 = select i1 %9767, i64 15, i64 29
  %9768 = add i64 %9699, %.v302
  store i64 %9768, i64* %3, align 8
  br i1 %9767, label %block_46fea4, label %block_.L_46feb2

block_46fea4:                                     ; preds = %block_.L_46fe95
  %9769 = add i64 %9768, 3
  store i64 %9769, i64* %3, align 8
  %9770 = load i32, i32* %9732, align 4
  %9771 = zext i32 %9770 to i64
  store i64 %9771, i64* %.pre243, align 8
  %9772 = add i64 %9661, -368
  %9773 = add i64 %9768, 9
  store i64 %9773, i64* %3, align 8
  %9774 = inttoptr i64 %9772 to i32*
  store i32 %9770, i32* %9774, align 4
  %9775 = load i64, i64* %3, align 8
  %9776 = add i64 %9775, 15
  store i64 %9776, i64* %3, align 8
  br label %block_.L_46febc

block_.L_46feb2:                                  ; preds = %block_.L_46fe95
  %9777 = add i64 %9768, 4
  store i64 %9777, i64* %3, align 8
  %9778 = load i16, i16* %9737, align 2
  %9779 = sext i16 %9778 to i64
  %9780 = and i64 %9779, 4294967295
  store i64 %9780, i64* %.pre243, align 8
  %9781 = add i64 %9661, -368
  %9782 = sext i16 %9778 to i32
  %9783 = add i64 %9768, 10
  store i64 %9783, i64* %3, align 8
  %9784 = inttoptr i64 %9781 to i32*
  store i32 %9782, i32* %9784, align 4
  %.pre194 = load i64, i64* %3, align 8
  br label %block_.L_46febc

block_.L_46febc:                                  ; preds = %block_.L_46feb2, %block_46fea4
  %9785 = phi i64 [ %.pre194, %block_.L_46feb2 ], [ %9776, %block_46fea4 ]
  %9786 = load i64, i64* %RBP.i, align 8
  %9787 = add i64 %9786, -368
  %9788 = add i64 %9785, 6
  store i64 %9788, i64* %3, align 8
  %9789 = inttoptr i64 %9787 to i32*
  %9790 = load i32, i32* %9789, align 4
  %9791 = zext i32 %9790 to i64
  store i64 %9791, i64* %.pre243, align 8
  %9792 = add i64 %9786, -364
  %9793 = add i64 %9785, 12
  store i64 %9793, i64* %3, align 8
  %9794 = inttoptr i64 %9792 to i32*
  store i32 %9790, i32* %9794, align 4
  %.pre195 = load i64, i64* %3, align 8
  br label %block_.L_46fec8

block_.L_46fec8:                                  ; preds = %block_.L_46febc, %block_46fe85
  %9795 = phi i64 [ %.pre195, %block_.L_46febc ], [ %9729, %block_46fe85 ]
  %9796 = load i64, i64* %RBP.i, align 8
  %9797 = add i64 %9796, -364
  %9798 = add i64 %9795, 6
  store i64 %9798, i64* %3, align 8
  %9799 = inttoptr i64 %9797 to i32*
  %9800 = load i32, i32* %9799, align 4
  %9801 = zext i32 %9800 to i64
  store i64 %9801, i64* %.pre243, align 8
  %9802 = trunc i32 %9800 to i16
  store i16 %9802, i16* %CX.i2922, align 2
  %9803 = add i64 %9796, -80
  %9804 = add i64 %9795, 13
  store i64 %9804, i64* %3, align 8
  %9805 = inttoptr i64 %9803 to i16*
  store i16 %9802, i16* %9805, align 2
  %.pre196 = load i64, i64* %3, align 8
  br label %block_.L_46fed5

block_.L_46fed5:                                  ; preds = %routine_idivl__ecx.exit2837.block_.L_46fed5_crit_edge, %block_.L_46fec8
  %DX.i2634.pre-phi = phi i16* [ %.pre245, %routine_idivl__ecx.exit2837.block_.L_46fed5_crit_edge ], [ %DX.i2736, %block_.L_46fec8 ]
  %9806 = phi i64 [ %9324, %routine_idivl__ecx.exit2837.block_.L_46fed5_crit_edge ], [ %.pre196, %block_.L_46fec8 ]
  store i64 ptrtoint (%G__0x6cbc30_type* @G__0x6cbc30 to i64), i64* %RDI.i2935, align 8
  %9807 = load i64, i64* %RBP.i, align 8
  %9808 = add i64 %9807, -78
  store i64 %9808, i64* %.pre243, align 8
  %9809 = add i64 %9807, -80
  store i64 %9809, i64* %RCX.i6189, align 8
  %9810 = add i64 %9807, -42
  %9811 = add i64 %9806, 22
  store i64 %9811, i64* %3, align 8
  %9812 = inttoptr i64 %9810 to i16*
  %9813 = load i16, i16* %9812, align 2
  store i16 %9813, i16* %DX.i2634.pre-phi, align 2
  %9814 = add i64 %9807, -48
  %9815 = add i64 %9806, 25
  store i64 %9815, i64* %3, align 8
  %9816 = inttoptr i64 %9814 to i32*
  %9817 = load i32, i32* %9816, align 4
  %9818 = zext i32 %9817 to i64
  store i64 %9818, i64* %RSI.i2931, align 8
  %9819 = add i64 %9807, -116
  %9820 = add i64 %9806, 29
  store i64 %9820, i64* %3, align 8
  %9821 = inttoptr i64 %9819 to i32*
  %9822 = load i32, i32* %9821, align 4
  %9823 = zext i32 %9822 to i64
  store i64 %9823, i64* %9139, align 8
  %9824 = add i64 %9807, -120
  %9825 = add i64 %9806, 33
  store i64 %9825, i64* %3, align 8
  %9826 = inttoptr i64 %9824 to i32*
  %9827 = load i32, i32* %9826, align 4
  %9828 = zext i32 %9827 to i64
  store i64 %9828, i64* %9145, align 8
  %9829 = add i64 %9807, -60
  %9830 = add i64 %9806, 37
  store i64 %9830, i64* %3, align 8
  %9831 = inttoptr i64 %9829 to i32*
  %9832 = load i32, i32* %9831, align 4
  %9833 = zext i32 %9832 to i64
  store i64 %9833, i64* %R10.i6168, align 8
  %R11W.i2619 = bitcast %union.anon* %192 to i16*
  %9834 = add i64 %9807, -74
  %9835 = add i64 %9806, 42
  store i64 %9835, i64* %3, align 8
  %9836 = inttoptr i64 %9834 to i16*
  %9837 = load i16, i16* %9836, align 2
  store i16 %9837, i16* %R11W.i2619, align 2
  %BX.i2616 = bitcast %union.anon* %34 to i16*
  %9838 = add i64 %9807, -76
  %9839 = add i64 %9806, 46
  store i64 %9839, i64* %3, align 8
  %9840 = inttoptr i64 %9838 to i16*
  %9841 = load i16, i16* %9840, align 2
  store i16 %9841, i16* %BX.i2616, align 2
  %R14D.i2613 = bitcast %union.anon* %16 to i32*
  %9842 = add i64 %9807, -64
  %9843 = add i64 %9806, 50
  store i64 %9843, i64* %3, align 8
  %9844 = inttoptr i64 %9842 to i32*
  %9845 = load i32, i32* %9844, align 4
  %9846 = zext i32 %9845 to i64
  store i64 %9846, i64* %R14.i2839, align 8
  %R15D.i2610 = bitcast %union.anon* %11 to i32*
  %9847 = add i64 %9807, -96
  %9848 = add i64 %9806, 54
  store i64 %9848, i64* %3, align 8
  %9849 = inttoptr i64 %9847 to i32*
  %9850 = load i32, i32* %9849, align 4
  %9851 = zext i32 %9850 to i64
  store i64 %9851, i64* %R15.i1647, align 8
  %9852 = add i64 %9807, -72
  %9853 = add i64 %9806, 59
  store i64 %9853, i64* %3, align 8
  %9854 = inttoptr i64 %9852 to i64*
  %9855 = load i64, i64* %9854, align 8
  store i64 %9855, i64* %117, align 1
  %9856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %9857 = bitcast i64* %9856 to double*
  store double 0.000000e+00, double* %9857, align 1
  %R12D.i2605 = bitcast %union.anon* %28 to i32*
  %9858 = sext i16 %9813 to i64
  %9859 = and i64 %9858, 4294967295
  store i64 %9859, i64* %R12.i4237, align 8
  %9860 = add i64 %9807, -372
  %9861 = add i64 %9806, 69
  store i64 %9861, i64* %3, align 8
  %9862 = inttoptr i64 %9860 to i32*
  store i32 %9817, i32* %9862, align 4
  %9863 = load i32, i32* %R12D.i2605, align 4
  %9864 = zext i32 %9863 to i64
  %9865 = load i64, i64* %3, align 8
  store i64 %9864, i64* %RSI.i2931, align 8
  %9866 = load i64, i64* %RBP.i, align 8
  %9867 = add i64 %9866, -372
  %9868 = add i64 %9865, 9
  store i64 %9868, i64* %3, align 8
  %9869 = inttoptr i64 %9867 to i32*
  %9870 = load i32, i32* %9869, align 4
  %9871 = zext i32 %9870 to i64
  store i64 %9871, i64* %RDX.i5984, align 8
  %9872 = add i64 %9866, -384
  %9873 = load i64, i64* %RCX.i6189, align 8
  %9874 = add i64 %9865, 16
  store i64 %9874, i64* %3, align 8
  %9875 = inttoptr i64 %9872 to i64*
  store i64 %9873, i64* %9875, align 8
  %9876 = load i32, i32* %R8D.i5751, align 4
  %9877 = zext i32 %9876 to i64
  %9878 = load i64, i64* %3, align 8
  store i64 %9877, i64* %RCX.i6189, align 8
  %9879 = load i32, i32* %R9D.i6071, align 4
  %9880 = zext i32 %9879 to i64
  store i64 %9880, i64* %9139, align 8
  %9881 = load i32, i32* %R10D.i2913, align 4
  %9882 = zext i32 %9881 to i64
  store i64 %9882, i64* %9145, align 8
  %9883 = load i16, i16* %R11W.i2619, align 2
  %9884 = load i32*, i32** %9168, align 8
  %9885 = sext i16 %9883 to i32
  %9886 = add i64 %9878, 17
  store i64 %9886, i64* %3, align 8
  store i32 %9885, i32* %9884, align 4
  %9887 = load i16, i16* %BX.i2616, align 2
  %9888 = load i64, i64* %3, align 8
  %9889 = sext i16 %9887 to i64
  %9890 = and i64 %9889, 4294967295
  store i64 %9890, i64* %R10.i6168, align 8
  %9891 = load i64, i64* %6, align 8
  %9892 = add i64 %9891, 8
  %9893 = sext i16 %9887 to i32
  %9894 = add i64 %9888, 9
  store i64 %9894, i64* %3, align 8
  %9895 = inttoptr i64 %9892 to i32*
  store i32 %9893, i32* %9895, align 4
  %9896 = load i64, i64* %6, align 8
  %9897 = add i64 %9896, 16
  %9898 = load i64, i64* %.pre243, align 8
  %9899 = load i64, i64* %3, align 8
  %9900 = add i64 %9899, 5
  store i64 %9900, i64* %3, align 8
  %9901 = inttoptr i64 %9897 to i64*
  store i64 %9898, i64* %9901, align 8
  %9902 = load i64, i64* %RBP.i, align 8
  %9903 = add i64 %9902, -384
  %9904 = load i64, i64* %3, align 8
  %9905 = add i64 %9904, 7
  store i64 %9905, i64* %3, align 8
  %9906 = inttoptr i64 %9903 to i64*
  %9907 = load i64, i64* %9906, align 8
  store i64 %9907, i64* %.pre243, align 8
  %9908 = load i64, i64* %6, align 8
  %9909 = add i64 %9908, 24
  %9910 = add i64 %9904, 12
  store i64 %9910, i64* %3, align 8
  %9911 = inttoptr i64 %9909 to i64*
  store i64 %9907, i64* %9911, align 8
  %9912 = load i64, i64* %6, align 8
  %9913 = add i64 %9912, 32
  %9914 = load i32, i32* %R14D.i2613, align 4
  %9915 = load i64, i64* %3, align 8
  %9916 = add i64 %9915, 5
  store i64 %9916, i64* %3, align 8
  %9917 = inttoptr i64 %9913 to i32*
  store i32 %9914, i32* %9917, align 4
  %9918 = load i64, i64* %6, align 8
  %9919 = add i64 %9918, 40
  %9920 = load i32, i32* %R15D.i2610, align 4
  %9921 = load i64, i64* %3, align 8
  %9922 = add i64 %9921, 5
  store i64 %9922, i64* %3, align 8
  %9923 = inttoptr i64 %9919 to i32*
  store i32 %9920, i32* %9923, align 4
  %9924 = load i64, i64* %3, align 8
  %9925 = add i64 %9924, -325727
  %9926 = add i64 %9924, 5
  %9927 = load i64, i64* %6, align 8
  %9928 = add i64 %9927, -8
  %9929 = inttoptr i64 %9928 to i64*
  store i64 %9926, i64* %9929, align 8
  store i64 %9928, i64* %6, align 8
  store i64 %9925, i64* %3, align 8
  %call2_46ff5f = tail call %struct.Memory* @sub_420700.FastIntegerPelBlockMotionSearch(%struct.State* nonnull %0, i64 %9925, %struct.Memory* %9305)
  %9930 = load i64, i64* %RBP.i, align 8
  %9931 = add i64 %9930, -96
  %9932 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %9933 = load i64, i64* %3, align 8
  %9934 = add i64 %9933, 3
  store i64 %9934, i64* %3, align 8
  %9935 = inttoptr i64 %9931 to i32*
  store i32 %9932, i32* %9935, align 4
  %9936 = load i64, i64* %RBP.i, align 8
  %9937 = add i64 %9936, -84
  %9938 = load i64, i64* %3, align 8
  %9939 = add i64 %9938, 7
  store i64 %9939, i64* %3, align 8
  %9940 = inttoptr i64 %9937 to i32*
  store i32 0, i32* %9940, align 4
  %.pre197 = load i64, i64* %3, align 8
  br label %block_.L_46ff6e

block_.L_46ff6e:                                  ; preds = %block_.L_47006d, %block_.L_46fed5
  %9941 = phi i64 [ %10541, %block_.L_47006d ], [ %.pre197, %block_.L_46fed5 ]
  %9942 = load i64, i64* %RBP.i, align 8
  %9943 = add i64 %9942, -84
  %9944 = add i64 %9941, 3
  store i64 %9944, i64* %3, align 8
  %9945 = inttoptr i64 %9943 to i32*
  %9946 = load i32, i32* %9945, align 4
  %9947 = zext i32 %9946 to i64
  store i64 %9947, i64* %.pre243, align 8
  %9948 = add i64 %9942, -108
  %9949 = add i64 %9941, 6
  store i64 %9949, i64* %3, align 8
  %9950 = inttoptr i64 %9948 to i32*
  %9951 = load i32, i32* %9950, align 4
  %9952 = sext i32 %9951 to i64
  %9953 = ashr i64 %9952, 1
  %9954 = lshr i64 %9953, 1
  %9955 = and i64 %9954, 4294967295
  store i64 %9955, i64* %RCX.i6189, align 8
  %9956 = trunc i64 %9954 to i32
  %9957 = sub i32 %9946, %9956
  %9958 = icmp ult i32 %9946, %9956
  %9959 = zext i1 %9958 to i8
  store i8 %9959, i8* %44, align 1
  %9960 = and i32 %9957, 255
  %9961 = tail call i32 @llvm.ctpop.i32(i32 %9960)
  %9962 = trunc i32 %9961 to i8
  %9963 = and i8 %9962, 1
  %9964 = xor i8 %9963, 1
  store i8 %9964, i8* %51, align 1
  %9965 = xor i32 %9956, %9946
  %9966 = xor i32 %9965, %9957
  %9967 = lshr i32 %9966, 4
  %9968 = trunc i32 %9967 to i8
  %9969 = and i8 %9968, 1
  store i8 %9969, i8* %56, align 1
  %9970 = icmp eq i32 %9957, 0
  %9971 = zext i1 %9970 to i8
  store i8 %9971, i8* %59, align 1
  %9972 = lshr i32 %9957, 31
  %9973 = trunc i32 %9972 to i8
  store i8 %9973, i8* %62, align 1
  %9974 = lshr i32 %9946, 31
  %9975 = lshr i64 %9953, 32
  %9976 = trunc i64 %9975 to i32
  %9977 = and i32 %9976, 1
  %9978 = xor i32 %9977, %9974
  %9979 = xor i32 %9972, %9974
  %9980 = add nuw nsw i32 %9979, %9978
  %9981 = icmp eq i32 %9980, 2
  %9982 = zext i1 %9981 to i8
  store i8 %9982, i8* %68, align 1
  %9983 = icmp ne i8 %9973, 0
  %9984 = xor i1 %9983, %9981
  %.v271 = select i1 %9984, i64 17, i64 274
  %9985 = add i64 %9941, %.v271
  store i64 %9985, i64* %3, align 8
  br i1 %9984, label %block_46ff7f, label %block_.L_470080

block_46ff7f:                                     ; preds = %block_.L_46ff6e
  %9986 = add i64 %9942, -88
  %9987 = add i64 %9985, 7
  store i64 %9987, i64* %3, align 8
  %9988 = inttoptr i64 %9986 to i32*
  store i32 0, i32* %9988, align 4
  %.pre198 = load i64, i64* %3, align 8
  br label %block_.L_46ff86

block_.L_46ff86:                                  ; preds = %block_.L_47005a, %block_46ff7f
  %9989 = phi i64 [ %10511, %block_.L_47005a ], [ %.pre198, %block_46ff7f ]
  %9990 = load i64, i64* %RBP.i, align 8
  %9991 = add i64 %9990, -88
  %9992 = add i64 %9989, 3
  store i64 %9992, i64* %3, align 8
  %9993 = inttoptr i64 %9991 to i32*
  %9994 = load i32, i32* %9993, align 4
  %9995 = zext i32 %9994 to i64
  store i64 %9995, i64* %.pre243, align 8
  %9996 = add i64 %9990, -112
  %9997 = add i64 %9989, 6
  store i64 %9997, i64* %3, align 8
  %9998 = inttoptr i64 %9996 to i32*
  %9999 = load i32, i32* %9998, align 4
  %10000 = sext i32 %9999 to i64
  %10001 = ashr i64 %10000, 1
  %10002 = lshr i64 %10001, 1
  %10003 = and i64 %10002, 4294967295
  store i64 %10003, i64* %RCX.i6189, align 8
  %10004 = trunc i64 %10002 to i32
  %10005 = sub i32 %9994, %10004
  %10006 = icmp ult i32 %9994, %10004
  %10007 = zext i1 %10006 to i8
  store i8 %10007, i8* %44, align 1
  %10008 = and i32 %10005, 255
  %10009 = tail call i32 @llvm.ctpop.i32(i32 %10008)
  %10010 = trunc i32 %10009 to i8
  %10011 = and i8 %10010, 1
  %10012 = xor i8 %10011, 1
  store i8 %10012, i8* %51, align 1
  %10013 = xor i32 %10004, %9994
  %10014 = xor i32 %10013, %10005
  %10015 = lshr i32 %10014, 4
  %10016 = trunc i32 %10015 to i8
  %10017 = and i8 %10016, 1
  store i8 %10017, i8* %56, align 1
  %10018 = icmp eq i32 %10005, 0
  %10019 = zext i1 %10018 to i8
  store i8 %10019, i8* %59, align 1
  %10020 = lshr i32 %10005, 31
  %10021 = trunc i32 %10020 to i8
  store i8 %10021, i8* %62, align 1
  %10022 = lshr i32 %9994, 31
  %10023 = lshr i64 %10001, 32
  %10024 = trunc i64 %10023 to i32
  %10025 = and i32 %10024, 1
  %10026 = xor i32 %10025, %10022
  %10027 = xor i32 %10020, %10022
  %10028 = add nuw nsw i32 %10027, %10026
  %10029 = icmp eq i32 %10028, 2
  %10030 = zext i1 %10029 to i8
  store i8 %10030, i8* %68, align 1
  %10031 = icmp ne i8 %10021, 0
  %10032 = xor i1 %10031, %10029
  %.v251 = select i1 %10032, i64 17, i64 231
  %10033 = add i64 %9989, %.v251
  store i64 %10033, i64* %3, align 8
  br i1 %10032, label %block_46ff97, label %block_.L_47006d

block_46ff97:                                     ; preds = %block_.L_46ff86
  %10034 = add i64 %9990, -48
  %10035 = add i64 %10033, 4
  store i64 %10035, i64* %3, align 8
  %10036 = inttoptr i64 %10034 to i32*
  %10037 = load i32, i32* %10036, align 4
  store i8 0, i8* %44, align 1
  %10038 = and i32 %10037, 255
  %10039 = tail call i32 @llvm.ctpop.i32(i32 %10038)
  %10040 = trunc i32 %10039 to i8
  %10041 = and i8 %10040, 1
  %10042 = xor i8 %10041, 1
  store i8 %10042, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %10043 = icmp eq i32 %10037, 0
  %10044 = zext i1 %10043 to i8
  store i8 %10044, i8* %59, align 1
  %10045 = lshr i32 %10037, 31
  %10046 = trunc i32 %10045 to i8
  store i8 %10046, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v252 = select i1 %10043, i64 10, i64 105
  %10047 = add i64 %10033, %.v252
  %10048 = add i64 %9990, -96
  %10049 = add i64 %10047, 3
  store i64 %10049, i64* %3, align 8
  %10050 = inttoptr i64 %10048 to i32*
  %10051 = load i32, i32* %10050, align 4
  %10052 = zext i32 %10051 to i64
  store i64 %10052, i64* %.pre243, align 8
  %10053 = add i64 %10047, 11
  store i64 %10053, i64* %3, align 8
  br i1 %10043, label %block_46ffa1, label %block_.L_470000

block_46ffa1:                                     ; preds = %block_46ff97
  %10054 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %10054, i64* %RCX.i6189, align 8
  %10055 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10055, i64* %RDX.i5984, align 8
  %10056 = add i64 %10055, 152
  %10057 = add i64 %10047, 25
  store i64 %10057, i64* %3, align 8
  %10058 = inttoptr i64 %10056 to i32*
  %10059 = load i32, i32* %10058, align 4
  %10060 = sext i32 %10059 to i64
  %10061 = ashr i64 %10060, 1
  %10062 = lshr i64 %10061, 1
  %10063 = trunc i64 %10061 to i8
  %10064 = and i8 %10063, 1
  %10065 = trunc i64 %10062 to i32
  %10066 = and i64 %10062, 4294967295
  store i64 %10066, i64* %RSI.i2931, align 8
  store i8 %10064, i8* %44, align 1
  %10067 = and i32 %10065, 255
  %10068 = tail call i32 @llvm.ctpop.i32(i32 %10067)
  %10069 = trunc i32 %10068 to i8
  %10070 = and i8 %10069, 1
  %10071 = xor i8 %10070, 1
  store i8 %10071, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %10072 = icmp eq i32 %10065, 0
  %10073 = zext i1 %10072 to i8
  store i8 %10073, i8* %59, align 1
  %10074 = lshr i64 %10061, 32
  %10075 = trunc i64 %10074 to i8
  %10076 = and i8 %10075, 1
  store i8 %10076, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %10077 = add i64 %9990, -100
  %10078 = add i64 %10047, 31
  store i64 %10078, i64* %3, align 8
  %10079 = trunc i64 %10062 to i32
  %10080 = inttoptr i64 %10077 to i32*
  %10081 = load i32, i32* %10080, align 4
  %10082 = add i32 %10081, %10079
  %10083 = zext i32 %10082 to i64
  store i64 %10083, i64* %RSI.i2931, align 8
  %10084 = icmp ult i32 %10082, %10079
  %10085 = icmp ult i32 %10082, %10081
  %10086 = or i1 %10084, %10085
  %10087 = zext i1 %10086 to i8
  store i8 %10087, i8* %44, align 1
  %10088 = and i32 %10082, 255
  %10089 = tail call i32 @llvm.ctpop.i32(i32 %10088)
  %10090 = trunc i32 %10089 to i8
  %10091 = and i8 %10090, 1
  %10092 = xor i8 %10091, 1
  store i8 %10092, i8* %51, align 1
  %10093 = xor i32 %10081, %10079
  %10094 = xor i32 %10093, %10082
  %10095 = lshr i32 %10094, 4
  %10096 = trunc i32 %10095 to i8
  %10097 = and i8 %10096, 1
  store i8 %10097, i8* %56, align 1
  %10098 = icmp eq i32 %10082, 0
  %10099 = zext i1 %10098 to i8
  store i8 %10099, i8* %59, align 1
  %10100 = lshr i32 %10082, 31
  %10101 = trunc i32 %10100 to i8
  store i8 %10101, i8* %62, align 1
  %10102 = lshr i64 %10061, 32
  %10103 = trunc i64 %10102 to i32
  %10104 = and i32 %10103, 1
  %10105 = lshr i32 %10081, 31
  %10106 = xor i32 %10100, %10104
  %10107 = xor i32 %10100, %10105
  %10108 = add nuw nsw i32 %10106, %10107
  %10109 = icmp eq i32 %10108, 2
  %10110 = zext i1 %10109 to i8
  store i8 %10110, i8* %68, align 1
  %10111 = add i64 %9990, -84
  %10112 = add i64 %10047, 34
  store i64 %10112, i64* %3, align 8
  %10113 = inttoptr i64 %10111 to i32*
  %10114 = load i32, i32* %10113, align 4
  %10115 = add i32 %10114, %10082
  %10116 = zext i32 %10115 to i64
  store i64 %10116, i64* %RSI.i2931, align 8
  %10117 = icmp ult i32 %10115, %10082
  %10118 = icmp ult i32 %10115, %10114
  %10119 = or i1 %10117, %10118
  %10120 = zext i1 %10119 to i8
  store i8 %10120, i8* %44, align 1
  %10121 = and i32 %10115, 255
  %10122 = tail call i32 @llvm.ctpop.i32(i32 %10121)
  %10123 = trunc i32 %10122 to i8
  %10124 = and i8 %10123, 1
  %10125 = xor i8 %10124, 1
  store i8 %10125, i8* %51, align 1
  %10126 = xor i32 %10114, %10082
  %10127 = xor i32 %10126, %10115
  %10128 = lshr i32 %10127, 4
  %10129 = trunc i32 %10128 to i8
  %10130 = and i8 %10129, 1
  store i8 %10130, i8* %56, align 1
  %10131 = icmp eq i32 %10115, 0
  %10132 = zext i1 %10131 to i8
  store i8 %10132, i8* %59, align 1
  %10133 = lshr i32 %10115, 31
  %10134 = trunc i32 %10133 to i8
  store i8 %10134, i8* %62, align 1
  %10135 = lshr i32 %10114, 31
  %10136 = xor i32 %10133, %10100
  %10137 = xor i32 %10133, %10135
  %10138 = add nuw nsw i32 %10136, %10137
  %10139 = icmp eq i32 %10138, 2
  %10140 = zext i1 %10139 to i8
  store i8 %10140, i8* %68, align 1
  %10141 = sext i32 %10115 to i64
  store i64 %10141, i64* %RDX.i5984, align 8
  %10142 = load i64, i64* %RCX.i6189, align 8
  %10143 = shl nsw i64 %10141, 3
  %10144 = add i64 %10142, %10143
  %10145 = add i64 %10047, 41
  store i64 %10145, i64* %3, align 8
  %10146 = inttoptr i64 %10144 to i64*
  %10147 = load i64, i64* %10146, align 8
  store i64 %10147, i64* %RCX.i6189, align 8
  %10148 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10148, i64* %RDX.i5984, align 8
  %10149 = add i64 %10148, 156
  %10150 = add i64 %10047, 55
  store i64 %10150, i64* %3, align 8
  %10151 = inttoptr i64 %10149 to i32*
  %10152 = load i32, i32* %10151, align 4
  %10153 = sext i32 %10152 to i64
  %10154 = ashr i64 %10153, 1
  %10155 = lshr i64 %10154, 1
  %10156 = trunc i64 %10154 to i8
  %10157 = and i8 %10156, 1
  %10158 = trunc i64 %10155 to i32
  %10159 = and i64 %10155, 4294967295
  store i64 %10159, i64* %RSI.i2931, align 8
  store i8 %10157, i8* %44, align 1
  %10160 = and i32 %10158, 255
  %10161 = tail call i32 @llvm.ctpop.i32(i32 %10160)
  %10162 = trunc i32 %10161 to i8
  %10163 = and i8 %10162, 1
  %10164 = xor i8 %10163, 1
  store i8 %10164, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %10165 = icmp eq i32 %10158, 0
  %10166 = zext i1 %10165 to i8
  store i8 %10166, i8* %59, align 1
  %10167 = lshr i64 %10154, 32
  %10168 = trunc i64 %10167 to i8
  %10169 = and i8 %10168, 1
  store i8 %10169, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %10170 = load i64, i64* %RBP.i, align 8
  %10171 = add i64 %10170, -104
  %10172 = add i64 %10047, 61
  store i64 %10172, i64* %3, align 8
  %10173 = trunc i64 %10155 to i32
  %10174 = inttoptr i64 %10171 to i32*
  %10175 = load i32, i32* %10174, align 4
  %10176 = add i32 %10175, %10173
  %10177 = zext i32 %10176 to i64
  store i64 %10177, i64* %RSI.i2931, align 8
  %10178 = icmp ult i32 %10176, %10173
  %10179 = icmp ult i32 %10176, %10175
  %10180 = or i1 %10178, %10179
  %10181 = zext i1 %10180 to i8
  store i8 %10181, i8* %44, align 1
  %10182 = and i32 %10176, 255
  %10183 = tail call i32 @llvm.ctpop.i32(i32 %10182)
  %10184 = trunc i32 %10183 to i8
  %10185 = and i8 %10184, 1
  %10186 = xor i8 %10185, 1
  store i8 %10186, i8* %51, align 1
  %10187 = xor i32 %10175, %10173
  %10188 = xor i32 %10187, %10176
  %10189 = lshr i32 %10188, 4
  %10190 = trunc i32 %10189 to i8
  %10191 = and i8 %10190, 1
  store i8 %10191, i8* %56, align 1
  %10192 = icmp eq i32 %10176, 0
  %10193 = zext i1 %10192 to i8
  store i8 %10193, i8* %59, align 1
  %10194 = lshr i32 %10176, 31
  %10195 = trunc i32 %10194 to i8
  store i8 %10195, i8* %62, align 1
  %10196 = lshr i64 %10154, 32
  %10197 = trunc i64 %10196 to i32
  %10198 = and i32 %10197, 1
  %10199 = lshr i32 %10175, 31
  %10200 = xor i32 %10194, %10198
  %10201 = xor i32 %10194, %10199
  %10202 = add nuw nsw i32 %10200, %10201
  %10203 = icmp eq i32 %10202, 2
  %10204 = zext i1 %10203 to i8
  store i8 %10204, i8* %68, align 1
  %10205 = add i64 %10170, -88
  %10206 = add i64 %10047, 64
  store i64 %10206, i64* %3, align 8
  %10207 = inttoptr i64 %10205 to i32*
  %10208 = load i32, i32* %10207, align 4
  %10209 = add i32 %10208, %10176
  %10210 = zext i32 %10209 to i64
  store i64 %10210, i64* %RSI.i2931, align 8
  %10211 = icmp ult i32 %10209, %10176
  %10212 = icmp ult i32 %10209, %10208
  %10213 = or i1 %10211, %10212
  %10214 = zext i1 %10213 to i8
  store i8 %10214, i8* %44, align 1
  %10215 = and i32 %10209, 255
  %10216 = tail call i32 @llvm.ctpop.i32(i32 %10215)
  %10217 = trunc i32 %10216 to i8
  %10218 = and i8 %10217, 1
  %10219 = xor i8 %10218, 1
  store i8 %10219, i8* %51, align 1
  %10220 = xor i32 %10208, %10176
  %10221 = xor i32 %10220, %10209
  %10222 = lshr i32 %10221, 4
  %10223 = trunc i32 %10222 to i8
  %10224 = and i8 %10223, 1
  store i8 %10224, i8* %56, align 1
  %10225 = icmp eq i32 %10209, 0
  %10226 = zext i1 %10225 to i8
  store i8 %10226, i8* %59, align 1
  %10227 = lshr i32 %10209, 31
  %10228 = trunc i32 %10227 to i8
  store i8 %10228, i8* %62, align 1
  %10229 = lshr i32 %10208, 31
  %10230 = xor i32 %10227, %10194
  %10231 = xor i32 %10227, %10229
  %10232 = add nuw nsw i32 %10230, %10231
  %10233 = icmp eq i32 %10232, 2
  %10234 = zext i1 %10233 to i8
  store i8 %10234, i8* %68, align 1
  %10235 = sext i32 %10209 to i64
  store i64 %10235, i64* %RDX.i5984, align 8
  %10236 = load i64, i64* %RCX.i6189, align 8
  %10237 = shl nsw i64 %10235, 3
  %10238 = add i64 %10236, %10237
  %10239 = add i64 %10047, 71
  store i64 %10239, i64* %3, align 8
  %10240 = inttoptr i64 %10238 to i64*
  %10241 = load i64, i64* %10240, align 8
  store i64 %10241, i64* %RCX.i6189, align 8
  %10242 = add i64 %10170, -42
  %10243 = add i64 %10047, 76
  store i64 %10243, i64* %3, align 8
  %10244 = inttoptr i64 %10242 to i16*
  %10245 = load i16, i16* %10244, align 2
  %10246 = sext i16 %10245 to i64
  store i64 %10246, i64* %RDX.i5984, align 8
  %10247 = shl nsw i64 %10246, 3
  %10248 = add i64 %10247, %10241
  %10249 = add i64 %10047, 80
  store i64 %10249, i64* %3, align 8
  %10250 = inttoptr i64 %10248 to i64*
  %10251 = load i64, i64* %10250, align 8
  store i64 %10251, i64* %RCX.i6189, align 8
  %10252 = load i64, i64* %RBP.i, align 8
  %10253 = add i64 %10252, -60
  %10254 = add i64 %10047, 84
  store i64 %10254, i64* %3, align 8
  %10255 = inttoptr i64 %10253 to i32*
  %10256 = load i32, i32* %10255, align 4
  %10257 = sext i32 %10256 to i64
  store i64 %10257, i64* %RDX.i5984, align 8
  %10258 = shl nsw i64 %10257, 3
  %10259 = add i64 %10258, %10251
  %10260 = add i64 %10047, 88
  store i64 %10260, i64* %3, align 8
  %10261 = inttoptr i64 %10259 to i64*
  %10262 = load i64, i64* %10261, align 8
  store i64 %10262, i64* %RCX.i6189, align 8
  %10263 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %10264 = add i64 %10047, 90
  store i64 %10264, i64* %3, align 8
  %10265 = inttoptr i64 %10262 to i32*
  store i32 %10263, i32* %10265, align 4
  %10266 = load i64, i64* %3, align 8
  %10267 = add i64 %10266, 95
  store i64 %10267, i64* %3, align 8
  br label %block_.L_47005a

block_.L_470000:                                  ; preds = %block_46ff97
  %10268 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %10268, i64* %RCX.i6189, align 8
  %10269 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10269, i64* %RDX.i5984, align 8
  %10270 = add i64 %10269, 152
  %10271 = add i64 %10047, 25
  store i64 %10271, i64* %3, align 8
  %10272 = inttoptr i64 %10270 to i32*
  %10273 = load i32, i32* %10272, align 4
  %10274 = sext i32 %10273 to i64
  %10275 = ashr i64 %10274, 1
  %10276 = lshr i64 %10275, 1
  %10277 = trunc i64 %10275 to i8
  %10278 = and i8 %10277, 1
  %10279 = trunc i64 %10276 to i32
  %10280 = and i64 %10276, 4294967295
  store i64 %10280, i64* %RSI.i2931, align 8
  store i8 %10278, i8* %44, align 1
  %10281 = and i32 %10279, 255
  %10282 = tail call i32 @llvm.ctpop.i32(i32 %10281)
  %10283 = trunc i32 %10282 to i8
  %10284 = and i8 %10283, 1
  %10285 = xor i8 %10284, 1
  store i8 %10285, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %10286 = icmp eq i32 %10279, 0
  %10287 = zext i1 %10286 to i8
  store i8 %10287, i8* %59, align 1
  %10288 = lshr i64 %10275, 32
  %10289 = trunc i64 %10288 to i8
  %10290 = and i8 %10289, 1
  store i8 %10290, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %10291 = add i64 %9990, -100
  %10292 = add i64 %10047, 31
  store i64 %10292, i64* %3, align 8
  %10293 = trunc i64 %10276 to i32
  %10294 = inttoptr i64 %10291 to i32*
  %10295 = load i32, i32* %10294, align 4
  %10296 = add i32 %10295, %10293
  %10297 = zext i32 %10296 to i64
  store i64 %10297, i64* %RSI.i2931, align 8
  %10298 = icmp ult i32 %10296, %10293
  %10299 = icmp ult i32 %10296, %10295
  %10300 = or i1 %10298, %10299
  %10301 = zext i1 %10300 to i8
  store i8 %10301, i8* %44, align 1
  %10302 = and i32 %10296, 255
  %10303 = tail call i32 @llvm.ctpop.i32(i32 %10302)
  %10304 = trunc i32 %10303 to i8
  %10305 = and i8 %10304, 1
  %10306 = xor i8 %10305, 1
  store i8 %10306, i8* %51, align 1
  %10307 = xor i32 %10295, %10293
  %10308 = xor i32 %10307, %10296
  %10309 = lshr i32 %10308, 4
  %10310 = trunc i32 %10309 to i8
  %10311 = and i8 %10310, 1
  store i8 %10311, i8* %56, align 1
  %10312 = icmp eq i32 %10296, 0
  %10313 = zext i1 %10312 to i8
  store i8 %10313, i8* %59, align 1
  %10314 = lshr i32 %10296, 31
  %10315 = trunc i32 %10314 to i8
  store i8 %10315, i8* %62, align 1
  %10316 = lshr i64 %10275, 32
  %10317 = trunc i64 %10316 to i32
  %10318 = and i32 %10317, 1
  %10319 = lshr i32 %10295, 31
  %10320 = xor i32 %10314, %10318
  %10321 = xor i32 %10314, %10319
  %10322 = add nuw nsw i32 %10320, %10321
  %10323 = icmp eq i32 %10322, 2
  %10324 = zext i1 %10323 to i8
  store i8 %10324, i8* %68, align 1
  %10325 = add i64 %9990, -84
  %10326 = add i64 %10047, 34
  store i64 %10326, i64* %3, align 8
  %10327 = inttoptr i64 %10325 to i32*
  %10328 = load i32, i32* %10327, align 4
  %10329 = add i32 %10328, %10296
  %10330 = zext i32 %10329 to i64
  store i64 %10330, i64* %RSI.i2931, align 8
  %10331 = icmp ult i32 %10329, %10296
  %10332 = icmp ult i32 %10329, %10328
  %10333 = or i1 %10331, %10332
  %10334 = zext i1 %10333 to i8
  store i8 %10334, i8* %44, align 1
  %10335 = and i32 %10329, 255
  %10336 = tail call i32 @llvm.ctpop.i32(i32 %10335)
  %10337 = trunc i32 %10336 to i8
  %10338 = and i8 %10337, 1
  %10339 = xor i8 %10338, 1
  store i8 %10339, i8* %51, align 1
  %10340 = xor i32 %10328, %10296
  %10341 = xor i32 %10340, %10329
  %10342 = lshr i32 %10341, 4
  %10343 = trunc i32 %10342 to i8
  %10344 = and i8 %10343, 1
  store i8 %10344, i8* %56, align 1
  %10345 = icmp eq i32 %10329, 0
  %10346 = zext i1 %10345 to i8
  store i8 %10346, i8* %59, align 1
  %10347 = lshr i32 %10329, 31
  %10348 = trunc i32 %10347 to i8
  store i8 %10348, i8* %62, align 1
  %10349 = lshr i32 %10328, 31
  %10350 = xor i32 %10347, %10314
  %10351 = xor i32 %10347, %10349
  %10352 = add nuw nsw i32 %10350, %10351
  %10353 = icmp eq i32 %10352, 2
  %10354 = zext i1 %10353 to i8
  store i8 %10354, i8* %68, align 1
  %10355 = sext i32 %10329 to i64
  store i64 %10355, i64* %RDX.i5984, align 8
  %10356 = load i64, i64* %RCX.i6189, align 8
  %10357 = shl nsw i64 %10355, 3
  %10358 = add i64 %10356, %10357
  %10359 = add i64 %10047, 41
  store i64 %10359, i64* %3, align 8
  %10360 = inttoptr i64 %10358 to i64*
  %10361 = load i64, i64* %10360, align 8
  store i64 %10361, i64* %RCX.i6189, align 8
  %10362 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10362, i64* %RDX.i5984, align 8
  %10363 = add i64 %10362, 156
  %10364 = add i64 %10047, 55
  store i64 %10364, i64* %3, align 8
  %10365 = inttoptr i64 %10363 to i32*
  %10366 = load i32, i32* %10365, align 4
  %10367 = sext i32 %10366 to i64
  %10368 = ashr i64 %10367, 1
  %10369 = lshr i64 %10368, 1
  %10370 = trunc i64 %10368 to i8
  %10371 = and i8 %10370, 1
  %10372 = trunc i64 %10369 to i32
  %10373 = and i64 %10369, 4294967295
  store i64 %10373, i64* %RSI.i2931, align 8
  store i8 %10371, i8* %44, align 1
  %10374 = and i32 %10372, 255
  %10375 = tail call i32 @llvm.ctpop.i32(i32 %10374)
  %10376 = trunc i32 %10375 to i8
  %10377 = and i8 %10376, 1
  %10378 = xor i8 %10377, 1
  store i8 %10378, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %10379 = icmp eq i32 %10372, 0
  %10380 = zext i1 %10379 to i8
  store i8 %10380, i8* %59, align 1
  %10381 = lshr i64 %10368, 32
  %10382 = trunc i64 %10381 to i8
  %10383 = and i8 %10382, 1
  store i8 %10383, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %10384 = load i64, i64* %RBP.i, align 8
  %10385 = add i64 %10384, -104
  %10386 = add i64 %10047, 61
  store i64 %10386, i64* %3, align 8
  %10387 = trunc i64 %10369 to i32
  %10388 = inttoptr i64 %10385 to i32*
  %10389 = load i32, i32* %10388, align 4
  %10390 = add i32 %10389, %10387
  %10391 = zext i32 %10390 to i64
  store i64 %10391, i64* %RSI.i2931, align 8
  %10392 = icmp ult i32 %10390, %10387
  %10393 = icmp ult i32 %10390, %10389
  %10394 = or i1 %10392, %10393
  %10395 = zext i1 %10394 to i8
  store i8 %10395, i8* %44, align 1
  %10396 = and i32 %10390, 255
  %10397 = tail call i32 @llvm.ctpop.i32(i32 %10396)
  %10398 = trunc i32 %10397 to i8
  %10399 = and i8 %10398, 1
  %10400 = xor i8 %10399, 1
  store i8 %10400, i8* %51, align 1
  %10401 = xor i32 %10389, %10387
  %10402 = xor i32 %10401, %10390
  %10403 = lshr i32 %10402, 4
  %10404 = trunc i32 %10403 to i8
  %10405 = and i8 %10404, 1
  store i8 %10405, i8* %56, align 1
  %10406 = icmp eq i32 %10390, 0
  %10407 = zext i1 %10406 to i8
  store i8 %10407, i8* %59, align 1
  %10408 = lshr i32 %10390, 31
  %10409 = trunc i32 %10408 to i8
  store i8 %10409, i8* %62, align 1
  %10410 = lshr i64 %10368, 32
  %10411 = trunc i64 %10410 to i32
  %10412 = and i32 %10411, 1
  %10413 = lshr i32 %10389, 31
  %10414 = xor i32 %10408, %10412
  %10415 = xor i32 %10408, %10413
  %10416 = add nuw nsw i32 %10414, %10415
  %10417 = icmp eq i32 %10416, 2
  %10418 = zext i1 %10417 to i8
  store i8 %10418, i8* %68, align 1
  %10419 = add i64 %10384, -88
  %10420 = add i64 %10047, 64
  store i64 %10420, i64* %3, align 8
  %10421 = inttoptr i64 %10419 to i32*
  %10422 = load i32, i32* %10421, align 4
  %10423 = add i32 %10422, %10390
  %10424 = zext i32 %10423 to i64
  store i64 %10424, i64* %RSI.i2931, align 8
  %10425 = icmp ult i32 %10423, %10390
  %10426 = icmp ult i32 %10423, %10422
  %10427 = or i1 %10425, %10426
  %10428 = zext i1 %10427 to i8
  store i8 %10428, i8* %44, align 1
  %10429 = and i32 %10423, 255
  %10430 = tail call i32 @llvm.ctpop.i32(i32 %10429)
  %10431 = trunc i32 %10430 to i8
  %10432 = and i8 %10431, 1
  %10433 = xor i8 %10432, 1
  store i8 %10433, i8* %51, align 1
  %10434 = xor i32 %10422, %10390
  %10435 = xor i32 %10434, %10423
  %10436 = lshr i32 %10435, 4
  %10437 = trunc i32 %10436 to i8
  %10438 = and i8 %10437, 1
  store i8 %10438, i8* %56, align 1
  %10439 = icmp eq i32 %10423, 0
  %10440 = zext i1 %10439 to i8
  store i8 %10440, i8* %59, align 1
  %10441 = lshr i32 %10423, 31
  %10442 = trunc i32 %10441 to i8
  store i8 %10442, i8* %62, align 1
  %10443 = lshr i32 %10422, 31
  %10444 = xor i32 %10441, %10408
  %10445 = xor i32 %10441, %10443
  %10446 = add nuw nsw i32 %10444, %10445
  %10447 = icmp eq i32 %10446, 2
  %10448 = zext i1 %10447 to i8
  store i8 %10448, i8* %68, align 1
  %10449 = sext i32 %10423 to i64
  store i64 %10449, i64* %RDX.i5984, align 8
  %10450 = load i64, i64* %RCX.i6189, align 8
  %10451 = shl nsw i64 %10449, 3
  %10452 = add i64 %10450, %10451
  %10453 = add i64 %10047, 71
  store i64 %10453, i64* %3, align 8
  %10454 = inttoptr i64 %10452 to i64*
  %10455 = load i64, i64* %10454, align 8
  store i64 %10455, i64* %RCX.i6189, align 8
  %10456 = add i64 %10384, -42
  %10457 = add i64 %10047, 76
  store i64 %10457, i64* %3, align 8
  %10458 = inttoptr i64 %10456 to i16*
  %10459 = load i16, i16* %10458, align 2
  %10460 = sext i16 %10459 to i64
  store i64 %10460, i64* %RDX.i5984, align 8
  %10461 = shl nsw i64 %10460, 3
  %10462 = add i64 %10461, %10455
  %10463 = add i64 %10047, 80
  store i64 %10463, i64* %3, align 8
  %10464 = inttoptr i64 %10462 to i64*
  %10465 = load i64, i64* %10464, align 8
  store i64 %10465, i64* %RCX.i6189, align 8
  %10466 = load i64, i64* %RBP.i, align 8
  %10467 = add i64 %10466, -60
  %10468 = add i64 %10047, 84
  store i64 %10468, i64* %3, align 8
  %10469 = inttoptr i64 %10467 to i32*
  %10470 = load i32, i32* %10469, align 4
  %10471 = sext i32 %10470 to i64
  store i64 %10471, i64* %RDX.i5984, align 8
  %10472 = shl nsw i64 %10471, 3
  %10473 = add i64 %10472, %10465
  %10474 = add i64 %10047, 88
  store i64 %10474, i64* %3, align 8
  %10475 = inttoptr i64 %10473 to i64*
  %10476 = load i64, i64* %10475, align 8
  store i64 %10476, i64* %RCX.i6189, align 8
  %10477 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %10478 = add i64 %10047, 90
  store i64 %10478, i64* %3, align 8
  %10479 = inttoptr i64 %10476 to i32*
  store i32 %10477, i32* %10479, align 4
  %.pre199 = load i64, i64* %3, align 8
  br label %block_.L_47005a

block_.L_47005a:                                  ; preds = %block_.L_470000, %block_46ffa1
  %10480 = phi i64 [ %.pre199, %block_.L_470000 ], [ %10267, %block_46ffa1 ]
  %10481 = load i64, i64* %RBP.i, align 8
  %10482 = add i64 %10481, -88
  %10483 = add i64 %10480, 8
  store i64 %10483, i64* %3, align 8
  %10484 = inttoptr i64 %10482 to i32*
  %10485 = load i32, i32* %10484, align 4
  %10486 = add i32 %10485, 1
  %10487 = zext i32 %10486 to i64
  store i64 %10487, i64* %.pre243, align 8
  %10488 = icmp eq i32 %10485, -1
  %10489 = icmp eq i32 %10486, 0
  %10490 = or i1 %10488, %10489
  %10491 = zext i1 %10490 to i8
  store i8 %10491, i8* %44, align 1
  %10492 = and i32 %10486, 255
  %10493 = tail call i32 @llvm.ctpop.i32(i32 %10492)
  %10494 = trunc i32 %10493 to i8
  %10495 = and i8 %10494, 1
  %10496 = xor i8 %10495, 1
  store i8 %10496, i8* %51, align 1
  %10497 = xor i32 %10486, %10485
  %10498 = lshr i32 %10497, 4
  %10499 = trunc i32 %10498 to i8
  %10500 = and i8 %10499, 1
  store i8 %10500, i8* %56, align 1
  %10501 = zext i1 %10489 to i8
  store i8 %10501, i8* %59, align 1
  %10502 = lshr i32 %10486, 31
  %10503 = trunc i32 %10502 to i8
  store i8 %10503, i8* %62, align 1
  %10504 = lshr i32 %10485, 31
  %10505 = xor i32 %10502, %10504
  %10506 = add nuw nsw i32 %10505, %10502
  %10507 = icmp eq i32 %10506, 2
  %10508 = zext i1 %10507 to i8
  store i8 %10508, i8* %68, align 1
  %10509 = add i64 %10480, 14
  store i64 %10509, i64* %3, align 8
  store i32 %10486, i32* %10484, align 4
  %10510 = load i64, i64* %3, align 8
  %10511 = add i64 %10510, -226
  store i64 %10511, i64* %3, align 8
  br label %block_.L_46ff86

block_.L_47006d:                                  ; preds = %block_.L_46ff86
  %10512 = add i64 %9990, -84
  %10513 = add i64 %10033, 8
  store i64 %10513, i64* %3, align 8
  %10514 = inttoptr i64 %10512 to i32*
  %10515 = load i32, i32* %10514, align 4
  %10516 = add i32 %10515, 1
  %10517 = zext i32 %10516 to i64
  store i64 %10517, i64* %.pre243, align 8
  %10518 = icmp eq i32 %10515, -1
  %10519 = icmp eq i32 %10516, 0
  %10520 = or i1 %10518, %10519
  %10521 = zext i1 %10520 to i8
  store i8 %10521, i8* %44, align 1
  %10522 = and i32 %10516, 255
  %10523 = tail call i32 @llvm.ctpop.i32(i32 %10522)
  %10524 = trunc i32 %10523 to i8
  %10525 = and i8 %10524, 1
  %10526 = xor i8 %10525, 1
  store i8 %10526, i8* %51, align 1
  %10527 = xor i32 %10516, %10515
  %10528 = lshr i32 %10527, 4
  %10529 = trunc i32 %10528 to i8
  %10530 = and i8 %10529, 1
  store i8 %10530, i8* %56, align 1
  %10531 = zext i1 %10519 to i8
  store i8 %10531, i8* %59, align 1
  %10532 = lshr i32 %10516, 31
  %10533 = trunc i32 %10532 to i8
  store i8 %10533, i8* %62, align 1
  %10534 = lshr i32 %10515, 31
  %10535 = xor i32 %10532, %10534
  %10536 = add nuw nsw i32 %10535, %10532
  %10537 = icmp eq i32 %10536, 2
  %10538 = zext i1 %10537 to i8
  store i8 %10538, i8* %68, align 1
  %10539 = add i64 %10033, 14
  store i64 %10539, i64* %3, align 8
  store i32 %10516, i32* %10514, align 4
  %10540 = load i64, i64* %3, align 8
  %10541 = add i64 %10540, -269
  store i64 %10541, i64* %3, align 8
  br label %block_.L_46ff6e

block_.L_470080:                                  ; preds = %block_.L_46ff6e
  %10542 = add i64 %9985, 151
  store i64 %10542, i64* %3, align 8
  br label %block_.L_470117

block_.L_470085:                                  ; preds = %block_.L_46fce7
  store i64 ptrtoint (%G__0x6cbc30_type* @G__0x6cbc30 to i64), i64* %RDI.i2935, align 8
  %10543 = load i64, i64* %RBP.i, align 8
  %10544 = add i64 %10543, -78
  store i64 %10544, i64* %.pre243, align 8
  %10545 = add i64 %10543, -80
  store i64 %10545, i64* %RCX.i6189, align 8
  %DX.i2372 = bitcast %union.anon* %83 to i16*
  %10546 = add i64 %10543, -42
  %10547 = add i64 %9229, 22
  store i64 %10547, i64* %3, align 8
  %10548 = inttoptr i64 %10546 to i16*
  %10549 = load i16, i16* %10548, align 2
  store i16 %10549, i16* %DX.i2372, align 2
  %10550 = add i64 %10543, -48
  %10551 = add i64 %9229, 25
  store i64 %10551, i64* %3, align 8
  %10552 = inttoptr i64 %10550 to i32*
  %10553 = load i32, i32* %10552, align 4
  %10554 = zext i32 %10553 to i64
  store i64 %10554, i64* %RSI.i2931, align 8
  %10555 = add i64 %10543, -116
  %10556 = add i64 %9229, 29
  store i64 %10556, i64* %3, align 8
  %10557 = inttoptr i64 %10555 to i32*
  %10558 = load i32, i32* %10557, align 4
  %10559 = zext i32 %10558 to i64
  store i64 %10559, i64* %9139, align 8
  %10560 = add i64 %10543, -120
  %10561 = add i64 %9229, 33
  store i64 %10561, i64* %3, align 8
  %10562 = inttoptr i64 %10560 to i32*
  %10563 = load i32, i32* %10562, align 4
  %10564 = zext i32 %10563 to i64
  store i64 %10564, i64* %9145, align 8
  %10565 = add i64 %10543, -60
  %10566 = add i64 %9229, 37
  store i64 %10566, i64* %3, align 8
  %10567 = inttoptr i64 %10565 to i32*
  %10568 = load i32, i32* %10567, align 4
  %10569 = zext i32 %10568 to i64
  store i64 %10569, i64* %R10.i6168, align 8
  %R11W.i2357 = bitcast %union.anon* %192 to i16*
  %10570 = add i64 %10543, -74
  %10571 = add i64 %9229, 42
  store i64 %10571, i64* %3, align 8
  %10572 = inttoptr i64 %10570 to i16*
  %10573 = load i16, i16* %10572, align 2
  store i16 %10573, i16* %R11W.i2357, align 2
  %BX.i2354 = bitcast %union.anon* %34 to i16*
  %10574 = add i64 %10543, -76
  %10575 = add i64 %9229, 46
  store i64 %10575, i64* %3, align 8
  %10576 = inttoptr i64 %10574 to i16*
  %10577 = load i16, i16* %10576, align 2
  store i16 %10577, i16* %BX.i2354, align 2
  %R14D.i2351 = bitcast %union.anon* %16 to i32*
  %10578 = add i64 %10543, -64
  %10579 = add i64 %9229, 50
  store i64 %10579, i64* %3, align 8
  %10580 = inttoptr i64 %10578 to i32*
  %10581 = load i32, i32* %10580, align 4
  %10582 = zext i32 %10581 to i64
  store i64 %10582, i64* %R14.i2839, align 8
  %R15D.i2348 = bitcast %union.anon* %11 to i32*
  %10583 = add i64 %10543, -96
  %10584 = add i64 %9229, 54
  store i64 %10584, i64* %3, align 8
  %10585 = inttoptr i64 %10583 to i32*
  %10586 = load i32, i32* %10585, align 4
  %10587 = zext i32 %10586 to i64
  store i64 %10587, i64* %R15.i1647, align 8
  %10588 = add i64 %10543, -72
  %10589 = add i64 %9229, 59
  store i64 %10589, i64* %3, align 8
  %10590 = inttoptr i64 %10588 to i64*
  %10591 = load i64, i64* %10590, align 8
  store i64 %10591, i64* %117, align 1
  %10592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10593 = bitcast i64* %10592 to double*
  store double 0.000000e+00, double* %10593, align 1
  %R12D.i2343 = bitcast %union.anon* %28 to i32*
  %10594 = sext i16 %10549 to i64
  %10595 = and i64 %10594, 4294967295
  store i64 %10595, i64* %R12.i4237, align 8
  %10596 = add i64 %10543, -388
  %10597 = add i64 %9229, 69
  store i64 %10597, i64* %3, align 8
  %10598 = inttoptr i64 %10596 to i32*
  store i32 %10553, i32* %10598, align 4
  %10599 = load i32, i32* %R12D.i2343, align 4
  %10600 = zext i32 %10599 to i64
  %10601 = load i64, i64* %3, align 8
  store i64 %10600, i64* %RSI.i2931, align 8
  %10602 = load i64, i64* %RBP.i, align 8
  %10603 = add i64 %10602, -388
  %10604 = add i64 %10601, 9
  store i64 %10604, i64* %3, align 8
  %10605 = inttoptr i64 %10603 to i32*
  %10606 = load i32, i32* %10605, align 4
  %10607 = zext i32 %10606 to i64
  store i64 %10607, i64* %RDX.i5984, align 8
  %10608 = add i64 %10602, -400
  %10609 = load i64, i64* %RCX.i6189, align 8
  %10610 = add i64 %10601, 16
  store i64 %10610, i64* %3, align 8
  %10611 = inttoptr i64 %10608 to i64*
  store i64 %10609, i64* %10611, align 8
  %10612 = load i32, i32* %R8D.i5751, align 4
  %10613 = zext i32 %10612 to i64
  %10614 = load i64, i64* %3, align 8
  store i64 %10613, i64* %RCX.i6189, align 8
  %10615 = load i32, i32* %R9D.i6071, align 4
  %10616 = zext i32 %10615 to i64
  store i64 %10616, i64* %9139, align 8
  %10617 = load i32, i32* %R10D.i2913, align 4
  %10618 = zext i32 %10617 to i64
  store i64 %10618, i64* %9145, align 8
  %10619 = load i16, i16* %R11W.i2357, align 2
  %10620 = load i32*, i32** %9168, align 8
  %10621 = sext i16 %10619 to i32
  %10622 = add i64 %10614, 17
  store i64 %10622, i64* %3, align 8
  store i32 %10621, i32* %10620, align 4
  %10623 = load i16, i16* %BX.i2354, align 2
  %10624 = load i64, i64* %3, align 8
  %10625 = sext i16 %10623 to i64
  %10626 = and i64 %10625, 4294967295
  store i64 %10626, i64* %R10.i6168, align 8
  %10627 = load i64, i64* %6, align 8
  %10628 = add i64 %10627, 8
  %10629 = sext i16 %10623 to i32
  %10630 = add i64 %10624, 9
  store i64 %10630, i64* %3, align 8
  %10631 = inttoptr i64 %10628 to i32*
  store i32 %10629, i32* %10631, align 4
  %10632 = load i64, i64* %6, align 8
  %10633 = add i64 %10632, 16
  %10634 = load i64, i64* %.pre243, align 8
  %10635 = load i64, i64* %3, align 8
  %10636 = add i64 %10635, 5
  store i64 %10636, i64* %3, align 8
  %10637 = inttoptr i64 %10633 to i64*
  store i64 %10634, i64* %10637, align 8
  %10638 = load i64, i64* %RBP.i, align 8
  %10639 = add i64 %10638, -400
  %10640 = load i64, i64* %3, align 8
  %10641 = add i64 %10640, 7
  store i64 %10641, i64* %3, align 8
  %10642 = inttoptr i64 %10639 to i64*
  %10643 = load i64, i64* %10642, align 8
  store i64 %10643, i64* %.pre243, align 8
  %10644 = load i64, i64* %6, align 8
  %10645 = add i64 %10644, 24
  %10646 = add i64 %10640, 12
  store i64 %10646, i64* %3, align 8
  %10647 = inttoptr i64 %10645 to i64*
  store i64 %10643, i64* %10647, align 8
  %10648 = load i64, i64* %6, align 8
  %10649 = add i64 %10648, 32
  %10650 = load i32, i32* %R14D.i2351, align 4
  %10651 = load i64, i64* %3, align 8
  %10652 = add i64 %10651, 5
  store i64 %10652, i64* %3, align 8
  %10653 = inttoptr i64 %10649 to i32*
  store i32 %10650, i32* %10653, align 4
  %10654 = load i64, i64* %6, align 8
  %10655 = add i64 %10654, 40
  %10656 = load i32, i32* %R15D.i2348, align 4
  %10657 = load i64, i64* %3, align 8
  %10658 = add i64 %10657, 5
  store i64 %10658, i64* %3, align 8
  %10659 = inttoptr i64 %10655 to i32*
  store i32 %10656, i32* %10659, align 4
  %10660 = load i64, i64* %3, align 8
  %10661 = add i64 %10660, -70367
  %10662 = add i64 %10660, 5
  %10663 = load i64, i64* %6, align 8
  %10664 = add i64 %10663, -8
  %10665 = inttoptr i64 %10664 to i64*
  store i64 %10662, i64* %10665, align 8
  store i64 %10664, i64* %6, align 8
  store i64 %10661, i64* %3, align 8
  %call2_47010f = tail call %struct.Memory* @sub_45ee30.FastFullPelBlockMotionSearch(%struct.State* nonnull %0, i64 %10661, %struct.Memory* %call2_46fd30)
  %10666 = load i64, i64* %RBP.i, align 8
  %10667 = add i64 %10666, -96
  %10668 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %10669 = load i64, i64* %3, align 8
  %10670 = add i64 %10669, 3
  store i64 %10670, i64* %3, align 8
  %10671 = inttoptr i64 %10667 to i32*
  store i32 %10668, i32* %10671, align 4
  %.pre200 = load i64, i64* %3, align 8
  br label %block_.L_470117

block_.L_470117:                                  ; preds = %block_.L_470085, %block_.L_470080
  %10672 = phi i64 [ %.pre200, %block_.L_470085 ], [ %10542, %block_.L_470080 ]
  %MEMORY.48 = phi %struct.Memory* [ %call2_47010f, %block_.L_470085 ], [ %call2_46ff5f, %block_.L_470080 ]
  %10673 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %10673, i64* %.pre243, align 8
  %10674 = add i64 %10673, 24
  %10675 = add i64 %10672, 12
  store i64 %10675, i64* %3, align 8
  %10676 = inttoptr i64 %10674 to i32*
  %10677 = load i32, i32* %10676, align 4
  store i8 0, i8* %44, align 1
  %10678 = and i32 %10677, 255
  %10679 = tail call i32 @llvm.ctpop.i32(i32 %10678)
  %10680 = trunc i32 %10679 to i8
  %10681 = and i8 %10680, 1
  %10682 = xor i8 %10681, 1
  store i8 %10682, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %10683 = icmp eq i32 %10677, 0
  %10684 = zext i1 %10683 to i8
  store i8 %10684, i8* %59, align 1
  %10685 = lshr i32 %10677, 31
  %10686 = trunc i32 %10685 to i8
  store i8 %10686, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v272 = select i1 %10683, i64 42, i64 18
  %10687 = add i64 %10672, %.v272
  store i64 %10687, i64* %3, align 8
  br i1 %10683, label %block_.L_470141, label %block_470129

block_470129:                                     ; preds = %block_.L_470117
  store i64 %10673, i64* %.pre243, align 8
  %10688 = add i64 %10673, 28
  %10689 = add i64 %10687, 12
  store i64 %10689, i64* %3, align 8
  %10690 = inttoptr i64 %10688 to i32*
  %10691 = load i32, i32* %10690, align 4
  store i8 0, i8* %44, align 1
  %10692 = and i32 %10691, 255
  %10693 = tail call i32 @llvm.ctpop.i32(i32 %10692)
  %10694 = trunc i32 %10693 to i8
  %10695 = and i8 %10694, 1
  %10696 = xor i8 %10695, 1
  store i8 %10696, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %10697 = icmp eq i32 %10691, 0
  %10698 = zext i1 %10697 to i8
  store i8 %10698, i8* %59, align 1
  %10699 = lshr i32 %10691, 31
  %10700 = trunc i32 %10699 to i8
  store i8 %10700, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v273 = select i1 %10697, i64 18, i64 24
  %10701 = add i64 %10687, %.v273
  store i64 %10701, i64* %3, align 8
  br i1 %10697, label %block_47013b, label %block_.L_470141

block_47013b:                                     ; preds = %block_470129
  %10702 = load i64, i64* %RBP.i, align 8
  %10703 = add i64 %10702, -92
  %10704 = add i64 %10701, 3
  store i64 %10704, i64* %3, align 8
  %10705 = inttoptr i64 %10703 to i32*
  %10706 = load i32, i32* %10705, align 4
  %10707 = zext i32 %10706 to i64
  store i64 %10707, i64* %.pre243, align 8
  %10708 = add i64 %10702, -96
  %10709 = add i64 %10701, 6
  store i64 %10709, i64* %3, align 8
  %10710 = inttoptr i64 %10708 to i32*
  store i32 %10706, i32* %10710, align 4
  %.pre201 = load i64, i64* %3, align 8
  %.pre202 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  br label %block_.L_470141

block_.L_470141:                                  ; preds = %block_470129, %block_47013b, %block_.L_470117
  %10711 = phi i64 [ %.pre202, %block_47013b ], [ %10673, %block_470129 ], [ %10673, %block_.L_470117 ]
  %10712 = phi i64 [ %.pre201, %block_47013b ], [ %10701, %block_470129 ], [ %10687, %block_.L_470117 ]
  store i64 %10711, i64* %.pre243, align 8
  %10713 = add i64 %10711, 3292
  %10714 = add i64 %10712, 15
  store i64 %10714, i64* %3, align 8
  %10715 = inttoptr i64 %10713 to i32*
  %10716 = load i32, i32* %10715, align 4
  store i8 0, i8* %44, align 1
  %10717 = and i32 %10716, 255
  %10718 = tail call i32 @llvm.ctpop.i32(i32 %10717)
  %10719 = trunc i32 %10718 to i8
  %10720 = and i8 %10719, 1
  %10721 = xor i8 %10720, 1
  store i8 %10721, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %10722 = icmp eq i32 %10716, 0
  %10723 = zext i1 %10722 to i8
  store i8 %10723, i8* %59, align 1
  %10724 = lshr i32 %10716, 31
  %10725 = trunc i32 %10724 to i8
  store i8 %10725, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v274 = select i1 %10722, i64 835, i64 21
  %10726 = add i64 %10712, %.v274
  store i64 %10726, i64* %3, align 8
  br i1 %10722, label %block_.L_470484, label %block_470156

block_470156:                                     ; preds = %block_.L_470141
  %10727 = load i64, i64* %RBP.i, align 8
  %10728 = add i64 %10727, -60
  %10729 = add i64 %10726, 4
  store i64 %10729, i64* %3, align 8
  %10730 = inttoptr i64 %10728 to i32*
  %10731 = load i32, i32* %10730, align 4
  %10732 = add i32 %10731, -3
  %10733 = icmp ult i32 %10731, 3
  %10734 = zext i1 %10733 to i8
  store i8 %10734, i8* %44, align 1
  %10735 = and i32 %10732, 255
  %10736 = tail call i32 @llvm.ctpop.i32(i32 %10735)
  %10737 = trunc i32 %10736 to i8
  %10738 = and i8 %10737, 1
  %10739 = xor i8 %10738, 1
  store i8 %10739, i8* %51, align 1
  %10740 = xor i32 %10732, %10731
  %10741 = lshr i32 %10740, 4
  %10742 = trunc i32 %10741 to i8
  %10743 = and i8 %10742, 1
  store i8 %10743, i8* %56, align 1
  %10744 = icmp eq i32 %10732, 0
  %10745 = zext i1 %10744 to i8
  store i8 %10745, i8* %59, align 1
  %10746 = lshr i32 %10732, 31
  %10747 = trunc i32 %10746 to i8
  store i8 %10747, i8* %62, align 1
  %10748 = lshr i32 %10731, 31
  %10749 = xor i32 %10746, %10748
  %10750 = add nuw nsw i32 %10749, %10748
  %10751 = icmp eq i32 %10750, 2
  %10752 = zext i1 %10751 to i8
  store i8 %10752, i8* %68, align 1
  %10753 = icmp ne i8 %10747, 0
  %10754 = xor i1 %10753, %10751
  %10755 = or i1 %10744, %10754
  %.v275 = select i1 %10755, i64 188, i64 10
  %10756 = add i64 %10726, %.v275
  store i64 ptrtoint (%G__0x6cbc30_type* @G__0x6cbc30 to i64), i64* %RDI.i2935, align 8
  %10757 = add i64 %10727, -78
  store i64 %10757, i64* %.pre243, align 8
  %10758 = add i64 %10727, -80
  store i64 %10758, i64* %RCX.i6189, align 8
  %10759 = add i64 %10756, 23
  store i64 %10759, i64* %3, align 8
  store i64 9, i64* %RDX.i5984, align 8
  br i1 %10755, label %block_.L_470212, label %block_470160

block_470160:                                     ; preds = %block_470156
  store i64 0, i64* %RSI.i2931, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %R8W.i2251 = bitcast %union.anon* %97 to i16*
  %10760 = add i64 %10727, -42
  %10761 = add i64 %10756, 30
  store i64 %10761, i64* %3, align 8
  %10762 = inttoptr i64 %10760 to i16*
  %10763 = load i16, i16* %10762, align 2
  store i16 %10763, i16* %R8W.i2251, align 2
  %10764 = add i64 %10727, -48
  %10765 = add i64 %10756, 34
  store i64 %10765, i64* %3, align 8
  %10766 = inttoptr i64 %10764 to i32*
  %10767 = load i32, i32* %10766, align 4
  %10768 = zext i32 %10767 to i64
  store i64 %10768, i64* %9145, align 8
  %10769 = add i64 %10727, -116
  %10770 = add i64 %10756, 38
  store i64 %10770, i64* %3, align 8
  %10771 = inttoptr i64 %10769 to i32*
  %10772 = load i32, i32* %10771, align 4
  %10773 = zext i32 %10772 to i64
  store i64 %10773, i64* %R10.i6168, align 8
  %10774 = add i64 %10727, -120
  %10775 = add i64 %10756, 42
  store i64 %10775, i64* %3, align 8
  %10776 = inttoptr i64 %10774 to i32*
  %10777 = load i32, i32* %10776, align 4
  %10778 = zext i32 %10777 to i64
  store i64 %10778, i64* %R11.i6166, align 8
  %10779 = add i64 %10756, 45
  store i64 %10779, i64* %3, align 8
  %10780 = load i32, i32* %10730, align 4
  %10781 = zext i32 %10780 to i64
  store i64 %10781, i64* %RBX.i4440, align 8
  %10782 = add i64 %10727, -74
  %10783 = add i64 %10756, 50
  store i64 %10783, i64* %3, align 8
  %10784 = inttoptr i64 %10782 to i16*
  %10785 = load i16, i16* %10784, align 2
  store i16 %10785, i16* %R14W.i2888, align 2
  %R15W.i2233 = bitcast %union.anon* %11 to i16*
  %10786 = add i64 %10727, -76
  %10787 = add i64 %10756, 55
  store i64 %10787, i64* %3, align 8
  %10788 = inttoptr i64 %10786 to i16*
  %10789 = load i16, i16* %10788, align 2
  store i16 %10789, i16* %R15W.i2233, align 2
  %R12D.i2230 = bitcast %union.anon* %28 to i32*
  %10790 = add i64 %10727, -96
  %10791 = add i64 %10756, 59
  store i64 %10791, i64* %3, align 8
  %10792 = inttoptr i64 %10790 to i32*
  %10793 = load i32, i32* %10792, align 4
  %10794 = zext i32 %10793 to i64
  store i64 %10794, i64* %R12.i4237, align 8
  %10795 = add i64 %10727, -72
  %10796 = add i64 %10756, 64
  store i64 %10796, i64* %3, align 8
  %10797 = inttoptr i64 %10795 to i64*
  %10798 = load i64, i64* %10797, align 8
  store i64 %10798, i64* %117, align 1
  %10799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10800 = bitcast i64* %10799 to double*
  store double 0.000000e+00, double* %10800, align 1
  %R13D.i2225 = bitcast %union.anon* %22 to i32*
  %10801 = sext i16 %10763 to i64
  %10802 = and i64 %10801, 4294967295
  store i64 %10802, i64* %R13.i2854, align 8
  %10803 = add i64 %10727, -404
  %10804 = add i64 %10756, 74
  store i64 %10804, i64* %3, align 8
  %10805 = inttoptr i64 %10803 to i32*
  store i32 0, i32* %10805, align 4
  %10806 = load i32, i32* %R13D.i2225, align 4
  %10807 = zext i32 %10806 to i64
  %10808 = load i64, i64* %3, align 8
  store i64 %10807, i64* %RSI.i2931, align 8
  %10809 = load i64, i64* %RBP.i, align 8
  %10810 = add i64 %10809, -408
  %10811 = load i32, i32* %EDX.i5379, align 4
  %10812 = add i64 %10808, 9
  store i64 %10812, i64* %3, align 8
  %10813 = inttoptr i64 %10810 to i32*
  store i32 %10811, i32* %10813, align 4
  %10814 = load i32, i32* %R9D.i6071, align 4
  %10815 = zext i32 %10814 to i64
  %10816 = load i64, i64* %3, align 8
  store i64 %10815, i64* %RDX.i5984, align 8
  %10817 = load i64, i64* %RBP.i, align 8
  %10818 = add i64 %10817, -416
  %10819 = load i64, i64* %RCX.i6189, align 8
  %10820 = add i64 %10816, 10
  store i64 %10820, i64* %3, align 8
  %10821 = inttoptr i64 %10818 to i64*
  store i64 %10819, i64* %10821, align 8
  %10822 = load i32, i32* %R10D.i2913, align 4
  %10823 = zext i32 %10822 to i64
  %10824 = load i64, i64* %3, align 8
  store i64 %10823, i64* %RCX.i6189, align 8
  %10825 = load i32, i32* %R11D.i2910, align 4
  %10826 = zext i32 %10825 to i64
  store i64 %10826, i64* %9139, align 8
  %10827 = load i32, i32* %EBX.i2895, align 4
  %10828 = zext i32 %10827 to i64
  store i64 %10828, i64* %9145, align 8
  %10829 = load i16, i16* %R14W.i2888, align 2
  %10830 = load i32*, i32** %9168, align 8
  %10831 = sext i16 %10829 to i32
  %10832 = add i64 %10824, 17
  store i64 %10832, i64* %3, align 8
  store i32 %10831, i32* %10830, align 4
  %10833 = load i16, i16* %R15W.i2233, align 2
  %10834 = load i64, i64* %3, align 8
  %10835 = sext i16 %10833 to i64
  %10836 = and i64 %10835, 4294967295
  store i64 %10836, i64* %R10.i6168, align 8
  %10837 = load i64, i64* %6, align 8
  %10838 = add i64 %10837, 8
  %10839 = sext i16 %10833 to i32
  %10840 = add i64 %10834, 9
  store i64 %10840, i64* %3, align 8
  %10841 = inttoptr i64 %10838 to i32*
  store i32 %10839, i32* %10841, align 4
  %10842 = load i64, i64* %6, align 8
  %10843 = add i64 %10842, 16
  %10844 = load i64, i64* %.pre243, align 8
  %10845 = load i64, i64* %3, align 8
  %10846 = add i64 %10845, 5
  store i64 %10846, i64* %3, align 8
  %10847 = inttoptr i64 %10843 to i64*
  store i64 %10844, i64* %10847, align 8
  %10848 = load i64, i64* %RBP.i, align 8
  %10849 = add i64 %10848, -416
  %10850 = load i64, i64* %3, align 8
  %10851 = add i64 %10850, 7
  store i64 %10851, i64* %3, align 8
  %10852 = inttoptr i64 %10849 to i64*
  %10853 = load i64, i64* %10852, align 8
  store i64 %10853, i64* %.pre243, align 8
  %10854 = load i64, i64* %6, align 8
  %10855 = add i64 %10854, 24
  %10856 = add i64 %10850, 12
  store i64 %10856, i64* %3, align 8
  %10857 = inttoptr i64 %10855 to i64*
  store i64 %10853, i64* %10857, align 8
  %10858 = load i64, i64* %6, align 8
  %10859 = add i64 %10858, 32
  %10860 = load i64, i64* %3, align 8
  %10861 = add i64 %10860, 8
  store i64 %10861, i64* %3, align 8
  %10862 = inttoptr i64 %10859 to i32*
  store i32 9, i32* %10862, align 4
  %10863 = load i64, i64* %6, align 8
  %10864 = add i64 %10863, 40
  %10865 = load i64, i64* %3, align 8
  %10866 = add i64 %10865, 8
  store i64 %10866, i64* %3, align 8
  %10867 = inttoptr i64 %10864 to i32*
  store i32 9, i32* %10867, align 4
  %10868 = load i64, i64* %6, align 8
  %10869 = add i64 %10868, 48
  %10870 = load i32, i32* %R12D.i2230, align 4
  %10871 = load i64, i64* %3, align 8
  %10872 = add i64 %10871, 5
  store i64 %10872, i64* %3, align 8
  %10873 = inttoptr i64 %10869 to i32*
  store i32 %10870, i32* %10873, align 4
  %10874 = load i64, i64* %6, align 8
  %10875 = add i64 %10874, 56
  %10876 = load i64, i64* %3, align 8
  %10877 = add i64 %10876, 8
  store i64 %10877, i64* %3, align 8
  %10878 = inttoptr i64 %10875 to i32*
  store i32 0, i32* %10878, align 4
  %10879 = load i64, i64* %3, align 8
  %10880 = add i64 %10879, -312917
  %10881 = add i64 %10879, 5
  %10882 = load i64, i64* %6, align 8
  %10883 = add i64 %10882, -8
  %10884 = inttoptr i64 %10883 to i64*
  store i64 %10881, i64* %10884, align 8
  store i64 %10883, i64* %6, align 8
  store i64 %10880, i64* %3, align 8
  %call2_470205 = tail call %struct.Memory* @sub_423bb0.FastSubPelBlockMotionSearch(%struct.State* nonnull %0, i64 %10880, %struct.Memory* %MEMORY.48)
  %10885 = load i64, i64* %RBP.i, align 8
  %10886 = add i64 %10885, -96
  %10887 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %10888 = load i64, i64* %3, align 8
  %10889 = add i64 %10888, 3
  store i64 %10889, i64* %3, align 8
  %10890 = inttoptr i64 %10886 to i32*
  store i32 %10887, i32* %10890, align 4
  %10891 = load i64, i64* %3, align 8
  %10892 = add i64 %10891, 157
  store i64 %10892, i64* %3, align 8
  br label %block_.L_4702aa

block_.L_470212:                                  ; preds = %block_470156
  %10893 = add i64 %10727, -42
  %10894 = add i64 %10756, 27
  store i64 %10894, i64* %3, align 8
  %10895 = inttoptr i64 %10893 to i16*
  %10896 = load i16, i16* %10895, align 2
  store i16 %10896, i16* %SI.i5967, align 2
  %10897 = add i64 %10727, -48
  %10898 = add i64 %10756, 31
  store i64 %10898, i64* %3, align 8
  %10899 = inttoptr i64 %10897 to i32*
  %10900 = load i32, i32* %10899, align 4
  %10901 = zext i32 %10900 to i64
  store i64 %10901, i64* %9139, align 8
  %10902 = add i64 %10727, -116
  %10903 = add i64 %10756, 35
  store i64 %10903, i64* %3, align 8
  %10904 = inttoptr i64 %10902 to i32*
  %10905 = load i32, i32* %10904, align 4
  %10906 = zext i32 %10905 to i64
  store i64 %10906, i64* %9145, align 8
  %10907 = add i64 %10727, -120
  %10908 = add i64 %10756, 39
  store i64 %10908, i64* %3, align 8
  %10909 = inttoptr i64 %10907 to i32*
  %10910 = load i32, i32* %10909, align 4
  %10911 = zext i32 %10910 to i64
  store i64 %10911, i64* %R10.i6168, align 8
  %10912 = add i64 %10756, 43
  store i64 %10912, i64* %3, align 8
  %10913 = load i32, i32* %10730, align 4
  %10914 = zext i32 %10913 to i64
  store i64 %10914, i64* %R11.i6166, align 8
  %BX.i2138 = bitcast %union.anon* %34 to i16*
  %10915 = add i64 %10727, -74
  %10916 = add i64 %10756, 47
  store i64 %10916, i64* %3, align 8
  %10917 = inttoptr i64 %10915 to i16*
  %10918 = load i16, i16* %10917, align 2
  store i16 %10918, i16* %BX.i2138, align 2
  %10919 = add i64 %10727, -76
  %10920 = add i64 %10756, 52
  store i64 %10920, i64* %3, align 8
  %10921 = inttoptr i64 %10919 to i16*
  %10922 = load i16, i16* %10921, align 2
  store i16 %10922, i16* %R14W.i2888, align 2
  %R15D.i2132 = bitcast %union.anon* %11 to i32*
  %10923 = add i64 %10727, -96
  %10924 = add i64 %10756, 56
  store i64 %10924, i64* %3, align 8
  %10925 = inttoptr i64 %10923 to i32*
  %10926 = load i32, i32* %10925, align 4
  %10927 = zext i32 %10926 to i64
  store i64 %10927, i64* %R15.i1647, align 8
  %10928 = add i64 %10727, -72
  %10929 = add i64 %10756, 61
  store i64 %10929, i64* %3, align 8
  %10930 = inttoptr i64 %10928 to i64*
  %10931 = load i64, i64* %10930, align 8
  store i64 %10931, i64* %117, align 1
  %10932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10933 = bitcast i64* %10932 to double*
  store double 0.000000e+00, double* %10933, align 1
  %10934 = sext i16 %10896 to i64
  %10935 = and i64 %10934, 4294967295
  store i64 %10935, i64* %RSI.i2931, align 8
  %10936 = add i64 %10727, -420
  %10937 = add i64 %10756, 70
  store i64 %10937, i64* %3, align 8
  %10938 = inttoptr i64 %10936 to i32*
  store i32 9, i32* %10938, align 4
  %10939 = load i32, i32* %R8D.i5751, align 4
  %10940 = zext i32 %10939 to i64
  %10941 = load i64, i64* %3, align 8
  store i64 %10940, i64* %RDX.i5984, align 8
  %10942 = load i64, i64* %RBP.i, align 8
  %10943 = add i64 %10942, -432
  %10944 = load i64, i64* %RCX.i6189, align 8
  %10945 = add i64 %10941, 10
  store i64 %10945, i64* %3, align 8
  %10946 = inttoptr i64 %10943 to i64*
  store i64 %10944, i64* %10946, align 8
  %10947 = load i32, i32* %R9D.i6071, align 4
  %10948 = zext i32 %10947 to i64
  %10949 = load i64, i64* %3, align 8
  store i64 %10948, i64* %RCX.i6189, align 8
  %10950 = load i32, i32* %R10D.i2913, align 4
  %10951 = zext i32 %10950 to i64
  store i64 %10951, i64* %9139, align 8
  %10952 = load i32, i32* %R11D.i2910, align 4
  %10953 = zext i32 %10952 to i64
  store i64 %10953, i64* %9145, align 8
  %10954 = load i16, i16* %BX.i2138, align 2
  %10955 = load i32*, i32** %9168, align 8
  %10956 = sext i16 %10954 to i32
  %10957 = add i64 %10949, 17
  store i64 %10957, i64* %3, align 8
  store i32 %10956, i32* %10955, align 4
  %10958 = load i16, i16* %R14W.i2888, align 2
  %10959 = load i64, i64* %3, align 8
  %10960 = sext i16 %10958 to i64
  %10961 = and i64 %10960, 4294967295
  store i64 %10961, i64* %R10.i6168, align 8
  %10962 = load i64, i64* %6, align 8
  %10963 = add i64 %10962, 8
  %10964 = sext i16 %10958 to i32
  %10965 = add i64 %10959, 9
  store i64 %10965, i64* %3, align 8
  %10966 = inttoptr i64 %10963 to i32*
  store i32 %10964, i32* %10966, align 4
  %10967 = load i64, i64* %6, align 8
  %10968 = add i64 %10967, 16
  %10969 = load i64, i64* %.pre243, align 8
  %10970 = load i64, i64* %3, align 8
  %10971 = add i64 %10970, 5
  store i64 %10971, i64* %3, align 8
  %10972 = inttoptr i64 %10968 to i64*
  store i64 %10969, i64* %10972, align 8
  %10973 = load i64, i64* %RBP.i, align 8
  %10974 = add i64 %10973, -432
  %10975 = load i64, i64* %3, align 8
  %10976 = add i64 %10975, 7
  store i64 %10976, i64* %3, align 8
  %10977 = inttoptr i64 %10974 to i64*
  %10978 = load i64, i64* %10977, align 8
  store i64 %10978, i64* %.pre243, align 8
  %10979 = load i64, i64* %6, align 8
  %10980 = add i64 %10979, 24
  %10981 = add i64 %10975, 12
  store i64 %10981, i64* %3, align 8
  %10982 = inttoptr i64 %10980 to i64*
  store i64 %10978, i64* %10982, align 8
  %10983 = load i64, i64* %6, align 8
  %10984 = add i64 %10983, 32
  %10985 = load i64, i64* %3, align 8
  %10986 = add i64 %10985, 8
  store i64 %10986, i64* %3, align 8
  %10987 = inttoptr i64 %10984 to i32*
  store i32 9, i32* %10987, align 4
  %10988 = load i64, i64* %6, align 8
  %10989 = add i64 %10988, 40
  %10990 = load i64, i64* %3, align 8
  %10991 = add i64 %10990, 8
  store i64 %10991, i64* %3, align 8
  %10992 = inttoptr i64 %10989 to i32*
  store i32 9, i32* %10992, align 4
  %10993 = load i64, i64* %6, align 8
  %10994 = add i64 %10993, 48
  %10995 = load i32, i32* %R15D.i2132, align 4
  %10996 = load i64, i64* %3, align 8
  %10997 = add i64 %10996, 5
  store i64 %10997, i64* %3, align 8
  %10998 = inttoptr i64 %10994 to i32*
  store i32 %10995, i32* %10998, align 4
  %10999 = load i64, i64* %3, align 8
  %11000 = add i64 %10999, -65650
  %11001 = add i64 %10999, 5
  %11002 = load i64, i64* %6, align 8
  %11003 = add i64 %11002, -8
  %11004 = inttoptr i64 %11003 to i64*
  store i64 %11001, i64* %11004, align 8
  store i64 %11003, i64* %6, align 8
  store i64 %11000, i64* %3, align 8
  %call2_4702a2 = tail call %struct.Memory* @sub_460230.SubPelBlockMotionSearch(%struct.State* nonnull %0, i64 %11000, %struct.Memory* %MEMORY.48)
  %11005 = load i64, i64* %RBP.i, align 8
  %11006 = add i64 %11005, -96
  %11007 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %11008 = load i64, i64* %3, align 8
  %11009 = add i64 %11008, 3
  store i64 %11009, i64* %3, align 8
  %11010 = inttoptr i64 %11006 to i32*
  store i32 %11007, i32* %11010, align 4
  %.pre203 = load i64, i64* %3, align 8
  br label %block_.L_4702aa

block_.L_4702aa:                                  ; preds = %block_.L_470212, %block_470160
  %11011 = phi i64 [ %.pre203, %block_.L_470212 ], [ %10892, %block_470160 ]
  %MEMORY.50 = phi %struct.Memory* [ %call2_4702a2, %block_.L_470212 ], [ %call2_470205, %block_470160 ]
  %11012 = load i64, i64* %RBP.i, align 8
  %11013 = add i64 %11012, -84
  %11014 = add i64 %11011, 7
  store i64 %11014, i64* %3, align 8
  %11015 = inttoptr i64 %11013 to i32*
  store i32 0, i32* %11015, align 4
  %.pre204 = load i64, i64* %3, align 8
  br label %block_.L_4702b1

block_.L_4702b1:                                  ; preds = %block_.L_47046c, %block_.L_4702aa
  %11016 = phi i64 [ %12061, %block_.L_47046c ], [ %.pre204, %block_.L_4702aa ]
  %11017 = load i64, i64* %RBP.i, align 8
  %11018 = add i64 %11017, -84
  %11019 = add i64 %11016, 3
  store i64 %11019, i64* %3, align 8
  %11020 = inttoptr i64 %11018 to i32*
  %11021 = load i32, i32* %11020, align 4
  %11022 = zext i32 %11021 to i64
  store i64 %11022, i64* %.pre243, align 8
  %11023 = add i64 %11017, -108
  %11024 = add i64 %11016, 6
  store i64 %11024, i64* %3, align 8
  %11025 = inttoptr i64 %11023 to i32*
  %11026 = load i32, i32* %11025, align 4
  %11027 = sext i32 %11026 to i64
  %11028 = ashr i64 %11027, 1
  %11029 = lshr i64 %11028, 1
  %11030 = and i64 %11029, 4294967295
  store i64 %11030, i64* %RCX.i6189, align 8
  %11031 = trunc i64 %11029 to i32
  %11032 = sub i32 %11021, %11031
  %11033 = icmp ult i32 %11021, %11031
  %11034 = zext i1 %11033 to i8
  store i8 %11034, i8* %44, align 1
  %11035 = and i32 %11032, 255
  %11036 = tail call i32 @llvm.ctpop.i32(i32 %11035)
  %11037 = trunc i32 %11036 to i8
  %11038 = and i8 %11037, 1
  %11039 = xor i8 %11038, 1
  store i8 %11039, i8* %51, align 1
  %11040 = xor i32 %11031, %11021
  %11041 = xor i32 %11040, %11032
  %11042 = lshr i32 %11041, 4
  %11043 = trunc i32 %11042 to i8
  %11044 = and i8 %11043, 1
  store i8 %11044, i8* %56, align 1
  %11045 = icmp eq i32 %11032, 0
  %11046 = zext i1 %11045 to i8
  store i8 %11046, i8* %59, align 1
  %11047 = lshr i32 %11032, 31
  %11048 = trunc i32 %11047 to i8
  store i8 %11048, i8* %62, align 1
  %11049 = lshr i32 %11021, 31
  %11050 = lshr i64 %11028, 32
  %11051 = trunc i64 %11050 to i32
  %11052 = and i32 %11051, 1
  %11053 = xor i32 %11052, %11049
  %11054 = xor i32 %11047, %11049
  %11055 = add nuw nsw i32 %11054, %11053
  %11056 = icmp eq i32 %11055, 2
  %11057 = zext i1 %11056 to i8
  store i8 %11057, i8* %68, align 1
  %11058 = icmp ne i8 %11048, 0
  %11059 = xor i1 %11058, %11056
  %.v276 = select i1 %11059, i64 17, i64 462
  %11060 = add i64 %11016, %.v276
  store i64 %11060, i64* %3, align 8
  br i1 %11059, label %block_4702c2, label %block_.L_47047f

block_4702c2:                                     ; preds = %block_.L_4702b1
  %11061 = add i64 %11017, -88
  %11062 = add i64 %11060, 7
  store i64 %11062, i64* %3, align 8
  %11063 = inttoptr i64 %11061 to i32*
  store i32 0, i32* %11063, align 4
  %.pre205 = load i64, i64* %3, align 8
  br label %block_.L_4702c9

block_.L_4702c9:                                  ; preds = %block_.L_470459, %block_4702c2
  %11064 = phi i64 [ %12031, %block_.L_470459 ], [ %.pre205, %block_4702c2 ]
  %11065 = load i64, i64* %RBP.i, align 8
  %11066 = add i64 %11065, -88
  %11067 = add i64 %11064, 3
  store i64 %11067, i64* %3, align 8
  %11068 = inttoptr i64 %11066 to i32*
  %11069 = load i32, i32* %11068, align 4
  %11070 = zext i32 %11069 to i64
  store i64 %11070, i64* %.pre243, align 8
  %11071 = add i64 %11065, -112
  %11072 = add i64 %11064, 6
  store i64 %11072, i64* %3, align 8
  %11073 = inttoptr i64 %11071 to i32*
  %11074 = load i32, i32* %11073, align 4
  %11075 = sext i32 %11074 to i64
  %11076 = ashr i64 %11075, 1
  %11077 = lshr i64 %11076, 1
  %11078 = and i64 %11077, 4294967295
  store i64 %11078, i64* %RCX.i6189, align 8
  %11079 = trunc i64 %11077 to i32
  %11080 = sub i32 %11069, %11079
  %11081 = icmp ult i32 %11069, %11079
  %11082 = zext i1 %11081 to i8
  store i8 %11082, i8* %44, align 1
  %11083 = and i32 %11080, 255
  %11084 = tail call i32 @llvm.ctpop.i32(i32 %11083)
  %11085 = trunc i32 %11084 to i8
  %11086 = and i8 %11085, 1
  %11087 = xor i8 %11086, 1
  store i8 %11087, i8* %51, align 1
  %11088 = xor i32 %11079, %11069
  %11089 = xor i32 %11088, %11080
  %11090 = lshr i32 %11089, 4
  %11091 = trunc i32 %11090 to i8
  %11092 = and i8 %11091, 1
  store i8 %11092, i8* %56, align 1
  %11093 = icmp eq i32 %11080, 0
  %11094 = zext i1 %11093 to i8
  store i8 %11094, i8* %59, align 1
  %11095 = lshr i32 %11080, 31
  %11096 = trunc i32 %11095 to i8
  store i8 %11096, i8* %62, align 1
  %11097 = lshr i32 %11069, 31
  %11098 = lshr i64 %11076, 32
  %11099 = trunc i64 %11098 to i32
  %11100 = and i32 %11099, 1
  %11101 = xor i32 %11100, %11097
  %11102 = xor i32 %11095, %11097
  %11103 = add nuw nsw i32 %11102, %11101
  %11104 = icmp eq i32 %11103, 2
  %11105 = zext i1 %11104 to i8
  store i8 %11105, i8* %68, align 1
  %11106 = icmp ne i8 %11096, 0
  %11107 = xor i1 %11106, %11104
  %.v249 = select i1 %11107, i64 17, i64 419
  %11108 = add i64 %11064, %.v249
  store i64 %11108, i64* %3, align 8
  br i1 %11107, label %block_4702da, label %block_.L_47046c

block_4702da:                                     ; preds = %block_.L_4702c9
  %11109 = add i64 %11065, -48
  %11110 = add i64 %11108, 4
  store i64 %11110, i64* %3, align 8
  %11111 = inttoptr i64 %11109 to i32*
  %11112 = load i32, i32* %11111, align 4
  store i8 0, i8* %44, align 1
  %11113 = and i32 %11112, 255
  %11114 = tail call i32 @llvm.ctpop.i32(i32 %11113)
  %11115 = trunc i32 %11114 to i8
  %11116 = and i8 %11115, 1
  %11117 = xor i8 %11116, 1
  store i8 %11117, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11118 = icmp eq i32 %11112, 0
  %11119 = zext i1 %11118 to i8
  store i8 %11119, i8* %59, align 1
  %11120 = lshr i32 %11112, 31
  %11121 = trunc i32 %11120 to i8
  store i8 %11121, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v250 = select i1 %11118, i64 10, i64 199
  %11122 = add i64 %11108, %.v250
  %11123 = add i64 %11065, -78
  %11124 = add i64 %11122, 4
  store i64 %11124, i64* %3, align 8
  %11125 = inttoptr i64 %11123 to i16*
  %11126 = load i16, i16* %11125, align 2
  %11127 = sext i16 %11126 to i64
  %11128 = and i64 %11127, 4294967295
  store i64 %11128, i64* %.pre243, align 8
  %11129 = add i64 %11122, 12
  store i64 %11129, i64* %3, align 8
  br i1 %11118, label %block_4702e4, label %block_.L_4703a1

block_4702e4:                                     ; preds = %block_4702da
  %11130 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %11130, i64* %RCX.i6189, align 8
  %11131 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11131, i64* %RDX.i5984, align 8
  %11132 = add i64 %11131, 152
  %11133 = add i64 %11122, 26
  store i64 %11133, i64* %3, align 8
  %11134 = inttoptr i64 %11132 to i32*
  %11135 = load i32, i32* %11134, align 4
  %11136 = sext i32 %11135 to i64
  %11137 = ashr i64 %11136, 1
  %11138 = lshr i64 %11137, 1
  %11139 = trunc i64 %11137 to i8
  %11140 = and i8 %11139, 1
  %11141 = trunc i64 %11138 to i32
  %11142 = and i64 %11138, 4294967295
  store i64 %11142, i64* %RSI.i2931, align 8
  store i8 %11140, i8* %44, align 1
  %11143 = and i32 %11141, 255
  %11144 = tail call i32 @llvm.ctpop.i32(i32 %11143)
  %11145 = trunc i32 %11144 to i8
  %11146 = and i8 %11145, 1
  %11147 = xor i8 %11146, 1
  store i8 %11147, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11148 = icmp eq i32 %11141, 0
  %11149 = zext i1 %11148 to i8
  store i8 %11149, i8* %59, align 1
  %11150 = lshr i64 %11137, 32
  %11151 = trunc i64 %11150 to i8
  %11152 = and i8 %11151, 1
  store i8 %11152, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %11153 = add i64 %11065, -100
  %11154 = add i64 %11122, 32
  store i64 %11154, i64* %3, align 8
  %11155 = trunc i64 %11138 to i32
  %11156 = inttoptr i64 %11153 to i32*
  %11157 = load i32, i32* %11156, align 4
  %11158 = add i32 %11157, %11155
  %11159 = zext i32 %11158 to i64
  store i64 %11159, i64* %RSI.i2931, align 8
  %11160 = icmp ult i32 %11158, %11155
  %11161 = icmp ult i32 %11158, %11157
  %11162 = or i1 %11160, %11161
  %11163 = zext i1 %11162 to i8
  store i8 %11163, i8* %44, align 1
  %11164 = and i32 %11158, 255
  %11165 = tail call i32 @llvm.ctpop.i32(i32 %11164)
  %11166 = trunc i32 %11165 to i8
  %11167 = and i8 %11166, 1
  %11168 = xor i8 %11167, 1
  store i8 %11168, i8* %51, align 1
  %11169 = xor i32 %11157, %11155
  %11170 = xor i32 %11169, %11158
  %11171 = lshr i32 %11170, 4
  %11172 = trunc i32 %11171 to i8
  %11173 = and i8 %11172, 1
  store i8 %11173, i8* %56, align 1
  %11174 = icmp eq i32 %11158, 0
  %11175 = zext i1 %11174 to i8
  store i8 %11175, i8* %59, align 1
  %11176 = lshr i32 %11158, 31
  %11177 = trunc i32 %11176 to i8
  store i8 %11177, i8* %62, align 1
  %11178 = lshr i64 %11137, 32
  %11179 = trunc i64 %11178 to i32
  %11180 = and i32 %11179, 1
  %11181 = lshr i32 %11157, 31
  %11182 = xor i32 %11176, %11180
  %11183 = xor i32 %11176, %11181
  %11184 = add nuw nsw i32 %11182, %11183
  %11185 = icmp eq i32 %11184, 2
  %11186 = zext i1 %11185 to i8
  store i8 %11186, i8* %68, align 1
  %11187 = add i64 %11065, -84
  %11188 = add i64 %11122, 35
  store i64 %11188, i64* %3, align 8
  %11189 = inttoptr i64 %11187 to i32*
  %11190 = load i32, i32* %11189, align 4
  %11191 = add i32 %11190, %11158
  %11192 = zext i32 %11191 to i64
  store i64 %11192, i64* %RSI.i2931, align 8
  %11193 = icmp ult i32 %11191, %11158
  %11194 = icmp ult i32 %11191, %11190
  %11195 = or i1 %11193, %11194
  %11196 = zext i1 %11195 to i8
  store i8 %11196, i8* %44, align 1
  %11197 = and i32 %11191, 255
  %11198 = tail call i32 @llvm.ctpop.i32(i32 %11197)
  %11199 = trunc i32 %11198 to i8
  %11200 = and i8 %11199, 1
  %11201 = xor i8 %11200, 1
  store i8 %11201, i8* %51, align 1
  %11202 = xor i32 %11190, %11158
  %11203 = xor i32 %11202, %11191
  %11204 = lshr i32 %11203, 4
  %11205 = trunc i32 %11204 to i8
  %11206 = and i8 %11205, 1
  store i8 %11206, i8* %56, align 1
  %11207 = icmp eq i32 %11191, 0
  %11208 = zext i1 %11207 to i8
  store i8 %11208, i8* %59, align 1
  %11209 = lshr i32 %11191, 31
  %11210 = trunc i32 %11209 to i8
  store i8 %11210, i8* %62, align 1
  %11211 = lshr i32 %11190, 31
  %11212 = xor i32 %11209, %11176
  %11213 = xor i32 %11209, %11211
  %11214 = add nuw nsw i32 %11212, %11213
  %11215 = icmp eq i32 %11214, 2
  %11216 = zext i1 %11215 to i8
  store i8 %11216, i8* %68, align 1
  %11217 = sext i32 %11191 to i64
  store i64 %11217, i64* %RDX.i5984, align 8
  %11218 = load i64, i64* %RCX.i6189, align 8
  %11219 = shl nsw i64 %11217, 3
  %11220 = add i64 %11218, %11219
  %11221 = add i64 %11122, 42
  store i64 %11221, i64* %3, align 8
  %11222 = inttoptr i64 %11220 to i64*
  %11223 = load i64, i64* %11222, align 8
  store i64 %11223, i64* %RCX.i6189, align 8
  %11224 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11224, i64* %RDX.i5984, align 8
  %11225 = add i64 %11224, 156
  %11226 = add i64 %11122, 56
  store i64 %11226, i64* %3, align 8
  %11227 = inttoptr i64 %11225 to i32*
  %11228 = load i32, i32* %11227, align 4
  %11229 = sext i32 %11228 to i64
  %11230 = ashr i64 %11229, 1
  %11231 = lshr i64 %11230, 1
  %11232 = trunc i64 %11230 to i8
  %11233 = and i8 %11232, 1
  %11234 = trunc i64 %11231 to i32
  %11235 = and i64 %11231, 4294967295
  store i64 %11235, i64* %RSI.i2931, align 8
  store i8 %11233, i8* %44, align 1
  %11236 = and i32 %11234, 255
  %11237 = tail call i32 @llvm.ctpop.i32(i32 %11236)
  %11238 = trunc i32 %11237 to i8
  %11239 = and i8 %11238, 1
  %11240 = xor i8 %11239, 1
  store i8 %11240, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11241 = icmp eq i32 %11234, 0
  %11242 = zext i1 %11241 to i8
  store i8 %11242, i8* %59, align 1
  %11243 = lshr i64 %11230, 32
  %11244 = trunc i64 %11243 to i8
  %11245 = and i8 %11244, 1
  store i8 %11245, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %11246 = load i64, i64* %RBP.i, align 8
  %11247 = add i64 %11246, -104
  %11248 = add i64 %11122, 62
  store i64 %11248, i64* %3, align 8
  %11249 = trunc i64 %11231 to i32
  %11250 = inttoptr i64 %11247 to i32*
  %11251 = load i32, i32* %11250, align 4
  %11252 = add i32 %11251, %11249
  %11253 = zext i32 %11252 to i64
  store i64 %11253, i64* %RSI.i2931, align 8
  %11254 = icmp ult i32 %11252, %11249
  %11255 = icmp ult i32 %11252, %11251
  %11256 = or i1 %11254, %11255
  %11257 = zext i1 %11256 to i8
  store i8 %11257, i8* %44, align 1
  %11258 = and i32 %11252, 255
  %11259 = tail call i32 @llvm.ctpop.i32(i32 %11258)
  %11260 = trunc i32 %11259 to i8
  %11261 = and i8 %11260, 1
  %11262 = xor i8 %11261, 1
  store i8 %11262, i8* %51, align 1
  %11263 = xor i32 %11251, %11249
  %11264 = xor i32 %11263, %11252
  %11265 = lshr i32 %11264, 4
  %11266 = trunc i32 %11265 to i8
  %11267 = and i8 %11266, 1
  store i8 %11267, i8* %56, align 1
  %11268 = icmp eq i32 %11252, 0
  %11269 = zext i1 %11268 to i8
  store i8 %11269, i8* %59, align 1
  %11270 = lshr i32 %11252, 31
  %11271 = trunc i32 %11270 to i8
  store i8 %11271, i8* %62, align 1
  %11272 = lshr i64 %11230, 32
  %11273 = trunc i64 %11272 to i32
  %11274 = and i32 %11273, 1
  %11275 = lshr i32 %11251, 31
  %11276 = xor i32 %11270, %11274
  %11277 = xor i32 %11270, %11275
  %11278 = add nuw nsw i32 %11276, %11277
  %11279 = icmp eq i32 %11278, 2
  %11280 = zext i1 %11279 to i8
  store i8 %11280, i8* %68, align 1
  %11281 = add i64 %11246, -88
  %11282 = add i64 %11122, 65
  store i64 %11282, i64* %3, align 8
  %11283 = inttoptr i64 %11281 to i32*
  %11284 = load i32, i32* %11283, align 4
  %11285 = add i32 %11284, %11252
  %11286 = zext i32 %11285 to i64
  store i64 %11286, i64* %RSI.i2931, align 8
  %11287 = icmp ult i32 %11285, %11252
  %11288 = icmp ult i32 %11285, %11284
  %11289 = or i1 %11287, %11288
  %11290 = zext i1 %11289 to i8
  store i8 %11290, i8* %44, align 1
  %11291 = and i32 %11285, 255
  %11292 = tail call i32 @llvm.ctpop.i32(i32 %11291)
  %11293 = trunc i32 %11292 to i8
  %11294 = and i8 %11293, 1
  %11295 = xor i8 %11294, 1
  store i8 %11295, i8* %51, align 1
  %11296 = xor i32 %11284, %11252
  %11297 = xor i32 %11296, %11285
  %11298 = lshr i32 %11297, 4
  %11299 = trunc i32 %11298 to i8
  %11300 = and i8 %11299, 1
  store i8 %11300, i8* %56, align 1
  %11301 = icmp eq i32 %11285, 0
  %11302 = zext i1 %11301 to i8
  store i8 %11302, i8* %59, align 1
  %11303 = lshr i32 %11285, 31
  %11304 = trunc i32 %11303 to i8
  store i8 %11304, i8* %62, align 1
  %11305 = lshr i32 %11284, 31
  %11306 = xor i32 %11303, %11270
  %11307 = xor i32 %11303, %11305
  %11308 = add nuw nsw i32 %11306, %11307
  %11309 = icmp eq i32 %11308, 2
  %11310 = zext i1 %11309 to i8
  store i8 %11310, i8* %68, align 1
  %11311 = sext i32 %11285 to i64
  store i64 %11311, i64* %RDX.i5984, align 8
  %11312 = load i64, i64* %RCX.i6189, align 8
  %11313 = shl nsw i64 %11311, 3
  %11314 = add i64 %11312, %11313
  %11315 = add i64 %11122, 72
  store i64 %11315, i64* %3, align 8
  %11316 = inttoptr i64 %11314 to i64*
  %11317 = load i64, i64* %11316, align 8
  store i64 %11317, i64* %RCX.i6189, align 8
  %11318 = add i64 %11246, -42
  %11319 = add i64 %11122, 77
  store i64 %11319, i64* %3, align 8
  %11320 = inttoptr i64 %11318 to i16*
  %11321 = load i16, i16* %11320, align 2
  %11322 = sext i16 %11321 to i64
  store i64 %11322, i64* %RDX.i5984, align 8
  %11323 = shl nsw i64 %11322, 3
  %11324 = add i64 %11323, %11317
  %11325 = add i64 %11122, 81
  store i64 %11325, i64* %3, align 8
  %11326 = inttoptr i64 %11324 to i64*
  %11327 = load i64, i64* %11326, align 8
  store i64 %11327, i64* %RCX.i6189, align 8
  %11328 = load i64, i64* %RBP.i, align 8
  %11329 = add i64 %11328, -60
  %11330 = add i64 %11122, 85
  store i64 %11330, i64* %3, align 8
  %11331 = inttoptr i64 %11329 to i32*
  %11332 = load i32, i32* %11331, align 4
  %11333 = sext i32 %11332 to i64
  store i64 %11333, i64* %RDX.i5984, align 8
  %11334 = shl nsw i64 %11333, 3
  %11335 = add i64 %11334, %11327
  %11336 = add i64 %11122, 89
  store i64 %11336, i64* %3, align 8
  %11337 = inttoptr i64 %11335 to i64*
  %11338 = load i64, i64* %11337, align 8
  store i64 %11338, i64* %RCX.i6189, align 8
  %11339 = add i64 %11338, 4
  %11340 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %11341 = add i64 %11122, 92
  store i64 %11341, i64* %3, align 8
  %11342 = inttoptr i64 %11339 to i32*
  store i32 %11340, i32* %11342, align 4
  %11343 = load i64, i64* %RBP.i, align 8
  %11344 = add i64 %11343, -80
  %11345 = load i64, i64* %3, align 8
  %11346 = add i64 %11345, 4
  store i64 %11346, i64* %3, align 8
  %11347 = inttoptr i64 %11344 to i16*
  %11348 = load i16, i16* %11347, align 2
  %11349 = sext i16 %11348 to i64
  %11350 = and i64 %11349, 4294967295
  store i64 %11350, i64* %.pre243, align 8
  %11351 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %11351, i64* %RCX.i6189, align 8
  %11352 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11352, i64* %RDX.i5984, align 8
  %11353 = add i64 %11352, 152
  %11354 = add i64 %11345, 26
  store i64 %11354, i64* %3, align 8
  %11355 = inttoptr i64 %11353 to i32*
  %11356 = load i32, i32* %11355, align 4
  %11357 = sext i32 %11356 to i64
  %11358 = ashr i64 %11357, 1
  %11359 = lshr i64 %11358, 1
  %11360 = trunc i64 %11358 to i8
  %11361 = and i8 %11360, 1
  %11362 = trunc i64 %11359 to i32
  %11363 = and i64 %11359, 4294967295
  store i64 %11363, i64* %RSI.i2931, align 8
  store i8 %11361, i8* %44, align 1
  %11364 = and i32 %11362, 255
  %11365 = tail call i32 @llvm.ctpop.i32(i32 %11364)
  %11366 = trunc i32 %11365 to i8
  %11367 = and i8 %11366, 1
  %11368 = xor i8 %11367, 1
  store i8 %11368, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11369 = icmp eq i32 %11362, 0
  %11370 = zext i1 %11369 to i8
  store i8 %11370, i8* %59, align 1
  %11371 = lshr i64 %11358, 32
  %11372 = trunc i64 %11371 to i8
  %11373 = and i8 %11372, 1
  store i8 %11373, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %11374 = add i64 %11343, -100
  %11375 = add i64 %11345, 32
  store i64 %11375, i64* %3, align 8
  %11376 = trunc i64 %11359 to i32
  %11377 = inttoptr i64 %11374 to i32*
  %11378 = load i32, i32* %11377, align 4
  %11379 = add i32 %11378, %11376
  %11380 = zext i32 %11379 to i64
  store i64 %11380, i64* %RSI.i2931, align 8
  %11381 = icmp ult i32 %11379, %11376
  %11382 = icmp ult i32 %11379, %11378
  %11383 = or i1 %11381, %11382
  %11384 = zext i1 %11383 to i8
  store i8 %11384, i8* %44, align 1
  %11385 = and i32 %11379, 255
  %11386 = tail call i32 @llvm.ctpop.i32(i32 %11385)
  %11387 = trunc i32 %11386 to i8
  %11388 = and i8 %11387, 1
  %11389 = xor i8 %11388, 1
  store i8 %11389, i8* %51, align 1
  %11390 = xor i32 %11378, %11376
  %11391 = xor i32 %11390, %11379
  %11392 = lshr i32 %11391, 4
  %11393 = trunc i32 %11392 to i8
  %11394 = and i8 %11393, 1
  store i8 %11394, i8* %56, align 1
  %11395 = icmp eq i32 %11379, 0
  %11396 = zext i1 %11395 to i8
  store i8 %11396, i8* %59, align 1
  %11397 = lshr i32 %11379, 31
  %11398 = trunc i32 %11397 to i8
  store i8 %11398, i8* %62, align 1
  %11399 = lshr i64 %11358, 32
  %11400 = trunc i64 %11399 to i32
  %11401 = and i32 %11400, 1
  %11402 = lshr i32 %11378, 31
  %11403 = xor i32 %11397, %11401
  %11404 = xor i32 %11397, %11402
  %11405 = add nuw nsw i32 %11403, %11404
  %11406 = icmp eq i32 %11405, 2
  %11407 = zext i1 %11406 to i8
  store i8 %11407, i8* %68, align 1
  %11408 = add i64 %11343, -84
  %11409 = add i64 %11345, 35
  store i64 %11409, i64* %3, align 8
  %11410 = inttoptr i64 %11408 to i32*
  %11411 = load i32, i32* %11410, align 4
  %11412 = add i32 %11411, %11379
  %11413 = zext i32 %11412 to i64
  store i64 %11413, i64* %RSI.i2931, align 8
  %11414 = icmp ult i32 %11412, %11379
  %11415 = icmp ult i32 %11412, %11411
  %11416 = or i1 %11414, %11415
  %11417 = zext i1 %11416 to i8
  store i8 %11417, i8* %44, align 1
  %11418 = and i32 %11412, 255
  %11419 = tail call i32 @llvm.ctpop.i32(i32 %11418)
  %11420 = trunc i32 %11419 to i8
  %11421 = and i8 %11420, 1
  %11422 = xor i8 %11421, 1
  store i8 %11422, i8* %51, align 1
  %11423 = xor i32 %11411, %11379
  %11424 = xor i32 %11423, %11412
  %11425 = lshr i32 %11424, 4
  %11426 = trunc i32 %11425 to i8
  %11427 = and i8 %11426, 1
  store i8 %11427, i8* %56, align 1
  %11428 = icmp eq i32 %11412, 0
  %11429 = zext i1 %11428 to i8
  store i8 %11429, i8* %59, align 1
  %11430 = lshr i32 %11412, 31
  %11431 = trunc i32 %11430 to i8
  store i8 %11431, i8* %62, align 1
  %11432 = lshr i32 %11411, 31
  %11433 = xor i32 %11430, %11397
  %11434 = xor i32 %11430, %11432
  %11435 = add nuw nsw i32 %11433, %11434
  %11436 = icmp eq i32 %11435, 2
  %11437 = zext i1 %11436 to i8
  store i8 %11437, i8* %68, align 1
  %11438 = sext i32 %11412 to i64
  store i64 %11438, i64* %RDX.i5984, align 8
  %11439 = load i64, i64* %RCX.i6189, align 8
  %11440 = shl nsw i64 %11438, 3
  %11441 = add i64 %11439, %11440
  %11442 = add i64 %11345, 42
  store i64 %11442, i64* %3, align 8
  %11443 = inttoptr i64 %11441 to i64*
  %11444 = load i64, i64* %11443, align 8
  store i64 %11444, i64* %RCX.i6189, align 8
  %11445 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11445, i64* %RDX.i5984, align 8
  %11446 = add i64 %11445, 156
  %11447 = add i64 %11345, 56
  store i64 %11447, i64* %3, align 8
  %11448 = inttoptr i64 %11446 to i32*
  %11449 = load i32, i32* %11448, align 4
  %11450 = sext i32 %11449 to i64
  %11451 = ashr i64 %11450, 1
  %11452 = lshr i64 %11451, 1
  %11453 = trunc i64 %11451 to i8
  %11454 = and i8 %11453, 1
  %11455 = trunc i64 %11452 to i32
  %11456 = and i64 %11452, 4294967295
  store i64 %11456, i64* %RSI.i2931, align 8
  store i8 %11454, i8* %44, align 1
  %11457 = and i32 %11455, 255
  %11458 = tail call i32 @llvm.ctpop.i32(i32 %11457)
  %11459 = trunc i32 %11458 to i8
  %11460 = and i8 %11459, 1
  %11461 = xor i8 %11460, 1
  store i8 %11461, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11462 = icmp eq i32 %11455, 0
  %11463 = zext i1 %11462 to i8
  store i8 %11463, i8* %59, align 1
  %11464 = lshr i64 %11451, 32
  %11465 = trunc i64 %11464 to i8
  %11466 = and i8 %11465, 1
  store i8 %11466, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %11467 = load i64, i64* %RBP.i, align 8
  %11468 = add i64 %11467, -104
  %11469 = add i64 %11345, 62
  store i64 %11469, i64* %3, align 8
  %11470 = trunc i64 %11452 to i32
  %11471 = inttoptr i64 %11468 to i32*
  %11472 = load i32, i32* %11471, align 4
  %11473 = add i32 %11472, %11470
  %11474 = zext i32 %11473 to i64
  store i64 %11474, i64* %RSI.i2931, align 8
  %11475 = icmp ult i32 %11473, %11470
  %11476 = icmp ult i32 %11473, %11472
  %11477 = or i1 %11475, %11476
  %11478 = zext i1 %11477 to i8
  store i8 %11478, i8* %44, align 1
  %11479 = and i32 %11473, 255
  %11480 = tail call i32 @llvm.ctpop.i32(i32 %11479)
  %11481 = trunc i32 %11480 to i8
  %11482 = and i8 %11481, 1
  %11483 = xor i8 %11482, 1
  store i8 %11483, i8* %51, align 1
  %11484 = xor i32 %11472, %11470
  %11485 = xor i32 %11484, %11473
  %11486 = lshr i32 %11485, 4
  %11487 = trunc i32 %11486 to i8
  %11488 = and i8 %11487, 1
  store i8 %11488, i8* %56, align 1
  %11489 = icmp eq i32 %11473, 0
  %11490 = zext i1 %11489 to i8
  store i8 %11490, i8* %59, align 1
  %11491 = lshr i32 %11473, 31
  %11492 = trunc i32 %11491 to i8
  store i8 %11492, i8* %62, align 1
  %11493 = lshr i64 %11451, 32
  %11494 = trunc i64 %11493 to i32
  %11495 = and i32 %11494, 1
  %11496 = lshr i32 %11472, 31
  %11497 = xor i32 %11491, %11495
  %11498 = xor i32 %11491, %11496
  %11499 = add nuw nsw i32 %11497, %11498
  %11500 = icmp eq i32 %11499, 2
  %11501 = zext i1 %11500 to i8
  store i8 %11501, i8* %68, align 1
  %11502 = add i64 %11467, -88
  %11503 = add i64 %11345, 65
  store i64 %11503, i64* %3, align 8
  %11504 = inttoptr i64 %11502 to i32*
  %11505 = load i32, i32* %11504, align 4
  %11506 = add i32 %11505, %11473
  %11507 = zext i32 %11506 to i64
  store i64 %11507, i64* %RSI.i2931, align 8
  %11508 = icmp ult i32 %11506, %11473
  %11509 = icmp ult i32 %11506, %11505
  %11510 = or i1 %11508, %11509
  %11511 = zext i1 %11510 to i8
  store i8 %11511, i8* %44, align 1
  %11512 = and i32 %11506, 255
  %11513 = tail call i32 @llvm.ctpop.i32(i32 %11512)
  %11514 = trunc i32 %11513 to i8
  %11515 = and i8 %11514, 1
  %11516 = xor i8 %11515, 1
  store i8 %11516, i8* %51, align 1
  %11517 = xor i32 %11505, %11473
  %11518 = xor i32 %11517, %11506
  %11519 = lshr i32 %11518, 4
  %11520 = trunc i32 %11519 to i8
  %11521 = and i8 %11520, 1
  store i8 %11521, i8* %56, align 1
  %11522 = icmp eq i32 %11506, 0
  %11523 = zext i1 %11522 to i8
  store i8 %11523, i8* %59, align 1
  %11524 = lshr i32 %11506, 31
  %11525 = trunc i32 %11524 to i8
  store i8 %11525, i8* %62, align 1
  %11526 = lshr i32 %11505, 31
  %11527 = xor i32 %11524, %11491
  %11528 = xor i32 %11524, %11526
  %11529 = add nuw nsw i32 %11527, %11528
  %11530 = icmp eq i32 %11529, 2
  %11531 = zext i1 %11530 to i8
  store i8 %11531, i8* %68, align 1
  %11532 = sext i32 %11506 to i64
  store i64 %11532, i64* %RDX.i5984, align 8
  %11533 = load i64, i64* %RCX.i6189, align 8
  %11534 = shl nsw i64 %11532, 3
  %11535 = add i64 %11533, %11534
  %11536 = add i64 %11345, 72
  store i64 %11536, i64* %3, align 8
  %11537 = inttoptr i64 %11535 to i64*
  %11538 = load i64, i64* %11537, align 8
  store i64 %11538, i64* %RCX.i6189, align 8
  %11539 = add i64 %11467, -42
  %11540 = add i64 %11345, 77
  store i64 %11540, i64* %3, align 8
  %11541 = inttoptr i64 %11539 to i16*
  %11542 = load i16, i16* %11541, align 2
  %11543 = sext i16 %11542 to i64
  store i64 %11543, i64* %RDX.i5984, align 8
  %11544 = shl nsw i64 %11543, 3
  %11545 = add i64 %11544, %11538
  %11546 = add i64 %11345, 81
  store i64 %11546, i64* %3, align 8
  %11547 = inttoptr i64 %11545 to i64*
  %11548 = load i64, i64* %11547, align 8
  store i64 %11548, i64* %RCX.i6189, align 8
  %11549 = load i64, i64* %RBP.i, align 8
  %11550 = add i64 %11549, -60
  %11551 = add i64 %11345, 85
  store i64 %11551, i64* %3, align 8
  %11552 = inttoptr i64 %11550 to i32*
  %11553 = load i32, i32* %11552, align 4
  %11554 = sext i32 %11553 to i64
  store i64 %11554, i64* %RDX.i5984, align 8
  %11555 = shl nsw i64 %11554, 3
  %11556 = add i64 %11555, %11548
  %11557 = add i64 %11345, 89
  store i64 %11557, i64* %3, align 8
  %11558 = inttoptr i64 %11556 to i64*
  %11559 = load i64, i64* %11558, align 8
  store i64 %11559, i64* %RCX.i6189, align 8
  %11560 = add i64 %11559, 8
  %11561 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %11562 = add i64 %11345, 92
  store i64 %11562, i64* %3, align 8
  %11563 = inttoptr i64 %11560 to i32*
  store i32 %11561, i32* %11563, align 4
  %11564 = load i64, i64* %3, align 8
  %11565 = add i64 %11564, 189
  store i64 %11565, i64* %3, align 8
  br label %block_.L_470459

block_.L_4703a1:                                  ; preds = %block_4702da
  %11566 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %11566, i64* %RCX.i6189, align 8
  %11567 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11567, i64* %RDX.i5984, align 8
  %11568 = add i64 %11567, 152
  %11569 = add i64 %11122, 26
  store i64 %11569, i64* %3, align 8
  %11570 = inttoptr i64 %11568 to i32*
  %11571 = load i32, i32* %11570, align 4
  %11572 = sext i32 %11571 to i64
  %11573 = ashr i64 %11572, 1
  %11574 = lshr i64 %11573, 1
  %11575 = trunc i64 %11573 to i8
  %11576 = and i8 %11575, 1
  %11577 = trunc i64 %11574 to i32
  %11578 = and i64 %11574, 4294967295
  store i64 %11578, i64* %RSI.i2931, align 8
  store i8 %11576, i8* %44, align 1
  %11579 = and i32 %11577, 255
  %11580 = tail call i32 @llvm.ctpop.i32(i32 %11579)
  %11581 = trunc i32 %11580 to i8
  %11582 = and i8 %11581, 1
  %11583 = xor i8 %11582, 1
  store i8 %11583, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11584 = icmp eq i32 %11577, 0
  %11585 = zext i1 %11584 to i8
  store i8 %11585, i8* %59, align 1
  %11586 = lshr i64 %11573, 32
  %11587 = trunc i64 %11586 to i8
  %11588 = and i8 %11587, 1
  store i8 %11588, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %11589 = add i64 %11065, -100
  %11590 = add i64 %11122, 32
  store i64 %11590, i64* %3, align 8
  %11591 = trunc i64 %11574 to i32
  %11592 = inttoptr i64 %11589 to i32*
  %11593 = load i32, i32* %11592, align 4
  %11594 = add i32 %11593, %11591
  %11595 = zext i32 %11594 to i64
  store i64 %11595, i64* %RSI.i2931, align 8
  %11596 = icmp ult i32 %11594, %11591
  %11597 = icmp ult i32 %11594, %11593
  %11598 = or i1 %11596, %11597
  %11599 = zext i1 %11598 to i8
  store i8 %11599, i8* %44, align 1
  %11600 = and i32 %11594, 255
  %11601 = tail call i32 @llvm.ctpop.i32(i32 %11600)
  %11602 = trunc i32 %11601 to i8
  %11603 = and i8 %11602, 1
  %11604 = xor i8 %11603, 1
  store i8 %11604, i8* %51, align 1
  %11605 = xor i32 %11593, %11591
  %11606 = xor i32 %11605, %11594
  %11607 = lshr i32 %11606, 4
  %11608 = trunc i32 %11607 to i8
  %11609 = and i8 %11608, 1
  store i8 %11609, i8* %56, align 1
  %11610 = icmp eq i32 %11594, 0
  %11611 = zext i1 %11610 to i8
  store i8 %11611, i8* %59, align 1
  %11612 = lshr i32 %11594, 31
  %11613 = trunc i32 %11612 to i8
  store i8 %11613, i8* %62, align 1
  %11614 = lshr i64 %11573, 32
  %11615 = trunc i64 %11614 to i32
  %11616 = and i32 %11615, 1
  %11617 = lshr i32 %11593, 31
  %11618 = xor i32 %11612, %11616
  %11619 = xor i32 %11612, %11617
  %11620 = add nuw nsw i32 %11618, %11619
  %11621 = icmp eq i32 %11620, 2
  %11622 = zext i1 %11621 to i8
  store i8 %11622, i8* %68, align 1
  %11623 = add i64 %11065, -84
  %11624 = add i64 %11122, 35
  store i64 %11624, i64* %3, align 8
  %11625 = inttoptr i64 %11623 to i32*
  %11626 = load i32, i32* %11625, align 4
  %11627 = add i32 %11626, %11594
  %11628 = zext i32 %11627 to i64
  store i64 %11628, i64* %RSI.i2931, align 8
  %11629 = icmp ult i32 %11627, %11594
  %11630 = icmp ult i32 %11627, %11626
  %11631 = or i1 %11629, %11630
  %11632 = zext i1 %11631 to i8
  store i8 %11632, i8* %44, align 1
  %11633 = and i32 %11627, 255
  %11634 = tail call i32 @llvm.ctpop.i32(i32 %11633)
  %11635 = trunc i32 %11634 to i8
  %11636 = and i8 %11635, 1
  %11637 = xor i8 %11636, 1
  store i8 %11637, i8* %51, align 1
  %11638 = xor i32 %11626, %11594
  %11639 = xor i32 %11638, %11627
  %11640 = lshr i32 %11639, 4
  %11641 = trunc i32 %11640 to i8
  %11642 = and i8 %11641, 1
  store i8 %11642, i8* %56, align 1
  %11643 = icmp eq i32 %11627, 0
  %11644 = zext i1 %11643 to i8
  store i8 %11644, i8* %59, align 1
  %11645 = lshr i32 %11627, 31
  %11646 = trunc i32 %11645 to i8
  store i8 %11646, i8* %62, align 1
  %11647 = lshr i32 %11626, 31
  %11648 = xor i32 %11645, %11612
  %11649 = xor i32 %11645, %11647
  %11650 = add nuw nsw i32 %11648, %11649
  %11651 = icmp eq i32 %11650, 2
  %11652 = zext i1 %11651 to i8
  store i8 %11652, i8* %68, align 1
  %11653 = sext i32 %11627 to i64
  store i64 %11653, i64* %RDX.i5984, align 8
  %11654 = load i64, i64* %RCX.i6189, align 8
  %11655 = shl nsw i64 %11653, 3
  %11656 = add i64 %11654, %11655
  %11657 = add i64 %11122, 42
  store i64 %11657, i64* %3, align 8
  %11658 = inttoptr i64 %11656 to i64*
  %11659 = load i64, i64* %11658, align 8
  store i64 %11659, i64* %RCX.i6189, align 8
  %11660 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11660, i64* %RDX.i5984, align 8
  %11661 = add i64 %11660, 156
  %11662 = add i64 %11122, 56
  store i64 %11662, i64* %3, align 8
  %11663 = inttoptr i64 %11661 to i32*
  %11664 = load i32, i32* %11663, align 4
  %11665 = sext i32 %11664 to i64
  %11666 = ashr i64 %11665, 1
  %11667 = lshr i64 %11666, 1
  %11668 = trunc i64 %11666 to i8
  %11669 = and i8 %11668, 1
  %11670 = trunc i64 %11667 to i32
  %11671 = and i64 %11667, 4294967295
  store i64 %11671, i64* %RSI.i2931, align 8
  store i8 %11669, i8* %44, align 1
  %11672 = and i32 %11670, 255
  %11673 = tail call i32 @llvm.ctpop.i32(i32 %11672)
  %11674 = trunc i32 %11673 to i8
  %11675 = and i8 %11674, 1
  %11676 = xor i8 %11675, 1
  store i8 %11676, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11677 = icmp eq i32 %11670, 0
  %11678 = zext i1 %11677 to i8
  store i8 %11678, i8* %59, align 1
  %11679 = lshr i64 %11666, 32
  %11680 = trunc i64 %11679 to i8
  %11681 = and i8 %11680, 1
  store i8 %11681, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %11682 = load i64, i64* %RBP.i, align 8
  %11683 = add i64 %11682, -104
  %11684 = add i64 %11122, 62
  store i64 %11684, i64* %3, align 8
  %11685 = trunc i64 %11667 to i32
  %11686 = inttoptr i64 %11683 to i32*
  %11687 = load i32, i32* %11686, align 4
  %11688 = add i32 %11687, %11685
  %11689 = zext i32 %11688 to i64
  store i64 %11689, i64* %RSI.i2931, align 8
  %11690 = icmp ult i32 %11688, %11685
  %11691 = icmp ult i32 %11688, %11687
  %11692 = or i1 %11690, %11691
  %11693 = zext i1 %11692 to i8
  store i8 %11693, i8* %44, align 1
  %11694 = and i32 %11688, 255
  %11695 = tail call i32 @llvm.ctpop.i32(i32 %11694)
  %11696 = trunc i32 %11695 to i8
  %11697 = and i8 %11696, 1
  %11698 = xor i8 %11697, 1
  store i8 %11698, i8* %51, align 1
  %11699 = xor i32 %11687, %11685
  %11700 = xor i32 %11699, %11688
  %11701 = lshr i32 %11700, 4
  %11702 = trunc i32 %11701 to i8
  %11703 = and i8 %11702, 1
  store i8 %11703, i8* %56, align 1
  %11704 = icmp eq i32 %11688, 0
  %11705 = zext i1 %11704 to i8
  store i8 %11705, i8* %59, align 1
  %11706 = lshr i32 %11688, 31
  %11707 = trunc i32 %11706 to i8
  store i8 %11707, i8* %62, align 1
  %11708 = lshr i64 %11666, 32
  %11709 = trunc i64 %11708 to i32
  %11710 = and i32 %11709, 1
  %11711 = lshr i32 %11687, 31
  %11712 = xor i32 %11706, %11710
  %11713 = xor i32 %11706, %11711
  %11714 = add nuw nsw i32 %11712, %11713
  %11715 = icmp eq i32 %11714, 2
  %11716 = zext i1 %11715 to i8
  store i8 %11716, i8* %68, align 1
  %11717 = add i64 %11682, -88
  %11718 = add i64 %11122, 65
  store i64 %11718, i64* %3, align 8
  %11719 = inttoptr i64 %11717 to i32*
  %11720 = load i32, i32* %11719, align 4
  %11721 = add i32 %11720, %11688
  %11722 = zext i32 %11721 to i64
  store i64 %11722, i64* %RSI.i2931, align 8
  %11723 = icmp ult i32 %11721, %11688
  %11724 = icmp ult i32 %11721, %11720
  %11725 = or i1 %11723, %11724
  %11726 = zext i1 %11725 to i8
  store i8 %11726, i8* %44, align 1
  %11727 = and i32 %11721, 255
  %11728 = tail call i32 @llvm.ctpop.i32(i32 %11727)
  %11729 = trunc i32 %11728 to i8
  %11730 = and i8 %11729, 1
  %11731 = xor i8 %11730, 1
  store i8 %11731, i8* %51, align 1
  %11732 = xor i32 %11720, %11688
  %11733 = xor i32 %11732, %11721
  %11734 = lshr i32 %11733, 4
  %11735 = trunc i32 %11734 to i8
  %11736 = and i8 %11735, 1
  store i8 %11736, i8* %56, align 1
  %11737 = icmp eq i32 %11721, 0
  %11738 = zext i1 %11737 to i8
  store i8 %11738, i8* %59, align 1
  %11739 = lshr i32 %11721, 31
  %11740 = trunc i32 %11739 to i8
  store i8 %11740, i8* %62, align 1
  %11741 = lshr i32 %11720, 31
  %11742 = xor i32 %11739, %11706
  %11743 = xor i32 %11739, %11741
  %11744 = add nuw nsw i32 %11742, %11743
  %11745 = icmp eq i32 %11744, 2
  %11746 = zext i1 %11745 to i8
  store i8 %11746, i8* %68, align 1
  %11747 = sext i32 %11721 to i64
  store i64 %11747, i64* %RDX.i5984, align 8
  %11748 = load i64, i64* %RCX.i6189, align 8
  %11749 = shl nsw i64 %11747, 3
  %11750 = add i64 %11748, %11749
  %11751 = add i64 %11122, 72
  store i64 %11751, i64* %3, align 8
  %11752 = inttoptr i64 %11750 to i64*
  %11753 = load i64, i64* %11752, align 8
  store i64 %11753, i64* %RCX.i6189, align 8
  %11754 = add i64 %11682, -42
  %11755 = add i64 %11122, 77
  store i64 %11755, i64* %3, align 8
  %11756 = inttoptr i64 %11754 to i16*
  %11757 = load i16, i16* %11756, align 2
  %11758 = sext i16 %11757 to i64
  store i64 %11758, i64* %RDX.i5984, align 8
  %11759 = shl nsw i64 %11758, 3
  %11760 = add i64 %11759, %11753
  %11761 = add i64 %11122, 81
  store i64 %11761, i64* %3, align 8
  %11762 = inttoptr i64 %11760 to i64*
  %11763 = load i64, i64* %11762, align 8
  store i64 %11763, i64* %RCX.i6189, align 8
  %11764 = load i64, i64* %RBP.i, align 8
  %11765 = add i64 %11764, -60
  %11766 = add i64 %11122, 85
  store i64 %11766, i64* %3, align 8
  %11767 = inttoptr i64 %11765 to i32*
  %11768 = load i32, i32* %11767, align 4
  %11769 = sext i32 %11768 to i64
  store i64 %11769, i64* %RDX.i5984, align 8
  %11770 = shl nsw i64 %11769, 3
  %11771 = add i64 %11770, %11763
  %11772 = add i64 %11122, 89
  store i64 %11772, i64* %3, align 8
  %11773 = inttoptr i64 %11771 to i64*
  %11774 = load i64, i64* %11773, align 8
  store i64 %11774, i64* %RCX.i6189, align 8
  %11775 = add i64 %11774, 4
  %11776 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %11777 = add i64 %11122, 92
  store i64 %11777, i64* %3, align 8
  %11778 = inttoptr i64 %11775 to i32*
  store i32 %11776, i32* %11778, align 4
  %11779 = load i64, i64* %RBP.i, align 8
  %11780 = add i64 %11779, -80
  %11781 = load i64, i64* %3, align 8
  %11782 = add i64 %11781, 4
  store i64 %11782, i64* %3, align 8
  %11783 = inttoptr i64 %11780 to i16*
  %11784 = load i16, i16* %11783, align 2
  %11785 = sext i16 %11784 to i64
  %11786 = and i64 %11785, 4294967295
  store i64 %11786, i64* %.pre243, align 8
  %11787 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %11787, i64* %RCX.i6189, align 8
  %11788 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11788, i64* %RDX.i5984, align 8
  %11789 = add i64 %11788, 152
  %11790 = add i64 %11781, 26
  store i64 %11790, i64* %3, align 8
  %11791 = inttoptr i64 %11789 to i32*
  %11792 = load i32, i32* %11791, align 4
  %11793 = sext i32 %11792 to i64
  %11794 = ashr i64 %11793, 1
  %11795 = lshr i64 %11794, 1
  %11796 = trunc i64 %11794 to i8
  %11797 = and i8 %11796, 1
  %11798 = trunc i64 %11795 to i32
  %11799 = and i64 %11795, 4294967295
  store i64 %11799, i64* %RSI.i2931, align 8
  store i8 %11797, i8* %44, align 1
  %11800 = and i32 %11798, 255
  %11801 = tail call i32 @llvm.ctpop.i32(i32 %11800)
  %11802 = trunc i32 %11801 to i8
  %11803 = and i8 %11802, 1
  %11804 = xor i8 %11803, 1
  store i8 %11804, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11805 = icmp eq i32 %11798, 0
  %11806 = zext i1 %11805 to i8
  store i8 %11806, i8* %59, align 1
  %11807 = lshr i64 %11794, 32
  %11808 = trunc i64 %11807 to i8
  %11809 = and i8 %11808, 1
  store i8 %11809, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %11810 = add i64 %11779, -100
  %11811 = add i64 %11781, 32
  store i64 %11811, i64* %3, align 8
  %11812 = trunc i64 %11795 to i32
  %11813 = inttoptr i64 %11810 to i32*
  %11814 = load i32, i32* %11813, align 4
  %11815 = add i32 %11814, %11812
  %11816 = zext i32 %11815 to i64
  store i64 %11816, i64* %RSI.i2931, align 8
  %11817 = icmp ult i32 %11815, %11812
  %11818 = icmp ult i32 %11815, %11814
  %11819 = or i1 %11817, %11818
  %11820 = zext i1 %11819 to i8
  store i8 %11820, i8* %44, align 1
  %11821 = and i32 %11815, 255
  %11822 = tail call i32 @llvm.ctpop.i32(i32 %11821)
  %11823 = trunc i32 %11822 to i8
  %11824 = and i8 %11823, 1
  %11825 = xor i8 %11824, 1
  store i8 %11825, i8* %51, align 1
  %11826 = xor i32 %11814, %11812
  %11827 = xor i32 %11826, %11815
  %11828 = lshr i32 %11827, 4
  %11829 = trunc i32 %11828 to i8
  %11830 = and i8 %11829, 1
  store i8 %11830, i8* %56, align 1
  %11831 = icmp eq i32 %11815, 0
  %11832 = zext i1 %11831 to i8
  store i8 %11832, i8* %59, align 1
  %11833 = lshr i32 %11815, 31
  %11834 = trunc i32 %11833 to i8
  store i8 %11834, i8* %62, align 1
  %11835 = lshr i64 %11794, 32
  %11836 = trunc i64 %11835 to i32
  %11837 = and i32 %11836, 1
  %11838 = lshr i32 %11814, 31
  %11839 = xor i32 %11833, %11837
  %11840 = xor i32 %11833, %11838
  %11841 = add nuw nsw i32 %11839, %11840
  %11842 = icmp eq i32 %11841, 2
  %11843 = zext i1 %11842 to i8
  store i8 %11843, i8* %68, align 1
  %11844 = add i64 %11779, -84
  %11845 = add i64 %11781, 35
  store i64 %11845, i64* %3, align 8
  %11846 = inttoptr i64 %11844 to i32*
  %11847 = load i32, i32* %11846, align 4
  %11848 = add i32 %11847, %11815
  %11849 = zext i32 %11848 to i64
  store i64 %11849, i64* %RSI.i2931, align 8
  %11850 = icmp ult i32 %11848, %11815
  %11851 = icmp ult i32 %11848, %11847
  %11852 = or i1 %11850, %11851
  %11853 = zext i1 %11852 to i8
  store i8 %11853, i8* %44, align 1
  %11854 = and i32 %11848, 255
  %11855 = tail call i32 @llvm.ctpop.i32(i32 %11854)
  %11856 = trunc i32 %11855 to i8
  %11857 = and i8 %11856, 1
  %11858 = xor i8 %11857, 1
  store i8 %11858, i8* %51, align 1
  %11859 = xor i32 %11847, %11815
  %11860 = xor i32 %11859, %11848
  %11861 = lshr i32 %11860, 4
  %11862 = trunc i32 %11861 to i8
  %11863 = and i8 %11862, 1
  store i8 %11863, i8* %56, align 1
  %11864 = icmp eq i32 %11848, 0
  %11865 = zext i1 %11864 to i8
  store i8 %11865, i8* %59, align 1
  %11866 = lshr i32 %11848, 31
  %11867 = trunc i32 %11866 to i8
  store i8 %11867, i8* %62, align 1
  %11868 = lshr i32 %11847, 31
  %11869 = xor i32 %11866, %11833
  %11870 = xor i32 %11866, %11868
  %11871 = add nuw nsw i32 %11869, %11870
  %11872 = icmp eq i32 %11871, 2
  %11873 = zext i1 %11872 to i8
  store i8 %11873, i8* %68, align 1
  %11874 = sext i32 %11848 to i64
  store i64 %11874, i64* %RDX.i5984, align 8
  %11875 = load i64, i64* %RCX.i6189, align 8
  %11876 = shl nsw i64 %11874, 3
  %11877 = add i64 %11875, %11876
  %11878 = add i64 %11781, 42
  store i64 %11878, i64* %3, align 8
  %11879 = inttoptr i64 %11877 to i64*
  %11880 = load i64, i64* %11879, align 8
  store i64 %11880, i64* %RCX.i6189, align 8
  %11881 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %11881, i64* %RDX.i5984, align 8
  %11882 = add i64 %11881, 156
  %11883 = add i64 %11781, 56
  store i64 %11883, i64* %3, align 8
  %11884 = inttoptr i64 %11882 to i32*
  %11885 = load i32, i32* %11884, align 4
  %11886 = sext i32 %11885 to i64
  %11887 = ashr i64 %11886, 1
  %11888 = lshr i64 %11887, 1
  %11889 = trunc i64 %11887 to i8
  %11890 = and i8 %11889, 1
  %11891 = trunc i64 %11888 to i32
  %11892 = and i64 %11888, 4294967295
  store i64 %11892, i64* %RSI.i2931, align 8
  store i8 %11890, i8* %44, align 1
  %11893 = and i32 %11891, 255
  %11894 = tail call i32 @llvm.ctpop.i32(i32 %11893)
  %11895 = trunc i32 %11894 to i8
  %11896 = and i8 %11895, 1
  %11897 = xor i8 %11896, 1
  store i8 %11897, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %11898 = icmp eq i32 %11891, 0
  %11899 = zext i1 %11898 to i8
  store i8 %11899, i8* %59, align 1
  %11900 = lshr i64 %11887, 32
  %11901 = trunc i64 %11900 to i8
  %11902 = and i8 %11901, 1
  store i8 %11902, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %11903 = load i64, i64* %RBP.i, align 8
  %11904 = add i64 %11903, -104
  %11905 = add i64 %11781, 62
  store i64 %11905, i64* %3, align 8
  %11906 = trunc i64 %11888 to i32
  %11907 = inttoptr i64 %11904 to i32*
  %11908 = load i32, i32* %11907, align 4
  %11909 = add i32 %11908, %11906
  %11910 = zext i32 %11909 to i64
  store i64 %11910, i64* %RSI.i2931, align 8
  %11911 = icmp ult i32 %11909, %11906
  %11912 = icmp ult i32 %11909, %11908
  %11913 = or i1 %11911, %11912
  %11914 = zext i1 %11913 to i8
  store i8 %11914, i8* %44, align 1
  %11915 = and i32 %11909, 255
  %11916 = tail call i32 @llvm.ctpop.i32(i32 %11915)
  %11917 = trunc i32 %11916 to i8
  %11918 = and i8 %11917, 1
  %11919 = xor i8 %11918, 1
  store i8 %11919, i8* %51, align 1
  %11920 = xor i32 %11908, %11906
  %11921 = xor i32 %11920, %11909
  %11922 = lshr i32 %11921, 4
  %11923 = trunc i32 %11922 to i8
  %11924 = and i8 %11923, 1
  store i8 %11924, i8* %56, align 1
  %11925 = icmp eq i32 %11909, 0
  %11926 = zext i1 %11925 to i8
  store i8 %11926, i8* %59, align 1
  %11927 = lshr i32 %11909, 31
  %11928 = trunc i32 %11927 to i8
  store i8 %11928, i8* %62, align 1
  %11929 = lshr i64 %11887, 32
  %11930 = trunc i64 %11929 to i32
  %11931 = and i32 %11930, 1
  %11932 = lshr i32 %11908, 31
  %11933 = xor i32 %11927, %11931
  %11934 = xor i32 %11927, %11932
  %11935 = add nuw nsw i32 %11933, %11934
  %11936 = icmp eq i32 %11935, 2
  %11937 = zext i1 %11936 to i8
  store i8 %11937, i8* %68, align 1
  %11938 = add i64 %11903, -88
  %11939 = add i64 %11781, 65
  store i64 %11939, i64* %3, align 8
  %11940 = inttoptr i64 %11938 to i32*
  %11941 = load i32, i32* %11940, align 4
  %11942 = add i32 %11941, %11909
  %11943 = zext i32 %11942 to i64
  store i64 %11943, i64* %RSI.i2931, align 8
  %11944 = icmp ult i32 %11942, %11909
  %11945 = icmp ult i32 %11942, %11941
  %11946 = or i1 %11944, %11945
  %11947 = zext i1 %11946 to i8
  store i8 %11947, i8* %44, align 1
  %11948 = and i32 %11942, 255
  %11949 = tail call i32 @llvm.ctpop.i32(i32 %11948)
  %11950 = trunc i32 %11949 to i8
  %11951 = and i8 %11950, 1
  %11952 = xor i8 %11951, 1
  store i8 %11952, i8* %51, align 1
  %11953 = xor i32 %11941, %11909
  %11954 = xor i32 %11953, %11942
  %11955 = lshr i32 %11954, 4
  %11956 = trunc i32 %11955 to i8
  %11957 = and i8 %11956, 1
  store i8 %11957, i8* %56, align 1
  %11958 = icmp eq i32 %11942, 0
  %11959 = zext i1 %11958 to i8
  store i8 %11959, i8* %59, align 1
  %11960 = lshr i32 %11942, 31
  %11961 = trunc i32 %11960 to i8
  store i8 %11961, i8* %62, align 1
  %11962 = lshr i32 %11941, 31
  %11963 = xor i32 %11960, %11927
  %11964 = xor i32 %11960, %11962
  %11965 = add nuw nsw i32 %11963, %11964
  %11966 = icmp eq i32 %11965, 2
  %11967 = zext i1 %11966 to i8
  store i8 %11967, i8* %68, align 1
  %11968 = sext i32 %11942 to i64
  store i64 %11968, i64* %RDX.i5984, align 8
  %11969 = load i64, i64* %RCX.i6189, align 8
  %11970 = shl nsw i64 %11968, 3
  %11971 = add i64 %11969, %11970
  %11972 = add i64 %11781, 72
  store i64 %11972, i64* %3, align 8
  %11973 = inttoptr i64 %11971 to i64*
  %11974 = load i64, i64* %11973, align 8
  store i64 %11974, i64* %RCX.i6189, align 8
  %11975 = add i64 %11903, -42
  %11976 = add i64 %11781, 77
  store i64 %11976, i64* %3, align 8
  %11977 = inttoptr i64 %11975 to i16*
  %11978 = load i16, i16* %11977, align 2
  %11979 = sext i16 %11978 to i64
  store i64 %11979, i64* %RDX.i5984, align 8
  %11980 = shl nsw i64 %11979, 3
  %11981 = add i64 %11980, %11974
  %11982 = add i64 %11781, 81
  store i64 %11982, i64* %3, align 8
  %11983 = inttoptr i64 %11981 to i64*
  %11984 = load i64, i64* %11983, align 8
  store i64 %11984, i64* %RCX.i6189, align 8
  %11985 = load i64, i64* %RBP.i, align 8
  %11986 = add i64 %11985, -60
  %11987 = add i64 %11781, 85
  store i64 %11987, i64* %3, align 8
  %11988 = inttoptr i64 %11986 to i32*
  %11989 = load i32, i32* %11988, align 4
  %11990 = sext i32 %11989 to i64
  store i64 %11990, i64* %RDX.i5984, align 8
  %11991 = shl nsw i64 %11990, 3
  %11992 = add i64 %11991, %11984
  %11993 = add i64 %11781, 89
  store i64 %11993, i64* %3, align 8
  %11994 = inttoptr i64 %11992 to i64*
  %11995 = load i64, i64* %11994, align 8
  store i64 %11995, i64* %RCX.i6189, align 8
  %11996 = add i64 %11995, 8
  %11997 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %11998 = add i64 %11781, 92
  store i64 %11998, i64* %3, align 8
  %11999 = inttoptr i64 %11996 to i32*
  store i32 %11997, i32* %11999, align 4
  %.pre206 = load i64, i64* %3, align 8
  br label %block_.L_470459

block_.L_470459:                                  ; preds = %block_.L_4703a1, %block_4702e4
  %12000 = phi i64 [ %.pre206, %block_.L_4703a1 ], [ %11565, %block_4702e4 ]
  %12001 = load i64, i64* %RBP.i, align 8
  %12002 = add i64 %12001, -88
  %12003 = add i64 %12000, 8
  store i64 %12003, i64* %3, align 8
  %12004 = inttoptr i64 %12002 to i32*
  %12005 = load i32, i32* %12004, align 4
  %12006 = add i32 %12005, 1
  %12007 = zext i32 %12006 to i64
  store i64 %12007, i64* %.pre243, align 8
  %12008 = icmp eq i32 %12005, -1
  %12009 = icmp eq i32 %12006, 0
  %12010 = or i1 %12008, %12009
  %12011 = zext i1 %12010 to i8
  store i8 %12011, i8* %44, align 1
  %12012 = and i32 %12006, 255
  %12013 = tail call i32 @llvm.ctpop.i32(i32 %12012)
  %12014 = trunc i32 %12013 to i8
  %12015 = and i8 %12014, 1
  %12016 = xor i8 %12015, 1
  store i8 %12016, i8* %51, align 1
  %12017 = xor i32 %12006, %12005
  %12018 = lshr i32 %12017, 4
  %12019 = trunc i32 %12018 to i8
  %12020 = and i8 %12019, 1
  store i8 %12020, i8* %56, align 1
  %12021 = zext i1 %12009 to i8
  store i8 %12021, i8* %59, align 1
  %12022 = lshr i32 %12006, 31
  %12023 = trunc i32 %12022 to i8
  store i8 %12023, i8* %62, align 1
  %12024 = lshr i32 %12005, 31
  %12025 = xor i32 %12022, %12024
  %12026 = add nuw nsw i32 %12025, %12022
  %12027 = icmp eq i32 %12026, 2
  %12028 = zext i1 %12027 to i8
  store i8 %12028, i8* %68, align 1
  %12029 = add i64 %12000, 14
  store i64 %12029, i64* %3, align 8
  store i32 %12006, i32* %12004, align 4
  %12030 = load i64, i64* %3, align 8
  %12031 = add i64 %12030, -414
  store i64 %12031, i64* %3, align 8
  br label %block_.L_4702c9

block_.L_47046c:                                  ; preds = %block_.L_4702c9
  %12032 = add i64 %11065, -84
  %12033 = add i64 %11108, 8
  store i64 %12033, i64* %3, align 8
  %12034 = inttoptr i64 %12032 to i32*
  %12035 = load i32, i32* %12034, align 4
  %12036 = add i32 %12035, 1
  %12037 = zext i32 %12036 to i64
  store i64 %12037, i64* %.pre243, align 8
  %12038 = icmp eq i32 %12035, -1
  %12039 = icmp eq i32 %12036, 0
  %12040 = or i1 %12038, %12039
  %12041 = zext i1 %12040 to i8
  store i8 %12041, i8* %44, align 1
  %12042 = and i32 %12036, 255
  %12043 = tail call i32 @llvm.ctpop.i32(i32 %12042)
  %12044 = trunc i32 %12043 to i8
  %12045 = and i8 %12044, 1
  %12046 = xor i8 %12045, 1
  store i8 %12046, i8* %51, align 1
  %12047 = xor i32 %12036, %12035
  %12048 = lshr i32 %12047, 4
  %12049 = trunc i32 %12048 to i8
  %12050 = and i8 %12049, 1
  store i8 %12050, i8* %56, align 1
  %12051 = zext i1 %12039 to i8
  store i8 %12051, i8* %59, align 1
  %12052 = lshr i32 %12036, 31
  %12053 = trunc i32 %12052 to i8
  store i8 %12053, i8* %62, align 1
  %12054 = lshr i32 %12035, 31
  %12055 = xor i32 %12052, %12054
  %12056 = add nuw nsw i32 %12055, %12052
  %12057 = icmp eq i32 %12056, 2
  %12058 = zext i1 %12057 to i8
  store i8 %12058, i8* %68, align 1
  %12059 = add i64 %11108, 14
  store i64 %12059, i64* %3, align 8
  store i32 %12036, i32* %12034, align 4
  %12060 = load i64, i64* %3, align 8
  %12061 = add i64 %12060, -457
  store i64 %12061, i64* %3, align 8
  br label %block_.L_4702b1

block_.L_47047f:                                  ; preds = %block_.L_4702b1
  %12062 = add i64 %11060, 199
  store i64 %12062, i64* %3, align 8
  br label %block_.L_470546

block_.L_470484:                                  ; preds = %block_.L_470141
  store i64 %10711, i64* %.pre243, align 8
  %12063 = add i64 %10711, 24
  %12064 = add i64 %10726, 12
  store i64 %12064, i64* %3, align 8
  %12065 = inttoptr i64 %12063 to i32*
  %12066 = load i32, i32* %12065, align 4
  store i8 0, i8* %44, align 1
  %12067 = and i32 %12066, 255
  %12068 = tail call i32 @llvm.ctpop.i32(i32 %12067)
  %12069 = trunc i32 %12068 to i8
  %12070 = and i8 %12069, 1
  %12071 = xor i8 %12070, 1
  store i8 %12071, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %12072 = icmp eq i32 %12066, 0
  %12073 = zext i1 %12072 to i8
  store i8 %12073, i8* %59, align 1
  %12074 = lshr i32 %12066, 31
  %12075 = trunc i32 %12074 to i8
  store i8 %12075, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v298 = select i1 %12072, i64 42, i64 18
  %12076 = add i64 %10726, %.v298
  store i64 %12076, i64* %3, align 8
  br i1 %12072, label %block_.L_4704ae, label %block_470496

block_470496:                                     ; preds = %block_.L_470484
  store i64 %10711, i64* %.pre243, align 8
  %12077 = add i64 %10711, 28
  %12078 = add i64 %12076, 12
  store i64 %12078, i64* %3, align 8
  %12079 = inttoptr i64 %12077 to i32*
  %12080 = load i32, i32* %12079, align 4
  store i8 0, i8* %44, align 1
  %12081 = and i32 %12080, 255
  %12082 = tail call i32 @llvm.ctpop.i32(i32 %12081)
  %12083 = trunc i32 %12082 to i8
  %12084 = and i8 %12083, 1
  %12085 = xor i8 %12084, 1
  store i8 %12085, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %12086 = icmp eq i32 %12080, 0
  %12087 = zext i1 %12086 to i8
  store i8 %12087, i8* %59, align 1
  %12088 = lshr i32 %12080, 31
  %12089 = trunc i32 %12088 to i8
  store i8 %12089, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v299 = select i1 %12086, i64 18, i64 24
  %12090 = add i64 %12076, %.v299
  store i64 %12090, i64* %3, align 8
  br i1 %12086, label %block_4704a8, label %block_.L_4704ae

block_4704a8:                                     ; preds = %block_470496
  %12091 = load i64, i64* %RBP.i, align 8
  %12092 = add i64 %12091, -92
  %12093 = add i64 %12090, 3
  store i64 %12093, i64* %3, align 8
  %12094 = inttoptr i64 %12092 to i32*
  %12095 = load i32, i32* %12094, align 4
  %12096 = zext i32 %12095 to i64
  store i64 %12096, i64* %.pre243, align 8
  %12097 = add i64 %12091, -96
  %12098 = add i64 %12090, 6
  store i64 %12098, i64* %3, align 8
  %12099 = inttoptr i64 %12097 to i32*
  store i32 %12095, i32* %12099, align 4
  %.pre207 = load i64, i64* %3, align 8
  br label %block_.L_4704ae

block_.L_4704ae:                                  ; preds = %block_470496, %block_4704a8, %block_.L_470484
  %12100 = phi i64 [ %.pre207, %block_4704a8 ], [ %12090, %block_470496 ], [ %12076, %block_.L_470484 ]
  store i64 ptrtoint (%G__0x6cbc30_type* @G__0x6cbc30 to i64), i64* %RDI.i2935, align 8
  %12101 = load i64, i64* %RBP.i, align 8
  %12102 = add i64 %12101, -78
  store i64 %12102, i64* %.pre243, align 8
  %12103 = add i64 %12101, -80
  store i64 %12103, i64* %RCX.i6189, align 8
  store i64 9, i64* %RDX.i5984, align 8
  %12104 = add i64 %12101, -42
  %12105 = add i64 %12100, 27
  store i64 %12105, i64* %3, align 8
  %12106 = inttoptr i64 %12104 to i16*
  %12107 = load i16, i16* %12106, align 2
  store i16 %12107, i16* %SI.i5967, align 2
  %12108 = add i64 %12101, -48
  %12109 = add i64 %12100, 31
  store i64 %12109, i64* %3, align 8
  %12110 = inttoptr i64 %12108 to i32*
  %12111 = load i32, i32* %12110, align 4
  %12112 = zext i32 %12111 to i64
  store i64 %12112, i64* %9139, align 8
  %12113 = add i64 %12101, -116
  %12114 = add i64 %12100, 35
  store i64 %12114, i64* %3, align 8
  %12115 = inttoptr i64 %12113 to i32*
  %12116 = load i32, i32* %12115, align 4
  %12117 = zext i32 %12116 to i64
  store i64 %12117, i64* %9145, align 8
  %12118 = add i64 %12101, -120
  %12119 = add i64 %12100, 39
  store i64 %12119, i64* %3, align 8
  %12120 = inttoptr i64 %12118 to i32*
  %12121 = load i32, i32* %12120, align 4
  %12122 = zext i32 %12121 to i64
  store i64 %12122, i64* %R10.i6168, align 8
  %12123 = add i64 %12101, -60
  %12124 = add i64 %12100, 43
  store i64 %12124, i64* %3, align 8
  %12125 = inttoptr i64 %12123 to i32*
  %12126 = load i32, i32* %12125, align 4
  %12127 = zext i32 %12126 to i64
  store i64 %12127, i64* %R11.i6166, align 8
  %BX.i1747 = bitcast %union.anon* %34 to i16*
  %12128 = add i64 %12101, -74
  %12129 = add i64 %12100, 47
  store i64 %12129, i64* %3, align 8
  %12130 = inttoptr i64 %12128 to i16*
  %12131 = load i16, i16* %12130, align 2
  store i16 %12131, i16* %BX.i1747, align 2
  %12132 = add i64 %12101, -76
  %12133 = add i64 %12100, 52
  store i64 %12133, i64* %3, align 8
  %12134 = inttoptr i64 %12132 to i16*
  %12135 = load i16, i16* %12134, align 2
  store i16 %12135, i16* %R14W.i2888, align 2
  %R15D.i1741 = bitcast %union.anon* %11 to i32*
  %12136 = add i64 %12101, -96
  %12137 = add i64 %12100, 56
  store i64 %12137, i64* %3, align 8
  %12138 = inttoptr i64 %12136 to i32*
  %12139 = load i32, i32* %12138, align 4
  %12140 = zext i32 %12139 to i64
  store i64 %12140, i64* %R15.i1647, align 8
  %12141 = add i64 %12101, -72
  %12142 = add i64 %12100, 61
  store i64 %12142, i64* %3, align 8
  %12143 = inttoptr i64 %12141 to i64*
  %12144 = load i64, i64* %12143, align 8
  store i64 %12144, i64* %117, align 1
  %12145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %12146 = bitcast i64* %12145 to double*
  store double 0.000000e+00, double* %12146, align 1
  %12147 = sext i16 %12107 to i64
  %12148 = and i64 %12147, 4294967295
  store i64 %12148, i64* %RSI.i2931, align 8
  %12149 = add i64 %12101, -436
  %12150 = add i64 %12100, 70
  store i64 %12150, i64* %3, align 8
  %12151 = inttoptr i64 %12149 to i32*
  store i32 9, i32* %12151, align 4
  %12152 = load i32, i32* %R8D.i5751, align 4
  %12153 = zext i32 %12152 to i64
  %12154 = load i64, i64* %3, align 8
  store i64 %12153, i64* %RDX.i5984, align 8
  %12155 = load i64, i64* %RBP.i, align 8
  %12156 = add i64 %12155, -448
  %12157 = load i64, i64* %RCX.i6189, align 8
  %12158 = add i64 %12154, 10
  store i64 %12158, i64* %3, align 8
  %12159 = inttoptr i64 %12156 to i64*
  store i64 %12157, i64* %12159, align 8
  %12160 = load i32, i32* %R9D.i6071, align 4
  %12161 = zext i32 %12160 to i64
  %12162 = load i64, i64* %3, align 8
  store i64 %12161, i64* %RCX.i6189, align 8
  %12163 = load i32, i32* %R10D.i2913, align 4
  %12164 = zext i32 %12163 to i64
  store i64 %12164, i64* %9139, align 8
  %12165 = load i32, i32* %R11D.i2910, align 4
  %12166 = zext i32 %12165 to i64
  store i64 %12166, i64* %9145, align 8
  %12167 = load i16, i16* %BX.i1747, align 2
  %12168 = load i32*, i32** %9168, align 8
  %12169 = sext i16 %12167 to i32
  %12170 = add i64 %12162, 17
  store i64 %12170, i64* %3, align 8
  store i32 %12169, i32* %12168, align 4
  %12171 = load i16, i16* %R14W.i2888, align 2
  %12172 = load i64, i64* %3, align 8
  %12173 = sext i16 %12171 to i64
  %12174 = and i64 %12173, 4294967295
  store i64 %12174, i64* %R10.i6168, align 8
  %12175 = load i64, i64* %6, align 8
  %12176 = add i64 %12175, 8
  %12177 = sext i16 %12171 to i32
  %12178 = add i64 %12172, 9
  store i64 %12178, i64* %3, align 8
  %12179 = inttoptr i64 %12176 to i32*
  store i32 %12177, i32* %12179, align 4
  %12180 = load i64, i64* %6, align 8
  %12181 = add i64 %12180, 16
  %12182 = load i64, i64* %.pre243, align 8
  %12183 = load i64, i64* %3, align 8
  %12184 = add i64 %12183, 5
  store i64 %12184, i64* %3, align 8
  %12185 = inttoptr i64 %12181 to i64*
  store i64 %12182, i64* %12185, align 8
  %12186 = load i64, i64* %RBP.i, align 8
  %12187 = add i64 %12186, -448
  %12188 = load i64, i64* %3, align 8
  %12189 = add i64 %12188, 7
  store i64 %12189, i64* %3, align 8
  %12190 = inttoptr i64 %12187 to i64*
  %12191 = load i64, i64* %12190, align 8
  store i64 %12191, i64* %.pre243, align 8
  %12192 = load i64, i64* %6, align 8
  %12193 = add i64 %12192, 24
  %12194 = add i64 %12188, 12
  store i64 %12194, i64* %3, align 8
  %12195 = inttoptr i64 %12193 to i64*
  store i64 %12191, i64* %12195, align 8
  %12196 = load i64, i64* %6, align 8
  %12197 = add i64 %12196, 32
  %12198 = load i64, i64* %3, align 8
  %12199 = add i64 %12198, 8
  store i64 %12199, i64* %3, align 8
  %12200 = inttoptr i64 %12197 to i32*
  store i32 9, i32* %12200, align 4
  %12201 = load i64, i64* %6, align 8
  %12202 = add i64 %12201, 40
  %12203 = load i64, i64* %3, align 8
  %12204 = add i64 %12203, 8
  store i64 %12204, i64* %3, align 8
  %12205 = inttoptr i64 %12202 to i32*
  store i32 9, i32* %12205, align 4
  %12206 = load i64, i64* %6, align 8
  %12207 = add i64 %12206, 48
  %12208 = load i32, i32* %R15D.i1741, align 4
  %12209 = load i64, i64* %3, align 8
  %12210 = add i64 %12209, 5
  store i64 %12210, i64* %3, align 8
  %12211 = inttoptr i64 %12207 to i32*
  store i32 %12208, i32* %12211, align 4
  %12212 = load i64, i64* %3, align 8
  %12213 = add i64 %12212, -66318
  %12214 = add i64 %12212, 5
  %12215 = load i64, i64* %6, align 8
  %12216 = add i64 %12215, -8
  %12217 = inttoptr i64 %12216 to i64*
  store i64 %12214, i64* %12217, align 8
  store i64 %12216, i64* %6, align 8
  store i64 %12213, i64* %3, align 8
  %call2_47053e = tail call %struct.Memory* @sub_460230.SubPelBlockMotionSearch(%struct.State* nonnull %0, i64 %12213, %struct.Memory* %MEMORY.48)
  %12218 = load i64, i64* %RBP.i, align 8
  %12219 = add i64 %12218, -96
  %12220 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %12221 = load i64, i64* %3, align 8
  %12222 = add i64 %12221, 3
  store i64 %12222, i64* %3, align 8
  %12223 = inttoptr i64 %12219 to i32*
  store i32 %12220, i32* %12223, align 4
  %.pre208 = load i64, i64* %3, align 8
  br label %block_.L_470546

block_.L_470546:                                  ; preds = %block_.L_4704ae, %block_.L_47047f
  %12224 = phi i64 [ %.pre208, %block_.L_4704ae ], [ %12062, %block_.L_47047f ]
  %MEMORY.55 = phi %struct.Memory* [ %call2_47053e, %block_.L_4704ae ], [ %MEMORY.50, %block_.L_47047f ]
  %12225 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %12225, i64* %.pre243, align 8
  %12226 = add i64 %12225, 2464
  %12227 = add i64 %12224, 15
  store i64 %12227, i64* %3, align 8
  %12228 = inttoptr i64 %12226 to i32*
  %12229 = load i32, i32* %12228, align 4
  store i8 0, i8* %44, align 1
  %12230 = and i32 %12229, 255
  %12231 = tail call i32 @llvm.ctpop.i32(i32 %12230)
  %12232 = trunc i32 %12231 to i8
  %12233 = and i8 %12232, 1
  %12234 = xor i8 %12233, 1
  store i8 %12234, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %12235 = icmp eq i32 %12229, 0
  %12236 = zext i1 %12235 to i8
  store i8 %12236, i8* %59, align 1
  %12237 = lshr i32 %12229, 31
  %12238 = trunc i32 %12237 to i8
  store i8 %12238, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v277 = select i1 %12235, i64 21, i64 248
  %12239 = add i64 %12224, %.v277
  store i64 %12239, i64* %3, align 8
  br i1 %12235, label %block_47055b, label %block_.L_47063e

block_47055b:                                     ; preds = %block_.L_470546
  %12240 = load i64, i64* %RBP.i, align 8
  %12241 = add i64 %12240, -60
  %12242 = add i64 %12239, 4
  store i64 %12242, i64* %3, align 8
  %12243 = inttoptr i64 %12241 to i32*
  %12244 = load i32, i32* %12243, align 4
  %12245 = add i32 %12244, -1
  %12246 = icmp eq i32 %12244, 0
  %12247 = zext i1 %12246 to i8
  store i8 %12247, i8* %44, align 1
  %12248 = and i32 %12245, 255
  %12249 = tail call i32 @llvm.ctpop.i32(i32 %12248)
  %12250 = trunc i32 %12249 to i8
  %12251 = and i8 %12250, 1
  %12252 = xor i8 %12251, 1
  store i8 %12252, i8* %51, align 1
  %12253 = xor i32 %12245, %12244
  %12254 = lshr i32 %12253, 4
  %12255 = trunc i32 %12254 to i8
  %12256 = and i8 %12255, 1
  store i8 %12256, i8* %56, align 1
  %12257 = icmp eq i32 %12245, 0
  %12258 = zext i1 %12257 to i8
  store i8 %12258, i8* %59, align 1
  %12259 = lshr i32 %12245, 31
  %12260 = trunc i32 %12259 to i8
  store i8 %12260, i8* %62, align 1
  %12261 = lshr i32 %12244, 31
  %12262 = xor i32 %12259, %12261
  %12263 = add nuw nsw i32 %12262, %12261
  %12264 = icmp eq i32 %12263, 2
  %12265 = zext i1 %12264 to i8
  store i8 %12265, i8* %68, align 1
  %.v294 = select i1 %12257, i64 10, i64 222
  %12266 = add i64 %12239, %.v294
  store i64 %12266, i64* %3, align 8
  br i1 %12257, label %block_470565, label %block_.L_470639

block_470565:                                     ; preds = %block_47055b
  %12267 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %12267, i64* %.pre243, align 8
  %12268 = add i64 %12267, 24
  %12269 = add i64 %12266, 12
  store i64 %12269, i64* %3, align 8
  %12270 = inttoptr i64 %12268 to i32*
  %12271 = load i32, i32* %12270, align 4
  store i8 0, i8* %44, align 1
  %12272 = and i32 %12271, 255
  %12273 = tail call i32 @llvm.ctpop.i32(i32 %12272)
  %12274 = trunc i32 %12273 to i8
  %12275 = and i8 %12274, 1
  %12276 = xor i8 %12275, 1
  store i8 %12276, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %12277 = icmp eq i32 %12271, 0
  %12278 = zext i1 %12277 to i8
  store i8 %12278, i8* %59, align 1
  %12279 = lshr i32 %12271, 31
  %12280 = trunc i32 %12279 to i8
  store i8 %12280, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v295 = select i1 %12277, i64 36, i64 18
  %12281 = add i64 %12266, %.v295
  store i64 %12281, i64* %3, align 8
  br i1 %12277, label %block_.L_470589, label %block_470577

block_470577:                                     ; preds = %block_470565
  store i64 %12267, i64* %.pre243, align 8
  %12282 = add i64 %12281, 12
  store i64 %12282, i64* %3, align 8
  %12283 = load i32, i32* %12270, align 4
  %12284 = add i32 %12283, -3
  %12285 = icmp ult i32 %12283, 3
  %12286 = zext i1 %12285 to i8
  store i8 %12286, i8* %44, align 1
  %12287 = and i32 %12284, 255
  %12288 = tail call i32 @llvm.ctpop.i32(i32 %12287)
  %12289 = trunc i32 %12288 to i8
  %12290 = and i8 %12289, 1
  %12291 = xor i8 %12290, 1
  store i8 %12291, i8* %51, align 1
  %12292 = xor i32 %12284, %12283
  %12293 = lshr i32 %12292, 4
  %12294 = trunc i32 %12293 to i8
  %12295 = and i8 %12294, 1
  store i8 %12295, i8* %56, align 1
  %12296 = icmp eq i32 %12284, 0
  %12297 = zext i1 %12296 to i8
  store i8 %12297, i8* %59, align 1
  %12298 = lshr i32 %12284, 31
  %12299 = trunc i32 %12298 to i8
  store i8 %12299, i8* %62, align 1
  %12300 = lshr i32 %12283, 31
  %12301 = xor i32 %12298, %12300
  %12302 = add nuw nsw i32 %12301, %12300
  %12303 = icmp eq i32 %12302, 2
  %12304 = zext i1 %12303 to i8
  store i8 %12304, i8* %68, align 1
  %.v296 = select i1 %12296, i64 18, i64 194
  %12305 = add i64 %12281, %.v296
  store i64 %12305, i64* %3, align 8
  br i1 %12296, label %block_.L_470589, label %block_.L_470639

block_.L_470589:                                  ; preds = %block_470577, %block_470565
  %12306 = phi i64 [ %12305, %block_470577 ], [ %12281, %block_470565 ]
  %12307 = add i64 %12306, 3095
  %12308 = add i64 %12306, 5
  %12309 = load i64, i64* %6, align 8
  %12310 = add i64 %12309, -8
  %12311 = inttoptr i64 %12310 to i64*
  store i64 %12308, i64* %12311, align 8
  store i64 %12310, i64* %6, align 8
  store i64 %12307, i64* %3, align 8
  %call2_470589 = tail call %struct.Memory* @sub_4711a0.FindSkipModeMotionVector(%struct.State* nonnull %0, i64 %12307, %struct.Memory* %MEMORY.55)
  %12312 = bitcast [32 x %union.VectorReg]* %111 to i8*
  %12313 = load i64, i64* %RBP.i, align 8
  %12314 = add i64 %12313, -72
  %12315 = load i64, i64* %3, align 8
  %12316 = add i64 %12315, 5
  store i64 %12316, i64* %3, align 8
  %12317 = inttoptr i64 %12314 to i64*
  %12318 = load i64, i64* %12317, align 8
  store i64 %12318, i64* %117, align 1
  %12319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %12320 = bitcast i64* %12319 to double*
  store double 0.000000e+00, double* %12320, align 1
  %12321 = add i64 %12315, 4434
  %12322 = add i64 %12315, 10
  %12323 = load i64, i64* %6, align 8
  %12324 = add i64 %12323, -8
  %12325 = inttoptr i64 %12324 to i64*
  store i64 %12322, i64* %12325, align 8
  store i64 %12324, i64* %6, align 8
  store i64 %12321, i64* %3, align 8
  %call2_470593 = tail call %struct.Memory* @sub_4716e0.GetSkipCostMB(%struct.State* nonnull %0, i64 %12321, %struct.Memory* %call2_470589)
  %12326 = load i64, i64* %3, align 8
  %12327 = add i64 %12326, ptrtoint (%G_0x41318__rip__type* @G_0x41318__rip_ to i64)
  %12328 = add i64 %12326, 8
  store i64 %12328, i64* %3, align 8
  %12329 = inttoptr i64 %12327 to i64*
  %12330 = load i64, i64* %12329, align 8
  store i64 %12330, i64* %117, align 1
  store double 0.000000e+00, double* %12320, align 1
  %12331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %12332 = add i64 %12326, add (i64 ptrtoint (%G_0x41318__rip__type* @G_0x41318__rip_ to i64), i64 8)
  %12333 = add i64 %12326, 16
  store i64 %12333, i64* %3, align 8
  %12334 = inttoptr i64 %12332 to i64*
  %12335 = load i64, i64* %12334, align 8
  %12336 = bitcast %union.VectorReg* %12331 to double*
  %12337 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %12331, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %12335, i64* %12337, align 1
  %12338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12339 = bitcast i64* %12338 to double*
  store double 0.000000e+00, double* %12339, align 1
  %12340 = load i64, i64* %RBP.i, align 8
  %12341 = add i64 %12340, -192
  %12342 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %12343 = add i64 %12326, 22
  store i64 %12343, i64* %3, align 8
  %12344 = inttoptr i64 %12341 to i32*
  store i32 %12342, i32* %12344, align 4
  %12345 = load i64, i64* %RBP.i, align 8
  %12346 = add i64 %12345, -72
  %12347 = load i64, i64* %3, align 8
  %12348 = add i64 %12347, 5
  store i64 %12348, i64* %3, align 8
  %12349 = load double, double* %12336, align 1
  %12350 = bitcast i64* %12338 to <2 x i32>*
  %12351 = load <2 x i32>, <2 x i32>* %12350, align 1
  %12352 = inttoptr i64 %12346 to double*
  %12353 = load double, double* %12352, align 8
  %12354 = fmul double %12349, %12353
  %12355 = load double, double* %116, align 1
  %12356 = fadd double %12354, %12355
  store double %12356, double* %12336, align 1
  %.cast92 = bitcast double %12356 to <2 x i32>
  %12357 = extractelement <2 x i32> %.cast92, i32 0
  %12358 = bitcast [32 x %union.VectorReg]* %111 to i32*
  store i32 %12357, i32* %12358, align 1
  %12359 = extractelement <2 x i32> %.cast92, i32 1
  %12360 = getelementptr inbounds i8, i8* %12312, i64 4
  %12361 = bitcast i8* %12360 to i32*
  store i32 %12359, i32* %12361, align 1
  %12362 = extractelement <2 x i32> %12351, i32 0
  %12363 = bitcast i64* %12319 to i32*
  store i32 %12362, i32* %12363, align 1
  %12364 = extractelement <2 x i32> %12351, i32 1
  %12365 = getelementptr inbounds i8, i8* %12312, i64 12
  %12366 = bitcast i8* %12365 to i32*
  store i32 %12364, i32* %12366, align 1
  %12367 = add i64 %12347, -455678
  %12368 = add i64 %12347, 17
  %12369 = load i64, i64* %6, align 8
  %12370 = add i64 %12369, -8
  %12371 = inttoptr i64 %12370 to i64*
  store i64 %12368, i64* %12371, align 8
  store i64 %12370, i64* %6, align 8
  store i64 %12367, i64* %3, align 8
  %12372 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @floor to i64), %struct.Memory* %call2_470593)
  %12373 = load i64, i64* %3, align 8
  %12374 = load double, double* %116, align 1
  %12375 = tail call double @llvm.trunc.f64(double %12374)
  %12376 = tail call double @llvm.fabs.f64(double %12375)
  %12377 = fcmp ogt double %12376, 0x41DFFFFFFFC00000
  %12378 = fptosi double %12375 to i32
  %12379 = zext i32 %12378 to i64
  %12380 = select i1 %12377, i64 2147483648, i64 %12379
  store i64 %12380, i64* %.pre243, align 8
  %12381 = load i64, i64* %RBP.i, align 8
  %12382 = add i64 %12381, -192
  %12383 = add i64 %12373, 10
  store i64 %12383, i64* %3, align 8
  %12384 = inttoptr i64 %12382 to i32*
  %12385 = load i32, i32* %12384, align 4
  %12386 = trunc i64 %12380 to i32
  %12387 = sub i32 %12385, %12386
  %12388 = zext i32 %12387 to i64
  store i64 %12388, i64* %RCX.i6189, align 8
  %12389 = icmp ult i32 %12385, %12386
  %12390 = zext i1 %12389 to i8
  store i8 %12390, i8* %44, align 1
  %12391 = and i32 %12387, 255
  %12392 = tail call i32 @llvm.ctpop.i32(i32 %12391)
  %12393 = trunc i32 %12392 to i8
  %12394 = and i8 %12393, 1
  %12395 = xor i8 %12394, 1
  store i8 %12395, i8* %51, align 1
  %12396 = xor i32 %12386, %12385
  %12397 = xor i32 %12396, %12387
  %12398 = lshr i32 %12397, 4
  %12399 = trunc i32 %12398 to i8
  %12400 = and i8 %12399, 1
  store i8 %12400, i8* %56, align 1
  %12401 = icmp eq i32 %12387, 0
  %12402 = zext i1 %12401 to i8
  store i8 %12402, i8* %59, align 1
  %12403 = lshr i32 %12387, 31
  %12404 = trunc i32 %12403 to i8
  store i8 %12404, i8* %62, align 1
  %12405 = lshr i32 %12385, 31
  %12406 = lshr i32 %12386, 31
  %12407 = xor i32 %12406, %12405
  %12408 = xor i32 %12403, %12405
  %12409 = add nuw nsw i32 %12408, %12407
  %12410 = icmp eq i32 %12409, 2
  %12411 = zext i1 %12410 to i8
  store i8 %12411, i8* %68, align 1
  %12412 = add i64 %12373, 18
  store i64 %12412, i64* %3, align 8
  store i32 %12387, i32* %12384, align 4
  %12413 = load i64, i64* %RBP.i, align 8
  %12414 = add i64 %12413, -192
  %12415 = load i64, i64* %3, align 8
  %12416 = add i64 %12415, 6
  store i64 %12416, i64* %3, align 8
  %12417 = inttoptr i64 %12414 to i32*
  %12418 = load i32, i32* %12417, align 4
  %12419 = zext i32 %12418 to i64
  store i64 %12419, i64* %.pre243, align 8
  %12420 = add i64 %12413, -96
  %12421 = add i64 %12415, 9
  store i64 %12421, i64* %3, align 8
  %12422 = inttoptr i64 %12420 to i32*
  %12423 = load i32, i32* %12422, align 4
  %12424 = sub i32 %12418, %12423
  %12425 = icmp ult i32 %12418, %12423
  %12426 = zext i1 %12425 to i8
  store i8 %12426, i8* %44, align 1
  %12427 = and i32 %12424, 255
  %12428 = tail call i32 @llvm.ctpop.i32(i32 %12427)
  %12429 = trunc i32 %12428 to i8
  %12430 = and i8 %12429, 1
  %12431 = xor i8 %12430, 1
  store i8 %12431, i8* %51, align 1
  %12432 = xor i32 %12423, %12418
  %12433 = xor i32 %12432, %12424
  %12434 = lshr i32 %12433, 4
  %12435 = trunc i32 %12434 to i8
  %12436 = and i8 %12435, 1
  store i8 %12436, i8* %56, align 1
  %12437 = icmp eq i32 %12424, 0
  %12438 = zext i1 %12437 to i8
  store i8 %12438, i8* %59, align 1
  %12439 = lshr i32 %12424, 31
  %12440 = trunc i32 %12439 to i8
  store i8 %12440, i8* %62, align 1
  %12441 = lshr i32 %12418, 31
  %12442 = lshr i32 %12423, 31
  %12443 = xor i32 %12442, %12441
  %12444 = xor i32 %12439, %12441
  %12445 = add nuw nsw i32 %12444, %12443
  %12446 = icmp eq i32 %12445, 2
  %12447 = zext i1 %12446 to i8
  store i8 %12447, i8* %68, align 1
  %12448 = icmp ne i8 %12440, 0
  %12449 = xor i1 %12448, %12446
  %.v297 = select i1 %12449, i64 15, i64 99
  %12450 = add i64 %12415, %.v297
  store i64 %12450, i64* %3, align 8
  br i1 %12449, label %block_4705e0, label %block_.L_470634

block_4705e0:                                     ; preds = %block_.L_470589
  %12451 = add i64 %12450, 6
  store i64 %12451, i64* %3, align 8
  %12452 = load i32, i32* %12417, align 4
  %12453 = zext i32 %12452 to i64
  store i64 %12453, i64* %.pre243, align 8
  %12454 = add i64 %12450, 9
  store i64 %12454, i64* %3, align 8
  store i32 %12452, i32* %12422, align 4
  %12455 = load i64, i64* %3, align 8
  %12456 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %12456, i64* %RCX.i6189, align 8
  %12457 = add i64 %12456, 71928
  %12458 = add i64 %12455, 15
  store i64 %12458, i64* %3, align 8
  %12459 = inttoptr i64 %12457 to i64*
  %12460 = load i64, i64* %12459, align 8
  store i64 %12460, i64* %RCX.i6189, align 8
  %12461 = add i64 %12455, 18
  store i64 %12461, i64* %3, align 8
  %12462 = inttoptr i64 %12460 to i64*
  %12463 = load i64, i64* %12462, align 8
  store i64 %12463, i64* %RCX.i6189, align 8
  %12464 = add i64 %12455, 21
  store i64 %12464, i64* %3, align 8
  %12465 = inttoptr i64 %12463 to i64*
  %12466 = load i64, i64* %12465, align 8
  store i64 %12466, i64* %RCX.i6189, align 8
  %12467 = add i64 %12455, 24
  store i64 %12467, i64* %3, align 8
  %12468 = inttoptr i64 %12466 to i64*
  %12469 = load i64, i64* %12468, align 8
  store i64 %12469, i64* %RCX.i6189, align 8
  %12470 = add i64 %12455, 27
  store i64 %12470, i64* %3, align 8
  %12471 = inttoptr i64 %12469 to i64*
  %12472 = load i64, i64* %12471, align 8
  store i64 %12472, i64* %RCX.i6189, align 8
  %12473 = add i64 %12455, 30
  store i64 %12473, i64* %3, align 8
  %12474 = inttoptr i64 %12472 to i64*
  %12475 = load i64, i64* %12474, align 8
  store i64 %12475, i64* %RCX.i6189, align 8
  %DX.i1606 = bitcast %union.anon* %83 to i16*
  %12476 = add i64 %12455, 33
  store i64 %12476, i64* %3, align 8
  %12477 = inttoptr i64 %12475 to i16*
  %12478 = load i16, i16* %12477, align 2
  store i16 %12478, i16* %DX.i1606, align 2
  %12479 = load i64, i64* %RBP.i, align 8
  %12480 = add i64 %12479, -78
  %12481 = add i64 %12455, 37
  store i64 %12481, i64* %3, align 8
  %12482 = inttoptr i64 %12480 to i16*
  store i16 %12478, i16* %12482, align 2
  %12483 = load i64, i64* %3, align 8
  %12484 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %12484, i64* %RCX.i6189, align 8
  %12485 = add i64 %12484, 71928
  %12486 = add i64 %12483, 15
  store i64 %12486, i64* %3, align 8
  %12487 = inttoptr i64 %12485 to i64*
  %12488 = load i64, i64* %12487, align 8
  store i64 %12488, i64* %RCX.i6189, align 8
  %12489 = add i64 %12483, 18
  store i64 %12489, i64* %3, align 8
  %12490 = inttoptr i64 %12488 to i64*
  %12491 = load i64, i64* %12490, align 8
  store i64 %12491, i64* %RCX.i6189, align 8
  %12492 = add i64 %12483, 21
  store i64 %12492, i64* %3, align 8
  %12493 = inttoptr i64 %12491 to i64*
  %12494 = load i64, i64* %12493, align 8
  store i64 %12494, i64* %RCX.i6189, align 8
  %12495 = add i64 %12483, 24
  store i64 %12495, i64* %3, align 8
  %12496 = inttoptr i64 %12494 to i64*
  %12497 = load i64, i64* %12496, align 8
  store i64 %12497, i64* %RCX.i6189, align 8
  %12498 = add i64 %12483, 27
  store i64 %12498, i64* %3, align 8
  %12499 = inttoptr i64 %12497 to i64*
  %12500 = load i64, i64* %12499, align 8
  store i64 %12500, i64* %RCX.i6189, align 8
  %12501 = add i64 %12483, 30
  store i64 %12501, i64* %3, align 8
  %12502 = inttoptr i64 %12500 to i64*
  %12503 = load i64, i64* %12502, align 8
  store i64 %12503, i64* %RCX.i6189, align 8
  %12504 = add i64 %12503, 2
  %12505 = add i64 %12483, 34
  store i64 %12505, i64* %3, align 8
  %12506 = inttoptr i64 %12504 to i16*
  %12507 = load i16, i16* %12506, align 2
  store i16 %12507, i16* %DX.i1606, align 2
  %12508 = load i64, i64* %RBP.i, align 8
  %12509 = add i64 %12508, -80
  %12510 = add i64 %12483, 38
  store i64 %12510, i64* %3, align 8
  %12511 = inttoptr i64 %12509 to i16*
  store i16 %12507, i16* %12511, align 2
  %.pre209 = load i64, i64* %3, align 8
  br label %block_.L_470634

block_.L_470634:                                  ; preds = %block_.L_470589, %block_4705e0
  %12512 = phi i64 [ %12450, %block_.L_470589 ], [ %.pre209, %block_4705e0 ]
  %12513 = add i64 %12512, 5
  store i64 %12513, i64* %3, align 8
  %.pre210.pre = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  br label %block_.L_470639

block_.L_470639:                                  ; preds = %block_470577, %block_47055b, %block_.L_470634
  %.pre210 = phi i64 [ %12225, %block_47055b ], [ %.pre210.pre, %block_.L_470634 ], [ %12225, %block_470577 ]
  %12514 = phi i64 [ %12266, %block_47055b ], [ %12513, %block_.L_470634 ], [ %12305, %block_470577 ]
  %MEMORY.58 = phi %struct.Memory* [ %MEMORY.55, %block_47055b ], [ %12372, %block_.L_470634 ], [ %MEMORY.55, %block_470577 ]
  %12515 = add i64 %12514, 5
  store i64 %12515, i64* %3, align 8
  br label %block_.L_47063e

block_.L_47063e:                                  ; preds = %block_.L_470546, %block_.L_470639
  %12516 = phi i64 [ %12225, %block_.L_470546 ], [ %.pre210, %block_.L_470639 ]
  %12517 = phi i64 [ %12239, %block_.L_470546 ], [ %12515, %block_.L_470639 ]
  %MEMORY.59 = phi %struct.Memory* [ %MEMORY.55, %block_.L_470546 ], [ %MEMORY.58, %block_.L_470639 ]
  store i64 %12516, i64* %.pre243, align 8
  %12518 = add i64 %12516, 3292
  %12519 = add i64 %12517, 15
  store i64 %12519, i64* %3, align 8
  %12520 = inttoptr i64 %12518 to i32*
  %12521 = load i32, i32* %12520, align 4
  store i8 0, i8* %44, align 1
  %12522 = and i32 %12521, 255
  %12523 = tail call i32 @llvm.ctpop.i32(i32 %12522)
  %12524 = trunc i32 %12523 to i8
  %12525 = and i8 %12524, 1
  %12526 = xor i8 %12525, 1
  store i8 %12526, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %12527 = icmp eq i32 %12521, 0
  %12528 = zext i1 %12527 to i8
  store i8 %12528, i8* %59, align 1
  %12529 = lshr i32 %12521, 31
  %12530 = trunc i32 %12529 to i8
  store i8 %12530, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v278 = select i1 %12527, i64 383, i64 21
  %12531 = add i64 %12517, %.v278
  store i64 %12531, i64* %3, align 8
  br i1 %12527, label %block_.L_4707bd, label %block_470653

block_470653:                                     ; preds = %block_.L_47063e
  %12532 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %12532, i64* %.pre243, align 8
  %12533 = add i64 %12532, 152
  %12534 = add i64 %12531, 14
  store i64 %12534, i64* %3, align 8
  %12535 = inttoptr i64 %12533 to i32*
  %12536 = load i32, i32* %12535, align 4
  %12537 = sext i32 %12536 to i64
  %12538 = ashr i64 %12537, 1
  %12539 = lshr i64 %12538, 1
  %12540 = trunc i64 %12538 to i8
  %12541 = and i8 %12540, 1
  %12542 = trunc i64 %12539 to i32
  %12543 = and i64 %12539, 4294967295
  store i64 %12543, i64* %RCX.i6189, align 8
  store i8 %12541, i8* %44, align 1
  %12544 = and i32 %12542, 255
  %12545 = tail call i32 @llvm.ctpop.i32(i32 %12544)
  %12546 = trunc i32 %12545 to i8
  %12547 = and i8 %12546, 1
  %12548 = xor i8 %12547, 1
  store i8 %12548, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %12549 = icmp eq i32 %12542, 0
  %12550 = zext i1 %12549 to i8
  store i8 %12550, i8* %59, align 1
  %12551 = lshr i64 %12538, 32
  %12552 = trunc i64 %12551 to i8
  %12553 = and i8 %12552, 1
  store i8 %12553, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %12554 = load i64, i64* %RBP.i, align 8
  %12555 = add i64 %12554, -100
  %12556 = add i64 %12531, 20
  store i64 %12556, i64* %3, align 8
  %12557 = trunc i64 %12539 to i32
  %12558 = inttoptr i64 %12555 to i32*
  %12559 = load i32, i32* %12558, align 4
  %12560 = add i32 %12559, %12557
  %12561 = zext i32 %12560 to i64
  store i64 %12561, i64* %RCX.i6189, align 8
  %12562 = icmp ult i32 %12560, %12557
  %12563 = icmp ult i32 %12560, %12559
  %12564 = or i1 %12562, %12563
  %12565 = zext i1 %12564 to i8
  store i8 %12565, i8* %44, align 1
  %12566 = and i32 %12560, 255
  %12567 = tail call i32 @llvm.ctpop.i32(i32 %12566)
  %12568 = trunc i32 %12567 to i8
  %12569 = and i8 %12568, 1
  %12570 = xor i8 %12569, 1
  store i8 %12570, i8* %51, align 1
  %12571 = xor i32 %12559, %12557
  %12572 = xor i32 %12571, %12560
  %12573 = lshr i32 %12572, 4
  %12574 = trunc i32 %12573 to i8
  %12575 = and i8 %12574, 1
  store i8 %12575, i8* %56, align 1
  %12576 = icmp eq i32 %12560, 0
  %12577 = zext i1 %12576 to i8
  store i8 %12577, i8* %59, align 1
  %12578 = lshr i32 %12560, 31
  %12579 = trunc i32 %12578 to i8
  store i8 %12579, i8* %62, align 1
  %12580 = lshr i64 %12538, 32
  %12581 = trunc i64 %12580 to i32
  %12582 = and i32 %12581, 1
  %12583 = lshr i32 %12559, 31
  %12584 = xor i32 %12578, %12582
  %12585 = xor i32 %12578, %12583
  %12586 = add nuw nsw i32 %12584, %12585
  %12587 = icmp eq i32 %12586, 2
  %12588 = zext i1 %12587 to i8
  store i8 %12588, i8* %68, align 1
  %12589 = add i64 %12554, -196
  %12590 = add i64 %12531, 26
  store i64 %12590, i64* %3, align 8
  %12591 = inttoptr i64 %12589 to i32*
  store i32 %12560, i32* %12591, align 4
  %12592 = load i64, i64* %3, align 8
  %12593 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %12593, i64* %.pre243, align 8
  %12594 = add i64 %12593, 156
  %12595 = add i64 %12592, 14
  store i64 %12595, i64* %3, align 8
  %12596 = inttoptr i64 %12594 to i32*
  %12597 = load i32, i32* %12596, align 4
  %12598 = sext i32 %12597 to i64
  %12599 = ashr i64 %12598, 1
  %12600 = lshr i64 %12599, 1
  %12601 = trunc i64 %12599 to i8
  %12602 = and i8 %12601, 1
  %12603 = trunc i64 %12600 to i32
  %12604 = and i64 %12600, 4294967295
  store i64 %12604, i64* %RCX.i6189, align 8
  store i8 %12602, i8* %44, align 1
  %12605 = and i32 %12603, 255
  %12606 = tail call i32 @llvm.ctpop.i32(i32 %12605)
  %12607 = trunc i32 %12606 to i8
  %12608 = and i8 %12607, 1
  %12609 = xor i8 %12608, 1
  store i8 %12609, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %12610 = icmp eq i32 %12603, 0
  %12611 = zext i1 %12610 to i8
  store i8 %12611, i8* %59, align 1
  %12612 = lshr i64 %12599, 32
  %12613 = trunc i64 %12612 to i8
  %12614 = and i8 %12613, 1
  store i8 %12614, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %12615 = load i64, i64* %RBP.i, align 8
  %12616 = add i64 %12615, -104
  %12617 = add i64 %12592, 20
  store i64 %12617, i64* %3, align 8
  %12618 = trunc i64 %12600 to i32
  %12619 = inttoptr i64 %12616 to i32*
  %12620 = load i32, i32* %12619, align 4
  %12621 = add i32 %12620, %12618
  %12622 = zext i32 %12621 to i64
  store i64 %12622, i64* %RCX.i6189, align 8
  %12623 = icmp ult i32 %12621, %12618
  %12624 = icmp ult i32 %12621, %12620
  %12625 = or i1 %12623, %12624
  %12626 = zext i1 %12625 to i8
  store i8 %12626, i8* %44, align 1
  %12627 = and i32 %12621, 255
  %12628 = tail call i32 @llvm.ctpop.i32(i32 %12627)
  %12629 = trunc i32 %12628 to i8
  %12630 = and i8 %12629, 1
  %12631 = xor i8 %12630, 1
  store i8 %12631, i8* %51, align 1
  %12632 = xor i32 %12620, %12618
  %12633 = xor i32 %12632, %12621
  %12634 = lshr i32 %12633, 4
  %12635 = trunc i32 %12634 to i8
  %12636 = and i8 %12635, 1
  store i8 %12636, i8* %56, align 1
  %12637 = icmp eq i32 %12621, 0
  %12638 = zext i1 %12637 to i8
  store i8 %12638, i8* %59, align 1
  %12639 = lshr i32 %12621, 31
  %12640 = trunc i32 %12639 to i8
  store i8 %12640, i8* %62, align 1
  %12641 = lshr i64 %12599, 32
  %12642 = trunc i64 %12641 to i32
  %12643 = and i32 %12642, 1
  %12644 = lshr i32 %12620, 31
  %12645 = xor i32 %12639, %12643
  %12646 = xor i32 %12639, %12644
  %12647 = add nuw nsw i32 %12645, %12646
  %12648 = icmp eq i32 %12647, 2
  %12649 = zext i1 %12648 to i8
  store i8 %12649, i8* %68, align 1
  %12650 = add i64 %12615, -200
  %12651 = add i64 %12592, 26
  store i64 %12651, i64* %3, align 8
  %12652 = inttoptr i64 %12650 to i32*
  store i32 %12621, i32* %12652, align 4
  %12653 = load i64, i64* %RBP.i, align 8
  %12654 = add i64 %12653, -84
  %12655 = load i64, i64* %3, align 8
  %12656 = add i64 %12655, 7
  store i64 %12656, i64* %3, align 8
  %12657 = inttoptr i64 %12654 to i32*
  store i32 0, i32* %12657, align 4
  %.pre211 = load i64, i64* %3, align 8
  br label %block_.L_47068e

block_.L_47068e:                                  ; preds = %block_.L_4707a5, %block_470653
  %12658 = phi i64 [ %13260, %block_.L_4707a5 ], [ %.pre211, %block_470653 ]
  %12659 = load i64, i64* %RBP.i, align 8
  %12660 = add i64 %12659, -84
  %12661 = add i64 %12658, 3
  store i64 %12661, i64* %3, align 8
  %12662 = inttoptr i64 %12660 to i32*
  %12663 = load i32, i32* %12662, align 4
  %12664 = zext i32 %12663 to i64
  store i64 %12664, i64* %.pre243, align 8
  %12665 = add i64 %12659, -108
  %12666 = add i64 %12658, 6
  store i64 %12666, i64* %3, align 8
  %12667 = inttoptr i64 %12665 to i32*
  %12668 = load i32, i32* %12667, align 4
  %12669 = sext i32 %12668 to i64
  %12670 = ashr i64 %12669, 1
  %12671 = lshr i64 %12670, 1
  %12672 = and i64 %12671, 4294967295
  store i64 %12672, i64* %RCX.i6189, align 8
  %12673 = trunc i64 %12671 to i32
  %12674 = sub i32 %12663, %12673
  %12675 = icmp ult i32 %12663, %12673
  %12676 = zext i1 %12675 to i8
  store i8 %12676, i8* %44, align 1
  %12677 = and i32 %12674, 255
  %12678 = tail call i32 @llvm.ctpop.i32(i32 %12677)
  %12679 = trunc i32 %12678 to i8
  %12680 = and i8 %12679, 1
  %12681 = xor i8 %12680, 1
  store i8 %12681, i8* %51, align 1
  %12682 = xor i32 %12673, %12663
  %12683 = xor i32 %12682, %12674
  %12684 = lshr i32 %12683, 4
  %12685 = trunc i32 %12684 to i8
  %12686 = and i8 %12685, 1
  store i8 %12686, i8* %56, align 1
  %12687 = icmp eq i32 %12674, 0
  %12688 = zext i1 %12687 to i8
  store i8 %12688, i8* %59, align 1
  %12689 = lshr i32 %12674, 31
  %12690 = trunc i32 %12689 to i8
  store i8 %12690, i8* %62, align 1
  %12691 = lshr i32 %12663, 31
  %12692 = lshr i64 %12670, 32
  %12693 = trunc i64 %12692 to i32
  %12694 = and i32 %12693, 1
  %12695 = xor i32 %12694, %12691
  %12696 = xor i32 %12689, %12691
  %12697 = add nuw nsw i32 %12696, %12695
  %12698 = icmp eq i32 %12697, 2
  %12699 = zext i1 %12698 to i8
  store i8 %12699, i8* %68, align 1
  %12700 = icmp ne i8 %12690, 0
  %12701 = xor i1 %12700, %12698
  %.v279 = select i1 %12701, i64 17, i64 298
  %12702 = add i64 %12658, %.v279
  store i64 %12702, i64* %3, align 8
  br i1 %12701, label %block_47069f, label %block_.L_4707b8

block_47069f:                                     ; preds = %block_.L_47068e
  %12703 = add i64 %12659, -88
  %12704 = add i64 %12702, 7
  store i64 %12704, i64* %3, align 8
  %12705 = inttoptr i64 %12703 to i32*
  store i32 0, i32* %12705, align 4
  %.pre212 = load i64, i64* %3, align 8
  br label %block_.L_4706a6

block_.L_4706a6:                                  ; preds = %block_4706b7, %block_47069f
  %12706 = phi i64 [ %13230, %block_4706b7 ], [ %.pre212, %block_47069f ]
  %12707 = load i64, i64* %RBP.i, align 8
  %12708 = add i64 %12707, -88
  %12709 = add i64 %12706, 3
  store i64 %12709, i64* %3, align 8
  %12710 = inttoptr i64 %12708 to i32*
  %12711 = load i32, i32* %12710, align 4
  %12712 = zext i32 %12711 to i64
  store i64 %12712, i64* %.pre243, align 8
  %12713 = add i64 %12707, -112
  %12714 = add i64 %12706, 6
  store i64 %12714, i64* %3, align 8
  %12715 = inttoptr i64 %12713 to i32*
  %12716 = load i32, i32* %12715, align 4
  %12717 = sext i32 %12716 to i64
  %12718 = ashr i64 %12717, 1
  %12719 = lshr i64 %12718, 1
  %12720 = and i64 %12719, 4294967295
  store i64 %12720, i64* %RCX.i6189, align 8
  %12721 = trunc i64 %12719 to i32
  %12722 = sub i32 %12711, %12721
  %12723 = icmp ult i32 %12711, %12721
  %12724 = zext i1 %12723 to i8
  store i8 %12724, i8* %44, align 1
  %12725 = and i32 %12722, 255
  %12726 = tail call i32 @llvm.ctpop.i32(i32 %12725)
  %12727 = trunc i32 %12726 to i8
  %12728 = and i8 %12727, 1
  %12729 = xor i8 %12728, 1
  store i8 %12729, i8* %51, align 1
  %12730 = xor i32 %12721, %12711
  %12731 = xor i32 %12730, %12722
  %12732 = lshr i32 %12731, 4
  %12733 = trunc i32 %12732 to i8
  %12734 = and i8 %12733, 1
  store i8 %12734, i8* %56, align 1
  %12735 = icmp eq i32 %12722, 0
  %12736 = zext i1 %12735 to i8
  store i8 %12736, i8* %59, align 1
  %12737 = lshr i32 %12722, 31
  %12738 = trunc i32 %12737 to i8
  store i8 %12738, i8* %62, align 1
  %12739 = lshr i32 %12711, 31
  %12740 = lshr i64 %12718, 32
  %12741 = trunc i64 %12740 to i32
  %12742 = and i32 %12741, 1
  %12743 = xor i32 %12742, %12739
  %12744 = xor i32 %12737, %12739
  %12745 = add nuw nsw i32 %12744, %12743
  %12746 = icmp eq i32 %12745, 2
  %12747 = zext i1 %12746 to i8
  store i8 %12747, i8* %68, align 1
  %12748 = icmp ne i8 %12738, 0
  %12749 = xor i1 %12748, %12746
  %.v247 = select i1 %12749, i64 17, i64 255
  %12750 = add i64 %12706, %.v247
  store i64 %12750, i64* %3, align 8
  br i1 %12749, label %block_4706b7, label %block_.L_4707a5

block_4706b7:                                     ; preds = %block_.L_4706a6
  %12751 = add i64 %12707, -78
  %12752 = add i64 %12750, 4
  store i64 %12752, i64* %3, align 8
  %12753 = inttoptr i64 %12751 to i16*
  %12754 = load i16, i16* %12753, align 2
  store i16 %12754, i16* %AX.i4810, align 2
  %12755 = add i64 %12707, -144
  %12756 = add i64 %12750, 11
  store i64 %12756, i64* %3, align 8
  %12757 = inttoptr i64 %12755 to i64*
  %12758 = load i64, i64* %12757, align 8
  store i64 %12758, i64* %RCX.i6189, align 8
  %12759 = add i64 %12707, -100
  %12760 = add i64 %12750, 14
  store i64 %12760, i64* %3, align 8
  %12761 = inttoptr i64 %12759 to i32*
  %12762 = load i32, i32* %12761, align 4
  %12763 = zext i32 %12762 to i64
  store i64 %12763, i64* %RDX.i5984, align 8
  %12764 = add i64 %12707, -84
  %12765 = add i64 %12750, 17
  store i64 %12765, i64* %3, align 8
  %12766 = inttoptr i64 %12764 to i32*
  %12767 = load i32, i32* %12766, align 4
  %12768 = add i32 %12767, %12762
  %12769 = zext i32 %12768 to i64
  store i64 %12769, i64* %RDX.i5984, align 8
  %12770 = icmp ult i32 %12768, %12762
  %12771 = icmp ult i32 %12768, %12767
  %12772 = or i1 %12770, %12771
  %12773 = zext i1 %12772 to i8
  store i8 %12773, i8* %44, align 1
  %12774 = and i32 %12768, 255
  %12775 = tail call i32 @llvm.ctpop.i32(i32 %12774)
  %12776 = trunc i32 %12775 to i8
  %12777 = and i8 %12776, 1
  %12778 = xor i8 %12777, 1
  store i8 %12778, i8* %51, align 1
  %12779 = xor i32 %12767, %12762
  %12780 = xor i32 %12779, %12768
  %12781 = lshr i32 %12780, 4
  %12782 = trunc i32 %12781 to i8
  %12783 = and i8 %12782, 1
  store i8 %12783, i8* %56, align 1
  %12784 = icmp eq i32 %12768, 0
  %12785 = zext i1 %12784 to i8
  store i8 %12785, i8* %59, align 1
  %12786 = lshr i32 %12768, 31
  %12787 = trunc i32 %12786 to i8
  store i8 %12787, i8* %62, align 1
  %12788 = lshr i32 %12762, 31
  %12789 = lshr i32 %12767, 31
  %12790 = xor i32 %12786, %12788
  %12791 = xor i32 %12786, %12789
  %12792 = add nuw nsw i32 %12790, %12791
  %12793 = icmp eq i32 %12792, 2
  %12794 = zext i1 %12793 to i8
  store i8 %12794, i8* %68, align 1
  %12795 = sext i32 %12768 to i64
  store i64 %12795, i64* %RSI.i2931, align 8
  %12796 = shl nsw i64 %12795, 3
  %12797 = add i64 %12758, %12796
  %12798 = add i64 %12750, 24
  store i64 %12798, i64* %3, align 8
  %12799 = inttoptr i64 %12797 to i64*
  %12800 = load i64, i64* %12799, align 8
  store i64 %12800, i64* %RCX.i6189, align 8
  %12801 = add i64 %12707, -104
  %12802 = add i64 %12750, 27
  store i64 %12802, i64* %3, align 8
  %12803 = inttoptr i64 %12801 to i32*
  %12804 = load i32, i32* %12803, align 4
  %12805 = zext i32 %12804 to i64
  store i64 %12805, i64* %RDX.i5984, align 8
  %12806 = add i64 %12750, 30
  store i64 %12806, i64* %3, align 8
  %12807 = load i32, i32* %12710, align 4
  %12808 = add i32 %12807, %12804
  %12809 = zext i32 %12808 to i64
  store i64 %12809, i64* %RDX.i5984, align 8
  %12810 = icmp ult i32 %12808, %12804
  %12811 = icmp ult i32 %12808, %12807
  %12812 = or i1 %12810, %12811
  %12813 = zext i1 %12812 to i8
  store i8 %12813, i8* %44, align 1
  %12814 = and i32 %12808, 255
  %12815 = tail call i32 @llvm.ctpop.i32(i32 %12814)
  %12816 = trunc i32 %12815 to i8
  %12817 = and i8 %12816, 1
  %12818 = xor i8 %12817, 1
  store i8 %12818, i8* %51, align 1
  %12819 = xor i32 %12807, %12804
  %12820 = xor i32 %12819, %12808
  %12821 = lshr i32 %12820, 4
  %12822 = trunc i32 %12821 to i8
  %12823 = and i8 %12822, 1
  store i8 %12823, i8* %56, align 1
  %12824 = icmp eq i32 %12808, 0
  %12825 = zext i1 %12824 to i8
  store i8 %12825, i8* %59, align 1
  %12826 = lshr i32 %12808, 31
  %12827 = trunc i32 %12826 to i8
  store i8 %12827, i8* %62, align 1
  %12828 = lshr i32 %12804, 31
  %12829 = lshr i32 %12807, 31
  %12830 = xor i32 %12826, %12828
  %12831 = xor i32 %12826, %12829
  %12832 = add nuw nsw i32 %12830, %12831
  %12833 = icmp eq i32 %12832, 2
  %12834 = zext i1 %12833 to i8
  store i8 %12834, i8* %68, align 1
  %12835 = sext i32 %12808 to i64
  store i64 %12835, i64* %RSI.i2931, align 8
  %12836 = shl nsw i64 %12835, 3
  %12837 = add i64 %12800, %12836
  %12838 = add i64 %12750, 37
  store i64 %12838, i64* %3, align 8
  %12839 = inttoptr i64 %12837 to i64*
  %12840 = load i64, i64* %12839, align 8
  store i64 %12840, i64* %RCX.i6189, align 8
  %12841 = load i64, i64* %RBP.i, align 8
  %12842 = add i64 %12841, -48
  %12843 = add i64 %12750, 41
  store i64 %12843, i64* %3, align 8
  %12844 = inttoptr i64 %12842 to i32*
  %12845 = load i32, i32* %12844, align 4
  %12846 = sext i32 %12845 to i64
  store i64 %12846, i64* %RSI.i2931, align 8
  %12847 = shl nsw i64 %12846, 3
  %12848 = add i64 %12847, %12840
  %12849 = add i64 %12750, 45
  store i64 %12849, i64* %3, align 8
  %12850 = inttoptr i64 %12848 to i64*
  %12851 = load i64, i64* %12850, align 8
  store i64 %12851, i64* %RCX.i6189, align 8
  %12852 = add i64 %12841, -42
  %12853 = add i64 %12750, 50
  store i64 %12853, i64* %3, align 8
  %12854 = inttoptr i64 %12852 to i16*
  %12855 = load i16, i16* %12854, align 2
  %12856 = sext i16 %12855 to i64
  store i64 %12856, i64* %RSI.i2931, align 8
  %12857 = shl nsw i64 %12856, 3
  %12858 = add i64 %12857, %12851
  %12859 = add i64 %12750, 54
  store i64 %12859, i64* %3, align 8
  %12860 = inttoptr i64 %12858 to i64*
  %12861 = load i64, i64* %12860, align 8
  store i64 %12861, i64* %RCX.i6189, align 8
  %12862 = add i64 %12841, -60
  %12863 = add i64 %12750, 58
  store i64 %12863, i64* %3, align 8
  %12864 = inttoptr i64 %12862 to i32*
  %12865 = load i32, i32* %12864, align 4
  %12866 = sext i32 %12865 to i64
  store i64 %12866, i64* %RSI.i2931, align 8
  %12867 = shl nsw i64 %12866, 3
  %12868 = add i64 %12867, %12861
  %12869 = add i64 %12750, 62
  store i64 %12869, i64* %3, align 8
  %12870 = inttoptr i64 %12868 to i64*
  %12871 = load i64, i64* %12870, align 8
  store i64 %12871, i64* %RCX.i6189, align 8
  %12872 = load i16, i16* %AX.i4810, align 2
  %12873 = add i64 %12750, 65
  store i64 %12873, i64* %3, align 8
  %12874 = inttoptr i64 %12871 to i16*
  store i16 %12872, i16* %12874, align 2
  %12875 = load i64, i64* %RBP.i, align 8
  %12876 = add i64 %12875, -80
  %12877 = load i64, i64* %3, align 8
  %12878 = add i64 %12877, 4
  store i64 %12878, i64* %3, align 8
  %12879 = inttoptr i64 %12876 to i16*
  %12880 = load i16, i16* %12879, align 2
  store i16 %12880, i16* %AX.i4810, align 2
  %12881 = add i64 %12875, -144
  %12882 = add i64 %12877, 11
  store i64 %12882, i64* %3, align 8
  %12883 = inttoptr i64 %12881 to i64*
  %12884 = load i64, i64* %12883, align 8
  store i64 %12884, i64* %RCX.i6189, align 8
  %12885 = add i64 %12875, -100
  %12886 = add i64 %12877, 14
  store i64 %12886, i64* %3, align 8
  %12887 = inttoptr i64 %12885 to i32*
  %12888 = load i32, i32* %12887, align 4
  %12889 = zext i32 %12888 to i64
  store i64 %12889, i64* %RDX.i5984, align 8
  %12890 = add i64 %12875, -84
  %12891 = add i64 %12877, 17
  store i64 %12891, i64* %3, align 8
  %12892 = inttoptr i64 %12890 to i32*
  %12893 = load i32, i32* %12892, align 4
  %12894 = add i32 %12893, %12888
  %12895 = zext i32 %12894 to i64
  store i64 %12895, i64* %RDX.i5984, align 8
  %12896 = icmp ult i32 %12894, %12888
  %12897 = icmp ult i32 %12894, %12893
  %12898 = or i1 %12896, %12897
  %12899 = zext i1 %12898 to i8
  store i8 %12899, i8* %44, align 1
  %12900 = and i32 %12894, 255
  %12901 = tail call i32 @llvm.ctpop.i32(i32 %12900)
  %12902 = trunc i32 %12901 to i8
  %12903 = and i8 %12902, 1
  %12904 = xor i8 %12903, 1
  store i8 %12904, i8* %51, align 1
  %12905 = xor i32 %12893, %12888
  %12906 = xor i32 %12905, %12894
  %12907 = lshr i32 %12906, 4
  %12908 = trunc i32 %12907 to i8
  %12909 = and i8 %12908, 1
  store i8 %12909, i8* %56, align 1
  %12910 = icmp eq i32 %12894, 0
  %12911 = zext i1 %12910 to i8
  store i8 %12911, i8* %59, align 1
  %12912 = lshr i32 %12894, 31
  %12913 = trunc i32 %12912 to i8
  store i8 %12913, i8* %62, align 1
  %12914 = lshr i32 %12888, 31
  %12915 = lshr i32 %12893, 31
  %12916 = xor i32 %12912, %12914
  %12917 = xor i32 %12912, %12915
  %12918 = add nuw nsw i32 %12916, %12917
  %12919 = icmp eq i32 %12918, 2
  %12920 = zext i1 %12919 to i8
  store i8 %12920, i8* %68, align 1
  %12921 = sext i32 %12894 to i64
  store i64 %12921, i64* %RSI.i2931, align 8
  %12922 = shl nsw i64 %12921, 3
  %12923 = add i64 %12884, %12922
  %12924 = add i64 %12877, 24
  store i64 %12924, i64* %3, align 8
  %12925 = inttoptr i64 %12923 to i64*
  %12926 = load i64, i64* %12925, align 8
  store i64 %12926, i64* %RCX.i6189, align 8
  %12927 = add i64 %12875, -104
  %12928 = add i64 %12877, 27
  store i64 %12928, i64* %3, align 8
  %12929 = inttoptr i64 %12927 to i32*
  %12930 = load i32, i32* %12929, align 4
  %12931 = zext i32 %12930 to i64
  store i64 %12931, i64* %RDX.i5984, align 8
  %12932 = add i64 %12875, -88
  %12933 = add i64 %12877, 30
  store i64 %12933, i64* %3, align 8
  %12934 = inttoptr i64 %12932 to i32*
  %12935 = load i32, i32* %12934, align 4
  %12936 = add i32 %12935, %12930
  %12937 = zext i32 %12936 to i64
  store i64 %12937, i64* %RDX.i5984, align 8
  %12938 = icmp ult i32 %12936, %12930
  %12939 = icmp ult i32 %12936, %12935
  %12940 = or i1 %12938, %12939
  %12941 = zext i1 %12940 to i8
  store i8 %12941, i8* %44, align 1
  %12942 = and i32 %12936, 255
  %12943 = tail call i32 @llvm.ctpop.i32(i32 %12942)
  %12944 = trunc i32 %12943 to i8
  %12945 = and i8 %12944, 1
  %12946 = xor i8 %12945, 1
  store i8 %12946, i8* %51, align 1
  %12947 = xor i32 %12935, %12930
  %12948 = xor i32 %12947, %12936
  %12949 = lshr i32 %12948, 4
  %12950 = trunc i32 %12949 to i8
  %12951 = and i8 %12950, 1
  store i8 %12951, i8* %56, align 1
  %12952 = icmp eq i32 %12936, 0
  %12953 = zext i1 %12952 to i8
  store i8 %12953, i8* %59, align 1
  %12954 = lshr i32 %12936, 31
  %12955 = trunc i32 %12954 to i8
  store i8 %12955, i8* %62, align 1
  %12956 = lshr i32 %12930, 31
  %12957 = lshr i32 %12935, 31
  %12958 = xor i32 %12954, %12956
  %12959 = xor i32 %12954, %12957
  %12960 = add nuw nsw i32 %12958, %12959
  %12961 = icmp eq i32 %12960, 2
  %12962 = zext i1 %12961 to i8
  store i8 %12962, i8* %68, align 1
  %12963 = sext i32 %12936 to i64
  store i64 %12963, i64* %RSI.i2931, align 8
  %12964 = shl nsw i64 %12963, 3
  %12965 = add i64 %12926, %12964
  %12966 = add i64 %12877, 37
  store i64 %12966, i64* %3, align 8
  %12967 = inttoptr i64 %12965 to i64*
  %12968 = load i64, i64* %12967, align 8
  store i64 %12968, i64* %RCX.i6189, align 8
  %12969 = load i64, i64* %RBP.i, align 8
  %12970 = add i64 %12969, -48
  %12971 = add i64 %12877, 41
  store i64 %12971, i64* %3, align 8
  %12972 = inttoptr i64 %12970 to i32*
  %12973 = load i32, i32* %12972, align 4
  %12974 = sext i32 %12973 to i64
  store i64 %12974, i64* %RSI.i2931, align 8
  %12975 = shl nsw i64 %12974, 3
  %12976 = add i64 %12975, %12968
  %12977 = add i64 %12877, 45
  store i64 %12977, i64* %3, align 8
  %12978 = inttoptr i64 %12976 to i64*
  %12979 = load i64, i64* %12978, align 8
  store i64 %12979, i64* %RCX.i6189, align 8
  %12980 = add i64 %12969, -42
  %12981 = add i64 %12877, 50
  store i64 %12981, i64* %3, align 8
  %12982 = inttoptr i64 %12980 to i16*
  %12983 = load i16, i16* %12982, align 2
  %12984 = sext i16 %12983 to i64
  store i64 %12984, i64* %RSI.i2931, align 8
  %12985 = shl nsw i64 %12984, 3
  %12986 = add i64 %12985, %12979
  %12987 = add i64 %12877, 54
  store i64 %12987, i64* %3, align 8
  %12988 = inttoptr i64 %12986 to i64*
  %12989 = load i64, i64* %12988, align 8
  store i64 %12989, i64* %RCX.i6189, align 8
  %12990 = add i64 %12969, -60
  %12991 = add i64 %12877, 58
  store i64 %12991, i64* %3, align 8
  %12992 = inttoptr i64 %12990 to i32*
  %12993 = load i32, i32* %12992, align 4
  %12994 = sext i32 %12993 to i64
  store i64 %12994, i64* %RSI.i2931, align 8
  %12995 = shl nsw i64 %12994, 3
  %12996 = add i64 %12995, %12989
  %12997 = add i64 %12877, 62
  store i64 %12997, i64* %3, align 8
  %12998 = inttoptr i64 %12996 to i64*
  %12999 = load i64, i64* %12998, align 8
  store i64 %12999, i64* %RCX.i6189, align 8
  %13000 = add i64 %12999, 2
  %13001 = load i16, i16* %AX.i4810, align 2
  %13002 = add i64 %12877, 66
  store i64 %13002, i64* %3, align 8
  %13003 = inttoptr i64 %13000 to i16*
  store i16 %13001, i16* %13003, align 2
  %13004 = load i64, i64* %RBP.i, align 8
  %13005 = add i64 %13004, -78
  %13006 = load i64, i64* %3, align 8
  %13007 = add i64 %13006, 4
  store i64 %13007, i64* %3, align 8
  %13008 = inttoptr i64 %13005 to i16*
  %13009 = load i16, i16* %13008, align 2
  store i16 %13009, i16* %AX.i4810, align 2
  %13010 = add i64 %13004, -136
  %13011 = add i64 %13006, 11
  store i64 %13011, i64* %3, align 8
  %13012 = inttoptr i64 %13010 to i64*
  %13013 = load i64, i64* %13012, align 8
  store i64 %13013, i64* %RCX.i6189, align 8
  %13014 = add i64 %13004, -196
  %13015 = add i64 %13006, 17
  store i64 %13015, i64* %3, align 8
  %13016 = inttoptr i64 %13014 to i32*
  %13017 = load i32, i32* %13016, align 4
  %13018 = zext i32 %13017 to i64
  store i64 %13018, i64* %RDX.i5984, align 8
  %13019 = add i64 %13004, -84
  %13020 = add i64 %13006, 20
  store i64 %13020, i64* %3, align 8
  %13021 = inttoptr i64 %13019 to i32*
  %13022 = load i32, i32* %13021, align 4
  %13023 = add i32 %13022, %13017
  %13024 = zext i32 %13023 to i64
  store i64 %13024, i64* %RDX.i5984, align 8
  %13025 = icmp ult i32 %13023, %13017
  %13026 = icmp ult i32 %13023, %13022
  %13027 = or i1 %13025, %13026
  %13028 = zext i1 %13027 to i8
  store i8 %13028, i8* %44, align 1
  %13029 = and i32 %13023, 255
  %13030 = tail call i32 @llvm.ctpop.i32(i32 %13029)
  %13031 = trunc i32 %13030 to i8
  %13032 = and i8 %13031, 1
  %13033 = xor i8 %13032, 1
  store i8 %13033, i8* %51, align 1
  %13034 = xor i32 %13022, %13017
  %13035 = xor i32 %13034, %13023
  %13036 = lshr i32 %13035, 4
  %13037 = trunc i32 %13036 to i8
  %13038 = and i8 %13037, 1
  store i8 %13038, i8* %56, align 1
  %13039 = icmp eq i32 %13023, 0
  %13040 = zext i1 %13039 to i8
  store i8 %13040, i8* %59, align 1
  %13041 = lshr i32 %13023, 31
  %13042 = trunc i32 %13041 to i8
  store i8 %13042, i8* %62, align 1
  %13043 = lshr i32 %13017, 31
  %13044 = lshr i32 %13022, 31
  %13045 = xor i32 %13041, %13043
  %13046 = xor i32 %13041, %13044
  %13047 = add nuw nsw i32 %13045, %13046
  %13048 = icmp eq i32 %13047, 2
  %13049 = zext i1 %13048 to i8
  store i8 %13049, i8* %68, align 1
  %13050 = sext i32 %13023 to i64
  store i64 %13050, i64* %RSI.i2931, align 8
  %13051 = shl nsw i64 %13050, 3
  %13052 = add i64 %13013, %13051
  %13053 = add i64 %13006, 27
  store i64 %13053, i64* %3, align 8
  %13054 = inttoptr i64 %13052 to i64*
  %13055 = load i64, i64* %13054, align 8
  store i64 %13055, i64* %RCX.i6189, align 8
  %13056 = add i64 %13004, -200
  %13057 = add i64 %13006, 33
  store i64 %13057, i64* %3, align 8
  %13058 = inttoptr i64 %13056 to i32*
  %13059 = load i32, i32* %13058, align 4
  %13060 = zext i32 %13059 to i64
  store i64 %13060, i64* %RDX.i5984, align 8
  %13061 = add i64 %13004, -88
  %13062 = add i64 %13006, 36
  store i64 %13062, i64* %3, align 8
  %13063 = inttoptr i64 %13061 to i32*
  %13064 = load i32, i32* %13063, align 4
  %13065 = add i32 %13064, %13059
  %13066 = zext i32 %13065 to i64
  store i64 %13066, i64* %RDX.i5984, align 8
  %13067 = icmp ult i32 %13065, %13059
  %13068 = icmp ult i32 %13065, %13064
  %13069 = or i1 %13067, %13068
  %13070 = zext i1 %13069 to i8
  store i8 %13070, i8* %44, align 1
  %13071 = and i32 %13065, 255
  %13072 = tail call i32 @llvm.ctpop.i32(i32 %13071)
  %13073 = trunc i32 %13072 to i8
  %13074 = and i8 %13073, 1
  %13075 = xor i8 %13074, 1
  store i8 %13075, i8* %51, align 1
  %13076 = xor i32 %13064, %13059
  %13077 = xor i32 %13076, %13065
  %13078 = lshr i32 %13077, 4
  %13079 = trunc i32 %13078 to i8
  %13080 = and i8 %13079, 1
  store i8 %13080, i8* %56, align 1
  %13081 = icmp eq i32 %13065, 0
  %13082 = zext i1 %13081 to i8
  store i8 %13082, i8* %59, align 1
  %13083 = lshr i32 %13065, 31
  %13084 = trunc i32 %13083 to i8
  store i8 %13084, i8* %62, align 1
  %13085 = lshr i32 %13059, 31
  %13086 = lshr i32 %13064, 31
  %13087 = xor i32 %13083, %13085
  %13088 = xor i32 %13083, %13086
  %13089 = add nuw nsw i32 %13087, %13088
  %13090 = icmp eq i32 %13089, 2
  %13091 = zext i1 %13090 to i8
  store i8 %13091, i8* %68, align 1
  %13092 = sext i32 %13065 to i64
  store i64 %13092, i64* %RSI.i2931, align 8
  %13093 = shl nsw i64 %13092, 3
  %13094 = add i64 %13055, %13093
  %13095 = add i64 %13006, 43
  store i64 %13095, i64* %3, align 8
  %13096 = inttoptr i64 %13094 to i64*
  %13097 = load i64, i64* %13096, align 8
  store i64 %13097, i64* %RCX.i6189, align 8
  %13098 = load i16, i16* %AX.i4810, align 2
  %13099 = add i64 %13006, 46
  store i64 %13099, i64* %3, align 8
  %13100 = inttoptr i64 %13097 to i16*
  store i16 %13098, i16* %13100, align 2
  %13101 = load i64, i64* %RBP.i, align 8
  %13102 = add i64 %13101, -80
  %13103 = load i64, i64* %3, align 8
  %13104 = add i64 %13103, 4
  store i64 %13104, i64* %3, align 8
  %13105 = inttoptr i64 %13102 to i16*
  %13106 = load i16, i16* %13105, align 2
  store i16 %13106, i16* %AX.i4810, align 2
  %13107 = add i64 %13101, -136
  %13108 = add i64 %13103, 11
  store i64 %13108, i64* %3, align 8
  %13109 = inttoptr i64 %13107 to i64*
  %13110 = load i64, i64* %13109, align 8
  store i64 %13110, i64* %RCX.i6189, align 8
  %13111 = add i64 %13101, -196
  %13112 = add i64 %13103, 17
  store i64 %13112, i64* %3, align 8
  %13113 = inttoptr i64 %13111 to i32*
  %13114 = load i32, i32* %13113, align 4
  %13115 = zext i32 %13114 to i64
  store i64 %13115, i64* %RDX.i5984, align 8
  %13116 = add i64 %13101, -84
  %13117 = add i64 %13103, 20
  store i64 %13117, i64* %3, align 8
  %13118 = inttoptr i64 %13116 to i32*
  %13119 = load i32, i32* %13118, align 4
  %13120 = add i32 %13119, %13114
  %13121 = zext i32 %13120 to i64
  store i64 %13121, i64* %RDX.i5984, align 8
  %13122 = icmp ult i32 %13120, %13114
  %13123 = icmp ult i32 %13120, %13119
  %13124 = or i1 %13122, %13123
  %13125 = zext i1 %13124 to i8
  store i8 %13125, i8* %44, align 1
  %13126 = and i32 %13120, 255
  %13127 = tail call i32 @llvm.ctpop.i32(i32 %13126)
  %13128 = trunc i32 %13127 to i8
  %13129 = and i8 %13128, 1
  %13130 = xor i8 %13129, 1
  store i8 %13130, i8* %51, align 1
  %13131 = xor i32 %13119, %13114
  %13132 = xor i32 %13131, %13120
  %13133 = lshr i32 %13132, 4
  %13134 = trunc i32 %13133 to i8
  %13135 = and i8 %13134, 1
  store i8 %13135, i8* %56, align 1
  %13136 = icmp eq i32 %13120, 0
  %13137 = zext i1 %13136 to i8
  store i8 %13137, i8* %59, align 1
  %13138 = lshr i32 %13120, 31
  %13139 = trunc i32 %13138 to i8
  store i8 %13139, i8* %62, align 1
  %13140 = lshr i32 %13114, 31
  %13141 = lshr i32 %13119, 31
  %13142 = xor i32 %13138, %13140
  %13143 = xor i32 %13138, %13141
  %13144 = add nuw nsw i32 %13142, %13143
  %13145 = icmp eq i32 %13144, 2
  %13146 = zext i1 %13145 to i8
  store i8 %13146, i8* %68, align 1
  %13147 = sext i32 %13120 to i64
  store i64 %13147, i64* %RSI.i2931, align 8
  %13148 = shl nsw i64 %13147, 3
  %13149 = add i64 %13110, %13148
  %13150 = add i64 %13103, 27
  store i64 %13150, i64* %3, align 8
  %13151 = inttoptr i64 %13149 to i64*
  %13152 = load i64, i64* %13151, align 8
  store i64 %13152, i64* %RCX.i6189, align 8
  %13153 = add i64 %13101, -200
  %13154 = add i64 %13103, 33
  store i64 %13154, i64* %3, align 8
  %13155 = inttoptr i64 %13153 to i32*
  %13156 = load i32, i32* %13155, align 4
  %13157 = zext i32 %13156 to i64
  store i64 %13157, i64* %RDX.i5984, align 8
  %13158 = add i64 %13101, -88
  %13159 = add i64 %13103, 36
  store i64 %13159, i64* %3, align 8
  %13160 = inttoptr i64 %13158 to i32*
  %13161 = load i32, i32* %13160, align 4
  %13162 = add i32 %13161, %13156
  %13163 = zext i32 %13162 to i64
  store i64 %13163, i64* %RDX.i5984, align 8
  %13164 = icmp ult i32 %13162, %13156
  %13165 = icmp ult i32 %13162, %13161
  %13166 = or i1 %13164, %13165
  %13167 = zext i1 %13166 to i8
  store i8 %13167, i8* %44, align 1
  %13168 = and i32 %13162, 255
  %13169 = tail call i32 @llvm.ctpop.i32(i32 %13168)
  %13170 = trunc i32 %13169 to i8
  %13171 = and i8 %13170, 1
  %13172 = xor i8 %13171, 1
  store i8 %13172, i8* %51, align 1
  %13173 = xor i32 %13161, %13156
  %13174 = xor i32 %13173, %13162
  %13175 = lshr i32 %13174, 4
  %13176 = trunc i32 %13175 to i8
  %13177 = and i8 %13176, 1
  store i8 %13177, i8* %56, align 1
  %13178 = icmp eq i32 %13162, 0
  %13179 = zext i1 %13178 to i8
  store i8 %13179, i8* %59, align 1
  %13180 = lshr i32 %13162, 31
  %13181 = trunc i32 %13180 to i8
  store i8 %13181, i8* %62, align 1
  %13182 = lshr i32 %13156, 31
  %13183 = lshr i32 %13161, 31
  %13184 = xor i32 %13180, %13182
  %13185 = xor i32 %13180, %13183
  %13186 = add nuw nsw i32 %13184, %13185
  %13187 = icmp eq i32 %13186, 2
  %13188 = zext i1 %13187 to i8
  store i8 %13188, i8* %68, align 1
  %13189 = sext i32 %13162 to i64
  store i64 %13189, i64* %RSI.i2931, align 8
  %13190 = shl nsw i64 %13189, 3
  %13191 = add i64 %13152, %13190
  %13192 = add i64 %13103, 43
  store i64 %13192, i64* %3, align 8
  %13193 = inttoptr i64 %13191 to i64*
  %13194 = load i64, i64* %13193, align 8
  store i64 %13194, i64* %RCX.i6189, align 8
  %13195 = add i64 %13194, 2
  %13196 = load i16, i16* %AX.i4810, align 2
  %13197 = add i64 %13103, 47
  store i64 %13197, i64* %3, align 8
  %13198 = inttoptr i64 %13195 to i16*
  store i16 %13196, i16* %13198, align 2
  %13199 = load i64, i64* %RBP.i, align 8
  %13200 = add i64 %13199, -88
  %13201 = load i64, i64* %3, align 8
  %13202 = add i64 %13201, 3
  store i64 %13202, i64* %3, align 8
  %13203 = inttoptr i64 %13200 to i32*
  %13204 = load i32, i32* %13203, align 4
  %13205 = add i32 %13204, 1
  %13206 = zext i32 %13205 to i64
  store i64 %13206, i64* %.pre243, align 8
  %13207 = icmp eq i32 %13204, -1
  %13208 = icmp eq i32 %13205, 0
  %13209 = or i1 %13207, %13208
  %13210 = zext i1 %13209 to i8
  store i8 %13210, i8* %44, align 1
  %13211 = and i32 %13205, 255
  %13212 = tail call i32 @llvm.ctpop.i32(i32 %13211)
  %13213 = trunc i32 %13212 to i8
  %13214 = and i8 %13213, 1
  %13215 = xor i8 %13214, 1
  store i8 %13215, i8* %51, align 1
  %13216 = xor i32 %13205, %13204
  %13217 = lshr i32 %13216, 4
  %13218 = trunc i32 %13217 to i8
  %13219 = and i8 %13218, 1
  store i8 %13219, i8* %56, align 1
  %13220 = zext i1 %13208 to i8
  store i8 %13220, i8* %59, align 1
  %13221 = lshr i32 %13205, 31
  %13222 = trunc i32 %13221 to i8
  store i8 %13222, i8* %62, align 1
  %13223 = lshr i32 %13204, 31
  %13224 = xor i32 %13221, %13223
  %13225 = add nuw nsw i32 %13224, %13221
  %13226 = icmp eq i32 %13225, 2
  %13227 = zext i1 %13226 to i8
  store i8 %13227, i8* %68, align 1
  %13228 = add i64 %13201, 9
  store i64 %13228, i64* %3, align 8
  store i32 %13205, i32* %13203, align 4
  %13229 = load i64, i64* %3, align 8
  %13230 = add i64 %13229, -250
  store i64 %13230, i64* %3, align 8
  br label %block_.L_4706a6

block_.L_4707a5:                                  ; preds = %block_.L_4706a6
  %13231 = add i64 %12707, -84
  %13232 = add i64 %12750, 8
  store i64 %13232, i64* %3, align 8
  %13233 = inttoptr i64 %13231 to i32*
  %13234 = load i32, i32* %13233, align 4
  %13235 = add i32 %13234, 1
  %13236 = zext i32 %13235 to i64
  store i64 %13236, i64* %.pre243, align 8
  %13237 = icmp eq i32 %13234, -1
  %13238 = icmp eq i32 %13235, 0
  %13239 = or i1 %13237, %13238
  %13240 = zext i1 %13239 to i8
  store i8 %13240, i8* %44, align 1
  %13241 = and i32 %13235, 255
  %13242 = tail call i32 @llvm.ctpop.i32(i32 %13241)
  %13243 = trunc i32 %13242 to i8
  %13244 = and i8 %13243, 1
  %13245 = xor i8 %13244, 1
  store i8 %13245, i8* %51, align 1
  %13246 = xor i32 %13235, %13234
  %13247 = lshr i32 %13246, 4
  %13248 = trunc i32 %13247 to i8
  %13249 = and i8 %13248, 1
  store i8 %13249, i8* %56, align 1
  %13250 = zext i1 %13238 to i8
  store i8 %13250, i8* %59, align 1
  %13251 = lshr i32 %13235, 31
  %13252 = trunc i32 %13251 to i8
  store i8 %13252, i8* %62, align 1
  %13253 = lshr i32 %13234, 31
  %13254 = xor i32 %13251, %13253
  %13255 = add nuw nsw i32 %13254, %13251
  %13256 = icmp eq i32 %13255, 2
  %13257 = zext i1 %13256 to i8
  store i8 %13257, i8* %68, align 1
  %13258 = add i64 %12750, 14
  store i64 %13258, i64* %3, align 8
  store i32 %13235, i32* %13233, align 4
  %13259 = load i64, i64* %3, align 8
  %13260 = add i64 %13259, -293
  store i64 %13260, i64* %3, align 8
  br label %block_.L_47068e

block_.L_4707b8:                                  ; preds = %block_.L_47068e
  %13261 = add i64 %12702, 222
  br label %block_.L_470896

block_.L_4707bd:                                  ; preds = %block_.L_47063e
  %13262 = load i64, i64* %RBP.i, align 8
  %13263 = add i64 %13262, -84
  %13264 = add i64 %12531, 7
  store i64 %13264, i64* %3, align 8
  %13265 = inttoptr i64 %13263 to i32*
  store i32 0, i32* %13265, align 4
  %.pre213 = load i64, i64* %3, align 8
  br label %block_.L_4707c4

block_.L_4707c4:                                  ; preds = %block_.L_47087e, %block_.L_4707bd
  %13266 = phi i64 [ %13673, %block_.L_47087e ], [ %.pre213, %block_.L_4707bd ]
  %13267 = load i64, i64* %RBP.i, align 8
  %13268 = add i64 %13267, -84
  %13269 = add i64 %13266, 3
  store i64 %13269, i64* %3, align 8
  %13270 = inttoptr i64 %13268 to i32*
  %13271 = load i32, i32* %13270, align 4
  %13272 = zext i32 %13271 to i64
  store i64 %13272, i64* %.pre243, align 8
  %13273 = add i64 %13267, -108
  %13274 = add i64 %13266, 6
  store i64 %13274, i64* %3, align 8
  %13275 = inttoptr i64 %13273 to i32*
  %13276 = load i32, i32* %13275, align 4
  %13277 = sext i32 %13276 to i64
  %13278 = ashr i64 %13277, 1
  %13279 = lshr i64 %13278, 1
  %13280 = and i64 %13279, 4294967295
  store i64 %13280, i64* %RCX.i6189, align 8
  %13281 = trunc i64 %13279 to i32
  %13282 = sub i32 %13271, %13281
  %13283 = icmp ult i32 %13271, %13281
  %13284 = zext i1 %13283 to i8
  store i8 %13284, i8* %44, align 1
  %13285 = and i32 %13282, 255
  %13286 = tail call i32 @llvm.ctpop.i32(i32 %13285)
  %13287 = trunc i32 %13286 to i8
  %13288 = and i8 %13287, 1
  %13289 = xor i8 %13288, 1
  store i8 %13289, i8* %51, align 1
  %13290 = xor i32 %13281, %13271
  %13291 = xor i32 %13290, %13282
  %13292 = lshr i32 %13291, 4
  %13293 = trunc i32 %13292 to i8
  %13294 = and i8 %13293, 1
  store i8 %13294, i8* %56, align 1
  %13295 = icmp eq i32 %13282, 0
  %13296 = zext i1 %13295 to i8
  store i8 %13296, i8* %59, align 1
  %13297 = lshr i32 %13282, 31
  %13298 = trunc i32 %13297 to i8
  store i8 %13298, i8* %62, align 1
  %13299 = lshr i32 %13271, 31
  %13300 = lshr i64 %13278, 32
  %13301 = trunc i64 %13300 to i32
  %13302 = and i32 %13301, 1
  %13303 = xor i32 %13302, %13299
  %13304 = xor i32 %13297, %13299
  %13305 = add nuw nsw i32 %13304, %13303
  %13306 = icmp eq i32 %13305, 2
  %13307 = zext i1 %13306 to i8
  store i8 %13307, i8* %68, align 1
  %13308 = icmp ne i8 %13298, 0
  %13309 = xor i1 %13308, %13306
  %.v293 = select i1 %13309, i64 17, i64 205
  %13310 = add i64 %13266, %.v293
  store i64 %13310, i64* %3, align 8
  br i1 %13309, label %block_4707d5, label %block_.L_470891

block_4707d5:                                     ; preds = %block_.L_4707c4
  %13311 = add i64 %13267, -88
  %13312 = add i64 %13310, 7
  store i64 %13312, i64* %3, align 8
  %13313 = inttoptr i64 %13311 to i32*
  store i32 0, i32* %13313, align 4
  %.pre227 = load i64, i64* %3, align 8
  br label %block_.L_4707dc

block_.L_4707dc:                                  ; preds = %block_4707ed, %block_4707d5
  %13314 = phi i64 [ %13643, %block_4707ed ], [ %.pre227, %block_4707d5 ]
  %13315 = load i64, i64* %RBP.i, align 8
  %13316 = add i64 %13315, -88
  %13317 = add i64 %13314, 3
  store i64 %13317, i64* %3, align 8
  %13318 = inttoptr i64 %13316 to i32*
  %13319 = load i32, i32* %13318, align 4
  %13320 = zext i32 %13319 to i64
  store i64 %13320, i64* %.pre243, align 8
  %13321 = add i64 %13315, -112
  %13322 = add i64 %13314, 6
  store i64 %13322, i64* %3, align 8
  %13323 = inttoptr i64 %13321 to i32*
  %13324 = load i32, i32* %13323, align 4
  %13325 = sext i32 %13324 to i64
  %13326 = ashr i64 %13325, 1
  %13327 = lshr i64 %13326, 1
  %13328 = and i64 %13327, 4294967295
  store i64 %13328, i64* %RCX.i6189, align 8
  %13329 = trunc i64 %13327 to i32
  %13330 = sub i32 %13319, %13329
  %13331 = icmp ult i32 %13319, %13329
  %13332 = zext i1 %13331 to i8
  store i8 %13332, i8* %44, align 1
  %13333 = and i32 %13330, 255
  %13334 = tail call i32 @llvm.ctpop.i32(i32 %13333)
  %13335 = trunc i32 %13334 to i8
  %13336 = and i8 %13335, 1
  %13337 = xor i8 %13336, 1
  store i8 %13337, i8* %51, align 1
  %13338 = xor i32 %13329, %13319
  %13339 = xor i32 %13338, %13330
  %13340 = lshr i32 %13339, 4
  %13341 = trunc i32 %13340 to i8
  %13342 = and i8 %13341, 1
  store i8 %13342, i8* %56, align 1
  %13343 = icmp eq i32 %13330, 0
  %13344 = zext i1 %13343 to i8
  store i8 %13344, i8* %59, align 1
  %13345 = lshr i32 %13330, 31
  %13346 = trunc i32 %13345 to i8
  store i8 %13346, i8* %62, align 1
  %13347 = lshr i32 %13319, 31
  %13348 = lshr i64 %13326, 32
  %13349 = trunc i64 %13348 to i32
  %13350 = and i32 %13349, 1
  %13351 = xor i32 %13350, %13347
  %13352 = xor i32 %13345, %13347
  %13353 = add nuw nsw i32 %13352, %13351
  %13354 = icmp eq i32 %13353, 2
  %13355 = zext i1 %13354 to i8
  store i8 %13355, i8* %68, align 1
  %13356 = icmp ne i8 %13346, 0
  %13357 = xor i1 %13356, %13354
  %.v248 = select i1 %13357, i64 17, i64 162
  %13358 = add i64 %13314, %.v248
  store i64 %13358, i64* %3, align 8
  br i1 %13357, label %block_4707ed, label %block_.L_47087e

block_4707ed:                                     ; preds = %block_.L_4707dc
  %13359 = add i64 %13315, -78
  %13360 = add i64 %13358, 4
  store i64 %13360, i64* %3, align 8
  %13361 = inttoptr i64 %13359 to i16*
  %13362 = load i16, i16* %13361, align 2
  store i16 %13362, i16* %AX.i4810, align 2
  %13363 = add i64 %13315, -144
  %13364 = add i64 %13358, 11
  store i64 %13364, i64* %3, align 8
  %13365 = inttoptr i64 %13363 to i64*
  %13366 = load i64, i64* %13365, align 8
  store i64 %13366, i64* %RCX.i6189, align 8
  %13367 = add i64 %13315, -100
  %13368 = add i64 %13358, 14
  store i64 %13368, i64* %3, align 8
  %13369 = inttoptr i64 %13367 to i32*
  %13370 = load i32, i32* %13369, align 4
  %13371 = zext i32 %13370 to i64
  store i64 %13371, i64* %RDX.i5984, align 8
  %13372 = add i64 %13315, -84
  %13373 = add i64 %13358, 17
  store i64 %13373, i64* %3, align 8
  %13374 = inttoptr i64 %13372 to i32*
  %13375 = load i32, i32* %13374, align 4
  %13376 = add i32 %13375, %13370
  %13377 = zext i32 %13376 to i64
  store i64 %13377, i64* %RDX.i5984, align 8
  %13378 = icmp ult i32 %13376, %13370
  %13379 = icmp ult i32 %13376, %13375
  %13380 = or i1 %13378, %13379
  %13381 = zext i1 %13380 to i8
  store i8 %13381, i8* %44, align 1
  %13382 = and i32 %13376, 255
  %13383 = tail call i32 @llvm.ctpop.i32(i32 %13382)
  %13384 = trunc i32 %13383 to i8
  %13385 = and i8 %13384, 1
  %13386 = xor i8 %13385, 1
  store i8 %13386, i8* %51, align 1
  %13387 = xor i32 %13375, %13370
  %13388 = xor i32 %13387, %13376
  %13389 = lshr i32 %13388, 4
  %13390 = trunc i32 %13389 to i8
  %13391 = and i8 %13390, 1
  store i8 %13391, i8* %56, align 1
  %13392 = icmp eq i32 %13376, 0
  %13393 = zext i1 %13392 to i8
  store i8 %13393, i8* %59, align 1
  %13394 = lshr i32 %13376, 31
  %13395 = trunc i32 %13394 to i8
  store i8 %13395, i8* %62, align 1
  %13396 = lshr i32 %13370, 31
  %13397 = lshr i32 %13375, 31
  %13398 = xor i32 %13394, %13396
  %13399 = xor i32 %13394, %13397
  %13400 = add nuw nsw i32 %13398, %13399
  %13401 = icmp eq i32 %13400, 2
  %13402 = zext i1 %13401 to i8
  store i8 %13402, i8* %68, align 1
  %13403 = sext i32 %13376 to i64
  store i64 %13403, i64* %RSI.i2931, align 8
  %13404 = shl nsw i64 %13403, 3
  %13405 = add i64 %13366, %13404
  %13406 = add i64 %13358, 24
  store i64 %13406, i64* %3, align 8
  %13407 = inttoptr i64 %13405 to i64*
  %13408 = load i64, i64* %13407, align 8
  store i64 %13408, i64* %RCX.i6189, align 8
  %13409 = add i64 %13315, -104
  %13410 = add i64 %13358, 27
  store i64 %13410, i64* %3, align 8
  %13411 = inttoptr i64 %13409 to i32*
  %13412 = load i32, i32* %13411, align 4
  %13413 = zext i32 %13412 to i64
  store i64 %13413, i64* %RDX.i5984, align 8
  %13414 = add i64 %13358, 30
  store i64 %13414, i64* %3, align 8
  %13415 = load i32, i32* %13318, align 4
  %13416 = add i32 %13415, %13412
  %13417 = zext i32 %13416 to i64
  store i64 %13417, i64* %RDX.i5984, align 8
  %13418 = icmp ult i32 %13416, %13412
  %13419 = icmp ult i32 %13416, %13415
  %13420 = or i1 %13418, %13419
  %13421 = zext i1 %13420 to i8
  store i8 %13421, i8* %44, align 1
  %13422 = and i32 %13416, 255
  %13423 = tail call i32 @llvm.ctpop.i32(i32 %13422)
  %13424 = trunc i32 %13423 to i8
  %13425 = and i8 %13424, 1
  %13426 = xor i8 %13425, 1
  store i8 %13426, i8* %51, align 1
  %13427 = xor i32 %13415, %13412
  %13428 = xor i32 %13427, %13416
  %13429 = lshr i32 %13428, 4
  %13430 = trunc i32 %13429 to i8
  %13431 = and i8 %13430, 1
  store i8 %13431, i8* %56, align 1
  %13432 = icmp eq i32 %13416, 0
  %13433 = zext i1 %13432 to i8
  store i8 %13433, i8* %59, align 1
  %13434 = lshr i32 %13416, 31
  %13435 = trunc i32 %13434 to i8
  store i8 %13435, i8* %62, align 1
  %13436 = lshr i32 %13412, 31
  %13437 = lshr i32 %13415, 31
  %13438 = xor i32 %13434, %13436
  %13439 = xor i32 %13434, %13437
  %13440 = add nuw nsw i32 %13438, %13439
  %13441 = icmp eq i32 %13440, 2
  %13442 = zext i1 %13441 to i8
  store i8 %13442, i8* %68, align 1
  %13443 = sext i32 %13416 to i64
  store i64 %13443, i64* %RSI.i2931, align 8
  %13444 = shl nsw i64 %13443, 3
  %13445 = add i64 %13408, %13444
  %13446 = add i64 %13358, 37
  store i64 %13446, i64* %3, align 8
  %13447 = inttoptr i64 %13445 to i64*
  %13448 = load i64, i64* %13447, align 8
  store i64 %13448, i64* %RCX.i6189, align 8
  %13449 = load i64, i64* %RBP.i, align 8
  %13450 = add i64 %13449, -48
  %13451 = add i64 %13358, 41
  store i64 %13451, i64* %3, align 8
  %13452 = inttoptr i64 %13450 to i32*
  %13453 = load i32, i32* %13452, align 4
  %13454 = sext i32 %13453 to i64
  store i64 %13454, i64* %RSI.i2931, align 8
  %13455 = shl nsw i64 %13454, 3
  %13456 = add i64 %13455, %13448
  %13457 = add i64 %13358, 45
  store i64 %13457, i64* %3, align 8
  %13458 = inttoptr i64 %13456 to i64*
  %13459 = load i64, i64* %13458, align 8
  store i64 %13459, i64* %RCX.i6189, align 8
  %13460 = add i64 %13449, -42
  %13461 = add i64 %13358, 50
  store i64 %13461, i64* %3, align 8
  %13462 = inttoptr i64 %13460 to i16*
  %13463 = load i16, i16* %13462, align 2
  %13464 = sext i16 %13463 to i64
  store i64 %13464, i64* %RSI.i2931, align 8
  %13465 = shl nsw i64 %13464, 3
  %13466 = add i64 %13465, %13459
  %13467 = add i64 %13358, 54
  store i64 %13467, i64* %3, align 8
  %13468 = inttoptr i64 %13466 to i64*
  %13469 = load i64, i64* %13468, align 8
  store i64 %13469, i64* %RCX.i6189, align 8
  %13470 = add i64 %13449, -60
  %13471 = add i64 %13358, 58
  store i64 %13471, i64* %3, align 8
  %13472 = inttoptr i64 %13470 to i32*
  %13473 = load i32, i32* %13472, align 4
  %13474 = sext i32 %13473 to i64
  store i64 %13474, i64* %RSI.i2931, align 8
  %13475 = shl nsw i64 %13474, 3
  %13476 = add i64 %13475, %13469
  %13477 = add i64 %13358, 62
  store i64 %13477, i64* %3, align 8
  %13478 = inttoptr i64 %13476 to i64*
  %13479 = load i64, i64* %13478, align 8
  store i64 %13479, i64* %RCX.i6189, align 8
  %13480 = load i16, i16* %AX.i4810, align 2
  %13481 = add i64 %13358, 65
  store i64 %13481, i64* %3, align 8
  %13482 = inttoptr i64 %13479 to i16*
  store i16 %13480, i16* %13482, align 2
  %13483 = load i64, i64* %RBP.i, align 8
  %13484 = add i64 %13483, -80
  %13485 = load i64, i64* %3, align 8
  %13486 = add i64 %13485, 4
  store i64 %13486, i64* %3, align 8
  %13487 = inttoptr i64 %13484 to i16*
  %13488 = load i16, i16* %13487, align 2
  store i16 %13488, i16* %AX.i4810, align 2
  %13489 = add i64 %13483, -144
  %13490 = add i64 %13485, 11
  store i64 %13490, i64* %3, align 8
  %13491 = inttoptr i64 %13489 to i64*
  %13492 = load i64, i64* %13491, align 8
  store i64 %13492, i64* %RCX.i6189, align 8
  %13493 = add i64 %13483, -100
  %13494 = add i64 %13485, 14
  store i64 %13494, i64* %3, align 8
  %13495 = inttoptr i64 %13493 to i32*
  %13496 = load i32, i32* %13495, align 4
  %13497 = zext i32 %13496 to i64
  store i64 %13497, i64* %RDX.i5984, align 8
  %13498 = add i64 %13483, -84
  %13499 = add i64 %13485, 17
  store i64 %13499, i64* %3, align 8
  %13500 = inttoptr i64 %13498 to i32*
  %13501 = load i32, i32* %13500, align 4
  %13502 = add i32 %13501, %13496
  %13503 = zext i32 %13502 to i64
  store i64 %13503, i64* %RDX.i5984, align 8
  %13504 = icmp ult i32 %13502, %13496
  %13505 = icmp ult i32 %13502, %13501
  %13506 = or i1 %13504, %13505
  %13507 = zext i1 %13506 to i8
  store i8 %13507, i8* %44, align 1
  %13508 = and i32 %13502, 255
  %13509 = tail call i32 @llvm.ctpop.i32(i32 %13508)
  %13510 = trunc i32 %13509 to i8
  %13511 = and i8 %13510, 1
  %13512 = xor i8 %13511, 1
  store i8 %13512, i8* %51, align 1
  %13513 = xor i32 %13501, %13496
  %13514 = xor i32 %13513, %13502
  %13515 = lshr i32 %13514, 4
  %13516 = trunc i32 %13515 to i8
  %13517 = and i8 %13516, 1
  store i8 %13517, i8* %56, align 1
  %13518 = icmp eq i32 %13502, 0
  %13519 = zext i1 %13518 to i8
  store i8 %13519, i8* %59, align 1
  %13520 = lshr i32 %13502, 31
  %13521 = trunc i32 %13520 to i8
  store i8 %13521, i8* %62, align 1
  %13522 = lshr i32 %13496, 31
  %13523 = lshr i32 %13501, 31
  %13524 = xor i32 %13520, %13522
  %13525 = xor i32 %13520, %13523
  %13526 = add nuw nsw i32 %13524, %13525
  %13527 = icmp eq i32 %13526, 2
  %13528 = zext i1 %13527 to i8
  store i8 %13528, i8* %68, align 1
  %13529 = sext i32 %13502 to i64
  store i64 %13529, i64* %RSI.i2931, align 8
  %13530 = shl nsw i64 %13529, 3
  %13531 = add i64 %13492, %13530
  %13532 = add i64 %13485, 24
  store i64 %13532, i64* %3, align 8
  %13533 = inttoptr i64 %13531 to i64*
  %13534 = load i64, i64* %13533, align 8
  store i64 %13534, i64* %RCX.i6189, align 8
  %13535 = add i64 %13483, -104
  %13536 = add i64 %13485, 27
  store i64 %13536, i64* %3, align 8
  %13537 = inttoptr i64 %13535 to i32*
  %13538 = load i32, i32* %13537, align 4
  %13539 = zext i32 %13538 to i64
  store i64 %13539, i64* %RDX.i5984, align 8
  %13540 = add i64 %13483, -88
  %13541 = add i64 %13485, 30
  store i64 %13541, i64* %3, align 8
  %13542 = inttoptr i64 %13540 to i32*
  %13543 = load i32, i32* %13542, align 4
  %13544 = add i32 %13543, %13538
  %13545 = zext i32 %13544 to i64
  store i64 %13545, i64* %RDX.i5984, align 8
  %13546 = icmp ult i32 %13544, %13538
  %13547 = icmp ult i32 %13544, %13543
  %13548 = or i1 %13546, %13547
  %13549 = zext i1 %13548 to i8
  store i8 %13549, i8* %44, align 1
  %13550 = and i32 %13544, 255
  %13551 = tail call i32 @llvm.ctpop.i32(i32 %13550)
  %13552 = trunc i32 %13551 to i8
  %13553 = and i8 %13552, 1
  %13554 = xor i8 %13553, 1
  store i8 %13554, i8* %51, align 1
  %13555 = xor i32 %13543, %13538
  %13556 = xor i32 %13555, %13544
  %13557 = lshr i32 %13556, 4
  %13558 = trunc i32 %13557 to i8
  %13559 = and i8 %13558, 1
  store i8 %13559, i8* %56, align 1
  %13560 = icmp eq i32 %13544, 0
  %13561 = zext i1 %13560 to i8
  store i8 %13561, i8* %59, align 1
  %13562 = lshr i32 %13544, 31
  %13563 = trunc i32 %13562 to i8
  store i8 %13563, i8* %62, align 1
  %13564 = lshr i32 %13538, 31
  %13565 = lshr i32 %13543, 31
  %13566 = xor i32 %13562, %13564
  %13567 = xor i32 %13562, %13565
  %13568 = add nuw nsw i32 %13566, %13567
  %13569 = icmp eq i32 %13568, 2
  %13570 = zext i1 %13569 to i8
  store i8 %13570, i8* %68, align 1
  %13571 = sext i32 %13544 to i64
  store i64 %13571, i64* %RSI.i2931, align 8
  %13572 = shl nsw i64 %13571, 3
  %13573 = add i64 %13534, %13572
  %13574 = add i64 %13485, 37
  store i64 %13574, i64* %3, align 8
  %13575 = inttoptr i64 %13573 to i64*
  %13576 = load i64, i64* %13575, align 8
  store i64 %13576, i64* %RCX.i6189, align 8
  %13577 = load i64, i64* %RBP.i, align 8
  %13578 = add i64 %13577, -48
  %13579 = add i64 %13485, 41
  store i64 %13579, i64* %3, align 8
  %13580 = inttoptr i64 %13578 to i32*
  %13581 = load i32, i32* %13580, align 4
  %13582 = sext i32 %13581 to i64
  store i64 %13582, i64* %RSI.i2931, align 8
  %13583 = shl nsw i64 %13582, 3
  %13584 = add i64 %13583, %13576
  %13585 = add i64 %13485, 45
  store i64 %13585, i64* %3, align 8
  %13586 = inttoptr i64 %13584 to i64*
  %13587 = load i64, i64* %13586, align 8
  store i64 %13587, i64* %RCX.i6189, align 8
  %13588 = add i64 %13577, -42
  %13589 = add i64 %13485, 50
  store i64 %13589, i64* %3, align 8
  %13590 = inttoptr i64 %13588 to i16*
  %13591 = load i16, i16* %13590, align 2
  %13592 = sext i16 %13591 to i64
  store i64 %13592, i64* %RSI.i2931, align 8
  %13593 = shl nsw i64 %13592, 3
  %13594 = add i64 %13593, %13587
  %13595 = add i64 %13485, 54
  store i64 %13595, i64* %3, align 8
  %13596 = inttoptr i64 %13594 to i64*
  %13597 = load i64, i64* %13596, align 8
  store i64 %13597, i64* %RCX.i6189, align 8
  %13598 = add i64 %13577, -60
  %13599 = add i64 %13485, 58
  store i64 %13599, i64* %3, align 8
  %13600 = inttoptr i64 %13598 to i32*
  %13601 = load i32, i32* %13600, align 4
  %13602 = sext i32 %13601 to i64
  store i64 %13602, i64* %RSI.i2931, align 8
  %13603 = shl nsw i64 %13602, 3
  %13604 = add i64 %13603, %13597
  %13605 = add i64 %13485, 62
  store i64 %13605, i64* %3, align 8
  %13606 = inttoptr i64 %13604 to i64*
  %13607 = load i64, i64* %13606, align 8
  store i64 %13607, i64* %RCX.i6189, align 8
  %13608 = add i64 %13607, 2
  %13609 = load i16, i16* %AX.i4810, align 2
  %13610 = add i64 %13485, 66
  store i64 %13610, i64* %3, align 8
  %13611 = inttoptr i64 %13608 to i16*
  store i16 %13609, i16* %13611, align 2
  %13612 = load i64, i64* %RBP.i, align 8
  %13613 = add i64 %13612, -88
  %13614 = load i64, i64* %3, align 8
  %13615 = add i64 %13614, 3
  store i64 %13615, i64* %3, align 8
  %13616 = inttoptr i64 %13613 to i32*
  %13617 = load i32, i32* %13616, align 4
  %13618 = add i32 %13617, 1
  %13619 = zext i32 %13618 to i64
  store i64 %13619, i64* %.pre243, align 8
  %13620 = icmp eq i32 %13617, -1
  %13621 = icmp eq i32 %13618, 0
  %13622 = or i1 %13620, %13621
  %13623 = zext i1 %13622 to i8
  store i8 %13623, i8* %44, align 1
  %13624 = and i32 %13618, 255
  %13625 = tail call i32 @llvm.ctpop.i32(i32 %13624)
  %13626 = trunc i32 %13625 to i8
  %13627 = and i8 %13626, 1
  %13628 = xor i8 %13627, 1
  store i8 %13628, i8* %51, align 1
  %13629 = xor i32 %13618, %13617
  %13630 = lshr i32 %13629, 4
  %13631 = trunc i32 %13630 to i8
  %13632 = and i8 %13631, 1
  store i8 %13632, i8* %56, align 1
  %13633 = zext i1 %13621 to i8
  store i8 %13633, i8* %59, align 1
  %13634 = lshr i32 %13618, 31
  %13635 = trunc i32 %13634 to i8
  store i8 %13635, i8* %62, align 1
  %13636 = lshr i32 %13617, 31
  %13637 = xor i32 %13634, %13636
  %13638 = add nuw nsw i32 %13637, %13634
  %13639 = icmp eq i32 %13638, 2
  %13640 = zext i1 %13639 to i8
  store i8 %13640, i8* %68, align 1
  %13641 = add i64 %13614, 9
  store i64 %13641, i64* %3, align 8
  store i32 %13618, i32* %13616, align 4
  %13642 = load i64, i64* %3, align 8
  %13643 = add i64 %13642, -157
  store i64 %13643, i64* %3, align 8
  br label %block_.L_4707dc

block_.L_47087e:                                  ; preds = %block_.L_4707dc
  %13644 = add i64 %13315, -84
  %13645 = add i64 %13358, 8
  store i64 %13645, i64* %3, align 8
  %13646 = inttoptr i64 %13644 to i32*
  %13647 = load i32, i32* %13646, align 4
  %13648 = add i32 %13647, 1
  %13649 = zext i32 %13648 to i64
  store i64 %13649, i64* %.pre243, align 8
  %13650 = icmp eq i32 %13647, -1
  %13651 = icmp eq i32 %13648, 0
  %13652 = or i1 %13650, %13651
  %13653 = zext i1 %13652 to i8
  store i8 %13653, i8* %44, align 1
  %13654 = and i32 %13648, 255
  %13655 = tail call i32 @llvm.ctpop.i32(i32 %13654)
  %13656 = trunc i32 %13655 to i8
  %13657 = and i8 %13656, 1
  %13658 = xor i8 %13657, 1
  store i8 %13658, i8* %51, align 1
  %13659 = xor i32 %13648, %13647
  %13660 = lshr i32 %13659, 4
  %13661 = trunc i32 %13660 to i8
  %13662 = and i8 %13661, 1
  store i8 %13662, i8* %56, align 1
  %13663 = zext i1 %13651 to i8
  store i8 %13663, i8* %59, align 1
  %13664 = lshr i32 %13648, 31
  %13665 = trunc i32 %13664 to i8
  store i8 %13665, i8* %62, align 1
  %13666 = lshr i32 %13647, 31
  %13667 = xor i32 %13664, %13666
  %13668 = add nuw nsw i32 %13667, %13664
  %13669 = icmp eq i32 %13668, 2
  %13670 = zext i1 %13669 to i8
  store i8 %13670, i8* %68, align 1
  %13671 = add i64 %13358, 14
  store i64 %13671, i64* %3, align 8
  store i32 %13648, i32* %13646, align 4
  %13672 = load i64, i64* %3, align 8
  %13673 = add i64 %13672, -200
  store i64 %13673, i64* %3, align 8
  br label %block_.L_4707c4

block_.L_470891:                                  ; preds = %block_.L_4707c4
  %13674 = add i64 %13310, 5
  store i64 %13674, i64* %3, align 8
  br label %block_.L_470896

block_.L_470896:                                  ; preds = %block_.L_470891, %block_.L_4707b8
  %13675 = phi i64 [ %12659, %block_.L_4707b8 ], [ %13267, %block_.L_470891 ]
  %storemerge94 = phi i64 [ %13261, %block_.L_4707b8 ], [ %13674, %block_.L_470891 ]
  %13676 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %13676, i64* %.pre243, align 8
  %13677 = add i64 %13676, 24
  %13678 = add i64 %storemerge94, 12
  store i64 %13678, i64* %3, align 8
  %13679 = inttoptr i64 %13677 to i32*
  %13680 = load i32, i32* %13679, align 4
  %13681 = add i32 %13680, -1
  %13682 = icmp eq i32 %13680, 0
  %13683 = zext i1 %13682 to i8
  store i8 %13683, i8* %44, align 1
  %13684 = and i32 %13681, 255
  %13685 = tail call i32 @llvm.ctpop.i32(i32 %13684)
  %13686 = trunc i32 %13685 to i8
  %13687 = and i8 %13686, 1
  %13688 = xor i8 %13687, 1
  store i8 %13688, i8* %51, align 1
  %13689 = xor i32 %13681, %13680
  %13690 = lshr i32 %13689, 4
  %13691 = trunc i32 %13690 to i8
  %13692 = and i8 %13691, 1
  store i8 %13692, i8* %56, align 1
  %13693 = icmp eq i32 %13681, 0
  %13694 = zext i1 %13693 to i8
  store i8 %13694, i8* %59, align 1
  %13695 = lshr i32 %13681, 31
  %13696 = trunc i32 %13695 to i8
  store i8 %13696, i8* %62, align 1
  %13697 = lshr i32 %13680, 31
  %13698 = xor i32 %13695, %13697
  %13699 = add nuw nsw i32 %13698, %13697
  %13700 = icmp eq i32 %13699, 2
  %13701 = zext i1 %13700 to i8
  store i8 %13701, i8* %68, align 1
  %.v280 = select i1 %13693, i64 18, i64 2146
  %13702 = add i64 %storemerge94, %.v280
  store i64 %13702, i64* %3, align 8
  br i1 %13693, label %block_4708a8, label %block_.L_4710f8

block_4708a8:                                     ; preds = %block_.L_470896
  %13703 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %13703, i64* %.pre243, align 8
  %13704 = add i64 %13703, 1256
  %13705 = add i64 %13702, 15
  store i64 %13705, i64* %3, align 8
  %13706 = inttoptr i64 %13704 to i32*
  %13707 = load i32, i32* %13706, align 4
  store i8 0, i8* %44, align 1
  %13708 = and i32 %13707, 255
  %13709 = tail call i32 @llvm.ctpop.i32(i32 %13708)
  %13710 = trunc i32 %13709 to i8
  %13711 = and i8 %13710, 1
  %13712 = xor i8 %13711, 1
  store i8 %13712, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %13713 = icmp eq i32 %13707, 0
  %13714 = zext i1 %13713 to i8
  store i8 %13714, i8* %59, align 1
  %13715 = lshr i32 %13707, 31
  %13716 = trunc i32 %13715 to i8
  store i8 %13716, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v281 = select i1 %13713, i64 2128, i64 21
  %13717 = add i64 %13702, %.v281
  store i64 %13717, i64* %3, align 8
  br i1 %13713, label %block_.L_4710f8, label %block_4708bd

block_4708bd:                                     ; preds = %block_4708a8
  %13718 = add i64 %13675, -60
  %13719 = add i64 %13717, 4
  store i64 %13719, i64* %3, align 8
  %13720 = inttoptr i64 %13718 to i32*
  %13721 = load i32, i32* %13720, align 4
  %13722 = add i32 %13721, -1
  %13723 = icmp eq i32 %13721, 0
  %13724 = zext i1 %13723 to i8
  store i8 %13724, i8* %44, align 1
  %13725 = and i32 %13722, 255
  %13726 = tail call i32 @llvm.ctpop.i32(i32 %13725)
  %13727 = trunc i32 %13726 to i8
  %13728 = and i8 %13727, 1
  %13729 = xor i8 %13728, 1
  store i8 %13729, i8* %51, align 1
  %13730 = xor i32 %13722, %13721
  %13731 = lshr i32 %13730, 4
  %13732 = trunc i32 %13731 to i8
  %13733 = and i8 %13732, 1
  store i8 %13733, i8* %56, align 1
  %13734 = icmp eq i32 %13722, 0
  %13735 = zext i1 %13734 to i8
  store i8 %13735, i8* %59, align 1
  %13736 = lshr i32 %13722, 31
  %13737 = trunc i32 %13736 to i8
  store i8 %13737, i8* %62, align 1
  %13738 = lshr i32 %13721, 31
  %13739 = xor i32 %13736, %13738
  %13740 = add nuw nsw i32 %13739, %13738
  %13741 = icmp eq i32 %13740, 2
  %13742 = zext i1 %13741 to i8
  store i8 %13742, i8* %68, align 1
  %.v282 = select i1 %13734, i64 10, i64 2107
  %13743 = add i64 %13717, %.v282
  store i64 %13743, i64* %3, align 8
  br i1 %13734, label %block_4708c7, label %block_.L_4710f8

block_4708c7:                                     ; preds = %block_4708bd
  %13744 = add i64 %13675, -42
  %13745 = add i64 %13743, 4
  store i64 %13745, i64* %3, align 8
  %13746 = inttoptr i64 %13744 to i16*
  %13747 = load i16, i16* %13746, align 2
  %13748 = sext i16 %13747 to i64
  %13749 = and i64 %13748, 4294967295
  store i64 %13749, i64* %.pre243, align 8
  %13750 = sext i16 %13747 to i32
  store i8 0, i8* %44, align 1
  %13751 = and i32 %13750, 255
  %13752 = tail call i32 @llvm.ctpop.i32(i32 %13751)
  %13753 = trunc i32 %13752 to i8
  %13754 = and i8 %13753, 1
  %13755 = xor i8 %13754, 1
  store i8 %13755, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %13756 = icmp eq i16 %13747, 0
  %13757 = zext i1 %13756 to i8
  store i8 %13757, i8* %59, align 1
  %13758 = lshr i32 %13750, 31
  %13759 = trunc i32 %13758 to i8
  store i8 %13759, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v283 = select i1 %13756, i64 13, i64 2097
  %13760 = add i64 %13743, %.v283
  store i64 %13760, i64* %3, align 8
  br i1 %13756, label %block_4708d4, label %block_.L_4710f8

block_4708d4:                                     ; preds = %block_4708c7
  %13761 = add i64 %13675, -48
  %13762 = add i64 %13760, 4
  store i64 %13762, i64* %3, align 8
  %13763 = inttoptr i64 %13761 to i32*
  %13764 = load i32, i32* %13763, align 4
  store i8 0, i8* %44, align 1
  %13765 = and i32 %13764, 255
  %13766 = tail call i32 @llvm.ctpop.i32(i32 %13765)
  %13767 = trunc i32 %13766 to i8
  %13768 = and i8 %13767, 1
  %13769 = xor i8 %13768, 1
  store i8 %13769, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %13770 = icmp eq i32 %13764, 0
  %13771 = zext i1 %13770 to i8
  store i8 %13771, i8* %59, align 1
  %13772 = lshr i32 %13764, 31
  %13773 = trunc i32 %13772 to i8
  store i8 %13773, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v284 = select i1 %13770, i64 37, i64 10
  %13774 = add i64 %13760, %.v284
  %13775 = add i64 %13774, 8
  store i64 %13775, i64* %3, align 8
  store i64 %13676, i64* %.pre243, align 8
  br i1 %13770, label %block_.L_4708f9, label %block_4708de

block_4708de:                                     ; preds = %block_4708d4
  %13776 = add i64 %13676, 71936
  %13777 = add i64 %13774, 15
  store i64 %13777, i64* %3, align 8
  %13778 = inttoptr i64 %13776 to i64*
  %13779 = load i64, i64* %13778, align 8
  store i64 %13779, i64* %.pre243, align 8
  %13780 = add i64 %13675, -456
  %13781 = add i64 %13774, 22
  store i64 %13781, i64* %3, align 8
  %13782 = inttoptr i64 %13780 to i64*
  store i64 %13779, i64* %13782, align 8
  %13783 = load i64, i64* %3, align 8
  %13784 = add i64 %13783, 27
  store i64 %13784, i64* %3, align 8
  br label %block_.L_47090f

block_.L_4708f9:                                  ; preds = %block_4708d4
  %13785 = add i64 %13676, 71944
  %13786 = add i64 %13774, 15
  store i64 %13786, i64* %3, align 8
  %13787 = inttoptr i64 %13785 to i64*
  %13788 = load i64, i64* %13787, align 8
  store i64 %13788, i64* %.pre243, align 8
  %13789 = add i64 %13675, -456
  %13790 = add i64 %13774, 22
  store i64 %13790, i64* %3, align 8
  %13791 = inttoptr i64 %13789 to i64*
  store i64 %13788, i64* %13791, align 8
  %.pre214 = load i64, i64* %3, align 8
  br label %block_.L_47090f

block_.L_47090f:                                  ; preds = %block_.L_4708f9, %block_4708de
  %13792 = phi i64 [ %.pre214, %block_.L_4708f9 ], [ %13784, %block_4708de ]
  %13793 = load i64, i64* %RBP.i, align 8
  %13794 = add i64 %13793, -456
  %13795 = add i64 %13792, 7
  store i64 %13795, i64* %3, align 8
  %13796 = inttoptr i64 %13794 to i64*
  %13797 = load i64, i64* %13796, align 8
  store i64 %13797, i64* %.pre243, align 8
  store i64 0, i64* %RCX.i6189, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  store i64 1, i64* %RDX.i5984, align 8
  %13798 = add i64 %13793, -234
  store i64 %13798, i64* %RDI.i2935, align 8
  %13799 = add i64 %13793, -208
  %13800 = add i64 %13792, 28
  store i64 %13800, i64* %3, align 8
  %13801 = inttoptr i64 %13799 to i64*
  store i64 %13797, i64* %13801, align 8
  %13802 = load i64, i64* %RBP.i, align 8
  %13803 = add i64 %13802, -92
  %13804 = load i64, i64* %3, align 8
  %13805 = add i64 %13804, 3
  store i64 %13805, i64* %3, align 8
  %13806 = inttoptr i64 %13803 to i32*
  %13807 = load i32, i32* %13806, align 4
  %13808 = zext i32 %13807 to i64
  store i64 %13808, i64* %RSI.i2931, align 8
  %13809 = add i64 %13802, -212
  %13810 = add i64 %13804, 9
  store i64 %13810, i64* %3, align 8
  %13811 = inttoptr i64 %13809 to i32*
  store i32 %13807, i32* %13811, align 4
  %13812 = load i64, i64* %RBP.i, align 8
  %13813 = add i64 %13812, -226
  %13814 = load i64, i64* %3, align 8
  %13815 = add i64 %13814, 9
  store i64 %13815, i64* %3, align 8
  %13816 = inttoptr i64 %13813 to i16*
  store i16 0, i16* %13816, align 2
  %13817 = load i64, i64* %RBP.i, align 8
  %13818 = add i64 %13817, -228
  %13819 = load i64, i64* %3, align 8
  %13820 = add i64 %13819, 9
  store i64 %13820, i64* %3, align 8
  %13821 = inttoptr i64 %13818 to i16*
  store i16 0, i16* %13821, align 2
  %13822 = load i64, i64* %RBP.i, align 8
  %13823 = add i64 %13822, -48
  %13824 = load i64, i64* %3, align 8
  %13825 = add i64 %13824, 3
  store i64 %13825, i64* %3, align 8
  %13826 = inttoptr i64 %13823 to i32*
  %13827 = load i32, i32* %13826, align 4
  %13828 = zext i32 %13827 to i64
  store i64 %13828, i64* %RSI.i2931, align 8
  %R8W.i1118 = bitcast %union.anon* %97 to i16*
  %13829 = trunc i32 %13827 to i16
  store i16 %13829, i16* %R8W.i1118, align 2
  %13830 = add i64 %13822, -230
  %13831 = add i64 %13824, 15
  store i64 %13831, i64* %3, align 8
  %13832 = inttoptr i64 %13830 to i16*
  store i16 %13829, i16* %13832, align 2
  %13833 = load i64, i64* %3, align 8
  %13834 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %13834, i64* %.pre243, align 8
  %13835 = add i64 %13834, 6480
  %13836 = add i64 %13833, 15
  store i64 %13836, i64* %3, align 8
  %13837 = inttoptr i64 %13835 to i64*
  %13838 = load i64, i64* %13837, align 8
  store i64 %13838, i64* %RSI.i2931, align 8
  store i64 %13834, i64* %.pre243, align 8
  %13839 = add i64 %13834, 6504
  %13840 = add i64 %13833, 30
  store i64 %13840, i64* %3, align 8
  %13841 = inttoptr i64 %13839 to i64*
  %13842 = load i64, i64* %13841, align 8
  store i64 %13842, i64* %.pre243, align 8
  %13843 = load i64, i64* %RBP.i, align 8
  %13844 = add i64 %13843, -48
  %13845 = add i64 %13833, 34
  store i64 %13845, i64* %3, align 8
  %13846 = inttoptr i64 %13844 to i32*
  %13847 = load i32, i32* %13846, align 4
  store i8 0, i8* %44, align 1
  %13848 = and i32 %13847, 255
  %13849 = tail call i32 @llvm.ctpop.i32(i32 %13848)
  %13850 = trunc i32 %13849 to i8
  %13851 = and i8 %13850, 1
  %13852 = xor i8 %13851, 1
  store i8 %13852, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %13853 = icmp eq i32 %13847, 0
  %13854 = zext i1 %13853 to i8
  store i8 %13854, i8* %59, align 1
  %13855 = lshr i32 %13847, 31
  %13856 = trunc i32 %13855 to i8
  store i8 %13856, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %13857 = load i32, i32* %ECX.i5565, align 4
  %13858 = load i32, i32* %EDX.i5379, align 4
  %.v354 = select i1 %13853, i32 %13858, i32 %13857
  %13859 = zext i32 %.v354 to i64
  store i64 %13859, i64* %9145, align 8
  %13860 = add i64 %13843, -100
  %13861 = add i64 %13833, 44
  store i64 %13861, i64* %3, align 8
  %13862 = inttoptr i64 %13860 to i32*
  %13863 = load i32, i32* %13862, align 4
  %13864 = zext i32 %13863 to i64
  store i64 %13864, i64* %RDX.i5984, align 8
  %13865 = add i64 %13843, -104
  %13866 = add i64 %13833, 48
  store i64 %13866, i64* %3, align 8
  %13867 = inttoptr i64 %13865 to i32*
  %13868 = load i32, i32* %13867, align 4
  %13869 = zext i32 %13868 to i64
  store i64 %13869, i64* %R10.i6168, align 8
  %13870 = add i64 %13843, -108
  %13871 = add i64 %13833, 52
  store i64 %13871, i64* %3, align 8
  %13872 = inttoptr i64 %13870 to i32*
  %13873 = load i32, i32* %13872, align 4
  %13874 = zext i32 %13873 to i64
  store i64 %13874, i64* %R11.i6166, align 8
  %13875 = add i64 %13843, -112
  %13876 = add i64 %13833, 55
  store i64 %13876, i64* %3, align 8
  %13877 = inttoptr i64 %13875 to i32*
  %13878 = load i32, i32* %13877, align 4
  %13879 = zext i32 %13878 to i64
  store i64 %13879, i64* %RBX.i4440, align 8
  %13880 = add i64 %13843, -460
  %13881 = add i64 %13833, 61
  store i64 %13881, i64* %3, align 8
  %13882 = inttoptr i64 %13880 to i32*
  store i32 %13863, i32* %13882, align 4
  %13883 = load i64, i64* %.pre243, align 8
  %13884 = load i64, i64* %3, align 8
  store i64 %13883, i64* %RDX.i5984, align 8
  %13885 = load i32, i32* %R9D.i6071, align 4
  %13886 = zext i32 %13885 to i64
  store i64 %13886, i64* %9139, align 8
  %13887 = load i64, i64* %RBP.i, align 8
  %13888 = add i64 %13887, -460
  %13889 = add i64 %13884, 13
  store i64 %13889, i64* %3, align 8
  %13890 = inttoptr i64 %13888 to i32*
  %13891 = load i32, i32* %13890, align 4
  %13892 = zext i32 %13891 to i64
  store i64 %13892, i64* %9145, align 8
  %13893 = load i32*, i32** %9168, align 8
  %13894 = load i32, i32* %R10D.i2913, align 4
  %13895 = add i64 %13884, 17
  store i64 %13895, i64* %3, align 8
  store i32 %13894, i32* %13893, align 4
  %13896 = load i64, i64* %6, align 8
  %13897 = add i64 %13896, 8
  %13898 = load i32, i32* %R11D.i2910, align 4
  %13899 = load i64, i64* %3, align 8
  %13900 = add i64 %13899, 5
  store i64 %13900, i64* %3, align 8
  %13901 = inttoptr i64 %13897 to i32*
  store i32 %13898, i32* %13901, align 4
  %13902 = load i64, i64* %6, align 8
  %13903 = add i64 %13902, 16
  %13904 = load i32, i32* %EBX.i2895, align 4
  %13905 = load i64, i64* %3, align 8
  %13906 = add i64 %13905, 4
  store i64 %13906, i64* %3, align 8
  %13907 = inttoptr i64 %13903 to i32*
  store i32 %13904, i32* %13907, align 4
  %13908 = load i64, i64* %3, align 8
  %13909 = add i64 %13908, -81836
  %13910 = add i64 %13908, 5
  %13911 = load i64, i64* %6, align 8
  %13912 = add i64 %13911, -8
  %13913 = inttoptr i64 %13912 to i64*
  store i64 %13910, i64* %13913, align 8
  store i64 %13912, i64* %6, align 8
  store i64 %13909, i64* %3, align 8
  %call2_4709ac = tail call %struct.Memory* @sub_45ca00.SetMotionVectorPredictor(%struct.State* nonnull %0, i64 %13909, %struct.Memory* %MEMORY.59)
  %13914 = load i64, i64* %RBP.i, align 8
  %13915 = add i64 %13914, -78
  %13916 = load i64, i64* %3, align 8
  %13917 = add i64 %13916, 4
  store i64 %13917, i64* %3, align 8
  %13918 = inttoptr i64 %13915 to i16*
  %13919 = load i16, i16* %13918, align 2
  %13920 = sext i16 %13919 to i64
  %13921 = shl nsw i64 %13920, 32
  %13922 = add nsw i64 %13921, 8589934592
  %13923 = ashr i64 %13922, 33
  %13924 = lshr i64 %13923, 1
  %13925 = trunc i64 %13923 to i8
  %13926 = and i8 %13925, 1
  %13927 = trunc i64 %13924 to i32
  %13928 = and i64 %13924, 4294967295
  store i64 %13928, i64* %RCX.i6189, align 8
  store i8 %13926, i8* %44, align 1
  %13929 = and i32 %13927, 255
  %13930 = tail call i32 @llvm.ctpop.i32(i32 %13929)
  %13931 = trunc i32 %13930 to i8
  %13932 = and i8 %13931, 1
  %13933 = xor i8 %13932, 1
  store i8 %13933, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %13934 = icmp eq i32 %13927, 0
  %13935 = zext i1 %13934 to i8
  store i8 %13935, i8* %59, align 1
  %13936 = lshr i64 %13923, 32
  %13937 = trunc i64 %13936 to i8
  %13938 = and i8 %13937, 1
  store i8 %13938, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %13939 = trunc i64 %13924 to i16
  store i16 %13939, i16* %R14W.i2888, align 2
  %13940 = add i64 %13916, 19
  store i64 %13940, i64* %3, align 8
  store i16 %13939, i16* %13918, align 2
  %13941 = load i64, i64* %RBP.i, align 8
  %13942 = add i64 %13941, -80
  %13943 = load i64, i64* %3, align 8
  %13944 = add i64 %13943, 4
  store i64 %13944, i64* %3, align 8
  %13945 = inttoptr i64 %13942 to i16*
  %13946 = load i16, i16* %13945, align 2
  %13947 = sext i16 %13946 to i64
  %13948 = shl nsw i64 %13947, 32
  %13949 = add nsw i64 %13948, 8589934592
  %13950 = ashr i64 %13949, 33
  %13951 = lshr i64 %13950, 1
  %13952 = trunc i64 %13950 to i8
  %13953 = and i8 %13952, 1
  %13954 = trunc i64 %13951 to i32
  %13955 = and i64 %13951, 4294967295
  store i64 %13955, i64* %RCX.i6189, align 8
  store i8 %13953, i8* %44, align 1
  %13956 = and i32 %13954, 255
  %13957 = tail call i32 @llvm.ctpop.i32(i32 %13956)
  %13958 = trunc i32 %13957 to i8
  %13959 = and i8 %13958, 1
  %13960 = xor i8 %13959, 1
  store i8 %13960, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %13961 = icmp eq i32 %13954, 0
  %13962 = zext i1 %13961 to i8
  store i8 %13962, i8* %59, align 1
  %13963 = lshr i64 %13950, 32
  %13964 = trunc i64 %13963 to i8
  %13965 = and i8 %13964, 1
  store i8 %13965, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %13966 = trunc i64 %13951 to i16
  store i16 %13966, i16* %R14W.i2888, align 2
  %13967 = add i64 %13943, 19
  store i64 %13967, i64* %3, align 8
  store i16 %13966, i16* %13945, align 2
  %13968 = load i64, i64* %RBP.i, align 8
  %13969 = add i64 %13968, -84
  %13970 = load i64, i64* %3, align 8
  %13971 = add i64 %13970, 7
  store i64 %13971, i64* %3, align 8
  %13972 = inttoptr i64 %13969 to i32*
  store i32 0, i32* %13972, align 4
  %13973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R14D.i797 = bitcast %union.anon* %16 to i32*
  %R15W.i794 = bitcast %union.anon* %11 to i16*
  %R12W.i791 = bitcast %union.anon* %28 to i16*
  %R13W.i788 = bitcast %union.anon* %22 to i16*
  %13974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13975 = bitcast i64* %13974 to double*
  %.pre215 = load i64, i64* %3, align 8
  br label %block_.L_4709de

block_.L_4709de:                                  ; preds = %routine_sarl__cl___eax.exit, %block_.L_47090f
  %13976 = phi i64 [ %.pre215, %block_.L_47090f ], [ %14659, %routine_sarl__cl___eax.exit ]
  %MEMORY.66 = phi %struct.Memory* [ %call2_4709ac, %block_.L_47090f ], [ %call2_470ca1, %routine_sarl__cl___eax.exit ]
  %13977 = load i64, i64* %RBP.i, align 8
  %13978 = add i64 %13977, -84
  %13979 = add i64 %13976, 3
  store i64 %13979, i64* %3, align 8
  %13980 = inttoptr i64 %13978 to i32*
  %13981 = load i32, i32* %13980, align 4
  %13982 = zext i32 %13981 to i64
  store i64 %13982, i64* %.pre243, align 8
  %13983 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %13983, i64* %RCX.i6189, align 8
  %13984 = add i64 %13983, 1260
  %13985 = add i64 %13976, 17
  store i64 %13985, i64* %3, align 8
  %13986 = inttoptr i64 %13984 to i32*
  %13987 = load i32, i32* %13986, align 4
  %13988 = sub i32 %13981, %13987
  %13989 = icmp ult i32 %13981, %13987
  %13990 = zext i1 %13989 to i8
  store i8 %13990, i8* %44, align 1
  %13991 = and i32 %13988, 255
  %13992 = tail call i32 @llvm.ctpop.i32(i32 %13991)
  %13993 = trunc i32 %13992 to i8
  %13994 = and i8 %13993, 1
  %13995 = xor i8 %13994, 1
  store i8 %13995, i8* %51, align 1
  %13996 = xor i32 %13987, %13981
  %13997 = xor i32 %13996, %13988
  %13998 = lshr i32 %13997, 4
  %13999 = trunc i32 %13998 to i8
  %14000 = and i8 %13999, 1
  store i8 %14000, i8* %56, align 1
  %14001 = icmp eq i32 %13988, 0
  %14002 = zext i1 %14001 to i8
  store i8 %14002, i8* %59, align 1
  %14003 = lshr i32 %13988, 31
  %14004 = trunc i32 %14003 to i8
  store i8 %14004, i8* %62, align 1
  %14005 = lshr i32 %13981, 31
  %14006 = lshr i32 %13987, 31
  %14007 = xor i32 %14006, %14005
  %14008 = xor i32 %14003, %14005
  %14009 = add nuw nsw i32 %14008, %14007
  %14010 = icmp eq i32 %14009, 2
  %14011 = zext i1 %14010 to i8
  store i8 %14011, i8* %68, align 1
  %14012 = icmp ne i8 %14004, 0
  %14013 = xor i1 %14012, %14010
  %.demorgan = or i1 %14001, %14013
  %.v285 = select i1 %.demorgan, i64 23, i64 758
  %14014 = add i64 %13976, %.v285
  store i64 %14014, i64* %3, align 8
  br i1 %.demorgan, label %block_4709f5, label %block_.L_470cd4

block_4709f5:                                     ; preds = %block_.L_4709de
  store i64 2, i64* %.pre243, align 8
  %14015 = add i64 %14014, 8
  store i64 %14015, i64* %3, align 8
  %14016 = load i32, i32* %13980, align 4
  %14017 = zext i32 %14016 to i64
  store i64 %14017, i64* %RCX.i6189, align 8
  %14018 = add i64 %13977, -464
  %14019 = add i64 %14014, 14
  store i64 %14019, i64* %3, align 8
  %14020 = inttoptr i64 %14018 to i32*
  store i32 2, i32* %14020, align 4
  %14021 = load i32, i32* %ECX.i5565, align 4
  %14022 = zext i32 %14021 to i64
  %14023 = load i64, i64* %3, align 8
  store i64 %14022, i64* %.pre243, align 8
  %14024 = sext i32 %14021 to i64
  %14025 = lshr i64 %14024, 32
  store i64 %14025, i64* %13973, align 8
  %14026 = load i64, i64* %RBP.i, align 8
  %14027 = add i64 %14026, -464
  %14028 = add i64 %14023, 9
  store i64 %14028, i64* %3, align 8
  %14029 = inttoptr i64 %14027 to i32*
  %14030 = load i32, i32* %14029, align 4
  %14031 = zext i32 %14030 to i64
  store i64 %14031, i64* %RCX.i6189, align 8
  %14032 = add i64 %14023, 11
  store i64 %14032, i64* %3, align 8
  %14033 = sext i32 %14030 to i64
  %14034 = shl nuw i64 %14025, 32
  %14035 = or i64 %14034, %14022
  %14036 = sdiv i64 %14035, %14033
  %14037 = shl i64 %14036, 32
  %14038 = ashr exact i64 %14037, 32
  %14039 = icmp eq i64 %14036, %14038
  br i1 %14039, label %14042, label %14040

; <label>:14040:                                  ; preds = %block_4709f5
  %14041 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %14032, %struct.Memory* %MEMORY.66)
  %.pre216 = load i32, i32* %EDX.i5379, align 4
  %.pre217 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit

; <label>:14042:                                  ; preds = %block_4709f5
  %14043 = srem i64 %14035, %14033
  %14044 = and i64 %14036, 4294967295
  store i64 %14044, i64* %.pre243, align 8
  %14045 = and i64 %14043, 4294967295
  store i64 %14045, i64* %RDX.i5984, align 8
  store i8 0, i8* %44, align 1
  store i8 0, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %14046 = trunc i64 %14043 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %14042, %14040
  %14047 = phi i64 [ %.pre217, %14040 ], [ %14032, %14042 ]
  %14048 = phi i32 [ %.pre216, %14040 ], [ %14046, %14042 ]
  %14049 = phi %struct.Memory* [ %14041, %14040 ], [ %MEMORY.66, %14042 ]
  store i8 0, i8* %44, align 1
  %14050 = and i32 %14048, 255
  %14051 = tail call i32 @llvm.ctpop.i32(i32 %14050)
  %14052 = trunc i32 %14051 to i8
  %14053 = and i8 %14052, 1
  %14054 = xor i8 %14053, 1
  store i8 %14054, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14055 = icmp eq i32 %14048, 0
  %14056 = zext i1 %14055 to i8
  store i8 %14056, i8* %59, align 1
  %14057 = lshr i32 %14048, 31
  %14058 = trunc i32 %14057 to i8
  store i8 %14058, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v291 = select i1 %14055, i64 145, i64 9
  %14059 = add i64 %14047, %.v291
  store i64 %14059, i64* %3, align 8
  br i1 %14055, label %block_.L_470a9f, label %block_470a17

block_470a17:                                     ; preds = %routine_idivl__ecx.exit
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  store i64 1, i64* %RCX.i6189, align 8
  %14060 = load i64, i64* %RBP.i, align 8
  %14061 = add i64 %14060, -128
  %14062 = add i64 %14059, 11
  store i64 %14062, i64* %3, align 8
  %14063 = inttoptr i64 %14061 to i64*
  %14064 = load i64, i64* %14063, align 8
  store i64 %14064, i64* %RDX.i5984, align 8
  %14065 = add i64 %14059, 14
  store i64 %14065, i64* %3, align 8
  %14066 = inttoptr i64 %14064 to i16*
  %14067 = load i16, i16* %14066, align 2
  store i16 %14067, i16* %SI.i5967, align 2
  %14068 = add i64 %14060, -226
  %14069 = add i64 %14059, 21
  store i64 %14069, i64* %3, align 8
  %14070 = inttoptr i64 %14068 to i16*
  store i16 %14067, i16* %14070, align 2
  %14071 = load i64, i64* %RBP.i, align 8
  %14072 = add i64 %14071, -128
  %14073 = load i64, i64* %3, align 8
  %14074 = add i64 %14073, 4
  store i64 %14074, i64* %3, align 8
  %14075 = inttoptr i64 %14072 to i64*
  %14076 = load i64, i64* %14075, align 8
  store i64 %14076, i64* %RDX.i5984, align 8
  %14077 = add i64 %14076, 2
  %14078 = add i64 %14073, 8
  store i64 %14078, i64* %3, align 8
  %14079 = inttoptr i64 %14077 to i16*
  %14080 = load i16, i16* %14079, align 2
  store i16 %14080, i16* %SI.i5967, align 2
  %14081 = add i64 %14071, -228
  %14082 = add i64 %14073, 15
  store i64 %14082, i64* %3, align 8
  %14083 = inttoptr i64 %14081 to i16*
  store i16 %14080, i16* %14083, align 2
  %14084 = load i64, i64* %RBP.i, align 8
  %14085 = add i64 %14084, -234
  %14086 = load i64, i64* %3, align 8
  %14087 = add i64 %14086, 7
  store i64 %14087, i64* %3, align 8
  %14088 = inttoptr i64 %14085 to i16*
  %14089 = load i16, i16* %14088, align 2
  store i16 %14089, i16* %SI.i5967, align 2
  %14090 = add i64 %14084, -222
  %14091 = add i64 %14086, 14
  store i64 %14091, i64* %3, align 8
  %14092 = inttoptr i64 %14090 to i16*
  store i16 %14089, i16* %14092, align 2
  %14093 = load i64, i64* %RBP.i, align 8
  %14094 = add i64 %14093, -232
  %14095 = load i64, i64* %3, align 8
  %14096 = add i64 %14095, 7
  store i64 %14096, i64* %3, align 8
  %14097 = inttoptr i64 %14094 to i16*
  %14098 = load i16, i16* %14097, align 2
  store i16 %14098, i16* %SI.i5967, align 2
  %14099 = add i64 %14093, -224
  %14100 = add i64 %14095, 14
  store i64 %14100, i64* %3, align 8
  %14101 = inttoptr i64 %14099 to i16*
  store i16 %14098, i16* %14101, align 2
  %14102 = load i64, i64* %RBP.i, align 8
  %14103 = add i64 %14102, -214
  %14104 = load i64, i64* %3, align 8
  %14105 = add i64 %14104, 7
  store i64 %14105, i64* %3, align 8
  %14106 = inttoptr i64 %14103 to i16*
  %14107 = load i16, i16* %14106, align 2
  store i16 %14107, i16* %SI.i5967, align 2
  %14108 = add i64 %14102, -218
  %14109 = add i64 %14104, 14
  store i64 %14109, i64* %3, align 8
  %14110 = inttoptr i64 %14108 to i16*
  store i16 %14107, i16* %14110, align 2
  %14111 = load i64, i64* %RBP.i, align 8
  %14112 = add i64 %14111, -216
  %14113 = load i64, i64* %3, align 8
  %14114 = add i64 %14113, 7
  store i64 %14114, i64* %3, align 8
  %14115 = inttoptr i64 %14112 to i16*
  %14116 = load i16, i16* %14115, align 2
  store i16 %14116, i16* %SI.i5967, align 2
  %14117 = add i64 %14111, -220
  %14118 = add i64 %14113, 14
  store i64 %14118, i64* %3, align 8
  %14119 = inttoptr i64 %14117 to i16*
  store i16 %14116, i16* %14119, align 2
  %14120 = load i64, i64* %RBP.i, align 8
  %14121 = add i64 %14120, -78
  %14122 = load i64, i64* %3, align 8
  %14123 = add i64 %14122, 4
  store i64 %14123, i64* %3, align 8
  %14124 = inttoptr i64 %14121 to i16*
  %14125 = load i16, i16* %14124, align 2
  store i16 %14125, i16* %SI.i5967, align 2
  %14126 = add i64 %14120, -214
  %14127 = add i64 %14122, 11
  store i64 %14127, i64* %3, align 8
  %14128 = inttoptr i64 %14126 to i16*
  store i16 %14125, i16* %14128, align 2
  %14129 = load i64, i64* %RBP.i, align 8
  %14130 = add i64 %14129, -80
  %14131 = load i64, i64* %3, align 8
  %14132 = add i64 %14131, 4
  store i64 %14132, i64* %3, align 8
  %14133 = inttoptr i64 %14130 to i16*
  %14134 = load i16, i16* %14133, align 2
  store i16 %14134, i16* %SI.i5967, align 2
  %14135 = add i64 %14129, -216
  %14136 = add i64 %14131, 11
  store i64 %14136, i64* %3, align 8
  %14137 = inttoptr i64 %14135 to i16*
  store i16 %14134, i16* %14137, align 2
  %14138 = load i64, i64* %RBP.i, align 8
  %14139 = add i64 %14138, -48
  %14140 = load i64, i64* %3, align 8
  %14141 = add i64 %14140, 4
  store i64 %14141, i64* %3, align 8
  %14142 = inttoptr i64 %14139 to i32*
  %14143 = load i32, i32* %14142, align 4
  store i8 0, i8* %44, align 1
  %14144 = and i32 %14143, 255
  %14145 = tail call i32 @llvm.ctpop.i32(i32 %14144)
  %14146 = trunc i32 %14145 to i8
  %14147 = and i8 %14146, 1
  %14148 = xor i8 %14147, 1
  store i8 %14148, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14149 = icmp eq i32 %14143, 0
  %14150 = zext i1 %14149 to i8
  store i8 %14150, i8* %59, align 1
  %14151 = lshr i32 %14143, 31
  %14152 = trunc i32 %14151 to i8
  store i8 %14152, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %14153 = load i32, i32* %ECX.i5565, align 4
  %14154 = zext i32 %14153 to i64
  %14155 = load i64, i64* %.pre243, align 8
  %14156 = select i1 %14149, i64 %14154, i64 %14155
  %14157 = and i64 %14156, 4294967295
  store i64 %14157, i64* %.pre243, align 8
  %14158 = trunc i64 %14156 to i16
  store i16 %14158, i16* %SI.i5967, align 2
  %14159 = add i64 %14138, -230
  %14160 = add i64 %14140, 17
  store i64 %14160, i64* %3, align 8
  %14161 = inttoptr i64 %14159 to i16*
  store i16 %14158, i16* %14161, align 2
  %14162 = load i64, i64* %3, align 8
  %14163 = add i64 %14162, 208
  store i64 %14163, i64* %3, align 8
  br label %block_.L_470b6a

block_.L_470a9f:                                  ; preds = %routine_idivl__ecx.exit
  %14164 = load i64, i64* %RBP.i, align 8
  %14165 = add i64 %14164, -128
  %14166 = add i64 %14059, 4
  store i64 %14166, i64* %3, align 8
  %14167 = inttoptr i64 %14165 to i64*
  %14168 = load i64, i64* %14167, align 8
  store i64 %14168, i64* %.pre243, align 8
  %14169 = add i64 %14059, 7
  store i64 %14169, i64* %3, align 8
  %14170 = inttoptr i64 %14168 to i16*
  %14171 = load i16, i16* %14170, align 2
  store i16 %14171, i16* %CX.i2922, align 2
  %14172 = add i64 %14164, -222
  %14173 = add i64 %14059, 14
  store i64 %14173, i64* %3, align 8
  %14174 = inttoptr i64 %14172 to i16*
  store i16 %14171, i16* %14174, align 2
  %14175 = load i64, i64* %RBP.i, align 8
  %14176 = add i64 %14175, -128
  %14177 = load i64, i64* %3, align 8
  %14178 = add i64 %14177, 4
  store i64 %14178, i64* %3, align 8
  %14179 = inttoptr i64 %14176 to i64*
  %14180 = load i64, i64* %14179, align 8
  store i64 %14180, i64* %.pre243, align 8
  %14181 = add i64 %14180, 2
  %14182 = add i64 %14177, 8
  store i64 %14182, i64* %3, align 8
  %14183 = inttoptr i64 %14181 to i16*
  %14184 = load i16, i16* %14183, align 2
  store i16 %14184, i16* %CX.i2922, align 2
  %14185 = add i64 %14175, -224
  %14186 = add i64 %14177, 15
  store i64 %14186, i64* %3, align 8
  %14187 = inttoptr i64 %14185 to i16*
  store i16 %14184, i16* %14187, align 2
  %14188 = load i64, i64* %RBP.i, align 8
  %14189 = add i64 %14188, -234
  %14190 = load i64, i64* %3, align 8
  %14191 = add i64 %14190, 7
  store i64 %14191, i64* %3, align 8
  %14192 = inttoptr i64 %14189 to i16*
  %14193 = load i16, i16* %14192, align 2
  store i16 %14193, i16* %CX.i2922, align 2
  %14194 = add i64 %14188, -226
  %14195 = add i64 %14190, 14
  store i64 %14195, i64* %3, align 8
  %14196 = inttoptr i64 %14194 to i16*
  store i16 %14193, i16* %14196, align 2
  %14197 = load i64, i64* %RBP.i, align 8
  %14198 = add i64 %14197, -232
  %14199 = load i64, i64* %3, align 8
  %14200 = add i64 %14199, 7
  store i64 %14200, i64* %3, align 8
  %14201 = inttoptr i64 %14198 to i16*
  %14202 = load i16, i16* %14201, align 2
  store i16 %14202, i16* %CX.i2922, align 2
  %14203 = add i64 %14197, -228
  %14204 = add i64 %14199, 14
  store i64 %14204, i64* %3, align 8
  %14205 = inttoptr i64 %14203 to i16*
  store i16 %14202, i16* %14205, align 2
  %14206 = load i64, i64* %RBP.i, align 8
  %14207 = add i64 %14206, -84
  %14208 = load i64, i64* %3, align 8
  %14209 = add i64 %14208, 4
  store i64 %14209, i64* %3, align 8
  %14210 = inttoptr i64 %14207 to i32*
  %14211 = load i32, i32* %14210, align 4
  store i8 0, i8* %44, align 1
  %14212 = and i32 %14211, 255
  %14213 = tail call i32 @llvm.ctpop.i32(i32 %14212)
  %14214 = trunc i32 %14213 to i8
  %14215 = and i8 %14214, 1
  %14216 = xor i8 %14215, 1
  store i8 %14216, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14217 = icmp eq i32 %14211, 0
  %14218 = zext i1 %14217 to i8
  store i8 %14218, i8* %59, align 1
  %14219 = lshr i32 %14211, 31
  %14220 = trunc i32 %14219 to i8
  store i8 %14220, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v292 = select i1 %14217, i64 65, i64 10
  %14221 = add i64 %14208, %.v292
  store i64 %14221, i64* %3, align 8
  br i1 %14217, label %block_.L_470b19, label %block_470ae2

block_470ae2:                                     ; preds = %block_.L_470a9f
  %14222 = add i64 %14206, -214
  %14223 = add i64 %14221, 7
  store i64 %14223, i64* %3, align 8
  %14224 = inttoptr i64 %14222 to i16*
  %14225 = load i16, i16* %14224, align 2
  store i16 %14225, i16* %AX.i4810, align 2
  %14226 = add i64 %14206, -218
  %14227 = add i64 %14221, 14
  store i64 %14227, i64* %3, align 8
  %14228 = inttoptr i64 %14226 to i16*
  store i16 %14225, i16* %14228, align 2
  %14229 = load i64, i64* %RBP.i, align 8
  %14230 = add i64 %14229, -216
  %14231 = load i64, i64* %3, align 8
  %14232 = add i64 %14231, 7
  store i64 %14232, i64* %3, align 8
  %14233 = inttoptr i64 %14230 to i16*
  %14234 = load i16, i16* %14233, align 2
  store i16 %14234, i16* %AX.i4810, align 2
  %14235 = add i64 %14229, -220
  %14236 = add i64 %14231, 14
  store i64 %14236, i64* %3, align 8
  %14237 = inttoptr i64 %14235 to i16*
  store i16 %14234, i16* %14237, align 2
  %14238 = load i64, i64* %RBP.i, align 8
  %14239 = add i64 %14238, -78
  %14240 = load i64, i64* %3, align 8
  %14241 = add i64 %14240, 4
  store i64 %14241, i64* %3, align 8
  %14242 = inttoptr i64 %14239 to i16*
  %14243 = load i16, i16* %14242, align 2
  store i16 %14243, i16* %AX.i4810, align 2
  %14244 = add i64 %14238, -214
  %14245 = add i64 %14240, 11
  store i64 %14245, i64* %3, align 8
  %14246 = inttoptr i64 %14244 to i16*
  store i16 %14243, i16* %14246, align 2
  %14247 = load i64, i64* %RBP.i, align 8
  %14248 = add i64 %14247, -80
  %14249 = load i64, i64* %3, align 8
  %14250 = add i64 %14249, 4
  store i64 %14250, i64* %3, align 8
  %14251 = inttoptr i64 %14248 to i16*
  %14252 = load i16, i16* %14251, align 2
  store i16 %14252, i16* %AX.i4810, align 2
  %14253 = add i64 %14247, -216
  %14254 = add i64 %14249, 11
  store i64 %14254, i64* %3, align 8
  %14255 = inttoptr i64 %14253 to i16*
  store i16 %14252, i16* %14255, align 2
  %14256 = load i64, i64* %3, align 8
  %14257 = add i64 %14256, 73
  store i64 %14257, i64* %3, align 8
  br label %block_.L_470b5d

block_.L_470b19:                                  ; preds = %block_.L_470a9f
  %14258 = add i64 %14206, -78
  %14259 = add i64 %14221, 4
  store i64 %14259, i64* %3, align 8
  %14260 = inttoptr i64 %14258 to i16*
  %14261 = load i16, i16* %14260, align 2
  store i16 %14261, i16* %AX.i4810, align 2
  %14262 = add i64 %14206, -218
  %14263 = add i64 %14221, 11
  store i64 %14263, i64* %3, align 8
  %14264 = inttoptr i64 %14262 to i16*
  store i16 %14261, i16* %14264, align 2
  %14265 = load i64, i64* %RBP.i, align 8
  %14266 = add i64 %14265, -80
  %14267 = load i64, i64* %3, align 8
  %14268 = add i64 %14267, 4
  store i64 %14268, i64* %3, align 8
  %14269 = inttoptr i64 %14266 to i16*
  %14270 = load i16, i16* %14269, align 2
  store i16 %14270, i16* %AX.i4810, align 2
  %14271 = add i64 %14265, -220
  %14272 = add i64 %14267, 11
  store i64 %14272, i64* %3, align 8
  %14273 = inttoptr i64 %14271 to i16*
  store i16 %14270, i16* %14273, align 2
  %14274 = load i64, i64* %RBP.i, align 8
  %14275 = add i64 %14274, -226
  %14276 = load i64, i64* %3, align 8
  %14277 = add i64 %14276, 7
  store i64 %14277, i64* %3, align 8
  %14278 = inttoptr i64 %14275 to i16*
  %14279 = load i16, i16* %14278, align 2
  %14280 = sext i16 %14279 to i64
  %14281 = shl nsw i64 %14280, 32
  %14282 = add nsw i64 %14281, 8589934592
  %14283 = ashr i64 %14282, 33
  %14284 = lshr i64 %14283, 1
  %14285 = trunc i64 %14283 to i8
  %14286 = and i8 %14285, 1
  %14287 = trunc i64 %14284 to i32
  %14288 = and i64 %14284, 4294967295
  store i64 %14288, i64* %RCX.i6189, align 8
  store i8 %14286, i8* %44, align 1
  %14289 = and i32 %14287, 255
  %14290 = tail call i32 @llvm.ctpop.i32(i32 %14289)
  %14291 = trunc i32 %14290 to i8
  %14292 = and i8 %14291, 1
  %14293 = xor i8 %14292, 1
  store i8 %14293, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14294 = icmp eq i32 %14287, 0
  %14295 = zext i1 %14294 to i8
  store i8 %14295, i8* %59, align 1
  %14296 = lshr i64 %14283, 32
  %14297 = trunc i64 %14296 to i8
  %14298 = and i8 %14297, 1
  store i8 %14298, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %14299 = trunc i64 %14284 to i16
  store i16 %14299, i16* %AX.i4810, align 2
  %14300 = add i64 %14274, -214
  %14301 = add i64 %14276, 23
  store i64 %14301, i64* %3, align 8
  %14302 = inttoptr i64 %14300 to i16*
  store i16 %14299, i16* %14302, align 2
  %14303 = load i64, i64* %RBP.i, align 8
  %14304 = add i64 %14303, -228
  %14305 = load i64, i64* %3, align 8
  %14306 = add i64 %14305, 7
  store i64 %14306, i64* %3, align 8
  %14307 = inttoptr i64 %14304 to i16*
  %14308 = load i16, i16* %14307, align 2
  %14309 = sext i16 %14308 to i64
  %14310 = shl nsw i64 %14309, 32
  %14311 = add nsw i64 %14310, 8589934592
  %14312 = ashr i64 %14311, 33
  %14313 = lshr i64 %14312, 1
  %14314 = trunc i64 %14312 to i8
  %14315 = and i8 %14314, 1
  %14316 = trunc i64 %14313 to i32
  %14317 = and i64 %14313, 4294967295
  store i64 %14317, i64* %RCX.i6189, align 8
  store i8 %14315, i8* %44, align 1
  %14318 = and i32 %14316, 255
  %14319 = tail call i32 @llvm.ctpop.i32(i32 %14318)
  %14320 = trunc i32 %14319 to i8
  %14321 = and i8 %14320, 1
  %14322 = xor i8 %14321, 1
  store i8 %14322, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14323 = icmp eq i32 %14316, 0
  %14324 = zext i1 %14323 to i8
  store i8 %14324, i8* %59, align 1
  %14325 = lshr i64 %14312, 32
  %14326 = trunc i64 %14325 to i8
  %14327 = and i8 %14326, 1
  store i8 %14327, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %14328 = trunc i64 %14313 to i16
  store i16 %14328, i16* %AX.i4810, align 2
  %14329 = add i64 %14303, -216
  %14330 = add i64 %14305, 23
  store i64 %14330, i64* %3, align 8
  %14331 = inttoptr i64 %14329 to i16*
  store i16 %14328, i16* %14331, align 2
  %.pre218 = load i64, i64* %3, align 8
  br label %block_.L_470b5d

block_.L_470b5d:                                  ; preds = %block_.L_470b19, %block_470ae2
  %14332 = phi i64 [ %.pre218, %block_.L_470b19 ], [ %14257, %block_470ae2 ]
  %14333 = load i64, i64* %RBP.i, align 8
  %14334 = add i64 %14333, -48
  %14335 = add i64 %14332, 3
  store i64 %14335, i64* %3, align 8
  %14336 = inttoptr i64 %14334 to i32*
  %14337 = load i32, i32* %14336, align 4
  %14338 = zext i32 %14337 to i64
  store i64 %14338, i64* %.pre243, align 8
  %14339 = trunc i32 %14337 to i16
  store i16 %14339, i16* %CX.i2922, align 2
  %14340 = add i64 %14333, -230
  %14341 = add i64 %14332, 13
  store i64 %14341, i64* %3, align 8
  %14342 = inttoptr i64 %14340 to i16*
  store i16 %14339, i16* %14342, align 2
  %.pre219 = load i64, i64* %3, align 8
  br label %block_.L_470b6a

block_.L_470b6a:                                  ; preds = %block_.L_470b5d, %block_470a17
  %14343 = phi i64 [ %.pre219, %block_.L_470b5d ], [ %14163, %block_470a17 ]
  store i64 ptrtoint (%G__0x6cbc30_type* @G__0x6cbc30 to i64), i64* %RDI.i2935, align 8
  %14344 = load i64, i64* %RBP.i, align 8
  %14345 = add i64 %14344, -214
  store i64 %14345, i64* %.pre243, align 8
  %14346 = add i64 %14344, -216
  store i64 %14346, i64* %RCX.i6189, align 8
  %14347 = add i64 %14344, -218
  store i64 %14347, i64* %RDX.i5984, align 8
  %14348 = add i64 %14344, -220
  store i64 %14348, i64* %RSI.i2931, align 8
  %14349 = add i64 %14344, -42
  %14350 = add i64 %14343, 43
  store i64 %14350, i64* %3, align 8
  %14351 = inttoptr i64 %14349 to i16*
  %14352 = load i16, i16* %14351, align 2
  store i16 %14352, i16* %R8W.i1118, align 2
  %14353 = add i64 %14344, -230
  %14354 = add i64 %14343, 51
  store i64 %14354, i64* %3, align 8
  %14355 = inttoptr i64 %14353 to i16*
  %14356 = load i16, i16* %14355, align 2
  %14357 = sext i16 %14356 to i64
  %14358 = and i64 %14357, 4294967295
  store i64 %14358, i64* %9145, align 8
  %14359 = add i64 %14344, -116
  %14360 = add i64 %14343, 55
  store i64 %14360, i64* %3, align 8
  %14361 = inttoptr i64 %14359 to i32*
  %14362 = load i32, i32* %14361, align 4
  %14363 = zext i32 %14362 to i64
  store i64 %14363, i64* %R10.i6168, align 8
  %14364 = add i64 %14344, -120
  %14365 = add i64 %14343, 59
  store i64 %14365, i64* %3, align 8
  %14366 = inttoptr i64 %14364 to i32*
  %14367 = load i32, i32* %14366, align 4
  %14368 = zext i32 %14367 to i64
  store i64 %14368, i64* %R11.i6166, align 8
  %14369 = add i64 %14344, -60
  %14370 = add i64 %14343, 62
  store i64 %14370, i64* %3, align 8
  %14371 = inttoptr i64 %14369 to i32*
  %14372 = load i32, i32* %14371, align 4
  %14373 = zext i32 %14372 to i64
  store i64 %14373, i64* %RBX.i4440, align 8
  %14374 = add i64 %14344, -84
  %14375 = add i64 %14343, 66
  store i64 %14375, i64* %3, align 8
  %14376 = inttoptr i64 %14374 to i32*
  %14377 = load i32, i32* %14376, align 4
  %14378 = zext i32 %14377 to i64
  store i64 %14378, i64* %R14.i2839, align 8
  %14379 = add i64 %14344, -222
  %14380 = add i64 %14343, 74
  store i64 %14380, i64* %3, align 8
  %14381 = inttoptr i64 %14379 to i16*
  %14382 = load i16, i16* %14381, align 2
  store i16 %14382, i16* %R15W.i794, align 2
  %14383 = add i64 %14344, -224
  %14384 = add i64 %14343, 82
  store i64 %14384, i64* %3, align 8
  %14385 = inttoptr i64 %14383 to i16*
  %14386 = load i16, i16* %14385, align 2
  store i16 %14386, i16* %R12W.i791, align 2
  %14387 = add i64 %14344, -226
  %14388 = add i64 %14343, 90
  store i64 %14388, i64* %3, align 8
  %14389 = inttoptr i64 %14387 to i16*
  %14390 = load i16, i16* %14389, align 2
  store i16 %14390, i16* %R13W.i788, align 2
  %14391 = add i64 %14344, -472
  %14392 = add i64 %14343, 97
  store i64 %14392, i64* %3, align 8
  %14393 = inttoptr i64 %14391 to i64*
  store i64 %14348, i64* %14393, align 8
  %14394 = load i64, i64* %RBP.i, align 8
  %14395 = add i64 %14394, -228
  %14396 = load i64, i64* %3, align 8
  %14397 = add i64 %14396, 7
  store i64 %14397, i64* %3, align 8
  %14398 = inttoptr i64 %14395 to i16*
  %14399 = load i16, i16* %14398, align 2
  store i16 %14399, i16* %SI.i5967, align 2
  %14400 = add i64 %14394, -480
  %14401 = load i64, i64* %.pre243, align 8
  %14402 = add i64 %14396, 14
  store i64 %14402, i64* %3, align 8
  %14403 = inttoptr i64 %14400 to i64*
  store i64 %14401, i64* %14403, align 8
  %14404 = load i64, i64* %3, align 8
  %14405 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %14405, i64* %.pre243, align 8
  %14406 = add i64 %14405, 1264
  %14407 = add i64 %14404, 14
  store i64 %14407, i64* %3, align 8
  %14408 = inttoptr i64 %14406 to i32*
  %14409 = load i32, i32* %14408, align 4
  %14410 = zext i32 %14409 to i64
  store i64 %14410, i64* %.pre243, align 8
  %14411 = load i64, i64* %RBP.i, align 8
  %14412 = add i64 %14411, -484
  %14413 = add i64 %14404, 20
  store i64 %14413, i64* %3, align 8
  %14414 = inttoptr i64 %14412 to i32*
  store i32 %14409, i32* %14414, align 4
  %14415 = load i64, i64* %RBP.i, align 8
  %14416 = add i64 %14415, -84
  %14417 = load i64, i64* %3, align 8
  %14418 = add i64 %14417, 3
  store i64 %14418, i64* %3, align 8
  %14419 = inttoptr i64 %14416 to i32*
  %14420 = load i32, i32* %14419, align 4
  %14421 = zext i32 %14420 to i64
  store i64 %14421, i64* %.pre243, align 8
  %14422 = add i64 %14415, -496
  %14423 = load i64, i64* %RCX.i6189, align 8
  %14424 = add i64 %14417, 10
  store i64 %14424, i64* %3, align 8
  %14425 = inttoptr i64 %14422 to i64*
  store i64 %14423, i64* %14425, align 8
  %14426 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %14427 = zext i32 %14426 to i64
  %14428 = load i64, i64* %3, align 8
  store i64 %14427, i64* %RCX.i6189, align 8
  %14429 = load i64, i64* %RBP.i, align 8
  %14430 = add i64 %14429, -484
  %14431 = add i64 %14428, 8
  store i64 %14431, i64* %3, align 8
  %14432 = inttoptr i64 %14430 to i32*
  %14433 = load i32, i32* %14432, align 4
  %14434 = zext i32 %14433 to i64
  store i64 %14434, i64* %.pre243, align 8
  %14435 = add i64 %14428, 10
  store i64 %14435, i64* %3, align 8
  %14436 = trunc i32 %14426 to i5
  switch i5 %14436, label %14440 [
    i5 0, label %routine_sarl__cl___eax.exit
    i5 1, label %14437
  ]

; <label>:14437:                                  ; preds = %block_.L_470b6a
  %14438 = shl nuw i64 %14434, 32
  %14439 = ashr i64 %14438, 33
  br label %14447

; <label>:14440:                                  ; preds = %block_.L_470b6a
  %14441 = and i32 %14426, 31
  %14442 = zext i32 %14441 to i64
  %14443 = add nsw i64 %14442, -1
  %14444 = sext i32 %14433 to i64
  %14445 = ashr i64 %14444, %14443
  %14446 = lshr i64 %14445, 1
  br label %14447

; <label>:14447:                                  ; preds = %14440, %14437
  %14448 = phi i64 [ %14446, %14440 ], [ %14439, %14437 ]
  %14449 = phi i64 [ %14445, %14440 ], [ %14434, %14437 ]
  %14450 = trunc i64 %14449 to i8
  %14451 = and i8 %14450, 1
  %14452 = trunc i64 %14448 to i32
  %14453 = and i64 %14448, 4294967295
  store i64 %14453, i64* %.pre243, align 8
  store i8 %14451, i8* %44, align 1
  %14454 = and i32 %14452, 255
  %14455 = tail call i32 @llvm.ctpop.i32(i32 %14454)
  %14456 = trunc i32 %14455 to i8
  %14457 = and i8 %14456, 1
  %14458 = xor i8 %14457, 1
  store i8 %14458, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14459 = icmp eq i32 %14452, 0
  %14460 = zext i1 %14459 to i8
  store i8 %14460, i8* %59, align 1
  %14461 = lshr i32 %14452, 31
  %14462 = trunc i32 %14461 to i8
  store i8 %14462, i8* %62, align 1
  store i8 0, i8* %68, align 1
  br label %routine_sarl__cl___eax.exit

routine_sarl__cl___eax.exit:                      ; preds = %14447, %block_.L_470b6a
  %14463 = add i64 %14429, -212
  %14464 = add i64 %14428, 16
  store i64 %14464, i64* %3, align 8
  %14465 = inttoptr i64 %14463 to i32*
  %14466 = load i32, i32* %14465, align 4
  %14467 = zext i32 %14466 to i64
  store i64 %14467, i64* %RCX.i6189, align 8
  %14468 = add i64 %14429, -72
  %14469 = add i64 %14428, 21
  store i64 %14469, i64* %3, align 8
  %14470 = inttoptr i64 %14468 to i64*
  %14471 = load i64, i64* %14470, align 8
  store i64 %14471, i64* %117, align 1
  store double 0.000000e+00, double* %13975, align 1
  %14472 = load i16, i16* %R8W.i1118, align 2
  %14473 = sext i16 %14472 to i64
  %14474 = and i64 %14473, 4294967295
  store i64 %14474, i64* %9139, align 8
  %14475 = add i64 %14429, -498
  %14476 = load i16, i16* %SI.i5967, align 2
  %14477 = add i64 %14428, 32
  store i64 %14477, i64* %3, align 8
  %14478 = inttoptr i64 %14475 to i16*
  store i16 %14476, i16* %14478, align 2
  %14479 = load i32, i32* %R8D.i5751, align 4
  %14480 = zext i32 %14479 to i64
  %14481 = load i64, i64* %3, align 8
  store i64 %14480, i64* %RSI.i2931, align 8
  %14482 = load i64, i64* %RBP.i, align 8
  %14483 = add i64 %14482, -512
  %14484 = load i64, i64* %RDX.i5984, align 8
  %14485 = add i64 %14481, 10
  store i64 %14485, i64* %3, align 8
  %14486 = inttoptr i64 %14483 to i64*
  store i64 %14484, i64* %14486, align 8
  %14487 = load i32, i32* %R9D.i6071, align 4
  %14488 = zext i32 %14487 to i64
  %14489 = load i64, i64* %3, align 8
  store i64 %14488, i64* %RDX.i5984, align 8
  %14490 = load i64, i64* %RBP.i, align 8
  %14491 = add i64 %14490, -516
  %14492 = load i32, i32* %ECX.i5565, align 4
  %14493 = add i64 %14489, 9
  store i64 %14493, i64* %3, align 8
  %14494 = inttoptr i64 %14491 to i32*
  store i32 %14492, i32* %14494, align 4
  %14495 = load i32, i32* %R10D.i2913, align 4
  %14496 = zext i32 %14495 to i64
  %14497 = load i64, i64* %3, align 8
  store i64 %14496, i64* %RCX.i6189, align 8
  %14498 = load i32, i32* %R11D.i2910, align 4
  %14499 = zext i32 %14498 to i64
  store i64 %14499, i64* %9139, align 8
  %14500 = load i32, i32* %EBX.i2895, align 4
  %14501 = zext i32 %14500 to i64
  store i64 %14501, i64* %9145, align 8
  %14502 = load i32*, i32** %9168, align 8
  %14503 = load i32, i32* %R14D.i797, align 4
  %14504 = add i64 %14497, 13
  store i64 %14504, i64* %3, align 8
  store i32 %14503, i32* %14502, align 4
  %14505 = load i16, i16* %R15W.i794, align 2
  %14506 = load i64, i64* %3, align 8
  %14507 = load i64, i64* %6, align 8
  %14508 = add i64 %14507, 8
  %14509 = sext i16 %14505 to i32
  %14510 = add i64 %14506, 9
  store i64 %14510, i64* %3, align 8
  %14511 = inttoptr i64 %14508 to i32*
  store i32 %14509, i32* %14511, align 4
  %14512 = load i16, i16* %R12W.i791, align 2
  %14513 = load i64, i64* %3, align 8
  %14514 = load i64, i64* %6, align 8
  %14515 = add i64 %14514, 16
  %14516 = sext i16 %14512 to i32
  %14517 = add i64 %14513, 9
  store i64 %14517, i64* %3, align 8
  %14518 = inttoptr i64 %14515 to i32*
  store i32 %14516, i32* %14518, align 4
  %14519 = load i16, i16* %R13W.i788, align 2
  %14520 = load i64, i64* %3, align 8
  %14521 = sext i16 %14519 to i64
  %14522 = and i64 %14521, 4294967295
  store i64 %14522, i64* %R10.i6168, align 8
  %14523 = load i64, i64* %6, align 8
  %14524 = add i64 %14523, 24
  %14525 = sext i16 %14519 to i32
  %14526 = add i64 %14520, 9
  store i64 %14526, i64* %3, align 8
  %14527 = inttoptr i64 %14524 to i32*
  store i32 %14525, i32* %14527, align 4
  %14528 = load i64, i64* %RBP.i, align 8
  %14529 = add i64 %14528, -498
  %14530 = load i64, i64* %3, align 8
  %14531 = add i64 %14530, 8
  store i64 %14531, i64* %3, align 8
  %14532 = inttoptr i64 %14529 to i16*
  %14533 = load i16, i16* %14532, align 2
  store i16 %14533, i16* %R15W.i794, align 2
  %14534 = sext i16 %14533 to i64
  %14535 = and i64 %14534, 4294967295
  store i64 %14535, i64* %R10.i6168, align 8
  %14536 = load i64, i64* %6, align 8
  %14537 = add i64 %14536, 32
  %14538 = sext i16 %14533 to i32
  %14539 = add i64 %14530, 17
  store i64 %14539, i64* %3, align 8
  %14540 = inttoptr i64 %14537 to i32*
  store i32 %14538, i32* %14540, align 4
  %14541 = load i64, i64* %RBP.i, align 8
  %14542 = add i64 %14541, -480
  %14543 = load i64, i64* %3, align 8
  %14544 = add i64 %14543, 7
  store i64 %14544, i64* %3, align 8
  %14545 = inttoptr i64 %14542 to i64*
  %14546 = load i64, i64* %14545, align 8
  store i64 %14546, i64* %R10.i6168, align 8
  %14547 = load i64, i64* %6, align 8
  %14548 = add i64 %14547, 40
  %14549 = add i64 %14543, 12
  store i64 %14549, i64* %3, align 8
  %14550 = inttoptr i64 %14548 to i64*
  store i64 %14546, i64* %14550, align 8
  %14551 = load i64, i64* %RBP.i, align 8
  %14552 = add i64 %14551, -496
  %14553 = load i64, i64* %3, align 8
  %14554 = add i64 %14553, 7
  store i64 %14554, i64* %3, align 8
  %14555 = inttoptr i64 %14552 to i64*
  %14556 = load i64, i64* %14555, align 8
  store i64 %14556, i64* %R10.i6168, align 8
  %14557 = load i64, i64* %6, align 8
  %14558 = add i64 %14557, 48
  %14559 = add i64 %14553, 12
  store i64 %14559, i64* %3, align 8
  %14560 = inttoptr i64 %14558 to i64*
  store i64 %14556, i64* %14560, align 8
  %14561 = load i64, i64* %RBP.i, align 8
  %14562 = add i64 %14561, -512
  %14563 = load i64, i64* %3, align 8
  %14564 = add i64 %14563, 7
  store i64 %14564, i64* %3, align 8
  %14565 = inttoptr i64 %14562 to i64*
  %14566 = load i64, i64* %14565, align 8
  store i64 %14566, i64* %R10.i6168, align 8
  %14567 = load i64, i64* %6, align 8
  %14568 = add i64 %14567, 56
  %14569 = add i64 %14563, 12
  store i64 %14569, i64* %3, align 8
  %14570 = inttoptr i64 %14568 to i64*
  store i64 %14566, i64* %14570, align 8
  %14571 = load i64, i64* %RBP.i, align 8
  %14572 = add i64 %14571, -472
  %14573 = load i64, i64* %3, align 8
  %14574 = add i64 %14573, 7
  store i64 %14574, i64* %3, align 8
  %14575 = inttoptr i64 %14572 to i64*
  %14576 = load i64, i64* %14575, align 8
  store i64 %14576, i64* %R10.i6168, align 8
  %14577 = load i64, i64* %6, align 8
  %14578 = add i64 %14577, 64
  %14579 = add i64 %14573, 12
  store i64 %14579, i64* %3, align 8
  %14580 = inttoptr i64 %14578 to i64*
  store i64 %14576, i64* %14580, align 8
  %14581 = load i64, i64* %6, align 8
  %14582 = add i64 %14581, 72
  %14583 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %14584 = load i64, i64* %3, align 8
  %14585 = add i64 %14584, 4
  store i64 %14585, i64* %3, align 8
  %14586 = inttoptr i64 %14582 to i32*
  store i32 %14583, i32* %14586, align 4
  %14587 = load i64, i64* %RBP.i, align 8
  %14588 = add i64 %14587, -516
  %14589 = load i64, i64* %3, align 8
  %14590 = add i64 %14589, 6
  store i64 %14590, i64* %3, align 8
  %14591 = inttoptr i64 %14588 to i32*
  %14592 = load i32, i32* %14591, align 4
  %14593 = zext i32 %14592 to i64
  store i64 %14593, i64* %.pre243, align 8
  %14594 = load i64, i64* %6, align 8
  %14595 = add i64 %14594, 80
  %14596 = add i64 %14589, 10
  store i64 %14596, i64* %3, align 8
  %14597 = inttoptr i64 %14595 to i32*
  store i32 %14592, i32* %14597, align 4
  %14598 = load i64, i64* %3, align 8
  %14599 = add i64 %14598, -60209
  %14600 = add i64 %14598, 5
  %14601 = load i64, i64* %6, align 8
  %14602 = add i64 %14601, -8
  %14603 = inttoptr i64 %14602 to i64*
  store i64 %14600, i64* %14603, align 8
  store i64 %14602, i64* %6, align 8
  store i64 %14599, i64* %3, align 8
  %call2_470ca1 = tail call %struct.Memory* @sub_462170.FullPelBlockMotionBiPred(%struct.State* nonnull %0, i64 %14599, %struct.Memory* %14049)
  %14604 = load i64, i64* %RBP.i, align 8
  %14605 = add i64 %14604, -212
  %14606 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %14607 = load i64, i64* %3, align 8
  %14608 = add i64 %14607, 6
  store i64 %14608, i64* %3, align 8
  %14609 = inttoptr i64 %14605 to i32*
  store i32 %14606, i32* %14609, align 4
  %14610 = load i64, i64* %RBP.i, align 8
  %14611 = add i64 %14610, -218
  %14612 = load i64, i64* %3, align 8
  %14613 = add i64 %14612, 8
  store i64 %14613, i64* %3, align 8
  %14614 = inttoptr i64 %14611 to i16*
  %14615 = load i16, i16* %14614, align 2
  store i16 %14615, i16* %R15W.i794, align 2
  %14616 = add i64 %14610, -78
  %14617 = add i64 %14612, 13
  store i64 %14617, i64* %3, align 8
  %14618 = inttoptr i64 %14616 to i16*
  store i16 %14615, i16* %14618, align 2
  %14619 = load i64, i64* %RBP.i, align 8
  %14620 = add i64 %14619, -220
  %14621 = load i64, i64* %3, align 8
  %14622 = add i64 %14621, 8
  store i64 %14622, i64* %3, align 8
  %14623 = inttoptr i64 %14620 to i16*
  %14624 = load i16, i16* %14623, align 2
  store i16 %14624, i16* %R15W.i794, align 2
  %14625 = add i64 %14619, -80
  %14626 = add i64 %14621, 13
  store i64 %14626, i64* %3, align 8
  %14627 = inttoptr i64 %14625 to i16*
  store i16 %14624, i16* %14627, align 2
  %14628 = load i64, i64* %RBP.i, align 8
  %14629 = add i64 %14628, -84
  %14630 = load i64, i64* %3, align 8
  %14631 = add i64 %14630, 3
  store i64 %14631, i64* %3, align 8
  %14632 = inttoptr i64 %14629 to i32*
  %14633 = load i32, i32* %14632, align 4
  %14634 = add i32 %14633, 1
  %14635 = zext i32 %14634 to i64
  store i64 %14635, i64* %.pre243, align 8
  %14636 = icmp eq i32 %14633, -1
  %14637 = icmp eq i32 %14634, 0
  %14638 = or i1 %14636, %14637
  %14639 = zext i1 %14638 to i8
  store i8 %14639, i8* %44, align 1
  %14640 = and i32 %14634, 255
  %14641 = tail call i32 @llvm.ctpop.i32(i32 %14640)
  %14642 = trunc i32 %14641 to i8
  %14643 = and i8 %14642, 1
  %14644 = xor i8 %14643, 1
  store i8 %14644, i8* %51, align 1
  %14645 = xor i32 %14634, %14633
  %14646 = lshr i32 %14645, 4
  %14647 = trunc i32 %14646 to i8
  %14648 = and i8 %14647, 1
  store i8 %14648, i8* %56, align 1
  %14649 = zext i1 %14637 to i8
  store i8 %14649, i8* %59, align 1
  %14650 = lshr i32 %14634, 31
  %14651 = trunc i32 %14650 to i8
  store i8 %14651, i8* %62, align 1
  %14652 = lshr i32 %14633, 31
  %14653 = xor i32 %14650, %14652
  %14654 = add nuw nsw i32 %14653, %14650
  %14655 = icmp eq i32 %14654, 2
  %14656 = zext i1 %14655 to i8
  store i8 %14656, i8* %68, align 1
  %14657 = add i64 %14630, 9
  store i64 %14657, i64* %3, align 8
  store i32 %14634, i32* %14632, align 4
  %14658 = load i64, i64* %3, align 8
  %14659 = add i64 %14658, -753
  store i64 %14659, i64* %3, align 8
  br label %block_.L_4709de

block_.L_470cd4:                                  ; preds = %block_.L_4709de
  %14660 = add i64 %13977, -218
  %14661 = add i64 %14014, 7
  store i64 %14661, i64* %3, align 8
  %14662 = inttoptr i64 %14660 to i16*
  %14663 = load i16, i16* %14662, align 2
  %.tr = sext i16 %14663 to i32
  %14664 = shl nsw i32 %.tr, 2
  %14665 = zext i32 %14664 to i64
  store i64 %14665, i64* %.pre243, align 8
  %.lobit = lshr i16 %14663, 15
  %14666 = trunc i16 %.lobit to i8
  store i8 %14666, i8* %44, align 1
  %14667 = and i32 %14664, 252
  %14668 = tail call i32 @llvm.ctpop.i32(i32 %14667)
  %14669 = trunc i32 %14668 to i8
  %14670 = and i8 %14669, 1
  %14671 = xor i8 %14670, 1
  store i8 %14671, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14672 = icmp eq i16 %14663, 0
  %14673 = zext i1 %14672 to i8
  store i8 %14673, i8* %59, align 1
  %14674 = lshr i32 %.tr, 29
  %14675 = trunc i32 %14674 to i8
  %14676 = and i8 %14675, 1
  store i8 %14676, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %14677 = trunc i32 %14664 to i16
  store i16 %14677, i16* %CX.i2922, align 2
  %14678 = add i64 %14014, 20
  store i64 %14678, i64* %3, align 8
  store i16 %14677, i16* %14662, align 2
  %14679 = load i64, i64* %RBP.i, align 8
  %14680 = add i64 %14679, -220
  %14681 = load i64, i64* %3, align 8
  %14682 = add i64 %14681, 7
  store i64 %14682, i64* %3, align 8
  %14683 = inttoptr i64 %14680 to i16*
  %14684 = load i16, i16* %14683, align 2
  %.tr95 = sext i16 %14684 to i32
  %14685 = shl nsw i32 %.tr95, 2
  %14686 = zext i32 %14685 to i64
  store i64 %14686, i64* %.pre243, align 8
  %.lobit96 = lshr i16 %14684, 15
  %14687 = trunc i16 %.lobit96 to i8
  store i8 %14687, i8* %44, align 1
  %14688 = and i32 %14685, 252
  %14689 = tail call i32 @llvm.ctpop.i32(i32 %14688)
  %14690 = trunc i32 %14689 to i8
  %14691 = and i8 %14690, 1
  %14692 = xor i8 %14691, 1
  store i8 %14692, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14693 = icmp eq i16 %14684, 0
  %14694 = zext i1 %14693 to i8
  store i8 %14694, i8* %59, align 1
  %14695 = lshr i32 %.tr95, 29
  %14696 = trunc i32 %14695 to i8
  %14697 = and i8 %14696, 1
  store i8 %14697, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %14698 = trunc i32 %14685 to i16
  store i16 %14698, i16* %CX.i2922, align 2
  %14699 = add i64 %14681, 20
  store i64 %14699, i64* %3, align 8
  store i16 %14698, i16* %14683, align 2
  %14700 = load i64, i64* %3, align 8
  %14701 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %14701, i64* %RDX.i5984, align 8
  %14702 = add i64 %14701, 1268
  %14703 = add i64 %14700, 15
  store i64 %14703, i64* %3, align 8
  %14704 = inttoptr i64 %14702 to i32*
  %14705 = load i32, i32* %14704, align 4
  store i8 0, i8* %44, align 1
  %14706 = and i32 %14705, 255
  %14707 = tail call i32 @llvm.ctpop.i32(i32 %14706)
  %14708 = trunc i32 %14707 to i8
  %14709 = and i8 %14708, 1
  %14710 = xor i8 %14709, 1
  store i8 %14710, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14711 = icmp eq i32 %14705, 0
  %14712 = zext i1 %14711 to i8
  store i8 %14712, i8* %59, align 1
  %14713 = lshr i32 %14705, 31
  %14714 = trunc i32 %14713 to i8
  store i8 %14714, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v286 = select i1 %14711, i64 284, i64 21
  %14715 = add i64 %14700, %.v286
  store i64 %14715, i64* %3, align 8
  br i1 %14711, label %block_.L_470e18, label %block_470d11

block_470d11:                                     ; preds = %block_.L_470cd4
  store i64 %14701, i64* %.pre243, align 8
  %14716 = add i64 %14701, 24
  %14717 = add i64 %14715, 12
  store i64 %14717, i64* %3, align 8
  %14718 = inttoptr i64 %14716 to i32*
  %14719 = load i32, i32* %14718, align 4
  store i8 0, i8* %44, align 1
  %14720 = and i32 %14719, 255
  %14721 = tail call i32 @llvm.ctpop.i32(i32 %14720)
  %14722 = trunc i32 %14721 to i8
  %14723 = and i8 %14722, 1
  %14724 = xor i8 %14723, 1
  store i8 %14724, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14725 = icmp eq i32 %14719, 0
  %14726 = zext i1 %14725 to i8
  store i8 %14726, i8* %59, align 1
  %14727 = lshr i32 %14719, 31
  %14728 = trunc i32 %14727 to i8
  store i8 %14728, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v287 = select i1 %14725, i64 27, i64 18
  %14729 = add i64 %14715, %.v287
  store i64 %14729, i64* %3, align 8
  br i1 %14725, label %block_.L_470d2c, label %block_470d23

block_470d23:                                     ; preds = %block_470d11
  %14730 = load i64, i64* %RBP.i, align 8
  %14731 = add i64 %14730, -92
  %14732 = add i64 %14729, 3
  store i64 %14732, i64* %3, align 8
  %14733 = inttoptr i64 %14731 to i32*
  %14734 = load i32, i32* %14733, align 4
  %14735 = zext i32 %14734 to i64
  store i64 %14735, i64* %.pre243, align 8
  %14736 = add i64 %14730, -212
  %14737 = add i64 %14729, 9
  store i64 %14737, i64* %3, align 8
  %14738 = inttoptr i64 %14736 to i32*
  store i32 %14734, i32* %14738, align 4
  %.pre220 = load i64, i64* %3, align 8
  br label %block_.L_470d2c

block_.L_470d2c:                                  ; preds = %block_470d23, %block_470d11
  %14739 = phi i64 [ %.pre220, %block_470d23 ], [ %14729, %block_470d11 ]
  store i64 ptrtoint (%G__0x6cbc30_type* @G__0x6cbc30 to i64), i64* %RDI.i2935, align 8
  store i64 0, i64* %RSI.i2931, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %14740 = load i64, i64* %RBP.i, align 8
  %14741 = add i64 %14740, -214
  store i64 %14741, i64* %.pre243, align 8
  %14742 = add i64 %14740, -216
  store i64 %14742, i64* %RCX.i6189, align 8
  %14743 = add i64 %14740, -218
  store i64 %14743, i64* %RDX.i5984, align 8
  %14744 = add i64 %14740, -220
  store i64 %14744, i64* %9139, align 8
  store i64 9, i64* %9145, align 8
  %14745 = add i64 %14739, add (i64 ptrtoint (%G_0x40b26__rip__type* @G_0x40b26__rip_ to i64), i64 46)
  %14746 = add i64 %14739, 54
  store i64 %14746, i64* %3, align 8
  %14747 = inttoptr i64 %14745 to i64*
  %14748 = load i64, i64* %14747, align 8
  store i64 %14748, i64* %117, align 1
  store double 0.000000e+00, double* %13975, align 1
  %14749 = add i64 %14740, -230
  %14750 = add i64 %14739, 62
  store i64 %14750, i64* %3, align 8
  %14751 = inttoptr i64 %14749 to i16*
  %14752 = load i16, i16* %14751, align 2
  %14753 = sext i16 %14752 to i64
  %14754 = and i64 %14753, 4294967295
  store i64 %14754, i64* %R10.i6168, align 8
  %14755 = add i64 %14740, -116
  %14756 = add i64 %14739, 66
  store i64 %14756, i64* %3, align 8
  %14757 = inttoptr i64 %14755 to i32*
  %14758 = load i32, i32* %14757, align 4
  %14759 = zext i32 %14758 to i64
  store i64 %14759, i64* %R11.i6166, align 8
  %14760 = add i64 %14740, -120
  %14761 = add i64 %14739, 69
  store i64 %14761, i64* %3, align 8
  %14762 = inttoptr i64 %14760 to i32*
  %14763 = load i32, i32* %14762, align 4
  %14764 = zext i32 %14763 to i64
  store i64 %14764, i64* %RBX.i4440, align 8
  %14765 = add i64 %14740, -60
  %14766 = add i64 %14739, 73
  store i64 %14766, i64* %3, align 8
  %14767 = inttoptr i64 %14765 to i32*
  %14768 = load i32, i32* %14767, align 4
  %14769 = zext i32 %14768 to i64
  store i64 %14769, i64* %R14.i2839, align 8
  %14770 = add i64 %14740, -226
  %14771 = add i64 %14739, 81
  store i64 %14771, i64* %3, align 8
  %14772 = inttoptr i64 %14770 to i16*
  %14773 = load i16, i16* %14772, align 2
  store i16 %14773, i16* %R15W.i794, align 2
  %14774 = add i64 %14740, -228
  %14775 = add i64 %14739, 89
  store i64 %14775, i64* %3, align 8
  %14776 = inttoptr i64 %14774 to i16*
  %14777 = load i16, i16* %14776, align 2
  store i16 %14777, i16* %R12W.i791, align 2
  %R13D.i561 = bitcast %union.anon* %22 to i32*
  %14778 = add i64 %14740, -212
  %14779 = add i64 %14739, 96
  store i64 %14779, i64* %3, align 8
  %14780 = inttoptr i64 %14778 to i32*
  %14781 = load i32, i32* %14780, align 4
  %14782 = zext i32 %14781 to i64
  store i64 %14782, i64* %R13.i2854, align 8
  %14783 = add i64 %14740, -72
  %14784 = add i64 %14739, 101
  store i64 %14784, i64* %3, align 8
  %14785 = bitcast i64 %14748 to double
  %14786 = inttoptr i64 %14783 to double*
  %14787 = load double, double* %14786, align 8
  %14788 = fmul double %14785, %14787
  store double %14788, double* %116, align 1
  store i64 0, i64* %13974, align 1
  %14789 = add i64 %14740, -528
  %14790 = add i64 %14739, 108
  store i64 %14790, i64* %3, align 8
  %14791 = inttoptr i64 %14789 to i64*
  store i64 %14743, i64* %14791, align 8
  %14792 = load i32, i32* %R10D.i2913, align 4
  %14793 = zext i32 %14792 to i64
  %14794 = load i64, i64* %3, align 8
  store i64 %14793, i64* %RDX.i5984, align 8
  %14795 = load i64, i64* %RBP.i, align 8
  %14796 = add i64 %14795, -536
  %14797 = load i64, i64* %RCX.i6189, align 8
  %14798 = add i64 %14794, 10
  store i64 %14798, i64* %3, align 8
  %14799 = inttoptr i64 %14796 to i64*
  store i64 %14797, i64* %14799, align 8
  %14800 = load i32, i32* %R11D.i2910, align 4
  %14801 = zext i32 %14800 to i64
  %14802 = load i64, i64* %3, align 8
  store i64 %14801, i64* %RCX.i6189, align 8
  %14803 = load i64, i64* %RBP.i, align 8
  %14804 = add i64 %14803, -544
  %14805 = load i64, i64* %9139, align 8
  %14806 = add i64 %14802, 10
  store i64 %14806, i64* %3, align 8
  %14807 = inttoptr i64 %14804 to i64*
  store i64 %14805, i64* %14807, align 8
  %14808 = load i32, i32* %EBX.i2895, align 4
  %14809 = zext i32 %14808 to i64
  %14810 = load i64, i64* %3, align 8
  store i64 %14809, i64* %9139, align 8
  %14811 = load i64, i64* %RBP.i, align 8
  %14812 = add i64 %14811, -548
  %14813 = load i32, i32* %R9D.i6071, align 4
  %14814 = add i64 %14810, 10
  store i64 %14814, i64* %3, align 8
  %14815 = inttoptr i64 %14812 to i32*
  store i32 %14813, i32* %14815, align 4
  %14816 = load i32, i32* %R14D.i797, align 4
  %14817 = zext i32 %14816 to i64
  %14818 = load i64, i64* %3, align 8
  store i64 %14817, i64* %9145, align 8
  %14819 = load i16, i16* %R15W.i794, align 2
  %14820 = load i32*, i32** %9168, align 8
  %14821 = sext i16 %14819 to i32
  %14822 = add i64 %14818, 11
  store i64 %14822, i64* %3, align 8
  store i32 %14821, i32* %14820, align 4
  %14823 = load i16, i16* %R12W.i791, align 2
  %14824 = load i64, i64* %3, align 8
  %14825 = sext i16 %14823 to i64
  %14826 = and i64 %14825, 4294967295
  store i64 %14826, i64* %R10.i6168, align 8
  %14827 = load i64, i64* %6, align 8
  %14828 = add i64 %14827, 8
  %14829 = sext i16 %14823 to i32
  %14830 = add i64 %14824, 9
  store i64 %14830, i64* %3, align 8
  %14831 = inttoptr i64 %14828 to i32*
  store i32 %14829, i32* %14831, align 4
  %14832 = load i64, i64* %6, align 8
  %14833 = add i64 %14832, 16
  %14834 = load i64, i64* %.pre243, align 8
  %14835 = load i64, i64* %3, align 8
  %14836 = add i64 %14835, 5
  store i64 %14836, i64* %3, align 8
  %14837 = inttoptr i64 %14833 to i64*
  store i64 %14834, i64* %14837, align 8
  %14838 = load i64, i64* %RBP.i, align 8
  %14839 = add i64 %14838, -536
  %14840 = load i64, i64* %3, align 8
  %14841 = add i64 %14840, 7
  store i64 %14841, i64* %3, align 8
  %14842 = inttoptr i64 %14839 to i64*
  %14843 = load i64, i64* %14842, align 8
  store i64 %14843, i64* %.pre243, align 8
  %14844 = load i64, i64* %6, align 8
  %14845 = add i64 %14844, 24
  %14846 = add i64 %14840, 12
  store i64 %14846, i64* %3, align 8
  %14847 = inttoptr i64 %14845 to i64*
  store i64 %14843, i64* %14847, align 8
  %14848 = load i64, i64* %RBP.i, align 8
  %14849 = add i64 %14848, -528
  %14850 = load i64, i64* %3, align 8
  %14851 = add i64 %14850, 7
  store i64 %14851, i64* %3, align 8
  %14852 = inttoptr i64 %14849 to i64*
  %14853 = load i64, i64* %14852, align 8
  store i64 %14853, i64* %.pre243, align 8
  %14854 = load i64, i64* %6, align 8
  %14855 = add i64 %14854, 32
  %14856 = add i64 %14850, 12
  store i64 %14856, i64* %3, align 8
  %14857 = inttoptr i64 %14855 to i64*
  store i64 %14853, i64* %14857, align 8
  %14858 = load i64, i64* %RBP.i, align 8
  %14859 = add i64 %14858, -544
  %14860 = load i64, i64* %3, align 8
  %14861 = add i64 %14860, 7
  store i64 %14861, i64* %3, align 8
  %14862 = inttoptr i64 %14859 to i64*
  %14863 = load i64, i64* %14862, align 8
  store i64 %14863, i64* %.pre243, align 8
  %14864 = load i64, i64* %6, align 8
  %14865 = add i64 %14864, 40
  %14866 = add i64 %14860, 12
  store i64 %14866, i64* %3, align 8
  %14867 = inttoptr i64 %14865 to i64*
  store i64 %14863, i64* %14867, align 8
  %14868 = load i64, i64* %6, align 8
  %14869 = add i64 %14868, 48
  %14870 = load i64, i64* %3, align 8
  %14871 = add i64 %14870, 8
  store i64 %14871, i64* %3, align 8
  %14872 = inttoptr i64 %14869 to i32*
  store i32 9, i32* %14872, align 4
  %14873 = load i64, i64* %6, align 8
  %14874 = add i64 %14873, 56
  %14875 = load i64, i64* %3, align 8
  %14876 = add i64 %14875, 8
  store i64 %14876, i64* %3, align 8
  %14877 = inttoptr i64 %14874 to i32*
  store i32 9, i32* %14877, align 4
  %14878 = load i64, i64* %6, align 8
  %14879 = add i64 %14878, 64
  %14880 = load i32, i32* %R13D.i561, align 4
  %14881 = load i64, i64* %3, align 8
  %14882 = add i64 %14881, 5
  store i64 %14882, i64* %3, align 8
  %14883 = inttoptr i64 %14879 to i32*
  store i32 %14880, i32* %14883, align 4
  %14884 = load i64, i64* %3, align 8
  %14885 = add i64 %14884, -55608
  %14886 = add i64 %14884, 5
  %14887 = load i64, i64* %6, align 8
  %14888 = add i64 %14887, -8
  %14889 = inttoptr i64 %14888 to i64*
  store i64 %14886, i64* %14889, align 8
  store i64 %14888, i64* %6, align 8
  store i64 %14885, i64* %3, align 8
  %call2_470e08 = tail call %struct.Memory* @sub_4634d0.SubPelBlockSearchBiPred(%struct.State* nonnull %0, i64 %14885, %struct.Memory* %MEMORY.66)
  %14890 = load i64, i64* %RBP.i, align 8
  %14891 = add i64 %14890, -212
  %14892 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %14893 = load i64, i64* %3, align 8
  %14894 = add i64 %14893, 6
  store i64 %14894, i64* %3, align 8
  %14895 = inttoptr i64 %14891 to i32*
  store i32 %14892, i32* %14895, align 4
  %14896 = load i64, i64* %3, align 8
  %14897 = add i64 %14896, 45
  store i64 %14897, i64* %3, align 8
  br label %block_.L_470e40

block_.L_470e18:                                  ; preds = %block_.L_470cd4
  %14898 = load i64, i64* %RBP.i, align 8
  %14899 = add i64 %14898, -214
  %14900 = add i64 %14715, 7
  store i64 %14900, i64* %3, align 8
  %14901 = inttoptr i64 %14899 to i16*
  %14902 = load i16, i16* %14901, align 2
  %.tr97 = sext i16 %14902 to i32
  %14903 = shl nsw i32 %.tr97, 2
  %14904 = zext i32 %14903 to i64
  store i64 %14904, i64* %.pre243, align 8
  %.lobit98 = lshr i16 %14902, 15
  %14905 = trunc i16 %.lobit98 to i8
  store i8 %14905, i8* %44, align 1
  %14906 = and i32 %14903, 252
  %14907 = tail call i32 @llvm.ctpop.i32(i32 %14906)
  %14908 = trunc i32 %14907 to i8
  %14909 = and i8 %14908, 1
  %14910 = xor i8 %14909, 1
  store i8 %14910, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14911 = icmp eq i16 %14902, 0
  %14912 = zext i1 %14911 to i8
  store i8 %14912, i8* %59, align 1
  %14913 = lshr i32 %.tr97, 29
  %14914 = trunc i32 %14913 to i8
  %14915 = and i8 %14914, 1
  store i8 %14915, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %14916 = trunc i32 %14903 to i16
  store i16 %14916, i16* %CX.i2922, align 2
  %14917 = add i64 %14715, 20
  store i64 %14917, i64* %3, align 8
  store i16 %14916, i16* %14901, align 2
  %14918 = load i64, i64* %RBP.i, align 8
  %14919 = add i64 %14918, -216
  %14920 = load i64, i64* %3, align 8
  %14921 = add i64 %14920, 7
  store i64 %14921, i64* %3, align 8
  %14922 = inttoptr i64 %14919 to i16*
  %14923 = load i16, i16* %14922, align 2
  %.tr99 = sext i16 %14923 to i32
  %14924 = shl nsw i32 %.tr99, 2
  %14925 = zext i32 %14924 to i64
  store i64 %14925, i64* %.pre243, align 8
  %.lobit100 = lshr i16 %14923, 15
  %14926 = trunc i16 %.lobit100 to i8
  store i8 %14926, i8* %44, align 1
  %14927 = and i32 %14924, 252
  %14928 = tail call i32 @llvm.ctpop.i32(i32 %14927)
  %14929 = trunc i32 %14928 to i8
  %14930 = and i8 %14929, 1
  %14931 = xor i8 %14930, 1
  store i8 %14931, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14932 = icmp eq i16 %14923, 0
  %14933 = zext i1 %14932 to i8
  store i8 %14933, i8* %59, align 1
  %14934 = lshr i32 %.tr99, 29
  %14935 = trunc i32 %14934 to i8
  %14936 = and i8 %14935, 1
  store i8 %14936, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %14937 = trunc i32 %14924 to i16
  store i16 %14937, i16* %CX.i2922, align 2
  %14938 = add i64 %14920, 20
  store i64 %14938, i64* %3, align 8
  store i16 %14937, i16* %14922, align 2
  %.pre221 = load i64, i64* %3, align 8
  br label %block_.L_470e40

block_.L_470e40:                                  ; preds = %block_.L_470e18, %block_.L_470d2c
  %14939 = phi i64 [ %.pre221, %block_.L_470e18 ], [ %14897, %block_.L_470d2c ]
  %MEMORY.70 = phi %struct.Memory* [ %MEMORY.66, %block_.L_470e18 ], [ %call2_470e08, %block_.L_470d2c ]
  %14940 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %14940, i64* %.pre243, align 8
  %14941 = add i64 %14940, 1268
  %14942 = add i64 %14939, 15
  store i64 %14942, i64* %3, align 8
  %14943 = inttoptr i64 %14941 to i32*
  %14944 = load i32, i32* %14943, align 4
  %14945 = add i32 %14944, -2
  %14946 = icmp ult i32 %14944, 2
  %14947 = zext i1 %14946 to i8
  store i8 %14947, i8* %44, align 1
  %14948 = and i32 %14945, 255
  %14949 = tail call i32 @llvm.ctpop.i32(i32 %14948)
  %14950 = trunc i32 %14949 to i8
  %14951 = and i8 %14950, 1
  %14952 = xor i8 %14951, 1
  store i8 %14952, i8* %51, align 1
  %14953 = xor i32 %14945, %14944
  %14954 = lshr i32 %14953, 4
  %14955 = trunc i32 %14954 to i8
  %14956 = and i8 %14955, 1
  store i8 %14956, i8* %56, align 1
  %14957 = icmp eq i32 %14945, 0
  %14958 = zext i1 %14957 to i8
  store i8 %14958, i8* %59, align 1
  %14959 = lshr i32 %14945, 31
  %14960 = trunc i32 %14959 to i8
  store i8 %14960, i8* %62, align 1
  %14961 = lshr i32 %14944, 31
  %14962 = xor i32 %14959, %14961
  %14963 = add nuw nsw i32 %14962, %14961
  %14964 = icmp eq i32 %14963, 2
  %14965 = zext i1 %14964 to i8
  store i8 %14965, i8* %68, align 1
  %.v288 = select i1 %14957, i64 21, i64 303
  %14966 = add i64 %14939, %.v288
  store i64 %14966, i64* %3, align 8
  br i1 %14957, label %block_470e55, label %block_.L_470f6f

block_470e55:                                     ; preds = %block_.L_470e40
  store i64 %14940, i64* %.pre243, align 8
  %14967 = add i64 %14940, 24
  %14968 = add i64 %14966, 12
  store i64 %14968, i64* %3, align 8
  %14969 = inttoptr i64 %14967 to i32*
  %14970 = load i32, i32* %14969, align 4
  store i8 0, i8* %44, align 1
  %14971 = and i32 %14970, 255
  %14972 = tail call i32 @llvm.ctpop.i32(i32 %14971)
  %14973 = trunc i32 %14972 to i8
  %14974 = and i8 %14973, 1
  %14975 = xor i8 %14974, 1
  store i8 %14975, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %14976 = icmp eq i32 %14970, 0
  %14977 = zext i1 %14976 to i8
  store i8 %14977, i8* %59, align 1
  %14978 = lshr i32 %14970, 31
  %14979 = trunc i32 %14978 to i8
  store i8 %14979, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %.v290 = select i1 %14976, i64 27, i64 18
  %14980 = add i64 %14966, %.v290
  store i64 %14980, i64* %3, align 8
  br i1 %14976, label %block_.L_470e70, label %block_470e67

block_470e67:                                     ; preds = %block_470e55
  %14981 = load i64, i64* %RBP.i, align 8
  %14982 = add i64 %14981, -92
  %14983 = add i64 %14980, 3
  store i64 %14983, i64* %3, align 8
  %14984 = inttoptr i64 %14982 to i32*
  %14985 = load i32, i32* %14984, align 4
  %14986 = zext i32 %14985 to i64
  store i64 %14986, i64* %.pre243, align 8
  %14987 = add i64 %14981, -212
  %14988 = add i64 %14980, 9
  store i64 %14988, i64* %3, align 8
  %14989 = inttoptr i64 %14987 to i32*
  store i32 %14985, i32* %14989, align 4
  %.pre222 = load i64, i64* %3, align 8
  br label %block_.L_470e70

block_.L_470e70:                                  ; preds = %block_470e67, %block_470e55
  %14990 = phi i64 [ %.pre222, %block_470e67 ], [ %14980, %block_470e55 ]
  store i64 ptrtoint (%G__0x6cbc30_type* @G__0x6cbc30 to i64), i64* %RDI.i2935, align 8
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  %14991 = load i64, i64* %RBP.i, align 8
  %14992 = add i64 %14991, -78
  store i64 %14992, i64* %RCX.i6189, align 8
  %14993 = add i64 %14991, -80
  store i64 %14993, i64* %RDX.i5984, align 8
  %14994 = add i64 %14991, -214
  store i64 %14994, i64* %RSI.i2931, align 8
  %14995 = add i64 %14991, -216
  store i64 %14995, i64* %9139, align 8
  store i64 9, i64* %9145, align 8
  %14996 = add i64 %14990, add (i64 ptrtoint (%G_0x409e8__rip__type* @G_0x409e8__rip_ to i64), i64 40)
  %14997 = add i64 %14990, 48
  store i64 %14997, i64* %3, align 8
  %14998 = inttoptr i64 %14996 to i64*
  %14999 = load i64, i64* %14998, align 8
  store i64 %14999, i64* %117, align 1
  store double 0.000000e+00, double* %13975, align 1
  store i64 1, i64* %R10.i6168, align 8
  %15000 = add i64 %14991, -230
  %15001 = add i64 %14990, 62
  store i64 %15001, i64* %3, align 8
  %15002 = inttoptr i64 %15000 to i16*
  %15003 = load i16, i16* %15002, align 2
  %15004 = sext i16 %15003 to i32
  store i8 0, i8* %44, align 1
  %15005 = and i32 %15004, 255
  %15006 = tail call i32 @llvm.ctpop.i32(i32 %15005)
  %15007 = trunc i32 %15006 to i8
  %15008 = and i8 %15007, 1
  %15009 = xor i8 %15008, 1
  store i8 %15009, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %15010 = icmp eq i16 %15003, 0
  %15011 = zext i1 %15010 to i8
  store i8 %15011, i8* %59, align 1
  %15012 = lshr i32 %15004, 31
  %15013 = trunc i32 %15012 to i8
  store i8 %15013, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %15014 = zext i1 %15010 to i64
  store i64 %15014, i64* %R11.i6166, align 8
  %15015 = add i64 %14991, -116
  %15016 = add i64 %14990, 77
  store i64 %15016, i64* %3, align 8
  %15017 = inttoptr i64 %15015 to i32*
  %15018 = load i32, i32* %15017, align 4
  %15019 = zext i32 %15018 to i64
  store i64 %15019, i64* %R10.i6168, align 8
  %15020 = add i64 %14991, -120
  %15021 = add i64 %14990, 80
  store i64 %15021, i64* %3, align 8
  %15022 = inttoptr i64 %15020 to i32*
  %15023 = load i32, i32* %15022, align 4
  %15024 = zext i32 %15023 to i64
  store i64 %15024, i64* %RBX.i4440, align 8
  %15025 = add i64 %14991, -60
  %15026 = add i64 %14990, 84
  store i64 %15026, i64* %3, align 8
  %15027 = inttoptr i64 %15025 to i32*
  %15028 = load i32, i32* %15027, align 4
  %15029 = zext i32 %15028 to i64
  store i64 %15029, i64* %R14.i2839, align 8
  %15030 = add i64 %14991, -74
  %15031 = add i64 %14990, 89
  store i64 %15031, i64* %3, align 8
  %15032 = inttoptr i64 %15030 to i16*
  %15033 = load i16, i16* %15032, align 2
  store i16 %15033, i16* %R15W.i794, align 2
  %15034 = add i64 %14991, -76
  %15035 = add i64 %14990, 94
  store i64 %15035, i64* %3, align 8
  %15036 = inttoptr i64 %15034 to i16*
  %15037 = load i16, i16* %15036, align 2
  store i16 %15037, i16* %R12W.i791, align 2
  %R13D.i400 = bitcast %union.anon* %22 to i32*
  %15038 = load i64, i64* %RBP.i, align 8
  %15039 = add i64 %15038, -212
  %15040 = add i64 %14990, 101
  store i64 %15040, i64* %3, align 8
  %15041 = inttoptr i64 %15039 to i32*
  %15042 = load i32, i32* %15041, align 4
  %15043 = zext i32 %15042 to i64
  store i64 %15043, i64* %R13.i2854, align 8
  %15044 = add i64 %15038, -72
  %15045 = add i64 %14990, 106
  store i64 %15045, i64* %3, align 8
  %15046 = bitcast i64 %14999 to double
  %15047 = inttoptr i64 %15044 to double*
  %15048 = load double, double* %15047, align 8
  %15049 = fmul double %15046, %15048
  store double %15049, double* %116, align 1
  store i64 0, i64* %13974, align 1
  %15050 = add i64 %15038, -560
  %15051 = load i64, i64* %RSI.i2931, align 8
  %15052 = add i64 %14990, 113
  store i64 %15052, i64* %3, align 8
  %15053 = inttoptr i64 %15050 to i64*
  store i64 %15051, i64* %15053, align 8
  %15054 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %15055 = zext i32 %15054 to i64
  %15056 = load i64, i64* %3, align 8
  store i64 %15055, i64* %RSI.i2931, align 8
  %15057 = load i64, i64* %RBP.i, align 8
  %15058 = add i64 %15057, -568
  %15059 = load i64, i64* %RDX.i5984, align 8
  %15060 = add i64 %15056, 9
  store i64 %15060, i64* %3, align 8
  %15061 = inttoptr i64 %15058 to i64*
  store i64 %15059, i64* %15061, align 8
  %15062 = load i32, i32* %R11D.i2910, align 4
  %15063 = zext i32 %15062 to i64
  %15064 = load i64, i64* %3, align 8
  store i64 %15063, i64* %RDX.i5984, align 8
  %15065 = load i64, i64* %RBP.i, align 8
  %15066 = add i64 %15065, -576
  %15067 = load i64, i64* %RCX.i6189, align 8
  %15068 = add i64 %15064, 10
  store i64 %15068, i64* %3, align 8
  %15069 = inttoptr i64 %15066 to i64*
  store i64 %15067, i64* %15069, align 8
  %15070 = load i32, i32* %R10D.i2913, align 4
  %15071 = zext i32 %15070 to i64
  %15072 = load i64, i64* %3, align 8
  store i64 %15071, i64* %RCX.i6189, align 8
  %15073 = load i64, i64* %RBP.i, align 8
  %15074 = add i64 %15073, -584
  %15075 = load i64, i64* %9139, align 8
  %15076 = add i64 %15072, 10
  store i64 %15076, i64* %3, align 8
  %15077 = inttoptr i64 %15074 to i64*
  store i64 %15075, i64* %15077, align 8
  %15078 = load i32, i32* %EBX.i2895, align 4
  %15079 = zext i32 %15078 to i64
  %15080 = load i64, i64* %3, align 8
  store i64 %15079, i64* %9139, align 8
  %15081 = load i64, i64* %RBP.i, align 8
  %15082 = add i64 %15081, -588
  %15083 = load i32, i32* %R9D.i6071, align 4
  %15084 = add i64 %15080, 10
  store i64 %15084, i64* %3, align 8
  %15085 = inttoptr i64 %15082 to i32*
  store i32 %15083, i32* %15085, align 4
  %15086 = load i32, i32* %R14D.i797, align 4
  %15087 = zext i32 %15086 to i64
  %15088 = load i64, i64* %3, align 8
  store i64 %15087, i64* %9145, align 8
  %15089 = load i16, i16* %R15W.i794, align 2
  %15090 = load i32*, i32** %9168, align 8
  %15091 = sext i16 %15089 to i32
  %15092 = add i64 %15088, 10
  store i64 %15092, i64* %3, align 8
  store i32 %15091, i32* %15090, align 4
  %15093 = load i16, i16* %R12W.i791, align 2
  %15094 = load i64, i64* %3, align 8
  %15095 = sext i16 %15093 to i64
  %15096 = and i64 %15095, 4294967295
  store i64 %15096, i64* %.pre243, align 8
  %15097 = load i64, i64* %6, align 8
  %15098 = add i64 %15097, 8
  %15099 = sext i16 %15093 to i32
  %15100 = add i64 %15094, 8
  store i64 %15100, i64* %3, align 8
  %15101 = inttoptr i64 %15098 to i32*
  store i32 %15099, i32* %15101, align 4
  %15102 = load i64, i64* %RBP.i, align 8
  %15103 = add i64 %15102, -576
  %15104 = load i64, i64* %3, align 8
  %15105 = add i64 %15104, 7
  store i64 %15105, i64* %3, align 8
  %15106 = inttoptr i64 %15103 to i64*
  %15107 = load i64, i64* %15106, align 8
  store i64 %15107, i64* %R10.i6168, align 8
  %15108 = load i64, i64* %6, align 8
  %15109 = add i64 %15108, 16
  %15110 = add i64 %15104, 12
  store i64 %15110, i64* %3, align 8
  %15111 = inttoptr i64 %15109 to i64*
  store i64 %15107, i64* %15111, align 8
  %15112 = load i64, i64* %RBP.i, align 8
  %15113 = add i64 %15112, -568
  %15114 = load i64, i64* %3, align 8
  %15115 = add i64 %15114, 7
  store i64 %15115, i64* %3, align 8
  %15116 = inttoptr i64 %15113 to i64*
  %15117 = load i64, i64* %15116, align 8
  store i64 %15117, i64* %R10.i6168, align 8
  %15118 = load i64, i64* %6, align 8
  %15119 = add i64 %15118, 24
  %15120 = add i64 %15114, 12
  store i64 %15120, i64* %3, align 8
  %15121 = inttoptr i64 %15119 to i64*
  store i64 %15117, i64* %15121, align 8
  %15122 = load i64, i64* %RBP.i, align 8
  %15123 = add i64 %15122, -560
  %15124 = load i64, i64* %3, align 8
  %15125 = add i64 %15124, 7
  store i64 %15125, i64* %3, align 8
  %15126 = inttoptr i64 %15123 to i64*
  %15127 = load i64, i64* %15126, align 8
  store i64 %15127, i64* %R10.i6168, align 8
  %15128 = load i64, i64* %6, align 8
  %15129 = add i64 %15128, 32
  %15130 = add i64 %15124, 12
  store i64 %15130, i64* %3, align 8
  %15131 = inttoptr i64 %15129 to i64*
  store i64 %15127, i64* %15131, align 8
  %15132 = load i64, i64* %RBP.i, align 8
  %15133 = add i64 %15132, -584
  %15134 = load i64, i64* %3, align 8
  %15135 = add i64 %15134, 7
  store i64 %15135, i64* %3, align 8
  %15136 = inttoptr i64 %15133 to i64*
  %15137 = load i64, i64* %15136, align 8
  store i64 %15137, i64* %R10.i6168, align 8
  %15138 = load i64, i64* %6, align 8
  %15139 = add i64 %15138, 40
  %15140 = add i64 %15134, 12
  store i64 %15140, i64* %3, align 8
  %15141 = inttoptr i64 %15139 to i64*
  store i64 %15137, i64* %15141, align 8
  %15142 = load i64, i64* %6, align 8
  %15143 = add i64 %15142, 48
  %15144 = load i64, i64* %3, align 8
  %15145 = add i64 %15144, 8
  store i64 %15145, i64* %3, align 8
  %15146 = inttoptr i64 %15143 to i32*
  store i32 9, i32* %15146, align 4
  %15147 = load i64, i64* %6, align 8
  %15148 = add i64 %15147, 56
  %15149 = load i64, i64* %3, align 8
  %15150 = add i64 %15149, 8
  store i64 %15150, i64* %3, align 8
  %15151 = inttoptr i64 %15148 to i32*
  store i32 9, i32* %15151, align 4
  %15152 = load i64, i64* %6, align 8
  %15153 = add i64 %15152, 64
  %15154 = load i32, i32* %R13D.i400, align 4
  %15155 = load i64, i64* %3, align 8
  %15156 = add i64 %15155, 5
  store i64 %15156, i64* %3, align 8
  %15157 = inttoptr i64 %15153 to i32*
  store i32 %15154, i32* %15157, align 4
  %15158 = load i64, i64* %3, align 8
  %15159 = add i64 %15158, -55951
  %15160 = add i64 %15158, 5
  %15161 = load i64, i64* %6, align 8
  %15162 = add i64 %15161, -8
  %15163 = inttoptr i64 %15162 to i64*
  store i64 %15160, i64* %15163, align 8
  store i64 %15162, i64* %6, align 8
  store i64 %15159, i64* %3, align 8
  %call2_470f5f = tail call %struct.Memory* @sub_4634d0.SubPelBlockSearchBiPred(%struct.State* nonnull %0, i64 %15159, %struct.Memory* %MEMORY.70)
  %15164 = load i64, i64* %RBP.i, align 8
  %15165 = add i64 %15164, -212
  %15166 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %15167 = load i64, i64* %3, align 8
  %15168 = add i64 %15167, 6
  store i64 %15168, i64* %3, align 8
  %15169 = inttoptr i64 %15165 to i32*
  store i32 %15166, i32* %15169, align 4
  %15170 = load i64, i64* %3, align 8
  %15171 = add i64 %15170, 27
  store i64 %15171, i64* %3, align 8
  br label %block_.L_470f85

block_.L_470f6f:                                  ; preds = %block_.L_470e40
  %15172 = load i64, i64* %RBP.i, align 8
  %15173 = add i64 %15172, -218
  %15174 = add i64 %14966, 7
  store i64 %15174, i64* %3, align 8
  %15175 = inttoptr i64 %15173 to i16*
  %15176 = load i16, i16* %15175, align 2
  store i16 %15176, i16* %AX.i4810, align 2
  %15177 = add i64 %15172, -78
  %15178 = add i64 %14966, 11
  store i64 %15178, i64* %3, align 8
  %15179 = inttoptr i64 %15177 to i16*
  store i16 %15176, i16* %15179, align 2
  %15180 = load i64, i64* %RBP.i, align 8
  %15181 = add i64 %15180, -220
  %15182 = load i64, i64* %3, align 8
  %15183 = add i64 %15182, 7
  store i64 %15183, i64* %3, align 8
  %15184 = inttoptr i64 %15181 to i16*
  %15185 = load i16, i16* %15184, align 2
  store i16 %15185, i16* %AX.i4810, align 2
  %15186 = add i64 %15180, -80
  %15187 = add i64 %15182, 11
  store i64 %15187, i64* %3, align 8
  %15188 = inttoptr i64 %15186 to i16*
  store i16 %15185, i16* %15188, align 2
  %.pre224 = load i64, i64* %3, align 8
  br label %block_.L_470f85

block_.L_470f85:                                  ; preds = %block_.L_470f6f, %block_.L_470e70
  %15189 = phi i64 [ %.pre224, %block_.L_470f6f ], [ %15171, %block_.L_470e70 ]
  %MEMORY.72 = phi %struct.Memory* [ %MEMORY.70, %block_.L_470f6f ], [ %call2_470f5f, %block_.L_470e70 ]
  %15190 = load i64, i64* %RBP.i, align 8
  %15191 = add i64 %15190, -84
  %15192 = add i64 %15189, 7
  store i64 %15192, i64* %3, align 8
  %15193 = inttoptr i64 %15191 to i32*
  store i32 0, i32* %15193, align 4
  %DX.i283 = bitcast %union.anon* %83 to i16*
  %.pre225 = load i64, i64* %3, align 8
  br label %block_.L_470f8c

block_.L_470f8c:                                  ; preds = %block_.L_4710e0, %block_.L_470f85
  %15194 = phi i64 [ %15862, %block_.L_4710e0 ], [ %.pre225, %block_.L_470f85 ]
  %15195 = load i64, i64* %RBP.i, align 8
  %15196 = add i64 %15195, -84
  %15197 = add i64 %15194, 3
  store i64 %15197, i64* %3, align 8
  %15198 = inttoptr i64 %15196 to i32*
  %15199 = load i32, i32* %15198, align 4
  %15200 = zext i32 %15199 to i64
  store i64 %15200, i64* %.pre243, align 8
  %15201 = add i64 %15195, -108
  %15202 = add i64 %15194, 6
  store i64 %15202, i64* %3, align 8
  %15203 = inttoptr i64 %15201 to i32*
  %15204 = load i32, i32* %15203, align 4
  %15205 = sext i32 %15204 to i64
  %15206 = ashr i64 %15205, 1
  %15207 = lshr i64 %15206, 1
  %15208 = and i64 %15207, 4294967295
  store i64 %15208, i64* %RCX.i6189, align 8
  %15209 = trunc i64 %15207 to i32
  %15210 = sub i32 %15199, %15209
  %15211 = icmp ult i32 %15199, %15209
  %15212 = zext i1 %15211 to i8
  store i8 %15212, i8* %44, align 1
  %15213 = and i32 %15210, 255
  %15214 = tail call i32 @llvm.ctpop.i32(i32 %15213)
  %15215 = trunc i32 %15214 to i8
  %15216 = and i8 %15215, 1
  %15217 = xor i8 %15216, 1
  store i8 %15217, i8* %51, align 1
  %15218 = xor i32 %15209, %15199
  %15219 = xor i32 %15218, %15210
  %15220 = lshr i32 %15219, 4
  %15221 = trunc i32 %15220 to i8
  %15222 = and i8 %15221, 1
  store i8 %15222, i8* %56, align 1
  %15223 = icmp eq i32 %15210, 0
  %15224 = zext i1 %15223 to i8
  store i8 %15224, i8* %59, align 1
  %15225 = lshr i32 %15210, 31
  %15226 = trunc i32 %15225 to i8
  store i8 %15226, i8* %62, align 1
  %15227 = lshr i32 %15199, 31
  %15228 = lshr i64 %15206, 32
  %15229 = trunc i64 %15228 to i32
  %15230 = and i32 %15229, 1
  %15231 = xor i32 %15230, %15227
  %15232 = xor i32 %15225, %15227
  %15233 = add nuw nsw i32 %15232, %15231
  %15234 = icmp eq i32 %15233, 2
  %15235 = zext i1 %15234 to i8
  store i8 %15235, i8* %68, align 1
  %15236 = icmp ne i8 %15226, 0
  %15237 = xor i1 %15236, %15234
  %.v289 = select i1 %15237, i64 17, i64 359
  %15238 = add i64 %15194, %.v289
  store i64 %15238, i64* %3, align 8
  br i1 %15237, label %block_470f9d, label %block_.L_4710f3

block_470f9d:                                     ; preds = %block_.L_470f8c
  %15239 = add i64 %15195, -88
  %15240 = add i64 %15238, 7
  store i64 %15240, i64* %3, align 8
  %15241 = inttoptr i64 %15239 to i32*
  store i32 0, i32* %15241, align 4
  %.pre226 = load i64, i64* %3, align 8
  br label %block_.L_470fa4

block_.L_470fa4:                                  ; preds = %block_470fb5, %block_470f9d
  %15242 = phi i64 [ %15832, %block_470fb5 ], [ %.pre226, %block_470f9d ]
  %15243 = load i64, i64* %RBP.i, align 8
  %15244 = add i64 %15243, -88
  %15245 = add i64 %15242, 3
  store i64 %15245, i64* %3, align 8
  %15246 = inttoptr i64 %15244 to i32*
  %15247 = load i32, i32* %15246, align 4
  %15248 = zext i32 %15247 to i64
  store i64 %15248, i64* %.pre243, align 8
  %15249 = add i64 %15243, -112
  %15250 = add i64 %15242, 6
  store i64 %15250, i64* %3, align 8
  %15251 = inttoptr i64 %15249 to i32*
  %15252 = load i32, i32* %15251, align 4
  %15253 = sext i32 %15252 to i64
  %15254 = ashr i64 %15253, 1
  %15255 = lshr i64 %15254, 1
  %15256 = and i64 %15255, 4294967295
  store i64 %15256, i64* %RCX.i6189, align 8
  %15257 = trunc i64 %15255 to i32
  %15258 = sub i32 %15247, %15257
  %15259 = icmp ult i32 %15247, %15257
  %15260 = zext i1 %15259 to i8
  store i8 %15260, i8* %44, align 1
  %15261 = and i32 %15258, 255
  %15262 = tail call i32 @llvm.ctpop.i32(i32 %15261)
  %15263 = trunc i32 %15262 to i8
  %15264 = and i8 %15263, 1
  %15265 = xor i8 %15264, 1
  store i8 %15265, i8* %51, align 1
  %15266 = xor i32 %15257, %15247
  %15267 = xor i32 %15266, %15258
  %15268 = lshr i32 %15267, 4
  %15269 = trunc i32 %15268 to i8
  %15270 = and i8 %15269, 1
  store i8 %15270, i8* %56, align 1
  %15271 = icmp eq i32 %15258, 0
  %15272 = zext i1 %15271 to i8
  store i8 %15272, i8* %59, align 1
  %15273 = lshr i32 %15258, 31
  %15274 = trunc i32 %15273 to i8
  store i8 %15274, i8* %62, align 1
  %15275 = lshr i32 %15247, 31
  %15276 = lshr i64 %15254, 32
  %15277 = trunc i64 %15276 to i32
  %15278 = and i32 %15277, 1
  %15279 = xor i32 %15278, %15275
  %15280 = xor i32 %15273, %15275
  %15281 = add nuw nsw i32 %15280, %15279
  %15282 = icmp eq i32 %15281, 2
  %15283 = zext i1 %15282 to i8
  store i8 %15283, i8* %68, align 1
  %15284 = icmp ne i8 %15274, 0
  %15285 = xor i1 %15284, %15282
  %.v = select i1 %15285, i64 17, i64 316
  %15286 = add i64 %15242, %.v
  store i64 %15286, i64* %3, align 8
  br i1 %15285, label %block_470fb5, label %block_.L_4710e0

block_470fb5:                                     ; preds = %block_.L_470fa4
  store i64 0, i64* %.pre243, align 8
  store i8 0, i8* %44, align 1
  store i8 1, i8* %51, align 1
  store i8 1, i8* %59, align 1
  store i8 0, i8* %62, align 1
  store i8 0, i8* %68, align 1
  store i8 0, i8* %56, align 1
  store i64 1, i64* %RCX.i6189, align 8
  %15287 = add i64 %15243, -78
  %15288 = add i64 %15286, 11
  store i64 %15288, i64* %3, align 8
  %15289 = inttoptr i64 %15287 to i16*
  %15290 = load i16, i16* %15289, align 2
  store i16 %15290, i16* %DX.i283, align 2
  %15291 = add i64 %15243, -208
  %15292 = add i64 %15286, 18
  store i64 %15292, i64* %3, align 8
  %15293 = inttoptr i64 %15291 to i64*
  %15294 = load i64, i64* %15293, align 8
  store i64 %15294, i64* %RSI.i2931, align 8
  %15295 = add i64 %15243, -100
  %15296 = add i64 %15286, 21
  store i64 %15296, i64* %3, align 8
  %15297 = inttoptr i64 %15295 to i32*
  %15298 = load i32, i32* %15297, align 4
  %15299 = zext i32 %15298 to i64
  store i64 %15299, i64* %RDI.i2935, align 8
  %15300 = add i64 %15243, -84
  %15301 = add i64 %15286, 24
  store i64 %15301, i64* %3, align 8
  %15302 = inttoptr i64 %15300 to i32*
  %15303 = load i32, i32* %15302, align 4
  %15304 = add i32 %15303, %15298
  %15305 = zext i32 %15304 to i64
  store i64 %15305, i64* %RDI.i2935, align 8
  %15306 = icmp ult i32 %15304, %15298
  %15307 = icmp ult i32 %15304, %15303
  %15308 = or i1 %15306, %15307
  %15309 = zext i1 %15308 to i8
  store i8 %15309, i8* %44, align 1
  %15310 = and i32 %15304, 255
  %15311 = tail call i32 @llvm.ctpop.i32(i32 %15310)
  %15312 = trunc i32 %15311 to i8
  %15313 = and i8 %15312, 1
  %15314 = xor i8 %15313, 1
  store i8 %15314, i8* %51, align 1
  %15315 = xor i32 %15303, %15298
  %15316 = xor i32 %15315, %15304
  %15317 = lshr i32 %15316, 4
  %15318 = trunc i32 %15317 to i8
  %15319 = and i8 %15318, 1
  store i8 %15319, i8* %56, align 1
  %15320 = icmp eq i32 %15304, 0
  %15321 = zext i1 %15320 to i8
  store i8 %15321, i8* %59, align 1
  %15322 = lshr i32 %15304, 31
  %15323 = trunc i32 %15322 to i8
  store i8 %15323, i8* %62, align 1
  %15324 = lshr i32 %15298, 31
  %15325 = lshr i32 %15303, 31
  %15326 = xor i32 %15322, %15324
  %15327 = xor i32 %15322, %15325
  %15328 = add nuw nsw i32 %15326, %15327
  %15329 = icmp eq i32 %15328, 2
  %15330 = zext i1 %15329 to i8
  store i8 %15330, i8* %68, align 1
  %15331 = sext i32 %15304 to i64
  store i64 %15331, i64* %9139, align 8
  %15332 = shl nsw i64 %15331, 3
  %15333 = add i64 %15294, %15332
  %15334 = add i64 %15286, 31
  store i64 %15334, i64* %3, align 8
  %15335 = inttoptr i64 %15333 to i64*
  %15336 = load i64, i64* %15335, align 8
  store i64 %15336, i64* %RSI.i2931, align 8
  %15337 = add i64 %15243, -104
  %15338 = add i64 %15286, 34
  store i64 %15338, i64* %3, align 8
  %15339 = inttoptr i64 %15337 to i32*
  %15340 = load i32, i32* %15339, align 4
  %15341 = zext i32 %15340 to i64
  store i64 %15341, i64* %RDI.i2935, align 8
  %15342 = load i64, i64* %RBP.i, align 8
  %15343 = add i64 %15342, -88
  %15344 = add i64 %15286, 37
  store i64 %15344, i64* %3, align 8
  %15345 = inttoptr i64 %15343 to i32*
  %15346 = load i32, i32* %15345, align 4
  %15347 = add i32 %15346, %15340
  %15348 = zext i32 %15347 to i64
  store i64 %15348, i64* %RDI.i2935, align 8
  %15349 = icmp ult i32 %15347, %15340
  %15350 = icmp ult i32 %15347, %15346
  %15351 = or i1 %15349, %15350
  %15352 = zext i1 %15351 to i8
  store i8 %15352, i8* %44, align 1
  %15353 = and i32 %15347, 255
  %15354 = tail call i32 @llvm.ctpop.i32(i32 %15353)
  %15355 = trunc i32 %15354 to i8
  %15356 = and i8 %15355, 1
  %15357 = xor i8 %15356, 1
  store i8 %15357, i8* %51, align 1
  %15358 = xor i32 %15346, %15340
  %15359 = xor i32 %15358, %15347
  %15360 = lshr i32 %15359, 4
  %15361 = trunc i32 %15360 to i8
  %15362 = and i8 %15361, 1
  store i8 %15362, i8* %56, align 1
  %15363 = icmp eq i32 %15347, 0
  %15364 = zext i1 %15363 to i8
  store i8 %15364, i8* %59, align 1
  %15365 = lshr i32 %15347, 31
  %15366 = trunc i32 %15365 to i8
  store i8 %15366, i8* %62, align 1
  %15367 = lshr i32 %15340, 31
  %15368 = lshr i32 %15346, 31
  %15369 = xor i32 %15365, %15367
  %15370 = xor i32 %15365, %15368
  %15371 = add nuw nsw i32 %15369, %15370
  %15372 = icmp eq i32 %15371, 2
  %15373 = zext i1 %15372 to i8
  store i8 %15373, i8* %68, align 1
  %15374 = sext i32 %15347 to i64
  store i64 %15374, i64* %9139, align 8
  %15375 = shl nsw i64 %15374, 3
  %15376 = add i64 %15336, %15375
  %15377 = add i64 %15286, 44
  store i64 %15377, i64* %3, align 8
  %15378 = inttoptr i64 %15376 to i64*
  %15379 = load i64, i64* %15378, align 8
  store i64 %15379, i64* %RSI.i2931, align 8
  %15380 = add i64 %15342, -230
  %15381 = add i64 %15286, 52
  store i64 %15381, i64* %3, align 8
  %15382 = inttoptr i64 %15380 to i16*
  %15383 = load i16, i16* %15382, align 2
  %15384 = sext i16 %15383 to i64
  store i64 %15384, i64* %9139, align 8
  %15385 = shl nsw i64 %15384, 3
  %15386 = add i64 %15385, %15379
  %15387 = add i64 %15286, 56
  store i64 %15387, i64* %3, align 8
  %15388 = inttoptr i64 %15386 to i64*
  %15389 = load i64, i64* %15388, align 8
  store i64 %15389, i64* %RSI.i2931, align 8
  %15390 = add i64 %15286, 59
  store i64 %15390, i64* %3, align 8
  %15391 = inttoptr i64 %15389 to i64*
  %15392 = load i64, i64* %15391, align 8
  store i64 %15392, i64* %RSI.i2931, align 8
  %15393 = add i64 %15342, -60
  %15394 = add i64 %15286, 63
  store i64 %15394, i64* %3, align 8
  %15395 = inttoptr i64 %15393 to i32*
  %15396 = load i32, i32* %15395, align 4
  %15397 = sext i32 %15396 to i64
  store i64 %15397, i64* %9139, align 8
  %15398 = shl nsw i64 %15397, 3
  %15399 = add i64 %15398, %15392
  %15400 = add i64 %15286, 67
  store i64 %15400, i64* %3, align 8
  %15401 = inttoptr i64 %15399 to i64*
  %15402 = load i64, i64* %15401, align 8
  store i64 %15402, i64* %RSI.i2931, align 8
  %15403 = load i16, i16* %DX.i283, align 2
  %15404 = add i64 %15286, 70
  store i64 %15404, i64* %3, align 8
  %15405 = inttoptr i64 %15402 to i16*
  store i16 %15403, i16* %15405, align 2
  %15406 = load i64, i64* %RBP.i, align 8
  %15407 = add i64 %15406, -80
  %15408 = load i64, i64* %3, align 8
  %15409 = add i64 %15408, 4
  store i64 %15409, i64* %3, align 8
  %15410 = inttoptr i64 %15407 to i16*
  %15411 = load i16, i16* %15410, align 2
  store i16 %15411, i16* %DX.i283, align 2
  %15412 = add i64 %15406, -208
  %15413 = add i64 %15408, 11
  store i64 %15413, i64* %3, align 8
  %15414 = inttoptr i64 %15412 to i64*
  %15415 = load i64, i64* %15414, align 8
  store i64 %15415, i64* %RSI.i2931, align 8
  %15416 = add i64 %15406, -100
  %15417 = add i64 %15408, 14
  store i64 %15417, i64* %3, align 8
  %15418 = inttoptr i64 %15416 to i32*
  %15419 = load i32, i32* %15418, align 4
  %15420 = zext i32 %15419 to i64
  store i64 %15420, i64* %RDI.i2935, align 8
  %15421 = add i64 %15406, -84
  %15422 = add i64 %15408, 17
  store i64 %15422, i64* %3, align 8
  %15423 = inttoptr i64 %15421 to i32*
  %15424 = load i32, i32* %15423, align 4
  %15425 = add i32 %15424, %15419
  %15426 = zext i32 %15425 to i64
  store i64 %15426, i64* %RDI.i2935, align 8
  %15427 = icmp ult i32 %15425, %15419
  %15428 = icmp ult i32 %15425, %15424
  %15429 = or i1 %15427, %15428
  %15430 = zext i1 %15429 to i8
  store i8 %15430, i8* %44, align 1
  %15431 = and i32 %15425, 255
  %15432 = tail call i32 @llvm.ctpop.i32(i32 %15431)
  %15433 = trunc i32 %15432 to i8
  %15434 = and i8 %15433, 1
  %15435 = xor i8 %15434, 1
  store i8 %15435, i8* %51, align 1
  %15436 = xor i32 %15424, %15419
  %15437 = xor i32 %15436, %15425
  %15438 = lshr i32 %15437, 4
  %15439 = trunc i32 %15438 to i8
  %15440 = and i8 %15439, 1
  store i8 %15440, i8* %56, align 1
  %15441 = icmp eq i32 %15425, 0
  %15442 = zext i1 %15441 to i8
  store i8 %15442, i8* %59, align 1
  %15443 = lshr i32 %15425, 31
  %15444 = trunc i32 %15443 to i8
  store i8 %15444, i8* %62, align 1
  %15445 = lshr i32 %15419, 31
  %15446 = lshr i32 %15424, 31
  %15447 = xor i32 %15443, %15445
  %15448 = xor i32 %15443, %15446
  %15449 = add nuw nsw i32 %15447, %15448
  %15450 = icmp eq i32 %15449, 2
  %15451 = zext i1 %15450 to i8
  store i8 %15451, i8* %68, align 1
  %15452 = sext i32 %15425 to i64
  store i64 %15452, i64* %9139, align 8
  %15453 = shl nsw i64 %15452, 3
  %15454 = add i64 %15415, %15453
  %15455 = add i64 %15408, 24
  store i64 %15455, i64* %3, align 8
  %15456 = inttoptr i64 %15454 to i64*
  %15457 = load i64, i64* %15456, align 8
  store i64 %15457, i64* %RSI.i2931, align 8
  %15458 = add i64 %15406, -104
  %15459 = add i64 %15408, 27
  store i64 %15459, i64* %3, align 8
  %15460 = inttoptr i64 %15458 to i32*
  %15461 = load i32, i32* %15460, align 4
  %15462 = zext i32 %15461 to i64
  store i64 %15462, i64* %RDI.i2935, align 8
  %15463 = add i64 %15406, -88
  %15464 = add i64 %15408, 30
  store i64 %15464, i64* %3, align 8
  %15465 = inttoptr i64 %15463 to i32*
  %15466 = load i32, i32* %15465, align 4
  %15467 = add i32 %15466, %15461
  %15468 = zext i32 %15467 to i64
  store i64 %15468, i64* %RDI.i2935, align 8
  %15469 = icmp ult i32 %15467, %15461
  %15470 = icmp ult i32 %15467, %15466
  %15471 = or i1 %15469, %15470
  %15472 = zext i1 %15471 to i8
  store i8 %15472, i8* %44, align 1
  %15473 = and i32 %15467, 255
  %15474 = tail call i32 @llvm.ctpop.i32(i32 %15473)
  %15475 = trunc i32 %15474 to i8
  %15476 = and i8 %15475, 1
  %15477 = xor i8 %15476, 1
  store i8 %15477, i8* %51, align 1
  %15478 = xor i32 %15466, %15461
  %15479 = xor i32 %15478, %15467
  %15480 = lshr i32 %15479, 4
  %15481 = trunc i32 %15480 to i8
  %15482 = and i8 %15481, 1
  store i8 %15482, i8* %56, align 1
  %15483 = icmp eq i32 %15467, 0
  %15484 = zext i1 %15483 to i8
  store i8 %15484, i8* %59, align 1
  %15485 = lshr i32 %15467, 31
  %15486 = trunc i32 %15485 to i8
  store i8 %15486, i8* %62, align 1
  %15487 = lshr i32 %15461, 31
  %15488 = lshr i32 %15466, 31
  %15489 = xor i32 %15485, %15487
  %15490 = xor i32 %15485, %15488
  %15491 = add nuw nsw i32 %15489, %15490
  %15492 = icmp eq i32 %15491, 2
  %15493 = zext i1 %15492 to i8
  store i8 %15493, i8* %68, align 1
  %15494 = sext i32 %15467 to i64
  store i64 %15494, i64* %9139, align 8
  %15495 = shl nsw i64 %15494, 3
  %15496 = add i64 %15457, %15495
  %15497 = add i64 %15408, 37
  store i64 %15497, i64* %3, align 8
  %15498 = inttoptr i64 %15496 to i64*
  %15499 = load i64, i64* %15498, align 8
  store i64 %15499, i64* %RSI.i2931, align 8
  %15500 = load i64, i64* %RBP.i, align 8
  %15501 = add i64 %15500, -230
  %15502 = add i64 %15408, 45
  store i64 %15502, i64* %3, align 8
  %15503 = inttoptr i64 %15501 to i16*
  %15504 = load i16, i16* %15503, align 2
  %15505 = sext i16 %15504 to i64
  store i64 %15505, i64* %9139, align 8
  %15506 = shl nsw i64 %15505, 3
  %15507 = add i64 %15506, %15499
  %15508 = add i64 %15408, 49
  store i64 %15508, i64* %3, align 8
  %15509 = inttoptr i64 %15507 to i64*
  %15510 = load i64, i64* %15509, align 8
  store i64 %15510, i64* %RSI.i2931, align 8
  %15511 = add i64 %15408, 52
  store i64 %15511, i64* %3, align 8
  %15512 = inttoptr i64 %15510 to i64*
  %15513 = load i64, i64* %15512, align 8
  store i64 %15513, i64* %RSI.i2931, align 8
  %15514 = add i64 %15500, -60
  %15515 = add i64 %15408, 56
  store i64 %15515, i64* %3, align 8
  %15516 = inttoptr i64 %15514 to i32*
  %15517 = load i32, i32* %15516, align 4
  %15518 = sext i32 %15517 to i64
  store i64 %15518, i64* %9139, align 8
  %15519 = shl nsw i64 %15518, 3
  %15520 = add i64 %15519, %15513
  %15521 = add i64 %15408, 60
  store i64 %15521, i64* %3, align 8
  %15522 = inttoptr i64 %15520 to i64*
  %15523 = load i64, i64* %15522, align 8
  store i64 %15523, i64* %RSI.i2931, align 8
  %15524 = add i64 %15523, 2
  %15525 = load i16, i16* %DX.i283, align 2
  %15526 = add i64 %15408, 64
  store i64 %15526, i64* %3, align 8
  %15527 = inttoptr i64 %15524 to i16*
  store i16 %15525, i16* %15527, align 2
  %15528 = load i64, i64* %RBP.i, align 8
  %15529 = add i64 %15528, -214
  %15530 = load i64, i64* %3, align 8
  %15531 = add i64 %15530, 7
  store i64 %15531, i64* %3, align 8
  %15532 = inttoptr i64 %15529 to i16*
  %15533 = load i16, i16* %15532, align 2
  store i16 %15533, i16* %DX.i283, align 2
  %15534 = add i64 %15528, -208
  %15535 = add i64 %15530, 14
  store i64 %15535, i64* %3, align 8
  %15536 = inttoptr i64 %15534 to i64*
  %15537 = load i64, i64* %15536, align 8
  store i64 %15537, i64* %RSI.i2931, align 8
  %15538 = add i64 %15528, -100
  %15539 = add i64 %15530, 17
  store i64 %15539, i64* %3, align 8
  %15540 = inttoptr i64 %15538 to i32*
  %15541 = load i32, i32* %15540, align 4
  %15542 = zext i32 %15541 to i64
  store i64 %15542, i64* %RDI.i2935, align 8
  %15543 = add i64 %15528, -84
  %15544 = add i64 %15530, 20
  store i64 %15544, i64* %3, align 8
  %15545 = inttoptr i64 %15543 to i32*
  %15546 = load i32, i32* %15545, align 4
  %15547 = add i32 %15546, %15541
  %15548 = zext i32 %15547 to i64
  store i64 %15548, i64* %RDI.i2935, align 8
  %15549 = icmp ult i32 %15547, %15541
  %15550 = icmp ult i32 %15547, %15546
  %15551 = or i1 %15549, %15550
  %15552 = zext i1 %15551 to i8
  store i8 %15552, i8* %44, align 1
  %15553 = and i32 %15547, 255
  %15554 = tail call i32 @llvm.ctpop.i32(i32 %15553)
  %15555 = trunc i32 %15554 to i8
  %15556 = and i8 %15555, 1
  %15557 = xor i8 %15556, 1
  store i8 %15557, i8* %51, align 1
  %15558 = xor i32 %15546, %15541
  %15559 = xor i32 %15558, %15547
  %15560 = lshr i32 %15559, 4
  %15561 = trunc i32 %15560 to i8
  %15562 = and i8 %15561, 1
  store i8 %15562, i8* %56, align 1
  %15563 = icmp eq i32 %15547, 0
  %15564 = zext i1 %15563 to i8
  store i8 %15564, i8* %59, align 1
  %15565 = lshr i32 %15547, 31
  %15566 = trunc i32 %15565 to i8
  store i8 %15566, i8* %62, align 1
  %15567 = lshr i32 %15541, 31
  %15568 = lshr i32 %15546, 31
  %15569 = xor i32 %15565, %15567
  %15570 = xor i32 %15565, %15568
  %15571 = add nuw nsw i32 %15569, %15570
  %15572 = icmp eq i32 %15571, 2
  %15573 = zext i1 %15572 to i8
  store i8 %15573, i8* %68, align 1
  %15574 = sext i32 %15547 to i64
  store i64 %15574, i64* %9139, align 8
  %15575 = shl nsw i64 %15574, 3
  %15576 = add i64 %15537, %15575
  %15577 = add i64 %15530, 27
  store i64 %15577, i64* %3, align 8
  %15578 = inttoptr i64 %15576 to i64*
  %15579 = load i64, i64* %15578, align 8
  store i64 %15579, i64* %RSI.i2931, align 8
  %15580 = add i64 %15528, -104
  %15581 = add i64 %15530, 30
  store i64 %15581, i64* %3, align 8
  %15582 = inttoptr i64 %15580 to i32*
  %15583 = load i32, i32* %15582, align 4
  %15584 = zext i32 %15583 to i64
  store i64 %15584, i64* %RDI.i2935, align 8
  %15585 = add i64 %15528, -88
  %15586 = add i64 %15530, 33
  store i64 %15586, i64* %3, align 8
  %15587 = inttoptr i64 %15585 to i32*
  %15588 = load i32, i32* %15587, align 4
  %15589 = add i32 %15588, %15583
  %15590 = zext i32 %15589 to i64
  store i64 %15590, i64* %RDI.i2935, align 8
  %15591 = icmp ult i32 %15589, %15583
  %15592 = icmp ult i32 %15589, %15588
  %15593 = or i1 %15591, %15592
  %15594 = zext i1 %15593 to i8
  store i8 %15594, i8* %44, align 1
  %15595 = and i32 %15589, 255
  %15596 = tail call i32 @llvm.ctpop.i32(i32 %15595)
  %15597 = trunc i32 %15596 to i8
  %15598 = and i8 %15597, 1
  %15599 = xor i8 %15598, 1
  store i8 %15599, i8* %51, align 1
  %15600 = xor i32 %15588, %15583
  %15601 = xor i32 %15600, %15589
  %15602 = lshr i32 %15601, 4
  %15603 = trunc i32 %15602 to i8
  %15604 = and i8 %15603, 1
  store i8 %15604, i8* %56, align 1
  %15605 = icmp eq i32 %15589, 0
  %15606 = zext i1 %15605 to i8
  store i8 %15606, i8* %59, align 1
  %15607 = lshr i32 %15589, 31
  %15608 = trunc i32 %15607 to i8
  store i8 %15608, i8* %62, align 1
  %15609 = lshr i32 %15583, 31
  %15610 = lshr i32 %15588, 31
  %15611 = xor i32 %15607, %15609
  %15612 = xor i32 %15607, %15610
  %15613 = add nuw nsw i32 %15611, %15612
  %15614 = icmp eq i32 %15613, 2
  %15615 = zext i1 %15614 to i8
  store i8 %15615, i8* %68, align 1
  %15616 = sext i32 %15589 to i64
  store i64 %15616, i64* %9139, align 8
  %15617 = shl nsw i64 %15616, 3
  %15618 = add i64 %15579, %15617
  %15619 = add i64 %15530, 40
  store i64 %15619, i64* %3, align 8
  %15620 = inttoptr i64 %15618 to i64*
  %15621 = load i64, i64* %15620, align 8
  store i64 %15621, i64* %RSI.i2931, align 8
  %15622 = load i64, i64* %RBP.i, align 8
  %15623 = add i64 %15622, -230
  %15624 = add i64 %15530, 47
  store i64 %15624, i64* %3, align 8
  %15625 = inttoptr i64 %15623 to i16*
  %15626 = load i16, i16* %15625, align 2
  %15627 = sext i16 %15626 to i32
  store i8 0, i8* %44, align 1
  %15628 = and i32 %15627, 255
  %15629 = tail call i32 @llvm.ctpop.i32(i32 %15628)
  %15630 = trunc i32 %15629 to i8
  %15631 = and i8 %15630, 1
  %15632 = xor i8 %15631, 1
  store i8 %15632, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %15633 = icmp eq i16 %15626, 0
  %15634 = zext i1 %15633 to i8
  store i8 %15634, i8* %59, align 1
  %15635 = lshr i32 %15627, 31
  %15636 = trunc i32 %15635 to i8
  store i8 %15636, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %15637 = load i32, i32* %EAX.i6004.pre-phi, align 4
  %15638 = load i32, i32* %ECX.i5565, align 4
  %.v355 = select i1 %15633, i32 %15638, i32 %15637
  %15639 = zext i32 %.v355 to i64
  store i64 %15639, i64* %RDI.i2935, align 8
  %sext = shl nuw i64 %15639, 32
  %15640 = sext i32 %.v355 to i64
  store i64 %15640, i64* %9139, align 8
  %15641 = ashr exact i64 %sext, 29
  %15642 = add i64 %15621, %15641
  %15643 = add i64 %15530, 62
  store i64 %15643, i64* %3, align 8
  %15644 = inttoptr i64 %15642 to i64*
  %15645 = load i64, i64* %15644, align 8
  store i64 %15645, i64* %RSI.i2931, align 8
  %15646 = add i64 %15530, 65
  store i64 %15646, i64* %3, align 8
  %15647 = inttoptr i64 %15645 to i64*
  %15648 = load i64, i64* %15647, align 8
  store i64 %15648, i64* %RSI.i2931, align 8
  %15649 = add i64 %15622, -60
  %15650 = add i64 %15530, 69
  store i64 %15650, i64* %3, align 8
  %15651 = inttoptr i64 %15649 to i32*
  %15652 = load i32, i32* %15651, align 4
  %15653 = sext i32 %15652 to i64
  store i64 %15653, i64* %9139, align 8
  %15654 = shl nsw i64 %15653, 3
  %15655 = add i64 %15654, %15648
  %15656 = add i64 %15530, 73
  store i64 %15656, i64* %3, align 8
  %15657 = inttoptr i64 %15655 to i64*
  %15658 = load i64, i64* %15657, align 8
  store i64 %15658, i64* %RSI.i2931, align 8
  %15659 = load i16, i16* %DX.i283, align 2
  %15660 = add i64 %15530, 76
  store i64 %15660, i64* %3, align 8
  %15661 = inttoptr i64 %15658 to i16*
  store i16 %15659, i16* %15661, align 2
  %15662 = load i64, i64* %RBP.i, align 8
  %15663 = add i64 %15662, -216
  %15664 = load i64, i64* %3, align 8
  %15665 = add i64 %15664, 7
  store i64 %15665, i64* %3, align 8
  %15666 = inttoptr i64 %15663 to i16*
  %15667 = load i16, i16* %15666, align 2
  store i16 %15667, i16* %DX.i283, align 2
  %15668 = add i64 %15662, -208
  %15669 = add i64 %15664, 14
  store i64 %15669, i64* %3, align 8
  %15670 = inttoptr i64 %15668 to i64*
  %15671 = load i64, i64* %15670, align 8
  store i64 %15671, i64* %RSI.i2931, align 8
  %15672 = add i64 %15662, -100
  %15673 = add i64 %15664, 17
  store i64 %15673, i64* %3, align 8
  %15674 = inttoptr i64 %15672 to i32*
  %15675 = load i32, i32* %15674, align 4
  %15676 = zext i32 %15675 to i64
  store i64 %15676, i64* %RDI.i2935, align 8
  %15677 = add i64 %15662, -84
  %15678 = add i64 %15664, 20
  store i64 %15678, i64* %3, align 8
  %15679 = inttoptr i64 %15677 to i32*
  %15680 = load i32, i32* %15679, align 4
  %15681 = add i32 %15680, %15675
  %15682 = zext i32 %15681 to i64
  store i64 %15682, i64* %RDI.i2935, align 8
  %15683 = icmp ult i32 %15681, %15675
  %15684 = icmp ult i32 %15681, %15680
  %15685 = or i1 %15683, %15684
  %15686 = zext i1 %15685 to i8
  store i8 %15686, i8* %44, align 1
  %15687 = and i32 %15681, 255
  %15688 = tail call i32 @llvm.ctpop.i32(i32 %15687)
  %15689 = trunc i32 %15688 to i8
  %15690 = and i8 %15689, 1
  %15691 = xor i8 %15690, 1
  store i8 %15691, i8* %51, align 1
  %15692 = xor i32 %15680, %15675
  %15693 = xor i32 %15692, %15681
  %15694 = lshr i32 %15693, 4
  %15695 = trunc i32 %15694 to i8
  %15696 = and i8 %15695, 1
  store i8 %15696, i8* %56, align 1
  %15697 = icmp eq i32 %15681, 0
  %15698 = zext i1 %15697 to i8
  store i8 %15698, i8* %59, align 1
  %15699 = lshr i32 %15681, 31
  %15700 = trunc i32 %15699 to i8
  store i8 %15700, i8* %62, align 1
  %15701 = lshr i32 %15675, 31
  %15702 = lshr i32 %15680, 31
  %15703 = xor i32 %15699, %15701
  %15704 = xor i32 %15699, %15702
  %15705 = add nuw nsw i32 %15703, %15704
  %15706 = icmp eq i32 %15705, 2
  %15707 = zext i1 %15706 to i8
  store i8 %15707, i8* %68, align 1
  %15708 = sext i32 %15681 to i64
  store i64 %15708, i64* %9139, align 8
  %15709 = shl nsw i64 %15708, 3
  %15710 = add i64 %15671, %15709
  %15711 = add i64 %15664, 27
  store i64 %15711, i64* %3, align 8
  %15712 = inttoptr i64 %15710 to i64*
  %15713 = load i64, i64* %15712, align 8
  store i64 %15713, i64* %RSI.i2931, align 8
  %15714 = add i64 %15662, -104
  %15715 = add i64 %15664, 30
  store i64 %15715, i64* %3, align 8
  %15716 = inttoptr i64 %15714 to i32*
  %15717 = load i32, i32* %15716, align 4
  %15718 = zext i32 %15717 to i64
  store i64 %15718, i64* %RDI.i2935, align 8
  %15719 = add i64 %15662, -88
  %15720 = add i64 %15664, 33
  store i64 %15720, i64* %3, align 8
  %15721 = inttoptr i64 %15719 to i32*
  %15722 = load i32, i32* %15721, align 4
  %15723 = add i32 %15722, %15717
  %15724 = zext i32 %15723 to i64
  store i64 %15724, i64* %RDI.i2935, align 8
  %15725 = icmp ult i32 %15723, %15717
  %15726 = icmp ult i32 %15723, %15722
  %15727 = or i1 %15725, %15726
  %15728 = zext i1 %15727 to i8
  store i8 %15728, i8* %44, align 1
  %15729 = and i32 %15723, 255
  %15730 = tail call i32 @llvm.ctpop.i32(i32 %15729)
  %15731 = trunc i32 %15730 to i8
  %15732 = and i8 %15731, 1
  %15733 = xor i8 %15732, 1
  store i8 %15733, i8* %51, align 1
  %15734 = xor i32 %15722, %15717
  %15735 = xor i32 %15734, %15723
  %15736 = lshr i32 %15735, 4
  %15737 = trunc i32 %15736 to i8
  %15738 = and i8 %15737, 1
  store i8 %15738, i8* %56, align 1
  %15739 = icmp eq i32 %15723, 0
  %15740 = zext i1 %15739 to i8
  store i8 %15740, i8* %59, align 1
  %15741 = lshr i32 %15723, 31
  %15742 = trunc i32 %15741 to i8
  store i8 %15742, i8* %62, align 1
  %15743 = lshr i32 %15717, 31
  %15744 = lshr i32 %15722, 31
  %15745 = xor i32 %15741, %15743
  %15746 = xor i32 %15741, %15744
  %15747 = add nuw nsw i32 %15745, %15746
  %15748 = icmp eq i32 %15747, 2
  %15749 = zext i1 %15748 to i8
  store i8 %15749, i8* %68, align 1
  %15750 = sext i32 %15723 to i64
  store i64 %15750, i64* %9139, align 8
  %15751 = shl nsw i64 %15750, 3
  %15752 = add i64 %15713, %15751
  %15753 = add i64 %15664, 40
  store i64 %15753, i64* %3, align 8
  %15754 = inttoptr i64 %15752 to i64*
  %15755 = load i64, i64* %15754, align 8
  store i64 %15755, i64* %RSI.i2931, align 8
  %15756 = load i64, i64* %RBP.i, align 8
  %15757 = add i64 %15756, -230
  %15758 = add i64 %15664, 47
  store i64 %15758, i64* %3, align 8
  %15759 = inttoptr i64 %15757 to i16*
  %15760 = load i16, i16* %15759, align 2
  %15761 = sext i16 %15760 to i64
  %15762 = and i64 %15761, 4294967295
  store i64 %15762, i64* %RDI.i2935, align 8
  %15763 = sext i16 %15760 to i32
  store i8 0, i8* %44, align 1
  %15764 = and i32 %15763, 255
  %15765 = tail call i32 @llvm.ctpop.i32(i32 %15764)
  %15766 = trunc i32 %15765 to i8
  %15767 = and i8 %15766, 1
  %15768 = xor i8 %15767, 1
  store i8 %15768, i8* %51, align 1
  store i8 0, i8* %56, align 1
  %15769 = icmp eq i16 %15760, 0
  %15770 = zext i1 %15769 to i8
  store i8 %15770, i8* %59, align 1
  %15771 = lshr i32 %15763, 31
  %15772 = trunc i32 %15771 to i8
  store i8 %15772, i8* %62, align 1
  store i8 0, i8* %68, align 1
  %15773 = load i32, i32* %ECX.i5565, align 4
  %15774 = zext i32 %15773 to i64
  %15775 = load i64, i64* %.pre243, align 8
  %15776 = select i1 %15769, i64 %15774, i64 %15775
  %15777 = and i64 %15776, 4294967295
  store i64 %15777, i64* %.pre243, align 8
  %sext246 = shl i64 %15776, 32
  %15778 = ashr exact i64 %sext246, 32
  store i64 %15778, i64* %9139, align 8
  %15779 = ashr exact i64 %sext246, 29
  %15780 = add i64 %15755, %15779
  %15781 = add i64 %15664, 60
  store i64 %15781, i64* %3, align 8
  %15782 = inttoptr i64 %15780 to i64*
  %15783 = load i64, i64* %15782, align 8
  store i64 %15783, i64* %RSI.i2931, align 8
  %15784 = add i64 %15664, 63
  store i64 %15784, i64* %3, align 8
  %15785 = inttoptr i64 %15783 to i64*
  %15786 = load i64, i64* %15785, align 8
  store i64 %15786, i64* %RSI.i2931, align 8
  %15787 = add i64 %15756, -60
  %15788 = add i64 %15664, 67
  store i64 %15788, i64* %3, align 8
  %15789 = inttoptr i64 %15787 to i32*
  %15790 = load i32, i32* %15789, align 4
  %15791 = sext i32 %15790 to i64
  store i64 %15791, i64* %9139, align 8
  %15792 = shl nsw i64 %15791, 3
  %15793 = add i64 %15792, %15786
  %15794 = add i64 %15664, 71
  store i64 %15794, i64* %3, align 8
  %15795 = inttoptr i64 %15793 to i64*
  %15796 = load i64, i64* %15795, align 8
  store i64 %15796, i64* %RSI.i2931, align 8
  %15797 = add i64 %15796, 2
  %15798 = load i16, i16* %DX.i283, align 2
  %15799 = add i64 %15664, 75
  store i64 %15799, i64* %3, align 8
  %15800 = inttoptr i64 %15797 to i16*
  store i16 %15798, i16* %15800, align 2
  %15801 = load i64, i64* %RBP.i, align 8
  %15802 = add i64 %15801, -88
  %15803 = load i64, i64* %3, align 8
  %15804 = add i64 %15803, 3
  store i64 %15804, i64* %3, align 8
  %15805 = inttoptr i64 %15802 to i32*
  %15806 = load i32, i32* %15805, align 4
  %15807 = add i32 %15806, 1
  %15808 = zext i32 %15807 to i64
  store i64 %15808, i64* %.pre243, align 8
  %15809 = icmp eq i32 %15806, -1
  %15810 = icmp eq i32 %15807, 0
  %15811 = or i1 %15809, %15810
  %15812 = zext i1 %15811 to i8
  store i8 %15812, i8* %44, align 1
  %15813 = and i32 %15807, 255
  %15814 = tail call i32 @llvm.ctpop.i32(i32 %15813)
  %15815 = trunc i32 %15814 to i8
  %15816 = and i8 %15815, 1
  %15817 = xor i8 %15816, 1
  store i8 %15817, i8* %51, align 1
  %15818 = xor i32 %15807, %15806
  %15819 = lshr i32 %15818, 4
  %15820 = trunc i32 %15819 to i8
  %15821 = and i8 %15820, 1
  store i8 %15821, i8* %56, align 1
  %15822 = zext i1 %15810 to i8
  store i8 %15822, i8* %59, align 1
  %15823 = lshr i32 %15807, 31
  %15824 = trunc i32 %15823 to i8
  store i8 %15824, i8* %62, align 1
  %15825 = lshr i32 %15806, 31
  %15826 = xor i32 %15823, %15825
  %15827 = add nuw nsw i32 %15826, %15823
  %15828 = icmp eq i32 %15827, 2
  %15829 = zext i1 %15828 to i8
  store i8 %15829, i8* %68, align 1
  %15830 = add i64 %15803, 9
  store i64 %15830, i64* %3, align 8
  store i32 %15807, i32* %15805, align 4
  %15831 = load i64, i64* %3, align 8
  %15832 = add i64 %15831, -311
  store i64 %15832, i64* %3, align 8
  br label %block_.L_470fa4

block_.L_4710e0:                                  ; preds = %block_.L_470fa4
  %15833 = add i64 %15243, -84
  %15834 = add i64 %15286, 8
  store i64 %15834, i64* %3, align 8
  %15835 = inttoptr i64 %15833 to i32*
  %15836 = load i32, i32* %15835, align 4
  %15837 = add i32 %15836, 1
  %15838 = zext i32 %15837 to i64
  store i64 %15838, i64* %.pre243, align 8
  %15839 = icmp eq i32 %15836, -1
  %15840 = icmp eq i32 %15837, 0
  %15841 = or i1 %15839, %15840
  %15842 = zext i1 %15841 to i8
  store i8 %15842, i8* %44, align 1
  %15843 = and i32 %15837, 255
  %15844 = tail call i32 @llvm.ctpop.i32(i32 %15843)
  %15845 = trunc i32 %15844 to i8
  %15846 = and i8 %15845, 1
  %15847 = xor i8 %15846, 1
  store i8 %15847, i8* %51, align 1
  %15848 = xor i32 %15837, %15836
  %15849 = lshr i32 %15848, 4
  %15850 = trunc i32 %15849 to i8
  %15851 = and i8 %15850, 1
  store i8 %15851, i8* %56, align 1
  %15852 = zext i1 %15840 to i8
  store i8 %15852, i8* %59, align 1
  %15853 = lshr i32 %15837, 31
  %15854 = trunc i32 %15853 to i8
  store i8 %15854, i8* %62, align 1
  %15855 = lshr i32 %15836, 31
  %15856 = xor i32 %15853, %15855
  %15857 = add nuw nsw i32 %15856, %15853
  %15858 = icmp eq i32 %15857, 2
  %15859 = zext i1 %15858 to i8
  store i8 %15859, i8* %68, align 1
  %15860 = add i64 %15286, 14
  store i64 %15860, i64* %3, align 8
  store i32 %15837, i32* %15835, align 4
  %15861 = load i64, i64* %3, align 8
  %15862 = add i64 %15861, -354
  store i64 %15862, i64* %3, align 8
  br label %block_.L_470f8c

block_.L_4710f3:                                  ; preds = %block_.L_470f8c
  %15863 = add i64 %15238, 5
  store i64 %15863, i64* %3, align 8
  br label %block_.L_4710f8

block_.L_4710f8:                                  ; preds = %block_4708c7, %block_4708bd, %block_.L_470896, %block_.L_4710f3, %block_4708a8
  %15864 = phi i64 [ %13702, %block_.L_470896 ], [ %13717, %block_4708a8 ], [ %13743, %block_4708bd ], [ %13760, %block_4708c7 ], [ %15863, %block_.L_4710f3 ]
  %15865 = phi i64 [ %13675, %block_.L_470896 ], [ %13675, %block_4708a8 ], [ %13675, %block_4708bd ], [ %13675, %block_4708c7 ], [ %15195, %block_.L_4710f3 ]
  %MEMORY.75 = phi %struct.Memory* [ %MEMORY.59, %block_.L_470896 ], [ %MEMORY.59, %block_4708a8 ], [ %MEMORY.59, %block_4708bd ], [ %MEMORY.59, %block_4708c7 ], [ %MEMORY.72, %block_.L_4710f3 ]
  %15866 = add i64 %15865, -176
  %15867 = add i64 %15864, 11
  store i64 %15867, i64* %3, align 8
  %15868 = inttoptr i64 %15866 to i64*
  store i64 0, i64* %15868, align 8
  %15869 = load i64, i64* %RBP.i, align 8
  %15870 = add i64 %15869, -168
  %15871 = load i64, i64* %3, align 8
  %15872 = add i64 %15871, 9
  store i64 %15872, i64* %3, align 8
  %15873 = inttoptr i64 %15870 to i16*
  store i16 0, i16* %15873, align 2
  %15874 = load i64, i64* %RBP.i, align 8
  %15875 = add i64 %15874, -166
  %15876 = load i64, i64* %3, align 8
  %15877 = add i64 %15876, 9
  store i64 %15877, i64* %3, align 8
  %15878 = inttoptr i64 %15875 to i16*
  store i16 0, i16* %15878, align 2
  %15879 = load i64, i64* %RBP.i, align 8
  %15880 = add i64 %15879, -164
  %15881 = load i64, i64* %3, align 8
  %15882 = add i64 %15881, 9
  store i64 %15882, i64* %3, align 8
  %15883 = inttoptr i64 %15880 to i16*
  store i16 0, i16* %15883, align 2
  %15884 = load i64, i64* %RBP.i, align 8
  %15885 = add i64 %15884, -176
  %15886 = load i64, i64* %3, align 8
  %15887 = add i64 %15886, 11
  store i64 %15887, i64* %3, align 8
  %15888 = inttoptr i64 %15885 to i64*
  %15889 = load i64, i64* %15888, align 8
  %15890 = sext i64 %15889 to i128
  %15891 = and i128 %15890, -18446744073709551616
  %15892 = zext i64 %15889 to i128
  %15893 = or i128 %15891, %15892
  %15894 = mul nsw i128 %15893, 1000
  %15895 = trunc i128 %15894 to i64
  store i64 %15895, i64* %.pre243, align 8
  %15896 = sext i64 %15895 to i128
  %15897 = icmp ne i128 %15896, %15894
  %15898 = zext i1 %15897 to i8
  store i8 %15898, i8* %44, align 1
  %15899 = trunc i128 %15894 to i32
  %15900 = and i32 %15899, 248
  %15901 = tail call i32 @llvm.ctpop.i32(i32 %15900)
  %15902 = trunc i32 %15901 to i8
  %15903 = and i8 %15902, 1
  %15904 = xor i8 %15903, 1
  store i8 %15904, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %15905 = lshr i64 %15895, 63
  %15906 = trunc i64 %15905 to i8
  store i8 %15906, i8* %62, align 1
  store i8 %15898, i8* %68, align 1
  %15907 = add i64 %15884, -168
  %15908 = add i64 %15886, 18
  store i64 %15908, i64* %3, align 8
  %15909 = inttoptr i64 %15907 to i16*
  %15910 = load i16, i16* %15909, align 2
  %15911 = zext i16 %15910 to i64
  store i64 %15911, i64* %RCX.i6189, align 8
  %15912 = zext i16 %15910 to i64
  store i64 %15912, i64* %RDX.i5984, align 8
  %15913 = add i64 %15895, %15912
  store i64 %15913, i64* %.pre243, align 8
  %15914 = icmp ult i64 %15913, %15895
  %15915 = icmp ult i64 %15913, %15912
  %15916 = or i1 %15914, %15915
  %15917 = zext i1 %15916 to i8
  store i8 %15917, i8* %44, align 1
  %15918 = trunc i64 %15913 to i32
  %15919 = and i32 %15918, 255
  %15920 = tail call i32 @llvm.ctpop.i32(i32 %15919)
  %15921 = trunc i32 %15920 to i8
  %15922 = and i8 %15921, 1
  %15923 = xor i8 %15922, 1
  store i8 %15923, i8* %51, align 1
  %15924 = xor i64 %15895, %15912
  %15925 = xor i64 %15924, %15913
  %15926 = lshr i64 %15925, 4
  %15927 = trunc i64 %15926 to i8
  %15928 = and i8 %15927, 1
  store i8 %15928, i8* %56, align 1
  %15929 = icmp eq i64 %15913, 0
  %15930 = zext i1 %15929 to i8
  store i8 %15930, i8* %59, align 1
  %15931 = lshr i64 %15913, 63
  %15932 = trunc i64 %15931 to i8
  store i8 %15932, i8* %62, align 1
  %15933 = xor i64 %15931, %15905
  %15934 = add nuw nsw i64 %15933, %15931
  %15935 = icmp eq i64 %15934, 2
  %15936 = zext i1 %15935 to i8
  store i8 %15936, i8* %68, align 1
  %15937 = add i64 %15884, -160
  %15938 = add i64 %15886, 34
  store i64 %15938, i64* %3, align 8
  %15939 = inttoptr i64 %15937 to i64*
  %15940 = load i64, i64* %15939, align 8
  %15941 = sext i64 %15940 to i128
  %15942 = and i128 %15941, -18446744073709551616
  %15943 = zext i64 %15940 to i128
  %15944 = or i128 %15942, %15943
  %15945 = mul nsw i128 %15944, 1000
  %15946 = trunc i128 %15945 to i64
  store i64 %15946, i64* %RDX.i5984, align 8
  %15947 = sext i64 %15946 to i128
  %15948 = icmp ne i128 %15947, %15945
  %15949 = zext i1 %15948 to i8
  store i8 %15949, i8* %44, align 1
  %15950 = trunc i128 %15945 to i32
  %15951 = and i32 %15950, 248
  %15952 = tail call i32 @llvm.ctpop.i32(i32 %15951)
  %15953 = trunc i32 %15952 to i8
  %15954 = and i8 %15953, 1
  %15955 = xor i8 %15954, 1
  store i8 %15955, i8* %51, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %59, align 1
  %15956 = lshr i64 %15946, 63
  %15957 = trunc i64 %15956 to i8
  store i8 %15957, i8* %62, align 1
  store i8 %15949, i8* %68, align 1
  %15958 = load i64, i64* %RBP.i, align 8
  %15959 = add i64 %15958, -152
  %15960 = add i64 %15886, 41
  store i64 %15960, i64* %3, align 8
  %15961 = inttoptr i64 %15959 to i16*
  %15962 = load i16, i16* %15961, align 2
  %15963 = zext i16 %15962 to i64
  store i64 %15963, i64* %RSI.i2931, align 8
  %15964 = add i64 %15946, %15963
  store i64 %15964, i64* %RDX.i5984, align 8
  %15965 = lshr i64 %15964, 63
  %15966 = load i64, i64* %.pre243, align 8
  %15967 = sub i64 %15966, %15964
  store i64 %15967, i64* %.pre243, align 8
  %15968 = icmp ult i64 %15966, %15964
  %15969 = zext i1 %15968 to i8
  store i8 %15969, i8* %44, align 1
  %15970 = trunc i64 %15967 to i32
  %15971 = and i32 %15970, 255
  %15972 = tail call i32 @llvm.ctpop.i32(i32 %15971)
  %15973 = trunc i32 %15972 to i8
  %15974 = and i8 %15973, 1
  %15975 = xor i8 %15974, 1
  store i8 %15975, i8* %51, align 1
  %15976 = xor i64 %15964, %15966
  %15977 = xor i64 %15976, %15967
  %15978 = lshr i64 %15977, 4
  %15979 = trunc i64 %15978 to i8
  %15980 = and i8 %15979, 1
  store i8 %15980, i8* %56, align 1
  %15981 = icmp eq i64 %15967, 0
  %15982 = zext i1 %15981 to i8
  store i8 %15982, i8* %59, align 1
  %15983 = lshr i64 %15967, 63
  %15984 = trunc i64 %15983 to i8
  store i8 %15984, i8* %62, align 1
  %15985 = lshr i64 %15966, 63
  %15986 = xor i64 %15965, %15985
  %15987 = xor i64 %15983, %15985
  %15988 = add nuw nsw i64 %15987, %15986
  %15989 = icmp eq i64 %15988, 2
  %15990 = zext i1 %15989 to i8
  store i8 %15990, i8* %68, align 1
  %15991 = and i64 %15967, 4294967295
  store i64 %15991, i64* %RCX.i6189, align 8
  %15992 = add i64 %15958, -180
  %15993 = add i64 %15886, 57
  store i64 %15993, i64* %3, align 8
  %15994 = inttoptr i64 %15992 to i32*
  store i32 %15970, i32* %15994, align 4
  %15995 = load i64, i64* %RBP.i, align 8
  %15996 = add i64 %15995, -180
  %15997 = load i64, i64* %3, align 8
  %15998 = add i64 %15997, 6
  store i64 %15998, i64* %3, align 8
  %15999 = inttoptr i64 %15996 to i32*
  %16000 = load i32, i32* %15999, align 4
  %16001 = load i32, i32* bitcast (%G_0x6f968c_type* @G_0x6f968c to i32*), align 8
  %16002 = add i32 %16001, %16000
  %16003 = zext i32 %16002 to i64
  store i64 %16003, i64* %RCX.i6189, align 8
  %16004 = icmp ult i32 %16002, %16000
  %16005 = icmp ult i32 %16002, %16001
  %16006 = or i1 %16004, %16005
  %16007 = zext i1 %16006 to i8
  store i8 %16007, i8* %44, align 1
  %16008 = and i32 %16002, 255
  %16009 = tail call i32 @llvm.ctpop.i32(i32 %16008)
  %16010 = trunc i32 %16009 to i8
  %16011 = and i8 %16010, 1
  %16012 = xor i8 %16011, 1
  store i8 %16012, i8* %51, align 1
  %16013 = xor i32 %16001, %16000
  %16014 = xor i32 %16013, %16002
  %16015 = lshr i32 %16014, 4
  %16016 = trunc i32 %16015 to i8
  %16017 = and i8 %16016, 1
  store i8 %16017, i8* %56, align 1
  %16018 = icmp eq i32 %16002, 0
  %16019 = zext i1 %16018 to i8
  store i8 %16019, i8* %59, align 1
  %16020 = lshr i32 %16002, 31
  %16021 = trunc i32 %16020 to i8
  store i8 %16021, i8* %62, align 1
  %16022 = lshr i32 %16000, 31
  %16023 = lshr i32 %16001, 31
  %16024 = xor i32 %16020, %16022
  %16025 = xor i32 %16020, %16023
  %16026 = add nuw nsw i32 %16024, %16025
  %16027 = icmp eq i32 %16026, 2
  %16028 = zext i1 %16027 to i8
  store i8 %16028, i8* %68, align 1
  store i32 %16002, i32* bitcast (%G_0x6f968c_type* @G_0x6f968c to i32*), align 8
  %16029 = add i64 %15997, 26
  store i64 %16029, i64* %3, align 8
  %16030 = load i32, i32* %15999, align 4
  %16031 = load i32, i32* bitcast (%G_0x6d1f98_type* @G_0x6d1f98 to i32*), align 8
  %16032 = add i32 %16031, %16030
  %16033 = zext i32 %16032 to i64
  store i64 %16033, i64* %RCX.i6189, align 8
  %16034 = icmp ult i32 %16032, %16030
  %16035 = icmp ult i32 %16032, %16031
  %16036 = or i1 %16034, %16035
  %16037 = zext i1 %16036 to i8
  store i8 %16037, i8* %44, align 1
  %16038 = and i32 %16032, 255
  %16039 = tail call i32 @llvm.ctpop.i32(i32 %16038)
  %16040 = trunc i32 %16039 to i8
  %16041 = and i8 %16040, 1
  %16042 = xor i8 %16041, 1
  store i8 %16042, i8* %51, align 1
  %16043 = xor i32 %16031, %16030
  %16044 = xor i32 %16043, %16032
  %16045 = lshr i32 %16044, 4
  %16046 = trunc i32 %16045 to i8
  %16047 = and i8 %16046, 1
  store i8 %16047, i8* %56, align 1
  %16048 = icmp eq i32 %16032, 0
  %16049 = zext i1 %16048 to i8
  store i8 %16049, i8* %59, align 1
  %16050 = lshr i32 %16032, 31
  %16051 = trunc i32 %16050 to i8
  store i8 %16051, i8* %62, align 1
  %16052 = lshr i32 %16030, 31
  %16053 = lshr i32 %16031, 31
  %16054 = xor i32 %16050, %16052
  %16055 = xor i32 %16050, %16053
  %16056 = add nuw nsw i32 %16054, %16055
  %16057 = icmp eq i32 %16056, 2
  %16058 = zext i1 %16057 to i8
  store i8 %16058, i8* %68, align 1
  store i32 %16032, i32* bitcast (%G_0x6d1f98_type* @G_0x6d1f98 to i32*), align 8
  %16059 = add i64 %15995, -96
  %16060 = add i64 %15997, 43
  store i64 %16060, i64* %3, align 8
  %16061 = inttoptr i64 %16059 to i32*
  %16062 = load i32, i32* %16061, align 4
  %16063 = zext i32 %16062 to i64
  store i64 %16063, i64* %.pre243, align 8
  %16064 = load i64, i64* %6, align 8
  %16065 = add i64 %16064, 648
  store i64 %16065, i64* %6, align 8
  %16066 = icmp ugt i64 %16064, -649
  %16067 = zext i1 %16066 to i8
  store i8 %16067, i8* %44, align 1
  %16068 = trunc i64 %16065 to i32
  %16069 = and i32 %16068, 255
  %16070 = tail call i32 @llvm.ctpop.i32(i32 %16069)
  %16071 = trunc i32 %16070 to i8
  %16072 = and i8 %16071, 1
  %16073 = xor i8 %16072, 1
  store i8 %16073, i8* %51, align 1
  %16074 = xor i64 %16065, %16064
  %16075 = lshr i64 %16074, 4
  %16076 = trunc i64 %16075 to i8
  %16077 = and i8 %16076, 1
  store i8 %16077, i8* %56, align 1
  %16078 = icmp eq i64 %16065, 0
  %16079 = zext i1 %16078 to i8
  store i8 %16079, i8* %59, align 1
  %16080 = lshr i64 %16065, 63
  %16081 = trunc i64 %16080 to i8
  store i8 %16081, i8* %62, align 1
  %16082 = lshr i64 %16064, 63
  %16083 = xor i64 %16080, %16082
  %16084 = add nuw nsw i64 %16083, %16080
  %16085 = icmp eq i64 %16084, 2
  %16086 = zext i1 %16085 to i8
  store i8 %16086, i8* %68, align 1
  %16087 = add i64 %15997, 51
  store i64 %16087, i64* %3, align 8
  %16088 = add i64 %16064, 656
  %16089 = inttoptr i64 %16065 to i64*
  %16090 = load i64, i64* %16089, align 8
  store i64 %16090, i64* %RBX.i4440, align 8
  store i64 %16088, i64* %6, align 8
  %16091 = add i64 %15997, 53
  store i64 %16091, i64* %3, align 8
  %16092 = add i64 %16064, 664
  %16093 = inttoptr i64 %16088 to i64*
  %16094 = load i64, i64* %16093, align 8
  store i64 %16094, i64* %R12.i4237, align 8
  store i64 %16092, i64* %6, align 8
  %16095 = add i64 %15997, 55
  store i64 %16095, i64* %3, align 8
  %16096 = add i64 %16064, 672
  %16097 = inttoptr i64 %16092 to i64*
  %16098 = load i64, i64* %16097, align 8
  store i64 %16098, i64* %R13.i2854, align 8
  store i64 %16096, i64* %6, align 8
  %16099 = add i64 %15997, 57
  store i64 %16099, i64* %3, align 8
  %16100 = add i64 %16064, 680
  %16101 = inttoptr i64 %16096 to i64*
  %16102 = load i64, i64* %16101, align 8
  store i64 %16102, i64* %R14.i2839, align 8
  store i64 %16100, i64* %6, align 8
  %16103 = add i64 %15997, 59
  store i64 %16103, i64* %3, align 8
  %16104 = add i64 %16064, 688
  %16105 = inttoptr i64 %16100 to i64*
  %16106 = load i64, i64* %16105, align 8
  store i64 %16106, i64* %R15.i1647, align 8
  store i64 %16104, i64* %6, align 8
  %16107 = add i64 %15997, 60
  store i64 %16107, i64* %3, align 8
  %16108 = add i64 %16064, 696
  %16109 = inttoptr i64 %16104 to i64*
  %16110 = load i64, i64* %16109, align 8
  store i64 %16110, i64* %RBP.i, align 8
  store i64 %16108, i64* %6, align 8
  %16111 = add i64 %15997, 61
  store i64 %16111, i64* %3, align 8
  %16112 = inttoptr i64 %16108 to i64*
  %16113 = load i64, i64* %16112, align 8
  store i64 %16113, i64* %3, align 8
  %16114 = add i64 %16064, 704
  store i64 %16114, i64* %6, align 8
  ret %struct.Memory* %MEMORY.75
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__r15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %3 = load i64, i64* %R15, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__r14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %3 = load i64, i64* %R14, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__r13(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %3 = load i64, i64* %R13, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__r12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %3 = load i64, i64* %R12, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x288___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -648
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 648
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %28
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__di___ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %DI, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__MINUS0x2a__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -42
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -64
  %6 = load i32, i32* %R9D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x7fffffff__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2147483647, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RCX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x3c__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x50__r10__r11_8____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 80
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x54__r10__r11_8____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 84
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -112
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xa8__r10____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x34__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xac__r10____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x38__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -120
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__r10____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___r10__r11_8____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x118f8__r10____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 71928
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__MINUS0x90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__MINUS0xa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 11
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__MINUS0x98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__MINUS0x96__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -150
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__MINUS0x94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xcdc__r10_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 3292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46e69c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4d4__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46e683(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x722ca8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x722ca8_type* @G_0x722ca8 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl_MINUS0xb8__rbp_(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = inttoptr i64 %4 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = shl nuw i64 %14, 32
  %19 = or i64 %18, %10
  %20 = sdiv i64 %19, %17
  %21 = shl i64 %20, 32
  %22 = ashr exact i64 %21, 32
  %23 = icmp eq i64 %20, %22
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %block_400488
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:26:                                     ; preds = %block_400488
  %27 = srem i64 %19, %17
  %28 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %29 = and i64 %20, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %31 = and i64 %27, 4294967295
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %26, %24
  %38 = phi %struct.Memory* [ %25, %24 ], [ %2, %26 ]
  ret %struct.Memory* %38
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -240
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46e690(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -240
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x118f0__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 71920
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x64__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x68__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswq_MINUS0x2a__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -42
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x3c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x58__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x70__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -112
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_46e755(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x6c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -108
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_46e742(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x726418___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x726418_type* @G_0x726418 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x78__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x58__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x74__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x54__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rax__rdx_2____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i16*
  %11 = load i16, i16* %10, align 2
  store i16 %11, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x58__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cbc30___rax_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 3
  %5 = add i64 %4, 7126064
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x54__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si____rax__rdx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %SI, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46e6f2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46e747(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46e6df(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xcdc__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 3292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46fcc8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -6
  %10 = icmp ult i32 %8, 6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46e8b8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x90__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RAX to i16**
  %4 = load i16*, i16** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i16, i16* %4, align 2
  %8 = sext i16 %7 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__0x6d1fa0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6d1fa0_type* @G_0x6d1fa0 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_0x2__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__0x6d1fa4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6d1fa4_type* @G_0x6d1fa4 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46e83d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cd3b0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RDX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x64__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x68__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xf4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -244
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46e890(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cd468___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -244
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x72369c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x72369c___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x72369c_type* @G_0x72369c to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46ecac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46ea06(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x20__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46e98b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xf8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -248
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46e9de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46eca7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46eb54(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x10__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46ead9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xfc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -252
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46eb2c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46eca2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46ec9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46ec27(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x100__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -256
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46ec7a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x100__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f21a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11b30__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46f21a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46ee21(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46eda6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x104__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -260
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46edf9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x104__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f215(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46ef6f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46eef4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x108__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -264
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46ef47(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x108__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f210(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f0bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f042(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x10c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -268
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f095(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -268
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f20b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46f206(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f190(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x110__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f1e3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x110__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f21a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x6f934c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6f934c_type* @G_0x6f934c to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46f235(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x114__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -276
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f242(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x114__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -276
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RCX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x2a__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -42
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46f372(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__0x6d32c4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6d32c4_type* @G_0x6d32c4 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__0x70fd54(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x70fd54_type* @G_0x70fd54 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__0x70fd58(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x70fd58_type* @G_0x70fd58 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f5a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46f5a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_0x4__rax____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f463(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_MINUS0xb8__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f4a7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x423dd__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x423dd__rip__type* @G_0x423dd__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x423ed__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x423ed__rip__type* @G_0x423ed__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xbc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl__eax___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i32, i32* %EAX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sitofp i32 %5 to double
  %9 = bitcast %union.VectorReg* %4 to double*
  store double %8, double* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm1___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl__eax___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i32, i32* %EAX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sitofp i32 %5 to double
  %9 = bitcast %union.VectorReg* %4 to double*
  store double %8, double* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divsd__xmm1___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fdiv double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm2__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x128__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x120__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x70fd54(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x70fd54_type* @G_0x70fd54 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cd3b0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x64__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x68__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RCX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x3c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_0x8__rcx____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x130__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f53e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x138__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f582(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x42302__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x42302__rip__type* @G_0x42302__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x42312__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x42312__rip__type* @G_0x42312__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm2__MINUS0x138__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x138__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x130__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x70fd58(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x70fd58_type* @G_0x70fd58 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0xb40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f959(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f787(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x2a__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -42
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46f787(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ult i32 %6, 2
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__0x6cd480(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46f64d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x13c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -316
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f65a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x6cd480___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x13c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -316
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6cd480(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6cd480_type* @G_0x6cd480 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cd468___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cd468_type* @G_0x6cd468 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 2
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x710010(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x710010___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x710010_type* @G_0x710010 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x2a__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -42
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RSI, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RAX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__eax___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__eax___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divss__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = extractelement <2 x float> %9, i32 0
  %16 = extractelement <2 x float> %14, i32 0
  %17 = fdiv float %15, %16
  %18 = bitcast [32 x %union.VectorReg]* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %9 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %5, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %12, i32 0
  %24 = bitcast i64* %10 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %12, i32 1
  %26 = getelementptr inbounds i8, i8* %5, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttss2si__xmm0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = extractelement <2 x float> %7, i32 0
  %9 = tail call float @llvm.trunc.f32(float %8)
  %10 = tail call float @llvm.fabs.f32(float %9)
  %11 = fcmp ogt float %10, 0x41E0000000000000
  %12 = fptosi float %9 to i32
  %13 = zext i32 %12 to i64
  %14 = select i1 %11, i64 2147483648, i64 %13
  store i64 %14, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x710014(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x710014___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x710014_type* @G_0x710014 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46f954(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46f7bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46f82a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x140__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -320
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f837(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x140__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -320
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_0x4dfef__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, ptrtoint (%G_0x4dfef__rip__type* @G_0x4dfef__rip_ to i64)
  %7 = add i64 %5, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %6 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %union.VectorReg* %3 to i32*
  store i32 %9, i32* %10, align 1
  %11 = getelementptr inbounds i8, i8* %4, i64 4
  %12 = bitcast i8* %11 to float*
  store float 0.000000e+00, float* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %14 = bitcast i64* %13 to float*
  store float 0.000000e+00, float* %14, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 12
  %16 = bitcast i8* %15 to float*
  store float 0.000000e+00, float* %16, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__ecx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cd3b0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cd3b0_type* @G_0x6cd3b0 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rsi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rsi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswq_MINUS0x2a__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -42
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x3c__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xbc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDI, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %EDI, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RAX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__eax___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addss__xmm0___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = extractelement <2 x float> %9, i32 0
  %16 = extractelement <2 x float> %14, i32 0
  %17 = fadd float %15, %16
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %9 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %5, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %12, i32 0
  %24 = bitcast i64* %10 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %12, i32 1
  %26 = getelementptr inbounds i8, i8* %5, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divss__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = bitcast %union.VectorReg* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = extractelement <2 x float> %9, i32 0
  %16 = extractelement <2 x float> %14, i32 0
  %17 = fdiv float %15, %16
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %9 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %5, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %12, i32 0
  %24 = bitcast i64* %10 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %12, i32 1
  %26 = getelementptr inbounds i8, i8* %5, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttss2si__xmm1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = extractelement <2 x float> %7, i32 0
  %9 = tail call float @llvm.trunc.f32(float %8)
  %10 = tail call float @llvm.fabs.f32(float %9)
  %11 = fcmp ogt float %10, 0x41E0000000000000
  %12 = fptosi float %9 to i32
  %13 = zext i32 %12 to i64
  %14 = select i1 %11, i64 2147483648, i64 %13
  store i64 %14, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xbc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ECX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RAX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46fcc3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46fafe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46f9de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x144__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -324
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46f9eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x144__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -324
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x25da89__rip_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, ptrtoint (%G_0x25da89__rip__type* @G_0x25da89__rip_ to i64)
  %6 = load i32, i32* %EAX, align 4
  %7 = add i64 %4, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %8, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x25da6a__rip____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x25da6a__rip__type* @G_0x25da6a__rip_ to i64)
  %5 = add i64 %3, 7
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x25befb__rip____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x25befb__rip__type* @G_0x25befb__rip_ to i64)
  %5 = add i64 %3, 7
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %EDI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x2___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RSI, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_decl__eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = and i32 %7, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = xor i32 %7, %6
  %16 = lshr i32 %15, 4
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1
  %20 = icmp eq i32 %7, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %7, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %6, 31
  %27 = xor i32 %23, %26
  %28 = add nuw nsw i32 %27, %26
  %29 = icmp eq i32 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x2a05c3__rip_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, ptrtoint (%G_0x2a05c3__rip__type* @G_0x2a05c3__rip_ to i64)
  %6 = load i32, i32* %EAX, align 4
  %7 = add i64 %4, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %8, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x2a05bd__rip____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x2a05bd__rip__type* @G_0x2a05bd__rip_ to i64)
  %5 = add i64 %3, 6
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_incl__edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = and i32 %7, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = xor i32 %7, %6
  %16 = lshr i32 %15, 4
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1
  %20 = icmp eq i32 %7, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %7, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %6, 31
  %27 = xor i32 %23, %26
  %28 = add nuw nsw i32 %27, %23
  %29 = icmp eq i32 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__esi___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x2a059c__rip_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, ptrtoint (%G_0x2a059c__rip__type* @G_0x2a059c__rip_ to i64)
  %6 = load i32, i32* %EAX, align 4
  %7 = add i64 %4, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %8, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x25d9ed__rip____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x25d9ed__rip__type* @G_0x25d9ed__rip_ to i64)
  %5 = add i64 %3, 7
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x25be7e__rip____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x25be7e__rip__type* @G_0x25be7e__rip_ to i64)
  %5 = add i64 %3, 7
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x2a054a__rip_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, ptrtoint (%G_0x2a054a__rip__type* @G_0x2a054a__rip_ to i64)
  %6 = load i32, i32* %EAX, align 4
  %7 = add i64 %4, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %8, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x2a0544__rip____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x2a0544__rip__type* @G_0x2a0544__rip_ to i64)
  %5 = add i64 %3, 6
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si___r8w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8W = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %SI, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %R8W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r8w__MINUS0x146__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -326
  %6 = load i16, i16* %R8W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46fcbe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46fb94(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -332
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46fba1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -332
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_0x4dc85__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, ptrtoint (%G_0x4dc85__rip__type* @G_0x4dc85__rip_ to i64)
  %7 = add i64 %5, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %6 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %union.VectorReg* %3 to i32*
  store i32 %9, i32* %10, align 1
  %11 = getelementptr inbounds i8, i8* %4, i64 4
  %12 = bitcast i8* %11 to float*
  store float 0.000000e+00, float* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %14 = bitcast i64* %13 to float*
  store float 0.000000e+00, float* %14, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 12
  %16 = bitcast i8* %15 to float*
  store float 0.000000e+00, float* %16, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46fcc8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_46fce7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x6f9734(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6f9734_type* @G_0x6f9734 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x80__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rax____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rax____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x2a__rbp____cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -42
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6c__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x70__rbp____ebx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__cx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %4 = load i16, i16* %CX, align 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i16 %4 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = bitcast i64* %RSP to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d__0x8__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %R11D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ebx__0x10__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %EBX = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 16
  %6 = load i32, i32* %EBX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.SetMotionVectorPredictor(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x80__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rax____r14w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %R14W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r14w__MINUS0x4a__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -74
  %6 = load i16, i16* %R14W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rax____r14w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R14W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r14w__MINUS0x4c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i16, i16* %R14W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470085(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x4a__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -74
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x150__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -336
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x150__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0x4e__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -78
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x4c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x9a0__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 2464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_46fed5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x40__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x4e__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -78
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x154__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -340
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_46fdd1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x158__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -344
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46fddb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x4e__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -78
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x158__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -344
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x154__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -340
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46fdff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x15c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -348
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46fe32(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x4e__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -78
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_46fe1c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -352
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46fe26(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x160__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -352
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x15c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -348
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx__MINUS0x4e__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -78
  %6 = load i16, i16* %DX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x40__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x50__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x164__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -356
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_46fe67(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -360
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46fe71(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x50__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x168__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x164__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -356
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_46fe95(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x16c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -364
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46fec8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0x50__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_46feb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -368
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46febc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x170__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -368
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x16c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -364
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x6cbc30___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x6cbc30_type* @G__0x6cbc30 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x4e__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -78
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x50__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x2a__rbp____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -42
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x74__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x78__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -120
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4a__rbp____r11w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -74
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R11W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4c__rbp____bx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %BX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %BX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____r14d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____r15d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x48__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__dx___r12d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %5 = load i16, i16* %DX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -372
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r12d___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %R12D = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %R12D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x174__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -372
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x180__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r11w___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11W = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %5 = load i16, i16* %R11W, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__bx___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %BX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %5 = load i16, i16* %BX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__0x8__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x10__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x180__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x18__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r14d__0x20__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 32
  %6 = load i32, i32* %R14D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r15d__0x28__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 40
  %6 = load i32, i32* %R15D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.FastIntegerPelBlockMotionSearch(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_470080(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x70__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47006d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_470000(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x64__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x54__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x68__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x58__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswq_MINUS0x2a__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -42
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47005a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47005f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46ff86(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470072(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_46ff6e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470117(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x184__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -388
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x184__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x190__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x190__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.FastFullPelBlockMotionSearch(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470141(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x1c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_470141(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470484(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_470212(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x9___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__esi___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RSI, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x2a__rbp____r8w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -42
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R8W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x74__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x78__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -120
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____ebx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4a__rbp____r14w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -74
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R14W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4c__rbp____r15w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R15W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____r12d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r8w___r13d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8W = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %5 = load i16, i16* %R8W, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x194__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r13d___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %R13D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x198__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -408
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %R9D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R10D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %R11D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ebx___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %EBX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %EBX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r14w___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %5 = load i16, i16* %R14W, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r15w___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %5 = load i16, i16* %R15W, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1a0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x9__0x20__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 9, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x9__0x28__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 9, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r12d__0x30__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %R12D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 48
  %6 = load i32, i32* %R12D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x38__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.FastSubPelBlockMotionSearch(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4702aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x2a__rbp____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -42
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x74__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x78__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -120
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4a__rbp____bx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %BX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -74
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %BX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4c__rbp____r14w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R14W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__si___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %4 = load i16, i16* %SI, align 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i16 %4 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -420
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -432
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R9D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %R11D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1b0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r15d__0x30__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 48
  %6 = load i32, i32* %R15D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.SubPelBlockMotionSearch(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47047f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47046c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4703a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x4__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x8__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470459(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47045e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4702c9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470471(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4702b1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470546(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4704ae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4704ae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -436
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1c0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x9a0__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47063e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_470639(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470589(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.FindSkipModeMotionVector(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.GetSkipCostMB(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x41318__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x41318__rip__type* @G_0x41318__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x41318__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x41318__rip__type* @G_0x41318__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -192
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_MINUS0x48__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -72
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, %11
  store double %12, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movaps__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = extractelement <2 x i32> %9, i32 0
  %14 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %13, i32* %14, align 1
  %15 = extractelement <2 x i32> %9, i32 1
  %16 = getelementptr inbounds i8, i8* %5, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %12, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %12, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.floor_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -192
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x60__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -96
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_470634(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x118f8__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 71928
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rcx____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rcx____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i16, i16* %DX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470639(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47063e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4707bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x64__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xc4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -196
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x68__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -200
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4707b8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4707a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4e__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -78
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x90__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x54__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x58__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x50__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__0x2__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x88__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4706a6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4707aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47068e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470896(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_470891(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47087e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4707dc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470883(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4707c4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4710f8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x4e8__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4710f8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4708f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x11900__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 71936
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x1c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47090f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x11908__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 71944
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1c8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xea__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -234
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__MINUS0xe2__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -226
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r8w__MINUS0xe6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -230
  %6 = load i16, i16* %R8W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %ECX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovel__edx___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  %12 = load i64, i64* %4, align 8
  %13 = select i1 %11, i64 %6, i64 %12
  %14 = and i64 %13, 4294967295
  store i64 %14, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -460
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1cc__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -460
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx___r14w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %CX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %R14W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r14w__MINUS0x4e__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -78
  %6 = load i16, i16* %R14W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r14w__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i16, i16* %R14W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x4ec__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RCX, align 8
  %6 = add i64 %5, 1260
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_470cd4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -464
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470a9f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x80__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rdx____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = bitcast i64* %RDX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xe2__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -226
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rdx____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xea__rbp____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -234
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xde__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -222
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xe8__rbp____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xd6__rbp____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -214
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xda__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -218
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xd8__rbp____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4e__rbp____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -78
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xd6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -214
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x50__rbp____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovel__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = load i64, i64* %RAX, align 8
  %12 = select i1 %10, i64 %5, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0xe6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -230
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470b6a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rax____cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xde__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -222
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rax____cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xea__rbp____cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -234
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xe2__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -226
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xe8__rbp____cx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %CX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470b19(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xd6__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -214
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__MINUS0xda__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -218
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xd8__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__MINUS0xd6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -214
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470b5d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xe2__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -226
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx___ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %CX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xe4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xe6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -230
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xd6__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -214
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xd8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xda__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -218
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xdc__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xe6__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -230
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = sext i16 %9 to i64
  %11 = and i64 %10, 4294967295
  store i64 %11, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____r14d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xde__rbp____r15w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -222
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R15W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xe0__rbp____r12w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %R12W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R12W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xe2__rbp____r13w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -226
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R13W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x1d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -472
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xe4__rbp____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x1e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4f0__rax____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -484
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -484
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__cl___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %12 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = shl i64 %4, 32
  %11 = ashr i64 %10, 33
  br label %20

; <label>:12:                                     ; preds = %block_400488
  %13 = and i8 %5, 31
  %14 = zext i8 %13 to i64
  %15 = add nsw i64 %14, -1
  %16 = shl i64 %4, 32
  %17 = ashr exact i64 %16, 32
  %18 = ashr i64 %17, %15
  %19 = lshr i64 %18, 1
  br label %20

; <label>:20:                                     ; preds = %12, %9
  %21 = phi i64 [ %19, %12 ], [ %11, %9 ]
  %22 = phi i64 [ %18, %12 ], [ %4, %9 ]
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = trunc i64 %21 to i32
  %26 = and i64 %21, 4294967295
  store i64 %26, i64* %RAX, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %24, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = and i32 %25, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29)
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %28, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %36 = icmp eq i32 %25, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %39 = lshr i32 %25, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %38, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %41, align 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %20, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r8w___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8W = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i16, i16* %R8W, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__MINUS0x1f2__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -498
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x200__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x204__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -516
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r14d____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = bitcast i64* %RSP to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %R14D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r12w___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %R12W = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %5 = load i16, i16* %R12W, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__0x10__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 16
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r13w___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13W = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %5 = load i16, i16* %R13W, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sext i16 %5 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__0x18__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 24
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x1f2__rbp____r15w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -498
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R15W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__0x20__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 32
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1e0__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__0x28__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1f0__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__0x30__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x200__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__0x38__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1d8__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -472
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__0x40__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 64
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x48__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 72
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x204__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -516
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x50__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 80
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.FullPelBlockMotionBiPred(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xda__rbp____r15w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -218
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R15W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r15w__MINUS0x4e__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -78
  %6 = load i16, i16* %R15W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xdc__rbp____r15w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R15W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r15w__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i16, i16* %R15W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4709de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xda__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -218
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xda__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -218
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xdc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x4f4__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 1268
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470e18(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470d2c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xdc__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x9___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 9, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x40b26__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x40b26__rip__type* @G_0x40b26__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xe6__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -230
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = sext i16 %9 to i64
  %11 = and i64 %10, 4294967295
  store i64 %11, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x74__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -116
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x78__rbp____ebx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____r14d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xe2__rbp____r15w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -226
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R15W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xe4__rbp____r12w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %R12W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R12W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____r13d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_MINUS0x48__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -72
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, %11
  store double %12, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x210__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -528
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %R10D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x218__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %R11D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8__MINUS0x220__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %R8, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ebx___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %EBX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %EBX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d__MINUS0x224__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -548
  %6 = load i32, i32* %R9D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r14d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0
  %R14D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %R14D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x218__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x210__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x20__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x220__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x28__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x9__0x30__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 9, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x9__0x38__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 9, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r13d__0x40__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 64
  %6 = load i32, i32* %R13D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.SubPelBlockSearchBiPred(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470e40(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xd6__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -214
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xd6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -214
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xd8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__cx__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i16, i16* %CX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__0x4f4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1268
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_470f6f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_470e70(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x4e__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -78
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x50__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xd6__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -214
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xd8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x409e8__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x409e8__rip__type* @G_0x409e8__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 1, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xe6__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -230
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = sext i16 %9 to i64
  %11 = and i64 %10, 4294967295
  store i64 %11, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %R11D, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovel__r10d___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  %12 = load i64, i64* %4, align 8
  %13 = select i1 %11, i64 %6, i64 %12
  %14 = and i64 %13, 4294967295
  store i64 %14, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4a__rbp____r15w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -74
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R15W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4c__rbp____r12w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %R12W = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R12W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x230__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x238__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -568
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %R11D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x240__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -576
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8__MINUS0x248__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -584
  %5 = load i64, i64* %R8, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d__MINUS0x24c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -588
  %6 = load i32, i32* %R9D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r15w___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15W = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i16, i16* %R15W, align 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = sext i16 %4 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = bitcast i64* %RSP to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__r12w___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0
  %R12W = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i16, i16* %R12W, align 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = sext i16 %4 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x8__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x240__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -576
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__0x10__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x238__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -568
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__0x18__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x230__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__0x20__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x248__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -584
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470f85(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xda__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -218
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__MINUS0x4e__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -78
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xdc__rbp____ax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %AX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i16, i16* %AX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4710f3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4710e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x4e__rbp____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -78
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd0__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x54__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edi___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi__r8_8____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x58__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDI, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswq_MINUS0xe6__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -230
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = bitcast i64* %RSI to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x3c__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx____rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = bitcast i64* %RSI to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %DX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0x50__rbp____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx__0x2__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %DX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xd6__rbp____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -214
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_MINUS0xe6__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -230
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovel__ecx___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = load i64, i64* %RDI, align 8
  %12 = select i1 %10, i64 %5, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_MINUS0xd8__rbp____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470fa4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4710e5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_470f8c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4710f8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__MINUS0xb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 11
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__MINUS0xa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__MINUS0xa6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -166
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0x0__MINUS0xa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  store i16 0, i16* %7, align 2
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x3e8__MINUS0xb0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 11
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sext i64 %8 to i128
  %10 = and i128 %9, -18446744073709551616
  %11 = zext i64 %8 to i128
  %12 = or i128 %10, %11
  %13 = mul nsw i128 %12, 1000
  %14 = trunc i128 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = sext i64 %14 to i128
  %16 = icmp ne i128 %15, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = trunc i128 %13 to i32
  %20 = and i32 %19, 248
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i64 %14, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl_MINUS0xa8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x3e8__MINUS0xa0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 11
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sext i64 %8 to i128
  %10 = and i128 %9, -18446744073709551616
  %11 = zext i64 %8 to i128
  %12 = or i128 %10, %11
  %13 = mul nsw i128 %12, 1000
  %14 = trunc i128 %13 to i64
  store i64 %14, i64* %RDX, align 8
  %15 = sext i64 %14 to i128
  %16 = icmp ne i128 %15, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = trunc i128 %13 to i32
  %20 = and i32 %19, 248
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i64 %14, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl_MINUS0x98__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sub i64 %3, %4
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %3, %4
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i64 %4, %3
  %19 = xor i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i64 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %3, 63
  %31 = lshr i64 %4, 63
  %32 = xor i64 %31, %30
  %33 = xor i64 %27, %30
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xb4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -180
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x6f968c___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6f968c_type* @G_0x6f968c to i32*), align 8
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %7, %6
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x6f968c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6f968c_type* @G_0x6f968c to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x6d1f98___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = load i32, i32* bitcast (%G_0x6d1f98_type* @G_0x6d1f98 to i32*), align 8
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %7, %6
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x6d1f98(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0x6d1f98_type* @G_0x6d1f98 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x288___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 648
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -649
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBX, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__r12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %R12, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__r13(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %R13, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__r14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %R14, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__r15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %R15, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
