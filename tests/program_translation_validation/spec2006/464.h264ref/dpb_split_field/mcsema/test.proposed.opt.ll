; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x722cb0_type = type <{ [8 x i8] }>
%G_0x7247b0_type = type <{ [4 x i8] }>
%G_0x7247b4_type = type <{ [4 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x722cb0 = local_unnamed_addr global %G_0x722cb0_type zeroinitializer
@G_0x7247b0 = local_unnamed_addr global %G_0x7247b0_type zeroinitializer
@G_0x7247b4 = local_unnamed_addr global %G_0x7247b4_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_44bd60.alloc_storable_picture(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_42dd50.UnifiedOneForthPix(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @dpb_split_field(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -664
  store i64 %11, i64* %6, align 8
  %12 = icmp ult i64 %8, 656
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %RDI.i126 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
  %41 = add i64 %7, -16
  %42 = load i64, i64* %RDI.i126, align 8
  %43 = add i64 %10, 14
  store i64 %43, i64* %3, align 8
  %44 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %44, align 8
  %45 = load i64, i64* %RBP.i, align 8
  %46 = add i64 %45, -8
  %47 = load i64, i64* %3, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %3, align 8
  %49 = inttoptr i64 %46 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %RDI.i126, align 8
  %51 = add i64 %50, 40
  %52 = add i64 %47, 8
  store i64 %52, i64* %3, align 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI.i126, align 8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i186 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
  %56 = add i64 %54, 4
  %57 = add i64 %47, 11
  store i64 %57, i64* %3, align 8
  %58 = inttoptr i64 %56 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  store i64 %60, i64* %RAX.i186, align 8
  %61 = add i64 %47, 15
  store i64 %61, i64* %3, align 8
  %62 = load i64, i64* %49, align 8
  store i64 %62, i64* %RDI.i126, align 8
  %EAX.i304 = bitcast %union.anon* %55 to i32*
  %63 = add i64 %62, 36
  %64 = add i64 %47, 18
  store i64 %64, i64* %3, align 8
  %65 = inttoptr i64 %63 to i32*
  store i32 %59, i32* %65, align 4
  %66 = load i64, i64* %RBP.i, align 8
  %67 = add i64 %66, -8
  %68 = load i64, i64* %3, align 8
  %69 = add i64 %68, 4
  store i64 %69, i64* %3, align 8
  %70 = inttoptr i64 %67 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RDI.i126, align 8
  %72 = add i64 %71, 40
  %73 = add i64 %68, 8
  store i64 %73, i64* %3, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RDI.i126, align 8
  %76 = add i64 %75, 6556
  %77 = add i64 %68, 15
  store i64 %77, i64* %3, align 8
  %78 = inttoptr i64 %76 to i32*
  %79 = load i32, i32* %78, align 4
  store i8 0, i8* %14, align 1
  %80 = and i32 %79, 255
  %81 = tail call i32 @llvm.ctpop.i32(i32 %80)
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %85 = icmp eq i32 %79, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %30, align 1
  %87 = lshr i32 %79, 31
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v530 = select i1 %85, i64 21, i64 2152
  %89 = add i64 %68, %.v530
  store i64 %89, i64* %3, align 8
  br i1 %85, label %block_44fee6, label %block_.L_450739

block_44fee6:                                     ; preds = %entry
  store i64 1, i64* %RDI.i126, align 8
  store i64 2, i64* %RAX.i186, align 8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i1954 = getelementptr inbounds %union.anon, %union.anon* %90, i64 0, i32 0
  %91 = add i64 %89, 14
  store i64 %91, i64* %3, align 8
  %92 = load i64, i64* %70, align 8
  store i64 %92, i64* %RCX.i1954, align 8
  %93 = add i64 %92, 40
  %94 = add i64 %89, 18
  store i64 %94, i64* %3, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RCX.i1954, align 8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %RSI.i2074 = getelementptr inbounds %union.anon, %union.anon* %97, i64 0, i32 0
  %98 = add i64 %96, 6392
  %99 = add i64 %89, 24
  store i64 %99, i64* %3, align 8
  %100 = inttoptr i64 %98 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  store i64 %102, i64* %RSI.i2074, align 8
  %103 = add i64 %89, 28
  store i64 %103, i64* %3, align 8
  %104 = load i64, i64* %70, align 8
  store i64 %104, i64* %RCX.i1954, align 8
  %105 = add i64 %104, 40
  %106 = add i64 %89, 32
  store i64 %106, i64* %3, align 8
  %107 = inttoptr i64 %105 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RCX.i1954, align 8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i2171 = getelementptr inbounds %union.anon, %union.anon* %109, i64 0, i32 0
  %110 = add i64 %108, 6396
  %111 = add i64 %89, 38
  store i64 %111, i64* %3, align 8
  %112 = inttoptr i64 %110 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = zext i32 %113 to i64
  store i64 %114, i64* %RDX.i2171, align 8
  %115 = add i64 %66, -80
  %116 = add i64 %89, 41
  store i64 %116, i64* %3, align 8
  %117 = inttoptr i64 %115 to i32*
  store i32 2, i32* %117, align 4
  %EDX.i2250 = bitcast %union.anon* %109 to i32*
  %118 = load i32, i32* %EDX.i2250, align 4
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %3, align 8
  store i64 %119, i64* %RAX.i186, align 8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %122 = sext i32 %118 to i64
  %123 = lshr i64 %122, 32
  store i64 %123, i64* %121, align 8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D.i2329 = bitcast %union.anon* %124 to i32*
  %125 = getelementptr inbounds %union.anon, %union.anon* %124, i64 0, i32 0
  %126 = load i64, i64* %RBP.i, align 8
  %127 = add i64 %126, -80
  %128 = add i64 %120, 7
  store i64 %128, i64* %3, align 8
  %129 = inttoptr i64 %127 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %125, align 8
  %132 = add i64 %120, 10
  store i64 %132, i64* %3, align 8
  %133 = sext i32 %130 to i64
  %134 = shl nuw i64 %123, 32
  %135 = or i64 %134, %119
  %136 = sdiv i64 %135, %133
  %137 = shl i64 %136, 32
  %138 = ashr exact i64 %137, 32
  %139 = icmp eq i64 %136, %138
  br i1 %139, label %142, label %140

; <label>:140:                                    ; preds = %block_44fee6
  %141 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %132, %struct.Memory* %2)
  %.pre = load i64, i64* %RBP.i, align 8
  %.pre259 = load i64, i64* %3, align 8
  %.pre260 = load i32, i32* %EAX.i304, align 4
  br label %routine_idivl__r8d.exit

; <label>:142:                                    ; preds = %block_44fee6
  %143 = srem i64 %135, %133
  %144 = and i64 %136, 4294967295
  store i64 %144, i64* %RAX.i186, align 8
  %145 = and i64 %143, 4294967295
  store i64 %145, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %146 = trunc i64 %136 to i32
  br label %routine_idivl__r8d.exit

routine_idivl__r8d.exit:                          ; preds = %142, %140
  %147 = phi i32 [ %.pre260, %140 ], [ %146, %142 ]
  %148 = phi i64 [ %.pre259, %140 ], [ %132, %142 ]
  %149 = phi i64 [ %.pre, %140 ], [ %126, %142 ]
  %150 = phi %struct.Memory* [ %141, %140 ], [ %2, %142 ]
  %151 = add i64 %149, -8
  %152 = add i64 %148, 4
  store i64 %152, i64* %3, align 8
  %153 = inttoptr i64 %151 to i64*
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %RCX.i1954, align 8
  %155 = add i64 %154, 40
  %156 = add i64 %148, 8
  store i64 %156, i64* %3, align 8
  %157 = inttoptr i64 %155 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RCX.i1954, align 8
  %159 = add i64 %158, 6400
  %160 = add i64 %148, 14
  store i64 %160, i64* %3, align 8
  %161 = inttoptr i64 %159 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %RCX.i1954, align 8
  %R9.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %164 = add i64 %148, 18
  store i64 %164, i64* %3, align 8
  %165 = load i64, i64* %153, align 8
  store i64 %165, i64* %R9.i, align 8
  %166 = add i64 %165, 40
  %167 = add i64 %148, 22
  store i64 %167, i64* %3, align 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %R9.i, align 8
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D.i = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %union.anon, %union.anon* %170, i64 0, i32 0
  %172 = add i64 %169, 6404
  %173 = add i64 %148, 29
  store i64 %173, i64* %3, align 8
  %174 = inttoptr i64 %172 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  store i64 %176, i64* %171, align 8
  %177 = add i64 %149, -84
  %178 = add i64 %148, 32
  store i64 %178, i64* %3, align 8
  %179 = inttoptr i64 %177 to i32*
  store i32 %147, i32* %179, align 4
  %180 = load i32, i32* %R10D.i, align 4
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %3, align 8
  store i64 %181, i64* %RAX.i186, align 8
  %183 = sext i32 %180 to i64
  %184 = lshr i64 %183, 32
  store i64 %184, i64* %121, align 8
  %185 = load i32, i32* %R8D.i2329, align 4
  %186 = add i64 %182, 7
  store i64 %186, i64* %3, align 8
  %187 = sext i32 %185 to i64
  %188 = shl nuw i64 %184, 32
  %189 = or i64 %188, %181
  %190 = sdiv i64 %189, %187
  %191 = shl i64 %190, 32
  %192 = ashr exact i64 %191, 32
  %193 = icmp eq i64 %190, %192
  br i1 %193, label %196, label %194

; <label>:194:                                    ; preds = %routine_idivl__r8d.exit
  %195 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %186, %struct.Memory* %150)
  %.pre261 = load i64, i64* %3, align 8
  %.pre262 = load i32, i32* %EAX.i304, align 4
  br label %routine_idivl__r8d.exit2747

; <label>:196:                                    ; preds = %routine_idivl__r8d.exit
  %197 = srem i64 %189, %187
  %198 = and i64 %190, 4294967295
  store i64 %198, i64* %RAX.i186, align 8
  %199 = and i64 %197, 4294967295
  store i64 %199, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %200 = trunc i64 %190 to i32
  br label %routine_idivl__r8d.exit2747

routine_idivl__r8d.exit2747:                      ; preds = %196, %194
  %201 = phi i32 [ %.pre262, %194 ], [ %200, %196 ]
  %202 = phi i64 [ %.pre261, %194 ], [ %186, %196 ]
  %203 = phi %struct.Memory* [ %195, %194 ], [ %150, %196 ]
  %204 = load i64, i64* %RBP.i, align 8
  %205 = add i64 %204, -84
  %206 = add i64 %202, 4
  store i64 %206, i64* %3, align 8
  %207 = inttoptr i64 %205 to i32*
  %208 = load i32, i32* %207, align 4
  %209 = zext i32 %208 to i64
  store i64 %209, i64* %171, align 8
  store i64 %209, i64* %RDX.i2171, align 8
  %210 = zext i32 %201 to i64
  store i64 %210, i64* %125, align 8
  %211 = add i64 %202, -16864
  %212 = add i64 %202, 15
  %213 = load i64, i64* %6, align 8
  %214 = add i64 %213, -8
  %215 = inttoptr i64 %214 to i64*
  store i64 %212, i64* %215, align 8
  store i64 %214, i64* %6, align 8
  store i64 %211, i64* %3, align 8
  %call2_44ff4a = tail call %struct.Memory* @sub_44bd60.alloc_storable_picture(%struct.State* nonnull %0, i64 %211, %struct.Memory* %203)
  %216 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i1954, align 8
  %217 = load i64, i64* %RBP.i, align 8
  %218 = add i64 %217, -8
  %219 = add i64 %216, 9
  store i64 %219, i64* %3, align 8
  %220 = inttoptr i64 %218 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %R9.i, align 8
  %222 = add i64 %221, 48
  %223 = load i64, i64* %RAX.i186, align 8
  %224 = add i64 %216, 13
  store i64 %224, i64* %3, align 8
  %225 = inttoptr i64 %222 to i64*
  store i64 %223, i64* %225, align 8
  %226 = load i64, i64* %RBP.i, align 8
  %227 = add i64 %226, -8
  %228 = load i64, i64* %3, align 8
  %229 = add i64 %228, 4
  store i64 %229, i64* %3, align 8
  %230 = inttoptr i64 %227 to i64*
  %231 = load i64, i64* %230, align 8
  store i64 %231, i64* %RAX.i186, align 8
  %232 = add i64 %231, 40
  %233 = add i64 %228, 8
  store i64 %233, i64* %3, align 8
  %234 = inttoptr i64 %232 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %RAX.i186, align 8
  %236 = add i64 %235, 6392
  %237 = add i64 %228, 14
  store i64 %237, i64* %3, align 8
  %238 = inttoptr i64 %236 to i32*
  %239 = load i32, i32* %238, align 4
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RSI.i2074, align 8
  %241 = add i64 %228, 18
  store i64 %241, i64* %3, align 8
  %242 = load i64, i64* %230, align 8
  store i64 %242, i64* %RAX.i186, align 8
  %243 = add i64 %242, 40
  %244 = add i64 %228, 22
  store i64 %244, i64* %3, align 8
  %245 = inttoptr i64 %243 to i64*
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %RAX.i186, align 8
  %247 = add i64 %246, 6396
  %248 = add i64 %228, 28
  store i64 %248, i64* %3, align 8
  %249 = inttoptr i64 %247 to i32*
  %250 = load i32, i32* %249, align 4
  %251 = zext i32 %250 to i64
  store i64 %251, i64* %RAX.i186, align 8
  %252 = sext i32 %250 to i64
  %253 = lshr i64 %252, 32
  store i64 %253, i64* %121, align 8
  %ECX.i3337 = bitcast %union.anon* %90 to i32*
  %254 = load i32, i32* %ECX.i3337, align 4
  %255 = add i64 %228, 31
  store i64 %255, i64* %3, align 8
  %256 = sext i32 %254 to i64
  %257 = shl nuw i64 %253, 32
  %258 = or i64 %257, %251
  %259 = sdiv i64 %258, %256
  %260 = shl i64 %259, 32
  %261 = ashr exact i64 %260, 32
  %262 = icmp eq i64 %259, %261
  br i1 %262, label %265, label %263

; <label>:263:                                    ; preds = %routine_idivl__r8d.exit2747
  %264 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %255, %struct.Memory* %call2_44ff4a)
  %.pre263 = load i64, i64* %RBP.i, align 8
  %.pre264 = load i64, i64* %3, align 8
  %.pre265 = load i32, i32* %EAX.i304, align 4
  br label %routine_idivl__ecx.exit3338

; <label>:265:                                    ; preds = %routine_idivl__r8d.exit2747
  %266 = srem i64 %258, %256
  %267 = and i64 %259, 4294967295
  store i64 %267, i64* %RAX.i186, align 8
  %268 = and i64 %266, 4294967295
  store i64 %268, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %269 = trunc i64 %259 to i32
  br label %routine_idivl__ecx.exit3338

routine_idivl__ecx.exit3338:                      ; preds = %265, %263
  %270 = phi i32 [ %.pre265, %263 ], [ %269, %265 ]
  %271 = phi i64 [ %.pre264, %263 ], [ %255, %265 ]
  %272 = phi i64 [ %.pre263, %263 ], [ %226, %265 ]
  %273 = phi %struct.Memory* [ %264, %263 ], [ %call2_44ff4a, %265 ]
  %274 = add i64 %272, -8
  %275 = add i64 %271, 4
  store i64 %275, i64* %3, align 8
  %276 = inttoptr i64 %274 to i64*
  %277 = load i64, i64* %276, align 8
  store i64 %277, i64* %R9.i, align 8
  %278 = add i64 %277, 40
  %279 = add i64 %271, 8
  store i64 %279, i64* %3, align 8
  %280 = inttoptr i64 %278 to i64*
  %281 = load i64, i64* %280, align 8
  store i64 %281, i64* %R9.i, align 8
  %282 = add i64 %281, 6400
  %283 = add i64 %271, 15
  store i64 %283, i64* %3, align 8
  %284 = inttoptr i64 %282 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI.i126, align 8
  %287 = add i64 %271, 19
  store i64 %287, i64* %3, align 8
  %288 = load i64, i64* %276, align 8
  store i64 %288, i64* %R9.i, align 8
  %289 = add i64 %288, 40
  %290 = add i64 %271, 23
  store i64 %290, i64* %3, align 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %R9.i, align 8
  %293 = add i64 %292, 6404
  %294 = add i64 %271, 30
  store i64 %294, i64* %3, align 8
  %295 = inttoptr i64 %293 to i32*
  %296 = load i32, i32* %295, align 4
  %297 = zext i32 %296 to i64
  store i64 %297, i64* %125, align 8
  %298 = add i64 %272, -88
  %299 = add i64 %271, 33
  store i64 %299, i64* %3, align 8
  %300 = inttoptr i64 %298 to i32*
  store i32 %270, i32* %300, align 4
  %301 = load i32, i32* %R8D.i2329, align 4
  %302 = zext i32 %301 to i64
  %303 = load i64, i64* %3, align 8
  store i64 %302, i64* %RAX.i186, align 8
  %304 = sext i32 %301 to i64
  %305 = lshr i64 %304, 32
  store i64 %305, i64* %121, align 8
  %306 = load i32, i32* %ECX.i3337, align 4
  %307 = add i64 %303, 6
  store i64 %307, i64* %3, align 8
  %308 = sext i32 %306 to i64
  %309 = shl nuw i64 %305, 32
  %310 = or i64 %309, %302
  %311 = sdiv i64 %310, %308
  %312 = shl i64 %311, 32
  %313 = ashr exact i64 %312, 32
  %314 = icmp eq i64 %311, %313
  br i1 %314, label %317, label %315

; <label>:315:                                    ; preds = %routine_idivl__ecx.exit3338
  %316 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %307, %struct.Memory* %273)
  %.pre266 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit4250

; <label>:317:                                    ; preds = %routine_idivl__ecx.exit3338
  %318 = srem i64 %310, %308
  %319 = and i64 %311, 4294967295
  store i64 %319, i64* %RAX.i186, align 8
  %320 = and i64 %318, 4294967295
  store i64 %320, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__ecx.exit4250

routine_idivl__ecx.exit4250:                      ; preds = %317, %315
  %321 = phi i64 [ %.pre266, %315 ], [ %307, %317 ]
  %322 = phi %struct.Memory* [ %316, %315 ], [ %273, %317 ]
  %EDI.i4252 = bitcast %union.anon* %40 to i32*
  %323 = load i64, i64* %RBP.i, align 8
  %324 = add i64 %323, -92
  %325 = load i32, i32* %EDI.i4252, align 4
  %326 = add i64 %321, 3
  store i64 %326, i64* %3, align 8
  %327 = inttoptr i64 %324 to i32*
  store i32 %325, i32* %327, align 4
  %328 = load i32, i32* %ECX.i3337, align 4
  %329 = zext i32 %328 to i64
  %330 = load i64, i64* %3, align 8
  store i64 %329, i64* %RDI.i126, align 8
  %331 = load i64, i64* %RBP.i, align 8
  %332 = add i64 %331, -88
  %333 = add i64 %330, 5
  store i64 %333, i64* %3, align 8
  %334 = inttoptr i64 %332 to i32*
  %335 = load i32, i32* %334, align 4
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RCX.i1954, align 8
  store i64 %336, i64* %RDX.i2171, align 8
  %337 = add i64 %331, -92
  %338 = add i64 %330, 10
  store i64 %338, i64* %3, align 8
  %339 = inttoptr i64 %337 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  store i64 %341, i64* %RCX.i1954, align 8
  %342 = load i32, i32* %EAX.i304, align 4
  %343 = zext i32 %342 to i64
  store i64 %343, i64* %125, align 8
  %344 = add i64 %330, -16965
  %345 = add i64 %330, 18
  %346 = load i64, i64* %6, align 8
  %347 = add i64 %346, -8
  %348 = inttoptr i64 %347 to i64*
  store i64 %345, i64* %348, align 8
  store i64 %347, i64* %6, align 8
  store i64 %344, i64* %3, align 8
  %call2_44ffb2 = tail call %struct.Memory* @sub_44bd60.alloc_storable_picture(%struct.State* nonnull %0, i64 %344, %struct.Memory* %322)
  %349 = load i64, i64* %RBP.i, align 8
  %350 = add i64 %349, -8
  %351 = load i64, i64* %3, align 8
  %352 = add i64 %351, 4
  store i64 %352, i64* %3, align 8
  %353 = inttoptr i64 %350 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %R9.i, align 8
  %355 = add i64 %354, 56
  %356 = load i64, i64* %RAX.i186, align 8
  %357 = add i64 %351, 8
  store i64 %357, i64* %3, align 8
  %358 = inttoptr i64 %355 to i64*
  store i64 %356, i64* %358, align 8
  %359 = load i64, i64* %RBP.i, align 8
  %360 = add i64 %359, -12
  %361 = load i64, i64* %3, align 8
  %362 = add i64 %361, 7
  store i64 %362, i64* %3, align 8
  %363 = inttoptr i64 %360 to i32*
  store i32 0, i32* %363, align 4
  %ESI.i5604 = bitcast %union.anon* %97 to i32*
  %.pre267 = load i64, i64* %3, align 8
  br label %block_.L_44ffc6

block_.L_44ffc6:                                  ; preds = %block_44ffef, %routine_idivl__ecx.exit4250
  %364 = phi i64 [ %.pre267, %routine_idivl__ecx.exit4250 ], [ %575, %block_44ffef ]
  %MEMORY.0 = phi %struct.Memory* [ %call2_44ffb2, %routine_idivl__ecx.exit4250 ], [ %543, %block_44ffef ]
  store i64 2, i64* %RAX.i186, align 8
  %365 = load i64, i64* %RBP.i, align 8
  %366 = add i64 %365, -12
  %367 = add i64 %364, 8
  store i64 %367, i64* %3, align 8
  %368 = inttoptr i64 %366 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = zext i32 %369 to i64
  store i64 %370, i64* %RCX.i1954, align 8
  %371 = add i64 %365, -8
  %372 = add i64 %364, 12
  store i64 %372, i64* %3, align 8
  %373 = inttoptr i64 %371 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RDX.i2171, align 8
  %375 = add i64 %374, 40
  %376 = add i64 %364, 16
  store i64 %376, i64* %3, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %RDX.i2171, align 8
  %379 = add i64 %378, 6396
  %380 = add i64 %364, 22
  store i64 %380, i64* %3, align 8
  %381 = inttoptr i64 %379 to i32*
  %382 = load i32, i32* %381, align 4
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RSI.i2074, align 8
  %384 = add i64 %365, -96
  %385 = add i64 %364, 25
  store i64 %385, i64* %3, align 8
  %386 = inttoptr i64 %384 to i32*
  store i32 2, i32* %386, align 4
  %387 = load i32, i32* %ESI.i5604, align 4
  %388 = zext i32 %387 to i64
  %389 = load i64, i64* %3, align 8
  store i64 %388, i64* %RAX.i186, align 8
  %390 = sext i32 %387 to i64
  %391 = lshr i64 %390, 32
  store i64 %391, i64* %121, align 8
  %392 = load i64, i64* %RBP.i, align 8
  %393 = add i64 %392, -96
  %394 = add i64 %389, 6
  store i64 %394, i64* %3, align 8
  %395 = inttoptr i64 %393 to i32*
  %396 = load i32, i32* %395, align 4
  %397 = zext i32 %396 to i64
  store i64 %397, i64* %RSI.i2074, align 8
  %398 = add i64 %389, 8
  store i64 %398, i64* %3, align 8
  %399 = sext i32 %396 to i64
  %400 = shl nuw i64 %391, 32
  %401 = or i64 %400, %388
  %402 = sdiv i64 %401, %399
  %403 = shl i64 %402, 32
  %404 = ashr exact i64 %403, 32
  %405 = icmp eq i64 %402, %404
  br i1 %405, label %408, label %406

; <label>:406:                                    ; preds = %block_.L_44ffc6
  %407 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %398, %struct.Memory* %MEMORY.0)
  %.pre268 = load i32, i32* %EAX.i304, align 4
  %.pre269 = load i64, i64* %3, align 8
  %.pre270 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit5602

; <label>:408:                                    ; preds = %block_.L_44ffc6
  %409 = srem i64 %401, %399
  %410 = and i64 %402, 4294967295
  store i64 %410, i64* %RAX.i186, align 8
  %411 = and i64 %409, 4294967295
  store i64 %411, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %412 = trunc i64 %402 to i32
  br label %routine_idivl__esi.exit5602

routine_idivl__esi.exit5602:                      ; preds = %408, %406
  %413 = phi i64 [ %.pre270, %406 ], [ %392, %408 ]
  %414 = phi i64 [ %.pre269, %406 ], [ %398, %408 ]
  %415 = phi i32 [ %.pre268, %406 ], [ %412, %408 ]
  %416 = phi %struct.Memory* [ %407, %406 ], [ %MEMORY.0, %408 ]
  %417 = load i32, i32* %ECX.i3337, align 4
  %418 = sub i32 %417, %415
  %419 = icmp ult i32 %417, %415
  %420 = zext i1 %419 to i8
  store i8 %420, i8* %14, align 1
  %421 = and i32 %418, 255
  %422 = tail call i32 @llvm.ctpop.i32(i32 %421)
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  store i8 %425, i8* %21, align 1
  %426 = xor i32 %415, %417
  %427 = xor i32 %426, %418
  %428 = lshr i32 %427, 4
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  store i8 %430, i8* %27, align 1
  %431 = icmp eq i32 %418, 0
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %30, align 1
  %433 = lshr i32 %418, 31
  %434 = trunc i32 %433 to i8
  store i8 %434, i8* %33, align 1
  %435 = lshr i32 %417, 31
  %436 = lshr i32 %415, 31
  %437 = xor i32 %436, %435
  %438 = xor i32 %433, %435
  %439 = add nuw nsw i32 %438, %437
  %440 = icmp eq i32 %439, 2
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %39, align 1
  %442 = icmp ne i8 %434, 0
  %443 = xor i1 %442, %440
  %.v552 = select i1 %443, i64 8, i64 111
  %444 = add i64 %414, %.v552
  store i64 %444, i64* %3, align 8
  br i1 %443, label %block_44ffef, label %block_.L_450056

block_44ffef:                                     ; preds = %routine_idivl__esi.exit5602
  %445 = add i64 %413, -8
  %446 = add i64 %444, 4
  store i64 %446, i64* %3, align 8
  %447 = inttoptr i64 %445 to i64*
  %448 = load i64, i64* %447, align 8
  store i64 %448, i64* %RAX.i186, align 8
  %449 = add i64 %448, 48
  %450 = add i64 %444, 8
  store i64 %450, i64* %3, align 8
  %451 = inttoptr i64 %449 to i64*
  %452 = load i64, i64* %451, align 8
  store i64 %452, i64* %RAX.i186, align 8
  %453 = add i64 %452, 6424
  %454 = add i64 %444, 15
  store i64 %454, i64* %3, align 8
  %455 = inttoptr i64 %453 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %RAX.i186, align 8
  %457 = add i64 %413, -12
  %458 = add i64 %444, 19
  store i64 %458, i64* %3, align 8
  %459 = inttoptr i64 %457 to i32*
  %460 = load i32, i32* %459, align 4
  %461 = sext i32 %460 to i64
  store i64 %461, i64* %RCX.i1954, align 8
  %462 = shl nsw i64 %461, 3
  %463 = add i64 %462, %456
  %464 = add i64 %444, 23
  store i64 %464, i64* %3, align 8
  %465 = inttoptr i64 %463 to i64*
  %466 = load i64, i64* %465, align 8
  store i64 %466, i64* %RAX.i186, align 8
  %467 = add i64 %444, 27
  store i64 %467, i64* %3, align 8
  %468 = load i64, i64* %447, align 8
  store i64 %468, i64* %RCX.i1954, align 8
  %469 = add i64 %468, 40
  %470 = add i64 %444, 31
  store i64 %470, i64* %3, align 8
  %471 = inttoptr i64 %469 to i64*
  %472 = load i64, i64* %471, align 8
  store i64 %472, i64* %RCX.i1954, align 8
  %473 = add i64 %472, 6424
  %474 = add i64 %444, 38
  store i64 %474, i64* %3, align 8
  %475 = inttoptr i64 %473 to i64*
  %476 = load i64, i64* %475, align 8
  store i64 %476, i64* %RCX.i1954, align 8
  %477 = add i64 %444, 41
  store i64 %477, i64* %3, align 8
  %478 = load i32, i32* %459, align 4
  %479 = shl i32 %478, 1
  %480 = icmp slt i32 %478, 0
  %481 = icmp slt i32 %479, 0
  %482 = xor i1 %480, %481
  %483 = zext i32 %479 to i64
  store i64 %483, i64* %RDX.i2171, align 8
  %.lobit = lshr i32 %478, 31
  %484 = trunc i32 %.lobit to i8
  store i8 %484, i8* %14, align 1
  %485 = and i32 %479, 254
  %486 = tail call i32 @llvm.ctpop.i32(i32 %485)
  %487 = trunc i32 %486 to i8
  %488 = and i8 %487, 1
  %489 = xor i8 %488, 1
  store i8 %489, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %490 = icmp eq i32 %479, 0
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %30, align 1
  %492 = lshr i32 %478, 30
  %493 = trunc i32 %492 to i8
  %494 = and i8 %493, 1
  store i8 %494, i8* %33, align 1
  %495 = zext i1 %482 to i8
  store i8 %495, i8* %39, align 1
  %496 = sext i32 %479 to i64
  store i64 %496, i64* %RSI.i2074, align 8
  %497 = shl nsw i64 %496, 3
  %498 = add i64 %476, %497
  %499 = add i64 %444, 50
  store i64 %499, i64* %3, align 8
  %500 = inttoptr i64 %498 to i64*
  %501 = load i64, i64* %500, align 8
  store i64 %501, i64* %RCX.i1954, align 8
  %502 = add i64 %444, 54
  store i64 %502, i64* %3, align 8
  %503 = load i64, i64* %447, align 8
  store i64 %503, i64* %RSI.i2074, align 8
  %504 = add i64 %503, 40
  %505 = add i64 %444, 58
  store i64 %505, i64* %3, align 8
  %506 = inttoptr i64 %504 to i64*
  %507 = load i64, i64* %506, align 8
  store i64 %507, i64* %RSI.i2074, align 8
  %508 = add i64 %507, 6392
  %509 = add i64 %444, 65
  store i64 %509, i64* %3, align 8
  %510 = inttoptr i64 %508 to i32*
  %511 = load i32, i32* %510, align 4
  %512 = sext i32 %511 to i64
  %513 = shl nsw i64 %512, 1
  %.lobit58 = lshr i32 %511, 31
  %514 = trunc i32 %.lobit58 to i8
  store i8 %514, i8* %14, align 1
  %515 = trunc i64 %513 to i32
  %516 = and i32 %515, 254
  %517 = tail call i32 @llvm.ctpop.i32(i32 %516)
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  store i8 %520, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %521 = icmp eq i32 %511, 0
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %30, align 1
  %523 = lshr i64 %512, 62
  %524 = trunc i64 %523 to i8
  %525 = and i8 %524, 1
  store i8 %525, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %526 = load i64, i64* %RAX.i186, align 8
  store i64 %526, i64* %RDI.i126, align 8
  %527 = load i64, i64* %RBP.i, align 8
  %528 = add i64 %527, -104
  %529 = add i64 %444, 75
  store i64 %529, i64* %3, align 8
  %530 = inttoptr i64 %528 to i64*
  store i64 %513, i64* %530, align 8
  %531 = load i64, i64* %RCX.i1954, align 8
  %532 = load i64, i64* %3, align 8
  store i64 %531, i64* %RSI.i2074, align 8
  %533 = load i64, i64* %RBP.i, align 8
  %534 = add i64 %533, -104
  %535 = add i64 %532, 7
  store i64 %535, i64* %3, align 8
  %536 = inttoptr i64 %534 to i64*
  %537 = load i64, i64* %536, align 8
  store i64 %537, i64* %RDX.i2171, align 8
  %538 = add i64 %532, -323340
  %539 = add i64 %532, 12
  %540 = load i64, i64* %6, align 8
  %541 = add i64 %540, -8
  %542 = inttoptr i64 %541 to i64*
  store i64 %539, i64* %542, align 8
  store i64 %541, i64* %6, align 8
  store i64 %538, i64* %3, align 8
  %543 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %416)
  %544 = load i64, i64* %RBP.i, align 8
  %545 = add i64 %544, -12
  %546 = load i64, i64* %3, align 8
  %547 = add i64 %546, 3
  store i64 %547, i64* %3, align 8
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = add i32 %549, 1
  %551 = zext i32 %550 to i64
  store i64 %551, i64* %RAX.i186, align 8
  %552 = icmp eq i32 %549, -1
  %553 = icmp eq i32 %550, 0
  %554 = or i1 %552, %553
  %555 = zext i1 %554 to i8
  store i8 %555, i8* %14, align 1
  %556 = and i32 %550, 255
  %557 = tail call i32 @llvm.ctpop.i32(i32 %556)
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  %560 = xor i8 %559, 1
  store i8 %560, i8* %21, align 1
  %561 = xor i32 %550, %549
  %562 = lshr i32 %561, 4
  %563 = trunc i32 %562 to i8
  %564 = and i8 %563, 1
  store i8 %564, i8* %27, align 1
  %565 = zext i1 %553 to i8
  store i8 %565, i8* %30, align 1
  %566 = lshr i32 %550, 31
  %567 = trunc i32 %566 to i8
  store i8 %567, i8* %33, align 1
  %568 = lshr i32 %549, 31
  %569 = xor i32 %566, %568
  %570 = add nuw nsw i32 %569, %566
  %571 = icmp eq i32 %570, 2
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %39, align 1
  %573 = add i64 %546, 9
  store i64 %573, i64* %3, align 8
  store i32 %550, i32* %548, align 4
  %574 = load i64, i64* %3, align 8
  %575 = add i64 %574, -139
  store i64 %575, i64* %3, align 8
  br label %block_.L_44ffc6

block_.L_450056:                                  ; preds = %routine_idivl__esi.exit5602
  %576 = add i64 %413, -12
  %577 = add i64 %444, 7
  store i64 %577, i64* %3, align 8
  %578 = inttoptr i64 %576 to i32*
  store i32 0, i32* %578, align 4
  %.pre271 = load i64, i64* %3, align 8
  br label %block_.L_45005d

block_.L_45005d:                                  ; preds = %block_450086, %block_.L_450056
  %579 = phi i64 [ %.pre271, %block_.L_450056 ], [ %899, %block_450086 ]
  %MEMORY.1 = phi %struct.Memory* [ %416, %block_.L_450056 ], [ %867, %block_450086 ]
  store i64 2, i64* %RAX.i186, align 8
  %580 = load i64, i64* %RBP.i, align 8
  %581 = add i64 %580, -12
  %582 = add i64 %579, 8
  store i64 %582, i64* %3, align 8
  %583 = inttoptr i64 %581 to i32*
  %584 = load i32, i32* %583, align 4
  %585 = zext i32 %584 to i64
  store i64 %585, i64* %RCX.i1954, align 8
  %586 = add i64 %580, -8
  %587 = add i64 %579, 12
  store i64 %587, i64* %3, align 8
  %588 = inttoptr i64 %586 to i64*
  %589 = load i64, i64* %588, align 8
  store i64 %589, i64* %RDX.i2171, align 8
  %590 = add i64 %589, 40
  %591 = add i64 %579, 16
  store i64 %591, i64* %3, align 8
  %592 = inttoptr i64 %590 to i64*
  %593 = load i64, i64* %592, align 8
  store i64 %593, i64* %RDX.i2171, align 8
  %594 = add i64 %593, 6404
  %595 = add i64 %579, 22
  store i64 %595, i64* %3, align 8
  %596 = inttoptr i64 %594 to i32*
  %597 = load i32, i32* %596, align 4
  %598 = zext i32 %597 to i64
  store i64 %598, i64* %RSI.i2074, align 8
  %599 = add i64 %580, -108
  %600 = add i64 %579, 25
  store i64 %600, i64* %3, align 8
  %601 = inttoptr i64 %599 to i32*
  store i32 2, i32* %601, align 4
  %602 = load i32, i32* %ESI.i5604, align 4
  %603 = zext i32 %602 to i64
  %604 = load i64, i64* %3, align 8
  store i64 %603, i64* %RAX.i186, align 8
  %605 = sext i32 %602 to i64
  %606 = lshr i64 %605, 32
  store i64 %606, i64* %121, align 8
  %607 = load i64, i64* %RBP.i, align 8
  %608 = add i64 %607, -108
  %609 = add i64 %604, 6
  store i64 %609, i64* %3, align 8
  %610 = inttoptr i64 %608 to i32*
  %611 = load i32, i32* %610, align 4
  %612 = zext i32 %611 to i64
  store i64 %612, i64* %RSI.i2074, align 8
  %613 = add i64 %604, 8
  store i64 %613, i64* %3, align 8
  %614 = sext i32 %611 to i64
  %615 = shl nuw i64 %606, 32
  %616 = or i64 %615, %603
  %617 = sdiv i64 %616, %614
  %618 = shl i64 %617, 32
  %619 = ashr exact i64 %618, 32
  %620 = icmp eq i64 %617, %619
  br i1 %620, label %623, label %621

; <label>:621:                                    ; preds = %block_.L_45005d
  %622 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %613, %struct.Memory* %MEMORY.1)
  %.pre272 = load i32, i32* %EAX.i304, align 4
  %.pre273 = load i64, i64* %3, align 8
  %.pre274 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit5502

; <label>:623:                                    ; preds = %block_.L_45005d
  %624 = srem i64 %616, %614
  %625 = and i64 %617, 4294967295
  store i64 %625, i64* %RAX.i186, align 8
  %626 = and i64 %624, 4294967295
  store i64 %626, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %627 = trunc i64 %617 to i32
  br label %routine_idivl__esi.exit5502

routine_idivl__esi.exit5502:                      ; preds = %623, %621
  %628 = phi i64 [ %.pre274, %621 ], [ %607, %623 ]
  %629 = phi i64 [ %.pre273, %621 ], [ %613, %623 ]
  %630 = phi i32 [ %.pre272, %621 ], [ %627, %623 ]
  %631 = phi %struct.Memory* [ %622, %621 ], [ %MEMORY.1, %623 ]
  %632 = load i32, i32* %ECX.i3337, align 4
  %633 = sub i32 %632, %630
  %634 = icmp ult i32 %632, %630
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %14, align 1
  %636 = and i32 %633, 255
  %637 = tail call i32 @llvm.ctpop.i32(i32 %636)
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = xor i8 %639, 1
  store i8 %640, i8* %21, align 1
  %641 = xor i32 %630, %632
  %642 = xor i32 %641, %633
  %643 = lshr i32 %642, 4
  %644 = trunc i32 %643 to i8
  %645 = and i8 %644, 1
  store i8 %645, i8* %27, align 1
  %646 = icmp eq i32 %633, 0
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %30, align 1
  %648 = lshr i32 %633, 31
  %649 = trunc i32 %648 to i8
  store i8 %649, i8* %33, align 1
  %650 = lshr i32 %632, 31
  %651 = lshr i32 %630, 31
  %652 = xor i32 %651, %650
  %653 = xor i32 %648, %650
  %654 = add nuw nsw i32 %653, %652
  %655 = icmp eq i32 %654, 2
  %656 = zext i1 %655 to i8
  store i8 %656, i8* %39, align 1
  %657 = icmp ne i8 %649, 0
  %658 = xor i1 %657, %655
  %.v553 = select i1 %658, i64 8, i64 208
  %659 = add i64 %629, %.v553
  store i64 %659, i64* %3, align 8
  br i1 %658, label %block_450086, label %block_.L_45014e

block_450086:                                     ; preds = %routine_idivl__esi.exit5502
  %660 = add i64 %628, -8
  %661 = add i64 %659, 4
  store i64 %661, i64* %3, align 8
  %662 = inttoptr i64 %660 to i64*
  %663 = load i64, i64* %662, align 8
  store i64 %663, i64* %RAX.i186, align 8
  %664 = add i64 %663, 48
  %665 = add i64 %659, 8
  store i64 %665, i64* %3, align 8
  %666 = inttoptr i64 %664 to i64*
  %667 = load i64, i64* %666, align 8
  store i64 %667, i64* %RAX.i186, align 8
  %668 = add i64 %667, 6464
  %669 = add i64 %659, 15
  store i64 %669, i64* %3, align 8
  %670 = inttoptr i64 %668 to i64*
  %671 = load i64, i64* %670, align 8
  store i64 %671, i64* %RAX.i186, align 8
  %672 = add i64 %659, 18
  store i64 %672, i64* %3, align 8
  %673 = inttoptr i64 %671 to i64*
  %674 = load i64, i64* %673, align 8
  store i64 %674, i64* %RAX.i186, align 8
  %675 = add i64 %628, -12
  %676 = add i64 %659, 22
  store i64 %676, i64* %3, align 8
  %677 = inttoptr i64 %675 to i32*
  %678 = load i32, i32* %677, align 4
  %679 = sext i32 %678 to i64
  store i64 %679, i64* %RCX.i1954, align 8
  %680 = shl nsw i64 %679, 3
  %681 = add i64 %680, %674
  %682 = add i64 %659, 26
  store i64 %682, i64* %3, align 8
  %683 = inttoptr i64 %681 to i64*
  %684 = load i64, i64* %683, align 8
  store i64 %684, i64* %RAX.i186, align 8
  %685 = add i64 %659, 30
  store i64 %685, i64* %3, align 8
  %686 = load i64, i64* %662, align 8
  store i64 %686, i64* %RCX.i1954, align 8
  %687 = add i64 %686, 40
  %688 = add i64 %659, 34
  store i64 %688, i64* %3, align 8
  %689 = inttoptr i64 %687 to i64*
  %690 = load i64, i64* %689, align 8
  store i64 %690, i64* %RCX.i1954, align 8
  %691 = add i64 %690, 6464
  %692 = add i64 %659, 41
  store i64 %692, i64* %3, align 8
  %693 = inttoptr i64 %691 to i64*
  %694 = load i64, i64* %693, align 8
  store i64 %694, i64* %RCX.i1954, align 8
  %695 = add i64 %659, 44
  store i64 %695, i64* %3, align 8
  %696 = inttoptr i64 %694 to i64*
  %697 = load i64, i64* %696, align 8
  store i64 %697, i64* %RCX.i1954, align 8
  %698 = add i64 %659, 47
  store i64 %698, i64* %3, align 8
  %699 = load i32, i32* %677, align 4
  %700 = shl i32 %699, 1
  %701 = icmp slt i32 %699, 0
  %702 = icmp slt i32 %700, 0
  %703 = xor i1 %701, %702
  %704 = zext i32 %700 to i64
  store i64 %704, i64* %RDX.i2171, align 8
  %.lobit59 = lshr i32 %699, 31
  %705 = trunc i32 %.lobit59 to i8
  store i8 %705, i8* %14, align 1
  %706 = and i32 %700, 254
  %707 = tail call i32 @llvm.ctpop.i32(i32 %706)
  %708 = trunc i32 %707 to i8
  %709 = and i8 %708, 1
  %710 = xor i8 %709, 1
  store i8 %710, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %711 = icmp eq i32 %700, 0
  %712 = zext i1 %711 to i8
  store i8 %712, i8* %30, align 1
  %713 = lshr i32 %699, 30
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  store i8 %715, i8* %33, align 1
  %716 = zext i1 %703 to i8
  store i8 %716, i8* %39, align 1
  %717 = sext i32 %700 to i64
  store i64 %717, i64* %RSI.i2074, align 8
  %718 = shl nsw i64 %717, 3
  %719 = add i64 %697, %718
  %720 = add i64 %659, 56
  store i64 %720, i64* %3, align 8
  %721 = inttoptr i64 %719 to i64*
  %722 = load i64, i64* %721, align 8
  store i64 %722, i64* %RCX.i1954, align 8
  %723 = load i64, i64* %RBP.i, align 8
  %724 = add i64 %723, -8
  %725 = add i64 %659, 60
  store i64 %725, i64* %3, align 8
  %726 = inttoptr i64 %724 to i64*
  %727 = load i64, i64* %726, align 8
  store i64 %727, i64* %RSI.i2074, align 8
  %728 = add i64 %727, 40
  %729 = add i64 %659, 64
  store i64 %729, i64* %3, align 8
  %730 = inttoptr i64 %728 to i64*
  %731 = load i64, i64* %730, align 8
  store i64 %731, i64* %RSI.i2074, align 8
  %732 = add i64 %731, 6400
  %733 = add i64 %659, 71
  store i64 %733, i64* %3, align 8
  %734 = inttoptr i64 %732 to i32*
  %735 = load i32, i32* %734, align 4
  %736 = sext i32 %735 to i64
  %737 = shl nsw i64 %736, 1
  %.lobit60 = lshr i32 %735, 31
  %738 = trunc i32 %.lobit60 to i8
  store i8 %738, i8* %14, align 1
  %739 = trunc i64 %737 to i32
  %740 = and i32 %739, 254
  %741 = tail call i32 @llvm.ctpop.i32(i32 %740)
  %742 = trunc i32 %741 to i8
  %743 = and i8 %742, 1
  %744 = xor i8 %743, 1
  store i8 %744, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %745 = icmp eq i32 %735, 0
  %746 = zext i1 %745 to i8
  store i8 %746, i8* %30, align 1
  %747 = lshr i64 %736, 62
  %748 = trunc i64 %747 to i8
  %749 = and i8 %748, 1
  store i8 %749, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %750 = load i64, i64* %RAX.i186, align 8
  store i64 %750, i64* %RDI.i126, align 8
  %751 = add i64 %723, -120
  %752 = add i64 %659, 81
  store i64 %752, i64* %3, align 8
  %753 = inttoptr i64 %751 to i64*
  store i64 %737, i64* %753, align 8
  %754 = load i64, i64* %RCX.i1954, align 8
  %755 = load i64, i64* %3, align 8
  store i64 %754, i64* %RSI.i2074, align 8
  %756 = load i64, i64* %RBP.i, align 8
  %757 = add i64 %756, -120
  %758 = add i64 %755, 7
  store i64 %758, i64* %3, align 8
  %759 = inttoptr i64 %757 to i64*
  %760 = load i64, i64* %759, align 8
  store i64 %760, i64* %RDX.i2171, align 8
  %761 = add i64 %755, -323497
  %762 = add i64 %755, 12
  %763 = load i64, i64* %6, align 8
  %764 = add i64 %763, -8
  %765 = inttoptr i64 %764 to i64*
  store i64 %762, i64* %765, align 8
  store i64 %764, i64* %6, align 8
  store i64 %761, i64* %3, align 8
  %766 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %631)
  %767 = load i64, i64* %RBP.i, align 8
  %768 = add i64 %767, -8
  %769 = load i64, i64* %3, align 8
  %770 = add i64 %769, 4
  store i64 %770, i64* %3, align 8
  %771 = inttoptr i64 %768 to i64*
  %772 = load i64, i64* %771, align 8
  store i64 %772, i64* %RAX.i186, align 8
  %773 = add i64 %772, 48
  %774 = add i64 %769, 8
  store i64 %774, i64* %3, align 8
  %775 = inttoptr i64 %773 to i64*
  %776 = load i64, i64* %775, align 8
  store i64 %776, i64* %RAX.i186, align 8
  %777 = add i64 %776, 6464
  %778 = add i64 %769, 15
  store i64 %778, i64* %3, align 8
  %779 = inttoptr i64 %777 to i64*
  %780 = load i64, i64* %779, align 8
  store i64 %780, i64* %RAX.i186, align 8
  %781 = add i64 %780, 8
  %782 = add i64 %769, 19
  store i64 %782, i64* %3, align 8
  %783 = inttoptr i64 %781 to i64*
  %784 = load i64, i64* %783, align 8
  store i64 %784, i64* %RAX.i186, align 8
  %785 = add i64 %767, -12
  %786 = add i64 %769, 23
  store i64 %786, i64* %3, align 8
  %787 = inttoptr i64 %785 to i32*
  %788 = load i32, i32* %787, align 4
  %789 = sext i32 %788 to i64
  store i64 %789, i64* %RCX.i1954, align 8
  %790 = shl nsw i64 %789, 3
  %791 = add i64 %790, %784
  %792 = add i64 %769, 27
  store i64 %792, i64* %3, align 8
  %793 = inttoptr i64 %791 to i64*
  %794 = load i64, i64* %793, align 8
  store i64 %794, i64* %RAX.i186, align 8
  %795 = add i64 %769, 31
  store i64 %795, i64* %3, align 8
  %796 = load i64, i64* %771, align 8
  store i64 %796, i64* %RCX.i1954, align 8
  %797 = add i64 %796, 40
  %798 = add i64 %769, 35
  store i64 %798, i64* %3, align 8
  %799 = inttoptr i64 %797 to i64*
  %800 = load i64, i64* %799, align 8
  store i64 %800, i64* %RCX.i1954, align 8
  %801 = add i64 %800, 6464
  %802 = add i64 %769, 42
  store i64 %802, i64* %3, align 8
  %803 = inttoptr i64 %801 to i64*
  %804 = load i64, i64* %803, align 8
  store i64 %804, i64* %RCX.i1954, align 8
  %805 = add i64 %804, 8
  %806 = add i64 %769, 46
  store i64 %806, i64* %3, align 8
  %807 = inttoptr i64 %805 to i64*
  %808 = load i64, i64* %807, align 8
  store i64 %808, i64* %RCX.i1954, align 8
  %809 = add i64 %769, 50
  store i64 %809, i64* %3, align 8
  %810 = load i32, i32* %787, align 4
  %811 = shl i32 %810, 1
  %812 = icmp slt i32 %810, 0
  %813 = icmp slt i32 %811, 0
  %814 = xor i1 %812, %813
  %815 = zext i32 %811 to i64
  store i64 %815, i64* %125, align 8
  %.lobit61 = lshr i32 %810, 31
  %816 = trunc i32 %.lobit61 to i8
  store i8 %816, i8* %14, align 1
  %817 = and i32 %811, 254
  %818 = tail call i32 @llvm.ctpop.i32(i32 %817)
  %819 = trunc i32 %818 to i8
  %820 = and i8 %819, 1
  %821 = xor i8 %820, 1
  store i8 %821, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %822 = icmp eq i32 %811, 0
  %823 = zext i1 %822 to i8
  store i8 %823, i8* %30, align 1
  %824 = lshr i32 %810, 30
  %825 = trunc i32 %824 to i8
  %826 = and i8 %825, 1
  store i8 %826, i8* %33, align 1
  %827 = zext i1 %814 to i8
  store i8 %827, i8* %39, align 1
  %828 = sext i32 %811 to i64
  store i64 %828, i64* %RDX.i2171, align 8
  %829 = shl nsw i64 %828, 3
  %830 = add i64 %808, %829
  %831 = add i64 %769, 60
  store i64 %831, i64* %3, align 8
  %832 = inttoptr i64 %830 to i64*
  %833 = load i64, i64* %832, align 8
  store i64 %833, i64* %RCX.i1954, align 8
  %834 = load i64, i64* %RBP.i, align 8
  %835 = add i64 %834, -8
  %836 = add i64 %769, 64
  store i64 %836, i64* %3, align 8
  %837 = inttoptr i64 %835 to i64*
  %838 = load i64, i64* %837, align 8
  store i64 %838, i64* %RDX.i2171, align 8
  %839 = add i64 %838, 40
  %840 = add i64 %769, 68
  store i64 %840, i64* %3, align 8
  %841 = inttoptr i64 %839 to i64*
  %842 = load i64, i64* %841, align 8
  store i64 %842, i64* %RDX.i2171, align 8
  %843 = add i64 %842, 6400
  %844 = add i64 %769, 75
  store i64 %844, i64* %3, align 8
  %845 = inttoptr i64 %843 to i32*
  %846 = load i32, i32* %845, align 4
  %847 = sext i32 %846 to i64
  %848 = shl nsw i64 %847, 1
  store i64 %848, i64* %RDX.i2171, align 8
  %.lobit62 = lshr i32 %846, 31
  %849 = trunc i32 %.lobit62 to i8
  store i8 %849, i8* %14, align 1
  %850 = trunc i64 %848 to i32
  %851 = and i32 %850, 254
  %852 = tail call i32 @llvm.ctpop.i32(i32 %851)
  %853 = trunc i32 %852 to i8
  %854 = and i8 %853, 1
  %855 = xor i8 %854, 1
  store i8 %855, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %856 = icmp eq i32 %846, 0
  %857 = zext i1 %856 to i8
  store i8 %857, i8* %30, align 1
  %858 = lshr i64 %847, 62
  %859 = trunc i64 %858 to i8
  %860 = and i8 %859, 1
  store i8 %860, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %861 = load i64, i64* %RAX.i186, align 8
  store i64 %861, i64* %RDI.i126, align 8
  store i64 %833, i64* %RSI.i2074, align 8
  %862 = add i64 %769, -323511
  %863 = add i64 %769, 89
  %864 = load i64, i64* %6, align 8
  %865 = add i64 %864, -8
  %866 = inttoptr i64 %865 to i64*
  store i64 %863, i64* %866, align 8
  store i64 %865, i64* %6, align 8
  store i64 %862, i64* %3, align 8
  %867 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %766)
  %868 = load i64, i64* %RBP.i, align 8
  %869 = add i64 %868, -12
  %870 = load i64, i64* %3, align 8
  %871 = add i64 %870, 3
  store i64 %871, i64* %3, align 8
  %872 = inttoptr i64 %869 to i32*
  %873 = load i32, i32* %872, align 4
  %874 = add i32 %873, 1
  %875 = zext i32 %874 to i64
  store i64 %875, i64* %RAX.i186, align 8
  %876 = icmp eq i32 %873, -1
  %877 = icmp eq i32 %874, 0
  %878 = or i1 %876, %877
  %879 = zext i1 %878 to i8
  store i8 %879, i8* %14, align 1
  %880 = and i32 %874, 255
  %881 = tail call i32 @llvm.ctpop.i32(i32 %880)
  %882 = trunc i32 %881 to i8
  %883 = and i8 %882, 1
  %884 = xor i8 %883, 1
  store i8 %884, i8* %21, align 1
  %885 = xor i32 %874, %873
  %886 = lshr i32 %885, 4
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  store i8 %888, i8* %27, align 1
  %889 = zext i1 %877 to i8
  store i8 %889, i8* %30, align 1
  %890 = lshr i32 %874, 31
  %891 = trunc i32 %890 to i8
  store i8 %891, i8* %33, align 1
  %892 = lshr i32 %873, 31
  %893 = xor i32 %890, %892
  %894 = add nuw nsw i32 %893, %890
  %895 = icmp eq i32 %894, 2
  %896 = zext i1 %895 to i8
  store i8 %896, i8* %39, align 1
  %897 = add i64 %870, 9
  store i64 %897, i64* %3, align 8
  store i32 %874, i32* %872, align 4
  %898 = load i64, i64* %3, align 8
  %899 = add i64 %898, -236
  store i64 %899, i64* %3, align 8
  br label %block_.L_45005d

block_.L_45014e:                                  ; preds = %routine_idivl__esi.exit5502
  %900 = add i64 %628, -12
  %901 = add i64 %659, 7
  store i64 %901, i64* %3, align 8
  %902 = inttoptr i64 %900 to i32*
  store i32 0, i32* %902, align 4
  %.pre275 = load i64, i64* %3, align 8
  br label %block_.L_450155

block_.L_450155:                                  ; preds = %block_45017e, %block_.L_45014e
  %903 = phi i64 [ %.pre275, %block_.L_45014e ], [ %1116, %block_45017e ]
  %MEMORY.2 = phi %struct.Memory* [ %631, %block_.L_45014e ], [ %1084, %block_45017e ]
  store i64 2, i64* %RAX.i186, align 8
  %904 = load i64, i64* %RBP.i, align 8
  %905 = add i64 %904, -12
  %906 = add i64 %903, 8
  store i64 %906, i64* %3, align 8
  %907 = inttoptr i64 %905 to i32*
  %908 = load i32, i32* %907, align 4
  %909 = zext i32 %908 to i64
  store i64 %909, i64* %RCX.i1954, align 8
  %910 = add i64 %904, -8
  %911 = add i64 %903, 12
  store i64 %911, i64* %3, align 8
  %912 = inttoptr i64 %910 to i64*
  %913 = load i64, i64* %912, align 8
  store i64 %913, i64* %RDX.i2171, align 8
  %914 = add i64 %913, 40
  %915 = add i64 %903, 16
  store i64 %915, i64* %3, align 8
  %916 = inttoptr i64 %914 to i64*
  %917 = load i64, i64* %916, align 8
  store i64 %917, i64* %RDX.i2171, align 8
  %918 = add i64 %917, 6396
  %919 = add i64 %903, 22
  store i64 %919, i64* %3, align 8
  %920 = inttoptr i64 %918 to i32*
  %921 = load i32, i32* %920, align 4
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RSI.i2074, align 8
  %923 = add i64 %904, -124
  %924 = add i64 %903, 25
  store i64 %924, i64* %3, align 8
  %925 = inttoptr i64 %923 to i32*
  store i32 2, i32* %925, align 4
  %926 = load i32, i32* %ESI.i5604, align 4
  %927 = zext i32 %926 to i64
  %928 = load i64, i64* %3, align 8
  store i64 %927, i64* %RAX.i186, align 8
  %929 = sext i32 %926 to i64
  %930 = lshr i64 %929, 32
  store i64 %930, i64* %121, align 8
  %931 = load i64, i64* %RBP.i, align 8
  %932 = add i64 %931, -124
  %933 = add i64 %928, 6
  store i64 %933, i64* %3, align 8
  %934 = inttoptr i64 %932 to i32*
  %935 = load i32, i32* %934, align 4
  %936 = zext i32 %935 to i64
  store i64 %936, i64* %RSI.i2074, align 8
  %937 = add i64 %928, 8
  store i64 %937, i64* %3, align 8
  %938 = sext i32 %935 to i64
  %939 = shl nuw i64 %930, 32
  %940 = or i64 %939, %927
  %941 = sdiv i64 %940, %938
  %942 = shl i64 %941, 32
  %943 = ashr exact i64 %942, 32
  %944 = icmp eq i64 %941, %943
  br i1 %944, label %947, label %945

; <label>:945:                                    ; preds = %block_.L_450155
  %946 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %937, %struct.Memory* %MEMORY.2)
  %.pre276 = load i32, i32* %EAX.i304, align 4
  %.pre277 = load i64, i64* %3, align 8
  %.pre278 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit5345

; <label>:947:                                    ; preds = %block_.L_450155
  %948 = srem i64 %940, %938
  %949 = and i64 %941, 4294967295
  store i64 %949, i64* %RAX.i186, align 8
  %950 = and i64 %948, 4294967295
  store i64 %950, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %951 = trunc i64 %941 to i32
  br label %routine_idivl__esi.exit5345

routine_idivl__esi.exit5345:                      ; preds = %947, %945
  %952 = phi i64 [ %.pre278, %945 ], [ %931, %947 ]
  %953 = phi i64 [ %.pre277, %945 ], [ %937, %947 ]
  %954 = phi i32 [ %.pre276, %945 ], [ %951, %947 ]
  %955 = phi %struct.Memory* [ %946, %945 ], [ %MEMORY.2, %947 ]
  %956 = load i32, i32* %ECX.i3337, align 4
  %957 = sub i32 %956, %954
  %958 = icmp ult i32 %956, %954
  %959 = zext i1 %958 to i8
  store i8 %959, i8* %14, align 1
  %960 = and i32 %957, 255
  %961 = tail call i32 @llvm.ctpop.i32(i32 %960)
  %962 = trunc i32 %961 to i8
  %963 = and i8 %962, 1
  %964 = xor i8 %963, 1
  store i8 %964, i8* %21, align 1
  %965 = xor i32 %954, %956
  %966 = xor i32 %965, %957
  %967 = lshr i32 %966, 4
  %968 = trunc i32 %967 to i8
  %969 = and i8 %968, 1
  store i8 %969, i8* %27, align 1
  %970 = icmp eq i32 %957, 0
  %971 = zext i1 %970 to i8
  store i8 %971, i8* %30, align 1
  %972 = lshr i32 %957, 31
  %973 = trunc i32 %972 to i8
  store i8 %973, i8* %33, align 1
  %974 = lshr i32 %956, 31
  %975 = lshr i32 %954, 31
  %976 = xor i32 %975, %974
  %977 = xor i32 %972, %974
  %978 = add nuw nsw i32 %977, %976
  %979 = icmp eq i32 %978, 2
  %980 = zext i1 %979 to i8
  store i8 %980, i8* %39, align 1
  %981 = icmp ne i8 %973, 0
  %982 = xor i1 %981, %979
  %.v554 = select i1 %982, i64 8, i64 120
  %983 = add i64 %953, %.v554
  store i64 %983, i64* %3, align 8
  br i1 %982, label %block_45017e, label %block_.L_4501ee

block_45017e:                                     ; preds = %routine_idivl__esi.exit5345
  %984 = add i64 %952, -8
  %985 = add i64 %983, 4
  store i64 %985, i64* %3, align 8
  %986 = inttoptr i64 %984 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RAX.i186, align 8
  %988 = add i64 %987, 56
  %989 = add i64 %983, 8
  store i64 %989, i64* %3, align 8
  %990 = inttoptr i64 %988 to i64*
  %991 = load i64, i64* %990, align 8
  store i64 %991, i64* %RAX.i186, align 8
  %992 = add i64 %991, 6424
  %993 = add i64 %983, 15
  store i64 %993, i64* %3, align 8
  %994 = inttoptr i64 %992 to i64*
  %995 = load i64, i64* %994, align 8
  store i64 %995, i64* %RAX.i186, align 8
  %996 = add i64 %952, -12
  %997 = add i64 %983, 19
  store i64 %997, i64* %3, align 8
  %998 = inttoptr i64 %996 to i32*
  %999 = load i32, i32* %998, align 4
  %1000 = sext i32 %999 to i64
  store i64 %1000, i64* %RCX.i1954, align 8
  %1001 = shl nsw i64 %1000, 3
  %1002 = add i64 %1001, %995
  %1003 = add i64 %983, 23
  store i64 %1003, i64* %3, align 8
  %1004 = inttoptr i64 %1002 to i64*
  %1005 = load i64, i64* %1004, align 8
  store i64 %1005, i64* %RAX.i186, align 8
  %1006 = add i64 %983, 27
  store i64 %1006, i64* %3, align 8
  %1007 = load i64, i64* %986, align 8
  store i64 %1007, i64* %RCX.i1954, align 8
  %1008 = add i64 %1007, 40
  %1009 = add i64 %983, 31
  store i64 %1009, i64* %3, align 8
  %1010 = inttoptr i64 %1008 to i64*
  %1011 = load i64, i64* %1010, align 8
  store i64 %1011, i64* %RCX.i1954, align 8
  %1012 = add i64 %1011, 6424
  %1013 = add i64 %983, 38
  store i64 %1013, i64* %3, align 8
  %1014 = inttoptr i64 %1012 to i64*
  %1015 = load i64, i64* %1014, align 8
  store i64 %1015, i64* %RCX.i1954, align 8
  %1016 = add i64 %983, 41
  store i64 %1016, i64* %3, align 8
  %1017 = load i32, i32* %998, align 4
  %1018 = shl i32 %1017, 1
  %1019 = or i32 %1018, 1
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  %1021 = and i32 %1019, 255
  %1022 = tail call i32 @llvm.ctpop.i32(i32 %1021)
  %1023 = trunc i32 %1022 to i8
  %1024 = and i8 %1023, 1
  %1025 = xor i8 %1024, 1
  store i8 %1025, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1026 = lshr i32 %1017, 30
  %1027 = and i32 %1026, 1
  %1028 = trunc i32 %1027 to i8
  store i8 %1028, i8* %33, align 1
  %1029 = lshr i32 %1017, 30
  %1030 = and i32 %1029, 1
  %1031 = xor i32 %1027, %1030
  %1032 = add nuw nsw i32 %1031, %1027
  %1033 = icmp eq i32 %1032, 2
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %39, align 1
  %1035 = sext i32 %1019 to i64
  store i64 %1035, i64* %RSI.i2074, align 8
  %1036 = shl nsw i64 %1035, 3
  %1037 = add i64 %1015, %1036
  %1038 = add i64 %983, 53
  store i64 %1038, i64* %3, align 8
  %1039 = inttoptr i64 %1037 to i64*
  %1040 = load i64, i64* %1039, align 8
  store i64 %1040, i64* %RCX.i1954, align 8
  %1041 = load i64, i64* %RBP.i, align 8
  %1042 = add i64 %1041, -8
  %1043 = add i64 %983, 57
  store i64 %1043, i64* %3, align 8
  %1044 = inttoptr i64 %1042 to i64*
  %1045 = load i64, i64* %1044, align 8
  store i64 %1045, i64* %RSI.i2074, align 8
  %1046 = add i64 %1045, 40
  %1047 = add i64 %983, 61
  store i64 %1047, i64* %3, align 8
  %1048 = inttoptr i64 %1046 to i64*
  %1049 = load i64, i64* %1048, align 8
  store i64 %1049, i64* %RSI.i2074, align 8
  %1050 = add i64 %1049, 6392
  %1051 = add i64 %983, 68
  store i64 %1051, i64* %3, align 8
  %1052 = inttoptr i64 %1050 to i32*
  %1053 = load i32, i32* %1052, align 4
  %1054 = sext i32 %1053 to i64
  %1055 = shl nsw i64 %1054, 1
  %.lobit64 = lshr i32 %1053, 31
  %1056 = trunc i32 %.lobit64 to i8
  store i8 %1056, i8* %14, align 1
  %1057 = trunc i64 %1055 to i32
  %1058 = and i32 %1057, 254
  %1059 = tail call i32 @llvm.ctpop.i32(i32 %1058)
  %1060 = trunc i32 %1059 to i8
  %1061 = and i8 %1060, 1
  %1062 = xor i8 %1061, 1
  store i8 %1062, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1063 = icmp eq i32 %1053, 0
  %1064 = zext i1 %1063 to i8
  store i8 %1064, i8* %30, align 1
  %1065 = lshr i64 %1054, 62
  %1066 = trunc i64 %1065 to i8
  %1067 = and i8 %1066, 1
  store i8 %1067, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1068 = load i64, i64* %RAX.i186, align 8
  store i64 %1068, i64* %RDI.i126, align 8
  %1069 = add i64 %1041, -136
  %1070 = add i64 %983, 81
  store i64 %1070, i64* %3, align 8
  %1071 = inttoptr i64 %1069 to i64*
  store i64 %1055, i64* %1071, align 8
  %1072 = load i64, i64* %RCX.i1954, align 8
  %1073 = load i64, i64* %3, align 8
  store i64 %1072, i64* %RSI.i2074, align 8
  %1074 = load i64, i64* %RBP.i, align 8
  %1075 = add i64 %1074, -136
  %1076 = add i64 %1073, 10
  store i64 %1076, i64* %3, align 8
  %1077 = inttoptr i64 %1075 to i64*
  %1078 = load i64, i64* %1077, align 8
  store i64 %1078, i64* %RDX.i2171, align 8
  %1079 = add i64 %1073, -323745
  %1080 = add i64 %1073, 15
  %1081 = load i64, i64* %6, align 8
  %1082 = add i64 %1081, -8
  %1083 = inttoptr i64 %1082 to i64*
  store i64 %1080, i64* %1083, align 8
  store i64 %1082, i64* %6, align 8
  store i64 %1079, i64* %3, align 8
  %1084 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %955)
  %1085 = load i64, i64* %RBP.i, align 8
  %1086 = add i64 %1085, -12
  %1087 = load i64, i64* %3, align 8
  %1088 = add i64 %1087, 3
  store i64 %1088, i64* %3, align 8
  %1089 = inttoptr i64 %1086 to i32*
  %1090 = load i32, i32* %1089, align 4
  %1091 = add i32 %1090, 1
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %RAX.i186, align 8
  %1093 = icmp eq i32 %1090, -1
  %1094 = icmp eq i32 %1091, 0
  %1095 = or i1 %1093, %1094
  %1096 = zext i1 %1095 to i8
  store i8 %1096, i8* %14, align 1
  %1097 = and i32 %1091, 255
  %1098 = tail call i32 @llvm.ctpop.i32(i32 %1097)
  %1099 = trunc i32 %1098 to i8
  %1100 = and i8 %1099, 1
  %1101 = xor i8 %1100, 1
  store i8 %1101, i8* %21, align 1
  %1102 = xor i32 %1091, %1090
  %1103 = lshr i32 %1102, 4
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  store i8 %1105, i8* %27, align 1
  %1106 = zext i1 %1094 to i8
  store i8 %1106, i8* %30, align 1
  %1107 = lshr i32 %1091, 31
  %1108 = trunc i32 %1107 to i8
  store i8 %1108, i8* %33, align 1
  %1109 = lshr i32 %1090, 31
  %1110 = xor i32 %1107, %1109
  %1111 = add nuw nsw i32 %1110, %1107
  %1112 = icmp eq i32 %1111, 2
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %39, align 1
  %1114 = add i64 %1087, 9
  store i64 %1114, i64* %3, align 8
  store i32 %1091, i32* %1089, align 4
  %1115 = load i64, i64* %3, align 8
  %1116 = add i64 %1115, -148
  store i64 %1116, i64* %3, align 8
  br label %block_.L_450155

block_.L_4501ee:                                  ; preds = %routine_idivl__esi.exit5345
  %1117 = add i64 %952, -12
  %1118 = add i64 %983, 7
  store i64 %1118, i64* %3, align 8
  %1119 = inttoptr i64 %1117 to i32*
  store i32 0, i32* %1119, align 4
  %.pre279 = load i64, i64* %3, align 8
  br label %block_.L_4501f5

block_.L_4501f5:                                  ; preds = %block_450224, %block_.L_4501ee
  %1120 = phi i64 [ %.pre279, %block_.L_4501ee ], [ %1440, %block_450224 ]
  %MEMORY.3 = phi %struct.Memory* [ %955, %block_.L_4501ee ], [ %1408, %block_450224 ]
  store i64 2, i64* %RAX.i186, align 8
  %1121 = load i64, i64* %RBP.i, align 8
  %1122 = add i64 %1121, -12
  %1123 = add i64 %1120, 8
  store i64 %1123, i64* %3, align 8
  %1124 = inttoptr i64 %1122 to i32*
  %1125 = load i32, i32* %1124, align 4
  %1126 = zext i32 %1125 to i64
  store i64 %1126, i64* %RCX.i1954, align 8
  %1127 = add i64 %1121, -8
  %1128 = add i64 %1120, 12
  store i64 %1128, i64* %3, align 8
  %1129 = inttoptr i64 %1127 to i64*
  %1130 = load i64, i64* %1129, align 8
  store i64 %1130, i64* %RDX.i2171, align 8
  %1131 = add i64 %1130, 40
  %1132 = add i64 %1120, 16
  store i64 %1132, i64* %3, align 8
  %1133 = inttoptr i64 %1131 to i64*
  %1134 = load i64, i64* %1133, align 8
  store i64 %1134, i64* %RDX.i2171, align 8
  %1135 = add i64 %1134, 6404
  %1136 = add i64 %1120, 22
  store i64 %1136, i64* %3, align 8
  %1137 = inttoptr i64 %1135 to i32*
  %1138 = load i32, i32* %1137, align 4
  %1139 = zext i32 %1138 to i64
  store i64 %1139, i64* %RSI.i2074, align 8
  %1140 = add i64 %1121, -140
  %1141 = add i64 %1120, 28
  store i64 %1141, i64* %3, align 8
  %1142 = inttoptr i64 %1140 to i32*
  store i32 2, i32* %1142, align 4
  %1143 = load i32, i32* %ESI.i5604, align 4
  %1144 = zext i32 %1143 to i64
  %1145 = load i64, i64* %3, align 8
  store i64 %1144, i64* %RAX.i186, align 8
  %1146 = sext i32 %1143 to i64
  %1147 = lshr i64 %1146, 32
  store i64 %1147, i64* %121, align 8
  %1148 = load i64, i64* %RBP.i, align 8
  %1149 = add i64 %1148, -140
  %1150 = add i64 %1145, 9
  store i64 %1150, i64* %3, align 8
  %1151 = inttoptr i64 %1149 to i32*
  %1152 = load i32, i32* %1151, align 4
  %1153 = zext i32 %1152 to i64
  store i64 %1153, i64* %RSI.i2074, align 8
  %1154 = add i64 %1145, 11
  store i64 %1154, i64* %3, align 8
  %1155 = sext i32 %1152 to i64
  %1156 = shl nuw i64 %1147, 32
  %1157 = or i64 %1156, %1144
  %1158 = sdiv i64 %1157, %1155
  %1159 = shl i64 %1158, 32
  %1160 = ashr exact i64 %1159, 32
  %1161 = icmp eq i64 %1158, %1160
  br i1 %1161, label %1164, label %1162

; <label>:1162:                                   ; preds = %block_.L_4501f5
  %1163 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1154, %struct.Memory* %MEMORY.3)
  %.pre280 = load i32, i32* %EAX.i304, align 4
  %.pre281 = load i64, i64* %3, align 8
  %.pre282 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit5245

; <label>:1164:                                   ; preds = %block_.L_4501f5
  %1165 = srem i64 %1157, %1155
  %1166 = and i64 %1158, 4294967295
  store i64 %1166, i64* %RAX.i186, align 8
  %1167 = and i64 %1165, 4294967295
  store i64 %1167, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1168 = trunc i64 %1158 to i32
  br label %routine_idivl__esi.exit5245

routine_idivl__esi.exit5245:                      ; preds = %1164, %1162
  %1169 = phi i64 [ %.pre282, %1162 ], [ %1148, %1164 ]
  %1170 = phi i64 [ %.pre281, %1162 ], [ %1154, %1164 ]
  %1171 = phi i32 [ %.pre280, %1162 ], [ %1168, %1164 ]
  %1172 = phi %struct.Memory* [ %1163, %1162 ], [ %MEMORY.3, %1164 ]
  %1173 = load i32, i32* %ECX.i3337, align 4
  %1174 = sub i32 %1173, %1171
  %1175 = icmp ult i32 %1173, %1171
  %1176 = zext i1 %1175 to i8
  store i8 %1176, i8* %14, align 1
  %1177 = and i32 %1174, 255
  %1178 = tail call i32 @llvm.ctpop.i32(i32 %1177)
  %1179 = trunc i32 %1178 to i8
  %1180 = and i8 %1179, 1
  %1181 = xor i8 %1180, 1
  store i8 %1181, i8* %21, align 1
  %1182 = xor i32 %1171, %1173
  %1183 = xor i32 %1182, %1174
  %1184 = lshr i32 %1183, 4
  %1185 = trunc i32 %1184 to i8
  %1186 = and i8 %1185, 1
  store i8 %1186, i8* %27, align 1
  %1187 = icmp eq i32 %1174, 0
  %1188 = zext i1 %1187 to i8
  store i8 %1188, i8* %30, align 1
  %1189 = lshr i32 %1174, 31
  %1190 = trunc i32 %1189 to i8
  store i8 %1190, i8* %33, align 1
  %1191 = lshr i32 %1173, 31
  %1192 = lshr i32 %1171, 31
  %1193 = xor i32 %1192, %1191
  %1194 = xor i32 %1189, %1191
  %1195 = add nuw nsw i32 %1194, %1193
  %1196 = icmp eq i32 %1195, 2
  %1197 = zext i1 %1196 to i8
  store i8 %1197, i8* %39, align 1
  %1198 = icmp ne i8 %1190, 0
  %1199 = xor i1 %1198, %1196
  %.v510 = select i1 %1199, i64 8, i64 221
  %1200 = add i64 %1170, %.v510
  %1201 = add i64 %1169, -8
  %1202 = add i64 %1200, 4
  store i64 %1202, i64* %3, align 8
  %1203 = inttoptr i64 %1201 to i64*
  %1204 = load i64, i64* %1203, align 8
  store i64 %1204, i64* %RAX.i186, align 8
  br i1 %1199, label %block_450224, label %block_.L_4502f9

block_450224:                                     ; preds = %routine_idivl__esi.exit5245
  %1205 = add i64 %1204, 56
  %1206 = add i64 %1200, 8
  store i64 %1206, i64* %3, align 8
  %1207 = inttoptr i64 %1205 to i64*
  %1208 = load i64, i64* %1207, align 8
  store i64 %1208, i64* %RAX.i186, align 8
  %1209 = add i64 %1208, 6464
  %1210 = add i64 %1200, 15
  store i64 %1210, i64* %3, align 8
  %1211 = inttoptr i64 %1209 to i64*
  %1212 = load i64, i64* %1211, align 8
  store i64 %1212, i64* %RAX.i186, align 8
  %1213 = add i64 %1200, 18
  store i64 %1213, i64* %3, align 8
  %1214 = inttoptr i64 %1212 to i64*
  %1215 = load i64, i64* %1214, align 8
  store i64 %1215, i64* %RAX.i186, align 8
  %1216 = add i64 %1169, -12
  %1217 = add i64 %1200, 22
  store i64 %1217, i64* %3, align 8
  %1218 = inttoptr i64 %1216 to i32*
  %1219 = load i32, i32* %1218, align 4
  %1220 = sext i32 %1219 to i64
  store i64 %1220, i64* %RCX.i1954, align 8
  %1221 = shl nsw i64 %1220, 3
  %1222 = add i64 %1221, %1215
  %1223 = add i64 %1200, 26
  store i64 %1223, i64* %3, align 8
  %1224 = inttoptr i64 %1222 to i64*
  %1225 = load i64, i64* %1224, align 8
  store i64 %1225, i64* %RAX.i186, align 8
  %1226 = add i64 %1200, 30
  store i64 %1226, i64* %3, align 8
  %1227 = load i64, i64* %1203, align 8
  store i64 %1227, i64* %RCX.i1954, align 8
  %1228 = add i64 %1227, 40
  %1229 = add i64 %1200, 34
  store i64 %1229, i64* %3, align 8
  %1230 = inttoptr i64 %1228 to i64*
  %1231 = load i64, i64* %1230, align 8
  store i64 %1231, i64* %RCX.i1954, align 8
  %1232 = add i64 %1231, 6464
  %1233 = add i64 %1200, 41
  store i64 %1233, i64* %3, align 8
  %1234 = inttoptr i64 %1232 to i64*
  %1235 = load i64, i64* %1234, align 8
  store i64 %1235, i64* %RCX.i1954, align 8
  %1236 = add i64 %1200, 44
  store i64 %1236, i64* %3, align 8
  %1237 = inttoptr i64 %1235 to i64*
  %1238 = load i64, i64* %1237, align 8
  store i64 %1238, i64* %RCX.i1954, align 8
  %1239 = add i64 %1200, 47
  store i64 %1239, i64* %3, align 8
  %1240 = load i32, i32* %1218, align 4
  %1241 = shl i32 %1240, 1
  %1242 = or i32 %1241, 1
  %1243 = zext i32 %1242 to i64
  store i64 %1243, i64* %RDX.i2171, align 8
  store i8 0, i8* %14, align 1
  %1244 = and i32 %1242, 255
  %1245 = tail call i32 @llvm.ctpop.i32(i32 %1244)
  %1246 = trunc i32 %1245 to i8
  %1247 = and i8 %1246, 1
  %1248 = xor i8 %1247, 1
  store i8 %1248, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1249 = lshr i32 %1240, 30
  %1250 = and i32 %1249, 1
  %1251 = trunc i32 %1250 to i8
  store i8 %1251, i8* %33, align 1
  %1252 = lshr i32 %1240, 30
  %1253 = and i32 %1252, 1
  %1254 = xor i32 %1250, %1253
  %1255 = add nuw nsw i32 %1254, %1250
  %1256 = icmp eq i32 %1255, 2
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %39, align 1
  %1258 = sext i32 %1242 to i64
  store i64 %1258, i64* %RSI.i2074, align 8
  %1259 = shl nsw i64 %1258, 3
  %1260 = add i64 %1238, %1259
  %1261 = add i64 %1200, 59
  store i64 %1261, i64* %3, align 8
  %1262 = inttoptr i64 %1260 to i64*
  %1263 = load i64, i64* %1262, align 8
  store i64 %1263, i64* %RCX.i1954, align 8
  %1264 = load i64, i64* %RBP.i, align 8
  %1265 = add i64 %1264, -8
  %1266 = add i64 %1200, 63
  store i64 %1266, i64* %3, align 8
  %1267 = inttoptr i64 %1265 to i64*
  %1268 = load i64, i64* %1267, align 8
  store i64 %1268, i64* %RSI.i2074, align 8
  %1269 = add i64 %1268, 40
  %1270 = add i64 %1200, 67
  store i64 %1270, i64* %3, align 8
  %1271 = inttoptr i64 %1269 to i64*
  %1272 = load i64, i64* %1271, align 8
  store i64 %1272, i64* %RSI.i2074, align 8
  %1273 = add i64 %1272, 6400
  %1274 = add i64 %1200, 74
  store i64 %1274, i64* %3, align 8
  %1275 = inttoptr i64 %1273 to i32*
  %1276 = load i32, i32* %1275, align 4
  %1277 = sext i32 %1276 to i64
  %1278 = shl nsw i64 %1277, 1
  %.lobit66 = lshr i32 %1276, 31
  %1279 = trunc i32 %.lobit66 to i8
  store i8 %1279, i8* %14, align 1
  %1280 = trunc i64 %1278 to i32
  %1281 = and i32 %1280, 254
  %1282 = tail call i32 @llvm.ctpop.i32(i32 %1281)
  %1283 = trunc i32 %1282 to i8
  %1284 = and i8 %1283, 1
  %1285 = xor i8 %1284, 1
  store i8 %1285, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1286 = icmp eq i32 %1276, 0
  %1287 = zext i1 %1286 to i8
  store i8 %1287, i8* %30, align 1
  %1288 = lshr i64 %1277, 62
  %1289 = trunc i64 %1288 to i8
  %1290 = and i8 %1289, 1
  store i8 %1290, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1291 = load i64, i64* %RAX.i186, align 8
  store i64 %1291, i64* %RDI.i126, align 8
  %1292 = add i64 %1264, -152
  %1293 = add i64 %1200, 87
  store i64 %1293, i64* %3, align 8
  %1294 = inttoptr i64 %1292 to i64*
  store i64 %1278, i64* %1294, align 8
  %1295 = load i64, i64* %RCX.i1954, align 8
  %1296 = load i64, i64* %3, align 8
  store i64 %1295, i64* %RSI.i2074, align 8
  %1297 = load i64, i64* %RBP.i, align 8
  %1298 = add i64 %1297, -152
  %1299 = add i64 %1296, 10
  store i64 %1299, i64* %3, align 8
  %1300 = inttoptr i64 %1298 to i64*
  %1301 = load i64, i64* %1300, align 8
  store i64 %1301, i64* %RDX.i2171, align 8
  %1302 = add i64 %1296, -323917
  %1303 = add i64 %1296, 15
  %1304 = load i64, i64* %6, align 8
  %1305 = add i64 %1304, -8
  %1306 = inttoptr i64 %1305 to i64*
  store i64 %1303, i64* %1306, align 8
  store i64 %1305, i64* %6, align 8
  store i64 %1302, i64* %3, align 8
  %1307 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %1172)
  %1308 = load i64, i64* %RBP.i, align 8
  %1309 = add i64 %1308, -8
  %1310 = load i64, i64* %3, align 8
  %1311 = add i64 %1310, 4
  store i64 %1311, i64* %3, align 8
  %1312 = inttoptr i64 %1309 to i64*
  %1313 = load i64, i64* %1312, align 8
  store i64 %1313, i64* %RAX.i186, align 8
  %1314 = add i64 %1313, 56
  %1315 = add i64 %1310, 8
  store i64 %1315, i64* %3, align 8
  %1316 = inttoptr i64 %1314 to i64*
  %1317 = load i64, i64* %1316, align 8
  store i64 %1317, i64* %RAX.i186, align 8
  %1318 = add i64 %1317, 6464
  %1319 = add i64 %1310, 15
  store i64 %1319, i64* %3, align 8
  %1320 = inttoptr i64 %1318 to i64*
  %1321 = load i64, i64* %1320, align 8
  store i64 %1321, i64* %RAX.i186, align 8
  %1322 = add i64 %1321, 8
  %1323 = add i64 %1310, 19
  store i64 %1323, i64* %3, align 8
  %1324 = inttoptr i64 %1322 to i64*
  %1325 = load i64, i64* %1324, align 8
  store i64 %1325, i64* %RAX.i186, align 8
  %1326 = add i64 %1308, -12
  %1327 = add i64 %1310, 23
  store i64 %1327, i64* %3, align 8
  %1328 = inttoptr i64 %1326 to i32*
  %1329 = load i32, i32* %1328, align 4
  %1330 = sext i32 %1329 to i64
  store i64 %1330, i64* %RCX.i1954, align 8
  %1331 = shl nsw i64 %1330, 3
  %1332 = add i64 %1331, %1325
  %1333 = add i64 %1310, 27
  store i64 %1333, i64* %3, align 8
  %1334 = inttoptr i64 %1332 to i64*
  %1335 = load i64, i64* %1334, align 8
  store i64 %1335, i64* %RAX.i186, align 8
  %1336 = add i64 %1310, 31
  store i64 %1336, i64* %3, align 8
  %1337 = load i64, i64* %1312, align 8
  store i64 %1337, i64* %RCX.i1954, align 8
  %1338 = add i64 %1337, 40
  %1339 = add i64 %1310, 35
  store i64 %1339, i64* %3, align 8
  %1340 = inttoptr i64 %1338 to i64*
  %1341 = load i64, i64* %1340, align 8
  store i64 %1341, i64* %RCX.i1954, align 8
  %1342 = add i64 %1341, 6464
  %1343 = add i64 %1310, 42
  store i64 %1343, i64* %3, align 8
  %1344 = inttoptr i64 %1342 to i64*
  %1345 = load i64, i64* %1344, align 8
  store i64 %1345, i64* %RCX.i1954, align 8
  %1346 = add i64 %1345, 8
  %1347 = add i64 %1310, 46
  store i64 %1347, i64* %3, align 8
  %1348 = inttoptr i64 %1346 to i64*
  %1349 = load i64, i64* %1348, align 8
  store i64 %1349, i64* %RCX.i1954, align 8
  %1350 = add i64 %1310, 50
  store i64 %1350, i64* %3, align 8
  %1351 = load i32, i32* %1328, align 4
  %1352 = shl i32 %1351, 1
  %1353 = or i32 %1352, 1
  %1354 = zext i32 %1353 to i64
  store i64 %1354, i64* %125, align 8
  store i8 0, i8* %14, align 1
  %1355 = and i32 %1353, 255
  %1356 = tail call i32 @llvm.ctpop.i32(i32 %1355)
  %1357 = trunc i32 %1356 to i8
  %1358 = and i8 %1357, 1
  %1359 = xor i8 %1358, 1
  store i8 %1359, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %1360 = lshr i32 %1351, 30
  %1361 = and i32 %1360, 1
  %1362 = trunc i32 %1361 to i8
  store i8 %1362, i8* %33, align 1
  %1363 = lshr i32 %1351, 30
  %1364 = and i32 %1363, 1
  %1365 = xor i32 %1361, %1364
  %1366 = add nuw nsw i32 %1365, %1361
  %1367 = icmp eq i32 %1366, 2
  %1368 = zext i1 %1367 to i8
  store i8 %1368, i8* %39, align 1
  %1369 = sext i32 %1353 to i64
  store i64 %1369, i64* %RDX.i2171, align 8
  %1370 = shl nsw i64 %1369, 3
  %1371 = add i64 %1349, %1370
  %1372 = add i64 %1310, 64
  store i64 %1372, i64* %3, align 8
  %1373 = inttoptr i64 %1371 to i64*
  %1374 = load i64, i64* %1373, align 8
  store i64 %1374, i64* %RCX.i1954, align 8
  %1375 = load i64, i64* %RBP.i, align 8
  %1376 = add i64 %1375, -8
  %1377 = add i64 %1310, 68
  store i64 %1377, i64* %3, align 8
  %1378 = inttoptr i64 %1376 to i64*
  %1379 = load i64, i64* %1378, align 8
  store i64 %1379, i64* %RDX.i2171, align 8
  %1380 = add i64 %1379, 40
  %1381 = add i64 %1310, 72
  store i64 %1381, i64* %3, align 8
  %1382 = inttoptr i64 %1380 to i64*
  %1383 = load i64, i64* %1382, align 8
  store i64 %1383, i64* %RDX.i2171, align 8
  %1384 = add i64 %1383, 6400
  %1385 = add i64 %1310, 79
  store i64 %1385, i64* %3, align 8
  %1386 = inttoptr i64 %1384 to i32*
  %1387 = load i32, i32* %1386, align 4
  %1388 = sext i32 %1387 to i64
  %1389 = shl nsw i64 %1388, 1
  store i64 %1389, i64* %RDX.i2171, align 8
  %.lobit68 = lshr i32 %1387, 31
  %1390 = trunc i32 %.lobit68 to i8
  store i8 %1390, i8* %14, align 1
  %1391 = trunc i64 %1389 to i32
  %1392 = and i32 %1391, 254
  %1393 = tail call i32 @llvm.ctpop.i32(i32 %1392)
  %1394 = trunc i32 %1393 to i8
  %1395 = and i8 %1394, 1
  %1396 = xor i8 %1395, 1
  store i8 %1396, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1397 = icmp eq i32 %1387, 0
  %1398 = zext i1 %1397 to i8
  store i8 %1398, i8* %30, align 1
  %1399 = lshr i64 %1388, 62
  %1400 = trunc i64 %1399 to i8
  %1401 = and i8 %1400, 1
  store i8 %1401, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %1402 = load i64, i64* %RAX.i186, align 8
  store i64 %1402, i64* %RDI.i126, align 8
  store i64 %1374, i64* %RSI.i2074, align 8
  %1403 = add i64 %1310, -323934
  %1404 = add i64 %1310, 93
  %1405 = load i64, i64* %6, align 8
  %1406 = add i64 %1405, -8
  %1407 = inttoptr i64 %1406 to i64*
  store i64 %1404, i64* %1407, align 8
  store i64 %1406, i64* %6, align 8
  store i64 %1403, i64* %3, align 8
  %1408 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %1307)
  %1409 = load i64, i64* %RBP.i, align 8
  %1410 = add i64 %1409, -12
  %1411 = load i64, i64* %3, align 8
  %1412 = add i64 %1411, 3
  store i64 %1412, i64* %3, align 8
  %1413 = inttoptr i64 %1410 to i32*
  %1414 = load i32, i32* %1413, align 4
  %1415 = add i32 %1414, 1
  %1416 = zext i32 %1415 to i64
  store i64 %1416, i64* %RAX.i186, align 8
  %1417 = icmp eq i32 %1414, -1
  %1418 = icmp eq i32 %1415, 0
  %1419 = or i1 %1417, %1418
  %1420 = zext i1 %1419 to i8
  store i8 %1420, i8* %14, align 1
  %1421 = and i32 %1415, 255
  %1422 = tail call i32 @llvm.ctpop.i32(i32 %1421)
  %1423 = trunc i32 %1422 to i8
  %1424 = and i8 %1423, 1
  %1425 = xor i8 %1424, 1
  store i8 %1425, i8* %21, align 1
  %1426 = xor i32 %1415, %1414
  %1427 = lshr i32 %1426, 4
  %1428 = trunc i32 %1427 to i8
  %1429 = and i8 %1428, 1
  store i8 %1429, i8* %27, align 1
  %1430 = zext i1 %1418 to i8
  store i8 %1430, i8* %30, align 1
  %1431 = lshr i32 %1415, 31
  %1432 = trunc i32 %1431 to i8
  store i8 %1432, i8* %33, align 1
  %1433 = lshr i32 %1414, 31
  %1434 = xor i32 %1431, %1433
  %1435 = add nuw nsw i32 %1434, %1431
  %1436 = icmp eq i32 %1435, 2
  %1437 = zext i1 %1436 to i8
  store i8 %1437, i8* %39, align 1
  %1438 = add i64 %1411, 9
  store i64 %1438, i64* %3, align 8
  store i32 %1415, i32* %1413, align 4
  %1439 = load i64, i64* %3, align 8
  %1440 = add i64 %1439, -255
  store i64 %1440, i64* %3, align 8
  br label %block_.L_4501f5

block_.L_4502f9:                                  ; preds = %routine_idivl__esi.exit5245
  %1441 = add i64 %1204, 48
  %1442 = add i64 %1200, 8
  store i64 %1442, i64* %3, align 8
  %1443 = inttoptr i64 %1441 to i64*
  %1444 = load i64, i64* %1443, align 8
  store i64 %1444, i64* %RDI.i126, align 8
  %1445 = add i64 %1200, -140713
  %1446 = add i64 %1200, 13
  %1447 = load i64, i64* %6, align 8
  %1448 = add i64 %1447, -8
  %1449 = inttoptr i64 %1448 to i64*
  store i64 %1446, i64* %1449, align 8
  store i64 %1448, i64* %6, align 8
  store i64 %1445, i64* %3, align 8
  %call2_450301 = tail call %struct.Memory* @sub_42dd50.UnifiedOneForthPix(%struct.State* nonnull %0, i64 %1445, %struct.Memory* %1172)
  %1450 = load i64, i64* %RBP.i, align 8
  %1451 = add i64 %1450, -8
  %1452 = load i64, i64* %3, align 8
  %1453 = add i64 %1452, 4
  store i64 %1453, i64* %3, align 8
  %1454 = inttoptr i64 %1451 to i64*
  %1455 = load i64, i64* %1454, align 8
  store i64 %1455, i64* %RAX.i186, align 8
  %1456 = add i64 %1455, 56
  %1457 = add i64 %1452, 8
  store i64 %1457, i64* %3, align 8
  %1458 = inttoptr i64 %1456 to i64*
  %1459 = load i64, i64* %1458, align 8
  store i64 %1459, i64* %RDI.i126, align 8
  %1460 = add i64 %1452, -140726
  %1461 = add i64 %1452, 13
  %1462 = load i64, i64* %6, align 8
  %1463 = add i64 %1462, -8
  %1464 = inttoptr i64 %1463 to i64*
  store i64 %1461, i64* %1464, align 8
  store i64 %1463, i64* %6, align 8
  store i64 %1460, i64* %3, align 8
  %call2_45030e = tail call %struct.Memory* @sub_42dd50.UnifiedOneForthPix(%struct.State* nonnull %0, i64 %1460, %struct.Memory* %call2_450301)
  %1465 = load i64, i64* %RBP.i, align 8
  %1466 = add i64 %1465, -8
  %1467 = load i64, i64* %3, align 8
  %1468 = add i64 %1467, 4
  store i64 %1468, i64* %3, align 8
  %1469 = inttoptr i64 %1466 to i64*
  %1470 = load i64, i64* %1469, align 8
  store i64 %1470, i64* %RAX.i186, align 8
  %1471 = add i64 %1470, 40
  %1472 = add i64 %1467, 8
  store i64 %1472, i64* %3, align 8
  %1473 = inttoptr i64 %1471 to i64*
  %1474 = load i64, i64* %1473, align 8
  store i64 %1474, i64* %RAX.i186, align 8
  %1475 = add i64 %1474, 8
  %1476 = add i64 %1467, 11
  store i64 %1476, i64* %3, align 8
  %1477 = inttoptr i64 %1475 to i32*
  %1478 = load i32, i32* %1477, align 4
  %1479 = zext i32 %1478 to i64
  store i64 %1479, i64* %RCX.i1954, align 8
  %1480 = add i64 %1467, 15
  store i64 %1480, i64* %3, align 8
  %1481 = load i64, i64* %1469, align 8
  store i64 %1481, i64* %RAX.i186, align 8
  %1482 = add i64 %1481, 48
  %1483 = add i64 %1467, 19
  store i64 %1483, i64* %3, align 8
  %1484 = inttoptr i64 %1482 to i64*
  %1485 = load i64, i64* %1484, align 8
  store i64 %1485, i64* %RAX.i186, align 8
  %1486 = add i64 %1485, 4
  %1487 = add i64 %1467, 22
  store i64 %1487, i64* %3, align 8
  %1488 = inttoptr i64 %1486 to i32*
  store i32 %1478, i32* %1488, align 4
  %1489 = load i64, i64* %RBP.i, align 8
  %1490 = add i64 %1489, -8
  %1491 = load i64, i64* %3, align 8
  %1492 = add i64 %1491, 4
  store i64 %1492, i64* %3, align 8
  %1493 = inttoptr i64 %1490 to i64*
  %1494 = load i64, i64* %1493, align 8
  store i64 %1494, i64* %RAX.i186, align 8
  %1495 = add i64 %1494, 40
  %1496 = add i64 %1491, 8
  store i64 %1496, i64* %3, align 8
  %1497 = inttoptr i64 %1495 to i64*
  %1498 = load i64, i64* %1497, align 8
  store i64 %1498, i64* %RAX.i186, align 8
  %1499 = add i64 %1498, 12
  %1500 = add i64 %1491, 11
  store i64 %1500, i64* %3, align 8
  %1501 = inttoptr i64 %1499 to i32*
  %1502 = load i32, i32* %1501, align 4
  %1503 = zext i32 %1502 to i64
  store i64 %1503, i64* %RCX.i1954, align 8
  %1504 = add i64 %1491, 15
  store i64 %1504, i64* %3, align 8
  %1505 = load i64, i64* %1493, align 8
  store i64 %1505, i64* %RAX.i186, align 8
  %1506 = add i64 %1505, 56
  %1507 = add i64 %1491, 19
  store i64 %1507, i64* %3, align 8
  %1508 = inttoptr i64 %1506 to i64*
  %1509 = load i64, i64* %1508, align 8
  store i64 %1509, i64* %RAX.i186, align 8
  %1510 = add i64 %1509, 4
  %1511 = add i64 %1491, 22
  store i64 %1511, i64* %3, align 8
  %1512 = inttoptr i64 %1510 to i32*
  store i32 %1502, i32* %1512, align 4
  %1513 = load i64, i64* %RBP.i, align 8
  %1514 = add i64 %1513, -8
  %1515 = load i64, i64* %3, align 8
  %1516 = add i64 %1515, 4
  store i64 %1516, i64* %3, align 8
  %1517 = inttoptr i64 %1514 to i64*
  %1518 = load i64, i64* %1517, align 8
  store i64 %1518, i64* %RAX.i186, align 8
  %1519 = add i64 %1518, 40
  %1520 = add i64 %1515, 8
  store i64 %1520, i64* %3, align 8
  %1521 = inttoptr i64 %1519 to i64*
  %1522 = load i64, i64* %1521, align 8
  store i64 %1522, i64* %RAX.i186, align 8
  %1523 = add i64 %1522, 16
  %1524 = add i64 %1515, 11
  store i64 %1524, i64* %3, align 8
  %1525 = inttoptr i64 %1523 to i32*
  %1526 = load i32, i32* %1525, align 4
  %1527 = zext i32 %1526 to i64
  store i64 %1527, i64* %RCX.i1954, align 8
  %1528 = add i64 %1515, 15
  store i64 %1528, i64* %3, align 8
  %1529 = load i64, i64* %1517, align 8
  store i64 %1529, i64* %RAX.i186, align 8
  %1530 = add i64 %1529, 48
  %1531 = add i64 %1515, 19
  store i64 %1531, i64* %3, align 8
  %1532 = inttoptr i64 %1530 to i64*
  %1533 = load i64, i64* %1532, align 8
  store i64 %1533, i64* %RAX.i186, align 8
  %1534 = add i64 %1533, 16
  %1535 = add i64 %1515, 22
  store i64 %1535, i64* %3, align 8
  %1536 = inttoptr i64 %1534 to i32*
  store i32 %1526, i32* %1536, align 4
  %1537 = load i64, i64* %RBP.i, align 8
  %1538 = add i64 %1537, -8
  %1539 = load i64, i64* %3, align 8
  %1540 = add i64 %1539, 4
  store i64 %1540, i64* %3, align 8
  %1541 = inttoptr i64 %1538 to i64*
  %1542 = load i64, i64* %1541, align 8
  store i64 %1542, i64* %RAX.i186, align 8
  %1543 = add i64 %1542, 40
  %1544 = add i64 %1539, 8
  store i64 %1544, i64* %3, align 8
  %1545 = inttoptr i64 %1543 to i64*
  %1546 = load i64, i64* %1545, align 8
  store i64 %1546, i64* %RAX.i186, align 8
  %1547 = add i64 %1546, 12
  %1548 = add i64 %1539, 11
  store i64 %1548, i64* %3, align 8
  %1549 = inttoptr i64 %1547 to i32*
  %1550 = load i32, i32* %1549, align 4
  %1551 = zext i32 %1550 to i64
  store i64 %1551, i64* %RCX.i1954, align 8
  %1552 = add i64 %1539, 15
  store i64 %1552, i64* %3, align 8
  %1553 = load i64, i64* %1541, align 8
  store i64 %1553, i64* %RAX.i186, align 8
  %1554 = add i64 %1553, 56
  %1555 = add i64 %1539, 19
  store i64 %1555, i64* %3, align 8
  %1556 = inttoptr i64 %1554 to i64*
  %1557 = load i64, i64* %1556, align 8
  store i64 %1557, i64* %RAX.i186, align 8
  %1558 = add i64 %1557, 12
  %1559 = add i64 %1539, 22
  store i64 %1559, i64* %3, align 8
  %1560 = inttoptr i64 %1558 to i32*
  store i32 %1550, i32* %1560, align 4
  %1561 = load i64, i64* %RBP.i, align 8
  %1562 = add i64 %1561, -8
  %1563 = load i64, i64* %3, align 8
  %1564 = add i64 %1563, 4
  store i64 %1564, i64* %3, align 8
  %1565 = inttoptr i64 %1562 to i64*
  %1566 = load i64, i64* %1565, align 8
  store i64 %1566, i64* %RAX.i186, align 8
  %1567 = add i64 %1566, 48
  %1568 = add i64 %1563, 8
  store i64 %1568, i64* %3, align 8
  %1569 = inttoptr i64 %1567 to i64*
  %1570 = load i64, i64* %1569, align 8
  store i64 %1570, i64* %RAX.i186, align 8
  %1571 = add i64 %1570, 12
  %1572 = load i32, i32* %ECX.i3337, align 4
  %1573 = add i64 %1563, 11
  store i64 %1573, i64* %3, align 8
  %1574 = inttoptr i64 %1571 to i32*
  store i32 %1572, i32* %1574, align 4
  %1575 = load i64, i64* %RBP.i, align 8
  %1576 = add i64 %1575, -8
  %1577 = load i64, i64* %3, align 8
  %1578 = add i64 %1577, 4
  store i64 %1578, i64* %3, align 8
  %1579 = inttoptr i64 %1576 to i64*
  %1580 = load i64, i64* %1579, align 8
  store i64 %1580, i64* %RAX.i186, align 8
  %1581 = add i64 %1580, 40
  %1582 = add i64 %1577, 8
  store i64 %1582, i64* %3, align 8
  %1583 = inttoptr i64 %1581 to i64*
  %1584 = load i64, i64* %1583, align 8
  store i64 %1584, i64* %RAX.i186, align 8
  %1585 = add i64 %1584, 8
  %1586 = add i64 %1577, 11
  store i64 %1586, i64* %3, align 8
  %1587 = inttoptr i64 %1585 to i32*
  %1588 = load i32, i32* %1587, align 4
  %1589 = zext i32 %1588 to i64
  store i64 %1589, i64* %RCX.i1954, align 8
  %1590 = add i64 %1577, 15
  store i64 %1590, i64* %3, align 8
  %1591 = load i64, i64* %1579, align 8
  store i64 %1591, i64* %RAX.i186, align 8
  %1592 = add i64 %1591, 56
  %1593 = add i64 %1577, 19
  store i64 %1593, i64* %3, align 8
  %1594 = inttoptr i64 %1592 to i64*
  %1595 = load i64, i64* %1594, align 8
  store i64 %1595, i64* %RAX.i186, align 8
  %1596 = add i64 %1595, 8
  %1597 = add i64 %1577, 22
  store i64 %1597, i64* %3, align 8
  %1598 = inttoptr i64 %1596 to i32*
  store i32 %1588, i32* %1598, align 4
  %1599 = load i64, i64* %RBP.i, align 8
  %1600 = add i64 %1599, -8
  %1601 = load i64, i64* %3, align 8
  %1602 = add i64 %1601, 4
  store i64 %1602, i64* %3, align 8
  %1603 = inttoptr i64 %1600 to i64*
  %1604 = load i64, i64* %1603, align 8
  store i64 %1604, i64* %RAX.i186, align 8
  %1605 = add i64 %1604, 48
  %1606 = add i64 %1601, 8
  store i64 %1606, i64* %3, align 8
  %1607 = inttoptr i64 %1605 to i64*
  %1608 = load i64, i64* %1607, align 8
  store i64 %1608, i64* %RAX.i186, align 8
  %1609 = add i64 %1608, 8
  %1610 = load i32, i32* %ECX.i3337, align 4
  %1611 = add i64 %1601, 11
  store i64 %1611, i64* %3, align 8
  %1612 = inttoptr i64 %1609 to i32*
  store i32 %1610, i32* %1612, align 4
  %1613 = load i64, i64* %RBP.i, align 8
  %1614 = add i64 %1613, -8
  %1615 = load i64, i64* %3, align 8
  %1616 = add i64 %1615, 4
  store i64 %1616, i64* %3, align 8
  %1617 = inttoptr i64 %1614 to i64*
  %1618 = load i64, i64* %1617, align 8
  store i64 %1618, i64* %RAX.i186, align 8
  %1619 = add i64 %1618, 40
  %1620 = add i64 %1615, 8
  store i64 %1620, i64* %3, align 8
  %1621 = inttoptr i64 %1619 to i64*
  %1622 = load i64, i64* %1621, align 8
  store i64 %1622, i64* %RAX.i186, align 8
  %1623 = add i64 %1622, 16
  %1624 = add i64 %1615, 11
  store i64 %1624, i64* %3, align 8
  %1625 = inttoptr i64 %1623 to i32*
  %1626 = load i32, i32* %1625, align 4
  %1627 = zext i32 %1626 to i64
  store i64 %1627, i64* %RCX.i1954, align 8
  %1628 = add i64 %1615, 15
  store i64 %1628, i64* %3, align 8
  %1629 = load i64, i64* %1617, align 8
  store i64 %1629, i64* %RAX.i186, align 8
  %1630 = add i64 %1629, 56
  %1631 = add i64 %1615, 19
  store i64 %1631, i64* %3, align 8
  %1632 = inttoptr i64 %1630 to i64*
  %1633 = load i64, i64* %1632, align 8
  store i64 %1633, i64* %RAX.i186, align 8
  %1634 = add i64 %1633, 16
  %1635 = add i64 %1615, 22
  store i64 %1635, i64* %3, align 8
  %1636 = inttoptr i64 %1634 to i32*
  store i32 %1626, i32* %1636, align 4
  %1637 = load i64, i64* %RBP.i, align 8
  %1638 = add i64 %1637, -8
  %1639 = load i64, i64* %3, align 8
  %1640 = add i64 %1639, 4
  store i64 %1640, i64* %3, align 8
  %1641 = inttoptr i64 %1638 to i64*
  %1642 = load i64, i64* %1641, align 8
  store i64 %1642, i64* %RAX.i186, align 8
  %1643 = add i64 %1642, 40
  %1644 = add i64 %1639, 8
  store i64 %1644, i64* %3, align 8
  %1645 = inttoptr i64 %1643 to i64*
  %1646 = load i64, i64* %1645, align 8
  store i64 %1646, i64* %RAX.i186, align 8
  %1647 = add i64 %1646, 6380
  %1648 = add i64 %1639, 14
  store i64 %1648, i64* %3, align 8
  %1649 = inttoptr i64 %1647 to i32*
  %1650 = load i32, i32* %1649, align 4
  %1651 = zext i32 %1650 to i64
  store i64 %1651, i64* %RCX.i1954, align 8
  %1652 = add i64 %1639, 18
  store i64 %1652, i64* %3, align 8
  %1653 = load i64, i64* %1641, align 8
  store i64 %1653, i64* %RAX.i186, align 8
  %1654 = add i64 %1653, 56
  %1655 = add i64 %1639, 22
  store i64 %1655, i64* %3, align 8
  %1656 = inttoptr i64 %1654 to i64*
  %1657 = load i64, i64* %1656, align 8
  store i64 %1657, i64* %RAX.i186, align 8
  %1658 = add i64 %1657, 6380
  %1659 = add i64 %1639, 28
  store i64 %1659, i64* %3, align 8
  %1660 = inttoptr i64 %1658 to i32*
  store i32 %1650, i32* %1660, align 4
  %1661 = load i64, i64* %RBP.i, align 8
  %1662 = add i64 %1661, -8
  %1663 = load i64, i64* %3, align 8
  %1664 = add i64 %1663, 4
  store i64 %1664, i64* %3, align 8
  %1665 = inttoptr i64 %1662 to i64*
  %1666 = load i64, i64* %1665, align 8
  store i64 %1666, i64* %RAX.i186, align 8
  %1667 = add i64 %1666, 48
  %1668 = add i64 %1663, 8
  store i64 %1668, i64* %3, align 8
  %1669 = inttoptr i64 %1667 to i64*
  %1670 = load i64, i64* %1669, align 8
  store i64 %1670, i64* %RAX.i186, align 8
  %1671 = add i64 %1670, 6380
  %1672 = load i32, i32* %ECX.i3337, align 4
  %1673 = add i64 %1663, 14
  store i64 %1673, i64* %3, align 8
  %1674 = inttoptr i64 %1671 to i32*
  store i32 %1672, i32* %1674, align 4
  %1675 = load i64, i64* %RBP.i, align 8
  %1676 = add i64 %1675, -8
  %1677 = load i64, i64* %3, align 8
  %1678 = add i64 %1677, 4
  store i64 %1678, i64* %3, align 8
  %1679 = inttoptr i64 %1676 to i64*
  %1680 = load i64, i64* %1679, align 8
  store i64 %1680, i64* %RAX.i186, align 8
  %1681 = add i64 %1680, 40
  %1682 = add i64 %1677, 8
  store i64 %1682, i64* %3, align 8
  %1683 = inttoptr i64 %1681 to i64*
  %1684 = load i64, i64* %1683, align 8
  store i64 %1684, i64* %RAX.i186, align 8
  %1685 = add i64 %1684, 6376
  %1686 = add i64 %1677, 14
  store i64 %1686, i64* %3, align 8
  %1687 = inttoptr i64 %1685 to i32*
  %1688 = load i32, i32* %1687, align 4
  %1689 = zext i32 %1688 to i64
  store i64 %1689, i64* %RCX.i1954, align 8
  %1690 = add i64 %1677, 18
  store i64 %1690, i64* %3, align 8
  %1691 = load i64, i64* %1679, align 8
  store i64 %1691, i64* %RAX.i186, align 8
  %1692 = add i64 %1691, 56
  %1693 = add i64 %1677, 22
  store i64 %1693, i64* %3, align 8
  %1694 = inttoptr i64 %1692 to i64*
  %1695 = load i64, i64* %1694, align 8
  store i64 %1695, i64* %RAX.i186, align 8
  %1696 = add i64 %1695, 6376
  %1697 = add i64 %1677, 28
  store i64 %1697, i64* %3, align 8
  %1698 = inttoptr i64 %1696 to i32*
  store i32 %1688, i32* %1698, align 4
  %1699 = load i64, i64* %RBP.i, align 8
  %1700 = add i64 %1699, -8
  %1701 = load i64, i64* %3, align 8
  %1702 = add i64 %1701, 4
  store i64 %1702, i64* %3, align 8
  %1703 = inttoptr i64 %1700 to i64*
  %1704 = load i64, i64* %1703, align 8
  store i64 %1704, i64* %RAX.i186, align 8
  %1705 = add i64 %1704, 48
  %1706 = add i64 %1701, 8
  store i64 %1706, i64* %3, align 8
  %1707 = inttoptr i64 %1705 to i64*
  %1708 = load i64, i64* %1707, align 8
  store i64 %1708, i64* %RAX.i186, align 8
  %1709 = add i64 %1708, 6376
  %1710 = load i32, i32* %ECX.i3337, align 4
  %1711 = add i64 %1701, 14
  store i64 %1711, i64* %3, align 8
  %1712 = inttoptr i64 %1709 to i32*
  store i32 %1710, i32* %1712, align 4
  %1713 = load i64, i64* %RBP.i, align 8
  %1714 = add i64 %1713, -8
  %1715 = load i64, i64* %3, align 8
  %1716 = add i64 %1715, 4
  store i64 %1716, i64* %3, align 8
  %1717 = inttoptr i64 %1714 to i64*
  %1718 = load i64, i64* %1717, align 8
  store i64 %1718, i64* %RAX.i186, align 8
  %1719 = add i64 %1718, 40
  %1720 = add i64 %1715, 8
  store i64 %1720, i64* %3, align 8
  %1721 = inttoptr i64 %1719 to i64*
  %1722 = load i64, i64* %1721, align 8
  store i64 %1722, i64* %RAX.i186, align 8
  %1723 = add i64 %1722, 6372
  %1724 = add i64 %1715, 14
  store i64 %1724, i64* %3, align 8
  %1725 = inttoptr i64 %1723 to i32*
  %1726 = load i32, i32* %1725, align 4
  %1727 = zext i32 %1726 to i64
  store i64 %1727, i64* %RCX.i1954, align 8
  %1728 = add i64 %1715, 18
  store i64 %1728, i64* %3, align 8
  %1729 = load i64, i64* %1717, align 8
  store i64 %1729, i64* %RAX.i186, align 8
  %1730 = add i64 %1729, 56
  %1731 = add i64 %1715, 22
  store i64 %1731, i64* %3, align 8
  %1732 = inttoptr i64 %1730 to i64*
  %1733 = load i64, i64* %1732, align 8
  store i64 %1733, i64* %RAX.i186, align 8
  %1734 = add i64 %1733, 6372
  %1735 = add i64 %1715, 28
  store i64 %1735, i64* %3, align 8
  %1736 = inttoptr i64 %1734 to i32*
  store i32 %1726, i32* %1736, align 4
  %1737 = load i64, i64* %RBP.i, align 8
  %1738 = add i64 %1737, -8
  %1739 = load i64, i64* %3, align 8
  %1740 = add i64 %1739, 4
  store i64 %1740, i64* %3, align 8
  %1741 = inttoptr i64 %1738 to i64*
  %1742 = load i64, i64* %1741, align 8
  store i64 %1742, i64* %RAX.i186, align 8
  %1743 = add i64 %1742, 48
  %1744 = add i64 %1739, 8
  store i64 %1744, i64* %3, align 8
  %1745 = inttoptr i64 %1743 to i64*
  %1746 = load i64, i64* %1745, align 8
  store i64 %1746, i64* %RAX.i186, align 8
  %1747 = add i64 %1746, 6372
  %1748 = load i32, i32* %ECX.i3337, align 4
  %1749 = add i64 %1739, 14
  store i64 %1749, i64* %3, align 8
  %1750 = inttoptr i64 %1747 to i32*
  store i32 %1748, i32* %1750, align 4
  %1751 = load i64, i64* %RBP.i, align 8
  %1752 = add i64 %1751, -8
  %1753 = load i64, i64* %3, align 8
  %1754 = add i64 %1753, 4
  store i64 %1754, i64* %3, align 8
  %1755 = inttoptr i64 %1752 to i64*
  %1756 = load i64, i64* %1755, align 8
  store i64 %1756, i64* %RAX.i186, align 8
  %1757 = add i64 %1756, 28
  %1758 = load i32, i32* %ECX.i3337, align 4
  %1759 = add i64 %1753, 7
  store i64 %1759, i64* %3, align 8
  %1760 = inttoptr i64 %1757 to i32*
  store i32 %1758, i32* %1760, align 4
  %1761 = load i64, i64* %RBP.i, align 8
  %1762 = add i64 %1761, -8
  %1763 = load i64, i64* %3, align 8
  %1764 = add i64 %1763, 4
  store i64 %1764, i64* %3, align 8
  %1765 = inttoptr i64 %1762 to i64*
  %1766 = load i64, i64* %1765, align 8
  store i64 %1766, i64* %RAX.i186, align 8
  %1767 = add i64 %1766, 56
  %1768 = add i64 %1763, 8
  store i64 %1768, i64* %3, align 8
  %1769 = inttoptr i64 %1767 to i64*
  %1770 = load i64, i64* %1769, align 8
  store i64 %1770, i64* %RAX.i186, align 8
  %1771 = add i64 %1770, 6412
  %1772 = add i64 %1763, 18
  store i64 %1772, i64* %3, align 8
  %1773 = inttoptr i64 %1771 to i32*
  store i32 1, i32* %1773, align 4
  %1774 = load i64, i64* %RBP.i, align 8
  %1775 = add i64 %1774, -8
  %1776 = load i64, i64* %3, align 8
  %1777 = add i64 %1776, 4
  store i64 %1777, i64* %3, align 8
  %1778 = inttoptr i64 %1775 to i64*
  %1779 = load i64, i64* %1778, align 8
  store i64 %1779, i64* %RAX.i186, align 8
  %1780 = add i64 %1779, 48
  %1781 = add i64 %1776, 8
  store i64 %1781, i64* %3, align 8
  %1782 = inttoptr i64 %1780 to i64*
  %1783 = load i64, i64* %1782, align 8
  store i64 %1783, i64* %RAX.i186, align 8
  %1784 = add i64 %1783, 6412
  %1785 = add i64 %1776, 18
  store i64 %1785, i64* %3, align 8
  %1786 = inttoptr i64 %1784 to i32*
  store i32 1, i32* %1786, align 4
  %1787 = load i64, i64* %RBP.i, align 8
  %1788 = add i64 %1787, -8
  %1789 = load i64, i64* %3, align 8
  %1790 = add i64 %1789, 4
  store i64 %1790, i64* %3, align 8
  %1791 = inttoptr i64 %1788 to i64*
  %1792 = load i64, i64* %1791, align 8
  store i64 %1792, i64* %RAX.i186, align 8
  %1793 = add i64 %1792, 40
  %1794 = add i64 %1789, 8
  store i64 %1794, i64* %3, align 8
  %1795 = inttoptr i64 %1793 to i64*
  %1796 = load i64, i64* %1795, align 8
  store i64 %1796, i64* %RAX.i186, align 8
  %1797 = add i64 %1796, 6416
  %1798 = add i64 %1789, 14
  store i64 %1798, i64* %3, align 8
  %1799 = inttoptr i64 %1797 to i32*
  %1800 = load i32, i32* %1799, align 4
  %1801 = zext i32 %1800 to i64
  store i64 %1801, i64* %RCX.i1954, align 8
  %1802 = add i64 %1789, 18
  store i64 %1802, i64* %3, align 8
  %1803 = load i64, i64* %1791, align 8
  store i64 %1803, i64* %RAX.i186, align 8
  %1804 = add i64 %1803, 56
  %1805 = add i64 %1789, 22
  store i64 %1805, i64* %3, align 8
  %1806 = inttoptr i64 %1804 to i64*
  %1807 = load i64, i64* %1806, align 8
  store i64 %1807, i64* %RAX.i186, align 8
  %1808 = add i64 %1807, 6416
  %1809 = add i64 %1789, 28
  store i64 %1809, i64* %3, align 8
  %1810 = inttoptr i64 %1808 to i32*
  store i32 %1800, i32* %1810, align 4
  %1811 = load i64, i64* %RBP.i, align 8
  %1812 = add i64 %1811, -8
  %1813 = load i64, i64* %3, align 8
  %1814 = add i64 %1813, 4
  store i64 %1814, i64* %3, align 8
  %1815 = inttoptr i64 %1812 to i64*
  %1816 = load i64, i64* %1815, align 8
  store i64 %1816, i64* %RAX.i186, align 8
  %1817 = add i64 %1816, 48
  %1818 = add i64 %1813, 8
  store i64 %1818, i64* %3, align 8
  %1819 = inttoptr i64 %1817 to i64*
  %1820 = load i64, i64* %1819, align 8
  store i64 %1820, i64* %RAX.i186, align 8
  %1821 = add i64 %1820, 6416
  %1822 = load i32, i32* %ECX.i3337, align 4
  %1823 = add i64 %1813, 14
  store i64 %1823, i64* %3, align 8
  %1824 = inttoptr i64 %1821 to i32*
  store i32 %1822, i32* %1824, align 4
  %1825 = load i64, i64* %RBP.i, align 8
  %1826 = add i64 %1825, -8
  %1827 = load i64, i64* %3, align 8
  %1828 = add i64 %1827, 4
  store i64 %1828, i64* %3, align 8
  %1829 = inttoptr i64 %1826 to i64*
  %1830 = load i64, i64* %1829, align 8
  store i64 %1830, i64* %RAX.i186, align 8
  %1831 = add i64 %1830, 48
  %1832 = add i64 %1827, 8
  store i64 %1832, i64* %3, align 8
  %1833 = inttoptr i64 %1831 to i64*
  %1834 = load i64, i64* %1833, align 8
  store i64 %1834, i64* %RAX.i186, align 8
  %1835 = add i64 %1827, 12
  store i64 %1835, i64* %3, align 8
  %1836 = load i64, i64* %1829, align 8
  store i64 %1836, i64* %RDI.i126, align 8
  %1837 = add i64 %1836, 40
  %1838 = add i64 %1827, 16
  store i64 %1838, i64* %3, align 8
  %1839 = inttoptr i64 %1837 to i64*
  %1840 = load i64, i64* %1839, align 8
  store i64 %1840, i64* %RDI.i126, align 8
  %1841 = add i64 %1840, 6528
  %1842 = add i64 %1827, 23
  store i64 %1842, i64* %3, align 8
  %1843 = inttoptr i64 %1841 to i64*
  store i64 %1834, i64* %1843, align 8
  %1844 = load i64, i64* %RBP.i, align 8
  %1845 = add i64 %1844, -8
  %1846 = load i64, i64* %3, align 8
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %3, align 8
  %1848 = inttoptr i64 %1845 to i64*
  %1849 = load i64, i64* %1848, align 8
  store i64 %1849, i64* %RAX.i186, align 8
  %1850 = add i64 %1849, 56
  %1851 = add i64 %1846, 8
  store i64 %1851, i64* %3, align 8
  %1852 = inttoptr i64 %1850 to i64*
  %1853 = load i64, i64* %1852, align 8
  store i64 %1853, i64* %RAX.i186, align 8
  %1854 = add i64 %1846, 12
  store i64 %1854, i64* %3, align 8
  %1855 = load i64, i64* %1848, align 8
  store i64 %1855, i64* %RDI.i126, align 8
  %1856 = add i64 %1855, 40
  %1857 = add i64 %1846, 16
  store i64 %1857, i64* %3, align 8
  %1858 = inttoptr i64 %1856 to i64*
  %1859 = load i64, i64* %1858, align 8
  store i64 %1859, i64* %RDI.i126, align 8
  %1860 = add i64 %1859, 6536
  %1861 = add i64 %1846, 23
  store i64 %1861, i64* %3, align 8
  %1862 = inttoptr i64 %1860 to i64*
  store i64 %1853, i64* %1862, align 8
  %1863 = load i64, i64* %RBP.i, align 8
  %1864 = add i64 %1863, -8
  %1865 = load i64, i64* %3, align 8
  %1866 = add i64 %1865, 4
  store i64 %1866, i64* %3, align 8
  %1867 = inttoptr i64 %1864 to i64*
  %1868 = load i64, i64* %1867, align 8
  store i64 %1868, i64* %RAX.i186, align 8
  %1869 = add i64 %1868, 56
  %1870 = add i64 %1865, 8
  store i64 %1870, i64* %3, align 8
  %1871 = inttoptr i64 %1869 to i64*
  %1872 = load i64, i64* %1871, align 8
  store i64 %1872, i64* %RAX.i186, align 8
  %1873 = add i64 %1865, 12
  store i64 %1873, i64* %3, align 8
  %1874 = load i64, i64* %1867, align 8
  store i64 %1874, i64* %RDI.i126, align 8
  %1875 = add i64 %1874, 48
  %1876 = add i64 %1865, 16
  store i64 %1876, i64* %3, align 8
  %1877 = inttoptr i64 %1875 to i64*
  %1878 = load i64, i64* %1877, align 8
  store i64 %1878, i64* %RDI.i126, align 8
  %1879 = add i64 %1878, 6536
  %1880 = add i64 %1865, 23
  store i64 %1880, i64* %3, align 8
  %1881 = inttoptr i64 %1879 to i64*
  store i64 %1872, i64* %1881, align 8
  %1882 = load i64, i64* %RBP.i, align 8
  %1883 = add i64 %1882, -8
  %1884 = load i64, i64* %3, align 8
  %1885 = add i64 %1884, 4
  store i64 %1885, i64* %3, align 8
  %1886 = inttoptr i64 %1883 to i64*
  %1887 = load i64, i64* %1886, align 8
  store i64 %1887, i64* %RAX.i186, align 8
  %1888 = add i64 %1887, 40
  %1889 = add i64 %1884, 8
  store i64 %1889, i64* %3, align 8
  %1890 = inttoptr i64 %1888 to i64*
  %1891 = load i64, i64* %1890, align 8
  store i64 %1891, i64* %RAX.i186, align 8
  %1892 = add i64 %1884, 12
  store i64 %1892, i64* %3, align 8
  %1893 = load i64, i64* %1886, align 8
  store i64 %1893, i64* %RDI.i126, align 8
  %1894 = add i64 %1893, 48
  %1895 = add i64 %1884, 16
  store i64 %1895, i64* %3, align 8
  %1896 = inttoptr i64 %1894 to i64*
  %1897 = load i64, i64* %1896, align 8
  store i64 %1897, i64* %RDI.i126, align 8
  %1898 = add i64 %1897, 6544
  %1899 = add i64 %1884, 23
  store i64 %1899, i64* %3, align 8
  %1900 = inttoptr i64 %1898 to i64*
  store i64 %1891, i64* %1900, align 8
  %1901 = load i64, i64* %RBP.i, align 8
  %1902 = add i64 %1901, -8
  %1903 = load i64, i64* %3, align 8
  %1904 = add i64 %1903, 4
  store i64 %1904, i64* %3, align 8
  %1905 = inttoptr i64 %1902 to i64*
  %1906 = load i64, i64* %1905, align 8
  store i64 %1906, i64* %RAX.i186, align 8
  %1907 = add i64 %1906, 48
  %1908 = add i64 %1903, 8
  store i64 %1908, i64* %3, align 8
  %1909 = inttoptr i64 %1907 to i64*
  %1910 = load i64, i64* %1909, align 8
  store i64 %1910, i64* %RAX.i186, align 8
  %1911 = add i64 %1903, 12
  store i64 %1911, i64* %3, align 8
  %1912 = load i64, i64* %1905, align 8
  store i64 %1912, i64* %RDI.i126, align 8
  %1913 = add i64 %1912, 56
  %1914 = add i64 %1903, 16
  store i64 %1914, i64* %3, align 8
  %1915 = inttoptr i64 %1913 to i64*
  %1916 = load i64, i64* %1915, align 8
  store i64 %1916, i64* %RDI.i126, align 8
  %1917 = add i64 %1916, 6528
  %1918 = add i64 %1903, 23
  store i64 %1918, i64* %3, align 8
  %1919 = inttoptr i64 %1917 to i64*
  store i64 %1910, i64* %1919, align 8
  %1920 = load i64, i64* %RBP.i, align 8
  %1921 = add i64 %1920, -8
  %1922 = load i64, i64* %3, align 8
  %1923 = add i64 %1922, 4
  store i64 %1923, i64* %3, align 8
  %1924 = inttoptr i64 %1921 to i64*
  %1925 = load i64, i64* %1924, align 8
  store i64 %1925, i64* %RAX.i186, align 8
  %1926 = add i64 %1925, 40
  %1927 = add i64 %1922, 8
  store i64 %1927, i64* %3, align 8
  %1928 = inttoptr i64 %1926 to i64*
  %1929 = load i64, i64* %1928, align 8
  store i64 %1929, i64* %RAX.i186, align 8
  %1930 = add i64 %1922, 12
  store i64 %1930, i64* %3, align 8
  %1931 = load i64, i64* %1924, align 8
  store i64 %1931, i64* %RDI.i126, align 8
  %1932 = add i64 %1931, 56
  %1933 = add i64 %1922, 16
  store i64 %1933, i64* %3, align 8
  %1934 = inttoptr i64 %1932 to i64*
  %1935 = load i64, i64* %1934, align 8
  store i64 %1935, i64* %RDI.i126, align 8
  %1936 = add i64 %1935, 6544
  %1937 = add i64 %1922, 23
  store i64 %1937, i64* %3, align 8
  %1938 = inttoptr i64 %1936 to i64*
  store i64 %1929, i64* %1938, align 8
  %1939 = load i64, i64* %RBP.i, align 8
  %1940 = add i64 %1939, -8
  %1941 = load i64, i64* %3, align 8
  %1942 = add i64 %1941, 4
  store i64 %1942, i64* %3, align 8
  %1943 = inttoptr i64 %1940 to i64*
  %1944 = load i64, i64* %1943, align 8
  store i64 %1944, i64* %RAX.i186, align 8
  %1945 = add i64 %1944, 40
  %1946 = add i64 %1941, 8
  store i64 %1946, i64* %3, align 8
  %1947 = inttoptr i64 %1945 to i64*
  %1948 = load i64, i64* %1947, align 8
  store i64 %1948, i64* %RAX.i186, align 8
  %1949 = add i64 %1948, 6552
  %1950 = add i64 %1941, 14
  store i64 %1950, i64* %3, align 8
  %1951 = inttoptr i64 %1949 to i32*
  %1952 = load i32, i32* %1951, align 4
  %1953 = zext i32 %1952 to i64
  store i64 %1953, i64* %RCX.i1954, align 8
  %1954 = add i64 %1941, 18
  store i64 %1954, i64* %3, align 8
  %1955 = load i64, i64* %1943, align 8
  store i64 %1955, i64* %RAX.i186, align 8
  %1956 = add i64 %1955, 56
  %1957 = add i64 %1941, 22
  store i64 %1957, i64* %3, align 8
  %1958 = inttoptr i64 %1956 to i64*
  %1959 = load i64, i64* %1958, align 8
  store i64 %1959, i64* %RAX.i186, align 8
  %1960 = add i64 %1959, 6552
  %1961 = add i64 %1941, 28
  store i64 %1961, i64* %3, align 8
  %1962 = inttoptr i64 %1960 to i32*
  store i32 %1952, i32* %1962, align 4
  %1963 = load i64, i64* %RBP.i, align 8
  %1964 = add i64 %1963, -8
  %1965 = load i64, i64* %3, align 8
  %1966 = add i64 %1965, 4
  store i64 %1966, i64* %3, align 8
  %1967 = inttoptr i64 %1964 to i64*
  %1968 = load i64, i64* %1967, align 8
  store i64 %1968, i64* %RAX.i186, align 8
  %1969 = add i64 %1968, 48
  %1970 = add i64 %1965, 8
  store i64 %1970, i64* %3, align 8
  %1971 = inttoptr i64 %1969 to i64*
  %1972 = load i64, i64* %1971, align 8
  store i64 %1972, i64* %RAX.i186, align 8
  %1973 = add i64 %1972, 6552
  %1974 = load i32, i32* %ECX.i3337, align 4
  %1975 = add i64 %1965, 14
  store i64 %1975, i64* %3, align 8
  %1976 = inttoptr i64 %1973 to i32*
  store i32 %1974, i32* %1976, align 4
  %1977 = load i64, i64* %RBP.i, align 8
  %1978 = add i64 %1977, -8
  %1979 = load i64, i64* %3, align 8
  %1980 = add i64 %1979, 4
  store i64 %1980, i64* %3, align 8
  %1981 = inttoptr i64 %1978 to i64*
  %1982 = load i64, i64* %1981, align 8
  store i64 %1982, i64* %RAX.i186, align 8
  %1983 = add i64 %1982, 40
  %1984 = add i64 %1979, 8
  store i64 %1984, i64* %3, align 8
  %1985 = inttoptr i64 %1983 to i64*
  %1986 = load i64, i64* %1985, align 8
  store i64 %1986, i64* %RAX.i186, align 8
  %1987 = add i64 %1986, 6556
  %1988 = add i64 %1979, 15
  store i64 %1988, i64* %3, align 8
  %1989 = inttoptr i64 %1987 to i32*
  %1990 = load i32, i32* %1989, align 4
  store i8 0, i8* %14, align 1
  %1991 = and i32 %1990, 255
  %1992 = tail call i32 @llvm.ctpop.i32(i32 %1991)
  %1993 = trunc i32 %1992 to i8
  %1994 = and i8 %1993, 1
  %1995 = xor i8 %1994, 1
  store i8 %1995, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %1996 = icmp eq i32 %1990, 0
  %1997 = zext i1 %1996 to i8
  store i8 %1997, i8* %30, align 1
  %1998 = lshr i32 %1990, 31
  %1999 = trunc i32 %1998 to i8
  store i8 %1999, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v555 = select i1 %1996, i64 21, i64 512
  %2000 = add i64 %1979, %.v555
  store i64 %2000, i64* %3, align 8
  br i1 %1996, label %block_450549, label %block_.L_450734

block_450549:                                     ; preds = %block_.L_4502f9
  %2001 = add i64 %1977, -12
  %2002 = add i64 %2000, 7
  store i64 %2002, i64* %3, align 8
  %2003 = inttoptr i64 %2001 to i32*
  store i32 0, i32* %2003, align 4
  %.pre283 = load i64, i64* %3, align 8
  br label %block_.L_450550

block_.L_450550:                                  ; preds = %block_450560, %block_450549
  %2004 = phi i64 [ %2342, %block_450560 ], [ %.pre283, %block_450549 ]
  %2005 = load i64, i64* %RBP.i, align 8
  %2006 = add i64 %2005, -12
  %2007 = add i64 %2004, 3
  store i64 %2007, i64* %3, align 8
  %2008 = inttoptr i64 %2006 to i32*
  %2009 = load i32, i32* %2008, align 4
  %2010 = zext i32 %2009 to i64
  store i64 %2010, i64* %RAX.i186, align 8
  %2011 = load i32, i32* bitcast (%G_0x7247b4_type* @G_0x7247b4 to i32*), align 8
  %2012 = sub i32 %2009, %2011
  %2013 = icmp ult i32 %2009, %2011
  %2014 = zext i1 %2013 to i8
  store i8 %2014, i8* %14, align 1
  %2015 = and i32 %2012, 255
  %2016 = tail call i32 @llvm.ctpop.i32(i32 %2015)
  %2017 = trunc i32 %2016 to i8
  %2018 = and i8 %2017, 1
  %2019 = xor i8 %2018, 1
  store i8 %2019, i8* %21, align 1
  %2020 = xor i32 %2011, %2009
  %2021 = xor i32 %2020, %2012
  %2022 = lshr i32 %2021, 4
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  store i8 %2024, i8* %27, align 1
  %2025 = icmp eq i32 %2012, 0
  %2026 = zext i1 %2025 to i8
  store i8 %2026, i8* %30, align 1
  %2027 = lshr i32 %2012, 31
  %2028 = trunc i32 %2027 to i8
  store i8 %2028, i8* %33, align 1
  %2029 = lshr i32 %2009, 31
  %2030 = lshr i32 %2011, 31
  %2031 = xor i32 %2030, %2029
  %2032 = xor i32 %2027, %2029
  %2033 = add nuw nsw i32 %2032, %2031
  %2034 = icmp eq i32 %2033, 2
  %2035 = zext i1 %2034 to i8
  store i8 %2035, i8* %39, align 1
  %2036 = icmp ne i8 %2028, 0
  %2037 = xor i1 %2036, %2034
  %.v556 = select i1 %2037, i64 16, i64 242
  %2038 = add i64 %2004, %.v556
  store i64 %2038, i64* %3, align 8
  br i1 %2037, label %block_450560, label %block_.L_450642

block_450560:                                     ; preds = %block_.L_450550
  %2039 = add i64 %2005, -8
  %2040 = add i64 %2038, 4
  store i64 %2040, i64* %3, align 8
  %2041 = inttoptr i64 %2039 to i64*
  %2042 = load i64, i64* %2041, align 8
  store i64 %2042, i64* %RAX.i186, align 8
  %2043 = add i64 %2042, 40
  %2044 = add i64 %2038, 8
  store i64 %2044, i64* %3, align 8
  %2045 = inttoptr i64 %2043 to i64*
  %2046 = load i64, i64* %2045, align 8
  store i64 %2046, i64* %RAX.i186, align 8
  %2047 = add i64 %2038, 11
  store i64 %2047, i64* %3, align 8
  %2048 = load i32, i32* %2008, align 4
  %2049 = shl i32 %2048, 1
  %2050 = icmp slt i32 %2048, 0
  %2051 = icmp slt i32 %2049, 0
  %2052 = xor i1 %2050, %2051
  %2053 = zext i32 %2049 to i64
  store i64 %2053, i64* %RCX.i1954, align 8
  %.lobit69 = lshr i32 %2048, 31
  %2054 = trunc i32 %.lobit69 to i8
  store i8 %2054, i8* %14, align 1
  %2055 = and i32 %2049, 254
  %2056 = tail call i32 @llvm.ctpop.i32(i32 %2055)
  %2057 = trunc i32 %2056 to i8
  %2058 = and i8 %2057, 1
  %2059 = xor i8 %2058, 1
  store i8 %2059, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2060 = icmp eq i32 %2049, 0
  %2061 = zext i1 %2060 to i8
  store i8 %2061, i8* %30, align 1
  %2062 = lshr i32 %2048, 30
  %2063 = trunc i32 %2062 to i8
  %2064 = and i8 %2063, 1
  store i8 %2064, i8* %33, align 1
  %2065 = zext i1 %2052 to i8
  store i8 %2065, i8* %39, align 1
  %2066 = sext i32 %2049 to i64
  store i64 %2066, i64* %RDX.i2171, align 8
  %2067 = shl nsw i64 %2066, 3
  %2068 = add nsw i64 %2067, 816
  %2069 = add i64 %2068, %2046
  %2070 = add i64 %2038, 24
  store i64 %2070, i64* %3, align 8
  %2071 = inttoptr i64 %2069 to i64*
  %2072 = load i64, i64* %2071, align 8
  store i64 %2072, i64* %RAX.i186, align 8
  %2073 = add i64 %2038, 28
  store i64 %2073, i64* %3, align 8
  %2074 = load i64, i64* %2041, align 8
  store i64 %2074, i64* %RDX.i2171, align 8
  %2075 = add i64 %2074, 48
  %2076 = add i64 %2038, 32
  store i64 %2076, i64* %3, align 8
  %2077 = inttoptr i64 %2075 to i64*
  %2078 = load i64, i64* %2077, align 8
  store i64 %2078, i64* %RDX.i2171, align 8
  %2079 = add i64 %2038, 35
  store i64 %2079, i64* %3, align 8
  %2080 = load i32, i32* %2008, align 4
  %2081 = shl i32 %2080, 1
  %2082 = icmp slt i32 %2080, 0
  %2083 = icmp slt i32 %2081, 0
  %2084 = xor i1 %2082, %2083
  %2085 = zext i32 %2081 to i64
  store i64 %2085, i64* %RCX.i1954, align 8
  %.lobit70 = lshr i32 %2080, 31
  %2086 = trunc i32 %.lobit70 to i8
  store i8 %2086, i8* %14, align 1
  %2087 = and i32 %2081, 254
  %2088 = tail call i32 @llvm.ctpop.i32(i32 %2087)
  %2089 = trunc i32 %2088 to i8
  %2090 = and i8 %2089, 1
  %2091 = xor i8 %2090, 1
  store i8 %2091, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2092 = icmp eq i32 %2081, 0
  %2093 = zext i1 %2092 to i8
  store i8 %2093, i8* %30, align 1
  %2094 = lshr i32 %2080, 30
  %2095 = trunc i32 %2094 to i8
  %2096 = and i8 %2095, 1
  store i8 %2096, i8* %33, align 1
  %2097 = zext i1 %2084 to i8
  store i8 %2097, i8* %39, align 1
  %2098 = sext i32 %2081 to i64
  store i64 %2098, i64* %RSI.i2074, align 8
  %2099 = shl nsw i64 %2098, 3
  %2100 = add nsw i64 %2099, 288
  %2101 = add i64 %2100, %2078
  %2102 = add i64 %2038, 48
  store i64 %2102, i64* %3, align 8
  %2103 = inttoptr i64 %2101 to i64*
  store i64 %2072, i64* %2103, align 8
  %2104 = load i64, i64* %RBP.i, align 8
  %2105 = add i64 %2104, -8
  %2106 = load i64, i64* %3, align 8
  %2107 = add i64 %2106, 4
  store i64 %2107, i64* %3, align 8
  %2108 = inttoptr i64 %2105 to i64*
  %2109 = load i64, i64* %2108, align 8
  store i64 %2109, i64* %RAX.i186, align 8
  %2110 = add i64 %2109, 40
  %2111 = add i64 %2106, 8
  store i64 %2111, i64* %3, align 8
  %2112 = inttoptr i64 %2110 to i64*
  %2113 = load i64, i64* %2112, align 8
  store i64 %2113, i64* %RAX.i186, align 8
  %2114 = add i64 %2104, -12
  %2115 = add i64 %2106, 11
  store i64 %2115, i64* %3, align 8
  %2116 = inttoptr i64 %2114 to i32*
  %2117 = load i32, i32* %2116, align 4
  %2118 = shl i32 %2117, 1
  %2119 = or i32 %2118, 1
  %2120 = zext i32 %2119 to i64
  store i64 %2120, i64* %RCX.i1954, align 8
  store i8 0, i8* %14, align 1
  %2121 = and i32 %2119, 255
  %2122 = tail call i32 @llvm.ctpop.i32(i32 %2121)
  %2123 = trunc i32 %2122 to i8
  %2124 = and i8 %2123, 1
  %2125 = xor i8 %2124, 1
  store i8 %2125, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %2126 = lshr i32 %2117, 30
  %2127 = and i32 %2126, 1
  %2128 = trunc i32 %2127 to i8
  store i8 %2128, i8* %33, align 1
  %2129 = lshr i32 %2117, 30
  %2130 = and i32 %2129, 1
  %2131 = xor i32 %2127, %2130
  %2132 = add nuw nsw i32 %2131, %2127
  %2133 = icmp eq i32 %2132, 2
  %2134 = zext i1 %2133 to i8
  store i8 %2134, i8* %39, align 1
  %2135 = sext i32 %2119 to i64
  store i64 %2135, i64* %RDX.i2171, align 8
  %2136 = shl nsw i64 %2135, 3
  %2137 = add nsw i64 %2136, 816
  %2138 = add i64 %2137, %2113
  %2139 = add i64 %2106, 27
  store i64 %2139, i64* %3, align 8
  %2140 = inttoptr i64 %2138 to i64*
  %2141 = load i64, i64* %2140, align 8
  store i64 %2141, i64* %RAX.i186, align 8
  %2142 = add i64 %2106, 31
  store i64 %2142, i64* %3, align 8
  %2143 = load i64, i64* %2108, align 8
  store i64 %2143, i64* %RDX.i2171, align 8
  %2144 = add i64 %2143, 48
  %2145 = add i64 %2106, 35
  store i64 %2145, i64* %3, align 8
  %2146 = inttoptr i64 %2144 to i64*
  %2147 = load i64, i64* %2146, align 8
  store i64 %2147, i64* %RDX.i2171, align 8
  %2148 = add i64 %2106, 38
  store i64 %2148, i64* %3, align 8
  %2149 = load i32, i32* %2116, align 4
  %2150 = shl i32 %2149, 1
  %2151 = or i32 %2150, 1
  %2152 = zext i32 %2151 to i64
  store i64 %2152, i64* %RCX.i1954, align 8
  store i8 0, i8* %14, align 1
  %2153 = and i32 %2151, 255
  %2154 = tail call i32 @llvm.ctpop.i32(i32 %2153)
  %2155 = trunc i32 %2154 to i8
  %2156 = and i8 %2155, 1
  %2157 = xor i8 %2156, 1
  store i8 %2157, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %2158 = lshr i32 %2149, 30
  %2159 = and i32 %2158, 1
  %2160 = trunc i32 %2159 to i8
  store i8 %2160, i8* %33, align 1
  %2161 = lshr i32 %2149, 30
  %2162 = and i32 %2161, 1
  %2163 = xor i32 %2159, %2162
  %2164 = add nuw nsw i32 %2163, %2159
  %2165 = icmp eq i32 %2164, 2
  %2166 = zext i1 %2165 to i8
  store i8 %2166, i8* %39, align 1
  %2167 = sext i32 %2151 to i64
  store i64 %2167, i64* %RSI.i2074, align 8
  %2168 = shl nsw i64 %2167, 3
  %2169 = add nsw i64 %2168, 288
  %2170 = add i64 %2169, %2147
  %2171 = add i64 %2106, 54
  store i64 %2171, i64* %3, align 8
  %2172 = inttoptr i64 %2170 to i64*
  store i64 %2141, i64* %2172, align 8
  %2173 = load i64, i64* %RBP.i, align 8
  %2174 = add i64 %2173, -8
  %2175 = load i64, i64* %3, align 8
  %2176 = add i64 %2175, 4
  store i64 %2176, i64* %3, align 8
  %2177 = inttoptr i64 %2174 to i64*
  %2178 = load i64, i64* %2177, align 8
  store i64 %2178, i64* %RAX.i186, align 8
  %2179 = add i64 %2178, 40
  %2180 = add i64 %2175, 8
  store i64 %2180, i64* %3, align 8
  %2181 = inttoptr i64 %2179 to i64*
  %2182 = load i64, i64* %2181, align 8
  store i64 %2182, i64* %RAX.i186, align 8
  %2183 = add i64 %2173, -12
  %2184 = add i64 %2175, 11
  store i64 %2184, i64* %3, align 8
  %2185 = inttoptr i64 %2183 to i32*
  %2186 = load i32, i32* %2185, align 4
  %2187 = shl i32 %2186, 1
  %2188 = icmp slt i32 %2186, 0
  %2189 = icmp slt i32 %2187, 0
  %2190 = xor i1 %2188, %2189
  %2191 = zext i32 %2187 to i64
  store i64 %2191, i64* %RCX.i1954, align 8
  %.lobit73 = lshr i32 %2186, 31
  %2192 = trunc i32 %.lobit73 to i8
  store i8 %2192, i8* %14, align 1
  %2193 = and i32 %2187, 254
  %2194 = tail call i32 @llvm.ctpop.i32(i32 %2193)
  %2195 = trunc i32 %2194 to i8
  %2196 = and i8 %2195, 1
  %2197 = xor i8 %2196, 1
  store i8 %2197, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2198 = icmp eq i32 %2187, 0
  %2199 = zext i1 %2198 to i8
  store i8 %2199, i8* %30, align 1
  %2200 = lshr i32 %2186, 30
  %2201 = trunc i32 %2200 to i8
  %2202 = and i8 %2201, 1
  store i8 %2202, i8* %33, align 1
  %2203 = zext i1 %2190 to i8
  store i8 %2203, i8* %39, align 1
  %2204 = sext i32 %2187 to i64
  store i64 %2204, i64* %RDX.i2171, align 8
  %2205 = shl nsw i64 %2204, 3
  %2206 = add nsw i64 %2205, 1344
  %2207 = add i64 %2206, %2182
  %2208 = add i64 %2175, 24
  store i64 %2208, i64* %3, align 8
  %2209 = inttoptr i64 %2207 to i64*
  %2210 = load i64, i64* %2209, align 8
  store i64 %2210, i64* %RAX.i186, align 8
  %2211 = add i64 %2175, 28
  store i64 %2211, i64* %3, align 8
  %2212 = load i64, i64* %2177, align 8
  store i64 %2212, i64* %RDX.i2171, align 8
  %2213 = add i64 %2212, 56
  %2214 = add i64 %2175, 32
  store i64 %2214, i64* %3, align 8
  %2215 = inttoptr i64 %2213 to i64*
  %2216 = load i64, i64* %2215, align 8
  store i64 %2216, i64* %RDX.i2171, align 8
  %2217 = add i64 %2175, 35
  store i64 %2217, i64* %3, align 8
  %2218 = load i32, i32* %2185, align 4
  %2219 = shl i32 %2218, 1
  %2220 = icmp slt i32 %2218, 0
  %2221 = icmp slt i32 %2219, 0
  %2222 = xor i1 %2220, %2221
  %2223 = zext i32 %2219 to i64
  store i64 %2223, i64* %RCX.i1954, align 8
  %.lobit74 = lshr i32 %2218, 31
  %2224 = trunc i32 %.lobit74 to i8
  store i8 %2224, i8* %14, align 1
  %2225 = and i32 %2219, 254
  %2226 = tail call i32 @llvm.ctpop.i32(i32 %2225)
  %2227 = trunc i32 %2226 to i8
  %2228 = and i8 %2227, 1
  %2229 = xor i8 %2228, 1
  store i8 %2229, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2230 = icmp eq i32 %2219, 0
  %2231 = zext i1 %2230 to i8
  store i8 %2231, i8* %30, align 1
  %2232 = lshr i32 %2218, 30
  %2233 = trunc i32 %2232 to i8
  %2234 = and i8 %2233, 1
  store i8 %2234, i8* %33, align 1
  %2235 = zext i1 %2222 to i8
  store i8 %2235, i8* %39, align 1
  %2236 = sext i32 %2219 to i64
  store i64 %2236, i64* %RSI.i2074, align 8
  %2237 = shl nsw i64 %2236, 3
  %2238 = add nsw i64 %2237, 288
  %2239 = add i64 %2238, %2216
  %2240 = add i64 %2175, 48
  store i64 %2240, i64* %3, align 8
  %2241 = inttoptr i64 %2239 to i64*
  store i64 %2210, i64* %2241, align 8
  %2242 = load i64, i64* %RBP.i, align 8
  %2243 = add i64 %2242, -8
  %2244 = load i64, i64* %3, align 8
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %3, align 8
  %2246 = inttoptr i64 %2243 to i64*
  %2247 = load i64, i64* %2246, align 8
  store i64 %2247, i64* %RAX.i186, align 8
  %2248 = add i64 %2247, 40
  %2249 = add i64 %2244, 8
  store i64 %2249, i64* %3, align 8
  %2250 = inttoptr i64 %2248 to i64*
  %2251 = load i64, i64* %2250, align 8
  store i64 %2251, i64* %RAX.i186, align 8
  %2252 = add i64 %2242, -12
  %2253 = add i64 %2244, 11
  store i64 %2253, i64* %3, align 8
  %2254 = inttoptr i64 %2252 to i32*
  %2255 = load i32, i32* %2254, align 4
  %2256 = shl i32 %2255, 1
  %2257 = or i32 %2256, 1
  %2258 = zext i32 %2257 to i64
  store i64 %2258, i64* %RCX.i1954, align 8
  store i8 0, i8* %14, align 1
  %2259 = and i32 %2257, 255
  %2260 = tail call i32 @llvm.ctpop.i32(i32 %2259)
  %2261 = trunc i32 %2260 to i8
  %2262 = and i8 %2261, 1
  %2263 = xor i8 %2262, 1
  store i8 %2263, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %2264 = lshr i32 %2255, 30
  %2265 = and i32 %2264, 1
  %2266 = trunc i32 %2265 to i8
  store i8 %2266, i8* %33, align 1
  %2267 = lshr i32 %2255, 30
  %2268 = and i32 %2267, 1
  %2269 = xor i32 %2265, %2268
  %2270 = add nuw nsw i32 %2269, %2265
  %2271 = icmp eq i32 %2270, 2
  %2272 = zext i1 %2271 to i8
  store i8 %2272, i8* %39, align 1
  %2273 = sext i32 %2257 to i64
  store i64 %2273, i64* %RDX.i2171, align 8
  %2274 = shl nsw i64 %2273, 3
  %2275 = add nsw i64 %2274, 1344
  %2276 = add i64 %2275, %2251
  %2277 = add i64 %2244, 27
  store i64 %2277, i64* %3, align 8
  %2278 = inttoptr i64 %2276 to i64*
  %2279 = load i64, i64* %2278, align 8
  store i64 %2279, i64* %RAX.i186, align 8
  %2280 = add i64 %2244, 31
  store i64 %2280, i64* %3, align 8
  %2281 = load i64, i64* %2246, align 8
  store i64 %2281, i64* %RDX.i2171, align 8
  %2282 = add i64 %2281, 56
  %2283 = add i64 %2244, 35
  store i64 %2283, i64* %3, align 8
  %2284 = inttoptr i64 %2282 to i64*
  %2285 = load i64, i64* %2284, align 8
  store i64 %2285, i64* %RDX.i2171, align 8
  %2286 = add i64 %2244, 38
  store i64 %2286, i64* %3, align 8
  %2287 = load i32, i32* %2254, align 4
  %2288 = shl i32 %2287, 1
  %2289 = or i32 %2288, 1
  %2290 = zext i32 %2289 to i64
  store i64 %2290, i64* %RCX.i1954, align 8
  store i8 0, i8* %14, align 1
  %2291 = and i32 %2289, 255
  %2292 = tail call i32 @llvm.ctpop.i32(i32 %2291)
  %2293 = trunc i32 %2292 to i8
  %2294 = and i8 %2293, 1
  %2295 = xor i8 %2294, 1
  store i8 %2295, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %2296 = lshr i32 %2287, 30
  %2297 = and i32 %2296, 1
  %2298 = trunc i32 %2297 to i8
  store i8 %2298, i8* %33, align 1
  %2299 = lshr i32 %2287, 30
  %2300 = and i32 %2299, 1
  %2301 = xor i32 %2297, %2300
  %2302 = add nuw nsw i32 %2301, %2297
  %2303 = icmp eq i32 %2302, 2
  %2304 = zext i1 %2303 to i8
  store i8 %2304, i8* %39, align 1
  %2305 = sext i32 %2289 to i64
  store i64 %2305, i64* %RSI.i2074, align 8
  %2306 = shl nsw i64 %2305, 3
  %2307 = add nsw i64 %2306, 288
  %2308 = add i64 %2307, %2285
  %2309 = add i64 %2244, 54
  store i64 %2309, i64* %3, align 8
  %2310 = inttoptr i64 %2308 to i64*
  store i64 %2279, i64* %2310, align 8
  %2311 = load i64, i64* %RBP.i, align 8
  %2312 = add i64 %2311, -12
  %2313 = load i64, i64* %3, align 8
  %2314 = add i64 %2313, 3
  store i64 %2314, i64* %3, align 8
  %2315 = inttoptr i64 %2312 to i32*
  %2316 = load i32, i32* %2315, align 4
  %2317 = add i32 %2316, 1
  %2318 = zext i32 %2317 to i64
  store i64 %2318, i64* %RAX.i186, align 8
  %2319 = icmp eq i32 %2316, -1
  %2320 = icmp eq i32 %2317, 0
  %2321 = or i1 %2319, %2320
  %2322 = zext i1 %2321 to i8
  store i8 %2322, i8* %14, align 1
  %2323 = and i32 %2317, 255
  %2324 = tail call i32 @llvm.ctpop.i32(i32 %2323)
  %2325 = trunc i32 %2324 to i8
  %2326 = and i8 %2325, 1
  %2327 = xor i8 %2326, 1
  store i8 %2327, i8* %21, align 1
  %2328 = xor i32 %2317, %2316
  %2329 = lshr i32 %2328, 4
  %2330 = trunc i32 %2329 to i8
  %2331 = and i8 %2330, 1
  store i8 %2331, i8* %27, align 1
  %2332 = zext i1 %2320 to i8
  store i8 %2332, i8* %30, align 1
  %2333 = lshr i32 %2317, 31
  %2334 = trunc i32 %2333 to i8
  store i8 %2334, i8* %33, align 1
  %2335 = lshr i32 %2316, 31
  %2336 = xor i32 %2333, %2335
  %2337 = add nuw nsw i32 %2336, %2333
  %2338 = icmp eq i32 %2337, 2
  %2339 = zext i1 %2338 to i8
  store i8 %2339, i8* %39, align 1
  %2340 = add i64 %2313, 9
  store i64 %2340, i64* %3, align 8
  store i32 %2317, i32* %2315, align 4
  %2341 = load i64, i64* %3, align 8
  %2342 = add i64 %2341, -237
  store i64 %2342, i64* %3, align 8
  br label %block_.L_450550

block_.L_450642:                                  ; preds = %block_.L_450550
  %2343 = add i64 %2038, 7
  store i64 %2343, i64* %3, align 8
  store i32 0, i32* %2008, align 4
  %.pre284 = load i64, i64* %3, align 8
  br label %block_.L_450649

block_.L_450649:                                  ; preds = %block_450659, %block_.L_450642
  %2344 = phi i64 [ %2682, %block_450659 ], [ %.pre284, %block_.L_450642 ]
  %2345 = load i64, i64* %RBP.i, align 8
  %2346 = add i64 %2345, -12
  %2347 = add i64 %2344, 3
  store i64 %2347, i64* %3, align 8
  %2348 = inttoptr i64 %2346 to i32*
  %2349 = load i32, i32* %2348, align 4
  %2350 = zext i32 %2349 to i64
  store i64 %2350, i64* %RAX.i186, align 8
  %2351 = load i32, i32* bitcast (%G_0x7247b0_type* @G_0x7247b0 to i32*), align 8
  %2352 = sub i32 %2349, %2351
  %2353 = icmp ult i32 %2349, %2351
  %2354 = zext i1 %2353 to i8
  store i8 %2354, i8* %14, align 1
  %2355 = and i32 %2352, 255
  %2356 = tail call i32 @llvm.ctpop.i32(i32 %2355)
  %2357 = trunc i32 %2356 to i8
  %2358 = and i8 %2357, 1
  %2359 = xor i8 %2358, 1
  store i8 %2359, i8* %21, align 1
  %2360 = xor i32 %2351, %2349
  %2361 = xor i32 %2360, %2352
  %2362 = lshr i32 %2361, 4
  %2363 = trunc i32 %2362 to i8
  %2364 = and i8 %2363, 1
  store i8 %2364, i8* %27, align 1
  %2365 = icmp eq i32 %2352, 0
  %2366 = zext i1 %2365 to i8
  store i8 %2366, i8* %30, align 1
  %2367 = lshr i32 %2352, 31
  %2368 = trunc i32 %2367 to i8
  store i8 %2368, i8* %33, align 1
  %2369 = lshr i32 %2349, 31
  %2370 = lshr i32 %2351, 31
  %2371 = xor i32 %2370, %2369
  %2372 = xor i32 %2367, %2369
  %2373 = add nuw nsw i32 %2372, %2371
  %2374 = icmp eq i32 %2373, 2
  %2375 = zext i1 %2374 to i8
  store i8 %2375, i8* %39, align 1
  %2376 = icmp ne i8 %2368, 0
  %2377 = xor i1 %2376, %2374
  %.v557 = select i1 %2377, i64 16, i64 230
  %2378 = add i64 %2344, %.v557
  store i64 %2378, i64* %3, align 8
  br i1 %2377, label %block_450659, label %block_.L_45072f

block_450659:                                     ; preds = %block_.L_450649
  %2379 = add i64 %2345, -8
  %2380 = add i64 %2378, 4
  store i64 %2380, i64* %3, align 8
  %2381 = inttoptr i64 %2379 to i64*
  %2382 = load i64, i64* %2381, align 8
  store i64 %2382, i64* %RAX.i186, align 8
  %2383 = add i64 %2382, 40
  %2384 = add i64 %2378, 8
  store i64 %2384, i64* %3, align 8
  %2385 = inttoptr i64 %2383 to i64*
  %2386 = load i64, i64* %2385, align 8
  store i64 %2386, i64* %RAX.i186, align 8
  %2387 = add i64 %2378, 11
  store i64 %2387, i64* %3, align 8
  %2388 = load i32, i32* %2348, align 4
  %2389 = shl i32 %2388, 1
  %2390 = icmp slt i32 %2388, 0
  %2391 = icmp slt i32 %2389, 0
  %2392 = xor i1 %2390, %2391
  %2393 = zext i32 %2389 to i64
  store i64 %2393, i64* %RCX.i1954, align 8
  %.lobit77 = lshr i32 %2388, 31
  %2394 = trunc i32 %.lobit77 to i8
  store i8 %2394, i8* %14, align 1
  %2395 = and i32 %2389, 254
  %2396 = tail call i32 @llvm.ctpop.i32(i32 %2395)
  %2397 = trunc i32 %2396 to i8
  %2398 = and i8 %2397, 1
  %2399 = xor i8 %2398, 1
  store i8 %2399, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2400 = icmp eq i32 %2389, 0
  %2401 = zext i1 %2400 to i8
  store i8 %2401, i8* %30, align 1
  %2402 = lshr i32 %2388, 30
  %2403 = trunc i32 %2402 to i8
  %2404 = and i8 %2403, 1
  store i8 %2404, i8* %33, align 1
  %2405 = zext i1 %2392 to i8
  store i8 %2405, i8* %39, align 1
  %2406 = sext i32 %2389 to i64
  store i64 %2406, i64* %RDX.i2171, align 8
  %2407 = shl nsw i64 %2406, 3
  %2408 = add nsw i64 %2407, 552
  %2409 = add i64 %2408, %2386
  %2410 = add i64 %2378, 24
  store i64 %2410, i64* %3, align 8
  %2411 = inttoptr i64 %2409 to i64*
  %2412 = load i64, i64* %2411, align 8
  store i64 %2412, i64* %RAX.i186, align 8
  %2413 = add i64 %2378, 28
  store i64 %2413, i64* %3, align 8
  %2414 = load i64, i64* %2381, align 8
  store i64 %2414, i64* %RDX.i2171, align 8
  %2415 = add i64 %2414, 48
  %2416 = add i64 %2378, 32
  store i64 %2416, i64* %3, align 8
  %2417 = inttoptr i64 %2415 to i64*
  %2418 = load i64, i64* %2417, align 8
  store i64 %2418, i64* %RDX.i2171, align 8
  %2419 = add i64 %2378, 35
  store i64 %2419, i64* %3, align 8
  %2420 = load i32, i32* %2348, align 4
  %2421 = shl i32 %2420, 1
  %2422 = icmp slt i32 %2420, 0
  %2423 = icmp slt i32 %2421, 0
  %2424 = xor i1 %2422, %2423
  %2425 = zext i32 %2421 to i64
  store i64 %2425, i64* %RCX.i1954, align 8
  %.lobit78 = lshr i32 %2420, 31
  %2426 = trunc i32 %.lobit78 to i8
  store i8 %2426, i8* %14, align 1
  %2427 = and i32 %2421, 254
  %2428 = tail call i32 @llvm.ctpop.i32(i32 %2427)
  %2429 = trunc i32 %2428 to i8
  %2430 = and i8 %2429, 1
  %2431 = xor i8 %2430, 1
  store i8 %2431, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2432 = icmp eq i32 %2421, 0
  %2433 = zext i1 %2432 to i8
  store i8 %2433, i8* %30, align 1
  %2434 = lshr i32 %2420, 30
  %2435 = trunc i32 %2434 to i8
  %2436 = and i8 %2435, 1
  store i8 %2436, i8* %33, align 1
  %2437 = zext i1 %2424 to i8
  store i8 %2437, i8* %39, align 1
  %2438 = sext i32 %2421 to i64
  store i64 %2438, i64* %RSI.i2074, align 8
  %2439 = shl nsw i64 %2438, 3
  %2440 = add nsw i64 %2439, 24
  %2441 = add i64 %2440, %2418
  %2442 = add i64 %2378, 45
  store i64 %2442, i64* %3, align 8
  %2443 = inttoptr i64 %2441 to i64*
  store i64 %2412, i64* %2443, align 8
  %2444 = load i64, i64* %RBP.i, align 8
  %2445 = add i64 %2444, -8
  %2446 = load i64, i64* %3, align 8
  %2447 = add i64 %2446, 4
  store i64 %2447, i64* %3, align 8
  %2448 = inttoptr i64 %2445 to i64*
  %2449 = load i64, i64* %2448, align 8
  store i64 %2449, i64* %RAX.i186, align 8
  %2450 = add i64 %2449, 40
  %2451 = add i64 %2446, 8
  store i64 %2451, i64* %3, align 8
  %2452 = inttoptr i64 %2450 to i64*
  %2453 = load i64, i64* %2452, align 8
  store i64 %2453, i64* %RAX.i186, align 8
  %2454 = add i64 %2444, -12
  %2455 = add i64 %2446, 11
  store i64 %2455, i64* %3, align 8
  %2456 = inttoptr i64 %2454 to i32*
  %2457 = load i32, i32* %2456, align 4
  %2458 = shl i32 %2457, 1
  %2459 = or i32 %2458, 1
  %2460 = zext i32 %2459 to i64
  store i64 %2460, i64* %RCX.i1954, align 8
  store i8 0, i8* %14, align 1
  %2461 = and i32 %2459, 255
  %2462 = tail call i32 @llvm.ctpop.i32(i32 %2461)
  %2463 = trunc i32 %2462 to i8
  %2464 = and i8 %2463, 1
  %2465 = xor i8 %2464, 1
  store i8 %2465, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %2466 = lshr i32 %2457, 30
  %2467 = and i32 %2466, 1
  %2468 = trunc i32 %2467 to i8
  store i8 %2468, i8* %33, align 1
  %2469 = lshr i32 %2457, 30
  %2470 = and i32 %2469, 1
  %2471 = xor i32 %2467, %2470
  %2472 = add nuw nsw i32 %2471, %2467
  %2473 = icmp eq i32 %2472, 2
  %2474 = zext i1 %2473 to i8
  store i8 %2474, i8* %39, align 1
  %2475 = sext i32 %2459 to i64
  store i64 %2475, i64* %RDX.i2171, align 8
  %2476 = shl nsw i64 %2475, 3
  %2477 = add nsw i64 %2476, 552
  %2478 = add i64 %2477, %2453
  %2479 = add i64 %2446, 27
  store i64 %2479, i64* %3, align 8
  %2480 = inttoptr i64 %2478 to i64*
  %2481 = load i64, i64* %2480, align 8
  store i64 %2481, i64* %RAX.i186, align 8
  %2482 = add i64 %2446, 31
  store i64 %2482, i64* %3, align 8
  %2483 = load i64, i64* %2448, align 8
  store i64 %2483, i64* %RDX.i2171, align 8
  %2484 = add i64 %2483, 48
  %2485 = add i64 %2446, 35
  store i64 %2485, i64* %3, align 8
  %2486 = inttoptr i64 %2484 to i64*
  %2487 = load i64, i64* %2486, align 8
  store i64 %2487, i64* %RDX.i2171, align 8
  %2488 = add i64 %2446, 38
  store i64 %2488, i64* %3, align 8
  %2489 = load i32, i32* %2456, align 4
  %2490 = shl i32 %2489, 1
  %2491 = or i32 %2490, 1
  %2492 = zext i32 %2491 to i64
  store i64 %2492, i64* %RCX.i1954, align 8
  store i8 0, i8* %14, align 1
  %2493 = and i32 %2491, 255
  %2494 = tail call i32 @llvm.ctpop.i32(i32 %2493)
  %2495 = trunc i32 %2494 to i8
  %2496 = and i8 %2495, 1
  %2497 = xor i8 %2496, 1
  store i8 %2497, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %2498 = lshr i32 %2489, 30
  %2499 = and i32 %2498, 1
  %2500 = trunc i32 %2499 to i8
  store i8 %2500, i8* %33, align 1
  %2501 = lshr i32 %2489, 30
  %2502 = and i32 %2501, 1
  %2503 = xor i32 %2499, %2502
  %2504 = add nuw nsw i32 %2503, %2499
  %2505 = icmp eq i32 %2504, 2
  %2506 = zext i1 %2505 to i8
  store i8 %2506, i8* %39, align 1
  %2507 = sext i32 %2491 to i64
  store i64 %2507, i64* %RSI.i2074, align 8
  %2508 = shl nsw i64 %2507, 3
  %2509 = add nsw i64 %2508, 24
  %2510 = add i64 %2509, %2487
  %2511 = add i64 %2446, 51
  store i64 %2511, i64* %3, align 8
  %2512 = inttoptr i64 %2510 to i64*
  store i64 %2481, i64* %2512, align 8
  %2513 = load i64, i64* %RBP.i, align 8
  %2514 = add i64 %2513, -8
  %2515 = load i64, i64* %3, align 8
  %2516 = add i64 %2515, 4
  store i64 %2516, i64* %3, align 8
  %2517 = inttoptr i64 %2514 to i64*
  %2518 = load i64, i64* %2517, align 8
  store i64 %2518, i64* %RAX.i186, align 8
  %2519 = add i64 %2518, 40
  %2520 = add i64 %2515, 8
  store i64 %2520, i64* %3, align 8
  %2521 = inttoptr i64 %2519 to i64*
  %2522 = load i64, i64* %2521, align 8
  store i64 %2522, i64* %RAX.i186, align 8
  %2523 = add i64 %2513, -12
  %2524 = add i64 %2515, 11
  store i64 %2524, i64* %3, align 8
  %2525 = inttoptr i64 %2523 to i32*
  %2526 = load i32, i32* %2525, align 4
  %2527 = shl i32 %2526, 1
  %2528 = icmp slt i32 %2526, 0
  %2529 = icmp slt i32 %2527, 0
  %2530 = xor i1 %2528, %2529
  %2531 = zext i32 %2527 to i64
  store i64 %2531, i64* %RCX.i1954, align 8
  %.lobit81 = lshr i32 %2526, 31
  %2532 = trunc i32 %.lobit81 to i8
  store i8 %2532, i8* %14, align 1
  %2533 = and i32 %2527, 254
  %2534 = tail call i32 @llvm.ctpop.i32(i32 %2533)
  %2535 = trunc i32 %2534 to i8
  %2536 = and i8 %2535, 1
  %2537 = xor i8 %2536, 1
  store i8 %2537, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2538 = icmp eq i32 %2527, 0
  %2539 = zext i1 %2538 to i8
  store i8 %2539, i8* %30, align 1
  %2540 = lshr i32 %2526, 30
  %2541 = trunc i32 %2540 to i8
  %2542 = and i8 %2541, 1
  store i8 %2542, i8* %33, align 1
  %2543 = zext i1 %2530 to i8
  store i8 %2543, i8* %39, align 1
  %2544 = sext i32 %2527 to i64
  store i64 %2544, i64* %RDX.i2171, align 8
  %2545 = shl nsw i64 %2544, 3
  %2546 = add nsw i64 %2545, 1080
  %2547 = add i64 %2546, %2522
  %2548 = add i64 %2515, 24
  store i64 %2548, i64* %3, align 8
  %2549 = inttoptr i64 %2547 to i64*
  %2550 = load i64, i64* %2549, align 8
  store i64 %2550, i64* %RAX.i186, align 8
  %2551 = add i64 %2515, 28
  store i64 %2551, i64* %3, align 8
  %2552 = load i64, i64* %2517, align 8
  store i64 %2552, i64* %RDX.i2171, align 8
  %2553 = add i64 %2552, 56
  %2554 = add i64 %2515, 32
  store i64 %2554, i64* %3, align 8
  %2555 = inttoptr i64 %2553 to i64*
  %2556 = load i64, i64* %2555, align 8
  store i64 %2556, i64* %RDX.i2171, align 8
  %2557 = add i64 %2515, 35
  store i64 %2557, i64* %3, align 8
  %2558 = load i32, i32* %2525, align 4
  %2559 = shl i32 %2558, 1
  %2560 = icmp slt i32 %2558, 0
  %2561 = icmp slt i32 %2559, 0
  %2562 = xor i1 %2560, %2561
  %2563 = zext i32 %2559 to i64
  store i64 %2563, i64* %RCX.i1954, align 8
  %.lobit82 = lshr i32 %2558, 31
  %2564 = trunc i32 %.lobit82 to i8
  store i8 %2564, i8* %14, align 1
  %2565 = and i32 %2559, 254
  %2566 = tail call i32 @llvm.ctpop.i32(i32 %2565)
  %2567 = trunc i32 %2566 to i8
  %2568 = and i8 %2567, 1
  %2569 = xor i8 %2568, 1
  store i8 %2569, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %2570 = icmp eq i32 %2559, 0
  %2571 = zext i1 %2570 to i8
  store i8 %2571, i8* %30, align 1
  %2572 = lshr i32 %2558, 30
  %2573 = trunc i32 %2572 to i8
  %2574 = and i8 %2573, 1
  store i8 %2574, i8* %33, align 1
  %2575 = zext i1 %2562 to i8
  store i8 %2575, i8* %39, align 1
  %2576 = sext i32 %2559 to i64
  store i64 %2576, i64* %RSI.i2074, align 8
  %2577 = shl nsw i64 %2576, 3
  %2578 = add nsw i64 %2577, 24
  %2579 = add i64 %2578, %2556
  %2580 = add i64 %2515, 45
  store i64 %2580, i64* %3, align 8
  %2581 = inttoptr i64 %2579 to i64*
  store i64 %2550, i64* %2581, align 8
  %2582 = load i64, i64* %RBP.i, align 8
  %2583 = add i64 %2582, -8
  %2584 = load i64, i64* %3, align 8
  %2585 = add i64 %2584, 4
  store i64 %2585, i64* %3, align 8
  %2586 = inttoptr i64 %2583 to i64*
  %2587 = load i64, i64* %2586, align 8
  store i64 %2587, i64* %RAX.i186, align 8
  %2588 = add i64 %2587, 40
  %2589 = add i64 %2584, 8
  store i64 %2589, i64* %3, align 8
  %2590 = inttoptr i64 %2588 to i64*
  %2591 = load i64, i64* %2590, align 8
  store i64 %2591, i64* %RAX.i186, align 8
  %2592 = add i64 %2582, -12
  %2593 = add i64 %2584, 11
  store i64 %2593, i64* %3, align 8
  %2594 = inttoptr i64 %2592 to i32*
  %2595 = load i32, i32* %2594, align 4
  %2596 = shl i32 %2595, 1
  %2597 = or i32 %2596, 1
  %2598 = zext i32 %2597 to i64
  store i64 %2598, i64* %RCX.i1954, align 8
  store i8 0, i8* %14, align 1
  %2599 = and i32 %2597, 255
  %2600 = tail call i32 @llvm.ctpop.i32(i32 %2599)
  %2601 = trunc i32 %2600 to i8
  %2602 = and i8 %2601, 1
  %2603 = xor i8 %2602, 1
  store i8 %2603, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %2604 = lshr i32 %2595, 30
  %2605 = and i32 %2604, 1
  %2606 = trunc i32 %2605 to i8
  store i8 %2606, i8* %33, align 1
  %2607 = lshr i32 %2595, 30
  %2608 = and i32 %2607, 1
  %2609 = xor i32 %2605, %2608
  %2610 = add nuw nsw i32 %2609, %2605
  %2611 = icmp eq i32 %2610, 2
  %2612 = zext i1 %2611 to i8
  store i8 %2612, i8* %39, align 1
  %2613 = sext i32 %2597 to i64
  store i64 %2613, i64* %RDX.i2171, align 8
  %2614 = shl nsw i64 %2613, 3
  %2615 = add nsw i64 %2614, 1080
  %2616 = add i64 %2615, %2591
  %2617 = add i64 %2584, 27
  store i64 %2617, i64* %3, align 8
  %2618 = inttoptr i64 %2616 to i64*
  %2619 = load i64, i64* %2618, align 8
  store i64 %2619, i64* %RAX.i186, align 8
  %2620 = add i64 %2584, 31
  store i64 %2620, i64* %3, align 8
  %2621 = load i64, i64* %2586, align 8
  store i64 %2621, i64* %RDX.i2171, align 8
  %2622 = add i64 %2621, 56
  %2623 = add i64 %2584, 35
  store i64 %2623, i64* %3, align 8
  %2624 = inttoptr i64 %2622 to i64*
  %2625 = load i64, i64* %2624, align 8
  store i64 %2625, i64* %RDX.i2171, align 8
  %2626 = add i64 %2584, 38
  store i64 %2626, i64* %3, align 8
  %2627 = load i32, i32* %2594, align 4
  %2628 = shl i32 %2627, 1
  %2629 = or i32 %2628, 1
  %2630 = zext i32 %2629 to i64
  store i64 %2630, i64* %RCX.i1954, align 8
  store i8 0, i8* %14, align 1
  %2631 = and i32 %2629, 255
  %2632 = tail call i32 @llvm.ctpop.i32(i32 %2631)
  %2633 = trunc i32 %2632 to i8
  %2634 = and i8 %2633, 1
  %2635 = xor i8 %2634, 1
  store i8 %2635, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %2636 = lshr i32 %2627, 30
  %2637 = and i32 %2636, 1
  %2638 = trunc i32 %2637 to i8
  store i8 %2638, i8* %33, align 1
  %2639 = lshr i32 %2627, 30
  %2640 = and i32 %2639, 1
  %2641 = xor i32 %2637, %2640
  %2642 = add nuw nsw i32 %2641, %2637
  %2643 = icmp eq i32 %2642, 2
  %2644 = zext i1 %2643 to i8
  store i8 %2644, i8* %39, align 1
  %2645 = sext i32 %2629 to i64
  store i64 %2645, i64* %RSI.i2074, align 8
  %2646 = shl nsw i64 %2645, 3
  %2647 = add nsw i64 %2646, 24
  %2648 = add i64 %2647, %2625
  %2649 = add i64 %2584, 51
  store i64 %2649, i64* %3, align 8
  %2650 = inttoptr i64 %2648 to i64*
  store i64 %2619, i64* %2650, align 8
  %2651 = load i64, i64* %RBP.i, align 8
  %2652 = add i64 %2651, -12
  %2653 = load i64, i64* %3, align 8
  %2654 = add i64 %2653, 3
  store i64 %2654, i64* %3, align 8
  %2655 = inttoptr i64 %2652 to i32*
  %2656 = load i32, i32* %2655, align 4
  %2657 = add i32 %2656, 1
  %2658 = zext i32 %2657 to i64
  store i64 %2658, i64* %RAX.i186, align 8
  %2659 = icmp eq i32 %2656, -1
  %2660 = icmp eq i32 %2657, 0
  %2661 = or i1 %2659, %2660
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %14, align 1
  %2663 = and i32 %2657, 255
  %2664 = tail call i32 @llvm.ctpop.i32(i32 %2663)
  %2665 = trunc i32 %2664 to i8
  %2666 = and i8 %2665, 1
  %2667 = xor i8 %2666, 1
  store i8 %2667, i8* %21, align 1
  %2668 = xor i32 %2657, %2656
  %2669 = lshr i32 %2668, 4
  %2670 = trunc i32 %2669 to i8
  %2671 = and i8 %2670, 1
  store i8 %2671, i8* %27, align 1
  %2672 = zext i1 %2660 to i8
  store i8 %2672, i8* %30, align 1
  %2673 = lshr i32 %2657, 31
  %2674 = trunc i32 %2673 to i8
  store i8 %2674, i8* %33, align 1
  %2675 = lshr i32 %2656, 31
  %2676 = xor i32 %2673, %2675
  %2677 = add nuw nsw i32 %2676, %2673
  %2678 = icmp eq i32 %2677, 2
  %2679 = zext i1 %2678 to i8
  store i8 %2679, i8* %39, align 1
  %2680 = add i64 %2653, 9
  store i64 %2680, i64* %3, align 8
  store i32 %2657, i32* %2655, align 4
  %2681 = load i64, i64* %3, align 8
  %2682 = add i64 %2681, -225
  store i64 %2682, i64* %3, align 8
  br label %block_.L_450649

block_.L_45072f:                                  ; preds = %block_.L_450649
  %2683 = add i64 %2378, 5
  store i64 %2683, i64* %3, align 8
  br label %block_.L_450734

block_.L_450734:                                  ; preds = %block_.L_4502f9, %block_.L_45072f
  %2684 = phi i64 [ %2345, %block_.L_45072f ], [ %1977, %block_.L_4502f9 ]
  %2685 = phi i64 [ %2683, %block_.L_45072f ], [ %2000, %block_.L_4502f9 ]
  %2686 = add i64 %2685, 67
  store i64 %2686, i64* %3, align 8
  br label %block_.L_450777

block_.L_450739:                                  ; preds = %entry
  %2687 = add i64 %89, 4
  store i64 %2687, i64* %3, align 8
  %2688 = load i64, i64* %70, align 8
  store i64 %2688, i64* %RAX.i186, align 8
  %2689 = add i64 %2688, 48
  %2690 = add i64 %89, 12
  store i64 %2690, i64* %3, align 8
  %2691 = inttoptr i64 %2689 to i64*
  store i64 0, i64* %2691, align 8
  %2692 = load i64, i64* %RBP.i, align 8
  %2693 = add i64 %2692, -8
  %2694 = load i64, i64* %3, align 8
  %2695 = add i64 %2694, 4
  store i64 %2695, i64* %3, align 8
  %2696 = inttoptr i64 %2693 to i64*
  %2697 = load i64, i64* %2696, align 8
  store i64 %2697, i64* %RAX.i186, align 8
  %2698 = add i64 %2697, 56
  %2699 = add i64 %2694, 12
  store i64 %2699, i64* %3, align 8
  %2700 = inttoptr i64 %2698 to i64*
  store i64 0, i64* %2700, align 8
  %2701 = load i64, i64* %RBP.i, align 8
  %2702 = add i64 %2701, -8
  %2703 = load i64, i64* %3, align 8
  %2704 = add i64 %2703, 4
  store i64 %2704, i64* %3, align 8
  %2705 = inttoptr i64 %2702 to i64*
  %2706 = load i64, i64* %2705, align 8
  store i64 %2706, i64* %RAX.i186, align 8
  %2707 = add i64 %2706, 40
  %2708 = add i64 %2703, 8
  store i64 %2708, i64* %3, align 8
  %2709 = inttoptr i64 %2707 to i64*
  %2710 = load i64, i64* %2709, align 8
  store i64 %2710, i64* %RAX.i186, align 8
  %2711 = add i64 %2710, 6528
  %2712 = add i64 %2703, 19
  store i64 %2712, i64* %3, align 8
  %2713 = inttoptr i64 %2711 to i64*
  store i64 0, i64* %2713, align 8
  %2714 = load i64, i64* %RBP.i, align 8
  %2715 = add i64 %2714, -8
  %2716 = load i64, i64* %3, align 8
  %2717 = add i64 %2716, 4
  store i64 %2717, i64* %3, align 8
  %2718 = inttoptr i64 %2715 to i64*
  %2719 = load i64, i64* %2718, align 8
  store i64 %2719, i64* %RAX.i186, align 8
  %2720 = add i64 %2719, 40
  %2721 = add i64 %2716, 8
  store i64 %2721, i64* %3, align 8
  %2722 = inttoptr i64 %2720 to i64*
  %2723 = load i64, i64* %2722, align 8
  store i64 %2723, i64* %RAX.i186, align 8
  %2724 = add i64 %2723, 6536
  %2725 = add i64 %2716, 19
  store i64 %2725, i64* %3, align 8
  %2726 = inttoptr i64 %2724 to i64*
  store i64 0, i64* %2726, align 8
  %.pre285 = load i64, i64* %RBP.i, align 8
  %.pre286 = load i64, i64* %3, align 8
  %.pre489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %.pre490 = getelementptr inbounds %union.anon, %union.anon* %.pre489, i64 0, i32 0
  %.pre491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %.pre493 = getelementptr inbounds %union.anon, %union.anon* %.pre491, i64 0, i32 0
  %.pre494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %.pre496 = getelementptr inbounds %union.anon, %union.anon* %.pre494, i64 0, i32 0
  %.pre497 = bitcast %union.anon* %.pre494 to i32*
  %.pre498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %.pre500 = bitcast %union.anon* %.pre491 to i32*
  %.pre502 = bitcast %union.anon* %.pre489 to i32*
  %.pre503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %.pre505 = bitcast %union.anon* %.pre503 to i32*
  %.pre506 = getelementptr inbounds %union.anon, %union.anon* %.pre503, i64 0, i32 0
  br label %block_.L_450777

block_.L_450777:                                  ; preds = %block_.L_450739, %block_.L_450734
  %.pre-phi507 = phi i64* [ %.pre506, %block_.L_450739 ], [ %125, %block_.L_450734 ]
  %R8D.i4270.pre-phi = phi i32* [ %.pre505, %block_.L_450739 ], [ %R8D.i2329, %block_.L_450734 ]
  %ECX.i4390.pre-phi = phi i32* [ %.pre502, %block_.L_450739 ], [ %ECX.i3337, %block_.L_450734 ]
  %.pre-phi501 = phi i32* [ %.pre500, %block_.L_450739 ], [ %EDX.i2250, %block_.L_450734 ]
  %.pre-phi499 = phi i64* [ %.pre498, %block_.L_450739 ], [ %121, %block_.L_450734 ]
  %ESI.i4400.pre-phi = phi i32* [ %.pre497, %block_.L_450739 ], [ %ESI.i5604, %block_.L_450734 ]
  %RSI.i4407.pre-phi = phi i64* [ %.pre496, %block_.L_450739 ], [ %RSI.i2074, %block_.L_450734 ]
  %.pre-phi495 = phi %union.anon* [ %.pre494, %block_.L_450739 ], [ %97, %block_.L_450734 ]
  %RDX.i4411.pre-phi = phi i64* [ %.pre493, %block_.L_450739 ], [ %RDX.i2171, %block_.L_450734 ]
  %RCX.i4414.pre-phi = phi i64* [ %.pre490, %block_.L_450739 ], [ %RCX.i1954, %block_.L_450734 ]
  %.pre-phi = phi %union.anon* [ %.pre489, %block_.L_450739 ], [ %90, %block_.L_450734 ]
  %2727 = phi i64 [ %.pre286, %block_.L_450739 ], [ %2686, %block_.L_450734 ]
  %2728 = phi i64 [ %.pre285, %block_.L_450739 ], [ %2684, %block_.L_450734 ]
  %MEMORY.7 = phi %struct.Memory* [ %2, %block_.L_450739 ], [ %call2_45030e, %block_.L_450734 ]
  %2729 = add i64 %2728, -16
  %2730 = add i64 %2727, 7
  store i64 %2730, i64* %3, align 8
  %2731 = inttoptr i64 %2729 to i32*
  store i32 0, i32* %2731, align 4
  %.pre287 = load i64, i64* %3, align 8
  br label %block_.L_45077e

block_.L_45077e:                                  ; preds = %block_.L_450c28, %block_.L_450777
  %2732 = phi i64 [ %.pre287, %block_.L_450777 ], [ %4305, %block_.L_450c28 ]
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.7, %block_.L_450777 ], [ %2867, %block_.L_450c28 ]
  store i64 4, i64* %RAX.i186, align 8
  %2733 = load i64, i64* %RBP.i, align 8
  %2734 = add i64 %2733, -16
  %2735 = add i64 %2732, 8
  store i64 %2735, i64* %3, align 8
  %2736 = inttoptr i64 %2734 to i32*
  %2737 = load i32, i32* %2736, align 4
  %2738 = zext i32 %2737 to i64
  store i64 %2738, i64* %RCX.i4414.pre-phi, align 8
  %2739 = add i64 %2733, -8
  %2740 = add i64 %2732, 12
  store i64 %2740, i64* %3, align 8
  %2741 = inttoptr i64 %2739 to i64*
  %2742 = load i64, i64* %2741, align 8
  store i64 %2742, i64* %RDX.i4411.pre-phi, align 8
  %2743 = add i64 %2742, 40
  %2744 = add i64 %2732, 16
  store i64 %2744, i64* %3, align 8
  %2745 = inttoptr i64 %2743 to i64*
  %2746 = load i64, i64* %2745, align 8
  store i64 %2746, i64* %RDX.i4411.pre-phi, align 8
  %2747 = add i64 %2746, 6396
  %2748 = add i64 %2732, 22
  store i64 %2748, i64* %3, align 8
  %2749 = inttoptr i64 %2747 to i32*
  %2750 = load i32, i32* %2749, align 4
  %2751 = zext i32 %2750 to i64
  store i64 %2751, i64* %RSI.i4407.pre-phi, align 8
  %2752 = add i64 %2733, -156
  %2753 = add i64 %2732, 28
  store i64 %2753, i64* %3, align 8
  %2754 = inttoptr i64 %2752 to i32*
  store i32 4, i32* %2754, align 4
  %2755 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %2756 = zext i32 %2755 to i64
  %2757 = load i64, i64* %3, align 8
  store i64 %2756, i64* %RAX.i186, align 8
  %2758 = sext i32 %2755 to i64
  %2759 = lshr i64 %2758, 32
  store i64 %2759, i64* %.pre-phi499, align 8
  %2760 = load i64, i64* %RBP.i, align 8
  %2761 = add i64 %2760, -156
  %2762 = add i64 %2757, 9
  store i64 %2762, i64* %3, align 8
  %2763 = inttoptr i64 %2761 to i32*
  %2764 = load i32, i32* %2763, align 4
  %2765 = zext i32 %2764 to i64
  store i64 %2765, i64* %RSI.i4407.pre-phi, align 8
  %2766 = add i64 %2757, 11
  store i64 %2766, i64* %3, align 8
  %2767 = sext i32 %2764 to i64
  %2768 = shl nuw i64 %2759, 32
  %2769 = or i64 %2768, %2756
  %2770 = sdiv i64 %2769, %2767
  %2771 = shl i64 %2770, 32
  %2772 = ashr exact i64 %2771, 32
  %2773 = icmp eq i64 %2770, %2772
  br i1 %2773, label %2776, label %2774

; <label>:2774:                                   ; preds = %block_.L_45077e
  %2775 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2766, %struct.Memory* %MEMORY.8)
  %.pre288 = load i32, i32* %EAX.i304, align 4
  %.pre289 = load i64, i64* %3, align 8
  %.pre290 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit4393

; <label>:2776:                                   ; preds = %block_.L_45077e
  %2777 = srem i64 %2769, %2767
  %2778 = and i64 %2770, 4294967295
  store i64 %2778, i64* %RAX.i186, align 8
  %2779 = and i64 %2777, 4294967295
  store i64 %2779, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2780 = trunc i64 %2770 to i32
  br label %routine_idivl__esi.exit4393

routine_idivl__esi.exit4393:                      ; preds = %2776, %2774
  %2781 = phi i64 [ %.pre290, %2774 ], [ %2760, %2776 ]
  %2782 = phi i64 [ %.pre289, %2774 ], [ %2766, %2776 ]
  %2783 = phi i32 [ %.pre288, %2774 ], [ %2780, %2776 ]
  %2784 = phi %struct.Memory* [ %2775, %2774 ], [ %MEMORY.8, %2776 ]
  %2785 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %2786 = sub i32 %2785, %2783
  %2787 = icmp ult i32 %2785, %2783
  %2788 = zext i1 %2787 to i8
  store i8 %2788, i8* %14, align 1
  %2789 = and i32 %2786, 255
  %2790 = tail call i32 @llvm.ctpop.i32(i32 %2789)
  %2791 = trunc i32 %2790 to i8
  %2792 = and i8 %2791, 1
  %2793 = xor i8 %2792, 1
  store i8 %2793, i8* %21, align 1
  %2794 = xor i32 %2783, %2785
  %2795 = xor i32 %2794, %2786
  %2796 = lshr i32 %2795, 4
  %2797 = trunc i32 %2796 to i8
  %2798 = and i8 %2797, 1
  store i8 %2798, i8* %27, align 1
  %2799 = icmp eq i32 %2786, 0
  %2800 = zext i1 %2799 to i8
  store i8 %2800, i8* %30, align 1
  %2801 = lshr i32 %2786, 31
  %2802 = trunc i32 %2801 to i8
  store i8 %2802, i8* %33, align 1
  %2803 = lshr i32 %2785, 31
  %2804 = lshr i32 %2783, 31
  %2805 = xor i32 %2804, %2803
  %2806 = xor i32 %2801, %2803
  %2807 = add nuw nsw i32 %2806, %2805
  %2808 = icmp eq i32 %2807, 2
  %2809 = zext i1 %2808 to i8
  store i8 %2809, i8* %39, align 1
  %2810 = icmp ne i8 %2802, 0
  %2811 = xor i1 %2810, %2808
  %.v531 = select i1 %2811, i64 8, i64 1174
  %2812 = add i64 %2782, %.v531
  store i64 %2812, i64* %3, align 8
  br i1 %2811, label %block_4507ad, label %block_.L_450c3b

block_4507ad:                                     ; preds = %routine_idivl__esi.exit4393
  %2813 = add i64 %2781, -12
  %2814 = add i64 %2812, 7
  store i64 %2814, i64* %3, align 8
  %2815 = inttoptr i64 %2813 to i32*
  store i32 0, i32* %2815, align 4
  %.pre464 = load i64, i64* %3, align 8
  br label %block_.L_4507b4

block_.L_4507b4:                                  ; preds = %block_.L_450c15, %block_4507ad
  %2816 = phi i64 [ %.pre464, %block_4507ad ], [ %4274, %block_.L_450c15 ]
  %MEMORY.9 = phi %struct.Memory* [ %2784, %block_4507ad ], [ %MEMORY.17, %block_.L_450c15 ]
  store i64 4, i64* %RAX.i186, align 8
  %2817 = load i64, i64* %RBP.i, align 8
  %2818 = add i64 %2817, -12
  %2819 = add i64 %2816, 8
  store i64 %2819, i64* %3, align 8
  %2820 = inttoptr i64 %2818 to i32*
  %2821 = load i32, i32* %2820, align 4
  %2822 = zext i32 %2821 to i64
  store i64 %2822, i64* %RCX.i4414.pre-phi, align 8
  %2823 = add i64 %2817, -8
  %2824 = add i64 %2816, 12
  store i64 %2824, i64* %3, align 8
  %2825 = inttoptr i64 %2823 to i64*
  %2826 = load i64, i64* %2825, align 8
  store i64 %2826, i64* %RDX.i4411.pre-phi, align 8
  %2827 = add i64 %2826, 40
  %2828 = add i64 %2816, 16
  store i64 %2828, i64* %3, align 8
  %2829 = inttoptr i64 %2827 to i64*
  %2830 = load i64, i64* %2829, align 8
  store i64 %2830, i64* %RDX.i4411.pre-phi, align 8
  %2831 = add i64 %2830, 6392
  %2832 = add i64 %2816, 22
  store i64 %2832, i64* %3, align 8
  %2833 = inttoptr i64 %2831 to i32*
  %2834 = load i32, i32* %2833, align 4
  %2835 = zext i32 %2834 to i64
  store i64 %2835, i64* %RSI.i4407.pre-phi, align 8
  %2836 = add i64 %2817, -160
  %2837 = add i64 %2816, 28
  store i64 %2837, i64* %3, align 8
  %2838 = inttoptr i64 %2836 to i32*
  store i32 4, i32* %2838, align 4
  %2839 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %2840 = zext i32 %2839 to i64
  %2841 = load i64, i64* %3, align 8
  store i64 %2840, i64* %RAX.i186, align 8
  %2842 = sext i32 %2839 to i64
  %2843 = lshr i64 %2842, 32
  store i64 %2843, i64* %.pre-phi499, align 8
  %2844 = load i64, i64* %RBP.i, align 8
  %2845 = add i64 %2844, -160
  %2846 = add i64 %2841, 9
  store i64 %2846, i64* %3, align 8
  %2847 = inttoptr i64 %2845 to i32*
  %2848 = load i32, i32* %2847, align 4
  %2849 = zext i32 %2848 to i64
  store i64 %2849, i64* %RSI.i4407.pre-phi, align 8
  %2850 = add i64 %2841, 11
  store i64 %2850, i64* %3, align 8
  %2851 = sext i32 %2848 to i64
  %2852 = shl nuw i64 %2843, 32
  %2853 = or i64 %2852, %2840
  %2854 = sdiv i64 %2853, %2851
  %2855 = shl i64 %2854, 32
  %2856 = ashr exact i64 %2855, 32
  %2857 = icmp eq i64 %2854, %2856
  br i1 %2857, label %2860, label %2858

; <label>:2858:                                   ; preds = %block_.L_4507b4
  %2859 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2850, %struct.Memory* %MEMORY.9)
  %.pre465 = load i32, i32* %EAX.i304, align 4
  %.pre466 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit4358

; <label>:2860:                                   ; preds = %block_.L_4507b4
  %2861 = srem i64 %2853, %2851
  %2862 = and i64 %2854, 4294967295
  store i64 %2862, i64* %RAX.i186, align 8
  %2863 = and i64 %2861, 4294967295
  store i64 %2863, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2864 = trunc i64 %2854 to i32
  br label %routine_idivl__esi.exit4358

routine_idivl__esi.exit4358:                      ; preds = %2860, %2858
  %2865 = phi i64 [ %.pre466, %2858 ], [ %2850, %2860 ]
  %2866 = phi i32 [ %.pre465, %2858 ], [ %2864, %2860 ]
  %2867 = phi %struct.Memory* [ %2859, %2858 ], [ %MEMORY.9, %2860 ]
  %2868 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %2869 = sub i32 %2868, %2866
  %2870 = icmp ult i32 %2868, %2866
  %2871 = zext i1 %2870 to i8
  store i8 %2871, i8* %14, align 1
  %2872 = and i32 %2869, 255
  %2873 = tail call i32 @llvm.ctpop.i32(i32 %2872)
  %2874 = trunc i32 %2873 to i8
  %2875 = and i8 %2874, 1
  %2876 = xor i8 %2875, 1
  store i8 %2876, i8* %21, align 1
  %2877 = xor i32 %2866, %2868
  %2878 = xor i32 %2877, %2869
  %2879 = lshr i32 %2878, 4
  %2880 = trunc i32 %2879 to i8
  %2881 = and i8 %2880, 1
  store i8 %2881, i8* %27, align 1
  %2882 = icmp eq i32 %2869, 0
  %2883 = zext i1 %2882 to i8
  store i8 %2883, i8* %30, align 1
  %2884 = lshr i32 %2869, 31
  %2885 = trunc i32 %2884 to i8
  store i8 %2885, i8* %33, align 1
  %2886 = lshr i32 %2868, 31
  %2887 = lshr i32 %2866, 31
  %2888 = xor i32 %2887, %2886
  %2889 = xor i32 %2884, %2886
  %2890 = add nuw nsw i32 %2889, %2888
  %2891 = icmp eq i32 %2890, 2
  %2892 = zext i1 %2891 to i8
  store i8 %2892, i8* %39, align 1
  %2893 = icmp ne i8 %2885, 0
  %2894 = xor i1 %2893, %2891
  %.v549 = select i1 %2894, i64 8, i64 1101
  %2895 = add i64 %2865, %.v549
  %2896 = add i64 %2895, 5
  store i64 %2896, i64* %3, align 8
  br i1 %2894, label %block_4507e3, label %block_.L_450c28

block_4507e3:                                     ; preds = %routine_idivl__esi.exit4358
  store i64 2, i64* %RAX.i186, align 8
  store i64 16, i64* %RCX.i4414.pre-phi, align 8
  store i64 4, i64* %RDX.i4411.pre-phi, align 8
  %2897 = load i64, i64* %RBP.i, align 8
  %2898 = add i64 %2897, -12
  %2899 = add i64 %2895, 18
  store i64 %2899, i64* %3, align 8
  %2900 = inttoptr i64 %2898 to i32*
  %2901 = load i32, i32* %2900, align 4
  %2902 = zext i32 %2901 to i64
  store i64 %2902, i64* %RSI.i4407.pre-phi, align 8
  %2903 = add i64 %2897, -164
  %2904 = add i64 %2895, 24
  store i64 %2904, i64* %3, align 8
  %2905 = inttoptr i64 %2903 to i32*
  store i32 2, i32* %2905, align 4
  %2906 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %2907 = zext i32 %2906 to i64
  %2908 = load i64, i64* %3, align 8
  store i64 %2907, i64* %RAX.i186, align 8
  %2909 = load i64, i64* %RBP.i, align 8
  %2910 = add i64 %2909, -168
  %2911 = load i32, i32* %.pre-phi501, align 4
  %2912 = add i64 %2908, 8
  store i64 %2912, i64* %3, align 8
  %2913 = inttoptr i64 %2910 to i32*
  store i32 %2911, i32* %2913, align 4
  %2914 = load i64, i64* %3, align 8
  %2915 = load i32, i32* %EAX.i304, align 8
  %2916 = sext i32 %2915 to i64
  %2917 = lshr i64 %2916, 32
  store i64 %2917, i64* %.pre-phi499, align 8
  %2918 = load i64, i64* %RBP.i, align 8
  %2919 = add i64 %2918, -168
  %2920 = add i64 %2914, 7
  store i64 %2920, i64* %3, align 8
  %2921 = inttoptr i64 %2919 to i32*
  %2922 = load i32, i32* %2921, align 4
  %2923 = zext i32 %2922 to i64
  store i64 %2923, i64* %RSI.i4407.pre-phi, align 8
  %2924 = add i64 %2914, 9
  store i64 %2924, i64* %3, align 8
  %2925 = zext i32 %2915 to i64
  %2926 = sext i32 %2922 to i64
  %2927 = shl nuw i64 %2917, 32
  %2928 = or i64 %2927, %2925
  %2929 = sdiv i64 %2928, %2926
  %2930 = shl i64 %2929, 32
  %2931 = ashr exact i64 %2930, 32
  %2932 = icmp eq i64 %2929, %2931
  br i1 %2932, label %2935, label %2933

; <label>:2933:                                   ; preds = %block_4507e3
  %2934 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2924, %struct.Memory* %2867)
  %.pre467 = load i64, i64* %RBP.i, align 8
  %.pre468 = load i32, i32* %EAX.i304, align 4
  %.pre469 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit4326

; <label>:2935:                                   ; preds = %block_4507e3
  %2936 = srem i64 %2928, %2926
  %2937 = and i64 %2929, 4294967295
  store i64 %2937, i64* %RAX.i186, align 8
  %2938 = and i64 %2936, 4294967295
  store i64 %2938, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2939 = trunc i64 %2929 to i32
  br label %routine_idivl__esi.exit4326

routine_idivl__esi.exit4326:                      ; preds = %2935, %2933
  %2940 = phi i64 [ %.pre469, %2933 ], [ %2924, %2935 ]
  %2941 = phi i32 [ %.pre468, %2933 ], [ %2939, %2935 ]
  %2942 = phi i64 [ %.pre467, %2933 ], [ %2918, %2935 ]
  %2943 = phi %struct.Memory* [ %2934, %2933 ], [ %2867, %2935 ]
  %2944 = add i64 %2942, -28
  %2945 = add i64 %2940, 3
  store i64 %2945, i64* %3, align 8
  %2946 = inttoptr i64 %2944 to i32*
  store i32 %2941, i32* %2946, align 4
  %2947 = load i64, i64* %RBP.i, align 8
  %2948 = add i64 %2947, -16
  %2949 = load i64, i64* %3, align 8
  %2950 = add i64 %2949, 3
  store i64 %2950, i64* %3, align 8
  %2951 = inttoptr i64 %2948 to i32*
  %2952 = load i32, i32* %2951, align 4
  %2953 = zext i32 %2952 to i64
  store i64 %2953, i64* %RAX.i186, align 8
  %2954 = sext i32 %2952 to i64
  %2955 = lshr i64 %2954, 32
  store i64 %2955, i64* %.pre-phi499, align 8
  %2956 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %2957 = add i64 %2949, 6
  store i64 %2957, i64* %3, align 8
  %2958 = sext i32 %2956 to i64
  %2959 = shl nuw i64 %2955, 32
  %2960 = or i64 %2959, %2953
  %2961 = sdiv i64 %2960, %2958
  %2962 = shl i64 %2961, 32
  %2963 = ashr exact i64 %2962, 32
  %2964 = icmp eq i64 %2961, %2963
  br i1 %2964, label %2967, label %2965

; <label>:2965:                                   ; preds = %routine_idivl__esi.exit4326
  %2966 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2957, %struct.Memory* %2943)
  %.pre470 = load i64, i64* %RBP.i, align 8
  %.pre471 = load i32, i32* %EAX.i304, align 4
  %.pre472 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit4313

; <label>:2967:                                   ; preds = %routine_idivl__esi.exit4326
  %2968 = srem i64 %2960, %2958
  %2969 = and i64 %2961, 4294967295
  store i64 %2969, i64* %RAX.i186, align 8
  %2970 = and i64 %2968, 4294967295
  store i64 %2970, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %2971 = trunc i64 %2961 to i32
  br label %routine_idivl__esi.exit4313

routine_idivl__esi.exit4313:                      ; preds = %2967, %2965
  %2972 = phi i64 [ %.pre472, %2965 ], [ %2957, %2967 ]
  %2973 = phi i32 [ %.pre471, %2965 ], [ %2971, %2967 ]
  %2974 = phi i64 [ %.pre470, %2965 ], [ %2947, %2967 ]
  %2975 = phi %struct.Memory* [ %2966, %2965 ], [ %2943, %2967 ]
  %2976 = add i64 %2974, -32
  %2977 = add i64 %2972, 3
  store i64 %2977, i64* %3, align 8
  %2978 = inttoptr i64 %2976 to i32*
  store i32 %2973, i32* %2978, align 4
  %2979 = load i64, i64* %RBP.i, align 8
  %2980 = add i64 %2979, -8
  %2981 = load i64, i64* %3, align 8
  %2982 = add i64 %2981, 4
  store i64 %2982, i64* %3, align 8
  %2983 = inttoptr i64 %2980 to i64*
  %2984 = load i64, i64* %2983, align 8
  store i64 %2984, i64* %RDI.i126, align 8
  %2985 = add i64 %2984, 40
  %2986 = add i64 %2981, 8
  store i64 %2986, i64* %3, align 8
  %2987 = inttoptr i64 %2985 to i64*
  %2988 = load i64, i64* %2987, align 8
  store i64 %2988, i64* %RDI.i126, align 8
  %2989 = add i64 %2988, 6392
  %2990 = add i64 %2981, 14
  store i64 %2990, i64* %3, align 8
  %2991 = inttoptr i64 %2989 to i32*
  %2992 = load i32, i32* %2991, align 4
  %2993 = zext i32 %2992 to i64
  store i64 %2993, i64* %RAX.i186, align 8
  %2994 = sext i32 %2992 to i64
  %2995 = lshr i64 %2994, 32
  store i64 %2995, i64* %.pre-phi499, align 8
  %2996 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %2997 = add i64 %2981, 17
  store i64 %2997, i64* %3, align 8
  %2998 = sext i32 %2996 to i64
  %2999 = shl nuw i64 %2995, 32
  %3000 = or i64 %2999, %2993
  %3001 = sdiv i64 %3000, %2998
  %3002 = shl i64 %3001, 32
  %3003 = ashr exact i64 %3002, 32
  %3004 = icmp eq i64 %3001, %3003
  br i1 %3004, label %3007, label %3005

; <label>:3005:                                   ; preds = %routine_idivl__esi.exit4313
  %3006 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2997, %struct.Memory* %2975)
  %.pre473 = load i64, i64* %RAX.i186, align 8
  %.pre474 = load i64, i64* %3, align 8
  %.pre475 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit4295

; <label>:3007:                                   ; preds = %routine_idivl__esi.exit4313
  %3008 = srem i64 %3000, %2998
  %3009 = and i64 %3001, 4294967295
  store i64 %3009, i64* %RAX.i186, align 8
  %3010 = and i64 %3008, 4294967295
  store i64 %3010, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__ecx.exit4295

routine_idivl__ecx.exit4295:                      ; preds = %3007, %3005
  %3011 = phi i64 [ %.pre475, %3005 ], [ %2979, %3007 ]
  %3012 = phi i64 [ %.pre474, %3005 ], [ %2997, %3007 ]
  %3013 = phi i64 [ %.pre473, %3005 ], [ %3009, %3007 ]
  %3014 = phi %struct.Memory* [ %3006, %3005 ], [ %2975, %3007 ]
  %3015 = trunc i64 %3013 to i32
  %3016 = shl i32 %3015, 1
  %3017 = icmp slt i32 %3015, 0
  %3018 = icmp slt i32 %3016, 0
  %3019 = xor i1 %3017, %3018
  %3020 = zext i32 %3016 to i64
  store i64 %3020, i64* %RAX.i186, align 8
  %.lobit85 = lshr i32 %3015, 31
  %3021 = trunc i32 %.lobit85 to i8
  store i8 %3021, i8* %14, align 1
  %3022 = and i32 %3016, 254
  %3023 = tail call i32 @llvm.ctpop.i32(i32 %3022)
  %3024 = trunc i32 %3023 to i8
  %3025 = and i8 %3024, 1
  %3026 = xor i8 %3025, 1
  store i8 %3026, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3027 = icmp eq i32 %3016, 0
  %3028 = zext i1 %3027 to i8
  store i8 %3028, i8* %30, align 1
  %3029 = lshr i32 %3015, 30
  %3030 = trunc i32 %3029 to i8
  %3031 = and i8 %3030, 1
  store i8 %3031, i8* %33, align 1
  %3032 = zext i1 %3019 to i8
  store i8 %3032, i8* %39, align 1
  %3033 = add i64 %3011, -32
  %3034 = add i64 %3012, 5
  store i64 %3034, i64* %3, align 8
  %3035 = inttoptr i64 %3033 to i32*
  %3036 = load i32, i32* %3035, align 4
  %3037 = zext i32 %3036 to i64
  store i64 %3037, i64* %RCX.i4414.pre-phi, align 8
  %3038 = add i64 %3011, -172
  %3039 = add i64 %3012, 11
  store i64 %3039, i64* %3, align 8
  %3040 = inttoptr i64 %3038 to i32*
  store i32 %3016, i32* %3040, align 4
  %3041 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %3042 = zext i32 %3041 to i64
  %3043 = load i64, i64* %3, align 8
  store i64 %3042, i64* %RAX.i186, align 8
  %3044 = sext i32 %3041 to i64
  %3045 = lshr i64 %3044, 32
  store i64 %3045, i64* %.pre-phi499, align 8
  %3046 = load i64, i64* %RBP.i, align 8
  %3047 = add i64 %3046, -164
  %3048 = add i64 %3043, 9
  store i64 %3048, i64* %3, align 8
  %3049 = inttoptr i64 %3047 to i32*
  %3050 = load i32, i32* %3049, align 4
  %3051 = zext i32 %3050 to i64
  store i64 %3051, i64* %RCX.i4414.pre-phi, align 8
  %3052 = add i64 %3043, 11
  store i64 %3052, i64* %3, align 8
  %3053 = sext i32 %3050 to i64
  %3054 = shl nuw i64 %3045, 32
  %3055 = or i64 %3054, %3042
  %3056 = sdiv i64 %3055, %3053
  %3057 = shl i64 %3056, 32
  %3058 = ashr exact i64 %3057, 32
  %3059 = icmp eq i64 %3056, %3058
  br i1 %3059, label %3062, label %3060

; <label>:3060:                                   ; preds = %routine_idivl__ecx.exit4295
  %3061 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3052, %struct.Memory* %3014)
  %.pre476 = load i64, i64* %RBP.i, align 8
  %.pre477 = load i64, i64* %3, align 8
  %.pre478 = load i32, i32* %EAX.i304, align 4
  br label %routine_idivl__ecx.exit4274

; <label>:3062:                                   ; preds = %routine_idivl__ecx.exit4295
  %3063 = srem i64 %3055, %3053
  %3064 = and i64 %3056, 4294967295
  store i64 %3064, i64* %RAX.i186, align 8
  %3065 = and i64 %3063, 4294967295
  store i64 %3065, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3066 = trunc i64 %3056 to i32
  br label %routine_idivl__ecx.exit4274

routine_idivl__ecx.exit4274:                      ; preds = %3062, %3060
  %3067 = phi i32 [ %.pre478, %3060 ], [ %3066, %3062 ]
  %3068 = phi i64 [ %.pre477, %3060 ], [ %3052, %3062 ]
  %3069 = phi i64 [ %.pre476, %3060 ], [ %3046, %3062 ]
  %3070 = phi %struct.Memory* [ %3061, %3060 ], [ %3014, %3062 ]
  %3071 = add i64 %3069, -172
  %3072 = add i64 %3068, 7
  store i64 %3072, i64* %3, align 8
  %3073 = inttoptr i64 %3071 to i32*
  %3074 = load i32, i32* %3073, align 4
  %3075 = sext i32 %3074 to i64
  %3076 = sext i32 %3067 to i64
  %3077 = mul nsw i64 %3076, %3075
  %3078 = trunc i64 %3077 to i32
  %3079 = and i64 %3077, 4294967295
  store i64 %3079, i64* %.pre-phi507, align 8
  %3080 = shl i64 %3077, 32
  %3081 = ashr exact i64 %3080, 32
  %3082 = icmp ne i64 %3081, %3077
  %3083 = zext i1 %3082 to i8
  store i8 %3083, i8* %14, align 1
  %3084 = and i32 %3078, 255
  %3085 = tail call i32 @llvm.ctpop.i32(i32 %3084)
  %3086 = trunc i32 %3085 to i8
  %3087 = and i8 %3086, 1
  %3088 = xor i8 %3087, 1
  store i8 %3088, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %3089 = lshr i32 %3078, 31
  %3090 = trunc i32 %3089 to i8
  store i8 %3090, i8* %33, align 1
  store i8 %3083, i8* %39, align 1
  %3091 = add i64 %3069, -28
  %3092 = add i64 %3068, 14
  store i64 %3092, i64* %3, align 8
  %3093 = inttoptr i64 %3091 to i32*
  %3094 = load i32, i32* %3093, align 4
  %3095 = shl i32 %3094, 1
  %3096 = zext i32 %3095 to i64
  store i64 %3096, i64* %RAX.i186, align 8
  %3097 = trunc i64 %3077 to i32
  %3098 = add i32 %3095, %3097
  %3099 = zext i32 %3098 to i64
  store i64 %3099, i64* %.pre-phi507, align 8
  %3100 = icmp ult i32 %3098, %3097
  %3101 = icmp ult i32 %3098, %3095
  %3102 = or i1 %3100, %3101
  %3103 = zext i1 %3102 to i8
  store i8 %3103, i8* %14, align 1
  %3104 = and i32 %3098, 255
  %3105 = tail call i32 @llvm.ctpop.i32(i32 %3104)
  %3106 = trunc i32 %3105 to i8
  %3107 = and i8 %3106, 1
  %3108 = xor i8 %3107, 1
  store i8 %3108, i8* %21, align 1
  %3109 = xor i32 %3095, %3097
  %3110 = xor i32 %3109, %3098
  %3111 = lshr i32 %3110, 4
  %3112 = trunc i32 %3111 to i8
  %3113 = and i8 %3112, 1
  store i8 %3113, i8* %27, align 1
  %3114 = icmp eq i32 %3098, 0
  %3115 = zext i1 %3114 to i8
  store i8 %3115, i8* %30, align 1
  %3116 = lshr i32 %3098, 31
  %3117 = trunc i32 %3116 to i8
  store i8 %3117, i8* %33, align 1
  %3118 = lshr i32 %3097, 31
  %3119 = lshr i32 %3094, 30
  %3120 = and i32 %3119, 1
  %3121 = xor i32 %3116, %3118
  %3122 = xor i32 %3116, %3120
  %3123 = add nuw nsw i32 %3121, %3122
  %3124 = icmp eq i32 %3123, 2
  %3125 = zext i1 %3124 to i8
  store i8 %3125, i8* %39, align 1
  %3126 = load i64, i64* %RBP.i, align 8
  %3127 = add i64 %3126, -32
  %3128 = add i64 %3068, 22
  store i64 %3128, i64* %3, align 8
  %3129 = inttoptr i64 %3127 to i32*
  %3130 = load i32, i32* %3129, align 4
  %3131 = zext i32 %3130 to i64
  store i64 %3131, i64* %RAX.i186, align 8
  %3132 = sext i32 %3130 to i64
  %3133 = lshr i64 %3132, 32
  store i64 %3133, i64* %.pre-phi499, align 8
  %3134 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %3135 = add i64 %3068, 25
  store i64 %3135, i64* %3, align 8
  %3136 = sext i32 %3134 to i64
  %3137 = shl nuw i64 %3133, 32
  %3138 = or i64 %3137, %3131
  %3139 = sdiv i64 %3138, %3136
  %3140 = shl i64 %3139, 32
  %3141 = ashr exact i64 %3140, 32
  %3142 = icmp eq i64 %3139, %3141
  br i1 %3142, label %3145, label %3143

; <label>:3143:                                   ; preds = %routine_idivl__ecx.exit4274
  %3144 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3135, %struct.Memory* %3070)
  %.pre479 = load i32, i32* %R8D.i4270.pre-phi, align 4
  %.pre480 = load i32, i32* %.pre-phi501, align 4
  %.pre481 = load i64, i64* %3, align 8
  %.pre482 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit4247

; <label>:3145:                                   ; preds = %routine_idivl__ecx.exit4274
  %3146 = srem i64 %3138, %3136
  %3147 = and i64 %3139, 4294967295
  store i64 %3147, i64* %RAX.i186, align 8
  %3148 = and i64 %3146, 4294967295
  store i64 %3148, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3149 = trunc i64 %3146 to i32
  br label %routine_idivl__ecx.exit4247

routine_idivl__ecx.exit4247:                      ; preds = %3145, %3143
  %3150 = phi i64 [ %.pre482, %3143 ], [ %3126, %3145 ]
  %3151 = phi i64 [ %.pre481, %3143 ], [ %3135, %3145 ]
  %3152 = phi i32 [ %.pre480, %3143 ], [ %3149, %3145 ]
  %3153 = phi i32 [ %.pre479, %3143 ], [ %3098, %3145 ]
  %3154 = phi %struct.Memory* [ %3144, %3143 ], [ %3070, %3145 ]
  %3155 = add i32 %3152, %3153
  %3156 = zext i32 %3155 to i64
  store i64 %3156, i64* %.pre-phi507, align 8
  %3157 = icmp ult i32 %3155, %3153
  %3158 = icmp ult i32 %3155, %3152
  %3159 = or i1 %3157, %3158
  %3160 = zext i1 %3159 to i8
  store i8 %3160, i8* %14, align 1
  %3161 = and i32 %3155, 255
  %3162 = tail call i32 @llvm.ctpop.i32(i32 %3161)
  %3163 = trunc i32 %3162 to i8
  %3164 = and i8 %3163, 1
  %3165 = xor i8 %3164, 1
  store i8 %3165, i8* %21, align 1
  %3166 = xor i32 %3152, %3153
  %3167 = xor i32 %3166, %3155
  %3168 = lshr i32 %3167, 4
  %3169 = trunc i32 %3168 to i8
  %3170 = and i8 %3169, 1
  store i8 %3170, i8* %27, align 1
  %3171 = icmp eq i32 %3155, 0
  %3172 = zext i1 %3171 to i8
  store i8 %3172, i8* %30, align 1
  %3173 = lshr i32 %3155, 31
  %3174 = trunc i32 %3173 to i8
  store i8 %3174, i8* %33, align 1
  %3175 = lshr i32 %3153, 31
  %3176 = lshr i32 %3152, 31
  %3177 = xor i32 %3173, %3175
  %3178 = xor i32 %3173, %3176
  %3179 = add nuw nsw i32 %3177, %3178
  %3180 = icmp eq i32 %3179, 2
  %3181 = zext i1 %3180 to i8
  store i8 %3181, i8* %39, align 1
  %3182 = add i64 %3150, -36
  %3183 = add i64 %3151, 7
  store i64 %3183, i64* %3, align 8
  %3184 = inttoptr i64 %3182 to i32*
  store i32 %3155, i32* %3184, align 4
  %3185 = load i64, i64* %RBP.i, align 8
  %3186 = add i64 %3185, -8
  %3187 = load i64, i64* %3, align 8
  %3188 = add i64 %3187, 4
  store i64 %3188, i64* %3, align 8
  %3189 = inttoptr i64 %3186 to i64*
  %3190 = load i64, i64* %3189, align 8
  store i64 %3190, i64* %RDI.i126, align 8
  %3191 = add i64 %3190, 40
  %3192 = add i64 %3187, 8
  store i64 %3192, i64* %3, align 8
  %3193 = inttoptr i64 %3191 to i64*
  %3194 = load i64, i64* %3193, align 8
  store i64 %3194, i64* %RDI.i126, align 8
  %3195 = add i64 %3194, 6416
  %3196 = add i64 %3187, 15
  store i64 %3196, i64* %3, align 8
  %3197 = inttoptr i64 %3195 to i32*
  %3198 = load i32, i32* %3197, align 4
  store i8 0, i8* %14, align 1
  %3199 = and i32 %3198, 255
  %3200 = tail call i32 @llvm.ctpop.i32(i32 %3199)
  %3201 = trunc i32 %3200 to i8
  %3202 = and i8 %3201, 1
  %3203 = xor i8 %3202, 1
  store i8 %3203, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3204 = icmp eq i32 %3198, 0
  %3205 = zext i1 %3204 to i8
  store i8 %3205, i8* %30, align 1
  %3206 = lshr i32 %3198, 31
  %3207 = trunc i32 %3206 to i8
  store i8 %3207, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v550 = select i1 %3204, i64 671, i64 21
  %3208 = add i64 %3187, %.v550
  store i64 %3208, i64* %3, align 8
  br i1 %3204, label %block_.L_450b00, label %block_450876

block_450876:                                     ; preds = %routine_idivl__ecx.exit4247
  %3209 = add i64 %3208, 4
  store i64 %3209, i64* %3, align 8
  %3210 = load i64, i64* %3189, align 8
  store i64 %3210, i64* %RAX.i186, align 8
  %3211 = add i64 %3210, 40
  %3212 = add i64 %3208, 8
  store i64 %3212, i64* %3, align 8
  %3213 = inttoptr i64 %3211 to i64*
  %3214 = load i64, i64* %3213, align 8
  store i64 %3214, i64* %RAX.i186, align 8
  %3215 = add i64 %3214, 6472
  %3216 = add i64 %3208, 15
  store i64 %3216, i64* %3, align 8
  %3217 = inttoptr i64 %3215 to i64*
  %3218 = load i64, i64* %3217, align 8
  store i64 %3218, i64* %RAX.i186, align 8
  %3219 = add i64 %3185, -36
  %3220 = add i64 %3208, 19
  store i64 %3220, i64* %3, align 8
  %3221 = inttoptr i64 %3219 to i32*
  %3222 = load i32, i32* %3221, align 4
  %3223 = sext i32 %3222 to i64
  store i64 %3223, i64* %RCX.i4414.pre-phi, align 8
  %3224 = add i64 %3218, %3223
  %3225 = add i64 %3208, 23
  store i64 %3225, i64* %3, align 8
  %3226 = inttoptr i64 %3224 to i8*
  %3227 = load i8, i8* %3226, align 1
  %3228 = zext i8 %3227 to i64
  store i64 %3228, i64* %RDX.i4411.pre-phi, align 8
  %3229 = zext i8 %3227 to i32
  store i8 0, i8* %14, align 1
  %3230 = tail call i32 @llvm.ctpop.i32(i32 %3229)
  %3231 = trunc i32 %3230 to i8
  %3232 = and i8 %3231, 1
  %3233 = xor i8 %3232, 1
  store i8 %3233, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3234 = icmp eq i8 %3227, 0
  %3235 = zext i1 %3234 to i8
  store i8 %3235, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v551 = select i1 %3234, i64 650, i64 32
  %3236 = add i64 %3208, %.v551
  store i64 %3236, i64* %3, align 8
  br i1 %3234, label %block_.L_450b00, label %block_450896

block_450896:                                     ; preds = %block_450876
  store i64 2, i64* %RAX.i186, align 8
  store i64 4, i64* %RCX.i4414.pre-phi, align 8
  %3237 = add i64 %3236, 13
  store i64 %3237, i64* %3, align 8
  %3238 = load i32, i32* %3221, align 4
  %3239 = zext i32 %3238 to i64
  store i64 %3239, i64* %RDX.i4411.pre-phi, align 8
  %3240 = add i64 %3185, -176
  %3241 = add i64 %3236, 19
  store i64 %3241, i64* %3, align 8
  %3242 = inttoptr i64 %3240 to i32*
  store i32 2, i32* %3242, align 4
  %3243 = load i32, i32* %.pre-phi501, align 4
  %3244 = zext i32 %3243 to i64
  %3245 = load i64, i64* %3, align 8
  store i64 %3244, i64* %RAX.i186, align 8
  %3246 = sext i32 %3243 to i64
  %3247 = lshr i64 %3246, 32
  store i64 %3247, i64* %.pre-phi499, align 8
  %3248 = load i64, i64* %RBP.i, align 8
  %3249 = add i64 %3248, -176
  %3250 = add i64 %3245, 9
  store i64 %3250, i64* %3, align 8
  %3251 = inttoptr i64 %3249 to i32*
  %3252 = load i32, i32* %3251, align 4
  %3253 = zext i32 %3252 to i64
  store i64 %3253, i64* %RSI.i4407.pre-phi, align 8
  %3254 = add i64 %3245, 11
  store i64 %3254, i64* %3, align 8
  %3255 = sext i32 %3252 to i64
  %3256 = shl nuw i64 %3247, 32
  %3257 = or i64 %3256, %3244
  %3258 = sdiv i64 %3257, %3255
  %3259 = shl i64 %3258, 32
  %3260 = ashr exact i64 %3259, 32
  %3261 = icmp eq i64 %3258, %3260
  br i1 %3261, label %3264, label %3262

; <label>:3262:                                   ; preds = %block_450896
  %3263 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3254, %struct.Memory* %3154)
  %.pre483 = load i32, i32* %.pre-phi501, align 4
  %.pre484 = load i64, i64* %3, align 8
  %.pre485 = load i64, i64* %RSI.i4407.pre-phi, align 8
  %.pre486 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit4195

; <label>:3264:                                   ; preds = %block_450896
  %3265 = srem i64 %3257, %3255
  %3266 = and i64 %3258, 4294967295
  store i64 %3266, i64* %RAX.i186, align 8
  %3267 = and i64 %3265, 4294967295
  store i64 %3267, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3268 = trunc i64 %3265 to i32
  br label %routine_idivl__esi.exit4195

routine_idivl__esi.exit4195:                      ; preds = %3264, %3262
  %3269 = phi i64 [ %.pre486, %3262 ], [ %3248, %3264 ]
  %3270 = phi i64 [ %.pre485, %3262 ], [ %3253, %3264 ]
  %3271 = phi i64 [ %.pre484, %3262 ], [ %3254, %3264 ]
  %3272 = phi i32 [ %.pre483, %3262 ], [ %3268, %3264 ]
  %3273 = phi %struct.Memory* [ %3263, %3262 ], [ %3154, %3264 ]
  store i8 0, i8* %14, align 1
  %3274 = and i32 %3272, 255
  %3275 = tail call i32 @llvm.ctpop.i32(i32 %3274)
  %3276 = trunc i32 %3275 to i8
  %3277 = and i8 %3276, 1
  %3278 = xor i8 %3277, 1
  store i8 %3278, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3279 = icmp eq i32 %3272, 0
  %3280 = zext i1 %3279 to i8
  store i8 %3280, i8* %30, align 1
  %3281 = lshr i32 %3272, 31
  %3282 = trunc i32 %3281 to i8
  store i8 %3282, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3283 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %3284 = zext i32 %3283 to i64
  %3285 = select i1 %3279, i64 %3270, i64 %3284
  %3286 = and i64 %3285, 4294967295
  store i64 %3286, i64* %RSI.i4407.pre-phi, align 8
  %3287 = add i64 %3269, -40
  %3288 = trunc i64 %3285 to i32
  %3289 = add i64 %3271, 9
  store i64 %3289, i64* %3, align 8
  %3290 = inttoptr i64 %3287 to i32*
  store i32 %3288, i32* %3290, align 4
  %3291 = load i64, i64* %RBP.i, align 8
  %3292 = add i64 %3291, -8
  %3293 = load i64, i64* %3, align 8
  %3294 = add i64 %3293, 4
  store i64 %3294, i64* %3, align 8
  %3295 = inttoptr i64 %3292 to i64*
  %3296 = load i64, i64* %3295, align 8
  store i64 %3296, i64* %RDI.i126, align 8
  %3297 = add i64 %3296, 40
  %3298 = add i64 %3293, 8
  store i64 %3298, i64* %3, align 8
  %3299 = inttoptr i64 %3297 to i64*
  %3300 = load i64, i64* %3299, align 8
  store i64 %3300, i64* %RDI.i126, align 8
  %3301 = add i64 %3300, 6480
  %3302 = add i64 %3293, 15
  store i64 %3302, i64* %3, align 8
  %3303 = inttoptr i64 %3301 to i64*
  %3304 = load i64, i64* %3303, align 8
  store i64 %3304, i64* %RDI.i126, align 8
  %3305 = add i64 %3293, 18
  store i64 %3305, i64* %3, align 8
  %3306 = inttoptr i64 %3304 to i64*
  %3307 = load i64, i64* %3306, align 8
  store i64 %3307, i64* %RDI.i126, align 8
  %3308 = add i64 %3291, -12
  %3309 = add i64 %3293, 22
  store i64 %3309, i64* %3, align 8
  %3310 = inttoptr i64 %3308 to i32*
  %3311 = load i32, i32* %3310, align 4
  %3312 = sext i32 %3311 to i64
  store i64 %3312, i64* %.pre-phi507, align 8
  %3313 = shl nsw i64 %3312, 3
  %3314 = add i64 %3313, %3307
  %3315 = add i64 %3293, 26
  store i64 %3315, i64* %3, align 8
  %3316 = inttoptr i64 %3314 to i64*
  %3317 = load i64, i64* %3316, align 8
  store i64 %3317, i64* %RDI.i126, align 8
  %3318 = add i64 %3291, -16
  %3319 = add i64 %3293, 30
  store i64 %3319, i64* %3, align 8
  %3320 = inttoptr i64 %3318 to i32*
  %3321 = load i32, i32* %3320, align 4
  %3322 = sext i32 %3321 to i64
  store i64 %3322, i64* %.pre-phi507, align 8
  %3323 = shl nsw i64 %3322, 1
  %3324 = add i64 %3323, %3317
  %3325 = add i64 %3293, 35
  store i64 %3325, i64* %3, align 8
  %3326 = inttoptr i64 %3324 to i16*
  %3327 = load i16, i16* %3326, align 2
  %3328 = sext i16 %3327 to i64
  %3329 = and i64 %3328, 4294967295
  store i64 %3329, i64* %RCX.i4414.pre-phi, align 8
  %3330 = add i64 %3291, -20
  %3331 = sext i16 %3327 to i32
  %3332 = add i64 %3293, 38
  store i64 %3332, i64* %3, align 8
  %3333 = inttoptr i64 %3330 to i32*
  store i32 %3331, i32* %3333, align 4
  %3334 = load i64, i64* %RBP.i, align 8
  %3335 = add i64 %3334, -8
  %3336 = load i64, i64* %3, align 8
  %3337 = add i64 %3336, 4
  store i64 %3337, i64* %3, align 8
  %3338 = inttoptr i64 %3335 to i64*
  %3339 = load i64, i64* %3338, align 8
  store i64 %3339, i64* %RDI.i126, align 8
  %3340 = add i64 %3339, 40
  %3341 = add i64 %3336, 8
  store i64 %3341, i64* %3, align 8
  %3342 = inttoptr i64 %3340 to i64*
  %3343 = load i64, i64* %3342, align 8
  store i64 %3343, i64* %RDI.i126, align 8
  %3344 = add i64 %3343, 6480
  %3345 = add i64 %3336, 15
  store i64 %3345, i64* %3, align 8
  %3346 = inttoptr i64 %3344 to i64*
  %3347 = load i64, i64* %3346, align 8
  store i64 %3347, i64* %RDI.i126, align 8
  %3348 = add i64 %3347, 8
  %3349 = add i64 %3336, 19
  store i64 %3349, i64* %3, align 8
  %3350 = inttoptr i64 %3348 to i64*
  %3351 = load i64, i64* %3350, align 8
  store i64 %3351, i64* %RDI.i126, align 8
  %3352 = add i64 %3334, -12
  %3353 = add i64 %3336, 23
  store i64 %3353, i64* %3, align 8
  %3354 = inttoptr i64 %3352 to i32*
  %3355 = load i32, i32* %3354, align 4
  %3356 = sext i32 %3355 to i64
  store i64 %3356, i64* %.pre-phi507, align 8
  %3357 = shl nsw i64 %3356, 3
  %3358 = add i64 %3357, %3351
  %3359 = add i64 %3336, 27
  store i64 %3359, i64* %3, align 8
  %3360 = inttoptr i64 %3358 to i64*
  %3361 = load i64, i64* %3360, align 8
  store i64 %3361, i64* %RDI.i126, align 8
  %3362 = add i64 %3334, -16
  %3363 = add i64 %3336, 31
  store i64 %3363, i64* %3, align 8
  %3364 = inttoptr i64 %3362 to i32*
  %3365 = load i32, i32* %3364, align 4
  %3366 = sext i32 %3365 to i64
  store i64 %3366, i64* %.pre-phi507, align 8
  %3367 = shl nsw i64 %3366, 1
  %3368 = add i64 %3367, %3361
  %3369 = add i64 %3336, 36
  store i64 %3369, i64* %3, align 8
  %3370 = inttoptr i64 %3368 to i16*
  %3371 = load i16, i16* %3370, align 2
  %3372 = sext i16 %3371 to i64
  %3373 = and i64 %3372, 4294967295
  store i64 %3373, i64* %RCX.i4414.pre-phi, align 8
  %3374 = add i64 %3334, -24
  %3375 = sext i16 %3371 to i32
  %3376 = add i64 %3336, 39
  store i64 %3376, i64* %3, align 8
  %3377 = inttoptr i64 %3374 to i32*
  store i32 %3375, i32* %3377, align 4
  %3378 = load i64, i64* %RBP.i, align 8
  %3379 = add i64 %3378, -20
  %3380 = load i64, i64* %3, align 8
  %3381 = add i64 %3380, 4
  store i64 %3381, i64* %3, align 8
  %3382 = inttoptr i64 %3379 to i32*
  %3383 = load i32, i32* %3382, align 4
  store i8 0, i8* %14, align 1
  %3384 = and i32 %3383, 255
  %3385 = tail call i32 @llvm.ctpop.i32(i32 %3384)
  %3386 = trunc i32 %3385 to i8
  %3387 = and i8 %3386, 1
  %3388 = xor i8 %3387, 1
  store i8 %3388, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3389 = icmp eq i32 %3383, 0
  %3390 = zext i1 %3389 to i8
  store i8 %3390, i8* %30, align 1
  %3391 = lshr i32 %3383, 31
  %3392 = trunc i32 %3391 to i8
  store i8 %3392, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3393 = icmp ne i8 %3392, 0
  %.v181 = select i1 %3393, i64 57, i64 6
  %3394 = add i64 %3381, %.v181
  store i64 %3394, i64* %3, align 8
  br i1 %3393, label %block_.L_450947, label %block_450914

block_450914:                                     ; preds = %routine_idivl__esi.exit4195
  %3395 = add i64 %3378, -8
  %3396 = add i64 %3394, 4
  store i64 %3396, i64* %3, align 8
  %3397 = inttoptr i64 %3395 to i64*
  %3398 = load i64, i64* %3397, align 8
  store i64 %3398, i64* %RAX.i186, align 8
  %3399 = add i64 %3398, 40
  %3400 = add i64 %3394, 8
  store i64 %3400, i64* %3, align 8
  %3401 = inttoptr i64 %3399 to i64*
  %3402 = load i64, i64* %3401, align 8
  %3403 = add i64 %3402, 24
  store i64 %3403, i64* %RAX.i186, align 8
  %3404 = icmp ugt i64 %3402, -25
  %3405 = zext i1 %3404 to i8
  store i8 %3405, i8* %14, align 1
  %3406 = trunc i64 %3403 to i32
  %3407 = and i32 %3406, 255
  %3408 = tail call i32 @llvm.ctpop.i32(i32 %3407)
  %3409 = trunc i32 %3408 to i8
  %3410 = and i8 %3409, 1
  %3411 = xor i8 %3410, 1
  store i8 %3411, i8* %21, align 1
  %3412 = xor i64 %3402, 16
  %3413 = xor i64 %3412, %3403
  %3414 = lshr i64 %3413, 4
  %3415 = trunc i64 %3414 to i8
  %3416 = and i8 %3415, 1
  store i8 %3416, i8* %27, align 1
  %3417 = icmp eq i64 %3403, 0
  %3418 = zext i1 %3417 to i8
  store i8 %3418, i8* %30, align 1
  %3419 = lshr i64 %3403, 63
  %3420 = trunc i64 %3419 to i8
  store i8 %3420, i8* %33, align 1
  %3421 = lshr i64 %3402, 63
  %3422 = xor i64 %3419, %3421
  %3423 = add nuw nsw i64 %3422, %3419
  %3424 = icmp eq i64 %3423, 2
  %3425 = zext i1 %3424 to i8
  store i8 %3425, i8* %39, align 1
  %3426 = add i64 %3378, -40
  %3427 = add i64 %3394, 15
  store i64 %3427, i64* %3, align 8
  %3428 = inttoptr i64 %3426 to i32*
  %3429 = load i32, i32* %3428, align 4
  %3430 = zext i32 %3429 to i64
  store i64 %3430, i64* %RCX.i4414.pre-phi, align 8
  %3431 = sext i32 %3429 to i64
  %3432 = mul nsw i64 %3431, 264
  store i64 %3432, i64* %RDX.i4411.pre-phi, align 8
  %3433 = lshr i64 %3432, 63
  %3434 = add i64 %3432, %3403
  store i64 %3434, i64* %RAX.i186, align 8
  %3435 = icmp ult i64 %3434, %3403
  %3436 = icmp ult i64 %3434, %3432
  %3437 = or i1 %3435, %3436
  %3438 = zext i1 %3437 to i8
  store i8 %3438, i8* %14, align 1
  %3439 = trunc i64 %3434 to i32
  %3440 = and i32 %3439, 255
  %3441 = tail call i32 @llvm.ctpop.i32(i32 %3440)
  %3442 = trunc i32 %3441 to i8
  %3443 = and i8 %3442, 1
  %3444 = xor i8 %3443, 1
  store i8 %3444, i8* %21, align 1
  %3445 = xor i64 %3432, %3403
  %3446 = xor i64 %3445, %3434
  %3447 = lshr i64 %3446, 4
  %3448 = trunc i64 %3447 to i8
  %3449 = and i8 %3448, 1
  store i8 %3449, i8* %27, align 1
  %3450 = icmp eq i64 %3434, 0
  %3451 = zext i1 %3450 to i8
  store i8 %3451, i8* %30, align 1
  %3452 = lshr i64 %3434, 63
  %3453 = trunc i64 %3452 to i8
  store i8 %3453, i8* %33, align 1
  %3454 = xor i64 %3452, %3419
  %3455 = xor i64 %3452, %3433
  %3456 = add nuw nsw i64 %3454, %3455
  %3457 = icmp eq i64 %3456, 2
  %3458 = zext i1 %3457 to i8
  store i8 %3458, i8* %39, align 1
  %3459 = load i64, i64* %RBP.i, align 8
  %3460 = add i64 %3459, -20
  %3461 = add i64 %3394, 35
  store i64 %3461, i64* %3, align 8
  %3462 = inttoptr i64 %3460 to i32*
  %3463 = load i32, i32* %3462, align 4
  %3464 = sext i32 %3463 to i64
  store i64 %3464, i64* %RDX.i4411.pre-phi, align 8
  %3465 = shl nsw i64 %3464, 3
  %3466 = add i64 %3465, %3434
  %3467 = add i64 %3394, 39
  store i64 %3467, i64* %3, align 8
  %3468 = inttoptr i64 %3466 to i64*
  %3469 = load i64, i64* %3468, align 8
  store i64 %3469, i64* %RAX.i186, align 8
  %3470 = add i64 %3459, -184
  %3471 = add i64 %3394, 46
  store i64 %3471, i64* %3, align 8
  %3472 = inttoptr i64 %3470 to i64*
  store i64 %3469, i64* %3472, align 8
  %3473 = load i64, i64* %3, align 8
  %3474 = add i64 %3473, 21
  br label %block_.L_450957

block_.L_450947:                                  ; preds = %routine_idivl__esi.exit4195
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i4414.pre-phi, align 8
  %3475 = add i64 %3378, -184
  %3476 = add i64 %3394, 11
  store i64 %3476, i64* %3, align 8
  %3477 = inttoptr i64 %3475 to i64*
  store i64 0, i64* %3477, align 8
  %3478 = load i64, i64* %3, align 8
  %3479 = add i64 %3478, 5
  store i64 %3479, i64* %3, align 8
  br label %block_.L_450957

block_.L_450957:                                  ; preds = %block_.L_450947, %block_450914
  %storemerge = phi i64 [ %3474, %block_450914 ], [ %3479, %block_.L_450947 ]
  %3480 = load i64, i64* %RBP.i, align 8
  %3481 = add i64 %3480, -184
  %3482 = add i64 %storemerge, 7
  store i64 %3482, i64* %3, align 8
  %3483 = inttoptr i64 %3481 to i64*
  %3484 = load i64, i64* %3483, align 8
  store i64 %3484, i64* %RAX.i186, align 8
  %3485 = add i64 %3480, -8
  %3486 = add i64 %storemerge, 11
  store i64 %3486, i64* %3, align 8
  %3487 = inttoptr i64 %3485 to i64*
  %3488 = load i64, i64* %3487, align 8
  store i64 %3488, i64* %RCX.i4414.pre-phi, align 8
  %3489 = add i64 %3488, 40
  %3490 = add i64 %storemerge, 15
  store i64 %3490, i64* %3, align 8
  %3491 = inttoptr i64 %3489 to i64*
  %3492 = load i64, i64* %3491, align 8
  store i64 %3492, i64* %RCX.i4414.pre-phi, align 8
  %3493 = add i64 %3492, 6496
  %3494 = add i64 %storemerge, 22
  store i64 %3494, i64* %3, align 8
  %3495 = inttoptr i64 %3493 to i64*
  %3496 = load i64, i64* %3495, align 8
  store i64 %3496, i64* %RCX.i4414.pre-phi, align 8
  %3497 = add i64 %3480, -40
  %3498 = add i64 %storemerge, 25
  store i64 %3498, i64* %3, align 8
  %3499 = inttoptr i64 %3497 to i32*
  %3500 = load i32, i32* %3499, align 4
  %3501 = zext i32 %3500 to i64
  store i64 %3501, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  %3502 = and i32 %3500, 255
  %3503 = tail call i32 @llvm.ctpop.i32(i32 %3502)
  %3504 = trunc i32 %3503 to i8
  %3505 = and i8 %3504, 1
  %3506 = xor i8 %3505, 1
  store i8 %3506, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3507 = icmp eq i32 %3500, 0
  %3508 = zext i1 %3507 to i8
  store i8 %3508, i8* %30, align 1
  %3509 = lshr i32 %3500, 31
  %3510 = trunc i32 %3509 to i8
  store i8 %3510, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3511 = sext i32 %3500 to i64
  store i64 %3511, i64* %RSI.i4407.pre-phi, align 8
  %3512 = shl nsw i64 %3511, 3
  %3513 = add i64 %3496, %3512
  %3514 = add i64 %storemerge, 35
  store i64 %3514, i64* %3, align 8
  %3515 = inttoptr i64 %3513 to i64*
  %3516 = load i64, i64* %3515, align 8
  store i64 %3516, i64* %RCX.i4414.pre-phi, align 8
  %3517 = add i64 %3480, -12
  %3518 = add i64 %storemerge, 39
  store i64 %3518, i64* %3, align 8
  %3519 = inttoptr i64 %3517 to i32*
  %3520 = load i32, i32* %3519, align 4
  %3521 = sext i32 %3520 to i64
  store i64 %3521, i64* %RSI.i4407.pre-phi, align 8
  %3522 = shl nsw i64 %3521, 3
  %3523 = add i64 %3522, %3516
  %3524 = add i64 %storemerge, 43
  store i64 %3524, i64* %3, align 8
  %3525 = inttoptr i64 %3523 to i64*
  %3526 = load i64, i64* %3525, align 8
  store i64 %3526, i64* %RCX.i4414.pre-phi, align 8
  %3527 = add i64 %3480, -16
  %3528 = add i64 %storemerge, 47
  store i64 %3528, i64* %3, align 8
  %3529 = inttoptr i64 %3527 to i32*
  %3530 = load i32, i32* %3529, align 4
  %3531 = sext i32 %3530 to i64
  store i64 %3531, i64* %RSI.i4407.pre-phi, align 8
  %3532 = shl nsw i64 %3531, 3
  %3533 = add i64 %3532, %3526
  %3534 = add i64 %storemerge, 51
  store i64 %3534, i64* %3, align 8
  %3535 = inttoptr i64 %3533 to i64*
  store i64 %3484, i64* %3535, align 8
  %3536 = load i64, i64* %RBP.i, align 8
  %3537 = add i64 %3536, -24
  %3538 = load i64, i64* %3, align 8
  %3539 = add i64 %3538, 4
  store i64 %3539, i64* %3, align 8
  %3540 = inttoptr i64 %3537 to i32*
  %3541 = load i32, i32* %3540, align 4
  store i8 0, i8* %14, align 1
  %3542 = and i32 %3541, 255
  %3543 = tail call i32 @llvm.ctpop.i32(i32 %3542)
  %3544 = trunc i32 %3543 to i8
  %3545 = and i8 %3544, 1
  %3546 = xor i8 %3545, 1
  store i8 %3546, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3547 = icmp eq i32 %3541, 0
  %3548 = zext i1 %3547 to i8
  store i8 %3548, i8* %30, align 1
  %3549 = lshr i32 %3541, 31
  %3550 = trunc i32 %3549 to i8
  store i8 %3550, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3551 = icmp ne i8 %3550, 0
  %.v182 = select i1 %3551, i64 57, i64 6
  %3552 = add i64 %3539, %.v182
  store i64 %3552, i64* %3, align 8
  br i1 %3551, label %block_.L_4509c7, label %block_450994

block_450994:                                     ; preds = %block_.L_450957
  %3553 = add i64 %3536, -8
  %3554 = add i64 %3552, 4
  store i64 %3554, i64* %3, align 8
  %3555 = inttoptr i64 %3553 to i64*
  %3556 = load i64, i64* %3555, align 8
  store i64 %3556, i64* %RAX.i186, align 8
  %3557 = add i64 %3556, 40
  %3558 = add i64 %3552, 8
  store i64 %3558, i64* %3, align 8
  %3559 = inttoptr i64 %3557 to i64*
  %3560 = load i64, i64* %3559, align 8
  %3561 = add i64 %3560, 24
  store i64 %3561, i64* %RAX.i186, align 8
  %3562 = icmp ugt i64 %3560, -25
  %3563 = zext i1 %3562 to i8
  store i8 %3563, i8* %14, align 1
  %3564 = trunc i64 %3561 to i32
  %3565 = and i32 %3564, 255
  %3566 = tail call i32 @llvm.ctpop.i32(i32 %3565)
  %3567 = trunc i32 %3566 to i8
  %3568 = and i8 %3567, 1
  %3569 = xor i8 %3568, 1
  store i8 %3569, i8* %21, align 1
  %3570 = xor i64 %3560, 16
  %3571 = xor i64 %3570, %3561
  %3572 = lshr i64 %3571, 4
  %3573 = trunc i64 %3572 to i8
  %3574 = and i8 %3573, 1
  store i8 %3574, i8* %27, align 1
  %3575 = icmp eq i64 %3561, 0
  %3576 = zext i1 %3575 to i8
  store i8 %3576, i8* %30, align 1
  %3577 = lshr i64 %3561, 63
  %3578 = trunc i64 %3577 to i8
  store i8 %3578, i8* %33, align 1
  %3579 = lshr i64 %3560, 63
  %3580 = xor i64 %3577, %3579
  %3581 = add nuw nsw i64 %3580, %3577
  %3582 = icmp eq i64 %3581, 2
  %3583 = zext i1 %3582 to i8
  store i8 %3583, i8* %39, align 1
  %3584 = add i64 %3536, -40
  %3585 = add i64 %3552, 15
  store i64 %3585, i64* %3, align 8
  %3586 = inttoptr i64 %3584 to i32*
  %3587 = load i32, i32* %3586, align 4
  %3588 = add i32 %3587, 1
  %3589 = zext i32 %3588 to i64
  store i64 %3589, i64* %RCX.i4414.pre-phi, align 8
  %3590 = sext i32 %3588 to i64
  %3591 = mul nsw i64 %3590, 264
  store i64 %3591, i64* %RDX.i4411.pre-phi, align 8
  %3592 = lshr i64 %3591, 63
  %3593 = add i64 %3591, %3561
  store i64 %3593, i64* %RAX.i186, align 8
  %3594 = icmp ult i64 %3593, %3561
  %3595 = icmp ult i64 %3593, %3591
  %3596 = or i1 %3594, %3595
  %3597 = zext i1 %3596 to i8
  store i8 %3597, i8* %14, align 1
  %3598 = trunc i64 %3593 to i32
  %3599 = and i32 %3598, 255
  %3600 = tail call i32 @llvm.ctpop.i32(i32 %3599)
  %3601 = trunc i32 %3600 to i8
  %3602 = and i8 %3601, 1
  %3603 = xor i8 %3602, 1
  store i8 %3603, i8* %21, align 1
  %3604 = xor i64 %3591, %3561
  %3605 = xor i64 %3604, %3593
  %3606 = lshr i64 %3605, 4
  %3607 = trunc i64 %3606 to i8
  %3608 = and i8 %3607, 1
  store i8 %3608, i8* %27, align 1
  %3609 = icmp eq i64 %3593, 0
  %3610 = zext i1 %3609 to i8
  store i8 %3610, i8* %30, align 1
  %3611 = lshr i64 %3593, 63
  %3612 = trunc i64 %3611 to i8
  store i8 %3612, i8* %33, align 1
  %3613 = xor i64 %3611, %3577
  %3614 = xor i64 %3611, %3592
  %3615 = add nuw nsw i64 %3613, %3614
  %3616 = icmp eq i64 %3615, 2
  %3617 = zext i1 %3616 to i8
  store i8 %3617, i8* %39, align 1
  %3618 = load i64, i64* %RBP.i, align 8
  %3619 = add i64 %3618, -24
  %3620 = add i64 %3552, 35
  store i64 %3620, i64* %3, align 8
  %3621 = inttoptr i64 %3619 to i32*
  %3622 = load i32, i32* %3621, align 4
  %3623 = sext i32 %3622 to i64
  store i64 %3623, i64* %RDX.i4411.pre-phi, align 8
  %3624 = shl nsw i64 %3623, 3
  %3625 = add i64 %3624, %3593
  %3626 = add i64 %3552, 39
  store i64 %3626, i64* %3, align 8
  %3627 = inttoptr i64 %3625 to i64*
  %3628 = load i64, i64* %3627, align 8
  store i64 %3628, i64* %RAX.i186, align 8
  %3629 = add i64 %3618, -192
  %3630 = add i64 %3552, 46
  store i64 %3630, i64* %3, align 8
  %3631 = inttoptr i64 %3629 to i64*
  store i64 %3628, i64* %3631, align 8
  %3632 = load i64, i64* %3, align 8
  %3633 = add i64 %3632, 21
  br label %block_.L_4509d7

block_.L_4509c7:                                  ; preds = %block_.L_450957
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i4414.pre-phi, align 8
  %3634 = add i64 %3536, -192
  %3635 = add i64 %3552, 11
  store i64 %3635, i64* %3, align 8
  %3636 = inttoptr i64 %3634 to i64*
  store i64 0, i64* %3636, align 8
  %3637 = load i64, i64* %3, align 8
  %3638 = add i64 %3637, 5
  store i64 %3638, i64* %3, align 8
  br label %block_.L_4509d7

block_.L_4509d7:                                  ; preds = %block_.L_4509c7, %block_450994
  %storemerge87 = phi i64 [ %3633, %block_450994 ], [ %3638, %block_.L_4509c7 ]
  %3639 = load i64, i64* %RBP.i, align 8
  %3640 = add i64 %3639, -192
  %3641 = add i64 %storemerge87, 7
  store i64 %3641, i64* %3, align 8
  %3642 = inttoptr i64 %3640 to i64*
  %3643 = load i64, i64* %3642, align 8
  store i64 %3643, i64* %RAX.i186, align 8
  %3644 = add i64 %3639, -8
  %3645 = add i64 %storemerge87, 11
  store i64 %3645, i64* %3, align 8
  %3646 = inttoptr i64 %3644 to i64*
  %3647 = load i64, i64* %3646, align 8
  store i64 %3647, i64* %RCX.i4414.pre-phi, align 8
  %3648 = add i64 %3647, 40
  %3649 = add i64 %storemerge87, 15
  store i64 %3649, i64* %3, align 8
  %3650 = inttoptr i64 %3648 to i64*
  %3651 = load i64, i64* %3650, align 8
  store i64 %3651, i64* %RCX.i4414.pre-phi, align 8
  %3652 = add i64 %3651, 6496
  %3653 = add i64 %storemerge87, 22
  store i64 %3653, i64* %3, align 8
  %3654 = inttoptr i64 %3652 to i64*
  %3655 = load i64, i64* %3654, align 8
  store i64 %3655, i64* %RCX.i4414.pre-phi, align 8
  %3656 = add i64 %3639, -40
  %3657 = add i64 %storemerge87, 25
  store i64 %3657, i64* %3, align 8
  %3658 = inttoptr i64 %3656 to i32*
  %3659 = load i32, i32* %3658, align 4
  %3660 = add i32 %3659, 1
  %3661 = zext i32 %3660 to i64
  store i64 %3661, i64* %RDX.i4411.pre-phi, align 8
  %3662 = icmp eq i32 %3659, -1
  %3663 = icmp eq i32 %3660, 0
  %3664 = or i1 %3662, %3663
  %3665 = zext i1 %3664 to i8
  store i8 %3665, i8* %14, align 1
  %3666 = and i32 %3660, 255
  %3667 = tail call i32 @llvm.ctpop.i32(i32 %3666)
  %3668 = trunc i32 %3667 to i8
  %3669 = and i8 %3668, 1
  %3670 = xor i8 %3669, 1
  store i8 %3670, i8* %21, align 1
  %3671 = xor i32 %3660, %3659
  %3672 = lshr i32 %3671, 4
  %3673 = trunc i32 %3672 to i8
  %3674 = and i8 %3673, 1
  store i8 %3674, i8* %27, align 1
  %3675 = zext i1 %3663 to i8
  store i8 %3675, i8* %30, align 1
  %3676 = lshr i32 %3660, 31
  %3677 = trunc i32 %3676 to i8
  store i8 %3677, i8* %33, align 1
  %3678 = lshr i32 %3659, 31
  %3679 = xor i32 %3676, %3678
  %3680 = add nuw nsw i32 %3679, %3676
  %3681 = icmp eq i32 %3680, 2
  %3682 = zext i1 %3681 to i8
  store i8 %3682, i8* %39, align 1
  %3683 = sext i32 %3660 to i64
  store i64 %3683, i64* %RSI.i4407.pre-phi, align 8
  %3684 = shl nsw i64 %3683, 3
  %3685 = add i64 %3655, %3684
  %3686 = add i64 %storemerge87, 35
  store i64 %3686, i64* %3, align 8
  %3687 = inttoptr i64 %3685 to i64*
  %3688 = load i64, i64* %3687, align 8
  store i64 %3688, i64* %RCX.i4414.pre-phi, align 8
  %3689 = add i64 %3639, -12
  %3690 = add i64 %storemerge87, 39
  store i64 %3690, i64* %3, align 8
  %3691 = inttoptr i64 %3689 to i32*
  %3692 = load i32, i32* %3691, align 4
  %3693 = sext i32 %3692 to i64
  store i64 %3693, i64* %RSI.i4407.pre-phi, align 8
  %3694 = shl nsw i64 %3693, 3
  %3695 = add i64 %3694, %3688
  %3696 = add i64 %storemerge87, 43
  store i64 %3696, i64* %3, align 8
  %3697 = inttoptr i64 %3695 to i64*
  %3698 = load i64, i64* %3697, align 8
  store i64 %3698, i64* %RCX.i4414.pre-phi, align 8
  %3699 = add i64 %3639, -16
  %3700 = add i64 %storemerge87, 47
  store i64 %3700, i64* %3, align 8
  %3701 = inttoptr i64 %3699 to i32*
  %3702 = load i32, i32* %3701, align 4
  %3703 = sext i32 %3702 to i64
  store i64 %3703, i64* %RSI.i4407.pre-phi, align 8
  %3704 = shl nsw i64 %3703, 3
  %3705 = add i64 %3704, %3698
  %3706 = add i64 %storemerge87, 51
  store i64 %3706, i64* %3, align 8
  %3707 = inttoptr i64 %3705 to i64*
  store i64 %3643, i64* %3707, align 8
  %3708 = load i64, i64* %RBP.i, align 8
  %3709 = add i64 %3708, -20
  %3710 = load i64, i64* %3, align 8
  %3711 = add i64 %3710, 4
  store i64 %3711, i64* %3, align 8
  %3712 = inttoptr i64 %3709 to i32*
  %3713 = load i32, i32* %3712, align 4
  store i8 0, i8* %14, align 1
  %3714 = and i32 %3713, 255
  %3715 = tail call i32 @llvm.ctpop.i32(i32 %3714)
  %3716 = trunc i32 %3715 to i8
  %3717 = and i8 %3716, 1
  %3718 = xor i8 %3717, 1
  store i8 %3718, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3719 = icmp eq i32 %3713, 0
  %3720 = zext i1 %3719 to i8
  store i8 %3720, i8* %30, align 1
  %3721 = lshr i32 %3713, 31
  %3722 = trunc i32 %3721 to i8
  store i8 %3722, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3723 = icmp ne i8 %3722, 0
  %.v183 = select i1 %3723, i64 59, i64 6
  %3724 = add i64 %3711, %.v183
  store i64 %3724, i64* %3, align 8
  br i1 %3723, label %block_.L_450a49, label %block_450a14

block_450a14:                                     ; preds = %block_.L_4509d7
  %3725 = add i64 %3708, -8
  %3726 = add i64 %3724, 4
  store i64 %3726, i64* %3, align 8
  %3727 = inttoptr i64 %3725 to i64*
  %3728 = load i64, i64* %3727, align 8
  store i64 %3728, i64* %RAX.i186, align 8
  %3729 = add i64 %3728, 40
  %3730 = add i64 %3724, 8
  store i64 %3730, i64* %3, align 8
  %3731 = inttoptr i64 %3729 to i64*
  %3732 = load i64, i64* %3731, align 8
  %3733 = add i64 %3732, 1608
  store i64 %3733, i64* %RAX.i186, align 8
  %3734 = icmp ugt i64 %3732, -1609
  %3735 = zext i1 %3734 to i8
  store i8 %3735, i8* %14, align 1
  %3736 = trunc i64 %3733 to i32
  %3737 = and i32 %3736, 255
  %3738 = tail call i32 @llvm.ctpop.i32(i32 %3737)
  %3739 = trunc i32 %3738 to i8
  %3740 = and i8 %3739, 1
  %3741 = xor i8 %3740, 1
  store i8 %3741, i8* %21, align 1
  %3742 = xor i64 %3733, %3732
  %3743 = lshr i64 %3742, 4
  %3744 = trunc i64 %3743 to i8
  %3745 = and i8 %3744, 1
  store i8 %3745, i8* %27, align 1
  %3746 = icmp eq i64 %3733, 0
  %3747 = zext i1 %3746 to i8
  store i8 %3747, i8* %30, align 1
  %3748 = lshr i64 %3733, 63
  %3749 = trunc i64 %3748 to i8
  store i8 %3749, i8* %33, align 1
  %3750 = lshr i64 %3732, 63
  %3751 = xor i64 %3748, %3750
  %3752 = add nuw nsw i64 %3751, %3748
  %3753 = icmp eq i64 %3752, 2
  %3754 = zext i1 %3753 to i8
  store i8 %3754, i8* %39, align 1
  %3755 = add i64 %3708, -40
  %3756 = add i64 %3724, 17
  store i64 %3756, i64* %3, align 8
  %3757 = inttoptr i64 %3755 to i32*
  %3758 = load i32, i32* %3757, align 4
  %3759 = zext i32 %3758 to i64
  store i64 %3759, i64* %RCX.i4414.pre-phi, align 8
  %3760 = sext i32 %3758 to i64
  %3761 = mul nsw i64 %3760, 264
  store i64 %3761, i64* %RDX.i4411.pre-phi, align 8
  %3762 = lshr i64 %3761, 63
  %3763 = add i64 %3761, %3733
  store i64 %3763, i64* %RAX.i186, align 8
  %3764 = icmp ult i64 %3763, %3733
  %3765 = icmp ult i64 %3763, %3761
  %3766 = or i1 %3764, %3765
  %3767 = zext i1 %3766 to i8
  store i8 %3767, i8* %14, align 1
  %3768 = trunc i64 %3763 to i32
  %3769 = and i32 %3768, 255
  %3770 = tail call i32 @llvm.ctpop.i32(i32 %3769)
  %3771 = trunc i32 %3770 to i8
  %3772 = and i8 %3771, 1
  %3773 = xor i8 %3772, 1
  store i8 %3773, i8* %21, align 1
  %3774 = xor i64 %3761, %3733
  %3775 = xor i64 %3774, %3763
  %3776 = lshr i64 %3775, 4
  %3777 = trunc i64 %3776 to i8
  %3778 = and i8 %3777, 1
  store i8 %3778, i8* %27, align 1
  %3779 = icmp eq i64 %3763, 0
  %3780 = zext i1 %3779 to i8
  store i8 %3780, i8* %30, align 1
  %3781 = lshr i64 %3763, 63
  %3782 = trunc i64 %3781 to i8
  store i8 %3782, i8* %33, align 1
  %3783 = xor i64 %3781, %3748
  %3784 = xor i64 %3781, %3762
  %3785 = add nuw nsw i64 %3783, %3784
  %3786 = icmp eq i64 %3785, 2
  %3787 = zext i1 %3786 to i8
  store i8 %3787, i8* %39, align 1
  %3788 = load i64, i64* %RBP.i, align 8
  %3789 = add i64 %3788, -20
  %3790 = add i64 %3724, 37
  store i64 %3790, i64* %3, align 8
  %3791 = inttoptr i64 %3789 to i32*
  %3792 = load i32, i32* %3791, align 4
  %3793 = sext i32 %3792 to i64
  store i64 %3793, i64* %RDX.i4411.pre-phi, align 8
  %3794 = shl nsw i64 %3793, 3
  %3795 = add i64 %3794, %3763
  %3796 = add i64 %3724, 41
  store i64 %3796, i64* %3, align 8
  %3797 = inttoptr i64 %3795 to i64*
  %3798 = load i64, i64* %3797, align 8
  store i64 %3798, i64* %RAX.i186, align 8
  %3799 = add i64 %3788, -200
  %3800 = add i64 %3724, 48
  store i64 %3800, i64* %3, align 8
  %3801 = inttoptr i64 %3799 to i64*
  store i64 %3798, i64* %3801, align 8
  %3802 = load i64, i64* %3, align 8
  %3803 = add i64 %3802, 21
  br label %block_.L_450a59

block_.L_450a49:                                  ; preds = %block_.L_4509d7
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i4414.pre-phi, align 8
  %3804 = add i64 %3708, -200
  %3805 = add i64 %3724, 11
  store i64 %3805, i64* %3, align 8
  %3806 = inttoptr i64 %3804 to i64*
  store i64 0, i64* %3806, align 8
  %3807 = load i64, i64* %3, align 8
  %3808 = add i64 %3807, 5
  store i64 %3808, i64* %3, align 8
  br label %block_.L_450a59

block_.L_450a59:                                  ; preds = %block_.L_450a49, %block_450a14
  %storemerge88 = phi i64 [ %3803, %block_450a14 ], [ %3808, %block_.L_450a49 ]
  %3809 = load i64, i64* %RBP.i, align 8
  %3810 = add i64 %3809, -200
  %3811 = add i64 %storemerge88, 7
  store i64 %3811, i64* %3, align 8
  %3812 = inttoptr i64 %3810 to i64*
  %3813 = load i64, i64* %3812, align 8
  store i64 %3813, i64* %RAX.i186, align 8
  %3814 = add i64 %3809, -8
  %3815 = add i64 %storemerge88, 11
  store i64 %3815, i64* %3, align 8
  %3816 = inttoptr i64 %3814 to i64*
  %3817 = load i64, i64* %3816, align 8
  store i64 %3817, i64* %RCX.i4414.pre-phi, align 8
  %3818 = add i64 %3817, 40
  %3819 = add i64 %storemerge88, 15
  store i64 %3819, i64* %3, align 8
  %3820 = inttoptr i64 %3818 to i64*
  %3821 = load i64, i64* %3820, align 8
  store i64 %3821, i64* %RCX.i4414.pre-phi, align 8
  %3822 = add i64 %3821, 6496
  %3823 = add i64 %storemerge88, 22
  store i64 %3823, i64* %3, align 8
  %3824 = inttoptr i64 %3822 to i64*
  %3825 = load i64, i64* %3824, align 8
  store i64 %3825, i64* %RCX.i4414.pre-phi, align 8
  %3826 = add i64 %storemerge88, 25
  store i64 %3826, i64* %3, align 8
  %3827 = inttoptr i64 %3825 to i64*
  %3828 = load i64, i64* %3827, align 8
  store i64 %3828, i64* %RCX.i4414.pre-phi, align 8
  %3829 = add i64 %3809, -12
  %3830 = add i64 %storemerge88, 29
  store i64 %3830, i64* %3, align 8
  %3831 = inttoptr i64 %3829 to i32*
  %3832 = load i32, i32* %3831, align 4
  %3833 = sext i32 %3832 to i64
  store i64 %3833, i64* %RDX.i4411.pre-phi, align 8
  %3834 = shl nsw i64 %3833, 3
  %3835 = add i64 %3834, %3828
  %3836 = add i64 %storemerge88, 33
  store i64 %3836, i64* %3, align 8
  %3837 = inttoptr i64 %3835 to i64*
  %3838 = load i64, i64* %3837, align 8
  store i64 %3838, i64* %RCX.i4414.pre-phi, align 8
  %3839 = add i64 %3809, -16
  %3840 = add i64 %storemerge88, 37
  store i64 %3840, i64* %3, align 8
  %3841 = inttoptr i64 %3839 to i32*
  %3842 = load i32, i32* %3841, align 4
  %3843 = sext i32 %3842 to i64
  store i64 %3843, i64* %RDX.i4411.pre-phi, align 8
  %3844 = shl nsw i64 %3843, 3
  %3845 = add i64 %3844, %3838
  %3846 = add i64 %storemerge88, 41
  store i64 %3846, i64* %3, align 8
  %3847 = inttoptr i64 %3845 to i64*
  store i64 %3813, i64* %3847, align 8
  %3848 = load i64, i64* %RBP.i, align 8
  %3849 = add i64 %3848, -24
  %3850 = load i64, i64* %3, align 8
  %3851 = add i64 %3850, 4
  store i64 %3851, i64* %3, align 8
  %3852 = inttoptr i64 %3849 to i32*
  %3853 = load i32, i32* %3852, align 4
  store i8 0, i8* %14, align 1
  %3854 = and i32 %3853, 255
  %3855 = tail call i32 @llvm.ctpop.i32(i32 %3854)
  %3856 = trunc i32 %3855 to i8
  %3857 = and i8 %3856, 1
  %3858 = xor i8 %3857, 1
  store i8 %3858, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %3859 = icmp eq i32 %3853, 0
  %3860 = zext i1 %3859 to i8
  store i8 %3860, i8* %30, align 1
  %3861 = lshr i32 %3853, 31
  %3862 = trunc i32 %3861 to i8
  store i8 %3862, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %3863 = icmp ne i8 %3862, 0
  %.v184 = select i1 %3863, i64 59, i64 6
  %3864 = add i64 %3851, %.v184
  store i64 %3864, i64* %3, align 8
  br i1 %3863, label %block_.L_450ac1, label %block_450a8c

block_450a8c:                                     ; preds = %block_.L_450a59
  %3865 = add i64 %3848, -8
  %3866 = add i64 %3864, 4
  store i64 %3866, i64* %3, align 8
  %3867 = inttoptr i64 %3865 to i64*
  %3868 = load i64, i64* %3867, align 8
  store i64 %3868, i64* %RAX.i186, align 8
  %3869 = add i64 %3868, 40
  %3870 = add i64 %3864, 8
  store i64 %3870, i64* %3, align 8
  %3871 = inttoptr i64 %3869 to i64*
  %3872 = load i64, i64* %3871, align 8
  %3873 = add i64 %3872, 1608
  store i64 %3873, i64* %RAX.i186, align 8
  %3874 = icmp ugt i64 %3872, -1609
  %3875 = zext i1 %3874 to i8
  store i8 %3875, i8* %14, align 1
  %3876 = trunc i64 %3873 to i32
  %3877 = and i32 %3876, 255
  %3878 = tail call i32 @llvm.ctpop.i32(i32 %3877)
  %3879 = trunc i32 %3878 to i8
  %3880 = and i8 %3879, 1
  %3881 = xor i8 %3880, 1
  store i8 %3881, i8* %21, align 1
  %3882 = xor i64 %3873, %3872
  %3883 = lshr i64 %3882, 4
  %3884 = trunc i64 %3883 to i8
  %3885 = and i8 %3884, 1
  store i8 %3885, i8* %27, align 1
  %3886 = icmp eq i64 %3873, 0
  %3887 = zext i1 %3886 to i8
  store i8 %3887, i8* %30, align 1
  %3888 = lshr i64 %3873, 63
  %3889 = trunc i64 %3888 to i8
  store i8 %3889, i8* %33, align 1
  %3890 = lshr i64 %3872, 63
  %3891 = xor i64 %3888, %3890
  %3892 = add nuw nsw i64 %3891, %3888
  %3893 = icmp eq i64 %3892, 2
  %3894 = zext i1 %3893 to i8
  store i8 %3894, i8* %39, align 1
  %3895 = add i64 %3848, -40
  %3896 = add i64 %3864, 17
  store i64 %3896, i64* %3, align 8
  %3897 = inttoptr i64 %3895 to i32*
  %3898 = load i32, i32* %3897, align 4
  %3899 = add i32 %3898, 1
  %3900 = zext i32 %3899 to i64
  store i64 %3900, i64* %RCX.i4414.pre-phi, align 8
  %3901 = sext i32 %3899 to i64
  %3902 = mul nsw i64 %3901, 264
  store i64 %3902, i64* %RDX.i4411.pre-phi, align 8
  %3903 = lshr i64 %3902, 63
  %3904 = add i64 %3902, %3873
  store i64 %3904, i64* %RAX.i186, align 8
  %3905 = icmp ult i64 %3904, %3873
  %3906 = icmp ult i64 %3904, %3902
  %3907 = or i1 %3905, %3906
  %3908 = zext i1 %3907 to i8
  store i8 %3908, i8* %14, align 1
  %3909 = trunc i64 %3904 to i32
  %3910 = and i32 %3909, 255
  %3911 = tail call i32 @llvm.ctpop.i32(i32 %3910)
  %3912 = trunc i32 %3911 to i8
  %3913 = and i8 %3912, 1
  %3914 = xor i8 %3913, 1
  store i8 %3914, i8* %21, align 1
  %3915 = xor i64 %3902, %3873
  %3916 = xor i64 %3915, %3904
  %3917 = lshr i64 %3916, 4
  %3918 = trunc i64 %3917 to i8
  %3919 = and i8 %3918, 1
  store i8 %3919, i8* %27, align 1
  %3920 = icmp eq i64 %3904, 0
  %3921 = zext i1 %3920 to i8
  store i8 %3921, i8* %30, align 1
  %3922 = lshr i64 %3904, 63
  %3923 = trunc i64 %3922 to i8
  store i8 %3923, i8* %33, align 1
  %3924 = xor i64 %3922, %3888
  %3925 = xor i64 %3922, %3903
  %3926 = add nuw nsw i64 %3924, %3925
  %3927 = icmp eq i64 %3926, 2
  %3928 = zext i1 %3927 to i8
  store i8 %3928, i8* %39, align 1
  %3929 = load i64, i64* %RBP.i, align 8
  %3930 = add i64 %3929, -24
  %3931 = add i64 %3864, 37
  store i64 %3931, i64* %3, align 8
  %3932 = inttoptr i64 %3930 to i32*
  %3933 = load i32, i32* %3932, align 4
  %3934 = sext i32 %3933 to i64
  store i64 %3934, i64* %RDX.i4411.pre-phi, align 8
  %3935 = shl nsw i64 %3934, 3
  %3936 = add i64 %3935, %3904
  %3937 = add i64 %3864, 41
  store i64 %3937, i64* %3, align 8
  %3938 = inttoptr i64 %3936 to i64*
  %3939 = load i64, i64* %3938, align 8
  store i64 %3939, i64* %RAX.i186, align 8
  %3940 = add i64 %3929, -208
  %3941 = add i64 %3864, 48
  store i64 %3941, i64* %3, align 8
  %3942 = inttoptr i64 %3940 to i64*
  store i64 %3939, i64* %3942, align 8
  %3943 = load i64, i64* %3, align 8
  %3944 = add i64 %3943, 21
  br label %block_.L_450ad1

block_.L_450ac1:                                  ; preds = %block_.L_450a59
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i4414.pre-phi, align 8
  %3945 = add i64 %3848, -208
  %3946 = add i64 %3864, 11
  store i64 %3946, i64* %3, align 8
  %3947 = inttoptr i64 %3945 to i64*
  store i64 0, i64* %3947, align 8
  %3948 = load i64, i64* %3, align 8
  %3949 = add i64 %3948, 5
  store i64 %3949, i64* %3, align 8
  br label %block_.L_450ad1

block_.L_450ad1:                                  ; preds = %block_.L_450ac1, %block_450a8c
  %storemerge89 = phi i64 [ %3944, %block_450a8c ], [ %3949, %block_.L_450ac1 ]
  %3950 = load i64, i64* %RBP.i, align 8
  %3951 = add i64 %3950, -208
  %3952 = add i64 %storemerge89, 7
  store i64 %3952, i64* %3, align 8
  %3953 = inttoptr i64 %3951 to i64*
  %3954 = load i64, i64* %3953, align 8
  store i64 %3954, i64* %RAX.i186, align 8
  %3955 = add i64 %3950, -8
  %3956 = add i64 %storemerge89, 11
  store i64 %3956, i64* %3, align 8
  %3957 = inttoptr i64 %3955 to i64*
  %3958 = load i64, i64* %3957, align 8
  store i64 %3958, i64* %RCX.i4414.pre-phi, align 8
  %3959 = add i64 %3958, 40
  %3960 = add i64 %storemerge89, 15
  store i64 %3960, i64* %3, align 8
  %3961 = inttoptr i64 %3959 to i64*
  %3962 = load i64, i64* %3961, align 8
  store i64 %3962, i64* %RCX.i4414.pre-phi, align 8
  %3963 = add i64 %3962, 6496
  %3964 = add i64 %storemerge89, 22
  store i64 %3964, i64* %3, align 8
  %3965 = inttoptr i64 %3963 to i64*
  %3966 = load i64, i64* %3965, align 8
  store i64 %3966, i64* %RCX.i4414.pre-phi, align 8
  %3967 = add i64 %3966, 8
  %3968 = add i64 %storemerge89, 26
  store i64 %3968, i64* %3, align 8
  %3969 = inttoptr i64 %3967 to i64*
  %3970 = load i64, i64* %3969, align 8
  store i64 %3970, i64* %RCX.i4414.pre-phi, align 8
  %3971 = add i64 %3950, -12
  %3972 = add i64 %storemerge89, 30
  store i64 %3972, i64* %3, align 8
  %3973 = inttoptr i64 %3971 to i32*
  %3974 = load i32, i32* %3973, align 4
  %3975 = sext i32 %3974 to i64
  store i64 %3975, i64* %RDX.i4411.pre-phi, align 8
  %3976 = shl nsw i64 %3975, 3
  %3977 = add i64 %3976, %3970
  %3978 = add i64 %storemerge89, 34
  store i64 %3978, i64* %3, align 8
  %3979 = inttoptr i64 %3977 to i64*
  %3980 = load i64, i64* %3979, align 8
  store i64 %3980, i64* %RCX.i4414.pre-phi, align 8
  %3981 = add i64 %3950, -16
  %3982 = add i64 %storemerge89, 38
  store i64 %3982, i64* %3, align 8
  %3983 = inttoptr i64 %3981 to i32*
  %3984 = load i32, i32* %3983, align 4
  %3985 = sext i32 %3984 to i64
  store i64 %3985, i64* %RDX.i4411.pre-phi, align 8
  %3986 = shl nsw i64 %3985, 3
  %3987 = add i64 %3986, %3980
  %3988 = add i64 %storemerge89, 42
  store i64 %3988, i64* %3, align 8
  %3989 = inttoptr i64 %3987 to i64*
  store i64 %3954, i64* %3989, align 8
  %3990 = load i64, i64* %3, align 8
  %3991 = add i64 %3990, 282
  store i64 %3991, i64* %3, align 8
  br label %block_.L_450c15

block_.L_450b00:                                  ; preds = %block_450876, %routine_idivl__ecx.exit4247
  %3992 = phi i64 [ %3236, %block_450876 ], [ %3208, %routine_idivl__ecx.exit4247 ]
  %3993 = add i64 %3992, 4
  store i64 %3993, i64* %3, align 8
  %3994 = load i64, i64* %3189, align 8
  store i64 %3994, i64* %RAX.i186, align 8
  %3995 = add i64 %3994, 40
  %3996 = add i64 %3992, 8
  store i64 %3996, i64* %3, align 8
  %3997 = inttoptr i64 %3995 to i64*
  %3998 = load i64, i64* %3997, align 8
  store i64 %3998, i64* %RAX.i186, align 8
  %3999 = add i64 %3998, 6480
  %4000 = add i64 %3992, 15
  store i64 %4000, i64* %3, align 8
  %4001 = inttoptr i64 %3999 to i64*
  %4002 = load i64, i64* %4001, align 8
  store i64 %4002, i64* %RAX.i186, align 8
  %4003 = add i64 %3992, 18
  store i64 %4003, i64* %3, align 8
  %4004 = inttoptr i64 %4002 to i64*
  %4005 = load i64, i64* %4004, align 8
  store i64 %4005, i64* %RAX.i186, align 8
  %4006 = add i64 %3185, -12
  %4007 = add i64 %3992, 22
  store i64 %4007, i64* %3, align 8
  %4008 = inttoptr i64 %4006 to i32*
  %4009 = load i32, i32* %4008, align 4
  %4010 = sext i32 %4009 to i64
  store i64 %4010, i64* %RCX.i4414.pre-phi, align 8
  %4011 = shl nsw i64 %4010, 3
  %4012 = add i64 %4011, %4005
  %4013 = add i64 %3992, 26
  store i64 %4013, i64* %3, align 8
  %4014 = inttoptr i64 %4012 to i64*
  %4015 = load i64, i64* %4014, align 8
  store i64 %4015, i64* %RAX.i186, align 8
  %4016 = add i64 %3185, -16
  %4017 = add i64 %3992, 30
  store i64 %4017, i64* %3, align 8
  %4018 = inttoptr i64 %4016 to i32*
  %4019 = load i32, i32* %4018, align 4
  %4020 = sext i32 %4019 to i64
  store i64 %4020, i64* %RCX.i4414.pre-phi, align 8
  %4021 = shl nsw i64 %4020, 1
  %4022 = add i64 %4021, %4015
  %4023 = add i64 %3992, 34
  store i64 %4023, i64* %3, align 8
  %4024 = inttoptr i64 %4022 to i16*
  %4025 = load i16, i16* %4024, align 2
  %4026 = sext i16 %4025 to i64
  %4027 = and i64 %4026, 4294967295
  store i64 %4027, i64* %RDX.i4411.pre-phi, align 8
  %4028 = add i64 %3185, -20
  %4029 = sext i16 %4025 to i32
  %4030 = add i64 %3992, 37
  store i64 %4030, i64* %3, align 8
  %4031 = inttoptr i64 %4028 to i32*
  store i32 %4029, i32* %4031, align 4
  %4032 = load i64, i64* %RBP.i, align 8
  %4033 = add i64 %4032, -8
  %4034 = load i64, i64* %3, align 8
  %4035 = add i64 %4034, 4
  store i64 %4035, i64* %3, align 8
  %4036 = inttoptr i64 %4033 to i64*
  %4037 = load i64, i64* %4036, align 8
  store i64 %4037, i64* %RAX.i186, align 8
  %4038 = add i64 %4037, 40
  %4039 = add i64 %4034, 8
  store i64 %4039, i64* %3, align 8
  %4040 = inttoptr i64 %4038 to i64*
  %4041 = load i64, i64* %4040, align 8
  store i64 %4041, i64* %RAX.i186, align 8
  %4042 = add i64 %4041, 6480
  %4043 = add i64 %4034, 15
  store i64 %4043, i64* %3, align 8
  %4044 = inttoptr i64 %4042 to i64*
  %4045 = load i64, i64* %4044, align 8
  store i64 %4045, i64* %RAX.i186, align 8
  %4046 = add i64 %4045, 8
  %4047 = add i64 %4034, 19
  store i64 %4047, i64* %3, align 8
  %4048 = inttoptr i64 %4046 to i64*
  %4049 = load i64, i64* %4048, align 8
  store i64 %4049, i64* %RAX.i186, align 8
  %4050 = add i64 %4032, -12
  %4051 = add i64 %4034, 23
  store i64 %4051, i64* %3, align 8
  %4052 = inttoptr i64 %4050 to i32*
  %4053 = load i32, i32* %4052, align 4
  %4054 = sext i32 %4053 to i64
  store i64 %4054, i64* %RCX.i4414.pre-phi, align 8
  %4055 = shl nsw i64 %4054, 3
  %4056 = add i64 %4055, %4049
  %4057 = add i64 %4034, 27
  store i64 %4057, i64* %3, align 8
  %4058 = inttoptr i64 %4056 to i64*
  %4059 = load i64, i64* %4058, align 8
  store i64 %4059, i64* %RAX.i186, align 8
  %4060 = add i64 %4032, -16
  %4061 = add i64 %4034, 31
  store i64 %4061, i64* %3, align 8
  %4062 = inttoptr i64 %4060 to i32*
  %4063 = load i32, i32* %4062, align 4
  %4064 = sext i32 %4063 to i64
  store i64 %4064, i64* %RCX.i4414.pre-phi, align 8
  %4065 = shl nsw i64 %4064, 1
  %4066 = add i64 %4065, %4059
  %4067 = add i64 %4034, 35
  store i64 %4067, i64* %3, align 8
  %4068 = inttoptr i64 %4066 to i16*
  %4069 = load i16, i16* %4068, align 2
  %4070 = sext i16 %4069 to i64
  %4071 = and i64 %4070, 4294967295
  store i64 %4071, i64* %RDX.i4411.pre-phi, align 8
  %4072 = add i64 %4032, -24
  %4073 = sext i16 %4069 to i32
  %4074 = add i64 %4034, 38
  store i64 %4074, i64* %3, align 8
  %4075 = inttoptr i64 %4072 to i32*
  store i32 %4073, i32* %4075, align 4
  %4076 = load i64, i64* %RBP.i, align 8
  %4077 = add i64 %4076, -20
  %4078 = load i64, i64* %3, align 8
  %4079 = add i64 %4078, 4
  store i64 %4079, i64* %3, align 8
  %4080 = inttoptr i64 %4077 to i32*
  %4081 = load i32, i32* %4080, align 4
  store i8 0, i8* %14, align 1
  %4082 = and i32 %4081, 255
  %4083 = tail call i32 @llvm.ctpop.i32(i32 %4082)
  %4084 = trunc i32 %4083 to i8
  %4085 = and i8 %4084, 1
  %4086 = xor i8 %4085, 1
  store i8 %4086, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4087 = icmp eq i32 %4081, 0
  %4088 = zext i1 %4087 to i8
  store i8 %4088, i8* %30, align 1
  %4089 = lshr i32 %4081, 31
  %4090 = trunc i32 %4089 to i8
  store i8 %4090, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4091 = icmp ne i8 %4090, 0
  %.v185 = select i1 %4091, i64 35, i64 6
  %4092 = add i64 %4079, %.v185
  store i64 %4092, i64* %3, align 8
  br i1 %4091, label %block_.L_450b72, label %block_450b55

block_450b55:                                     ; preds = %block_.L_450b00
  %4093 = add i64 %4076, -8
  %4094 = add i64 %4092, 4
  store i64 %4094, i64* %3, align 8
  %4095 = inttoptr i64 %4093 to i64*
  %4096 = load i64, i64* %4095, align 8
  store i64 %4096, i64* %RAX.i186, align 8
  %4097 = add i64 %4096, 40
  %4098 = add i64 %4092, 8
  store i64 %4098, i64* %3, align 8
  %4099 = inttoptr i64 %4097 to i64*
  %4100 = load i64, i64* %4099, align 8
  store i64 %4100, i64* %RAX.i186, align 8
  %4101 = add i64 %4092, 12
  store i64 %4101, i64* %3, align 8
  %4102 = load i32, i32* %4080, align 4
  %4103 = sext i32 %4102 to i64
  store i64 %4103, i64* %RCX.i4414.pre-phi, align 8
  %4104 = shl nsw i64 %4103, 3
  %4105 = add i64 %4100, 24
  %4106 = add i64 %4105, %4104
  %4107 = add i64 %4092, 17
  store i64 %4107, i64* %3, align 8
  %4108 = inttoptr i64 %4106 to i64*
  %4109 = load i64, i64* %4108, align 8
  store i64 %4109, i64* %RAX.i186, align 8
  %4110 = add i64 %4076, -216
  %4111 = add i64 %4092, 24
  store i64 %4111, i64* %3, align 8
  %4112 = inttoptr i64 %4110 to i64*
  store i64 %4109, i64* %4112, align 8
  %4113 = load i64, i64* %3, align 8
  %4114 = add i64 %4113, 24
  br label %block_.L_450b85

block_.L_450b72:                                  ; preds = %block_.L_450b00
  store i64 -1, i64* %RAX.i186, align 8
  %4115 = add i64 %4076, -216
  %4116 = add i64 %4092, 14
  store i64 %4116, i64* %3, align 8
  %4117 = inttoptr i64 %4115 to i64*
  store i64 -1, i64* %4117, align 8
  %4118 = load i64, i64* %3, align 8
  %4119 = add i64 %4118, 5
  store i64 %4119, i64* %3, align 8
  br label %block_.L_450b85

block_.L_450b85:                                  ; preds = %block_.L_450b72, %block_450b55
  %storemerge90 = phi i64 [ %4114, %block_450b55 ], [ %4119, %block_.L_450b72 ]
  %4120 = load i64, i64* %RBP.i, align 8
  %4121 = add i64 %4120, -216
  %4122 = add i64 %storemerge90, 7
  store i64 %4122, i64* %3, align 8
  %4123 = inttoptr i64 %4121 to i64*
  %4124 = load i64, i64* %4123, align 8
  store i64 %4124, i64* %RAX.i186, align 8
  %4125 = add i64 %4120, -8
  %4126 = add i64 %storemerge90, 11
  store i64 %4126, i64* %3, align 8
  %4127 = inttoptr i64 %4125 to i64*
  %4128 = load i64, i64* %4127, align 8
  store i64 %4128, i64* %RCX.i4414.pre-phi, align 8
  %4129 = add i64 %4128, 40
  %4130 = add i64 %storemerge90, 15
  store i64 %4130, i64* %3, align 8
  %4131 = inttoptr i64 %4129 to i64*
  %4132 = load i64, i64* %4131, align 8
  store i64 %4132, i64* %RCX.i4414.pre-phi, align 8
  %4133 = add i64 %4132, 6496
  %4134 = add i64 %storemerge90, 22
  store i64 %4134, i64* %3, align 8
  %4135 = inttoptr i64 %4133 to i64*
  %4136 = load i64, i64* %4135, align 8
  store i64 %4136, i64* %RCX.i4414.pre-phi, align 8
  %4137 = add i64 %storemerge90, 25
  store i64 %4137, i64* %3, align 8
  %4138 = inttoptr i64 %4136 to i64*
  %4139 = load i64, i64* %4138, align 8
  store i64 %4139, i64* %RCX.i4414.pre-phi, align 8
  %4140 = add i64 %4120, -12
  %4141 = add i64 %storemerge90, 29
  store i64 %4141, i64* %3, align 8
  %4142 = inttoptr i64 %4140 to i32*
  %4143 = load i32, i32* %4142, align 4
  %4144 = sext i32 %4143 to i64
  store i64 %4144, i64* %RDX.i4411.pre-phi, align 8
  %4145 = shl nsw i64 %4144, 3
  %4146 = add i64 %4145, %4139
  %4147 = add i64 %storemerge90, 33
  store i64 %4147, i64* %3, align 8
  %4148 = inttoptr i64 %4146 to i64*
  %4149 = load i64, i64* %4148, align 8
  store i64 %4149, i64* %RCX.i4414.pre-phi, align 8
  %4150 = add i64 %4120, -16
  %4151 = add i64 %storemerge90, 37
  store i64 %4151, i64* %3, align 8
  %4152 = inttoptr i64 %4150 to i32*
  %4153 = load i32, i32* %4152, align 4
  %4154 = sext i32 %4153 to i64
  store i64 %4154, i64* %RDX.i4411.pre-phi, align 8
  %4155 = shl nsw i64 %4154, 3
  %4156 = add i64 %4155, %4149
  %4157 = add i64 %storemerge90, 41
  store i64 %4157, i64* %3, align 8
  %4158 = inttoptr i64 %4156 to i64*
  store i64 %4124, i64* %4158, align 8
  %4159 = load i64, i64* %RBP.i, align 8
  %4160 = add i64 %4159, -24
  %4161 = load i64, i64* %3, align 8
  %4162 = add i64 %4161, 4
  store i64 %4162, i64* %3, align 8
  %4163 = inttoptr i64 %4160 to i32*
  %4164 = load i32, i32* %4163, align 4
  store i8 0, i8* %14, align 1
  %4165 = and i32 %4164, 255
  %4166 = tail call i32 @llvm.ctpop.i32(i32 %4165)
  %4167 = trunc i32 %4166 to i8
  %4168 = and i8 %4167, 1
  %4169 = xor i8 %4168, 1
  store i8 %4169, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4170 = icmp eq i32 %4164, 0
  %4171 = zext i1 %4170 to i8
  store i8 %4171, i8* %30, align 1
  %4172 = lshr i32 %4164, 31
  %4173 = trunc i32 %4172 to i8
  store i8 %4173, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4174 = icmp ne i8 %4173, 0
  %.v186 = select i1 %4174, i64 38, i64 6
  %4175 = add i64 %4162, %.v186
  store i64 %4175, i64* %3, align 8
  br i1 %4174, label %block_.L_450bd8, label %block_450bb8

block_450bb8:                                     ; preds = %block_.L_450b85
  %4176 = add i64 %4159, -8
  %4177 = add i64 %4175, 4
  store i64 %4177, i64* %3, align 8
  %4178 = inttoptr i64 %4176 to i64*
  %4179 = load i64, i64* %4178, align 8
  store i64 %4179, i64* %RAX.i186, align 8
  %4180 = add i64 %4179, 40
  %4181 = add i64 %4175, 8
  store i64 %4181, i64* %3, align 8
  %4182 = inttoptr i64 %4180 to i64*
  %4183 = load i64, i64* %4182, align 8
  store i64 %4183, i64* %RAX.i186, align 8
  %4184 = add i64 %4175, 12
  store i64 %4184, i64* %3, align 8
  %4185 = load i32, i32* %4163, align 4
  %4186 = sext i32 %4185 to i64
  store i64 %4186, i64* %RCX.i4414.pre-phi, align 8
  %4187 = shl nsw i64 %4186, 3
  %4188 = add i64 %4183, 288
  %4189 = add i64 %4188, %4187
  %4190 = add i64 %4175, 20
  store i64 %4190, i64* %3, align 8
  %4191 = inttoptr i64 %4189 to i64*
  %4192 = load i64, i64* %4191, align 8
  store i64 %4192, i64* %RAX.i186, align 8
  %4193 = add i64 %4159, -224
  %4194 = add i64 %4175, 27
  store i64 %4194, i64* %3, align 8
  %4195 = inttoptr i64 %4193 to i64*
  store i64 %4192, i64* %4195, align 8
  %4196 = load i64, i64* %3, align 8
  %4197 = add i64 %4196, 24
  br label %block_.L_450beb

block_.L_450bd8:                                  ; preds = %block_.L_450b85
  store i64 -1, i64* %RAX.i186, align 8
  %4198 = add i64 %4159, -224
  %4199 = add i64 %4175, 14
  store i64 %4199, i64* %3, align 8
  %4200 = inttoptr i64 %4198 to i64*
  store i64 -1, i64* %4200, align 8
  %4201 = load i64, i64* %3, align 8
  %4202 = add i64 %4201, 5
  store i64 %4202, i64* %3, align 8
  br label %block_.L_450beb

block_.L_450beb:                                  ; preds = %block_.L_450bd8, %block_450bb8
  %storemerge91 = phi i64 [ %4197, %block_450bb8 ], [ %4202, %block_.L_450bd8 ]
  %4203 = load i64, i64* %RBP.i, align 8
  %4204 = add i64 %4203, -224
  %4205 = add i64 %storemerge91, 7
  store i64 %4205, i64* %3, align 8
  %4206 = inttoptr i64 %4204 to i64*
  %4207 = load i64, i64* %4206, align 8
  store i64 %4207, i64* %RAX.i186, align 8
  %4208 = add i64 %4203, -8
  %4209 = add i64 %storemerge91, 11
  store i64 %4209, i64* %3, align 8
  %4210 = inttoptr i64 %4208 to i64*
  %4211 = load i64, i64* %4210, align 8
  store i64 %4211, i64* %RCX.i4414.pre-phi, align 8
  %4212 = add i64 %4211, 40
  %4213 = add i64 %storemerge91, 15
  store i64 %4213, i64* %3, align 8
  %4214 = inttoptr i64 %4212 to i64*
  %4215 = load i64, i64* %4214, align 8
  store i64 %4215, i64* %RCX.i4414.pre-phi, align 8
  %4216 = add i64 %4215, 6496
  %4217 = add i64 %storemerge91, 22
  store i64 %4217, i64* %3, align 8
  %4218 = inttoptr i64 %4216 to i64*
  %4219 = load i64, i64* %4218, align 8
  store i64 %4219, i64* %RCX.i4414.pre-phi, align 8
  %4220 = add i64 %4219, 8
  %4221 = add i64 %storemerge91, 26
  store i64 %4221, i64* %3, align 8
  %4222 = inttoptr i64 %4220 to i64*
  %4223 = load i64, i64* %4222, align 8
  store i64 %4223, i64* %RCX.i4414.pre-phi, align 8
  %4224 = add i64 %4203, -12
  %4225 = add i64 %storemerge91, 30
  store i64 %4225, i64* %3, align 8
  %4226 = inttoptr i64 %4224 to i32*
  %4227 = load i32, i32* %4226, align 4
  %4228 = sext i32 %4227 to i64
  store i64 %4228, i64* %RDX.i4411.pre-phi, align 8
  %4229 = shl nsw i64 %4228, 3
  %4230 = add i64 %4229, %4223
  %4231 = add i64 %storemerge91, 34
  store i64 %4231, i64* %3, align 8
  %4232 = inttoptr i64 %4230 to i64*
  %4233 = load i64, i64* %4232, align 8
  store i64 %4233, i64* %RCX.i4414.pre-phi, align 8
  %4234 = add i64 %4203, -16
  %4235 = add i64 %storemerge91, 38
  store i64 %4235, i64* %3, align 8
  %4236 = inttoptr i64 %4234 to i32*
  %4237 = load i32, i32* %4236, align 4
  %4238 = sext i32 %4237 to i64
  store i64 %4238, i64* %RDX.i4411.pre-phi, align 8
  %4239 = shl nsw i64 %4238, 3
  %4240 = add i64 %4239, %4233
  %4241 = add i64 %storemerge91, 42
  store i64 %4241, i64* %3, align 8
  %4242 = inttoptr i64 %4240 to i64*
  store i64 %4207, i64* %4242, align 8
  %.pre487 = load i64, i64* %3, align 8
  br label %block_.L_450c15

block_.L_450c15:                                  ; preds = %block_.L_450beb, %block_.L_450ad1
  %4243 = phi i64 [ %.pre487, %block_.L_450beb ], [ %3991, %block_.L_450ad1 ]
  %MEMORY.17 = phi %struct.Memory* [ %3154, %block_.L_450beb ], [ %3273, %block_.L_450ad1 ]
  %4244 = load i64, i64* %RBP.i, align 8
  %4245 = add i64 %4244, -12
  %4246 = add i64 %4243, 8
  store i64 %4246, i64* %3, align 8
  %4247 = inttoptr i64 %4245 to i32*
  %4248 = load i32, i32* %4247, align 4
  %4249 = add i32 %4248, 1
  %4250 = zext i32 %4249 to i64
  store i64 %4250, i64* %RAX.i186, align 8
  %4251 = icmp eq i32 %4248, -1
  %4252 = icmp eq i32 %4249, 0
  %4253 = or i1 %4251, %4252
  %4254 = zext i1 %4253 to i8
  store i8 %4254, i8* %14, align 1
  %4255 = and i32 %4249, 255
  %4256 = tail call i32 @llvm.ctpop.i32(i32 %4255)
  %4257 = trunc i32 %4256 to i8
  %4258 = and i8 %4257, 1
  %4259 = xor i8 %4258, 1
  store i8 %4259, i8* %21, align 1
  %4260 = xor i32 %4249, %4248
  %4261 = lshr i32 %4260, 4
  %4262 = trunc i32 %4261 to i8
  %4263 = and i8 %4262, 1
  store i8 %4263, i8* %27, align 1
  %4264 = zext i1 %4252 to i8
  store i8 %4264, i8* %30, align 1
  %4265 = lshr i32 %4249, 31
  %4266 = trunc i32 %4265 to i8
  store i8 %4266, i8* %33, align 1
  %4267 = lshr i32 %4248, 31
  %4268 = xor i32 %4265, %4267
  %4269 = add nuw nsw i32 %4268, %4265
  %4270 = icmp eq i32 %4269, 2
  %4271 = zext i1 %4270 to i8
  store i8 %4271, i8* %39, align 1
  %4272 = add i64 %4243, 14
  store i64 %4272, i64* %3, align 8
  store i32 %4249, i32* %4247, align 4
  %4273 = load i64, i64* %3, align 8
  %4274 = add i64 %4273, -1135
  store i64 %4274, i64* %3, align 8
  br label %block_.L_4507b4

block_.L_450c28:                                  ; preds = %routine_idivl__esi.exit4358
  %4275 = load i64, i64* %RBP.i, align 8
  %4276 = add i64 %4275, -16
  %4277 = add i64 %2895, 8
  store i64 %4277, i64* %3, align 8
  %4278 = inttoptr i64 %4276 to i32*
  %4279 = load i32, i32* %4278, align 4
  %4280 = add i32 %4279, 1
  %4281 = zext i32 %4280 to i64
  store i64 %4281, i64* %RAX.i186, align 8
  %4282 = icmp eq i32 %4279, -1
  %4283 = icmp eq i32 %4280, 0
  %4284 = or i1 %4282, %4283
  %4285 = zext i1 %4284 to i8
  store i8 %4285, i8* %14, align 1
  %4286 = and i32 %4280, 255
  %4287 = tail call i32 @llvm.ctpop.i32(i32 %4286)
  %4288 = trunc i32 %4287 to i8
  %4289 = and i8 %4288, 1
  %4290 = xor i8 %4289, 1
  store i8 %4290, i8* %21, align 1
  %4291 = xor i32 %4280, %4279
  %4292 = lshr i32 %4291, 4
  %4293 = trunc i32 %4292 to i8
  %4294 = and i8 %4293, 1
  store i8 %4294, i8* %27, align 1
  %4295 = zext i1 %4283 to i8
  store i8 %4295, i8* %30, align 1
  %4296 = lshr i32 %4280, 31
  %4297 = trunc i32 %4296 to i8
  store i8 %4297, i8* %33, align 1
  %4298 = lshr i32 %4279, 31
  %4299 = xor i32 %4296, %4298
  %4300 = add nuw nsw i32 %4299, %4296
  %4301 = icmp eq i32 %4300, 2
  %4302 = zext i1 %4301 to i8
  store i8 %4302, i8* %39, align 1
  %4303 = add i64 %2895, 14
  store i64 %4303, i64* %3, align 8
  store i32 %4280, i32* %4278, align 4
  %4304 = load i64, i64* %3, align 8
  %4305 = add i64 %4304, -1208
  store i64 %4305, i64* %3, align 8
  br label %block_.L_45077e

block_.L_450c3b:                                  ; preds = %routine_idivl__esi.exit4393
  %4306 = add i64 %2781, -8
  %4307 = add i64 %2812, 4
  store i64 %4307, i64* %3, align 8
  %4308 = inttoptr i64 %4306 to i64*
  %4309 = load i64, i64* %4308, align 8
  store i64 %4309, i64* %RAX.i186, align 8
  %4310 = add i64 %4309, 40
  %4311 = add i64 %2812, 8
  store i64 %4311, i64* %3, align 8
  %4312 = inttoptr i64 %4310 to i64*
  %4313 = load i64, i64* %4312, align 8
  store i64 %4313, i64* %RAX.i186, align 8
  %4314 = add i64 %4313, 6556
  %4315 = add i64 %2812, 15
  store i64 %4315, i64* %3, align 8
  %4316 = inttoptr i64 %4314 to i32*
  %4317 = load i32, i32* %4316, align 4
  store i8 0, i8* %14, align 1
  %4318 = and i32 %4317, 255
  %4319 = tail call i32 @llvm.ctpop.i32(i32 %4318)
  %4320 = trunc i32 %4319 to i8
  %4321 = and i8 %4320, 1
  %4322 = xor i8 %4321, 1
  store i8 %4322, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4323 = icmp eq i32 %4317, 0
  %4324 = zext i1 %4323 to i8
  store i8 %4324, i8* %30, align 1
  %4325 = lshr i32 %4317, 31
  %4326 = trunc i32 %4325 to i8
  store i8 %4326, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v532 = select i1 %4323, i64 42, i64 21
  %4327 = add i64 %2812, %.v532
  store i64 %4327, i64* %3, align 8
  br i1 %4323, label %block_.L_450c65, label %block_450c50

block_450c50:                                     ; preds = %block_.L_450c3b
  %4328 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %4328, i64* %RAX.i186, align 8
  %4329 = add i64 %4328, 1156
  %4330 = add i64 %4327, 15
  store i64 %4330, i64* %3, align 8
  %4331 = inttoptr i64 %4329 to i32*
  %4332 = load i32, i32* %4331, align 4
  store i8 0, i8* %14, align 1
  %4333 = and i32 %4332, 255
  %4334 = tail call i32 @llvm.ctpop.i32(i32 %4333)
  %4335 = trunc i32 %4334 to i8
  %4336 = and i8 %4335, 1
  %4337 = xor i8 %4336, 1
  store i8 %4337, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4338 = icmp eq i32 %4332, 0
  %4339 = zext i1 %4338 to i8
  store i8 %4339, i8* %30, align 1
  %4340 = lshr i32 %4332, 31
  %4341 = trunc i32 %4340 to i8
  store i8 %4341, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v533 = select i1 %4338, i64 2224, i64 21
  %4342 = add i64 %4327, %.v533
  store i64 %4342, i64* %3, align 8
  br i1 %4338, label %block_450c50.block_.L_451500_crit_edge, label %block_.L_450c65

block_450c50.block_.L_451500_crit_edge:           ; preds = %block_450c50
  %.pre508 = bitcast %union.anon* %40 to i32*
  %.pre509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  br label %block_.L_451500

block_.L_450c65:                                  ; preds = %block_450c50, %block_.L_450c3b
  %4343 = phi i64 [ %4342, %block_450c50 ], [ %4327, %block_.L_450c3b ]
  %4344 = add i64 %2781, -12
  %4345 = add i64 %4343, 7
  store i64 %4345, i64* %3, align 8
  %4346 = inttoptr i64 %4344 to i32*
  store i32 0, i32* %4346, align 4
  %EDI.i3551 = bitcast %union.anon* %40 to i32*
  %R8.i3546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W.i3301 = bitcast %union.anon* %4347 to i16*
  %R10.i2785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %.pre291 = load i64, i64* %3, align 8
  br label %block_.L_450c6c

block_.L_450c6c:                                  ; preds = %block_.L_4514e8, %block_.L_450c65
  %4348 = phi i64 [ %.pre291, %block_.L_450c65 ], [ %7909, %block_.L_4514e8 ]
  %MEMORY.19 = phi %struct.Memory* [ %2784, %block_.L_450c65 ], [ %4483, %block_.L_4514e8 ]
  store i64 4, i64* %RAX.i186, align 8
  %4349 = load i64, i64* %RBP.i, align 8
  %4350 = add i64 %4349, -12
  %4351 = add i64 %4348, 8
  store i64 %4351, i64* %3, align 8
  %4352 = inttoptr i64 %4350 to i32*
  %4353 = load i32, i32* %4352, align 4
  %4354 = zext i32 %4353 to i64
  store i64 %4354, i64* %RCX.i4414.pre-phi, align 8
  %4355 = add i64 %4349, -8
  %4356 = add i64 %4348, 12
  store i64 %4356, i64* %3, align 8
  %4357 = inttoptr i64 %4355 to i64*
  %4358 = load i64, i64* %4357, align 8
  store i64 %4358, i64* %RDX.i4411.pre-phi, align 8
  %4359 = add i64 %4358, 40
  %4360 = add i64 %4348, 16
  store i64 %4360, i64* %3, align 8
  %4361 = inttoptr i64 %4359 to i64*
  %4362 = load i64, i64* %4361, align 8
  store i64 %4362, i64* %RDX.i4411.pre-phi, align 8
  %4363 = add i64 %4362, 6392
  %4364 = add i64 %4348, 22
  store i64 %4364, i64* %3, align 8
  %4365 = inttoptr i64 %4363 to i32*
  %4366 = load i32, i32* %4365, align 4
  %4367 = zext i32 %4366 to i64
  store i64 %4367, i64* %RSI.i4407.pre-phi, align 8
  %4368 = add i64 %4349, -228
  %4369 = add i64 %4348, 28
  store i64 %4369, i64* %3, align 8
  %4370 = inttoptr i64 %4368 to i32*
  store i32 4, i32* %4370, align 4
  %4371 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %4372 = zext i32 %4371 to i64
  %4373 = load i64, i64* %3, align 8
  store i64 %4372, i64* %RAX.i186, align 8
  %4374 = sext i32 %4371 to i64
  %4375 = lshr i64 %4374, 32
  store i64 %4375, i64* %.pre-phi499, align 8
  %4376 = load i64, i64* %RBP.i, align 8
  %4377 = add i64 %4376, -228
  %4378 = add i64 %4373, 9
  store i64 %4378, i64* %3, align 8
  %4379 = inttoptr i64 %4377 to i32*
  %4380 = load i32, i32* %4379, align 4
  %4381 = zext i32 %4380 to i64
  store i64 %4381, i64* %RSI.i4407.pre-phi, align 8
  %4382 = add i64 %4373, 11
  store i64 %4382, i64* %3, align 8
  %4383 = sext i32 %4380 to i64
  %4384 = shl nuw i64 %4375, 32
  %4385 = or i64 %4384, %4372
  %4386 = sdiv i64 %4385, %4383
  %4387 = shl i64 %4386, 32
  %4388 = ashr exact i64 %4387, 32
  %4389 = icmp eq i64 %4386, %4388
  br i1 %4389, label %4392, label %4390

; <label>:4390:                                   ; preds = %block_.L_450c6c
  %4391 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4382, %struct.Memory* %MEMORY.19)
  %.pre292 = load i32, i32* %EAX.i304, align 4
  %.pre293 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit3634

; <label>:4392:                                   ; preds = %block_.L_450c6c
  %4393 = srem i64 %4385, %4383
  %4394 = and i64 %4386, 4294967295
  store i64 %4394, i64* %RAX.i186, align 8
  %4395 = and i64 %4393, 4294967295
  store i64 %4395, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4396 = trunc i64 %4386 to i32
  br label %routine_idivl__esi.exit3634

routine_idivl__esi.exit3634:                      ; preds = %4392, %4390
  %4397 = phi i64 [ %.pre293, %4390 ], [ %4382, %4392 ]
  %4398 = phi i32 [ %.pre292, %4390 ], [ %4396, %4392 ]
  %4399 = phi %struct.Memory* [ %4391, %4390 ], [ %MEMORY.19, %4392 ]
  %4400 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %4401 = sub i32 %4400, %4398
  %4402 = icmp ult i32 %4400, %4398
  %4403 = zext i1 %4402 to i8
  store i8 %4403, i8* %14, align 1
  %4404 = and i32 %4401, 255
  %4405 = tail call i32 @llvm.ctpop.i32(i32 %4404)
  %4406 = trunc i32 %4405 to i8
  %4407 = and i8 %4406, 1
  %4408 = xor i8 %4407, 1
  store i8 %4408, i8* %21, align 1
  %4409 = xor i32 %4398, %4400
  %4410 = xor i32 %4409, %4401
  %4411 = lshr i32 %4410, 4
  %4412 = trunc i32 %4411 to i8
  %4413 = and i8 %4412, 1
  store i8 %4413, i8* %27, align 1
  %4414 = icmp eq i32 %4401, 0
  %4415 = zext i1 %4414 to i8
  store i8 %4415, i8* %30, align 1
  %4416 = lshr i32 %4401, 31
  %4417 = trunc i32 %4416 to i8
  store i8 %4417, i8* %33, align 1
  %4418 = lshr i32 %4400, 31
  %4419 = lshr i32 %4398, 31
  %4420 = xor i32 %4419, %4418
  %4421 = xor i32 %4416, %4418
  %4422 = add nuw nsw i32 %4421, %4420
  %4423 = icmp eq i32 %4422, 2
  %4424 = zext i1 %4423 to i8
  store i8 %4424, i8* %39, align 1
  %4425 = icmp ne i8 %4417, 0
  %4426 = xor i1 %4425, %4423
  %.v534 = select i1 %4426, i64 8, i64 2152
  %4427 = add i64 %4397, %.v534
  store i64 %4427, i64* %3, align 8
  br i1 %4426, label %block_450c9b, label %block_.L_4514fb

block_450c9b:                                     ; preds = %routine_idivl__esi.exit3634
  %4428 = load i64, i64* %RBP.i, align 8
  %4429 = add i64 %4428, -16
  %4430 = add i64 %4427, 7
  store i64 %4430, i64* %3, align 8
  %4431 = inttoptr i64 %4429 to i32*
  store i32 0, i32* %4431, align 4
  %.pre364 = load i64, i64* %3, align 8
  br label %block_.L_450ca2

block_.L_450ca2:                                  ; preds = %block_.L_4514d5, %block_450c9b
  %4432 = phi i64 [ %.pre364, %block_450c9b ], [ %7878, %block_.L_4514d5 ]
  %MEMORY.20 = phi %struct.Memory* [ %4399, %block_450c9b ], [ %MEMORY.21, %block_.L_4514d5 ]
  store i64 8, i64* %RAX.i186, align 8
  %4433 = load i64, i64* %RBP.i, align 8
  %4434 = add i64 %4433, -16
  %4435 = add i64 %4432, 8
  store i64 %4435, i64* %3, align 8
  %4436 = inttoptr i64 %4434 to i32*
  %4437 = load i32, i32* %4436, align 4
  %4438 = zext i32 %4437 to i64
  store i64 %4438, i64* %RCX.i4414.pre-phi, align 8
  %4439 = add i64 %4433, -8
  %4440 = add i64 %4432, 12
  store i64 %4440, i64* %3, align 8
  %4441 = inttoptr i64 %4439 to i64*
  %4442 = load i64, i64* %4441, align 8
  store i64 %4442, i64* %RDX.i4411.pre-phi, align 8
  %4443 = add i64 %4442, 40
  %4444 = add i64 %4432, 16
  store i64 %4444, i64* %3, align 8
  %4445 = inttoptr i64 %4443 to i64*
  %4446 = load i64, i64* %4445, align 8
  store i64 %4446, i64* %RDX.i4411.pre-phi, align 8
  %4447 = add i64 %4446, 6396
  %4448 = add i64 %4432, 22
  store i64 %4448, i64* %3, align 8
  %4449 = inttoptr i64 %4447 to i32*
  %4450 = load i32, i32* %4449, align 4
  %4451 = zext i32 %4450 to i64
  store i64 %4451, i64* %RSI.i4407.pre-phi, align 8
  %4452 = add i64 %4433, -232
  %4453 = add i64 %4432, 28
  store i64 %4453, i64* %3, align 8
  %4454 = inttoptr i64 %4452 to i32*
  store i32 8, i32* %4454, align 4
  %4455 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %4456 = zext i32 %4455 to i64
  %4457 = load i64, i64* %3, align 8
  store i64 %4456, i64* %RAX.i186, align 8
  %4458 = sext i32 %4455 to i64
  %4459 = lshr i64 %4458, 32
  store i64 %4459, i64* %.pre-phi499, align 8
  %4460 = load i64, i64* %RBP.i, align 8
  %4461 = add i64 %4460, -232
  %4462 = add i64 %4457, 9
  store i64 %4462, i64* %3, align 8
  %4463 = inttoptr i64 %4461 to i32*
  %4464 = load i32, i32* %4463, align 4
  %4465 = zext i32 %4464 to i64
  store i64 %4465, i64* %RSI.i4407.pre-phi, align 8
  %4466 = add i64 %4457, 11
  store i64 %4466, i64* %3, align 8
  %4467 = sext i32 %4464 to i64
  %4468 = shl nuw i64 %4459, 32
  %4469 = or i64 %4468, %4456
  %4470 = sdiv i64 %4469, %4467
  %4471 = shl i64 %4470, 32
  %4472 = ashr exact i64 %4471, 32
  %4473 = icmp eq i64 %4470, %4472
  br i1 %4473, label %4476, label %4474

; <label>:4474:                                   ; preds = %block_.L_450ca2
  %4475 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4466, %struct.Memory* %MEMORY.20)
  %.pre365 = load i32, i32* %EAX.i304, align 4
  %.pre366 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit3599

; <label>:4476:                                   ; preds = %block_.L_450ca2
  %4477 = srem i64 %4469, %4467
  %4478 = and i64 %4470, 4294967295
  store i64 %4478, i64* %RAX.i186, align 8
  %4479 = and i64 %4477, 4294967295
  store i64 %4479, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4480 = trunc i64 %4470 to i32
  br label %routine_idivl__esi.exit3599

routine_idivl__esi.exit3599:                      ; preds = %4476, %4474
  %4481 = phi i64 [ %.pre366, %4474 ], [ %4466, %4476 ]
  %4482 = phi i32 [ %.pre365, %4474 ], [ %4480, %4476 ]
  %4483 = phi %struct.Memory* [ %4475, %4474 ], [ %MEMORY.20, %4476 ]
  %4484 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %4485 = sub i32 %4484, %4482
  %4486 = icmp ult i32 %4484, %4482
  %4487 = zext i1 %4486 to i8
  store i8 %4487, i8* %14, align 1
  %4488 = and i32 %4485, 255
  %4489 = tail call i32 @llvm.ctpop.i32(i32 %4488)
  %4490 = trunc i32 %4489 to i8
  %4491 = and i8 %4490, 1
  %4492 = xor i8 %4491, 1
  store i8 %4492, i8* %21, align 1
  %4493 = xor i32 %4482, %4484
  %4494 = xor i32 %4493, %4485
  %4495 = lshr i32 %4494, 4
  %4496 = trunc i32 %4495 to i8
  %4497 = and i8 %4496, 1
  store i8 %4497, i8* %27, align 1
  %4498 = icmp eq i32 %4485, 0
  %4499 = zext i1 %4498 to i8
  store i8 %4499, i8* %30, align 1
  %4500 = lshr i32 %4485, 31
  %4501 = trunc i32 %4500 to i8
  store i8 %4501, i8* %33, align 1
  %4502 = lshr i32 %4484, 31
  %4503 = lshr i32 %4482, 31
  %4504 = xor i32 %4503, %4502
  %4505 = xor i32 %4500, %4502
  %4506 = add nuw nsw i32 %4505, %4504
  %4507 = icmp eq i32 %4506, 2
  %4508 = zext i1 %4507 to i8
  store i8 %4508, i8* %39, align 1
  %4509 = icmp ne i8 %4501, 0
  %4510 = xor i1 %4509, %4507
  %.v546 = select i1 %4510, i64 8, i64 2079
  %4511 = add i64 %4481, %.v546
  %4512 = add i64 %4511, 5
  store i64 %4512, i64* %3, align 8
  br i1 %4510, label %block_450cd1, label %block_.L_4514e8

block_450cd1:                                     ; preds = %routine_idivl__esi.exit3599
  store i64 2, i64* %RAX.i186, align 8
  store i64 16, i64* %RCX.i4414.pre-phi, align 8
  store i64 4, i64* %RDX.i4411.pre-phi, align 8
  %4513 = load i64, i64* %RBP.i, align 8
  %4514 = add i64 %4513, -12
  %4515 = add i64 %4511, 18
  store i64 %4515, i64* %3, align 8
  %4516 = inttoptr i64 %4514 to i32*
  %4517 = load i32, i32* %4516, align 4
  %4518 = zext i32 %4517 to i64
  store i64 %4518, i64* %RSI.i4407.pre-phi, align 8
  %4519 = add i64 %4513, -236
  %4520 = add i64 %4511, 24
  store i64 %4520, i64* %3, align 8
  %4521 = inttoptr i64 %4519 to i32*
  store i32 2, i32* %4521, align 4
  %4522 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %4523 = zext i32 %4522 to i64
  %4524 = load i64, i64* %3, align 8
  store i64 %4523, i64* %RAX.i186, align 8
  %4525 = load i64, i64* %RBP.i, align 8
  %4526 = add i64 %4525, -240
  %4527 = load i32, i32* %.pre-phi501, align 4
  %4528 = add i64 %4524, 8
  store i64 %4528, i64* %3, align 8
  %4529 = inttoptr i64 %4526 to i32*
  store i32 %4527, i32* %4529, align 4
  %4530 = load i64, i64* %3, align 8
  %4531 = load i32, i32* %EAX.i304, align 8
  %4532 = sext i32 %4531 to i64
  %4533 = lshr i64 %4532, 32
  store i64 %4533, i64* %.pre-phi499, align 8
  %4534 = load i64, i64* %RBP.i, align 8
  %4535 = add i64 %4534, -240
  %4536 = add i64 %4530, 7
  store i64 %4536, i64* %3, align 8
  %4537 = inttoptr i64 %4535 to i32*
  %4538 = load i32, i32* %4537, align 4
  %4539 = zext i32 %4538 to i64
  store i64 %4539, i64* %RSI.i4407.pre-phi, align 8
  %4540 = add i64 %4530, 9
  store i64 %4540, i64* %3, align 8
  %4541 = zext i32 %4531 to i64
  %4542 = sext i32 %4538 to i64
  %4543 = shl nuw i64 %4533, 32
  %4544 = or i64 %4543, %4541
  %4545 = sdiv i64 %4544, %4542
  %4546 = shl i64 %4545, 32
  %4547 = ashr exact i64 %4546, 32
  %4548 = icmp eq i64 %4545, %4547
  br i1 %4548, label %4551, label %4549

; <label>:4549:                                   ; preds = %block_450cd1
  %4550 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4540, %struct.Memory* %4483)
  %.pre367 = load i64, i64* %RBP.i, align 8
  %.pre368 = load i32, i32* %EAX.i304, align 4
  %.pre369 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit3567

; <label>:4551:                                   ; preds = %block_450cd1
  %4552 = srem i64 %4544, %4542
  %4553 = and i64 %4545, 4294967295
  store i64 %4553, i64* %RAX.i186, align 8
  %4554 = and i64 %4552, 4294967295
  store i64 %4554, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4555 = trunc i64 %4545 to i32
  br label %routine_idivl__esi.exit3567

routine_idivl__esi.exit3567:                      ; preds = %4551, %4549
  %4556 = phi i64 [ %.pre369, %4549 ], [ %4540, %4551 ]
  %4557 = phi i32 [ %.pre368, %4549 ], [ %4555, %4551 ]
  %4558 = phi i64 [ %.pre367, %4549 ], [ %4534, %4551 ]
  %4559 = phi %struct.Memory* [ %4550, %4549 ], [ %4483, %4551 ]
  %4560 = add i64 %4558, -44
  %4561 = add i64 %4556, 3
  store i64 %4561, i64* %3, align 8
  %4562 = inttoptr i64 %4560 to i32*
  store i32 %4557, i32* %4562, align 4
  %4563 = load i64, i64* %RBP.i, align 8
  %4564 = add i64 %4563, -16
  %4565 = load i64, i64* %3, align 8
  %4566 = add i64 %4565, 3
  store i64 %4566, i64* %3, align 8
  %4567 = inttoptr i64 %4564 to i32*
  %4568 = load i32, i32* %4567, align 4
  %4569 = zext i32 %4568 to i64
  store i64 %4569, i64* %RAX.i186, align 8
  %4570 = sext i32 %4568 to i64
  %4571 = lshr i64 %4570, 32
  store i64 %4571, i64* %.pre-phi499, align 8
  %4572 = add i64 %4563, -236
  %4573 = add i64 %4565, 10
  store i64 %4573, i64* %3, align 8
  %4574 = inttoptr i64 %4572 to i32*
  %4575 = load i32, i32* %4574, align 4
  %4576 = zext i32 %4575 to i64
  store i64 %4576, i64* %RDI.i126, align 8
  %4577 = add i64 %4565, 12
  store i64 %4577, i64* %3, align 8
  %4578 = sext i32 %4575 to i64
  %4579 = shl nuw i64 %4571, 32
  %4580 = or i64 %4579, %4569
  %4581 = sdiv i64 %4580, %4578
  %4582 = shl i64 %4581, 32
  %4583 = ashr exact i64 %4582, 32
  %4584 = icmp eq i64 %4581, %4583
  br i1 %4584, label %4587, label %4585

; <label>:4585:                                   ; preds = %routine_idivl__esi.exit3567
  %4586 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4577, %struct.Memory* %4559)
  %.pre370 = load i64, i64* %RBP.i, align 8
  %.pre371 = load i32, i32* %EAX.i304, align 4
  %.pre372 = load i64, i64* %3, align 8
  br label %routine_idivl__edi.exit3552

; <label>:4587:                                   ; preds = %routine_idivl__esi.exit3567
  %4588 = srem i64 %4580, %4578
  %4589 = and i64 %4581, 4294967295
  store i64 %4589, i64* %RAX.i186, align 8
  %4590 = and i64 %4588, 4294967295
  store i64 %4590, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4591 = trunc i64 %4581 to i32
  br label %routine_idivl__edi.exit3552

routine_idivl__edi.exit3552:                      ; preds = %4587, %4585
  %4592 = phi i64 [ %.pre372, %4585 ], [ %4577, %4587 ]
  %4593 = phi i32 [ %.pre371, %4585 ], [ %4591, %4587 ]
  %4594 = phi i64 [ %.pre370, %4585 ], [ %4563, %4587 ]
  %4595 = phi %struct.Memory* [ %4586, %4585 ], [ %4559, %4587 ]
  %4596 = add i64 %4594, -48
  %4597 = add i64 %4592, 3
  store i64 %4597, i64* %3, align 8
  %4598 = inttoptr i64 %4596 to i32*
  store i32 %4593, i32* %4598, align 4
  %4599 = load i64, i64* %RBP.i, align 8
  %4600 = add i64 %4599, -8
  %4601 = load i64, i64* %3, align 8
  %4602 = add i64 %4601, 4
  store i64 %4602, i64* %3, align 8
  %4603 = inttoptr i64 %4600 to i64*
  %4604 = load i64, i64* %4603, align 8
  store i64 %4604, i64* %R8.i3546, align 8
  %4605 = add i64 %4604, 40
  %4606 = add i64 %4601, 8
  store i64 %4606, i64* %3, align 8
  %4607 = inttoptr i64 %4605 to i64*
  %4608 = load i64, i64* %4607, align 8
  store i64 %4608, i64* %R8.i3546, align 8
  %4609 = add i64 %4608, 6392
  %4610 = add i64 %4601, 15
  store i64 %4610, i64* %3, align 8
  %4611 = inttoptr i64 %4609 to i32*
  %4612 = load i32, i32* %4611, align 4
  %4613 = zext i32 %4612 to i64
  store i64 %4613, i64* %RAX.i186, align 8
  %4614 = sext i32 %4612 to i64
  %4615 = lshr i64 %4614, 32
  store i64 %4615, i64* %.pre-phi499, align 8
  %4616 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %4617 = add i64 %4601, 18
  store i64 %4617, i64* %3, align 8
  %4618 = sext i32 %4616 to i64
  %4619 = shl nuw i64 %4615, 32
  %4620 = or i64 %4619, %4613
  %4621 = sdiv i64 %4620, %4618
  %4622 = shl i64 %4621, 32
  %4623 = ashr exact i64 %4622, 32
  %4624 = icmp eq i64 %4621, %4623
  br i1 %4624, label %4627, label %4625

; <label>:4625:                                   ; preds = %routine_idivl__edi.exit3552
  %4626 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4617, %struct.Memory* %4595)
  %.pre373 = load i64, i64* %RAX.i186, align 8
  %.pre374 = load i64, i64* %3, align 8
  %.pre375 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3534

; <label>:4627:                                   ; preds = %routine_idivl__edi.exit3552
  %4628 = srem i64 %4620, %4618
  %4629 = and i64 %4621, 4294967295
  store i64 %4629, i64* %RAX.i186, align 8
  %4630 = and i64 %4628, 4294967295
  store i64 %4630, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__ecx.exit3534

routine_idivl__ecx.exit3534:                      ; preds = %4627, %4625
  %4631 = phi i64 [ %.pre375, %4625 ], [ %4599, %4627 ]
  %4632 = phi i64 [ %.pre374, %4625 ], [ %4617, %4627 ]
  %4633 = phi i64 [ %.pre373, %4625 ], [ %4629, %4627 ]
  %4634 = phi %struct.Memory* [ %4626, %4625 ], [ %4595, %4627 ]
  %4635 = trunc i64 %4633 to i32
  %4636 = shl i32 %4635, 1
  %4637 = icmp slt i32 %4635, 0
  %4638 = icmp slt i32 %4636, 0
  %4639 = xor i1 %4637, %4638
  %4640 = zext i32 %4636 to i64
  store i64 %4640, i64* %RAX.i186, align 8
  %.lobit92 = lshr i32 %4635, 31
  %4641 = trunc i32 %.lobit92 to i8
  store i8 %4641, i8* %14, align 1
  %4642 = and i32 %4636, 254
  %4643 = tail call i32 @llvm.ctpop.i32(i32 %4642)
  %4644 = trunc i32 %4643 to i8
  %4645 = and i8 %4644, 1
  %4646 = xor i8 %4645, 1
  store i8 %4646, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4647 = icmp eq i32 %4636, 0
  %4648 = zext i1 %4647 to i8
  store i8 %4648, i8* %30, align 1
  %4649 = lshr i32 %4635, 30
  %4650 = trunc i32 %4649 to i8
  %4651 = and i8 %4650, 1
  store i8 %4651, i8* %33, align 1
  %4652 = zext i1 %4639 to i8
  store i8 %4652, i8* %39, align 1
  %4653 = add i64 %4631, -48
  %4654 = add i64 %4632, 5
  store i64 %4654, i64* %3, align 8
  %4655 = inttoptr i64 %4653 to i32*
  %4656 = load i32, i32* %4655, align 4
  %4657 = zext i32 %4656 to i64
  store i64 %4657, i64* %RCX.i4414.pre-phi, align 8
  %4658 = add i64 %4631, -244
  %4659 = add i64 %4632, 11
  store i64 %4659, i64* %3, align 8
  %4660 = inttoptr i64 %4658 to i32*
  store i32 %4636, i32* %4660, align 4
  %4661 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %4662 = zext i32 %4661 to i64
  %4663 = load i64, i64* %3, align 8
  store i64 %4662, i64* %RAX.i186, align 8
  %4664 = sext i32 %4661 to i64
  %4665 = lshr i64 %4664, 32
  store i64 %4665, i64* %.pre-phi499, align 8
  %4666 = load i32, i32* %EDI.i3551, align 4
  %4667 = add i64 %4663, 5
  store i64 %4667, i64* %3, align 8
  %4668 = sext i32 %4666 to i64
  %4669 = shl nuw i64 %4665, 32
  %4670 = or i64 %4669, %4662
  %4671 = sdiv i64 %4670, %4668
  %4672 = shl i64 %4671, 32
  %4673 = ashr exact i64 %4672, 32
  %4674 = icmp eq i64 %4671, %4673
  br i1 %4674, label %4677, label %4675

; <label>:4675:                                   ; preds = %routine_idivl__ecx.exit3534
  %4676 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4667, %struct.Memory* %4634)
  %.pre376 = load i64, i64* %3, align 8
  %.pre377 = load i32, i32* %EAX.i304, align 4
  br label %routine_idivl__edi.exit3516

; <label>:4677:                                   ; preds = %routine_idivl__ecx.exit3534
  %4678 = srem i64 %4670, %4668
  %4679 = and i64 %4671, 4294967295
  store i64 %4679, i64* %RAX.i186, align 8
  %4680 = and i64 %4678, 4294967295
  store i64 %4680, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4681 = trunc i64 %4671 to i32
  br label %routine_idivl__edi.exit3516

routine_idivl__edi.exit3516:                      ; preds = %4677, %4675
  %4682 = phi i32 [ %.pre377, %4675 ], [ %4681, %4677 ]
  %4683 = phi i64 [ %.pre376, %4675 ], [ %4667, %4677 ]
  %4684 = phi %struct.Memory* [ %4676, %4675 ], [ %4634, %4677 ]
  %4685 = load i64, i64* %RBP.i, align 8
  %4686 = add i64 %4685, -244
  %4687 = add i64 %4683, 6
  store i64 %4687, i64* %3, align 8
  %4688 = inttoptr i64 %4686 to i32*
  %4689 = load i32, i32* %4688, align 4
  %4690 = sext i32 %4689 to i64
  %4691 = sext i32 %4682 to i64
  %4692 = mul nsw i64 %4691, %4690
  %4693 = trunc i64 %4692 to i32
  %4694 = and i64 %4692, 4294967295
  store i64 %4694, i64* %RCX.i4414.pre-phi, align 8
  %4695 = shl i64 %4692, 32
  %4696 = ashr exact i64 %4695, 32
  %4697 = icmp ne i64 %4696, %4692
  %4698 = zext i1 %4697 to i8
  store i8 %4698, i8* %14, align 1
  %4699 = and i32 %4693, 255
  %4700 = tail call i32 @llvm.ctpop.i32(i32 %4699)
  %4701 = trunc i32 %4700 to i8
  %4702 = and i8 %4701, 1
  %4703 = xor i8 %4702, 1
  store i8 %4703, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4704 = lshr i32 %4693, 31
  %4705 = trunc i32 %4704 to i8
  store i8 %4705, i8* %33, align 1
  store i8 %4698, i8* %39, align 1
  %4706 = add i64 %4685, -44
  %4707 = add i64 %4683, 12
  store i64 %4707, i64* %3, align 8
  %4708 = inttoptr i64 %4706 to i32*
  %4709 = load i32, i32* %4708, align 4
  %4710 = shl i32 %4709, 1
  %4711 = zext i32 %4710 to i64
  store i64 %4711, i64* %RAX.i186, align 8
  %4712 = trunc i64 %4692 to i32
  %4713 = add i32 %4710, %4712
  %4714 = zext i32 %4713 to i64
  store i64 %4714, i64* %RCX.i4414.pre-phi, align 8
  %4715 = icmp ult i32 %4713, %4712
  %4716 = icmp ult i32 %4713, %4710
  %4717 = or i1 %4715, %4716
  %4718 = zext i1 %4717 to i8
  store i8 %4718, i8* %14, align 1
  %4719 = and i32 %4713, 255
  %4720 = tail call i32 @llvm.ctpop.i32(i32 %4719)
  %4721 = trunc i32 %4720 to i8
  %4722 = and i8 %4721, 1
  %4723 = xor i8 %4722, 1
  store i8 %4723, i8* %21, align 1
  %4724 = xor i64 %4711, %4692
  %4725 = trunc i64 %4724 to i32
  %4726 = xor i32 %4725, %4713
  %4727 = lshr i32 %4726, 4
  %4728 = trunc i32 %4727 to i8
  %4729 = and i8 %4728, 1
  store i8 %4729, i8* %27, align 1
  %4730 = icmp eq i32 %4713, 0
  %4731 = zext i1 %4730 to i8
  store i8 %4731, i8* %30, align 1
  %4732 = lshr i32 %4713, 31
  %4733 = trunc i32 %4732 to i8
  store i8 %4733, i8* %33, align 1
  %4734 = lshr i32 %4712, 31
  %4735 = lshr i32 %4709, 30
  %4736 = and i32 %4735, 1
  %4737 = xor i32 %4732, %4734
  %4738 = xor i32 %4732, %4736
  %4739 = add nuw nsw i32 %4737, %4738
  %4740 = icmp eq i32 %4739, 2
  %4741 = zext i1 %4740 to i8
  store i8 %4741, i8* %39, align 1
  %4742 = load i64, i64* %RBP.i, align 8
  %4743 = add i64 %4742, -48
  %4744 = add i64 %4683, 19
  store i64 %4744, i64* %3, align 8
  %4745 = inttoptr i64 %4743 to i32*
  %4746 = load i32, i32* %4745, align 4
  %4747 = zext i32 %4746 to i64
  store i64 %4747, i64* %RAX.i186, align 8
  %4748 = sext i32 %4746 to i64
  %4749 = lshr i64 %4748, 32
  store i64 %4749, i64* %.pre-phi499, align 8
  %4750 = load i32, i32* %EDI.i3551, align 4
  %4751 = add i64 %4683, 22
  store i64 %4751, i64* %3, align 8
  %4752 = sext i32 %4750 to i64
  %4753 = shl nuw i64 %4749, 32
  %4754 = or i64 %4753, %4747
  %4755 = sdiv i64 %4754, %4752
  %4756 = shl i64 %4755, 32
  %4757 = ashr exact i64 %4756, 32
  %4758 = icmp eq i64 %4755, %4757
  br i1 %4758, label %4761, label %4759

; <label>:4759:                                   ; preds = %routine_idivl__edi.exit3516
  %4760 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4751, %struct.Memory* %4684)
  %.pre378 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %.pre379 = load i32, i32* %.pre-phi501, align 4
  %.pre380 = load i64, i64* %3, align 8
  %.pre381 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit3493

; <label>:4761:                                   ; preds = %routine_idivl__edi.exit3516
  %4762 = srem i64 %4754, %4752
  %4763 = and i64 %4755, 4294967295
  store i64 %4763, i64* %RAX.i186, align 8
  %4764 = and i64 %4762, 4294967295
  store i64 %4764, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %4765 = trunc i64 %4762 to i32
  br label %routine_idivl__edi.exit3493

routine_idivl__edi.exit3493:                      ; preds = %4761, %4759
  %4766 = phi i64 [ %.pre381, %4759 ], [ %4742, %4761 ]
  %4767 = phi i64 [ %.pre380, %4759 ], [ %4751, %4761 ]
  %4768 = phi i32 [ %.pre379, %4759 ], [ %4765, %4761 ]
  %4769 = phi i64 [ %.pre378, %4759 ], [ %4714, %4761 ]
  %4770 = phi %struct.Memory* [ %4760, %4759 ], [ %4684, %4761 ]
  %4771 = zext i32 %4768 to i64
  %4772 = trunc i64 %4769 to i32
  %4773 = add i32 %4768, %4772
  %4774 = zext i32 %4773 to i64
  store i64 %4774, i64* %RCX.i4414.pre-phi, align 8
  %4775 = icmp ult i32 %4773, %4772
  %4776 = icmp ult i32 %4773, %4768
  %4777 = or i1 %4775, %4776
  %4778 = zext i1 %4777 to i8
  store i8 %4778, i8* %14, align 1
  %4779 = and i32 %4773, 255
  %4780 = tail call i32 @llvm.ctpop.i32(i32 %4779)
  %4781 = trunc i32 %4780 to i8
  %4782 = and i8 %4781, 1
  %4783 = xor i8 %4782, 1
  store i8 %4783, i8* %21, align 1
  %4784 = xor i64 %4771, %4769
  %4785 = trunc i64 %4784 to i32
  %4786 = xor i32 %4785, %4773
  %4787 = lshr i32 %4786, 4
  %4788 = trunc i32 %4787 to i8
  %4789 = and i8 %4788, 1
  store i8 %4789, i8* %27, align 1
  %4790 = icmp eq i32 %4773, 0
  %4791 = zext i1 %4790 to i8
  store i8 %4791, i8* %30, align 1
  %4792 = lshr i32 %4773, 31
  %4793 = trunc i32 %4792 to i8
  store i8 %4793, i8* %33, align 1
  %4794 = lshr i32 %4772, 31
  %4795 = lshr i32 %4768, 31
  %4796 = xor i32 %4792, %4794
  %4797 = xor i32 %4792, %4795
  %4798 = add nuw nsw i32 %4796, %4797
  %4799 = icmp eq i32 %4798, 2
  %4800 = zext i1 %4799 to i8
  store i8 %4800, i8* %39, align 1
  %4801 = add i64 %4766, -52
  %4802 = add i64 %4767, 5
  store i64 %4802, i64* %3, align 8
  %4803 = inttoptr i64 %4801 to i32*
  store i32 %4773, i32* %4803, align 4
  %4804 = load i64, i64* %RBP.i, align 8
  %4805 = add i64 %4804, -8
  %4806 = load i64, i64* %3, align 8
  %4807 = add i64 %4806, 4
  store i64 %4807, i64* %3, align 8
  %4808 = inttoptr i64 %4805 to i64*
  %4809 = load i64, i64* %4808, align 8
  store i64 %4809, i64* %R8.i3546, align 8
  %4810 = add i64 %4809, 40
  %4811 = add i64 %4806, 8
  store i64 %4811, i64* %3, align 8
  %4812 = inttoptr i64 %4810 to i64*
  %4813 = load i64, i64* %4812, align 8
  store i64 %4813, i64* %R8.i3546, align 8
  %4814 = add i64 %4813, 6416
  %4815 = add i64 %4806, 16
  store i64 %4815, i64* %3, align 8
  %4816 = inttoptr i64 %4814 to i32*
  %4817 = load i32, i32* %4816, align 4
  store i8 0, i8* %14, align 1
  %4818 = and i32 %4817, 255
  %4819 = tail call i32 @llvm.ctpop.i32(i32 %4818)
  %4820 = trunc i32 %4819 to i8
  %4821 = and i8 %4820, 1
  %4822 = xor i8 %4821, 1
  store i8 %4822, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4823 = icmp eq i32 %4817, 0
  %4824 = zext i1 %4823 to i8
  store i8 %4824, i8* %30, align 1
  %4825 = lshr i32 %4817, 31
  %4826 = trunc i32 %4825 to i8
  store i8 %4826, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v547 = select i1 %4823, i64 1930, i64 22
  %4827 = add i64 %4806, %.v547
  store i64 %4827, i64* %3, align 8
  br i1 %4823, label %block_.L_4514d5, label %block_450d61

block_450d61:                                     ; preds = %routine_idivl__edi.exit3493
  %4828 = add i64 %4827, 4
  store i64 %4828, i64* %3, align 8
  %4829 = load i64, i64* %4808, align 8
  store i64 %4829, i64* %RAX.i186, align 8
  %4830 = add i64 %4829, 40
  %4831 = add i64 %4827, 8
  store i64 %4831, i64* %3, align 8
  %4832 = inttoptr i64 %4830 to i64*
  %4833 = load i64, i64* %4832, align 8
  store i64 %4833, i64* %RAX.i186, align 8
  %4834 = add i64 %4833, 6472
  %4835 = add i64 %4827, 15
  store i64 %4835, i64* %3, align 8
  %4836 = inttoptr i64 %4834 to i64*
  %4837 = load i64, i64* %4836, align 8
  store i64 %4837, i64* %RAX.i186, align 8
  %4838 = add i64 %4804, -52
  %4839 = add i64 %4827, 19
  store i64 %4839, i64* %3, align 8
  %4840 = inttoptr i64 %4838 to i32*
  %4841 = load i32, i32* %4840, align 4
  %4842 = sext i32 %4841 to i64
  store i64 %4842, i64* %RCX.i4414.pre-phi, align 8
  %4843 = add i64 %4837, %4842
  %4844 = add i64 %4827, 23
  store i64 %4844, i64* %3, align 8
  %4845 = inttoptr i64 %4843 to i8*
  %4846 = load i8, i8* %4845, align 1
  %4847 = zext i8 %4846 to i64
  store i64 %4847, i64* %RDX.i4411.pre-phi, align 8
  %4848 = zext i8 %4846 to i32
  store i8 0, i8* %14, align 1
  %4849 = tail call i32 @llvm.ctpop.i32(i32 %4848)
  %4850 = trunc i32 %4849 to i8
  %4851 = and i8 %4850, 1
  %4852 = xor i8 %4851, 1
  store i8 %4852, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %4853 = icmp eq i8 %4846, 0
  %4854 = zext i1 %4853 to i8
  store i8 %4854, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v548 = select i1 %4853, i64 1908, i64 32
  %4855 = add i64 %4827, %.v548
  store i64 %4855, i64* %3, align 8
  br i1 %4853, label %block_.L_4514d5, label %block_450d81

block_450d81:                                     ; preds = %block_450d61
  store i64 4, i64* %RAX.i186, align 8
  %4856 = add i64 %4855, 9
  store i64 %4856, i64* %3, align 8
  %4857 = load i64, i64* %4808, align 8
  store i64 %4857, i64* %RCX.i4414.pre-phi, align 8
  %4858 = add i64 %4857, 48
  %4859 = add i64 %4855, 13
  store i64 %4859, i64* %3, align 8
  %4860 = inttoptr i64 %4858 to i64*
  %4861 = load i64, i64* %4860, align 8
  store i64 %4861, i64* %RCX.i4414.pre-phi, align 8
  %4862 = add i64 %4861, 6520
  %4863 = add i64 %4855, 20
  store i64 %4863, i64* %3, align 8
  %4864 = inttoptr i64 %4862 to i64*
  %4865 = load i64, i64* %4864, align 8
  store i64 %4865, i64* %RCX.i4414.pre-phi, align 8
  %4866 = add i64 %4804, -12
  %4867 = add i64 %4855, 24
  store i64 %4867, i64* %3, align 8
  %4868 = inttoptr i64 %4866 to i32*
  %4869 = load i32, i32* %4868, align 4
  %4870 = sext i32 %4869 to i64
  store i64 %4870, i64* %RDX.i4411.pre-phi, align 8
  %4871 = shl nsw i64 %4870, 3
  %4872 = add i64 %4871, %4865
  %4873 = add i64 %4855, 28
  store i64 %4873, i64* %3, align 8
  %4874 = inttoptr i64 %4872 to i64*
  %4875 = load i64, i64* %4874, align 8
  store i64 %4875, i64* %RCX.i4414.pre-phi, align 8
  %4876 = add i64 %4804, -16
  %4877 = add i64 %4855, 32
  store i64 %4877, i64* %3, align 8
  %4878 = inttoptr i64 %4876 to i32*
  %4879 = load i32, i32* %4878, align 4
  %4880 = sext i32 %4879 to i64
  store i64 %4880, i64* %RDX.i4411.pre-phi, align 8
  %4881 = add i64 %4875, %4880
  %4882 = add i64 %4855, 36
  store i64 %4882, i64* %3, align 8
  %4883 = inttoptr i64 %4881 to i8*
  store i8 1, i8* %4883, align 1
  %4884 = load i64, i64* %RBP.i, align 8
  %4885 = add i64 %4884, -8
  %4886 = load i64, i64* %3, align 8
  %4887 = add i64 %4886, 4
  store i64 %4887, i64* %3, align 8
  %4888 = inttoptr i64 %4885 to i64*
  %4889 = load i64, i64* %4888, align 8
  store i64 %4889, i64* %RCX.i4414.pre-phi, align 8
  %4890 = add i64 %4889, 56
  %4891 = add i64 %4886, 8
  store i64 %4891, i64* %3, align 8
  %4892 = inttoptr i64 %4890 to i64*
  %4893 = load i64, i64* %4892, align 8
  store i64 %4893, i64* %RCX.i4414.pre-phi, align 8
  %4894 = add i64 %4893, 6520
  %4895 = add i64 %4886, 15
  store i64 %4895, i64* %3, align 8
  %4896 = inttoptr i64 %4894 to i64*
  %4897 = load i64, i64* %4896, align 8
  store i64 %4897, i64* %RCX.i4414.pre-phi, align 8
  %4898 = add i64 %4884, -12
  %4899 = add i64 %4886, 19
  store i64 %4899, i64* %3, align 8
  %4900 = inttoptr i64 %4898 to i32*
  %4901 = load i32, i32* %4900, align 4
  %4902 = sext i32 %4901 to i64
  store i64 %4902, i64* %RDX.i4411.pre-phi, align 8
  %4903 = shl nsw i64 %4902, 3
  %4904 = add i64 %4903, %4897
  %4905 = add i64 %4886, 23
  store i64 %4905, i64* %3, align 8
  %4906 = inttoptr i64 %4904 to i64*
  %4907 = load i64, i64* %4906, align 8
  store i64 %4907, i64* %RCX.i4414.pre-phi, align 8
  %4908 = add i64 %4884, -16
  %4909 = add i64 %4886, 27
  store i64 %4909, i64* %3, align 8
  %4910 = inttoptr i64 %4908 to i32*
  %4911 = load i32, i32* %4910, align 4
  %4912 = sext i32 %4911 to i64
  store i64 %4912, i64* %RDX.i4411.pre-phi, align 8
  %4913 = add i64 %4907, %4912
  %4914 = add i64 %4886, 31
  store i64 %4914, i64* %3, align 8
  %4915 = inttoptr i64 %4913 to i8*
  store i8 1, i8* %4915, align 1
  %4916 = load i64, i64* %RBP.i, align 8
  %4917 = add i64 %4916, -8
  %4918 = load i64, i64* %3, align 8
  %4919 = add i64 %4918, 4
  store i64 %4919, i64* %3, align 8
  %4920 = inttoptr i64 %4917 to i64*
  %4921 = load i64, i64* %4920, align 8
  store i64 %4921, i64* %RCX.i4414.pre-phi, align 8
  %4922 = add i64 %4921, 40
  %4923 = add i64 %4918, 8
  store i64 %4923, i64* %3, align 8
  %4924 = inttoptr i64 %4922 to i64*
  %4925 = load i64, i64* %4924, align 8
  store i64 %4925, i64* %RCX.i4414.pre-phi, align 8
  %4926 = add i64 %4925, 6520
  %4927 = add i64 %4918, 15
  store i64 %4927, i64* %3, align 8
  %4928 = inttoptr i64 %4926 to i64*
  %4929 = load i64, i64* %4928, align 8
  store i64 %4929, i64* %RCX.i4414.pre-phi, align 8
  %4930 = add i64 %4916, -12
  %4931 = add i64 %4918, 19
  store i64 %4931, i64* %3, align 8
  %4932 = inttoptr i64 %4930 to i32*
  %4933 = load i32, i32* %4932, align 4
  %4934 = sext i32 %4933 to i64
  store i64 %4934, i64* %RDX.i4411.pre-phi, align 8
  %4935 = shl nsw i64 %4934, 3
  %4936 = add i64 %4935, %4929
  %4937 = add i64 %4918, 23
  store i64 %4937, i64* %3, align 8
  %4938 = inttoptr i64 %4936 to i64*
  %4939 = load i64, i64* %4938, align 8
  store i64 %4939, i64* %RCX.i4414.pre-phi, align 8
  %4940 = add i64 %4916, -16
  %4941 = add i64 %4918, 26
  store i64 %4941, i64* %3, align 8
  %4942 = inttoptr i64 %4940 to i32*
  %4943 = load i32, i32* %4942, align 4
  %4944 = shl i32 %4943, 1
  %4945 = or i32 %4944, 1
  %4946 = zext i32 %4945 to i64
  store i64 %4946, i64* %RSI.i4407.pre-phi, align 8
  store i8 0, i8* %14, align 1
  %4947 = and i32 %4945, 255
  %4948 = tail call i32 @llvm.ctpop.i32(i32 %4947)
  %4949 = trunc i32 %4948 to i8
  %4950 = and i8 %4949, 1
  %4951 = xor i8 %4950, 1
  store i8 %4951, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %4952 = lshr i32 %4943, 30
  %4953 = and i32 %4952, 1
  %4954 = trunc i32 %4953 to i8
  store i8 %4954, i8* %33, align 1
  %4955 = lshr i32 %4943, 30
  %4956 = and i32 %4955, 1
  %4957 = xor i32 %4953, %4956
  %4958 = add nuw nsw i32 %4957, %4953
  %4959 = icmp eq i32 %4958, 2
  %4960 = zext i1 %4959 to i8
  store i8 %4960, i8* %39, align 1
  %4961 = sext i32 %4945 to i64
  store i64 %4961, i64* %RDX.i4411.pre-phi, align 8
  %4962 = add i64 %4939, %4961
  %4963 = add i64 %4918, 38
  store i64 %4963, i64* %3, align 8
  %4964 = inttoptr i64 %4962 to i8*
  store i8 1, i8* %4964, align 1
  %4965 = load i64, i64* %RBP.i, align 8
  %4966 = add i64 %4965, -8
  %4967 = load i64, i64* %3, align 8
  %4968 = add i64 %4967, 4
  store i64 %4968, i64* %3, align 8
  %4969 = inttoptr i64 %4966 to i64*
  %4970 = load i64, i64* %4969, align 8
  store i64 %4970, i64* %RCX.i4414.pre-phi, align 8
  %4971 = add i64 %4970, 40
  %4972 = add i64 %4967, 8
  store i64 %4972, i64* %3, align 8
  %4973 = inttoptr i64 %4971 to i64*
  %4974 = load i64, i64* %4973, align 8
  store i64 %4974, i64* %RCX.i4414.pre-phi, align 8
  %4975 = add i64 %4974, 6520
  %4976 = add i64 %4967, 15
  store i64 %4976, i64* %3, align 8
  %4977 = inttoptr i64 %4975 to i64*
  %4978 = load i64, i64* %4977, align 8
  store i64 %4978, i64* %RCX.i4414.pre-phi, align 8
  %4979 = add i64 %4965, -12
  %4980 = add i64 %4967, 19
  store i64 %4980, i64* %3, align 8
  %4981 = inttoptr i64 %4979 to i32*
  %4982 = load i32, i32* %4981, align 4
  %4983 = sext i32 %4982 to i64
  store i64 %4983, i64* %RDX.i4411.pre-phi, align 8
  %4984 = shl nsw i64 %4983, 3
  %4985 = add i64 %4984, %4978
  %4986 = add i64 %4967, 23
  store i64 %4986, i64* %3, align 8
  %4987 = inttoptr i64 %4985 to i64*
  %4988 = load i64, i64* %4987, align 8
  store i64 %4988, i64* %RCX.i4414.pre-phi, align 8
  %4989 = add i64 %4965, -16
  %4990 = add i64 %4967, 26
  store i64 %4990, i64* %3, align 8
  %4991 = inttoptr i64 %4989 to i32*
  %4992 = load i32, i32* %4991, align 4
  %4993 = shl i32 %4992, 1
  %4994 = icmp slt i32 %4992, 0
  %4995 = icmp slt i32 %4993, 0
  %4996 = xor i1 %4994, %4995
  %4997 = zext i32 %4993 to i64
  store i64 %4997, i64* %RSI.i4407.pre-phi, align 8
  %.lobit95 = lshr i32 %4992, 31
  %4998 = trunc i32 %.lobit95 to i8
  store i8 %4998, i8* %14, align 1
  %4999 = and i32 %4993, 254
  %5000 = tail call i32 @llvm.ctpop.i32(i32 %4999)
  %5001 = trunc i32 %5000 to i8
  %5002 = and i8 %5001, 1
  %5003 = xor i8 %5002, 1
  store i8 %5003, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5004 = icmp eq i32 %4993, 0
  %5005 = zext i1 %5004 to i8
  store i8 %5005, i8* %30, align 1
  %5006 = lshr i32 %4992, 30
  %5007 = trunc i32 %5006 to i8
  %5008 = and i8 %5007, 1
  store i8 %5008, i8* %33, align 1
  %5009 = zext i1 %4996 to i8
  store i8 %5009, i8* %39, align 1
  %5010 = sext i32 %4993 to i64
  store i64 %5010, i64* %RDX.i4411.pre-phi, align 8
  %5011 = add i64 %4988, %5010
  %5012 = add i64 %4967, 35
  store i64 %5012, i64* %3, align 8
  %5013 = inttoptr i64 %5011 to i8*
  store i8 1, i8* %5013, align 1
  %5014 = load i64, i64* %RBP.i, align 8
  %5015 = add i64 %5014, -8
  %5016 = load i64, i64* %3, align 8
  %5017 = add i64 %5016, 4
  store i64 %5017, i64* %3, align 8
  %5018 = inttoptr i64 %5015 to i64*
  %5019 = load i64, i64* %5018, align 8
  store i64 %5019, i64* %RCX.i4414.pre-phi, align 8
  %5020 = add i64 %5019, 40
  %5021 = add i64 %5016, 8
  store i64 %5021, i64* %3, align 8
  %5022 = inttoptr i64 %5020 to i64*
  %5023 = load i64, i64* %5022, align 8
  store i64 %5023, i64* %RCX.i4414.pre-phi, align 8
  %5024 = add i64 %5023, 6504
  %5025 = add i64 %5016, 15
  store i64 %5025, i64* %3, align 8
  %5026 = inttoptr i64 %5024 to i64*
  %5027 = load i64, i64* %5026, align 8
  store i64 %5027, i64* %RCX.i4414.pre-phi, align 8
  %5028 = add i64 %5016, 18
  store i64 %5028, i64* %3, align 8
  %5029 = inttoptr i64 %5027 to i64*
  %5030 = load i64, i64* %5029, align 8
  store i64 %5030, i64* %RCX.i4414.pre-phi, align 8
  %5031 = add i64 %5014, -12
  %5032 = add i64 %5016, 22
  store i64 %5032, i64* %3, align 8
  %5033 = inttoptr i64 %5031 to i32*
  %5034 = load i32, i32* %5033, align 4
  %5035 = sext i32 %5034 to i64
  store i64 %5035, i64* %RDX.i4411.pre-phi, align 8
  %5036 = shl nsw i64 %5035, 3
  %5037 = add i64 %5036, %5030
  %5038 = add i64 %5016, 26
  store i64 %5038, i64* %3, align 8
  %5039 = inttoptr i64 %5037 to i64*
  %5040 = load i64, i64* %5039, align 8
  store i64 %5040, i64* %RCX.i4414.pre-phi, align 8
  %5041 = add i64 %5014, -16
  %5042 = add i64 %5016, 29
  store i64 %5042, i64* %3, align 8
  %5043 = inttoptr i64 %5041 to i32*
  %5044 = load i32, i32* %5043, align 4
  %5045 = zext i32 %5044 to i64
  store i64 %5045, i64* %RSI.i4407.pre-phi, align 8
  %5046 = add i64 %5014, -248
  %5047 = load i32, i32* %EAX.i304, align 4
  %5048 = add i64 %5016, 35
  store i64 %5048, i64* %3, align 8
  %5049 = inttoptr i64 %5046 to i32*
  store i32 %5047, i32* %5049, align 4
  %5050 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5051 = zext i32 %5050 to i64
  %5052 = load i64, i64* %3, align 8
  store i64 %5051, i64* %RAX.i186, align 8
  %5053 = sext i32 %5050 to i64
  %5054 = lshr i64 %5053, 32
  store i64 %5054, i64* %.pre-phi499, align 8
  %5055 = load i64, i64* %RBP.i, align 8
  %5056 = add i64 %5055, -248
  %5057 = add i64 %5052, 9
  store i64 %5057, i64* %3, align 8
  %5058 = inttoptr i64 %5056 to i32*
  %5059 = load i32, i32* %5058, align 4
  %5060 = zext i32 %5059 to i64
  store i64 %5060, i64* %RSI.i4407.pre-phi, align 8
  %5061 = add i64 %5052, 11
  store i64 %5061, i64* %3, align 8
  %5062 = sext i32 %5059 to i64
  %5063 = shl nuw i64 %5054, 32
  %5064 = or i64 %5063, %5051
  %5065 = sdiv i64 %5064, %5062
  %5066 = shl i64 %5065, 32
  %5067 = ashr exact i64 %5066, 32
  %5068 = icmp eq i64 %5065, %5067
  br i1 %5068, label %5071, label %5069

; <label>:5069:                                   ; preds = %block_450d81
  %5070 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5061, %struct.Memory* %4770)
  %.pre382 = load i64, i64* %RAX.i186, align 8
  %.pre383 = load i64, i64* %3, align 8
  %.pre384 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit3335

; <label>:5071:                                   ; preds = %block_450d81
  %5072 = srem i64 %5064, %5062
  %5073 = and i64 %5065, 4294967295
  store i64 %5073, i64* %RAX.i186, align 8
  %5074 = and i64 %5072, 4294967295
  store i64 %5074, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit3335

routine_idivl__esi.exit3335:                      ; preds = %5071, %5069
  %5075 = phi i64 [ %.pre384, %5069 ], [ %5055, %5071 ]
  %5076 = phi i64 [ %.pre383, %5069 ], [ %5061, %5071 ]
  %5077 = phi i64 [ %.pre382, %5069 ], [ %5073, %5071 ]
  %5078 = phi %struct.Memory* [ %5070, %5069 ], [ %4770, %5071 ]
  %.tr = trunc i64 %5077 to i32
  %5079 = shl i32 %.tr, 3
  %5080 = zext i32 %5079 to i64
  store i64 %5080, i64* %RAX.i186, align 8
  %5081 = lshr i64 %5077, 29
  %5082 = trunc i64 %5081 to i8
  %5083 = and i8 %5082, 1
  store i8 %5083, i8* %14, align 1
  %5084 = and i32 %5079, 248
  %5085 = tail call i32 @llvm.ctpop.i32(i32 %5084)
  %5086 = trunc i32 %5085 to i8
  %5087 = and i8 %5086, 1
  %5088 = xor i8 %5087, 1
  store i8 %5088, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5089 = icmp eq i32 %5079, 0
  %5090 = zext i1 %5089 to i8
  store i8 %5090, i8* %30, align 1
  %5091 = lshr i32 %.tr, 28
  %5092 = trunc i32 %5091 to i8
  %5093 = and i8 %5092, 1
  store i8 %5093, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5094 = add i64 %5075, -16
  %5095 = add i64 %5076, 6
  store i64 %5095, i64* %3, align 8
  %5096 = inttoptr i64 %5094 to i32*
  %5097 = load i32, i32* %5096, align 4
  %5098 = zext i32 %5097 to i64
  store i64 %5098, i64* %RDI.i126, align 8
  %5099 = add i64 %5075, -252
  %5100 = add i64 %5076, 12
  store i64 %5100, i64* %3, align 8
  %5101 = inttoptr i64 %5099 to i32*
  store i32 %5079, i32* %5101, align 4
  %5102 = load i32, i32* %EDI.i3551, align 4
  %5103 = zext i32 %5102 to i64
  %5104 = load i64, i64* %3, align 8
  store i64 %5103, i64* %RAX.i186, align 8
  %5105 = sext i32 %5102 to i64
  %5106 = lshr i64 %5105, 32
  store i64 %5106, i64* %.pre-phi499, align 8
  %5107 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5108 = add i64 %5104, 5
  store i64 %5108, i64* %3, align 8
  %5109 = sext i32 %5107 to i64
  %5110 = shl nuw i64 %5106, 32
  %5111 = or i64 %5110, %5103
  %5112 = sdiv i64 %5111, %5109
  %5113 = shl i64 %5112, 32
  %5114 = ashr exact i64 %5113, 32
  %5115 = icmp eq i64 %5112, %5114
  br i1 %5115, label %5118, label %5116

; <label>:5116:                                   ; preds = %routine_idivl__esi.exit3335
  %5117 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5108, %struct.Memory* %5078)
  %.pre385 = load i64, i64* %3, align 8
  %.pre386 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit3319

; <label>:5118:                                   ; preds = %routine_idivl__esi.exit3335
  %5119 = srem i64 %5111, %5109
  %5120 = and i64 %5112, 4294967295
  store i64 %5120, i64* %RAX.i186, align 8
  %5121 = and i64 %5119, 4294967295
  store i64 %5121, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5122 = trunc i64 %5119 to i32
  br label %routine_idivl__esi.exit3319

routine_idivl__esi.exit3319:                      ; preds = %5118, %5116
  %5123 = phi i32 [ %.pre386, %5116 ], [ %5122, %5118 ]
  %5124 = phi i64 [ %.pre385, %5116 ], [ %5108, %5118 ]
  %5125 = phi %struct.Memory* [ %5117, %5116 ], [ %5078, %5118 ]
  %5126 = load i64, i64* %RBP.i, align 8
  %5127 = add i64 %5126, -252
  %5128 = add i64 %5124, 6
  store i64 %5128, i64* %3, align 8
  %5129 = inttoptr i64 %5127 to i32*
  %5130 = load i32, i32* %5129, align 4
  %5131 = add i32 %5123, %5130
  %5132 = lshr i32 %5131, 31
  %5133 = add i32 %5131, 4
  %5134 = zext i32 %5133 to i64
  store i64 %5134, i64* %RDI.i126, align 8
  %5135 = icmp ugt i32 %5131, -5
  %5136 = zext i1 %5135 to i8
  store i8 %5136, i8* %14, align 1
  %5137 = and i32 %5133, 255
  %5138 = tail call i32 @llvm.ctpop.i32(i32 %5137)
  %5139 = trunc i32 %5138 to i8
  %5140 = and i8 %5139, 1
  %5141 = xor i8 %5140, 1
  store i8 %5141, i8* %21, align 1
  %5142 = xor i32 %5133, %5131
  %5143 = lshr i32 %5142, 4
  %5144 = trunc i32 %5143 to i8
  %5145 = and i8 %5144, 1
  store i8 %5145, i8* %27, align 1
  %5146 = icmp eq i32 %5133, 0
  %5147 = zext i1 %5146 to i8
  store i8 %5147, i8* %30, align 1
  %5148 = lshr i32 %5133, 31
  %5149 = trunc i32 %5148 to i8
  store i8 %5149, i8* %33, align 1
  %5150 = xor i32 %5148, %5132
  %5151 = add nuw nsw i32 %5150, %5148
  %5152 = icmp eq i32 %5151, 2
  %5153 = zext i1 %5152 to i8
  store i8 %5153, i8* %39, align 1
  %5154 = sext i32 %5133 to i64
  store i64 %5154, i64* %R8.i3546, align 8
  %5155 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %5156 = shl nsw i64 %5154, 3
  %5157 = add i64 %5155, %5156
  %5158 = add i64 %5124, 18
  store i64 %5158, i64* %3, align 8
  %5159 = inttoptr i64 %5157 to i64*
  %5160 = load i64, i64* %5159, align 8
  store i64 %5160, i64* %RCX.i4414.pre-phi, align 8
  %5161 = add i64 %5124, 22
  store i64 %5161, i64* %3, align 8
  %5162 = inttoptr i64 %5160 to i16*
  %5163 = load i16, i16* %5162, align 2
  store i16 %5163, i16* %R9W.i3301, align 2
  %5164 = add i64 %5126, -8
  %5165 = add i64 %5124, 26
  store i64 %5165, i64* %3, align 8
  %5166 = inttoptr i64 %5164 to i64*
  %5167 = load i64, i64* %5166, align 8
  store i64 %5167, i64* %RCX.i4414.pre-phi, align 8
  %5168 = add i64 %5167, 56
  %5169 = add i64 %5124, 30
  store i64 %5169, i64* %3, align 8
  %5170 = inttoptr i64 %5168 to i64*
  %5171 = load i64, i64* %5170, align 8
  store i64 %5171, i64* %RCX.i4414.pre-phi, align 8
  %5172 = add i64 %5171, 6504
  %5173 = add i64 %5124, 37
  store i64 %5173, i64* %3, align 8
  %5174 = inttoptr i64 %5172 to i64*
  %5175 = load i64, i64* %5174, align 8
  store i64 %5175, i64* %RCX.i4414.pre-phi, align 8
  %5176 = add i64 %5124, 40
  store i64 %5176, i64* %3, align 8
  %5177 = inttoptr i64 %5175 to i64*
  %5178 = load i64, i64* %5177, align 8
  store i64 %5178, i64* %RCX.i4414.pre-phi, align 8
  %5179 = load i64, i64* %RBP.i, align 8
  %5180 = add i64 %5179, -12
  %5181 = add i64 %5124, 44
  store i64 %5181, i64* %3, align 8
  %5182 = inttoptr i64 %5180 to i32*
  %5183 = load i32, i32* %5182, align 4
  %5184 = sext i32 %5183 to i64
  store i64 %5184, i64* %R8.i3546, align 8
  %5185 = shl nsw i64 %5184, 3
  %5186 = add i64 %5185, %5178
  %5187 = add i64 %5124, 48
  store i64 %5187, i64* %3, align 8
  %5188 = inttoptr i64 %5186 to i64*
  %5189 = load i64, i64* %5188, align 8
  store i64 %5189, i64* %RCX.i4414.pre-phi, align 8
  %5190 = add i64 %5179, -16
  %5191 = add i64 %5124, 52
  store i64 %5191, i64* %3, align 8
  %5192 = inttoptr i64 %5190 to i32*
  %5193 = load i32, i32* %5192, align 4
  %5194 = sext i32 %5193 to i64
  store i64 %5194, i64* %R8.i3546, align 8
  %5195 = shl nsw i64 %5194, 3
  %5196 = add i64 %5195, %5189
  %5197 = add i64 %5124, 56
  store i64 %5197, i64* %3, align 8
  %5198 = inttoptr i64 %5196 to i64*
  %5199 = load i64, i64* %5198, align 8
  store i64 %5199, i64* %RCX.i4414.pre-phi, align 8
  %5200 = add i64 %5124, 60
  store i64 %5200, i64* %3, align 8
  %5201 = inttoptr i64 %5199 to i16*
  store i16 %5163, i16* %5201, align 2
  %5202 = load i64, i64* %RBP.i, align 8
  %5203 = add i64 %5202, -8
  %5204 = load i64, i64* %3, align 8
  %5205 = add i64 %5204, 4
  store i64 %5205, i64* %3, align 8
  %5206 = inttoptr i64 %5203 to i64*
  %5207 = load i64, i64* %5206, align 8
  store i64 %5207, i64* %RCX.i4414.pre-phi, align 8
  %5208 = add i64 %5207, 40
  %5209 = add i64 %5204, 8
  store i64 %5209, i64* %3, align 8
  %5210 = inttoptr i64 %5208 to i64*
  %5211 = load i64, i64* %5210, align 8
  store i64 %5211, i64* %RCX.i4414.pre-phi, align 8
  %5212 = add i64 %5211, 6504
  %5213 = add i64 %5204, 15
  store i64 %5213, i64* %3, align 8
  %5214 = inttoptr i64 %5212 to i64*
  %5215 = load i64, i64* %5214, align 8
  store i64 %5215, i64* %RCX.i4414.pre-phi, align 8
  %5216 = add i64 %5204, 18
  store i64 %5216, i64* %3, align 8
  %5217 = inttoptr i64 %5215 to i64*
  %5218 = load i64, i64* %5217, align 8
  store i64 %5218, i64* %RCX.i4414.pre-phi, align 8
  %5219 = add i64 %5202, -12
  %5220 = add i64 %5204, 22
  store i64 %5220, i64* %3, align 8
  %5221 = inttoptr i64 %5219 to i32*
  %5222 = load i32, i32* %5221, align 4
  %5223 = sext i32 %5222 to i64
  store i64 %5223, i64* %R8.i3546, align 8
  %5224 = shl nsw i64 %5223, 3
  %5225 = add i64 %5224, %5218
  %5226 = add i64 %5204, 26
  store i64 %5226, i64* %3, align 8
  %5227 = inttoptr i64 %5225 to i64*
  %5228 = load i64, i64* %5227, align 8
  store i64 %5228, i64* %RCX.i4414.pre-phi, align 8
  %5229 = add i64 %5202, -16
  %5230 = add i64 %5204, 29
  store i64 %5230, i64* %3, align 8
  %5231 = inttoptr i64 %5229 to i32*
  %5232 = load i32, i32* %5231, align 4
  %5233 = zext i32 %5232 to i64
  store i64 %5233, i64* %RDX.i4411.pre-phi, align 8
  store i64 %5233, i64* %RAX.i186, align 8
  %5234 = sext i32 %5232 to i64
  %5235 = lshr i64 %5234, 32
  store i64 %5235, i64* %.pre-phi499, align 8
  %5236 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5237 = add i64 %5204, 34
  store i64 %5237, i64* %3, align 8
  %5238 = sext i32 %5236 to i64
  %5239 = shl nuw i64 %5235, 32
  %5240 = or i64 %5239, %5233
  %5241 = sdiv i64 %5240, %5238
  %5242 = shl i64 %5241, 32
  %5243 = ashr exact i64 %5242, 32
  %5244 = icmp eq i64 %5241, %5243
  br i1 %5244, label %5247, label %5245

; <label>:5245:                                   ; preds = %routine_idivl__esi.exit3319
  %5246 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5237, %struct.Memory* %5125)
  %.pre387 = load i64, i64* %RAX.i186, align 8
  %.pre388 = load i64, i64* %3, align 8
  %.pre389 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit3251

; <label>:5247:                                   ; preds = %routine_idivl__esi.exit3319
  %5248 = srem i64 %5240, %5238
  %5249 = and i64 %5241, 4294967295
  store i64 %5249, i64* %RAX.i186, align 8
  %5250 = and i64 %5248, 4294967295
  store i64 %5250, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit3251

routine_idivl__esi.exit3251:                      ; preds = %5247, %5245
  %5251 = phi i64 [ %.pre389, %5245 ], [ %5202, %5247 ]
  %5252 = phi i64 [ %.pre388, %5245 ], [ %5237, %5247 ]
  %5253 = phi i64 [ %.pre387, %5245 ], [ %5249, %5247 ]
  %5254 = phi %struct.Memory* [ %5246, %5245 ], [ %5125, %5247 ]
  %.tr98 = trunc i64 %5253 to i32
  %5255 = shl i32 %.tr98, 3
  %5256 = zext i32 %5255 to i64
  store i64 %5256, i64* %RAX.i186, align 8
  %5257 = lshr i64 %5253, 29
  %5258 = trunc i64 %5257 to i8
  %5259 = and i8 %5258, 1
  store i8 %5259, i8* %14, align 1
  %5260 = and i32 %5255, 248
  %5261 = tail call i32 @llvm.ctpop.i32(i32 %5260)
  %5262 = trunc i32 %5261 to i8
  %5263 = and i8 %5262, 1
  %5264 = xor i8 %5263, 1
  store i8 %5264, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5265 = icmp eq i32 %5255, 0
  %5266 = zext i1 %5265 to i8
  store i8 %5266, i8* %30, align 1
  %5267 = lshr i32 %.tr98, 28
  %5268 = trunc i32 %5267 to i8
  %5269 = and i8 %5268, 1
  store i8 %5269, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5270 = add i64 %5251, -16
  %5271 = add i64 %5252, 6
  store i64 %5271, i64* %3, align 8
  %5272 = inttoptr i64 %5270 to i32*
  %5273 = load i32, i32* %5272, align 4
  %5274 = zext i32 %5273 to i64
  store i64 %5274, i64* %RDI.i126, align 8
  %5275 = add i64 %5251, -256
  %5276 = add i64 %5252, 12
  store i64 %5276, i64* %3, align 8
  %5277 = inttoptr i64 %5275 to i32*
  store i32 %5255, i32* %5277, align 4
  %5278 = load i32, i32* %EDI.i3551, align 4
  %5279 = zext i32 %5278 to i64
  %5280 = load i64, i64* %3, align 8
  store i64 %5279, i64* %RAX.i186, align 8
  %5281 = sext i32 %5278 to i64
  %5282 = lshr i64 %5281, 32
  store i64 %5282, i64* %.pre-phi499, align 8
  %5283 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5284 = add i64 %5280, 5
  store i64 %5284, i64* %3, align 8
  %5285 = sext i32 %5283 to i64
  %5286 = shl nuw i64 %5282, 32
  %5287 = or i64 %5286, %5279
  %5288 = sdiv i64 %5287, %5285
  %5289 = shl i64 %5288, 32
  %5290 = ashr exact i64 %5289, 32
  %5291 = icmp eq i64 %5288, %5290
  br i1 %5291, label %5294, label %5292

; <label>:5292:                                   ; preds = %routine_idivl__esi.exit3251
  %5293 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5284, %struct.Memory* %5254)
  %.pre390 = load i64, i64* %3, align 8
  %.pre391 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit3234

; <label>:5294:                                   ; preds = %routine_idivl__esi.exit3251
  %5295 = srem i64 %5287, %5285
  %5296 = and i64 %5288, 4294967295
  store i64 %5296, i64* %RAX.i186, align 8
  %5297 = and i64 %5295, 4294967295
  store i64 %5297, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5298 = trunc i64 %5295 to i32
  br label %routine_idivl__esi.exit3234

routine_idivl__esi.exit3234:                      ; preds = %5294, %5292
  %5299 = phi i32 [ %.pre391, %5292 ], [ %5298, %5294 ]
  %5300 = phi i64 [ %.pre390, %5292 ], [ %5284, %5294 ]
  %5301 = phi %struct.Memory* [ %5293, %5292 ], [ %5254, %5294 ]
  %5302 = load i64, i64* %RBP.i, align 8
  %5303 = add i64 %5302, -256
  %5304 = add i64 %5300, 6
  store i64 %5304, i64* %3, align 8
  %5305 = inttoptr i64 %5303 to i32*
  %5306 = load i32, i32* %5305, align 4
  %5307 = add i32 %5299, %5306
  %5308 = lshr i32 %5307, 31
  %5309 = add i32 %5307, 4
  %5310 = zext i32 %5309 to i64
  store i64 %5310, i64* %RDI.i126, align 8
  %5311 = icmp ugt i32 %5307, -5
  %5312 = zext i1 %5311 to i8
  store i8 %5312, i8* %14, align 1
  %5313 = and i32 %5309, 255
  %5314 = tail call i32 @llvm.ctpop.i32(i32 %5313)
  %5315 = trunc i32 %5314 to i8
  %5316 = and i8 %5315, 1
  %5317 = xor i8 %5316, 1
  store i8 %5317, i8* %21, align 1
  %5318 = xor i32 %5309, %5307
  %5319 = lshr i32 %5318, 4
  %5320 = trunc i32 %5319 to i8
  %5321 = and i8 %5320, 1
  store i8 %5321, i8* %27, align 1
  %5322 = icmp eq i32 %5309, 0
  %5323 = zext i1 %5322 to i8
  store i8 %5323, i8* %30, align 1
  %5324 = lshr i32 %5309, 31
  %5325 = trunc i32 %5324 to i8
  store i8 %5325, i8* %33, align 1
  %5326 = xor i32 %5324, %5308
  %5327 = add nuw nsw i32 %5326, %5324
  %5328 = icmp eq i32 %5327, 2
  %5329 = zext i1 %5328 to i8
  store i8 %5329, i8* %39, align 1
  %5330 = sext i32 %5309 to i64
  store i64 %5330, i64* %R8.i3546, align 8
  %5331 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %5332 = shl nsw i64 %5330, 3
  %5333 = add i64 %5331, %5332
  %5334 = add i64 %5300, 18
  store i64 %5334, i64* %3, align 8
  %5335 = inttoptr i64 %5333 to i64*
  %5336 = load i64, i64* %5335, align 8
  store i64 %5336, i64* %RCX.i4414.pre-phi, align 8
  %5337 = add i64 %5336, 2
  %5338 = add i64 %5300, 23
  store i64 %5338, i64* %3, align 8
  %5339 = inttoptr i64 %5337 to i16*
  %5340 = load i16, i16* %5339, align 2
  store i16 %5340, i16* %R9W.i3301, align 2
  %5341 = add i64 %5302, -8
  %5342 = add i64 %5300, 27
  store i64 %5342, i64* %3, align 8
  %5343 = inttoptr i64 %5341 to i64*
  %5344 = load i64, i64* %5343, align 8
  store i64 %5344, i64* %RCX.i4414.pre-phi, align 8
  %5345 = add i64 %5344, 56
  %5346 = add i64 %5300, 31
  store i64 %5346, i64* %3, align 8
  %5347 = inttoptr i64 %5345 to i64*
  %5348 = load i64, i64* %5347, align 8
  store i64 %5348, i64* %RCX.i4414.pre-phi, align 8
  %5349 = add i64 %5348, 6504
  %5350 = add i64 %5300, 38
  store i64 %5350, i64* %3, align 8
  %5351 = inttoptr i64 %5349 to i64*
  %5352 = load i64, i64* %5351, align 8
  store i64 %5352, i64* %RCX.i4414.pre-phi, align 8
  %5353 = add i64 %5300, 41
  store i64 %5353, i64* %3, align 8
  %5354 = inttoptr i64 %5352 to i64*
  %5355 = load i64, i64* %5354, align 8
  store i64 %5355, i64* %RCX.i4414.pre-phi, align 8
  %5356 = load i64, i64* %RBP.i, align 8
  %5357 = add i64 %5356, -12
  %5358 = add i64 %5300, 45
  store i64 %5358, i64* %3, align 8
  %5359 = inttoptr i64 %5357 to i32*
  %5360 = load i32, i32* %5359, align 4
  %5361 = sext i32 %5360 to i64
  store i64 %5361, i64* %R8.i3546, align 8
  %5362 = shl nsw i64 %5361, 3
  %5363 = add i64 %5362, %5355
  %5364 = add i64 %5300, 49
  store i64 %5364, i64* %3, align 8
  %5365 = inttoptr i64 %5363 to i64*
  %5366 = load i64, i64* %5365, align 8
  store i64 %5366, i64* %RCX.i4414.pre-phi, align 8
  %5367 = add i64 %5356, -16
  %5368 = add i64 %5300, 53
  store i64 %5368, i64* %3, align 8
  %5369 = inttoptr i64 %5367 to i32*
  %5370 = load i32, i32* %5369, align 4
  %5371 = sext i32 %5370 to i64
  store i64 %5371, i64* %R8.i3546, align 8
  %5372 = shl nsw i64 %5371, 3
  %5373 = add i64 %5372, %5366
  %5374 = add i64 %5300, 57
  store i64 %5374, i64* %3, align 8
  %5375 = inttoptr i64 %5373 to i64*
  %5376 = load i64, i64* %5375, align 8
  store i64 %5376, i64* %RCX.i4414.pre-phi, align 8
  %5377 = add i64 %5376, 2
  %5378 = add i64 %5300, 62
  store i64 %5378, i64* %3, align 8
  %5379 = inttoptr i64 %5377 to i16*
  store i16 %5340, i16* %5379, align 2
  %5380 = load i64, i64* %RBP.i, align 8
  %5381 = add i64 %5380, -8
  %5382 = load i64, i64* %3, align 8
  %5383 = add i64 %5382, 4
  store i64 %5383, i64* %3, align 8
  %5384 = inttoptr i64 %5381 to i64*
  %5385 = load i64, i64* %5384, align 8
  store i64 %5385, i64* %RCX.i4414.pre-phi, align 8
  %5386 = add i64 %5385, 40
  %5387 = add i64 %5382, 8
  store i64 %5387, i64* %3, align 8
  %5388 = inttoptr i64 %5386 to i64*
  %5389 = load i64, i64* %5388, align 8
  store i64 %5389, i64* %RCX.i4414.pre-phi, align 8
  %5390 = add i64 %5389, 6504
  %5391 = add i64 %5382, 15
  store i64 %5391, i64* %3, align 8
  %5392 = inttoptr i64 %5390 to i64*
  %5393 = load i64, i64* %5392, align 8
  store i64 %5393, i64* %RCX.i4414.pre-phi, align 8
  %5394 = add i64 %5393, 8
  %5395 = add i64 %5382, 19
  store i64 %5395, i64* %3, align 8
  %5396 = inttoptr i64 %5394 to i64*
  %5397 = load i64, i64* %5396, align 8
  store i64 %5397, i64* %RCX.i4414.pre-phi, align 8
  %5398 = add i64 %5380, -12
  %5399 = add i64 %5382, 23
  store i64 %5399, i64* %3, align 8
  %5400 = inttoptr i64 %5398 to i32*
  %5401 = load i32, i32* %5400, align 4
  %5402 = sext i32 %5401 to i64
  store i64 %5402, i64* %R8.i3546, align 8
  %5403 = shl nsw i64 %5402, 3
  %5404 = add i64 %5403, %5397
  %5405 = add i64 %5382, 27
  store i64 %5405, i64* %3, align 8
  %5406 = inttoptr i64 %5404 to i64*
  %5407 = load i64, i64* %5406, align 8
  store i64 %5407, i64* %RCX.i4414.pre-phi, align 8
  %5408 = add i64 %5380, -16
  %5409 = add i64 %5382, 30
  store i64 %5409, i64* %3, align 8
  %5410 = inttoptr i64 %5408 to i32*
  %5411 = load i32, i32* %5410, align 4
  %5412 = zext i32 %5411 to i64
  store i64 %5412, i64* %RDX.i4411.pre-phi, align 8
  store i64 %5412, i64* %RAX.i186, align 8
  %5413 = sext i32 %5411 to i64
  %5414 = lshr i64 %5413, 32
  store i64 %5414, i64* %.pre-phi499, align 8
  %5415 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5416 = add i64 %5382, 35
  store i64 %5416, i64* %3, align 8
  %5417 = sext i32 %5415 to i64
  %5418 = shl nuw i64 %5414, 32
  %5419 = or i64 %5418, %5412
  %5420 = sdiv i64 %5419, %5417
  %5421 = shl i64 %5420, 32
  %5422 = ashr exact i64 %5421, 32
  %5423 = icmp eq i64 %5420, %5422
  br i1 %5423, label %5426, label %5424

; <label>:5424:                                   ; preds = %routine_idivl__esi.exit3234
  %5425 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5416, %struct.Memory* %5301)
  %.pre392 = load i64, i64* %RAX.i186, align 8
  %.pre393 = load i64, i64* %3, align 8
  %.pre394 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit3165

; <label>:5426:                                   ; preds = %routine_idivl__esi.exit3234
  %5427 = srem i64 %5419, %5417
  %5428 = and i64 %5420, 4294967295
  store i64 %5428, i64* %RAX.i186, align 8
  %5429 = and i64 %5427, 4294967295
  store i64 %5429, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit3165

routine_idivl__esi.exit3165:                      ; preds = %5426, %5424
  %5430 = phi i64 [ %.pre394, %5424 ], [ %5380, %5426 ]
  %5431 = phi i64 [ %.pre393, %5424 ], [ %5416, %5426 ]
  %5432 = phi i64 [ %.pre392, %5424 ], [ %5428, %5426 ]
  %5433 = phi %struct.Memory* [ %5425, %5424 ], [ %5301, %5426 ]
  %.tr101 = trunc i64 %5432 to i32
  %5434 = shl i32 %.tr101, 3
  %5435 = zext i32 %5434 to i64
  store i64 %5435, i64* %RAX.i186, align 8
  %5436 = lshr i64 %5432, 29
  %5437 = trunc i64 %5436 to i8
  %5438 = and i8 %5437, 1
  store i8 %5438, i8* %14, align 1
  %5439 = and i32 %5434, 248
  %5440 = tail call i32 @llvm.ctpop.i32(i32 %5439)
  %5441 = trunc i32 %5440 to i8
  %5442 = and i8 %5441, 1
  %5443 = xor i8 %5442, 1
  store i8 %5443, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5444 = icmp eq i32 %5434, 0
  %5445 = zext i1 %5444 to i8
  store i8 %5445, i8* %30, align 1
  %5446 = lshr i32 %.tr101, 28
  %5447 = trunc i32 %5446 to i8
  %5448 = and i8 %5447, 1
  store i8 %5448, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5449 = add i64 %5430, -16
  %5450 = add i64 %5431, 6
  store i64 %5450, i64* %3, align 8
  %5451 = inttoptr i64 %5449 to i32*
  %5452 = load i32, i32* %5451, align 4
  %5453 = zext i32 %5452 to i64
  store i64 %5453, i64* %RDI.i126, align 8
  %5454 = add i64 %5430, -260
  %5455 = add i64 %5431, 12
  store i64 %5455, i64* %3, align 8
  %5456 = inttoptr i64 %5454 to i32*
  store i32 %5434, i32* %5456, align 4
  %5457 = load i32, i32* %EDI.i3551, align 4
  %5458 = zext i32 %5457 to i64
  %5459 = load i64, i64* %3, align 8
  store i64 %5458, i64* %RAX.i186, align 8
  %5460 = sext i32 %5457 to i64
  %5461 = lshr i64 %5460, 32
  store i64 %5461, i64* %.pre-phi499, align 8
  %5462 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5463 = add i64 %5459, 5
  store i64 %5463, i64* %3, align 8
  %5464 = sext i32 %5462 to i64
  %5465 = shl nuw i64 %5461, 32
  %5466 = or i64 %5465, %5458
  %5467 = sdiv i64 %5466, %5464
  %5468 = shl i64 %5467, 32
  %5469 = ashr exact i64 %5468, 32
  %5470 = icmp eq i64 %5467, %5469
  br i1 %5470, label %5473, label %5471

; <label>:5471:                                   ; preds = %routine_idivl__esi.exit3165
  %5472 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5463, %struct.Memory* %5433)
  %.pre395 = load i64, i64* %3, align 8
  %.pre396 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit3147

; <label>:5473:                                   ; preds = %routine_idivl__esi.exit3165
  %5474 = srem i64 %5466, %5464
  %5475 = and i64 %5467, 4294967295
  store i64 %5475, i64* %RAX.i186, align 8
  %5476 = and i64 %5474, 4294967295
  store i64 %5476, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5477 = trunc i64 %5474 to i32
  br label %routine_idivl__esi.exit3147

routine_idivl__esi.exit3147:                      ; preds = %5473, %5471
  %5478 = phi i32 [ %.pre396, %5471 ], [ %5477, %5473 ]
  %5479 = phi i64 [ %.pre395, %5471 ], [ %5463, %5473 ]
  %5480 = phi %struct.Memory* [ %5472, %5471 ], [ %5433, %5473 ]
  %5481 = load i64, i64* %RBP.i, align 8
  %5482 = add i64 %5481, -260
  %5483 = add i64 %5479, 6
  store i64 %5483, i64* %3, align 8
  %5484 = inttoptr i64 %5482 to i32*
  %5485 = load i32, i32* %5484, align 4
  %5486 = add i32 %5478, %5485
  %5487 = lshr i32 %5486, 31
  %5488 = add i32 %5486, 4
  %5489 = zext i32 %5488 to i64
  store i64 %5489, i64* %RDI.i126, align 8
  %5490 = icmp ugt i32 %5486, -5
  %5491 = zext i1 %5490 to i8
  store i8 %5491, i8* %14, align 1
  %5492 = and i32 %5488, 255
  %5493 = tail call i32 @llvm.ctpop.i32(i32 %5492)
  %5494 = trunc i32 %5493 to i8
  %5495 = and i8 %5494, 1
  %5496 = xor i8 %5495, 1
  store i8 %5496, i8* %21, align 1
  %5497 = xor i32 %5488, %5486
  %5498 = lshr i32 %5497, 4
  %5499 = trunc i32 %5498 to i8
  %5500 = and i8 %5499, 1
  store i8 %5500, i8* %27, align 1
  %5501 = icmp eq i32 %5488, 0
  %5502 = zext i1 %5501 to i8
  store i8 %5502, i8* %30, align 1
  %5503 = lshr i32 %5488, 31
  %5504 = trunc i32 %5503 to i8
  store i8 %5504, i8* %33, align 1
  %5505 = xor i32 %5503, %5487
  %5506 = add nuw nsw i32 %5505, %5503
  %5507 = icmp eq i32 %5506, 2
  %5508 = zext i1 %5507 to i8
  store i8 %5508, i8* %39, align 1
  %5509 = sext i32 %5488 to i64
  store i64 %5509, i64* %R8.i3546, align 8
  %5510 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %5511 = shl nsw i64 %5509, 3
  %5512 = add i64 %5510, %5511
  %5513 = add i64 %5479, 18
  store i64 %5513, i64* %3, align 8
  %5514 = inttoptr i64 %5512 to i64*
  %5515 = load i64, i64* %5514, align 8
  store i64 %5515, i64* %RCX.i4414.pre-phi, align 8
  %5516 = add i64 %5479, 22
  store i64 %5516, i64* %3, align 8
  %5517 = inttoptr i64 %5515 to i16*
  %5518 = load i16, i16* %5517, align 2
  store i16 %5518, i16* %R9W.i3301, align 2
  %5519 = add i64 %5481, -8
  %5520 = add i64 %5479, 26
  store i64 %5520, i64* %3, align 8
  %5521 = inttoptr i64 %5519 to i64*
  %5522 = load i64, i64* %5521, align 8
  store i64 %5522, i64* %RCX.i4414.pre-phi, align 8
  %5523 = add i64 %5522, 56
  %5524 = add i64 %5479, 30
  store i64 %5524, i64* %3, align 8
  %5525 = inttoptr i64 %5523 to i64*
  %5526 = load i64, i64* %5525, align 8
  store i64 %5526, i64* %RCX.i4414.pre-phi, align 8
  %5527 = add i64 %5526, 6504
  %5528 = add i64 %5479, 37
  store i64 %5528, i64* %3, align 8
  %5529 = inttoptr i64 %5527 to i64*
  %5530 = load i64, i64* %5529, align 8
  store i64 %5530, i64* %RCX.i4414.pre-phi, align 8
  %5531 = add i64 %5530, 8
  %5532 = add i64 %5479, 41
  store i64 %5532, i64* %3, align 8
  %5533 = inttoptr i64 %5531 to i64*
  %5534 = load i64, i64* %5533, align 8
  store i64 %5534, i64* %RCX.i4414.pre-phi, align 8
  %5535 = load i64, i64* %RBP.i, align 8
  %5536 = add i64 %5535, -12
  %5537 = add i64 %5479, 45
  store i64 %5537, i64* %3, align 8
  %5538 = inttoptr i64 %5536 to i32*
  %5539 = load i32, i32* %5538, align 4
  %5540 = sext i32 %5539 to i64
  store i64 %5540, i64* %R8.i3546, align 8
  %5541 = shl nsw i64 %5540, 3
  %5542 = add i64 %5541, %5534
  %5543 = add i64 %5479, 49
  store i64 %5543, i64* %3, align 8
  %5544 = inttoptr i64 %5542 to i64*
  %5545 = load i64, i64* %5544, align 8
  store i64 %5545, i64* %RCX.i4414.pre-phi, align 8
  %5546 = add i64 %5535, -16
  %5547 = add i64 %5479, 53
  store i64 %5547, i64* %3, align 8
  %5548 = inttoptr i64 %5546 to i32*
  %5549 = load i32, i32* %5548, align 4
  %5550 = sext i32 %5549 to i64
  store i64 %5550, i64* %R8.i3546, align 8
  %5551 = shl nsw i64 %5550, 3
  %5552 = add i64 %5551, %5545
  %5553 = add i64 %5479, 57
  store i64 %5553, i64* %3, align 8
  %5554 = inttoptr i64 %5552 to i64*
  %5555 = load i64, i64* %5554, align 8
  store i64 %5555, i64* %RCX.i4414.pre-phi, align 8
  %5556 = add i64 %5479, 61
  store i64 %5556, i64* %3, align 8
  %5557 = inttoptr i64 %5555 to i16*
  store i16 %5518, i16* %5557, align 2
  %5558 = load i64, i64* %RBP.i, align 8
  %5559 = add i64 %5558, -8
  %5560 = load i64, i64* %3, align 8
  %5561 = add i64 %5560, 4
  store i64 %5561, i64* %3, align 8
  %5562 = inttoptr i64 %5559 to i64*
  %5563 = load i64, i64* %5562, align 8
  store i64 %5563, i64* %RCX.i4414.pre-phi, align 8
  %5564 = add i64 %5563, 40
  %5565 = add i64 %5560, 8
  store i64 %5565, i64* %3, align 8
  %5566 = inttoptr i64 %5564 to i64*
  %5567 = load i64, i64* %5566, align 8
  store i64 %5567, i64* %RCX.i4414.pre-phi, align 8
  %5568 = add i64 %5567, 6504
  %5569 = add i64 %5560, 15
  store i64 %5569, i64* %3, align 8
  %5570 = inttoptr i64 %5568 to i64*
  %5571 = load i64, i64* %5570, align 8
  store i64 %5571, i64* %RCX.i4414.pre-phi, align 8
  %5572 = add i64 %5571, 8
  %5573 = add i64 %5560, 19
  store i64 %5573, i64* %3, align 8
  %5574 = inttoptr i64 %5572 to i64*
  %5575 = load i64, i64* %5574, align 8
  store i64 %5575, i64* %RCX.i4414.pre-phi, align 8
  %5576 = add i64 %5558, -12
  %5577 = add i64 %5560, 23
  store i64 %5577, i64* %3, align 8
  %5578 = inttoptr i64 %5576 to i32*
  %5579 = load i32, i32* %5578, align 4
  %5580 = sext i32 %5579 to i64
  store i64 %5580, i64* %R8.i3546, align 8
  %5581 = shl nsw i64 %5580, 3
  %5582 = add i64 %5581, %5575
  %5583 = add i64 %5560, 27
  store i64 %5583, i64* %3, align 8
  %5584 = inttoptr i64 %5582 to i64*
  %5585 = load i64, i64* %5584, align 8
  store i64 %5585, i64* %RCX.i4414.pre-phi, align 8
  %5586 = add i64 %5558, -16
  %5587 = add i64 %5560, 30
  store i64 %5587, i64* %3, align 8
  %5588 = inttoptr i64 %5586 to i32*
  %5589 = load i32, i32* %5588, align 4
  %5590 = zext i32 %5589 to i64
  store i64 %5590, i64* %RDX.i4411.pre-phi, align 8
  store i64 %5590, i64* %RAX.i186, align 8
  %5591 = sext i32 %5589 to i64
  %5592 = lshr i64 %5591, 32
  store i64 %5592, i64* %.pre-phi499, align 8
  %5593 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5594 = add i64 %5560, 35
  store i64 %5594, i64* %3, align 8
  %5595 = sext i32 %5593 to i64
  %5596 = shl nuw i64 %5592, 32
  %5597 = or i64 %5596, %5590
  %5598 = sdiv i64 %5597, %5595
  %5599 = shl i64 %5598, 32
  %5600 = ashr exact i64 %5599, 32
  %5601 = icmp eq i64 %5598, %5600
  br i1 %5601, label %5604, label %5602

; <label>:5602:                                   ; preds = %routine_idivl__esi.exit3147
  %5603 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5594, %struct.Memory* %5480)
  %.pre397 = load i64, i64* %RAX.i186, align 8
  %.pre398 = load i64, i64* %3, align 8
  %.pre399 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit3079

; <label>:5604:                                   ; preds = %routine_idivl__esi.exit3147
  %5605 = srem i64 %5597, %5595
  %5606 = and i64 %5598, 4294967295
  store i64 %5606, i64* %RAX.i186, align 8
  %5607 = and i64 %5605, 4294967295
  store i64 %5607, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit3079

routine_idivl__esi.exit3079:                      ; preds = %5604, %5602
  %5608 = phi i64 [ %.pre399, %5602 ], [ %5558, %5604 ]
  %5609 = phi i64 [ %.pre398, %5602 ], [ %5594, %5604 ]
  %5610 = phi i64 [ %.pre397, %5602 ], [ %5606, %5604 ]
  %5611 = phi %struct.Memory* [ %5603, %5602 ], [ %5480, %5604 ]
  %.tr104 = trunc i64 %5610 to i32
  %5612 = shl i32 %.tr104, 3
  %5613 = zext i32 %5612 to i64
  store i64 %5613, i64* %RAX.i186, align 8
  %5614 = lshr i64 %5610, 29
  %5615 = trunc i64 %5614 to i8
  %5616 = and i8 %5615, 1
  store i8 %5616, i8* %14, align 1
  %5617 = and i32 %5612, 248
  %5618 = tail call i32 @llvm.ctpop.i32(i32 %5617)
  %5619 = trunc i32 %5618 to i8
  %5620 = and i8 %5619, 1
  %5621 = xor i8 %5620, 1
  store i8 %5621, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5622 = icmp eq i32 %5612, 0
  %5623 = zext i1 %5622 to i8
  store i8 %5623, i8* %30, align 1
  %5624 = lshr i32 %.tr104, 28
  %5625 = trunc i32 %5624 to i8
  %5626 = and i8 %5625, 1
  store i8 %5626, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5627 = add i64 %5608, -16
  %5628 = add i64 %5609, 6
  store i64 %5628, i64* %3, align 8
  %5629 = inttoptr i64 %5627 to i32*
  %5630 = load i32, i32* %5629, align 4
  %5631 = zext i32 %5630 to i64
  store i64 %5631, i64* %RDI.i126, align 8
  %5632 = add i64 %5608, -264
  %5633 = add i64 %5609, 12
  store i64 %5633, i64* %3, align 8
  %5634 = inttoptr i64 %5632 to i32*
  store i32 %5612, i32* %5634, align 4
  %5635 = load i32, i32* %EDI.i3551, align 4
  %5636 = zext i32 %5635 to i64
  %5637 = load i64, i64* %3, align 8
  store i64 %5636, i64* %RAX.i186, align 8
  %5638 = sext i32 %5635 to i64
  %5639 = lshr i64 %5638, 32
  store i64 %5639, i64* %.pre-phi499, align 8
  %5640 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5641 = add i64 %5637, 5
  store i64 %5641, i64* %3, align 8
  %5642 = sext i32 %5640 to i64
  %5643 = shl nuw i64 %5639, 32
  %5644 = or i64 %5643, %5636
  %5645 = sdiv i64 %5644, %5642
  %5646 = shl i64 %5645, 32
  %5647 = ashr exact i64 %5646, 32
  %5648 = icmp eq i64 %5645, %5647
  br i1 %5648, label %5651, label %5649

; <label>:5649:                                   ; preds = %routine_idivl__esi.exit3079
  %5650 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5641, %struct.Memory* %5611)
  %.pre400 = load i64, i64* %3, align 8
  %.pre401 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit3061

; <label>:5651:                                   ; preds = %routine_idivl__esi.exit3079
  %5652 = srem i64 %5644, %5642
  %5653 = and i64 %5645, 4294967295
  store i64 %5653, i64* %RAX.i186, align 8
  %5654 = and i64 %5652, 4294967295
  store i64 %5654, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5655 = trunc i64 %5652 to i32
  br label %routine_idivl__esi.exit3061

routine_idivl__esi.exit3061:                      ; preds = %5651, %5649
  %5656 = phi i32 [ %.pre401, %5649 ], [ %5655, %5651 ]
  %5657 = phi i64 [ %.pre400, %5649 ], [ %5641, %5651 ]
  %5658 = phi %struct.Memory* [ %5650, %5649 ], [ %5611, %5651 ]
  %5659 = load i64, i64* %RBP.i, align 8
  %5660 = add i64 %5659, -264
  %5661 = add i64 %5657, 6
  store i64 %5661, i64* %3, align 8
  %5662 = inttoptr i64 %5660 to i32*
  %5663 = load i32, i32* %5662, align 4
  %5664 = add i32 %5656, %5663
  %5665 = lshr i32 %5664, 31
  %5666 = add i32 %5664, 4
  %5667 = zext i32 %5666 to i64
  store i64 %5667, i64* %RDI.i126, align 8
  %5668 = icmp ugt i32 %5664, -5
  %5669 = zext i1 %5668 to i8
  store i8 %5669, i8* %14, align 1
  %5670 = and i32 %5666, 255
  %5671 = tail call i32 @llvm.ctpop.i32(i32 %5670)
  %5672 = trunc i32 %5671 to i8
  %5673 = and i8 %5672, 1
  %5674 = xor i8 %5673, 1
  store i8 %5674, i8* %21, align 1
  %5675 = xor i32 %5666, %5664
  %5676 = lshr i32 %5675, 4
  %5677 = trunc i32 %5676 to i8
  %5678 = and i8 %5677, 1
  store i8 %5678, i8* %27, align 1
  %5679 = icmp eq i32 %5666, 0
  %5680 = zext i1 %5679 to i8
  store i8 %5680, i8* %30, align 1
  %5681 = lshr i32 %5666, 31
  %5682 = trunc i32 %5681 to i8
  store i8 %5682, i8* %33, align 1
  %5683 = xor i32 %5681, %5665
  %5684 = add nuw nsw i32 %5683, %5681
  %5685 = icmp eq i32 %5684, 2
  %5686 = zext i1 %5685 to i8
  store i8 %5686, i8* %39, align 1
  %5687 = sext i32 %5666 to i64
  store i64 %5687, i64* %R8.i3546, align 8
  %5688 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %5689 = shl nsw i64 %5687, 3
  %5690 = add i64 %5688, %5689
  %5691 = add i64 %5657, 18
  store i64 %5691, i64* %3, align 8
  %5692 = inttoptr i64 %5690 to i64*
  %5693 = load i64, i64* %5692, align 8
  store i64 %5693, i64* %RCX.i4414.pre-phi, align 8
  %5694 = add i64 %5693, 2
  %5695 = add i64 %5657, 23
  store i64 %5695, i64* %3, align 8
  %5696 = inttoptr i64 %5694 to i16*
  %5697 = load i16, i16* %5696, align 2
  store i16 %5697, i16* %R9W.i3301, align 2
  %5698 = add i64 %5659, -8
  %5699 = add i64 %5657, 27
  store i64 %5699, i64* %3, align 8
  %5700 = inttoptr i64 %5698 to i64*
  %5701 = load i64, i64* %5700, align 8
  store i64 %5701, i64* %RCX.i4414.pre-phi, align 8
  %5702 = add i64 %5701, 56
  %5703 = add i64 %5657, 31
  store i64 %5703, i64* %3, align 8
  %5704 = inttoptr i64 %5702 to i64*
  %5705 = load i64, i64* %5704, align 8
  store i64 %5705, i64* %RCX.i4414.pre-phi, align 8
  %5706 = add i64 %5705, 6504
  %5707 = add i64 %5657, 38
  store i64 %5707, i64* %3, align 8
  %5708 = inttoptr i64 %5706 to i64*
  %5709 = load i64, i64* %5708, align 8
  store i64 %5709, i64* %RCX.i4414.pre-phi, align 8
  %5710 = add i64 %5709, 8
  %5711 = add i64 %5657, 42
  store i64 %5711, i64* %3, align 8
  %5712 = inttoptr i64 %5710 to i64*
  %5713 = load i64, i64* %5712, align 8
  store i64 %5713, i64* %RCX.i4414.pre-phi, align 8
  %5714 = load i64, i64* %RBP.i, align 8
  %5715 = add i64 %5714, -12
  %5716 = add i64 %5657, 46
  store i64 %5716, i64* %3, align 8
  %5717 = inttoptr i64 %5715 to i32*
  %5718 = load i32, i32* %5717, align 4
  %5719 = sext i32 %5718 to i64
  store i64 %5719, i64* %R8.i3546, align 8
  %5720 = shl nsw i64 %5719, 3
  %5721 = add i64 %5720, %5713
  %5722 = add i64 %5657, 50
  store i64 %5722, i64* %3, align 8
  %5723 = inttoptr i64 %5721 to i64*
  %5724 = load i64, i64* %5723, align 8
  store i64 %5724, i64* %RCX.i4414.pre-phi, align 8
  %5725 = add i64 %5714, -16
  %5726 = add i64 %5657, 54
  store i64 %5726, i64* %3, align 8
  %5727 = inttoptr i64 %5725 to i32*
  %5728 = load i32, i32* %5727, align 4
  %5729 = sext i32 %5728 to i64
  store i64 %5729, i64* %R8.i3546, align 8
  %5730 = shl nsw i64 %5729, 3
  %5731 = add i64 %5730, %5724
  %5732 = add i64 %5657, 58
  store i64 %5732, i64* %3, align 8
  %5733 = inttoptr i64 %5731 to i64*
  %5734 = load i64, i64* %5733, align 8
  store i64 %5734, i64* %RCX.i4414.pre-phi, align 8
  %5735 = add i64 %5734, 2
  %5736 = add i64 %5657, 63
  store i64 %5736, i64* %3, align 8
  %5737 = inttoptr i64 %5735 to i16*
  store i16 %5697, i16* %5737, align 2
  %5738 = load i64, i64* %RBP.i, align 8
  %5739 = add i64 %5738, -8
  %5740 = load i64, i64* %3, align 8
  %5741 = add i64 %5740, 4
  store i64 %5741, i64* %3, align 8
  %5742 = inttoptr i64 %5739 to i64*
  %5743 = load i64, i64* %5742, align 8
  store i64 %5743, i64* %RCX.i4414.pre-phi, align 8
  %5744 = add i64 %5743, 40
  %5745 = add i64 %5740, 8
  store i64 %5745, i64* %3, align 8
  %5746 = inttoptr i64 %5744 to i64*
  %5747 = load i64, i64* %5746, align 8
  store i64 %5747, i64* %RCX.i4414.pre-phi, align 8
  %5748 = add i64 %5747, 6480
  %5749 = add i64 %5740, 15
  store i64 %5749, i64* %3, align 8
  %5750 = inttoptr i64 %5748 to i64*
  %5751 = load i64, i64* %5750, align 8
  store i64 %5751, i64* %RCX.i4414.pre-phi, align 8
  %5752 = add i64 %5740, 18
  store i64 %5752, i64* %3, align 8
  %5753 = inttoptr i64 %5751 to i64*
  %5754 = load i64, i64* %5753, align 8
  store i64 %5754, i64* %RCX.i4414.pre-phi, align 8
  %5755 = add i64 %5738, -12
  %5756 = add i64 %5740, 22
  store i64 %5756, i64* %3, align 8
  %5757 = inttoptr i64 %5755 to i32*
  %5758 = load i32, i32* %5757, align 4
  %5759 = sext i32 %5758 to i64
  store i64 %5759, i64* %R8.i3546, align 8
  %5760 = shl nsw i64 %5759, 3
  %5761 = add i64 %5760, %5754
  %5762 = add i64 %5740, 26
  store i64 %5762, i64* %3, align 8
  %5763 = inttoptr i64 %5761 to i64*
  %5764 = load i64, i64* %5763, align 8
  store i64 %5764, i64* %RCX.i4414.pre-phi, align 8
  %5765 = add i64 %5738, -16
  %5766 = add i64 %5740, 29
  store i64 %5766, i64* %3, align 8
  %5767 = inttoptr i64 %5765 to i32*
  %5768 = load i32, i32* %5767, align 4
  %5769 = zext i32 %5768 to i64
  store i64 %5769, i64* %RDX.i4411.pre-phi, align 8
  store i64 %5769, i64* %RAX.i186, align 8
  %5770 = sext i32 %5768 to i64
  %5771 = lshr i64 %5770, 32
  store i64 %5771, i64* %.pre-phi499, align 8
  %5772 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5773 = add i64 %5740, 34
  store i64 %5773, i64* %3, align 8
  %5774 = sext i32 %5772 to i64
  %5775 = shl nuw i64 %5771, 32
  %5776 = or i64 %5775, %5769
  %5777 = sdiv i64 %5776, %5774
  %5778 = shl i64 %5777, 32
  %5779 = ashr exact i64 %5778, 32
  %5780 = icmp eq i64 %5777, %5779
  br i1 %5780, label %5783, label %5781

; <label>:5781:                                   ; preds = %routine_idivl__esi.exit3061
  %5782 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5773, %struct.Memory* %5658)
  %.pre402 = load i64, i64* %RAX.i186, align 8
  %.pre403 = load i64, i64* %3, align 8
  %.pre404 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2992

; <label>:5783:                                   ; preds = %routine_idivl__esi.exit3061
  %5784 = srem i64 %5776, %5774
  %5785 = and i64 %5777, 4294967295
  store i64 %5785, i64* %RAX.i186, align 8
  %5786 = and i64 %5784, 4294967295
  store i64 %5786, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2992

routine_idivl__esi.exit2992:                      ; preds = %5783, %5781
  %5787 = phi i64 [ %.pre404, %5781 ], [ %5738, %5783 ]
  %5788 = phi i64 [ %.pre403, %5781 ], [ %5773, %5783 ]
  %5789 = phi i64 [ %.pre402, %5781 ], [ %5785, %5783 ]
  %5790 = phi %struct.Memory* [ %5782, %5781 ], [ %5658, %5783 ]
  %.tr107 = trunc i64 %5789 to i32
  %5791 = shl i32 %.tr107, 3
  %5792 = zext i32 %5791 to i64
  store i64 %5792, i64* %RAX.i186, align 8
  %5793 = lshr i64 %5789, 29
  %5794 = trunc i64 %5793 to i8
  %5795 = and i8 %5794, 1
  store i8 %5795, i8* %14, align 1
  %5796 = and i32 %5791, 248
  %5797 = tail call i32 @llvm.ctpop.i32(i32 %5796)
  %5798 = trunc i32 %5797 to i8
  %5799 = and i8 %5798, 1
  %5800 = xor i8 %5799, 1
  store i8 %5800, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5801 = icmp eq i32 %5791, 0
  %5802 = zext i1 %5801 to i8
  store i8 %5802, i8* %30, align 1
  %5803 = lshr i32 %.tr107, 28
  %5804 = trunc i32 %5803 to i8
  %5805 = and i8 %5804, 1
  store i8 %5805, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5806 = add i64 %5787, -16
  %5807 = add i64 %5788, 6
  store i64 %5807, i64* %3, align 8
  %5808 = inttoptr i64 %5806 to i32*
  %5809 = load i32, i32* %5808, align 4
  %5810 = zext i32 %5809 to i64
  store i64 %5810, i64* %RDI.i126, align 8
  %5811 = add i64 %5787, -268
  %5812 = add i64 %5788, 12
  store i64 %5812, i64* %3, align 8
  %5813 = inttoptr i64 %5811 to i32*
  store i32 %5791, i32* %5813, align 4
  %5814 = load i32, i32* %EDI.i3551, align 4
  %5815 = zext i32 %5814 to i64
  %5816 = load i64, i64* %3, align 8
  store i64 %5815, i64* %RAX.i186, align 8
  %5817 = sext i32 %5814 to i64
  %5818 = lshr i64 %5817, 32
  store i64 %5818, i64* %.pre-phi499, align 8
  %5819 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5820 = add i64 %5816, 5
  store i64 %5820, i64* %3, align 8
  %5821 = sext i32 %5819 to i64
  %5822 = shl nuw i64 %5818, 32
  %5823 = or i64 %5822, %5815
  %5824 = sdiv i64 %5823, %5821
  %5825 = shl i64 %5824, 32
  %5826 = ashr exact i64 %5825, 32
  %5827 = icmp eq i64 %5824, %5826
  br i1 %5827, label %5830, label %5828

; <label>:5828:                                   ; preds = %routine_idivl__esi.exit2992
  %5829 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5820, %struct.Memory* %5790)
  %.pre405 = load i64, i64* %3, align 8
  %.pre406 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2974

; <label>:5830:                                   ; preds = %routine_idivl__esi.exit2992
  %5831 = srem i64 %5823, %5821
  %5832 = and i64 %5824, 4294967295
  store i64 %5832, i64* %RAX.i186, align 8
  %5833 = and i64 %5831, 4294967295
  store i64 %5833, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5834 = trunc i64 %5831 to i32
  br label %routine_idivl__esi.exit2974

routine_idivl__esi.exit2974:                      ; preds = %5830, %5828
  %5835 = phi i32 [ %.pre406, %5828 ], [ %5834, %5830 ]
  %5836 = phi i64 [ %.pre405, %5828 ], [ %5820, %5830 ]
  %5837 = phi %struct.Memory* [ %5829, %5828 ], [ %5790, %5830 ]
  %5838 = load i64, i64* %RBP.i, align 8
  %5839 = add i64 %5838, -268
  %5840 = add i64 %5836, 6
  store i64 %5840, i64* %3, align 8
  %5841 = inttoptr i64 %5839 to i32*
  %5842 = load i32, i32* %5841, align 4
  %5843 = add i32 %5835, %5842
  %5844 = lshr i32 %5843, 31
  %5845 = add i32 %5843, 4
  %5846 = zext i32 %5845 to i64
  store i64 %5846, i64* %RDI.i126, align 8
  %5847 = icmp ugt i32 %5843, -5
  %5848 = zext i1 %5847 to i8
  store i8 %5848, i8* %14, align 1
  %5849 = and i32 %5845, 255
  %5850 = tail call i32 @llvm.ctpop.i32(i32 %5849)
  %5851 = trunc i32 %5850 to i8
  %5852 = and i8 %5851, 1
  %5853 = xor i8 %5852, 1
  store i8 %5853, i8* %21, align 1
  %5854 = xor i32 %5845, %5843
  %5855 = lshr i32 %5854, 4
  %5856 = trunc i32 %5855 to i8
  %5857 = and i8 %5856, 1
  store i8 %5857, i8* %27, align 1
  %5858 = icmp eq i32 %5845, 0
  %5859 = zext i1 %5858 to i8
  store i8 %5859, i8* %30, align 1
  %5860 = lshr i32 %5845, 31
  %5861 = trunc i32 %5860 to i8
  store i8 %5861, i8* %33, align 1
  %5862 = xor i32 %5860, %5844
  %5863 = add nuw nsw i32 %5862, %5860
  %5864 = icmp eq i32 %5863, 2
  %5865 = zext i1 %5864 to i8
  store i8 %5865, i8* %39, align 1
  %5866 = sext i32 %5845 to i64
  store i64 %5866, i64* %R8.i3546, align 8
  %5867 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %5868 = shl nsw i64 %5866, 1
  %5869 = add i64 %5867, %5868
  %5870 = add i64 %5836, 19
  store i64 %5870, i64* %3, align 8
  %5871 = inttoptr i64 %5869 to i16*
  %5872 = load i16, i16* %5871, align 2
  store i16 %5872, i16* %R9W.i3301, align 2
  %5873 = add i64 %5838, -8
  %5874 = add i64 %5836, 23
  store i64 %5874, i64* %3, align 8
  %5875 = inttoptr i64 %5873 to i64*
  %5876 = load i64, i64* %5875, align 8
  store i64 %5876, i64* %RCX.i4414.pre-phi, align 8
  %5877 = add i64 %5876, 56
  %5878 = add i64 %5836, 27
  store i64 %5878, i64* %3, align 8
  %5879 = inttoptr i64 %5877 to i64*
  %5880 = load i64, i64* %5879, align 8
  store i64 %5880, i64* %RCX.i4414.pre-phi, align 8
  %5881 = add i64 %5880, 6480
  %5882 = add i64 %5836, 34
  store i64 %5882, i64* %3, align 8
  %5883 = inttoptr i64 %5881 to i64*
  %5884 = load i64, i64* %5883, align 8
  store i64 %5884, i64* %RCX.i4414.pre-phi, align 8
  %5885 = add i64 %5836, 37
  store i64 %5885, i64* %3, align 8
  %5886 = inttoptr i64 %5884 to i64*
  %5887 = load i64, i64* %5886, align 8
  store i64 %5887, i64* %RCX.i4414.pre-phi, align 8
  %5888 = load i64, i64* %RBP.i, align 8
  %5889 = add i64 %5888, -12
  %5890 = add i64 %5836, 41
  store i64 %5890, i64* %3, align 8
  %5891 = inttoptr i64 %5889 to i32*
  %5892 = load i32, i32* %5891, align 4
  %5893 = sext i32 %5892 to i64
  store i64 %5893, i64* %R8.i3546, align 8
  %5894 = shl nsw i64 %5893, 3
  %5895 = add i64 %5894, %5887
  %5896 = add i64 %5836, 45
  store i64 %5896, i64* %3, align 8
  %5897 = inttoptr i64 %5895 to i64*
  %5898 = load i64, i64* %5897, align 8
  store i64 %5898, i64* %RCX.i4414.pre-phi, align 8
  %5899 = add i64 %5888, -16
  %5900 = add i64 %5836, 49
  store i64 %5900, i64* %3, align 8
  %5901 = inttoptr i64 %5899 to i32*
  %5902 = load i32, i32* %5901, align 4
  %5903 = sext i32 %5902 to i64
  store i64 %5903, i64* %R8.i3546, align 8
  %5904 = shl nsw i64 %5903, 1
  %5905 = add i64 %5904, %5898
  %5906 = add i64 %5836, 54
  store i64 %5906, i64* %3, align 8
  %5907 = inttoptr i64 %5905 to i16*
  store i16 %5872, i16* %5907, align 2
  %5908 = load i64, i64* %RBP.i, align 8
  %5909 = add i64 %5908, -8
  %5910 = load i64, i64* %3, align 8
  %5911 = add i64 %5910, 4
  store i64 %5911, i64* %3, align 8
  %5912 = inttoptr i64 %5909 to i64*
  %5913 = load i64, i64* %5912, align 8
  store i64 %5913, i64* %RCX.i4414.pre-phi, align 8
  %5914 = add i64 %5913, 40
  %5915 = add i64 %5910, 8
  store i64 %5915, i64* %3, align 8
  %5916 = inttoptr i64 %5914 to i64*
  %5917 = load i64, i64* %5916, align 8
  store i64 %5917, i64* %RCX.i4414.pre-phi, align 8
  %5918 = add i64 %5917, 6480
  %5919 = add i64 %5910, 15
  store i64 %5919, i64* %3, align 8
  %5920 = inttoptr i64 %5918 to i64*
  %5921 = load i64, i64* %5920, align 8
  store i64 %5921, i64* %RCX.i4414.pre-phi, align 8
  %5922 = add i64 %5921, 8
  %5923 = add i64 %5910, 19
  store i64 %5923, i64* %3, align 8
  %5924 = inttoptr i64 %5922 to i64*
  %5925 = load i64, i64* %5924, align 8
  store i64 %5925, i64* %RCX.i4414.pre-phi, align 8
  %5926 = add i64 %5908, -12
  %5927 = add i64 %5910, 23
  store i64 %5927, i64* %3, align 8
  %5928 = inttoptr i64 %5926 to i32*
  %5929 = load i32, i32* %5928, align 4
  %5930 = sext i32 %5929 to i64
  store i64 %5930, i64* %R8.i3546, align 8
  %5931 = shl nsw i64 %5930, 3
  %5932 = add i64 %5931, %5925
  %5933 = add i64 %5910, 27
  store i64 %5933, i64* %3, align 8
  %5934 = inttoptr i64 %5932 to i64*
  %5935 = load i64, i64* %5934, align 8
  store i64 %5935, i64* %RCX.i4414.pre-phi, align 8
  %5936 = add i64 %5908, -16
  %5937 = add i64 %5910, 30
  store i64 %5937, i64* %3, align 8
  %5938 = inttoptr i64 %5936 to i32*
  %5939 = load i32, i32* %5938, align 4
  %5940 = zext i32 %5939 to i64
  store i64 %5940, i64* %RDX.i4411.pre-phi, align 8
  store i64 %5940, i64* %RAX.i186, align 8
  %5941 = sext i32 %5939 to i64
  %5942 = lshr i64 %5941, 32
  store i64 %5942, i64* %.pre-phi499, align 8
  %5943 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5944 = add i64 %5910, 35
  store i64 %5944, i64* %3, align 8
  %5945 = sext i32 %5943 to i64
  %5946 = shl nuw i64 %5942, 32
  %5947 = or i64 %5946, %5940
  %5948 = sdiv i64 %5947, %5945
  %5949 = shl i64 %5948, 32
  %5950 = ashr exact i64 %5949, 32
  %5951 = icmp eq i64 %5948, %5950
  br i1 %5951, label %5954, label %5952

; <label>:5952:                                   ; preds = %routine_idivl__esi.exit2974
  %5953 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5944, %struct.Memory* %5837)
  %.pre407 = load i64, i64* %RAX.i186, align 8
  %.pre408 = load i64, i64* %3, align 8
  %.pre409 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2910

; <label>:5954:                                   ; preds = %routine_idivl__esi.exit2974
  %5955 = srem i64 %5947, %5945
  %5956 = and i64 %5948, 4294967295
  store i64 %5956, i64* %RAX.i186, align 8
  %5957 = and i64 %5955, 4294967295
  store i64 %5957, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2910

routine_idivl__esi.exit2910:                      ; preds = %5954, %5952
  %5958 = phi i64 [ %.pre409, %5952 ], [ %5908, %5954 ]
  %5959 = phi i64 [ %.pre408, %5952 ], [ %5944, %5954 ]
  %5960 = phi i64 [ %.pre407, %5952 ], [ %5956, %5954 ]
  %5961 = phi %struct.Memory* [ %5953, %5952 ], [ %5837, %5954 ]
  %.tr110 = trunc i64 %5960 to i32
  %5962 = shl i32 %.tr110, 3
  %5963 = zext i32 %5962 to i64
  store i64 %5963, i64* %RAX.i186, align 8
  %5964 = lshr i64 %5960, 29
  %5965 = trunc i64 %5964 to i8
  %5966 = and i8 %5965, 1
  store i8 %5966, i8* %14, align 1
  %5967 = and i32 %5962, 248
  %5968 = tail call i32 @llvm.ctpop.i32(i32 %5967)
  %5969 = trunc i32 %5968 to i8
  %5970 = and i8 %5969, 1
  %5971 = xor i8 %5970, 1
  store i8 %5971, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %5972 = icmp eq i32 %5962, 0
  %5973 = zext i1 %5972 to i8
  store i8 %5973, i8* %30, align 1
  %5974 = lshr i32 %.tr110, 28
  %5975 = trunc i32 %5974 to i8
  %5976 = and i8 %5975, 1
  store i8 %5976, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %5977 = add i64 %5958, -16
  %5978 = add i64 %5959, 6
  store i64 %5978, i64* %3, align 8
  %5979 = inttoptr i64 %5977 to i32*
  %5980 = load i32, i32* %5979, align 4
  %5981 = zext i32 %5980 to i64
  store i64 %5981, i64* %RDI.i126, align 8
  %5982 = add i64 %5958, -272
  %5983 = add i64 %5959, 12
  store i64 %5983, i64* %3, align 8
  %5984 = inttoptr i64 %5982 to i32*
  store i32 %5962, i32* %5984, align 4
  %5985 = load i32, i32* %EDI.i3551, align 4
  %5986 = zext i32 %5985 to i64
  %5987 = load i64, i64* %3, align 8
  store i64 %5986, i64* %RAX.i186, align 8
  %5988 = sext i32 %5985 to i64
  %5989 = lshr i64 %5988, 32
  store i64 %5989, i64* %.pre-phi499, align 8
  %5990 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %5991 = add i64 %5987, 5
  store i64 %5991, i64* %3, align 8
  %5992 = sext i32 %5990 to i64
  %5993 = shl nuw i64 %5989, 32
  %5994 = or i64 %5993, %5986
  %5995 = sdiv i64 %5994, %5992
  %5996 = shl i64 %5995, 32
  %5997 = ashr exact i64 %5996, 32
  %5998 = icmp eq i64 %5995, %5997
  br i1 %5998, label %6001, label %5999

; <label>:5999:                                   ; preds = %routine_idivl__esi.exit2910
  %6000 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5991, %struct.Memory* %5961)
  %.pre410 = load i64, i64* %3, align 8
  %.pre411 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2894

; <label>:6001:                                   ; preds = %routine_idivl__esi.exit2910
  %6002 = srem i64 %5994, %5992
  %6003 = and i64 %5995, 4294967295
  store i64 %6003, i64* %RAX.i186, align 8
  %6004 = and i64 %6002, 4294967295
  store i64 %6004, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6005 = trunc i64 %6002 to i32
  br label %routine_idivl__esi.exit2894

routine_idivl__esi.exit2894:                      ; preds = %6001, %5999
  %6006 = phi i32 [ %.pre411, %5999 ], [ %6005, %6001 ]
  %6007 = phi i64 [ %.pre410, %5999 ], [ %5991, %6001 ]
  %6008 = phi %struct.Memory* [ %6000, %5999 ], [ %5961, %6001 ]
  %6009 = load i64, i64* %RBP.i, align 8
  %6010 = add i64 %6009, -272
  %6011 = add i64 %6007, 6
  store i64 %6011, i64* %3, align 8
  %6012 = inttoptr i64 %6010 to i32*
  %6013 = load i32, i32* %6012, align 4
  %6014 = add i32 %6006, %6013
  %6015 = lshr i32 %6014, 31
  %6016 = add i32 %6014, 4
  %6017 = zext i32 %6016 to i64
  store i64 %6017, i64* %RDI.i126, align 8
  %6018 = icmp ugt i32 %6014, -5
  %6019 = zext i1 %6018 to i8
  store i8 %6019, i8* %14, align 1
  %6020 = and i32 %6016, 255
  %6021 = tail call i32 @llvm.ctpop.i32(i32 %6020)
  %6022 = trunc i32 %6021 to i8
  %6023 = and i8 %6022, 1
  %6024 = xor i8 %6023, 1
  store i8 %6024, i8* %21, align 1
  %6025 = xor i32 %6016, %6014
  %6026 = lshr i32 %6025, 4
  %6027 = trunc i32 %6026 to i8
  %6028 = and i8 %6027, 1
  store i8 %6028, i8* %27, align 1
  %6029 = icmp eq i32 %6016, 0
  %6030 = zext i1 %6029 to i8
  store i8 %6030, i8* %30, align 1
  %6031 = lshr i32 %6016, 31
  %6032 = trunc i32 %6031 to i8
  store i8 %6032, i8* %33, align 1
  %6033 = xor i32 %6031, %6015
  %6034 = add nuw nsw i32 %6033, %6031
  %6035 = icmp eq i32 %6034, 2
  %6036 = zext i1 %6035 to i8
  store i8 %6036, i8* %39, align 1
  %6037 = sext i32 %6016 to i64
  store i64 %6037, i64* %R8.i3546, align 8
  %6038 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %6039 = shl nsw i64 %6037, 1
  %6040 = add i64 %6038, %6039
  %6041 = add i64 %6007, 19
  store i64 %6041, i64* %3, align 8
  %6042 = inttoptr i64 %6040 to i16*
  %6043 = load i16, i16* %6042, align 2
  store i16 %6043, i16* %R9W.i3301, align 2
  %6044 = add i64 %6009, -8
  %6045 = add i64 %6007, 23
  store i64 %6045, i64* %3, align 8
  %6046 = inttoptr i64 %6044 to i64*
  %6047 = load i64, i64* %6046, align 8
  store i64 %6047, i64* %RCX.i4414.pre-phi, align 8
  %6048 = add i64 %6047, 56
  %6049 = add i64 %6007, 27
  store i64 %6049, i64* %3, align 8
  %6050 = inttoptr i64 %6048 to i64*
  %6051 = load i64, i64* %6050, align 8
  store i64 %6051, i64* %RCX.i4414.pre-phi, align 8
  %6052 = add i64 %6051, 6480
  %6053 = add i64 %6007, 34
  store i64 %6053, i64* %3, align 8
  %6054 = inttoptr i64 %6052 to i64*
  %6055 = load i64, i64* %6054, align 8
  store i64 %6055, i64* %RCX.i4414.pre-phi, align 8
  %6056 = add i64 %6055, 8
  %6057 = add i64 %6007, 38
  store i64 %6057, i64* %3, align 8
  %6058 = inttoptr i64 %6056 to i64*
  %6059 = load i64, i64* %6058, align 8
  store i64 %6059, i64* %RCX.i4414.pre-phi, align 8
  %6060 = load i64, i64* %RBP.i, align 8
  %6061 = add i64 %6060, -12
  %6062 = add i64 %6007, 42
  store i64 %6062, i64* %3, align 8
  %6063 = inttoptr i64 %6061 to i32*
  %6064 = load i32, i32* %6063, align 4
  %6065 = sext i32 %6064 to i64
  store i64 %6065, i64* %R8.i3546, align 8
  %6066 = shl nsw i64 %6065, 3
  %6067 = add i64 %6066, %6059
  %6068 = add i64 %6007, 46
  store i64 %6068, i64* %3, align 8
  %6069 = inttoptr i64 %6067 to i64*
  %6070 = load i64, i64* %6069, align 8
  store i64 %6070, i64* %RCX.i4414.pre-phi, align 8
  %6071 = add i64 %6060, -16
  %6072 = add i64 %6007, 50
  store i64 %6072, i64* %3, align 8
  %6073 = inttoptr i64 %6071 to i32*
  %6074 = load i32, i32* %6073, align 4
  %6075 = sext i32 %6074 to i64
  store i64 %6075, i64* %R8.i3546, align 8
  %6076 = shl nsw i64 %6075, 1
  %6077 = add i64 %6076, %6070
  %6078 = add i64 %6007, 55
  store i64 %6078, i64* %3, align 8
  %6079 = inttoptr i64 %6077 to i16*
  store i16 %6043, i16* %6079, align 2
  %6080 = load i64, i64* %RBP.i, align 8
  %6081 = add i64 %6080, -8
  %6082 = load i64, i64* %3, align 8
  %6083 = add i64 %6082, 4
  store i64 %6083, i64* %3, align 8
  %6084 = inttoptr i64 %6081 to i64*
  %6085 = load i64, i64* %6084, align 8
  store i64 %6085, i64* %RCX.i4414.pre-phi, align 8
  %6086 = add i64 %6085, 40
  %6087 = add i64 %6082, 8
  store i64 %6087, i64* %3, align 8
  %6088 = inttoptr i64 %6086 to i64*
  %6089 = load i64, i64* %6088, align 8
  store i64 %6089, i64* %RCX.i4414.pre-phi, align 8
  %6090 = add i64 %6089, 6496
  %6091 = add i64 %6082, 15
  store i64 %6091, i64* %3, align 8
  %6092 = inttoptr i64 %6090 to i64*
  %6093 = load i64, i64* %6092, align 8
  store i64 %6093, i64* %RCX.i4414.pre-phi, align 8
  %6094 = add i64 %6093, 32
  %6095 = add i64 %6082, 19
  store i64 %6095, i64* %3, align 8
  %6096 = inttoptr i64 %6094 to i64*
  %6097 = load i64, i64* %6096, align 8
  store i64 %6097, i64* %RCX.i4414.pre-phi, align 8
  %6098 = add i64 %6080, -12
  %6099 = add i64 %6082, 23
  store i64 %6099, i64* %3, align 8
  %6100 = inttoptr i64 %6098 to i32*
  %6101 = load i32, i32* %6100, align 4
  %6102 = sext i32 %6101 to i64
  store i64 %6102, i64* %R8.i3546, align 8
  %6103 = shl nsw i64 %6102, 3
  %6104 = add i64 %6103, %6097
  %6105 = add i64 %6082, 27
  store i64 %6105, i64* %3, align 8
  %6106 = inttoptr i64 %6104 to i64*
  %6107 = load i64, i64* %6106, align 8
  store i64 %6107, i64* %RCX.i4414.pre-phi, align 8
  %6108 = add i64 %6080, -16
  %6109 = add i64 %6082, 30
  store i64 %6109, i64* %3, align 8
  %6110 = inttoptr i64 %6108 to i32*
  %6111 = load i32, i32* %6110, align 4
  %6112 = zext i32 %6111 to i64
  store i64 %6112, i64* %RDX.i4411.pre-phi, align 8
  store i64 %6112, i64* %RAX.i186, align 8
  %6113 = sext i32 %6111 to i64
  %6114 = lshr i64 %6113, 32
  store i64 %6114, i64* %.pre-phi499, align 8
  %6115 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6116 = add i64 %6082, 35
  store i64 %6116, i64* %3, align 8
  %6117 = sext i32 %6115 to i64
  %6118 = shl nuw i64 %6114, 32
  %6119 = or i64 %6118, %6112
  %6120 = sdiv i64 %6119, %6117
  %6121 = shl i64 %6120, 32
  %6122 = ashr exact i64 %6121, 32
  %6123 = icmp eq i64 %6120, %6122
  br i1 %6123, label %6126, label %6124

; <label>:6124:                                   ; preds = %routine_idivl__esi.exit2894
  %6125 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6116, %struct.Memory* %6008)
  %.pre412 = load i64, i64* %RAX.i186, align 8
  %.pre413 = load i64, i64* %3, align 8
  %.pre414 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2829

; <label>:6126:                                   ; preds = %routine_idivl__esi.exit2894
  %6127 = srem i64 %6119, %6117
  %6128 = and i64 %6120, 4294967295
  store i64 %6128, i64* %RAX.i186, align 8
  %6129 = and i64 %6127, 4294967295
  store i64 %6129, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2829

routine_idivl__esi.exit2829:                      ; preds = %6126, %6124
  %6130 = phi i64 [ %.pre414, %6124 ], [ %6080, %6126 ]
  %6131 = phi i64 [ %.pre413, %6124 ], [ %6116, %6126 ]
  %6132 = phi i64 [ %.pre412, %6124 ], [ %6128, %6126 ]
  %6133 = phi %struct.Memory* [ %6125, %6124 ], [ %6008, %6126 ]
  %.tr113 = trunc i64 %6132 to i32
  %6134 = shl i32 %.tr113, 3
  %6135 = zext i32 %6134 to i64
  store i64 %6135, i64* %RAX.i186, align 8
  %6136 = lshr i64 %6132, 29
  %6137 = trunc i64 %6136 to i8
  %6138 = and i8 %6137, 1
  store i8 %6138, i8* %14, align 1
  %6139 = and i32 %6134, 248
  %6140 = tail call i32 @llvm.ctpop.i32(i32 %6139)
  %6141 = trunc i32 %6140 to i8
  %6142 = and i8 %6141, 1
  %6143 = xor i8 %6142, 1
  store i8 %6143, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6144 = icmp eq i32 %6134, 0
  %6145 = zext i1 %6144 to i8
  store i8 %6145, i8* %30, align 1
  %6146 = lshr i32 %.tr113, 28
  %6147 = trunc i32 %6146 to i8
  %6148 = and i8 %6147, 1
  store i8 %6148, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6149 = add i64 %6130, -16
  %6150 = add i64 %6131, 6
  store i64 %6150, i64* %3, align 8
  %6151 = inttoptr i64 %6149 to i32*
  %6152 = load i32, i32* %6151, align 4
  %6153 = zext i32 %6152 to i64
  store i64 %6153, i64* %RDI.i126, align 8
  %6154 = add i64 %6130, -276
  %6155 = add i64 %6131, 12
  store i64 %6155, i64* %3, align 8
  %6156 = inttoptr i64 %6154 to i32*
  store i32 %6134, i32* %6156, align 4
  %6157 = load i32, i32* %EDI.i3551, align 4
  %6158 = zext i32 %6157 to i64
  %6159 = load i64, i64* %3, align 8
  store i64 %6158, i64* %RAX.i186, align 8
  %6160 = sext i32 %6157 to i64
  %6161 = lshr i64 %6160, 32
  store i64 %6161, i64* %.pre-phi499, align 8
  %6162 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6163 = add i64 %6159, 5
  store i64 %6163, i64* %3, align 8
  %6164 = sext i32 %6162 to i64
  %6165 = shl nuw i64 %6161, 32
  %6166 = or i64 %6165, %6158
  %6167 = sdiv i64 %6166, %6164
  %6168 = shl i64 %6167, 32
  %6169 = ashr exact i64 %6168, 32
  %6170 = icmp eq i64 %6167, %6169
  br i1 %6170, label %6173, label %6171

; <label>:6171:                                   ; preds = %routine_idivl__esi.exit2829
  %6172 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6163, %struct.Memory* %6133)
  %.pre415 = load i64, i64* %3, align 8
  %.pre416 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2811

; <label>:6173:                                   ; preds = %routine_idivl__esi.exit2829
  %6174 = srem i64 %6166, %6164
  %6175 = and i64 %6167, 4294967295
  store i64 %6175, i64* %RAX.i186, align 8
  %6176 = and i64 %6174, 4294967295
  store i64 %6176, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6177 = trunc i64 %6174 to i32
  br label %routine_idivl__esi.exit2811

routine_idivl__esi.exit2811:                      ; preds = %6173, %6171
  %6178 = phi i32 [ %.pre416, %6171 ], [ %6177, %6173 ]
  %6179 = phi i64 [ %.pre415, %6171 ], [ %6163, %6173 ]
  %6180 = phi %struct.Memory* [ %6172, %6171 ], [ %6133, %6173 ]
  %6181 = load i64, i64* %RBP.i, align 8
  %6182 = add i64 %6181, -276
  %6183 = add i64 %6179, 6
  store i64 %6183, i64* %3, align 8
  %6184 = inttoptr i64 %6182 to i32*
  %6185 = load i32, i32* %6184, align 4
  %6186 = add i32 %6178, %6185
  %6187 = lshr i32 %6186, 31
  %6188 = add i32 %6186, 4
  %6189 = zext i32 %6188 to i64
  store i64 %6189, i64* %RDI.i126, align 8
  %6190 = icmp ugt i32 %6186, -5
  %6191 = zext i1 %6190 to i8
  store i8 %6191, i8* %14, align 1
  %6192 = and i32 %6188, 255
  %6193 = tail call i32 @llvm.ctpop.i32(i32 %6192)
  %6194 = trunc i32 %6193 to i8
  %6195 = and i8 %6194, 1
  %6196 = xor i8 %6195, 1
  store i8 %6196, i8* %21, align 1
  %6197 = xor i32 %6188, %6186
  %6198 = lshr i32 %6197, 4
  %6199 = trunc i32 %6198 to i8
  %6200 = and i8 %6199, 1
  store i8 %6200, i8* %27, align 1
  %6201 = icmp eq i32 %6188, 0
  %6202 = zext i1 %6201 to i8
  store i8 %6202, i8* %30, align 1
  %6203 = lshr i32 %6188, 31
  %6204 = trunc i32 %6203 to i8
  store i8 %6204, i8* %33, align 1
  %6205 = xor i32 %6203, %6187
  %6206 = add nuw nsw i32 %6205, %6203
  %6207 = icmp eq i32 %6206, 2
  %6208 = zext i1 %6207 to i8
  store i8 %6208, i8* %39, align 1
  %6209 = sext i32 %6188 to i64
  store i64 %6209, i64* %R8.i3546, align 8
  %6210 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %6211 = shl nsw i64 %6209, 3
  %6212 = add i64 %6210, %6211
  %6213 = add i64 %6179, 18
  store i64 %6213, i64* %3, align 8
  %6214 = inttoptr i64 %6212 to i64*
  %6215 = load i64, i64* %6214, align 8
  store i64 %6215, i64* %RCX.i4414.pre-phi, align 8
  %6216 = add i64 %6181, -8
  %6217 = add i64 %6179, 22
  store i64 %6217, i64* %3, align 8
  %6218 = inttoptr i64 %6216 to i64*
  %6219 = load i64, i64* %6218, align 8
  store i64 %6219, i64* %R8.i3546, align 8
  %6220 = add i64 %6219, 56
  %6221 = add i64 %6179, 26
  store i64 %6221, i64* %3, align 8
  %6222 = inttoptr i64 %6220 to i64*
  %6223 = load i64, i64* %6222, align 8
  store i64 %6223, i64* %R8.i3546, align 8
  %6224 = add i64 %6223, 6496
  %6225 = add i64 %6179, 33
  store i64 %6225, i64* %3, align 8
  %6226 = inttoptr i64 %6224 to i64*
  %6227 = load i64, i64* %6226, align 8
  store i64 %6227, i64* %R8.i3546, align 8
  %6228 = add i64 %6179, 36
  store i64 %6228, i64* %3, align 8
  %6229 = inttoptr i64 %6227 to i64*
  %6230 = load i64, i64* %6229, align 8
  store i64 %6230, i64* %R8.i3546, align 8
  %6231 = load i64, i64* %RBP.i, align 8
  %6232 = add i64 %6231, -12
  %6233 = add i64 %6179, 40
  store i64 %6233, i64* %3, align 8
  %6234 = inttoptr i64 %6232 to i32*
  %6235 = load i32, i32* %6234, align 4
  %6236 = sext i32 %6235 to i64
  store i64 %6236, i64* %R10.i2785, align 8
  %6237 = shl nsw i64 %6236, 3
  %6238 = add i64 %6237, %6230
  %6239 = add i64 %6179, 44
  store i64 %6239, i64* %3, align 8
  %6240 = inttoptr i64 %6238 to i64*
  %6241 = load i64, i64* %6240, align 8
  store i64 %6241, i64* %R8.i3546, align 8
  %6242 = add i64 %6231, -16
  %6243 = add i64 %6179, 48
  store i64 %6243, i64* %3, align 8
  %6244 = inttoptr i64 %6242 to i32*
  %6245 = load i32, i32* %6244, align 4
  %6246 = sext i32 %6245 to i64
  store i64 %6246, i64* %R10.i2785, align 8
  %6247 = shl nsw i64 %6246, 3
  %6248 = add i64 %6247, %6241
  %6249 = add i64 %6179, 52
  store i64 %6249, i64* %3, align 8
  %6250 = inttoptr i64 %6248 to i64*
  store i64 %6215, i64* %6250, align 8
  %6251 = load i64, i64* %RBP.i, align 8
  %6252 = add i64 %6251, -8
  %6253 = load i64, i64* %3, align 8
  %6254 = add i64 %6253, 4
  store i64 %6254, i64* %3, align 8
  %6255 = inttoptr i64 %6252 to i64*
  %6256 = load i64, i64* %6255, align 8
  store i64 %6256, i64* %RCX.i4414.pre-phi, align 8
  %6257 = add i64 %6256, 40
  %6258 = add i64 %6253, 8
  store i64 %6258, i64* %3, align 8
  %6259 = inttoptr i64 %6257 to i64*
  %6260 = load i64, i64* %6259, align 8
  store i64 %6260, i64* %RCX.i4414.pre-phi, align 8
  %6261 = add i64 %6260, 6496
  %6262 = add i64 %6253, 15
  store i64 %6262, i64* %3, align 8
  %6263 = inttoptr i64 %6261 to i64*
  %6264 = load i64, i64* %6263, align 8
  store i64 %6264, i64* %RCX.i4414.pre-phi, align 8
  %6265 = add i64 %6264, 40
  %6266 = add i64 %6253, 19
  store i64 %6266, i64* %3, align 8
  %6267 = inttoptr i64 %6265 to i64*
  %6268 = load i64, i64* %6267, align 8
  store i64 %6268, i64* %RCX.i4414.pre-phi, align 8
  %6269 = add i64 %6251, -12
  %6270 = add i64 %6253, 23
  store i64 %6270, i64* %3, align 8
  %6271 = inttoptr i64 %6269 to i32*
  %6272 = load i32, i32* %6271, align 4
  %6273 = sext i32 %6272 to i64
  store i64 %6273, i64* %R8.i3546, align 8
  %6274 = shl nsw i64 %6273, 3
  %6275 = add i64 %6274, %6268
  %6276 = add i64 %6253, 27
  store i64 %6276, i64* %3, align 8
  %6277 = inttoptr i64 %6275 to i64*
  %6278 = load i64, i64* %6277, align 8
  store i64 %6278, i64* %RCX.i4414.pre-phi, align 8
  %6279 = add i64 %6251, -16
  %6280 = add i64 %6253, 30
  store i64 %6280, i64* %3, align 8
  %6281 = inttoptr i64 %6279 to i32*
  %6282 = load i32, i32* %6281, align 4
  %6283 = zext i32 %6282 to i64
  store i64 %6283, i64* %RDX.i4411.pre-phi, align 8
  store i64 %6283, i64* %RAX.i186, align 8
  %6284 = sext i32 %6282 to i64
  %6285 = lshr i64 %6284, 32
  store i64 %6285, i64* %.pre-phi499, align 8
  %6286 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6287 = add i64 %6253, 35
  store i64 %6287, i64* %3, align 8
  %6288 = sext i32 %6286 to i64
  %6289 = shl nuw i64 %6285, 32
  %6290 = or i64 %6289, %6283
  %6291 = sdiv i64 %6290, %6288
  %6292 = shl i64 %6291, 32
  %6293 = ashr exact i64 %6292, 32
  %6294 = icmp eq i64 %6291, %6293
  br i1 %6294, label %6297, label %6295

; <label>:6295:                                   ; preds = %routine_idivl__esi.exit2811
  %6296 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6287, %struct.Memory* %6180)
  %.pre417 = load i64, i64* %RAX.i186, align 8
  %.pre418 = load i64, i64* %3, align 8
  %.pre419 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2744

; <label>:6297:                                   ; preds = %routine_idivl__esi.exit2811
  %6298 = srem i64 %6290, %6288
  %6299 = and i64 %6291, 4294967295
  store i64 %6299, i64* %RAX.i186, align 8
  %6300 = and i64 %6298, 4294967295
  store i64 %6300, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2744

routine_idivl__esi.exit2744:                      ; preds = %6297, %6295
  %6301 = phi i64 [ %.pre419, %6295 ], [ %6251, %6297 ]
  %6302 = phi i64 [ %.pre418, %6295 ], [ %6287, %6297 ]
  %6303 = phi i64 [ %.pre417, %6295 ], [ %6299, %6297 ]
  %6304 = phi %struct.Memory* [ %6296, %6295 ], [ %6180, %6297 ]
  %.tr116 = trunc i64 %6303 to i32
  %6305 = shl i32 %.tr116, 3
  %6306 = zext i32 %6305 to i64
  store i64 %6306, i64* %RAX.i186, align 8
  %6307 = lshr i64 %6303, 29
  %6308 = trunc i64 %6307 to i8
  %6309 = and i8 %6308, 1
  store i8 %6309, i8* %14, align 1
  %6310 = and i32 %6305, 248
  %6311 = tail call i32 @llvm.ctpop.i32(i32 %6310)
  %6312 = trunc i32 %6311 to i8
  %6313 = and i8 %6312, 1
  %6314 = xor i8 %6313, 1
  store i8 %6314, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6315 = icmp eq i32 %6305, 0
  %6316 = zext i1 %6315 to i8
  store i8 %6316, i8* %30, align 1
  %6317 = lshr i32 %.tr116, 28
  %6318 = trunc i32 %6317 to i8
  %6319 = and i8 %6318, 1
  store i8 %6319, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6320 = add i64 %6301, -16
  %6321 = add i64 %6302, 6
  store i64 %6321, i64* %3, align 8
  %6322 = inttoptr i64 %6320 to i32*
  %6323 = load i32, i32* %6322, align 4
  %6324 = zext i32 %6323 to i64
  store i64 %6324, i64* %RDI.i126, align 8
  %6325 = add i64 %6301, -280
  %6326 = add i64 %6302, 12
  store i64 %6326, i64* %3, align 8
  %6327 = inttoptr i64 %6325 to i32*
  store i32 %6305, i32* %6327, align 4
  %6328 = load i32, i32* %EDI.i3551, align 4
  %6329 = zext i32 %6328 to i64
  %6330 = load i64, i64* %3, align 8
  store i64 %6329, i64* %RAX.i186, align 8
  %6331 = sext i32 %6328 to i64
  %6332 = lshr i64 %6331, 32
  store i64 %6332, i64* %.pre-phi499, align 8
  %6333 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6334 = add i64 %6330, 5
  store i64 %6334, i64* %3, align 8
  %6335 = sext i32 %6333 to i64
  %6336 = shl nuw i64 %6332, 32
  %6337 = or i64 %6336, %6329
  %6338 = sdiv i64 %6337, %6335
  %6339 = shl i64 %6338, 32
  %6340 = ashr exact i64 %6339, 32
  %6341 = icmp eq i64 %6338, %6340
  br i1 %6341, label %6344, label %6342

; <label>:6342:                                   ; preds = %routine_idivl__esi.exit2744
  %6343 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6334, %struct.Memory* %6304)
  %.pre420 = load i64, i64* %3, align 8
  %.pre421 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2728

; <label>:6344:                                   ; preds = %routine_idivl__esi.exit2744
  %6345 = srem i64 %6337, %6335
  %6346 = and i64 %6338, 4294967295
  store i64 %6346, i64* %RAX.i186, align 8
  %6347 = and i64 %6345, 4294967295
  store i64 %6347, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6348 = trunc i64 %6345 to i32
  br label %routine_idivl__esi.exit2728

routine_idivl__esi.exit2728:                      ; preds = %6344, %6342
  %6349 = phi i32 [ %.pre421, %6342 ], [ %6348, %6344 ]
  %6350 = phi i64 [ %.pre420, %6342 ], [ %6334, %6344 ]
  %6351 = phi %struct.Memory* [ %6343, %6342 ], [ %6304, %6344 ]
  %6352 = load i64, i64* %RBP.i, align 8
  %6353 = add i64 %6352, -280
  %6354 = add i64 %6350, 6
  store i64 %6354, i64* %3, align 8
  %6355 = inttoptr i64 %6353 to i32*
  %6356 = load i32, i32* %6355, align 4
  %6357 = add i32 %6349, %6356
  %6358 = lshr i32 %6357, 31
  %6359 = add i32 %6357, 4
  %6360 = zext i32 %6359 to i64
  store i64 %6360, i64* %RDI.i126, align 8
  %6361 = icmp ugt i32 %6357, -5
  %6362 = zext i1 %6361 to i8
  store i8 %6362, i8* %14, align 1
  %6363 = and i32 %6359, 255
  %6364 = tail call i32 @llvm.ctpop.i32(i32 %6363)
  %6365 = trunc i32 %6364 to i8
  %6366 = and i8 %6365, 1
  %6367 = xor i8 %6366, 1
  store i8 %6367, i8* %21, align 1
  %6368 = xor i32 %6359, %6357
  %6369 = lshr i32 %6368, 4
  %6370 = trunc i32 %6369 to i8
  %6371 = and i8 %6370, 1
  store i8 %6371, i8* %27, align 1
  %6372 = icmp eq i32 %6359, 0
  %6373 = zext i1 %6372 to i8
  store i8 %6373, i8* %30, align 1
  %6374 = lshr i32 %6359, 31
  %6375 = trunc i32 %6374 to i8
  store i8 %6375, i8* %33, align 1
  %6376 = xor i32 %6374, %6358
  %6377 = add nuw nsw i32 %6376, %6374
  %6378 = icmp eq i32 %6377, 2
  %6379 = zext i1 %6378 to i8
  store i8 %6379, i8* %39, align 1
  %6380 = sext i32 %6359 to i64
  store i64 %6380, i64* %R8.i3546, align 8
  %6381 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %6382 = shl nsw i64 %6380, 3
  %6383 = add i64 %6381, %6382
  %6384 = add i64 %6350, 18
  store i64 %6384, i64* %3, align 8
  %6385 = inttoptr i64 %6383 to i64*
  %6386 = load i64, i64* %6385, align 8
  store i64 %6386, i64* %RCX.i4414.pre-phi, align 8
  %6387 = add i64 %6352, -8
  %6388 = add i64 %6350, 22
  store i64 %6388, i64* %3, align 8
  %6389 = inttoptr i64 %6387 to i64*
  %6390 = load i64, i64* %6389, align 8
  store i64 %6390, i64* %R8.i3546, align 8
  %6391 = add i64 %6390, 56
  %6392 = add i64 %6350, 26
  store i64 %6392, i64* %3, align 8
  %6393 = inttoptr i64 %6391 to i64*
  %6394 = load i64, i64* %6393, align 8
  store i64 %6394, i64* %R8.i3546, align 8
  %6395 = add i64 %6394, 6496
  %6396 = add i64 %6350, 33
  store i64 %6396, i64* %3, align 8
  %6397 = inttoptr i64 %6395 to i64*
  %6398 = load i64, i64* %6397, align 8
  store i64 %6398, i64* %R8.i3546, align 8
  %6399 = add i64 %6398, 8
  %6400 = add i64 %6350, 37
  store i64 %6400, i64* %3, align 8
  %6401 = inttoptr i64 %6399 to i64*
  %6402 = load i64, i64* %6401, align 8
  store i64 %6402, i64* %R8.i3546, align 8
  %6403 = load i64, i64* %RBP.i, align 8
  %6404 = add i64 %6403, -12
  %6405 = add i64 %6350, 41
  store i64 %6405, i64* %3, align 8
  %6406 = inttoptr i64 %6404 to i32*
  %6407 = load i32, i32* %6406, align 4
  %6408 = sext i32 %6407 to i64
  store i64 %6408, i64* %R10.i2785, align 8
  %6409 = shl nsw i64 %6408, 3
  %6410 = add i64 %6409, %6402
  %6411 = add i64 %6350, 45
  store i64 %6411, i64* %3, align 8
  %6412 = inttoptr i64 %6410 to i64*
  %6413 = load i64, i64* %6412, align 8
  store i64 %6413, i64* %R8.i3546, align 8
  %6414 = add i64 %6403, -16
  %6415 = add i64 %6350, 49
  store i64 %6415, i64* %3, align 8
  %6416 = inttoptr i64 %6414 to i32*
  %6417 = load i32, i32* %6416, align 4
  %6418 = sext i32 %6417 to i64
  store i64 %6418, i64* %R10.i2785, align 8
  %6419 = shl nsw i64 %6418, 3
  %6420 = add i64 %6419, %6413
  %6421 = add i64 %6350, 53
  store i64 %6421, i64* %3, align 8
  %6422 = inttoptr i64 %6420 to i64*
  store i64 %6386, i64* %6422, align 8
  %6423 = load i64, i64* %RBP.i, align 8
  %6424 = add i64 %6423, -8
  %6425 = load i64, i64* %3, align 8
  %6426 = add i64 %6425, 4
  store i64 %6426, i64* %3, align 8
  %6427 = inttoptr i64 %6424 to i64*
  %6428 = load i64, i64* %6427, align 8
  store i64 %6428, i64* %RCX.i4414.pre-phi, align 8
  %6429 = add i64 %6428, 40
  %6430 = add i64 %6425, 8
  store i64 %6430, i64* %3, align 8
  %6431 = inttoptr i64 %6429 to i64*
  %6432 = load i64, i64* %6431, align 8
  store i64 %6432, i64* %RCX.i4414.pre-phi, align 8
  %6433 = add i64 %6432, 6504
  %6434 = add i64 %6425, 15
  store i64 %6434, i64* %3, align 8
  %6435 = inttoptr i64 %6433 to i64*
  %6436 = load i64, i64* %6435, align 8
  store i64 %6436, i64* %RCX.i4414.pre-phi, align 8
  %6437 = add i64 %6425, 18
  store i64 %6437, i64* %3, align 8
  %6438 = inttoptr i64 %6436 to i64*
  %6439 = load i64, i64* %6438, align 8
  store i64 %6439, i64* %RCX.i4414.pre-phi, align 8
  %6440 = add i64 %6423, -12
  %6441 = add i64 %6425, 22
  store i64 %6441, i64* %3, align 8
  %6442 = inttoptr i64 %6440 to i32*
  %6443 = load i32, i32* %6442, align 4
  %6444 = sext i32 %6443 to i64
  store i64 %6444, i64* %R8.i3546, align 8
  %6445 = shl nsw i64 %6444, 3
  %6446 = add i64 %6445, %6439
  %6447 = add i64 %6425, 26
  store i64 %6447, i64* %3, align 8
  %6448 = inttoptr i64 %6446 to i64*
  %6449 = load i64, i64* %6448, align 8
  store i64 %6449, i64* %RCX.i4414.pre-phi, align 8
  %6450 = add i64 %6423, -16
  %6451 = add i64 %6425, 29
  store i64 %6451, i64* %3, align 8
  %6452 = inttoptr i64 %6450 to i32*
  %6453 = load i32, i32* %6452, align 4
  %6454 = zext i32 %6453 to i64
  store i64 %6454, i64* %RDX.i4411.pre-phi, align 8
  store i64 %6454, i64* %RAX.i186, align 8
  %6455 = sext i32 %6453 to i64
  %6456 = lshr i64 %6455, 32
  store i64 %6456, i64* %.pre-phi499, align 8
  %6457 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6458 = add i64 %6425, 34
  store i64 %6458, i64* %3, align 8
  %6459 = sext i32 %6457 to i64
  %6460 = shl nuw i64 %6456, 32
  %6461 = or i64 %6460, %6454
  %6462 = sdiv i64 %6461, %6459
  %6463 = shl i64 %6462, 32
  %6464 = ashr exact i64 %6463, 32
  %6465 = icmp eq i64 %6462, %6464
  br i1 %6465, label %6468, label %6466

; <label>:6466:                                   ; preds = %routine_idivl__esi.exit2728
  %6467 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6458, %struct.Memory* %6351)
  %.pre422 = load i64, i64* %RAX.i186, align 8
  %.pre423 = load i64, i64* %3, align 8
  %.pre424 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2664

; <label>:6468:                                   ; preds = %routine_idivl__esi.exit2728
  %6469 = srem i64 %6461, %6459
  %6470 = and i64 %6462, 4294967295
  store i64 %6470, i64* %RAX.i186, align 8
  %6471 = and i64 %6469, 4294967295
  store i64 %6471, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2664

routine_idivl__esi.exit2664:                      ; preds = %6468, %6466
  %6472 = phi i64 [ %.pre424, %6466 ], [ %6423, %6468 ]
  %6473 = phi i64 [ %.pre423, %6466 ], [ %6458, %6468 ]
  %6474 = phi i64 [ %.pre422, %6466 ], [ %6470, %6468 ]
  %6475 = phi %struct.Memory* [ %6467, %6466 ], [ %6351, %6468 ]
  %.tr119 = trunc i64 %6474 to i32
  %6476 = shl i32 %.tr119, 3
  %6477 = zext i32 %6476 to i64
  store i64 %6477, i64* %RAX.i186, align 8
  %6478 = lshr i64 %6474, 29
  %6479 = trunc i64 %6478 to i8
  %6480 = and i8 %6479, 1
  store i8 %6480, i8* %14, align 1
  %6481 = and i32 %6476, 248
  %6482 = tail call i32 @llvm.ctpop.i32(i32 %6481)
  %6483 = trunc i32 %6482 to i8
  %6484 = and i8 %6483, 1
  %6485 = xor i8 %6484, 1
  store i8 %6485, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6486 = icmp eq i32 %6476, 0
  %6487 = zext i1 %6486 to i8
  store i8 %6487, i8* %30, align 1
  %6488 = lshr i32 %.tr119, 28
  %6489 = trunc i32 %6488 to i8
  %6490 = and i8 %6489, 1
  store i8 %6490, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6491 = add i64 %6472, -16
  %6492 = add i64 %6473, 6
  store i64 %6492, i64* %3, align 8
  %6493 = inttoptr i64 %6491 to i32*
  %6494 = load i32, i32* %6493, align 4
  %6495 = zext i32 %6494 to i64
  store i64 %6495, i64* %RDI.i126, align 8
  %6496 = add i64 %6472, -284
  %6497 = add i64 %6473, 12
  store i64 %6497, i64* %3, align 8
  %6498 = inttoptr i64 %6496 to i32*
  store i32 %6476, i32* %6498, align 4
  %6499 = load i32, i32* %EDI.i3551, align 4
  %6500 = zext i32 %6499 to i64
  %6501 = load i64, i64* %3, align 8
  store i64 %6500, i64* %RAX.i186, align 8
  %6502 = sext i32 %6499 to i64
  %6503 = lshr i64 %6502, 32
  store i64 %6503, i64* %.pre-phi499, align 8
  %6504 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6505 = add i64 %6501, 5
  store i64 %6505, i64* %3, align 8
  %6506 = sext i32 %6504 to i64
  %6507 = shl nuw i64 %6503, 32
  %6508 = or i64 %6507, %6500
  %6509 = sdiv i64 %6508, %6506
  %6510 = shl i64 %6509, 32
  %6511 = ashr exact i64 %6510, 32
  %6512 = icmp eq i64 %6509, %6511
  br i1 %6512, label %6515, label %6513

; <label>:6513:                                   ; preds = %routine_idivl__esi.exit2664
  %6514 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6505, %struct.Memory* %6475)
  %.pre425 = load i64, i64* %3, align 8
  %.pre426 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2646

; <label>:6515:                                   ; preds = %routine_idivl__esi.exit2664
  %6516 = srem i64 %6508, %6506
  %6517 = and i64 %6509, 4294967295
  store i64 %6517, i64* %RAX.i186, align 8
  %6518 = and i64 %6516, 4294967295
  store i64 %6518, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6519 = trunc i64 %6516 to i32
  br label %routine_idivl__esi.exit2646

routine_idivl__esi.exit2646:                      ; preds = %6515, %6513
  %6520 = phi i32 [ %.pre426, %6513 ], [ %6519, %6515 ]
  %6521 = phi i64 [ %.pre425, %6513 ], [ %6505, %6515 ]
  %6522 = phi %struct.Memory* [ %6514, %6513 ], [ %6475, %6515 ]
  %6523 = load i64, i64* %RBP.i, align 8
  %6524 = add i64 %6523, -284
  %6525 = add i64 %6521, 6
  store i64 %6525, i64* %3, align 8
  %6526 = inttoptr i64 %6524 to i32*
  %6527 = load i32, i32* %6526, align 4
  %6528 = add i32 %6520, %6527
  %6529 = zext i32 %6528 to i64
  store i64 %6529, i64* %RDI.i126, align 8
  %6530 = icmp ult i32 %6528, %6527
  %6531 = icmp ult i32 %6528, %6520
  %6532 = or i1 %6530, %6531
  %6533 = zext i1 %6532 to i8
  store i8 %6533, i8* %14, align 1
  %6534 = and i32 %6528, 255
  %6535 = tail call i32 @llvm.ctpop.i32(i32 %6534)
  %6536 = trunc i32 %6535 to i8
  %6537 = and i8 %6536, 1
  %6538 = xor i8 %6537, 1
  store i8 %6538, i8* %21, align 1
  %6539 = xor i32 %6520, %6527
  %6540 = xor i32 %6539, %6528
  %6541 = lshr i32 %6540, 4
  %6542 = trunc i32 %6541 to i8
  %6543 = and i8 %6542, 1
  store i8 %6543, i8* %27, align 1
  %6544 = icmp eq i32 %6528, 0
  %6545 = zext i1 %6544 to i8
  store i8 %6545, i8* %30, align 1
  %6546 = lshr i32 %6528, 31
  %6547 = trunc i32 %6546 to i8
  store i8 %6547, i8* %33, align 1
  %6548 = lshr i32 %6527, 31
  %6549 = lshr i32 %6520, 31
  %6550 = xor i32 %6546, %6548
  %6551 = xor i32 %6546, %6549
  %6552 = add nuw nsw i32 %6550, %6551
  %6553 = icmp eq i32 %6552, 2
  %6554 = zext i1 %6553 to i8
  store i8 %6554, i8* %39, align 1
  %6555 = sext i32 %6528 to i64
  store i64 %6555, i64* %R8.i3546, align 8
  %6556 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %6557 = shl nsw i64 %6555, 3
  %6558 = add i64 %6556, %6557
  %6559 = add i64 %6521, 15
  store i64 %6559, i64* %3, align 8
  %6560 = inttoptr i64 %6558 to i64*
  %6561 = load i64, i64* %6560, align 8
  store i64 %6561, i64* %RCX.i4414.pre-phi, align 8
  %6562 = add i64 %6521, 19
  store i64 %6562, i64* %3, align 8
  %6563 = inttoptr i64 %6561 to i16*
  %6564 = load i16, i16* %6563, align 2
  store i16 %6564, i16* %R9W.i3301, align 2
  %6565 = add i64 %6523, -8
  %6566 = add i64 %6521, 23
  store i64 %6566, i64* %3, align 8
  %6567 = inttoptr i64 %6565 to i64*
  %6568 = load i64, i64* %6567, align 8
  store i64 %6568, i64* %RCX.i4414.pre-phi, align 8
  %6569 = add i64 %6568, 48
  %6570 = add i64 %6521, 27
  store i64 %6570, i64* %3, align 8
  %6571 = inttoptr i64 %6569 to i64*
  %6572 = load i64, i64* %6571, align 8
  store i64 %6572, i64* %RCX.i4414.pre-phi, align 8
  %6573 = add i64 %6572, 6504
  %6574 = add i64 %6521, 34
  store i64 %6574, i64* %3, align 8
  %6575 = inttoptr i64 %6573 to i64*
  %6576 = load i64, i64* %6575, align 8
  store i64 %6576, i64* %RCX.i4414.pre-phi, align 8
  %6577 = add i64 %6521, 37
  store i64 %6577, i64* %3, align 8
  %6578 = inttoptr i64 %6576 to i64*
  %6579 = load i64, i64* %6578, align 8
  store i64 %6579, i64* %RCX.i4414.pre-phi, align 8
  %6580 = add i64 %6523, -12
  %6581 = add i64 %6521, 41
  store i64 %6581, i64* %3, align 8
  %6582 = inttoptr i64 %6580 to i32*
  %6583 = load i32, i32* %6582, align 4
  %6584 = sext i32 %6583 to i64
  store i64 %6584, i64* %R8.i3546, align 8
  %6585 = shl nsw i64 %6584, 3
  %6586 = add i64 %6585, %6579
  %6587 = add i64 %6521, 45
  store i64 %6587, i64* %3, align 8
  %6588 = inttoptr i64 %6586 to i64*
  %6589 = load i64, i64* %6588, align 8
  store i64 %6589, i64* %RCX.i4414.pre-phi, align 8
  %6590 = add i64 %6523, -16
  %6591 = add i64 %6521, 49
  store i64 %6591, i64* %3, align 8
  %6592 = inttoptr i64 %6590 to i32*
  %6593 = load i32, i32* %6592, align 4
  %6594 = sext i32 %6593 to i64
  store i64 %6594, i64* %R8.i3546, align 8
  %6595 = shl nsw i64 %6594, 3
  %6596 = add i64 %6595, %6589
  %6597 = add i64 %6521, 53
  store i64 %6597, i64* %3, align 8
  %6598 = inttoptr i64 %6596 to i64*
  %6599 = load i64, i64* %6598, align 8
  store i64 %6599, i64* %RCX.i4414.pre-phi, align 8
  %6600 = add i64 %6521, 57
  store i64 %6600, i64* %3, align 8
  %6601 = inttoptr i64 %6599 to i16*
  store i16 %6564, i16* %6601, align 2
  %6602 = load i64, i64* %RBP.i, align 8
  %6603 = add i64 %6602, -8
  %6604 = load i64, i64* %3, align 8
  %6605 = add i64 %6604, 4
  store i64 %6605, i64* %3, align 8
  %6606 = inttoptr i64 %6603 to i64*
  %6607 = load i64, i64* %6606, align 8
  store i64 %6607, i64* %RCX.i4414.pre-phi, align 8
  %6608 = add i64 %6607, 40
  %6609 = add i64 %6604, 8
  store i64 %6609, i64* %3, align 8
  %6610 = inttoptr i64 %6608 to i64*
  %6611 = load i64, i64* %6610, align 8
  store i64 %6611, i64* %RCX.i4414.pre-phi, align 8
  %6612 = add i64 %6611, 6504
  %6613 = add i64 %6604, 15
  store i64 %6613, i64* %3, align 8
  %6614 = inttoptr i64 %6612 to i64*
  %6615 = load i64, i64* %6614, align 8
  store i64 %6615, i64* %RCX.i4414.pre-phi, align 8
  %6616 = add i64 %6604, 18
  store i64 %6616, i64* %3, align 8
  %6617 = inttoptr i64 %6615 to i64*
  %6618 = load i64, i64* %6617, align 8
  store i64 %6618, i64* %RCX.i4414.pre-phi, align 8
  %6619 = add i64 %6602, -12
  %6620 = add i64 %6604, 22
  store i64 %6620, i64* %3, align 8
  %6621 = inttoptr i64 %6619 to i32*
  %6622 = load i32, i32* %6621, align 4
  %6623 = sext i32 %6622 to i64
  store i64 %6623, i64* %R8.i3546, align 8
  %6624 = shl nsw i64 %6623, 3
  %6625 = add i64 %6624, %6618
  %6626 = add i64 %6604, 26
  store i64 %6626, i64* %3, align 8
  %6627 = inttoptr i64 %6625 to i64*
  %6628 = load i64, i64* %6627, align 8
  store i64 %6628, i64* %RCX.i4414.pre-phi, align 8
  %6629 = add i64 %6602, -16
  %6630 = add i64 %6604, 29
  store i64 %6630, i64* %3, align 8
  %6631 = inttoptr i64 %6629 to i32*
  %6632 = load i32, i32* %6631, align 4
  %6633 = zext i32 %6632 to i64
  store i64 %6633, i64* %RDX.i4411.pre-phi, align 8
  store i64 %6633, i64* %RAX.i186, align 8
  %6634 = sext i32 %6632 to i64
  %6635 = lshr i64 %6634, 32
  store i64 %6635, i64* %.pre-phi499, align 8
  %6636 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6637 = add i64 %6604, 34
  store i64 %6637, i64* %3, align 8
  %6638 = sext i32 %6636 to i64
  %6639 = shl nuw i64 %6635, 32
  %6640 = or i64 %6639, %6633
  %6641 = sdiv i64 %6640, %6638
  %6642 = shl i64 %6641, 32
  %6643 = ashr exact i64 %6642, 32
  %6644 = icmp eq i64 %6641, %6643
  br i1 %6644, label %6647, label %6645

; <label>:6645:                                   ; preds = %routine_idivl__esi.exit2646
  %6646 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6637, %struct.Memory* %6522)
  %.pre427 = load i64, i64* %RAX.i186, align 8
  %.pre428 = load i64, i64* %3, align 8
  %.pre429 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2580

; <label>:6647:                                   ; preds = %routine_idivl__esi.exit2646
  %6648 = srem i64 %6640, %6638
  %6649 = and i64 %6641, 4294967295
  store i64 %6649, i64* %RAX.i186, align 8
  %6650 = and i64 %6648, 4294967295
  store i64 %6650, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2580

routine_idivl__esi.exit2580:                      ; preds = %6647, %6645
  %6651 = phi i64 [ %.pre429, %6645 ], [ %6602, %6647 ]
  %6652 = phi i64 [ %.pre428, %6645 ], [ %6637, %6647 ]
  %6653 = phi i64 [ %.pre427, %6645 ], [ %6649, %6647 ]
  %6654 = phi %struct.Memory* [ %6646, %6645 ], [ %6522, %6647 ]
  %.tr122 = trunc i64 %6653 to i32
  %6655 = shl i32 %.tr122, 3
  %6656 = zext i32 %6655 to i64
  store i64 %6656, i64* %RAX.i186, align 8
  %6657 = lshr i64 %6653, 29
  %6658 = trunc i64 %6657 to i8
  %6659 = and i8 %6658, 1
  store i8 %6659, i8* %14, align 1
  %6660 = and i32 %6655, 248
  %6661 = tail call i32 @llvm.ctpop.i32(i32 %6660)
  %6662 = trunc i32 %6661 to i8
  %6663 = and i8 %6662, 1
  %6664 = xor i8 %6663, 1
  store i8 %6664, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6665 = icmp eq i32 %6655, 0
  %6666 = zext i1 %6665 to i8
  store i8 %6666, i8* %30, align 1
  %6667 = lshr i32 %.tr122, 28
  %6668 = trunc i32 %6667 to i8
  %6669 = and i8 %6668, 1
  store i8 %6669, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6670 = add i64 %6651, -16
  %6671 = add i64 %6652, 6
  store i64 %6671, i64* %3, align 8
  %6672 = inttoptr i64 %6670 to i32*
  %6673 = load i32, i32* %6672, align 4
  %6674 = zext i32 %6673 to i64
  store i64 %6674, i64* %RDI.i126, align 8
  %6675 = add i64 %6651, -288
  %6676 = add i64 %6652, 12
  store i64 %6676, i64* %3, align 8
  %6677 = inttoptr i64 %6675 to i32*
  store i32 %6655, i32* %6677, align 4
  %6678 = load i32, i32* %EDI.i3551, align 4
  %6679 = zext i32 %6678 to i64
  %6680 = load i64, i64* %3, align 8
  store i64 %6679, i64* %RAX.i186, align 8
  %6681 = sext i32 %6678 to i64
  %6682 = lshr i64 %6681, 32
  store i64 %6682, i64* %.pre-phi499, align 8
  %6683 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6684 = add i64 %6680, 5
  store i64 %6684, i64* %3, align 8
  %6685 = sext i32 %6683 to i64
  %6686 = shl nuw i64 %6682, 32
  %6687 = or i64 %6686, %6679
  %6688 = sdiv i64 %6687, %6685
  %6689 = shl i64 %6688, 32
  %6690 = ashr exact i64 %6689, 32
  %6691 = icmp eq i64 %6688, %6690
  br i1 %6691, label %6694, label %6692

; <label>:6692:                                   ; preds = %routine_idivl__esi.exit2580
  %6693 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6684, %struct.Memory* %6654)
  %.pre430 = load i64, i64* %3, align 8
  %.pre431 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2563

; <label>:6694:                                   ; preds = %routine_idivl__esi.exit2580
  %6695 = srem i64 %6687, %6685
  %6696 = and i64 %6688, 4294967295
  store i64 %6696, i64* %RAX.i186, align 8
  %6697 = and i64 %6695, 4294967295
  store i64 %6697, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6698 = trunc i64 %6695 to i32
  br label %routine_idivl__esi.exit2563

routine_idivl__esi.exit2563:                      ; preds = %6694, %6692
  %6699 = phi i32 [ %.pre431, %6692 ], [ %6698, %6694 ]
  %6700 = phi i64 [ %.pre430, %6692 ], [ %6684, %6694 ]
  %6701 = phi %struct.Memory* [ %6693, %6692 ], [ %6654, %6694 ]
  %6702 = load i64, i64* %RBP.i, align 8
  %6703 = add i64 %6702, -288
  %6704 = add i64 %6700, 6
  store i64 %6704, i64* %3, align 8
  %6705 = inttoptr i64 %6703 to i32*
  %6706 = load i32, i32* %6705, align 4
  %6707 = add i32 %6699, %6706
  %6708 = zext i32 %6707 to i64
  store i64 %6708, i64* %RDI.i126, align 8
  %6709 = icmp ult i32 %6707, %6706
  %6710 = icmp ult i32 %6707, %6699
  %6711 = or i1 %6709, %6710
  %6712 = zext i1 %6711 to i8
  store i8 %6712, i8* %14, align 1
  %6713 = and i32 %6707, 255
  %6714 = tail call i32 @llvm.ctpop.i32(i32 %6713)
  %6715 = trunc i32 %6714 to i8
  %6716 = and i8 %6715, 1
  %6717 = xor i8 %6716, 1
  store i8 %6717, i8* %21, align 1
  %6718 = xor i32 %6699, %6706
  %6719 = xor i32 %6718, %6707
  %6720 = lshr i32 %6719, 4
  %6721 = trunc i32 %6720 to i8
  %6722 = and i8 %6721, 1
  store i8 %6722, i8* %27, align 1
  %6723 = icmp eq i32 %6707, 0
  %6724 = zext i1 %6723 to i8
  store i8 %6724, i8* %30, align 1
  %6725 = lshr i32 %6707, 31
  %6726 = trunc i32 %6725 to i8
  store i8 %6726, i8* %33, align 1
  %6727 = lshr i32 %6706, 31
  %6728 = lshr i32 %6699, 31
  %6729 = xor i32 %6725, %6727
  %6730 = xor i32 %6725, %6728
  %6731 = add nuw nsw i32 %6729, %6730
  %6732 = icmp eq i32 %6731, 2
  %6733 = zext i1 %6732 to i8
  store i8 %6733, i8* %39, align 1
  %6734 = sext i32 %6707 to i64
  store i64 %6734, i64* %R8.i3546, align 8
  %6735 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %6736 = shl nsw i64 %6734, 3
  %6737 = add i64 %6735, %6736
  %6738 = add i64 %6700, 15
  store i64 %6738, i64* %3, align 8
  %6739 = inttoptr i64 %6737 to i64*
  %6740 = load i64, i64* %6739, align 8
  store i64 %6740, i64* %RCX.i4414.pre-phi, align 8
  %6741 = add i64 %6740, 2
  %6742 = add i64 %6700, 20
  store i64 %6742, i64* %3, align 8
  %6743 = inttoptr i64 %6741 to i16*
  %6744 = load i16, i16* %6743, align 2
  store i16 %6744, i16* %R9W.i3301, align 2
  %6745 = add i64 %6702, -8
  %6746 = add i64 %6700, 24
  store i64 %6746, i64* %3, align 8
  %6747 = inttoptr i64 %6745 to i64*
  %6748 = load i64, i64* %6747, align 8
  store i64 %6748, i64* %RCX.i4414.pre-phi, align 8
  %6749 = add i64 %6748, 48
  %6750 = add i64 %6700, 28
  store i64 %6750, i64* %3, align 8
  %6751 = inttoptr i64 %6749 to i64*
  %6752 = load i64, i64* %6751, align 8
  store i64 %6752, i64* %RCX.i4414.pre-phi, align 8
  %6753 = add i64 %6752, 6504
  %6754 = add i64 %6700, 35
  store i64 %6754, i64* %3, align 8
  %6755 = inttoptr i64 %6753 to i64*
  %6756 = load i64, i64* %6755, align 8
  store i64 %6756, i64* %RCX.i4414.pre-phi, align 8
  %6757 = add i64 %6700, 38
  store i64 %6757, i64* %3, align 8
  %6758 = inttoptr i64 %6756 to i64*
  %6759 = load i64, i64* %6758, align 8
  store i64 %6759, i64* %RCX.i4414.pre-phi, align 8
  %6760 = add i64 %6702, -12
  %6761 = add i64 %6700, 42
  store i64 %6761, i64* %3, align 8
  %6762 = inttoptr i64 %6760 to i32*
  %6763 = load i32, i32* %6762, align 4
  %6764 = sext i32 %6763 to i64
  store i64 %6764, i64* %R8.i3546, align 8
  %6765 = shl nsw i64 %6764, 3
  %6766 = add i64 %6765, %6759
  %6767 = add i64 %6700, 46
  store i64 %6767, i64* %3, align 8
  %6768 = inttoptr i64 %6766 to i64*
  %6769 = load i64, i64* %6768, align 8
  store i64 %6769, i64* %RCX.i4414.pre-phi, align 8
  %6770 = load i64, i64* %RBP.i, align 8
  %6771 = add i64 %6770, -16
  %6772 = add i64 %6700, 50
  store i64 %6772, i64* %3, align 8
  %6773 = inttoptr i64 %6771 to i32*
  %6774 = load i32, i32* %6773, align 4
  %6775 = sext i32 %6774 to i64
  store i64 %6775, i64* %R8.i3546, align 8
  %6776 = shl nsw i64 %6775, 3
  %6777 = add i64 %6776, %6769
  %6778 = add i64 %6700, 54
  store i64 %6778, i64* %3, align 8
  %6779 = inttoptr i64 %6777 to i64*
  %6780 = load i64, i64* %6779, align 8
  store i64 %6780, i64* %RCX.i4414.pre-phi, align 8
  %6781 = add i64 %6780, 2
  %6782 = add i64 %6700, 59
  store i64 %6782, i64* %3, align 8
  %6783 = inttoptr i64 %6781 to i16*
  store i16 %6744, i16* %6783, align 2
  %6784 = load i64, i64* %RBP.i, align 8
  %6785 = add i64 %6784, -8
  %6786 = load i64, i64* %3, align 8
  %6787 = add i64 %6786, 4
  store i64 %6787, i64* %3, align 8
  %6788 = inttoptr i64 %6785 to i64*
  %6789 = load i64, i64* %6788, align 8
  store i64 %6789, i64* %RCX.i4414.pre-phi, align 8
  %6790 = add i64 %6789, 40
  %6791 = add i64 %6786, 8
  store i64 %6791, i64* %3, align 8
  %6792 = inttoptr i64 %6790 to i64*
  %6793 = load i64, i64* %6792, align 8
  store i64 %6793, i64* %RCX.i4414.pre-phi, align 8
  %6794 = add i64 %6793, 6504
  %6795 = add i64 %6786, 15
  store i64 %6795, i64* %3, align 8
  %6796 = inttoptr i64 %6794 to i64*
  %6797 = load i64, i64* %6796, align 8
  store i64 %6797, i64* %RCX.i4414.pre-phi, align 8
  %6798 = add i64 %6797, 8
  %6799 = add i64 %6786, 19
  store i64 %6799, i64* %3, align 8
  %6800 = inttoptr i64 %6798 to i64*
  %6801 = load i64, i64* %6800, align 8
  store i64 %6801, i64* %RCX.i4414.pre-phi, align 8
  %6802 = add i64 %6784, -12
  %6803 = add i64 %6786, 23
  store i64 %6803, i64* %3, align 8
  %6804 = inttoptr i64 %6802 to i32*
  %6805 = load i32, i32* %6804, align 4
  %6806 = sext i32 %6805 to i64
  store i64 %6806, i64* %R8.i3546, align 8
  %6807 = shl nsw i64 %6806, 3
  %6808 = add i64 %6807, %6801
  %6809 = add i64 %6786, 27
  store i64 %6809, i64* %3, align 8
  %6810 = inttoptr i64 %6808 to i64*
  %6811 = load i64, i64* %6810, align 8
  store i64 %6811, i64* %RCX.i4414.pre-phi, align 8
  %6812 = add i64 %6784, -16
  %6813 = add i64 %6786, 30
  store i64 %6813, i64* %3, align 8
  %6814 = inttoptr i64 %6812 to i32*
  %6815 = load i32, i32* %6814, align 4
  %6816 = zext i32 %6815 to i64
  store i64 %6816, i64* %RDX.i4411.pre-phi, align 8
  store i64 %6816, i64* %RAX.i186, align 8
  %6817 = sext i32 %6815 to i64
  %6818 = lshr i64 %6817, 32
  store i64 %6818, i64* %.pre-phi499, align 8
  %6819 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6820 = add i64 %6786, 35
  store i64 %6820, i64* %3, align 8
  %6821 = sext i32 %6819 to i64
  %6822 = shl nuw i64 %6818, 32
  %6823 = or i64 %6822, %6816
  %6824 = sdiv i64 %6823, %6821
  %6825 = shl i64 %6824, 32
  %6826 = ashr exact i64 %6825, 32
  %6827 = icmp eq i64 %6824, %6826
  br i1 %6827, label %6830, label %6828

; <label>:6828:                                   ; preds = %routine_idivl__esi.exit2563
  %6829 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6820, %struct.Memory* %6701)
  %.pre432 = load i64, i64* %RAX.i186, align 8
  %.pre433 = load i64, i64* %3, align 8
  %.pre434 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2497

; <label>:6830:                                   ; preds = %routine_idivl__esi.exit2563
  %6831 = srem i64 %6823, %6821
  %6832 = and i64 %6824, 4294967295
  store i64 %6832, i64* %RAX.i186, align 8
  %6833 = and i64 %6831, 4294967295
  store i64 %6833, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2497

routine_idivl__esi.exit2497:                      ; preds = %6830, %6828
  %6834 = phi i64 [ %.pre434, %6828 ], [ %6784, %6830 ]
  %6835 = phi i64 [ %.pre433, %6828 ], [ %6820, %6830 ]
  %6836 = phi i64 [ %.pre432, %6828 ], [ %6832, %6830 ]
  %6837 = phi %struct.Memory* [ %6829, %6828 ], [ %6701, %6830 ]
  %.tr125 = trunc i64 %6836 to i32
  %6838 = shl i32 %.tr125, 3
  %6839 = zext i32 %6838 to i64
  store i64 %6839, i64* %RAX.i186, align 8
  %6840 = lshr i64 %6836, 29
  %6841 = trunc i64 %6840 to i8
  %6842 = and i8 %6841, 1
  store i8 %6842, i8* %14, align 1
  %6843 = and i32 %6838, 248
  %6844 = tail call i32 @llvm.ctpop.i32(i32 %6843)
  %6845 = trunc i32 %6844 to i8
  %6846 = and i8 %6845, 1
  %6847 = xor i8 %6846, 1
  store i8 %6847, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %6848 = icmp eq i32 %6838, 0
  %6849 = zext i1 %6848 to i8
  store i8 %6849, i8* %30, align 1
  %6850 = lshr i32 %.tr125, 28
  %6851 = trunc i32 %6850 to i8
  %6852 = and i8 %6851, 1
  store i8 %6852, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6853 = add i64 %6834, -16
  %6854 = add i64 %6835, 6
  store i64 %6854, i64* %3, align 8
  %6855 = inttoptr i64 %6853 to i32*
  %6856 = load i32, i32* %6855, align 4
  %6857 = zext i32 %6856 to i64
  store i64 %6857, i64* %RDI.i126, align 8
  %6858 = add i64 %6834, -292
  %6859 = add i64 %6835, 12
  store i64 %6859, i64* %3, align 8
  %6860 = inttoptr i64 %6858 to i32*
  store i32 %6838, i32* %6860, align 4
  %6861 = load i32, i32* %EDI.i3551, align 4
  %6862 = zext i32 %6861 to i64
  %6863 = load i64, i64* %3, align 8
  store i64 %6862, i64* %RAX.i186, align 8
  %6864 = sext i32 %6861 to i64
  %6865 = lshr i64 %6864, 32
  store i64 %6865, i64* %.pre-phi499, align 8
  %6866 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %6867 = add i64 %6863, 5
  store i64 %6867, i64* %3, align 8
  %6868 = sext i32 %6866 to i64
  %6869 = shl nuw i64 %6865, 32
  %6870 = or i64 %6869, %6862
  %6871 = sdiv i64 %6870, %6868
  %6872 = shl i64 %6871, 32
  %6873 = ashr exact i64 %6872, 32
  %6874 = icmp eq i64 %6871, %6873
  br i1 %6874, label %6877, label %6875

; <label>:6875:                                   ; preds = %routine_idivl__esi.exit2497
  %6876 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6867, %struct.Memory* %6837)
  %.pre435 = load i64, i64* %3, align 8
  %.pre436 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2480

; <label>:6877:                                   ; preds = %routine_idivl__esi.exit2497
  %6878 = srem i64 %6870, %6868
  %6879 = and i64 %6871, 4294967295
  store i64 %6879, i64* %RAX.i186, align 8
  %6880 = and i64 %6878, 4294967295
  store i64 %6880, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %6881 = trunc i64 %6878 to i32
  br label %routine_idivl__esi.exit2480

routine_idivl__esi.exit2480:                      ; preds = %6877, %6875
  %6882 = phi i32 [ %.pre436, %6875 ], [ %6881, %6877 ]
  %6883 = phi i64 [ %.pre435, %6875 ], [ %6867, %6877 ]
  %6884 = phi %struct.Memory* [ %6876, %6875 ], [ %6837, %6877 ]
  %6885 = load i64, i64* %RBP.i, align 8
  %6886 = add i64 %6885, -292
  %6887 = add i64 %6883, 6
  store i64 %6887, i64* %3, align 8
  %6888 = inttoptr i64 %6886 to i32*
  %6889 = load i32, i32* %6888, align 4
  %6890 = add i32 %6882, %6889
  %6891 = zext i32 %6890 to i64
  store i64 %6891, i64* %RDI.i126, align 8
  %6892 = icmp ult i32 %6890, %6889
  %6893 = icmp ult i32 %6890, %6882
  %6894 = or i1 %6892, %6893
  %6895 = zext i1 %6894 to i8
  store i8 %6895, i8* %14, align 1
  %6896 = and i32 %6890, 255
  %6897 = tail call i32 @llvm.ctpop.i32(i32 %6896)
  %6898 = trunc i32 %6897 to i8
  %6899 = and i8 %6898, 1
  %6900 = xor i8 %6899, 1
  store i8 %6900, i8* %21, align 1
  %6901 = xor i32 %6882, %6889
  %6902 = xor i32 %6901, %6890
  %6903 = lshr i32 %6902, 4
  %6904 = trunc i32 %6903 to i8
  %6905 = and i8 %6904, 1
  store i8 %6905, i8* %27, align 1
  %6906 = icmp eq i32 %6890, 0
  %6907 = zext i1 %6906 to i8
  store i8 %6907, i8* %30, align 1
  %6908 = lshr i32 %6890, 31
  %6909 = trunc i32 %6908 to i8
  store i8 %6909, i8* %33, align 1
  %6910 = lshr i32 %6889, 31
  %6911 = lshr i32 %6882, 31
  %6912 = xor i32 %6908, %6910
  %6913 = xor i32 %6908, %6911
  %6914 = add nuw nsw i32 %6912, %6913
  %6915 = icmp eq i32 %6914, 2
  %6916 = zext i1 %6915 to i8
  store i8 %6916, i8* %39, align 1
  %6917 = sext i32 %6890 to i64
  store i64 %6917, i64* %R8.i3546, align 8
  %6918 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %6919 = shl nsw i64 %6917, 3
  %6920 = add i64 %6918, %6919
  %6921 = add i64 %6883, 15
  store i64 %6921, i64* %3, align 8
  %6922 = inttoptr i64 %6920 to i64*
  %6923 = load i64, i64* %6922, align 8
  store i64 %6923, i64* %RCX.i4414.pre-phi, align 8
  %6924 = add i64 %6883, 19
  store i64 %6924, i64* %3, align 8
  %6925 = inttoptr i64 %6923 to i16*
  %6926 = load i16, i16* %6925, align 2
  store i16 %6926, i16* %R9W.i3301, align 2
  %6927 = add i64 %6885, -8
  %6928 = add i64 %6883, 23
  store i64 %6928, i64* %3, align 8
  %6929 = inttoptr i64 %6927 to i64*
  %6930 = load i64, i64* %6929, align 8
  store i64 %6930, i64* %RCX.i4414.pre-phi, align 8
  %6931 = add i64 %6930, 48
  %6932 = add i64 %6883, 27
  store i64 %6932, i64* %3, align 8
  %6933 = inttoptr i64 %6931 to i64*
  %6934 = load i64, i64* %6933, align 8
  store i64 %6934, i64* %RCX.i4414.pre-phi, align 8
  %6935 = add i64 %6934, 6504
  %6936 = add i64 %6883, 34
  store i64 %6936, i64* %3, align 8
  %6937 = inttoptr i64 %6935 to i64*
  %6938 = load i64, i64* %6937, align 8
  store i64 %6938, i64* %RCX.i4414.pre-phi, align 8
  %6939 = add i64 %6938, 8
  %6940 = add i64 %6883, 38
  store i64 %6940, i64* %3, align 8
  %6941 = inttoptr i64 %6939 to i64*
  %6942 = load i64, i64* %6941, align 8
  store i64 %6942, i64* %RCX.i4414.pre-phi, align 8
  %6943 = add i64 %6885, -12
  %6944 = add i64 %6883, 42
  store i64 %6944, i64* %3, align 8
  %6945 = inttoptr i64 %6943 to i32*
  %6946 = load i32, i32* %6945, align 4
  %6947 = sext i32 %6946 to i64
  store i64 %6947, i64* %R8.i3546, align 8
  %6948 = shl nsw i64 %6947, 3
  %6949 = add i64 %6948, %6942
  %6950 = add i64 %6883, 46
  store i64 %6950, i64* %3, align 8
  %6951 = inttoptr i64 %6949 to i64*
  %6952 = load i64, i64* %6951, align 8
  store i64 %6952, i64* %RCX.i4414.pre-phi, align 8
  %6953 = load i64, i64* %RBP.i, align 8
  %6954 = add i64 %6953, -16
  %6955 = add i64 %6883, 50
  store i64 %6955, i64* %3, align 8
  %6956 = inttoptr i64 %6954 to i32*
  %6957 = load i32, i32* %6956, align 4
  %6958 = sext i32 %6957 to i64
  store i64 %6958, i64* %R8.i3546, align 8
  %6959 = shl nsw i64 %6958, 3
  %6960 = add i64 %6959, %6952
  %6961 = add i64 %6883, 54
  store i64 %6961, i64* %3, align 8
  %6962 = inttoptr i64 %6960 to i64*
  %6963 = load i64, i64* %6962, align 8
  store i64 %6963, i64* %RCX.i4414.pre-phi, align 8
  %6964 = add i64 %6883, 58
  store i64 %6964, i64* %3, align 8
  %6965 = inttoptr i64 %6963 to i16*
  store i16 %6926, i16* %6965, align 2
  %6966 = load i64, i64* %RBP.i, align 8
  %6967 = add i64 %6966, -8
  %6968 = load i64, i64* %3, align 8
  %6969 = add i64 %6968, 4
  store i64 %6969, i64* %3, align 8
  %6970 = inttoptr i64 %6967 to i64*
  %6971 = load i64, i64* %6970, align 8
  store i64 %6971, i64* %RCX.i4414.pre-phi, align 8
  %6972 = add i64 %6971, 40
  %6973 = add i64 %6968, 8
  store i64 %6973, i64* %3, align 8
  %6974 = inttoptr i64 %6972 to i64*
  %6975 = load i64, i64* %6974, align 8
  store i64 %6975, i64* %RCX.i4414.pre-phi, align 8
  %6976 = add i64 %6975, 6504
  %6977 = add i64 %6968, 15
  store i64 %6977, i64* %3, align 8
  %6978 = inttoptr i64 %6976 to i64*
  %6979 = load i64, i64* %6978, align 8
  store i64 %6979, i64* %RCX.i4414.pre-phi, align 8
  %6980 = add i64 %6979, 8
  %6981 = add i64 %6968, 19
  store i64 %6981, i64* %3, align 8
  %6982 = inttoptr i64 %6980 to i64*
  %6983 = load i64, i64* %6982, align 8
  store i64 %6983, i64* %RCX.i4414.pre-phi, align 8
  %6984 = add i64 %6966, -12
  %6985 = add i64 %6968, 23
  store i64 %6985, i64* %3, align 8
  %6986 = inttoptr i64 %6984 to i32*
  %6987 = load i32, i32* %6986, align 4
  %6988 = sext i32 %6987 to i64
  store i64 %6988, i64* %R8.i3546, align 8
  %6989 = shl nsw i64 %6988, 3
  %6990 = add i64 %6989, %6983
  %6991 = add i64 %6968, 27
  store i64 %6991, i64* %3, align 8
  %6992 = inttoptr i64 %6990 to i64*
  %6993 = load i64, i64* %6992, align 8
  store i64 %6993, i64* %RCX.i4414.pre-phi, align 8
  %6994 = add i64 %6966, -16
  %6995 = add i64 %6968, 30
  store i64 %6995, i64* %3, align 8
  %6996 = inttoptr i64 %6994 to i32*
  %6997 = load i32, i32* %6996, align 4
  %6998 = zext i32 %6997 to i64
  store i64 %6998, i64* %RDX.i4411.pre-phi, align 8
  store i64 %6998, i64* %RAX.i186, align 8
  %6999 = sext i32 %6997 to i64
  %7000 = lshr i64 %6999, 32
  store i64 %7000, i64* %.pre-phi499, align 8
  %7001 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7002 = add i64 %6968, 35
  store i64 %7002, i64* %3, align 8
  %7003 = sext i32 %7001 to i64
  %7004 = shl nuw i64 %7000, 32
  %7005 = or i64 %7004, %6998
  %7006 = sdiv i64 %7005, %7003
  %7007 = shl i64 %7006, 32
  %7008 = ashr exact i64 %7007, 32
  %7009 = icmp eq i64 %7006, %7008
  br i1 %7009, label %7012, label %7010

; <label>:7010:                                   ; preds = %routine_idivl__esi.exit2480
  %7011 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7002, %struct.Memory* %6884)
  %.pre437 = load i64, i64* %RAX.i186, align 8
  %.pre438 = load i64, i64* %3, align 8
  %.pre439 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2414

; <label>:7012:                                   ; preds = %routine_idivl__esi.exit2480
  %7013 = srem i64 %7005, %7003
  %7014 = and i64 %7006, 4294967295
  store i64 %7014, i64* %RAX.i186, align 8
  %7015 = and i64 %7013, 4294967295
  store i64 %7015, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2414

routine_idivl__esi.exit2414:                      ; preds = %7012, %7010
  %7016 = phi i64 [ %.pre439, %7010 ], [ %6966, %7012 ]
  %7017 = phi i64 [ %.pre438, %7010 ], [ %7002, %7012 ]
  %7018 = phi i64 [ %.pre437, %7010 ], [ %7014, %7012 ]
  %7019 = phi %struct.Memory* [ %7011, %7010 ], [ %6884, %7012 ]
  %.tr128 = trunc i64 %7018 to i32
  %7020 = shl i32 %.tr128, 3
  %7021 = zext i32 %7020 to i64
  store i64 %7021, i64* %RAX.i186, align 8
  %7022 = lshr i64 %7018, 29
  %7023 = trunc i64 %7022 to i8
  %7024 = and i8 %7023, 1
  store i8 %7024, i8* %14, align 1
  %7025 = and i32 %7020, 248
  %7026 = tail call i32 @llvm.ctpop.i32(i32 %7025)
  %7027 = trunc i32 %7026 to i8
  %7028 = and i8 %7027, 1
  %7029 = xor i8 %7028, 1
  store i8 %7029, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7030 = icmp eq i32 %7020, 0
  %7031 = zext i1 %7030 to i8
  store i8 %7031, i8* %30, align 1
  %7032 = lshr i32 %.tr128, 28
  %7033 = trunc i32 %7032 to i8
  %7034 = and i8 %7033, 1
  store i8 %7034, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7035 = add i64 %7016, -16
  %7036 = add i64 %7017, 6
  store i64 %7036, i64* %3, align 8
  %7037 = inttoptr i64 %7035 to i32*
  %7038 = load i32, i32* %7037, align 4
  %7039 = zext i32 %7038 to i64
  store i64 %7039, i64* %RDI.i126, align 8
  %7040 = add i64 %7016, -296
  %7041 = add i64 %7017, 12
  store i64 %7041, i64* %3, align 8
  %7042 = inttoptr i64 %7040 to i32*
  store i32 %7020, i32* %7042, align 4
  %7043 = load i32, i32* %EDI.i3551, align 4
  %7044 = zext i32 %7043 to i64
  %7045 = load i64, i64* %3, align 8
  store i64 %7044, i64* %RAX.i186, align 8
  %7046 = sext i32 %7043 to i64
  %7047 = lshr i64 %7046, 32
  store i64 %7047, i64* %.pre-phi499, align 8
  %7048 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7049 = add i64 %7045, 5
  store i64 %7049, i64* %3, align 8
  %7050 = sext i32 %7048 to i64
  %7051 = shl nuw i64 %7047, 32
  %7052 = or i64 %7051, %7044
  %7053 = sdiv i64 %7052, %7050
  %7054 = shl i64 %7053, 32
  %7055 = ashr exact i64 %7054, 32
  %7056 = icmp eq i64 %7053, %7055
  br i1 %7056, label %7059, label %7057

; <label>:7057:                                   ; preds = %routine_idivl__esi.exit2414
  %7058 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7049, %struct.Memory* %7019)
  %.pre440 = load i64, i64* %3, align 8
  %.pre441 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2394

; <label>:7059:                                   ; preds = %routine_idivl__esi.exit2414
  %7060 = srem i64 %7052, %7050
  %7061 = and i64 %7053, 4294967295
  store i64 %7061, i64* %RAX.i186, align 8
  %7062 = and i64 %7060, 4294967295
  store i64 %7062, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7063 = trunc i64 %7060 to i32
  br label %routine_idivl__esi.exit2394

routine_idivl__esi.exit2394:                      ; preds = %7059, %7057
  %7064 = phi i32 [ %.pre441, %7057 ], [ %7063, %7059 ]
  %7065 = phi i64 [ %.pre440, %7057 ], [ %7049, %7059 ]
  %7066 = phi %struct.Memory* [ %7058, %7057 ], [ %7019, %7059 ]
  %7067 = load i64, i64* %RBP.i, align 8
  %7068 = add i64 %7067, -296
  %7069 = add i64 %7065, 6
  store i64 %7069, i64* %3, align 8
  %7070 = inttoptr i64 %7068 to i32*
  %7071 = load i32, i32* %7070, align 4
  %7072 = add i32 %7064, %7071
  %7073 = zext i32 %7072 to i64
  store i64 %7073, i64* %RDI.i126, align 8
  %7074 = icmp ult i32 %7072, %7071
  %7075 = icmp ult i32 %7072, %7064
  %7076 = or i1 %7074, %7075
  %7077 = zext i1 %7076 to i8
  store i8 %7077, i8* %14, align 1
  %7078 = and i32 %7072, 255
  %7079 = tail call i32 @llvm.ctpop.i32(i32 %7078)
  %7080 = trunc i32 %7079 to i8
  %7081 = and i8 %7080, 1
  %7082 = xor i8 %7081, 1
  store i8 %7082, i8* %21, align 1
  %7083 = xor i32 %7064, %7071
  %7084 = xor i32 %7083, %7072
  %7085 = lshr i32 %7084, 4
  %7086 = trunc i32 %7085 to i8
  %7087 = and i8 %7086, 1
  store i8 %7087, i8* %27, align 1
  %7088 = icmp eq i32 %7072, 0
  %7089 = zext i1 %7088 to i8
  store i8 %7089, i8* %30, align 1
  %7090 = lshr i32 %7072, 31
  %7091 = trunc i32 %7090 to i8
  store i8 %7091, i8* %33, align 1
  %7092 = lshr i32 %7071, 31
  %7093 = lshr i32 %7064, 31
  %7094 = xor i32 %7090, %7092
  %7095 = xor i32 %7090, %7093
  %7096 = add nuw nsw i32 %7094, %7095
  %7097 = icmp eq i32 %7096, 2
  %7098 = zext i1 %7097 to i8
  store i8 %7098, i8* %39, align 1
  %7099 = sext i32 %7072 to i64
  store i64 %7099, i64* %R8.i3546, align 8
  %7100 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %7101 = shl nsw i64 %7099, 3
  %7102 = add i64 %7100, %7101
  %7103 = add i64 %7065, 15
  store i64 %7103, i64* %3, align 8
  %7104 = inttoptr i64 %7102 to i64*
  %7105 = load i64, i64* %7104, align 8
  store i64 %7105, i64* %RCX.i4414.pre-phi, align 8
  %7106 = add i64 %7105, 2
  %7107 = add i64 %7065, 20
  store i64 %7107, i64* %3, align 8
  %7108 = inttoptr i64 %7106 to i16*
  %7109 = load i16, i16* %7108, align 2
  store i16 %7109, i16* %R9W.i3301, align 2
  %7110 = add i64 %7067, -8
  %7111 = add i64 %7065, 24
  store i64 %7111, i64* %3, align 8
  %7112 = inttoptr i64 %7110 to i64*
  %7113 = load i64, i64* %7112, align 8
  store i64 %7113, i64* %RCX.i4414.pre-phi, align 8
  %7114 = add i64 %7113, 48
  %7115 = add i64 %7065, 28
  store i64 %7115, i64* %3, align 8
  %7116 = inttoptr i64 %7114 to i64*
  %7117 = load i64, i64* %7116, align 8
  store i64 %7117, i64* %RCX.i4414.pre-phi, align 8
  %7118 = add i64 %7117, 6504
  %7119 = add i64 %7065, 35
  store i64 %7119, i64* %3, align 8
  %7120 = inttoptr i64 %7118 to i64*
  %7121 = load i64, i64* %7120, align 8
  store i64 %7121, i64* %RCX.i4414.pre-phi, align 8
  %7122 = add i64 %7121, 8
  %7123 = add i64 %7065, 39
  store i64 %7123, i64* %3, align 8
  %7124 = inttoptr i64 %7122 to i64*
  %7125 = load i64, i64* %7124, align 8
  store i64 %7125, i64* %RCX.i4414.pre-phi, align 8
  %7126 = add i64 %7067, -12
  %7127 = add i64 %7065, 43
  store i64 %7127, i64* %3, align 8
  %7128 = inttoptr i64 %7126 to i32*
  %7129 = load i32, i32* %7128, align 4
  %7130 = sext i32 %7129 to i64
  store i64 %7130, i64* %R8.i3546, align 8
  %7131 = shl nsw i64 %7130, 3
  %7132 = add i64 %7131, %7125
  %7133 = add i64 %7065, 47
  store i64 %7133, i64* %3, align 8
  %7134 = inttoptr i64 %7132 to i64*
  %7135 = load i64, i64* %7134, align 8
  store i64 %7135, i64* %RCX.i4414.pre-phi, align 8
  %7136 = load i64, i64* %RBP.i, align 8
  %7137 = add i64 %7136, -16
  %7138 = add i64 %7065, 51
  store i64 %7138, i64* %3, align 8
  %7139 = inttoptr i64 %7137 to i32*
  %7140 = load i32, i32* %7139, align 4
  %7141 = sext i32 %7140 to i64
  store i64 %7141, i64* %R8.i3546, align 8
  %7142 = shl nsw i64 %7141, 3
  %7143 = add i64 %7142, %7135
  %7144 = add i64 %7065, 55
  store i64 %7144, i64* %3, align 8
  %7145 = inttoptr i64 %7143 to i64*
  %7146 = load i64, i64* %7145, align 8
  store i64 %7146, i64* %RCX.i4414.pre-phi, align 8
  %7147 = add i64 %7146, 2
  %7148 = add i64 %7065, 60
  store i64 %7148, i64* %3, align 8
  %7149 = inttoptr i64 %7147 to i16*
  store i16 %7109, i16* %7149, align 2
  %7150 = load i64, i64* %RBP.i, align 8
  %7151 = add i64 %7150, -8
  %7152 = load i64, i64* %3, align 8
  %7153 = add i64 %7152, 4
  store i64 %7153, i64* %3, align 8
  %7154 = inttoptr i64 %7151 to i64*
  %7155 = load i64, i64* %7154, align 8
  store i64 %7155, i64* %RCX.i4414.pre-phi, align 8
  %7156 = add i64 %7155, 40
  %7157 = add i64 %7152, 8
  store i64 %7157, i64* %3, align 8
  %7158 = inttoptr i64 %7156 to i64*
  %7159 = load i64, i64* %7158, align 8
  store i64 %7159, i64* %RCX.i4414.pre-phi, align 8
  %7160 = add i64 %7159, 6480
  %7161 = add i64 %7152, 15
  store i64 %7161, i64* %3, align 8
  %7162 = inttoptr i64 %7160 to i64*
  %7163 = load i64, i64* %7162, align 8
  store i64 %7163, i64* %RCX.i4414.pre-phi, align 8
  %7164 = add i64 %7152, 18
  store i64 %7164, i64* %3, align 8
  %7165 = inttoptr i64 %7163 to i64*
  %7166 = load i64, i64* %7165, align 8
  store i64 %7166, i64* %RCX.i4414.pre-phi, align 8
  %7167 = add i64 %7150, -12
  %7168 = add i64 %7152, 22
  store i64 %7168, i64* %3, align 8
  %7169 = inttoptr i64 %7167 to i32*
  %7170 = load i32, i32* %7169, align 4
  %7171 = sext i32 %7170 to i64
  store i64 %7171, i64* %R8.i3546, align 8
  %7172 = shl nsw i64 %7171, 3
  %7173 = add i64 %7172, %7166
  %7174 = add i64 %7152, 26
  store i64 %7174, i64* %3, align 8
  %7175 = inttoptr i64 %7173 to i64*
  %7176 = load i64, i64* %7175, align 8
  store i64 %7176, i64* %RCX.i4414.pre-phi, align 8
  %7177 = add i64 %7150, -16
  %7178 = add i64 %7152, 29
  store i64 %7178, i64* %3, align 8
  %7179 = inttoptr i64 %7177 to i32*
  %7180 = load i32, i32* %7179, align 4
  %7181 = zext i32 %7180 to i64
  store i64 %7181, i64* %RDX.i4411.pre-phi, align 8
  store i64 %7181, i64* %RAX.i186, align 8
  %7182 = sext i32 %7180 to i64
  %7183 = lshr i64 %7182, 32
  store i64 %7183, i64* %.pre-phi499, align 8
  %7184 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7185 = add i64 %7152, 34
  store i64 %7185, i64* %3, align 8
  %7186 = sext i32 %7184 to i64
  %7187 = shl nuw i64 %7183, 32
  %7188 = or i64 %7187, %7181
  %7189 = sdiv i64 %7188, %7186
  %7190 = shl i64 %7189, 32
  %7191 = ashr exact i64 %7190, 32
  %7192 = icmp eq i64 %7189, %7191
  br i1 %7192, label %7195, label %7193

; <label>:7193:                                   ; preds = %routine_idivl__esi.exit2394
  %7194 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7185, %struct.Memory* %7066)
  %.pre442 = load i64, i64* %RAX.i186, align 8
  %.pre443 = load i64, i64* %3, align 8
  %.pre444 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2327

; <label>:7195:                                   ; preds = %routine_idivl__esi.exit2394
  %7196 = srem i64 %7188, %7186
  %7197 = and i64 %7189, 4294967295
  store i64 %7197, i64* %RAX.i186, align 8
  %7198 = and i64 %7196, 4294967295
  store i64 %7198, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2327

routine_idivl__esi.exit2327:                      ; preds = %7195, %7193
  %7199 = phi i64 [ %.pre444, %7193 ], [ %7150, %7195 ]
  %7200 = phi i64 [ %.pre443, %7193 ], [ %7185, %7195 ]
  %7201 = phi i64 [ %.pre442, %7193 ], [ %7197, %7195 ]
  %7202 = phi %struct.Memory* [ %7194, %7193 ], [ %7066, %7195 ]
  %.tr131 = trunc i64 %7201 to i32
  %7203 = shl i32 %.tr131, 3
  %7204 = zext i32 %7203 to i64
  store i64 %7204, i64* %RAX.i186, align 8
  %7205 = lshr i64 %7201, 29
  %7206 = trunc i64 %7205 to i8
  %7207 = and i8 %7206, 1
  store i8 %7207, i8* %14, align 1
  %7208 = and i32 %7203, 248
  %7209 = tail call i32 @llvm.ctpop.i32(i32 %7208)
  %7210 = trunc i32 %7209 to i8
  %7211 = and i8 %7210, 1
  %7212 = xor i8 %7211, 1
  store i8 %7212, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7213 = icmp eq i32 %7203, 0
  %7214 = zext i1 %7213 to i8
  store i8 %7214, i8* %30, align 1
  %7215 = lshr i32 %.tr131, 28
  %7216 = trunc i32 %7215 to i8
  %7217 = and i8 %7216, 1
  store i8 %7217, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7218 = add i64 %7199, -16
  %7219 = add i64 %7200, 6
  store i64 %7219, i64* %3, align 8
  %7220 = inttoptr i64 %7218 to i32*
  %7221 = load i32, i32* %7220, align 4
  %7222 = zext i32 %7221 to i64
  store i64 %7222, i64* %RDI.i126, align 8
  %7223 = add i64 %7199, -300
  %7224 = add i64 %7200, 12
  store i64 %7224, i64* %3, align 8
  %7225 = inttoptr i64 %7223 to i32*
  store i32 %7203, i32* %7225, align 4
  %7226 = load i32, i32* %EDI.i3551, align 4
  %7227 = zext i32 %7226 to i64
  %7228 = load i64, i64* %3, align 8
  store i64 %7227, i64* %RAX.i186, align 8
  %7229 = sext i32 %7226 to i64
  %7230 = lshr i64 %7229, 32
  store i64 %7230, i64* %.pre-phi499, align 8
  %7231 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7232 = add i64 %7228, 5
  store i64 %7232, i64* %3, align 8
  %7233 = sext i32 %7231 to i64
  %7234 = shl nuw i64 %7230, 32
  %7235 = or i64 %7234, %7227
  %7236 = sdiv i64 %7235, %7233
  %7237 = shl i64 %7236, 32
  %7238 = ashr exact i64 %7237, 32
  %7239 = icmp eq i64 %7236, %7238
  br i1 %7239, label %7242, label %7240

; <label>:7240:                                   ; preds = %routine_idivl__esi.exit2327
  %7241 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7232, %struct.Memory* %7202)
  %.pre445 = load i64, i64* %3, align 8
  %.pre446 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2311

; <label>:7242:                                   ; preds = %routine_idivl__esi.exit2327
  %7243 = srem i64 %7235, %7233
  %7244 = and i64 %7236, 4294967295
  store i64 %7244, i64* %RAX.i186, align 8
  %7245 = and i64 %7243, 4294967295
  store i64 %7245, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7246 = trunc i64 %7243 to i32
  br label %routine_idivl__esi.exit2311

routine_idivl__esi.exit2311:                      ; preds = %7242, %7240
  %7247 = phi i32 [ %.pre446, %7240 ], [ %7246, %7242 ]
  %7248 = phi i64 [ %.pre445, %7240 ], [ %7232, %7242 ]
  %7249 = phi %struct.Memory* [ %7241, %7240 ], [ %7202, %7242 ]
  %7250 = load i64, i64* %RBP.i, align 8
  %7251 = add i64 %7250, -300
  %7252 = add i64 %7248, 6
  store i64 %7252, i64* %3, align 8
  %7253 = inttoptr i64 %7251 to i32*
  %7254 = load i32, i32* %7253, align 4
  %7255 = add i32 %7247, %7254
  %7256 = zext i32 %7255 to i64
  store i64 %7256, i64* %RDI.i126, align 8
  %7257 = icmp ult i32 %7255, %7254
  %7258 = icmp ult i32 %7255, %7247
  %7259 = or i1 %7257, %7258
  %7260 = zext i1 %7259 to i8
  store i8 %7260, i8* %14, align 1
  %7261 = and i32 %7255, 255
  %7262 = tail call i32 @llvm.ctpop.i32(i32 %7261)
  %7263 = trunc i32 %7262 to i8
  %7264 = and i8 %7263, 1
  %7265 = xor i8 %7264, 1
  store i8 %7265, i8* %21, align 1
  %7266 = xor i32 %7247, %7254
  %7267 = xor i32 %7266, %7255
  %7268 = lshr i32 %7267, 4
  %7269 = trunc i32 %7268 to i8
  %7270 = and i8 %7269, 1
  store i8 %7270, i8* %27, align 1
  %7271 = icmp eq i32 %7255, 0
  %7272 = zext i1 %7271 to i8
  store i8 %7272, i8* %30, align 1
  %7273 = lshr i32 %7255, 31
  %7274 = trunc i32 %7273 to i8
  store i8 %7274, i8* %33, align 1
  %7275 = lshr i32 %7254, 31
  %7276 = lshr i32 %7247, 31
  %7277 = xor i32 %7273, %7275
  %7278 = xor i32 %7273, %7276
  %7279 = add nuw nsw i32 %7277, %7278
  %7280 = icmp eq i32 %7279, 2
  %7281 = zext i1 %7280 to i8
  store i8 %7281, i8* %39, align 1
  %7282 = sext i32 %7255 to i64
  store i64 %7282, i64* %R8.i3546, align 8
  %7283 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %7284 = shl nsw i64 %7282, 1
  %7285 = add i64 %7283, %7284
  %7286 = add i64 %7248, 16
  store i64 %7286, i64* %3, align 8
  %7287 = inttoptr i64 %7285 to i16*
  %7288 = load i16, i16* %7287, align 2
  store i16 %7288, i16* %R9W.i3301, align 2
  %7289 = add i64 %7250, -8
  %7290 = add i64 %7248, 20
  store i64 %7290, i64* %3, align 8
  %7291 = inttoptr i64 %7289 to i64*
  %7292 = load i64, i64* %7291, align 8
  store i64 %7292, i64* %RCX.i4414.pre-phi, align 8
  %7293 = add i64 %7292, 48
  %7294 = add i64 %7248, 24
  store i64 %7294, i64* %3, align 8
  %7295 = inttoptr i64 %7293 to i64*
  %7296 = load i64, i64* %7295, align 8
  store i64 %7296, i64* %RCX.i4414.pre-phi, align 8
  %7297 = add i64 %7296, 6480
  %7298 = add i64 %7248, 31
  store i64 %7298, i64* %3, align 8
  %7299 = inttoptr i64 %7297 to i64*
  %7300 = load i64, i64* %7299, align 8
  store i64 %7300, i64* %RCX.i4414.pre-phi, align 8
  %7301 = add i64 %7248, 34
  store i64 %7301, i64* %3, align 8
  %7302 = inttoptr i64 %7300 to i64*
  %7303 = load i64, i64* %7302, align 8
  store i64 %7303, i64* %RCX.i4414.pre-phi, align 8
  %7304 = add i64 %7250, -12
  %7305 = add i64 %7248, 38
  store i64 %7305, i64* %3, align 8
  %7306 = inttoptr i64 %7304 to i32*
  %7307 = load i32, i32* %7306, align 4
  %7308 = sext i32 %7307 to i64
  store i64 %7308, i64* %R8.i3546, align 8
  %7309 = shl nsw i64 %7308, 3
  %7310 = add i64 %7309, %7303
  %7311 = add i64 %7248, 42
  store i64 %7311, i64* %3, align 8
  %7312 = inttoptr i64 %7310 to i64*
  %7313 = load i64, i64* %7312, align 8
  store i64 %7313, i64* %RCX.i4414.pre-phi, align 8
  %7314 = add i64 %7250, -16
  %7315 = add i64 %7248, 46
  store i64 %7315, i64* %3, align 8
  %7316 = inttoptr i64 %7314 to i32*
  %7317 = load i32, i32* %7316, align 4
  %7318 = sext i32 %7317 to i64
  store i64 %7318, i64* %R8.i3546, align 8
  %7319 = shl nsw i64 %7318, 1
  %7320 = add i64 %7319, %7313
  %7321 = add i64 %7248, 51
  store i64 %7321, i64* %3, align 8
  %7322 = inttoptr i64 %7320 to i16*
  store i16 %7288, i16* %7322, align 2
  %7323 = load i64, i64* %RBP.i, align 8
  %7324 = add i64 %7323, -8
  %7325 = load i64, i64* %3, align 8
  %7326 = add i64 %7325, 4
  store i64 %7326, i64* %3, align 8
  %7327 = inttoptr i64 %7324 to i64*
  %7328 = load i64, i64* %7327, align 8
  store i64 %7328, i64* %RCX.i4414.pre-phi, align 8
  %7329 = add i64 %7328, 40
  %7330 = add i64 %7325, 8
  store i64 %7330, i64* %3, align 8
  %7331 = inttoptr i64 %7329 to i64*
  %7332 = load i64, i64* %7331, align 8
  store i64 %7332, i64* %RCX.i4414.pre-phi, align 8
  %7333 = add i64 %7332, 6480
  %7334 = add i64 %7325, 15
  store i64 %7334, i64* %3, align 8
  %7335 = inttoptr i64 %7333 to i64*
  %7336 = load i64, i64* %7335, align 8
  store i64 %7336, i64* %RCX.i4414.pre-phi, align 8
  %7337 = add i64 %7336, 8
  %7338 = add i64 %7325, 19
  store i64 %7338, i64* %3, align 8
  %7339 = inttoptr i64 %7337 to i64*
  %7340 = load i64, i64* %7339, align 8
  store i64 %7340, i64* %RCX.i4414.pre-phi, align 8
  %7341 = add i64 %7323, -12
  %7342 = add i64 %7325, 23
  store i64 %7342, i64* %3, align 8
  %7343 = inttoptr i64 %7341 to i32*
  %7344 = load i32, i32* %7343, align 4
  %7345 = sext i32 %7344 to i64
  store i64 %7345, i64* %R8.i3546, align 8
  %7346 = shl nsw i64 %7345, 3
  %7347 = add i64 %7346, %7340
  %7348 = add i64 %7325, 27
  store i64 %7348, i64* %3, align 8
  %7349 = inttoptr i64 %7347 to i64*
  %7350 = load i64, i64* %7349, align 8
  store i64 %7350, i64* %RCX.i4414.pre-phi, align 8
  %7351 = add i64 %7323, -16
  %7352 = add i64 %7325, 30
  store i64 %7352, i64* %3, align 8
  %7353 = inttoptr i64 %7351 to i32*
  %7354 = load i32, i32* %7353, align 4
  %7355 = zext i32 %7354 to i64
  store i64 %7355, i64* %RDX.i4411.pre-phi, align 8
  store i64 %7355, i64* %RAX.i186, align 8
  %7356 = sext i32 %7354 to i64
  %7357 = lshr i64 %7356, 32
  store i64 %7357, i64* %.pre-phi499, align 8
  %7358 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7359 = add i64 %7325, 35
  store i64 %7359, i64* %3, align 8
  %7360 = sext i32 %7358 to i64
  %7361 = shl nuw i64 %7357, 32
  %7362 = or i64 %7361, %7355
  %7363 = sdiv i64 %7362, %7360
  %7364 = shl i64 %7363, 32
  %7365 = ashr exact i64 %7364, 32
  %7366 = icmp eq i64 %7363, %7365
  br i1 %7366, label %7369, label %7367

; <label>:7367:                                   ; preds = %routine_idivl__esi.exit2311
  %7368 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7359, %struct.Memory* %7249)
  %.pre447 = load i64, i64* %RAX.i186, align 8
  %.pre448 = load i64, i64* %3, align 8
  %.pre449 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2248

; <label>:7369:                                   ; preds = %routine_idivl__esi.exit2311
  %7370 = srem i64 %7362, %7360
  %7371 = and i64 %7363, 4294967295
  store i64 %7371, i64* %RAX.i186, align 8
  %7372 = and i64 %7370, 4294967295
  store i64 %7372, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2248

routine_idivl__esi.exit2248:                      ; preds = %7369, %7367
  %7373 = phi i64 [ %.pre449, %7367 ], [ %7323, %7369 ]
  %7374 = phi i64 [ %.pre448, %7367 ], [ %7359, %7369 ]
  %7375 = phi i64 [ %.pre447, %7367 ], [ %7371, %7369 ]
  %7376 = phi %struct.Memory* [ %7368, %7367 ], [ %7249, %7369 ]
  %.tr134 = trunc i64 %7375 to i32
  %7377 = shl i32 %.tr134, 3
  %7378 = zext i32 %7377 to i64
  store i64 %7378, i64* %RAX.i186, align 8
  %7379 = lshr i64 %7375, 29
  %7380 = trunc i64 %7379 to i8
  %7381 = and i8 %7380, 1
  store i8 %7381, i8* %14, align 1
  %7382 = and i32 %7377, 248
  %7383 = tail call i32 @llvm.ctpop.i32(i32 %7382)
  %7384 = trunc i32 %7383 to i8
  %7385 = and i8 %7384, 1
  %7386 = xor i8 %7385, 1
  store i8 %7386, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7387 = icmp eq i32 %7377, 0
  %7388 = zext i1 %7387 to i8
  store i8 %7388, i8* %30, align 1
  %7389 = lshr i32 %.tr134, 28
  %7390 = trunc i32 %7389 to i8
  %7391 = and i8 %7390, 1
  store i8 %7391, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7392 = add i64 %7373, -16
  %7393 = add i64 %7374, 6
  store i64 %7393, i64* %3, align 8
  %7394 = inttoptr i64 %7392 to i32*
  %7395 = load i32, i32* %7394, align 4
  %7396 = zext i32 %7395 to i64
  store i64 %7396, i64* %RDI.i126, align 8
  %7397 = add i64 %7373, -304
  %7398 = add i64 %7374, 12
  store i64 %7398, i64* %3, align 8
  %7399 = inttoptr i64 %7397 to i32*
  store i32 %7377, i32* %7399, align 4
  %7400 = load i32, i32* %EDI.i3551, align 4
  %7401 = zext i32 %7400 to i64
  %7402 = load i64, i64* %3, align 8
  store i64 %7401, i64* %RAX.i186, align 8
  %7403 = sext i32 %7400 to i64
  %7404 = lshr i64 %7403, 32
  store i64 %7404, i64* %.pre-phi499, align 8
  %7405 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7406 = add i64 %7402, 5
  store i64 %7406, i64* %3, align 8
  %7407 = sext i32 %7405 to i64
  %7408 = shl nuw i64 %7404, 32
  %7409 = or i64 %7408, %7401
  %7410 = sdiv i64 %7409, %7407
  %7411 = shl i64 %7410, 32
  %7412 = ashr exact i64 %7411, 32
  %7413 = icmp eq i64 %7410, %7412
  br i1 %7413, label %7416, label %7414

; <label>:7414:                                   ; preds = %routine_idivl__esi.exit2248
  %7415 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7406, %struct.Memory* %7376)
  %.pre450 = load i64, i64* %3, align 8
  %.pre451 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2230

; <label>:7416:                                   ; preds = %routine_idivl__esi.exit2248
  %7417 = srem i64 %7409, %7407
  %7418 = and i64 %7410, 4294967295
  store i64 %7418, i64* %RAX.i186, align 8
  %7419 = and i64 %7417, 4294967295
  store i64 %7419, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7420 = trunc i64 %7417 to i32
  br label %routine_idivl__esi.exit2230

routine_idivl__esi.exit2230:                      ; preds = %7416, %7414
  %7421 = phi i32 [ %.pre451, %7414 ], [ %7420, %7416 ]
  %7422 = phi i64 [ %.pre450, %7414 ], [ %7406, %7416 ]
  %7423 = phi %struct.Memory* [ %7415, %7414 ], [ %7376, %7416 ]
  %7424 = load i64, i64* %RBP.i, align 8
  %7425 = add i64 %7424, -304
  %7426 = add i64 %7422, 6
  store i64 %7426, i64* %3, align 8
  %7427 = inttoptr i64 %7425 to i32*
  %7428 = load i32, i32* %7427, align 4
  %7429 = add i32 %7421, %7428
  %7430 = zext i32 %7429 to i64
  store i64 %7430, i64* %RDI.i126, align 8
  %7431 = icmp ult i32 %7429, %7428
  %7432 = icmp ult i32 %7429, %7421
  %7433 = or i1 %7431, %7432
  %7434 = zext i1 %7433 to i8
  store i8 %7434, i8* %14, align 1
  %7435 = and i32 %7429, 255
  %7436 = tail call i32 @llvm.ctpop.i32(i32 %7435)
  %7437 = trunc i32 %7436 to i8
  %7438 = and i8 %7437, 1
  %7439 = xor i8 %7438, 1
  store i8 %7439, i8* %21, align 1
  %7440 = xor i32 %7421, %7428
  %7441 = xor i32 %7440, %7429
  %7442 = lshr i32 %7441, 4
  %7443 = trunc i32 %7442 to i8
  %7444 = and i8 %7443, 1
  store i8 %7444, i8* %27, align 1
  %7445 = icmp eq i32 %7429, 0
  %7446 = zext i1 %7445 to i8
  store i8 %7446, i8* %30, align 1
  %7447 = lshr i32 %7429, 31
  %7448 = trunc i32 %7447 to i8
  store i8 %7448, i8* %33, align 1
  %7449 = lshr i32 %7428, 31
  %7450 = lshr i32 %7421, 31
  %7451 = xor i32 %7447, %7449
  %7452 = xor i32 %7447, %7450
  %7453 = add nuw nsw i32 %7451, %7452
  %7454 = icmp eq i32 %7453, 2
  %7455 = zext i1 %7454 to i8
  store i8 %7455, i8* %39, align 1
  %7456 = sext i32 %7429 to i64
  store i64 %7456, i64* %R8.i3546, align 8
  %7457 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %7458 = shl nsw i64 %7456, 1
  %7459 = add i64 %7457, %7458
  %7460 = add i64 %7422, 16
  store i64 %7460, i64* %3, align 8
  %7461 = inttoptr i64 %7459 to i16*
  %7462 = load i16, i16* %7461, align 2
  store i16 %7462, i16* %R9W.i3301, align 2
  %7463 = add i64 %7424, -8
  %7464 = add i64 %7422, 20
  store i64 %7464, i64* %3, align 8
  %7465 = inttoptr i64 %7463 to i64*
  %7466 = load i64, i64* %7465, align 8
  store i64 %7466, i64* %RCX.i4414.pre-phi, align 8
  %7467 = add i64 %7466, 48
  %7468 = add i64 %7422, 24
  store i64 %7468, i64* %3, align 8
  %7469 = inttoptr i64 %7467 to i64*
  %7470 = load i64, i64* %7469, align 8
  store i64 %7470, i64* %RCX.i4414.pre-phi, align 8
  %7471 = add i64 %7470, 6480
  %7472 = add i64 %7422, 31
  store i64 %7472, i64* %3, align 8
  %7473 = inttoptr i64 %7471 to i64*
  %7474 = load i64, i64* %7473, align 8
  store i64 %7474, i64* %RCX.i4414.pre-phi, align 8
  %7475 = add i64 %7474, 8
  %7476 = add i64 %7422, 35
  store i64 %7476, i64* %3, align 8
  %7477 = inttoptr i64 %7475 to i64*
  %7478 = load i64, i64* %7477, align 8
  store i64 %7478, i64* %RCX.i4414.pre-phi, align 8
  %7479 = add i64 %7424, -12
  %7480 = add i64 %7422, 39
  store i64 %7480, i64* %3, align 8
  %7481 = inttoptr i64 %7479 to i32*
  %7482 = load i32, i32* %7481, align 4
  %7483 = sext i32 %7482 to i64
  store i64 %7483, i64* %R8.i3546, align 8
  %7484 = shl nsw i64 %7483, 3
  %7485 = add i64 %7484, %7478
  %7486 = add i64 %7422, 43
  store i64 %7486, i64* %3, align 8
  %7487 = inttoptr i64 %7485 to i64*
  %7488 = load i64, i64* %7487, align 8
  store i64 %7488, i64* %RCX.i4414.pre-phi, align 8
  %7489 = add i64 %7424, -16
  %7490 = add i64 %7422, 47
  store i64 %7490, i64* %3, align 8
  %7491 = inttoptr i64 %7489 to i32*
  %7492 = load i32, i32* %7491, align 4
  %7493 = sext i32 %7492 to i64
  store i64 %7493, i64* %R8.i3546, align 8
  %7494 = shl nsw i64 %7493, 1
  %7495 = add i64 %7494, %7488
  %7496 = add i64 %7422, 52
  store i64 %7496, i64* %3, align 8
  %7497 = inttoptr i64 %7495 to i16*
  store i16 %7462, i16* %7497, align 2
  %7498 = load i64, i64* %RBP.i, align 8
  %7499 = add i64 %7498, -8
  %7500 = load i64, i64* %3, align 8
  %7501 = add i64 %7500, 4
  store i64 %7501, i64* %3, align 8
  %7502 = inttoptr i64 %7499 to i64*
  %7503 = load i64, i64* %7502, align 8
  store i64 %7503, i64* %RCX.i4414.pre-phi, align 8
  %7504 = add i64 %7503, 40
  %7505 = add i64 %7500, 8
  store i64 %7505, i64* %3, align 8
  %7506 = inttoptr i64 %7504 to i64*
  %7507 = load i64, i64* %7506, align 8
  store i64 %7507, i64* %RCX.i4414.pre-phi, align 8
  %7508 = add i64 %7507, 6496
  %7509 = add i64 %7500, 15
  store i64 %7509, i64* %3, align 8
  %7510 = inttoptr i64 %7508 to i64*
  %7511 = load i64, i64* %7510, align 8
  store i64 %7511, i64* %RCX.i4414.pre-phi, align 8
  %7512 = add i64 %7511, 16
  %7513 = add i64 %7500, 19
  store i64 %7513, i64* %3, align 8
  %7514 = inttoptr i64 %7512 to i64*
  %7515 = load i64, i64* %7514, align 8
  store i64 %7515, i64* %RCX.i4414.pre-phi, align 8
  %7516 = add i64 %7498, -12
  %7517 = add i64 %7500, 23
  store i64 %7517, i64* %3, align 8
  %7518 = inttoptr i64 %7516 to i32*
  %7519 = load i32, i32* %7518, align 4
  %7520 = sext i32 %7519 to i64
  store i64 %7520, i64* %R8.i3546, align 8
  %7521 = shl nsw i64 %7520, 3
  %7522 = add i64 %7521, %7515
  %7523 = add i64 %7500, 27
  store i64 %7523, i64* %3, align 8
  %7524 = inttoptr i64 %7522 to i64*
  %7525 = load i64, i64* %7524, align 8
  store i64 %7525, i64* %RCX.i4414.pre-phi, align 8
  %7526 = add i64 %7498, -16
  %7527 = add i64 %7500, 30
  store i64 %7527, i64* %3, align 8
  %7528 = inttoptr i64 %7526 to i32*
  %7529 = load i32, i32* %7528, align 4
  %7530 = zext i32 %7529 to i64
  store i64 %7530, i64* %RDX.i4411.pre-phi, align 8
  store i64 %7530, i64* %RAX.i186, align 8
  %7531 = sext i32 %7529 to i64
  %7532 = lshr i64 %7531, 32
  store i64 %7532, i64* %.pre-phi499, align 8
  %7533 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7534 = add i64 %7500, 35
  store i64 %7534, i64* %3, align 8
  %7535 = sext i32 %7533 to i64
  %7536 = shl nuw i64 %7532, 32
  %7537 = or i64 %7536, %7530
  %7538 = sdiv i64 %7537, %7535
  %7539 = shl i64 %7538, 32
  %7540 = ashr exact i64 %7539, 32
  %7541 = icmp eq i64 %7538, %7540
  br i1 %7541, label %7544, label %7542

; <label>:7542:                                   ; preds = %routine_idivl__esi.exit2230
  %7543 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7534, %struct.Memory* %7423)
  %.pre452 = load i64, i64* %RAX.i186, align 8
  %.pre453 = load i64, i64* %3, align 8
  %.pre454 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2168

; <label>:7544:                                   ; preds = %routine_idivl__esi.exit2230
  %7545 = srem i64 %7537, %7535
  %7546 = and i64 %7538, 4294967295
  store i64 %7546, i64* %RAX.i186, align 8
  %7547 = and i64 %7545, 4294967295
  store i64 %7547, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2168

routine_idivl__esi.exit2168:                      ; preds = %7544, %7542
  %7548 = phi i64 [ %.pre454, %7542 ], [ %7498, %7544 ]
  %7549 = phi i64 [ %.pre453, %7542 ], [ %7534, %7544 ]
  %7550 = phi i64 [ %.pre452, %7542 ], [ %7546, %7544 ]
  %7551 = phi %struct.Memory* [ %7543, %7542 ], [ %7423, %7544 ]
  %.tr137 = trunc i64 %7550 to i32
  %7552 = shl i32 %.tr137, 3
  %7553 = zext i32 %7552 to i64
  store i64 %7553, i64* %RAX.i186, align 8
  %7554 = lshr i64 %7550, 29
  %7555 = trunc i64 %7554 to i8
  %7556 = and i8 %7555, 1
  store i8 %7556, i8* %14, align 1
  %7557 = and i32 %7552, 248
  %7558 = tail call i32 @llvm.ctpop.i32(i32 %7557)
  %7559 = trunc i32 %7558 to i8
  %7560 = and i8 %7559, 1
  %7561 = xor i8 %7560, 1
  store i8 %7561, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7562 = icmp eq i32 %7552, 0
  %7563 = zext i1 %7562 to i8
  store i8 %7563, i8* %30, align 1
  %7564 = lshr i32 %.tr137, 28
  %7565 = trunc i32 %7564 to i8
  %7566 = and i8 %7565, 1
  store i8 %7566, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7567 = add i64 %7548, -16
  %7568 = add i64 %7549, 6
  store i64 %7568, i64* %3, align 8
  %7569 = inttoptr i64 %7567 to i32*
  %7570 = load i32, i32* %7569, align 4
  %7571 = zext i32 %7570 to i64
  store i64 %7571, i64* %RDI.i126, align 8
  %7572 = add i64 %7548, -308
  %7573 = add i64 %7549, 12
  store i64 %7573, i64* %3, align 8
  %7574 = inttoptr i64 %7572 to i32*
  store i32 %7552, i32* %7574, align 4
  %7575 = load i32, i32* %EDI.i3551, align 4
  %7576 = zext i32 %7575 to i64
  %7577 = load i64, i64* %3, align 8
  store i64 %7576, i64* %RAX.i186, align 8
  %7578 = sext i32 %7575 to i64
  %7579 = lshr i64 %7578, 32
  store i64 %7579, i64* %.pre-phi499, align 8
  %7580 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7581 = add i64 %7577, 5
  store i64 %7581, i64* %3, align 8
  %7582 = sext i32 %7580 to i64
  %7583 = shl nuw i64 %7579, 32
  %7584 = or i64 %7583, %7576
  %7585 = sdiv i64 %7584, %7582
  %7586 = shl i64 %7585, 32
  %7587 = ashr exact i64 %7586, 32
  %7588 = icmp eq i64 %7585, %7587
  br i1 %7588, label %7591, label %7589

; <label>:7589:                                   ; preds = %routine_idivl__esi.exit2168
  %7590 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7581, %struct.Memory* %7551)
  %.pre455 = load i64, i64* %3, align 8
  %.pre456 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2151

; <label>:7591:                                   ; preds = %routine_idivl__esi.exit2168
  %7592 = srem i64 %7584, %7582
  %7593 = and i64 %7585, 4294967295
  store i64 %7593, i64* %RAX.i186, align 8
  %7594 = and i64 %7592, 4294967295
  store i64 %7594, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7595 = trunc i64 %7592 to i32
  br label %routine_idivl__esi.exit2151

routine_idivl__esi.exit2151:                      ; preds = %7591, %7589
  %7596 = phi i32 [ %.pre456, %7589 ], [ %7595, %7591 ]
  %7597 = phi i64 [ %.pre455, %7589 ], [ %7581, %7591 ]
  %7598 = phi %struct.Memory* [ %7590, %7589 ], [ %7551, %7591 ]
  %7599 = load i64, i64* %RBP.i, align 8
  %7600 = add i64 %7599, -308
  %7601 = add i64 %7597, 6
  store i64 %7601, i64* %3, align 8
  %7602 = inttoptr i64 %7600 to i32*
  %7603 = load i32, i32* %7602, align 4
  %7604 = add i32 %7596, %7603
  %7605 = zext i32 %7604 to i64
  store i64 %7605, i64* %RDI.i126, align 8
  %7606 = icmp ult i32 %7604, %7603
  %7607 = icmp ult i32 %7604, %7596
  %7608 = or i1 %7606, %7607
  %7609 = zext i1 %7608 to i8
  store i8 %7609, i8* %14, align 1
  %7610 = and i32 %7604, 255
  %7611 = tail call i32 @llvm.ctpop.i32(i32 %7610)
  %7612 = trunc i32 %7611 to i8
  %7613 = and i8 %7612, 1
  %7614 = xor i8 %7613, 1
  store i8 %7614, i8* %21, align 1
  %7615 = xor i32 %7596, %7603
  %7616 = xor i32 %7615, %7604
  %7617 = lshr i32 %7616, 4
  %7618 = trunc i32 %7617 to i8
  %7619 = and i8 %7618, 1
  store i8 %7619, i8* %27, align 1
  %7620 = icmp eq i32 %7604, 0
  %7621 = zext i1 %7620 to i8
  store i8 %7621, i8* %30, align 1
  %7622 = lshr i32 %7604, 31
  %7623 = trunc i32 %7622 to i8
  store i8 %7623, i8* %33, align 1
  %7624 = lshr i32 %7603, 31
  %7625 = lshr i32 %7596, 31
  %7626 = xor i32 %7622, %7624
  %7627 = xor i32 %7622, %7625
  %7628 = add nuw nsw i32 %7626, %7627
  %7629 = icmp eq i32 %7628, 2
  %7630 = zext i1 %7629 to i8
  store i8 %7630, i8* %39, align 1
  %7631 = sext i32 %7604 to i64
  store i64 %7631, i64* %R8.i3546, align 8
  %7632 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %7633 = shl nsw i64 %7631, 3
  %7634 = add i64 %7632, %7633
  %7635 = add i64 %7597, 15
  store i64 %7635, i64* %3, align 8
  %7636 = inttoptr i64 %7634 to i64*
  %7637 = load i64, i64* %7636, align 8
  store i64 %7637, i64* %RCX.i4414.pre-phi, align 8
  %7638 = add i64 %7599, -8
  %7639 = add i64 %7597, 19
  store i64 %7639, i64* %3, align 8
  %7640 = inttoptr i64 %7638 to i64*
  %7641 = load i64, i64* %7640, align 8
  store i64 %7641, i64* %R8.i3546, align 8
  %7642 = add i64 %7641, 48
  %7643 = add i64 %7597, 23
  store i64 %7643, i64* %3, align 8
  %7644 = inttoptr i64 %7642 to i64*
  %7645 = load i64, i64* %7644, align 8
  store i64 %7645, i64* %R8.i3546, align 8
  %7646 = add i64 %7645, 6496
  %7647 = add i64 %7597, 30
  store i64 %7647, i64* %3, align 8
  %7648 = inttoptr i64 %7646 to i64*
  %7649 = load i64, i64* %7648, align 8
  store i64 %7649, i64* %R8.i3546, align 8
  %7650 = add i64 %7597, 33
  store i64 %7650, i64* %3, align 8
  %7651 = inttoptr i64 %7649 to i64*
  %7652 = load i64, i64* %7651, align 8
  store i64 %7652, i64* %R8.i3546, align 8
  %7653 = add i64 %7599, -12
  %7654 = add i64 %7597, 37
  store i64 %7654, i64* %3, align 8
  %7655 = inttoptr i64 %7653 to i32*
  %7656 = load i32, i32* %7655, align 4
  %7657 = sext i32 %7656 to i64
  store i64 %7657, i64* %R10.i2785, align 8
  %7658 = shl nsw i64 %7657, 3
  %7659 = add i64 %7658, %7652
  %7660 = add i64 %7597, 41
  store i64 %7660, i64* %3, align 8
  %7661 = inttoptr i64 %7659 to i64*
  %7662 = load i64, i64* %7661, align 8
  store i64 %7662, i64* %R8.i3546, align 8
  %7663 = add i64 %7599, -16
  %7664 = add i64 %7597, 45
  store i64 %7664, i64* %3, align 8
  %7665 = inttoptr i64 %7663 to i32*
  %7666 = load i32, i32* %7665, align 4
  %7667 = sext i32 %7666 to i64
  store i64 %7667, i64* %R10.i2785, align 8
  %7668 = shl nsw i64 %7667, 3
  %7669 = add i64 %7668, %7662
  %7670 = add i64 %7597, 49
  store i64 %7670, i64* %3, align 8
  %7671 = inttoptr i64 %7669 to i64*
  store i64 %7637, i64* %7671, align 8
  %7672 = load i64, i64* %RBP.i, align 8
  %7673 = add i64 %7672, -8
  %7674 = load i64, i64* %3, align 8
  %7675 = add i64 %7674, 4
  store i64 %7675, i64* %3, align 8
  %7676 = inttoptr i64 %7673 to i64*
  %7677 = load i64, i64* %7676, align 8
  store i64 %7677, i64* %RCX.i4414.pre-phi, align 8
  %7678 = add i64 %7677, 40
  %7679 = add i64 %7674, 8
  store i64 %7679, i64* %3, align 8
  %7680 = inttoptr i64 %7678 to i64*
  %7681 = load i64, i64* %7680, align 8
  store i64 %7681, i64* %RCX.i4414.pre-phi, align 8
  %7682 = add i64 %7681, 6496
  %7683 = add i64 %7674, 15
  store i64 %7683, i64* %3, align 8
  %7684 = inttoptr i64 %7682 to i64*
  %7685 = load i64, i64* %7684, align 8
  store i64 %7685, i64* %RCX.i4414.pre-phi, align 8
  %7686 = add i64 %7685, 24
  %7687 = add i64 %7674, 19
  store i64 %7687, i64* %3, align 8
  %7688 = inttoptr i64 %7686 to i64*
  %7689 = load i64, i64* %7688, align 8
  store i64 %7689, i64* %RCX.i4414.pre-phi, align 8
  %7690 = add i64 %7672, -12
  %7691 = add i64 %7674, 23
  store i64 %7691, i64* %3, align 8
  %7692 = inttoptr i64 %7690 to i32*
  %7693 = load i32, i32* %7692, align 4
  %7694 = sext i32 %7693 to i64
  store i64 %7694, i64* %R8.i3546, align 8
  %7695 = shl nsw i64 %7694, 3
  %7696 = add i64 %7695, %7689
  %7697 = add i64 %7674, 27
  store i64 %7697, i64* %3, align 8
  %7698 = inttoptr i64 %7696 to i64*
  %7699 = load i64, i64* %7698, align 8
  store i64 %7699, i64* %RCX.i4414.pre-phi, align 8
  %7700 = add i64 %7672, -16
  %7701 = add i64 %7674, 30
  store i64 %7701, i64* %3, align 8
  %7702 = inttoptr i64 %7700 to i32*
  %7703 = load i32, i32* %7702, align 4
  %7704 = zext i32 %7703 to i64
  store i64 %7704, i64* %RDX.i4411.pre-phi, align 8
  store i64 %7704, i64* %RAX.i186, align 8
  %7705 = sext i32 %7703 to i64
  %7706 = lshr i64 %7705, 32
  store i64 %7706, i64* %.pre-phi499, align 8
  %7707 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7708 = add i64 %7674, 35
  store i64 %7708, i64* %3, align 8
  %7709 = sext i32 %7707 to i64
  %7710 = shl nuw i64 %7706, 32
  %7711 = or i64 %7710, %7704
  %7712 = sdiv i64 %7711, %7709
  %7713 = shl i64 %7712, 32
  %7714 = ashr exact i64 %7713, 32
  %7715 = icmp eq i64 %7712, %7714
  br i1 %7715, label %7718, label %7716

; <label>:7716:                                   ; preds = %routine_idivl__esi.exit2151
  %7717 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7708, %struct.Memory* %7598)
  %.pre457 = load i64, i64* %RAX.i186, align 8
  %.pre458 = load i64, i64* %3, align 8
  %.pre459 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit2089

; <label>:7718:                                   ; preds = %routine_idivl__esi.exit2151
  %7719 = srem i64 %7711, %7709
  %7720 = and i64 %7712, 4294967295
  store i64 %7720, i64* %RAX.i186, align 8
  %7721 = and i64 %7719, 4294967295
  store i64 %7721, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__esi.exit2089

routine_idivl__esi.exit2089:                      ; preds = %7718, %7716
  %7722 = phi i64 [ %.pre459, %7716 ], [ %7672, %7718 ]
  %7723 = phi i64 [ %.pre458, %7716 ], [ %7708, %7718 ]
  %7724 = phi i64 [ %.pre457, %7716 ], [ %7720, %7718 ]
  %7725 = phi %struct.Memory* [ %7717, %7716 ], [ %7598, %7718 ]
  %.tr140 = trunc i64 %7724 to i32
  %7726 = shl i32 %.tr140, 3
  %7727 = zext i32 %7726 to i64
  store i64 %7727, i64* %RAX.i186, align 8
  %7728 = lshr i64 %7724, 29
  %7729 = trunc i64 %7728 to i8
  %7730 = and i8 %7729, 1
  store i8 %7730, i8* %14, align 1
  %7731 = and i32 %7726, 248
  %7732 = tail call i32 @llvm.ctpop.i32(i32 %7731)
  %7733 = trunc i32 %7732 to i8
  %7734 = and i8 %7733, 1
  %7735 = xor i8 %7734, 1
  store i8 %7735, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %7736 = icmp eq i32 %7726, 0
  %7737 = zext i1 %7736 to i8
  store i8 %7737, i8* %30, align 1
  %7738 = lshr i32 %.tr140, 28
  %7739 = trunc i32 %7738 to i8
  %7740 = and i8 %7739, 1
  store i8 %7740, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7741 = add i64 %7722, -16
  %7742 = add i64 %7723, 6
  store i64 %7742, i64* %3, align 8
  %7743 = inttoptr i64 %7741 to i32*
  %7744 = load i32, i32* %7743, align 4
  %7745 = zext i32 %7744 to i64
  store i64 %7745, i64* %RDI.i126, align 8
  %7746 = add i64 %7722, -312
  %7747 = add i64 %7723, 12
  store i64 %7747, i64* %3, align 8
  %7748 = inttoptr i64 %7746 to i32*
  store i32 %7726, i32* %7748, align 4
  %7749 = load i32, i32* %EDI.i3551, align 4
  %7750 = zext i32 %7749 to i64
  %7751 = load i64, i64* %3, align 8
  store i64 %7750, i64* %RAX.i186, align 8
  %7752 = sext i32 %7749 to i64
  %7753 = lshr i64 %7752, 32
  store i64 %7753, i64* %.pre-phi499, align 8
  %7754 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7755 = add i64 %7751, 5
  store i64 %7755, i64* %3, align 8
  %7756 = sext i32 %7754 to i64
  %7757 = shl nuw i64 %7753, 32
  %7758 = or i64 %7757, %7750
  %7759 = sdiv i64 %7758, %7756
  %7760 = shl i64 %7759, 32
  %7761 = ashr exact i64 %7760, 32
  %7762 = icmp eq i64 %7759, %7761
  br i1 %7762, label %7765, label %7763

; <label>:7763:                                   ; preds = %routine_idivl__esi.exit2089
  %7764 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7755, %struct.Memory* %7725)
  %.pre460 = load i64, i64* %3, align 8
  %.pre461 = load i32, i32* %.pre-phi501, align 4
  br label %routine_idivl__esi.exit2071

; <label>:7765:                                   ; preds = %routine_idivl__esi.exit2089
  %7766 = srem i64 %7758, %7756
  %7767 = and i64 %7759, 4294967295
  store i64 %7767, i64* %RAX.i186, align 8
  %7768 = and i64 %7766, 4294967295
  store i64 %7768, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7769 = trunc i64 %7766 to i32
  br label %routine_idivl__esi.exit2071

routine_idivl__esi.exit2071:                      ; preds = %7765, %7763
  %7770 = phi i32 [ %.pre461, %7763 ], [ %7769, %7765 ]
  %7771 = phi i64 [ %.pre460, %7763 ], [ %7755, %7765 ]
  %7772 = phi %struct.Memory* [ %7764, %7763 ], [ %7725, %7765 ]
  %7773 = load i64, i64* %RBP.i, align 8
  %7774 = add i64 %7773, -312
  %7775 = add i64 %7771, 6
  store i64 %7775, i64* %3, align 8
  %7776 = inttoptr i64 %7774 to i32*
  %7777 = load i32, i32* %7776, align 4
  %7778 = add i32 %7770, %7777
  %7779 = zext i32 %7778 to i64
  store i64 %7779, i64* %RDI.i126, align 8
  %7780 = icmp ult i32 %7778, %7777
  %7781 = icmp ult i32 %7778, %7770
  %7782 = or i1 %7780, %7781
  %7783 = zext i1 %7782 to i8
  store i8 %7783, i8* %14, align 1
  %7784 = and i32 %7778, 255
  %7785 = tail call i32 @llvm.ctpop.i32(i32 %7784)
  %7786 = trunc i32 %7785 to i8
  %7787 = and i8 %7786, 1
  %7788 = xor i8 %7787, 1
  store i8 %7788, i8* %21, align 1
  %7789 = xor i32 %7770, %7777
  %7790 = xor i32 %7789, %7778
  %7791 = lshr i32 %7790, 4
  %7792 = trunc i32 %7791 to i8
  %7793 = and i8 %7792, 1
  store i8 %7793, i8* %27, align 1
  %7794 = icmp eq i32 %7778, 0
  %7795 = zext i1 %7794 to i8
  store i8 %7795, i8* %30, align 1
  %7796 = lshr i32 %7778, 31
  %7797 = trunc i32 %7796 to i8
  store i8 %7797, i8* %33, align 1
  %7798 = lshr i32 %7777, 31
  %7799 = lshr i32 %7770, 31
  %7800 = xor i32 %7796, %7798
  %7801 = xor i32 %7796, %7799
  %7802 = add nuw nsw i32 %7800, %7801
  %7803 = icmp eq i32 %7802, 2
  %7804 = zext i1 %7803 to i8
  store i8 %7804, i8* %39, align 1
  %7805 = sext i32 %7778 to i64
  store i64 %7805, i64* %R8.i3546, align 8
  %7806 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %7807 = shl nsw i64 %7805, 3
  %7808 = add i64 %7806, %7807
  %7809 = add i64 %7771, 15
  store i64 %7809, i64* %3, align 8
  %7810 = inttoptr i64 %7808 to i64*
  %7811 = load i64, i64* %7810, align 8
  store i64 %7811, i64* %RCX.i4414.pre-phi, align 8
  %7812 = add i64 %7773, -8
  %7813 = add i64 %7771, 19
  store i64 %7813, i64* %3, align 8
  %7814 = inttoptr i64 %7812 to i64*
  %7815 = load i64, i64* %7814, align 8
  store i64 %7815, i64* %R8.i3546, align 8
  %7816 = add i64 %7815, 48
  %7817 = add i64 %7771, 23
  store i64 %7817, i64* %3, align 8
  %7818 = inttoptr i64 %7816 to i64*
  %7819 = load i64, i64* %7818, align 8
  store i64 %7819, i64* %R8.i3546, align 8
  %7820 = add i64 %7819, 6496
  %7821 = add i64 %7771, 30
  store i64 %7821, i64* %3, align 8
  %7822 = inttoptr i64 %7820 to i64*
  %7823 = load i64, i64* %7822, align 8
  store i64 %7823, i64* %R8.i3546, align 8
  %7824 = add i64 %7823, 8
  %7825 = add i64 %7771, 34
  store i64 %7825, i64* %3, align 8
  %7826 = inttoptr i64 %7824 to i64*
  %7827 = load i64, i64* %7826, align 8
  store i64 %7827, i64* %R8.i3546, align 8
  %7828 = add i64 %7773, -12
  %7829 = add i64 %7771, 38
  store i64 %7829, i64* %3, align 8
  %7830 = inttoptr i64 %7828 to i32*
  %7831 = load i32, i32* %7830, align 4
  %7832 = sext i32 %7831 to i64
  store i64 %7832, i64* %R10.i2785, align 8
  %7833 = shl nsw i64 %7832, 3
  %7834 = add i64 %7833, %7827
  %7835 = add i64 %7771, 42
  store i64 %7835, i64* %3, align 8
  %7836 = inttoptr i64 %7834 to i64*
  %7837 = load i64, i64* %7836, align 8
  store i64 %7837, i64* %R8.i3546, align 8
  %7838 = add i64 %7773, -16
  %7839 = add i64 %7771, 46
  store i64 %7839, i64* %3, align 8
  %7840 = inttoptr i64 %7838 to i32*
  %7841 = load i32, i32* %7840, align 4
  %7842 = sext i32 %7841 to i64
  store i64 %7842, i64* %R10.i2785, align 8
  %7843 = shl nsw i64 %7842, 3
  %7844 = add i64 %7843, %7837
  %7845 = add i64 %7771, 50
  store i64 %7845, i64* %3, align 8
  %7846 = inttoptr i64 %7844 to i64*
  store i64 %7811, i64* %7846, align 8
  %.pre462 = load i64, i64* %3, align 8
  %.pre463 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4514d5

block_.L_4514d5:                                  ; preds = %routine_idivl__esi.exit2071, %block_450d61, %routine_idivl__edi.exit3493
  %7847 = phi i64 [ %4804, %routine_idivl__edi.exit3493 ], [ %4804, %block_450d61 ], [ %.pre463, %routine_idivl__esi.exit2071 ]
  %7848 = phi i64 [ %4827, %routine_idivl__edi.exit3493 ], [ %4855, %block_450d61 ], [ %.pre462, %routine_idivl__esi.exit2071 ]
  %MEMORY.21 = phi %struct.Memory* [ %4770, %routine_idivl__edi.exit3493 ], [ %4770, %block_450d61 ], [ %7772, %routine_idivl__esi.exit2071 ]
  %7849 = add i64 %7847, -16
  %7850 = add i64 %7848, 8
  store i64 %7850, i64* %3, align 8
  %7851 = inttoptr i64 %7849 to i32*
  %7852 = load i32, i32* %7851, align 4
  %7853 = add i32 %7852, 1
  %7854 = zext i32 %7853 to i64
  store i64 %7854, i64* %RAX.i186, align 8
  %7855 = icmp eq i32 %7852, -1
  %7856 = icmp eq i32 %7853, 0
  %7857 = or i1 %7855, %7856
  %7858 = zext i1 %7857 to i8
  store i8 %7858, i8* %14, align 1
  %7859 = and i32 %7853, 255
  %7860 = tail call i32 @llvm.ctpop.i32(i32 %7859)
  %7861 = trunc i32 %7860 to i8
  %7862 = and i8 %7861, 1
  %7863 = xor i8 %7862, 1
  store i8 %7863, i8* %21, align 1
  %7864 = xor i32 %7853, %7852
  %7865 = lshr i32 %7864, 4
  %7866 = trunc i32 %7865 to i8
  %7867 = and i8 %7866, 1
  store i8 %7867, i8* %27, align 1
  %7868 = zext i1 %7856 to i8
  store i8 %7868, i8* %30, align 1
  %7869 = lshr i32 %7853, 31
  %7870 = trunc i32 %7869 to i8
  store i8 %7870, i8* %33, align 1
  %7871 = lshr i32 %7852, 31
  %7872 = xor i32 %7869, %7871
  %7873 = add nuw nsw i32 %7872, %7869
  %7874 = icmp eq i32 %7873, 2
  %7875 = zext i1 %7874 to i8
  store i8 %7875, i8* %39, align 1
  %7876 = add i64 %7848, 14
  store i64 %7876, i64* %3, align 8
  store i32 %7853, i32* %7851, align 4
  %7877 = load i64, i64* %3, align 8
  %7878 = add i64 %7877, -2113
  store i64 %7878, i64* %3, align 8
  br label %block_.L_450ca2

block_.L_4514e8:                                  ; preds = %routine_idivl__esi.exit3599
  %7879 = load i64, i64* %RBP.i, align 8
  %7880 = add i64 %7879, -12
  %7881 = add i64 %4511, 8
  store i64 %7881, i64* %3, align 8
  %7882 = inttoptr i64 %7880 to i32*
  %7883 = load i32, i32* %7882, align 4
  %7884 = add i32 %7883, 1
  %7885 = zext i32 %7884 to i64
  store i64 %7885, i64* %RAX.i186, align 8
  %7886 = icmp eq i32 %7883, -1
  %7887 = icmp eq i32 %7884, 0
  %7888 = or i1 %7886, %7887
  %7889 = zext i1 %7888 to i8
  store i8 %7889, i8* %14, align 1
  %7890 = and i32 %7884, 255
  %7891 = tail call i32 @llvm.ctpop.i32(i32 %7890)
  %7892 = trunc i32 %7891 to i8
  %7893 = and i8 %7892, 1
  %7894 = xor i8 %7893, 1
  store i8 %7894, i8* %21, align 1
  %7895 = xor i32 %7884, %7883
  %7896 = lshr i32 %7895, 4
  %7897 = trunc i32 %7896 to i8
  %7898 = and i8 %7897, 1
  store i8 %7898, i8* %27, align 1
  %7899 = zext i1 %7887 to i8
  store i8 %7899, i8* %30, align 1
  %7900 = lshr i32 %7884, 31
  %7901 = trunc i32 %7900 to i8
  store i8 %7901, i8* %33, align 1
  %7902 = lshr i32 %7883, 31
  %7903 = xor i32 %7900, %7902
  %7904 = add nuw nsw i32 %7903, %7900
  %7905 = icmp eq i32 %7904, 2
  %7906 = zext i1 %7905 to i8
  store i8 %7906, i8* %39, align 1
  %7907 = add i64 %4511, 14
  store i64 %7907, i64* %3, align 8
  store i32 %7884, i32* %7882, align 4
  %7908 = load i64, i64* %3, align 8
  %7909 = add i64 %7908, -2186
  store i64 %7909, i64* %3, align 8
  br label %block_.L_450c6c

block_.L_4514fb:                                  ; preds = %routine_idivl__esi.exit3634
  %7910 = add i64 %4427, 5
  store i64 %7910, i64* %3, align 8
  %.pre294 = load i64, i64* %RBP.i, align 8
  br label %block_.L_451500

block_.L_451500:                                  ; preds = %block_450c50.block_.L_451500_crit_edge, %block_.L_4514fb
  %R8.i1900.pre-phi = phi i64* [ %.pre509, %block_450c50.block_.L_451500_crit_edge ], [ %R8.i3546, %block_.L_4514fb ]
  %EDI.i1905.pre-phi = phi i32* [ %.pre508, %block_450c50.block_.L_451500_crit_edge ], [ %EDI.i3551, %block_.L_4514fb ]
  %7911 = phi i64 [ %4342, %block_450c50.block_.L_451500_crit_edge ], [ %7910, %block_.L_4514fb ]
  %7912 = phi i64 [ %2781, %block_450c50.block_.L_451500_crit_edge ], [ %.pre294, %block_.L_4514fb ]
  %MEMORY.22 = phi %struct.Memory* [ %2784, %block_450c50.block_.L_451500_crit_edge ], [ %4399, %block_.L_4514fb ]
  %7913 = add i64 %7912, -12
  %7914 = add i64 %7911, 7
  store i64 %7914, i64* %3, align 8
  %7915 = inttoptr i64 %7913 to i32*
  store i32 0, i32* %7915, align 4
  %SI.i1634 = bitcast %union.anon* %.pre-phi495 to i16*
  %.pre295 = load i64, i64* %3, align 8
  br label %block_.L_451507

block_.L_451507:                                  ; preds = %block_.L_452000, %block_.L_451500
  %7916 = phi i64 [ %.pre295, %block_.L_451500 ], [ %11071, %block_.L_452000 ]
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.22, %block_.L_451500 ], [ %8051, %block_.L_452000 ]
  store i64 4, i64* %RAX.i186, align 8
  %7917 = load i64, i64* %RBP.i, align 8
  %7918 = add i64 %7917, -12
  %7919 = add i64 %7916, 8
  store i64 %7919, i64* %3, align 8
  %7920 = inttoptr i64 %7918 to i32*
  %7921 = load i32, i32* %7920, align 4
  %7922 = zext i32 %7921 to i64
  store i64 %7922, i64* %RCX.i4414.pre-phi, align 8
  %7923 = add i64 %7917, -8
  %7924 = add i64 %7916, 12
  store i64 %7924, i64* %3, align 8
  %7925 = inttoptr i64 %7923 to i64*
  %7926 = load i64, i64* %7925, align 8
  store i64 %7926, i64* %RDX.i4411.pre-phi, align 8
  %7927 = add i64 %7926, 40
  %7928 = add i64 %7916, 16
  store i64 %7928, i64* %3, align 8
  %7929 = inttoptr i64 %7927 to i64*
  %7930 = load i64, i64* %7929, align 8
  store i64 %7930, i64* %RDX.i4411.pre-phi, align 8
  %7931 = add i64 %7930, 6392
  %7932 = add i64 %7916, 22
  store i64 %7932, i64* %3, align 8
  %7933 = inttoptr i64 %7931 to i32*
  %7934 = load i32, i32* %7933, align 4
  %7935 = zext i32 %7934 to i64
  store i64 %7935, i64* %RSI.i4407.pre-phi, align 8
  %7936 = add i64 %7917, -316
  %7937 = add i64 %7916, 28
  store i64 %7937, i64* %3, align 8
  %7938 = inttoptr i64 %7936 to i32*
  store i32 4, i32* %7938, align 4
  %7939 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %7940 = zext i32 %7939 to i64
  %7941 = load i64, i64* %3, align 8
  store i64 %7940, i64* %RAX.i186, align 8
  %7942 = sext i32 %7939 to i64
  %7943 = lshr i64 %7942, 32
  store i64 %7943, i64* %.pre-phi499, align 8
  %7944 = load i64, i64* %RBP.i, align 8
  %7945 = add i64 %7944, -316
  %7946 = add i64 %7941, 9
  store i64 %7946, i64* %3, align 8
  %7947 = inttoptr i64 %7945 to i32*
  %7948 = load i32, i32* %7947, align 4
  %7949 = zext i32 %7948 to i64
  store i64 %7949, i64* %RSI.i4407.pre-phi, align 8
  %7950 = add i64 %7941, 11
  store i64 %7950, i64* %3, align 8
  %7951 = sext i32 %7948 to i64
  %7952 = shl nuw i64 %7943, 32
  %7953 = or i64 %7952, %7940
  %7954 = sdiv i64 %7953, %7951
  %7955 = shl i64 %7954, 32
  %7956 = ashr exact i64 %7955, 32
  %7957 = icmp eq i64 %7954, %7956
  br i1 %7957, label %7960, label %7958

; <label>:7958:                                   ; preds = %block_.L_451507
  %7959 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7950, %struct.Memory* %MEMORY.23)
  %.pre296 = load i32, i32* %EAX.i304, align 4
  %.pre297 = load i64, i64* %3, align 8
  %.pre298 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit1987

; <label>:7960:                                   ; preds = %block_.L_451507
  %7961 = srem i64 %7953, %7951
  %7962 = and i64 %7954, 4294967295
  store i64 %7962, i64* %RAX.i186, align 8
  %7963 = and i64 %7961, 4294967295
  store i64 %7963, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %7964 = trunc i64 %7954 to i32
  br label %routine_idivl__esi.exit1987

routine_idivl__esi.exit1987:                      ; preds = %7960, %7958
  %7965 = phi i64 [ %.pre298, %7958 ], [ %7944, %7960 ]
  %7966 = phi i64 [ %.pre297, %7958 ], [ %7950, %7960 ]
  %7967 = phi i32 [ %.pre296, %7958 ], [ %7964, %7960 ]
  %7968 = phi %struct.Memory* [ %7959, %7958 ], [ %MEMORY.23, %7960 ]
  %7969 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %7970 = sub i32 %7969, %7967
  %7971 = icmp ult i32 %7969, %7967
  %7972 = zext i1 %7971 to i8
  store i8 %7972, i8* %14, align 1
  %7973 = and i32 %7970, 255
  %7974 = tail call i32 @llvm.ctpop.i32(i32 %7973)
  %7975 = trunc i32 %7974 to i8
  %7976 = and i8 %7975, 1
  %7977 = xor i8 %7976, 1
  store i8 %7977, i8* %21, align 1
  %7978 = xor i32 %7967, %7969
  %7979 = xor i32 %7978, %7970
  %7980 = lshr i32 %7979, 4
  %7981 = trunc i32 %7980 to i8
  %7982 = and i8 %7981, 1
  store i8 %7982, i8* %27, align 1
  %7983 = icmp eq i32 %7970, 0
  %7984 = zext i1 %7983 to i8
  store i8 %7984, i8* %30, align 1
  %7985 = lshr i32 %7970, 31
  %7986 = trunc i32 %7985 to i8
  store i8 %7986, i8* %33, align 1
  %7987 = lshr i32 %7969, 31
  %7988 = lshr i32 %7967, 31
  %7989 = xor i32 %7988, %7987
  %7990 = xor i32 %7985, %7987
  %7991 = add nuw nsw i32 %7990, %7989
  %7992 = icmp eq i32 %7991, 2
  %7993 = zext i1 %7992 to i8
  store i8 %7993, i8* %39, align 1
  %7994 = icmp ne i8 %7986, 0
  %7995 = xor i1 %7994, %7992
  %.v511 = select i1 %7995, i64 8, i64 2789
  %7996 = add i64 %7966, %.v511
  %7997 = add i64 %7965, -16
  %7998 = add i64 %7996, 7
  store i64 %7998, i64* %3, align 8
  %7999 = inttoptr i64 %7997 to i32*
  store i32 0, i32* %7999, align 4
  %.pre327 = load i64, i64* %3, align 8
  br i1 %7995, label %block_.L_45153d.preheader, label %block_.L_45201a.preheader

block_.L_45153d.preheader:                        ; preds = %routine_idivl__esi.exit1987
  br label %block_.L_45153d

block_.L_45201a.preheader:                        ; preds = %routine_idivl__esi.exit1987
  br label %block_.L_45201a

block_.L_45153d:                                  ; preds = %block_.L_45153d.preheader, %block_.L_451fed
  %8000 = phi i64 [ %11040, %block_.L_451fed ], [ %.pre327, %block_.L_45153d.preheader ]
  %MEMORY.24 = phi %struct.Memory* [ %8338, %block_.L_451fed ], [ %7968, %block_.L_45153d.preheader ]
  store i64 8, i64* %RAX.i186, align 8
  %8001 = load i64, i64* %RBP.i, align 8
  %8002 = add i64 %8001, -16
  %8003 = add i64 %8000, 8
  store i64 %8003, i64* %3, align 8
  %8004 = inttoptr i64 %8002 to i32*
  %8005 = load i32, i32* %8004, align 4
  %8006 = zext i32 %8005 to i64
  store i64 %8006, i64* %RCX.i4414.pre-phi, align 8
  %8007 = add i64 %8001, -8
  %8008 = add i64 %8000, 12
  store i64 %8008, i64* %3, align 8
  %8009 = inttoptr i64 %8007 to i64*
  %8010 = load i64, i64* %8009, align 8
  store i64 %8010, i64* %RDX.i4411.pre-phi, align 8
  %8011 = add i64 %8010, 40
  %8012 = add i64 %8000, 16
  store i64 %8012, i64* %3, align 8
  %8013 = inttoptr i64 %8011 to i64*
  %8014 = load i64, i64* %8013, align 8
  store i64 %8014, i64* %RDX.i4411.pre-phi, align 8
  %8015 = add i64 %8014, 6396
  %8016 = add i64 %8000, 22
  store i64 %8016, i64* %3, align 8
  %8017 = inttoptr i64 %8015 to i32*
  %8018 = load i32, i32* %8017, align 4
  %8019 = zext i32 %8018 to i64
  store i64 %8019, i64* %RSI.i4407.pre-phi, align 8
  %8020 = add i64 %8001, -320
  %8021 = add i64 %8000, 28
  store i64 %8021, i64* %3, align 8
  %8022 = inttoptr i64 %8020 to i32*
  store i32 8, i32* %8022, align 4
  %8023 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %8024 = zext i32 %8023 to i64
  %8025 = load i64, i64* %3, align 8
  store i64 %8024, i64* %RAX.i186, align 8
  %8026 = sext i32 %8023 to i64
  %8027 = lshr i64 %8026, 32
  store i64 %8027, i64* %.pre-phi499, align 8
  %8028 = load i64, i64* %RBP.i, align 8
  %8029 = add i64 %8028, -320
  %8030 = add i64 %8025, 9
  store i64 %8030, i64* %3, align 8
  %8031 = inttoptr i64 %8029 to i32*
  %8032 = load i32, i32* %8031, align 4
  %8033 = zext i32 %8032 to i64
  store i64 %8033, i64* %RSI.i4407.pre-phi, align 8
  %8034 = add i64 %8025, 11
  store i64 %8034, i64* %3, align 8
  %8035 = sext i32 %8032 to i64
  %8036 = shl nuw i64 %8027, 32
  %8037 = or i64 %8036, %8024
  %8038 = sdiv i64 %8037, %8035
  %8039 = shl i64 %8038, 32
  %8040 = ashr exact i64 %8039, 32
  %8041 = icmp eq i64 %8038, %8040
  br i1 %8041, label %8044, label %8042

; <label>:8042:                                   ; preds = %block_.L_45153d
  %8043 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8034, %struct.Memory* %MEMORY.24)
  %.pre328 = load i32, i32* %EAX.i304, align 4
  %.pre329 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit1952

; <label>:8044:                                   ; preds = %block_.L_45153d
  %8045 = srem i64 %8037, %8035
  %8046 = and i64 %8038, 4294967295
  store i64 %8046, i64* %RAX.i186, align 8
  %8047 = and i64 %8045, 4294967295
  store i64 %8047, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8048 = trunc i64 %8038 to i32
  br label %routine_idivl__esi.exit1952

routine_idivl__esi.exit1952:                      ; preds = %8044, %8042
  %8049 = phi i64 [ %.pre329, %8042 ], [ %8034, %8044 ]
  %8050 = phi i32 [ %.pre328, %8042 ], [ %8048, %8044 ]
  %8051 = phi %struct.Memory* [ %8043, %8042 ], [ %MEMORY.24, %8044 ]
  %8052 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %8053 = sub i32 %8052, %8050
  %8054 = icmp ult i32 %8052, %8050
  %8055 = zext i1 %8054 to i8
  store i8 %8055, i8* %14, align 1
  %8056 = and i32 %8053, 255
  %8057 = tail call i32 @llvm.ctpop.i32(i32 %8056)
  %8058 = trunc i32 %8057 to i8
  %8059 = and i8 %8058, 1
  %8060 = xor i8 %8059, 1
  store i8 %8060, i8* %21, align 1
  %8061 = xor i32 %8050, %8052
  %8062 = xor i32 %8061, %8053
  %8063 = lshr i32 %8062, 4
  %8064 = trunc i32 %8063 to i8
  %8065 = and i8 %8064, 1
  store i8 %8065, i8* %27, align 1
  %8066 = icmp eq i32 %8053, 0
  %8067 = zext i1 %8066 to i8
  store i8 %8067, i8* %30, align 1
  %8068 = lshr i32 %8053, 31
  %8069 = trunc i32 %8068 to i8
  store i8 %8069, i8* %33, align 1
  %8070 = lshr i32 %8052, 31
  %8071 = lshr i32 %8050, 31
  %8072 = xor i32 %8071, %8070
  %8073 = xor i32 %8068, %8070
  %8074 = add nuw nsw i32 %8073, %8072
  %8075 = icmp eq i32 %8074, 2
  %8076 = zext i1 %8075 to i8
  store i8 %8076, i8* %39, align 1
  %8077 = icmp ne i8 %8069, 0
  %8078 = xor i1 %8077, %8075
  %.v542 = select i1 %8078, i64 8, i64 2716
  %8079 = add i64 %8049, %.v542
  %8080 = add i64 %8079, 5
  store i64 %8080, i64* %3, align 8
  br i1 %8078, label %block_45156c, label %block_.L_452000

block_45156c:                                     ; preds = %routine_idivl__esi.exit1952
  store i64 2, i64* %RAX.i186, align 8
  store i64 16, i64* %RCX.i4414.pre-phi, align 8
  store i64 4, i64* %RDX.i4411.pre-phi, align 8
  %8081 = load i64, i64* %RBP.i, align 8
  %8082 = add i64 %8081, -12
  %8083 = add i64 %8079, 18
  store i64 %8083, i64* %3, align 8
  %8084 = inttoptr i64 %8082 to i32*
  %8085 = load i32, i32* %8084, align 4
  %8086 = zext i32 %8085 to i64
  store i64 %8086, i64* %RSI.i4407.pre-phi, align 8
  %8087 = add i64 %8081, -324
  %8088 = add i64 %8079, 24
  store i64 %8088, i64* %3, align 8
  %8089 = inttoptr i64 %8087 to i32*
  store i32 2, i32* %8089, align 4
  %8090 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %8091 = zext i32 %8090 to i64
  %8092 = load i64, i64* %3, align 8
  store i64 %8091, i64* %RAX.i186, align 8
  %8093 = load i64, i64* %RBP.i, align 8
  %8094 = add i64 %8093, -328
  %8095 = load i32, i32* %.pre-phi501, align 4
  %8096 = add i64 %8092, 8
  store i64 %8096, i64* %3, align 8
  %8097 = inttoptr i64 %8094 to i32*
  store i32 %8095, i32* %8097, align 4
  %8098 = load i64, i64* %3, align 8
  %8099 = load i32, i32* %EAX.i304, align 8
  %8100 = sext i32 %8099 to i64
  %8101 = lshr i64 %8100, 32
  store i64 %8101, i64* %.pre-phi499, align 8
  %8102 = load i64, i64* %RBP.i, align 8
  %8103 = add i64 %8102, -328
  %8104 = add i64 %8098, 7
  store i64 %8104, i64* %3, align 8
  %8105 = inttoptr i64 %8103 to i32*
  %8106 = load i32, i32* %8105, align 4
  %8107 = zext i32 %8106 to i64
  store i64 %8107, i64* %RSI.i4407.pre-phi, align 8
  %8108 = add i64 %8098, 9
  store i64 %8108, i64* %3, align 8
  %8109 = zext i32 %8099 to i64
  %8110 = sext i32 %8106 to i64
  %8111 = shl nuw i64 %8101, 32
  %8112 = or i64 %8111, %8109
  %8113 = sdiv i64 %8112, %8110
  %8114 = shl i64 %8113, 32
  %8115 = ashr exact i64 %8114, 32
  %8116 = icmp eq i64 %8113, %8115
  br i1 %8116, label %8119, label %8117

; <label>:8117:                                   ; preds = %block_45156c
  %8118 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8108, %struct.Memory* %8051)
  %.pre330 = load i64, i64* %RBP.i, align 8
  %.pre331 = load i32, i32* %EAX.i304, align 4
  %.pre332 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit1921

; <label>:8119:                                   ; preds = %block_45156c
  %8120 = srem i64 %8112, %8110
  %8121 = and i64 %8113, 4294967295
  store i64 %8121, i64* %RAX.i186, align 8
  %8122 = and i64 %8120, 4294967295
  store i64 %8122, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8123 = trunc i64 %8113 to i32
  br label %routine_idivl__esi.exit1921

routine_idivl__esi.exit1921:                      ; preds = %8119, %8117
  %8124 = phi i64 [ %.pre332, %8117 ], [ %8108, %8119 ]
  %8125 = phi i32 [ %.pre331, %8117 ], [ %8123, %8119 ]
  %8126 = phi i64 [ %.pre330, %8117 ], [ %8102, %8119 ]
  %8127 = phi %struct.Memory* [ %8118, %8117 ], [ %8051, %8119 ]
  %8128 = add i64 %8126, -56
  %8129 = add i64 %8124, 3
  store i64 %8129, i64* %3, align 8
  %8130 = inttoptr i64 %8128 to i32*
  store i32 %8125, i32* %8130, align 4
  %8131 = load i64, i64* %RBP.i, align 8
  %8132 = add i64 %8131, -16
  %8133 = load i64, i64* %3, align 8
  %8134 = add i64 %8133, 3
  store i64 %8134, i64* %3, align 8
  %8135 = inttoptr i64 %8132 to i32*
  %8136 = load i32, i32* %8135, align 4
  %8137 = zext i32 %8136 to i64
  store i64 %8137, i64* %RAX.i186, align 8
  %8138 = sext i32 %8136 to i64
  %8139 = lshr i64 %8138, 32
  store i64 %8139, i64* %.pre-phi499, align 8
  %8140 = add i64 %8131, -324
  %8141 = add i64 %8133, 10
  store i64 %8141, i64* %3, align 8
  %8142 = inttoptr i64 %8140 to i32*
  %8143 = load i32, i32* %8142, align 4
  %8144 = zext i32 %8143 to i64
  store i64 %8144, i64* %RDI.i126, align 8
  %8145 = add i64 %8133, 12
  store i64 %8145, i64* %3, align 8
  %8146 = sext i32 %8143 to i64
  %8147 = shl nuw i64 %8139, 32
  %8148 = or i64 %8147, %8137
  %8149 = sdiv i64 %8148, %8146
  %8150 = shl i64 %8149, 32
  %8151 = ashr exact i64 %8150, 32
  %8152 = icmp eq i64 %8149, %8151
  br i1 %8152, label %8155, label %8153

; <label>:8153:                                   ; preds = %routine_idivl__esi.exit1921
  %8154 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8145, %struct.Memory* %8127)
  %.pre333 = load i64, i64* %RBP.i, align 8
  %.pre334 = load i32, i32* %EAX.i304, align 4
  %.pre335 = load i64, i64* %3, align 8
  br label %routine_idivl__edi.exit1906

; <label>:8155:                                   ; preds = %routine_idivl__esi.exit1921
  %8156 = srem i64 %8148, %8146
  %8157 = and i64 %8149, 4294967295
  store i64 %8157, i64* %RAX.i186, align 8
  %8158 = and i64 %8156, 4294967295
  store i64 %8158, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8159 = trunc i64 %8149 to i32
  br label %routine_idivl__edi.exit1906

routine_idivl__edi.exit1906:                      ; preds = %8155, %8153
  %8160 = phi i64 [ %.pre335, %8153 ], [ %8145, %8155 ]
  %8161 = phi i32 [ %.pre334, %8153 ], [ %8159, %8155 ]
  %8162 = phi i64 [ %.pre333, %8153 ], [ %8131, %8155 ]
  %8163 = phi %struct.Memory* [ %8154, %8153 ], [ %8127, %8155 ]
  %8164 = add i64 %8162, -60
  %8165 = add i64 %8160, 3
  store i64 %8165, i64* %3, align 8
  %8166 = inttoptr i64 %8164 to i32*
  store i32 %8161, i32* %8166, align 4
  %8167 = load i64, i64* %RBP.i, align 8
  %8168 = add i64 %8167, -8
  %8169 = load i64, i64* %3, align 8
  %8170 = add i64 %8169, 4
  store i64 %8170, i64* %3, align 8
  %8171 = inttoptr i64 %8168 to i64*
  %8172 = load i64, i64* %8171, align 8
  store i64 %8172, i64* %R8.i1900.pre-phi, align 8
  %8173 = add i64 %8172, 40
  %8174 = add i64 %8169, 8
  store i64 %8174, i64* %3, align 8
  %8175 = inttoptr i64 %8173 to i64*
  %8176 = load i64, i64* %8175, align 8
  store i64 %8176, i64* %R8.i1900.pre-phi, align 8
  %8177 = add i64 %8176, 6392
  %8178 = add i64 %8169, 15
  store i64 %8178, i64* %3, align 8
  %8179 = inttoptr i64 %8177 to i32*
  %8180 = load i32, i32* %8179, align 4
  %8181 = zext i32 %8180 to i64
  store i64 %8181, i64* %RAX.i186, align 8
  %8182 = sext i32 %8180 to i64
  %8183 = lshr i64 %8182, 32
  store i64 %8183, i64* %.pre-phi499, align 8
  %8184 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %8185 = add i64 %8169, 18
  store i64 %8185, i64* %3, align 8
  %8186 = sext i32 %8184 to i64
  %8187 = shl nuw i64 %8183, 32
  %8188 = or i64 %8187, %8181
  %8189 = sdiv i64 %8188, %8186
  %8190 = shl i64 %8189, 32
  %8191 = ashr exact i64 %8190, 32
  %8192 = icmp eq i64 %8189, %8191
  br i1 %8192, label %8195, label %8193

; <label>:8193:                                   ; preds = %routine_idivl__edi.exit1906
  %8194 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8185, %struct.Memory* %8163)
  %.pre336 = load i64, i64* %RAX.i186, align 8
  %.pre337 = load i64, i64* %3, align 8
  %.pre338 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1890

; <label>:8195:                                   ; preds = %routine_idivl__edi.exit1906
  %8196 = srem i64 %8188, %8186
  %8197 = and i64 %8189, 4294967295
  store i64 %8197, i64* %RAX.i186, align 8
  %8198 = and i64 %8196, 4294967295
  store i64 %8198, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__ecx.exit1890

routine_idivl__ecx.exit1890:                      ; preds = %8195, %8193
  %8199 = phi i64 [ %.pre338, %8193 ], [ %8167, %8195 ]
  %8200 = phi i64 [ %.pre337, %8193 ], [ %8185, %8195 ]
  %8201 = phi i64 [ %.pre336, %8193 ], [ %8197, %8195 ]
  %8202 = phi %struct.Memory* [ %8194, %8193 ], [ %8163, %8195 ]
  %8203 = trunc i64 %8201 to i32
  %8204 = shl i32 %8203, 1
  %8205 = icmp slt i32 %8203, 0
  %8206 = icmp slt i32 %8204, 0
  %8207 = xor i1 %8205, %8206
  %8208 = zext i32 %8204 to i64
  store i64 %8208, i64* %RAX.i186, align 8
  %.lobit143 = lshr i32 %8203, 31
  %8209 = trunc i32 %.lobit143 to i8
  store i8 %8209, i8* %14, align 1
  %8210 = and i32 %8204, 254
  %8211 = tail call i32 @llvm.ctpop.i32(i32 %8210)
  %8212 = trunc i32 %8211 to i8
  %8213 = and i8 %8212, 1
  %8214 = xor i8 %8213, 1
  store i8 %8214, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8215 = icmp eq i32 %8204, 0
  %8216 = zext i1 %8215 to i8
  store i8 %8216, i8* %30, align 1
  %8217 = lshr i32 %8203, 30
  %8218 = trunc i32 %8217 to i8
  %8219 = and i8 %8218, 1
  store i8 %8219, i8* %33, align 1
  %8220 = zext i1 %8207 to i8
  store i8 %8220, i8* %39, align 1
  %8221 = add i64 %8199, -60
  %8222 = add i64 %8200, 5
  store i64 %8222, i64* %3, align 8
  %8223 = inttoptr i64 %8221 to i32*
  %8224 = load i32, i32* %8223, align 4
  %8225 = zext i32 %8224 to i64
  store i64 %8225, i64* %RCX.i4414.pre-phi, align 8
  %8226 = add i64 %8199, -332
  %8227 = add i64 %8200, 11
  store i64 %8227, i64* %3, align 8
  %8228 = inttoptr i64 %8226 to i32*
  store i32 %8204, i32* %8228, align 4
  %8229 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %8230 = zext i32 %8229 to i64
  %8231 = load i64, i64* %3, align 8
  store i64 %8230, i64* %RAX.i186, align 8
  %8232 = sext i32 %8229 to i64
  %8233 = lshr i64 %8232, 32
  store i64 %8233, i64* %.pre-phi499, align 8
  %8234 = load i32, i32* %EDI.i1905.pre-phi, align 4
  %8235 = add i64 %8231, 5
  store i64 %8235, i64* %3, align 8
  %8236 = sext i32 %8234 to i64
  %8237 = shl nuw i64 %8233, 32
  %8238 = or i64 %8237, %8230
  %8239 = sdiv i64 %8238, %8236
  %8240 = shl i64 %8239, 32
  %8241 = ashr exact i64 %8240, 32
  %8242 = icmp eq i64 %8239, %8241
  br i1 %8242, label %8245, label %8243

; <label>:8243:                                   ; preds = %routine_idivl__ecx.exit1890
  %8244 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8235, %struct.Memory* %8202)
  %.pre339 = load i64, i64* %3, align 8
  %.pre340 = load i32, i32* %EAX.i304, align 4
  br label %routine_idivl__edi.exit1873

; <label>:8245:                                   ; preds = %routine_idivl__ecx.exit1890
  %8246 = srem i64 %8238, %8236
  %8247 = and i64 %8239, 4294967295
  store i64 %8247, i64* %RAX.i186, align 8
  %8248 = and i64 %8246, 4294967295
  store i64 %8248, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8249 = trunc i64 %8239 to i32
  br label %routine_idivl__edi.exit1873

routine_idivl__edi.exit1873:                      ; preds = %8245, %8243
  %8250 = phi i32 [ %.pre340, %8243 ], [ %8249, %8245 ]
  %8251 = phi i64 [ %.pre339, %8243 ], [ %8235, %8245 ]
  %8252 = phi %struct.Memory* [ %8244, %8243 ], [ %8202, %8245 ]
  %8253 = load i64, i64* %RBP.i, align 8
  %8254 = add i64 %8253, -332
  %8255 = add i64 %8251, 6
  store i64 %8255, i64* %3, align 8
  %8256 = inttoptr i64 %8254 to i32*
  %8257 = load i32, i32* %8256, align 4
  %8258 = sext i32 %8257 to i64
  %8259 = sext i32 %8250 to i64
  %8260 = mul nsw i64 %8259, %8258
  %8261 = trunc i64 %8260 to i32
  %8262 = and i64 %8260, 4294967295
  store i64 %8262, i64* %RCX.i4414.pre-phi, align 8
  %8263 = shl i64 %8260, 32
  %8264 = ashr exact i64 %8263, 32
  %8265 = icmp ne i64 %8264, %8260
  %8266 = zext i1 %8265 to i8
  store i8 %8266, i8* %14, align 1
  %8267 = and i32 %8261, 255
  %8268 = tail call i32 @llvm.ctpop.i32(i32 %8267)
  %8269 = trunc i32 %8268 to i8
  %8270 = and i8 %8269, 1
  %8271 = xor i8 %8270, 1
  store i8 %8271, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %8272 = lshr i32 %8261, 31
  %8273 = trunc i32 %8272 to i8
  store i8 %8273, i8* %33, align 1
  store i8 %8266, i8* %39, align 1
  %8274 = add i64 %8253, -56
  %8275 = add i64 %8251, 12
  store i64 %8275, i64* %3, align 8
  %8276 = inttoptr i64 %8274 to i32*
  %8277 = load i32, i32* %8276, align 4
  %8278 = shl i32 %8277, 1
  %8279 = zext i32 %8278 to i64
  store i64 %8279, i64* %RAX.i186, align 8
  %8280 = trunc i64 %8260 to i32
  %8281 = add i32 %8278, %8280
  %8282 = zext i32 %8281 to i64
  store i64 %8282, i64* %RCX.i4414.pre-phi, align 8
  %8283 = icmp ult i32 %8281, %8280
  %8284 = icmp ult i32 %8281, %8278
  %8285 = or i1 %8283, %8284
  %8286 = zext i1 %8285 to i8
  store i8 %8286, i8* %14, align 1
  %8287 = and i32 %8281, 255
  %8288 = tail call i32 @llvm.ctpop.i32(i32 %8287)
  %8289 = trunc i32 %8288 to i8
  %8290 = and i8 %8289, 1
  %8291 = xor i8 %8290, 1
  store i8 %8291, i8* %21, align 1
  %8292 = xor i64 %8279, %8260
  %8293 = trunc i64 %8292 to i32
  %8294 = xor i32 %8293, %8281
  %8295 = lshr i32 %8294, 4
  %8296 = trunc i32 %8295 to i8
  %8297 = and i8 %8296, 1
  store i8 %8297, i8* %27, align 1
  %8298 = icmp eq i32 %8281, 0
  %8299 = zext i1 %8298 to i8
  store i8 %8299, i8* %30, align 1
  %8300 = lshr i32 %8281, 31
  %8301 = trunc i32 %8300 to i8
  store i8 %8301, i8* %33, align 1
  %8302 = lshr i32 %8280, 31
  %8303 = lshr i32 %8277, 30
  %8304 = and i32 %8303, 1
  %8305 = xor i32 %8300, %8302
  %8306 = xor i32 %8300, %8304
  %8307 = add nuw nsw i32 %8305, %8306
  %8308 = icmp eq i32 %8307, 2
  %8309 = zext i1 %8308 to i8
  store i8 %8309, i8* %39, align 1
  %8310 = load i64, i64* %RBP.i, align 8
  %8311 = add i64 %8310, -60
  %8312 = add i64 %8251, 19
  store i64 %8312, i64* %3, align 8
  %8313 = inttoptr i64 %8311 to i32*
  %8314 = load i32, i32* %8313, align 4
  %8315 = zext i32 %8314 to i64
  store i64 %8315, i64* %RAX.i186, align 8
  %8316 = sext i32 %8314 to i64
  %8317 = lshr i64 %8316, 32
  store i64 %8317, i64* %.pre-phi499, align 8
  %8318 = load i32, i32* %EDI.i1905.pre-phi, align 4
  %8319 = add i64 %8251, 22
  store i64 %8319, i64* %3, align 8
  %8320 = sext i32 %8318 to i64
  %8321 = shl nuw i64 %8317, 32
  %8322 = or i64 %8321, %8315
  %8323 = sdiv i64 %8322, %8320
  %8324 = shl i64 %8323, 32
  %8325 = ashr exact i64 %8324, 32
  %8326 = icmp eq i64 %8323, %8325
  br i1 %8326, label %8329, label %8327

; <label>:8327:                                   ; preds = %routine_idivl__edi.exit1873
  %8328 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8319, %struct.Memory* %8252)
  %.pre341 = load i64, i64* %RCX.i4414.pre-phi, align 8
  %.pre342 = load i32, i32* %.pre-phi501, align 4
  %.pre343 = load i64, i64* %3, align 8
  %.pre344 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit

; <label>:8329:                                   ; preds = %routine_idivl__edi.exit1873
  %8330 = srem i64 %8322, %8320
  %8331 = and i64 %8323, 4294967295
  store i64 %8331, i64* %RAX.i186, align 8
  %8332 = and i64 %8330, 4294967295
  store i64 %8332, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8333 = trunc i64 %8330 to i32
  br label %routine_idivl__edi.exit

routine_idivl__edi.exit:                          ; preds = %8329, %8327
  %8334 = phi i64 [ %.pre344, %8327 ], [ %8310, %8329 ]
  %8335 = phi i64 [ %.pre343, %8327 ], [ %8319, %8329 ]
  %8336 = phi i32 [ %.pre342, %8327 ], [ %8333, %8329 ]
  %8337 = phi i64 [ %.pre341, %8327 ], [ %8282, %8329 ]
  %8338 = phi %struct.Memory* [ %8328, %8327 ], [ %8252, %8329 ]
  %8339 = zext i32 %8336 to i64
  %8340 = trunc i64 %8337 to i32
  %8341 = add i32 %8336, %8340
  %8342 = zext i32 %8341 to i64
  store i64 %8342, i64* %RCX.i4414.pre-phi, align 8
  %8343 = icmp ult i32 %8341, %8340
  %8344 = icmp ult i32 %8341, %8336
  %8345 = or i1 %8343, %8344
  %8346 = zext i1 %8345 to i8
  store i8 %8346, i8* %14, align 1
  %8347 = and i32 %8341, 255
  %8348 = tail call i32 @llvm.ctpop.i32(i32 %8347)
  %8349 = trunc i32 %8348 to i8
  %8350 = and i8 %8349, 1
  %8351 = xor i8 %8350, 1
  store i8 %8351, i8* %21, align 1
  %8352 = xor i64 %8339, %8337
  %8353 = trunc i64 %8352 to i32
  %8354 = xor i32 %8353, %8341
  %8355 = lshr i32 %8354, 4
  %8356 = trunc i32 %8355 to i8
  %8357 = and i8 %8356, 1
  store i8 %8357, i8* %27, align 1
  %8358 = icmp eq i32 %8341, 0
  %8359 = zext i1 %8358 to i8
  store i8 %8359, i8* %30, align 1
  %8360 = lshr i32 %8341, 31
  %8361 = trunc i32 %8360 to i8
  store i8 %8361, i8* %33, align 1
  %8362 = lshr i32 %8340, 31
  %8363 = lshr i32 %8336, 31
  %8364 = xor i32 %8360, %8362
  %8365 = xor i32 %8360, %8363
  %8366 = add nuw nsw i32 %8364, %8365
  %8367 = icmp eq i32 %8366, 2
  %8368 = zext i1 %8367 to i8
  store i8 %8368, i8* %39, align 1
  %8369 = add i64 %8334, -64
  %8370 = add i64 %8335, 5
  store i64 %8370, i64* %3, align 8
  %8371 = inttoptr i64 %8369 to i32*
  store i32 %8341, i32* %8371, align 4
  %8372 = load i64, i64* %RBP.i, align 8
  %8373 = add i64 %8372, -8
  %8374 = load i64, i64* %3, align 8
  %8375 = add i64 %8374, 4
  store i64 %8375, i64* %3, align 8
  %8376 = inttoptr i64 %8373 to i64*
  %8377 = load i64, i64* %8376, align 8
  store i64 %8377, i64* %R8.i1900.pre-phi, align 8
  %8378 = add i64 %8377, 40
  %8379 = add i64 %8374, 8
  store i64 %8379, i64* %3, align 8
  %8380 = inttoptr i64 %8378 to i64*
  %8381 = load i64, i64* %8380, align 8
  store i64 %8381, i64* %R8.i1900.pre-phi, align 8
  %8382 = add i64 %8381, 6416
  %8383 = add i64 %8374, 16
  store i64 %8383, i64* %3, align 8
  %8384 = inttoptr i64 %8382 to i32*
  %8385 = load i32, i32* %8384, align 4
  store i8 0, i8* %14, align 1
  %8386 = and i32 %8385, 255
  %8387 = tail call i32 @llvm.ctpop.i32(i32 %8386)
  %8388 = trunc i32 %8387 to i8
  %8389 = and i8 %8388, 1
  %8390 = xor i8 %8389, 1
  store i8 %8390, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8391 = icmp eq i32 %8385, 0
  %8392 = zext i1 %8391 to i8
  store i8 %8392, i8* %30, align 1
  %8393 = lshr i32 %8385, 31
  %8394 = trunc i32 %8393 to i8
  store i8 %8394, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v543 = select i1 %8391, i64 51, i64 22
  %8395 = add i64 %8374, %.v543
  store i64 %8395, i64* %3, align 8
  br i1 %8391, label %block_.L_451619, label %block_4515fc

block_4515fc:                                     ; preds = %routine_idivl__edi.exit
  %8396 = add i64 %8395, 4
  store i64 %8396, i64* %3, align 8
  %8397 = load i64, i64* %8376, align 8
  store i64 %8397, i64* %RAX.i186, align 8
  %8398 = add i64 %8397, 40
  %8399 = add i64 %8395, 8
  store i64 %8399, i64* %3, align 8
  %8400 = inttoptr i64 %8398 to i64*
  %8401 = load i64, i64* %8400, align 8
  store i64 %8401, i64* %RAX.i186, align 8
  %8402 = add i64 %8401, 6472
  %8403 = add i64 %8395, 15
  store i64 %8403, i64* %3, align 8
  %8404 = inttoptr i64 %8402 to i64*
  %8405 = load i64, i64* %8404, align 8
  store i64 %8405, i64* %RAX.i186, align 8
  %8406 = add i64 %8372, -64
  %8407 = add i64 %8395, 19
  store i64 %8407, i64* %3, align 8
  %8408 = inttoptr i64 %8406 to i32*
  %8409 = load i32, i32* %8408, align 4
  %8410 = sext i32 %8409 to i64
  store i64 %8410, i64* %RCX.i4414.pre-phi, align 8
  %8411 = add i64 %8405, %8410
  %8412 = add i64 %8395, 23
  store i64 %8412, i64* %3, align 8
  %8413 = inttoptr i64 %8411 to i8*
  %8414 = load i8, i8* %8413, align 1
  store i8 0, i8* %14, align 1
  %8415 = zext i8 %8414 to i32
  %8416 = tail call i32 @llvm.ctpop.i32(i32 %8415)
  %8417 = trunc i32 %8416 to i8
  %8418 = and i8 %8417, 1
  %8419 = xor i8 %8418, 1
  store i8 %8419, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8420 = icmp eq i8 %8414, 0
  %8421 = zext i1 %8420 to i8
  store i8 %8421, i8* %30, align 1
  %8422 = lshr i8 %8414, 7
  store i8 %8422, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v544 = select i1 %8420, i64 29, i64 2545
  %8423 = add i64 %8395, %.v544
  store i64 %8423, i64* %3, align 8
  br i1 %8420, label %block_.L_451619, label %block_.L_451fed

block_.L_451619:                                  ; preds = %block_4515fc, %routine_idivl__edi.exit
  %8424 = phi i64 [ %8423, %block_4515fc ], [ %8395, %routine_idivl__edi.exit ]
  %8425 = add i64 %8424, 4
  store i64 %8425, i64* %3, align 8
  %8426 = load i64, i64* %8376, align 8
  store i64 %8426, i64* %RAX.i186, align 8
  %8427 = add i64 %8426, 40
  %8428 = add i64 %8424, 8
  store i64 %8428, i64* %3, align 8
  %8429 = inttoptr i64 %8427 to i64*
  %8430 = load i64, i64* %8429, align 8
  store i64 %8430, i64* %RAX.i186, align 8
  %8431 = add i64 %8430, 6520
  %8432 = add i64 %8424, 15
  store i64 %8432, i64* %3, align 8
  %8433 = inttoptr i64 %8431 to i64*
  %8434 = load i64, i64* %8433, align 8
  store i64 %8434, i64* %RAX.i186, align 8
  %8435 = add i64 %8372, -12
  %8436 = add i64 %8424, 19
  store i64 %8436, i64* %3, align 8
  %8437 = inttoptr i64 %8435 to i32*
  %8438 = load i32, i32* %8437, align 4
  %8439 = sext i32 %8438 to i64
  store i64 %8439, i64* %RCX.i4414.pre-phi, align 8
  %8440 = shl nsw i64 %8439, 3
  %8441 = add i64 %8440, %8434
  %8442 = add i64 %8424, 23
  store i64 %8442, i64* %3, align 8
  %8443 = inttoptr i64 %8441 to i64*
  %8444 = load i64, i64* %8443, align 8
  store i64 %8444, i64* %RAX.i186, align 8
  %8445 = add i64 %8372, -16
  %8446 = add i64 %8424, 26
  store i64 %8446, i64* %3, align 8
  %8447 = inttoptr i64 %8445 to i32*
  %8448 = load i32, i32* %8447, align 4
  %8449 = shl i32 %8448, 1
  %8450 = icmp slt i32 %8448, 0
  %8451 = icmp slt i32 %8449, 0
  %8452 = xor i1 %8450, %8451
  %8453 = zext i32 %8449 to i64
  store i64 %8453, i64* %RDX.i4411.pre-phi, align 8
  %.lobit145 = lshr i32 %8448, 31
  %8454 = trunc i32 %.lobit145 to i8
  store i8 %8454, i8* %14, align 1
  %8455 = and i32 %8449, 254
  %8456 = tail call i32 @llvm.ctpop.i32(i32 %8455)
  %8457 = trunc i32 %8456 to i8
  %8458 = and i8 %8457, 1
  %8459 = xor i8 %8458, 1
  store i8 %8459, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8460 = icmp eq i32 %8449, 0
  %8461 = zext i1 %8460 to i8
  store i8 %8461, i8* %30, align 1
  %8462 = lshr i32 %8448, 30
  %8463 = trunc i32 %8462 to i8
  %8464 = and i8 %8463, 1
  store i8 %8464, i8* %33, align 1
  %8465 = zext i1 %8452 to i8
  store i8 %8465, i8* %39, align 1
  %8466 = sext i32 %8449 to i64
  store i64 %8466, i64* %RCX.i4414.pre-phi, align 8
  %8467 = add i64 %8444, %8466
  %8468 = add i64 %8424, 35
  store i64 %8468, i64* %3, align 8
  %8469 = inttoptr i64 %8467 to i8*
  store i8 0, i8* %8469, align 1
  %8470 = load i64, i64* %RBP.i, align 8
  %8471 = add i64 %8470, -8
  %8472 = load i64, i64* %3, align 8
  %8473 = add i64 %8472, 4
  store i64 %8473, i64* %3, align 8
  %8474 = inttoptr i64 %8471 to i64*
  %8475 = load i64, i64* %8474, align 8
  store i64 %8475, i64* %RAX.i186, align 8
  %8476 = add i64 %8475, 40
  %8477 = add i64 %8472, 8
  store i64 %8477, i64* %3, align 8
  %8478 = inttoptr i64 %8476 to i64*
  %8479 = load i64, i64* %8478, align 8
  store i64 %8479, i64* %RAX.i186, align 8
  %8480 = add i64 %8479, 6520
  %8481 = add i64 %8472, 15
  store i64 %8481, i64* %3, align 8
  %8482 = inttoptr i64 %8480 to i64*
  %8483 = load i64, i64* %8482, align 8
  store i64 %8483, i64* %RAX.i186, align 8
  %8484 = add i64 %8470, -12
  %8485 = add i64 %8472, 19
  store i64 %8485, i64* %3, align 8
  %8486 = inttoptr i64 %8484 to i32*
  %8487 = load i32, i32* %8486, align 4
  %8488 = sext i32 %8487 to i64
  store i64 %8488, i64* %RCX.i4414.pre-phi, align 8
  %8489 = shl nsw i64 %8488, 3
  %8490 = add i64 %8489, %8483
  %8491 = add i64 %8472, 23
  store i64 %8491, i64* %3, align 8
  %8492 = inttoptr i64 %8490 to i64*
  %8493 = load i64, i64* %8492, align 8
  store i64 %8493, i64* %RAX.i186, align 8
  %8494 = add i64 %8470, -16
  %8495 = add i64 %8472, 26
  store i64 %8495, i64* %3, align 8
  %8496 = inttoptr i64 %8494 to i32*
  %8497 = load i32, i32* %8496, align 4
  %8498 = shl i32 %8497, 1
  %8499 = or i32 %8498, 1
  %8500 = zext i32 %8499 to i64
  store i64 %8500, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  %8501 = and i32 %8499, 255
  %8502 = tail call i32 @llvm.ctpop.i32(i32 %8501)
  %8503 = trunc i32 %8502 to i8
  %8504 = and i8 %8503, 1
  %8505 = xor i8 %8504, 1
  store i8 %8505, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %8506 = lshr i32 %8497, 30
  %8507 = and i32 %8506, 1
  %8508 = trunc i32 %8507 to i8
  store i8 %8508, i8* %33, align 1
  %8509 = lshr i32 %8497, 30
  %8510 = and i32 %8509, 1
  %8511 = xor i32 %8507, %8510
  %8512 = add nuw nsw i32 %8511, %8507
  %8513 = icmp eq i32 %8512, 2
  %8514 = zext i1 %8513 to i8
  store i8 %8514, i8* %39, align 1
  %8515 = sext i32 %8499 to i64
  store i64 %8515, i64* %RCX.i4414.pre-phi, align 8
  %8516 = add i64 %8493, %8515
  %8517 = add i64 %8472, 38
  store i64 %8517, i64* %3, align 8
  %8518 = inttoptr i64 %8516 to i8*
  store i8 0, i8* %8518, align 1
  %8519 = load i64, i64* %RBP.i, align 8
  %8520 = add i64 %8519, -8
  %8521 = load i64, i64* %3, align 8
  %8522 = add i64 %8521, 4
  store i64 %8522, i64* %3, align 8
  %8523 = inttoptr i64 %8520 to i64*
  %8524 = load i64, i64* %8523, align 8
  store i64 %8524, i64* %RAX.i186, align 8
  %8525 = add i64 %8524, 40
  %8526 = add i64 %8521, 8
  store i64 %8526, i64* %3, align 8
  %8527 = inttoptr i64 %8525 to i64*
  %8528 = load i64, i64* %8527, align 8
  store i64 %8528, i64* %RAX.i186, align 8
  %8529 = add i64 %8528, 6556
  %8530 = add i64 %8521, 15
  store i64 %8530, i64* %3, align 8
  %8531 = inttoptr i64 %8529 to i32*
  %8532 = load i32, i32* %8531, align 4
  store i8 0, i8* %14, align 1
  %8533 = and i32 %8532, 255
  %8534 = tail call i32 @llvm.ctpop.i32(i32 %8533)
  %8535 = trunc i32 %8534 to i8
  %8536 = and i8 %8535, 1
  %8537 = xor i8 %8536, 1
  store i8 %8537, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8538 = icmp eq i32 %8532, 0
  %8539 = zext i1 %8538 to i8
  store i8 %8539, i8* %30, align 1
  %8540 = lshr i32 %8532, 31
  %8541 = trunc i32 %8540 to i8
  store i8 %8541, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v545 = select i1 %8538, i64 21, i64 2436
  %8542 = add i64 %8521, %.v545
  store i64 %8542, i64* %3, align 8
  br i1 %8538, label %block_451679, label %block_.L_451fe8

block_451679:                                     ; preds = %block_.L_451619
  %8543 = add i64 %8542, 4
  store i64 %8543, i64* %3, align 8
  %8544 = load i64, i64* %8523, align 8
  store i64 %8544, i64* %RAX.i186, align 8
  %8545 = add i64 %8544, 56
  %8546 = add i64 %8542, 8
  store i64 %8546, i64* %3, align 8
  %8547 = inttoptr i64 %8545 to i64*
  %8548 = load i64, i64* %8547, align 8
  store i64 %8548, i64* %RAX.i186, align 8
  %8549 = add i64 %8548, 6520
  %8550 = add i64 %8542, 15
  store i64 %8550, i64* %3, align 8
  %8551 = inttoptr i64 %8549 to i64*
  %8552 = load i64, i64* %8551, align 8
  store i64 %8552, i64* %RAX.i186, align 8
  %8553 = add i64 %8519, -12
  %8554 = add i64 %8542, 19
  store i64 %8554, i64* %3, align 8
  %8555 = inttoptr i64 %8553 to i32*
  %8556 = load i32, i32* %8555, align 4
  %8557 = sext i32 %8556 to i64
  store i64 %8557, i64* %RCX.i4414.pre-phi, align 8
  %8558 = shl nsw i64 %8557, 3
  %8559 = add i64 %8558, %8552
  %8560 = add i64 %8542, 23
  store i64 %8560, i64* %3, align 8
  %8561 = inttoptr i64 %8559 to i64*
  %8562 = load i64, i64* %8561, align 8
  store i64 %8562, i64* %RAX.i186, align 8
  %8563 = add i64 %8519, -16
  %8564 = add i64 %8542, 27
  store i64 %8564, i64* %3, align 8
  %8565 = inttoptr i64 %8563 to i32*
  %8566 = load i32, i32* %8565, align 4
  %8567 = sext i32 %8566 to i64
  store i64 %8567, i64* %RCX.i4414.pre-phi, align 8
  %8568 = add i64 %8562, %8567
  %8569 = add i64 %8542, 31
  store i64 %8569, i64* %3, align 8
  %8570 = inttoptr i64 %8568 to i8*
  store i8 0, i8* %8570, align 1
  %8571 = load i64, i64* %RBP.i, align 8
  %8572 = add i64 %8571, -8
  %8573 = load i64, i64* %3, align 8
  %8574 = add i64 %8573, 4
  store i64 %8574, i64* %3, align 8
  %8575 = inttoptr i64 %8572 to i64*
  %8576 = load i64, i64* %8575, align 8
  store i64 %8576, i64* %RAX.i186, align 8
  %8577 = add i64 %8576, 48
  %8578 = add i64 %8573, 8
  store i64 %8578, i64* %3, align 8
  %8579 = inttoptr i64 %8577 to i64*
  %8580 = load i64, i64* %8579, align 8
  store i64 %8580, i64* %RAX.i186, align 8
  %8581 = add i64 %8580, 6520
  %8582 = add i64 %8573, 15
  store i64 %8582, i64* %3, align 8
  %8583 = inttoptr i64 %8581 to i64*
  %8584 = load i64, i64* %8583, align 8
  store i64 %8584, i64* %RAX.i186, align 8
  %8585 = add i64 %8571, -12
  %8586 = add i64 %8573, 19
  store i64 %8586, i64* %3, align 8
  %8587 = inttoptr i64 %8585 to i32*
  %8588 = load i32, i32* %8587, align 4
  %8589 = sext i32 %8588 to i64
  store i64 %8589, i64* %RCX.i4414.pre-phi, align 8
  %8590 = shl nsw i64 %8589, 3
  %8591 = add i64 %8590, %8584
  %8592 = add i64 %8573, 23
  store i64 %8592, i64* %3, align 8
  %8593 = inttoptr i64 %8591 to i64*
  %8594 = load i64, i64* %8593, align 8
  store i64 %8594, i64* %RAX.i186, align 8
  %8595 = add i64 %8571, -16
  %8596 = add i64 %8573, 27
  store i64 %8596, i64* %3, align 8
  %8597 = inttoptr i64 %8595 to i32*
  %8598 = load i32, i32* %8597, align 4
  %8599 = sext i32 %8598 to i64
  store i64 %8599, i64* %RCX.i4414.pre-phi, align 8
  %8600 = add i64 %8594, %8599
  %8601 = add i64 %8573, 31
  store i64 %8601, i64* %3, align 8
  %8602 = inttoptr i64 %8600 to i8*
  store i8 0, i8* %8602, align 1
  %8603 = load i64, i64* %RBP.i, align 8
  %8604 = add i64 %8603, -8
  %8605 = load i64, i64* %3, align 8
  %8606 = add i64 %8605, 4
  store i64 %8606, i64* %3, align 8
  %8607 = inttoptr i64 %8604 to i64*
  %8608 = load i64, i64* %8607, align 8
  store i64 %8608, i64* %RAX.i186, align 8
  %8609 = add i64 %8608, 40
  %8610 = add i64 %8605, 8
  store i64 %8610, i64* %3, align 8
  %8611 = inttoptr i64 %8609 to i64*
  %8612 = load i64, i64* %8611, align 8
  store i64 %8612, i64* %RAX.i186, align 8
  %8613 = add i64 %8612, 6504
  %8614 = add i64 %8605, 15
  store i64 %8614, i64* %3, align 8
  %8615 = inttoptr i64 %8613 to i64*
  %8616 = load i64, i64* %8615, align 8
  store i64 %8616, i64* %RAX.i186, align 8
  %8617 = add i64 %8605, 18
  store i64 %8617, i64* %3, align 8
  %8618 = inttoptr i64 %8616 to i64*
  %8619 = load i64, i64* %8618, align 8
  store i64 %8619, i64* %RAX.i186, align 8
  %8620 = add i64 %8603, -12
  %8621 = add i64 %8605, 21
  store i64 %8621, i64* %3, align 8
  %8622 = inttoptr i64 %8620 to i32*
  %8623 = load i32, i32* %8622, align 4
  %8624 = and i32 %8623, 2
  %8625 = zext i32 %8624 to i64
  store i64 %8625, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  %8626 = tail call i32 @llvm.ctpop.i32(i32 %8624)
  %8627 = trunc i32 %8626 to i8
  %8628 = xor i8 %8627, 1
  store i8 %8628, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit512 = lshr exact i32 %8624, 1
  %8629 = trunc i32 %.lobit512 to i8
  %8630 = xor i8 %8629, 1
  store i8 %8630, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8631 = add i64 %8603, -344
  %8632 = add i64 %8605, 34
  store i64 %8632, i64* %3, align 8
  %8633 = inttoptr i64 %8631 to i64*
  store i64 %8619, i64* %8633, align 8
  %8634 = load i64, i64* %3, align 8
  %8635 = load i8, i8* %30, align 1
  %8636 = icmp ne i8 %8635, 0
  %.v593 = select i1 %8636, i64 23, i64 6
  %8637 = add i64 %8634, %.v593
  %cmpBr_4516d9 = icmp eq i8 %8635, 1
  %8638 = load i64, i64* %RBP.i, align 8
  %8639 = add i64 %8638, -12
  %8640 = add i64 %8637, 3
  store i64 %8640, i64* %3, align 8
  %8641 = inttoptr i64 %8639 to i32*
  %8642 = load i32, i32* %8641, align 4
  %8643 = zext i32 %8642 to i64
  store i64 %8643, i64* %RAX.i186, align 8
  %8644 = add i64 %8637, 6
  store i64 %8644, i64* %3, align 8
  br i1 %cmpBr_4516d9, label %block_.L_4516f0, label %block_4516df

block_4516df:                                     ; preds = %block_451679
  %8645 = or i64 %8643, 1
  %8646 = trunc i64 %8645 to i32
  store i64 %8645, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8647 = and i32 %8646, 255
  %8648 = tail call i32 @llvm.ctpop.i32(i32 %8647)
  %8649 = trunc i32 %8648 to i8
  %8650 = and i8 %8649, 1
  %8651 = xor i8 %8650, 1
  store i8 %8651, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %8652 = lshr i32 %8646, 31
  %8653 = trunc i32 %8652 to i8
  store i8 %8653, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8654 = add i64 %8638, -348
  %8655 = add i64 %8637, 12
  store i64 %8655, i64* %3, align 8
  %8656 = inttoptr i64 %8654 to i32*
  store i32 %8646, i32* %8656, align 4
  %8657 = load i64, i64* %3, align 8
  %8658 = add i64 %8657, 17
  store i64 %8658, i64* %3, align 8
  br label %block_.L_4516fc

block_.L_4516f0:                                  ; preds = %block_451679
  %8659 = and i64 %8643, 4294967294
  store i64 %8659, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8660 = and i32 %8642, 254
  %8661 = tail call i32 @llvm.ctpop.i32(i32 %8660)
  %8662 = trunc i32 %8661 to i8
  %8663 = and i8 %8662, 1
  %8664 = xor i8 %8663, 1
  store i8 %8664, i8* %21, align 1
  %8665 = icmp ult i32 %8642, 2
  %8666 = zext i1 %8665 to i8
  store i8 %8666, i8* %30, align 1
  %8667 = lshr i32 %8642, 31
  %8668 = trunc i32 %8667 to i8
  store i8 %8668, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8669 = add i64 %8638, -348
  %8670 = trunc i64 %8659 to i32
  %8671 = add i64 %8637, 12
  store i64 %8671, i64* %3, align 8
  %8672 = inttoptr i64 %8669 to i32*
  store i32 %8670, i32* %8672, align 4
  %.pre345 = load i64, i64* %3, align 8
  br label %block_.L_4516fc

block_.L_4516fc:                                  ; preds = %block_.L_4516f0, %block_4516df
  %8673 = phi i64 [ %.pre345, %block_.L_4516f0 ], [ %8658, %block_4516df ]
  %8674 = load i64, i64* %RBP.i, align 8
  %8675 = add i64 %8674, -348
  %8676 = add i64 %8673, 6
  store i64 %8676, i64* %3, align 8
  %8677 = inttoptr i64 %8675 to i32*
  %8678 = load i32, i32* %8677, align 4
  %8679 = zext i32 %8678 to i64
  store i64 %8679, i64* %RAX.i186, align 8
  %8680 = sext i32 %8678 to i64
  store i64 %8680, i64* %RCX.i4414.pre-phi, align 8
  %8681 = add i64 %8674, -344
  %8682 = add i64 %8673, 16
  store i64 %8682, i64* %3, align 8
  %8683 = inttoptr i64 %8681 to i64*
  %8684 = load i64, i64* %8683, align 8
  store i64 %8684, i64* %RDX.i4411.pre-phi, align 8
  %8685 = shl nsw i64 %8680, 3
  %8686 = add i64 %8685, %8684
  %8687 = add i64 %8673, 20
  store i64 %8687, i64* %3, align 8
  %8688 = inttoptr i64 %8686 to i64*
  %8689 = load i64, i64* %8688, align 8
  store i64 %8689, i64* %RCX.i4414.pre-phi, align 8
  %8690 = add i64 %8674, -16
  %8691 = add i64 %8673, 23
  store i64 %8691, i64* %3, align 8
  %8692 = inttoptr i64 %8690 to i32*
  %8693 = load i32, i32* %8692, align 4
  %8694 = and i32 %8693, 2
  %8695 = zext i32 %8694 to i64
  store i64 %8695, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8696 = tail call i32 @llvm.ctpop.i32(i32 %8694)
  %8697 = trunc i32 %8696 to i8
  %8698 = xor i8 %8697, 1
  store i8 %8698, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit513 = lshr exact i32 %8694, 1
  %8699 = trunc i32 %.lobit513 to i8
  %8700 = xor i8 %8699, 1
  store i8 %8700, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8701 = add i64 %8674, -360
  %8702 = add i64 %8673, 36
  store i64 %8702, i64* %3, align 8
  %8703 = inttoptr i64 %8701 to i64*
  store i64 %8689, i64* %8703, align 8
  %8704 = load i64, i64* %3, align 8
  %8705 = load i8, i8* %30, align 1
  %8706 = icmp ne i8 %8705, 0
  %.v594 = select i1 %8706, i64 23, i64 6
  %8707 = add i64 %8704, %.v594
  %cmpBr_451720 = icmp eq i8 %8705, 1
  %8708 = load i64, i64* %RBP.i, align 8
  %8709 = add i64 %8708, -16
  %8710 = add i64 %8707, 3
  store i64 %8710, i64* %3, align 8
  %8711 = inttoptr i64 %8709 to i32*
  %8712 = load i32, i32* %8711, align 4
  %8713 = zext i32 %8712 to i64
  store i64 %8713, i64* %RAX.i186, align 8
  %8714 = add i64 %8707, 6
  store i64 %8714, i64* %3, align 8
  br i1 %cmpBr_451720, label %block_.L_451737, label %block_451726

block_451726:                                     ; preds = %block_.L_4516fc
  %8715 = or i64 %8713, 1
  %8716 = trunc i64 %8715 to i32
  store i64 %8715, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8717 = and i32 %8716, 255
  %8718 = tail call i32 @llvm.ctpop.i32(i32 %8717)
  %8719 = trunc i32 %8718 to i8
  %8720 = and i8 %8719, 1
  %8721 = xor i8 %8720, 1
  store i8 %8721, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %8722 = lshr i32 %8716, 31
  %8723 = trunc i32 %8722 to i8
  store i8 %8723, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8724 = add i64 %8708, -364
  %8725 = add i64 %8707, 12
  store i64 %8725, i64* %3, align 8
  %8726 = inttoptr i64 %8724 to i32*
  store i32 %8716, i32* %8726, align 4
  %8727 = load i64, i64* %3, align 8
  %8728 = add i64 %8727, 17
  store i64 %8728, i64* %3, align 8
  br label %block_.L_451743

block_.L_451737:                                  ; preds = %block_.L_4516fc
  %8729 = and i64 %8713, 4294967294
  store i64 %8729, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8730 = and i32 %8712, 254
  %8731 = tail call i32 @llvm.ctpop.i32(i32 %8730)
  %8732 = trunc i32 %8731 to i8
  %8733 = and i8 %8732, 1
  %8734 = xor i8 %8733, 1
  store i8 %8734, i8* %21, align 1
  %8735 = icmp ult i32 %8712, 2
  %8736 = zext i1 %8735 to i8
  store i8 %8736, i8* %30, align 1
  %8737 = lshr i32 %8712, 31
  %8738 = trunc i32 %8737 to i8
  store i8 %8738, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8739 = add i64 %8708, -364
  %8740 = trunc i64 %8729 to i32
  %8741 = add i64 %8707, 12
  store i64 %8741, i64* %3, align 8
  %8742 = inttoptr i64 %8739 to i32*
  store i32 %8740, i32* %8742, align 4
  %.pre346 = load i64, i64* %3, align 8
  br label %block_.L_451743

block_.L_451743:                                  ; preds = %block_.L_451737, %block_451726
  %8743 = phi i64 [ %.pre346, %block_.L_451737 ], [ %8728, %block_451726 ]
  %8744 = load i64, i64* %RBP.i, align 8
  %8745 = add i64 %8744, -364
  %8746 = add i64 %8743, 6
  store i64 %8746, i64* %3, align 8
  %8747 = inttoptr i64 %8745 to i32*
  %8748 = load i32, i32* %8747, align 4
  %8749 = shl i32 %8748, 1
  %8750 = icmp slt i32 %8748, 0
  %8751 = icmp slt i32 %8749, 0
  %8752 = xor i1 %8750, %8751
  %8753 = zext i32 %8749 to i64
  store i64 %8753, i64* %RAX.i186, align 8
  %.lobit149 = lshr i32 %8748, 31
  %8754 = trunc i32 %.lobit149 to i8
  store i8 %8754, i8* %14, align 1
  %8755 = and i32 %8749, 254
  %8756 = tail call i32 @llvm.ctpop.i32(i32 %8755)
  %8757 = trunc i32 %8756 to i8
  %8758 = and i8 %8757, 1
  %8759 = xor i8 %8758, 1
  store i8 %8759, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %8760 = icmp eq i32 %8749, 0
  %8761 = zext i1 %8760 to i8
  store i8 %8761, i8* %30, align 1
  %8762 = lshr i32 %8748, 30
  %8763 = trunc i32 %8762 to i8
  %8764 = and i8 %8763, 1
  store i8 %8764, i8* %33, align 1
  %8765 = zext i1 %8752 to i8
  store i8 %8765, i8* %39, align 1
  %8766 = sext i32 %8749 to i64
  store i64 %8766, i64* %RCX.i4414.pre-phi, align 8
  %8767 = add i64 %8744, -360
  %8768 = add i64 %8743, 18
  store i64 %8768, i64* %3, align 8
  %8769 = inttoptr i64 %8767 to i64*
  %8770 = load i64, i64* %8769, align 8
  store i64 %8770, i64* %RDX.i4411.pre-phi, align 8
  %8771 = shl nsw i64 %8766, 3
  %8772 = add i64 %8771, %8770
  %8773 = add i64 %8743, 22
  store i64 %8773, i64* %3, align 8
  %8774 = inttoptr i64 %8772 to i64*
  %8775 = load i64, i64* %8774, align 8
  store i64 %8775, i64* %RCX.i4414.pre-phi, align 8
  %8776 = add i64 %8743, 25
  store i64 %8776, i64* %3, align 8
  %8777 = inttoptr i64 %8775 to i16*
  %8778 = load i16, i16* %8777, align 2
  store i16 %8778, i16* %SI.i1634, align 2
  %8779 = add i64 %8744, -8
  %8780 = add i64 %8743, 29
  store i64 %8780, i64* %3, align 8
  %8781 = inttoptr i64 %8779 to i64*
  %8782 = load i64, i64* %8781, align 8
  store i64 %8782, i64* %RCX.i4414.pre-phi, align 8
  %8783 = add i64 %8782, 56
  %8784 = add i64 %8743, 33
  store i64 %8784, i64* %3, align 8
  %8785 = inttoptr i64 %8783 to i64*
  %8786 = load i64, i64* %8785, align 8
  store i64 %8786, i64* %RCX.i4414.pre-phi, align 8
  %8787 = add i64 %8786, 6504
  %8788 = add i64 %8743, 40
  store i64 %8788, i64* %3, align 8
  %8789 = inttoptr i64 %8787 to i64*
  %8790 = load i64, i64* %8789, align 8
  store i64 %8790, i64* %RCX.i4414.pre-phi, align 8
  %8791 = add i64 %8743, 43
  store i64 %8791, i64* %3, align 8
  %8792 = inttoptr i64 %8790 to i64*
  %8793 = load i64, i64* %8792, align 8
  store i64 %8793, i64* %RCX.i4414.pre-phi, align 8
  %8794 = add i64 %8744, -12
  %8795 = add i64 %8743, 47
  store i64 %8795, i64* %3, align 8
  %8796 = inttoptr i64 %8794 to i32*
  %8797 = load i32, i32* %8796, align 4
  %8798 = sext i32 %8797 to i64
  store i64 %8798, i64* %RDI.i126, align 8
  %8799 = shl nsw i64 %8798, 3
  %8800 = add i64 %8799, %8793
  %8801 = add i64 %8743, 51
  store i64 %8801, i64* %3, align 8
  %8802 = inttoptr i64 %8800 to i64*
  %8803 = load i64, i64* %8802, align 8
  store i64 %8803, i64* %RCX.i4414.pre-phi, align 8
  %8804 = add i64 %8744, -16
  %8805 = add i64 %8743, 55
  store i64 %8805, i64* %3, align 8
  %8806 = inttoptr i64 %8804 to i32*
  %8807 = load i32, i32* %8806, align 4
  %8808 = sext i32 %8807 to i64
  store i64 %8808, i64* %RDI.i126, align 8
  %8809 = shl nsw i64 %8808, 3
  %8810 = add i64 %8809, %8803
  %8811 = add i64 %8743, 59
  store i64 %8811, i64* %3, align 8
  %8812 = inttoptr i64 %8810 to i64*
  %8813 = load i64, i64* %8812, align 8
  store i64 %8813, i64* %RCX.i4414.pre-phi, align 8
  %8814 = add i64 %8743, 62
  store i64 %8814, i64* %3, align 8
  %8815 = inttoptr i64 %8813 to i16*
  store i16 %8778, i16* %8815, align 2
  %8816 = load i64, i64* %RBP.i, align 8
  %8817 = add i64 %8816, -8
  %8818 = load i64, i64* %3, align 8
  %8819 = add i64 %8818, 4
  store i64 %8819, i64* %3, align 8
  %8820 = inttoptr i64 %8817 to i64*
  %8821 = load i64, i64* %8820, align 8
  store i64 %8821, i64* %RCX.i4414.pre-phi, align 8
  %8822 = add i64 %8821, 48
  %8823 = add i64 %8818, 8
  store i64 %8823, i64* %3, align 8
  %8824 = inttoptr i64 %8822 to i64*
  %8825 = load i64, i64* %8824, align 8
  store i64 %8825, i64* %RCX.i4414.pre-phi, align 8
  %8826 = add i64 %8825, 6504
  %8827 = add i64 %8818, 15
  store i64 %8827, i64* %3, align 8
  %8828 = inttoptr i64 %8826 to i64*
  %8829 = load i64, i64* %8828, align 8
  store i64 %8829, i64* %RCX.i4414.pre-phi, align 8
  %8830 = add i64 %8818, 18
  store i64 %8830, i64* %3, align 8
  %8831 = inttoptr i64 %8829 to i64*
  %8832 = load i64, i64* %8831, align 8
  store i64 %8832, i64* %RCX.i4414.pre-phi, align 8
  %8833 = add i64 %8816, -12
  %8834 = add i64 %8818, 22
  store i64 %8834, i64* %3, align 8
  %8835 = inttoptr i64 %8833 to i32*
  %8836 = load i32, i32* %8835, align 4
  %8837 = sext i32 %8836 to i64
  store i64 %8837, i64* %RDI.i126, align 8
  %8838 = shl nsw i64 %8837, 3
  %8839 = add i64 %8838, %8832
  %8840 = add i64 %8818, 26
  store i64 %8840, i64* %3, align 8
  %8841 = inttoptr i64 %8839 to i64*
  %8842 = load i64, i64* %8841, align 8
  store i64 %8842, i64* %RCX.i4414.pre-phi, align 8
  %8843 = add i64 %8816, -16
  %8844 = add i64 %8818, 30
  store i64 %8844, i64* %3, align 8
  %8845 = inttoptr i64 %8843 to i32*
  %8846 = load i32, i32* %8845, align 4
  %8847 = sext i32 %8846 to i64
  store i64 %8847, i64* %RDI.i126, align 8
  %8848 = shl nsw i64 %8847, 3
  %8849 = add i64 %8848, %8842
  %8850 = add i64 %8818, 34
  store i64 %8850, i64* %3, align 8
  %8851 = inttoptr i64 %8849 to i64*
  %8852 = load i64, i64* %8851, align 8
  store i64 %8852, i64* %RCX.i4414.pre-phi, align 8
  %8853 = load i16, i16* %SI.i1634, align 2
  %8854 = add i64 %8818, 37
  store i64 %8854, i64* %3, align 8
  %8855 = inttoptr i64 %8852 to i16*
  store i16 %8853, i16* %8855, align 2
  %8856 = load i64, i64* %RBP.i, align 8
  %8857 = add i64 %8856, -8
  %8858 = load i64, i64* %3, align 8
  %8859 = add i64 %8858, 4
  store i64 %8859, i64* %3, align 8
  %8860 = inttoptr i64 %8857 to i64*
  %8861 = load i64, i64* %8860, align 8
  store i64 %8861, i64* %RCX.i4414.pre-phi, align 8
  %8862 = add i64 %8861, 40
  %8863 = add i64 %8858, 8
  store i64 %8863, i64* %3, align 8
  %8864 = inttoptr i64 %8862 to i64*
  %8865 = load i64, i64* %8864, align 8
  store i64 %8865, i64* %RCX.i4414.pre-phi, align 8
  %8866 = add i64 %8865, 6504
  %8867 = add i64 %8858, 15
  store i64 %8867, i64* %3, align 8
  %8868 = inttoptr i64 %8866 to i64*
  %8869 = load i64, i64* %8868, align 8
  store i64 %8869, i64* %RCX.i4414.pre-phi, align 8
  %8870 = add i64 %8858, 18
  store i64 %8870, i64* %3, align 8
  %8871 = inttoptr i64 %8869 to i64*
  %8872 = load i64, i64* %8871, align 8
  store i64 %8872, i64* %RCX.i4414.pre-phi, align 8
  %8873 = add i64 %8856, -12
  %8874 = add i64 %8858, 21
  store i64 %8874, i64* %3, align 8
  %8875 = inttoptr i64 %8873 to i32*
  %8876 = load i32, i32* %8875, align 4
  %8877 = and i32 %8876, 2
  %8878 = zext i32 %8877 to i64
  store i64 %8878, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8879 = tail call i32 @llvm.ctpop.i32(i32 %8877)
  %8880 = trunc i32 %8879 to i8
  %8881 = xor i8 %8880, 1
  store i8 %8881, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit514 = lshr exact i32 %8877, 1
  %8882 = trunc i32 %.lobit514 to i8
  %8883 = xor i8 %8882, 1
  store i8 %8883, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8884 = add i64 %8856, -376
  %8885 = add i64 %8858, 34
  store i64 %8885, i64* %3, align 8
  %8886 = inttoptr i64 %8884 to i64*
  store i64 %8872, i64* %8886, align 8
  %8887 = load i64, i64* %3, align 8
  %8888 = load i8, i8* %30, align 1
  %8889 = icmp ne i8 %8888, 0
  %.v595 = select i1 %8889, i64 23, i64 6
  %8890 = add i64 %8887, %.v595
  %cmpBr_4517c9 = icmp eq i8 %8888, 1
  %8891 = load i64, i64* %RBP.i, align 8
  %8892 = add i64 %8891, -12
  %8893 = add i64 %8890, 3
  store i64 %8893, i64* %3, align 8
  %8894 = inttoptr i64 %8892 to i32*
  %8895 = load i32, i32* %8894, align 4
  %8896 = zext i32 %8895 to i64
  store i64 %8896, i64* %RAX.i186, align 8
  %8897 = add i64 %8890, 6
  store i64 %8897, i64* %3, align 8
  br i1 %cmpBr_4517c9, label %block_.L_4517e0, label %block_4517cf

block_4517cf:                                     ; preds = %block_.L_451743
  %8898 = or i64 %8896, 1
  %8899 = trunc i64 %8898 to i32
  store i64 %8898, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8900 = and i32 %8899, 255
  %8901 = tail call i32 @llvm.ctpop.i32(i32 %8900)
  %8902 = trunc i32 %8901 to i8
  %8903 = and i8 %8902, 1
  %8904 = xor i8 %8903, 1
  store i8 %8904, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %8905 = lshr i32 %8899, 31
  %8906 = trunc i32 %8905 to i8
  store i8 %8906, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8907 = add i64 %8891, -380
  %8908 = add i64 %8890, 12
  store i64 %8908, i64* %3, align 8
  %8909 = inttoptr i64 %8907 to i32*
  store i32 %8899, i32* %8909, align 4
  %8910 = load i64, i64* %3, align 8
  %8911 = add i64 %8910, 17
  store i64 %8911, i64* %3, align 8
  br label %block_.L_4517ec

block_.L_4517e0:                                  ; preds = %block_.L_451743
  %8912 = and i64 %8896, 4294967294
  store i64 %8912, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8913 = and i32 %8895, 254
  %8914 = tail call i32 @llvm.ctpop.i32(i32 %8913)
  %8915 = trunc i32 %8914 to i8
  %8916 = and i8 %8915, 1
  %8917 = xor i8 %8916, 1
  store i8 %8917, i8* %21, align 1
  %8918 = icmp ult i32 %8895, 2
  %8919 = zext i1 %8918 to i8
  store i8 %8919, i8* %30, align 1
  %8920 = lshr i32 %8895, 31
  %8921 = trunc i32 %8920 to i8
  store i8 %8921, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8922 = add i64 %8891, -380
  %8923 = trunc i64 %8912 to i32
  %8924 = add i64 %8890, 12
  store i64 %8924, i64* %3, align 8
  %8925 = inttoptr i64 %8922 to i32*
  store i32 %8923, i32* %8925, align 4
  %.pre347 = load i64, i64* %3, align 8
  br label %block_.L_4517ec

block_.L_4517ec:                                  ; preds = %block_.L_4517e0, %block_4517cf
  %8926 = phi i64 [ %.pre347, %block_.L_4517e0 ], [ %8911, %block_4517cf ]
  %8927 = load i64, i64* %RBP.i, align 8
  %8928 = add i64 %8927, -380
  %8929 = add i64 %8926, 6
  store i64 %8929, i64* %3, align 8
  %8930 = inttoptr i64 %8928 to i32*
  %8931 = load i32, i32* %8930, align 4
  %8932 = zext i32 %8931 to i64
  store i64 %8932, i64* %RAX.i186, align 8
  %8933 = sext i32 %8931 to i64
  store i64 %8933, i64* %RCX.i4414.pre-phi, align 8
  %8934 = add i64 %8927, -376
  %8935 = add i64 %8926, 16
  store i64 %8935, i64* %3, align 8
  %8936 = inttoptr i64 %8934 to i64*
  %8937 = load i64, i64* %8936, align 8
  store i64 %8937, i64* %RDX.i4411.pre-phi, align 8
  %8938 = shl nsw i64 %8933, 3
  %8939 = add i64 %8938, %8937
  %8940 = add i64 %8926, 20
  store i64 %8940, i64* %3, align 8
  %8941 = inttoptr i64 %8939 to i64*
  %8942 = load i64, i64* %8941, align 8
  store i64 %8942, i64* %RCX.i4414.pre-phi, align 8
  %8943 = add i64 %8927, -16
  %8944 = add i64 %8926, 23
  store i64 %8944, i64* %3, align 8
  %8945 = inttoptr i64 %8943 to i32*
  %8946 = load i32, i32* %8945, align 4
  %8947 = and i32 %8946, 2
  %8948 = zext i32 %8947 to i64
  store i64 %8948, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8949 = tail call i32 @llvm.ctpop.i32(i32 %8947)
  %8950 = trunc i32 %8949 to i8
  %8951 = xor i8 %8950, 1
  store i8 %8951, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit515 = lshr exact i32 %8947, 1
  %8952 = trunc i32 %.lobit515 to i8
  %8953 = xor i8 %8952, 1
  store i8 %8953, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %8954 = add i64 %8927, -392
  %8955 = add i64 %8926, 36
  store i64 %8955, i64* %3, align 8
  %8956 = inttoptr i64 %8954 to i64*
  store i64 %8942, i64* %8956, align 8
  %8957 = load i64, i64* %3, align 8
  %8958 = load i8, i8* %30, align 1
  %8959 = icmp ne i8 %8958, 0
  %.v596 = select i1 %8959, i64 23, i64 6
  %8960 = add i64 %8957, %.v596
  %cmpBr_451810 = icmp eq i8 %8958, 1
  %8961 = load i64, i64* %RBP.i, align 8
  %8962 = add i64 %8961, -16
  %8963 = add i64 %8960, 3
  store i64 %8963, i64* %3, align 8
  %8964 = inttoptr i64 %8962 to i32*
  %8965 = load i32, i32* %8964, align 4
  %8966 = zext i32 %8965 to i64
  store i64 %8966, i64* %RAX.i186, align 8
  %8967 = add i64 %8960, 6
  store i64 %8967, i64* %3, align 8
  br i1 %cmpBr_451810, label %block_.L_451827, label %block_451816

block_451816:                                     ; preds = %block_.L_4517ec
  %8968 = or i64 %8966, 1
  %8969 = trunc i64 %8968 to i32
  store i64 %8968, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8970 = and i32 %8969, 255
  %8971 = tail call i32 @llvm.ctpop.i32(i32 %8970)
  %8972 = trunc i32 %8971 to i8
  %8973 = and i8 %8972, 1
  %8974 = xor i8 %8973, 1
  store i8 %8974, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %8975 = lshr i32 %8969, 31
  %8976 = trunc i32 %8975 to i8
  store i8 %8976, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8977 = add i64 %8961, -396
  %8978 = add i64 %8960, 12
  store i64 %8978, i64* %3, align 8
  %8979 = inttoptr i64 %8977 to i32*
  store i32 %8969, i32* %8979, align 4
  %8980 = load i64, i64* %3, align 8
  %8981 = add i64 %8980, 17
  store i64 %8981, i64* %3, align 8
  br label %block_.L_451833

block_.L_451827:                                  ; preds = %block_.L_4517ec
  %8982 = and i64 %8966, 4294967294
  store i64 %8982, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %8983 = and i32 %8965, 254
  %8984 = tail call i32 @llvm.ctpop.i32(i32 %8983)
  %8985 = trunc i32 %8984 to i8
  %8986 = and i8 %8985, 1
  %8987 = xor i8 %8986, 1
  store i8 %8987, i8* %21, align 1
  %8988 = icmp ult i32 %8965, 2
  %8989 = zext i1 %8988 to i8
  store i8 %8989, i8* %30, align 1
  %8990 = lshr i32 %8965, 31
  %8991 = trunc i32 %8990 to i8
  store i8 %8991, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %8992 = add i64 %8961, -396
  %8993 = trunc i64 %8982 to i32
  %8994 = add i64 %8960, 12
  store i64 %8994, i64* %3, align 8
  %8995 = inttoptr i64 %8992 to i32*
  store i32 %8993, i32* %8995, align 4
  %.pre348 = load i64, i64* %3, align 8
  br label %block_.L_451833

block_.L_451833:                                  ; preds = %block_.L_451827, %block_451816
  %8996 = phi i64 [ %.pre348, %block_.L_451827 ], [ %8981, %block_451816 ]
  %8997 = load i64, i64* %RBP.i, align 8
  %8998 = add i64 %8997, -396
  %8999 = add i64 %8996, 6
  store i64 %8999, i64* %3, align 8
  %9000 = inttoptr i64 %8998 to i32*
  %9001 = load i32, i32* %9000, align 4
  %9002 = shl i32 %9001, 1
  %9003 = icmp slt i32 %9001, 0
  %9004 = icmp slt i32 %9002, 0
  %9005 = xor i1 %9003, %9004
  %9006 = zext i32 %9002 to i64
  store i64 %9006, i64* %RAX.i186, align 8
  %.lobit152 = lshr i32 %9001, 31
  %9007 = trunc i32 %.lobit152 to i8
  store i8 %9007, i8* %14, align 1
  %9008 = and i32 %9002, 254
  %9009 = tail call i32 @llvm.ctpop.i32(i32 %9008)
  %9010 = trunc i32 %9009 to i8
  %9011 = and i8 %9010, 1
  %9012 = xor i8 %9011, 1
  store i8 %9012, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9013 = icmp eq i32 %9002, 0
  %9014 = zext i1 %9013 to i8
  store i8 %9014, i8* %30, align 1
  %9015 = lshr i32 %9001, 30
  %9016 = trunc i32 %9015 to i8
  %9017 = and i8 %9016, 1
  store i8 %9017, i8* %33, align 1
  %9018 = zext i1 %9005 to i8
  store i8 %9018, i8* %39, align 1
  %9019 = sext i32 %9002 to i64
  store i64 %9019, i64* %RCX.i4414.pre-phi, align 8
  %9020 = add i64 %8997, -392
  %9021 = add i64 %8996, 18
  store i64 %9021, i64* %3, align 8
  %9022 = inttoptr i64 %9020 to i64*
  %9023 = load i64, i64* %9022, align 8
  store i64 %9023, i64* %RDX.i4411.pre-phi, align 8
  %9024 = shl nsw i64 %9019, 3
  %9025 = add i64 %9024, %9023
  %9026 = add i64 %8996, 22
  store i64 %9026, i64* %3, align 8
  %9027 = inttoptr i64 %9025 to i64*
  %9028 = load i64, i64* %9027, align 8
  store i64 %9028, i64* %RCX.i4414.pre-phi, align 8
  %9029 = add i64 %9028, 2
  %9030 = add i64 %8996, 26
  store i64 %9030, i64* %3, align 8
  %9031 = inttoptr i64 %9029 to i16*
  %9032 = load i16, i16* %9031, align 2
  store i16 %9032, i16* %SI.i1634, align 2
  %9033 = add i64 %8997, -8
  %9034 = add i64 %8996, 30
  store i64 %9034, i64* %3, align 8
  %9035 = inttoptr i64 %9033 to i64*
  %9036 = load i64, i64* %9035, align 8
  store i64 %9036, i64* %RCX.i4414.pre-phi, align 8
  %9037 = add i64 %9036, 56
  %9038 = add i64 %8996, 34
  store i64 %9038, i64* %3, align 8
  %9039 = inttoptr i64 %9037 to i64*
  %9040 = load i64, i64* %9039, align 8
  store i64 %9040, i64* %RCX.i4414.pre-phi, align 8
  %9041 = add i64 %9040, 6504
  %9042 = add i64 %8996, 41
  store i64 %9042, i64* %3, align 8
  %9043 = inttoptr i64 %9041 to i64*
  %9044 = load i64, i64* %9043, align 8
  store i64 %9044, i64* %RCX.i4414.pre-phi, align 8
  %9045 = add i64 %8996, 44
  store i64 %9045, i64* %3, align 8
  %9046 = inttoptr i64 %9044 to i64*
  %9047 = load i64, i64* %9046, align 8
  store i64 %9047, i64* %RCX.i4414.pre-phi, align 8
  %9048 = add i64 %8997, -12
  %9049 = add i64 %8996, 48
  store i64 %9049, i64* %3, align 8
  %9050 = inttoptr i64 %9048 to i32*
  %9051 = load i32, i32* %9050, align 4
  %9052 = sext i32 %9051 to i64
  store i64 %9052, i64* %RDI.i126, align 8
  %9053 = shl nsw i64 %9052, 3
  %9054 = add i64 %9053, %9047
  %9055 = add i64 %8996, 52
  store i64 %9055, i64* %3, align 8
  %9056 = inttoptr i64 %9054 to i64*
  %9057 = load i64, i64* %9056, align 8
  store i64 %9057, i64* %RCX.i4414.pre-phi, align 8
  %9058 = add i64 %8997, -16
  %9059 = add i64 %8996, 56
  store i64 %9059, i64* %3, align 8
  %9060 = inttoptr i64 %9058 to i32*
  %9061 = load i32, i32* %9060, align 4
  %9062 = sext i32 %9061 to i64
  store i64 %9062, i64* %RDI.i126, align 8
  %9063 = shl nsw i64 %9062, 3
  %9064 = add i64 %9063, %9057
  %9065 = add i64 %8996, 60
  store i64 %9065, i64* %3, align 8
  %9066 = inttoptr i64 %9064 to i64*
  %9067 = load i64, i64* %9066, align 8
  store i64 %9067, i64* %RCX.i4414.pre-phi, align 8
  %9068 = add i64 %9067, 2
  %9069 = add i64 %8996, 64
  store i64 %9069, i64* %3, align 8
  %9070 = inttoptr i64 %9068 to i16*
  store i16 %9032, i16* %9070, align 2
  %9071 = load i64, i64* %RBP.i, align 8
  %9072 = add i64 %9071, -8
  %9073 = load i64, i64* %3, align 8
  %9074 = add i64 %9073, 4
  store i64 %9074, i64* %3, align 8
  %9075 = inttoptr i64 %9072 to i64*
  %9076 = load i64, i64* %9075, align 8
  store i64 %9076, i64* %RCX.i4414.pre-phi, align 8
  %9077 = add i64 %9076, 48
  %9078 = add i64 %9073, 8
  store i64 %9078, i64* %3, align 8
  %9079 = inttoptr i64 %9077 to i64*
  %9080 = load i64, i64* %9079, align 8
  store i64 %9080, i64* %RCX.i4414.pre-phi, align 8
  %9081 = add i64 %9080, 6504
  %9082 = add i64 %9073, 15
  store i64 %9082, i64* %3, align 8
  %9083 = inttoptr i64 %9081 to i64*
  %9084 = load i64, i64* %9083, align 8
  store i64 %9084, i64* %RCX.i4414.pre-phi, align 8
  %9085 = add i64 %9073, 18
  store i64 %9085, i64* %3, align 8
  %9086 = inttoptr i64 %9084 to i64*
  %9087 = load i64, i64* %9086, align 8
  store i64 %9087, i64* %RCX.i4414.pre-phi, align 8
  %9088 = add i64 %9071, -12
  %9089 = add i64 %9073, 22
  store i64 %9089, i64* %3, align 8
  %9090 = inttoptr i64 %9088 to i32*
  %9091 = load i32, i32* %9090, align 4
  %9092 = sext i32 %9091 to i64
  store i64 %9092, i64* %RDI.i126, align 8
  %9093 = shl nsw i64 %9092, 3
  %9094 = add i64 %9093, %9087
  %9095 = add i64 %9073, 26
  store i64 %9095, i64* %3, align 8
  %9096 = inttoptr i64 %9094 to i64*
  %9097 = load i64, i64* %9096, align 8
  store i64 %9097, i64* %RCX.i4414.pre-phi, align 8
  %9098 = add i64 %9071, -16
  %9099 = add i64 %9073, 30
  store i64 %9099, i64* %3, align 8
  %9100 = inttoptr i64 %9098 to i32*
  %9101 = load i32, i32* %9100, align 4
  %9102 = sext i32 %9101 to i64
  store i64 %9102, i64* %RDI.i126, align 8
  %9103 = shl nsw i64 %9102, 3
  %9104 = add i64 %9103, %9097
  %9105 = add i64 %9073, 34
  store i64 %9105, i64* %3, align 8
  %9106 = inttoptr i64 %9104 to i64*
  %9107 = load i64, i64* %9106, align 8
  store i64 %9107, i64* %RCX.i4414.pre-phi, align 8
  %9108 = add i64 %9107, 2
  %9109 = load i16, i16* %SI.i1634, align 2
  %9110 = add i64 %9073, 38
  store i64 %9110, i64* %3, align 8
  %9111 = inttoptr i64 %9108 to i16*
  store i16 %9109, i16* %9111, align 2
  %9112 = load i64, i64* %RBP.i, align 8
  %9113 = add i64 %9112, -8
  %9114 = load i64, i64* %3, align 8
  %9115 = add i64 %9114, 4
  store i64 %9115, i64* %3, align 8
  %9116 = inttoptr i64 %9113 to i64*
  %9117 = load i64, i64* %9116, align 8
  store i64 %9117, i64* %RCX.i4414.pre-phi, align 8
  %9118 = add i64 %9117, 40
  %9119 = add i64 %9114, 8
  store i64 %9119, i64* %3, align 8
  %9120 = inttoptr i64 %9118 to i64*
  %9121 = load i64, i64* %9120, align 8
  store i64 %9121, i64* %RCX.i4414.pre-phi, align 8
  %9122 = add i64 %9121, 6504
  %9123 = add i64 %9114, 15
  store i64 %9123, i64* %3, align 8
  %9124 = inttoptr i64 %9122 to i64*
  %9125 = load i64, i64* %9124, align 8
  store i64 %9125, i64* %RCX.i4414.pre-phi, align 8
  %9126 = add i64 %9125, 8
  %9127 = add i64 %9114, 19
  store i64 %9127, i64* %3, align 8
  %9128 = inttoptr i64 %9126 to i64*
  %9129 = load i64, i64* %9128, align 8
  store i64 %9129, i64* %RCX.i4414.pre-phi, align 8
  %9130 = add i64 %9112, -12
  %9131 = add i64 %9114, 22
  store i64 %9131, i64* %3, align 8
  %9132 = inttoptr i64 %9130 to i32*
  %9133 = load i32, i32* %9132, align 4
  %9134 = and i32 %9133, 2
  %9135 = zext i32 %9134 to i64
  store i64 %9135, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9136 = tail call i32 @llvm.ctpop.i32(i32 %9134)
  %9137 = trunc i32 %9136 to i8
  %9138 = xor i8 %9137, 1
  store i8 %9138, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit516 = lshr exact i32 %9134, 1
  %9139 = trunc i32 %.lobit516 to i8
  %9140 = xor i8 %9139, 1
  store i8 %9140, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9141 = add i64 %9112, -408
  %9142 = add i64 %9114, 35
  store i64 %9142, i64* %3, align 8
  %9143 = inttoptr i64 %9141 to i64*
  store i64 %9129, i64* %9143, align 8
  %9144 = load i64, i64* %3, align 8
  %9145 = load i8, i8* %30, align 1
  %9146 = icmp ne i8 %9145, 0
  %.v597 = select i1 %9146, i64 23, i64 6
  %9147 = add i64 %9144, %.v597
  %cmpBr_4518bd = icmp eq i8 %9145, 1
  %9148 = load i64, i64* %RBP.i, align 8
  %9149 = add i64 %9148, -12
  %9150 = add i64 %9147, 3
  store i64 %9150, i64* %3, align 8
  %9151 = inttoptr i64 %9149 to i32*
  %9152 = load i32, i32* %9151, align 4
  %9153 = zext i32 %9152 to i64
  store i64 %9153, i64* %RAX.i186, align 8
  %9154 = add i64 %9147, 6
  store i64 %9154, i64* %3, align 8
  br i1 %cmpBr_4518bd, label %block_.L_4518d4, label %block_4518c3

block_4518c3:                                     ; preds = %block_.L_451833
  %9155 = or i64 %9153, 1
  %9156 = trunc i64 %9155 to i32
  store i64 %9155, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9157 = and i32 %9156, 255
  %9158 = tail call i32 @llvm.ctpop.i32(i32 %9157)
  %9159 = trunc i32 %9158 to i8
  %9160 = and i8 %9159, 1
  %9161 = xor i8 %9160, 1
  store i8 %9161, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %9162 = lshr i32 %9156, 31
  %9163 = trunc i32 %9162 to i8
  store i8 %9163, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9164 = add i64 %9148, -412
  %9165 = add i64 %9147, 12
  store i64 %9165, i64* %3, align 8
  %9166 = inttoptr i64 %9164 to i32*
  store i32 %9156, i32* %9166, align 4
  %9167 = load i64, i64* %3, align 8
  %9168 = add i64 %9167, 17
  store i64 %9168, i64* %3, align 8
  br label %block_.L_4518e0

block_.L_4518d4:                                  ; preds = %block_.L_451833
  %9169 = and i64 %9153, 4294967294
  store i64 %9169, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9170 = and i32 %9152, 254
  %9171 = tail call i32 @llvm.ctpop.i32(i32 %9170)
  %9172 = trunc i32 %9171 to i8
  %9173 = and i8 %9172, 1
  %9174 = xor i8 %9173, 1
  store i8 %9174, i8* %21, align 1
  %9175 = icmp ult i32 %9152, 2
  %9176 = zext i1 %9175 to i8
  store i8 %9176, i8* %30, align 1
  %9177 = lshr i32 %9152, 31
  %9178 = trunc i32 %9177 to i8
  store i8 %9178, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9179 = add i64 %9148, -412
  %9180 = trunc i64 %9169 to i32
  %9181 = add i64 %9147, 12
  store i64 %9181, i64* %3, align 8
  %9182 = inttoptr i64 %9179 to i32*
  store i32 %9180, i32* %9182, align 4
  %.pre349 = load i64, i64* %3, align 8
  br label %block_.L_4518e0

block_.L_4518e0:                                  ; preds = %block_.L_4518d4, %block_4518c3
  %9183 = phi i64 [ %.pre349, %block_.L_4518d4 ], [ %9168, %block_4518c3 ]
  %9184 = load i64, i64* %RBP.i, align 8
  %9185 = add i64 %9184, -412
  %9186 = add i64 %9183, 6
  store i64 %9186, i64* %3, align 8
  %9187 = inttoptr i64 %9185 to i32*
  %9188 = load i32, i32* %9187, align 4
  %9189 = zext i32 %9188 to i64
  store i64 %9189, i64* %RAX.i186, align 8
  %9190 = sext i32 %9188 to i64
  store i64 %9190, i64* %RCX.i4414.pre-phi, align 8
  %9191 = add i64 %9184, -408
  %9192 = add i64 %9183, 16
  store i64 %9192, i64* %3, align 8
  %9193 = inttoptr i64 %9191 to i64*
  %9194 = load i64, i64* %9193, align 8
  store i64 %9194, i64* %RDX.i4411.pre-phi, align 8
  %9195 = shl nsw i64 %9190, 3
  %9196 = add i64 %9195, %9194
  %9197 = add i64 %9183, 20
  store i64 %9197, i64* %3, align 8
  %9198 = inttoptr i64 %9196 to i64*
  %9199 = load i64, i64* %9198, align 8
  store i64 %9199, i64* %RCX.i4414.pre-phi, align 8
  %9200 = add i64 %9184, -16
  %9201 = add i64 %9183, 23
  store i64 %9201, i64* %3, align 8
  %9202 = inttoptr i64 %9200 to i32*
  %9203 = load i32, i32* %9202, align 4
  %9204 = and i32 %9203, 2
  %9205 = zext i32 %9204 to i64
  store i64 %9205, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9206 = tail call i32 @llvm.ctpop.i32(i32 %9204)
  %9207 = trunc i32 %9206 to i8
  %9208 = xor i8 %9207, 1
  store i8 %9208, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit517 = lshr exact i32 %9204, 1
  %9209 = trunc i32 %.lobit517 to i8
  %9210 = xor i8 %9209, 1
  store i8 %9210, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9211 = add i64 %9184, -424
  %9212 = add i64 %9183, 36
  store i64 %9212, i64* %3, align 8
  %9213 = inttoptr i64 %9211 to i64*
  store i64 %9199, i64* %9213, align 8
  %9214 = load i64, i64* %3, align 8
  %9215 = load i8, i8* %30, align 1
  %9216 = icmp ne i8 %9215, 0
  %.v598 = select i1 %9216, i64 23, i64 6
  %9217 = add i64 %9214, %.v598
  %cmpBr_451904 = icmp eq i8 %9215, 1
  %9218 = load i64, i64* %RBP.i, align 8
  %9219 = add i64 %9218, -16
  %9220 = add i64 %9217, 3
  store i64 %9220, i64* %3, align 8
  %9221 = inttoptr i64 %9219 to i32*
  %9222 = load i32, i32* %9221, align 4
  %9223 = zext i32 %9222 to i64
  store i64 %9223, i64* %RAX.i186, align 8
  %9224 = add i64 %9217, 6
  store i64 %9224, i64* %3, align 8
  br i1 %cmpBr_451904, label %block_.L_45191b, label %block_45190a

block_45190a:                                     ; preds = %block_.L_4518e0
  %9225 = or i64 %9223, 1
  %9226 = trunc i64 %9225 to i32
  store i64 %9225, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9227 = and i32 %9226, 255
  %9228 = tail call i32 @llvm.ctpop.i32(i32 %9227)
  %9229 = trunc i32 %9228 to i8
  %9230 = and i8 %9229, 1
  %9231 = xor i8 %9230, 1
  store i8 %9231, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %9232 = lshr i32 %9226, 31
  %9233 = trunc i32 %9232 to i8
  store i8 %9233, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9234 = add i64 %9218, -428
  %9235 = add i64 %9217, 12
  store i64 %9235, i64* %3, align 8
  %9236 = inttoptr i64 %9234 to i32*
  store i32 %9226, i32* %9236, align 4
  %9237 = load i64, i64* %3, align 8
  %9238 = add i64 %9237, 17
  store i64 %9238, i64* %3, align 8
  br label %block_.L_451927

block_.L_45191b:                                  ; preds = %block_.L_4518e0
  %9239 = and i64 %9223, 4294967294
  store i64 %9239, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9240 = and i32 %9222, 254
  %9241 = tail call i32 @llvm.ctpop.i32(i32 %9240)
  %9242 = trunc i32 %9241 to i8
  %9243 = and i8 %9242, 1
  %9244 = xor i8 %9243, 1
  store i8 %9244, i8* %21, align 1
  %9245 = icmp ult i32 %9222, 2
  %9246 = zext i1 %9245 to i8
  store i8 %9246, i8* %30, align 1
  %9247 = lshr i32 %9222, 31
  %9248 = trunc i32 %9247 to i8
  store i8 %9248, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9249 = add i64 %9218, -428
  %9250 = trunc i64 %9239 to i32
  %9251 = add i64 %9217, 12
  store i64 %9251, i64* %3, align 8
  %9252 = inttoptr i64 %9249 to i32*
  store i32 %9250, i32* %9252, align 4
  %.pre350 = load i64, i64* %3, align 8
  br label %block_.L_451927

block_.L_451927:                                  ; preds = %block_.L_45191b, %block_45190a
  %9253 = phi i64 [ %.pre350, %block_.L_45191b ], [ %9238, %block_45190a ]
  %9254 = load i64, i64* %RBP.i, align 8
  %9255 = add i64 %9254, -428
  %9256 = add i64 %9253, 6
  store i64 %9256, i64* %3, align 8
  %9257 = inttoptr i64 %9255 to i32*
  %9258 = load i32, i32* %9257, align 4
  %9259 = shl i32 %9258, 1
  %9260 = icmp slt i32 %9258, 0
  %9261 = icmp slt i32 %9259, 0
  %9262 = xor i1 %9260, %9261
  %9263 = zext i32 %9259 to i64
  store i64 %9263, i64* %RAX.i186, align 8
  %.lobit155 = lshr i32 %9258, 31
  %9264 = trunc i32 %.lobit155 to i8
  store i8 %9264, i8* %14, align 1
  %9265 = and i32 %9259, 254
  %9266 = tail call i32 @llvm.ctpop.i32(i32 %9265)
  %9267 = trunc i32 %9266 to i8
  %9268 = and i8 %9267, 1
  %9269 = xor i8 %9268, 1
  store i8 %9269, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9270 = icmp eq i32 %9259, 0
  %9271 = zext i1 %9270 to i8
  store i8 %9271, i8* %30, align 1
  %9272 = lshr i32 %9258, 30
  %9273 = trunc i32 %9272 to i8
  %9274 = and i8 %9273, 1
  store i8 %9274, i8* %33, align 1
  %9275 = zext i1 %9262 to i8
  store i8 %9275, i8* %39, align 1
  %9276 = sext i32 %9259 to i64
  store i64 %9276, i64* %RCX.i4414.pre-phi, align 8
  %9277 = add i64 %9254, -424
  %9278 = add i64 %9253, 18
  store i64 %9278, i64* %3, align 8
  %9279 = inttoptr i64 %9277 to i64*
  %9280 = load i64, i64* %9279, align 8
  store i64 %9280, i64* %RDX.i4411.pre-phi, align 8
  %9281 = shl nsw i64 %9276, 3
  %9282 = add i64 %9281, %9280
  %9283 = add i64 %9253, 22
  store i64 %9283, i64* %3, align 8
  %9284 = inttoptr i64 %9282 to i64*
  %9285 = load i64, i64* %9284, align 8
  store i64 %9285, i64* %RCX.i4414.pre-phi, align 8
  %9286 = add i64 %9253, 25
  store i64 %9286, i64* %3, align 8
  %9287 = inttoptr i64 %9285 to i16*
  %9288 = load i16, i16* %9287, align 2
  store i16 %9288, i16* %SI.i1634, align 2
  %9289 = add i64 %9254, -8
  %9290 = add i64 %9253, 29
  store i64 %9290, i64* %3, align 8
  %9291 = inttoptr i64 %9289 to i64*
  %9292 = load i64, i64* %9291, align 8
  store i64 %9292, i64* %RCX.i4414.pre-phi, align 8
  %9293 = add i64 %9292, 56
  %9294 = add i64 %9253, 33
  store i64 %9294, i64* %3, align 8
  %9295 = inttoptr i64 %9293 to i64*
  %9296 = load i64, i64* %9295, align 8
  store i64 %9296, i64* %RCX.i4414.pre-phi, align 8
  %9297 = add i64 %9296, 6504
  %9298 = add i64 %9253, 40
  store i64 %9298, i64* %3, align 8
  %9299 = inttoptr i64 %9297 to i64*
  %9300 = load i64, i64* %9299, align 8
  store i64 %9300, i64* %RCX.i4414.pre-phi, align 8
  %9301 = add i64 %9300, 8
  %9302 = add i64 %9253, 44
  store i64 %9302, i64* %3, align 8
  %9303 = inttoptr i64 %9301 to i64*
  %9304 = load i64, i64* %9303, align 8
  store i64 %9304, i64* %RCX.i4414.pre-phi, align 8
  %9305 = add i64 %9254, -12
  %9306 = add i64 %9253, 48
  store i64 %9306, i64* %3, align 8
  %9307 = inttoptr i64 %9305 to i32*
  %9308 = load i32, i32* %9307, align 4
  %9309 = sext i32 %9308 to i64
  store i64 %9309, i64* %RDI.i126, align 8
  %9310 = shl nsw i64 %9309, 3
  %9311 = add i64 %9310, %9304
  %9312 = add i64 %9253, 52
  store i64 %9312, i64* %3, align 8
  %9313 = inttoptr i64 %9311 to i64*
  %9314 = load i64, i64* %9313, align 8
  store i64 %9314, i64* %RCX.i4414.pre-phi, align 8
  %9315 = add i64 %9254, -16
  %9316 = add i64 %9253, 56
  store i64 %9316, i64* %3, align 8
  %9317 = inttoptr i64 %9315 to i32*
  %9318 = load i32, i32* %9317, align 4
  %9319 = sext i32 %9318 to i64
  store i64 %9319, i64* %RDI.i126, align 8
  %9320 = shl nsw i64 %9319, 3
  %9321 = add i64 %9320, %9314
  %9322 = add i64 %9253, 60
  store i64 %9322, i64* %3, align 8
  %9323 = inttoptr i64 %9321 to i64*
  %9324 = load i64, i64* %9323, align 8
  store i64 %9324, i64* %RCX.i4414.pre-phi, align 8
  %9325 = add i64 %9253, 63
  store i64 %9325, i64* %3, align 8
  %9326 = inttoptr i64 %9324 to i16*
  store i16 %9288, i16* %9326, align 2
  %9327 = load i64, i64* %RBP.i, align 8
  %9328 = add i64 %9327, -8
  %9329 = load i64, i64* %3, align 8
  %9330 = add i64 %9329, 4
  store i64 %9330, i64* %3, align 8
  %9331 = inttoptr i64 %9328 to i64*
  %9332 = load i64, i64* %9331, align 8
  store i64 %9332, i64* %RCX.i4414.pre-phi, align 8
  %9333 = add i64 %9332, 48
  %9334 = add i64 %9329, 8
  store i64 %9334, i64* %3, align 8
  %9335 = inttoptr i64 %9333 to i64*
  %9336 = load i64, i64* %9335, align 8
  store i64 %9336, i64* %RCX.i4414.pre-phi, align 8
  %9337 = add i64 %9336, 6504
  %9338 = add i64 %9329, 15
  store i64 %9338, i64* %3, align 8
  %9339 = inttoptr i64 %9337 to i64*
  %9340 = load i64, i64* %9339, align 8
  store i64 %9340, i64* %RCX.i4414.pre-phi, align 8
  %9341 = add i64 %9340, 8
  %9342 = add i64 %9329, 19
  store i64 %9342, i64* %3, align 8
  %9343 = inttoptr i64 %9341 to i64*
  %9344 = load i64, i64* %9343, align 8
  store i64 %9344, i64* %RCX.i4414.pre-phi, align 8
  %9345 = add i64 %9327, -12
  %9346 = add i64 %9329, 23
  store i64 %9346, i64* %3, align 8
  %9347 = inttoptr i64 %9345 to i32*
  %9348 = load i32, i32* %9347, align 4
  %9349 = sext i32 %9348 to i64
  store i64 %9349, i64* %RDI.i126, align 8
  %9350 = shl nsw i64 %9349, 3
  %9351 = add i64 %9350, %9344
  %9352 = add i64 %9329, 27
  store i64 %9352, i64* %3, align 8
  %9353 = inttoptr i64 %9351 to i64*
  %9354 = load i64, i64* %9353, align 8
  store i64 %9354, i64* %RCX.i4414.pre-phi, align 8
  %9355 = add i64 %9327, -16
  %9356 = add i64 %9329, 31
  store i64 %9356, i64* %3, align 8
  %9357 = inttoptr i64 %9355 to i32*
  %9358 = load i32, i32* %9357, align 4
  %9359 = sext i32 %9358 to i64
  store i64 %9359, i64* %RDI.i126, align 8
  %9360 = shl nsw i64 %9359, 3
  %9361 = add i64 %9360, %9354
  %9362 = add i64 %9329, 35
  store i64 %9362, i64* %3, align 8
  %9363 = inttoptr i64 %9361 to i64*
  %9364 = load i64, i64* %9363, align 8
  store i64 %9364, i64* %RCX.i4414.pre-phi, align 8
  %9365 = load i16, i16* %SI.i1634, align 2
  %9366 = add i64 %9329, 38
  store i64 %9366, i64* %3, align 8
  %9367 = inttoptr i64 %9364 to i16*
  store i16 %9365, i16* %9367, align 2
  %9368 = load i64, i64* %RBP.i, align 8
  %9369 = add i64 %9368, -8
  %9370 = load i64, i64* %3, align 8
  %9371 = add i64 %9370, 4
  store i64 %9371, i64* %3, align 8
  %9372 = inttoptr i64 %9369 to i64*
  %9373 = load i64, i64* %9372, align 8
  store i64 %9373, i64* %RCX.i4414.pre-phi, align 8
  %9374 = add i64 %9373, 40
  %9375 = add i64 %9370, 8
  store i64 %9375, i64* %3, align 8
  %9376 = inttoptr i64 %9374 to i64*
  %9377 = load i64, i64* %9376, align 8
  store i64 %9377, i64* %RCX.i4414.pre-phi, align 8
  %9378 = add i64 %9377, 6504
  %9379 = add i64 %9370, 15
  store i64 %9379, i64* %3, align 8
  %9380 = inttoptr i64 %9378 to i64*
  %9381 = load i64, i64* %9380, align 8
  store i64 %9381, i64* %RCX.i4414.pre-phi, align 8
  %9382 = add i64 %9381, 8
  %9383 = add i64 %9370, 19
  store i64 %9383, i64* %3, align 8
  %9384 = inttoptr i64 %9382 to i64*
  %9385 = load i64, i64* %9384, align 8
  store i64 %9385, i64* %RCX.i4414.pre-phi, align 8
  %9386 = add i64 %9368, -12
  %9387 = add i64 %9370, 22
  store i64 %9387, i64* %3, align 8
  %9388 = inttoptr i64 %9386 to i32*
  %9389 = load i32, i32* %9388, align 4
  %9390 = and i32 %9389, 2
  %9391 = zext i32 %9390 to i64
  store i64 %9391, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9392 = tail call i32 @llvm.ctpop.i32(i32 %9390)
  %9393 = trunc i32 %9392 to i8
  %9394 = xor i8 %9393, 1
  store i8 %9394, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit518 = lshr exact i32 %9390, 1
  %9395 = trunc i32 %.lobit518 to i8
  %9396 = xor i8 %9395, 1
  store i8 %9396, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9397 = add i64 %9368, -440
  %9398 = add i64 %9370, 35
  store i64 %9398, i64* %3, align 8
  %9399 = inttoptr i64 %9397 to i64*
  store i64 %9385, i64* %9399, align 8
  %9400 = load i64, i64* %3, align 8
  %9401 = load i8, i8* %30, align 1
  %9402 = icmp ne i8 %9401, 0
  %.v599 = select i1 %9402, i64 23, i64 6
  %9403 = add i64 %9400, %.v599
  %cmpBr_4519b0 = icmp eq i8 %9401, 1
  %9404 = load i64, i64* %RBP.i, align 8
  %9405 = add i64 %9404, -12
  %9406 = add i64 %9403, 3
  store i64 %9406, i64* %3, align 8
  %9407 = inttoptr i64 %9405 to i32*
  %9408 = load i32, i32* %9407, align 4
  %9409 = zext i32 %9408 to i64
  store i64 %9409, i64* %RAX.i186, align 8
  %9410 = add i64 %9403, 6
  store i64 %9410, i64* %3, align 8
  br i1 %cmpBr_4519b0, label %block_.L_4519c7, label %block_4519b6

block_4519b6:                                     ; preds = %block_.L_451927
  %9411 = or i64 %9409, 1
  %9412 = trunc i64 %9411 to i32
  store i64 %9411, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9413 = and i32 %9412, 255
  %9414 = tail call i32 @llvm.ctpop.i32(i32 %9413)
  %9415 = trunc i32 %9414 to i8
  %9416 = and i8 %9415, 1
  %9417 = xor i8 %9416, 1
  store i8 %9417, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %9418 = lshr i32 %9412, 31
  %9419 = trunc i32 %9418 to i8
  store i8 %9419, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9420 = add i64 %9404, -444
  %9421 = add i64 %9403, 12
  store i64 %9421, i64* %3, align 8
  %9422 = inttoptr i64 %9420 to i32*
  store i32 %9412, i32* %9422, align 4
  %9423 = load i64, i64* %3, align 8
  %9424 = add i64 %9423, 17
  store i64 %9424, i64* %3, align 8
  br label %block_.L_4519d3

block_.L_4519c7:                                  ; preds = %block_.L_451927
  %9425 = and i64 %9409, 4294967294
  store i64 %9425, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9426 = and i32 %9408, 254
  %9427 = tail call i32 @llvm.ctpop.i32(i32 %9426)
  %9428 = trunc i32 %9427 to i8
  %9429 = and i8 %9428, 1
  %9430 = xor i8 %9429, 1
  store i8 %9430, i8* %21, align 1
  %9431 = icmp ult i32 %9408, 2
  %9432 = zext i1 %9431 to i8
  store i8 %9432, i8* %30, align 1
  %9433 = lshr i32 %9408, 31
  %9434 = trunc i32 %9433 to i8
  store i8 %9434, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9435 = add i64 %9404, -444
  %9436 = trunc i64 %9425 to i32
  %9437 = add i64 %9403, 12
  store i64 %9437, i64* %3, align 8
  %9438 = inttoptr i64 %9435 to i32*
  store i32 %9436, i32* %9438, align 4
  %.pre351 = load i64, i64* %3, align 8
  br label %block_.L_4519d3

block_.L_4519d3:                                  ; preds = %block_.L_4519c7, %block_4519b6
  %9439 = phi i64 [ %.pre351, %block_.L_4519c7 ], [ %9424, %block_4519b6 ]
  %9440 = load i64, i64* %RBP.i, align 8
  %9441 = add i64 %9440, -444
  %9442 = add i64 %9439, 6
  store i64 %9442, i64* %3, align 8
  %9443 = inttoptr i64 %9441 to i32*
  %9444 = load i32, i32* %9443, align 4
  %9445 = zext i32 %9444 to i64
  store i64 %9445, i64* %RAX.i186, align 8
  %9446 = sext i32 %9444 to i64
  store i64 %9446, i64* %RCX.i4414.pre-phi, align 8
  %9447 = add i64 %9440, -440
  %9448 = add i64 %9439, 16
  store i64 %9448, i64* %3, align 8
  %9449 = inttoptr i64 %9447 to i64*
  %9450 = load i64, i64* %9449, align 8
  store i64 %9450, i64* %RDX.i4411.pre-phi, align 8
  %9451 = shl nsw i64 %9446, 3
  %9452 = add i64 %9451, %9450
  %9453 = add i64 %9439, 20
  store i64 %9453, i64* %3, align 8
  %9454 = inttoptr i64 %9452 to i64*
  %9455 = load i64, i64* %9454, align 8
  store i64 %9455, i64* %RCX.i4414.pre-phi, align 8
  %9456 = add i64 %9440, -16
  %9457 = add i64 %9439, 23
  store i64 %9457, i64* %3, align 8
  %9458 = inttoptr i64 %9456 to i32*
  %9459 = load i32, i32* %9458, align 4
  %9460 = and i32 %9459, 2
  %9461 = zext i32 %9460 to i64
  store i64 %9461, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9462 = tail call i32 @llvm.ctpop.i32(i32 %9460)
  %9463 = trunc i32 %9462 to i8
  %9464 = xor i8 %9463, 1
  store i8 %9464, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit519 = lshr exact i32 %9460, 1
  %9465 = trunc i32 %.lobit519 to i8
  %9466 = xor i8 %9465, 1
  store i8 %9466, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9467 = add i64 %9440, -456
  %9468 = add i64 %9439, 36
  store i64 %9468, i64* %3, align 8
  %9469 = inttoptr i64 %9467 to i64*
  store i64 %9455, i64* %9469, align 8
  %9470 = load i64, i64* %3, align 8
  %9471 = load i8, i8* %30, align 1
  %9472 = icmp ne i8 %9471, 0
  %.v600 = select i1 %9472, i64 23, i64 6
  %9473 = add i64 %9470, %.v600
  %cmpBr_4519f7 = icmp eq i8 %9471, 1
  %9474 = load i64, i64* %RBP.i, align 8
  %9475 = add i64 %9474, -16
  %9476 = add i64 %9473, 3
  store i64 %9476, i64* %3, align 8
  %9477 = inttoptr i64 %9475 to i32*
  %9478 = load i32, i32* %9477, align 4
  %9479 = zext i32 %9478 to i64
  store i64 %9479, i64* %RAX.i186, align 8
  %9480 = add i64 %9473, 6
  store i64 %9480, i64* %3, align 8
  br i1 %cmpBr_4519f7, label %block_.L_451a0e, label %block_4519fd

block_4519fd:                                     ; preds = %block_.L_4519d3
  %9481 = or i64 %9479, 1
  %9482 = trunc i64 %9481 to i32
  store i64 %9481, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9483 = and i32 %9482, 255
  %9484 = tail call i32 @llvm.ctpop.i32(i32 %9483)
  %9485 = trunc i32 %9484 to i8
  %9486 = and i8 %9485, 1
  %9487 = xor i8 %9486, 1
  store i8 %9487, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %9488 = lshr i32 %9482, 31
  %9489 = trunc i32 %9488 to i8
  store i8 %9489, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9490 = add i64 %9474, -460
  %9491 = add i64 %9473, 12
  store i64 %9491, i64* %3, align 8
  %9492 = inttoptr i64 %9490 to i32*
  store i32 %9482, i32* %9492, align 4
  %9493 = load i64, i64* %3, align 8
  %9494 = add i64 %9493, 17
  store i64 %9494, i64* %3, align 8
  br label %block_.L_451a1a

block_.L_451a0e:                                  ; preds = %block_.L_4519d3
  %9495 = and i64 %9479, 4294967294
  store i64 %9495, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9496 = and i32 %9478, 254
  %9497 = tail call i32 @llvm.ctpop.i32(i32 %9496)
  %9498 = trunc i32 %9497 to i8
  %9499 = and i8 %9498, 1
  %9500 = xor i8 %9499, 1
  store i8 %9500, i8* %21, align 1
  %9501 = icmp ult i32 %9478, 2
  %9502 = zext i1 %9501 to i8
  store i8 %9502, i8* %30, align 1
  %9503 = lshr i32 %9478, 31
  %9504 = trunc i32 %9503 to i8
  store i8 %9504, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9505 = add i64 %9474, -460
  %9506 = trunc i64 %9495 to i32
  %9507 = add i64 %9473, 12
  store i64 %9507, i64* %3, align 8
  %9508 = inttoptr i64 %9505 to i32*
  store i32 %9506, i32* %9508, align 4
  %.pre352 = load i64, i64* %3, align 8
  br label %block_.L_451a1a

block_.L_451a1a:                                  ; preds = %block_.L_451a0e, %block_4519fd
  %9509 = phi i64 [ %.pre352, %block_.L_451a0e ], [ %9494, %block_4519fd ]
  %9510 = load i64, i64* %RBP.i, align 8
  %9511 = add i64 %9510, -460
  %9512 = add i64 %9509, 6
  store i64 %9512, i64* %3, align 8
  %9513 = inttoptr i64 %9511 to i32*
  %9514 = load i32, i32* %9513, align 4
  %9515 = shl i32 %9514, 1
  %9516 = icmp slt i32 %9514, 0
  %9517 = icmp slt i32 %9515, 0
  %9518 = xor i1 %9516, %9517
  %9519 = zext i32 %9515 to i64
  store i64 %9519, i64* %RAX.i186, align 8
  %.lobit158 = lshr i32 %9514, 31
  %9520 = trunc i32 %.lobit158 to i8
  store i8 %9520, i8* %14, align 1
  %9521 = and i32 %9515, 254
  %9522 = tail call i32 @llvm.ctpop.i32(i32 %9521)
  %9523 = trunc i32 %9522 to i8
  %9524 = and i8 %9523, 1
  %9525 = xor i8 %9524, 1
  store i8 %9525, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9526 = icmp eq i32 %9515, 0
  %9527 = zext i1 %9526 to i8
  store i8 %9527, i8* %30, align 1
  %9528 = lshr i32 %9514, 30
  %9529 = trunc i32 %9528 to i8
  %9530 = and i8 %9529, 1
  store i8 %9530, i8* %33, align 1
  %9531 = zext i1 %9518 to i8
  store i8 %9531, i8* %39, align 1
  %9532 = sext i32 %9515 to i64
  store i64 %9532, i64* %RCX.i4414.pre-phi, align 8
  %9533 = add i64 %9510, -456
  %9534 = add i64 %9509, 18
  store i64 %9534, i64* %3, align 8
  %9535 = inttoptr i64 %9533 to i64*
  %9536 = load i64, i64* %9535, align 8
  store i64 %9536, i64* %RDX.i4411.pre-phi, align 8
  %9537 = shl nsw i64 %9532, 3
  %9538 = add i64 %9537, %9536
  %9539 = add i64 %9509, 22
  store i64 %9539, i64* %3, align 8
  %9540 = inttoptr i64 %9538 to i64*
  %9541 = load i64, i64* %9540, align 8
  store i64 %9541, i64* %RCX.i4414.pre-phi, align 8
  %9542 = add i64 %9541, 2
  %9543 = add i64 %9509, 26
  store i64 %9543, i64* %3, align 8
  %9544 = inttoptr i64 %9542 to i16*
  %9545 = load i16, i16* %9544, align 2
  store i16 %9545, i16* %SI.i1634, align 2
  %9546 = add i64 %9510, -8
  %9547 = add i64 %9509, 30
  store i64 %9547, i64* %3, align 8
  %9548 = inttoptr i64 %9546 to i64*
  %9549 = load i64, i64* %9548, align 8
  store i64 %9549, i64* %RCX.i4414.pre-phi, align 8
  %9550 = add i64 %9549, 56
  %9551 = add i64 %9509, 34
  store i64 %9551, i64* %3, align 8
  %9552 = inttoptr i64 %9550 to i64*
  %9553 = load i64, i64* %9552, align 8
  store i64 %9553, i64* %RCX.i4414.pre-phi, align 8
  %9554 = add i64 %9553, 6504
  %9555 = add i64 %9509, 41
  store i64 %9555, i64* %3, align 8
  %9556 = inttoptr i64 %9554 to i64*
  %9557 = load i64, i64* %9556, align 8
  store i64 %9557, i64* %RCX.i4414.pre-phi, align 8
  %9558 = add i64 %9557, 8
  %9559 = add i64 %9509, 45
  store i64 %9559, i64* %3, align 8
  %9560 = inttoptr i64 %9558 to i64*
  %9561 = load i64, i64* %9560, align 8
  store i64 %9561, i64* %RCX.i4414.pre-phi, align 8
  %9562 = add i64 %9510, -12
  %9563 = add i64 %9509, 49
  store i64 %9563, i64* %3, align 8
  %9564 = inttoptr i64 %9562 to i32*
  %9565 = load i32, i32* %9564, align 4
  %9566 = sext i32 %9565 to i64
  store i64 %9566, i64* %RDI.i126, align 8
  %9567 = shl nsw i64 %9566, 3
  %9568 = add i64 %9567, %9561
  %9569 = add i64 %9509, 53
  store i64 %9569, i64* %3, align 8
  %9570 = inttoptr i64 %9568 to i64*
  %9571 = load i64, i64* %9570, align 8
  store i64 %9571, i64* %RCX.i4414.pre-phi, align 8
  %9572 = add i64 %9510, -16
  %9573 = add i64 %9509, 57
  store i64 %9573, i64* %3, align 8
  %9574 = inttoptr i64 %9572 to i32*
  %9575 = load i32, i32* %9574, align 4
  %9576 = sext i32 %9575 to i64
  store i64 %9576, i64* %RDI.i126, align 8
  %9577 = shl nsw i64 %9576, 3
  %9578 = add i64 %9577, %9571
  %9579 = add i64 %9509, 61
  store i64 %9579, i64* %3, align 8
  %9580 = inttoptr i64 %9578 to i64*
  %9581 = load i64, i64* %9580, align 8
  store i64 %9581, i64* %RCX.i4414.pre-phi, align 8
  %9582 = add i64 %9581, 2
  %9583 = add i64 %9509, 65
  store i64 %9583, i64* %3, align 8
  %9584 = inttoptr i64 %9582 to i16*
  store i16 %9545, i16* %9584, align 2
  %9585 = load i64, i64* %RBP.i, align 8
  %9586 = add i64 %9585, -8
  %9587 = load i64, i64* %3, align 8
  %9588 = add i64 %9587, 4
  store i64 %9588, i64* %3, align 8
  %9589 = inttoptr i64 %9586 to i64*
  %9590 = load i64, i64* %9589, align 8
  store i64 %9590, i64* %RCX.i4414.pre-phi, align 8
  %9591 = add i64 %9590, 48
  %9592 = add i64 %9587, 8
  store i64 %9592, i64* %3, align 8
  %9593 = inttoptr i64 %9591 to i64*
  %9594 = load i64, i64* %9593, align 8
  store i64 %9594, i64* %RCX.i4414.pre-phi, align 8
  %9595 = add i64 %9594, 6504
  %9596 = add i64 %9587, 15
  store i64 %9596, i64* %3, align 8
  %9597 = inttoptr i64 %9595 to i64*
  %9598 = load i64, i64* %9597, align 8
  store i64 %9598, i64* %RCX.i4414.pre-phi, align 8
  %9599 = add i64 %9598, 8
  %9600 = add i64 %9587, 19
  store i64 %9600, i64* %3, align 8
  %9601 = inttoptr i64 %9599 to i64*
  %9602 = load i64, i64* %9601, align 8
  store i64 %9602, i64* %RCX.i4414.pre-phi, align 8
  %9603 = add i64 %9585, -12
  %9604 = add i64 %9587, 23
  store i64 %9604, i64* %3, align 8
  %9605 = inttoptr i64 %9603 to i32*
  %9606 = load i32, i32* %9605, align 4
  %9607 = sext i32 %9606 to i64
  store i64 %9607, i64* %RDI.i126, align 8
  %9608 = shl nsw i64 %9607, 3
  %9609 = add i64 %9608, %9602
  %9610 = add i64 %9587, 27
  store i64 %9610, i64* %3, align 8
  %9611 = inttoptr i64 %9609 to i64*
  %9612 = load i64, i64* %9611, align 8
  store i64 %9612, i64* %RCX.i4414.pre-phi, align 8
  %9613 = add i64 %9585, -16
  %9614 = add i64 %9587, 31
  store i64 %9614, i64* %3, align 8
  %9615 = inttoptr i64 %9613 to i32*
  %9616 = load i32, i32* %9615, align 4
  %9617 = sext i32 %9616 to i64
  store i64 %9617, i64* %RDI.i126, align 8
  %9618 = shl nsw i64 %9617, 3
  %9619 = add i64 %9618, %9612
  %9620 = add i64 %9587, 35
  store i64 %9620, i64* %3, align 8
  %9621 = inttoptr i64 %9619 to i64*
  %9622 = load i64, i64* %9621, align 8
  store i64 %9622, i64* %RCX.i4414.pre-phi, align 8
  %9623 = add i64 %9622, 2
  %9624 = load i16, i16* %SI.i1634, align 2
  %9625 = add i64 %9587, 39
  store i64 %9625, i64* %3, align 8
  %9626 = inttoptr i64 %9623 to i16*
  store i16 %9624, i16* %9626, align 2
  %9627 = load i64, i64* %RBP.i, align 8
  %9628 = add i64 %9627, -8
  %9629 = load i64, i64* %3, align 8
  %9630 = add i64 %9629, 4
  store i64 %9630, i64* %3, align 8
  %9631 = inttoptr i64 %9628 to i64*
  %9632 = load i64, i64* %9631, align 8
  store i64 %9632, i64* %RCX.i4414.pre-phi, align 8
  %9633 = add i64 %9632, 40
  %9634 = add i64 %9629, 8
  store i64 %9634, i64* %3, align 8
  %9635 = inttoptr i64 %9633 to i64*
  %9636 = load i64, i64* %9635, align 8
  store i64 %9636, i64* %RCX.i4414.pre-phi, align 8
  %9637 = add i64 %9636, 6480
  %9638 = add i64 %9629, 15
  store i64 %9638, i64* %3, align 8
  %9639 = inttoptr i64 %9637 to i64*
  %9640 = load i64, i64* %9639, align 8
  store i64 %9640, i64* %RCX.i4414.pre-phi, align 8
  %9641 = add i64 %9629, 18
  store i64 %9641, i64* %3, align 8
  %9642 = inttoptr i64 %9640 to i64*
  %9643 = load i64, i64* %9642, align 8
  store i64 %9643, i64* %RCX.i4414.pre-phi, align 8
  %9644 = add i64 %9627, -12
  %9645 = add i64 %9629, 21
  store i64 %9645, i64* %3, align 8
  %9646 = inttoptr i64 %9644 to i32*
  %9647 = load i32, i32* %9646, align 4
  %9648 = and i32 %9647, 2
  %9649 = zext i32 %9648 to i64
  store i64 %9649, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9650 = tail call i32 @llvm.ctpop.i32(i32 %9648)
  %9651 = trunc i32 %9650 to i8
  %9652 = xor i8 %9651, 1
  store i8 %9652, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit520 = lshr exact i32 %9648, 1
  %9653 = trunc i32 %.lobit520 to i8
  %9654 = xor i8 %9653, 1
  store i8 %9654, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9655 = add i64 %9627, -472
  %9656 = add i64 %9629, 34
  store i64 %9656, i64* %3, align 8
  %9657 = inttoptr i64 %9655 to i64*
  store i64 %9643, i64* %9657, align 8
  %9658 = load i64, i64* %3, align 8
  %9659 = load i8, i8* %30, align 1
  %9660 = icmp ne i8 %9659, 0
  %.v601 = select i1 %9660, i64 23, i64 6
  %9661 = add i64 %9658, %.v601
  %cmpBr_451aa5 = icmp eq i8 %9659, 1
  %9662 = load i64, i64* %RBP.i, align 8
  %9663 = add i64 %9662, -12
  %9664 = add i64 %9661, 3
  store i64 %9664, i64* %3, align 8
  %9665 = inttoptr i64 %9663 to i32*
  %9666 = load i32, i32* %9665, align 4
  %9667 = zext i32 %9666 to i64
  store i64 %9667, i64* %RAX.i186, align 8
  %9668 = add i64 %9661, 6
  store i64 %9668, i64* %3, align 8
  br i1 %cmpBr_451aa5, label %block_.L_451abc, label %block_451aab

block_451aab:                                     ; preds = %block_.L_451a1a
  %9669 = or i64 %9667, 1
  %9670 = trunc i64 %9669 to i32
  store i64 %9669, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9671 = and i32 %9670, 255
  %9672 = tail call i32 @llvm.ctpop.i32(i32 %9671)
  %9673 = trunc i32 %9672 to i8
  %9674 = and i8 %9673, 1
  %9675 = xor i8 %9674, 1
  store i8 %9675, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %9676 = lshr i32 %9670, 31
  %9677 = trunc i32 %9676 to i8
  store i8 %9677, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9678 = add i64 %9662, -476
  %9679 = add i64 %9661, 12
  store i64 %9679, i64* %3, align 8
  %9680 = inttoptr i64 %9678 to i32*
  store i32 %9670, i32* %9680, align 4
  %9681 = load i64, i64* %3, align 8
  %9682 = add i64 %9681, 17
  store i64 %9682, i64* %3, align 8
  br label %block_.L_451ac8

block_.L_451abc:                                  ; preds = %block_.L_451a1a
  %9683 = and i64 %9667, 4294967294
  store i64 %9683, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9684 = and i32 %9666, 254
  %9685 = tail call i32 @llvm.ctpop.i32(i32 %9684)
  %9686 = trunc i32 %9685 to i8
  %9687 = and i8 %9686, 1
  %9688 = xor i8 %9687, 1
  store i8 %9688, i8* %21, align 1
  %9689 = icmp ult i32 %9666, 2
  %9690 = zext i1 %9689 to i8
  store i8 %9690, i8* %30, align 1
  %9691 = lshr i32 %9666, 31
  %9692 = trunc i32 %9691 to i8
  store i8 %9692, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9693 = add i64 %9662, -476
  %9694 = trunc i64 %9683 to i32
  %9695 = add i64 %9661, 12
  store i64 %9695, i64* %3, align 8
  %9696 = inttoptr i64 %9693 to i32*
  store i32 %9694, i32* %9696, align 4
  %.pre353 = load i64, i64* %3, align 8
  br label %block_.L_451ac8

block_.L_451ac8:                                  ; preds = %block_.L_451abc, %block_451aab
  %9697 = phi i64 [ %.pre353, %block_.L_451abc ], [ %9682, %block_451aab ]
  %9698 = load i64, i64* %RBP.i, align 8
  %9699 = add i64 %9698, -476
  %9700 = add i64 %9697, 6
  store i64 %9700, i64* %3, align 8
  %9701 = inttoptr i64 %9699 to i32*
  %9702 = load i32, i32* %9701, align 4
  %9703 = zext i32 %9702 to i64
  store i64 %9703, i64* %RAX.i186, align 8
  %9704 = sext i32 %9702 to i64
  store i64 %9704, i64* %RCX.i4414.pre-phi, align 8
  %9705 = add i64 %9698, -472
  %9706 = add i64 %9697, 16
  store i64 %9706, i64* %3, align 8
  %9707 = inttoptr i64 %9705 to i64*
  %9708 = load i64, i64* %9707, align 8
  store i64 %9708, i64* %RDX.i4411.pre-phi, align 8
  %9709 = shl nsw i64 %9704, 3
  %9710 = add i64 %9709, %9708
  %9711 = add i64 %9697, 20
  store i64 %9711, i64* %3, align 8
  %9712 = inttoptr i64 %9710 to i64*
  %9713 = load i64, i64* %9712, align 8
  store i64 %9713, i64* %RCX.i4414.pre-phi, align 8
  %9714 = add i64 %9698, -16
  %9715 = add i64 %9697, 23
  store i64 %9715, i64* %3, align 8
  %9716 = inttoptr i64 %9714 to i32*
  %9717 = load i32, i32* %9716, align 4
  %9718 = and i32 %9717, 2
  %9719 = zext i32 %9718 to i64
  store i64 %9719, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9720 = tail call i32 @llvm.ctpop.i32(i32 %9718)
  %9721 = trunc i32 %9720 to i8
  %9722 = xor i8 %9721, 1
  store i8 %9722, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit521 = lshr exact i32 %9718, 1
  %9723 = trunc i32 %.lobit521 to i8
  %9724 = xor i8 %9723, 1
  store i8 %9724, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9725 = add i64 %9698, -488
  %9726 = add i64 %9697, 36
  store i64 %9726, i64* %3, align 8
  %9727 = inttoptr i64 %9725 to i64*
  store i64 %9713, i64* %9727, align 8
  %9728 = load i64, i64* %3, align 8
  %9729 = load i8, i8* %30, align 1
  %9730 = icmp ne i8 %9729, 0
  %.v602 = select i1 %9730, i64 23, i64 6
  %9731 = add i64 %9728, %.v602
  %cmpBr_451aec = icmp eq i8 %9729, 1
  %9732 = load i64, i64* %RBP.i, align 8
  %9733 = add i64 %9732, -16
  %9734 = add i64 %9731, 3
  store i64 %9734, i64* %3, align 8
  %9735 = inttoptr i64 %9733 to i32*
  %9736 = load i32, i32* %9735, align 4
  %9737 = zext i32 %9736 to i64
  store i64 %9737, i64* %RAX.i186, align 8
  %9738 = add i64 %9731, 6
  store i64 %9738, i64* %3, align 8
  br i1 %cmpBr_451aec, label %block_.L_451b03, label %block_451af2

block_451af2:                                     ; preds = %block_.L_451ac8
  %9739 = or i64 %9737, 1
  %9740 = trunc i64 %9739 to i32
  store i64 %9739, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9741 = and i32 %9740, 255
  %9742 = tail call i32 @llvm.ctpop.i32(i32 %9741)
  %9743 = trunc i32 %9742 to i8
  %9744 = and i8 %9743, 1
  %9745 = xor i8 %9744, 1
  store i8 %9745, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %9746 = lshr i32 %9740, 31
  %9747 = trunc i32 %9746 to i8
  store i8 %9747, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9748 = add i64 %9732, -492
  %9749 = add i64 %9731, 12
  store i64 %9749, i64* %3, align 8
  %9750 = inttoptr i64 %9748 to i32*
  store i32 %9740, i32* %9750, align 4
  %9751 = load i64, i64* %3, align 8
  %9752 = add i64 %9751, 17
  store i64 %9752, i64* %3, align 8
  br label %block_.L_451b0f

block_.L_451b03:                                  ; preds = %block_.L_451ac8
  %9753 = and i64 %9737, 4294967294
  store i64 %9753, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9754 = and i32 %9736, 254
  %9755 = tail call i32 @llvm.ctpop.i32(i32 %9754)
  %9756 = trunc i32 %9755 to i8
  %9757 = and i8 %9756, 1
  %9758 = xor i8 %9757, 1
  store i8 %9758, i8* %21, align 1
  %9759 = icmp ult i32 %9736, 2
  %9760 = zext i1 %9759 to i8
  store i8 %9760, i8* %30, align 1
  %9761 = lshr i32 %9736, 31
  %9762 = trunc i32 %9761 to i8
  store i8 %9762, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9763 = add i64 %9732, -492
  %9764 = trunc i64 %9753 to i32
  %9765 = add i64 %9731, 12
  store i64 %9765, i64* %3, align 8
  %9766 = inttoptr i64 %9763 to i32*
  store i32 %9764, i32* %9766, align 4
  %.pre354 = load i64, i64* %3, align 8
  br label %block_.L_451b0f

block_.L_451b0f:                                  ; preds = %block_.L_451b03, %block_451af2
  %9767 = phi i64 [ %.pre354, %block_.L_451b03 ], [ %9752, %block_451af2 ]
  %9768 = load i64, i64* %RBP.i, align 8
  %9769 = add i64 %9768, -492
  %9770 = add i64 %9767, 6
  store i64 %9770, i64* %3, align 8
  %9771 = inttoptr i64 %9769 to i32*
  %9772 = load i32, i32* %9771, align 4
  %9773 = shl i32 %9772, 1
  %9774 = icmp slt i32 %9772, 0
  %9775 = icmp slt i32 %9773, 0
  %9776 = xor i1 %9774, %9775
  %9777 = zext i32 %9773 to i64
  store i64 %9777, i64* %RAX.i186, align 8
  %.lobit161 = lshr i32 %9772, 31
  %9778 = trunc i32 %.lobit161 to i8
  store i8 %9778, i8* %14, align 1
  %9779 = and i32 %9773, 254
  %9780 = tail call i32 @llvm.ctpop.i32(i32 %9779)
  %9781 = trunc i32 %9780 to i8
  %9782 = and i8 %9781, 1
  %9783 = xor i8 %9782, 1
  store i8 %9783, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %9784 = icmp eq i32 %9773, 0
  %9785 = zext i1 %9784 to i8
  store i8 %9785, i8* %30, align 1
  %9786 = lshr i32 %9772, 30
  %9787 = trunc i32 %9786 to i8
  %9788 = and i8 %9787, 1
  store i8 %9788, i8* %33, align 1
  %9789 = zext i1 %9776 to i8
  store i8 %9789, i8* %39, align 1
  %9790 = sext i32 %9773 to i64
  store i64 %9790, i64* %RCX.i4414.pre-phi, align 8
  %9791 = add i64 %9768, -488
  %9792 = add i64 %9767, 18
  store i64 %9792, i64* %3, align 8
  %9793 = inttoptr i64 %9791 to i64*
  %9794 = load i64, i64* %9793, align 8
  store i64 %9794, i64* %RDX.i4411.pre-phi, align 8
  %9795 = shl nsw i64 %9790, 1
  %9796 = add i64 %9795, %9794
  %9797 = add i64 %9767, 22
  store i64 %9797, i64* %3, align 8
  %9798 = inttoptr i64 %9796 to i16*
  %9799 = load i16, i16* %9798, align 2
  %9800 = sext i16 %9799 to i64
  %9801 = and i64 %9800, 4294967295
  store i64 %9801, i64* %RAX.i186, align 8
  %9802 = sext i16 %9799 to i32
  %9803 = add nsw i32 %9802, 1
  %9804 = icmp ne i16 %9799, -1
  %9805 = zext i1 %9804 to i8
  store i8 %9805, i8* %14, align 1
  %9806 = and i32 %9803, 255
  %9807 = tail call i32 @llvm.ctpop.i32(i32 %9806)
  %9808 = trunc i32 %9807 to i8
  %9809 = and i8 %9808, 1
  %9810 = xor i8 %9809, 1
  store i8 %9810, i8* %21, align 1
  %9811 = xor i32 %9802, 16
  %9812 = xor i32 %9811, %9803
  %9813 = lshr i32 %9812, 4
  %9814 = trunc i32 %9813 to i8
  %9815 = and i8 %9814, 1
  store i8 %9815, i8* %27, align 1
  %9816 = icmp eq i32 %9803, 0
  %9817 = zext i1 %9816 to i8
  store i8 %9817, i8* %30, align 1
  %9818 = lshr i32 %9803, 31
  %9819 = trunc i32 %9818 to i8
  store i8 %9819, i8* %33, align 1
  %9820 = lshr i32 %9802, 31
  %9821 = xor i32 %9820, 1
  %9822 = xor i32 %9818, %9820
  %9823 = add nuw nsw i32 %9822, %9821
  %9824 = icmp eq i32 %9823, 2
  %9825 = zext i1 %9824 to i8
  store i8 %9825, i8* %39, align 1
  %.v522 = select i1 %9816, i64 31, i64 108
  %9826 = add i64 %9767, %.v522
  %9827 = add i64 %9768, -8
  %9828 = add i64 %9826, 4
  store i64 %9828, i64* %3, align 8
  %9829 = inttoptr i64 %9827 to i64*
  %9830 = load i64, i64* %9829, align 8
  store i64 %9830, i64* %RAX.i186, align 8
  br i1 %9816, label %block_451b2f, label %block_.L_451b7c

block_451b2f:                                     ; preds = %block_.L_451b0f
  %9831 = add i64 %9830, 56
  %9832 = add i64 %9826, 8
  store i64 %9832, i64* %3, align 8
  %9833 = inttoptr i64 %9831 to i64*
  %9834 = load i64, i64* %9833, align 8
  store i64 %9834, i64* %RAX.i186, align 8
  %9835 = add i64 %9834, 6480
  %9836 = add i64 %9826, 15
  store i64 %9836, i64* %3, align 8
  %9837 = inttoptr i64 %9835 to i64*
  %9838 = load i64, i64* %9837, align 8
  store i64 %9838, i64* %RAX.i186, align 8
  %9839 = add i64 %9826, 18
  store i64 %9839, i64* %3, align 8
  %9840 = inttoptr i64 %9838 to i64*
  %9841 = load i64, i64* %9840, align 8
  store i64 %9841, i64* %RAX.i186, align 8
  %9842 = add i64 %9768, -12
  %9843 = add i64 %9826, 22
  store i64 %9843, i64* %3, align 8
  %9844 = inttoptr i64 %9842 to i32*
  %9845 = load i32, i32* %9844, align 4
  %9846 = sext i32 %9845 to i64
  store i64 %9846, i64* %RCX.i4414.pre-phi, align 8
  %9847 = shl nsw i64 %9846, 3
  %9848 = add i64 %9847, %9841
  %9849 = add i64 %9826, 26
  store i64 %9849, i64* %3, align 8
  %9850 = inttoptr i64 %9848 to i64*
  %9851 = load i64, i64* %9850, align 8
  store i64 %9851, i64* %RAX.i186, align 8
  %9852 = add i64 %9768, -16
  %9853 = add i64 %9826, 30
  store i64 %9853, i64* %3, align 8
  %9854 = inttoptr i64 %9852 to i32*
  %9855 = load i32, i32* %9854, align 4
  %9856 = sext i32 %9855 to i64
  store i64 %9856, i64* %RCX.i4414.pre-phi, align 8
  %9857 = shl nsw i64 %9856, 1
  %9858 = add i64 %9857, %9851
  %9859 = add i64 %9826, 36
  store i64 %9859, i64* %3, align 8
  %9860 = inttoptr i64 %9858 to i16*
  store i16 -1, i16* %9860, align 2
  %9861 = load i64, i64* %RBP.i, align 8
  %9862 = add i64 %9861, -8
  %9863 = load i64, i64* %3, align 8
  %9864 = add i64 %9863, 4
  store i64 %9864, i64* %3, align 8
  %9865 = inttoptr i64 %9862 to i64*
  %9866 = load i64, i64* %9865, align 8
  store i64 %9866, i64* %RAX.i186, align 8
  %9867 = add i64 %9866, 48
  %9868 = add i64 %9863, 8
  store i64 %9868, i64* %3, align 8
  %9869 = inttoptr i64 %9867 to i64*
  %9870 = load i64, i64* %9869, align 8
  store i64 %9870, i64* %RAX.i186, align 8
  %9871 = add i64 %9870, 6480
  %9872 = add i64 %9863, 15
  store i64 %9872, i64* %3, align 8
  %9873 = inttoptr i64 %9871 to i64*
  %9874 = load i64, i64* %9873, align 8
  store i64 %9874, i64* %RAX.i186, align 8
  %9875 = add i64 %9863, 18
  store i64 %9875, i64* %3, align 8
  %9876 = inttoptr i64 %9874 to i64*
  %9877 = load i64, i64* %9876, align 8
  store i64 %9877, i64* %RAX.i186, align 8
  %9878 = add i64 %9861, -12
  %9879 = add i64 %9863, 22
  store i64 %9879, i64* %3, align 8
  %9880 = inttoptr i64 %9878 to i32*
  %9881 = load i32, i32* %9880, align 4
  %9882 = sext i32 %9881 to i64
  store i64 %9882, i64* %RCX.i4414.pre-phi, align 8
  %9883 = shl nsw i64 %9882, 3
  %9884 = add i64 %9883, %9877
  %9885 = add i64 %9863, 26
  store i64 %9885, i64* %3, align 8
  %9886 = inttoptr i64 %9884 to i64*
  %9887 = load i64, i64* %9886, align 8
  store i64 %9887, i64* %RAX.i186, align 8
  %9888 = add i64 %9861, -16
  %9889 = add i64 %9863, 30
  store i64 %9889, i64* %3, align 8
  %9890 = inttoptr i64 %9888 to i32*
  %9891 = load i32, i32* %9890, align 4
  %9892 = sext i32 %9891 to i64
  store i64 %9892, i64* %RCX.i4414.pre-phi, align 8
  %9893 = shl nsw i64 %9892, 1
  %9894 = add i64 %9893, %9887
  %9895 = add i64 %9863, 36
  store i64 %9895, i64* %3, align 8
  %9896 = inttoptr i64 %9894 to i16*
  store i16 -1, i16* %9896, align 2
  %9897 = load i64, i64* %3, align 8
  %9898 = add i64 %9897, 440
  store i64 %9898, i64* %3, align 8
  br label %block_.L_451d2f

block_.L_451b7c:                                  ; preds = %block_.L_451b0f
  %9899 = add i64 %9830, 40
  %9900 = add i64 %9826, 8
  store i64 %9900, i64* %3, align 8
  %9901 = inttoptr i64 %9899 to i64*
  %9902 = load i64, i64* %9901, align 8
  store i64 %9902, i64* %RAX.i186, align 8
  %9903 = add i64 %9902, 6480
  %9904 = add i64 %9826, 15
  store i64 %9904, i64* %3, align 8
  %9905 = inttoptr i64 %9903 to i64*
  %9906 = load i64, i64* %9905, align 8
  store i64 %9906, i64* %RAX.i186, align 8
  %9907 = add i64 %9826, 18
  store i64 %9907, i64* %3, align 8
  %9908 = inttoptr i64 %9906 to i64*
  %9909 = load i64, i64* %9908, align 8
  store i64 %9909, i64* %RAX.i186, align 8
  %9910 = add i64 %9768, -12
  %9911 = add i64 %9826, 21
  store i64 %9911, i64* %3, align 8
  %9912 = inttoptr i64 %9910 to i32*
  %9913 = load i32, i32* %9912, align 4
  %9914 = and i32 %9913, 2
  %9915 = zext i32 %9914 to i64
  store i64 %9915, i64* %RCX.i4414.pre-phi, align 8
  store i8 0, i8* %14, align 1
  %9916 = tail call i32 @llvm.ctpop.i32(i32 %9914)
  %9917 = trunc i32 %9916 to i8
  %9918 = xor i8 %9917, 1
  store i8 %9918, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit528 = lshr exact i32 %9914, 1
  %9919 = trunc i32 %.lobit528 to i8
  %9920 = xor i8 %9919, 1
  store i8 %9920, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9921 = add i64 %9768, -504
  %9922 = add i64 %9826, 34
  store i64 %9922, i64* %3, align 8
  %9923 = inttoptr i64 %9921 to i64*
  store i64 %9909, i64* %9923, align 8
  %9924 = load i64, i64* %3, align 8
  %9925 = load i8, i8* %30, align 1
  %9926 = icmp ne i8 %9925, 0
  %.v603 = select i1 %9926, i64 23, i64 6
  %9927 = add i64 %9924, %.v603
  %cmpBr_451b9e = icmp eq i8 %9925, 1
  %9928 = load i64, i64* %RBP.i, align 8
  %9929 = add i64 %9928, -12
  %9930 = add i64 %9927, 3
  store i64 %9930, i64* %3, align 8
  %9931 = inttoptr i64 %9929 to i32*
  %9932 = load i32, i32* %9931, align 4
  %9933 = zext i32 %9932 to i64
  store i64 %9933, i64* %RAX.i186, align 8
  %9934 = add i64 %9927, 6
  store i64 %9934, i64* %3, align 8
  br i1 %cmpBr_451b9e, label %block_.L_451bb5, label %block_451ba4

block_451ba4:                                     ; preds = %block_.L_451b7c
  %9935 = or i64 %9933, 1
  %9936 = trunc i64 %9935 to i32
  store i64 %9935, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9937 = and i32 %9936, 255
  %9938 = tail call i32 @llvm.ctpop.i32(i32 %9937)
  %9939 = trunc i32 %9938 to i8
  %9940 = and i8 %9939, 1
  %9941 = xor i8 %9940, 1
  store i8 %9941, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %9942 = lshr i32 %9936, 31
  %9943 = trunc i32 %9942 to i8
  store i8 %9943, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9944 = add i64 %9928, -508
  %9945 = add i64 %9927, 12
  store i64 %9945, i64* %3, align 8
  %9946 = inttoptr i64 %9944 to i32*
  store i32 %9936, i32* %9946, align 4
  %9947 = load i64, i64* %3, align 8
  %9948 = add i64 %9947, 17
  store i64 %9948, i64* %3, align 8
  br label %block_.L_451bc1

block_.L_451bb5:                                  ; preds = %block_.L_451b7c
  %9949 = and i64 %9933, 4294967294
  store i64 %9949, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9950 = and i32 %9932, 254
  %9951 = tail call i32 @llvm.ctpop.i32(i32 %9950)
  %9952 = trunc i32 %9951 to i8
  %9953 = and i8 %9952, 1
  %9954 = xor i8 %9953, 1
  store i8 %9954, i8* %21, align 1
  %9955 = icmp ult i32 %9932, 2
  %9956 = zext i1 %9955 to i8
  store i8 %9956, i8* %30, align 1
  %9957 = lshr i32 %9932, 31
  %9958 = trunc i32 %9957 to i8
  store i8 %9958, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %9959 = add i64 %9928, -508
  %9960 = trunc i64 %9949 to i32
  %9961 = add i64 %9927, 12
  store i64 %9961, i64* %3, align 8
  %9962 = inttoptr i64 %9959 to i32*
  store i32 %9960, i32* %9962, align 4
  %.pre355 = load i64, i64* %3, align 8
  br label %block_.L_451bc1

block_.L_451bc1:                                  ; preds = %block_.L_451bb5, %block_451ba4
  %9963 = phi i64 [ %.pre355, %block_.L_451bb5 ], [ %9948, %block_451ba4 ]
  %9964 = load i64, i64* %RBP.i, align 8
  %9965 = add i64 %9964, -508
  %9966 = add i64 %9963, 6
  store i64 %9966, i64* %3, align 8
  %9967 = inttoptr i64 %9965 to i32*
  %9968 = load i32, i32* %9967, align 4
  %9969 = zext i32 %9968 to i64
  store i64 %9969, i64* %RAX.i186, align 8
  %9970 = sext i32 %9968 to i64
  store i64 %9970, i64* %RCX.i4414.pre-phi, align 8
  %9971 = add i64 %9964, -504
  %9972 = add i64 %9963, 16
  store i64 %9972, i64* %3, align 8
  %9973 = inttoptr i64 %9971 to i64*
  %9974 = load i64, i64* %9973, align 8
  store i64 %9974, i64* %RDX.i4411.pre-phi, align 8
  %9975 = shl nsw i64 %9970, 3
  %9976 = add i64 %9975, %9974
  %9977 = add i64 %9963, 20
  store i64 %9977, i64* %3, align 8
  %9978 = inttoptr i64 %9976 to i64*
  %9979 = load i64, i64* %9978, align 8
  store i64 %9979, i64* %RCX.i4414.pre-phi, align 8
  %9980 = add i64 %9964, -16
  %9981 = add i64 %9963, 23
  store i64 %9981, i64* %3, align 8
  %9982 = inttoptr i64 %9980 to i32*
  %9983 = load i32, i32* %9982, align 4
  %9984 = and i32 %9983, 2
  %9985 = zext i32 %9984 to i64
  store i64 %9985, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %9986 = tail call i32 @llvm.ctpop.i32(i32 %9984)
  %9987 = trunc i32 %9986 to i8
  %9988 = xor i8 %9987, 1
  store i8 %9988, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit529 = lshr exact i32 %9984, 1
  %9989 = trunc i32 %.lobit529 to i8
  %9990 = xor i8 %9989, 1
  store i8 %9990, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %9991 = add i64 %9964, -520
  %9992 = add i64 %9963, 36
  store i64 %9992, i64* %3, align 8
  %9993 = inttoptr i64 %9991 to i64*
  store i64 %9979, i64* %9993, align 8
  %9994 = load i64, i64* %3, align 8
  %9995 = load i8, i8* %30, align 1
  %9996 = icmp ne i8 %9995, 0
  %.v604 = select i1 %9996, i64 23, i64 6
  %9997 = add i64 %9994, %.v604
  %cmpBr_451be5 = icmp eq i8 %9995, 1
  %9998 = load i64, i64* %RBP.i, align 8
  %9999 = add i64 %9998, -16
  %10000 = add i64 %9997, 3
  store i64 %10000, i64* %3, align 8
  %10001 = inttoptr i64 %9999 to i32*
  %10002 = load i32, i32* %10001, align 4
  %10003 = zext i32 %10002 to i64
  store i64 %10003, i64* %RAX.i186, align 8
  %10004 = add i64 %9997, 6
  store i64 %10004, i64* %3, align 8
  br i1 %cmpBr_451be5, label %block_.L_451bfc, label %block_451beb

block_451beb:                                     ; preds = %block_.L_451bc1
  %10005 = or i64 %10003, 1
  %10006 = trunc i64 %10005 to i32
  store i64 %10005, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10007 = and i32 %10006, 255
  %10008 = tail call i32 @llvm.ctpop.i32(i32 %10007)
  %10009 = trunc i32 %10008 to i8
  %10010 = and i8 %10009, 1
  %10011 = xor i8 %10010, 1
  store i8 %10011, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %10012 = lshr i32 %10006, 31
  %10013 = trunc i32 %10012 to i8
  store i8 %10013, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10014 = add i64 %9998, -524
  %10015 = add i64 %9997, 12
  store i64 %10015, i64* %3, align 8
  %10016 = inttoptr i64 %10014 to i32*
  store i32 %10006, i32* %10016, align 4
  %10017 = load i64, i64* %3, align 8
  %10018 = add i64 %10017, 17
  store i64 %10018, i64* %3, align 8
  br label %block_.L_451c08

block_.L_451bfc:                                  ; preds = %block_.L_451bc1
  %10019 = and i64 %10003, 4294967294
  store i64 %10019, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10020 = and i32 %10002, 254
  %10021 = tail call i32 @llvm.ctpop.i32(i32 %10020)
  %10022 = trunc i32 %10021 to i8
  %10023 = and i8 %10022, 1
  %10024 = xor i8 %10023, 1
  store i8 %10024, i8* %21, align 1
  %10025 = icmp ult i32 %10002, 2
  %10026 = zext i1 %10025 to i8
  store i8 %10026, i8* %30, align 1
  %10027 = lshr i32 %10002, 31
  %10028 = trunc i32 %10027 to i8
  store i8 %10028, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10029 = add i64 %9998, -524
  %10030 = trunc i64 %10019 to i32
  %10031 = add i64 %9997, 12
  store i64 %10031, i64* %3, align 8
  %10032 = inttoptr i64 %10029 to i32*
  store i32 %10030, i32* %10032, align 4
  %.pre356 = load i64, i64* %3, align 8
  br label %block_.L_451c08

block_.L_451c08:                                  ; preds = %block_.L_451bfc, %block_451beb
  %10033 = phi i64 [ %.pre356, %block_.L_451bfc ], [ %10018, %block_451beb ]
  %10034 = load i64, i64* %RBP.i, align 8
  %10035 = add i64 %10034, -524
  %10036 = add i64 %10033, 6
  store i64 %10036, i64* %3, align 8
  %10037 = inttoptr i64 %10035 to i32*
  %10038 = load i32, i32* %10037, align 4
  %10039 = shl i32 %10038, 1
  %10040 = icmp slt i32 %10038, 0
  %10041 = icmp slt i32 %10039, 0
  %10042 = xor i1 %10040, %10041
  %10043 = zext i32 %10039 to i64
  store i64 %10043, i64* %RAX.i186, align 8
  %.lobit172 = lshr i32 %10038, 31
  %10044 = trunc i32 %.lobit172 to i8
  store i8 %10044, i8* %14, align 1
  %10045 = and i32 %10039, 254
  %10046 = tail call i32 @llvm.ctpop.i32(i32 %10045)
  %10047 = trunc i32 %10046 to i8
  %10048 = and i8 %10047, 1
  %10049 = xor i8 %10048, 1
  store i8 %10049, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10050 = icmp eq i32 %10039, 0
  %10051 = zext i1 %10050 to i8
  store i8 %10051, i8* %30, align 1
  %10052 = lshr i32 %10038, 30
  %10053 = trunc i32 %10052 to i8
  %10054 = and i8 %10053, 1
  store i8 %10054, i8* %33, align 1
  %10055 = zext i1 %10042 to i8
  store i8 %10055, i8* %39, align 1
  %10056 = sext i32 %10039 to i64
  store i64 %10056, i64* %RCX.i4414.pre-phi, align 8
  %10057 = add i64 %10034, -520
  %10058 = add i64 %10033, 18
  store i64 %10058, i64* %3, align 8
  %10059 = inttoptr i64 %10057 to i64*
  %10060 = load i64, i64* %10059, align 8
  store i64 %10060, i64* %RDX.i4411.pre-phi, align 8
  %10061 = shl nsw i64 %10056, 1
  %10062 = add i64 %10061, %10060
  %10063 = add i64 %10033, 22
  store i64 %10063, i64* %3, align 8
  %10064 = inttoptr i64 %10062 to i16*
  %10065 = load i16, i16* %10064, align 2
  store i16 %10065, i16* %SI.i1634, align 2
  %10066 = add i64 %10034, -8
  %10067 = add i64 %10033, 26
  store i64 %10067, i64* %3, align 8
  %10068 = inttoptr i64 %10066 to i64*
  %10069 = load i64, i64* %10068, align 8
  store i64 %10069, i64* %RCX.i4414.pre-phi, align 8
  %10070 = add i64 %10069, 56
  %10071 = add i64 %10033, 30
  store i64 %10071, i64* %3, align 8
  %10072 = inttoptr i64 %10070 to i64*
  %10073 = load i64, i64* %10072, align 8
  store i64 %10073, i64* %RCX.i4414.pre-phi, align 8
  %10074 = add i64 %10073, 6480
  %10075 = add i64 %10033, 37
  store i64 %10075, i64* %3, align 8
  %10076 = inttoptr i64 %10074 to i64*
  %10077 = load i64, i64* %10076, align 8
  store i64 %10077, i64* %RCX.i4414.pre-phi, align 8
  %10078 = add i64 %10033, 40
  store i64 %10078, i64* %3, align 8
  %10079 = inttoptr i64 %10077 to i64*
  %10080 = load i64, i64* %10079, align 8
  store i64 %10080, i64* %RCX.i4414.pre-phi, align 8
  %10081 = add i64 %10034, -12
  %10082 = add i64 %10033, 44
  store i64 %10082, i64* %3, align 8
  %10083 = inttoptr i64 %10081 to i32*
  %10084 = load i32, i32* %10083, align 4
  %10085 = sext i32 %10084 to i64
  store i64 %10085, i64* %RDI.i126, align 8
  %10086 = shl nsw i64 %10085, 3
  %10087 = add i64 %10086, %10080
  %10088 = add i64 %10033, 48
  store i64 %10088, i64* %3, align 8
  %10089 = inttoptr i64 %10087 to i64*
  %10090 = load i64, i64* %10089, align 8
  store i64 %10090, i64* %RCX.i4414.pre-phi, align 8
  %10091 = add i64 %10034, -16
  %10092 = add i64 %10033, 52
  store i64 %10092, i64* %3, align 8
  %10093 = inttoptr i64 %10091 to i32*
  %10094 = load i32, i32* %10093, align 4
  %10095 = sext i32 %10094 to i64
  store i64 %10095, i64* %RDI.i126, align 8
  %10096 = shl nsw i64 %10095, 1
  %10097 = add i64 %10096, %10090
  %10098 = add i64 %10033, 56
  store i64 %10098, i64* %3, align 8
  %10099 = inttoptr i64 %10097 to i16*
  store i16 %10065, i16* %10099, align 2
  %10100 = load i64, i64* %RBP.i, align 8
  %10101 = add i64 %10100, -8
  %10102 = load i64, i64* %3, align 8
  %10103 = add i64 %10102, 4
  store i64 %10103, i64* %3, align 8
  %10104 = inttoptr i64 %10101 to i64*
  %10105 = load i64, i64* %10104, align 8
  store i64 %10105, i64* %RCX.i4414.pre-phi, align 8
  %10106 = add i64 %10105, 48
  %10107 = add i64 %10102, 8
  store i64 %10107, i64* %3, align 8
  %10108 = inttoptr i64 %10106 to i64*
  %10109 = load i64, i64* %10108, align 8
  store i64 %10109, i64* %RCX.i4414.pre-phi, align 8
  %10110 = add i64 %10109, 6480
  %10111 = add i64 %10102, 15
  store i64 %10111, i64* %3, align 8
  %10112 = inttoptr i64 %10110 to i64*
  %10113 = load i64, i64* %10112, align 8
  store i64 %10113, i64* %RCX.i4414.pre-phi, align 8
  %10114 = add i64 %10102, 18
  store i64 %10114, i64* %3, align 8
  %10115 = inttoptr i64 %10113 to i64*
  %10116 = load i64, i64* %10115, align 8
  store i64 %10116, i64* %RCX.i4414.pre-phi, align 8
  %10117 = add i64 %10100, -12
  %10118 = add i64 %10102, 22
  store i64 %10118, i64* %3, align 8
  %10119 = inttoptr i64 %10117 to i32*
  %10120 = load i32, i32* %10119, align 4
  %10121 = sext i32 %10120 to i64
  store i64 %10121, i64* %RDI.i126, align 8
  %10122 = shl nsw i64 %10121, 3
  %10123 = add i64 %10122, %10116
  %10124 = add i64 %10102, 26
  store i64 %10124, i64* %3, align 8
  %10125 = inttoptr i64 %10123 to i64*
  %10126 = load i64, i64* %10125, align 8
  store i64 %10126, i64* %RCX.i4414.pre-phi, align 8
  %10127 = add i64 %10100, -16
  %10128 = add i64 %10102, 30
  store i64 %10128, i64* %3, align 8
  %10129 = inttoptr i64 %10127 to i32*
  %10130 = load i32, i32* %10129, align 4
  %10131 = sext i32 %10130 to i64
  store i64 %10131, i64* %RDI.i126, align 8
  %10132 = shl nsw i64 %10131, 1
  %10133 = add i64 %10132, %10126
  %10134 = load i16, i16* %SI.i1634, align 2
  %10135 = add i64 %10102, 34
  store i64 %10135, i64* %3, align 8
  %10136 = inttoptr i64 %10133 to i16*
  store i16 %10134, i16* %10136, align 2
  %10137 = load i16, i16* %SI.i1634, align 2
  %10138 = load i64, i64* %3, align 8
  %10139 = sext i16 %10137 to i64
  %10140 = and i64 %10139, 4294967295
  store i64 %10140, i64* %RAX.i186, align 8
  %10141 = load i64, i64* %RBP.i, align 8
  %10142 = add i64 %10141, -20
  %10143 = sext i16 %10137 to i32
  %10144 = add i64 %10138, 6
  store i64 %10144, i64* %3, align 8
  %10145 = inttoptr i64 %10142 to i32*
  store i32 %10143, i32* %10145, align 4
  %10146 = load i64, i64* %RBP.i, align 8
  %10147 = add i64 %10146, -20
  %10148 = load i64, i64* %3, align 8
  %10149 = add i64 %10148, 4
  store i64 %10149, i64* %3, align 8
  %10150 = inttoptr i64 %10147 to i32*
  %10151 = load i32, i32* %10150, align 4
  store i8 0, i8* %14, align 1
  %10152 = and i32 %10151, 255
  %10153 = tail call i32 @llvm.ctpop.i32(i32 %10152)
  %10154 = trunc i32 %10153 to i8
  %10155 = and i8 %10154, 1
  %10156 = xor i8 %10155, 1
  store i8 %10156, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10157 = icmp eq i32 %10151, 0
  %10158 = zext i1 %10157 to i8
  store i8 %10158, i8* %30, align 1
  %10159 = lshr i32 %10151, 31
  %10160 = trunc i32 %10159 to i8
  store i8 %10160, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10161 = icmp ne i8 %10160, 0
  %.v179 = select i1 %10161, i64 38, i64 6
  %10162 = add i64 %10149, %.v179
  store i64 %10162, i64* %3, align 8
  br i1 %10161, label %block_.L_451c93, label %block_451c73

block_451c73:                                     ; preds = %block_.L_451c08
  %10163 = add i64 %10146, -8
  %10164 = add i64 %10162, 4
  store i64 %10164, i64* %3, align 8
  %10165 = inttoptr i64 %10163 to i64*
  %10166 = load i64, i64* %10165, align 8
  store i64 %10166, i64* %RAX.i186, align 8
  %10167 = add i64 %10166, 40
  %10168 = add i64 %10162, 8
  store i64 %10168, i64* %3, align 8
  %10169 = inttoptr i64 %10167 to i64*
  %10170 = load i64, i64* %10169, align 8
  store i64 %10170, i64* %RAX.i186, align 8
  %10171 = add i64 %10162, 12
  store i64 %10171, i64* %3, align 8
  %10172 = load i32, i32* %10150, align 4
  %10173 = sext i32 %10172 to i64
  store i64 %10173, i64* %RCX.i4414.pre-phi, align 8
  %10174 = shl nsw i64 %10173, 3
  %10175 = add i64 %10170, 3192
  %10176 = add i64 %10175, %10174
  %10177 = add i64 %10162, 20
  store i64 %10177, i64* %3, align 8
  %10178 = inttoptr i64 %10176 to i64*
  %10179 = load i64, i64* %10178, align 8
  store i64 %10179, i64* %RAX.i186, align 8
  %10180 = add i64 %10146, -536
  %10181 = add i64 %10162, 27
  store i64 %10181, i64* %3, align 8
  %10182 = inttoptr i64 %10180 to i64*
  store i64 %10179, i64* %10182, align 8
  %10183 = load i64, i64* %3, align 8
  %10184 = add i64 %10183, 21
  br label %block_.L_451ca3

block_.L_451c93:                                  ; preds = %block_.L_451c08
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i4414.pre-phi, align 8
  %10185 = add i64 %10146, -536
  %10186 = add i64 %10162, 11
  store i64 %10186, i64* %3, align 8
  %10187 = inttoptr i64 %10185 to i64*
  store i64 0, i64* %10187, align 8
  %10188 = load i64, i64* %3, align 8
  %10189 = add i64 %10188, 5
  store i64 %10189, i64* %3, align 8
  br label %block_.L_451ca3

block_.L_451ca3:                                  ; preds = %block_.L_451c93, %block_451c73
  %storemerge173 = phi i64 [ %10184, %block_451c73 ], [ %10189, %block_.L_451c93 ]
  %10190 = load i64, i64* %RBP.i, align 8
  %10191 = add i64 %10190, -536
  %10192 = add i64 %storemerge173, 7
  store i64 %10192, i64* %3, align 8
  %10193 = inttoptr i64 %10191 to i64*
  %10194 = load i64, i64* %10193, align 8
  store i64 %10194, i64* %RAX.i186, align 8
  %10195 = add i64 %10190, -8
  %10196 = add i64 %storemerge173, 11
  store i64 %10196, i64* %3, align 8
  %10197 = inttoptr i64 %10195 to i64*
  %10198 = load i64, i64* %10197, align 8
  store i64 %10198, i64* %RCX.i4414.pre-phi, align 8
  %10199 = add i64 %10198, 48
  %10200 = add i64 %storemerge173, 15
  store i64 %10200, i64* %3, align 8
  %10201 = inttoptr i64 %10199 to i64*
  %10202 = load i64, i64* %10201, align 8
  store i64 %10202, i64* %RCX.i4414.pre-phi, align 8
  %10203 = add i64 %10202, 6496
  %10204 = add i64 %storemerge173, 22
  store i64 %10204, i64* %3, align 8
  %10205 = inttoptr i64 %10203 to i64*
  %10206 = load i64, i64* %10205, align 8
  store i64 %10206, i64* %RCX.i4414.pre-phi, align 8
  %10207 = add i64 %storemerge173, 25
  store i64 %10207, i64* %3, align 8
  %10208 = inttoptr i64 %10206 to i64*
  %10209 = load i64, i64* %10208, align 8
  store i64 %10209, i64* %RCX.i4414.pre-phi, align 8
  %10210 = add i64 %10190, -12
  %10211 = add i64 %storemerge173, 29
  store i64 %10211, i64* %3, align 8
  %10212 = inttoptr i64 %10210 to i32*
  %10213 = load i32, i32* %10212, align 4
  %10214 = sext i32 %10213 to i64
  store i64 %10214, i64* %RDX.i4411.pre-phi, align 8
  %10215 = shl nsw i64 %10214, 3
  %10216 = add i64 %10215, %10209
  %10217 = add i64 %storemerge173, 33
  store i64 %10217, i64* %3, align 8
  %10218 = inttoptr i64 %10216 to i64*
  %10219 = load i64, i64* %10218, align 8
  store i64 %10219, i64* %RCX.i4414.pre-phi, align 8
  %10220 = add i64 %10190, -16
  %10221 = add i64 %storemerge173, 37
  store i64 %10221, i64* %3, align 8
  %10222 = inttoptr i64 %10220 to i32*
  %10223 = load i32, i32* %10222, align 4
  %10224 = sext i32 %10223 to i64
  store i64 %10224, i64* %RDX.i4411.pre-phi, align 8
  %10225 = shl nsw i64 %10224, 3
  %10226 = add i64 %10225, %10219
  %10227 = add i64 %storemerge173, 41
  store i64 %10227, i64* %3, align 8
  %10228 = inttoptr i64 %10226 to i64*
  store i64 %10194, i64* %10228, align 8
  %10229 = load i64, i64* %RBP.i, align 8
  %10230 = add i64 %10229, -20
  %10231 = load i64, i64* %3, align 8
  %10232 = add i64 %10231, 4
  store i64 %10232, i64* %3, align 8
  %10233 = inttoptr i64 %10230 to i32*
  %10234 = load i32, i32* %10233, align 4
  store i8 0, i8* %14, align 1
  %10235 = and i32 %10234, 255
  %10236 = tail call i32 @llvm.ctpop.i32(i32 %10235)
  %10237 = trunc i32 %10236 to i8
  %10238 = and i8 %10237, 1
  %10239 = xor i8 %10238, 1
  store i8 %10239, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10240 = icmp eq i32 %10234, 0
  %10241 = zext i1 %10240 to i8
  store i8 %10241, i8* %30, align 1
  %10242 = lshr i32 %10234, 31
  %10243 = trunc i32 %10242 to i8
  store i8 %10243, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10244 = icmp ne i8 %10243, 0
  %.v180 = select i1 %10244, i64 38, i64 6
  %10245 = add i64 %10232, %.v180
  store i64 %10245, i64* %3, align 8
  br i1 %10244, label %block_.L_451cf6, label %block_451cd6

block_451cd6:                                     ; preds = %block_.L_451ca3
  %10246 = add i64 %10229, -8
  %10247 = add i64 %10245, 4
  store i64 %10247, i64* %3, align 8
  %10248 = inttoptr i64 %10246 to i64*
  %10249 = load i64, i64* %10248, align 8
  store i64 %10249, i64* %RAX.i186, align 8
  %10250 = add i64 %10249, 40
  %10251 = add i64 %10245, 8
  store i64 %10251, i64* %3, align 8
  %10252 = inttoptr i64 %10250 to i64*
  %10253 = load i64, i64* %10252, align 8
  store i64 %10253, i64* %RAX.i186, align 8
  %10254 = add i64 %10245, 12
  store i64 %10254, i64* %3, align 8
  %10255 = load i32, i32* %10233, align 4
  %10256 = sext i32 %10255 to i64
  store i64 %10256, i64* %RCX.i4414.pre-phi, align 8
  %10257 = shl nsw i64 %10256, 3
  %10258 = add i64 %10253, 4776
  %10259 = add i64 %10258, %10257
  %10260 = add i64 %10245, 20
  store i64 %10260, i64* %3, align 8
  %10261 = inttoptr i64 %10259 to i64*
  %10262 = load i64, i64* %10261, align 8
  store i64 %10262, i64* %RAX.i186, align 8
  %10263 = add i64 %10229, -544
  %10264 = add i64 %10245, 27
  store i64 %10264, i64* %3, align 8
  %10265 = inttoptr i64 %10263 to i64*
  store i64 %10262, i64* %10265, align 8
  %10266 = load i64, i64* %3, align 8
  %10267 = add i64 %10266, 21
  br label %block_.L_451d06

block_.L_451cf6:                                  ; preds = %block_.L_451ca3
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i4414.pre-phi, align 8
  %10268 = add i64 %10229, -544
  %10269 = add i64 %10245, 11
  store i64 %10269, i64* %3, align 8
  %10270 = inttoptr i64 %10268 to i64*
  store i64 0, i64* %10270, align 8
  %10271 = load i64, i64* %3, align 8
  %10272 = add i64 %10271, 5
  store i64 %10272, i64* %3, align 8
  br label %block_.L_451d06

block_.L_451d06:                                  ; preds = %block_.L_451cf6, %block_451cd6
  %storemerge174 = phi i64 [ %10267, %block_451cd6 ], [ %10272, %block_.L_451cf6 ]
  %10273 = load i64, i64* %RBP.i, align 8
  %10274 = add i64 %10273, -544
  %10275 = add i64 %storemerge174, 7
  store i64 %10275, i64* %3, align 8
  %10276 = inttoptr i64 %10274 to i64*
  %10277 = load i64, i64* %10276, align 8
  store i64 %10277, i64* %RAX.i186, align 8
  %10278 = add i64 %10273, -8
  %10279 = add i64 %storemerge174, 11
  store i64 %10279, i64* %3, align 8
  %10280 = inttoptr i64 %10278 to i64*
  %10281 = load i64, i64* %10280, align 8
  store i64 %10281, i64* %RCX.i4414.pre-phi, align 8
  %10282 = add i64 %10281, 56
  %10283 = add i64 %storemerge174, 15
  store i64 %10283, i64* %3, align 8
  %10284 = inttoptr i64 %10282 to i64*
  %10285 = load i64, i64* %10284, align 8
  store i64 %10285, i64* %RCX.i4414.pre-phi, align 8
  %10286 = add i64 %10285, 6496
  %10287 = add i64 %storemerge174, 22
  store i64 %10287, i64* %3, align 8
  %10288 = inttoptr i64 %10286 to i64*
  %10289 = load i64, i64* %10288, align 8
  store i64 %10289, i64* %RCX.i4414.pre-phi, align 8
  %10290 = add i64 %storemerge174, 25
  store i64 %10290, i64* %3, align 8
  %10291 = inttoptr i64 %10289 to i64*
  %10292 = load i64, i64* %10291, align 8
  store i64 %10292, i64* %RCX.i4414.pre-phi, align 8
  %10293 = add i64 %10273, -12
  %10294 = add i64 %storemerge174, 29
  store i64 %10294, i64* %3, align 8
  %10295 = inttoptr i64 %10293 to i32*
  %10296 = load i32, i32* %10295, align 4
  %10297 = sext i32 %10296 to i64
  store i64 %10297, i64* %RDX.i4411.pre-phi, align 8
  %10298 = shl nsw i64 %10297, 3
  %10299 = add i64 %10298, %10292
  %10300 = add i64 %storemerge174, 33
  store i64 %10300, i64* %3, align 8
  %10301 = inttoptr i64 %10299 to i64*
  %10302 = load i64, i64* %10301, align 8
  store i64 %10302, i64* %RCX.i4414.pre-phi, align 8
  %10303 = add i64 %10273, -16
  %10304 = add i64 %storemerge174, 37
  store i64 %10304, i64* %3, align 8
  %10305 = inttoptr i64 %10303 to i32*
  %10306 = load i32, i32* %10305, align 4
  %10307 = sext i32 %10306 to i64
  store i64 %10307, i64* %RDX.i4411.pre-phi, align 8
  %10308 = shl nsw i64 %10307, 3
  %10309 = add i64 %10308, %10302
  %10310 = add i64 %storemerge174, 41
  store i64 %10310, i64* %3, align 8
  %10311 = inttoptr i64 %10309 to i64*
  store i64 %10277, i64* %10311, align 8
  %.pre357 = load i64, i64* %3, align 8
  br label %block_.L_451d2f

block_.L_451d2f:                                  ; preds = %block_.L_451d06, %block_451b2f
  %10312 = phi i64 [ %.pre357, %block_.L_451d06 ], [ %9898, %block_451b2f ]
  %10313 = load i64, i64* %RBP.i, align 8
  %10314 = add i64 %10313, -8
  %10315 = add i64 %10312, 4
  store i64 %10315, i64* %3, align 8
  %10316 = inttoptr i64 %10314 to i64*
  %10317 = load i64, i64* %10316, align 8
  store i64 %10317, i64* %RAX.i186, align 8
  %10318 = add i64 %10317, 40
  %10319 = add i64 %10312, 8
  store i64 %10319, i64* %3, align 8
  %10320 = inttoptr i64 %10318 to i64*
  %10321 = load i64, i64* %10320, align 8
  store i64 %10321, i64* %RAX.i186, align 8
  %10322 = add i64 %10321, 6480
  %10323 = add i64 %10312, 15
  store i64 %10323, i64* %3, align 8
  %10324 = inttoptr i64 %10322 to i64*
  %10325 = load i64, i64* %10324, align 8
  store i64 %10325, i64* %RAX.i186, align 8
  %10326 = add i64 %10325, 8
  %10327 = add i64 %10312, 19
  store i64 %10327, i64* %3, align 8
  %10328 = inttoptr i64 %10326 to i64*
  %10329 = load i64, i64* %10328, align 8
  store i64 %10329, i64* %RAX.i186, align 8
  %10330 = add i64 %10313, -12
  %10331 = add i64 %10312, 22
  store i64 %10331, i64* %3, align 8
  %10332 = inttoptr i64 %10330 to i32*
  %10333 = load i32, i32* %10332, align 4
  %10334 = and i32 %10333, 2
  %10335 = zext i32 %10334 to i64
  store i64 %10335, i64* %RCX.i4414.pre-phi, align 8
  store i8 0, i8* %14, align 1
  %10336 = tail call i32 @llvm.ctpop.i32(i32 %10334)
  %10337 = trunc i32 %10336 to i8
  %10338 = xor i8 %10337, 1
  store i8 %10338, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit523 = lshr exact i32 %10334, 1
  %10339 = trunc i32 %.lobit523 to i8
  %10340 = xor i8 %10339, 1
  store i8 %10340, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10341 = add i64 %10313, -552
  %10342 = add i64 %10312, 35
  store i64 %10342, i64* %3, align 8
  %10343 = inttoptr i64 %10341 to i64*
  store i64 %10329, i64* %10343, align 8
  %10344 = load i64, i64* %3, align 8
  %10345 = load i8, i8* %30, align 1
  %10346 = icmp ne i8 %10345, 0
  %.v605 = select i1 %10346, i64 23, i64 6
  %10347 = add i64 %10344, %.v605
  %cmpBr_451d52 = icmp eq i8 %10345, 1
  %10348 = load i64, i64* %RBP.i, align 8
  %10349 = add i64 %10348, -12
  %10350 = add i64 %10347, 3
  store i64 %10350, i64* %3, align 8
  %10351 = inttoptr i64 %10349 to i32*
  %10352 = load i32, i32* %10351, align 4
  %10353 = zext i32 %10352 to i64
  store i64 %10353, i64* %RAX.i186, align 8
  %10354 = add i64 %10347, 6
  store i64 %10354, i64* %3, align 8
  br i1 %cmpBr_451d52, label %block_.L_451d69, label %block_451d58

block_451d58:                                     ; preds = %block_.L_451d2f
  %10355 = or i64 %10353, 1
  %10356 = trunc i64 %10355 to i32
  store i64 %10355, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10357 = and i32 %10356, 255
  %10358 = tail call i32 @llvm.ctpop.i32(i32 %10357)
  %10359 = trunc i32 %10358 to i8
  %10360 = and i8 %10359, 1
  %10361 = xor i8 %10360, 1
  store i8 %10361, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %10362 = lshr i32 %10356, 31
  %10363 = trunc i32 %10362 to i8
  store i8 %10363, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10364 = add i64 %10348, -556
  %10365 = add i64 %10347, 12
  store i64 %10365, i64* %3, align 8
  %10366 = inttoptr i64 %10364 to i32*
  store i32 %10356, i32* %10366, align 4
  %10367 = load i64, i64* %3, align 8
  %10368 = add i64 %10367, 17
  store i64 %10368, i64* %3, align 8
  br label %block_.L_451d75

block_.L_451d69:                                  ; preds = %block_.L_451d2f
  %10369 = and i64 %10353, 4294967294
  store i64 %10369, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10370 = and i32 %10352, 254
  %10371 = tail call i32 @llvm.ctpop.i32(i32 %10370)
  %10372 = trunc i32 %10371 to i8
  %10373 = and i8 %10372, 1
  %10374 = xor i8 %10373, 1
  store i8 %10374, i8* %21, align 1
  %10375 = icmp ult i32 %10352, 2
  %10376 = zext i1 %10375 to i8
  store i8 %10376, i8* %30, align 1
  %10377 = lshr i32 %10352, 31
  %10378 = trunc i32 %10377 to i8
  store i8 %10378, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10379 = add i64 %10348, -556
  %10380 = trunc i64 %10369 to i32
  %10381 = add i64 %10347, 12
  store i64 %10381, i64* %3, align 8
  %10382 = inttoptr i64 %10379 to i32*
  store i32 %10380, i32* %10382, align 4
  %.pre358 = load i64, i64* %3, align 8
  br label %block_.L_451d75

block_.L_451d75:                                  ; preds = %block_.L_451d69, %block_451d58
  %10383 = phi i64 [ %.pre358, %block_.L_451d69 ], [ %10368, %block_451d58 ]
  %10384 = load i64, i64* %RBP.i, align 8
  %10385 = add i64 %10384, -556
  %10386 = add i64 %10383, 6
  store i64 %10386, i64* %3, align 8
  %10387 = inttoptr i64 %10385 to i32*
  %10388 = load i32, i32* %10387, align 4
  %10389 = zext i32 %10388 to i64
  store i64 %10389, i64* %RAX.i186, align 8
  %10390 = sext i32 %10388 to i64
  store i64 %10390, i64* %RCX.i4414.pre-phi, align 8
  %10391 = add i64 %10384, -552
  %10392 = add i64 %10383, 16
  store i64 %10392, i64* %3, align 8
  %10393 = inttoptr i64 %10391 to i64*
  %10394 = load i64, i64* %10393, align 8
  store i64 %10394, i64* %RDX.i4411.pre-phi, align 8
  %10395 = shl nsw i64 %10390, 3
  %10396 = add i64 %10395, %10394
  %10397 = add i64 %10383, 20
  store i64 %10397, i64* %3, align 8
  %10398 = inttoptr i64 %10396 to i64*
  %10399 = load i64, i64* %10398, align 8
  store i64 %10399, i64* %RCX.i4414.pre-phi, align 8
  %10400 = add i64 %10384, -16
  %10401 = add i64 %10383, 23
  store i64 %10401, i64* %3, align 8
  %10402 = inttoptr i64 %10400 to i32*
  %10403 = load i32, i32* %10402, align 4
  %10404 = and i32 %10403, 2
  %10405 = zext i32 %10404 to i64
  store i64 %10405, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10406 = tail call i32 @llvm.ctpop.i32(i32 %10404)
  %10407 = trunc i32 %10406 to i8
  %10408 = xor i8 %10407, 1
  store i8 %10408, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit524 = lshr exact i32 %10404, 1
  %10409 = trunc i32 %.lobit524 to i8
  %10410 = xor i8 %10409, 1
  store i8 %10410, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10411 = add i64 %10384, -568
  %10412 = add i64 %10383, 36
  store i64 %10412, i64* %3, align 8
  %10413 = inttoptr i64 %10411 to i64*
  store i64 %10399, i64* %10413, align 8
  %10414 = load i64, i64* %3, align 8
  %10415 = load i8, i8* %30, align 1
  %10416 = icmp ne i8 %10415, 0
  %.v606 = select i1 %10416, i64 23, i64 6
  %10417 = add i64 %10414, %.v606
  %cmpBr_451d99 = icmp eq i8 %10415, 1
  %10418 = load i64, i64* %RBP.i, align 8
  %10419 = add i64 %10418, -16
  %10420 = add i64 %10417, 3
  store i64 %10420, i64* %3, align 8
  %10421 = inttoptr i64 %10419 to i32*
  %10422 = load i32, i32* %10421, align 4
  %10423 = zext i32 %10422 to i64
  store i64 %10423, i64* %RAX.i186, align 8
  %10424 = add i64 %10417, 6
  store i64 %10424, i64* %3, align 8
  br i1 %cmpBr_451d99, label %block_.L_451db0, label %block_451d9f

block_451d9f:                                     ; preds = %block_.L_451d75
  %10425 = or i64 %10423, 1
  %10426 = trunc i64 %10425 to i32
  store i64 %10425, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10427 = and i32 %10426, 255
  %10428 = tail call i32 @llvm.ctpop.i32(i32 %10427)
  %10429 = trunc i32 %10428 to i8
  %10430 = and i8 %10429, 1
  %10431 = xor i8 %10430, 1
  store i8 %10431, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %10432 = lshr i32 %10426, 31
  %10433 = trunc i32 %10432 to i8
  store i8 %10433, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10434 = add i64 %10418, -572
  %10435 = add i64 %10417, 12
  store i64 %10435, i64* %3, align 8
  %10436 = inttoptr i64 %10434 to i32*
  store i32 %10426, i32* %10436, align 4
  %10437 = load i64, i64* %3, align 8
  %10438 = add i64 %10437, 17
  store i64 %10438, i64* %3, align 8
  br label %block_.L_451dbc

block_.L_451db0:                                  ; preds = %block_.L_451d75
  %10439 = and i64 %10423, 4294967294
  store i64 %10439, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10440 = and i32 %10422, 254
  %10441 = tail call i32 @llvm.ctpop.i32(i32 %10440)
  %10442 = trunc i32 %10441 to i8
  %10443 = and i8 %10442, 1
  %10444 = xor i8 %10443, 1
  store i8 %10444, i8* %21, align 1
  %10445 = icmp ult i32 %10422, 2
  %10446 = zext i1 %10445 to i8
  store i8 %10446, i8* %30, align 1
  %10447 = lshr i32 %10422, 31
  %10448 = trunc i32 %10447 to i8
  store i8 %10448, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10449 = add i64 %10418, -572
  %10450 = trunc i64 %10439 to i32
  %10451 = add i64 %10417, 12
  store i64 %10451, i64* %3, align 8
  %10452 = inttoptr i64 %10449 to i32*
  store i32 %10450, i32* %10452, align 4
  %.pre359 = load i64, i64* %3, align 8
  br label %block_.L_451dbc

block_.L_451dbc:                                  ; preds = %block_.L_451db0, %block_451d9f
  %10453 = phi i64 [ %.pre359, %block_.L_451db0 ], [ %10438, %block_451d9f ]
  %10454 = load i64, i64* %RBP.i, align 8
  %10455 = add i64 %10454, -572
  %10456 = add i64 %10453, 6
  store i64 %10456, i64* %3, align 8
  %10457 = inttoptr i64 %10455 to i32*
  %10458 = load i32, i32* %10457, align 4
  %10459 = shl i32 %10458, 1
  %10460 = icmp slt i32 %10458, 0
  %10461 = icmp slt i32 %10459, 0
  %10462 = xor i1 %10460, %10461
  %10463 = zext i32 %10459 to i64
  store i64 %10463, i64* %RAX.i186, align 8
  %.lobit164 = lshr i32 %10458, 31
  %10464 = trunc i32 %.lobit164 to i8
  store i8 %10464, i8* %14, align 1
  %10465 = and i32 %10459, 254
  %10466 = tail call i32 @llvm.ctpop.i32(i32 %10465)
  %10467 = trunc i32 %10466 to i8
  %10468 = and i8 %10467, 1
  %10469 = xor i8 %10468, 1
  store i8 %10469, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10470 = icmp eq i32 %10459, 0
  %10471 = zext i1 %10470 to i8
  store i8 %10471, i8* %30, align 1
  %10472 = lshr i32 %10458, 30
  %10473 = trunc i32 %10472 to i8
  %10474 = and i8 %10473, 1
  store i8 %10474, i8* %33, align 1
  %10475 = zext i1 %10462 to i8
  store i8 %10475, i8* %39, align 1
  %10476 = sext i32 %10459 to i64
  store i64 %10476, i64* %RCX.i4414.pre-phi, align 8
  %10477 = add i64 %10454, -568
  %10478 = add i64 %10453, 18
  store i64 %10478, i64* %3, align 8
  %10479 = inttoptr i64 %10477 to i64*
  %10480 = load i64, i64* %10479, align 8
  store i64 %10480, i64* %RDX.i4411.pre-phi, align 8
  %10481 = shl nsw i64 %10476, 1
  %10482 = add i64 %10481, %10480
  %10483 = add i64 %10453, 22
  store i64 %10483, i64* %3, align 8
  %10484 = inttoptr i64 %10482 to i16*
  %10485 = load i16, i16* %10484, align 2
  %10486 = sext i16 %10485 to i64
  %10487 = and i64 %10486, 4294967295
  store i64 %10487, i64* %RAX.i186, align 8
  %10488 = sext i16 %10485 to i32
  %10489 = add nsw i32 %10488, 1
  %10490 = icmp ne i16 %10485, -1
  %10491 = zext i1 %10490 to i8
  store i8 %10491, i8* %14, align 1
  %10492 = and i32 %10489, 255
  %10493 = tail call i32 @llvm.ctpop.i32(i32 %10492)
  %10494 = trunc i32 %10493 to i8
  %10495 = and i8 %10494, 1
  %10496 = xor i8 %10495, 1
  store i8 %10496, i8* %21, align 1
  %10497 = xor i32 %10488, 16
  %10498 = xor i32 %10497, %10489
  %10499 = lshr i32 %10498, 4
  %10500 = trunc i32 %10499 to i8
  %10501 = and i8 %10500, 1
  store i8 %10501, i8* %27, align 1
  %10502 = icmp eq i32 %10489, 0
  %10503 = zext i1 %10502 to i8
  store i8 %10503, i8* %30, align 1
  %10504 = lshr i32 %10489, 31
  %10505 = trunc i32 %10504 to i8
  store i8 %10505, i8* %33, align 1
  %10506 = lshr i32 %10488, 31
  %10507 = xor i32 %10506, 1
  %10508 = xor i32 %10504, %10506
  %10509 = add nuw nsw i32 %10508, %10507
  %10510 = icmp eq i32 %10509, 2
  %10511 = zext i1 %10510 to i8
  store i8 %10511, i8* %39, align 1
  %.v525 = select i1 %10502, i64 31, i64 110
  %10512 = add i64 %10453, %.v525
  %10513 = add i64 %10454, -8
  %10514 = add i64 %10512, 4
  store i64 %10514, i64* %3, align 8
  %10515 = inttoptr i64 %10513 to i64*
  %10516 = load i64, i64* %10515, align 8
  store i64 %10516, i64* %RAX.i186, align 8
  br i1 %10502, label %block_451ddc, label %block_.L_451e2b

block_451ddc:                                     ; preds = %block_.L_451dbc
  %10517 = add i64 %10516, 56
  %10518 = add i64 %10512, 8
  store i64 %10518, i64* %3, align 8
  %10519 = inttoptr i64 %10517 to i64*
  %10520 = load i64, i64* %10519, align 8
  store i64 %10520, i64* %RAX.i186, align 8
  %10521 = add i64 %10520, 6480
  %10522 = add i64 %10512, 15
  store i64 %10522, i64* %3, align 8
  %10523 = inttoptr i64 %10521 to i64*
  %10524 = load i64, i64* %10523, align 8
  store i64 %10524, i64* %RAX.i186, align 8
  %10525 = add i64 %10524, 8
  %10526 = add i64 %10512, 19
  store i64 %10526, i64* %3, align 8
  %10527 = inttoptr i64 %10525 to i64*
  %10528 = load i64, i64* %10527, align 8
  store i64 %10528, i64* %RAX.i186, align 8
  %10529 = add i64 %10454, -12
  %10530 = add i64 %10512, 23
  store i64 %10530, i64* %3, align 8
  %10531 = inttoptr i64 %10529 to i32*
  %10532 = load i32, i32* %10531, align 4
  %10533 = sext i32 %10532 to i64
  store i64 %10533, i64* %RCX.i4414.pre-phi, align 8
  %10534 = shl nsw i64 %10533, 3
  %10535 = add i64 %10534, %10528
  %10536 = add i64 %10512, 27
  store i64 %10536, i64* %3, align 8
  %10537 = inttoptr i64 %10535 to i64*
  %10538 = load i64, i64* %10537, align 8
  store i64 %10538, i64* %RAX.i186, align 8
  %10539 = add i64 %10454, -16
  %10540 = add i64 %10512, 31
  store i64 %10540, i64* %3, align 8
  %10541 = inttoptr i64 %10539 to i32*
  %10542 = load i32, i32* %10541, align 4
  %10543 = sext i32 %10542 to i64
  store i64 %10543, i64* %RCX.i4414.pre-phi, align 8
  %10544 = shl nsw i64 %10543, 1
  %10545 = add i64 %10544, %10538
  %10546 = add i64 %10512, 37
  store i64 %10546, i64* %3, align 8
  %10547 = inttoptr i64 %10545 to i16*
  store i16 -1, i16* %10547, align 2
  %10548 = load i64, i64* %RBP.i, align 8
  %10549 = add i64 %10548, -8
  %10550 = load i64, i64* %3, align 8
  %10551 = add i64 %10550, 4
  store i64 %10551, i64* %3, align 8
  %10552 = inttoptr i64 %10549 to i64*
  %10553 = load i64, i64* %10552, align 8
  store i64 %10553, i64* %RAX.i186, align 8
  %10554 = add i64 %10553, 48
  %10555 = add i64 %10550, 8
  store i64 %10555, i64* %3, align 8
  %10556 = inttoptr i64 %10554 to i64*
  %10557 = load i64, i64* %10556, align 8
  store i64 %10557, i64* %RAX.i186, align 8
  %10558 = add i64 %10557, 6480
  %10559 = add i64 %10550, 15
  store i64 %10559, i64* %3, align 8
  %10560 = inttoptr i64 %10558 to i64*
  %10561 = load i64, i64* %10560, align 8
  store i64 %10561, i64* %RAX.i186, align 8
  %10562 = add i64 %10561, 8
  %10563 = add i64 %10550, 19
  store i64 %10563, i64* %3, align 8
  %10564 = inttoptr i64 %10562 to i64*
  %10565 = load i64, i64* %10564, align 8
  store i64 %10565, i64* %RAX.i186, align 8
  %10566 = add i64 %10548, -12
  %10567 = add i64 %10550, 23
  store i64 %10567, i64* %3, align 8
  %10568 = inttoptr i64 %10566 to i32*
  %10569 = load i32, i32* %10568, align 4
  %10570 = sext i32 %10569 to i64
  store i64 %10570, i64* %RCX.i4414.pre-phi, align 8
  %10571 = shl nsw i64 %10570, 3
  %10572 = add i64 %10571, %10565
  %10573 = add i64 %10550, 27
  store i64 %10573, i64* %3, align 8
  %10574 = inttoptr i64 %10572 to i64*
  %10575 = load i64, i64* %10574, align 8
  store i64 %10575, i64* %RAX.i186, align 8
  %10576 = add i64 %10548, -16
  %10577 = add i64 %10550, 31
  store i64 %10577, i64* %3, align 8
  %10578 = inttoptr i64 %10576 to i32*
  %10579 = load i32, i32* %10578, align 4
  %10580 = sext i32 %10579 to i64
  store i64 %10580, i64* %RCX.i4414.pre-phi, align 8
  %10581 = shl nsw i64 %10580, 1
  %10582 = add i64 %10581, %10575
  %10583 = add i64 %10550, 37
  store i64 %10583, i64* %3, align 8
  %10584 = inttoptr i64 %10582 to i16*
  store i16 -1, i16* %10584, align 2
  %10585 = load i64, i64* %3, align 8
  %10586 = add i64 %10585, 445
  store i64 %10586, i64* %3, align 8
  br label %block_.L_451fe3

block_.L_451e2b:                                  ; preds = %block_.L_451dbc
  %10587 = add i64 %10516, 40
  %10588 = add i64 %10512, 8
  store i64 %10588, i64* %3, align 8
  %10589 = inttoptr i64 %10587 to i64*
  %10590 = load i64, i64* %10589, align 8
  store i64 %10590, i64* %RAX.i186, align 8
  %10591 = add i64 %10590, 6480
  %10592 = add i64 %10512, 15
  store i64 %10592, i64* %3, align 8
  %10593 = inttoptr i64 %10591 to i64*
  %10594 = load i64, i64* %10593, align 8
  store i64 %10594, i64* %RAX.i186, align 8
  %10595 = add i64 %10594, 8
  %10596 = add i64 %10512, 19
  store i64 %10596, i64* %3, align 8
  %10597 = inttoptr i64 %10595 to i64*
  %10598 = load i64, i64* %10597, align 8
  store i64 %10598, i64* %RAX.i186, align 8
  %10599 = add i64 %10454, -12
  %10600 = add i64 %10512, 22
  store i64 %10600, i64* %3, align 8
  %10601 = inttoptr i64 %10599 to i32*
  %10602 = load i32, i32* %10601, align 4
  %10603 = and i32 %10602, 2
  %10604 = zext i32 %10603 to i64
  store i64 %10604, i64* %RCX.i4414.pre-phi, align 8
  store i8 0, i8* %14, align 1
  %10605 = tail call i32 @llvm.ctpop.i32(i32 %10603)
  %10606 = trunc i32 %10605 to i8
  %10607 = xor i8 %10606, 1
  store i8 %10607, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit526 = lshr exact i32 %10603, 1
  %10608 = trunc i32 %.lobit526 to i8
  %10609 = xor i8 %10608, 1
  store i8 %10609, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10610 = add i64 %10454, -584
  %10611 = add i64 %10512, 35
  store i64 %10611, i64* %3, align 8
  %10612 = inttoptr i64 %10610 to i64*
  store i64 %10598, i64* %10612, align 8
  %10613 = load i64, i64* %3, align 8
  %10614 = load i8, i8* %30, align 1
  %10615 = icmp ne i8 %10614, 0
  %.v607 = select i1 %10615, i64 23, i64 6
  %10616 = add i64 %10613, %.v607
  %cmpBr_451e4e = icmp eq i8 %10614, 1
  %10617 = load i64, i64* %RBP.i, align 8
  %10618 = add i64 %10617, -12
  %10619 = add i64 %10616, 3
  store i64 %10619, i64* %3, align 8
  %10620 = inttoptr i64 %10618 to i32*
  %10621 = load i32, i32* %10620, align 4
  %10622 = zext i32 %10621 to i64
  store i64 %10622, i64* %RAX.i186, align 8
  %10623 = add i64 %10616, 6
  store i64 %10623, i64* %3, align 8
  br i1 %cmpBr_451e4e, label %block_.L_451e65, label %block_451e54

block_451e54:                                     ; preds = %block_.L_451e2b
  %10624 = or i64 %10622, 1
  %10625 = trunc i64 %10624 to i32
  store i64 %10624, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10626 = and i32 %10625, 255
  %10627 = tail call i32 @llvm.ctpop.i32(i32 %10626)
  %10628 = trunc i32 %10627 to i8
  %10629 = and i8 %10628, 1
  %10630 = xor i8 %10629, 1
  store i8 %10630, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %10631 = lshr i32 %10625, 31
  %10632 = trunc i32 %10631 to i8
  store i8 %10632, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10633 = add i64 %10617, -588
  %10634 = add i64 %10616, 12
  store i64 %10634, i64* %3, align 8
  %10635 = inttoptr i64 %10633 to i32*
  store i32 %10625, i32* %10635, align 4
  %10636 = load i64, i64* %3, align 8
  %10637 = add i64 %10636, 17
  store i64 %10637, i64* %3, align 8
  br label %block_.L_451e71

block_.L_451e65:                                  ; preds = %block_.L_451e2b
  %10638 = and i64 %10622, 4294967294
  store i64 %10638, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10639 = and i32 %10621, 254
  %10640 = tail call i32 @llvm.ctpop.i32(i32 %10639)
  %10641 = trunc i32 %10640 to i8
  %10642 = and i8 %10641, 1
  %10643 = xor i8 %10642, 1
  store i8 %10643, i8* %21, align 1
  %10644 = icmp ult i32 %10621, 2
  %10645 = zext i1 %10644 to i8
  store i8 %10645, i8* %30, align 1
  %10646 = lshr i32 %10621, 31
  %10647 = trunc i32 %10646 to i8
  store i8 %10647, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10648 = add i64 %10617, -588
  %10649 = trunc i64 %10638 to i32
  %10650 = add i64 %10616, 12
  store i64 %10650, i64* %3, align 8
  %10651 = inttoptr i64 %10648 to i32*
  store i32 %10649, i32* %10651, align 4
  %.pre360 = load i64, i64* %3, align 8
  br label %block_.L_451e71

block_.L_451e71:                                  ; preds = %block_.L_451e65, %block_451e54
  %10652 = phi i64 [ %.pre360, %block_.L_451e65 ], [ %10637, %block_451e54 ]
  %10653 = load i64, i64* %RBP.i, align 8
  %10654 = add i64 %10653, -588
  %10655 = add i64 %10652, 6
  store i64 %10655, i64* %3, align 8
  %10656 = inttoptr i64 %10654 to i32*
  %10657 = load i32, i32* %10656, align 4
  %10658 = zext i32 %10657 to i64
  store i64 %10658, i64* %RAX.i186, align 8
  %10659 = sext i32 %10657 to i64
  store i64 %10659, i64* %RCX.i4414.pre-phi, align 8
  %10660 = add i64 %10653, -584
  %10661 = add i64 %10652, 16
  store i64 %10661, i64* %3, align 8
  %10662 = inttoptr i64 %10660 to i64*
  %10663 = load i64, i64* %10662, align 8
  store i64 %10663, i64* %RDX.i4411.pre-phi, align 8
  %10664 = shl nsw i64 %10659, 3
  %10665 = add i64 %10664, %10663
  %10666 = add i64 %10652, 20
  store i64 %10666, i64* %3, align 8
  %10667 = inttoptr i64 %10665 to i64*
  %10668 = load i64, i64* %10667, align 8
  store i64 %10668, i64* %RCX.i4414.pre-phi, align 8
  %10669 = add i64 %10653, -16
  %10670 = add i64 %10652, 23
  store i64 %10670, i64* %3, align 8
  %10671 = inttoptr i64 %10669 to i32*
  %10672 = load i32, i32* %10671, align 4
  %10673 = and i32 %10672, 2
  %10674 = zext i32 %10673 to i64
  store i64 %10674, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10675 = tail call i32 @llvm.ctpop.i32(i32 %10673)
  %10676 = trunc i32 %10675 to i8
  %10677 = xor i8 %10676, 1
  store i8 %10677, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %.lobit527 = lshr exact i32 %10673, 1
  %10678 = trunc i32 %.lobit527 to i8
  %10679 = xor i8 %10678, 1
  store i8 %10679, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10680 = add i64 %10653, -600
  %10681 = add i64 %10652, 36
  store i64 %10681, i64* %3, align 8
  %10682 = inttoptr i64 %10680 to i64*
  store i64 %10668, i64* %10682, align 8
  %10683 = load i64, i64* %3, align 8
  %10684 = load i8, i8* %30, align 1
  %10685 = icmp ne i8 %10684, 0
  %.v608 = select i1 %10685, i64 23, i64 6
  %10686 = add i64 %10683, %.v608
  %cmpBr_451e95 = icmp eq i8 %10684, 1
  %10687 = load i64, i64* %RBP.i, align 8
  %10688 = add i64 %10687, -16
  %10689 = add i64 %10686, 3
  store i64 %10689, i64* %3, align 8
  %10690 = inttoptr i64 %10688 to i32*
  %10691 = load i32, i32* %10690, align 4
  %10692 = zext i32 %10691 to i64
  store i64 %10692, i64* %RAX.i186, align 8
  %10693 = add i64 %10686, 6
  store i64 %10693, i64* %3, align 8
  br i1 %cmpBr_451e95, label %block_.L_451eac, label %block_451e9b

block_451e9b:                                     ; preds = %block_.L_451e71
  %10694 = or i64 %10692, 1
  %10695 = trunc i64 %10694 to i32
  store i64 %10694, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10696 = and i32 %10695, 255
  %10697 = tail call i32 @llvm.ctpop.i32(i32 %10696)
  %10698 = trunc i32 %10697 to i8
  %10699 = and i8 %10698, 1
  %10700 = xor i8 %10699, 1
  store i8 %10700, i8* %21, align 1
  store i8 0, i8* %30, align 1
  %10701 = lshr i32 %10695, 31
  %10702 = trunc i32 %10701 to i8
  store i8 %10702, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10703 = add i64 %10687, -604
  %10704 = add i64 %10686, 12
  store i64 %10704, i64* %3, align 8
  %10705 = inttoptr i64 %10703 to i32*
  store i32 %10695, i32* %10705, align 4
  %10706 = load i64, i64* %3, align 8
  %10707 = add i64 %10706, 17
  store i64 %10707, i64* %3, align 8
  br label %block_.L_451eb8

block_.L_451eac:                                  ; preds = %block_.L_451e71
  %10708 = and i64 %10692, 4294967294
  store i64 %10708, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  %10709 = and i32 %10691, 254
  %10710 = tail call i32 @llvm.ctpop.i32(i32 %10709)
  %10711 = trunc i32 %10710 to i8
  %10712 = and i8 %10711, 1
  %10713 = xor i8 %10712, 1
  store i8 %10713, i8* %21, align 1
  %10714 = icmp ult i32 %10691, 2
  %10715 = zext i1 %10714 to i8
  store i8 %10715, i8* %30, align 1
  %10716 = lshr i32 %10691, 31
  %10717 = trunc i32 %10716 to i8
  store i8 %10717, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %10718 = add i64 %10687, -604
  %10719 = trunc i64 %10708 to i32
  %10720 = add i64 %10686, 12
  store i64 %10720, i64* %3, align 8
  %10721 = inttoptr i64 %10718 to i32*
  store i32 %10719, i32* %10721, align 4
  %.pre361 = load i64, i64* %3, align 8
  br label %block_.L_451eb8

block_.L_451eb8:                                  ; preds = %block_.L_451eac, %block_451e9b
  %10722 = phi i64 [ %.pre361, %block_.L_451eac ], [ %10707, %block_451e9b ]
  %10723 = load i64, i64* %RBP.i, align 8
  %10724 = add i64 %10723, -604
  %10725 = add i64 %10722, 6
  store i64 %10725, i64* %3, align 8
  %10726 = inttoptr i64 %10724 to i32*
  %10727 = load i32, i32* %10726, align 4
  %10728 = shl i32 %10727, 1
  %10729 = icmp slt i32 %10727, 0
  %10730 = icmp slt i32 %10728, 0
  %10731 = xor i1 %10729, %10730
  %10732 = zext i32 %10728 to i64
  store i64 %10732, i64* %RAX.i186, align 8
  %.lobit167 = lshr i32 %10727, 31
  %10733 = trunc i32 %.lobit167 to i8
  store i8 %10733, i8* %14, align 1
  %10734 = and i32 %10728, 254
  %10735 = tail call i32 @llvm.ctpop.i32(i32 %10734)
  %10736 = trunc i32 %10735 to i8
  %10737 = and i8 %10736, 1
  %10738 = xor i8 %10737, 1
  store i8 %10738, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10739 = icmp eq i32 %10728, 0
  %10740 = zext i1 %10739 to i8
  store i8 %10740, i8* %30, align 1
  %10741 = lshr i32 %10727, 30
  %10742 = trunc i32 %10741 to i8
  %10743 = and i8 %10742, 1
  store i8 %10743, i8* %33, align 1
  %10744 = zext i1 %10731 to i8
  store i8 %10744, i8* %39, align 1
  %10745 = sext i32 %10728 to i64
  store i64 %10745, i64* %RCX.i4414.pre-phi, align 8
  %10746 = add i64 %10723, -600
  %10747 = add i64 %10722, 18
  store i64 %10747, i64* %3, align 8
  %10748 = inttoptr i64 %10746 to i64*
  %10749 = load i64, i64* %10748, align 8
  store i64 %10749, i64* %RDX.i4411.pre-phi, align 8
  %10750 = shl nsw i64 %10745, 1
  %10751 = add i64 %10750, %10749
  %10752 = add i64 %10722, 22
  store i64 %10752, i64* %3, align 8
  %10753 = inttoptr i64 %10751 to i16*
  %10754 = load i16, i16* %10753, align 2
  store i16 %10754, i16* %SI.i1634, align 2
  %10755 = add i64 %10723, -8
  %10756 = add i64 %10722, 26
  store i64 %10756, i64* %3, align 8
  %10757 = inttoptr i64 %10755 to i64*
  %10758 = load i64, i64* %10757, align 8
  store i64 %10758, i64* %RCX.i4414.pre-phi, align 8
  %10759 = add i64 %10758, 56
  %10760 = add i64 %10722, 30
  store i64 %10760, i64* %3, align 8
  %10761 = inttoptr i64 %10759 to i64*
  %10762 = load i64, i64* %10761, align 8
  store i64 %10762, i64* %RCX.i4414.pre-phi, align 8
  %10763 = add i64 %10762, 6480
  %10764 = add i64 %10722, 37
  store i64 %10764, i64* %3, align 8
  %10765 = inttoptr i64 %10763 to i64*
  %10766 = load i64, i64* %10765, align 8
  store i64 %10766, i64* %RCX.i4414.pre-phi, align 8
  %10767 = add i64 %10766, 8
  %10768 = add i64 %10722, 41
  store i64 %10768, i64* %3, align 8
  %10769 = inttoptr i64 %10767 to i64*
  %10770 = load i64, i64* %10769, align 8
  store i64 %10770, i64* %RCX.i4414.pre-phi, align 8
  %10771 = add i64 %10723, -12
  %10772 = add i64 %10722, 45
  store i64 %10772, i64* %3, align 8
  %10773 = inttoptr i64 %10771 to i32*
  %10774 = load i32, i32* %10773, align 4
  %10775 = sext i32 %10774 to i64
  store i64 %10775, i64* %RDI.i126, align 8
  %10776 = shl nsw i64 %10775, 3
  %10777 = add i64 %10776, %10770
  %10778 = add i64 %10722, 49
  store i64 %10778, i64* %3, align 8
  %10779 = inttoptr i64 %10777 to i64*
  %10780 = load i64, i64* %10779, align 8
  store i64 %10780, i64* %RCX.i4414.pre-phi, align 8
  %10781 = add i64 %10723, -16
  %10782 = add i64 %10722, 53
  store i64 %10782, i64* %3, align 8
  %10783 = inttoptr i64 %10781 to i32*
  %10784 = load i32, i32* %10783, align 4
  %10785 = sext i32 %10784 to i64
  store i64 %10785, i64* %RDI.i126, align 8
  %10786 = shl nsw i64 %10785, 1
  %10787 = add i64 %10786, %10780
  %10788 = add i64 %10722, 57
  store i64 %10788, i64* %3, align 8
  %10789 = inttoptr i64 %10787 to i16*
  store i16 %10754, i16* %10789, align 2
  %10790 = load i64, i64* %RBP.i, align 8
  %10791 = add i64 %10790, -8
  %10792 = load i64, i64* %3, align 8
  %10793 = add i64 %10792, 4
  store i64 %10793, i64* %3, align 8
  %10794 = inttoptr i64 %10791 to i64*
  %10795 = load i64, i64* %10794, align 8
  store i64 %10795, i64* %RCX.i4414.pre-phi, align 8
  %10796 = add i64 %10795, 48
  %10797 = add i64 %10792, 8
  store i64 %10797, i64* %3, align 8
  %10798 = inttoptr i64 %10796 to i64*
  %10799 = load i64, i64* %10798, align 8
  store i64 %10799, i64* %RCX.i4414.pre-phi, align 8
  %10800 = add i64 %10799, 6480
  %10801 = add i64 %10792, 15
  store i64 %10801, i64* %3, align 8
  %10802 = inttoptr i64 %10800 to i64*
  %10803 = load i64, i64* %10802, align 8
  store i64 %10803, i64* %RCX.i4414.pre-phi, align 8
  %10804 = add i64 %10803, 8
  %10805 = add i64 %10792, 19
  store i64 %10805, i64* %3, align 8
  %10806 = inttoptr i64 %10804 to i64*
  %10807 = load i64, i64* %10806, align 8
  store i64 %10807, i64* %RCX.i4414.pre-phi, align 8
  %10808 = add i64 %10790, -12
  %10809 = add i64 %10792, 23
  store i64 %10809, i64* %3, align 8
  %10810 = inttoptr i64 %10808 to i32*
  %10811 = load i32, i32* %10810, align 4
  %10812 = sext i32 %10811 to i64
  store i64 %10812, i64* %RDI.i126, align 8
  %10813 = shl nsw i64 %10812, 3
  %10814 = add i64 %10813, %10807
  %10815 = add i64 %10792, 27
  store i64 %10815, i64* %3, align 8
  %10816 = inttoptr i64 %10814 to i64*
  %10817 = load i64, i64* %10816, align 8
  store i64 %10817, i64* %RCX.i4414.pre-phi, align 8
  %10818 = add i64 %10790, -16
  %10819 = add i64 %10792, 31
  store i64 %10819, i64* %3, align 8
  %10820 = inttoptr i64 %10818 to i32*
  %10821 = load i32, i32* %10820, align 4
  %10822 = sext i32 %10821 to i64
  store i64 %10822, i64* %RDI.i126, align 8
  %10823 = shl nsw i64 %10822, 1
  %10824 = add i64 %10823, %10817
  %10825 = load i16, i16* %SI.i1634, align 2
  %10826 = add i64 %10792, 35
  store i64 %10826, i64* %3, align 8
  %10827 = inttoptr i64 %10824 to i16*
  store i16 %10825, i16* %10827, align 2
  %10828 = load i16, i16* %SI.i1634, align 2
  %10829 = load i64, i64* %3, align 8
  %10830 = sext i16 %10828 to i64
  %10831 = and i64 %10830, 4294967295
  store i64 %10831, i64* %RAX.i186, align 8
  %10832 = load i64, i64* %RBP.i, align 8
  %10833 = add i64 %10832, -24
  %10834 = sext i16 %10828 to i32
  %10835 = add i64 %10829, 6
  store i64 %10835, i64* %3, align 8
  %10836 = inttoptr i64 %10833 to i32*
  store i32 %10834, i32* %10836, align 4
  %10837 = load i64, i64* %RBP.i, align 8
  %10838 = add i64 %10837, -24
  %10839 = load i64, i64* %3, align 8
  %10840 = add i64 %10839, 4
  store i64 %10840, i64* %3, align 8
  %10841 = inttoptr i64 %10838 to i32*
  %10842 = load i32, i32* %10841, align 4
  store i8 0, i8* %14, align 1
  %10843 = and i32 %10842, 255
  %10844 = tail call i32 @llvm.ctpop.i32(i32 %10843)
  %10845 = trunc i32 %10844 to i8
  %10846 = and i8 %10845, 1
  %10847 = xor i8 %10846, 1
  store i8 %10847, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10848 = icmp eq i32 %10842, 0
  %10849 = zext i1 %10848 to i8
  store i8 %10849, i8* %30, align 1
  %10850 = lshr i32 %10842, 31
  %10851 = trunc i32 %10850 to i8
  store i8 %10851, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10852 = icmp ne i8 %10851, 0
  %.v = select i1 %10852, i64 38, i64 6
  %10853 = add i64 %10840, %.v
  store i64 %10853, i64* %3, align 8
  br i1 %10852, label %block_.L_451f45, label %block_451f25

block_451f25:                                     ; preds = %block_.L_451eb8
  %10854 = add i64 %10837, -8
  %10855 = add i64 %10853, 4
  store i64 %10855, i64* %3, align 8
  %10856 = inttoptr i64 %10854 to i64*
  %10857 = load i64, i64* %10856, align 8
  store i64 %10857, i64* %RAX.i186, align 8
  %10858 = add i64 %10857, 40
  %10859 = add i64 %10853, 8
  store i64 %10859, i64* %3, align 8
  %10860 = inttoptr i64 %10858 to i64*
  %10861 = load i64, i64* %10860, align 8
  store i64 %10861, i64* %RAX.i186, align 8
  %10862 = add i64 %10853, 12
  store i64 %10862, i64* %3, align 8
  %10863 = load i32, i32* %10841, align 4
  %10864 = sext i32 %10863 to i64
  store i64 %10864, i64* %RCX.i4414.pre-phi, align 8
  %10865 = shl nsw i64 %10864, 3
  %10866 = add i64 %10861, 3456
  %10867 = add i64 %10866, %10865
  %10868 = add i64 %10853, 20
  store i64 %10868, i64* %3, align 8
  %10869 = inttoptr i64 %10867 to i64*
  %10870 = load i64, i64* %10869, align 8
  store i64 %10870, i64* %RAX.i186, align 8
  %10871 = add i64 %10837, -616
  %10872 = add i64 %10853, 27
  store i64 %10872, i64* %3, align 8
  %10873 = inttoptr i64 %10871 to i64*
  store i64 %10870, i64* %10873, align 8
  %10874 = load i64, i64* %3, align 8
  %10875 = add i64 %10874, 21
  br label %block_.L_451f55

block_.L_451f45:                                  ; preds = %block_.L_451eb8
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i4414.pre-phi, align 8
  %10876 = add i64 %10837, -616
  %10877 = add i64 %10853, 11
  store i64 %10877, i64* %3, align 8
  %10878 = inttoptr i64 %10876 to i64*
  store i64 0, i64* %10878, align 8
  %10879 = load i64, i64* %3, align 8
  %10880 = add i64 %10879, 5
  store i64 %10880, i64* %3, align 8
  br label %block_.L_451f55

block_.L_451f55:                                  ; preds = %block_.L_451f45, %block_451f25
  %storemerge168 = phi i64 [ %10875, %block_451f25 ], [ %10880, %block_.L_451f45 ]
  %10881 = load i64, i64* %RBP.i, align 8
  %10882 = add i64 %10881, -616
  %10883 = add i64 %storemerge168, 7
  store i64 %10883, i64* %3, align 8
  %10884 = inttoptr i64 %10882 to i64*
  %10885 = load i64, i64* %10884, align 8
  store i64 %10885, i64* %RAX.i186, align 8
  %10886 = add i64 %10881, -8
  %10887 = add i64 %storemerge168, 11
  store i64 %10887, i64* %3, align 8
  %10888 = inttoptr i64 %10886 to i64*
  %10889 = load i64, i64* %10888, align 8
  store i64 %10889, i64* %RCX.i4414.pre-phi, align 8
  %10890 = add i64 %10889, 48
  %10891 = add i64 %storemerge168, 15
  store i64 %10891, i64* %3, align 8
  %10892 = inttoptr i64 %10890 to i64*
  %10893 = load i64, i64* %10892, align 8
  store i64 %10893, i64* %RCX.i4414.pre-phi, align 8
  %10894 = add i64 %10893, 6496
  %10895 = add i64 %storemerge168, 22
  store i64 %10895, i64* %3, align 8
  %10896 = inttoptr i64 %10894 to i64*
  %10897 = load i64, i64* %10896, align 8
  store i64 %10897, i64* %RCX.i4414.pre-phi, align 8
  %10898 = add i64 %10897, 8
  %10899 = add i64 %storemerge168, 26
  store i64 %10899, i64* %3, align 8
  %10900 = inttoptr i64 %10898 to i64*
  %10901 = load i64, i64* %10900, align 8
  store i64 %10901, i64* %RCX.i4414.pre-phi, align 8
  %10902 = add i64 %10881, -12
  %10903 = add i64 %storemerge168, 30
  store i64 %10903, i64* %3, align 8
  %10904 = inttoptr i64 %10902 to i32*
  %10905 = load i32, i32* %10904, align 4
  %10906 = sext i32 %10905 to i64
  store i64 %10906, i64* %RDX.i4411.pre-phi, align 8
  %10907 = shl nsw i64 %10906, 3
  %10908 = add i64 %10907, %10901
  %10909 = add i64 %storemerge168, 34
  store i64 %10909, i64* %3, align 8
  %10910 = inttoptr i64 %10908 to i64*
  %10911 = load i64, i64* %10910, align 8
  store i64 %10911, i64* %RCX.i4414.pre-phi, align 8
  %10912 = add i64 %10881, -16
  %10913 = add i64 %storemerge168, 38
  store i64 %10913, i64* %3, align 8
  %10914 = inttoptr i64 %10912 to i32*
  %10915 = load i32, i32* %10914, align 4
  %10916 = sext i32 %10915 to i64
  store i64 %10916, i64* %RDX.i4411.pre-phi, align 8
  %10917 = shl nsw i64 %10916, 3
  %10918 = add i64 %10917, %10911
  %10919 = add i64 %storemerge168, 42
  store i64 %10919, i64* %3, align 8
  %10920 = inttoptr i64 %10918 to i64*
  store i64 %10885, i64* %10920, align 8
  %10921 = load i64, i64* %RBP.i, align 8
  %10922 = add i64 %10921, -24
  %10923 = load i64, i64* %3, align 8
  %10924 = add i64 %10923, 4
  store i64 %10924, i64* %3, align 8
  %10925 = inttoptr i64 %10922 to i32*
  %10926 = load i32, i32* %10925, align 4
  store i8 0, i8* %14, align 1
  %10927 = and i32 %10926, 255
  %10928 = tail call i32 @llvm.ctpop.i32(i32 %10927)
  %10929 = trunc i32 %10928 to i8
  %10930 = and i8 %10929, 1
  %10931 = xor i8 %10930, 1
  store i8 %10931, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %10932 = icmp eq i32 %10926, 0
  %10933 = zext i1 %10932 to i8
  store i8 %10933, i8* %30, align 1
  %10934 = lshr i32 %10926, 31
  %10935 = trunc i32 %10934 to i8
  store i8 %10935, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %10936 = icmp ne i8 %10935, 0
  %.v178 = select i1 %10936, i64 38, i64 6
  %10937 = add i64 %10924, %.v178
  store i64 %10937, i64* %3, align 8
  br i1 %10936, label %block_.L_451fa9, label %block_451f89

block_451f89:                                     ; preds = %block_.L_451f55
  %10938 = add i64 %10921, -8
  %10939 = add i64 %10937, 4
  store i64 %10939, i64* %3, align 8
  %10940 = inttoptr i64 %10938 to i64*
  %10941 = load i64, i64* %10940, align 8
  store i64 %10941, i64* %RAX.i186, align 8
  %10942 = add i64 %10941, 40
  %10943 = add i64 %10937, 8
  store i64 %10943, i64* %3, align 8
  %10944 = inttoptr i64 %10942 to i64*
  %10945 = load i64, i64* %10944, align 8
  store i64 %10945, i64* %RAX.i186, align 8
  %10946 = add i64 %10937, 12
  store i64 %10946, i64* %3, align 8
  %10947 = load i32, i32* %10925, align 4
  %10948 = sext i32 %10947 to i64
  store i64 %10948, i64* %RCX.i4414.pre-phi, align 8
  %10949 = shl nsw i64 %10948, 3
  %10950 = add i64 %10945, 5040
  %10951 = add i64 %10950, %10949
  %10952 = add i64 %10937, 20
  store i64 %10952, i64* %3, align 8
  %10953 = inttoptr i64 %10951 to i64*
  %10954 = load i64, i64* %10953, align 8
  store i64 %10954, i64* %RAX.i186, align 8
  %10955 = add i64 %10921, -624
  %10956 = add i64 %10937, 27
  store i64 %10956, i64* %3, align 8
  %10957 = inttoptr i64 %10955 to i64*
  store i64 %10954, i64* %10957, align 8
  %10958 = load i64, i64* %3, align 8
  %10959 = add i64 %10958, 21
  br label %block_.L_451fb9

block_.L_451fa9:                                  ; preds = %block_.L_451f55
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  store i64 0, i64* %RCX.i4414.pre-phi, align 8
  %10960 = add i64 %10921, -624
  %10961 = add i64 %10937, 11
  store i64 %10961, i64* %3, align 8
  %10962 = inttoptr i64 %10960 to i64*
  store i64 0, i64* %10962, align 8
  %10963 = load i64, i64* %3, align 8
  %10964 = add i64 %10963, 5
  store i64 %10964, i64* %3, align 8
  br label %block_.L_451fb9

block_.L_451fb9:                                  ; preds = %block_.L_451fa9, %block_451f89
  %storemerge169 = phi i64 [ %10959, %block_451f89 ], [ %10964, %block_.L_451fa9 ]
  %10965 = load i64, i64* %RBP.i, align 8
  %10966 = add i64 %10965, -624
  %10967 = add i64 %storemerge169, 7
  store i64 %10967, i64* %3, align 8
  %10968 = inttoptr i64 %10966 to i64*
  %10969 = load i64, i64* %10968, align 8
  store i64 %10969, i64* %RAX.i186, align 8
  %10970 = add i64 %10965, -8
  %10971 = add i64 %storemerge169, 11
  store i64 %10971, i64* %3, align 8
  %10972 = inttoptr i64 %10970 to i64*
  %10973 = load i64, i64* %10972, align 8
  store i64 %10973, i64* %RCX.i4414.pre-phi, align 8
  %10974 = add i64 %10973, 56
  %10975 = add i64 %storemerge169, 15
  store i64 %10975, i64* %3, align 8
  %10976 = inttoptr i64 %10974 to i64*
  %10977 = load i64, i64* %10976, align 8
  store i64 %10977, i64* %RCX.i4414.pre-phi, align 8
  %10978 = add i64 %10977, 6496
  %10979 = add i64 %storemerge169, 22
  store i64 %10979, i64* %3, align 8
  %10980 = inttoptr i64 %10978 to i64*
  %10981 = load i64, i64* %10980, align 8
  store i64 %10981, i64* %RCX.i4414.pre-phi, align 8
  %10982 = add i64 %10981, 8
  %10983 = add i64 %storemerge169, 26
  store i64 %10983, i64* %3, align 8
  %10984 = inttoptr i64 %10982 to i64*
  %10985 = load i64, i64* %10984, align 8
  store i64 %10985, i64* %RCX.i4414.pre-phi, align 8
  %10986 = add i64 %10965, -12
  %10987 = add i64 %storemerge169, 30
  store i64 %10987, i64* %3, align 8
  %10988 = inttoptr i64 %10986 to i32*
  %10989 = load i32, i32* %10988, align 4
  %10990 = sext i32 %10989 to i64
  store i64 %10990, i64* %RDX.i4411.pre-phi, align 8
  %10991 = shl nsw i64 %10990, 3
  %10992 = add i64 %10991, %10985
  %10993 = add i64 %storemerge169, 34
  store i64 %10993, i64* %3, align 8
  %10994 = inttoptr i64 %10992 to i64*
  %10995 = load i64, i64* %10994, align 8
  store i64 %10995, i64* %RCX.i4414.pre-phi, align 8
  %10996 = add i64 %10965, -16
  %10997 = add i64 %storemerge169, 38
  store i64 %10997, i64* %3, align 8
  %10998 = inttoptr i64 %10996 to i32*
  %10999 = load i32, i32* %10998, align 4
  %11000 = sext i32 %10999 to i64
  store i64 %11000, i64* %RDX.i4411.pre-phi, align 8
  %11001 = shl nsw i64 %11000, 3
  %11002 = add i64 %11001, %10995
  %11003 = add i64 %storemerge169, 42
  store i64 %11003, i64* %3, align 8
  %11004 = inttoptr i64 %11002 to i64*
  store i64 %10969, i64* %11004, align 8
  %.pre362 = load i64, i64* %3, align 8
  br label %block_.L_451fe3

block_.L_451fe3:                                  ; preds = %block_.L_451fb9, %block_451ddc
  %11005 = phi i64 [ %.pre362, %block_.L_451fb9 ], [ %10586, %block_451ddc ]
  %11006 = add i64 %11005, 5
  store i64 %11006, i64* %3, align 8
  %.pre363.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_451fe8

block_.L_451fe8:                                  ; preds = %block_.L_451619, %block_.L_451fe3
  %.pre363 = phi i64 [ %.pre363.pre, %block_.L_451fe3 ], [ %8519, %block_.L_451619 ]
  %11007 = phi i64 [ %11006, %block_.L_451fe3 ], [ %8542, %block_.L_451619 ]
  %11008 = add i64 %11007, 5
  store i64 %11008, i64* %3, align 8
  br label %block_.L_451fed

block_.L_451fed:                                  ; preds = %block_4515fc, %block_.L_451fe8
  %11009 = phi i64 [ %.pre363, %block_.L_451fe8 ], [ %8372, %block_4515fc ]
  %11010 = phi i64 [ %11008, %block_.L_451fe8 ], [ %8423, %block_4515fc ]
  %11011 = add i64 %11009, -16
  %11012 = add i64 %11010, 8
  store i64 %11012, i64* %3, align 8
  %11013 = inttoptr i64 %11011 to i32*
  %11014 = load i32, i32* %11013, align 4
  %11015 = add i32 %11014, 1
  %11016 = zext i32 %11015 to i64
  store i64 %11016, i64* %RAX.i186, align 8
  %11017 = icmp eq i32 %11014, -1
  %11018 = icmp eq i32 %11015, 0
  %11019 = or i1 %11017, %11018
  %11020 = zext i1 %11019 to i8
  store i8 %11020, i8* %14, align 1
  %11021 = and i32 %11015, 255
  %11022 = tail call i32 @llvm.ctpop.i32(i32 %11021)
  %11023 = trunc i32 %11022 to i8
  %11024 = and i8 %11023, 1
  %11025 = xor i8 %11024, 1
  store i8 %11025, i8* %21, align 1
  %11026 = xor i32 %11015, %11014
  %11027 = lshr i32 %11026, 4
  %11028 = trunc i32 %11027 to i8
  %11029 = and i8 %11028, 1
  store i8 %11029, i8* %27, align 1
  %11030 = zext i1 %11018 to i8
  store i8 %11030, i8* %30, align 1
  %11031 = lshr i32 %11015, 31
  %11032 = trunc i32 %11031 to i8
  store i8 %11032, i8* %33, align 1
  %11033 = lshr i32 %11014, 31
  %11034 = xor i32 %11031, %11033
  %11035 = add nuw nsw i32 %11034, %11031
  %11036 = icmp eq i32 %11035, 2
  %11037 = zext i1 %11036 to i8
  store i8 %11037, i8* %39, align 1
  %11038 = add i64 %11010, 14
  store i64 %11038, i64* %3, align 8
  store i32 %11015, i32* %11013, align 4
  %11039 = load i64, i64* %3, align 8
  %11040 = add i64 %11039, -2750
  store i64 %11040, i64* %3, align 8
  br label %block_.L_45153d

block_.L_452000:                                  ; preds = %routine_idivl__esi.exit1952
  %11041 = load i64, i64* %RBP.i, align 8
  %11042 = add i64 %11041, -12
  %11043 = add i64 %8079, 8
  store i64 %11043, i64* %3, align 8
  %11044 = inttoptr i64 %11042 to i32*
  %11045 = load i32, i32* %11044, align 4
  %11046 = add i32 %11045, 1
  %11047 = zext i32 %11046 to i64
  store i64 %11047, i64* %RAX.i186, align 8
  %11048 = icmp eq i32 %11045, -1
  %11049 = icmp eq i32 %11046, 0
  %11050 = or i1 %11048, %11049
  %11051 = zext i1 %11050 to i8
  store i8 %11051, i8* %14, align 1
  %11052 = and i32 %11046, 255
  %11053 = tail call i32 @llvm.ctpop.i32(i32 %11052)
  %11054 = trunc i32 %11053 to i8
  %11055 = and i8 %11054, 1
  %11056 = xor i8 %11055, 1
  store i8 %11056, i8* %21, align 1
  %11057 = xor i32 %11046, %11045
  %11058 = lshr i32 %11057, 4
  %11059 = trunc i32 %11058 to i8
  %11060 = and i8 %11059, 1
  store i8 %11060, i8* %27, align 1
  %11061 = zext i1 %11049 to i8
  store i8 %11061, i8* %30, align 1
  %11062 = lshr i32 %11046, 31
  %11063 = trunc i32 %11062 to i8
  store i8 %11063, i8* %33, align 1
  %11064 = lshr i32 %11045, 31
  %11065 = xor i32 %11062, %11064
  %11066 = add nuw nsw i32 %11065, %11062
  %11067 = icmp eq i32 %11066, 2
  %11068 = zext i1 %11067 to i8
  store i8 %11068, i8* %39, align 1
  %11069 = add i64 %8079, 14
  store i64 %11069, i64* %3, align 8
  store i32 %11046, i32* %11044, align 4
  %11070 = load i64, i64* %3, align 8
  %11071 = add i64 %11070, -2823
  store i64 %11071, i64* %3, align 8
  br label %block_.L_451507

block_.L_45201a:                                  ; preds = %block_.L_45201a.preheader, %block_.L_4520ac
  %11072 = phi i64 [ %11328, %block_.L_4520ac ], [ %.pre327, %block_.L_45201a.preheader ]
  %MEMORY.50 = phi %struct.Memory* [ %11207, %block_.L_4520ac ], [ %7968, %block_.L_45201a.preheader ]
  store i64 4, i64* %RAX.i186, align 8
  %11073 = load i64, i64* %RBP.i, align 8
  %11074 = add i64 %11073, -16
  %11075 = add i64 %11072, 8
  store i64 %11075, i64* %3, align 8
  %11076 = inttoptr i64 %11074 to i32*
  %11077 = load i32, i32* %11076, align 4
  %11078 = zext i32 %11077 to i64
  store i64 %11078, i64* %RCX.i4414.pre-phi, align 8
  %11079 = add i64 %11073, -8
  %11080 = add i64 %11072, 12
  store i64 %11080, i64* %3, align 8
  %11081 = inttoptr i64 %11079 to i64*
  %11082 = load i64, i64* %11081, align 8
  store i64 %11082, i64* %RDX.i4411.pre-phi, align 8
  %11083 = add i64 %11082, 40
  %11084 = add i64 %11072, 16
  store i64 %11084, i64* %3, align 8
  %11085 = inttoptr i64 %11083 to i64*
  %11086 = load i64, i64* %11085, align 8
  store i64 %11086, i64* %RDX.i4411.pre-phi, align 8
  %11087 = add i64 %11086, 6396
  %11088 = add i64 %11072, 22
  store i64 %11088, i64* %3, align 8
  %11089 = inttoptr i64 %11087 to i32*
  %11090 = load i32, i32* %11089, align 4
  %11091 = zext i32 %11090 to i64
  store i64 %11091, i64* %RSI.i4407.pre-phi, align 8
  %11092 = add i64 %11073, -628
  %11093 = add i64 %11072, 28
  store i64 %11093, i64* %3, align 8
  %11094 = inttoptr i64 %11092 to i32*
  store i32 4, i32* %11094, align 4
  %11095 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %11096 = zext i32 %11095 to i64
  %11097 = load i64, i64* %3, align 8
  store i64 %11096, i64* %RAX.i186, align 8
  %11098 = sext i32 %11095 to i64
  %11099 = lshr i64 %11098, 32
  store i64 %11099, i64* %.pre-phi499, align 8
  %11100 = load i64, i64* %RBP.i, align 8
  %11101 = add i64 %11100, -628
  %11102 = add i64 %11097, 9
  store i64 %11102, i64* %3, align 8
  %11103 = inttoptr i64 %11101 to i32*
  %11104 = load i32, i32* %11103, align 4
  %11105 = zext i32 %11104 to i64
  store i64 %11105, i64* %RSI.i4407.pre-phi, align 8
  %11106 = add i64 %11097, 11
  store i64 %11106, i64* %3, align 8
  %11107 = sext i32 %11104 to i64
  %11108 = shl nuw i64 %11099, 32
  %11109 = or i64 %11108, %11096
  %11110 = sdiv i64 %11109, %11107
  %11111 = shl i64 %11110, 32
  %11112 = ashr exact i64 %11111, 32
  %11113 = icmp eq i64 %11110, %11112
  br i1 %11113, label %11116, label %11114

; <label>:11114:                                  ; preds = %block_.L_45201a
  %11115 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11106, %struct.Memory* %MEMORY.50)
  %.pre300 = load i32, i32* %EAX.i304, align 4
  %.pre301 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit337

; <label>:11116:                                  ; preds = %block_.L_45201a
  %11117 = srem i64 %11109, %11107
  %11118 = and i64 %11110, 4294967295
  store i64 %11118, i64* %RAX.i186, align 8
  %11119 = and i64 %11117, 4294967295
  store i64 %11119, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11120 = trunc i64 %11110 to i32
  br label %routine_idivl__esi.exit337

routine_idivl__esi.exit337:                       ; preds = %11116, %11114
  %11121 = phi i64 [ %.pre301, %11114 ], [ %11106, %11116 ]
  %11122 = phi i32 [ %.pre300, %11114 ], [ %11120, %11116 ]
  %11123 = phi %struct.Memory* [ %11115, %11114 ], [ %MEMORY.50, %11116 ]
  %11124 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %11125 = sub i32 %11124, %11122
  %11126 = icmp ult i32 %11124, %11122
  %11127 = zext i1 %11126 to i8
  store i8 %11127, i8* %14, align 1
  %11128 = and i32 %11125, 255
  %11129 = tail call i32 @llvm.ctpop.i32(i32 %11128)
  %11130 = trunc i32 %11129 to i8
  %11131 = and i8 %11130, 1
  %11132 = xor i8 %11131, 1
  store i8 %11132, i8* %21, align 1
  %11133 = xor i32 %11122, %11124
  %11134 = xor i32 %11133, %11125
  %11135 = lshr i32 %11134, 4
  %11136 = trunc i32 %11135 to i8
  %11137 = and i8 %11136, 1
  store i8 %11137, i8* %27, align 1
  %11138 = icmp eq i32 %11125, 0
  %11139 = zext i1 %11138 to i8
  store i8 %11139, i8* %30, align 1
  %11140 = lshr i32 %11125, 31
  %11141 = trunc i32 %11140 to i8
  store i8 %11141, i8* %33, align 1
  %11142 = lshr i32 %11124, 31
  %11143 = lshr i32 %11122, 31
  %11144 = xor i32 %11143, %11142
  %11145 = xor i32 %11140, %11142
  %11146 = add nuw nsw i32 %11145, %11144
  %11147 = icmp eq i32 %11146, 2
  %11148 = zext i1 %11147 to i8
  store i8 %11148, i8* %39, align 1
  %11149 = icmp ne i8 %11141, 0
  %11150 = xor i1 %11149, %11147
  %.v535 = select i1 %11150, i64 8, i64 126
  %11151 = add i64 %11121, %.v535
  store i64 %11151, i64* %3, align 8
  br i1 %11150, label %block_452049, label %block_.L_4520bf

block_452049:                                     ; preds = %routine_idivl__esi.exit337
  %11152 = load i64, i64* %RBP.i, align 8
  %11153 = add i64 %11152, -12
  %11154 = add i64 %11151, 7
  store i64 %11154, i64* %3, align 8
  %11155 = inttoptr i64 %11153 to i32*
  store i32 0, i32* %11155, align 4
  %.pre324 = load i64, i64* %3, align 8
  br label %block_.L_452050

block_.L_452050:                                  ; preds = %block_45207f, %block_452049
  %11156 = phi i64 [ %.pre324, %block_452049 ], [ %11298, %block_45207f ]
  %MEMORY.51 = phi %struct.Memory* [ %11123, %block_452049 ], [ %11207, %block_45207f ]
  store i64 4, i64* %RAX.i186, align 8
  %11157 = load i64, i64* %RBP.i, align 8
  %11158 = add i64 %11157, -12
  %11159 = add i64 %11156, 8
  store i64 %11159, i64* %3, align 8
  %11160 = inttoptr i64 %11158 to i32*
  %11161 = load i32, i32* %11160, align 4
  %11162 = zext i32 %11161 to i64
  store i64 %11162, i64* %RCX.i4414.pre-phi, align 8
  %11163 = add i64 %11157, -8
  %11164 = add i64 %11156, 12
  store i64 %11164, i64* %3, align 8
  %11165 = inttoptr i64 %11163 to i64*
  %11166 = load i64, i64* %11165, align 8
  store i64 %11166, i64* %RDX.i4411.pre-phi, align 8
  %11167 = add i64 %11166, 40
  %11168 = add i64 %11156, 16
  store i64 %11168, i64* %3, align 8
  %11169 = inttoptr i64 %11167 to i64*
  %11170 = load i64, i64* %11169, align 8
  store i64 %11170, i64* %RDX.i4411.pre-phi, align 8
  %11171 = add i64 %11170, 6392
  %11172 = add i64 %11156, 22
  store i64 %11172, i64* %3, align 8
  %11173 = inttoptr i64 %11171 to i32*
  %11174 = load i32, i32* %11173, align 4
  %11175 = zext i32 %11174 to i64
  store i64 %11175, i64* %RSI.i4407.pre-phi, align 8
  %11176 = add i64 %11157, -632
  %11177 = add i64 %11156, 28
  store i64 %11177, i64* %3, align 8
  %11178 = inttoptr i64 %11176 to i32*
  store i32 4, i32* %11178, align 4
  %11179 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %11180 = zext i32 %11179 to i64
  %11181 = load i64, i64* %3, align 8
  store i64 %11180, i64* %RAX.i186, align 8
  %11182 = sext i32 %11179 to i64
  %11183 = lshr i64 %11182, 32
  store i64 %11183, i64* %.pre-phi499, align 8
  %11184 = load i64, i64* %RBP.i, align 8
  %11185 = add i64 %11184, -632
  %11186 = add i64 %11181, 9
  store i64 %11186, i64* %3, align 8
  %11187 = inttoptr i64 %11185 to i32*
  %11188 = load i32, i32* %11187, align 4
  %11189 = zext i32 %11188 to i64
  store i64 %11189, i64* %RSI.i4407.pre-phi, align 8
  %11190 = add i64 %11181, 11
  store i64 %11190, i64* %3, align 8
  %11191 = sext i32 %11188 to i64
  %11192 = shl nuw i64 %11183, 32
  %11193 = or i64 %11192, %11180
  %11194 = sdiv i64 %11193, %11191
  %11195 = shl i64 %11194, 32
  %11196 = ashr exact i64 %11195, 32
  %11197 = icmp eq i64 %11194, %11196
  br i1 %11197, label %11200, label %11198

; <label>:11198:                                  ; preds = %block_.L_452050
  %11199 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11190, %struct.Memory* %MEMORY.51)
  %.pre325 = load i32, i32* %EAX.i304, align 4
  %.pre326 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit302

; <label>:11200:                                  ; preds = %block_.L_452050
  %11201 = srem i64 %11193, %11191
  %11202 = and i64 %11194, 4294967295
  store i64 %11202, i64* %RAX.i186, align 8
  %11203 = and i64 %11201, 4294967295
  store i64 %11203, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11204 = trunc i64 %11194 to i32
  br label %routine_idivl__esi.exit302

routine_idivl__esi.exit302:                       ; preds = %11200, %11198
  %11205 = phi i64 [ %.pre326, %11198 ], [ %11190, %11200 ]
  %11206 = phi i32 [ %.pre325, %11198 ], [ %11204, %11200 ]
  %11207 = phi %struct.Memory* [ %11199, %11198 ], [ %MEMORY.51, %11200 ]
  %11208 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %11209 = sub i32 %11208, %11206
  %11210 = icmp ult i32 %11208, %11206
  %11211 = zext i1 %11210 to i8
  store i8 %11211, i8* %14, align 1
  %11212 = and i32 %11209, 255
  %11213 = tail call i32 @llvm.ctpop.i32(i32 %11212)
  %11214 = trunc i32 %11213 to i8
  %11215 = and i8 %11214, 1
  %11216 = xor i8 %11215, 1
  store i8 %11216, i8* %21, align 1
  %11217 = xor i32 %11206, %11208
  %11218 = xor i32 %11217, %11209
  %11219 = lshr i32 %11218, 4
  %11220 = trunc i32 %11219 to i8
  %11221 = and i8 %11220, 1
  store i8 %11221, i8* %27, align 1
  %11222 = icmp eq i32 %11209, 0
  %11223 = zext i1 %11222 to i8
  store i8 %11223, i8* %30, align 1
  %11224 = lshr i32 %11209, 31
  %11225 = trunc i32 %11224 to i8
  store i8 %11225, i8* %33, align 1
  %11226 = lshr i32 %11208, 31
  %11227 = lshr i32 %11206, 31
  %11228 = xor i32 %11227, %11226
  %11229 = xor i32 %11224, %11226
  %11230 = add nuw nsw i32 %11229, %11228
  %11231 = icmp eq i32 %11230, 2
  %11232 = zext i1 %11231 to i8
  store i8 %11232, i8* %39, align 1
  %11233 = icmp ne i8 %11225, 0
  %11234 = xor i1 %11233, %11231
  %.v541 = select i1 %11234, i64 8, i64 53
  %11235 = add i64 %11205, %.v541
  store i64 %11235, i64* %3, align 8
  %11236 = load i64, i64* %RBP.i, align 8
  br i1 %11234, label %block_45207f, label %block_.L_4520ac

block_45207f:                                     ; preds = %routine_idivl__esi.exit302
  %11237 = add i64 %11236, -8
  %11238 = add i64 %11235, 4
  store i64 %11238, i64* %3, align 8
  %11239 = inttoptr i64 %11237 to i64*
  %11240 = load i64, i64* %11239, align 8
  store i64 %11240, i64* %RAX.i186, align 8
  %11241 = add i64 %11240, 40
  %11242 = add i64 %11235, 8
  store i64 %11242, i64* %3, align 8
  %11243 = inttoptr i64 %11241 to i64*
  %11244 = load i64, i64* %11243, align 8
  store i64 %11244, i64* %RAX.i186, align 8
  %11245 = add i64 %11244, 6520
  %11246 = add i64 %11235, 15
  store i64 %11246, i64* %3, align 8
  %11247 = inttoptr i64 %11245 to i64*
  %11248 = load i64, i64* %11247, align 8
  store i64 %11248, i64* %RAX.i186, align 8
  %11249 = add i64 %11236, -12
  %11250 = add i64 %11235, 19
  store i64 %11250, i64* %3, align 8
  %11251 = inttoptr i64 %11249 to i32*
  %11252 = load i32, i32* %11251, align 4
  %11253 = sext i32 %11252 to i64
  store i64 %11253, i64* %RCX.i4414.pre-phi, align 8
  %11254 = shl nsw i64 %11253, 3
  %11255 = add i64 %11254, %11248
  %11256 = add i64 %11235, 23
  store i64 %11256, i64* %3, align 8
  %11257 = inttoptr i64 %11255 to i64*
  %11258 = load i64, i64* %11257, align 8
  store i64 %11258, i64* %RAX.i186, align 8
  %11259 = add i64 %11236, -16
  %11260 = add i64 %11235, 27
  store i64 %11260, i64* %3, align 8
  %11261 = inttoptr i64 %11259 to i32*
  %11262 = load i32, i32* %11261, align 4
  %11263 = sext i32 %11262 to i64
  store i64 %11263, i64* %RCX.i4414.pre-phi, align 8
  %11264 = add i64 %11258, %11263
  %11265 = add i64 %11235, 31
  store i64 %11265, i64* %3, align 8
  %11266 = inttoptr i64 %11264 to i8*
  store i8 0, i8* %11266, align 1
  %11267 = load i64, i64* %RBP.i, align 8
  %11268 = add i64 %11267, -12
  %11269 = load i64, i64* %3, align 8
  %11270 = add i64 %11269, 3
  store i64 %11270, i64* %3, align 8
  %11271 = inttoptr i64 %11268 to i32*
  %11272 = load i32, i32* %11271, align 4
  %11273 = add i32 %11272, 1
  %11274 = zext i32 %11273 to i64
  store i64 %11274, i64* %RAX.i186, align 8
  %11275 = icmp eq i32 %11272, -1
  %11276 = icmp eq i32 %11273, 0
  %11277 = or i1 %11275, %11276
  %11278 = zext i1 %11277 to i8
  store i8 %11278, i8* %14, align 1
  %11279 = and i32 %11273, 255
  %11280 = tail call i32 @llvm.ctpop.i32(i32 %11279)
  %11281 = trunc i32 %11280 to i8
  %11282 = and i8 %11281, 1
  %11283 = xor i8 %11282, 1
  store i8 %11283, i8* %21, align 1
  %11284 = xor i32 %11273, %11272
  %11285 = lshr i32 %11284, 4
  %11286 = trunc i32 %11285 to i8
  %11287 = and i8 %11286, 1
  store i8 %11287, i8* %27, align 1
  %11288 = zext i1 %11276 to i8
  store i8 %11288, i8* %30, align 1
  %11289 = lshr i32 %11273, 31
  %11290 = trunc i32 %11289 to i8
  store i8 %11290, i8* %33, align 1
  %11291 = lshr i32 %11272, 31
  %11292 = xor i32 %11289, %11291
  %11293 = add nuw nsw i32 %11292, %11289
  %11294 = icmp eq i32 %11293, 2
  %11295 = zext i1 %11294 to i8
  store i8 %11295, i8* %39, align 1
  %11296 = add i64 %11269, 9
  store i64 %11296, i64* %3, align 8
  store i32 %11273, i32* %11271, align 4
  %11297 = load i64, i64* %3, align 8
  %11298 = add i64 %11297, -87
  store i64 %11298, i64* %3, align 8
  br label %block_.L_452050

block_.L_4520ac:                                  ; preds = %routine_idivl__esi.exit302
  %11299 = add i64 %11236, -16
  %11300 = add i64 %11235, 8
  store i64 %11300, i64* %3, align 8
  %11301 = inttoptr i64 %11299 to i32*
  %11302 = load i32, i32* %11301, align 4
  %11303 = add i32 %11302, 1
  %11304 = zext i32 %11303 to i64
  store i64 %11304, i64* %RAX.i186, align 8
  %11305 = icmp eq i32 %11302, -1
  %11306 = icmp eq i32 %11303, 0
  %11307 = or i1 %11305, %11306
  %11308 = zext i1 %11307 to i8
  store i8 %11308, i8* %14, align 1
  %11309 = and i32 %11303, 255
  %11310 = tail call i32 @llvm.ctpop.i32(i32 %11309)
  %11311 = trunc i32 %11310 to i8
  %11312 = and i8 %11311, 1
  %11313 = xor i8 %11312, 1
  store i8 %11313, i8* %21, align 1
  %11314 = xor i32 %11303, %11302
  %11315 = lshr i32 %11314, 4
  %11316 = trunc i32 %11315 to i8
  %11317 = and i8 %11316, 1
  store i8 %11317, i8* %27, align 1
  %11318 = zext i1 %11306 to i8
  store i8 %11318, i8* %30, align 1
  %11319 = lshr i32 %11303, 31
  %11320 = trunc i32 %11319 to i8
  store i8 %11320, i8* %33, align 1
  %11321 = lshr i32 %11302, 31
  %11322 = xor i32 %11319, %11321
  %11323 = add nuw nsw i32 %11322, %11319
  %11324 = icmp eq i32 %11323, 2
  %11325 = zext i1 %11324 to i8
  store i8 %11325, i8* %39, align 1
  %11326 = add i64 %11235, 14
  store i64 %11326, i64* %3, align 8
  store i32 %11303, i32* %11301, align 4
  %11327 = load i64, i64* %3, align 8
  %11328 = add i64 %11327, -160
  store i64 %11328, i64* %3, align 8
  br label %block_.L_45201a

block_.L_4520bf:                                  ; preds = %routine_idivl__esi.exit337
  %11329 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %11329, i64* %RAX.i186, align 8
  %11330 = add i64 %11329, 1148
  %11331 = add i64 %11151, 15
  store i64 %11331, i64* %3, align 8
  %11332 = inttoptr i64 %11330 to i32*
  %11333 = load i32, i32* %11332, align 4
  store i8 0, i8* %14, align 1
  %11334 = and i32 %11333, 255
  %11335 = tail call i32 @llvm.ctpop.i32(i32 %11334)
  %11336 = trunc i32 %11335 to i8
  %11337 = and i8 %11336, 1
  %11338 = xor i8 %11337, 1
  store i8 %11338, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11339 = icmp eq i32 %11333, 0
  %11340 = zext i1 %11339 to i8
  store i8 %11340, i8* %30, align 1
  %11341 = lshr i32 %11333, 31
  %11342 = trunc i32 %11341 to i8
  store i8 %11342, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v536 = select i1 %11339, i64 42, i64 21
  %11343 = add i64 %11151, %.v536
  store i64 %11343, i64* %3, align 8
  br i1 %11339, label %block_.L_4520e9, label %block_4520d4

block_4520d4:                                     ; preds = %block_.L_4520bf
  store i64 %11329, i64* %RAX.i186, align 8
  %11344 = add i64 %11329, 1156
  %11345 = add i64 %11343, 15
  store i64 %11345, i64* %3, align 8
  %11346 = inttoptr i64 %11344 to i32*
  %11347 = load i32, i32* %11346, align 4
  store i8 0, i8* %14, align 1
  %11348 = and i32 %11347, 255
  %11349 = tail call i32 @llvm.ctpop.i32(i32 %11348)
  %11350 = trunc i32 %11349 to i8
  %11351 = and i8 %11350, 1
  %11352 = xor i8 %11351, 1
  store i8 %11352, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11353 = icmp eq i32 %11347, 0
  %11354 = zext i1 %11353 to i8
  store i8 %11354, i8* %30, align 1
  %11355 = lshr i32 %11347, 31
  %11356 = trunc i32 %11355 to i8
  store i8 %11356, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v537 = select i1 %11353, i64 399, i64 21
  %11357 = add i64 %11343, %.v537
  store i64 %11357, i64* %3, align 8
  br i1 %11353, label %block_.L_452263, label %block_.L_4520e9

block_.L_4520e9:                                  ; preds = %block_4520d4, %block_.L_4520bf
  %11358 = phi i64 [ %11357, %block_4520d4 ], [ %11343, %block_.L_4520bf ]
  %11359 = load i64, i64* %RBP.i, align 8
  %11360 = add i64 %11359, -16
  %11361 = add i64 %11358, 7
  store i64 %11361, i64* %3, align 8
  %11362 = inttoptr i64 %11360 to i32*
  store i32 0, i32* %11362, align 4
  %CL.i41 = bitcast %union.anon* %.pre-phi to i8*
  %.pre302 = load i64, i64* %3, align 8
  br label %block_.L_4520f0

block_.L_4520f0:                                  ; preds = %block_.L_45224b, %block_.L_4520e9
  %11363 = phi i64 [ %.pre302, %block_.L_4520e9 ], [ %11970, %block_.L_45224b ]
  %MEMORY.53 = phi %struct.Memory* [ %11123, %block_.L_4520e9 ], [ %11498, %block_.L_45224b ]
  store i64 4, i64* %RAX.i186, align 8
  %11364 = load i64, i64* %RBP.i, align 8
  %11365 = add i64 %11364, -16
  %11366 = add i64 %11363, 8
  store i64 %11366, i64* %3, align 8
  %11367 = inttoptr i64 %11365 to i32*
  %11368 = load i32, i32* %11367, align 4
  %11369 = zext i32 %11368 to i64
  store i64 %11369, i64* %RCX.i4414.pre-phi, align 8
  %11370 = add i64 %11364, -8
  %11371 = add i64 %11363, 12
  store i64 %11371, i64* %3, align 8
  %11372 = inttoptr i64 %11370 to i64*
  %11373 = load i64, i64* %11372, align 8
  store i64 %11373, i64* %RDX.i4411.pre-phi, align 8
  %11374 = add i64 %11373, 40
  %11375 = add i64 %11363, 16
  store i64 %11375, i64* %3, align 8
  %11376 = inttoptr i64 %11374 to i64*
  %11377 = load i64, i64* %11376, align 8
  store i64 %11377, i64* %RDX.i4411.pre-phi, align 8
  %11378 = add i64 %11377, 6396
  %11379 = add i64 %11363, 22
  store i64 %11379, i64* %3, align 8
  %11380 = inttoptr i64 %11378 to i32*
  %11381 = load i32, i32* %11380, align 4
  %11382 = zext i32 %11381 to i64
  store i64 %11382, i64* %RSI.i4407.pre-phi, align 8
  %11383 = add i64 %11364, -636
  %11384 = add i64 %11363, 28
  store i64 %11384, i64* %3, align 8
  %11385 = inttoptr i64 %11383 to i32*
  store i32 4, i32* %11385, align 4
  %11386 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %11387 = zext i32 %11386 to i64
  %11388 = load i64, i64* %3, align 8
  store i64 %11387, i64* %RAX.i186, align 8
  %11389 = sext i32 %11386 to i64
  %11390 = lshr i64 %11389, 32
  store i64 %11390, i64* %.pre-phi499, align 8
  %11391 = load i64, i64* %RBP.i, align 8
  %11392 = add i64 %11391, -636
  %11393 = add i64 %11388, 9
  store i64 %11393, i64* %3, align 8
  %11394 = inttoptr i64 %11392 to i32*
  %11395 = load i32, i32* %11394, align 4
  %11396 = zext i32 %11395 to i64
  store i64 %11396, i64* %RSI.i4407.pre-phi, align 8
  %11397 = add i64 %11388, 11
  store i64 %11397, i64* %3, align 8
  %11398 = sext i32 %11395 to i64
  %11399 = shl nuw i64 %11390, 32
  %11400 = or i64 %11399, %11387
  %11401 = sdiv i64 %11400, %11398
  %11402 = shl i64 %11401, 32
  %11403 = ashr exact i64 %11402, 32
  %11404 = icmp eq i64 %11401, %11403
  br i1 %11404, label %11407, label %11405

; <label>:11405:                                  ; preds = %block_.L_4520f0
  %11406 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11397, %struct.Memory* %MEMORY.53)
  %.pre303 = load i32, i32* %EAX.i304, align 4
  %.pre304 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit219

; <label>:11407:                                  ; preds = %block_.L_4520f0
  %11408 = srem i64 %11400, %11398
  %11409 = and i64 %11401, 4294967295
  store i64 %11409, i64* %RAX.i186, align 8
  %11410 = and i64 %11408, 4294967295
  store i64 %11410, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11411 = trunc i64 %11401 to i32
  br label %routine_idivl__esi.exit219

routine_idivl__esi.exit219:                       ; preds = %11407, %11405
  %11412 = phi i64 [ %.pre304, %11405 ], [ %11397, %11407 ]
  %11413 = phi i32 [ %.pre303, %11405 ], [ %11411, %11407 ]
  %11414 = phi %struct.Memory* [ %11406, %11405 ], [ %MEMORY.53, %11407 ]
  %11415 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %11416 = sub i32 %11415, %11413
  %11417 = icmp ult i32 %11415, %11413
  %11418 = zext i1 %11417 to i8
  store i8 %11418, i8* %14, align 1
  %11419 = and i32 %11416, 255
  %11420 = tail call i32 @llvm.ctpop.i32(i32 %11419)
  %11421 = trunc i32 %11420 to i8
  %11422 = and i8 %11421, 1
  %11423 = xor i8 %11422, 1
  store i8 %11423, i8* %21, align 1
  %11424 = xor i32 %11413, %11415
  %11425 = xor i32 %11424, %11416
  %11426 = lshr i32 %11425, 4
  %11427 = trunc i32 %11426 to i8
  %11428 = and i8 %11427, 1
  store i8 %11428, i8* %27, align 1
  %11429 = icmp eq i32 %11416, 0
  %11430 = zext i1 %11429 to i8
  store i8 %11430, i8* %30, align 1
  %11431 = lshr i32 %11416, 31
  %11432 = trunc i32 %11431 to i8
  store i8 %11432, i8* %33, align 1
  %11433 = lshr i32 %11415, 31
  %11434 = lshr i32 %11413, 31
  %11435 = xor i32 %11434, %11433
  %11436 = xor i32 %11431, %11433
  %11437 = add nuw nsw i32 %11436, %11435
  %11438 = icmp eq i32 %11437, 2
  %11439 = zext i1 %11438 to i8
  store i8 %11439, i8* %39, align 1
  %11440 = icmp ne i8 %11432, 0
  %11441 = xor i1 %11440, %11438
  %.v538 = select i1 %11441, i64 8, i64 327
  %11442 = add i64 %11412, %.v538
  store i64 %11442, i64* %3, align 8
  br i1 %11441, label %block_45211f, label %block_.L_45225e

block_45211f:                                     ; preds = %routine_idivl__esi.exit219
  %11443 = load i64, i64* %RBP.i, align 8
  %11444 = add i64 %11443, -12
  %11445 = add i64 %11442, 7
  store i64 %11445, i64* %3, align 8
  %11446 = inttoptr i64 %11444 to i32*
  store i32 0, i32* %11446, align 4
  %.pre305 = load i64, i64* %3, align 8
  br label %block_.L_452126

block_.L_452126:                                  ; preds = %block_.L_452217, %block_45211f
  %11447 = phi i64 [ %.pre305, %block_45211f ], [ %11939, %block_.L_452217 ]
  %MEMORY.54 = phi %struct.Memory* [ %11414, %block_45211f ], [ %11785, %block_.L_452217 ]
  store i64 4, i64* %RAX.i186, align 8
  %11448 = load i64, i64* %RBP.i, align 8
  %11449 = add i64 %11448, -12
  %11450 = add i64 %11447, 8
  store i64 %11450, i64* %3, align 8
  %11451 = inttoptr i64 %11449 to i32*
  %11452 = load i32, i32* %11451, align 4
  %11453 = zext i32 %11452 to i64
  store i64 %11453, i64* %RCX.i4414.pre-phi, align 8
  %11454 = add i64 %11448, -8
  %11455 = add i64 %11447, 12
  store i64 %11455, i64* %3, align 8
  %11456 = inttoptr i64 %11454 to i64*
  %11457 = load i64, i64* %11456, align 8
  store i64 %11457, i64* %RDX.i4411.pre-phi, align 8
  %11458 = add i64 %11457, 40
  %11459 = add i64 %11447, 16
  store i64 %11459, i64* %3, align 8
  %11460 = inttoptr i64 %11458 to i64*
  %11461 = load i64, i64* %11460, align 8
  store i64 %11461, i64* %RDX.i4411.pre-phi, align 8
  %11462 = add i64 %11461, 6392
  %11463 = add i64 %11447, 22
  store i64 %11463, i64* %3, align 8
  %11464 = inttoptr i64 %11462 to i32*
  %11465 = load i32, i32* %11464, align 4
  %11466 = zext i32 %11465 to i64
  store i64 %11466, i64* %RSI.i4407.pre-phi, align 8
  %11467 = add i64 %11448, -640
  %11468 = add i64 %11447, 28
  store i64 %11468, i64* %3, align 8
  %11469 = inttoptr i64 %11467 to i32*
  store i32 4, i32* %11469, align 4
  %11470 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %11471 = zext i32 %11470 to i64
  %11472 = load i64, i64* %3, align 8
  store i64 %11471, i64* %RAX.i186, align 8
  %11473 = sext i32 %11470 to i64
  %11474 = lshr i64 %11473, 32
  store i64 %11474, i64* %.pre-phi499, align 8
  %11475 = load i64, i64* %RBP.i, align 8
  %11476 = add i64 %11475, -640
  %11477 = add i64 %11472, 9
  store i64 %11477, i64* %3, align 8
  %11478 = inttoptr i64 %11476 to i32*
  %11479 = load i32, i32* %11478, align 4
  %11480 = zext i32 %11479 to i64
  store i64 %11480, i64* %RSI.i4407.pre-phi, align 8
  %11481 = add i64 %11472, 11
  store i64 %11481, i64* %3, align 8
  %11482 = sext i32 %11479 to i64
  %11483 = shl nuw i64 %11474, 32
  %11484 = or i64 %11483, %11471
  %11485 = sdiv i64 %11484, %11482
  %11486 = shl i64 %11485, 32
  %11487 = ashr exact i64 %11486, 32
  %11488 = icmp eq i64 %11485, %11487
  br i1 %11488, label %11491, label %11489

; <label>:11489:                                  ; preds = %block_.L_452126
  %11490 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11481, %struct.Memory* %MEMORY.54)
  %.pre306 = load i32, i32* %EAX.i304, align 4
  %.pre307 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit184

; <label>:11491:                                  ; preds = %block_.L_452126
  %11492 = srem i64 %11484, %11482
  %11493 = and i64 %11485, 4294967295
  store i64 %11493, i64* %RAX.i186, align 8
  %11494 = and i64 %11492, 4294967295
  store i64 %11494, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11495 = trunc i64 %11485 to i32
  br label %routine_idivl__esi.exit184

routine_idivl__esi.exit184:                       ; preds = %11491, %11489
  %11496 = phi i64 [ %.pre307, %11489 ], [ %11481, %11491 ]
  %11497 = phi i32 [ %.pre306, %11489 ], [ %11495, %11491 ]
  %11498 = phi %struct.Memory* [ %11490, %11489 ], [ %MEMORY.54, %11491 ]
  %11499 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %11500 = sub i32 %11499, %11497
  %11501 = icmp ult i32 %11499, %11497
  %11502 = zext i1 %11501 to i8
  store i8 %11502, i8* %14, align 1
  %11503 = and i32 %11500, 255
  %11504 = tail call i32 @llvm.ctpop.i32(i32 %11503)
  %11505 = trunc i32 %11504 to i8
  %11506 = and i8 %11505, 1
  %11507 = xor i8 %11506, 1
  store i8 %11507, i8* %21, align 1
  %11508 = xor i32 %11497, %11499
  %11509 = xor i32 %11508, %11500
  %11510 = lshr i32 %11509, 4
  %11511 = trunc i32 %11510 to i8
  %11512 = and i8 %11511, 1
  store i8 %11512, i8* %27, align 1
  %11513 = icmp eq i32 %11500, 0
  %11514 = zext i1 %11513 to i8
  store i8 %11514, i8* %30, align 1
  %11515 = lshr i32 %11500, 31
  %11516 = trunc i32 %11515 to i8
  store i8 %11516, i8* %33, align 1
  %11517 = lshr i32 %11499, 31
  %11518 = lshr i32 %11497, 31
  %11519 = xor i32 %11518, %11517
  %11520 = xor i32 %11515, %11517
  %11521 = add nuw nsw i32 %11520, %11519
  %11522 = icmp eq i32 %11521, 2
  %11523 = zext i1 %11522 to i8
  store i8 %11523, i8* %39, align 1
  %11524 = icmp ne i8 %11516, 0
  %11525 = xor i1 %11524, %11522
  %.v539 = select i1 %11525, i64 8, i64 254
  %11526 = add i64 %11496, %.v539
  %11527 = add i64 %11526, 5
  store i64 %11527, i64* %3, align 8
  br i1 %11525, label %block_452155, label %block_.L_45224b

block_452155:                                     ; preds = %routine_idivl__esi.exit184
  store i64 2, i64* %RAX.i186, align 8
  store i64 16, i64* %RCX.i4414.pre-phi, align 8
  store i64 4, i64* %RDX.i4411.pre-phi, align 8
  %11528 = load i64, i64* %RBP.i, align 8
  %11529 = add i64 %11528, -12
  %11530 = add i64 %11526, 18
  store i64 %11530, i64* %3, align 8
  %11531 = inttoptr i64 %11529 to i32*
  %11532 = load i32, i32* %11531, align 4
  %11533 = zext i32 %11532 to i64
  store i64 %11533, i64* %RSI.i4407.pre-phi, align 8
  %11534 = add i64 %11528, -644
  %11535 = add i64 %11526, 24
  store i64 %11535, i64* %3, align 8
  %11536 = inttoptr i64 %11534 to i32*
  store i32 2, i32* %11536, align 4
  %11537 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %11538 = zext i32 %11537 to i64
  %11539 = load i64, i64* %3, align 8
  store i64 %11538, i64* %RAX.i186, align 8
  %11540 = load i64, i64* %RBP.i, align 8
  %11541 = add i64 %11540, -648
  %11542 = load i32, i32* %.pre-phi501, align 4
  %11543 = add i64 %11539, 8
  store i64 %11543, i64* %3, align 8
  %11544 = inttoptr i64 %11541 to i32*
  store i32 %11542, i32* %11544, align 4
  %11545 = load i64, i64* %3, align 8
  %11546 = load i32, i32* %EAX.i304, align 8
  %11547 = sext i32 %11546 to i64
  %11548 = lshr i64 %11547, 32
  store i64 %11548, i64* %.pre-phi499, align 8
  %11549 = load i64, i64* %RBP.i, align 8
  %11550 = add i64 %11549, -648
  %11551 = add i64 %11545, 7
  store i64 %11551, i64* %3, align 8
  %11552 = inttoptr i64 %11550 to i32*
  %11553 = load i32, i32* %11552, align 4
  %11554 = zext i32 %11553 to i64
  store i64 %11554, i64* %RSI.i4407.pre-phi, align 8
  %11555 = add i64 %11545, 9
  store i64 %11555, i64* %3, align 8
  %11556 = zext i32 %11546 to i64
  %11557 = sext i32 %11553 to i64
  %11558 = shl nuw i64 %11548, 32
  %11559 = or i64 %11558, %11556
  %11560 = sdiv i64 %11559, %11557
  %11561 = shl i64 %11560, 32
  %11562 = ashr exact i64 %11561, 32
  %11563 = icmp eq i64 %11560, %11562
  br i1 %11563, label %11566, label %11564

; <label>:11564:                                  ; preds = %block_452155
  %11565 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11555, %struct.Memory* %11498)
  %.pre308 = load i64, i64* %RBP.i, align 8
  %.pre309 = load i32, i32* %EAX.i304, align 4
  %.pre310 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit153

; <label>:11566:                                  ; preds = %block_452155
  %11567 = srem i64 %11559, %11557
  %11568 = and i64 %11560, 4294967295
  store i64 %11568, i64* %RAX.i186, align 8
  %11569 = and i64 %11567, 4294967295
  store i64 %11569, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11570 = trunc i64 %11560 to i32
  br label %routine_idivl__esi.exit153

routine_idivl__esi.exit153:                       ; preds = %11566, %11564
  %11571 = phi i64 [ %.pre310, %11564 ], [ %11555, %11566 ]
  %11572 = phi i32 [ %.pre309, %11564 ], [ %11570, %11566 ]
  %11573 = phi i64 [ %.pre308, %11564 ], [ %11549, %11566 ]
  %11574 = phi %struct.Memory* [ %11565, %11564 ], [ %11498, %11566 ]
  %11575 = add i64 %11573, -68
  %11576 = add i64 %11571, 3
  store i64 %11576, i64* %3, align 8
  %11577 = inttoptr i64 %11575 to i32*
  store i32 %11572, i32* %11577, align 4
  %11578 = load i64, i64* %RBP.i, align 8
  %11579 = add i64 %11578, -16
  %11580 = load i64, i64* %3, align 8
  %11581 = add i64 %11580, 3
  store i64 %11581, i64* %3, align 8
  %11582 = inttoptr i64 %11579 to i32*
  %11583 = load i32, i32* %11582, align 4
  %11584 = zext i32 %11583 to i64
  store i64 %11584, i64* %RAX.i186, align 8
  %11585 = sext i32 %11583 to i64
  %11586 = lshr i64 %11585, 32
  store i64 %11586, i64* %.pre-phi499, align 8
  %11587 = load i32, i32* %ESI.i4400.pre-phi, align 4
  %11588 = add i64 %11580, 6
  store i64 %11588, i64* %3, align 8
  %11589 = sext i32 %11587 to i64
  %11590 = shl nuw i64 %11586, 32
  %11591 = or i64 %11590, %11584
  %11592 = sdiv i64 %11591, %11589
  %11593 = shl i64 %11592, 32
  %11594 = ashr exact i64 %11593, 32
  %11595 = icmp eq i64 %11592, %11594
  br i1 %11595, label %11598, label %11596

; <label>:11596:                                  ; preds = %routine_idivl__esi.exit153
  %11597 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11588, %struct.Memory* %11574)
  %.pre311 = load i64, i64* %RBP.i, align 8
  %.pre312 = load i32, i32* %EAX.i304, align 4
  %.pre313 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit

; <label>:11598:                                  ; preds = %routine_idivl__esi.exit153
  %11599 = srem i64 %11591, %11589
  %11600 = and i64 %11592, 4294967295
  store i64 %11600, i64* %RAX.i186, align 8
  %11601 = and i64 %11599, 4294967295
  store i64 %11601, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11602 = trunc i64 %11592 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %11598, %11596
  %11603 = phi i64 [ %.pre313, %11596 ], [ %11588, %11598 ]
  %11604 = phi i32 [ %.pre312, %11596 ], [ %11602, %11598 ]
  %11605 = phi i64 [ %.pre311, %11596 ], [ %11578, %11598 ]
  %11606 = phi %struct.Memory* [ %11597, %11596 ], [ %11574, %11598 ]
  %11607 = add i64 %11605, -72
  %11608 = add i64 %11603, 3
  store i64 %11608, i64* %3, align 8
  %11609 = inttoptr i64 %11607 to i32*
  store i32 %11604, i32* %11609, align 4
  %11610 = load i64, i64* %RBP.i, align 8
  %11611 = add i64 %11610, -8
  %11612 = load i64, i64* %3, align 8
  %11613 = add i64 %11612, 4
  store i64 %11613, i64* %3, align 8
  %11614 = inttoptr i64 %11611 to i64*
  %11615 = load i64, i64* %11614, align 8
  store i64 %11615, i64* %RDI.i126, align 8
  %11616 = add i64 %11615, 40
  %11617 = add i64 %11612, 8
  store i64 %11617, i64* %3, align 8
  %11618 = inttoptr i64 %11616 to i64*
  %11619 = load i64, i64* %11618, align 8
  store i64 %11619, i64* %RDI.i126, align 8
  %11620 = add i64 %11619, 6392
  %11621 = add i64 %11612, 14
  store i64 %11621, i64* %3, align 8
  %11622 = inttoptr i64 %11620 to i32*
  %11623 = load i32, i32* %11622, align 4
  %11624 = zext i32 %11623 to i64
  store i64 %11624, i64* %RAX.i186, align 8
  %11625 = sext i32 %11623 to i64
  %11626 = lshr i64 %11625, 32
  store i64 %11626, i64* %.pre-phi499, align 8
  %11627 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %11628 = add i64 %11612, 17
  store i64 %11628, i64* %3, align 8
  %11629 = sext i32 %11627 to i64
  %11630 = shl nuw i64 %11626, 32
  %11631 = or i64 %11630, %11624
  %11632 = sdiv i64 %11631, %11629
  %11633 = shl i64 %11632, 32
  %11634 = ashr exact i64 %11633, 32
  %11635 = icmp eq i64 %11632, %11634
  br i1 %11635, label %11638, label %11636

; <label>:11636:                                  ; preds = %routine_idivl__esi.exit
  %11637 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11628, %struct.Memory* %11606)
  %.pre314 = load i64, i64* %RAX.i186, align 8
  %.pre315 = load i64, i64* %3, align 8
  %.pre316 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit124

; <label>:11638:                                  ; preds = %routine_idivl__esi.exit
  %11639 = srem i64 %11631, %11629
  %11640 = and i64 %11632, 4294967295
  store i64 %11640, i64* %RAX.i186, align 8
  %11641 = and i64 %11639, 4294967295
  store i64 %11641, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  br label %routine_idivl__ecx.exit124

routine_idivl__ecx.exit124:                       ; preds = %11638, %11636
  %11642 = phi i64 [ %.pre316, %11636 ], [ %11610, %11638 ]
  %11643 = phi i64 [ %.pre315, %11636 ], [ %11628, %11638 ]
  %11644 = phi i64 [ %.pre314, %11636 ], [ %11640, %11638 ]
  %11645 = phi %struct.Memory* [ %11637, %11636 ], [ %11606, %11638 ]
  %11646 = trunc i64 %11644 to i32
  %11647 = shl i32 %11646, 1
  %11648 = icmp slt i32 %11646, 0
  %11649 = icmp slt i32 %11647, 0
  %11650 = xor i1 %11648, %11649
  %11651 = zext i32 %11647 to i64
  store i64 %11651, i64* %RAX.i186, align 8
  %.lobit175 = lshr i32 %11646, 31
  %11652 = trunc i32 %.lobit175 to i8
  store i8 %11652, i8* %14, align 1
  %11653 = and i32 %11647, 254
  %11654 = tail call i32 @llvm.ctpop.i32(i32 %11653)
  %11655 = trunc i32 %11654 to i8
  %11656 = and i8 %11655, 1
  %11657 = xor i8 %11656, 1
  store i8 %11657, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11658 = icmp eq i32 %11647, 0
  %11659 = zext i1 %11658 to i8
  store i8 %11659, i8* %30, align 1
  %11660 = lshr i32 %11646, 30
  %11661 = trunc i32 %11660 to i8
  %11662 = and i8 %11661, 1
  store i8 %11662, i8* %33, align 1
  %11663 = zext i1 %11650 to i8
  store i8 %11663, i8* %39, align 1
  %11664 = add i64 %11642, -72
  %11665 = add i64 %11643, 5
  store i64 %11665, i64* %3, align 8
  %11666 = inttoptr i64 %11664 to i32*
  %11667 = load i32, i32* %11666, align 4
  %11668 = zext i32 %11667 to i64
  store i64 %11668, i64* %RCX.i4414.pre-phi, align 8
  %11669 = add i64 %11642, -652
  %11670 = add i64 %11643, 11
  store i64 %11670, i64* %3, align 8
  %11671 = inttoptr i64 %11669 to i32*
  store i32 %11647, i32* %11671, align 4
  %11672 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %11673 = zext i32 %11672 to i64
  %11674 = load i64, i64* %3, align 8
  store i64 %11673, i64* %RAX.i186, align 8
  %11675 = sext i32 %11672 to i64
  %11676 = lshr i64 %11675, 32
  store i64 %11676, i64* %.pre-phi499, align 8
  %11677 = load i64, i64* %RBP.i, align 8
  %11678 = add i64 %11677, -644
  %11679 = add i64 %11674, 9
  store i64 %11679, i64* %3, align 8
  %11680 = inttoptr i64 %11678 to i32*
  %11681 = load i32, i32* %11680, align 4
  %11682 = zext i32 %11681 to i64
  store i64 %11682, i64* %RCX.i4414.pre-phi, align 8
  %11683 = add i64 %11674, 11
  store i64 %11683, i64* %3, align 8
  %11684 = sext i32 %11681 to i64
  %11685 = shl nuw i64 %11676, 32
  %11686 = or i64 %11685, %11673
  %11687 = sdiv i64 %11686, %11684
  %11688 = shl i64 %11687, 32
  %11689 = ashr exact i64 %11688, 32
  %11690 = icmp eq i64 %11687, %11689
  br i1 %11690, label %11693, label %11691

; <label>:11691:                                  ; preds = %routine_idivl__ecx.exit124
  %11692 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11683, %struct.Memory* %11645)
  %.pre317 = load i64, i64* %RBP.i, align 8
  %.pre318 = load i64, i64* %3, align 8
  %.pre319 = load i32, i32* %EAX.i304, align 4
  br label %routine_idivl__ecx.exit104

; <label>:11693:                                  ; preds = %routine_idivl__ecx.exit124
  %11694 = srem i64 %11686, %11684
  %11695 = and i64 %11687, 4294967295
  store i64 %11695, i64* %RAX.i186, align 8
  %11696 = and i64 %11694, 4294967295
  store i64 %11696, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11697 = trunc i64 %11687 to i32
  br label %routine_idivl__ecx.exit104

routine_idivl__ecx.exit104:                       ; preds = %11693, %11691
  %11698 = phi i32 [ %.pre319, %11691 ], [ %11697, %11693 ]
  %11699 = phi i64 [ %.pre318, %11691 ], [ %11683, %11693 ]
  %11700 = phi i64 [ %.pre317, %11691 ], [ %11677, %11693 ]
  %11701 = phi %struct.Memory* [ %11692, %11691 ], [ %11645, %11693 ]
  %11702 = add i64 %11700, -652
  %11703 = add i64 %11699, 7
  store i64 %11703, i64* %3, align 8
  %11704 = inttoptr i64 %11702 to i32*
  %11705 = load i32, i32* %11704, align 4
  %11706 = sext i32 %11705 to i64
  %11707 = sext i32 %11698 to i64
  %11708 = mul nsw i64 %11707, %11706
  %11709 = trunc i64 %11708 to i32
  %11710 = and i64 %11708, 4294967295
  store i64 %11710, i64* %.pre-phi507, align 8
  %11711 = shl i64 %11708, 32
  %11712 = ashr exact i64 %11711, 32
  %11713 = icmp ne i64 %11712, %11708
  %11714 = zext i1 %11713 to i8
  store i8 %11714, i8* %14, align 1
  %11715 = and i32 %11709, 255
  %11716 = tail call i32 @llvm.ctpop.i32(i32 %11715)
  %11717 = trunc i32 %11716 to i8
  %11718 = and i8 %11717, 1
  %11719 = xor i8 %11718, 1
  store i8 %11719, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  %11720 = lshr i32 %11709, 31
  %11721 = trunc i32 %11720 to i8
  store i8 %11721, i8* %33, align 1
  store i8 %11714, i8* %39, align 1
  %11722 = add i64 %11700, -68
  %11723 = add i64 %11699, 14
  store i64 %11723, i64* %3, align 8
  %11724 = inttoptr i64 %11722 to i32*
  %11725 = load i32, i32* %11724, align 4
  %11726 = shl i32 %11725, 1
  %11727 = zext i32 %11726 to i64
  store i64 %11727, i64* %RAX.i186, align 8
  %11728 = trunc i64 %11708 to i32
  %11729 = add i32 %11726, %11728
  %11730 = zext i32 %11729 to i64
  store i64 %11730, i64* %.pre-phi507, align 8
  %11731 = icmp ult i32 %11729, %11728
  %11732 = icmp ult i32 %11729, %11726
  %11733 = or i1 %11731, %11732
  %11734 = zext i1 %11733 to i8
  store i8 %11734, i8* %14, align 1
  %11735 = and i32 %11729, 255
  %11736 = tail call i32 @llvm.ctpop.i32(i32 %11735)
  %11737 = trunc i32 %11736 to i8
  %11738 = and i8 %11737, 1
  %11739 = xor i8 %11738, 1
  store i8 %11739, i8* %21, align 1
  %11740 = xor i32 %11726, %11728
  %11741 = xor i32 %11740, %11729
  %11742 = lshr i32 %11741, 4
  %11743 = trunc i32 %11742 to i8
  %11744 = and i8 %11743, 1
  store i8 %11744, i8* %27, align 1
  %11745 = icmp eq i32 %11729, 0
  %11746 = zext i1 %11745 to i8
  store i8 %11746, i8* %30, align 1
  %11747 = lshr i32 %11729, 31
  %11748 = trunc i32 %11747 to i8
  store i8 %11748, i8* %33, align 1
  %11749 = lshr i32 %11728, 31
  %11750 = lshr i32 %11725, 30
  %11751 = and i32 %11750, 1
  %11752 = xor i32 %11747, %11749
  %11753 = xor i32 %11747, %11751
  %11754 = add nuw nsw i32 %11752, %11753
  %11755 = icmp eq i32 %11754, 2
  %11756 = zext i1 %11755 to i8
  store i8 %11756, i8* %39, align 1
  %11757 = load i64, i64* %RBP.i, align 8
  %11758 = add i64 %11757, -72
  %11759 = add i64 %11699, 22
  store i64 %11759, i64* %3, align 8
  %11760 = inttoptr i64 %11758 to i32*
  %11761 = load i32, i32* %11760, align 4
  %11762 = zext i32 %11761 to i64
  store i64 %11762, i64* %RAX.i186, align 8
  %11763 = sext i32 %11761 to i64
  %11764 = lshr i64 %11763, 32
  store i64 %11764, i64* %.pre-phi499, align 8
  %11765 = load i32, i32* %ECX.i4390.pre-phi, align 4
  %11766 = add i64 %11699, 25
  store i64 %11766, i64* %3, align 8
  %11767 = sext i32 %11765 to i64
  %11768 = shl nuw i64 %11764, 32
  %11769 = or i64 %11768, %11762
  %11770 = sdiv i64 %11769, %11767
  %11771 = shl i64 %11770, 32
  %11772 = ashr exact i64 %11771, 32
  %11773 = icmp eq i64 %11770, %11772
  br i1 %11773, label %11776, label %11774

; <label>:11774:                                  ; preds = %routine_idivl__ecx.exit104
  %11775 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11766, %struct.Memory* %11701)
  %.pre320 = load i32, i32* %R8D.i4270.pre-phi, align 4
  %.pre321 = load i32, i32* %.pre-phi501, align 4
  %.pre322 = load i64, i64* %3, align 8
  %.pre323 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit

; <label>:11776:                                  ; preds = %routine_idivl__ecx.exit104
  %11777 = srem i64 %11769, %11767
  %11778 = and i64 %11770, 4294967295
  store i64 %11778, i64* %RAX.i186, align 8
  %11779 = and i64 %11777, 4294967295
  store i64 %11779, i64* %RDX.i4411.pre-phi, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %27, align 1
  store i8 0, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %11780 = trunc i64 %11777 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %11776, %11774
  %11781 = phi i64 [ %.pre323, %11774 ], [ %11757, %11776 ]
  %11782 = phi i64 [ %.pre322, %11774 ], [ %11766, %11776 ]
  %11783 = phi i32 [ %.pre321, %11774 ], [ %11780, %11776 ]
  %11784 = phi i32 [ %.pre320, %11774 ], [ %11729, %11776 ]
  %11785 = phi %struct.Memory* [ %11775, %11774 ], [ %11701, %11776 ]
  %11786 = add i32 %11783, %11784
  %11787 = zext i32 %11786 to i64
  store i64 %11787, i64* %.pre-phi507, align 8
  %11788 = icmp ult i32 %11786, %11784
  %11789 = icmp ult i32 %11786, %11783
  %11790 = or i1 %11788, %11789
  %11791 = zext i1 %11790 to i8
  store i8 %11791, i8* %14, align 1
  %11792 = and i32 %11786, 255
  %11793 = tail call i32 @llvm.ctpop.i32(i32 %11792)
  %11794 = trunc i32 %11793 to i8
  %11795 = and i8 %11794, 1
  %11796 = xor i8 %11795, 1
  store i8 %11796, i8* %21, align 1
  %11797 = xor i32 %11783, %11784
  %11798 = xor i32 %11797, %11786
  %11799 = lshr i32 %11798, 4
  %11800 = trunc i32 %11799 to i8
  %11801 = and i8 %11800, 1
  store i8 %11801, i8* %27, align 1
  %11802 = icmp eq i32 %11786, 0
  %11803 = zext i1 %11802 to i8
  store i8 %11803, i8* %30, align 1
  %11804 = lshr i32 %11786, 31
  %11805 = trunc i32 %11804 to i8
  store i8 %11805, i8* %33, align 1
  %11806 = lshr i32 %11784, 31
  %11807 = lshr i32 %11783, 31
  %11808 = xor i32 %11804, %11806
  %11809 = xor i32 %11804, %11807
  %11810 = add nuw nsw i32 %11808, %11809
  %11811 = icmp eq i32 %11810, 2
  %11812 = zext i1 %11811 to i8
  store i8 %11812, i8* %39, align 1
  %11813 = add i64 %11781, -76
  %11814 = add i64 %11782, 7
  store i64 %11814, i64* %3, align 8
  %11815 = inttoptr i64 %11813 to i32*
  store i32 %11786, i32* %11815, align 4
  %11816 = load i64, i64* %RBP.i, align 8
  %11817 = add i64 %11816, -8
  %11818 = load i64, i64* %3, align 8
  %11819 = add i64 %11818, 4
  store i64 %11819, i64* %3, align 8
  %11820 = inttoptr i64 %11817 to i64*
  %11821 = load i64, i64* %11820, align 8
  store i64 %11821, i64* %RDI.i126, align 8
  %11822 = add i64 %11821, 40
  %11823 = add i64 %11818, 8
  store i64 %11823, i64* %3, align 8
  %11824 = inttoptr i64 %11822 to i64*
  %11825 = load i64, i64* %11824, align 8
  store i64 %11825, i64* %RDI.i126, align 8
  %11826 = add i64 %11825, 6416
  %11827 = add i64 %11818, 15
  store i64 %11827, i64* %3, align 8
  %11828 = inttoptr i64 %11826 to i32*
  %11829 = load i32, i32* %11828, align 4
  store i8 0, i8* %14, align 1
  %11830 = and i32 %11829, 255
  %11831 = tail call i32 @llvm.ctpop.i32(i32 %11830)
  %11832 = trunc i32 %11831 to i8
  %11833 = and i8 %11832, 1
  %11834 = xor i8 %11833, 1
  store i8 %11834, i8* %21, align 1
  store i8 0, i8* %27, align 1
  %11835 = icmp eq i32 %11829, 0
  %11836 = zext i1 %11835 to i8
  store i8 %11836, i8* %30, align 1
  %11837 = lshr i32 %11829, 31
  %11838 = trunc i32 %11837 to i8
  store i8 %11838, i8* %33, align 1
  store i8 0, i8* %39, align 1
  %.v540 = select i1 %11835, i64 55, i64 21
  %11839 = add i64 %11818, %.v540
  store i64 %11839, i64* %3, align 8
  br i1 %11835, label %block_.L_45220a, label %block_4521e8

block_4521e8:                                     ; preds = %routine_idivl__ecx.exit
  %11840 = add i64 %11839, 4
  store i64 %11840, i64* %3, align 8
  %11841 = load i64, i64* %11820, align 8
  store i64 %11841, i64* %RAX.i186, align 8
  %11842 = add i64 %11841, 40
  %11843 = add i64 %11839, 8
  store i64 %11843, i64* %3, align 8
  %11844 = inttoptr i64 %11842 to i64*
  %11845 = load i64, i64* %11844, align 8
  store i64 %11845, i64* %RAX.i186, align 8
  %11846 = add i64 %11845, 6472
  %11847 = add i64 %11839, 15
  store i64 %11847, i64* %3, align 8
  %11848 = inttoptr i64 %11846 to i64*
  %11849 = load i64, i64* %11848, align 8
  store i64 %11849, i64* %RAX.i186, align 8
  %11850 = add i64 %11816, -76
  %11851 = add i64 %11839, 19
  store i64 %11851, i64* %3, align 8
  %11852 = inttoptr i64 %11850 to i32*
  %11853 = load i32, i32* %11852, align 4
  %11854 = sext i32 %11853 to i64
  store i64 %11854, i64* %RCX.i4414.pre-phi, align 8
  %11855 = add i64 %11849, %11854
  %11856 = add i64 %11839, 23
  store i64 %11856, i64* %3, align 8
  %11857 = inttoptr i64 %11855 to i8*
  %11858 = load i8, i8* %11857, align 1
  %11859 = zext i8 %11858 to i64
  store i64 %11859, i64* %RDX.i4411.pre-phi, align 8
  %11860 = add i64 %11816, -656
  %11861 = zext i8 %11858 to i32
  %11862 = add i64 %11839, 29
  store i64 %11862, i64* %3, align 8
  %11863 = inttoptr i64 %11860 to i32*
  store i32 %11861, i32* %11863, align 4
  %11864 = load i64, i64* %3, align 8
  %11865 = add i64 %11864, 18
  br label %block_.L_452217

block_.L_45220a:                                  ; preds = %routine_idivl__ecx.exit
  store i64 0, i64* %RAX.i186, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %30, align 1
  store i8 0, i8* %33, align 1
  store i8 0, i8* %39, align 1
  store i8 0, i8* %27, align 1
  %11866 = add i64 %11816, -656
  %11867 = add i64 %11839, 8
  store i64 %11867, i64* %3, align 8
  %11868 = inttoptr i64 %11866 to i32*
  store i32 0, i32* %11868, align 4
  %11869 = load i64, i64* %3, align 8
  %11870 = add i64 %11869, 5
  store i64 %11870, i64* %3, align 8
  br label %block_.L_452217

block_.L_452217:                                  ; preds = %block_.L_45220a, %block_4521e8
  %storemerge177 = phi i64 [ %11865, %block_4521e8 ], [ %11870, %block_.L_45220a ]
  %11871 = load i64, i64* %RBP.i, align 8
  %11872 = add i64 %11871, -656
  %11873 = add i64 %storemerge177, 6
  store i64 %11873, i64* %3, align 8
  %11874 = inttoptr i64 %11872 to i32*
  %11875 = load i32, i32* %11874, align 4
  %11876 = zext i32 %11875 to i64
  store i64 %11876, i64* %RAX.i186, align 8
  %11877 = trunc i32 %11875 to i8
  store i8 %11877, i8* %CL.i41, align 1
  %11878 = add i64 %11871, -8
  %11879 = add i64 %storemerge177, 12
  store i64 %11879, i64* %3, align 8
  %11880 = inttoptr i64 %11878 to i64*
  %11881 = load i64, i64* %11880, align 8
  store i64 %11881, i64* %RDX.i4411.pre-phi, align 8
  %11882 = add i64 %11881, 40
  %11883 = add i64 %storemerge177, 16
  store i64 %11883, i64* %3, align 8
  %11884 = inttoptr i64 %11882 to i64*
  %11885 = load i64, i64* %11884, align 8
  store i64 %11885, i64* %RDX.i4411.pre-phi, align 8
  %11886 = add i64 %11885, 6520
  %11887 = add i64 %storemerge177, 23
  store i64 %11887, i64* %3, align 8
  %11888 = inttoptr i64 %11886 to i64*
  %11889 = load i64, i64* %11888, align 8
  store i64 %11889, i64* %RDX.i4411.pre-phi, align 8
  %11890 = add i64 %11871, -12
  %11891 = add i64 %storemerge177, 27
  store i64 %11891, i64* %3, align 8
  %11892 = inttoptr i64 %11890 to i32*
  %11893 = load i32, i32* %11892, align 4
  %11894 = sext i32 %11893 to i64
  store i64 %11894, i64* %RSI.i4407.pre-phi, align 8
  %11895 = shl nsw i64 %11894, 3
  %11896 = add i64 %11895, %11889
  %11897 = add i64 %storemerge177, 31
  store i64 %11897, i64* %3, align 8
  %11898 = inttoptr i64 %11896 to i64*
  %11899 = load i64, i64* %11898, align 8
  store i64 %11899, i64* %RDX.i4411.pre-phi, align 8
  %11900 = add i64 %11871, -16
  %11901 = add i64 %storemerge177, 35
  store i64 %11901, i64* %3, align 8
  %11902 = inttoptr i64 %11900 to i32*
  %11903 = load i32, i32* %11902, align 4
  %11904 = sext i32 %11903 to i64
  store i64 %11904, i64* %RSI.i4407.pre-phi, align 8
  %11905 = add i64 %11899, %11904
  %11906 = add i64 %storemerge177, 38
  store i64 %11906, i64* %3, align 8
  %11907 = inttoptr i64 %11905 to i8*
  store i8 %11877, i8* %11907, align 1
  %11908 = load i64, i64* %RBP.i, align 8
  %11909 = add i64 %11908, -12
  %11910 = load i64, i64* %3, align 8
  %11911 = add i64 %11910, 3
  store i64 %11911, i64* %3, align 8
  %11912 = inttoptr i64 %11909 to i32*
  %11913 = load i32, i32* %11912, align 4
  %11914 = add i32 %11913, 1
  %11915 = zext i32 %11914 to i64
  store i64 %11915, i64* %RAX.i186, align 8
  %11916 = icmp eq i32 %11913, -1
  %11917 = icmp eq i32 %11914, 0
  %11918 = or i1 %11916, %11917
  %11919 = zext i1 %11918 to i8
  store i8 %11919, i8* %14, align 1
  %11920 = and i32 %11914, 255
  %11921 = tail call i32 @llvm.ctpop.i32(i32 %11920)
  %11922 = trunc i32 %11921 to i8
  %11923 = and i8 %11922, 1
  %11924 = xor i8 %11923, 1
  store i8 %11924, i8* %21, align 1
  %11925 = xor i32 %11914, %11913
  %11926 = lshr i32 %11925, 4
  %11927 = trunc i32 %11926 to i8
  %11928 = and i8 %11927, 1
  store i8 %11928, i8* %27, align 1
  %11929 = zext i1 %11917 to i8
  store i8 %11929, i8* %30, align 1
  %11930 = lshr i32 %11914, 31
  %11931 = trunc i32 %11930 to i8
  store i8 %11931, i8* %33, align 1
  %11932 = lshr i32 %11913, 31
  %11933 = xor i32 %11930, %11932
  %11934 = add nuw nsw i32 %11933, %11930
  %11935 = icmp eq i32 %11934, 2
  %11936 = zext i1 %11935 to i8
  store i8 %11936, i8* %39, align 1
  %11937 = add i64 %11910, 9
  store i64 %11937, i64* %3, align 8
  store i32 %11914, i32* %11912, align 4
  %11938 = load i64, i64* %3, align 8
  %11939 = add i64 %11938, -288
  store i64 %11939, i64* %3, align 8
  br label %block_.L_452126

block_.L_45224b:                                  ; preds = %routine_idivl__esi.exit184
  %11940 = load i64, i64* %RBP.i, align 8
  %11941 = add i64 %11940, -16
  %11942 = add i64 %11526, 8
  store i64 %11942, i64* %3, align 8
  %11943 = inttoptr i64 %11941 to i32*
  %11944 = load i32, i32* %11943, align 4
  %11945 = add i32 %11944, 1
  %11946 = zext i32 %11945 to i64
  store i64 %11946, i64* %RAX.i186, align 8
  %11947 = icmp eq i32 %11944, -1
  %11948 = icmp eq i32 %11945, 0
  %11949 = or i1 %11947, %11948
  %11950 = zext i1 %11949 to i8
  store i8 %11950, i8* %14, align 1
  %11951 = and i32 %11945, 255
  %11952 = tail call i32 @llvm.ctpop.i32(i32 %11951)
  %11953 = trunc i32 %11952 to i8
  %11954 = and i8 %11953, 1
  %11955 = xor i8 %11954, 1
  store i8 %11955, i8* %21, align 1
  %11956 = xor i32 %11945, %11944
  %11957 = lshr i32 %11956, 4
  %11958 = trunc i32 %11957 to i8
  %11959 = and i8 %11958, 1
  store i8 %11959, i8* %27, align 1
  %11960 = zext i1 %11948 to i8
  store i8 %11960, i8* %30, align 1
  %11961 = lshr i32 %11945, 31
  %11962 = trunc i32 %11961 to i8
  store i8 %11962, i8* %33, align 1
  %11963 = lshr i32 %11944, 31
  %11964 = xor i32 %11961, %11963
  %11965 = add nuw nsw i32 %11964, %11961
  %11966 = icmp eq i32 %11965, 2
  %11967 = zext i1 %11966 to i8
  store i8 %11967, i8* %39, align 1
  %11968 = add i64 %11526, 14
  store i64 %11968, i64* %3, align 8
  store i32 %11945, i32* %11943, align 4
  %11969 = load i64, i64* %3, align 8
  %11970 = add i64 %11969, -361
  store i64 %11970, i64* %3, align 8
  br label %block_.L_4520f0

block_.L_45225e:                                  ; preds = %routine_idivl__esi.exit219
  %11971 = add i64 %11442, 5
  store i64 %11971, i64* %3, align 8
  br label %block_.L_452263

block_.L_452263:                                  ; preds = %block_.L_45225e, %block_4520d4
  %11972 = phi i64 [ %11971, %block_.L_45225e ], [ %11357, %block_4520d4 ]
  %MEMORY.56 = phi %struct.Memory* [ %11414, %block_.L_45225e ], [ %11123, %block_4520d4 ]
  %11973 = load i64, i64* %6, align 8
  %11974 = add i64 %11973, 656
  store i64 %11974, i64* %6, align 8
  %11975 = icmp ugt i64 %11973, -657
  %11976 = zext i1 %11975 to i8
  store i8 %11976, i8* %14, align 1
  %11977 = trunc i64 %11974 to i32
  %11978 = and i32 %11977, 255
  %11979 = tail call i32 @llvm.ctpop.i32(i32 %11978)
  %11980 = trunc i32 %11979 to i8
  %11981 = and i8 %11980, 1
  %11982 = xor i8 %11981, 1
  store i8 %11982, i8* %21, align 1
  %11983 = xor i64 %11973, 16
  %11984 = xor i64 %11983, %11974
  %11985 = lshr i64 %11984, 4
  %11986 = trunc i64 %11985 to i8
  %11987 = and i8 %11986, 1
  store i8 %11987, i8* %27, align 1
  %11988 = icmp eq i64 %11974, 0
  %11989 = zext i1 %11988 to i8
  store i8 %11989, i8* %30, align 1
  %11990 = lshr i64 %11974, 63
  %11991 = trunc i64 %11990 to i8
  store i8 %11991, i8* %33, align 1
  %11992 = lshr i64 %11973, 63
  %11993 = xor i64 %11990, %11992
  %11994 = add nuw nsw i64 %11993, %11990
  %11995 = icmp eq i64 %11994, 2
  %11996 = zext i1 %11995 to i8
  store i8 %11996, i8* %39, align 1
  %11997 = add i64 %11972, 8
  store i64 %11997, i64* %3, align 8
  %11998 = add i64 %11973, 664
  %11999 = inttoptr i64 %11974 to i64*
  %12000 = load i64, i64* %11999, align 8
  store i64 %12000, i64* %RBP.i, align 8
  store i64 %11998, i64* %6, align 8
  %12001 = add i64 %11972, 9
  store i64 %12001, i64* %3, align 8
  %12002 = inttoptr i64 %11998 to i64*
  %12003 = load i64, i64* %12002, align 8
  store i64 %12003, i64* %3, align 8
  %12004 = add i64 %11973, 672
  store i64 %12004, i64* %6, align 8
  ret %struct.Memory* %MEMORY.56
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x290___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -656
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 656
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rdi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x24__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RDI, align 8
  %5 = add i64 %4, 36
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x199c__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_450739(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rcx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18fc__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__r8d(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %R8D, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1900__rcx____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__r9____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1904__r9____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %R9, align 8
  %5 = add i64 %4, 6404
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %R10D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %R10D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.alloc_storable_picture(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x30__r9_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18fc__rax____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1900__r9____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 6400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1904__r9____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %R9, align 8
  %5 = add i64 %4, 6404
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x58__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x38__r9_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18fc__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_450056(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x30__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1918__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1918__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x18f8__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x1___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 1
  %7 = icmp slt i64 %3, 0
  %8 = icmp slt i64 %6, 0
  %9 = xor i1 %7, %8
  store i64 %6, i64* %RSI, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i64 %3, 63
  %11 = trunc i64 %.lobit to i8
  store i8 %11, i8* %10, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = trunc i64 %6 to i32
  %14 = and i32 %13, 254
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %12, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i64 %6, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %3, 62
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %28 = zext i1 %9 to i8
  store i8 %28, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x68__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memcpy_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_44ffc6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1904__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_45014e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1940__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1940__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RCX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x1900__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x78__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i32 %5, 1
  %9 = icmp slt i32 %5, 0
  %10 = icmp slt i32 %8, 0
  %11 = xor i1 %9, %10
  %12 = zext i32 %8 to i64
  store i64 %12, i64* %4, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %5, 31
  %14 = trunc i32 %.lobit to i8
  store i8 %14, i8* %13, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %16 = and i32 %8, 254
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* %15, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %23 = icmp eq i32 %8, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %22, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = lshr i32 %5, 30
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %25, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %30 = zext i1 %11 to i8
  store i8 %30, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__r8d___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x1900__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x1___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 1
  %7 = icmp slt i64 %3, 0
  %8 = icmp slt i64 %6, 0
  %9 = xor i1 %7, %8
  store i64 %6, i64* %RDX, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i64 %3, 63
  %11 = trunc i64 %.lobit to i8
  store i8 %11, i8* %10, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = trunc i64 %6 to i32
  %14 = and i32 %13, 254
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %12, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i64 %6, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %3, 62
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %28 = zext i1 %9 to i8
  store i8 %28, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45005d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -124
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x7c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -124
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4501ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x38__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x88__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450155(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -140
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4502f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x98__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 1
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp eq i32 %5, -1
  %11 = icmp eq i32 %8, 0
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %8, %5
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = zext i1 %11 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %28
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4501f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x30__rax____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.UnifiedOneForthPix(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x38__rax____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x10__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 16
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0xc__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 12
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x8__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18ec__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x18ec__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 6380
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18e8__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x18e8__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 6376
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18e4__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6372
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x18e4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 6372
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x1c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 28
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__0x190c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6412
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1910__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x1910__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 6416
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x1980__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6528
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x1988__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6536
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x30__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x1990__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6544
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x38__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1998__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6552
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x1998__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 6552
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x199c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_450734(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x7247b4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x7247b4_type* @G_0x7247b4 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_450642(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x330__rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 816
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x30__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x120__rdx__rsi_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 288
  %7 = add i64 %6, %5
  %8 = load i64, i64* %RAX, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 8
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i64*
  store i64 %8, i64* %11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x540__rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 1344
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x38__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450550(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x7247b0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x7247b0_type* @G_0x7247b0 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_45072f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x228__rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 552
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0x18__rdx__rsi_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 24
  %7 = add i64 %6, %5
  %8 = load i64, i64* %RAX, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 5
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i64*
  store i64 %8, i64* %11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x438__rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 1080
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450649(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450734(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450777(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__0x30__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__0x38__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__0x1980__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 11
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__0x1988__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 11
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x9c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -156
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x9c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_450c3b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -160
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_450c28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x10___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 16, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -164
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -168
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rdi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -172
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xac__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -172
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R8D, align 4
  %7 = load i32, i32* %EAX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = sext i32 %6 to i64
  %11 = sext i32 %7 to i64
  %12 = mul nsw i64 %11, %10
  %13 = trunc i64 %12 to i32
  %14 = and i64 %12, 4294967295
  store i64 %14, i64* %5, align 8
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = icmp ne i64 %16, %12
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1
  %28 = lshr i32 %13, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %18, i8* %31, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R8D, align 4
  %7 = load i32, i32* %EAX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = add i32 %7, %6
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %5, align 8
  %12 = icmp ult i32 %10, %6
  %13 = icmp ult i32 %10, %7
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %7, %6
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %6, 31
  %36 = lshr i32 %7, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R8D, align 4
  %7 = load i32, i32* %EDX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = add i32 %7, %6
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %5, align 8
  %12 = icmp ult i32 %10, %6
  %13 = icmp ult i32 %10, %7
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %7, %6
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %6, 31
  %36 = lshr i32 %7, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x1910__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_450b00(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1948__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6472
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x24__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl___rax__rcx_1____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -176
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovnel__ecx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 0
  %11 = load i64, i64* %RSI, align 8
  %12 = select i1 %10, i64 %5, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = bitcast i64* %RDI to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdi__r8_8____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rdi__r8_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rdi____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_450947(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x18___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 24
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -25
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RCX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x108___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 264
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450957(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xb8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1960__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax____rcx__rsi_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %RAX, align 8
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %6 to i64*
  store i64 %7, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_4509c7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4509d7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xc0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_450a49(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x648___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 1608
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -1609
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450a59(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xc8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax____rcx__rdx_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %RAX, align 8
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %6 to i64*
  store i64 %7, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_450ac1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450ad1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450c15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rax__rcx_2____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_450b72(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x18__rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 24
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450b85(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xffffffffffffffff___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  store i64 -1, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_450bd8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x120__rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 288
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450beb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xe0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450c1a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4507b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450c2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45077e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_450c65(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x722cb0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x484__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451500(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4514fb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4514e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -236
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -240
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xec__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__edi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__r8____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -244
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -244
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = sext i32 %5 to i64
  %11 = mul nsw i64 %10, %9
  %12 = trunc i64 %11 to i32
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %RCX, align 8
  %14 = shl i64 %11, 32
  %15 = ashr exact i64 %14, 32
  %16 = icmp ne i64 %15, %11
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1
  %27 = lshr i32 %12, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x1910__r8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 6416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4514d5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x30__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1978__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x1____rcx__rdx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  store i8 1, i8* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x38__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -248
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 3
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 29
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 248
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 28
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xfc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -252
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RDI, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x4___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp ugt i32 %6, -5
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edi___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__r8_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rcx____r9w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %R9W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r9w____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %R9W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x100__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -256
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x100__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rcx____r9w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R9W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r9w__0x2__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %R9W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x104__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -260
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x104__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x108__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -264
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x108__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x10c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -268
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x10c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -268
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rcx__r8_2____r9w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i16*
  %11 = load i16, i16* %10, align 2
  store i16 %11, i16* %R9W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r9w____rcx__r8_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %R9W, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 5
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x110__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x110__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x20__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x114__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -276
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x114__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -276
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x38__r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1960__r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 6496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = bitcast i64* %R8 to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___r8__r10_8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx____r8__r10_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %RCX, align 8
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %6 to i64*
  store i64 %7, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x118__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -280
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x118__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x11c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -284
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x11c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -284
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -288
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x120__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x124__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -292
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x124__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -296
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x128__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x12c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -300
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x12c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -300
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x130__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -304
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x130__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x10__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x134__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -308
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x134__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -308
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x30__r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x18__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x138__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -312
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x138__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4514da(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450ca2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4514ed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_450c6c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451500(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x13c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -316
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x13c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -316
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_452013(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x140__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -320
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x140__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -320
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_452000(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x144__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -324
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x148__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -328
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x148__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -328
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x144__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -324
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -332
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -332
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -64
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451619(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x40__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpb__0x0____rax__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = zext i8 %9 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_451fed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1978__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x0____rax__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  store i8 0, i8* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_451fe8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 2
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %.lobit = lshr exact i32 %7, 1
  %13 = trunc i32 %.lobit to i8
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x158__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -344
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4516f0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = or i64 %3, 1
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %RAX, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %16, align 1
  %17 = lshr i32 %7, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x15c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -348
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4516fc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0xfffffffe___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967294
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 254
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp ult i32 %6, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %6, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x15c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -348
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x158__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -344
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rcx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 2
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %.lobit = lshr exact i32 %7, 1
  %13 = trunc i32 %.lobit to i8
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451737(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x16c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -364
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451743(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x16c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -364
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x168__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rcx____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdi_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x10__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x178__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -376
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4517e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x17c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -380
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4517ec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x17c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x178__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x188__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451827(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -396
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451833(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x188__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rcx____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__0x2__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x198__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -408
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4518d4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x19c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -412
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4518e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x19c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -412
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x198__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -408
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -424
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45191b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -428
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451927(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1ac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -428
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1a8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4519c7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -444
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4519d3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1bc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1b8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -440
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451a0e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -460
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451a1a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1cc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -460
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1c8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -456
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -472
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451abc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -476
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451ac8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1dc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -476
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1d8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -472
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -488
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451b03(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -492
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451b0f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -492
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1e8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -488
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rdx__rcx_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, 1
  %8 = icmp ne i32 %4, -1
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %4, 16
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %4, 31
  %30 = xor i32 %29, 1
  %31 = xor i32 %26, %29
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_451b7c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  store i16 -1, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451d2f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 2
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RCX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %.lobit = lshr exact i32 %7, 1
  %13 = trunc i32 %.lobit to i8
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x1f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -504
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451bb5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -508
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451bc1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1fc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -508
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1f8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x208__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -520
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451bfc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -524
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451c08(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -524
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x208__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rdx__rcx_2____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i16*
  %11 = load i16, i16* %10, align 2
  store i16 %11, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si____rcx__rdi_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %SI, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl__si___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i16, i16* %SI, align 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i16 %4 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_451c93(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xc78__rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 3192
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x218__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451ca3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x218__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x218__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_451cf6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12a8__rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 4776
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x220__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451d06(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x220__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x220__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x228__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -552
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451d69(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x22c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -556
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451d75(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x22c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -556
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x228__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -552
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x238__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -568
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451db0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x23c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -572
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451dbc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x23c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -572
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x238__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -568
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_451e2b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451fe3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x248__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -584
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451e65(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x24c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -588
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451e71(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -588
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x248__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -584
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x258__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -600
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_451eac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x25c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -604
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451eb8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x25c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -604
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x258__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_451f45(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xd80__rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 3456
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x268__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -616
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451f55(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x268__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -616
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x268__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -616
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_451fa9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x13b0__rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %3, 5040
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x270__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451fb9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x270__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x270__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451fe8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451fed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451ff2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45153d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_452005(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_451507(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x274__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -628
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x274__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -628
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4520bf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x278__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -632
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x278__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -632
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4520ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_452050(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4520b1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45201a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x47c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4520e9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_452263(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x27c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -636
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x27c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -636
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_45225e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x280__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -640
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x280__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -640
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_45224b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x284__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -644
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x288__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -648
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x288__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -648
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -68
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -72
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x48__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x28c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -652
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x284__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -644
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28c__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -652
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x44__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x48__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x4c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45220a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x4c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x290__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -656
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_452217(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x290__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -656
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x290__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -656
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al___cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %AL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1978__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl____rdx__rsi_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = add i64 %5, %4
  %7 = load i8, i8* %CL, align 1
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %6 to i8*
  store i8 %7, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_452126(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_452250(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4520f0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_452263(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x290___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 656
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -657
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
