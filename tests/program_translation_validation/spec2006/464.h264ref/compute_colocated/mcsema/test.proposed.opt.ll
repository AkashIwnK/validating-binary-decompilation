; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x70fcf0_type = type <{ [8 x i8] }>
%G_0x722cb0_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x70fcf0 = local_unnamed_addr global %G_0x70fcf0_type zeroinitializer
@G_0x722cb0 = local_unnamed_addr global %G_0x722cb0_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @abs(i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @compute_colocated(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %RBX.i133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %11 = load i64, i64* %RBX.i133, align 8
  %12 = add i64 %10, 4
  store i64 %12, i64* %3, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14, align 8
  %15 = load i64, i64* %3, align 8
  %16 = add i64 %7, -1368
  store i64 %16, i64* %6, align 8
  %17 = icmp ult i64 %13, 1352
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %RDI.i732 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0
  %45 = load i64, i64* %RBP.i, align 8
  %46 = add i64 %45, -16
  %47 = load i64, i64* %RDI.i732, align 8
  %48 = add i64 %15, 11
  store i64 %48, i64* %3, align 8
  %49 = inttoptr i64 %46 to i64*
  store i64 %47, i64* %49, align 8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %RSI.i766 = getelementptr inbounds %union.anon, %union.anon* %50, i64 0, i32 0
  %51 = load i64, i64* %RBP.i, align 8
  %52 = add i64 %51, -24
  %53 = load i64, i64* %RSI.i766, align 8
  %54 = load i64, i64* %3, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %3, align 8
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP.i, align 8
  %58 = add i64 %57, -24
  %59 = load i64, i64* %3, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %3, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RSI.i766, align 8
  %63 = add i64 %62, 8
  %64 = add i64 %59, 8
  store i64 %64, i64* %3, align 8
  %65 = inttoptr i64 %63 to i64*
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %RSI.i766, align 8
  %67 = add i64 %59, 11
  store i64 %67, i64* %3, align 8
  %68 = inttoptr i64 %66 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RSI.i766, align 8
  %70 = add i64 %57, -32
  %71 = add i64 %59, 15
  store i64 %71, i64* %3, align 8
  %72 = inttoptr i64 %70 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP.i, align 8
  %74 = add i64 %73, -48
  %75 = load i64, i64* %RSI.i766, align 8
  %76 = load i64, i64* %3, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %3, align 8
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78, align 8
  %79 = load i64, i64* %RBP.i, align 8
  %80 = add i64 %79, -40
  %81 = load i64, i64* %RSI.i766, align 8
  %82 = load i64, i64* %3, align 8
  %83 = add i64 %82, 4
  store i64 %83, i64* %3, align 8
  %84 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %84, align 8
  %85 = load i64, i64* %3, align 8
  %86 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %86, i64* %RSI.i766, align 8
  %87 = add i64 %86, 72400
  %88 = add i64 %85, 15
  store i64 %88, i64* %3, align 8
  %89 = inttoptr i64 %87 to i32*
  %90 = load i32, i32* %89, align 4
  store i8 0, i8* %19, align 1
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91)
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %96 = icmp eq i32 %90, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %34, align 1
  %98 = lshr i32 %90, 31
  %99 = trunc i32 %98 to i8
  store i8 %99, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v662 = select i1 %96, i64 56, i64 21
  %100 = add i64 %85, %.v662
  store i64 %100, i64* %3, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i3176 = getelementptr inbounds %union.anon, %union.anon* %101, i64 0, i32 0
  br i1 %96, label %block_.L_455653, label %block_455630

block_455630:                                     ; preds = %entry
  %102 = load i64, i64* %RBP.i, align 8
  %103 = add i64 %102, -24
  %104 = add i64 %100, 4
  store i64 %104, i64* %3, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %RAX.i3176, align 8
  %107 = add i64 %106, 24
  %108 = add i64 %100, 8
  store i64 %108, i64* %3, align 8
  %109 = inttoptr i64 %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RAX.i3176, align 8
  %111 = add i64 %100, 11
  store i64 %111, i64* %3, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX.i3176, align 8
  %114 = add i64 %102, -40
  %115 = add i64 %100, 15
  store i64 %115, i64* %3, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP.i, align 8
  %118 = add i64 %117, -24
  %119 = load i64, i64* %3, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %3, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX.i3176, align 8
  %123 = add i64 %122, 40
  %124 = add i64 %119, 8
  store i64 %124, i64* %3, align 8
  %125 = inttoptr i64 %123 to i64*
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %RAX.i3176, align 8
  %127 = add i64 %119, 11
  store i64 %127, i64* %3, align 8
  %128 = inttoptr i64 %126 to i64*
  %129 = load i64, i64* %128, align 8
  store i64 %129, i64* %RAX.i3176, align 8
  %130 = add i64 %117, -48
  %131 = add i64 %119, 15
  store i64 %131, i64* %3, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %129, i64* %132, align 8
  %133 = load i64, i64* %3, align 8
  %134 = add i64 %133, 161
  br label %block_.L_4556ef

block_.L_455653:                                  ; preds = %entry
  store i64 %86, i64* %RAX.i3176, align 8
  %135 = add i64 %86, 28
  %136 = add i64 %100, 12
  store i64 %136, i64* %3, align 8
  %137 = inttoptr i64 %135 to i32*
  %138 = load i32, i32* %137, align 4
  store i8 0, i8* %19, align 1
  %139 = and i32 %138, 255
  %140 = tail call i32 @llvm.ctpop.i32(i32 %139)
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  store i8 %143, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %144 = icmp eq i32 %138, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %34, align 1
  %146 = lshr i32 %138, 31
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v661 = select i1 %144, i64 151, i64 18
  %148 = add i64 %100, %.v661
  store i64 %148, i64* %3, align 8
  br i1 %144, label %block_.L_4556ea, label %block_455665

block_455665:                                     ; preds = %block_.L_455653
  store i64 %86, i64* %RAX.i3176, align 8
  %RCX.i3314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %149 = add i64 %148, 11
  store i64 %149, i64* %3, align 8
  %150 = load i32, i32* %137, align 4
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %RCX.i3314, align 8
  %152 = load i64, i64* %RBP.i, align 8
  %153 = add i64 %152, -32
  %154 = add i64 %148, 15
  store i64 %154, i64* %3, align 8
  %155 = inttoptr i64 %153 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RAX.i3176, align 8
  %157 = add i64 %148, 17
  store i64 %157, i64* %3, align 8
  %158 = inttoptr i64 %156 to i32*
  %159 = load i32, i32* %158, align 4
  %160 = sub i32 %150, %159
  %161 = icmp ult i32 %150, %159
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %19, align 1
  %163 = and i32 %160, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163)
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  store i8 %167, i8* %26, align 1
  %168 = xor i32 %159, %150
  %169 = xor i32 %168, %160
  %170 = lshr i32 %169, 4
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  store i8 %172, i8* %31, align 1
  %173 = icmp eq i32 %160, 0
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %34, align 1
  %175 = lshr i32 %160, 31
  %176 = trunc i32 %175 to i8
  store i8 %176, i8* %37, align 1
  %177 = lshr i32 %150, 31
  %178 = lshr i32 %159, 31
  %179 = xor i32 %178, %177
  %180 = xor i32 %175, %177
  %181 = add nuw nsw i32 %180, %179
  %182 = icmp eq i32 %181, 2
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %43, align 1
  %.v660 = select i1 %173, i64 128, i64 23
  %184 = add i64 %148, %.v660
  store i64 %184, i64* %3, align 8
  br i1 %173, label %block_.L_4556e5, label %block_45567c

block_45567c:                                     ; preds = %block_455665
  %185 = add i64 %184, 4
  store i64 %185, i64* %3, align 8
  %186 = load i64, i64* %155, align 8
  store i64 %186, i64* %RAX.i3176, align 8
  %187 = add i64 %186, 6412
  %188 = add i64 %184, 11
  store i64 %188, i64* %3, align 8
  %189 = inttoptr i64 %187 to i32*
  %190 = load i32, i32* %189, align 4
  store i8 0, i8* %19, align 1
  %191 = and i32 %190, 255
  %192 = tail call i32 @llvm.ctpop.i32(i32 %191)
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  %195 = xor i8 %194, 1
  store i8 %195, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %196 = icmp eq i32 %190, 0
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %34, align 1
  %198 = lshr i32 %190, 31
  %199 = trunc i32 %198 to i8
  store i8 %199, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v659 = select i1 %196, i64 105, i64 17
  %200 = add i64 %184, %.v659
  store i64 %200, i64* %3, align 8
  br i1 %196, label %block_.L_4556e5, label %block_45568d

block_45568d:                                     ; preds = %block_45567c
  store i64 %86, i64* %RAX.i3176, align 8
  %201 = add i64 %200, 12
  store i64 %201, i64* %3, align 8
  %202 = load i32, i32* %137, align 4
  %203 = add i32 %202, -1
  %204 = icmp eq i32 %202, 0
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %19, align 1
  %206 = and i32 %203, 255
  %207 = tail call i32 @llvm.ctpop.i32(i32 %206)
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  store i8 %210, i8* %26, align 1
  %211 = xor i32 %203, %202
  %212 = lshr i32 %211, 4
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  store i8 %214, i8* %31, align 1
  %215 = icmp eq i32 %203, 0
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %34, align 1
  %217 = lshr i32 %203, 31
  %218 = trunc i32 %217 to i8
  store i8 %218, i8* %37, align 1
  %219 = lshr i32 %202, 31
  %220 = xor i32 %217, %219
  %221 = add nuw nsw i32 %220, %219
  %222 = icmp eq i32 %221, 2
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %43, align 1
  %.v658 = select i1 %215, i64 18, i64 53
  %224 = add i64 %200, %.v658
  %225 = add i64 %152, -24
  %226 = add i64 %224, 4
  store i64 %226, i64* %3, align 8
  %227 = inttoptr i64 %225 to i64*
  %228 = load i64, i64* %227, align 8
  store i64 %228, i64* %RAX.i3176, align 8
  %229 = add i64 %228, 8
  %230 = add i64 %224, 8
  store i64 %230, i64* %3, align 8
  %231 = inttoptr i64 %229 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RAX.i3176, align 8
  %233 = add i64 %224, 11
  store i64 %233, i64* %3, align 8
  %234 = inttoptr i64 %232 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %RAX.i3176, align 8
  br i1 %215, label %block_45569f, label %block_.L_4556c2

block_45569f:                                     ; preds = %block_45568d
  %236 = add i64 %235, 6528
  %237 = add i64 %224, 18
  store i64 %237, i64* %3, align 8
  %238 = inttoptr i64 %236 to i64*
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %RAX.i3176, align 8
  %240 = add i64 %224, 22
  store i64 %240, i64* %3, align 8
  store i64 %239, i64* %155, align 8
  %241 = load i64, i64* %RBP.i, align 8
  %242 = add i64 %241, -48
  %243 = load i64, i64* %RAX.i3176, align 8
  %244 = load i64, i64* %3, align 8
  %245 = add i64 %244, 4
  store i64 %245, i64* %3, align 8
  %246 = inttoptr i64 %242 to i64*
  store i64 %243, i64* %246, align 8
  %247 = load i64, i64* %RBP.i, align 8
  %248 = add i64 %247, -40
  %249 = load i64, i64* %RAX.i3176, align 8
  %250 = load i64, i64* %3, align 8
  %251 = add i64 %250, 4
  store i64 %251, i64* %3, align 8
  %252 = inttoptr i64 %248 to i64*
  store i64 %249, i64* %252, align 8
  %253 = load i64, i64* %3, align 8
  %254 = add i64 %253, 35
  store i64 %254, i64* %3, align 8
  br label %block_.L_4556e0

block_.L_4556c2:                                  ; preds = %block_45568d
  %255 = add i64 %235, 6536
  %256 = add i64 %224, 18
  store i64 %256, i64* %3, align 8
  %257 = inttoptr i64 %255 to i64*
  %258 = load i64, i64* %257, align 8
  store i64 %258, i64* %RAX.i3176, align 8
  %259 = add i64 %224, 22
  store i64 %259, i64* %3, align 8
  store i64 %258, i64* %155, align 8
  %260 = load i64, i64* %RBP.i, align 8
  %261 = add i64 %260, -48
  %262 = load i64, i64* %RAX.i3176, align 8
  %263 = load i64, i64* %3, align 8
  %264 = add i64 %263, 4
  store i64 %264, i64* %3, align 8
  %265 = inttoptr i64 %261 to i64*
  store i64 %262, i64* %265, align 8
  %266 = load i64, i64* %RBP.i, align 8
  %267 = add i64 %266, -40
  %268 = load i64, i64* %RAX.i3176, align 8
  %269 = load i64, i64* %3, align 8
  %270 = add i64 %269, 4
  store i64 %270, i64* %3, align 8
  %271 = inttoptr i64 %267 to i64*
  store i64 %268, i64* %271, align 8
  %.pre = load i64, i64* %3, align 8
  br label %block_.L_4556e0

block_.L_4556e0:                                  ; preds = %block_.L_4556c2, %block_45569f
  %272 = phi i64 [ %.pre, %block_.L_4556c2 ], [ %254, %block_45569f ]
  %273 = add i64 %272, 5
  store i64 %273, i64* %3, align 8
  br label %block_.L_4556e5

block_.L_4556e5:                                  ; preds = %block_.L_4556e0, %block_45567c, %block_455665
  %274 = phi i64 [ %273, %block_.L_4556e0 ], [ %200, %block_45567c ], [ %184, %block_455665 ]
  %275 = add i64 %274, 5
  store i64 %275, i64* %3, align 8
  br label %block_.L_4556ea

block_.L_4556ea:                                  ; preds = %block_.L_4556e5, %block_.L_455653
  %276 = phi i64 [ %275, %block_.L_4556e5 ], [ %148, %block_.L_455653 ]
  %277 = add i64 %276, 5
  store i64 %277, i64* %3, align 8
  br label %block_.L_4556ef

block_.L_4556ef:                                  ; preds = %block_.L_4556ea, %block_455630
  %storemerge = phi i64 [ %134, %block_455630 ], [ %277, %block_.L_4556ea ]
  %278 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %278, i64* %RAX.i3176, align 8
  %279 = add i64 %278, 1148
  %280 = add i64 %storemerge, 15
  store i64 %280, i64* %3, align 8
  %281 = inttoptr i64 %279 to i32*
  %282 = load i32, i32* %281, align 4
  store i8 0, i8* %19, align 1
  %283 = and i32 %282, 255
  %284 = tail call i32 @llvm.ctpop.i32(i32 %283)
  %285 = trunc i32 %284 to i8
  %286 = and i8 %285, 1
  %287 = xor i8 %286, 1
  store i8 %287, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %288 = icmp eq i32 %282, 0
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %34, align 1
  %290 = lshr i32 %282, 31
  %291 = trunc i32 %290 to i8
  store i8 %291, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v663 = select i1 %288, i64 42, i64 21
  %292 = add i64 %storemerge, %.v663
  store i64 %292, i64* %3, align 8
  br i1 %288, label %block_.L_455719, label %block_455704

block_455704:                                     ; preds = %block_.L_4556ef
  store i64 %278, i64* %RAX.i3176, align 8
  %293 = add i64 %278, 1156
  %294 = add i64 %292, 15
  store i64 %294, i64* %3, align 8
  %295 = inttoptr i64 %293 to i32*
  %296 = load i32, i32* %295, align 4
  store i8 0, i8* %19, align 1
  %297 = and i32 %296, 255
  %298 = tail call i32 @llvm.ctpop.i32(i32 %297)
  %299 = trunc i32 %298 to i8
  %300 = and i8 %299, 1
  %301 = xor i8 %300, 1
  store i8 %301, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %302 = icmp eq i32 %296, 0
  %303 = zext i1 %302 to i8
  store i8 %303, i8* %34, align 1
  %304 = lshr i32 %296, 31
  %305 = trunc i32 %304 to i8
  store i8 %305, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v664 = select i1 %302, i64 2134, i64 21
  %306 = add i64 %292, %.v664
  store i64 %306, i64* %3, align 8
  br i1 %302, label %block_.L_455f5a, label %block_.L_455719

block_.L_455719:                                  ; preds = %block_455704, %block_.L_4556ef
  %307 = phi i64 [ %306, %block_455704 ], [ %292, %block_.L_4556ef ]
  %308 = load i64, i64* %RBP.i, align 8
  %309 = add i64 %308, -56
  %310 = add i64 %307, 7
  store i64 %310, i64* %3, align 8
  %311 = inttoptr i64 %309 to i32*
  store i32 0, i32* %311, align 4
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i8538 = getelementptr inbounds %union.anon, %union.anon* %312, i64 0, i32 0
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i8595 = getelementptr inbounds %union.anon, %union.anon* %313, i64 0, i32 0
  %EAX.i8694 = bitcast %union.anon* %101 to i32*
  %ESI.i8751 = bitcast %union.anon* %50 to i32*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %ECX.i8872 = bitcast %union.anon* %312 to i32*
  %DX.i8118 = bitcast %union.anon* %313 to i16*
  %EDI.i7794 = bitcast %union.anon* %44 to i32*
  %R8.i8587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W.i8580 = bitcast %union.anon* %315 to i16*
  %R10.i8571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %.pre297 = load i64, i64* %3, align 8
  br label %block_.L_455720

block_.L_455720:                                  ; preds = %block_.L_455f42, %block_.L_455719
  %317 = phi i64 [ %.pre297, %block_.L_455719 ], [ %3097, %block_.L_455f42 ]
  %MEMORY.5 = phi %struct.Memory* [ %2, %block_.L_455719 ], [ %444, %block_.L_455f42 ]
  store i64 4, i64* %RAX.i3176, align 8
  %318 = load i64, i64* %RBP.i, align 8
  %319 = add i64 %318, -56
  %320 = add i64 %317, 8
  store i64 %320, i64* %3, align 8
  %321 = inttoptr i64 %319 to i32*
  %322 = load i32, i32* %321, align 4
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %RCX.i8538, align 8
  %324 = add i64 %318, -32
  %325 = add i64 %317, 12
  store i64 %325, i64* %3, align 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326, align 8
  store i64 %327, i64* %RDX.i8595, align 8
  %328 = add i64 %327, 6396
  %329 = add i64 %317, 18
  store i64 %329, i64* %3, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RSI.i766, align 8
  %333 = add i64 %318, -72
  %334 = add i64 %317, 21
  store i64 %334, i64* %3, align 8
  %335 = inttoptr i64 %333 to i32*
  store i32 4, i32* %335, align 4
  %336 = load i32, i32* %ESI.i8751, align 4
  %337 = zext i32 %336 to i64
  %338 = load i64, i64* %3, align 8
  store i64 %337, i64* %RAX.i3176, align 8
  %339 = sext i32 %336 to i64
  %340 = lshr i64 %339, 32
  store i64 %340, i64* %314, align 8
  %341 = load i64, i64* %RBP.i, align 8
  %342 = add i64 %341, -72
  %343 = add i64 %338, 6
  store i64 %343, i64* %3, align 8
  %344 = inttoptr i64 %342 to i32*
  %345 = load i32, i32* %344, align 4
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RSI.i766, align 8
  %347 = add i64 %338, 8
  store i64 %347, i64* %3, align 8
  %348 = sext i32 %345 to i64
  %349 = shl nuw i64 %340, 32
  %350 = or i64 %349, %337
  %351 = sdiv i64 %350, %348
  %352 = shl i64 %351, 32
  %353 = ashr exact i64 %352, 32
  %354 = icmp eq i64 %351, %353
  br i1 %354, label %357, label %355

; <label>:355:                                    ; preds = %block_.L_455720
  %356 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %347, %struct.Memory* %MEMORY.5)
  %.pre298 = load i32, i32* %EAX.i8694, align 4
  %.pre299 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit8869

; <label>:357:                                    ; preds = %block_.L_455720
  %358 = srem i64 %350, %348
  %359 = and i64 %351, 4294967295
  store i64 %359, i64* %RAX.i3176, align 8
  %360 = and i64 %358, 4294967295
  store i64 %360, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %361 = trunc i64 %351 to i32
  br label %routine_idivl__esi.exit8869

routine_idivl__esi.exit8869:                      ; preds = %357, %355
  %362 = phi i64 [ %.pre299, %355 ], [ %347, %357 ]
  %363 = phi i32 [ %.pre298, %355 ], [ %361, %357 ]
  %364 = phi %struct.Memory* [ %356, %355 ], [ %MEMORY.5, %357 ]
  %365 = load i32, i32* %ECX.i8872, align 4
  %366 = sub i32 %365, %363
  %367 = icmp ult i32 %365, %363
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %19, align 1
  %369 = and i32 %366, 255
  %370 = tail call i32 @llvm.ctpop.i32(i32 %369)
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  store i8 %373, i8* %26, align 1
  %374 = xor i32 %363, %365
  %375 = xor i32 %374, %366
  %376 = lshr i32 %375, 4
  %377 = trunc i32 %376 to i8
  %378 = and i8 %377, 1
  store i8 %378, i8* %31, align 1
  %379 = icmp eq i32 %366, 0
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %34, align 1
  %381 = lshr i32 %366, 31
  %382 = trunc i32 %381 to i8
  store i8 %382, i8* %37, align 1
  %383 = lshr i32 %365, 31
  %384 = lshr i32 %363, 31
  %385 = xor i32 %384, %383
  %386 = xor i32 %381, %383
  %387 = add nuw nsw i32 %386, %385
  %388 = icmp eq i32 %387, 2
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %43, align 1
  %390 = icmp ne i8 %382, 0
  %391 = xor i1 %390, %388
  %.v665 = select i1 %391, i64 8, i64 2072
  %392 = add i64 %362, %.v665
  store i64 %392, i64* %3, align 8
  br i1 %391, label %block_455745, label %block_.L_455f55

block_455745:                                     ; preds = %routine_idivl__esi.exit8869
  %393 = load i64, i64* %RBP.i, align 8
  %394 = add i64 %393, -52
  %395 = add i64 %392, 7
  store i64 %395, i64* %3, align 8
  %396 = inttoptr i64 %394 to i32*
  store i32 0, i32* %396, align 4
  %.pre518 = load i64, i64* %3, align 8
  br label %block_.L_45574c

block_.L_45574c:                                  ; preds = %block_.L_455f2f, %block_455745
  %397 = phi i64 [ %.pre518, %block_455745 ], [ %3066, %block_.L_455f2f ]
  %MEMORY.6 = phi %struct.Memory* [ %364, %block_455745 ], [ %MEMORY.9, %block_.L_455f2f ]
  store i64 4, i64* %RAX.i3176, align 8
  %398 = load i64, i64* %RBP.i, align 8
  %399 = add i64 %398, -52
  %400 = add i64 %397, 8
  store i64 %400, i64* %3, align 8
  %401 = inttoptr i64 %399 to i32*
  %402 = load i32, i32* %401, align 4
  %403 = zext i32 %402 to i64
  store i64 %403, i64* %RCX.i8538, align 8
  %404 = add i64 %398, -32
  %405 = add i64 %397, 12
  store i64 %405, i64* %3, align 8
  %406 = inttoptr i64 %404 to i64*
  %407 = load i64, i64* %406, align 8
  store i64 %407, i64* %RDX.i8595, align 8
  %408 = add i64 %407, 6392
  %409 = add i64 %397, 18
  store i64 %409, i64* %3, align 8
  %410 = inttoptr i64 %408 to i32*
  %411 = load i32, i32* %410, align 4
  %412 = zext i32 %411 to i64
  store i64 %412, i64* %RSI.i766, align 8
  %413 = add i64 %398, -76
  %414 = add i64 %397, 21
  store i64 %414, i64* %3, align 8
  %415 = inttoptr i64 %413 to i32*
  store i32 4, i32* %415, align 4
  %416 = load i32, i32* %ESI.i8751, align 4
  %417 = zext i32 %416 to i64
  %418 = load i64, i64* %3, align 8
  store i64 %417, i64* %RAX.i3176, align 8
  %419 = sext i32 %416 to i64
  %420 = lshr i64 %419, 32
  store i64 %420, i64* %314, align 8
  %421 = load i64, i64* %RBP.i, align 8
  %422 = add i64 %421, -76
  %423 = add i64 %418, 6
  store i64 %423, i64* %3, align 8
  %424 = inttoptr i64 %422 to i32*
  %425 = load i32, i32* %424, align 4
  %426 = zext i32 %425 to i64
  store i64 %426, i64* %RSI.i766, align 8
  %427 = add i64 %418, 8
  store i64 %427, i64* %3, align 8
  %428 = sext i32 %425 to i64
  %429 = shl nuw i64 %420, 32
  %430 = or i64 %429, %417
  %431 = sdiv i64 %430, %428
  %432 = shl i64 %431, 32
  %433 = ashr exact i64 %432, 32
  %434 = icmp eq i64 %431, %433
  br i1 %434, label %437, label %435

; <label>:435:                                    ; preds = %block_.L_45574c
  %436 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %427, %struct.Memory* %MEMORY.6)
  %.pre519 = load i32, i32* %EAX.i8694, align 4
  %.pre520 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit9196

; <label>:437:                                    ; preds = %block_.L_45574c
  %438 = srem i64 %430, %428
  %439 = and i64 %431, 4294967295
  store i64 %439, i64* %RAX.i3176, align 8
  %440 = and i64 %438, 4294967295
  store i64 %440, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %441 = trunc i64 %431 to i32
  br label %routine_idivl__esi.exit9196

routine_idivl__esi.exit9196:                      ; preds = %437, %435
  %442 = phi i64 [ %.pre520, %435 ], [ %427, %437 ]
  %443 = phi i32 [ %.pre519, %435 ], [ %441, %437 ]
  %444 = phi %struct.Memory* [ %436, %435 ], [ %MEMORY.6, %437 ]
  %445 = load i32, i32* %ECX.i8872, align 4
  %446 = sub i32 %445, %443
  %447 = icmp ult i32 %445, %443
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %19, align 1
  %449 = and i32 %446, 255
  %450 = tail call i32 @llvm.ctpop.i32(i32 %449)
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = xor i8 %452, 1
  store i8 %453, i8* %26, align 1
  %454 = xor i32 %443, %445
  %455 = xor i32 %454, %446
  %456 = lshr i32 %455, 4
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  store i8 %458, i8* %31, align 1
  %459 = icmp eq i32 %446, 0
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %34, align 1
  %461 = lshr i32 %446, 31
  %462 = trunc i32 %461 to i8
  store i8 %462, i8* %37, align 1
  %463 = lshr i32 %445, 31
  %464 = lshr i32 %443, 31
  %465 = xor i32 %464, %463
  %466 = xor i32 %461, %463
  %467 = add nuw nsw i32 %466, %465
  %468 = icmp eq i32 %467, 2
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %43, align 1
  %470 = icmp ne i8 %462, 0
  %471 = xor i1 %470, %468
  %.v726 = select i1 %471, i64 8, i64 2009
  %472 = add i64 %442, %.v726
  store i64 %472, i64* %3, align 8
  br i1 %471, label %block_455771, label %block_.L_455f42

block_455771:                                     ; preds = %routine_idivl__esi.exit9196
  %473 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %473, i64* %RAX.i3176, align 8
  %474 = add i64 %473, 72400
  %475 = add i64 %472, 15
  store i64 %475, i64* %3, align 8
  %476 = inttoptr i64 %474 to i32*
  %477 = load i32, i32* %476, align 4
  store i8 0, i8* %19, align 1
  %478 = and i32 %477, 255
  %479 = tail call i32 @llvm.ctpop.i32(i32 %478)
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = xor i8 %481, 1
  store i8 %482, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %483 = icmp eq i32 %477, 0
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %34, align 1
  %485 = lshr i32 %477, 31
  %486 = trunc i32 %485 to i8
  store i8 %486, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v727 = select i1 %483, i64 1446, i64 21
  %487 = add i64 %472, %.v727
  store i64 %487, i64* %3, align 8
  %.pre588 = load i64, i64* %RBP.i, align 8
  br i1 %483, label %block_.L_455d17, label %block_455786

block_455786:                                     ; preds = %block_455771
  %488 = add i64 %.pre588, -32
  %489 = add i64 %487, 4
  store i64 %489, i64* %3, align 8
  %490 = inttoptr i64 %488 to i64*
  %491 = load i64, i64* %490, align 8
  store i64 %491, i64* %RAX.i3176, align 8
  %492 = add i64 %491, 6520
  %493 = add i64 %487, 11
  store i64 %493, i64* %3, align 8
  %494 = inttoptr i64 %492 to i64*
  %495 = load i64, i64* %494, align 8
  store i64 %495, i64* %RAX.i3176, align 8
  %496 = add i64 %.pre588, -52
  %497 = add i64 %487, 15
  store i64 %497, i64* %3, align 8
  %498 = inttoptr i64 %496 to i32*
  %499 = load i32, i32* %498, align 4
  %500 = sext i32 %499 to i64
  store i64 %500, i64* %RCX.i8538, align 8
  %501 = shl nsw i64 %500, 3
  %502 = add i64 %501, %495
  %503 = add i64 %487, 19
  store i64 %503, i64* %3, align 8
  %504 = inttoptr i64 %502 to i64*
  %505 = load i64, i64* %504, align 8
  store i64 %505, i64* %RAX.i3176, align 8
  %506 = add i64 %.pre588, -56
  %507 = add i64 %487, 23
  store i64 %507, i64* %3, align 8
  %508 = inttoptr i64 %506 to i32*
  %509 = load i32, i32* %508, align 4
  %510 = sext i32 %509 to i64
  store i64 %510, i64* %RCX.i8538, align 8
  %511 = add i64 %505, %510
  %512 = add i64 %487, 27
  store i64 %512, i64* %3, align 8
  %513 = inttoptr i64 %511 to i8*
  %514 = load i8, i8* %513, align 1
  %515 = zext i8 %514 to i64
  store i64 %515, i64* %RDX.i8595, align 8
  %516 = zext i8 %514 to i32
  store i8 0, i8* %19, align 1
  %517 = tail call i32 @llvm.ctpop.i32(i32 %516)
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  store i8 %520, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %521 = icmp eq i8 %514, 0
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v728 = select i1 %521, i64 1425, i64 36
  %523 = add i64 %487, %.v728
  store i64 %523, i64* %3, align 8
  br i1 %521, label %block_.L_455d17, label %block_4557aa

block_4557aa:                                     ; preds = %block_455786
  %524 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %524, i64* %RAX.i3176, align 8
  %525 = add i64 %524, 4
  %526 = add i64 %523, 11
  store i64 %526, i64* %3, align 8
  %527 = inttoptr i64 %525 to i32*
  %528 = load i32, i32* %527, align 4
  %529 = zext i32 %528 to i64
  store i64 %529, i64* %RCX.i8538, align 8
  %530 = add i64 %.pre588, -48
  %531 = add i64 %523, 15
  store i64 %531, i64* %3, align 8
  %532 = inttoptr i64 %530 to i64*
  %533 = load i64, i64* %532, align 8
  store i64 %533, i64* %RAX.i3176, align 8
  %534 = add i64 %533, 4
  %535 = add i64 %523, 18
  store i64 %535, i64* %3, align 8
  %536 = inttoptr i64 %534 to i32*
  %537 = load i32, i32* %536, align 4
  %538 = sub i32 %528, %537
  %539 = zext i32 %538 to i64
  store i64 %539, i64* %RCX.i8538, align 8
  %540 = icmp ult i32 %528, %537
  %541 = zext i1 %540 to i8
  store i8 %541, i8* %19, align 1
  %542 = and i32 %538, 255
  %543 = tail call i32 @llvm.ctpop.i32(i32 %542)
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = xor i8 %545, 1
  store i8 %546, i8* %26, align 1
  %547 = xor i32 %537, %528
  %548 = xor i32 %547, %538
  %549 = lshr i32 %548, 4
  %550 = trunc i32 %549 to i8
  %551 = and i8 %550, 1
  store i8 %551, i8* %31, align 1
  %552 = icmp eq i32 %538, 0
  %553 = zext i1 %552 to i8
  store i8 %553, i8* %34, align 1
  %554 = lshr i32 %538, 31
  %555 = trunc i32 %554 to i8
  store i8 %555, i8* %37, align 1
  %556 = lshr i32 %528, 31
  %557 = lshr i32 %537, 31
  %558 = xor i32 %557, %556
  %559 = xor i32 %554, %556
  %560 = add nuw nsw i32 %559, %558
  %561 = icmp eq i32 %560, 2
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %43, align 1
  store i64 %539, i64* %RDI.i732, align 8
  %563 = add i64 %523, -346026
  %564 = add i64 %523, 25
  %565 = load i64, i64* %6, align 8
  %566 = add i64 %565, -8
  %567 = inttoptr i64 %566 to i64*
  store i64 %564, i64* %567, align 8
  store i64 %566, i64* %6, align 8
  store i64 %563, i64* %3, align 8
  %568 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %444)
  %569 = load i64, i64* %3, align 8
  %570 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %570, i64* %RDX.i8595, align 8
  %571 = add i64 %570, 4
  %572 = add i64 %569, 11
  store i64 %572, i64* %3, align 8
  %573 = inttoptr i64 %571 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RCX.i8538, align 8
  %576 = load i64, i64* %RBP.i, align 8
  %577 = add i64 %576, -40
  %578 = add i64 %569, 15
  store i64 %578, i64* %3, align 8
  %579 = inttoptr i64 %577 to i64*
  %580 = load i64, i64* %579, align 8
  store i64 %580, i64* %RDX.i8595, align 8
  %581 = add i64 %580, 4
  %582 = add i64 %569, 18
  store i64 %582, i64* %3, align 8
  %583 = inttoptr i64 %581 to i32*
  %584 = load i32, i32* %583, align 4
  %585 = sub i32 %574, %584
  %586 = zext i32 %585 to i64
  store i64 %586, i64* %RCX.i8538, align 8
  %587 = icmp ult i32 %574, %584
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %19, align 1
  %589 = and i32 %585, 255
  %590 = tail call i32 @llvm.ctpop.i32(i32 %589)
  %591 = trunc i32 %590 to i8
  %592 = and i8 %591, 1
  %593 = xor i8 %592, 1
  store i8 %593, i8* %26, align 1
  %594 = xor i32 %584, %574
  %595 = xor i32 %594, %585
  %596 = lshr i32 %595, 4
  %597 = trunc i32 %596 to i8
  %598 = and i8 %597, 1
  store i8 %598, i8* %31, align 1
  %599 = icmp eq i32 %585, 0
  %600 = zext i1 %599 to i8
  store i8 %600, i8* %34, align 1
  %601 = lshr i32 %585, 31
  %602 = trunc i32 %601 to i8
  store i8 %602, i8* %37, align 1
  %603 = lshr i32 %574, 31
  %604 = lshr i32 %584, 31
  %605 = xor i32 %604, %603
  %606 = xor i32 %601, %603
  %607 = add nuw nsw i32 %606, %605
  %608 = icmp eq i32 %607, 2
  %609 = zext i1 %608 to i8
  store i8 %609, i8* %43, align 1
  store i64 %586, i64* %RDI.i732, align 8
  %610 = add i64 %576, -80
  %611 = load i32, i32* %EAX.i8694, align 4
  %612 = add i64 %569, 23
  store i64 %612, i64* %3, align 8
  %613 = inttoptr i64 %610 to i32*
  store i32 %611, i32* %613, align 4
  %614 = load i64, i64* %3, align 8
  %615 = add i64 %614, -346074
  %616 = add i64 %614, 5
  %617 = load i64, i64* %6, align 8
  %618 = add i64 %617, -8
  %619 = inttoptr i64 %618 to i64*
  store i64 %616, i64* %619, align 8
  store i64 %618, i64* %6, align 8
  store i64 %615, i64* %3, align 8
  %620 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %568)
  %621 = load i64, i64* %RBP.i, align 8
  %622 = add i64 %621, -80
  %623 = load i64, i64* %3, align 8
  %624 = add i64 %623, 3
  store i64 %624, i64* %3, align 8
  %625 = inttoptr i64 %622 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = load i32, i32* %EAX.i8694, align 4
  %628 = sub i32 %626, %627
  %629 = icmp ult i32 %626, %627
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %19, align 1
  %631 = and i32 %628, 255
  %632 = tail call i32 @llvm.ctpop.i32(i32 %631)
  %633 = trunc i32 %632 to i8
  %634 = and i8 %633, 1
  %635 = xor i8 %634, 1
  store i8 %635, i8* %26, align 1
  %636 = xor i32 %627, %626
  %637 = xor i32 %636, %628
  %638 = lshr i32 %637, 4
  %639 = trunc i32 %638 to i8
  %640 = and i8 %639, 1
  store i8 %640, i8* %31, align 1
  %641 = icmp eq i32 %628, 0
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %34, align 1
  %643 = lshr i32 %628, 31
  %644 = trunc i32 %643 to i8
  store i8 %644, i8* %37, align 1
  %645 = lshr i32 %626, 31
  %646 = lshr i32 %627, 31
  %647 = xor i32 %646, %645
  %648 = xor i32 %643, %645
  %649 = add nuw nsw i32 %648, %647
  %650 = icmp eq i32 %649, 2
  %651 = zext i1 %650 to i8
  store i8 %651, i8* %43, align 1
  %652 = icmp ne i8 %644, 0
  %653 = xor i1 %652, %650
  %654 = or i1 %641, %653
  %.v729 = select i1 %654, i64 670, i64 11
  %655 = add i64 %623, %.v729
  store i64 8, i64* %RAX.i3176, align 8
  %656 = add i64 %655, 10
  store i64 %656, i64* %3, align 8
  store i64 2, i64* %RCX.i8538, align 8
  br i1 %654, label %block_.L_455a7d, label %block_4557ea

block_4557ea:                                     ; preds = %block_4557aa
  %657 = add i64 %621, -40
  %658 = add i64 %655, 14
  store i64 %658, i64* %3, align 8
  %659 = inttoptr i64 %657 to i64*
  %660 = load i64, i64* %659, align 8
  store i64 %660, i64* %RDX.i8595, align 8
  %661 = add i64 %660, 6504
  %662 = add i64 %655, 21
  store i64 %662, i64* %3, align 8
  %663 = inttoptr i64 %661 to i64*
  %664 = load i64, i64* %663, align 8
  store i64 %664, i64* %RDX.i8595, align 8
  %665 = add i64 %655, 24
  store i64 %665, i64* %3, align 8
  %666 = inttoptr i64 %664 to i64*
  %667 = load i64, i64* %666, align 8
  store i64 %667, i64* %RDX.i8595, align 8
  %668 = add i64 %621, -52
  %669 = add i64 %655, 28
  store i64 %669, i64* %3, align 8
  %670 = inttoptr i64 %668 to i32*
  %671 = load i32, i32* %670, align 4
  %672 = sext i32 %671 to i64
  store i64 %672, i64* %RSI.i766, align 8
  %673 = shl nsw i64 %672, 3
  %674 = add i64 %673, %667
  %675 = add i64 %655, 32
  store i64 %675, i64* %3, align 8
  %676 = inttoptr i64 %674 to i64*
  %677 = load i64, i64* %676, align 8
  store i64 %677, i64* %RDX.i8595, align 8
  %678 = add i64 %621, -56
  %679 = add i64 %655, 35
  store i64 %679, i64* %3, align 8
  %680 = inttoptr i64 %678 to i32*
  %681 = load i32, i32* %680, align 4
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RDI.i732, align 8
  %683 = add i64 %621, -84
  %684 = add i64 %655, 38
  store i64 %684, i64* %3, align 8
  %685 = inttoptr i64 %683 to i32*
  store i32 8, i32* %685, align 4
  %686 = load i32, i32* %EDI.i7794, align 4
  %687 = zext i32 %686 to i64
  %688 = load i64, i64* %3, align 8
  store i64 %687, i64* %RAX.i3176, align 8
  %689 = load i64, i64* %RBP.i, align 8
  %690 = add i64 %689, -96
  %691 = load i64, i64* %RDX.i8595, align 8
  %692 = add i64 %688, 6
  store i64 %692, i64* %3, align 8
  %693 = inttoptr i64 %690 to i64*
  store i64 %691, i64* %693, align 8
  %694 = load i64, i64* %3, align 8
  %695 = load i32, i32* %EAX.i8694, align 8
  %696 = sext i32 %695 to i64
  %697 = lshr i64 %696, 32
  store i64 %697, i64* %314, align 8
  %698 = load i32, i32* %ECX.i8872, align 4
  %699 = add i64 %694, 3
  store i64 %699, i64* %3, align 8
  %700 = zext i32 %695 to i64
  %701 = sext i32 %698 to i64
  %702 = shl nuw i64 %697, 32
  %703 = or i64 %702, %700
  %704 = sdiv i64 %703, %701
  %705 = shl i64 %704, 32
  %706 = ashr exact i64 %705, 32
  %707 = icmp eq i64 %704, %706
  br i1 %707, label %710, label %708

; <label>:708:                                    ; preds = %block_4557ea
  %709 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %699, %struct.Memory* %620)
  %.pre521 = load i32, i32* %EAX.i8694, align 4
  %.pre522 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit9084

; <label>:710:                                    ; preds = %block_4557ea
  %711 = srem i64 %703, %701
  %712 = and i64 %704, 4294967295
  store i64 %712, i64* %RAX.i3176, align 8
  %713 = and i64 %711, 4294967295
  store i64 %713, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %714 = trunc i64 %704 to i32
  br label %routine_idivl__ecx.exit9084

routine_idivl__ecx.exit9084:                      ; preds = %710, %708
  %715 = phi i64 [ %.pre522, %708 ], [ %699, %710 ]
  %716 = phi i32 [ %.pre521, %708 ], [ %714, %710 ]
  %717 = phi %struct.Memory* [ %709, %708 ], [ %620, %710 ]
  %718 = sext i32 %716 to i64
  store i64 %718, i64* %RSI.i766, align 8
  %719 = load i64, i64* %RBP.i, align 8
  %720 = add i64 %719, -96
  %721 = add i64 %715, 7
  store i64 %721, i64* %3, align 8
  %722 = inttoptr i64 %720 to i64*
  %723 = load i64, i64* %722, align 8
  store i64 %723, i64* %R8.i8587, align 8
  %724 = shl nsw i64 %718, 3
  %725 = add i64 %724, %723
  %726 = add i64 %715, 11
  store i64 %726, i64* %3, align 8
  %727 = inttoptr i64 %725 to i64*
  %728 = load i64, i64* %727, align 8
  store i64 %728, i64* %RSI.i766, align 8
  %729 = add i64 %715, 15
  store i64 %729, i64* %3, align 8
  %730 = inttoptr i64 %728 to i16*
  %731 = load i16, i16* %730, align 2
  store i16 %731, i16* %R9W.i8580, align 2
  %732 = add i64 %719, -16
  %733 = add i64 %715, 19
  store i64 %733, i64* %3, align 8
  %734 = inttoptr i64 %732 to i64*
  %735 = load i64, i64* %734, align 8
  store i64 %735, i64* %RSI.i766, align 8
  %736 = add i64 %735, 1616
  %737 = add i64 %715, 26
  store i64 %737, i64* %3, align 8
  %738 = inttoptr i64 %736 to i64*
  %739 = load i64, i64* %738, align 8
  store i64 %739, i64* %RSI.i766, align 8
  %740 = add i64 %715, 29
  store i64 %740, i64* %3, align 8
  %741 = inttoptr i64 %739 to i64*
  %742 = load i64, i64* %741, align 8
  store i64 %742, i64* %RSI.i766, align 8
  %743 = add i64 %719, -52
  %744 = add i64 %715, 33
  store i64 %744, i64* %3, align 8
  %745 = inttoptr i64 %743 to i32*
  %746 = load i32, i32* %745, align 4
  %747 = sext i32 %746 to i64
  store i64 %747, i64* %R10.i8571, align 8
  %748 = shl nsw i64 %747, 3
  %749 = add i64 %748, %742
  %750 = add i64 %715, 37
  store i64 %750, i64* %3, align 8
  %751 = inttoptr i64 %749 to i64*
  %752 = load i64, i64* %751, align 8
  store i64 %752, i64* %RSI.i766, align 8
  %753 = add i64 %719, -56
  %754 = add i64 %715, 41
  store i64 %754, i64* %3, align 8
  %755 = inttoptr i64 %753 to i32*
  %756 = load i32, i32* %755, align 4
  %757 = sext i32 %756 to i64
  store i64 %757, i64* %R10.i8571, align 8
  %758 = shl nsw i64 %757, 3
  %759 = add i64 %758, %752
  %760 = add i64 %715, 45
  store i64 %760, i64* %3, align 8
  %761 = inttoptr i64 %759 to i64*
  %762 = load i64, i64* %761, align 8
  store i64 %762, i64* %RSI.i766, align 8
  %763 = add i64 %715, 49
  store i64 %763, i64* %3, align 8
  %764 = inttoptr i64 %762 to i16*
  store i16 %731, i16* %764, align 2
  %765 = load i64, i64* %RBP.i, align 8
  %766 = add i64 %765, -40
  %767 = load i64, i64* %3, align 8
  %768 = add i64 %767, 4
  store i64 %768, i64* %3, align 8
  %769 = inttoptr i64 %766 to i64*
  %770 = load i64, i64* %769, align 8
  store i64 %770, i64* %RSI.i766, align 8
  %771 = add i64 %770, 6504
  %772 = add i64 %767, 11
  store i64 %772, i64* %3, align 8
  %773 = inttoptr i64 %771 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %RSI.i766, align 8
  %775 = add i64 %767, 14
  store i64 %775, i64* %3, align 8
  %776 = inttoptr i64 %774 to i64*
  %777 = load i64, i64* %776, align 8
  store i64 %777, i64* %RSI.i766, align 8
  %778 = add i64 %765, -52
  %779 = add i64 %767, 18
  store i64 %779, i64* %3, align 8
  %780 = inttoptr i64 %778 to i32*
  %781 = load i32, i32* %780, align 4
  %782 = sext i32 %781 to i64
  store i64 %782, i64* %R10.i8571, align 8
  %783 = shl nsw i64 %782, 3
  %784 = add i64 %783, %777
  %785 = add i64 %767, 22
  store i64 %785, i64* %3, align 8
  %786 = inttoptr i64 %784 to i64*
  %787 = load i64, i64* %786, align 8
  store i64 %787, i64* %RSI.i766, align 8
  %788 = add i64 %765, -56
  %789 = add i64 %767, 25
  store i64 %789, i64* %3, align 8
  %790 = inttoptr i64 %788 to i32*
  %791 = load i32, i32* %790, align 4
  %792 = zext i32 %791 to i64
  store i64 %792, i64* %RAX.i3176, align 8
  %793 = sext i32 %791 to i64
  %794 = lshr i64 %793, 32
  store i64 %794, i64* %314, align 8
  %795 = load i32, i32* %ECX.i8872, align 4
  %796 = add i64 %767, 28
  store i64 %796, i64* %3, align 8
  %797 = sext i32 %795 to i64
  %798 = shl nuw i64 %794, 32
  %799 = or i64 %798, %792
  %800 = sdiv i64 %799, %797
  %801 = shl i64 %800, 32
  %802 = ashr exact i64 %801, 32
  %803 = icmp eq i64 %800, %802
  br i1 %803, label %806, label %804

; <label>:804:                                    ; preds = %routine_idivl__ecx.exit9084
  %805 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %796, %struct.Memory* %717)
  %.pre523 = load i32, i32* %EAX.i8694, align 4
  %.pre524 = load i64, i64* %3, align 8
  %.pre525 = load i64, i64* %RSI.i766, align 8
  %.pre526 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit9028

; <label>:806:                                    ; preds = %routine_idivl__ecx.exit9084
  %807 = srem i64 %799, %797
  %808 = and i64 %800, 4294967295
  store i64 %808, i64* %RAX.i3176, align 8
  %809 = and i64 %807, 4294967295
  store i64 %809, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %810 = trunc i64 %800 to i32
  br label %routine_idivl__ecx.exit9028

routine_idivl__ecx.exit9028:                      ; preds = %806, %804
  %811 = phi i64 [ %.pre526, %804 ], [ %765, %806 ]
  %812 = phi i64 [ %.pre525, %804 ], [ %787, %806 ]
  %813 = phi i64 [ %.pre524, %804 ], [ %796, %806 ]
  %814 = phi i32 [ %.pre523, %804 ], [ %810, %806 ]
  %815 = phi %struct.Memory* [ %805, %804 ], [ %717, %806 ]
  %816 = sext i32 %814 to i64
  store i64 %816, i64* %R10.i8571, align 8
  %817 = shl nsw i64 %816, 3
  %818 = add i64 %812, %817
  %819 = add i64 %813, 7
  store i64 %819, i64* %3, align 8
  %820 = inttoptr i64 %818 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %RSI.i766, align 8
  %822 = add i64 %821, 2
  %823 = add i64 %813, 12
  store i64 %823, i64* %3, align 8
  %824 = inttoptr i64 %822 to i16*
  %825 = load i16, i16* %824, align 2
  store i16 %825, i16* %R9W.i8580, align 2
  %826 = add i64 %811, -16
  %827 = add i64 %813, 16
  store i64 %827, i64* %3, align 8
  %828 = inttoptr i64 %826 to i64*
  %829 = load i64, i64* %828, align 8
  store i64 %829, i64* %RSI.i766, align 8
  %830 = add i64 %829, 1616
  %831 = add i64 %813, 23
  store i64 %831, i64* %3, align 8
  %832 = inttoptr i64 %830 to i64*
  %833 = load i64, i64* %832, align 8
  store i64 %833, i64* %RSI.i766, align 8
  %834 = add i64 %813, 26
  store i64 %834, i64* %3, align 8
  %835 = inttoptr i64 %833 to i64*
  %836 = load i64, i64* %835, align 8
  store i64 %836, i64* %RSI.i766, align 8
  %837 = add i64 %811, -52
  %838 = add i64 %813, 30
  store i64 %838, i64* %3, align 8
  %839 = inttoptr i64 %837 to i32*
  %840 = load i32, i32* %839, align 4
  %841 = sext i32 %840 to i64
  store i64 %841, i64* %R10.i8571, align 8
  %842 = shl nsw i64 %841, 3
  %843 = add i64 %842, %836
  %844 = add i64 %813, 34
  store i64 %844, i64* %3, align 8
  %845 = inttoptr i64 %843 to i64*
  %846 = load i64, i64* %845, align 8
  store i64 %846, i64* %RSI.i766, align 8
  %847 = add i64 %811, -56
  %848 = add i64 %813, 38
  store i64 %848, i64* %3, align 8
  %849 = inttoptr i64 %847 to i32*
  %850 = load i32, i32* %849, align 4
  %851 = sext i32 %850 to i64
  store i64 %851, i64* %R10.i8571, align 8
  %852 = shl nsw i64 %851, 3
  %853 = add i64 %852, %846
  %854 = add i64 %813, 42
  store i64 %854, i64* %3, align 8
  %855 = inttoptr i64 %853 to i64*
  %856 = load i64, i64* %855, align 8
  store i64 %856, i64* %RSI.i766, align 8
  %857 = add i64 %856, 2
  %858 = add i64 %813, 47
  store i64 %858, i64* %3, align 8
  %859 = inttoptr i64 %857 to i16*
  store i16 %825, i16* %859, align 2
  %860 = load i64, i64* %RBP.i, align 8
  %861 = add i64 %860, -40
  %862 = load i64, i64* %3, align 8
  %863 = add i64 %862, 4
  store i64 %863, i64* %3, align 8
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864, align 8
  store i64 %865, i64* %RSI.i766, align 8
  %866 = add i64 %865, 6504
  %867 = add i64 %862, 11
  store i64 %867, i64* %3, align 8
  %868 = inttoptr i64 %866 to i64*
  %869 = load i64, i64* %868, align 8
  store i64 %869, i64* %RSI.i766, align 8
  %870 = add i64 %869, 8
  %871 = add i64 %862, 15
  store i64 %871, i64* %3, align 8
  %872 = inttoptr i64 %870 to i64*
  %873 = load i64, i64* %872, align 8
  store i64 %873, i64* %RSI.i766, align 8
  %874 = add i64 %860, -52
  %875 = add i64 %862, 19
  store i64 %875, i64* %3, align 8
  %876 = inttoptr i64 %874 to i32*
  %877 = load i32, i32* %876, align 4
  %878 = sext i32 %877 to i64
  store i64 %878, i64* %R10.i8571, align 8
  %879 = shl nsw i64 %878, 3
  %880 = add i64 %879, %873
  %881 = add i64 %862, 23
  store i64 %881, i64* %3, align 8
  %882 = inttoptr i64 %880 to i64*
  %883 = load i64, i64* %882, align 8
  store i64 %883, i64* %RSI.i766, align 8
  %884 = add i64 %860, -56
  %885 = add i64 %862, 26
  store i64 %885, i64* %3, align 8
  %886 = inttoptr i64 %884 to i32*
  %887 = load i32, i32* %886, align 4
  %888 = zext i32 %887 to i64
  store i64 %888, i64* %RAX.i3176, align 8
  %889 = sext i32 %887 to i64
  %890 = lshr i64 %889, 32
  store i64 %890, i64* %314, align 8
  %891 = load i32, i32* %ECX.i8872, align 4
  %892 = add i64 %862, 29
  store i64 %892, i64* %3, align 8
  %893 = sext i32 %891 to i64
  %894 = shl nuw i64 %890, 32
  %895 = or i64 %894, %888
  %896 = sdiv i64 %895, %893
  %897 = shl i64 %896, 32
  %898 = ashr exact i64 %897, 32
  %899 = icmp eq i64 %896, %898
  br i1 %899, label %902, label %900

; <label>:900:                                    ; preds = %routine_idivl__ecx.exit9028
  %901 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %892, %struct.Memory* %815)
  %.pre527 = load i32, i32* %EAX.i8694, align 4
  %.pre528 = load i64, i64* %3, align 8
  %.pre529 = load i64, i64* %RSI.i766, align 8
  %.pre530 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8975

; <label>:902:                                    ; preds = %routine_idivl__ecx.exit9028
  %903 = srem i64 %895, %893
  %904 = and i64 %896, 4294967295
  store i64 %904, i64* %RAX.i3176, align 8
  %905 = and i64 %903, 4294967295
  store i64 %905, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %906 = trunc i64 %896 to i32
  br label %routine_idivl__ecx.exit8975

routine_idivl__ecx.exit8975:                      ; preds = %902, %900
  %907 = phi i64 [ %.pre530, %900 ], [ %860, %902 ]
  %908 = phi i64 [ %.pre529, %900 ], [ %883, %902 ]
  %909 = phi i64 [ %.pre528, %900 ], [ %892, %902 ]
  %910 = phi i32 [ %.pre527, %900 ], [ %906, %902 ]
  %911 = phi %struct.Memory* [ %901, %900 ], [ %815, %902 ]
  %912 = sext i32 %910 to i64
  store i64 %912, i64* %R10.i8571, align 8
  %913 = shl nsw i64 %912, 3
  %914 = add i64 %908, %913
  %915 = add i64 %909, 7
  store i64 %915, i64* %3, align 8
  %916 = inttoptr i64 %914 to i64*
  %917 = load i64, i64* %916, align 8
  store i64 %917, i64* %RSI.i766, align 8
  %918 = add i64 %909, 11
  store i64 %918, i64* %3, align 8
  %919 = inttoptr i64 %917 to i16*
  %920 = load i16, i16* %919, align 2
  store i16 %920, i16* %R9W.i8580, align 2
  %921 = add i64 %907, -16
  %922 = add i64 %909, 15
  store i64 %922, i64* %3, align 8
  %923 = inttoptr i64 %921 to i64*
  %924 = load i64, i64* %923, align 8
  store i64 %924, i64* %RSI.i766, align 8
  %925 = add i64 %924, 1616
  %926 = add i64 %909, 22
  store i64 %926, i64* %3, align 8
  %927 = inttoptr i64 %925 to i64*
  %928 = load i64, i64* %927, align 8
  store i64 %928, i64* %RSI.i766, align 8
  %929 = add i64 %928, 8
  %930 = add i64 %909, 26
  store i64 %930, i64* %3, align 8
  %931 = inttoptr i64 %929 to i64*
  %932 = load i64, i64* %931, align 8
  store i64 %932, i64* %RSI.i766, align 8
  %933 = add i64 %907, -52
  %934 = add i64 %909, 30
  store i64 %934, i64* %3, align 8
  %935 = inttoptr i64 %933 to i32*
  %936 = load i32, i32* %935, align 4
  %937 = sext i32 %936 to i64
  store i64 %937, i64* %R10.i8571, align 8
  %938 = shl nsw i64 %937, 3
  %939 = add i64 %938, %932
  %940 = add i64 %909, 34
  store i64 %940, i64* %3, align 8
  %941 = inttoptr i64 %939 to i64*
  %942 = load i64, i64* %941, align 8
  store i64 %942, i64* %RSI.i766, align 8
  %943 = add i64 %907, -56
  %944 = add i64 %909, 38
  store i64 %944, i64* %3, align 8
  %945 = inttoptr i64 %943 to i32*
  %946 = load i32, i32* %945, align 4
  %947 = sext i32 %946 to i64
  store i64 %947, i64* %R10.i8571, align 8
  %948 = shl nsw i64 %947, 3
  %949 = add i64 %948, %942
  %950 = add i64 %909, 42
  store i64 %950, i64* %3, align 8
  %951 = inttoptr i64 %949 to i64*
  %952 = load i64, i64* %951, align 8
  store i64 %952, i64* %RSI.i766, align 8
  %953 = add i64 %909, 46
  store i64 %953, i64* %3, align 8
  %954 = inttoptr i64 %952 to i16*
  store i16 %920, i16* %954, align 2
  %955 = load i64, i64* %RBP.i, align 8
  %956 = add i64 %955, -40
  %957 = load i64, i64* %3, align 8
  %958 = add i64 %957, 4
  store i64 %958, i64* %3, align 8
  %959 = inttoptr i64 %956 to i64*
  %960 = load i64, i64* %959, align 8
  store i64 %960, i64* %RSI.i766, align 8
  %961 = add i64 %960, 6504
  %962 = add i64 %957, 11
  store i64 %962, i64* %3, align 8
  %963 = inttoptr i64 %961 to i64*
  %964 = load i64, i64* %963, align 8
  store i64 %964, i64* %RSI.i766, align 8
  %965 = add i64 %964, 8
  %966 = add i64 %957, 15
  store i64 %966, i64* %3, align 8
  %967 = inttoptr i64 %965 to i64*
  %968 = load i64, i64* %967, align 8
  store i64 %968, i64* %RSI.i766, align 8
  %969 = add i64 %955, -52
  %970 = add i64 %957, 19
  store i64 %970, i64* %3, align 8
  %971 = inttoptr i64 %969 to i32*
  %972 = load i32, i32* %971, align 4
  %973 = sext i32 %972 to i64
  store i64 %973, i64* %R10.i8571, align 8
  %974 = shl nsw i64 %973, 3
  %975 = add i64 %974, %968
  %976 = add i64 %957, 23
  store i64 %976, i64* %3, align 8
  %977 = inttoptr i64 %975 to i64*
  %978 = load i64, i64* %977, align 8
  store i64 %978, i64* %RSI.i766, align 8
  %979 = add i64 %955, -56
  %980 = add i64 %957, 26
  store i64 %980, i64* %3, align 8
  %981 = inttoptr i64 %979 to i32*
  %982 = load i32, i32* %981, align 4
  %983 = zext i32 %982 to i64
  store i64 %983, i64* %RAX.i3176, align 8
  %984 = sext i32 %982 to i64
  %985 = lshr i64 %984, 32
  store i64 %985, i64* %314, align 8
  %986 = load i32, i32* %ECX.i8872, align 4
  %987 = add i64 %957, 29
  store i64 %987, i64* %3, align 8
  %988 = sext i32 %986 to i64
  %989 = shl nuw i64 %985, 32
  %990 = or i64 %989, %983
  %991 = sdiv i64 %990, %988
  %992 = shl i64 %991, 32
  %993 = ashr exact i64 %992, 32
  %994 = icmp eq i64 %991, %993
  br i1 %994, label %997, label %995

; <label>:995:                                    ; preds = %routine_idivl__ecx.exit8975
  %996 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %987, %struct.Memory* %911)
  %.pre531 = load i32, i32* %EAX.i8694, align 4
  %.pre532 = load i64, i64* %3, align 8
  %.pre533 = load i64, i64* %RSI.i766, align 8
  %.pre534 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8923

; <label>:997:                                    ; preds = %routine_idivl__ecx.exit8975
  %998 = srem i64 %990, %988
  %999 = and i64 %991, 4294967295
  store i64 %999, i64* %RAX.i3176, align 8
  %1000 = and i64 %998, 4294967295
  store i64 %1000, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1001 = trunc i64 %991 to i32
  br label %routine_idivl__ecx.exit8923

routine_idivl__ecx.exit8923:                      ; preds = %997, %995
  %1002 = phi i64 [ %.pre534, %995 ], [ %955, %997 ]
  %1003 = phi i64 [ %.pre533, %995 ], [ %978, %997 ]
  %1004 = phi i64 [ %.pre532, %995 ], [ %987, %997 ]
  %1005 = phi i32 [ %.pre531, %995 ], [ %1001, %997 ]
  %1006 = phi %struct.Memory* [ %996, %995 ], [ %911, %997 ]
  %1007 = sext i32 %1005 to i64
  store i64 %1007, i64* %R10.i8571, align 8
  %1008 = shl nsw i64 %1007, 3
  %1009 = add i64 %1003, %1008
  %1010 = add i64 %1004, 7
  store i64 %1010, i64* %3, align 8
  %1011 = inttoptr i64 %1009 to i64*
  %1012 = load i64, i64* %1011, align 8
  store i64 %1012, i64* %RSI.i766, align 8
  %1013 = add i64 %1012, 2
  %1014 = add i64 %1004, 12
  store i64 %1014, i64* %3, align 8
  %1015 = inttoptr i64 %1013 to i16*
  %1016 = load i16, i16* %1015, align 2
  store i16 %1016, i16* %R9W.i8580, align 2
  %1017 = add i64 %1002, -16
  %1018 = add i64 %1004, 16
  store i64 %1018, i64* %3, align 8
  %1019 = inttoptr i64 %1017 to i64*
  %1020 = load i64, i64* %1019, align 8
  store i64 %1020, i64* %RSI.i766, align 8
  %1021 = add i64 %1020, 1616
  %1022 = add i64 %1004, 23
  store i64 %1022, i64* %3, align 8
  %1023 = inttoptr i64 %1021 to i64*
  %1024 = load i64, i64* %1023, align 8
  store i64 %1024, i64* %RSI.i766, align 8
  %1025 = add i64 %1024, 8
  %1026 = add i64 %1004, 27
  store i64 %1026, i64* %3, align 8
  %1027 = inttoptr i64 %1025 to i64*
  %1028 = load i64, i64* %1027, align 8
  store i64 %1028, i64* %RSI.i766, align 8
  %1029 = add i64 %1002, -52
  %1030 = add i64 %1004, 31
  store i64 %1030, i64* %3, align 8
  %1031 = inttoptr i64 %1029 to i32*
  %1032 = load i32, i32* %1031, align 4
  %1033 = sext i32 %1032 to i64
  store i64 %1033, i64* %R10.i8571, align 8
  %1034 = shl nsw i64 %1033, 3
  %1035 = add i64 %1034, %1028
  %1036 = add i64 %1004, 35
  store i64 %1036, i64* %3, align 8
  %1037 = inttoptr i64 %1035 to i64*
  %1038 = load i64, i64* %1037, align 8
  store i64 %1038, i64* %RSI.i766, align 8
  %1039 = add i64 %1002, -56
  %1040 = add i64 %1004, 39
  store i64 %1040, i64* %3, align 8
  %1041 = inttoptr i64 %1039 to i32*
  %1042 = load i32, i32* %1041, align 4
  %1043 = sext i32 %1042 to i64
  store i64 %1043, i64* %R10.i8571, align 8
  %1044 = shl nsw i64 %1043, 3
  %1045 = add i64 %1044, %1038
  %1046 = add i64 %1004, 43
  store i64 %1046, i64* %3, align 8
  %1047 = inttoptr i64 %1045 to i64*
  %1048 = load i64, i64* %1047, align 8
  store i64 %1048, i64* %RSI.i766, align 8
  %1049 = add i64 %1048, 2
  %1050 = add i64 %1004, 48
  store i64 %1050, i64* %3, align 8
  %1051 = inttoptr i64 %1049 to i16*
  store i16 %1016, i16* %1051, align 2
  %1052 = load i64, i64* %RBP.i, align 8
  %1053 = add i64 %1052, -40
  %1054 = load i64, i64* %3, align 8
  %1055 = add i64 %1054, 4
  store i64 %1055, i64* %3, align 8
  %1056 = inttoptr i64 %1053 to i64*
  %1057 = load i64, i64* %1056, align 8
  store i64 %1057, i64* %RSI.i766, align 8
  %1058 = add i64 %1057, 6480
  %1059 = add i64 %1054, 11
  store i64 %1059, i64* %3, align 8
  %1060 = inttoptr i64 %1058 to i64*
  %1061 = load i64, i64* %1060, align 8
  store i64 %1061, i64* %RSI.i766, align 8
  %1062 = add i64 %1054, 14
  store i64 %1062, i64* %3, align 8
  %1063 = inttoptr i64 %1061 to i64*
  %1064 = load i64, i64* %1063, align 8
  store i64 %1064, i64* %RSI.i766, align 8
  %1065 = add i64 %1052, -52
  %1066 = add i64 %1054, 18
  store i64 %1066, i64* %3, align 8
  %1067 = inttoptr i64 %1065 to i32*
  %1068 = load i32, i32* %1067, align 4
  %1069 = sext i32 %1068 to i64
  store i64 %1069, i64* %R10.i8571, align 8
  %1070 = shl nsw i64 %1069, 3
  %1071 = add i64 %1070, %1064
  %1072 = add i64 %1054, 22
  store i64 %1072, i64* %3, align 8
  %1073 = inttoptr i64 %1071 to i64*
  %1074 = load i64, i64* %1073, align 8
  store i64 %1074, i64* %RSI.i766, align 8
  %1075 = add i64 %1052, -56
  %1076 = add i64 %1054, 25
  store i64 %1076, i64* %3, align 8
  %1077 = inttoptr i64 %1075 to i32*
  %1078 = load i32, i32* %1077, align 4
  %1079 = zext i32 %1078 to i64
  store i64 %1079, i64* %RAX.i3176, align 8
  %1080 = sext i32 %1078 to i64
  %1081 = lshr i64 %1080, 32
  store i64 %1081, i64* %314, align 8
  %1082 = load i32, i32* %ECX.i8872, align 4
  %1083 = add i64 %1054, 28
  store i64 %1083, i64* %3, align 8
  %1084 = sext i32 %1082 to i64
  %1085 = shl nuw i64 %1081, 32
  %1086 = or i64 %1085, %1079
  %1087 = sdiv i64 %1086, %1084
  %1088 = shl i64 %1087, 32
  %1089 = ashr exact i64 %1088, 32
  %1090 = icmp eq i64 %1087, %1089
  br i1 %1090, label %1093, label %1091

; <label>:1091:                                   ; preds = %routine_idivl__ecx.exit8923
  %1092 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1083, %struct.Memory* %1006)
  %.pre535 = load i32, i32* %EAX.i8694, align 4
  %.pre536 = load i64, i64* %3, align 8
  %.pre537 = load i64, i64* %RSI.i766, align 8
  %.pre538 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8866

; <label>:1093:                                   ; preds = %routine_idivl__ecx.exit8923
  %1094 = srem i64 %1086, %1084
  %1095 = and i64 %1087, 4294967295
  store i64 %1095, i64* %RAX.i3176, align 8
  %1096 = and i64 %1094, 4294967295
  store i64 %1096, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1097 = trunc i64 %1087 to i32
  br label %routine_idivl__ecx.exit8866

routine_idivl__ecx.exit8866:                      ; preds = %1093, %1091
  %1098 = phi i64 [ %.pre538, %1091 ], [ %1052, %1093 ]
  %1099 = phi i64 [ %.pre537, %1091 ], [ %1074, %1093 ]
  %1100 = phi i64 [ %.pre536, %1091 ], [ %1083, %1093 ]
  %1101 = phi i32 [ %.pre535, %1091 ], [ %1097, %1093 ]
  %1102 = phi %struct.Memory* [ %1092, %1091 ], [ %1006, %1093 ]
  %1103 = sext i32 %1101 to i64
  store i64 %1103, i64* %R10.i8571, align 8
  %1104 = shl nsw i64 %1103, 1
  %1105 = add i64 %1099, %1104
  %1106 = add i64 %1100, 8
  store i64 %1106, i64* %3, align 8
  %1107 = inttoptr i64 %1105 to i16*
  %1108 = load i16, i16* %1107, align 2
  store i16 %1108, i16* %R9W.i8580, align 2
  %1109 = add i64 %1098, -16
  %1110 = add i64 %1100, 12
  store i64 %1110, i64* %3, align 8
  %1111 = inttoptr i64 %1109 to i64*
  %1112 = load i64, i64* %1111, align 8
  store i64 %1112, i64* %RSI.i766, align 8
  %1113 = add i64 %1112, 1600
  %1114 = add i64 %1100, 19
  store i64 %1114, i64* %3, align 8
  %1115 = inttoptr i64 %1113 to i64*
  %1116 = load i64, i64* %1115, align 8
  store i64 %1116, i64* %RSI.i766, align 8
  %1117 = add i64 %1100, 22
  store i64 %1117, i64* %3, align 8
  %1118 = inttoptr i64 %1116 to i64*
  %1119 = load i64, i64* %1118, align 8
  store i64 %1119, i64* %RSI.i766, align 8
  %1120 = add i64 %1098, -52
  %1121 = add i64 %1100, 26
  store i64 %1121, i64* %3, align 8
  %1122 = inttoptr i64 %1120 to i32*
  %1123 = load i32, i32* %1122, align 4
  %1124 = sext i32 %1123 to i64
  store i64 %1124, i64* %R10.i8571, align 8
  %1125 = shl nsw i64 %1124, 3
  %1126 = add i64 %1125, %1119
  %1127 = add i64 %1100, 30
  store i64 %1127, i64* %3, align 8
  %1128 = inttoptr i64 %1126 to i64*
  %1129 = load i64, i64* %1128, align 8
  store i64 %1129, i64* %RSI.i766, align 8
  %1130 = add i64 %1098, -56
  %1131 = add i64 %1100, 34
  store i64 %1131, i64* %3, align 8
  %1132 = inttoptr i64 %1130 to i32*
  %1133 = load i32, i32* %1132, align 4
  %1134 = sext i32 %1133 to i64
  store i64 %1134, i64* %R10.i8571, align 8
  %1135 = shl nsw i64 %1134, 1
  %1136 = add i64 %1135, %1129
  %1137 = add i64 %1100, 39
  store i64 %1137, i64* %3, align 8
  %1138 = inttoptr i64 %1136 to i16*
  store i16 %1108, i16* %1138, align 2
  %1139 = load i64, i64* %RBP.i, align 8
  %1140 = add i64 %1139, -40
  %1141 = load i64, i64* %3, align 8
  %1142 = add i64 %1141, 4
  store i64 %1142, i64* %3, align 8
  %1143 = inttoptr i64 %1140 to i64*
  %1144 = load i64, i64* %1143, align 8
  store i64 %1144, i64* %RSI.i766, align 8
  %1145 = add i64 %1144, 6480
  %1146 = add i64 %1141, 11
  store i64 %1146, i64* %3, align 8
  %1147 = inttoptr i64 %1145 to i64*
  %1148 = load i64, i64* %1147, align 8
  store i64 %1148, i64* %RSI.i766, align 8
  %1149 = add i64 %1148, 8
  %1150 = add i64 %1141, 15
  store i64 %1150, i64* %3, align 8
  %1151 = inttoptr i64 %1149 to i64*
  %1152 = load i64, i64* %1151, align 8
  store i64 %1152, i64* %RSI.i766, align 8
  %1153 = add i64 %1139, -52
  %1154 = add i64 %1141, 19
  store i64 %1154, i64* %3, align 8
  %1155 = inttoptr i64 %1153 to i32*
  %1156 = load i32, i32* %1155, align 4
  %1157 = sext i32 %1156 to i64
  store i64 %1157, i64* %R10.i8571, align 8
  %1158 = shl nsw i64 %1157, 3
  %1159 = add i64 %1158, %1152
  %1160 = add i64 %1141, 23
  store i64 %1160, i64* %3, align 8
  %1161 = inttoptr i64 %1159 to i64*
  %1162 = load i64, i64* %1161, align 8
  store i64 %1162, i64* %RSI.i766, align 8
  %1163 = add i64 %1139, -56
  %1164 = add i64 %1141, 26
  store i64 %1164, i64* %3, align 8
  %1165 = inttoptr i64 %1163 to i32*
  %1166 = load i32, i32* %1165, align 4
  %1167 = zext i32 %1166 to i64
  store i64 %1167, i64* %RAX.i3176, align 8
  %1168 = sext i32 %1166 to i64
  %1169 = lshr i64 %1168, 32
  store i64 %1169, i64* %314, align 8
  %1170 = load i32, i32* %ECX.i8872, align 4
  %1171 = add i64 %1141, 29
  store i64 %1171, i64* %3, align 8
  %1172 = sext i32 %1170 to i64
  %1173 = shl nuw i64 %1169, 32
  %1174 = or i64 %1173, %1167
  %1175 = sdiv i64 %1174, %1172
  %1176 = shl i64 %1175, 32
  %1177 = ashr exact i64 %1176, 32
  %1178 = icmp eq i64 %1175, %1177
  br i1 %1178, label %1181, label %1179

; <label>:1179:                                   ; preds = %routine_idivl__ecx.exit8866
  %1180 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1171, %struct.Memory* %1102)
  %.pre539 = load i32, i32* %EAX.i8694, align 4
  %.pre540 = load i64, i64* %3, align 8
  %.pre541 = load i64, i64* %RSI.i766, align 8
  %.pre542 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8816

; <label>:1181:                                   ; preds = %routine_idivl__ecx.exit8866
  %1182 = srem i64 %1174, %1172
  %1183 = and i64 %1175, 4294967295
  store i64 %1183, i64* %RAX.i3176, align 8
  %1184 = and i64 %1182, 4294967295
  store i64 %1184, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1185 = trunc i64 %1175 to i32
  br label %routine_idivl__ecx.exit8816

routine_idivl__ecx.exit8816:                      ; preds = %1181, %1179
  %1186 = phi i64 [ %.pre542, %1179 ], [ %1139, %1181 ]
  %1187 = phi i64 [ %.pre541, %1179 ], [ %1162, %1181 ]
  %1188 = phi i64 [ %.pre540, %1179 ], [ %1171, %1181 ]
  %1189 = phi i32 [ %.pre539, %1179 ], [ %1185, %1181 ]
  %1190 = phi %struct.Memory* [ %1180, %1179 ], [ %1102, %1181 ]
  %1191 = sext i32 %1189 to i64
  store i64 %1191, i64* %R10.i8571, align 8
  %1192 = shl nsw i64 %1191, 1
  %1193 = add i64 %1187, %1192
  %1194 = add i64 %1188, 8
  store i64 %1194, i64* %3, align 8
  %1195 = inttoptr i64 %1193 to i16*
  %1196 = load i16, i16* %1195, align 2
  store i16 %1196, i16* %R9W.i8580, align 2
  %1197 = add i64 %1186, -16
  %1198 = add i64 %1188, 12
  store i64 %1198, i64* %3, align 8
  %1199 = inttoptr i64 %1197 to i64*
  %1200 = load i64, i64* %1199, align 8
  store i64 %1200, i64* %RSI.i766, align 8
  %1201 = add i64 %1200, 1600
  %1202 = add i64 %1188, 19
  store i64 %1202, i64* %3, align 8
  %1203 = inttoptr i64 %1201 to i64*
  %1204 = load i64, i64* %1203, align 8
  store i64 %1204, i64* %RSI.i766, align 8
  %1205 = add i64 %1204, 8
  %1206 = add i64 %1188, 23
  store i64 %1206, i64* %3, align 8
  %1207 = inttoptr i64 %1205 to i64*
  %1208 = load i64, i64* %1207, align 8
  store i64 %1208, i64* %RSI.i766, align 8
  %1209 = add i64 %1186, -52
  %1210 = add i64 %1188, 27
  store i64 %1210, i64* %3, align 8
  %1211 = inttoptr i64 %1209 to i32*
  %1212 = load i32, i32* %1211, align 4
  %1213 = sext i32 %1212 to i64
  store i64 %1213, i64* %R10.i8571, align 8
  %1214 = shl nsw i64 %1213, 3
  %1215 = add i64 %1214, %1208
  %1216 = add i64 %1188, 31
  store i64 %1216, i64* %3, align 8
  %1217 = inttoptr i64 %1215 to i64*
  %1218 = load i64, i64* %1217, align 8
  store i64 %1218, i64* %RSI.i766, align 8
  %1219 = add i64 %1186, -56
  %1220 = add i64 %1188, 35
  store i64 %1220, i64* %3, align 8
  %1221 = inttoptr i64 %1219 to i32*
  %1222 = load i32, i32* %1221, align 4
  %1223 = sext i32 %1222 to i64
  store i64 %1223, i64* %R10.i8571, align 8
  %1224 = shl nsw i64 %1223, 1
  %1225 = add i64 %1224, %1218
  %1226 = add i64 %1188, 40
  store i64 %1226, i64* %3, align 8
  %1227 = inttoptr i64 %1225 to i16*
  store i16 %1196, i16* %1227, align 2
  %1228 = load i64, i64* %RBP.i, align 8
  %1229 = add i64 %1228, -32
  %1230 = load i64, i64* %3, align 8
  %1231 = add i64 %1230, 4
  store i64 %1231, i64* %3, align 8
  %1232 = inttoptr i64 %1229 to i64*
  %1233 = load i64, i64* %1232, align 8
  store i64 %1233, i64* %RSI.i766, align 8
  %1234 = add i64 %1233, 6496
  %1235 = add i64 %1230, 11
  store i64 %1235, i64* %3, align 8
  %1236 = inttoptr i64 %1234 to i64*
  %1237 = load i64, i64* %1236, align 8
  store i64 %1237, i64* %RSI.i766, align 8
  %1238 = add i64 %1230, 14
  store i64 %1238, i64* %3, align 8
  %1239 = inttoptr i64 %1237 to i64*
  %1240 = load i64, i64* %1239, align 8
  store i64 %1240, i64* %RSI.i766, align 8
  %1241 = add i64 %1228, -52
  %1242 = add i64 %1230, 18
  store i64 %1242, i64* %3, align 8
  %1243 = inttoptr i64 %1241 to i32*
  %1244 = load i32, i32* %1243, align 4
  %1245 = sext i32 %1244 to i64
  store i64 %1245, i64* %R10.i8571, align 8
  %1246 = shl nsw i64 %1245, 3
  %1247 = add i64 %1246, %1240
  %1248 = add i64 %1230, 22
  store i64 %1248, i64* %3, align 8
  %1249 = inttoptr i64 %1247 to i64*
  %1250 = load i64, i64* %1249, align 8
  store i64 %1250, i64* %RSI.i766, align 8
  %1251 = add i64 %1228, -56
  %1252 = add i64 %1230, 25
  store i64 %1252, i64* %3, align 8
  %1253 = inttoptr i64 %1251 to i32*
  %1254 = load i32, i32* %1253, align 4
  %1255 = zext i32 %1254 to i64
  store i64 %1255, i64* %RAX.i3176, align 8
  %1256 = sext i32 %1254 to i64
  %1257 = lshr i64 %1256, 32
  store i64 %1257, i64* %314, align 8
  %1258 = load i32, i32* %ECX.i8872, align 4
  %1259 = add i64 %1230, 28
  store i64 %1259, i64* %3, align 8
  %1260 = sext i32 %1258 to i64
  %1261 = shl nuw i64 %1257, 32
  %1262 = or i64 %1261, %1255
  %1263 = sdiv i64 %1262, %1260
  %1264 = shl i64 %1263, 32
  %1265 = ashr exact i64 %1264, 32
  %1266 = icmp eq i64 %1263, %1265
  br i1 %1266, label %1269, label %1267

; <label>:1267:                                   ; preds = %routine_idivl__ecx.exit8816
  %1268 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1259, %struct.Memory* %1190)
  %.pre543 = load i64, i64* %RBP.i, align 8
  %.pre544 = load i64, i64* %3, align 8
  %.pre545 = load i32, i32* %EAX.i8694, align 4
  br label %routine_idivl__ecx.exit8768

; <label>:1269:                                   ; preds = %routine_idivl__ecx.exit8816
  %1270 = srem i64 %1262, %1260
  %1271 = and i64 %1263, 4294967295
  store i64 %1271, i64* %RAX.i3176, align 8
  %1272 = and i64 %1270, 4294967295
  store i64 %1272, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1273 = trunc i64 %1263 to i32
  br label %routine_idivl__ecx.exit8768

routine_idivl__ecx.exit8768:                      ; preds = %1269, %1267
  %1274 = phi i32 [ %.pre545, %1267 ], [ %1273, %1269 ]
  %1275 = phi i64 [ %.pre544, %1267 ], [ %1259, %1269 ]
  %1276 = phi i64 [ %.pre543, %1267 ], [ %1228, %1269 ]
  %1277 = phi %struct.Memory* [ %1268, %1267 ], [ %1190, %1269 ]
  %1278 = add i64 %1276, -56
  %1279 = add i64 %1275, 3
  store i64 %1279, i64* %3, align 8
  %1280 = inttoptr i64 %1278 to i32*
  %1281 = load i32, i32* %1280, align 4
  %1282 = zext i32 %1281 to i64
  store i64 %1282, i64* %RDI.i732, align 8
  %1283 = add i64 %1276, -100
  %1284 = add i64 %1275, 6
  store i64 %1284, i64* %3, align 8
  %1285 = inttoptr i64 %1283 to i32*
  store i32 %1274, i32* %1285, align 4
  %1286 = load i32, i32* %EDI.i7794, align 4
  %1287 = zext i32 %1286 to i64
  %1288 = load i64, i64* %3, align 8
  store i64 %1287, i64* %RAX.i3176, align 8
  %1289 = sext i32 %1286 to i64
  %1290 = lshr i64 %1289, 32
  store i64 %1290, i64* %314, align 8
  %1291 = load i64, i64* %RBP.i, align 8
  %1292 = add i64 %1291, -84
  %1293 = add i64 %1288, 6
  store i64 %1293, i64* %3, align 8
  %1294 = inttoptr i64 %1292 to i32*
  %1295 = load i32, i32* %1294, align 4
  %1296 = zext i32 %1295 to i64
  store i64 %1296, i64* %RDI.i732, align 8
  %1297 = add i64 %1288, 8
  store i64 %1297, i64* %3, align 8
  %1298 = sext i32 %1295 to i64
  %1299 = shl nuw i64 %1290, 32
  %1300 = or i64 %1299, %1287
  %1301 = sdiv i64 %1300, %1298
  %1302 = shl i64 %1301, 32
  %1303 = ashr exact i64 %1302, 32
  %1304 = icmp eq i64 %1301, %1303
  br i1 %1304, label %1307, label %1305

; <label>:1305:                                   ; preds = %routine_idivl__ecx.exit8768
  %1306 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1297, %struct.Memory* %1277)
  %.pre546 = load i64, i64* %RAX.i3176, align 8
  %.pre547 = load i64, i64* %3, align 8
  %.pre548 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit8749

; <label>:1307:                                   ; preds = %routine_idivl__ecx.exit8768
  %1308 = srem i64 %1300, %1298
  %1309 = and i64 %1301, 4294967295
  store i64 %1309, i64* %RAX.i3176, align 8
  %1310 = and i64 %1308, 4294967295
  store i64 %1310, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  br label %routine_idivl__edi.exit8749

routine_idivl__edi.exit8749:                      ; preds = %1307, %1305
  %1311 = phi i64 [ %.pre548, %1305 ], [ %1291, %1307 ]
  %1312 = phi i64 [ %.pre547, %1305 ], [ %1297, %1307 ]
  %1313 = phi i64 [ %.pre546, %1305 ], [ %1309, %1307 ]
  %1314 = phi %struct.Memory* [ %1306, %1305 ], [ %1277, %1307 ]
  %.tr = trunc i64 %1313 to i32
  %1315 = shl i32 %.tr, 2
  %1316 = zext i32 %1315 to i64
  store i64 %1316, i64* %RAX.i3176, align 8
  %1317 = lshr i64 %1313, 30
  %1318 = trunc i64 %1317 to i8
  %1319 = and i8 %1318, 1
  store i8 %1319, i8* %19, align 1
  %1320 = and i32 %1315, 252
  %1321 = tail call i32 @llvm.ctpop.i32(i32 %1320)
  %1322 = trunc i32 %1321 to i8
  %1323 = and i8 %1322, 1
  %1324 = xor i8 %1323, 1
  store i8 %1324, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %1325 = icmp eq i32 %1315, 0
  %1326 = zext i1 %1325 to i8
  store i8 %1326, i8* %34, align 1
  %1327 = lshr i32 %.tr, 29
  %1328 = trunc i32 %1327 to i8
  %1329 = and i8 %1328, 1
  store i8 %1329, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1330 = add i64 %1311, -100
  %1331 = add i64 %1312, 7
  store i64 %1331, i64* %3, align 8
  %1332 = inttoptr i64 %1330 to i32*
  %1333 = load i32, i32* %1332, align 4
  %1334 = add i32 %1315, %1333
  %1335 = zext i32 %1334 to i64
  store i64 %1335, i64* %316, align 8
  %1336 = icmp ult i32 %1334, %1333
  %1337 = icmp ult i32 %1334, %1315
  %1338 = or i1 %1336, %1337
  %1339 = zext i1 %1338 to i8
  store i8 %1339, i8* %19, align 1
  %1340 = and i32 %1334, 255
  %1341 = tail call i32 @llvm.ctpop.i32(i32 %1340)
  %1342 = trunc i32 %1341 to i8
  %1343 = and i8 %1342, 1
  %1344 = xor i8 %1343, 1
  store i8 %1344, i8* %26, align 1
  %1345 = xor i32 %1315, %1333
  %1346 = xor i32 %1345, %1334
  %1347 = lshr i32 %1346, 4
  %1348 = trunc i32 %1347 to i8
  %1349 = and i8 %1348, 1
  store i8 %1349, i8* %31, align 1
  %1350 = icmp eq i32 %1334, 0
  %1351 = zext i1 %1350 to i8
  store i8 %1351, i8* %34, align 1
  %1352 = lshr i32 %1334, 31
  %1353 = trunc i32 %1352 to i8
  store i8 %1353, i8* %37, align 1
  %1354 = lshr i32 %1333, 31
  %1355 = lshr i32 %.tr, 29
  %1356 = and i32 %1355, 1
  %1357 = xor i32 %1352, %1354
  %1358 = xor i32 %1352, %1356
  %1359 = add nuw nsw i32 %1357, %1358
  %1360 = icmp eq i32 %1359, 2
  %1361 = zext i1 %1360 to i8
  store i8 %1361, i8* %43, align 1
  %1362 = sext i32 %1334 to i64
  store i64 %1362, i64* %R10.i8571, align 8
  %1363 = load i64, i64* %RSI.i766, align 8
  %1364 = shl nsw i64 %1362, 3
  %1365 = add i64 %1363, %1364
  %1366 = add i64 %1312, 17
  store i64 %1366, i64* %3, align 8
  %1367 = inttoptr i64 %1365 to i64*
  %1368 = load i64, i64* %1367, align 8
  store i64 %1368, i64* %RSI.i766, align 8
  %1369 = add i64 %1311, -16
  %1370 = add i64 %1312, 21
  store i64 %1370, i64* %3, align 8
  %1371 = inttoptr i64 %1369 to i64*
  %1372 = load i64, i64* %1371, align 8
  store i64 %1372, i64* %R10.i8571, align 8
  %1373 = add i64 %1372, 1608
  %1374 = add i64 %1312, 28
  store i64 %1374, i64* %3, align 8
  %1375 = inttoptr i64 %1373 to i64*
  %1376 = load i64, i64* %1375, align 8
  store i64 %1376, i64* %R10.i8571, align 8
  %1377 = add i64 %1312, 31
  store i64 %1377, i64* %3, align 8
  %1378 = inttoptr i64 %1376 to i64*
  %1379 = load i64, i64* %1378, align 8
  store i64 %1379, i64* %R10.i8571, align 8
  %1380 = load i64, i64* %RBP.i, align 8
  %1381 = add i64 %1380, -52
  %1382 = add i64 %1312, 35
  store i64 %1382, i64* %3, align 8
  %1383 = inttoptr i64 %1381 to i32*
  %1384 = load i32, i32* %1383, align 4
  %1385 = sext i32 %1384 to i64
  store i64 %1385, i64* %RBX.i133, align 8
  %1386 = shl nsw i64 %1385, 3
  %1387 = add i64 %1386, %1379
  %1388 = add i64 %1312, 39
  store i64 %1388, i64* %3, align 8
  %1389 = inttoptr i64 %1387 to i64*
  %1390 = load i64, i64* %1389, align 8
  store i64 %1390, i64* %R10.i8571, align 8
  %1391 = add i64 %1380, -56
  %1392 = add i64 %1312, 43
  store i64 %1392, i64* %3, align 8
  %1393 = inttoptr i64 %1391 to i32*
  %1394 = load i32, i32* %1393, align 4
  %1395 = sext i32 %1394 to i64
  store i64 %1395, i64* %RBX.i133, align 8
  %1396 = shl nsw i64 %1395, 3
  %1397 = add i64 %1396, %1390
  %1398 = add i64 %1312, 47
  store i64 %1398, i64* %3, align 8
  %1399 = inttoptr i64 %1397 to i64*
  store i64 %1368, i64* %1399, align 8
  %1400 = load i64, i64* %RBP.i, align 8
  %1401 = add i64 %1400, -32
  %1402 = load i64, i64* %3, align 8
  %1403 = add i64 %1402, 4
  store i64 %1403, i64* %3, align 8
  %1404 = inttoptr i64 %1401 to i64*
  %1405 = load i64, i64* %1404, align 8
  store i64 %1405, i64* %RSI.i766, align 8
  %1406 = add i64 %1405, 6496
  %1407 = add i64 %1402, 11
  store i64 %1407, i64* %3, align 8
  %1408 = inttoptr i64 %1406 to i64*
  %1409 = load i64, i64* %1408, align 8
  store i64 %1409, i64* %RSI.i766, align 8
  %1410 = add i64 %1409, 8
  %1411 = add i64 %1402, 15
  store i64 %1411, i64* %3, align 8
  %1412 = inttoptr i64 %1410 to i64*
  %1413 = load i64, i64* %1412, align 8
  store i64 %1413, i64* %RSI.i766, align 8
  %1414 = add i64 %1400, -52
  %1415 = add i64 %1402, 19
  store i64 %1415, i64* %3, align 8
  %1416 = inttoptr i64 %1414 to i32*
  %1417 = load i32, i32* %1416, align 4
  %1418 = sext i32 %1417 to i64
  store i64 %1418, i64* %R10.i8571, align 8
  %1419 = shl nsw i64 %1418, 3
  %1420 = add i64 %1419, %1413
  %1421 = add i64 %1402, 23
  store i64 %1421, i64* %3, align 8
  %1422 = inttoptr i64 %1420 to i64*
  %1423 = load i64, i64* %1422, align 8
  store i64 %1423, i64* %RSI.i766, align 8
  %1424 = add i64 %1400, -56
  %1425 = add i64 %1402, 26
  store i64 %1425, i64* %3, align 8
  %1426 = inttoptr i64 %1424 to i32*
  %1427 = load i32, i32* %1426, align 4
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RAX.i3176, align 8
  %1429 = sext i32 %1427 to i64
  %1430 = lshr i64 %1429, 32
  store i64 %1430, i64* %314, align 8
  %1431 = load i32, i32* %ECX.i8872, align 4
  %1432 = add i64 %1402, 29
  store i64 %1432, i64* %3, align 8
  %1433 = sext i32 %1431 to i64
  %1434 = shl nuw i64 %1430, 32
  %1435 = or i64 %1434, %1428
  %1436 = sdiv i64 %1435, %1433
  %1437 = shl i64 %1436, 32
  %1438 = ashr exact i64 %1437, 32
  %1439 = icmp eq i64 %1436, %1438
  br i1 %1439, label %1442, label %1440

; <label>:1440:                                   ; preds = %routine_idivl__edi.exit8749
  %1441 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1432, %struct.Memory* %1314)
  %.pre549 = load i64, i64* %RBP.i, align 8
  %.pre550 = load i64, i64* %3, align 8
  %.pre551 = load i32, i32* %EAX.i8694, align 4
  br label %routine_idivl__ecx.exit8692

; <label>:1442:                                   ; preds = %routine_idivl__edi.exit8749
  %1443 = srem i64 %1435, %1433
  %1444 = and i64 %1436, 4294967295
  store i64 %1444, i64* %RAX.i3176, align 8
  %1445 = and i64 %1443, 4294967295
  store i64 %1445, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1446 = trunc i64 %1436 to i32
  br label %routine_idivl__ecx.exit8692

routine_idivl__ecx.exit8692:                      ; preds = %1442, %1440
  %1447 = phi i32 [ %.pre551, %1440 ], [ %1446, %1442 ]
  %1448 = phi i64 [ %.pre550, %1440 ], [ %1432, %1442 ]
  %1449 = phi i64 [ %.pre549, %1440 ], [ %1400, %1442 ]
  %1450 = phi %struct.Memory* [ %1441, %1440 ], [ %1314, %1442 ]
  %1451 = add i64 %1449, -56
  %1452 = add i64 %1448, 3
  store i64 %1452, i64* %3, align 8
  %1453 = inttoptr i64 %1451 to i32*
  %1454 = load i32, i32* %1453, align 4
  %1455 = zext i32 %1454 to i64
  store i64 %1455, i64* %RCX.i8538, align 8
  %1456 = add i64 %1449, -104
  %1457 = add i64 %1448, 6
  store i64 %1457, i64* %3, align 8
  %1458 = inttoptr i64 %1456 to i32*
  store i32 %1447, i32* %1458, align 4
  %1459 = load i32, i32* %ECX.i8872, align 4
  %1460 = zext i32 %1459 to i64
  %1461 = load i64, i64* %3, align 8
  store i64 %1460, i64* %RAX.i3176, align 8
  %1462 = sext i32 %1459 to i64
  %1463 = lshr i64 %1462, 32
  store i64 %1463, i64* %314, align 8
  %1464 = load i32, i32* %EDI.i7794, align 4
  %1465 = add i64 %1461, 5
  store i64 %1465, i64* %3, align 8
  %1466 = sext i32 %1464 to i64
  %1467 = shl nuw i64 %1463, 32
  %1468 = or i64 %1467, %1460
  %1469 = sdiv i64 %1468, %1466
  %1470 = shl i64 %1469, 32
  %1471 = ashr exact i64 %1470, 32
  %1472 = icmp eq i64 %1469, %1471
  br i1 %1472, label %1475, label %1473

; <label>:1473:                                   ; preds = %routine_idivl__ecx.exit8692
  %1474 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1465, %struct.Memory* %1450)
  %.pre552 = load i64, i64* %RAX.i3176, align 8
  %.pre553 = load i64, i64* %3, align 8
  br label %routine_idivl__edi.exit8676

; <label>:1475:                                   ; preds = %routine_idivl__ecx.exit8692
  %1476 = srem i64 %1468, %1466
  %1477 = and i64 %1469, 4294967295
  store i64 %1477, i64* %RAX.i3176, align 8
  %1478 = and i64 %1476, 4294967295
  store i64 %1478, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  br label %routine_idivl__edi.exit8676

routine_idivl__edi.exit8676:                      ; preds = %1475, %1473
  %1479 = phi i64 [ %.pre553, %1473 ], [ %1465, %1475 ]
  %1480 = phi i64 [ %.pre552, %1473 ], [ %1477, %1475 ]
  %1481 = phi %struct.Memory* [ %1474, %1473 ], [ %1450, %1475 ]
  %.tr158 = trunc i64 %1480 to i32
  %1482 = shl i32 %.tr158, 2
  %1483 = zext i32 %1482 to i64
  store i64 %1483, i64* %RAX.i3176, align 8
  %1484 = lshr i64 %1480, 30
  %1485 = trunc i64 %1484 to i8
  %1486 = and i8 %1485, 1
  store i8 %1486, i8* %19, align 1
  %1487 = and i32 %1482, 252
  %1488 = tail call i32 @llvm.ctpop.i32(i32 %1487)
  %1489 = trunc i32 %1488 to i8
  %1490 = and i8 %1489, 1
  %1491 = xor i8 %1490, 1
  store i8 %1491, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %1492 = icmp eq i32 %1482, 0
  %1493 = zext i1 %1492 to i8
  store i8 %1493, i8* %34, align 1
  %1494 = lshr i32 %.tr158, 29
  %1495 = trunc i32 %1494 to i8
  %1496 = and i8 %1495, 1
  store i8 %1496, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1497 = load i64, i64* %RBP.i, align 8
  %1498 = add i64 %1497, -104
  %1499 = add i64 %1479, 6
  store i64 %1499, i64* %3, align 8
  %1500 = inttoptr i64 %1498 to i32*
  %1501 = load i32, i32* %1500, align 4
  %1502 = add i32 %1482, %1501
  %1503 = zext i32 %1502 to i64
  store i64 %1503, i64* %RCX.i8538, align 8
  %1504 = icmp ult i32 %1502, %1501
  %1505 = icmp ult i32 %1502, %1482
  %1506 = or i1 %1504, %1505
  %1507 = zext i1 %1506 to i8
  store i8 %1507, i8* %19, align 1
  %1508 = and i32 %1502, 255
  %1509 = tail call i32 @llvm.ctpop.i32(i32 %1508)
  %1510 = trunc i32 %1509 to i8
  %1511 = and i8 %1510, 1
  %1512 = xor i8 %1511, 1
  store i8 %1512, i8* %26, align 1
  %1513 = xor i32 %1482, %1501
  %1514 = xor i32 %1513, %1502
  %1515 = lshr i32 %1514, 4
  %1516 = trunc i32 %1515 to i8
  %1517 = and i8 %1516, 1
  store i8 %1517, i8* %31, align 1
  %1518 = icmp eq i32 %1502, 0
  %1519 = zext i1 %1518 to i8
  store i8 %1519, i8* %34, align 1
  %1520 = lshr i32 %1502, 31
  %1521 = trunc i32 %1520 to i8
  store i8 %1521, i8* %37, align 1
  %1522 = lshr i32 %1501, 31
  %1523 = lshr i32 %.tr158, 29
  %1524 = and i32 %1523, 1
  %1525 = xor i32 %1520, %1522
  %1526 = xor i32 %1520, %1524
  %1527 = add nuw nsw i32 %1525, %1526
  %1528 = icmp eq i32 %1527, 2
  %1529 = zext i1 %1528 to i8
  store i8 %1529, i8* %43, align 1
  %1530 = sext i32 %1502 to i64
  store i64 %1530, i64* %R10.i8571, align 8
  %1531 = load i64, i64* %RSI.i766, align 8
  %1532 = shl nsw i64 %1530, 3
  %1533 = add i64 %1531, %1532
  %1534 = add i64 %1479, 15
  store i64 %1534, i64* %3, align 8
  %1535 = inttoptr i64 %1533 to i64*
  %1536 = load i64, i64* %1535, align 8
  store i64 %1536, i64* %RSI.i766, align 8
  %1537 = add i64 %1497, -16
  %1538 = add i64 %1479, 19
  store i64 %1538, i64* %3, align 8
  %1539 = inttoptr i64 %1537 to i64*
  %1540 = load i64, i64* %1539, align 8
  store i64 %1540, i64* %R10.i8571, align 8
  %1541 = add i64 %1540, 1608
  %1542 = add i64 %1479, 26
  store i64 %1542, i64* %3, align 8
  %1543 = inttoptr i64 %1541 to i64*
  %1544 = load i64, i64* %1543, align 8
  store i64 %1544, i64* %R10.i8571, align 8
  %1545 = add i64 %1544, 8
  %1546 = add i64 %1479, 30
  store i64 %1546, i64* %3, align 8
  %1547 = inttoptr i64 %1545 to i64*
  %1548 = load i64, i64* %1547, align 8
  store i64 %1548, i64* %R10.i8571, align 8
  %1549 = add i64 %1497, -52
  %1550 = add i64 %1479, 34
  store i64 %1550, i64* %3, align 8
  %1551 = inttoptr i64 %1549 to i32*
  %1552 = load i32, i32* %1551, align 4
  %1553 = sext i32 %1552 to i64
  store i64 %1553, i64* %RBX.i133, align 8
  %1554 = shl nsw i64 %1553, 3
  %1555 = add i64 %1554, %1548
  %1556 = add i64 %1479, 38
  store i64 %1556, i64* %3, align 8
  %1557 = inttoptr i64 %1555 to i64*
  %1558 = load i64, i64* %1557, align 8
  store i64 %1558, i64* %R10.i8571, align 8
  %1559 = add i64 %1497, -56
  %1560 = add i64 %1479, 42
  store i64 %1560, i64* %3, align 8
  %1561 = inttoptr i64 %1559 to i32*
  %1562 = load i32, i32* %1561, align 4
  %1563 = sext i32 %1562 to i64
  store i64 %1563, i64* %RBX.i133, align 8
  %1564 = shl nsw i64 %1563, 3
  %1565 = add i64 %1564, %1558
  %1566 = add i64 %1479, 46
  store i64 %1566, i64* %3, align 8
  %1567 = inttoptr i64 %1565 to i64*
  store i64 %1536, i64* %1567, align 8
  %1568 = load i64, i64* %RBP.i, align 8
  %1569 = add i64 %1568, -40
  %1570 = load i64, i64* %3, align 8
  %1571 = add i64 %1570, 4
  store i64 %1571, i64* %3, align 8
  %1572 = inttoptr i64 %1569 to i64*
  %1573 = load i64, i64* %1572, align 8
  store i64 %1573, i64* %RSI.i766, align 8
  %1574 = add i64 %1573, 6376
  %1575 = add i64 %1570, 10
  store i64 %1575, i64* %3, align 8
  %1576 = inttoptr i64 %1574 to i32*
  %1577 = load i32, i32* %1576, align 4
  %1578 = zext i32 %1577 to i64
  store i64 %1578, i64* %RAX.i3176, align 8
  %1579 = add i64 %1568, -16
  %1580 = add i64 %1570, 14
  store i64 %1580, i64* %3, align 8
  %1581 = inttoptr i64 %1579 to i64*
  %1582 = load i64, i64* %1581, align 8
  store i64 %1582, i64* %RSI.i766, align 8
  %1583 = add i64 %1582, 4864
  %1584 = add i64 %1570, 20
  store i64 %1584, i64* %3, align 8
  %1585 = inttoptr i64 %1583 to i32*
  store i32 %1577, i32* %1585, align 4
  %1586 = load i64, i64* %3, align 8
  %1587 = add i64 %1586, 666
  store i64 %1587, i64* %3, align 8
  br label %block_.L_455d12

block_.L_455a7d:                                  ; preds = %block_4557aa
  %1588 = add i64 %621, -48
  %1589 = add i64 %655, 14
  store i64 %1589, i64* %3, align 8
  %1590 = inttoptr i64 %1588 to i64*
  %1591 = load i64, i64* %1590, align 8
  store i64 %1591, i64* %RDX.i8595, align 8
  %1592 = add i64 %1591, 6504
  %1593 = add i64 %655, 21
  store i64 %1593, i64* %3, align 8
  %1594 = inttoptr i64 %1592 to i64*
  %1595 = load i64, i64* %1594, align 8
  store i64 %1595, i64* %RDX.i8595, align 8
  %1596 = add i64 %655, 24
  store i64 %1596, i64* %3, align 8
  %1597 = inttoptr i64 %1595 to i64*
  %1598 = load i64, i64* %1597, align 8
  store i64 %1598, i64* %RDX.i8595, align 8
  %1599 = add i64 %621, -52
  %1600 = add i64 %655, 28
  store i64 %1600, i64* %3, align 8
  %1601 = inttoptr i64 %1599 to i32*
  %1602 = load i32, i32* %1601, align 4
  %1603 = sext i32 %1602 to i64
  store i64 %1603, i64* %RSI.i766, align 8
  %1604 = shl nsw i64 %1603, 3
  %1605 = add i64 %1604, %1598
  %1606 = add i64 %655, 32
  store i64 %1606, i64* %3, align 8
  %1607 = inttoptr i64 %1605 to i64*
  %1608 = load i64, i64* %1607, align 8
  store i64 %1608, i64* %RDX.i8595, align 8
  %1609 = add i64 %621, -56
  %1610 = add i64 %655, 35
  store i64 %1610, i64* %3, align 8
  %1611 = inttoptr i64 %1609 to i32*
  %1612 = load i32, i32* %1611, align 4
  %1613 = zext i32 %1612 to i64
  store i64 %1613, i64* %RDI.i732, align 8
  %1614 = add i64 %621, -108
  %1615 = add i64 %655, 38
  store i64 %1615, i64* %3, align 8
  %1616 = inttoptr i64 %1614 to i32*
  store i32 8, i32* %1616, align 4
  %1617 = load i32, i32* %EDI.i7794, align 4
  %1618 = zext i32 %1617 to i64
  %1619 = load i64, i64* %3, align 8
  store i64 %1618, i64* %RAX.i3176, align 8
  %1620 = load i64, i64* %RBP.i, align 8
  %1621 = add i64 %1620, -120
  %1622 = load i64, i64* %RDX.i8595, align 8
  %1623 = add i64 %1619, 6
  store i64 %1623, i64* %3, align 8
  %1624 = inttoptr i64 %1621 to i64*
  store i64 %1622, i64* %1624, align 8
  %1625 = load i64, i64* %3, align 8
  %1626 = load i32, i32* %EAX.i8694, align 8
  %1627 = sext i32 %1626 to i64
  %1628 = lshr i64 %1627, 32
  store i64 %1628, i64* %314, align 8
  %1629 = load i32, i32* %ECX.i8872, align 4
  %1630 = add i64 %1625, 3
  store i64 %1630, i64* %3, align 8
  %1631 = zext i32 %1626 to i64
  %1632 = sext i32 %1629 to i64
  %1633 = shl nuw i64 %1628, 32
  %1634 = or i64 %1633, %1631
  %1635 = sdiv i64 %1634, %1632
  %1636 = shl i64 %1635, 32
  %1637 = ashr exact i64 %1636, 32
  %1638 = icmp eq i64 %1635, %1637
  br i1 %1638, label %1641, label %1639

; <label>:1639:                                   ; preds = %block_.L_455a7d
  %1640 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1630, %struct.Memory* %620)
  %.pre554 = load i32, i32* %EAX.i8694, align 4
  %.pre555 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit8593

; <label>:1641:                                   ; preds = %block_.L_455a7d
  %1642 = srem i64 %1634, %1632
  %1643 = and i64 %1635, 4294967295
  store i64 %1643, i64* %RAX.i3176, align 8
  %1644 = and i64 %1642, 4294967295
  store i64 %1644, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1645 = trunc i64 %1635 to i32
  br label %routine_idivl__ecx.exit8593

routine_idivl__ecx.exit8593:                      ; preds = %1641, %1639
  %1646 = phi i64 [ %.pre555, %1639 ], [ %1630, %1641 ]
  %1647 = phi i32 [ %.pre554, %1639 ], [ %1645, %1641 ]
  %1648 = phi %struct.Memory* [ %1640, %1639 ], [ %620, %1641 ]
  %1649 = sext i32 %1647 to i64
  store i64 %1649, i64* %RSI.i766, align 8
  %1650 = load i64, i64* %RBP.i, align 8
  %1651 = add i64 %1650, -120
  %1652 = add i64 %1646, 7
  store i64 %1652, i64* %3, align 8
  %1653 = inttoptr i64 %1651 to i64*
  %1654 = load i64, i64* %1653, align 8
  store i64 %1654, i64* %R8.i8587, align 8
  %1655 = shl nsw i64 %1649, 3
  %1656 = add i64 %1655, %1654
  %1657 = add i64 %1646, 11
  store i64 %1657, i64* %3, align 8
  %1658 = inttoptr i64 %1656 to i64*
  %1659 = load i64, i64* %1658, align 8
  store i64 %1659, i64* %RSI.i766, align 8
  %1660 = add i64 %1646, 15
  store i64 %1660, i64* %3, align 8
  %1661 = inttoptr i64 %1659 to i16*
  %1662 = load i16, i16* %1661, align 2
  store i16 %1662, i16* %R9W.i8580, align 2
  %1663 = add i64 %1650, -16
  %1664 = add i64 %1646, 19
  store i64 %1664, i64* %3, align 8
  %1665 = inttoptr i64 %1663 to i64*
  %1666 = load i64, i64* %1665, align 8
  store i64 %1666, i64* %RSI.i766, align 8
  %1667 = add i64 %1666, 1616
  %1668 = add i64 %1646, 26
  store i64 %1668, i64* %3, align 8
  %1669 = inttoptr i64 %1667 to i64*
  %1670 = load i64, i64* %1669, align 8
  store i64 %1670, i64* %RSI.i766, align 8
  %1671 = add i64 %1646, 29
  store i64 %1671, i64* %3, align 8
  %1672 = inttoptr i64 %1670 to i64*
  %1673 = load i64, i64* %1672, align 8
  store i64 %1673, i64* %RSI.i766, align 8
  %1674 = add i64 %1650, -52
  %1675 = add i64 %1646, 33
  store i64 %1675, i64* %3, align 8
  %1676 = inttoptr i64 %1674 to i32*
  %1677 = load i32, i32* %1676, align 4
  %1678 = sext i32 %1677 to i64
  store i64 %1678, i64* %R10.i8571, align 8
  %1679 = shl nsw i64 %1678, 3
  %1680 = add i64 %1679, %1673
  %1681 = add i64 %1646, 37
  store i64 %1681, i64* %3, align 8
  %1682 = inttoptr i64 %1680 to i64*
  %1683 = load i64, i64* %1682, align 8
  store i64 %1683, i64* %RSI.i766, align 8
  %1684 = add i64 %1650, -56
  %1685 = add i64 %1646, 41
  store i64 %1685, i64* %3, align 8
  %1686 = inttoptr i64 %1684 to i32*
  %1687 = load i32, i32* %1686, align 4
  %1688 = sext i32 %1687 to i64
  store i64 %1688, i64* %R10.i8571, align 8
  %1689 = shl nsw i64 %1688, 3
  %1690 = add i64 %1689, %1683
  %1691 = add i64 %1646, 45
  store i64 %1691, i64* %3, align 8
  %1692 = inttoptr i64 %1690 to i64*
  %1693 = load i64, i64* %1692, align 8
  store i64 %1693, i64* %RSI.i766, align 8
  %1694 = add i64 %1646, 49
  store i64 %1694, i64* %3, align 8
  %1695 = inttoptr i64 %1693 to i16*
  store i16 %1662, i16* %1695, align 2
  %1696 = load i64, i64* %RBP.i, align 8
  %1697 = add i64 %1696, -48
  %1698 = load i64, i64* %3, align 8
  %1699 = add i64 %1698, 4
  store i64 %1699, i64* %3, align 8
  %1700 = inttoptr i64 %1697 to i64*
  %1701 = load i64, i64* %1700, align 8
  store i64 %1701, i64* %RSI.i766, align 8
  %1702 = add i64 %1701, 6504
  %1703 = add i64 %1698, 11
  store i64 %1703, i64* %3, align 8
  %1704 = inttoptr i64 %1702 to i64*
  %1705 = load i64, i64* %1704, align 8
  store i64 %1705, i64* %RSI.i766, align 8
  %1706 = add i64 %1698, 14
  store i64 %1706, i64* %3, align 8
  %1707 = inttoptr i64 %1705 to i64*
  %1708 = load i64, i64* %1707, align 8
  store i64 %1708, i64* %RSI.i766, align 8
  %1709 = add i64 %1696, -52
  %1710 = add i64 %1698, 18
  store i64 %1710, i64* %3, align 8
  %1711 = inttoptr i64 %1709 to i32*
  %1712 = load i32, i32* %1711, align 4
  %1713 = sext i32 %1712 to i64
  store i64 %1713, i64* %R10.i8571, align 8
  %1714 = shl nsw i64 %1713, 3
  %1715 = add i64 %1714, %1708
  %1716 = add i64 %1698, 22
  store i64 %1716, i64* %3, align 8
  %1717 = inttoptr i64 %1715 to i64*
  %1718 = load i64, i64* %1717, align 8
  store i64 %1718, i64* %RSI.i766, align 8
  %1719 = add i64 %1696, -56
  %1720 = add i64 %1698, 25
  store i64 %1720, i64* %3, align 8
  %1721 = inttoptr i64 %1719 to i32*
  %1722 = load i32, i32* %1721, align 4
  %1723 = zext i32 %1722 to i64
  store i64 %1723, i64* %RAX.i3176, align 8
  %1724 = sext i32 %1722 to i64
  %1725 = lshr i64 %1724, 32
  store i64 %1725, i64* %314, align 8
  %1726 = load i32, i32* %ECX.i8872, align 4
  %1727 = add i64 %1698, 28
  store i64 %1727, i64* %3, align 8
  %1728 = sext i32 %1726 to i64
  %1729 = shl nuw i64 %1725, 32
  %1730 = or i64 %1729, %1723
  %1731 = sdiv i64 %1730, %1728
  %1732 = shl i64 %1731, 32
  %1733 = ashr exact i64 %1732, 32
  %1734 = icmp eq i64 %1731, %1733
  br i1 %1734, label %1737, label %1735

; <label>:1735:                                   ; preds = %routine_idivl__ecx.exit8593
  %1736 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1727, %struct.Memory* %1648)
  %.pre556 = load i32, i32* %EAX.i8694, align 4
  %.pre557 = load i64, i64* %3, align 8
  %.pre558 = load i64, i64* %RSI.i766, align 8
  %.pre559 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8536

; <label>:1737:                                   ; preds = %routine_idivl__ecx.exit8593
  %1738 = srem i64 %1730, %1728
  %1739 = and i64 %1731, 4294967295
  store i64 %1739, i64* %RAX.i3176, align 8
  %1740 = and i64 %1738, 4294967295
  store i64 %1740, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1741 = trunc i64 %1731 to i32
  br label %routine_idivl__ecx.exit8536

routine_idivl__ecx.exit8536:                      ; preds = %1737, %1735
  %1742 = phi i64 [ %.pre559, %1735 ], [ %1696, %1737 ]
  %1743 = phi i64 [ %.pre558, %1735 ], [ %1718, %1737 ]
  %1744 = phi i64 [ %.pre557, %1735 ], [ %1727, %1737 ]
  %1745 = phi i32 [ %.pre556, %1735 ], [ %1741, %1737 ]
  %1746 = phi %struct.Memory* [ %1736, %1735 ], [ %1648, %1737 ]
  %1747 = sext i32 %1745 to i64
  store i64 %1747, i64* %R10.i8571, align 8
  %1748 = shl nsw i64 %1747, 3
  %1749 = add i64 %1743, %1748
  %1750 = add i64 %1744, 7
  store i64 %1750, i64* %3, align 8
  %1751 = inttoptr i64 %1749 to i64*
  %1752 = load i64, i64* %1751, align 8
  store i64 %1752, i64* %RSI.i766, align 8
  %1753 = add i64 %1752, 2
  %1754 = add i64 %1744, 12
  store i64 %1754, i64* %3, align 8
  %1755 = inttoptr i64 %1753 to i16*
  %1756 = load i16, i16* %1755, align 2
  store i16 %1756, i16* %R9W.i8580, align 2
  %1757 = add i64 %1742, -16
  %1758 = add i64 %1744, 16
  store i64 %1758, i64* %3, align 8
  %1759 = inttoptr i64 %1757 to i64*
  %1760 = load i64, i64* %1759, align 8
  store i64 %1760, i64* %RSI.i766, align 8
  %1761 = add i64 %1760, 1616
  %1762 = add i64 %1744, 23
  store i64 %1762, i64* %3, align 8
  %1763 = inttoptr i64 %1761 to i64*
  %1764 = load i64, i64* %1763, align 8
  store i64 %1764, i64* %RSI.i766, align 8
  %1765 = add i64 %1744, 26
  store i64 %1765, i64* %3, align 8
  %1766 = inttoptr i64 %1764 to i64*
  %1767 = load i64, i64* %1766, align 8
  store i64 %1767, i64* %RSI.i766, align 8
  %1768 = add i64 %1742, -52
  %1769 = add i64 %1744, 30
  store i64 %1769, i64* %3, align 8
  %1770 = inttoptr i64 %1768 to i32*
  %1771 = load i32, i32* %1770, align 4
  %1772 = sext i32 %1771 to i64
  store i64 %1772, i64* %R10.i8571, align 8
  %1773 = shl nsw i64 %1772, 3
  %1774 = add i64 %1773, %1767
  %1775 = add i64 %1744, 34
  store i64 %1775, i64* %3, align 8
  %1776 = inttoptr i64 %1774 to i64*
  %1777 = load i64, i64* %1776, align 8
  store i64 %1777, i64* %RSI.i766, align 8
  %1778 = add i64 %1742, -56
  %1779 = add i64 %1744, 38
  store i64 %1779, i64* %3, align 8
  %1780 = inttoptr i64 %1778 to i32*
  %1781 = load i32, i32* %1780, align 4
  %1782 = sext i32 %1781 to i64
  store i64 %1782, i64* %R10.i8571, align 8
  %1783 = shl nsw i64 %1782, 3
  %1784 = add i64 %1783, %1777
  %1785 = add i64 %1744, 42
  store i64 %1785, i64* %3, align 8
  %1786 = inttoptr i64 %1784 to i64*
  %1787 = load i64, i64* %1786, align 8
  store i64 %1787, i64* %RSI.i766, align 8
  %1788 = add i64 %1787, 2
  %1789 = add i64 %1744, 47
  store i64 %1789, i64* %3, align 8
  %1790 = inttoptr i64 %1788 to i16*
  store i16 %1756, i16* %1790, align 2
  %1791 = load i64, i64* %RBP.i, align 8
  %1792 = add i64 %1791, -48
  %1793 = load i64, i64* %3, align 8
  %1794 = add i64 %1793, 4
  store i64 %1794, i64* %3, align 8
  %1795 = inttoptr i64 %1792 to i64*
  %1796 = load i64, i64* %1795, align 8
  store i64 %1796, i64* %RSI.i766, align 8
  %1797 = add i64 %1796, 6504
  %1798 = add i64 %1793, 11
  store i64 %1798, i64* %3, align 8
  %1799 = inttoptr i64 %1797 to i64*
  %1800 = load i64, i64* %1799, align 8
  store i64 %1800, i64* %RSI.i766, align 8
  %1801 = add i64 %1800, 8
  %1802 = add i64 %1793, 15
  store i64 %1802, i64* %3, align 8
  %1803 = inttoptr i64 %1801 to i64*
  %1804 = load i64, i64* %1803, align 8
  store i64 %1804, i64* %RSI.i766, align 8
  %1805 = add i64 %1791, -52
  %1806 = add i64 %1793, 19
  store i64 %1806, i64* %3, align 8
  %1807 = inttoptr i64 %1805 to i32*
  %1808 = load i32, i32* %1807, align 4
  %1809 = sext i32 %1808 to i64
  store i64 %1809, i64* %R10.i8571, align 8
  %1810 = shl nsw i64 %1809, 3
  %1811 = add i64 %1810, %1804
  %1812 = add i64 %1793, 23
  store i64 %1812, i64* %3, align 8
  %1813 = inttoptr i64 %1811 to i64*
  %1814 = load i64, i64* %1813, align 8
  store i64 %1814, i64* %RSI.i766, align 8
  %1815 = add i64 %1791, -56
  %1816 = add i64 %1793, 26
  store i64 %1816, i64* %3, align 8
  %1817 = inttoptr i64 %1815 to i32*
  %1818 = load i32, i32* %1817, align 4
  %1819 = zext i32 %1818 to i64
  store i64 %1819, i64* %RAX.i3176, align 8
  %1820 = sext i32 %1818 to i64
  %1821 = lshr i64 %1820, 32
  store i64 %1821, i64* %314, align 8
  %1822 = load i32, i32* %ECX.i8872, align 4
  %1823 = add i64 %1793, 29
  store i64 %1823, i64* %3, align 8
  %1824 = sext i32 %1822 to i64
  %1825 = shl nuw i64 %1821, 32
  %1826 = or i64 %1825, %1819
  %1827 = sdiv i64 %1826, %1824
  %1828 = shl i64 %1827, 32
  %1829 = ashr exact i64 %1828, 32
  %1830 = icmp eq i64 %1827, %1829
  br i1 %1830, label %1833, label %1831

; <label>:1831:                                   ; preds = %routine_idivl__ecx.exit8536
  %1832 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1823, %struct.Memory* %1746)
  %.pre560 = load i32, i32* %EAX.i8694, align 4
  %.pre561 = load i64, i64* %3, align 8
  %.pre562 = load i64, i64* %RSI.i766, align 8
  %.pre563 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8483

; <label>:1833:                                   ; preds = %routine_idivl__ecx.exit8536
  %1834 = srem i64 %1826, %1824
  %1835 = and i64 %1827, 4294967295
  store i64 %1835, i64* %RAX.i3176, align 8
  %1836 = and i64 %1834, 4294967295
  store i64 %1836, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1837 = trunc i64 %1827 to i32
  br label %routine_idivl__ecx.exit8483

routine_idivl__ecx.exit8483:                      ; preds = %1833, %1831
  %1838 = phi i64 [ %.pre563, %1831 ], [ %1791, %1833 ]
  %1839 = phi i64 [ %.pre562, %1831 ], [ %1814, %1833 ]
  %1840 = phi i64 [ %.pre561, %1831 ], [ %1823, %1833 ]
  %1841 = phi i32 [ %.pre560, %1831 ], [ %1837, %1833 ]
  %1842 = phi %struct.Memory* [ %1832, %1831 ], [ %1746, %1833 ]
  %1843 = sext i32 %1841 to i64
  store i64 %1843, i64* %R10.i8571, align 8
  %1844 = shl nsw i64 %1843, 3
  %1845 = add i64 %1839, %1844
  %1846 = add i64 %1840, 7
  store i64 %1846, i64* %3, align 8
  %1847 = inttoptr i64 %1845 to i64*
  %1848 = load i64, i64* %1847, align 8
  store i64 %1848, i64* %RSI.i766, align 8
  %1849 = add i64 %1840, 11
  store i64 %1849, i64* %3, align 8
  %1850 = inttoptr i64 %1848 to i16*
  %1851 = load i16, i16* %1850, align 2
  store i16 %1851, i16* %R9W.i8580, align 2
  %1852 = add i64 %1838, -16
  %1853 = add i64 %1840, 15
  store i64 %1853, i64* %3, align 8
  %1854 = inttoptr i64 %1852 to i64*
  %1855 = load i64, i64* %1854, align 8
  store i64 %1855, i64* %RSI.i766, align 8
  %1856 = add i64 %1855, 1616
  %1857 = add i64 %1840, 22
  store i64 %1857, i64* %3, align 8
  %1858 = inttoptr i64 %1856 to i64*
  %1859 = load i64, i64* %1858, align 8
  store i64 %1859, i64* %RSI.i766, align 8
  %1860 = add i64 %1859, 8
  %1861 = add i64 %1840, 26
  store i64 %1861, i64* %3, align 8
  %1862 = inttoptr i64 %1860 to i64*
  %1863 = load i64, i64* %1862, align 8
  store i64 %1863, i64* %RSI.i766, align 8
  %1864 = add i64 %1838, -52
  %1865 = add i64 %1840, 30
  store i64 %1865, i64* %3, align 8
  %1866 = inttoptr i64 %1864 to i32*
  %1867 = load i32, i32* %1866, align 4
  %1868 = sext i32 %1867 to i64
  store i64 %1868, i64* %R10.i8571, align 8
  %1869 = shl nsw i64 %1868, 3
  %1870 = add i64 %1869, %1863
  %1871 = add i64 %1840, 34
  store i64 %1871, i64* %3, align 8
  %1872 = inttoptr i64 %1870 to i64*
  %1873 = load i64, i64* %1872, align 8
  store i64 %1873, i64* %RSI.i766, align 8
  %1874 = add i64 %1838, -56
  %1875 = add i64 %1840, 38
  store i64 %1875, i64* %3, align 8
  %1876 = inttoptr i64 %1874 to i32*
  %1877 = load i32, i32* %1876, align 4
  %1878 = sext i32 %1877 to i64
  store i64 %1878, i64* %R10.i8571, align 8
  %1879 = shl nsw i64 %1878, 3
  %1880 = add i64 %1879, %1873
  %1881 = add i64 %1840, 42
  store i64 %1881, i64* %3, align 8
  %1882 = inttoptr i64 %1880 to i64*
  %1883 = load i64, i64* %1882, align 8
  store i64 %1883, i64* %RSI.i766, align 8
  %1884 = add i64 %1840, 46
  store i64 %1884, i64* %3, align 8
  %1885 = inttoptr i64 %1883 to i16*
  store i16 %1851, i16* %1885, align 2
  %1886 = load i64, i64* %RBP.i, align 8
  %1887 = add i64 %1886, -48
  %1888 = load i64, i64* %3, align 8
  %1889 = add i64 %1888, 4
  store i64 %1889, i64* %3, align 8
  %1890 = inttoptr i64 %1887 to i64*
  %1891 = load i64, i64* %1890, align 8
  store i64 %1891, i64* %RSI.i766, align 8
  %1892 = add i64 %1891, 6504
  %1893 = add i64 %1888, 11
  store i64 %1893, i64* %3, align 8
  %1894 = inttoptr i64 %1892 to i64*
  %1895 = load i64, i64* %1894, align 8
  store i64 %1895, i64* %RSI.i766, align 8
  %1896 = add i64 %1895, 8
  %1897 = add i64 %1888, 15
  store i64 %1897, i64* %3, align 8
  %1898 = inttoptr i64 %1896 to i64*
  %1899 = load i64, i64* %1898, align 8
  store i64 %1899, i64* %RSI.i766, align 8
  %1900 = add i64 %1886, -52
  %1901 = add i64 %1888, 19
  store i64 %1901, i64* %3, align 8
  %1902 = inttoptr i64 %1900 to i32*
  %1903 = load i32, i32* %1902, align 4
  %1904 = sext i32 %1903 to i64
  store i64 %1904, i64* %R10.i8571, align 8
  %1905 = shl nsw i64 %1904, 3
  %1906 = add i64 %1905, %1899
  %1907 = add i64 %1888, 23
  store i64 %1907, i64* %3, align 8
  %1908 = inttoptr i64 %1906 to i64*
  %1909 = load i64, i64* %1908, align 8
  store i64 %1909, i64* %RSI.i766, align 8
  %1910 = add i64 %1886, -56
  %1911 = add i64 %1888, 26
  store i64 %1911, i64* %3, align 8
  %1912 = inttoptr i64 %1910 to i32*
  %1913 = load i32, i32* %1912, align 4
  %1914 = zext i32 %1913 to i64
  store i64 %1914, i64* %RAX.i3176, align 8
  %1915 = sext i32 %1913 to i64
  %1916 = lshr i64 %1915, 32
  store i64 %1916, i64* %314, align 8
  %1917 = load i32, i32* %ECX.i8872, align 4
  %1918 = add i64 %1888, 29
  store i64 %1918, i64* %3, align 8
  %1919 = sext i32 %1917 to i64
  %1920 = shl nuw i64 %1916, 32
  %1921 = or i64 %1920, %1914
  %1922 = sdiv i64 %1921, %1919
  %1923 = shl i64 %1922, 32
  %1924 = ashr exact i64 %1923, 32
  %1925 = icmp eq i64 %1922, %1924
  br i1 %1925, label %1928, label %1926

; <label>:1926:                                   ; preds = %routine_idivl__ecx.exit8483
  %1927 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1918, %struct.Memory* %1842)
  %.pre564 = load i32, i32* %EAX.i8694, align 4
  %.pre565 = load i64, i64* %3, align 8
  %.pre566 = load i64, i64* %RSI.i766, align 8
  %.pre567 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8430

; <label>:1928:                                   ; preds = %routine_idivl__ecx.exit8483
  %1929 = srem i64 %1921, %1919
  %1930 = and i64 %1922, 4294967295
  store i64 %1930, i64* %RAX.i3176, align 8
  %1931 = and i64 %1929, 4294967295
  store i64 %1931, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1932 = trunc i64 %1922 to i32
  br label %routine_idivl__ecx.exit8430

routine_idivl__ecx.exit8430:                      ; preds = %1928, %1926
  %1933 = phi i64 [ %.pre567, %1926 ], [ %1886, %1928 ]
  %1934 = phi i64 [ %.pre566, %1926 ], [ %1909, %1928 ]
  %1935 = phi i64 [ %.pre565, %1926 ], [ %1918, %1928 ]
  %1936 = phi i32 [ %.pre564, %1926 ], [ %1932, %1928 ]
  %1937 = phi %struct.Memory* [ %1927, %1926 ], [ %1842, %1928 ]
  %1938 = sext i32 %1936 to i64
  store i64 %1938, i64* %R10.i8571, align 8
  %1939 = shl nsw i64 %1938, 3
  %1940 = add i64 %1934, %1939
  %1941 = add i64 %1935, 7
  store i64 %1941, i64* %3, align 8
  %1942 = inttoptr i64 %1940 to i64*
  %1943 = load i64, i64* %1942, align 8
  store i64 %1943, i64* %RSI.i766, align 8
  %1944 = add i64 %1943, 2
  %1945 = add i64 %1935, 12
  store i64 %1945, i64* %3, align 8
  %1946 = inttoptr i64 %1944 to i16*
  %1947 = load i16, i16* %1946, align 2
  store i16 %1947, i16* %R9W.i8580, align 2
  %1948 = add i64 %1933, -16
  %1949 = add i64 %1935, 16
  store i64 %1949, i64* %3, align 8
  %1950 = inttoptr i64 %1948 to i64*
  %1951 = load i64, i64* %1950, align 8
  store i64 %1951, i64* %RSI.i766, align 8
  %1952 = add i64 %1951, 1616
  %1953 = add i64 %1935, 23
  store i64 %1953, i64* %3, align 8
  %1954 = inttoptr i64 %1952 to i64*
  %1955 = load i64, i64* %1954, align 8
  store i64 %1955, i64* %RSI.i766, align 8
  %1956 = add i64 %1955, 8
  %1957 = add i64 %1935, 27
  store i64 %1957, i64* %3, align 8
  %1958 = inttoptr i64 %1956 to i64*
  %1959 = load i64, i64* %1958, align 8
  store i64 %1959, i64* %RSI.i766, align 8
  %1960 = add i64 %1933, -52
  %1961 = add i64 %1935, 31
  store i64 %1961, i64* %3, align 8
  %1962 = inttoptr i64 %1960 to i32*
  %1963 = load i32, i32* %1962, align 4
  %1964 = sext i32 %1963 to i64
  store i64 %1964, i64* %R10.i8571, align 8
  %1965 = shl nsw i64 %1964, 3
  %1966 = add i64 %1965, %1959
  %1967 = add i64 %1935, 35
  store i64 %1967, i64* %3, align 8
  %1968 = inttoptr i64 %1966 to i64*
  %1969 = load i64, i64* %1968, align 8
  store i64 %1969, i64* %RSI.i766, align 8
  %1970 = add i64 %1933, -56
  %1971 = add i64 %1935, 39
  store i64 %1971, i64* %3, align 8
  %1972 = inttoptr i64 %1970 to i32*
  %1973 = load i32, i32* %1972, align 4
  %1974 = sext i32 %1973 to i64
  store i64 %1974, i64* %R10.i8571, align 8
  %1975 = shl nsw i64 %1974, 3
  %1976 = add i64 %1975, %1969
  %1977 = add i64 %1935, 43
  store i64 %1977, i64* %3, align 8
  %1978 = inttoptr i64 %1976 to i64*
  %1979 = load i64, i64* %1978, align 8
  store i64 %1979, i64* %RSI.i766, align 8
  %1980 = add i64 %1979, 2
  %1981 = add i64 %1935, 48
  store i64 %1981, i64* %3, align 8
  %1982 = inttoptr i64 %1980 to i16*
  store i16 %1947, i16* %1982, align 2
  %1983 = load i64, i64* %RBP.i, align 8
  %1984 = add i64 %1983, -48
  %1985 = load i64, i64* %3, align 8
  %1986 = add i64 %1985, 4
  store i64 %1986, i64* %3, align 8
  %1987 = inttoptr i64 %1984 to i64*
  %1988 = load i64, i64* %1987, align 8
  store i64 %1988, i64* %RSI.i766, align 8
  %1989 = add i64 %1988, 6480
  %1990 = add i64 %1985, 11
  store i64 %1990, i64* %3, align 8
  %1991 = inttoptr i64 %1989 to i64*
  %1992 = load i64, i64* %1991, align 8
  store i64 %1992, i64* %RSI.i766, align 8
  %1993 = add i64 %1985, 14
  store i64 %1993, i64* %3, align 8
  %1994 = inttoptr i64 %1992 to i64*
  %1995 = load i64, i64* %1994, align 8
  store i64 %1995, i64* %RSI.i766, align 8
  %1996 = add i64 %1983, -52
  %1997 = add i64 %1985, 18
  store i64 %1997, i64* %3, align 8
  %1998 = inttoptr i64 %1996 to i32*
  %1999 = load i32, i32* %1998, align 4
  %2000 = sext i32 %1999 to i64
  store i64 %2000, i64* %R10.i8571, align 8
  %2001 = shl nsw i64 %2000, 3
  %2002 = add i64 %2001, %1995
  %2003 = add i64 %1985, 22
  store i64 %2003, i64* %3, align 8
  %2004 = inttoptr i64 %2002 to i64*
  %2005 = load i64, i64* %2004, align 8
  store i64 %2005, i64* %RSI.i766, align 8
  %2006 = add i64 %1983, -56
  %2007 = add i64 %1985, 25
  store i64 %2007, i64* %3, align 8
  %2008 = inttoptr i64 %2006 to i32*
  %2009 = load i32, i32* %2008, align 4
  %2010 = zext i32 %2009 to i64
  store i64 %2010, i64* %RAX.i3176, align 8
  %2011 = sext i32 %2009 to i64
  %2012 = lshr i64 %2011, 32
  store i64 %2012, i64* %314, align 8
  %2013 = load i32, i32* %ECX.i8872, align 4
  %2014 = add i64 %1985, 28
  store i64 %2014, i64* %3, align 8
  %2015 = sext i32 %2013 to i64
  %2016 = shl nuw i64 %2012, 32
  %2017 = or i64 %2016, %2010
  %2018 = sdiv i64 %2017, %2015
  %2019 = shl i64 %2018, 32
  %2020 = ashr exact i64 %2019, 32
  %2021 = icmp eq i64 %2018, %2020
  br i1 %2021, label %2024, label %2022

; <label>:2022:                                   ; preds = %routine_idivl__ecx.exit8430
  %2023 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2014, %struct.Memory* %1937)
  %.pre568 = load i32, i32* %EAX.i8694, align 4
  %.pre569 = load i64, i64* %3, align 8
  %.pre570 = load i64, i64* %RSI.i766, align 8
  %.pre571 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8378

; <label>:2024:                                   ; preds = %routine_idivl__ecx.exit8430
  %2025 = srem i64 %2017, %2015
  %2026 = and i64 %2018, 4294967295
  store i64 %2026, i64* %RAX.i3176, align 8
  %2027 = and i64 %2025, 4294967295
  store i64 %2027, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %2028 = trunc i64 %2018 to i32
  br label %routine_idivl__ecx.exit8378

routine_idivl__ecx.exit8378:                      ; preds = %2024, %2022
  %2029 = phi i64 [ %.pre571, %2022 ], [ %1983, %2024 ]
  %2030 = phi i64 [ %.pre570, %2022 ], [ %2005, %2024 ]
  %2031 = phi i64 [ %.pre569, %2022 ], [ %2014, %2024 ]
  %2032 = phi i32 [ %.pre568, %2022 ], [ %2028, %2024 ]
  %2033 = phi %struct.Memory* [ %2023, %2022 ], [ %1937, %2024 ]
  %2034 = sext i32 %2032 to i64
  store i64 %2034, i64* %R10.i8571, align 8
  %2035 = shl nsw i64 %2034, 1
  %2036 = add i64 %2030, %2035
  %2037 = add i64 %2031, 8
  store i64 %2037, i64* %3, align 8
  %2038 = inttoptr i64 %2036 to i16*
  %2039 = load i16, i16* %2038, align 2
  store i16 %2039, i16* %R9W.i8580, align 2
  %2040 = add i64 %2029, -16
  %2041 = add i64 %2031, 12
  store i64 %2041, i64* %3, align 8
  %2042 = inttoptr i64 %2040 to i64*
  %2043 = load i64, i64* %2042, align 8
  store i64 %2043, i64* %RSI.i766, align 8
  %2044 = add i64 %2043, 1600
  %2045 = add i64 %2031, 19
  store i64 %2045, i64* %3, align 8
  %2046 = inttoptr i64 %2044 to i64*
  %2047 = load i64, i64* %2046, align 8
  store i64 %2047, i64* %RSI.i766, align 8
  %2048 = add i64 %2031, 22
  store i64 %2048, i64* %3, align 8
  %2049 = inttoptr i64 %2047 to i64*
  %2050 = load i64, i64* %2049, align 8
  store i64 %2050, i64* %RSI.i766, align 8
  %2051 = add i64 %2029, -52
  %2052 = add i64 %2031, 26
  store i64 %2052, i64* %3, align 8
  %2053 = inttoptr i64 %2051 to i32*
  %2054 = load i32, i32* %2053, align 4
  %2055 = sext i32 %2054 to i64
  store i64 %2055, i64* %R10.i8571, align 8
  %2056 = shl nsw i64 %2055, 3
  %2057 = add i64 %2056, %2050
  %2058 = add i64 %2031, 30
  store i64 %2058, i64* %3, align 8
  %2059 = inttoptr i64 %2057 to i64*
  %2060 = load i64, i64* %2059, align 8
  store i64 %2060, i64* %RSI.i766, align 8
  %2061 = add i64 %2029, -56
  %2062 = add i64 %2031, 34
  store i64 %2062, i64* %3, align 8
  %2063 = inttoptr i64 %2061 to i32*
  %2064 = load i32, i32* %2063, align 4
  %2065 = sext i32 %2064 to i64
  store i64 %2065, i64* %R10.i8571, align 8
  %2066 = shl nsw i64 %2065, 1
  %2067 = add i64 %2066, %2060
  %2068 = add i64 %2031, 39
  store i64 %2068, i64* %3, align 8
  %2069 = inttoptr i64 %2067 to i16*
  store i16 %2039, i16* %2069, align 2
  %2070 = load i64, i64* %RBP.i, align 8
  %2071 = add i64 %2070, -48
  %2072 = load i64, i64* %3, align 8
  %2073 = add i64 %2072, 4
  store i64 %2073, i64* %3, align 8
  %2074 = inttoptr i64 %2071 to i64*
  %2075 = load i64, i64* %2074, align 8
  store i64 %2075, i64* %RSI.i766, align 8
  %2076 = add i64 %2075, 6480
  %2077 = add i64 %2072, 11
  store i64 %2077, i64* %3, align 8
  %2078 = inttoptr i64 %2076 to i64*
  %2079 = load i64, i64* %2078, align 8
  store i64 %2079, i64* %RSI.i766, align 8
  %2080 = add i64 %2079, 8
  %2081 = add i64 %2072, 15
  store i64 %2081, i64* %3, align 8
  %2082 = inttoptr i64 %2080 to i64*
  %2083 = load i64, i64* %2082, align 8
  store i64 %2083, i64* %RSI.i766, align 8
  %2084 = add i64 %2070, -52
  %2085 = add i64 %2072, 19
  store i64 %2085, i64* %3, align 8
  %2086 = inttoptr i64 %2084 to i32*
  %2087 = load i32, i32* %2086, align 4
  %2088 = sext i32 %2087 to i64
  store i64 %2088, i64* %R10.i8571, align 8
  %2089 = shl nsw i64 %2088, 3
  %2090 = add i64 %2089, %2083
  %2091 = add i64 %2072, 23
  store i64 %2091, i64* %3, align 8
  %2092 = inttoptr i64 %2090 to i64*
  %2093 = load i64, i64* %2092, align 8
  store i64 %2093, i64* %RSI.i766, align 8
  %2094 = add i64 %2070, -56
  %2095 = add i64 %2072, 26
  store i64 %2095, i64* %3, align 8
  %2096 = inttoptr i64 %2094 to i32*
  %2097 = load i32, i32* %2096, align 4
  %2098 = zext i32 %2097 to i64
  store i64 %2098, i64* %RAX.i3176, align 8
  %2099 = sext i32 %2097 to i64
  %2100 = lshr i64 %2099, 32
  store i64 %2100, i64* %314, align 8
  %2101 = load i32, i32* %ECX.i8872, align 4
  %2102 = add i64 %2072, 29
  store i64 %2102, i64* %3, align 8
  %2103 = sext i32 %2101 to i64
  %2104 = shl nuw i64 %2100, 32
  %2105 = or i64 %2104, %2098
  %2106 = sdiv i64 %2105, %2103
  %2107 = shl i64 %2106, 32
  %2108 = ashr exact i64 %2107, 32
  %2109 = icmp eq i64 %2106, %2108
  br i1 %2109, label %2112, label %2110

; <label>:2110:                                   ; preds = %routine_idivl__ecx.exit8378
  %2111 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2102, %struct.Memory* %2033)
  %.pre572 = load i32, i32* %EAX.i8694, align 4
  %.pre573 = load i64, i64* %3, align 8
  %.pre574 = load i64, i64* %RSI.i766, align 8
  %.pre575 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit8329

; <label>:2112:                                   ; preds = %routine_idivl__ecx.exit8378
  %2113 = srem i64 %2105, %2103
  %2114 = and i64 %2106, 4294967295
  store i64 %2114, i64* %RAX.i3176, align 8
  %2115 = and i64 %2113, 4294967295
  store i64 %2115, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %2116 = trunc i64 %2106 to i32
  br label %routine_idivl__ecx.exit8329

routine_idivl__ecx.exit8329:                      ; preds = %2112, %2110
  %2117 = phi i64 [ %.pre575, %2110 ], [ %2070, %2112 ]
  %2118 = phi i64 [ %.pre574, %2110 ], [ %2093, %2112 ]
  %2119 = phi i64 [ %.pre573, %2110 ], [ %2102, %2112 ]
  %2120 = phi i32 [ %.pre572, %2110 ], [ %2116, %2112 ]
  %2121 = phi %struct.Memory* [ %2111, %2110 ], [ %2033, %2112 ]
  %2122 = sext i32 %2120 to i64
  store i64 %2122, i64* %R10.i8571, align 8
  %2123 = shl nsw i64 %2122, 1
  %2124 = add i64 %2118, %2123
  %2125 = add i64 %2119, 8
  store i64 %2125, i64* %3, align 8
  %2126 = inttoptr i64 %2124 to i16*
  %2127 = load i16, i16* %2126, align 2
  store i16 %2127, i16* %R9W.i8580, align 2
  %2128 = add i64 %2117, -16
  %2129 = add i64 %2119, 12
  store i64 %2129, i64* %3, align 8
  %2130 = inttoptr i64 %2128 to i64*
  %2131 = load i64, i64* %2130, align 8
  store i64 %2131, i64* %RSI.i766, align 8
  %2132 = add i64 %2131, 1600
  %2133 = add i64 %2119, 19
  store i64 %2133, i64* %3, align 8
  %2134 = inttoptr i64 %2132 to i64*
  %2135 = load i64, i64* %2134, align 8
  store i64 %2135, i64* %RSI.i766, align 8
  %2136 = add i64 %2135, 8
  %2137 = add i64 %2119, 23
  store i64 %2137, i64* %3, align 8
  %2138 = inttoptr i64 %2136 to i64*
  %2139 = load i64, i64* %2138, align 8
  store i64 %2139, i64* %RSI.i766, align 8
  %2140 = add i64 %2117, -52
  %2141 = add i64 %2119, 27
  store i64 %2141, i64* %3, align 8
  %2142 = inttoptr i64 %2140 to i32*
  %2143 = load i32, i32* %2142, align 4
  %2144 = sext i32 %2143 to i64
  store i64 %2144, i64* %R10.i8571, align 8
  %2145 = shl nsw i64 %2144, 3
  %2146 = add i64 %2145, %2139
  %2147 = add i64 %2119, 31
  store i64 %2147, i64* %3, align 8
  %2148 = inttoptr i64 %2146 to i64*
  %2149 = load i64, i64* %2148, align 8
  store i64 %2149, i64* %RSI.i766, align 8
  %2150 = add i64 %2117, -56
  %2151 = add i64 %2119, 35
  store i64 %2151, i64* %3, align 8
  %2152 = inttoptr i64 %2150 to i32*
  %2153 = load i32, i32* %2152, align 4
  %2154 = sext i32 %2153 to i64
  store i64 %2154, i64* %R10.i8571, align 8
  %2155 = shl nsw i64 %2154, 1
  %2156 = add i64 %2155, %2149
  %2157 = add i64 %2119, 40
  store i64 %2157, i64* %3, align 8
  %2158 = inttoptr i64 %2156 to i16*
  store i16 %2127, i16* %2158, align 2
  %2159 = load i64, i64* %RBP.i, align 8
  %2160 = add i64 %2159, -32
  %2161 = load i64, i64* %3, align 8
  %2162 = add i64 %2161, 4
  store i64 %2162, i64* %3, align 8
  %2163 = inttoptr i64 %2160 to i64*
  %2164 = load i64, i64* %2163, align 8
  store i64 %2164, i64* %RSI.i766, align 8
  %2165 = add i64 %2164, 6496
  %2166 = add i64 %2161, 11
  store i64 %2166, i64* %3, align 8
  %2167 = inttoptr i64 %2165 to i64*
  %2168 = load i64, i64* %2167, align 8
  store i64 %2168, i64* %RSI.i766, align 8
  %2169 = add i64 %2161, 14
  store i64 %2169, i64* %3, align 8
  %2170 = inttoptr i64 %2168 to i64*
  %2171 = load i64, i64* %2170, align 8
  store i64 %2171, i64* %RSI.i766, align 8
  %2172 = add i64 %2159, -52
  %2173 = add i64 %2161, 18
  store i64 %2173, i64* %3, align 8
  %2174 = inttoptr i64 %2172 to i32*
  %2175 = load i32, i32* %2174, align 4
  %2176 = sext i32 %2175 to i64
  store i64 %2176, i64* %R10.i8571, align 8
  %2177 = shl nsw i64 %2176, 3
  %2178 = add i64 %2177, %2171
  %2179 = add i64 %2161, 22
  store i64 %2179, i64* %3, align 8
  %2180 = inttoptr i64 %2178 to i64*
  %2181 = load i64, i64* %2180, align 8
  store i64 %2181, i64* %RSI.i766, align 8
  %2182 = add i64 %2159, -56
  %2183 = add i64 %2161, 25
  store i64 %2183, i64* %3, align 8
  %2184 = inttoptr i64 %2182 to i32*
  %2185 = load i32, i32* %2184, align 4
  %2186 = zext i32 %2185 to i64
  store i64 %2186, i64* %RAX.i3176, align 8
  %2187 = sext i32 %2185 to i64
  %2188 = lshr i64 %2187, 32
  store i64 %2188, i64* %314, align 8
  %2189 = load i32, i32* %ECX.i8872, align 4
  %2190 = add i64 %2161, 28
  store i64 %2190, i64* %3, align 8
  %2191 = sext i32 %2189 to i64
  %2192 = shl nuw i64 %2188, 32
  %2193 = or i64 %2192, %2186
  %2194 = sdiv i64 %2193, %2191
  %2195 = shl i64 %2194, 32
  %2196 = ashr exact i64 %2195, 32
  %2197 = icmp eq i64 %2194, %2196
  br i1 %2197, label %2200, label %2198

; <label>:2198:                                   ; preds = %routine_idivl__ecx.exit8329
  %2199 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2190, %struct.Memory* %2121)
  %.pre576 = load i64, i64* %RBP.i, align 8
  %.pre577 = load i64, i64* %3, align 8
  %.pre578 = load i32, i32* %EAX.i8694, align 4
  br label %routine_idivl__ecx.exit8280

; <label>:2200:                                   ; preds = %routine_idivl__ecx.exit8329
  %2201 = srem i64 %2193, %2191
  %2202 = and i64 %2194, 4294967295
  store i64 %2202, i64* %RAX.i3176, align 8
  %2203 = and i64 %2201, 4294967295
  store i64 %2203, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %2204 = trunc i64 %2194 to i32
  br label %routine_idivl__ecx.exit8280

routine_idivl__ecx.exit8280:                      ; preds = %2200, %2198
  %2205 = phi i32 [ %.pre578, %2198 ], [ %2204, %2200 ]
  %2206 = phi i64 [ %.pre577, %2198 ], [ %2190, %2200 ]
  %2207 = phi i64 [ %.pre576, %2198 ], [ %2159, %2200 ]
  %2208 = phi %struct.Memory* [ %2199, %2198 ], [ %2121, %2200 ]
  %2209 = add i64 %2207, -56
  %2210 = add i64 %2206, 3
  store i64 %2210, i64* %3, align 8
  %2211 = inttoptr i64 %2209 to i32*
  %2212 = load i32, i32* %2211, align 4
  %2213 = zext i32 %2212 to i64
  store i64 %2213, i64* %RDI.i732, align 8
  %2214 = add i64 %2207, -124
  %2215 = add i64 %2206, 6
  store i64 %2215, i64* %3, align 8
  %2216 = inttoptr i64 %2214 to i32*
  store i32 %2205, i32* %2216, align 4
  %2217 = load i32, i32* %EDI.i7794, align 4
  %2218 = zext i32 %2217 to i64
  %2219 = load i64, i64* %3, align 8
  store i64 %2218, i64* %RAX.i3176, align 8
  %2220 = sext i32 %2217 to i64
  %2221 = lshr i64 %2220, 32
  store i64 %2221, i64* %314, align 8
  %2222 = load i64, i64* %RBP.i, align 8
  %2223 = add i64 %2222, -108
  %2224 = add i64 %2219, 6
  store i64 %2224, i64* %3, align 8
  %2225 = inttoptr i64 %2223 to i32*
  %2226 = load i32, i32* %2225, align 4
  %2227 = zext i32 %2226 to i64
  store i64 %2227, i64* %RDI.i732, align 8
  %2228 = add i64 %2219, 8
  store i64 %2228, i64* %3, align 8
  %2229 = sext i32 %2226 to i64
  %2230 = shl nuw i64 %2221, 32
  %2231 = or i64 %2230, %2218
  %2232 = sdiv i64 %2231, %2229
  %2233 = shl i64 %2232, 32
  %2234 = ashr exact i64 %2233, 32
  %2235 = icmp eq i64 %2232, %2234
  br i1 %2235, label %2238, label %2236

; <label>:2236:                                   ; preds = %routine_idivl__ecx.exit8280
  %2237 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2228, %struct.Memory* %2208)
  %.pre579 = load i64, i64* %RAX.i3176, align 8
  %.pre580 = load i64, i64* %3, align 8
  %.pre581 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit8263

; <label>:2238:                                   ; preds = %routine_idivl__ecx.exit8280
  %2239 = srem i64 %2231, %2229
  %2240 = and i64 %2232, 4294967295
  store i64 %2240, i64* %RAX.i3176, align 8
  %2241 = and i64 %2239, 4294967295
  store i64 %2241, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  br label %routine_idivl__edi.exit8263

routine_idivl__edi.exit8263:                      ; preds = %2238, %2236
  %2242 = phi i64 [ %.pre581, %2236 ], [ %2222, %2238 ]
  %2243 = phi i64 [ %.pre580, %2236 ], [ %2228, %2238 ]
  %2244 = phi i64 [ %.pre579, %2236 ], [ %2240, %2238 ]
  %2245 = phi %struct.Memory* [ %2237, %2236 ], [ %2208, %2238 ]
  %.tr160 = trunc i64 %2244 to i32
  %2246 = shl i32 %.tr160, 2
  %2247 = zext i32 %2246 to i64
  store i64 %2247, i64* %RAX.i3176, align 8
  %2248 = lshr i64 %2244, 30
  %2249 = trunc i64 %2248 to i8
  %2250 = and i8 %2249, 1
  store i8 %2250, i8* %19, align 1
  %2251 = and i32 %2246, 252
  %2252 = tail call i32 @llvm.ctpop.i32(i32 %2251)
  %2253 = trunc i32 %2252 to i8
  %2254 = and i8 %2253, 1
  %2255 = xor i8 %2254, 1
  store i8 %2255, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %2256 = icmp eq i32 %2246, 0
  %2257 = zext i1 %2256 to i8
  store i8 %2257, i8* %34, align 1
  %2258 = lshr i32 %.tr160, 29
  %2259 = trunc i32 %2258 to i8
  %2260 = and i8 %2259, 1
  store i8 %2260, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %2261 = add i64 %2242, -124
  %2262 = add i64 %2243, 7
  store i64 %2262, i64* %3, align 8
  %2263 = inttoptr i64 %2261 to i32*
  %2264 = load i32, i32* %2263, align 4
  %2265 = add i32 %2246, %2264
  %2266 = lshr i32 %2265, 31
  %2267 = add i32 %2265, 4
  %2268 = zext i32 %2267 to i64
  store i64 %2268, i64* %316, align 8
  %2269 = icmp ugt i32 %2265, -5
  %2270 = zext i1 %2269 to i8
  store i8 %2270, i8* %19, align 1
  %2271 = and i32 %2267, 255
  %2272 = tail call i32 @llvm.ctpop.i32(i32 %2271)
  %2273 = trunc i32 %2272 to i8
  %2274 = and i8 %2273, 1
  %2275 = xor i8 %2274, 1
  store i8 %2275, i8* %26, align 1
  %2276 = xor i32 %2267, %2265
  %2277 = lshr i32 %2276, 4
  %2278 = trunc i32 %2277 to i8
  %2279 = and i8 %2278, 1
  store i8 %2279, i8* %31, align 1
  %2280 = icmp eq i32 %2267, 0
  %2281 = zext i1 %2280 to i8
  store i8 %2281, i8* %34, align 1
  %2282 = lshr i32 %2267, 31
  %2283 = trunc i32 %2282 to i8
  store i8 %2283, i8* %37, align 1
  %2284 = xor i32 %2282, %2266
  %2285 = add nuw nsw i32 %2284, %2282
  %2286 = icmp eq i32 %2285, 2
  %2287 = zext i1 %2286 to i8
  store i8 %2287, i8* %43, align 1
  %2288 = sext i32 %2267 to i64
  store i64 %2288, i64* %R10.i8571, align 8
  %2289 = load i64, i64* %RSI.i766, align 8
  %2290 = shl nsw i64 %2288, 3
  %2291 = add i64 %2289, %2290
  %2292 = add i64 %2243, 21
  store i64 %2292, i64* %3, align 8
  %2293 = inttoptr i64 %2291 to i64*
  %2294 = load i64, i64* %2293, align 8
  store i64 %2294, i64* %RSI.i766, align 8
  %2295 = load i64, i64* %RBP.i, align 8
  %2296 = add i64 %2295, -16
  %2297 = add i64 %2243, 25
  store i64 %2297, i64* %3, align 8
  %2298 = inttoptr i64 %2296 to i64*
  %2299 = load i64, i64* %2298, align 8
  store i64 %2299, i64* %R10.i8571, align 8
  %2300 = add i64 %2299, 1608
  %2301 = add i64 %2243, 32
  store i64 %2301, i64* %3, align 8
  %2302 = inttoptr i64 %2300 to i64*
  %2303 = load i64, i64* %2302, align 8
  store i64 %2303, i64* %R10.i8571, align 8
  %2304 = add i64 %2243, 35
  store i64 %2304, i64* %3, align 8
  %2305 = inttoptr i64 %2303 to i64*
  %2306 = load i64, i64* %2305, align 8
  store i64 %2306, i64* %R10.i8571, align 8
  %2307 = add i64 %2295, -52
  %2308 = add i64 %2243, 39
  store i64 %2308, i64* %3, align 8
  %2309 = inttoptr i64 %2307 to i32*
  %2310 = load i32, i32* %2309, align 4
  %2311 = sext i32 %2310 to i64
  store i64 %2311, i64* %RBX.i133, align 8
  %2312 = shl nsw i64 %2311, 3
  %2313 = add i64 %2312, %2306
  %2314 = add i64 %2243, 43
  store i64 %2314, i64* %3, align 8
  %2315 = inttoptr i64 %2313 to i64*
  %2316 = load i64, i64* %2315, align 8
  store i64 %2316, i64* %R10.i8571, align 8
  %2317 = add i64 %2295, -56
  %2318 = add i64 %2243, 47
  store i64 %2318, i64* %3, align 8
  %2319 = inttoptr i64 %2317 to i32*
  %2320 = load i32, i32* %2319, align 4
  %2321 = sext i32 %2320 to i64
  store i64 %2321, i64* %RBX.i133, align 8
  %2322 = shl nsw i64 %2321, 3
  %2323 = add i64 %2322, %2316
  %2324 = add i64 %2243, 51
  store i64 %2324, i64* %3, align 8
  %2325 = inttoptr i64 %2323 to i64*
  store i64 %2294, i64* %2325, align 8
  %2326 = load i64, i64* %RBP.i, align 8
  %2327 = add i64 %2326, -32
  %2328 = load i64, i64* %3, align 8
  %2329 = add i64 %2328, 4
  store i64 %2329, i64* %3, align 8
  %2330 = inttoptr i64 %2327 to i64*
  %2331 = load i64, i64* %2330, align 8
  store i64 %2331, i64* %RSI.i766, align 8
  %2332 = add i64 %2331, 6496
  %2333 = add i64 %2328, 11
  store i64 %2333, i64* %3, align 8
  %2334 = inttoptr i64 %2332 to i64*
  %2335 = load i64, i64* %2334, align 8
  store i64 %2335, i64* %RSI.i766, align 8
  %2336 = add i64 %2335, 8
  %2337 = add i64 %2328, 15
  store i64 %2337, i64* %3, align 8
  %2338 = inttoptr i64 %2336 to i64*
  %2339 = load i64, i64* %2338, align 8
  store i64 %2339, i64* %RSI.i766, align 8
  %2340 = add i64 %2326, -52
  %2341 = add i64 %2328, 19
  store i64 %2341, i64* %3, align 8
  %2342 = inttoptr i64 %2340 to i32*
  %2343 = load i32, i32* %2342, align 4
  %2344 = sext i32 %2343 to i64
  store i64 %2344, i64* %R10.i8571, align 8
  %2345 = shl nsw i64 %2344, 3
  %2346 = add i64 %2345, %2339
  %2347 = add i64 %2328, 23
  store i64 %2347, i64* %3, align 8
  %2348 = inttoptr i64 %2346 to i64*
  %2349 = load i64, i64* %2348, align 8
  store i64 %2349, i64* %RSI.i766, align 8
  %2350 = add i64 %2326, -56
  %2351 = add i64 %2328, 26
  store i64 %2351, i64* %3, align 8
  %2352 = inttoptr i64 %2350 to i32*
  %2353 = load i32, i32* %2352, align 4
  %2354 = zext i32 %2353 to i64
  store i64 %2354, i64* %RAX.i3176, align 8
  %2355 = sext i32 %2353 to i64
  %2356 = lshr i64 %2355, 32
  store i64 %2356, i64* %314, align 8
  %2357 = load i32, i32* %ECX.i8872, align 4
  %2358 = add i64 %2328, 29
  store i64 %2358, i64* %3, align 8
  %2359 = sext i32 %2357 to i64
  %2360 = shl nuw i64 %2356, 32
  %2361 = or i64 %2360, %2354
  %2362 = sdiv i64 %2361, %2359
  %2363 = shl i64 %2362, 32
  %2364 = ashr exact i64 %2363, 32
  %2365 = icmp eq i64 %2362, %2364
  br i1 %2365, label %2368, label %2366

; <label>:2366:                                   ; preds = %routine_idivl__edi.exit8263
  %2367 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2358, %struct.Memory* %2245)
  %.pre582 = load i64, i64* %RBP.i, align 8
  %.pre583 = load i64, i64* %3, align 8
  %.pre584 = load i32, i32* %EAX.i8694, align 4
  br label %routine_idivl__ecx.exit8205

; <label>:2368:                                   ; preds = %routine_idivl__edi.exit8263
  %2369 = srem i64 %2361, %2359
  %2370 = and i64 %2362, 4294967295
  store i64 %2370, i64* %RAX.i3176, align 8
  %2371 = and i64 %2369, 4294967295
  store i64 %2371, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %2372 = trunc i64 %2362 to i32
  br label %routine_idivl__ecx.exit8205

routine_idivl__ecx.exit8205:                      ; preds = %2368, %2366
  %2373 = phi i32 [ %.pre584, %2366 ], [ %2372, %2368 ]
  %2374 = phi i64 [ %.pre583, %2366 ], [ %2358, %2368 ]
  %2375 = phi i64 [ %.pre582, %2366 ], [ %2326, %2368 ]
  %2376 = phi %struct.Memory* [ %2367, %2366 ], [ %2245, %2368 ]
  %2377 = add i64 %2375, -56
  %2378 = add i64 %2374, 3
  store i64 %2378, i64* %3, align 8
  %2379 = inttoptr i64 %2377 to i32*
  %2380 = load i32, i32* %2379, align 4
  %2381 = zext i32 %2380 to i64
  store i64 %2381, i64* %RCX.i8538, align 8
  %2382 = add i64 %2375, -128
  %2383 = add i64 %2374, 6
  store i64 %2383, i64* %3, align 8
  %2384 = inttoptr i64 %2382 to i32*
  store i32 %2373, i32* %2384, align 4
  %2385 = load i32, i32* %ECX.i8872, align 4
  %2386 = zext i32 %2385 to i64
  %2387 = load i64, i64* %3, align 8
  store i64 %2386, i64* %RAX.i3176, align 8
  %2388 = sext i32 %2385 to i64
  %2389 = lshr i64 %2388, 32
  store i64 %2389, i64* %314, align 8
  %2390 = load i32, i32* %EDI.i7794, align 4
  %2391 = add i64 %2387, 5
  store i64 %2391, i64* %3, align 8
  %2392 = sext i32 %2390 to i64
  %2393 = shl nuw i64 %2389, 32
  %2394 = or i64 %2393, %2386
  %2395 = sdiv i64 %2394, %2392
  %2396 = shl i64 %2395, 32
  %2397 = ashr exact i64 %2396, 32
  %2398 = icmp eq i64 %2395, %2397
  br i1 %2398, label %2401, label %2399

; <label>:2399:                                   ; preds = %routine_idivl__ecx.exit8205
  %2400 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2391, %struct.Memory* %2376)
  %.pre585 = load i64, i64* %RAX.i3176, align 8
  %.pre586 = load i64, i64* %3, align 8
  br label %routine_idivl__edi.exit8190

; <label>:2401:                                   ; preds = %routine_idivl__ecx.exit8205
  %2402 = srem i64 %2394, %2392
  %2403 = and i64 %2395, 4294967295
  store i64 %2403, i64* %RAX.i3176, align 8
  %2404 = and i64 %2402, 4294967295
  store i64 %2404, i64* %RDX.i8595, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  br label %routine_idivl__edi.exit8190

routine_idivl__edi.exit8190:                      ; preds = %2401, %2399
  %2405 = phi i64 [ %.pre586, %2399 ], [ %2391, %2401 ]
  %2406 = phi i64 [ %.pre585, %2399 ], [ %2403, %2401 ]
  %2407 = phi %struct.Memory* [ %2400, %2399 ], [ %2376, %2401 ]
  %.tr162 = trunc i64 %2406 to i32
  %2408 = shl i32 %.tr162, 2
  %2409 = zext i32 %2408 to i64
  store i64 %2409, i64* %RAX.i3176, align 8
  %2410 = lshr i64 %2406, 30
  %2411 = trunc i64 %2410 to i8
  %2412 = and i8 %2411, 1
  store i8 %2412, i8* %19, align 1
  %2413 = and i32 %2408, 252
  %2414 = tail call i32 @llvm.ctpop.i32(i32 %2413)
  %2415 = trunc i32 %2414 to i8
  %2416 = and i8 %2415, 1
  %2417 = xor i8 %2416, 1
  store i8 %2417, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %2418 = icmp eq i32 %2408, 0
  %2419 = zext i1 %2418 to i8
  store i8 %2419, i8* %34, align 1
  %2420 = lshr i32 %.tr162, 29
  %2421 = trunc i32 %2420 to i8
  %2422 = and i8 %2421, 1
  store i8 %2422, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %2423 = load i64, i64* %RBP.i, align 8
  %2424 = add i64 %2423, -128
  %2425 = add i64 %2405, 6
  store i64 %2425, i64* %3, align 8
  %2426 = inttoptr i64 %2424 to i32*
  %2427 = load i32, i32* %2426, align 4
  %2428 = add i32 %2408, %2427
  %2429 = lshr i32 %2428, 31
  %2430 = add i32 %2428, 4
  %2431 = zext i32 %2430 to i64
  store i64 %2431, i64* %RCX.i8538, align 8
  %2432 = icmp ugt i32 %2428, -5
  %2433 = zext i1 %2432 to i8
  store i8 %2433, i8* %19, align 1
  %2434 = and i32 %2430, 255
  %2435 = tail call i32 @llvm.ctpop.i32(i32 %2434)
  %2436 = trunc i32 %2435 to i8
  %2437 = and i8 %2436, 1
  %2438 = xor i8 %2437, 1
  store i8 %2438, i8* %26, align 1
  %2439 = xor i32 %2430, %2428
  %2440 = lshr i32 %2439, 4
  %2441 = trunc i32 %2440 to i8
  %2442 = and i8 %2441, 1
  store i8 %2442, i8* %31, align 1
  %2443 = icmp eq i32 %2430, 0
  %2444 = zext i1 %2443 to i8
  store i8 %2444, i8* %34, align 1
  %2445 = lshr i32 %2430, 31
  %2446 = trunc i32 %2445 to i8
  store i8 %2446, i8* %37, align 1
  %2447 = xor i32 %2445, %2429
  %2448 = add nuw nsw i32 %2447, %2445
  %2449 = icmp eq i32 %2448, 2
  %2450 = zext i1 %2449 to i8
  store i8 %2450, i8* %43, align 1
  %2451 = sext i32 %2430 to i64
  store i64 %2451, i64* %R10.i8571, align 8
  %2452 = load i64, i64* %RSI.i766, align 8
  %2453 = shl nsw i64 %2451, 3
  %2454 = add i64 %2452, %2453
  %2455 = add i64 %2405, 18
  store i64 %2455, i64* %3, align 8
  %2456 = inttoptr i64 %2454 to i64*
  %2457 = load i64, i64* %2456, align 8
  store i64 %2457, i64* %RSI.i766, align 8
  %2458 = add i64 %2423, -16
  %2459 = add i64 %2405, 22
  store i64 %2459, i64* %3, align 8
  %2460 = inttoptr i64 %2458 to i64*
  %2461 = load i64, i64* %2460, align 8
  store i64 %2461, i64* %R10.i8571, align 8
  %2462 = add i64 %2461, 1608
  %2463 = add i64 %2405, 29
  store i64 %2463, i64* %3, align 8
  %2464 = inttoptr i64 %2462 to i64*
  %2465 = load i64, i64* %2464, align 8
  store i64 %2465, i64* %R10.i8571, align 8
  %2466 = add i64 %2465, 8
  %2467 = add i64 %2405, 33
  store i64 %2467, i64* %3, align 8
  %2468 = inttoptr i64 %2466 to i64*
  %2469 = load i64, i64* %2468, align 8
  store i64 %2469, i64* %R10.i8571, align 8
  %2470 = load i64, i64* %RBP.i, align 8
  %2471 = add i64 %2470, -52
  %2472 = add i64 %2405, 37
  store i64 %2472, i64* %3, align 8
  %2473 = inttoptr i64 %2471 to i32*
  %2474 = load i32, i32* %2473, align 4
  %2475 = sext i32 %2474 to i64
  store i64 %2475, i64* %RBX.i133, align 8
  %2476 = shl nsw i64 %2475, 3
  %2477 = add i64 %2476, %2469
  %2478 = add i64 %2405, 41
  store i64 %2478, i64* %3, align 8
  %2479 = inttoptr i64 %2477 to i64*
  %2480 = load i64, i64* %2479, align 8
  store i64 %2480, i64* %R10.i8571, align 8
  %2481 = add i64 %2470, -56
  %2482 = add i64 %2405, 45
  store i64 %2482, i64* %3, align 8
  %2483 = inttoptr i64 %2481 to i32*
  %2484 = load i32, i32* %2483, align 4
  %2485 = sext i32 %2484 to i64
  store i64 %2485, i64* %RBX.i133, align 8
  %2486 = shl nsw i64 %2485, 3
  %2487 = add i64 %2486, %2480
  %2488 = add i64 %2405, 49
  store i64 %2488, i64* %3, align 8
  %2489 = inttoptr i64 %2487 to i64*
  store i64 %2457, i64* %2489, align 8
  %2490 = load i64, i64* %RBP.i, align 8
  %2491 = add i64 %2490, -48
  %2492 = load i64, i64* %3, align 8
  %2493 = add i64 %2492, 4
  store i64 %2493, i64* %3, align 8
  %2494 = inttoptr i64 %2491 to i64*
  %2495 = load i64, i64* %2494, align 8
  store i64 %2495, i64* %RSI.i766, align 8
  %2496 = add i64 %2495, 6376
  %2497 = add i64 %2492, 10
  store i64 %2497, i64* %3, align 8
  %2498 = inttoptr i64 %2496 to i32*
  %2499 = load i32, i32* %2498, align 4
  %2500 = zext i32 %2499 to i64
  store i64 %2500, i64* %RAX.i3176, align 8
  %2501 = add i64 %2490, -16
  %2502 = add i64 %2492, 14
  store i64 %2502, i64* %3, align 8
  %2503 = inttoptr i64 %2501 to i64*
  %2504 = load i64, i64* %2503, align 8
  store i64 %2504, i64* %RSI.i766, align 8
  %2505 = add i64 %2504, 4864
  %2506 = add i64 %2492, 20
  store i64 %2506, i64* %3, align 8
  %2507 = inttoptr i64 %2505 to i32*
  store i32 %2499, i32* %2507, align 4
  %.pre587 = load i64, i64* %3, align 8
  br label %block_.L_455d12

block_.L_455d12:                                  ; preds = %routine_idivl__edi.exit8190, %routine_idivl__edi.exit8676
  %2508 = phi i64 [ %.pre587, %routine_idivl__edi.exit8190 ], [ %1587, %routine_idivl__edi.exit8676 ]
  %MEMORY.7 = phi %struct.Memory* [ %2407, %routine_idivl__edi.exit8190 ], [ %1481, %routine_idivl__edi.exit8676 ]
  %2509 = add i64 %2508, 541
  store i64 %2509, i64* %3, align 8
  br label %block_.L_455f2f

block_.L_455d17:                                  ; preds = %block_455771, %block_455786
  %2510 = phi i64 [ %523, %block_455786 ], [ %487, %block_455771 ]
  %2511 = add i64 %.pre588, -32
  %2512 = add i64 %2510, 4
  store i64 %2512, i64* %3, align 8
  %2513 = inttoptr i64 %2511 to i64*
  %2514 = load i64, i64* %2513, align 8
  store i64 %2514, i64* %RAX.i3176, align 8
  %2515 = add i64 %2514, 6504
  %2516 = add i64 %2510, 11
  store i64 %2516, i64* %3, align 8
  %2517 = inttoptr i64 %2515 to i64*
  %2518 = load i64, i64* %2517, align 8
  store i64 %2518, i64* %RAX.i3176, align 8
  %2519 = add i64 %2510, 14
  store i64 %2519, i64* %3, align 8
  %2520 = inttoptr i64 %2518 to i64*
  %2521 = load i64, i64* %2520, align 8
  store i64 %2521, i64* %RAX.i3176, align 8
  %2522 = add i64 %.pre588, -52
  %2523 = add i64 %2510, 18
  store i64 %2523, i64* %3, align 8
  %2524 = inttoptr i64 %2522 to i32*
  %2525 = load i32, i32* %2524, align 4
  %2526 = sext i32 %2525 to i64
  store i64 %2526, i64* %RCX.i8538, align 8
  %2527 = shl nsw i64 %2526, 3
  %2528 = add i64 %2527, %2521
  %2529 = add i64 %2510, 22
  store i64 %2529, i64* %3, align 8
  %2530 = inttoptr i64 %2528 to i64*
  %2531 = load i64, i64* %2530, align 8
  store i64 %2531, i64* %RAX.i3176, align 8
  %2532 = add i64 %.pre588, -56
  %2533 = add i64 %2510, 26
  store i64 %2533, i64* %3, align 8
  %2534 = inttoptr i64 %2532 to i32*
  %2535 = load i32, i32* %2534, align 4
  %2536 = sext i32 %2535 to i64
  store i64 %2536, i64* %RCX.i8538, align 8
  %2537 = shl nsw i64 %2536, 3
  %2538 = add i64 %2537, %2531
  %2539 = add i64 %2510, 30
  store i64 %2539, i64* %3, align 8
  %2540 = inttoptr i64 %2538 to i64*
  %2541 = load i64, i64* %2540, align 8
  store i64 %2541, i64* %RAX.i3176, align 8
  %2542 = add i64 %2510, 33
  store i64 %2542, i64* %3, align 8
  %2543 = inttoptr i64 %2541 to i16*
  %2544 = load i16, i16* %2543, align 2
  store i16 %2544, i16* %DX.i8118, align 2
  %2545 = add i64 %.pre588, -16
  %2546 = add i64 %2510, 37
  store i64 %2546, i64* %3, align 8
  %2547 = inttoptr i64 %2545 to i64*
  %2548 = load i64, i64* %2547, align 8
  store i64 %2548, i64* %RAX.i3176, align 8
  %2549 = add i64 %2548, 1616
  %2550 = add i64 %2510, 44
  store i64 %2550, i64* %3, align 8
  %2551 = inttoptr i64 %2549 to i64*
  %2552 = load i64, i64* %2551, align 8
  store i64 %2552, i64* %RAX.i3176, align 8
  %2553 = add i64 %2510, 47
  store i64 %2553, i64* %3, align 8
  %2554 = inttoptr i64 %2552 to i64*
  %2555 = load i64, i64* %2554, align 8
  store i64 %2555, i64* %RAX.i3176, align 8
  %2556 = add i64 %2510, 51
  store i64 %2556, i64* %3, align 8
  %2557 = load i32, i32* %2524, align 4
  %2558 = sext i32 %2557 to i64
  store i64 %2558, i64* %RCX.i8538, align 8
  %2559 = shl nsw i64 %2558, 3
  %2560 = add i64 %2559, %2555
  %2561 = add i64 %2510, 55
  store i64 %2561, i64* %3, align 8
  %2562 = inttoptr i64 %2560 to i64*
  %2563 = load i64, i64* %2562, align 8
  store i64 %2563, i64* %RAX.i3176, align 8
  %2564 = add i64 %2510, 59
  store i64 %2564, i64* %3, align 8
  %2565 = load i32, i32* %2534, align 4
  %2566 = sext i32 %2565 to i64
  store i64 %2566, i64* %RCX.i8538, align 8
  %2567 = shl nsw i64 %2566, 3
  %2568 = add i64 %2567, %2563
  %2569 = add i64 %2510, 63
  store i64 %2569, i64* %3, align 8
  %2570 = inttoptr i64 %2568 to i64*
  %2571 = load i64, i64* %2570, align 8
  store i64 %2571, i64* %RAX.i3176, align 8
  %2572 = add i64 %2510, 66
  store i64 %2572, i64* %3, align 8
  %2573 = inttoptr i64 %2571 to i16*
  store i16 %2544, i16* %2573, align 2
  %2574 = load i64, i64* %RBP.i, align 8
  %2575 = add i64 %2574, -32
  %2576 = load i64, i64* %3, align 8
  %2577 = add i64 %2576, 4
  store i64 %2577, i64* %3, align 8
  %2578 = inttoptr i64 %2575 to i64*
  %2579 = load i64, i64* %2578, align 8
  store i64 %2579, i64* %RAX.i3176, align 8
  %2580 = add i64 %2579, 6504
  %2581 = add i64 %2576, 11
  store i64 %2581, i64* %3, align 8
  %2582 = inttoptr i64 %2580 to i64*
  %2583 = load i64, i64* %2582, align 8
  store i64 %2583, i64* %RAX.i3176, align 8
  %2584 = add i64 %2576, 14
  store i64 %2584, i64* %3, align 8
  %2585 = inttoptr i64 %2583 to i64*
  %2586 = load i64, i64* %2585, align 8
  store i64 %2586, i64* %RAX.i3176, align 8
  %2587 = add i64 %2574, -52
  %2588 = add i64 %2576, 18
  store i64 %2588, i64* %3, align 8
  %2589 = inttoptr i64 %2587 to i32*
  %2590 = load i32, i32* %2589, align 4
  %2591 = sext i32 %2590 to i64
  store i64 %2591, i64* %RCX.i8538, align 8
  %2592 = shl nsw i64 %2591, 3
  %2593 = add i64 %2592, %2586
  %2594 = add i64 %2576, 22
  store i64 %2594, i64* %3, align 8
  %2595 = inttoptr i64 %2593 to i64*
  %2596 = load i64, i64* %2595, align 8
  store i64 %2596, i64* %RAX.i3176, align 8
  %2597 = add i64 %2574, -56
  %2598 = add i64 %2576, 26
  store i64 %2598, i64* %3, align 8
  %2599 = inttoptr i64 %2597 to i32*
  %2600 = load i32, i32* %2599, align 4
  %2601 = sext i32 %2600 to i64
  store i64 %2601, i64* %RCX.i8538, align 8
  %2602 = shl nsw i64 %2601, 3
  %2603 = add i64 %2602, %2596
  %2604 = add i64 %2576, 30
  store i64 %2604, i64* %3, align 8
  %2605 = inttoptr i64 %2603 to i64*
  %2606 = load i64, i64* %2605, align 8
  store i64 %2606, i64* %RAX.i3176, align 8
  %2607 = add i64 %2606, 2
  %2608 = add i64 %2576, 34
  store i64 %2608, i64* %3, align 8
  %2609 = inttoptr i64 %2607 to i16*
  %2610 = load i16, i16* %2609, align 2
  store i16 %2610, i16* %DX.i8118, align 2
  %2611 = add i64 %2574, -16
  %2612 = add i64 %2576, 38
  store i64 %2612, i64* %3, align 8
  %2613 = inttoptr i64 %2611 to i64*
  %2614 = load i64, i64* %2613, align 8
  store i64 %2614, i64* %RAX.i3176, align 8
  %2615 = add i64 %2614, 1616
  %2616 = add i64 %2576, 45
  store i64 %2616, i64* %3, align 8
  %2617 = inttoptr i64 %2615 to i64*
  %2618 = load i64, i64* %2617, align 8
  store i64 %2618, i64* %RAX.i3176, align 8
  %2619 = add i64 %2576, 48
  store i64 %2619, i64* %3, align 8
  %2620 = inttoptr i64 %2618 to i64*
  %2621 = load i64, i64* %2620, align 8
  store i64 %2621, i64* %RAX.i3176, align 8
  %2622 = add i64 %2576, 52
  store i64 %2622, i64* %3, align 8
  %2623 = load i32, i32* %2589, align 4
  %2624 = sext i32 %2623 to i64
  store i64 %2624, i64* %RCX.i8538, align 8
  %2625 = shl nsw i64 %2624, 3
  %2626 = add i64 %2625, %2621
  %2627 = add i64 %2576, 56
  store i64 %2627, i64* %3, align 8
  %2628 = inttoptr i64 %2626 to i64*
  %2629 = load i64, i64* %2628, align 8
  store i64 %2629, i64* %RAX.i3176, align 8
  %2630 = add i64 %2576, 60
  store i64 %2630, i64* %3, align 8
  %2631 = load i32, i32* %2599, align 4
  %2632 = sext i32 %2631 to i64
  store i64 %2632, i64* %RCX.i8538, align 8
  %2633 = shl nsw i64 %2632, 3
  %2634 = add i64 %2633, %2629
  %2635 = add i64 %2576, 64
  store i64 %2635, i64* %3, align 8
  %2636 = inttoptr i64 %2634 to i64*
  %2637 = load i64, i64* %2636, align 8
  store i64 %2637, i64* %RAX.i3176, align 8
  %2638 = add i64 %2637, 2
  %2639 = add i64 %2576, 68
  store i64 %2639, i64* %3, align 8
  %2640 = inttoptr i64 %2638 to i16*
  store i16 %2610, i16* %2640, align 2
  %2641 = load i64, i64* %RBP.i, align 8
  %2642 = add i64 %2641, -32
  %2643 = load i64, i64* %3, align 8
  %2644 = add i64 %2643, 4
  store i64 %2644, i64* %3, align 8
  %2645 = inttoptr i64 %2642 to i64*
  %2646 = load i64, i64* %2645, align 8
  store i64 %2646, i64* %RAX.i3176, align 8
  %2647 = add i64 %2646, 6504
  %2648 = add i64 %2643, 11
  store i64 %2648, i64* %3, align 8
  %2649 = inttoptr i64 %2647 to i64*
  %2650 = load i64, i64* %2649, align 8
  store i64 %2650, i64* %RAX.i3176, align 8
  %2651 = add i64 %2650, 8
  %2652 = add i64 %2643, 15
  store i64 %2652, i64* %3, align 8
  %2653 = inttoptr i64 %2651 to i64*
  %2654 = load i64, i64* %2653, align 8
  store i64 %2654, i64* %RAX.i3176, align 8
  %2655 = add i64 %2641, -52
  %2656 = add i64 %2643, 19
  store i64 %2656, i64* %3, align 8
  %2657 = inttoptr i64 %2655 to i32*
  %2658 = load i32, i32* %2657, align 4
  %2659 = sext i32 %2658 to i64
  store i64 %2659, i64* %RCX.i8538, align 8
  %2660 = shl nsw i64 %2659, 3
  %2661 = add i64 %2660, %2654
  %2662 = add i64 %2643, 23
  store i64 %2662, i64* %3, align 8
  %2663 = inttoptr i64 %2661 to i64*
  %2664 = load i64, i64* %2663, align 8
  store i64 %2664, i64* %RAX.i3176, align 8
  %2665 = add i64 %2641, -56
  %2666 = add i64 %2643, 27
  store i64 %2666, i64* %3, align 8
  %2667 = inttoptr i64 %2665 to i32*
  %2668 = load i32, i32* %2667, align 4
  %2669 = sext i32 %2668 to i64
  store i64 %2669, i64* %RCX.i8538, align 8
  %2670 = shl nsw i64 %2669, 3
  %2671 = add i64 %2670, %2664
  %2672 = add i64 %2643, 31
  store i64 %2672, i64* %3, align 8
  %2673 = inttoptr i64 %2671 to i64*
  %2674 = load i64, i64* %2673, align 8
  store i64 %2674, i64* %RAX.i3176, align 8
  %2675 = add i64 %2643, 34
  store i64 %2675, i64* %3, align 8
  %2676 = inttoptr i64 %2674 to i16*
  %2677 = load i16, i16* %2676, align 2
  store i16 %2677, i16* %DX.i8118, align 2
  %2678 = add i64 %2641, -16
  %2679 = add i64 %2643, 38
  store i64 %2679, i64* %3, align 8
  %2680 = inttoptr i64 %2678 to i64*
  %2681 = load i64, i64* %2680, align 8
  store i64 %2681, i64* %RAX.i3176, align 8
  %2682 = add i64 %2681, 1616
  %2683 = add i64 %2643, 45
  store i64 %2683, i64* %3, align 8
  %2684 = inttoptr i64 %2682 to i64*
  %2685 = load i64, i64* %2684, align 8
  store i64 %2685, i64* %RAX.i3176, align 8
  %2686 = add i64 %2685, 8
  %2687 = add i64 %2643, 49
  store i64 %2687, i64* %3, align 8
  %2688 = inttoptr i64 %2686 to i64*
  %2689 = load i64, i64* %2688, align 8
  store i64 %2689, i64* %RAX.i3176, align 8
  %2690 = add i64 %2643, 53
  store i64 %2690, i64* %3, align 8
  %2691 = load i32, i32* %2657, align 4
  %2692 = sext i32 %2691 to i64
  store i64 %2692, i64* %RCX.i8538, align 8
  %2693 = shl nsw i64 %2692, 3
  %2694 = add i64 %2693, %2689
  %2695 = add i64 %2643, 57
  store i64 %2695, i64* %3, align 8
  %2696 = inttoptr i64 %2694 to i64*
  %2697 = load i64, i64* %2696, align 8
  store i64 %2697, i64* %RAX.i3176, align 8
  %2698 = add i64 %2643, 61
  store i64 %2698, i64* %3, align 8
  %2699 = load i32, i32* %2667, align 4
  %2700 = sext i32 %2699 to i64
  store i64 %2700, i64* %RCX.i8538, align 8
  %2701 = shl nsw i64 %2700, 3
  %2702 = add i64 %2701, %2697
  %2703 = add i64 %2643, 65
  store i64 %2703, i64* %3, align 8
  %2704 = inttoptr i64 %2702 to i64*
  %2705 = load i64, i64* %2704, align 8
  store i64 %2705, i64* %RAX.i3176, align 8
  %2706 = add i64 %2643, 68
  store i64 %2706, i64* %3, align 8
  %2707 = inttoptr i64 %2705 to i16*
  store i16 %2677, i16* %2707, align 2
  %2708 = load i64, i64* %RBP.i, align 8
  %2709 = add i64 %2708, -32
  %2710 = load i64, i64* %3, align 8
  %2711 = add i64 %2710, 4
  store i64 %2711, i64* %3, align 8
  %2712 = inttoptr i64 %2709 to i64*
  %2713 = load i64, i64* %2712, align 8
  store i64 %2713, i64* %RAX.i3176, align 8
  %2714 = add i64 %2713, 6504
  %2715 = add i64 %2710, 11
  store i64 %2715, i64* %3, align 8
  %2716 = inttoptr i64 %2714 to i64*
  %2717 = load i64, i64* %2716, align 8
  store i64 %2717, i64* %RAX.i3176, align 8
  %2718 = add i64 %2717, 8
  %2719 = add i64 %2710, 15
  store i64 %2719, i64* %3, align 8
  %2720 = inttoptr i64 %2718 to i64*
  %2721 = load i64, i64* %2720, align 8
  store i64 %2721, i64* %RAX.i3176, align 8
  %2722 = add i64 %2708, -52
  %2723 = add i64 %2710, 19
  store i64 %2723, i64* %3, align 8
  %2724 = inttoptr i64 %2722 to i32*
  %2725 = load i32, i32* %2724, align 4
  %2726 = sext i32 %2725 to i64
  store i64 %2726, i64* %RCX.i8538, align 8
  %2727 = shl nsw i64 %2726, 3
  %2728 = add i64 %2727, %2721
  %2729 = add i64 %2710, 23
  store i64 %2729, i64* %3, align 8
  %2730 = inttoptr i64 %2728 to i64*
  %2731 = load i64, i64* %2730, align 8
  store i64 %2731, i64* %RAX.i3176, align 8
  %2732 = add i64 %2708, -56
  %2733 = add i64 %2710, 27
  store i64 %2733, i64* %3, align 8
  %2734 = inttoptr i64 %2732 to i32*
  %2735 = load i32, i32* %2734, align 4
  %2736 = sext i32 %2735 to i64
  store i64 %2736, i64* %RCX.i8538, align 8
  %2737 = shl nsw i64 %2736, 3
  %2738 = add i64 %2737, %2731
  %2739 = add i64 %2710, 31
  store i64 %2739, i64* %3, align 8
  %2740 = inttoptr i64 %2738 to i64*
  %2741 = load i64, i64* %2740, align 8
  store i64 %2741, i64* %RAX.i3176, align 8
  %2742 = add i64 %2741, 2
  %2743 = add i64 %2710, 35
  store i64 %2743, i64* %3, align 8
  %2744 = inttoptr i64 %2742 to i16*
  %2745 = load i16, i16* %2744, align 2
  store i16 %2745, i16* %DX.i8118, align 2
  %2746 = add i64 %2708, -16
  %2747 = add i64 %2710, 39
  store i64 %2747, i64* %3, align 8
  %2748 = inttoptr i64 %2746 to i64*
  %2749 = load i64, i64* %2748, align 8
  store i64 %2749, i64* %RAX.i3176, align 8
  %2750 = add i64 %2749, 1616
  %2751 = add i64 %2710, 46
  store i64 %2751, i64* %3, align 8
  %2752 = inttoptr i64 %2750 to i64*
  %2753 = load i64, i64* %2752, align 8
  store i64 %2753, i64* %RAX.i3176, align 8
  %2754 = add i64 %2753, 8
  %2755 = add i64 %2710, 50
  store i64 %2755, i64* %3, align 8
  %2756 = inttoptr i64 %2754 to i64*
  %2757 = load i64, i64* %2756, align 8
  store i64 %2757, i64* %RAX.i3176, align 8
  %2758 = add i64 %2710, 54
  store i64 %2758, i64* %3, align 8
  %2759 = load i32, i32* %2724, align 4
  %2760 = sext i32 %2759 to i64
  store i64 %2760, i64* %RCX.i8538, align 8
  %2761 = shl nsw i64 %2760, 3
  %2762 = add i64 %2761, %2757
  %2763 = add i64 %2710, 58
  store i64 %2763, i64* %3, align 8
  %2764 = inttoptr i64 %2762 to i64*
  %2765 = load i64, i64* %2764, align 8
  store i64 %2765, i64* %RAX.i3176, align 8
  %2766 = add i64 %2710, 62
  store i64 %2766, i64* %3, align 8
  %2767 = load i32, i32* %2734, align 4
  %2768 = sext i32 %2767 to i64
  store i64 %2768, i64* %RCX.i8538, align 8
  %2769 = shl nsw i64 %2768, 3
  %2770 = add i64 %2769, %2765
  %2771 = add i64 %2710, 66
  store i64 %2771, i64* %3, align 8
  %2772 = inttoptr i64 %2770 to i64*
  %2773 = load i64, i64* %2772, align 8
  store i64 %2773, i64* %RAX.i3176, align 8
  %2774 = add i64 %2773, 2
  %2775 = add i64 %2710, 70
  store i64 %2775, i64* %3, align 8
  %2776 = inttoptr i64 %2774 to i16*
  store i16 %2745, i16* %2776, align 2
  %2777 = load i64, i64* %RBP.i, align 8
  %2778 = add i64 %2777, -32
  %2779 = load i64, i64* %3, align 8
  %2780 = add i64 %2779, 4
  store i64 %2780, i64* %3, align 8
  %2781 = inttoptr i64 %2778 to i64*
  %2782 = load i64, i64* %2781, align 8
  store i64 %2782, i64* %RAX.i3176, align 8
  %2783 = add i64 %2782, 6480
  %2784 = add i64 %2779, 11
  store i64 %2784, i64* %3, align 8
  %2785 = inttoptr i64 %2783 to i64*
  %2786 = load i64, i64* %2785, align 8
  store i64 %2786, i64* %RAX.i3176, align 8
  %2787 = add i64 %2779, 14
  store i64 %2787, i64* %3, align 8
  %2788 = inttoptr i64 %2786 to i64*
  %2789 = load i64, i64* %2788, align 8
  store i64 %2789, i64* %RAX.i3176, align 8
  %2790 = add i64 %2777, -52
  %2791 = add i64 %2779, 18
  store i64 %2791, i64* %3, align 8
  %2792 = inttoptr i64 %2790 to i32*
  %2793 = load i32, i32* %2792, align 4
  %2794 = sext i32 %2793 to i64
  store i64 %2794, i64* %RCX.i8538, align 8
  %2795 = shl nsw i64 %2794, 3
  %2796 = add i64 %2795, %2789
  %2797 = add i64 %2779, 22
  store i64 %2797, i64* %3, align 8
  %2798 = inttoptr i64 %2796 to i64*
  %2799 = load i64, i64* %2798, align 8
  store i64 %2799, i64* %RAX.i3176, align 8
  %2800 = add i64 %2777, -56
  %2801 = add i64 %2779, 26
  store i64 %2801, i64* %3, align 8
  %2802 = inttoptr i64 %2800 to i32*
  %2803 = load i32, i32* %2802, align 4
  %2804 = sext i32 %2803 to i64
  store i64 %2804, i64* %RCX.i8538, align 8
  %2805 = shl nsw i64 %2804, 1
  %2806 = add i64 %2805, %2799
  %2807 = add i64 %2779, 30
  store i64 %2807, i64* %3, align 8
  %2808 = inttoptr i64 %2806 to i16*
  %2809 = load i16, i16* %2808, align 2
  store i16 %2809, i16* %DX.i8118, align 2
  %2810 = add i64 %2777, -16
  %2811 = add i64 %2779, 34
  store i64 %2811, i64* %3, align 8
  %2812 = inttoptr i64 %2810 to i64*
  %2813 = load i64, i64* %2812, align 8
  store i64 %2813, i64* %RAX.i3176, align 8
  %2814 = add i64 %2813, 1600
  %2815 = add i64 %2779, 41
  store i64 %2815, i64* %3, align 8
  %2816 = inttoptr i64 %2814 to i64*
  %2817 = load i64, i64* %2816, align 8
  store i64 %2817, i64* %RAX.i3176, align 8
  %2818 = add i64 %2779, 44
  store i64 %2818, i64* %3, align 8
  %2819 = inttoptr i64 %2817 to i64*
  %2820 = load i64, i64* %2819, align 8
  store i64 %2820, i64* %RAX.i3176, align 8
  %2821 = add i64 %2779, 48
  store i64 %2821, i64* %3, align 8
  %2822 = load i32, i32* %2792, align 4
  %2823 = sext i32 %2822 to i64
  store i64 %2823, i64* %RCX.i8538, align 8
  %2824 = shl nsw i64 %2823, 3
  %2825 = add i64 %2824, %2820
  %2826 = add i64 %2779, 52
  store i64 %2826, i64* %3, align 8
  %2827 = inttoptr i64 %2825 to i64*
  %2828 = load i64, i64* %2827, align 8
  store i64 %2828, i64* %RAX.i3176, align 8
  %2829 = add i64 %2779, 56
  store i64 %2829, i64* %3, align 8
  %2830 = load i32, i32* %2802, align 4
  %2831 = sext i32 %2830 to i64
  store i64 %2831, i64* %RCX.i8538, align 8
  %2832 = shl nsw i64 %2831, 1
  %2833 = add i64 %2832, %2828
  %2834 = add i64 %2779, 60
  store i64 %2834, i64* %3, align 8
  %2835 = inttoptr i64 %2833 to i16*
  store i16 %2809, i16* %2835, align 2
  %2836 = load i64, i64* %RBP.i, align 8
  %2837 = add i64 %2836, -32
  %2838 = load i64, i64* %3, align 8
  %2839 = add i64 %2838, 4
  store i64 %2839, i64* %3, align 8
  %2840 = inttoptr i64 %2837 to i64*
  %2841 = load i64, i64* %2840, align 8
  store i64 %2841, i64* %RAX.i3176, align 8
  %2842 = add i64 %2841, 6480
  %2843 = add i64 %2838, 11
  store i64 %2843, i64* %3, align 8
  %2844 = inttoptr i64 %2842 to i64*
  %2845 = load i64, i64* %2844, align 8
  store i64 %2845, i64* %RAX.i3176, align 8
  %2846 = add i64 %2845, 8
  %2847 = add i64 %2838, 15
  store i64 %2847, i64* %3, align 8
  %2848 = inttoptr i64 %2846 to i64*
  %2849 = load i64, i64* %2848, align 8
  store i64 %2849, i64* %RAX.i3176, align 8
  %2850 = add i64 %2836, -52
  %2851 = add i64 %2838, 19
  store i64 %2851, i64* %3, align 8
  %2852 = inttoptr i64 %2850 to i32*
  %2853 = load i32, i32* %2852, align 4
  %2854 = sext i32 %2853 to i64
  store i64 %2854, i64* %RCX.i8538, align 8
  %2855 = shl nsw i64 %2854, 3
  %2856 = add i64 %2855, %2849
  %2857 = add i64 %2838, 23
  store i64 %2857, i64* %3, align 8
  %2858 = inttoptr i64 %2856 to i64*
  %2859 = load i64, i64* %2858, align 8
  store i64 %2859, i64* %RAX.i3176, align 8
  %2860 = add i64 %2836, -56
  %2861 = add i64 %2838, 27
  store i64 %2861, i64* %3, align 8
  %2862 = inttoptr i64 %2860 to i32*
  %2863 = load i32, i32* %2862, align 4
  %2864 = sext i32 %2863 to i64
  store i64 %2864, i64* %RCX.i8538, align 8
  %2865 = shl nsw i64 %2864, 1
  %2866 = add i64 %2865, %2859
  %2867 = add i64 %2838, 31
  store i64 %2867, i64* %3, align 8
  %2868 = inttoptr i64 %2866 to i16*
  %2869 = load i16, i16* %2868, align 2
  store i16 %2869, i16* %DX.i8118, align 2
  %2870 = add i64 %2836, -16
  %2871 = add i64 %2838, 35
  store i64 %2871, i64* %3, align 8
  %2872 = inttoptr i64 %2870 to i64*
  %2873 = load i64, i64* %2872, align 8
  store i64 %2873, i64* %RAX.i3176, align 8
  %2874 = add i64 %2873, 1600
  %2875 = add i64 %2838, 42
  store i64 %2875, i64* %3, align 8
  %2876 = inttoptr i64 %2874 to i64*
  %2877 = load i64, i64* %2876, align 8
  store i64 %2877, i64* %RAX.i3176, align 8
  %2878 = add i64 %2877, 8
  %2879 = add i64 %2838, 46
  store i64 %2879, i64* %3, align 8
  %2880 = inttoptr i64 %2878 to i64*
  %2881 = load i64, i64* %2880, align 8
  store i64 %2881, i64* %RAX.i3176, align 8
  %2882 = add i64 %2838, 50
  store i64 %2882, i64* %3, align 8
  %2883 = load i32, i32* %2852, align 4
  %2884 = sext i32 %2883 to i64
  store i64 %2884, i64* %RCX.i8538, align 8
  %2885 = shl nsw i64 %2884, 3
  %2886 = add i64 %2885, %2881
  %2887 = add i64 %2838, 54
  store i64 %2887, i64* %3, align 8
  %2888 = inttoptr i64 %2886 to i64*
  %2889 = load i64, i64* %2888, align 8
  store i64 %2889, i64* %RAX.i3176, align 8
  %2890 = add i64 %2838, 58
  store i64 %2890, i64* %3, align 8
  %2891 = load i32, i32* %2862, align 4
  %2892 = sext i32 %2891 to i64
  store i64 %2892, i64* %RCX.i8538, align 8
  %2893 = shl nsw i64 %2892, 1
  %2894 = add i64 %2893, %2889
  %2895 = add i64 %2838, 62
  store i64 %2895, i64* %3, align 8
  %2896 = inttoptr i64 %2894 to i16*
  store i16 %2869, i16* %2896, align 2
  %2897 = load i64, i64* %RBP.i, align 8
  %2898 = add i64 %2897, -32
  %2899 = load i64, i64* %3, align 8
  %2900 = add i64 %2899, 4
  store i64 %2900, i64* %3, align 8
  %2901 = inttoptr i64 %2898 to i64*
  %2902 = load i64, i64* %2901, align 8
  store i64 %2902, i64* %RAX.i3176, align 8
  %2903 = add i64 %2902, 6496
  %2904 = add i64 %2899, 11
  store i64 %2904, i64* %3, align 8
  %2905 = inttoptr i64 %2903 to i64*
  %2906 = load i64, i64* %2905, align 8
  store i64 %2906, i64* %RAX.i3176, align 8
  %2907 = add i64 %2899, 14
  store i64 %2907, i64* %3, align 8
  %2908 = inttoptr i64 %2906 to i64*
  %2909 = load i64, i64* %2908, align 8
  store i64 %2909, i64* %RAX.i3176, align 8
  %2910 = add i64 %2897, -52
  %2911 = add i64 %2899, 18
  store i64 %2911, i64* %3, align 8
  %2912 = inttoptr i64 %2910 to i32*
  %2913 = load i32, i32* %2912, align 4
  %2914 = sext i32 %2913 to i64
  store i64 %2914, i64* %RCX.i8538, align 8
  %2915 = shl nsw i64 %2914, 3
  %2916 = add i64 %2915, %2909
  %2917 = add i64 %2899, 22
  store i64 %2917, i64* %3, align 8
  %2918 = inttoptr i64 %2916 to i64*
  %2919 = load i64, i64* %2918, align 8
  store i64 %2919, i64* %RAX.i3176, align 8
  %2920 = add i64 %2897, -56
  %2921 = add i64 %2899, 26
  store i64 %2921, i64* %3, align 8
  %2922 = inttoptr i64 %2920 to i32*
  %2923 = load i32, i32* %2922, align 4
  %2924 = sext i32 %2923 to i64
  store i64 %2924, i64* %RCX.i8538, align 8
  %2925 = shl nsw i64 %2924, 3
  %2926 = add i64 %2925, %2919
  %2927 = add i64 %2899, 30
  store i64 %2927, i64* %3, align 8
  %2928 = inttoptr i64 %2926 to i64*
  %2929 = load i64, i64* %2928, align 8
  store i64 %2929, i64* %RAX.i3176, align 8
  %2930 = add i64 %2897, -16
  %2931 = add i64 %2899, 34
  store i64 %2931, i64* %3, align 8
  %2932 = inttoptr i64 %2930 to i64*
  %2933 = load i64, i64* %2932, align 8
  store i64 %2933, i64* %RCX.i8538, align 8
  %2934 = add i64 %2933, 1608
  %2935 = add i64 %2899, 41
  store i64 %2935, i64* %3, align 8
  %2936 = inttoptr i64 %2934 to i64*
  %2937 = load i64, i64* %2936, align 8
  store i64 %2937, i64* %RCX.i8538, align 8
  %2938 = add i64 %2899, 44
  store i64 %2938, i64* %3, align 8
  %2939 = inttoptr i64 %2937 to i64*
  %2940 = load i64, i64* %2939, align 8
  store i64 %2940, i64* %RCX.i8538, align 8
  %2941 = add i64 %2899, 48
  store i64 %2941, i64* %3, align 8
  %2942 = load i32, i32* %2912, align 4
  %2943 = sext i32 %2942 to i64
  store i64 %2943, i64* %RSI.i766, align 8
  %2944 = shl nsw i64 %2943, 3
  %2945 = add i64 %2944, %2940
  %2946 = add i64 %2899, 52
  store i64 %2946, i64* %3, align 8
  %2947 = inttoptr i64 %2945 to i64*
  %2948 = load i64, i64* %2947, align 8
  store i64 %2948, i64* %RCX.i8538, align 8
  %2949 = add i64 %2899, 56
  store i64 %2949, i64* %3, align 8
  %2950 = load i32, i32* %2922, align 4
  %2951 = sext i32 %2950 to i64
  store i64 %2951, i64* %RSI.i766, align 8
  %2952 = shl nsw i64 %2951, 3
  %2953 = add i64 %2952, %2948
  %2954 = add i64 %2899, 60
  store i64 %2954, i64* %3, align 8
  %2955 = inttoptr i64 %2953 to i64*
  store i64 %2929, i64* %2955, align 8
  %2956 = load i64, i64* %RBP.i, align 8
  %2957 = add i64 %2956, -32
  %2958 = load i64, i64* %3, align 8
  %2959 = add i64 %2958, 4
  store i64 %2959, i64* %3, align 8
  %2960 = inttoptr i64 %2957 to i64*
  %2961 = load i64, i64* %2960, align 8
  store i64 %2961, i64* %RAX.i3176, align 8
  %2962 = add i64 %2961, 6496
  %2963 = add i64 %2958, 11
  store i64 %2963, i64* %3, align 8
  %2964 = inttoptr i64 %2962 to i64*
  %2965 = load i64, i64* %2964, align 8
  store i64 %2965, i64* %RAX.i3176, align 8
  %2966 = add i64 %2965, 8
  %2967 = add i64 %2958, 15
  store i64 %2967, i64* %3, align 8
  %2968 = inttoptr i64 %2966 to i64*
  %2969 = load i64, i64* %2968, align 8
  store i64 %2969, i64* %RAX.i3176, align 8
  %2970 = add i64 %2956, -52
  %2971 = add i64 %2958, 19
  store i64 %2971, i64* %3, align 8
  %2972 = inttoptr i64 %2970 to i32*
  %2973 = load i32, i32* %2972, align 4
  %2974 = sext i32 %2973 to i64
  store i64 %2974, i64* %RCX.i8538, align 8
  %2975 = shl nsw i64 %2974, 3
  %2976 = add i64 %2975, %2969
  %2977 = add i64 %2958, 23
  store i64 %2977, i64* %3, align 8
  %2978 = inttoptr i64 %2976 to i64*
  %2979 = load i64, i64* %2978, align 8
  store i64 %2979, i64* %RAX.i3176, align 8
  %2980 = add i64 %2956, -56
  %2981 = add i64 %2958, 27
  store i64 %2981, i64* %3, align 8
  %2982 = inttoptr i64 %2980 to i32*
  %2983 = load i32, i32* %2982, align 4
  %2984 = sext i32 %2983 to i64
  store i64 %2984, i64* %RCX.i8538, align 8
  %2985 = shl nsw i64 %2984, 3
  %2986 = add i64 %2985, %2979
  %2987 = add i64 %2958, 31
  store i64 %2987, i64* %3, align 8
  %2988 = inttoptr i64 %2986 to i64*
  %2989 = load i64, i64* %2988, align 8
  store i64 %2989, i64* %RAX.i3176, align 8
  %2990 = add i64 %2956, -16
  %2991 = add i64 %2958, 35
  store i64 %2991, i64* %3, align 8
  %2992 = inttoptr i64 %2990 to i64*
  %2993 = load i64, i64* %2992, align 8
  store i64 %2993, i64* %RCX.i8538, align 8
  %2994 = add i64 %2993, 1608
  %2995 = add i64 %2958, 42
  store i64 %2995, i64* %3, align 8
  %2996 = inttoptr i64 %2994 to i64*
  %2997 = load i64, i64* %2996, align 8
  store i64 %2997, i64* %RCX.i8538, align 8
  %2998 = add i64 %2997, 8
  %2999 = add i64 %2958, 46
  store i64 %2999, i64* %3, align 8
  %3000 = inttoptr i64 %2998 to i64*
  %3001 = load i64, i64* %3000, align 8
  store i64 %3001, i64* %RCX.i8538, align 8
  %3002 = add i64 %2958, 50
  store i64 %3002, i64* %3, align 8
  %3003 = load i32, i32* %2972, align 4
  %3004 = sext i32 %3003 to i64
  store i64 %3004, i64* %RSI.i766, align 8
  %3005 = shl nsw i64 %3004, 3
  %3006 = add i64 %3005, %3001
  %3007 = add i64 %2958, 54
  store i64 %3007, i64* %3, align 8
  %3008 = inttoptr i64 %3006 to i64*
  %3009 = load i64, i64* %3008, align 8
  store i64 %3009, i64* %RCX.i8538, align 8
  %3010 = add i64 %2958, 58
  store i64 %3010, i64* %3, align 8
  %3011 = load i32, i32* %2982, align 4
  %3012 = sext i32 %3011 to i64
  store i64 %3012, i64* %RSI.i766, align 8
  %3013 = shl nsw i64 %3012, 3
  %3014 = add i64 %3013, %3009
  %3015 = add i64 %2958, 62
  store i64 %3015, i64* %3, align 8
  %3016 = inttoptr i64 %3014 to i64*
  store i64 %2989, i64* %3016, align 8
  %3017 = load i64, i64* %RBP.i, align 8
  %3018 = add i64 %3017, -32
  %3019 = load i64, i64* %3, align 8
  %3020 = add i64 %3019, 4
  store i64 %3020, i64* %3, align 8
  %3021 = inttoptr i64 %3018 to i64*
  %3022 = load i64, i64* %3021, align 8
  store i64 %3022, i64* %RAX.i3176, align 8
  %3023 = add i64 %3022, 6376
  %3024 = add i64 %3019, 10
  store i64 %3024, i64* %3, align 8
  %3025 = inttoptr i64 %3023 to i32*
  %3026 = load i32, i32* %3025, align 4
  %3027 = zext i32 %3026 to i64
  store i64 %3027, i64* %RDI.i732, align 8
  %3028 = add i64 %3017, -16
  %3029 = add i64 %3019, 14
  store i64 %3029, i64* %3, align 8
  %3030 = inttoptr i64 %3028 to i64*
  %3031 = load i64, i64* %3030, align 8
  store i64 %3031, i64* %RAX.i3176, align 8
  %3032 = add i64 %3031, 4864
  %3033 = add i64 %3019, 20
  store i64 %3033, i64* %3, align 8
  %3034 = inttoptr i64 %3032 to i32*
  store i32 %3026, i32* %3034, align 4
  %.pre589 = load i64, i64* %3, align 8
  br label %block_.L_455f2f

block_.L_455f2f:                                  ; preds = %block_.L_455d17, %block_.L_455d12
  %3035 = phi i64 [ %.pre589, %block_.L_455d17 ], [ %2509, %block_.L_455d12 ]
  %MEMORY.9 = phi %struct.Memory* [ %444, %block_.L_455d17 ], [ %MEMORY.7, %block_.L_455d12 ]
  %3036 = load i64, i64* %RBP.i, align 8
  %3037 = add i64 %3036, -52
  %3038 = add i64 %3035, 8
  store i64 %3038, i64* %3, align 8
  %3039 = inttoptr i64 %3037 to i32*
  %3040 = load i32, i32* %3039, align 4
  %3041 = add i32 %3040, 1
  %3042 = zext i32 %3041 to i64
  store i64 %3042, i64* %RAX.i3176, align 8
  %3043 = icmp eq i32 %3040, -1
  %3044 = icmp eq i32 %3041, 0
  %3045 = or i1 %3043, %3044
  %3046 = zext i1 %3045 to i8
  store i8 %3046, i8* %19, align 1
  %3047 = and i32 %3041, 255
  %3048 = tail call i32 @llvm.ctpop.i32(i32 %3047)
  %3049 = trunc i32 %3048 to i8
  %3050 = and i8 %3049, 1
  %3051 = xor i8 %3050, 1
  store i8 %3051, i8* %26, align 1
  %3052 = xor i32 %3041, %3040
  %3053 = lshr i32 %3052, 4
  %3054 = trunc i32 %3053 to i8
  %3055 = and i8 %3054, 1
  store i8 %3055, i8* %31, align 1
  %3056 = zext i1 %3044 to i8
  store i8 %3056, i8* %34, align 1
  %3057 = lshr i32 %3041, 31
  %3058 = trunc i32 %3057 to i8
  store i8 %3058, i8* %37, align 1
  %3059 = lshr i32 %3040, 31
  %3060 = xor i32 %3057, %3059
  %3061 = add nuw nsw i32 %3060, %3057
  %3062 = icmp eq i32 %3061, 2
  %3063 = zext i1 %3062 to i8
  store i8 %3063, i8* %43, align 1
  %3064 = add i64 %3035, 14
  store i64 %3064, i64* %3, align 8
  store i32 %3041, i32* %3039, align 4
  %3065 = load i64, i64* %3, align 8
  %3066 = add i64 %3065, -2033
  store i64 %3066, i64* %3, align 8
  br label %block_.L_45574c

block_.L_455f42:                                  ; preds = %routine_idivl__esi.exit9196
  %3067 = load i64, i64* %RBP.i, align 8
  %3068 = add i64 %3067, -56
  %3069 = add i64 %472, 8
  store i64 %3069, i64* %3, align 8
  %3070 = inttoptr i64 %3068 to i32*
  %3071 = load i32, i32* %3070, align 4
  %3072 = add i32 %3071, 1
  %3073 = zext i32 %3072 to i64
  store i64 %3073, i64* %RAX.i3176, align 8
  %3074 = icmp eq i32 %3071, -1
  %3075 = icmp eq i32 %3072, 0
  %3076 = or i1 %3074, %3075
  %3077 = zext i1 %3076 to i8
  store i8 %3077, i8* %19, align 1
  %3078 = and i32 %3072, 255
  %3079 = tail call i32 @llvm.ctpop.i32(i32 %3078)
  %3080 = trunc i32 %3079 to i8
  %3081 = and i8 %3080, 1
  %3082 = xor i8 %3081, 1
  store i8 %3082, i8* %26, align 1
  %3083 = xor i32 %3072, %3071
  %3084 = lshr i32 %3083, 4
  %3085 = trunc i32 %3084 to i8
  %3086 = and i8 %3085, 1
  store i8 %3086, i8* %31, align 1
  %3087 = zext i1 %3075 to i8
  store i8 %3087, i8* %34, align 1
  %3088 = lshr i32 %3072, 31
  %3089 = trunc i32 %3088 to i8
  store i8 %3089, i8* %37, align 1
  %3090 = lshr i32 %3071, 31
  %3091 = xor i32 %3088, %3090
  %3092 = add nuw nsw i32 %3091, %3088
  %3093 = icmp eq i32 %3092, 2
  %3094 = zext i1 %3093 to i8
  store i8 %3094, i8* %43, align 1
  %3095 = add i64 %472, 14
  store i64 %3095, i64* %3, align 8
  store i32 %3072, i32* %3070, align 4
  %3096 = load i64, i64* %3, align 8
  %3097 = add i64 %3096, -2096
  store i64 %3097, i64* %3, align 8
  br label %block_.L_455720

block_.L_455f55:                                  ; preds = %routine_idivl__esi.exit8869
  %3098 = add i64 %392, 5
  store i64 %3098, i64* %3, align 8
  br label %block_.L_455f5a

block_.L_455f5a:                                  ; preds = %block_.L_455f55, %block_455704
  %3099 = phi i64 [ %3098, %block_.L_455f55 ], [ %306, %block_455704 ]
  %MEMORY.10 = phi %struct.Memory* [ %364, %block_.L_455f55 ], [ %2, %block_455704 ]
  %3100 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3100, i64* %RAX.i3176, align 8
  %3101 = add i64 %3100, 28
  %3102 = add i64 %3099, 12
  store i64 %3102, i64* %3, align 8
  %3103 = inttoptr i64 %3101 to i32*
  %3104 = load i32, i32* %3103, align 4
  store i8 0, i8* %19, align 1
  %3105 = and i32 %3104, 255
  %3106 = tail call i32 @llvm.ctpop.i32(i32 %3105)
  %3107 = trunc i32 %3106 to i8
  %3108 = and i8 %3107, 1
  %3109 = xor i8 %3108, 1
  store i8 %3109, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %3110 = icmp eq i32 %3104, 0
  %3111 = zext i1 %3110 to i8
  store i8 %3111, i8* %34, align 1
  %3112 = lshr i32 %3104, 31
  %3113 = trunc i32 %3112 to i8
  store i8 %3113, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v666 = select i1 %3110, i64 18, i64 39
  %3114 = add i64 %3099, %.v666
  store i64 %3114, i64* %3, align 8
  br i1 %3110, label %block_455f6c, label %block_.L_455f81

block_455f6c:                                     ; preds = %block_.L_455f5a
  store i64 %3100, i64* %RAX.i3176, align 8
  %3115 = add i64 %3100, 72400
  %3116 = add i64 %3114, 15
  store i64 %3116, i64* %3, align 8
  %3117 = inttoptr i64 %3115 to i32*
  %3118 = load i32, i32* %3117, align 4
  store i8 0, i8* %19, align 1
  %3119 = and i32 %3118, 255
  %3120 = tail call i32 @llvm.ctpop.i32(i32 %3119)
  %3121 = trunc i32 %3120 to i8
  %3122 = and i8 %3121, 1
  %3123 = xor i8 %3122, 1
  store i8 %3123, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %3124 = icmp eq i32 %3118, 0
  %3125 = zext i1 %3124 to i8
  store i8 %3125, i8* %34, align 1
  %3126 = lshr i32 %3118, 31
  %3127 = trunc i32 %3126 to i8
  store i8 %3127, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v725 = select i1 %3124, i64 6883, i64 21
  %3128 = add i64 %3114, %.v725
  store i64 %3128, i64* %3, align 8
  br i1 %3124, label %block_.L_457a4f, label %block_.L_455f81

block_.L_455f81:                                  ; preds = %block_.L_455f5a, %block_455f6c
  %3129 = phi i64 [ %3128, %block_455f6c ], [ %3114, %block_.L_455f5a ]
  %3130 = load i64, i64* %RBP.i, align 8
  %3131 = add i64 %3130, -52
  %3132 = add i64 %3129, 7
  store i64 %3132, i64* %3, align 8
  %3133 = inttoptr i64 %3131 to i32*
  store i32 0, i32* %3133, align 4
  %3134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i7756 = getelementptr inbounds %union.anon, %union.anon* %3134, i64 0, i32 0
  %3135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i7753 = getelementptr inbounds %union.anon, %union.anon* %3135, i64 0, i32 0
  %EAX.i7747 = bitcast %union.anon* %101 to i32*
  %ESI.i7744 = bitcast %union.anon* %50 to i32*
  %3136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %ECX.i7734 = bitcast %union.anon* %3134 to i32*
  %SI.i6180 = bitcast %union.anon* %50 to i16*
  %AX.i3895 = bitcast %union.anon* %101 to i16*
  %DI.i3896 = bitcast %union.anon* %44 to i16*
  %R8.i3883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %AL.i4135 = bitcast %union.anon* %101 to i8*
  %CL.i4136 = bitcast %union.anon* %3134 to i8*
  %DL.i4045 = bitcast %union.anon* %3135 to i8*
  %.pre300 = load i64, i64* %3, align 8
  br label %block_.L_455f88

block_.L_455f88:                                  ; preds = %block_.L_457a37, %block_.L_455f81
  %3137 = phi i64 [ %.pre300, %block_.L_455f81 ], [ %10311, %block_.L_457a37 ]
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.10, %block_.L_455f81 ], [ %3264, %block_.L_457a37 ]
  store i64 4, i64* %RAX.i3176, align 8
  %3138 = load i64, i64* %RBP.i, align 8
  %3139 = add i64 %3138, -52
  %3140 = add i64 %3137, 8
  store i64 %3140, i64* %3, align 8
  %3141 = inttoptr i64 %3139 to i32*
  %3142 = load i32, i32* %3141, align 4
  %3143 = zext i32 %3142 to i64
  store i64 %3143, i64* %RCX.i7756, align 8
  %3144 = add i64 %3138, -32
  %3145 = add i64 %3137, 12
  store i64 %3145, i64* %3, align 8
  %3146 = inttoptr i64 %3144 to i64*
  %3147 = load i64, i64* %3146, align 8
  store i64 %3147, i64* %RDX.i7753, align 8
  %3148 = add i64 %3147, 6392
  %3149 = add i64 %3137, 18
  store i64 %3149, i64* %3, align 8
  %3150 = inttoptr i64 %3148 to i32*
  %3151 = load i32, i32* %3150, align 4
  %3152 = zext i32 %3151 to i64
  store i64 %3152, i64* %RSI.i766, align 8
  %3153 = add i64 %3138, -132
  %3154 = add i64 %3137, 24
  store i64 %3154, i64* %3, align 8
  %3155 = inttoptr i64 %3153 to i32*
  store i32 4, i32* %3155, align 4
  %3156 = load i32, i32* %ESI.i7744, align 4
  %3157 = zext i32 %3156 to i64
  %3158 = load i64, i64* %3, align 8
  store i64 %3157, i64* %RAX.i3176, align 8
  %3159 = sext i32 %3156 to i64
  %3160 = lshr i64 %3159, 32
  store i64 %3160, i64* %3136, align 8
  %3161 = load i64, i64* %RBP.i, align 8
  %3162 = add i64 %3161, -132
  %3163 = add i64 %3158, 9
  store i64 %3163, i64* %3, align 8
  %3164 = inttoptr i64 %3162 to i32*
  %3165 = load i32, i32* %3164, align 4
  %3166 = zext i32 %3165 to i64
  store i64 %3166, i64* %RSI.i766, align 8
  %3167 = add i64 %3158, 11
  store i64 %3167, i64* %3, align 8
  %3168 = sext i32 %3165 to i64
  %3169 = shl nuw i64 %3160, 32
  %3170 = or i64 %3169, %3157
  %3171 = sdiv i64 %3170, %3168
  %3172 = shl i64 %3171, 32
  %3173 = ashr exact i64 %3172, 32
  %3174 = icmp eq i64 %3171, %3173
  br i1 %3174, label %3177, label %3175

; <label>:3175:                                   ; preds = %block_.L_455f88
  %3176 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3167, %struct.Memory* %MEMORY.12)
  %.pre301 = load i32, i32* %EAX.i7747, align 4
  %.pre302 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit7737

; <label>:3177:                                   ; preds = %block_.L_455f88
  %3178 = srem i64 %3170, %3168
  %3179 = and i64 %3171, 4294967295
  store i64 %3179, i64* %RAX.i3176, align 8
  %3180 = and i64 %3178, 4294967295
  store i64 %3180, i64* %RDX.i7753, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3181 = trunc i64 %3171 to i32
  br label %routine_idivl__esi.exit7737

routine_idivl__esi.exit7737:                      ; preds = %3177, %3175
  %3182 = phi i64 [ %.pre302, %3175 ], [ %3167, %3177 ]
  %3183 = phi i32 [ %.pre301, %3175 ], [ %3181, %3177 ]
  %3184 = phi %struct.Memory* [ %3176, %3175 ], [ %MEMORY.12, %3177 ]
  %3185 = load i32, i32* %ECX.i7734, align 4
  %3186 = sub i32 %3185, %3183
  %3187 = icmp ult i32 %3185, %3183
  %3188 = zext i1 %3187 to i8
  store i8 %3188, i8* %19, align 1
  %3189 = and i32 %3186, 255
  %3190 = tail call i32 @llvm.ctpop.i32(i32 %3189)
  %3191 = trunc i32 %3190 to i8
  %3192 = and i8 %3191, 1
  %3193 = xor i8 %3192, 1
  store i8 %3193, i8* %26, align 1
  %3194 = xor i32 %3183, %3185
  %3195 = xor i32 %3194, %3186
  %3196 = lshr i32 %3195, 4
  %3197 = trunc i32 %3196 to i8
  %3198 = and i8 %3197, 1
  store i8 %3198, i8* %31, align 1
  %3199 = icmp eq i32 %3186, 0
  %3200 = zext i1 %3199 to i8
  store i8 %3200, i8* %34, align 1
  %3201 = lshr i32 %3186, 31
  %3202 = trunc i32 %3201 to i8
  store i8 %3202, i8* %37, align 1
  %3203 = lshr i32 %3185, 31
  %3204 = lshr i32 %3183, 31
  %3205 = xor i32 %3204, %3203
  %3206 = xor i32 %3201, %3203
  %3207 = add nuw nsw i32 %3206, %3205
  %3208 = icmp eq i32 %3207, 2
  %3209 = zext i1 %3208 to i8
  store i8 %3209, i8* %43, align 1
  %3210 = icmp ne i8 %3202, 0
  %3211 = xor i1 %3210, %3208
  %.v667 = select i1 %3211, i64 8, i64 6815
  %3212 = add i64 %3182, %.v667
  store i64 %3212, i64* %3, align 8
  br i1 %3211, label %block_455fb3, label %block_.L_457a4a

block_455fb3:                                     ; preds = %routine_idivl__esi.exit7737
  %3213 = load i64, i64* %RBP.i, align 8
  %3214 = add i64 %3213, -56
  %3215 = add i64 %3212, 7
  store i64 %3215, i64* %3, align 8
  %3216 = inttoptr i64 %3214 to i32*
  store i32 0, i32* %3216, align 4
  %.pre436 = load i64, i64* %3, align 8
  br label %block_.L_455fba

block_.L_455fba:                                  ; preds = %block_.L_457a24, %block_455fb3
  %3217 = phi i64 [ %.pre436, %block_455fb3 ], [ %10280, %block_.L_457a24 ]
  %MEMORY.13 = phi %struct.Memory* [ %3184, %block_455fb3 ], [ %MEMORY.81, %block_.L_457a24 ]
  store i64 8, i64* %RAX.i3176, align 8
  %3218 = load i64, i64* %RBP.i, align 8
  %3219 = add i64 %3218, -56
  %3220 = add i64 %3217, 8
  store i64 %3220, i64* %3, align 8
  %3221 = inttoptr i64 %3219 to i32*
  %3222 = load i32, i32* %3221, align 4
  %3223 = zext i32 %3222 to i64
  store i64 %3223, i64* %RCX.i7756, align 8
  %3224 = add i64 %3218, -32
  %3225 = add i64 %3217, 12
  store i64 %3225, i64* %3, align 8
  %3226 = inttoptr i64 %3224 to i64*
  %3227 = load i64, i64* %3226, align 8
  store i64 %3227, i64* %RDX.i7753, align 8
  %3228 = add i64 %3227, 6396
  %3229 = add i64 %3217, 18
  store i64 %3229, i64* %3, align 8
  %3230 = inttoptr i64 %3228 to i32*
  %3231 = load i32, i32* %3230, align 4
  %3232 = zext i32 %3231 to i64
  store i64 %3232, i64* %RSI.i766, align 8
  %3233 = add i64 %3218, -136
  %3234 = add i64 %3217, 24
  store i64 %3234, i64* %3, align 8
  %3235 = inttoptr i64 %3233 to i32*
  store i32 8, i32* %3235, align 4
  %3236 = load i32, i32* %ESI.i7744, align 4
  %3237 = zext i32 %3236 to i64
  %3238 = load i64, i64* %3, align 8
  store i64 %3237, i64* %RAX.i3176, align 8
  %3239 = sext i32 %3236 to i64
  %3240 = lshr i64 %3239, 32
  store i64 %3240, i64* %3136, align 8
  %3241 = load i64, i64* %RBP.i, align 8
  %3242 = add i64 %3241, -136
  %3243 = add i64 %3238, 9
  store i64 %3243, i64* %3, align 8
  %3244 = inttoptr i64 %3242 to i32*
  %3245 = load i32, i32* %3244, align 4
  %3246 = zext i32 %3245 to i64
  store i64 %3246, i64* %RSI.i766, align 8
  %3247 = add i64 %3238, 11
  store i64 %3247, i64* %3, align 8
  %3248 = sext i32 %3245 to i64
  %3249 = shl nuw i64 %3240, 32
  %3250 = or i64 %3249, %3237
  %3251 = sdiv i64 %3250, %3248
  %3252 = shl i64 %3251, 32
  %3253 = ashr exact i64 %3252, 32
  %3254 = icmp eq i64 %3251, %3253
  br i1 %3254, label %3257, label %3255

; <label>:3255:                                   ; preds = %block_.L_455fba
  %3256 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3247, %struct.Memory* %MEMORY.13)
  %.pre437 = load i32, i32* %EAX.i7747, align 4
  %.pre438 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit7706

; <label>:3257:                                   ; preds = %block_.L_455fba
  %3258 = srem i64 %3250, %3248
  %3259 = and i64 %3251, 4294967295
  store i64 %3259, i64* %RAX.i3176, align 8
  %3260 = and i64 %3258, 4294967295
  store i64 %3260, i64* %RDX.i7753, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3261 = trunc i64 %3251 to i32
  br label %routine_idivl__esi.exit7706

routine_idivl__esi.exit7706:                      ; preds = %3257, %3255
  %3262 = phi i64 [ %.pre438, %3255 ], [ %3247, %3257 ]
  %3263 = phi i32 [ %.pre437, %3255 ], [ %3261, %3257 ]
  %3264 = phi %struct.Memory* [ %3256, %3255 ], [ %MEMORY.13, %3257 ]
  %3265 = load i32, i32* %ECX.i7734, align 4
  %3266 = sub i32 %3265, %3263
  %3267 = icmp ult i32 %3265, %3263
  %3268 = zext i1 %3267 to i8
  store i8 %3268, i8* %19, align 1
  %3269 = and i32 %3266, 255
  %3270 = tail call i32 @llvm.ctpop.i32(i32 %3269)
  %3271 = trunc i32 %3270 to i8
  %3272 = and i8 %3271, 1
  %3273 = xor i8 %3272, 1
  store i8 %3273, i8* %26, align 1
  %3274 = xor i32 %3263, %3265
  %3275 = xor i32 %3274, %3266
  %3276 = lshr i32 %3275, 4
  %3277 = trunc i32 %3276 to i8
  %3278 = and i8 %3277, 1
  store i8 %3278, i8* %31, align 1
  %3279 = icmp eq i32 %3266, 0
  %3280 = zext i1 %3279 to i8
  store i8 %3280, i8* %34, align 1
  %3281 = lshr i32 %3266, 31
  %3282 = trunc i32 %3281 to i8
  store i8 %3282, i8* %37, align 1
  %3283 = lshr i32 %3265, 31
  %3284 = lshr i32 %3263, 31
  %3285 = xor i32 %3284, %3283
  %3286 = xor i32 %3281, %3283
  %3287 = add nuw nsw i32 %3286, %3285
  %3288 = icmp eq i32 %3287, 2
  %3289 = zext i1 %3288 to i8
  store i8 %3289, i8* %43, align 1
  %3290 = icmp ne i8 %3282, 0
  %3291 = xor i1 %3290, %3288
  %.v707 = select i1 %3291, i64 8, i64 6746
  %3292 = add i64 %3262, %.v707
  store i64 %3292, i64* %3, align 8
  br i1 %3291, label %block_455fe5, label %block_.L_457a37

block_455fe5:                                     ; preds = %routine_idivl__esi.exit7706
  %3293 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %3293, i64* %RAX.i3176, align 8
  %3294 = add i64 %3293, 72400
  %3295 = add i64 %3292, 15
  store i64 %3295, i64* %3, align 8
  %3296 = inttoptr i64 %3294 to i32*
  %3297 = load i32, i32* %3296, align 4
  store i8 0, i8* %19, align 1
  %3298 = and i32 %3297, 255
  %3299 = tail call i32 @llvm.ctpop.i32(i32 %3298)
  %3300 = trunc i32 %3299 to i8
  %3301 = and i8 %3300, 1
  %3302 = xor i8 %3301, 1
  store i8 %3302, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %3303 = icmp eq i32 %3297, 0
  %3304 = zext i1 %3303 to i8
  store i8 %3304, i8* %34, align 1
  %3305 = lshr i32 %3297, 31
  %3306 = trunc i32 %3305 to i8
  store i8 %3306, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v708 = select i1 %3303, i64 21, i64 2500
  %3307 = add i64 %3292, %.v708
  store i64 %3307, i64* %3, align 8
  %3308 = load i64, i64* %RBP.i, align 8
  br i1 %3303, label %block_455ffa, label %block_.L_4569a9

block_455ffa:                                     ; preds = %block_455fe5
  %3309 = add i64 %3308, -32
  %3310 = add i64 %3307, 4
  store i64 %3310, i64* %3, align 8
  %3311 = inttoptr i64 %3309 to i64*
  %3312 = load i64, i64* %3311, align 8
  store i64 %3312, i64* %RAX.i3176, align 8
  %3313 = add i64 %3312, 6504
  %3314 = add i64 %3307, 11
  store i64 %3314, i64* %3, align 8
  %3315 = inttoptr i64 %3313 to i64*
  %3316 = load i64, i64* %3315, align 8
  store i64 %3316, i64* %RAX.i3176, align 8
  %3317 = add i64 %3307, 14
  store i64 %3317, i64* %3, align 8
  %3318 = inttoptr i64 %3316 to i64*
  %3319 = load i64, i64* %3318, align 8
  store i64 %3319, i64* %RAX.i3176, align 8
  %3320 = add i64 %3308, -52
  %3321 = add i64 %3307, 17
  store i64 %3321, i64* %3, align 8
  %3322 = inttoptr i64 %3320 to i32*
  %3323 = load i32, i32* %3322, align 4
  %3324 = and i32 %3323, 2
  %3325 = zext i32 %3324 to i64
  store i64 %3325, i64* %RCX.i7756, align 8
  store i8 0, i8* %19, align 1
  %3326 = tail call i32 @llvm.ctpop.i32(i32 %3324)
  %3327 = trunc i32 %3326 to i8
  %3328 = xor i8 %3327, 1
  store i8 %3328, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit606 = lshr exact i32 %3324, 1
  %3329 = trunc i32 %.lobit606 to i8
  %3330 = xor i8 %3329, 1
  store i8 %3330, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3331 = add i64 %3308, -144
  %3332 = add i64 %3307, 30
  store i64 %3332, i64* %3, align 8
  %3333 = inttoptr i64 %3331 to i64*
  store i64 %3319, i64* %3333, align 8
  %3334 = load i64, i64* %3, align 8
  %3335 = load i8, i8* %34, align 1
  %3336 = icmp ne i8 %3335, 0
  %.v804 = select i1 %3336, i64 23, i64 6
  %3337 = add i64 %3334, %.v804
  %cmpBr_456018 = icmp eq i8 %3335, 1
  %3338 = load i64, i64* %RBP.i, align 8
  %3339 = add i64 %3338, -52
  %3340 = add i64 %3337, 3
  store i64 %3340, i64* %3, align 8
  %3341 = inttoptr i64 %3339 to i32*
  %3342 = load i32, i32* %3341, align 4
  %3343 = zext i32 %3342 to i64
  store i64 %3343, i64* %RAX.i3176, align 8
  %3344 = add i64 %3337, 6
  store i64 %3344, i64* %3, align 8
  br i1 %cmpBr_456018, label %block_.L_45602f, label %block_45601e

block_45601e:                                     ; preds = %block_455ffa
  %3345 = or i64 %3343, 1
  %3346 = trunc i64 %3345 to i32
  store i64 %3345, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3347 = and i32 %3346, 255
  %3348 = tail call i32 @llvm.ctpop.i32(i32 %3347)
  %3349 = trunc i32 %3348 to i8
  %3350 = and i8 %3349, 1
  %3351 = xor i8 %3350, 1
  store i8 %3351, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %3352 = lshr i32 %3346, 31
  %3353 = trunc i32 %3352 to i8
  store i8 %3353, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3354 = add i64 %3338, -148
  %3355 = add i64 %3337, 12
  store i64 %3355, i64* %3, align 8
  %3356 = inttoptr i64 %3354 to i32*
  store i32 %3346, i32* %3356, align 4
  %3357 = load i64, i64* %3, align 8
  %3358 = add i64 %3357, 17
  store i64 %3358, i64* %3, align 8
  br label %block_.L_45603b

block_.L_45602f:                                  ; preds = %block_455ffa
  %3359 = and i64 %3343, 4294967294
  store i64 %3359, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3360 = and i32 %3342, 254
  %3361 = tail call i32 @llvm.ctpop.i32(i32 %3360)
  %3362 = trunc i32 %3361 to i8
  %3363 = and i8 %3362, 1
  %3364 = xor i8 %3363, 1
  store i8 %3364, i8* %26, align 1
  %3365 = icmp ult i32 %3342, 2
  %3366 = zext i1 %3365 to i8
  store i8 %3366, i8* %34, align 1
  %3367 = lshr i32 %3342, 31
  %3368 = trunc i32 %3367 to i8
  store i8 %3368, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3369 = add i64 %3338, -148
  %3370 = trunc i64 %3359 to i32
  %3371 = add i64 %3337, 12
  store i64 %3371, i64* %3, align 8
  %3372 = inttoptr i64 %3369 to i32*
  store i32 %3370, i32* %3372, align 4
  %.pre439 = load i64, i64* %3, align 8
  br label %block_.L_45603b

block_.L_45603b:                                  ; preds = %block_.L_45602f, %block_45601e
  %3373 = phi i64 [ %.pre439, %block_.L_45602f ], [ %3358, %block_45601e ]
  %3374 = load i64, i64* %RBP.i, align 8
  %3375 = add i64 %3374, -148
  %3376 = add i64 %3373, 6
  store i64 %3376, i64* %3, align 8
  %3377 = inttoptr i64 %3375 to i32*
  %3378 = load i32, i32* %3377, align 4
  %3379 = zext i32 %3378 to i64
  store i64 %3379, i64* %RAX.i3176, align 8
  %3380 = sext i32 %3378 to i64
  store i64 %3380, i64* %RCX.i7756, align 8
  %3381 = add i64 %3374, -144
  %3382 = add i64 %3373, 16
  store i64 %3382, i64* %3, align 8
  %3383 = inttoptr i64 %3381 to i64*
  %3384 = load i64, i64* %3383, align 8
  store i64 %3384, i64* %RDX.i7753, align 8
  %3385 = shl nsw i64 %3380, 3
  %3386 = add i64 %3385, %3384
  %3387 = add i64 %3373, 20
  store i64 %3387, i64* %3, align 8
  %3388 = inttoptr i64 %3386 to i64*
  %3389 = load i64, i64* %3388, align 8
  store i64 %3389, i64* %RCX.i7756, align 8
  %3390 = add i64 %3374, -56
  %3391 = add i64 %3373, 23
  store i64 %3391, i64* %3, align 8
  %3392 = inttoptr i64 %3390 to i32*
  %3393 = load i32, i32* %3392, align 4
  %3394 = and i32 %3393, 2
  %3395 = zext i32 %3394 to i64
  store i64 %3395, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3396 = tail call i32 @llvm.ctpop.i32(i32 %3394)
  %3397 = trunc i32 %3396 to i8
  %3398 = xor i8 %3397, 1
  store i8 %3398, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit607 = lshr exact i32 %3394, 1
  %3399 = trunc i32 %.lobit607 to i8
  %3400 = xor i8 %3399, 1
  store i8 %3400, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3401 = add i64 %3374, -160
  %3402 = add i64 %3373, 36
  store i64 %3402, i64* %3, align 8
  %3403 = inttoptr i64 %3401 to i64*
  store i64 %3389, i64* %3403, align 8
  %3404 = load i64, i64* %3, align 8
  %3405 = load i8, i8* %34, align 1
  %3406 = icmp ne i8 %3405, 0
  %.v805 = select i1 %3406, i64 23, i64 6
  %3407 = add i64 %3404, %.v805
  %cmpBr_45605f = icmp eq i8 %3405, 1
  %3408 = load i64, i64* %RBP.i, align 8
  %3409 = add i64 %3408, -56
  %3410 = add i64 %3407, 3
  store i64 %3410, i64* %3, align 8
  %3411 = inttoptr i64 %3409 to i32*
  %3412 = load i32, i32* %3411, align 4
  %3413 = zext i32 %3412 to i64
  store i64 %3413, i64* %RAX.i3176, align 8
  %3414 = add i64 %3407, 6
  store i64 %3414, i64* %3, align 8
  br i1 %cmpBr_45605f, label %block_.L_456076, label %block_456065

block_456065:                                     ; preds = %block_.L_45603b
  %3415 = or i64 %3413, 1
  %3416 = trunc i64 %3415 to i32
  store i64 %3415, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3417 = and i32 %3416, 255
  %3418 = tail call i32 @llvm.ctpop.i32(i32 %3417)
  %3419 = trunc i32 %3418 to i8
  %3420 = and i8 %3419, 1
  %3421 = xor i8 %3420, 1
  store i8 %3421, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %3422 = lshr i32 %3416, 31
  %3423 = trunc i32 %3422 to i8
  store i8 %3423, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3424 = add i64 %3408, -164
  %3425 = add i64 %3407, 12
  store i64 %3425, i64* %3, align 8
  %3426 = inttoptr i64 %3424 to i32*
  store i32 %3416, i32* %3426, align 4
  %3427 = load i64, i64* %3, align 8
  %3428 = add i64 %3427, 17
  store i64 %3428, i64* %3, align 8
  br label %block_.L_456082

block_.L_456076:                                  ; preds = %block_.L_45603b
  %3429 = and i64 %3413, 4294967294
  store i64 %3429, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3430 = and i32 %3412, 254
  %3431 = tail call i32 @llvm.ctpop.i32(i32 %3430)
  %3432 = trunc i32 %3431 to i8
  %3433 = and i8 %3432, 1
  %3434 = xor i8 %3433, 1
  store i8 %3434, i8* %26, align 1
  %3435 = icmp ult i32 %3412, 2
  %3436 = zext i1 %3435 to i8
  store i8 %3436, i8* %34, align 1
  %3437 = lshr i32 %3412, 31
  %3438 = trunc i32 %3437 to i8
  store i8 %3438, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3439 = add i64 %3408, -164
  %3440 = trunc i64 %3429 to i32
  %3441 = add i64 %3407, 12
  store i64 %3441, i64* %3, align 8
  %3442 = inttoptr i64 %3439 to i32*
  store i32 %3440, i32* %3442, align 4
  %.pre440 = load i64, i64* %3, align 8
  br label %block_.L_456082

block_.L_456082:                                  ; preds = %block_.L_456076, %block_456065
  %3443 = phi i64 [ %.pre440, %block_.L_456076 ], [ %3428, %block_456065 ]
  %3444 = load i64, i64* %RBP.i, align 8
  %3445 = add i64 %3444, -164
  %3446 = add i64 %3443, 6
  store i64 %3446, i64* %3, align 8
  %3447 = inttoptr i64 %3445 to i32*
  %3448 = load i32, i32* %3447, align 4
  %3449 = zext i32 %3448 to i64
  store i64 %3449, i64* %RAX.i3176, align 8
  %3450 = sext i32 %3448 to i64
  store i64 %3450, i64* %RCX.i7756, align 8
  %3451 = add i64 %3444, -160
  %3452 = add i64 %3443, 16
  store i64 %3452, i64* %3, align 8
  %3453 = inttoptr i64 %3451 to i64*
  %3454 = load i64, i64* %3453, align 8
  store i64 %3454, i64* %RDX.i7753, align 8
  %3455 = shl nsw i64 %3450, 3
  %3456 = add i64 %3455, %3454
  %3457 = add i64 %3443, 20
  store i64 %3457, i64* %3, align 8
  %3458 = inttoptr i64 %3456 to i64*
  %3459 = load i64, i64* %3458, align 8
  store i64 %3459, i64* %RCX.i7756, align 8
  %3460 = add i64 %3443, 23
  store i64 %3460, i64* %3, align 8
  %3461 = inttoptr i64 %3459 to i16*
  %3462 = load i16, i16* %3461, align 2
  store i16 %3462, i16* %SI.i6180, align 2
  %3463 = add i64 %3444, -16
  %3464 = add i64 %3443, 27
  store i64 %3464, i64* %3, align 8
  %3465 = inttoptr i64 %3463 to i64*
  %3466 = load i64, i64* %3465, align 8
  store i64 %3466, i64* %RCX.i7756, align 8
  %3467 = add i64 %3466, 1616
  %3468 = add i64 %3443, 34
  store i64 %3468, i64* %3, align 8
  %3469 = inttoptr i64 %3467 to i64*
  %3470 = load i64, i64* %3469, align 8
  store i64 %3470, i64* %RCX.i7756, align 8
  %3471 = add i64 %3443, 37
  store i64 %3471, i64* %3, align 8
  %3472 = inttoptr i64 %3470 to i64*
  %3473 = load i64, i64* %3472, align 8
  store i64 %3473, i64* %RCX.i7756, align 8
  %3474 = add i64 %3444, -52
  %3475 = add i64 %3443, 41
  store i64 %3475, i64* %3, align 8
  %3476 = inttoptr i64 %3474 to i32*
  %3477 = load i32, i32* %3476, align 4
  %3478 = sext i32 %3477 to i64
  store i64 %3478, i64* %RDI.i732, align 8
  %3479 = shl nsw i64 %3478, 3
  %3480 = add i64 %3479, %3473
  %3481 = add i64 %3443, 45
  store i64 %3481, i64* %3, align 8
  %3482 = inttoptr i64 %3480 to i64*
  %3483 = load i64, i64* %3482, align 8
  store i64 %3483, i64* %RCX.i7756, align 8
  %3484 = add i64 %3444, -56
  %3485 = add i64 %3443, 49
  store i64 %3485, i64* %3, align 8
  %3486 = inttoptr i64 %3484 to i32*
  %3487 = load i32, i32* %3486, align 4
  %3488 = sext i32 %3487 to i64
  store i64 %3488, i64* %RDI.i732, align 8
  %3489 = shl nsw i64 %3488, 3
  %3490 = add i64 %3489, %3483
  %3491 = add i64 %3443, 53
  store i64 %3491, i64* %3, align 8
  %3492 = inttoptr i64 %3490 to i64*
  %3493 = load i64, i64* %3492, align 8
  store i64 %3493, i64* %RCX.i7756, align 8
  %3494 = add i64 %3443, 56
  store i64 %3494, i64* %3, align 8
  %3495 = inttoptr i64 %3493 to i16*
  store i16 %3462, i16* %3495, align 2
  %3496 = load i64, i64* %RBP.i, align 8
  %3497 = add i64 %3496, -32
  %3498 = load i64, i64* %3, align 8
  %3499 = add i64 %3498, 4
  store i64 %3499, i64* %3, align 8
  %3500 = inttoptr i64 %3497 to i64*
  %3501 = load i64, i64* %3500, align 8
  store i64 %3501, i64* %RCX.i7756, align 8
  %3502 = add i64 %3501, 6504
  %3503 = add i64 %3498, 11
  store i64 %3503, i64* %3, align 8
  %3504 = inttoptr i64 %3502 to i64*
  %3505 = load i64, i64* %3504, align 8
  store i64 %3505, i64* %RCX.i7756, align 8
  %3506 = add i64 %3498, 14
  store i64 %3506, i64* %3, align 8
  %3507 = inttoptr i64 %3505 to i64*
  %3508 = load i64, i64* %3507, align 8
  store i64 %3508, i64* %RCX.i7756, align 8
  %3509 = add i64 %3496, -52
  %3510 = add i64 %3498, 17
  store i64 %3510, i64* %3, align 8
  %3511 = inttoptr i64 %3509 to i32*
  %3512 = load i32, i32* %3511, align 4
  %3513 = and i32 %3512, 2
  %3514 = zext i32 %3513 to i64
  store i64 %3514, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3515 = tail call i32 @llvm.ctpop.i32(i32 %3513)
  %3516 = trunc i32 %3515 to i8
  %3517 = xor i8 %3516, 1
  store i8 %3517, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit608 = lshr exact i32 %3513, 1
  %3518 = trunc i32 %.lobit608 to i8
  %3519 = xor i8 %3518, 1
  store i8 %3519, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3520 = add i64 %3496, -176
  %3521 = add i64 %3498, 30
  store i64 %3521, i64* %3, align 8
  %3522 = inttoptr i64 %3520 to i64*
  store i64 %3508, i64* %3522, align 8
  %3523 = load i64, i64* %3, align 8
  %3524 = load i8, i8* %34, align 1
  %3525 = icmp ne i8 %3524, 0
  %.v806 = select i1 %3525, i64 23, i64 6
  %3526 = add i64 %3523, %.v806
  %cmpBr_4560d8 = icmp eq i8 %3524, 1
  %3527 = load i64, i64* %RBP.i, align 8
  %3528 = add i64 %3527, -52
  %3529 = add i64 %3526, 3
  store i64 %3529, i64* %3, align 8
  %3530 = inttoptr i64 %3528 to i32*
  %3531 = load i32, i32* %3530, align 4
  %3532 = zext i32 %3531 to i64
  store i64 %3532, i64* %RAX.i3176, align 8
  %3533 = add i64 %3526, 6
  store i64 %3533, i64* %3, align 8
  br i1 %cmpBr_4560d8, label %block_.L_4560ef, label %block_4560de

block_4560de:                                     ; preds = %block_.L_456082
  %3534 = or i64 %3532, 1
  %3535 = trunc i64 %3534 to i32
  store i64 %3534, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3536 = and i32 %3535, 255
  %3537 = tail call i32 @llvm.ctpop.i32(i32 %3536)
  %3538 = trunc i32 %3537 to i8
  %3539 = and i8 %3538, 1
  %3540 = xor i8 %3539, 1
  store i8 %3540, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %3541 = lshr i32 %3535, 31
  %3542 = trunc i32 %3541 to i8
  store i8 %3542, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3543 = add i64 %3527, -180
  %3544 = add i64 %3526, 12
  store i64 %3544, i64* %3, align 8
  %3545 = inttoptr i64 %3543 to i32*
  store i32 %3535, i32* %3545, align 4
  %3546 = load i64, i64* %3, align 8
  %3547 = add i64 %3546, 17
  store i64 %3547, i64* %3, align 8
  br label %block_.L_4560fb

block_.L_4560ef:                                  ; preds = %block_.L_456082
  %3548 = and i64 %3532, 4294967294
  store i64 %3548, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3549 = and i32 %3531, 254
  %3550 = tail call i32 @llvm.ctpop.i32(i32 %3549)
  %3551 = trunc i32 %3550 to i8
  %3552 = and i8 %3551, 1
  %3553 = xor i8 %3552, 1
  store i8 %3553, i8* %26, align 1
  %3554 = icmp ult i32 %3531, 2
  %3555 = zext i1 %3554 to i8
  store i8 %3555, i8* %34, align 1
  %3556 = lshr i32 %3531, 31
  %3557 = trunc i32 %3556 to i8
  store i8 %3557, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3558 = add i64 %3527, -180
  %3559 = trunc i64 %3548 to i32
  %3560 = add i64 %3526, 12
  store i64 %3560, i64* %3, align 8
  %3561 = inttoptr i64 %3558 to i32*
  store i32 %3559, i32* %3561, align 4
  %.pre441 = load i64, i64* %3, align 8
  br label %block_.L_4560fb

block_.L_4560fb:                                  ; preds = %block_.L_4560ef, %block_4560de
  %3562 = phi i64 [ %.pre441, %block_.L_4560ef ], [ %3547, %block_4560de ]
  %3563 = load i64, i64* %RBP.i, align 8
  %3564 = add i64 %3563, -180
  %3565 = add i64 %3562, 6
  store i64 %3565, i64* %3, align 8
  %3566 = inttoptr i64 %3564 to i32*
  %3567 = load i32, i32* %3566, align 4
  %3568 = zext i32 %3567 to i64
  store i64 %3568, i64* %RAX.i3176, align 8
  %3569 = sext i32 %3567 to i64
  store i64 %3569, i64* %RCX.i7756, align 8
  %3570 = add i64 %3563, -176
  %3571 = add i64 %3562, 16
  store i64 %3571, i64* %3, align 8
  %3572 = inttoptr i64 %3570 to i64*
  %3573 = load i64, i64* %3572, align 8
  store i64 %3573, i64* %RDX.i7753, align 8
  %3574 = shl nsw i64 %3569, 3
  %3575 = add i64 %3574, %3573
  %3576 = add i64 %3562, 20
  store i64 %3576, i64* %3, align 8
  %3577 = inttoptr i64 %3575 to i64*
  %3578 = load i64, i64* %3577, align 8
  store i64 %3578, i64* %RCX.i7756, align 8
  %3579 = add i64 %3563, -56
  %3580 = add i64 %3562, 23
  store i64 %3580, i64* %3, align 8
  %3581 = inttoptr i64 %3579 to i32*
  %3582 = load i32, i32* %3581, align 4
  %3583 = and i32 %3582, 2
  %3584 = zext i32 %3583 to i64
  store i64 %3584, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3585 = tail call i32 @llvm.ctpop.i32(i32 %3583)
  %3586 = trunc i32 %3585 to i8
  %3587 = xor i8 %3586, 1
  store i8 %3587, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit609 = lshr exact i32 %3583, 1
  %3588 = trunc i32 %.lobit609 to i8
  %3589 = xor i8 %3588, 1
  store i8 %3589, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3590 = add i64 %3563, -192
  %3591 = add i64 %3562, 36
  store i64 %3591, i64* %3, align 8
  %3592 = inttoptr i64 %3590 to i64*
  store i64 %3578, i64* %3592, align 8
  %3593 = load i64, i64* %3, align 8
  %3594 = load i8, i8* %34, align 1
  %3595 = icmp ne i8 %3594, 0
  %.v807 = select i1 %3595, i64 23, i64 6
  %3596 = add i64 %3593, %.v807
  %cmpBr_45611f = icmp eq i8 %3594, 1
  %3597 = load i64, i64* %RBP.i, align 8
  %3598 = add i64 %3597, -56
  %3599 = add i64 %3596, 3
  store i64 %3599, i64* %3, align 8
  %3600 = inttoptr i64 %3598 to i32*
  %3601 = load i32, i32* %3600, align 4
  %3602 = zext i32 %3601 to i64
  store i64 %3602, i64* %RAX.i3176, align 8
  %3603 = add i64 %3596, 6
  store i64 %3603, i64* %3, align 8
  br i1 %cmpBr_45611f, label %block_.L_456136, label %block_456125

block_456125:                                     ; preds = %block_.L_4560fb
  %3604 = or i64 %3602, 1
  %3605 = trunc i64 %3604 to i32
  store i64 %3604, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3606 = and i32 %3605, 255
  %3607 = tail call i32 @llvm.ctpop.i32(i32 %3606)
  %3608 = trunc i32 %3607 to i8
  %3609 = and i8 %3608, 1
  %3610 = xor i8 %3609, 1
  store i8 %3610, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %3611 = lshr i32 %3605, 31
  %3612 = trunc i32 %3611 to i8
  store i8 %3612, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3613 = add i64 %3597, -196
  %3614 = add i64 %3596, 12
  store i64 %3614, i64* %3, align 8
  %3615 = inttoptr i64 %3613 to i32*
  store i32 %3605, i32* %3615, align 4
  %3616 = load i64, i64* %3, align 8
  %3617 = add i64 %3616, 17
  store i64 %3617, i64* %3, align 8
  br label %block_.L_456142

block_.L_456136:                                  ; preds = %block_.L_4560fb
  %3618 = and i64 %3602, 4294967294
  store i64 %3618, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3619 = and i32 %3601, 254
  %3620 = tail call i32 @llvm.ctpop.i32(i32 %3619)
  %3621 = trunc i32 %3620 to i8
  %3622 = and i8 %3621, 1
  %3623 = xor i8 %3622, 1
  store i8 %3623, i8* %26, align 1
  %3624 = icmp ult i32 %3601, 2
  %3625 = zext i1 %3624 to i8
  store i8 %3625, i8* %34, align 1
  %3626 = lshr i32 %3601, 31
  %3627 = trunc i32 %3626 to i8
  store i8 %3627, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3628 = add i64 %3597, -196
  %3629 = trunc i64 %3618 to i32
  %3630 = add i64 %3596, 12
  store i64 %3630, i64* %3, align 8
  %3631 = inttoptr i64 %3628 to i32*
  store i32 %3629, i32* %3631, align 4
  %.pre442 = load i64, i64* %3, align 8
  br label %block_.L_456142

block_.L_456142:                                  ; preds = %block_.L_456136, %block_456125
  %3632 = phi i64 [ %.pre442, %block_.L_456136 ], [ %3617, %block_456125 ]
  %3633 = load i64, i64* %RBP.i, align 8
  %3634 = add i64 %3633, -196
  %3635 = add i64 %3632, 6
  store i64 %3635, i64* %3, align 8
  %3636 = inttoptr i64 %3634 to i32*
  %3637 = load i32, i32* %3636, align 4
  %3638 = zext i32 %3637 to i64
  store i64 %3638, i64* %RAX.i3176, align 8
  %3639 = sext i32 %3637 to i64
  store i64 %3639, i64* %RCX.i7756, align 8
  %3640 = add i64 %3633, -192
  %3641 = add i64 %3632, 16
  store i64 %3641, i64* %3, align 8
  %3642 = inttoptr i64 %3640 to i64*
  %3643 = load i64, i64* %3642, align 8
  store i64 %3643, i64* %RDX.i7753, align 8
  %3644 = shl nsw i64 %3639, 3
  %3645 = add i64 %3644, %3643
  %3646 = add i64 %3632, 20
  store i64 %3646, i64* %3, align 8
  %3647 = inttoptr i64 %3645 to i64*
  %3648 = load i64, i64* %3647, align 8
  store i64 %3648, i64* %RCX.i7756, align 8
  %3649 = add i64 %3648, 2
  %3650 = add i64 %3632, 24
  store i64 %3650, i64* %3, align 8
  %3651 = inttoptr i64 %3649 to i16*
  %3652 = load i16, i16* %3651, align 2
  store i16 %3652, i16* %SI.i6180, align 2
  %3653 = add i64 %3633, -16
  %3654 = add i64 %3632, 28
  store i64 %3654, i64* %3, align 8
  %3655 = inttoptr i64 %3653 to i64*
  %3656 = load i64, i64* %3655, align 8
  store i64 %3656, i64* %RCX.i7756, align 8
  %3657 = add i64 %3656, 1616
  %3658 = add i64 %3632, 35
  store i64 %3658, i64* %3, align 8
  %3659 = inttoptr i64 %3657 to i64*
  %3660 = load i64, i64* %3659, align 8
  store i64 %3660, i64* %RCX.i7756, align 8
  %3661 = add i64 %3632, 38
  store i64 %3661, i64* %3, align 8
  %3662 = inttoptr i64 %3660 to i64*
  %3663 = load i64, i64* %3662, align 8
  store i64 %3663, i64* %RCX.i7756, align 8
  %3664 = add i64 %3633, -52
  %3665 = add i64 %3632, 42
  store i64 %3665, i64* %3, align 8
  %3666 = inttoptr i64 %3664 to i32*
  %3667 = load i32, i32* %3666, align 4
  %3668 = sext i32 %3667 to i64
  store i64 %3668, i64* %RDI.i732, align 8
  %3669 = shl nsw i64 %3668, 3
  %3670 = add i64 %3669, %3663
  %3671 = add i64 %3632, 46
  store i64 %3671, i64* %3, align 8
  %3672 = inttoptr i64 %3670 to i64*
  %3673 = load i64, i64* %3672, align 8
  store i64 %3673, i64* %RCX.i7756, align 8
  %3674 = add i64 %3633, -56
  %3675 = add i64 %3632, 50
  store i64 %3675, i64* %3, align 8
  %3676 = inttoptr i64 %3674 to i32*
  %3677 = load i32, i32* %3676, align 4
  %3678 = sext i32 %3677 to i64
  store i64 %3678, i64* %RDI.i732, align 8
  %3679 = shl nsw i64 %3678, 3
  %3680 = add i64 %3679, %3673
  %3681 = add i64 %3632, 54
  store i64 %3681, i64* %3, align 8
  %3682 = inttoptr i64 %3680 to i64*
  %3683 = load i64, i64* %3682, align 8
  store i64 %3683, i64* %RCX.i7756, align 8
  %3684 = add i64 %3683, 2
  %3685 = add i64 %3632, 58
  store i64 %3685, i64* %3, align 8
  %3686 = inttoptr i64 %3684 to i16*
  store i16 %3652, i16* %3686, align 2
  %3687 = load i64, i64* %RBP.i, align 8
  %3688 = add i64 %3687, -32
  %3689 = load i64, i64* %3, align 8
  %3690 = add i64 %3689, 4
  store i64 %3690, i64* %3, align 8
  %3691 = inttoptr i64 %3688 to i64*
  %3692 = load i64, i64* %3691, align 8
  store i64 %3692, i64* %RCX.i7756, align 8
  %3693 = add i64 %3692, 6504
  %3694 = add i64 %3689, 11
  store i64 %3694, i64* %3, align 8
  %3695 = inttoptr i64 %3693 to i64*
  %3696 = load i64, i64* %3695, align 8
  store i64 %3696, i64* %RCX.i7756, align 8
  %3697 = add i64 %3696, 8
  %3698 = add i64 %3689, 15
  store i64 %3698, i64* %3, align 8
  %3699 = inttoptr i64 %3697 to i64*
  %3700 = load i64, i64* %3699, align 8
  store i64 %3700, i64* %RCX.i7756, align 8
  %3701 = add i64 %3687, -52
  %3702 = add i64 %3689, 18
  store i64 %3702, i64* %3, align 8
  %3703 = inttoptr i64 %3701 to i32*
  %3704 = load i32, i32* %3703, align 4
  %3705 = and i32 %3704, 2
  %3706 = zext i32 %3705 to i64
  store i64 %3706, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3707 = tail call i32 @llvm.ctpop.i32(i32 %3705)
  %3708 = trunc i32 %3707 to i8
  %3709 = xor i8 %3708, 1
  store i8 %3709, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit610 = lshr exact i32 %3705, 1
  %3710 = trunc i32 %.lobit610 to i8
  %3711 = xor i8 %3710, 1
  store i8 %3711, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3712 = add i64 %3687, -208
  %3713 = add i64 %3689, 31
  store i64 %3713, i64* %3, align 8
  %3714 = inttoptr i64 %3712 to i64*
  store i64 %3700, i64* %3714, align 8
  %3715 = load i64, i64* %3, align 8
  %3716 = load i8, i8* %34, align 1
  %3717 = icmp ne i8 %3716, 0
  %.v808 = select i1 %3717, i64 23, i64 6
  %3718 = add i64 %3715, %.v808
  %cmpBr_45619b = icmp eq i8 %3716, 1
  %3719 = load i64, i64* %RBP.i, align 8
  %3720 = add i64 %3719, -52
  %3721 = add i64 %3718, 3
  store i64 %3721, i64* %3, align 8
  %3722 = inttoptr i64 %3720 to i32*
  %3723 = load i32, i32* %3722, align 4
  %3724 = zext i32 %3723 to i64
  store i64 %3724, i64* %RAX.i3176, align 8
  %3725 = add i64 %3718, 6
  store i64 %3725, i64* %3, align 8
  br i1 %cmpBr_45619b, label %block_.L_4561b2, label %block_4561a1

block_4561a1:                                     ; preds = %block_.L_456142
  %3726 = or i64 %3724, 1
  %3727 = trunc i64 %3726 to i32
  store i64 %3726, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3728 = and i32 %3727, 255
  %3729 = tail call i32 @llvm.ctpop.i32(i32 %3728)
  %3730 = trunc i32 %3729 to i8
  %3731 = and i8 %3730, 1
  %3732 = xor i8 %3731, 1
  store i8 %3732, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %3733 = lshr i32 %3727, 31
  %3734 = trunc i32 %3733 to i8
  store i8 %3734, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3735 = add i64 %3719, -212
  %3736 = add i64 %3718, 12
  store i64 %3736, i64* %3, align 8
  %3737 = inttoptr i64 %3735 to i32*
  store i32 %3727, i32* %3737, align 4
  %3738 = load i64, i64* %3, align 8
  %3739 = add i64 %3738, 17
  store i64 %3739, i64* %3, align 8
  br label %block_.L_4561be

block_.L_4561b2:                                  ; preds = %block_.L_456142
  %3740 = and i64 %3724, 4294967294
  store i64 %3740, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3741 = and i32 %3723, 254
  %3742 = tail call i32 @llvm.ctpop.i32(i32 %3741)
  %3743 = trunc i32 %3742 to i8
  %3744 = and i8 %3743, 1
  %3745 = xor i8 %3744, 1
  store i8 %3745, i8* %26, align 1
  %3746 = icmp ult i32 %3723, 2
  %3747 = zext i1 %3746 to i8
  store i8 %3747, i8* %34, align 1
  %3748 = lshr i32 %3723, 31
  %3749 = trunc i32 %3748 to i8
  store i8 %3749, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3750 = add i64 %3719, -212
  %3751 = trunc i64 %3740 to i32
  %3752 = add i64 %3718, 12
  store i64 %3752, i64* %3, align 8
  %3753 = inttoptr i64 %3750 to i32*
  store i32 %3751, i32* %3753, align 4
  %.pre443 = load i64, i64* %3, align 8
  br label %block_.L_4561be

block_.L_4561be:                                  ; preds = %block_.L_4561b2, %block_4561a1
  %3754 = phi i64 [ %.pre443, %block_.L_4561b2 ], [ %3739, %block_4561a1 ]
  %3755 = load i64, i64* %RBP.i, align 8
  %3756 = add i64 %3755, -212
  %3757 = add i64 %3754, 6
  store i64 %3757, i64* %3, align 8
  %3758 = inttoptr i64 %3756 to i32*
  %3759 = load i32, i32* %3758, align 4
  %3760 = zext i32 %3759 to i64
  store i64 %3760, i64* %RAX.i3176, align 8
  %3761 = sext i32 %3759 to i64
  store i64 %3761, i64* %RCX.i7756, align 8
  %3762 = add i64 %3755, -208
  %3763 = add i64 %3754, 16
  store i64 %3763, i64* %3, align 8
  %3764 = inttoptr i64 %3762 to i64*
  %3765 = load i64, i64* %3764, align 8
  store i64 %3765, i64* %RDX.i7753, align 8
  %3766 = shl nsw i64 %3761, 3
  %3767 = add i64 %3766, %3765
  %3768 = add i64 %3754, 20
  store i64 %3768, i64* %3, align 8
  %3769 = inttoptr i64 %3767 to i64*
  %3770 = load i64, i64* %3769, align 8
  store i64 %3770, i64* %RCX.i7756, align 8
  %3771 = add i64 %3755, -56
  %3772 = add i64 %3754, 23
  store i64 %3772, i64* %3, align 8
  %3773 = inttoptr i64 %3771 to i32*
  %3774 = load i32, i32* %3773, align 4
  %3775 = and i32 %3774, 2
  %3776 = zext i32 %3775 to i64
  store i64 %3776, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3777 = tail call i32 @llvm.ctpop.i32(i32 %3775)
  %3778 = trunc i32 %3777 to i8
  %3779 = xor i8 %3778, 1
  store i8 %3779, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit611 = lshr exact i32 %3775, 1
  %3780 = trunc i32 %.lobit611 to i8
  %3781 = xor i8 %3780, 1
  store i8 %3781, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3782 = add i64 %3755, -224
  %3783 = add i64 %3754, 36
  store i64 %3783, i64* %3, align 8
  %3784 = inttoptr i64 %3782 to i64*
  store i64 %3770, i64* %3784, align 8
  %3785 = load i64, i64* %3, align 8
  %3786 = load i8, i8* %34, align 1
  %3787 = icmp ne i8 %3786, 0
  %.v809 = select i1 %3787, i64 23, i64 6
  %3788 = add i64 %3785, %.v809
  %cmpBr_4561e2 = icmp eq i8 %3786, 1
  %3789 = load i64, i64* %RBP.i, align 8
  %3790 = add i64 %3789, -56
  %3791 = add i64 %3788, 3
  store i64 %3791, i64* %3, align 8
  %3792 = inttoptr i64 %3790 to i32*
  %3793 = load i32, i32* %3792, align 4
  %3794 = zext i32 %3793 to i64
  store i64 %3794, i64* %RAX.i3176, align 8
  %3795 = add i64 %3788, 6
  store i64 %3795, i64* %3, align 8
  br i1 %cmpBr_4561e2, label %block_.L_4561f9, label %block_4561e8

block_4561e8:                                     ; preds = %block_.L_4561be
  %3796 = or i64 %3794, 1
  %3797 = trunc i64 %3796 to i32
  store i64 %3796, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3798 = and i32 %3797, 255
  %3799 = tail call i32 @llvm.ctpop.i32(i32 %3798)
  %3800 = trunc i32 %3799 to i8
  %3801 = and i8 %3800, 1
  %3802 = xor i8 %3801, 1
  store i8 %3802, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %3803 = lshr i32 %3797, 31
  %3804 = trunc i32 %3803 to i8
  store i8 %3804, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3805 = add i64 %3789, -228
  %3806 = add i64 %3788, 12
  store i64 %3806, i64* %3, align 8
  %3807 = inttoptr i64 %3805 to i32*
  store i32 %3797, i32* %3807, align 4
  %3808 = load i64, i64* %3, align 8
  %3809 = add i64 %3808, 17
  store i64 %3809, i64* %3, align 8
  br label %block_.L_456205

block_.L_4561f9:                                  ; preds = %block_.L_4561be
  %3810 = and i64 %3794, 4294967294
  store i64 %3810, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3811 = and i32 %3793, 254
  %3812 = tail call i32 @llvm.ctpop.i32(i32 %3811)
  %3813 = trunc i32 %3812 to i8
  %3814 = and i8 %3813, 1
  %3815 = xor i8 %3814, 1
  store i8 %3815, i8* %26, align 1
  %3816 = icmp ult i32 %3793, 2
  %3817 = zext i1 %3816 to i8
  store i8 %3817, i8* %34, align 1
  %3818 = lshr i32 %3793, 31
  %3819 = trunc i32 %3818 to i8
  store i8 %3819, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3820 = add i64 %3789, -228
  %3821 = trunc i64 %3810 to i32
  %3822 = add i64 %3788, 12
  store i64 %3822, i64* %3, align 8
  %3823 = inttoptr i64 %3820 to i32*
  store i32 %3821, i32* %3823, align 4
  %.pre444 = load i64, i64* %3, align 8
  br label %block_.L_456205

block_.L_456205:                                  ; preds = %block_.L_4561f9, %block_4561e8
  %3824 = phi i64 [ %.pre444, %block_.L_4561f9 ], [ %3809, %block_4561e8 ]
  %3825 = load i64, i64* %RBP.i, align 8
  %3826 = add i64 %3825, -228
  %3827 = add i64 %3824, 6
  store i64 %3827, i64* %3, align 8
  %3828 = inttoptr i64 %3826 to i32*
  %3829 = load i32, i32* %3828, align 4
  %3830 = zext i32 %3829 to i64
  store i64 %3830, i64* %RAX.i3176, align 8
  %3831 = sext i32 %3829 to i64
  store i64 %3831, i64* %RCX.i7756, align 8
  %3832 = add i64 %3825, -224
  %3833 = add i64 %3824, 16
  store i64 %3833, i64* %3, align 8
  %3834 = inttoptr i64 %3832 to i64*
  %3835 = load i64, i64* %3834, align 8
  store i64 %3835, i64* %RDX.i7753, align 8
  %3836 = shl nsw i64 %3831, 3
  %3837 = add i64 %3836, %3835
  %3838 = add i64 %3824, 20
  store i64 %3838, i64* %3, align 8
  %3839 = inttoptr i64 %3837 to i64*
  %3840 = load i64, i64* %3839, align 8
  store i64 %3840, i64* %RCX.i7756, align 8
  %3841 = add i64 %3824, 23
  store i64 %3841, i64* %3, align 8
  %3842 = inttoptr i64 %3840 to i16*
  %3843 = load i16, i16* %3842, align 2
  store i16 %3843, i16* %SI.i6180, align 2
  %3844 = add i64 %3825, -16
  %3845 = add i64 %3824, 27
  store i64 %3845, i64* %3, align 8
  %3846 = inttoptr i64 %3844 to i64*
  %3847 = load i64, i64* %3846, align 8
  store i64 %3847, i64* %RCX.i7756, align 8
  %3848 = add i64 %3847, 1616
  %3849 = add i64 %3824, 34
  store i64 %3849, i64* %3, align 8
  %3850 = inttoptr i64 %3848 to i64*
  %3851 = load i64, i64* %3850, align 8
  store i64 %3851, i64* %RCX.i7756, align 8
  %3852 = add i64 %3851, 8
  %3853 = add i64 %3824, 38
  store i64 %3853, i64* %3, align 8
  %3854 = inttoptr i64 %3852 to i64*
  %3855 = load i64, i64* %3854, align 8
  store i64 %3855, i64* %RCX.i7756, align 8
  %3856 = add i64 %3825, -52
  %3857 = add i64 %3824, 42
  store i64 %3857, i64* %3, align 8
  %3858 = inttoptr i64 %3856 to i32*
  %3859 = load i32, i32* %3858, align 4
  %3860 = sext i32 %3859 to i64
  store i64 %3860, i64* %RDI.i732, align 8
  %3861 = shl nsw i64 %3860, 3
  %3862 = add i64 %3861, %3855
  %3863 = add i64 %3824, 46
  store i64 %3863, i64* %3, align 8
  %3864 = inttoptr i64 %3862 to i64*
  %3865 = load i64, i64* %3864, align 8
  store i64 %3865, i64* %RCX.i7756, align 8
  %3866 = add i64 %3825, -56
  %3867 = add i64 %3824, 50
  store i64 %3867, i64* %3, align 8
  %3868 = inttoptr i64 %3866 to i32*
  %3869 = load i32, i32* %3868, align 4
  %3870 = sext i32 %3869 to i64
  store i64 %3870, i64* %RDI.i732, align 8
  %3871 = shl nsw i64 %3870, 3
  %3872 = add i64 %3871, %3865
  %3873 = add i64 %3824, 54
  store i64 %3873, i64* %3, align 8
  %3874 = inttoptr i64 %3872 to i64*
  %3875 = load i64, i64* %3874, align 8
  store i64 %3875, i64* %RCX.i7756, align 8
  %3876 = add i64 %3824, 57
  store i64 %3876, i64* %3, align 8
  %3877 = inttoptr i64 %3875 to i16*
  store i16 %3843, i16* %3877, align 2
  %3878 = load i64, i64* %RBP.i, align 8
  %3879 = add i64 %3878, -32
  %3880 = load i64, i64* %3, align 8
  %3881 = add i64 %3880, 4
  store i64 %3881, i64* %3, align 8
  %3882 = inttoptr i64 %3879 to i64*
  %3883 = load i64, i64* %3882, align 8
  store i64 %3883, i64* %RCX.i7756, align 8
  %3884 = add i64 %3883, 6504
  %3885 = add i64 %3880, 11
  store i64 %3885, i64* %3, align 8
  %3886 = inttoptr i64 %3884 to i64*
  %3887 = load i64, i64* %3886, align 8
  store i64 %3887, i64* %RCX.i7756, align 8
  %3888 = add i64 %3887, 8
  %3889 = add i64 %3880, 15
  store i64 %3889, i64* %3, align 8
  %3890 = inttoptr i64 %3888 to i64*
  %3891 = load i64, i64* %3890, align 8
  store i64 %3891, i64* %RCX.i7756, align 8
  %3892 = add i64 %3878, -52
  %3893 = add i64 %3880, 18
  store i64 %3893, i64* %3, align 8
  %3894 = inttoptr i64 %3892 to i32*
  %3895 = load i32, i32* %3894, align 4
  %3896 = and i32 %3895, 2
  %3897 = zext i32 %3896 to i64
  store i64 %3897, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3898 = tail call i32 @llvm.ctpop.i32(i32 %3896)
  %3899 = trunc i32 %3898 to i8
  %3900 = xor i8 %3899, 1
  store i8 %3900, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit612 = lshr exact i32 %3896, 1
  %3901 = trunc i32 %.lobit612 to i8
  %3902 = xor i8 %3901, 1
  store i8 %3902, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3903 = add i64 %3878, -240
  %3904 = add i64 %3880, 31
  store i64 %3904, i64* %3, align 8
  %3905 = inttoptr i64 %3903 to i64*
  store i64 %3891, i64* %3905, align 8
  %3906 = load i64, i64* %3, align 8
  %3907 = load i8, i8* %34, align 1
  %3908 = icmp ne i8 %3907, 0
  %.v810 = select i1 %3908, i64 23, i64 6
  %3909 = add i64 %3906, %.v810
  %cmpBr_45625d = icmp eq i8 %3907, 1
  %3910 = load i64, i64* %RBP.i, align 8
  %3911 = add i64 %3910, -52
  %3912 = add i64 %3909, 3
  store i64 %3912, i64* %3, align 8
  %3913 = inttoptr i64 %3911 to i32*
  %3914 = load i32, i32* %3913, align 4
  %3915 = zext i32 %3914 to i64
  store i64 %3915, i64* %RAX.i3176, align 8
  %3916 = add i64 %3909, 6
  store i64 %3916, i64* %3, align 8
  br i1 %cmpBr_45625d, label %block_.L_456274, label %block_456263

block_456263:                                     ; preds = %block_.L_456205
  %3917 = or i64 %3915, 1
  %3918 = trunc i64 %3917 to i32
  store i64 %3917, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3919 = and i32 %3918, 255
  %3920 = tail call i32 @llvm.ctpop.i32(i32 %3919)
  %3921 = trunc i32 %3920 to i8
  %3922 = and i8 %3921, 1
  %3923 = xor i8 %3922, 1
  store i8 %3923, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %3924 = lshr i32 %3918, 31
  %3925 = trunc i32 %3924 to i8
  store i8 %3925, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3926 = add i64 %3910, -244
  %3927 = add i64 %3909, 12
  store i64 %3927, i64* %3, align 8
  %3928 = inttoptr i64 %3926 to i32*
  store i32 %3918, i32* %3928, align 4
  %3929 = load i64, i64* %3, align 8
  %3930 = add i64 %3929, 17
  store i64 %3930, i64* %3, align 8
  br label %block_.L_456280

block_.L_456274:                                  ; preds = %block_.L_456205
  %3931 = and i64 %3915, 4294967294
  store i64 %3931, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3932 = and i32 %3914, 254
  %3933 = tail call i32 @llvm.ctpop.i32(i32 %3932)
  %3934 = trunc i32 %3933 to i8
  %3935 = and i8 %3934, 1
  %3936 = xor i8 %3935, 1
  store i8 %3936, i8* %26, align 1
  %3937 = icmp ult i32 %3914, 2
  %3938 = zext i1 %3937 to i8
  store i8 %3938, i8* %34, align 1
  %3939 = lshr i32 %3914, 31
  %3940 = trunc i32 %3939 to i8
  store i8 %3940, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3941 = add i64 %3910, -244
  %3942 = trunc i64 %3931 to i32
  %3943 = add i64 %3909, 12
  store i64 %3943, i64* %3, align 8
  %3944 = inttoptr i64 %3941 to i32*
  store i32 %3942, i32* %3944, align 4
  %.pre445 = load i64, i64* %3, align 8
  br label %block_.L_456280

block_.L_456280:                                  ; preds = %block_.L_456274, %block_456263
  %3945 = phi i64 [ %.pre445, %block_.L_456274 ], [ %3930, %block_456263 ]
  %3946 = load i64, i64* %RBP.i, align 8
  %3947 = add i64 %3946, -244
  %3948 = add i64 %3945, 6
  store i64 %3948, i64* %3, align 8
  %3949 = inttoptr i64 %3947 to i32*
  %3950 = load i32, i32* %3949, align 4
  %3951 = zext i32 %3950 to i64
  store i64 %3951, i64* %RAX.i3176, align 8
  %3952 = sext i32 %3950 to i64
  store i64 %3952, i64* %RCX.i7756, align 8
  %3953 = add i64 %3946, -240
  %3954 = add i64 %3945, 16
  store i64 %3954, i64* %3, align 8
  %3955 = inttoptr i64 %3953 to i64*
  %3956 = load i64, i64* %3955, align 8
  store i64 %3956, i64* %RDX.i7753, align 8
  %3957 = shl nsw i64 %3952, 3
  %3958 = add i64 %3957, %3956
  %3959 = add i64 %3945, 20
  store i64 %3959, i64* %3, align 8
  %3960 = inttoptr i64 %3958 to i64*
  %3961 = load i64, i64* %3960, align 8
  store i64 %3961, i64* %RCX.i7756, align 8
  %3962 = add i64 %3946, -56
  %3963 = add i64 %3945, 23
  store i64 %3963, i64* %3, align 8
  %3964 = inttoptr i64 %3962 to i32*
  %3965 = load i32, i32* %3964, align 4
  %3966 = and i32 %3965, 2
  %3967 = zext i32 %3966 to i64
  store i64 %3967, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3968 = tail call i32 @llvm.ctpop.i32(i32 %3966)
  %3969 = trunc i32 %3968 to i8
  %3970 = xor i8 %3969, 1
  store i8 %3970, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit613 = lshr exact i32 %3966, 1
  %3971 = trunc i32 %.lobit613 to i8
  %3972 = xor i8 %3971, 1
  store i8 %3972, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %3973 = add i64 %3946, -256
  %3974 = add i64 %3945, 36
  store i64 %3974, i64* %3, align 8
  %3975 = inttoptr i64 %3973 to i64*
  store i64 %3961, i64* %3975, align 8
  %3976 = load i64, i64* %3, align 8
  %3977 = load i8, i8* %34, align 1
  %3978 = icmp ne i8 %3977, 0
  %.v811 = select i1 %3978, i64 23, i64 6
  %3979 = add i64 %3976, %.v811
  %cmpBr_4562a4 = icmp eq i8 %3977, 1
  %3980 = load i64, i64* %RBP.i, align 8
  %3981 = add i64 %3980, -56
  %3982 = add i64 %3979, 3
  store i64 %3982, i64* %3, align 8
  %3983 = inttoptr i64 %3981 to i32*
  %3984 = load i32, i32* %3983, align 4
  %3985 = zext i32 %3984 to i64
  store i64 %3985, i64* %RAX.i3176, align 8
  %3986 = add i64 %3979, 6
  store i64 %3986, i64* %3, align 8
  br i1 %cmpBr_4562a4, label %block_.L_4562bb, label %block_4562aa

block_4562aa:                                     ; preds = %block_.L_456280
  %3987 = or i64 %3985, 1
  %3988 = trunc i64 %3987 to i32
  store i64 %3987, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %3989 = and i32 %3988, 255
  %3990 = tail call i32 @llvm.ctpop.i32(i32 %3989)
  %3991 = trunc i32 %3990 to i8
  %3992 = and i8 %3991, 1
  %3993 = xor i8 %3992, 1
  store i8 %3993, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %3994 = lshr i32 %3988, 31
  %3995 = trunc i32 %3994 to i8
  store i8 %3995, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %3996 = add i64 %3980, -260
  %3997 = add i64 %3979, 12
  store i64 %3997, i64* %3, align 8
  %3998 = inttoptr i64 %3996 to i32*
  store i32 %3988, i32* %3998, align 4
  %3999 = load i64, i64* %3, align 8
  %4000 = add i64 %3999, 17
  store i64 %4000, i64* %3, align 8
  br label %block_.L_4562c7

block_.L_4562bb:                                  ; preds = %block_.L_456280
  %4001 = and i64 %3985, 4294967294
  store i64 %4001, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4002 = and i32 %3984, 254
  %4003 = tail call i32 @llvm.ctpop.i32(i32 %4002)
  %4004 = trunc i32 %4003 to i8
  %4005 = and i8 %4004, 1
  %4006 = xor i8 %4005, 1
  store i8 %4006, i8* %26, align 1
  %4007 = icmp ult i32 %3984, 2
  %4008 = zext i1 %4007 to i8
  store i8 %4008, i8* %34, align 1
  %4009 = lshr i32 %3984, 31
  %4010 = trunc i32 %4009 to i8
  store i8 %4010, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4011 = add i64 %3980, -260
  %4012 = trunc i64 %4001 to i32
  %4013 = add i64 %3979, 12
  store i64 %4013, i64* %3, align 8
  %4014 = inttoptr i64 %4011 to i32*
  store i32 %4012, i32* %4014, align 4
  %.pre446 = load i64, i64* %3, align 8
  br label %block_.L_4562c7

block_.L_4562c7:                                  ; preds = %block_.L_4562bb, %block_4562aa
  %4015 = phi i64 [ %.pre446, %block_.L_4562bb ], [ %4000, %block_4562aa ]
  %4016 = load i64, i64* %RBP.i, align 8
  %4017 = add i64 %4016, -260
  %4018 = add i64 %4015, 6
  store i64 %4018, i64* %3, align 8
  %4019 = inttoptr i64 %4017 to i32*
  %4020 = load i32, i32* %4019, align 4
  %4021 = zext i32 %4020 to i64
  store i64 %4021, i64* %RAX.i3176, align 8
  %4022 = sext i32 %4020 to i64
  store i64 %4022, i64* %RCX.i7756, align 8
  %4023 = add i64 %4016, -256
  %4024 = add i64 %4015, 16
  store i64 %4024, i64* %3, align 8
  %4025 = inttoptr i64 %4023 to i64*
  %4026 = load i64, i64* %4025, align 8
  store i64 %4026, i64* %RDX.i7753, align 8
  %4027 = shl nsw i64 %4022, 3
  %4028 = add i64 %4027, %4026
  %4029 = add i64 %4015, 20
  store i64 %4029, i64* %3, align 8
  %4030 = inttoptr i64 %4028 to i64*
  %4031 = load i64, i64* %4030, align 8
  store i64 %4031, i64* %RCX.i7756, align 8
  %4032 = add i64 %4031, 2
  %4033 = add i64 %4015, 24
  store i64 %4033, i64* %3, align 8
  %4034 = inttoptr i64 %4032 to i16*
  %4035 = load i16, i16* %4034, align 2
  store i16 %4035, i16* %SI.i6180, align 2
  %4036 = add i64 %4016, -16
  %4037 = add i64 %4015, 28
  store i64 %4037, i64* %3, align 8
  %4038 = inttoptr i64 %4036 to i64*
  %4039 = load i64, i64* %4038, align 8
  store i64 %4039, i64* %RCX.i7756, align 8
  %4040 = add i64 %4039, 1616
  %4041 = add i64 %4015, 35
  store i64 %4041, i64* %3, align 8
  %4042 = inttoptr i64 %4040 to i64*
  %4043 = load i64, i64* %4042, align 8
  store i64 %4043, i64* %RCX.i7756, align 8
  %4044 = add i64 %4043, 8
  %4045 = add i64 %4015, 39
  store i64 %4045, i64* %3, align 8
  %4046 = inttoptr i64 %4044 to i64*
  %4047 = load i64, i64* %4046, align 8
  store i64 %4047, i64* %RCX.i7756, align 8
  %4048 = add i64 %4016, -52
  %4049 = add i64 %4015, 43
  store i64 %4049, i64* %3, align 8
  %4050 = inttoptr i64 %4048 to i32*
  %4051 = load i32, i32* %4050, align 4
  %4052 = sext i32 %4051 to i64
  store i64 %4052, i64* %RDI.i732, align 8
  %4053 = shl nsw i64 %4052, 3
  %4054 = add i64 %4053, %4047
  %4055 = add i64 %4015, 47
  store i64 %4055, i64* %3, align 8
  %4056 = inttoptr i64 %4054 to i64*
  %4057 = load i64, i64* %4056, align 8
  store i64 %4057, i64* %RCX.i7756, align 8
  %4058 = add i64 %4016, -56
  %4059 = add i64 %4015, 51
  store i64 %4059, i64* %3, align 8
  %4060 = inttoptr i64 %4058 to i32*
  %4061 = load i32, i32* %4060, align 4
  %4062 = sext i32 %4061 to i64
  store i64 %4062, i64* %RDI.i732, align 8
  %4063 = shl nsw i64 %4062, 3
  %4064 = add i64 %4063, %4057
  %4065 = add i64 %4015, 55
  store i64 %4065, i64* %3, align 8
  %4066 = inttoptr i64 %4064 to i64*
  %4067 = load i64, i64* %4066, align 8
  store i64 %4067, i64* %RCX.i7756, align 8
  %4068 = add i64 %4067, 2
  %4069 = add i64 %4015, 59
  store i64 %4069, i64* %3, align 8
  %4070 = inttoptr i64 %4068 to i16*
  store i16 %4035, i16* %4070, align 2
  %4071 = load i64, i64* %RBP.i, align 8
  %4072 = add i64 %4071, -32
  %4073 = load i64, i64* %3, align 8
  %4074 = add i64 %4073, 4
  store i64 %4074, i64* %3, align 8
  %4075 = inttoptr i64 %4072 to i64*
  %4076 = load i64, i64* %4075, align 8
  store i64 %4076, i64* %RCX.i7756, align 8
  %4077 = add i64 %4076, 6480
  %4078 = add i64 %4073, 11
  store i64 %4078, i64* %3, align 8
  %4079 = inttoptr i64 %4077 to i64*
  %4080 = load i64, i64* %4079, align 8
  store i64 %4080, i64* %RCX.i7756, align 8
  %4081 = add i64 %4073, 14
  store i64 %4081, i64* %3, align 8
  %4082 = inttoptr i64 %4080 to i64*
  %4083 = load i64, i64* %4082, align 8
  store i64 %4083, i64* %RCX.i7756, align 8
  %4084 = add i64 %4071, -52
  %4085 = add i64 %4073, 17
  store i64 %4085, i64* %3, align 8
  %4086 = inttoptr i64 %4084 to i32*
  %4087 = load i32, i32* %4086, align 4
  %4088 = and i32 %4087, 2
  %4089 = zext i32 %4088 to i64
  store i64 %4089, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4090 = tail call i32 @llvm.ctpop.i32(i32 %4088)
  %4091 = trunc i32 %4090 to i8
  %4092 = xor i8 %4091, 1
  store i8 %4092, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit614 = lshr exact i32 %4088, 1
  %4093 = trunc i32 %.lobit614 to i8
  %4094 = xor i8 %4093, 1
  store i8 %4094, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4095 = add i64 %4071, -272
  %4096 = add i64 %4073, 30
  store i64 %4096, i64* %3, align 8
  %4097 = inttoptr i64 %4095 to i64*
  store i64 %4083, i64* %4097, align 8
  %4098 = load i64, i64* %3, align 8
  %4099 = load i8, i8* %34, align 1
  %4100 = icmp ne i8 %4099, 0
  %.v812 = select i1 %4100, i64 23, i64 6
  %4101 = add i64 %4098, %.v812
  %cmpBr_456320 = icmp eq i8 %4099, 1
  %4102 = load i64, i64* %RBP.i, align 8
  %4103 = add i64 %4102, -52
  %4104 = add i64 %4101, 3
  store i64 %4104, i64* %3, align 8
  %4105 = inttoptr i64 %4103 to i32*
  %4106 = load i32, i32* %4105, align 4
  %4107 = zext i32 %4106 to i64
  store i64 %4107, i64* %RAX.i3176, align 8
  %4108 = add i64 %4101, 6
  store i64 %4108, i64* %3, align 8
  br i1 %cmpBr_456320, label %block_.L_456337, label %block_456326

block_456326:                                     ; preds = %block_.L_4562c7
  %4109 = or i64 %4107, 1
  %4110 = trunc i64 %4109 to i32
  store i64 %4109, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4111 = and i32 %4110, 255
  %4112 = tail call i32 @llvm.ctpop.i32(i32 %4111)
  %4113 = trunc i32 %4112 to i8
  %4114 = and i8 %4113, 1
  %4115 = xor i8 %4114, 1
  store i8 %4115, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4116 = lshr i32 %4110, 31
  %4117 = trunc i32 %4116 to i8
  store i8 %4117, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4118 = add i64 %4102, -276
  %4119 = add i64 %4101, 12
  store i64 %4119, i64* %3, align 8
  %4120 = inttoptr i64 %4118 to i32*
  store i32 %4110, i32* %4120, align 4
  %4121 = load i64, i64* %3, align 8
  %4122 = add i64 %4121, 17
  store i64 %4122, i64* %3, align 8
  br label %block_.L_456343

block_.L_456337:                                  ; preds = %block_.L_4562c7
  %4123 = and i64 %4107, 4294967294
  store i64 %4123, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4124 = and i32 %4106, 254
  %4125 = tail call i32 @llvm.ctpop.i32(i32 %4124)
  %4126 = trunc i32 %4125 to i8
  %4127 = and i8 %4126, 1
  %4128 = xor i8 %4127, 1
  store i8 %4128, i8* %26, align 1
  %4129 = icmp ult i32 %4106, 2
  %4130 = zext i1 %4129 to i8
  store i8 %4130, i8* %34, align 1
  %4131 = lshr i32 %4106, 31
  %4132 = trunc i32 %4131 to i8
  store i8 %4132, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4133 = add i64 %4102, -276
  %4134 = trunc i64 %4123 to i32
  %4135 = add i64 %4101, 12
  store i64 %4135, i64* %3, align 8
  %4136 = inttoptr i64 %4133 to i32*
  store i32 %4134, i32* %4136, align 4
  %.pre447 = load i64, i64* %3, align 8
  br label %block_.L_456343

block_.L_456343:                                  ; preds = %block_.L_456337, %block_456326
  %4137 = phi i64 [ %.pre447, %block_.L_456337 ], [ %4122, %block_456326 ]
  %4138 = load i64, i64* %RBP.i, align 8
  %4139 = add i64 %4138, -276
  %4140 = add i64 %4137, 6
  store i64 %4140, i64* %3, align 8
  %4141 = inttoptr i64 %4139 to i32*
  %4142 = load i32, i32* %4141, align 4
  %4143 = zext i32 %4142 to i64
  store i64 %4143, i64* %RAX.i3176, align 8
  %4144 = sext i32 %4142 to i64
  store i64 %4144, i64* %RCX.i7756, align 8
  %4145 = add i64 %4138, -272
  %4146 = add i64 %4137, 16
  store i64 %4146, i64* %3, align 8
  %4147 = inttoptr i64 %4145 to i64*
  %4148 = load i64, i64* %4147, align 8
  store i64 %4148, i64* %RDX.i7753, align 8
  %4149 = shl nsw i64 %4144, 3
  %4150 = add i64 %4149, %4148
  %4151 = add i64 %4137, 20
  store i64 %4151, i64* %3, align 8
  %4152 = inttoptr i64 %4150 to i64*
  %4153 = load i64, i64* %4152, align 8
  store i64 %4153, i64* %RCX.i7756, align 8
  %4154 = add i64 %4138, -56
  %4155 = add i64 %4137, 23
  store i64 %4155, i64* %3, align 8
  %4156 = inttoptr i64 %4154 to i32*
  %4157 = load i32, i32* %4156, align 4
  %4158 = and i32 %4157, 2
  %4159 = zext i32 %4158 to i64
  store i64 %4159, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4160 = tail call i32 @llvm.ctpop.i32(i32 %4158)
  %4161 = trunc i32 %4160 to i8
  %4162 = xor i8 %4161, 1
  store i8 %4162, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit615 = lshr exact i32 %4158, 1
  %4163 = trunc i32 %.lobit615 to i8
  %4164 = xor i8 %4163, 1
  store i8 %4164, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4165 = add i64 %4138, -288
  %4166 = add i64 %4137, 36
  store i64 %4166, i64* %3, align 8
  %4167 = inttoptr i64 %4165 to i64*
  store i64 %4153, i64* %4167, align 8
  %4168 = load i64, i64* %3, align 8
  %4169 = load i8, i8* %34, align 1
  %4170 = icmp ne i8 %4169, 0
  %.v813 = select i1 %4170, i64 23, i64 6
  %4171 = add i64 %4168, %.v813
  %cmpBr_456367 = icmp eq i8 %4169, 1
  %4172 = load i64, i64* %RBP.i, align 8
  %4173 = add i64 %4172, -56
  %4174 = add i64 %4171, 3
  store i64 %4174, i64* %3, align 8
  %4175 = inttoptr i64 %4173 to i32*
  %4176 = load i32, i32* %4175, align 4
  %4177 = zext i32 %4176 to i64
  store i64 %4177, i64* %RAX.i3176, align 8
  %4178 = add i64 %4171, 6
  store i64 %4178, i64* %3, align 8
  br i1 %cmpBr_456367, label %block_.L_45637e, label %block_45636d

block_45636d:                                     ; preds = %block_.L_456343
  %4179 = or i64 %4177, 1
  %4180 = trunc i64 %4179 to i32
  store i64 %4179, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4181 = and i32 %4180, 255
  %4182 = tail call i32 @llvm.ctpop.i32(i32 %4181)
  %4183 = trunc i32 %4182 to i8
  %4184 = and i8 %4183, 1
  %4185 = xor i8 %4184, 1
  store i8 %4185, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4186 = lshr i32 %4180, 31
  %4187 = trunc i32 %4186 to i8
  store i8 %4187, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4188 = add i64 %4172, -292
  %4189 = add i64 %4171, 12
  store i64 %4189, i64* %3, align 8
  %4190 = inttoptr i64 %4188 to i32*
  store i32 %4180, i32* %4190, align 4
  %4191 = load i64, i64* %3, align 8
  %4192 = add i64 %4191, 17
  store i64 %4192, i64* %3, align 8
  br label %block_.L_45638a

block_.L_45637e:                                  ; preds = %block_.L_456343
  %4193 = and i64 %4177, 4294967294
  store i64 %4193, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4194 = and i32 %4176, 254
  %4195 = tail call i32 @llvm.ctpop.i32(i32 %4194)
  %4196 = trunc i32 %4195 to i8
  %4197 = and i8 %4196, 1
  %4198 = xor i8 %4197, 1
  store i8 %4198, i8* %26, align 1
  %4199 = icmp ult i32 %4176, 2
  %4200 = zext i1 %4199 to i8
  store i8 %4200, i8* %34, align 1
  %4201 = lshr i32 %4176, 31
  %4202 = trunc i32 %4201 to i8
  store i8 %4202, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4203 = add i64 %4172, -292
  %4204 = trunc i64 %4193 to i32
  %4205 = add i64 %4171, 12
  store i64 %4205, i64* %3, align 8
  %4206 = inttoptr i64 %4203 to i32*
  store i32 %4204, i32* %4206, align 4
  %.pre448 = load i64, i64* %3, align 8
  br label %block_.L_45638a

block_.L_45638a:                                  ; preds = %block_.L_45637e, %block_45636d
  %4207 = phi i64 [ %.pre448, %block_.L_45637e ], [ %4192, %block_45636d ]
  %4208 = load i64, i64* %RBP.i, align 8
  %4209 = add i64 %4208, -292
  %4210 = add i64 %4207, 6
  store i64 %4210, i64* %3, align 8
  %4211 = inttoptr i64 %4209 to i32*
  %4212 = load i32, i32* %4211, align 4
  %4213 = zext i32 %4212 to i64
  store i64 %4213, i64* %RAX.i3176, align 8
  %4214 = sext i32 %4212 to i64
  store i64 %4214, i64* %RCX.i7756, align 8
  %4215 = add i64 %4208, -288
  %4216 = add i64 %4207, 16
  store i64 %4216, i64* %3, align 8
  %4217 = inttoptr i64 %4215 to i64*
  %4218 = load i64, i64* %4217, align 8
  store i64 %4218, i64* %RDX.i7753, align 8
  %4219 = shl nsw i64 %4214, 1
  %4220 = add i64 %4219, %4218
  %4221 = add i64 %4207, 20
  store i64 %4221, i64* %3, align 8
  %4222 = inttoptr i64 %4220 to i16*
  %4223 = load i16, i16* %4222, align 2
  %4224 = sext i16 %4223 to i64
  %4225 = and i64 %4224, 4294967295
  store i64 %4225, i64* %RAX.i3176, align 8
  %4226 = sext i16 %4223 to i32
  %4227 = add nsw i32 %4226, 1
  %4228 = icmp ne i16 %4223, -1
  %4229 = zext i1 %4228 to i8
  store i8 %4229, i8* %19, align 1
  %4230 = and i32 %4227, 255
  %4231 = tail call i32 @llvm.ctpop.i32(i32 %4230)
  %4232 = trunc i32 %4231 to i8
  %4233 = and i8 %4232, 1
  %4234 = xor i8 %4233, 1
  store i8 %4234, i8* %26, align 1
  %4235 = xor i32 %4226, 16
  %4236 = xor i32 %4235, %4227
  %4237 = lshr i32 %4236, 4
  %4238 = trunc i32 %4237 to i8
  %4239 = and i8 %4238, 1
  store i8 %4239, i8* %31, align 1
  %4240 = icmp eq i32 %4227, 0
  %4241 = zext i1 %4240 to i8
  store i8 %4241, i8* %34, align 1
  %4242 = lshr i32 %4227, 31
  %4243 = trunc i32 %4242 to i8
  store i8 %4243, i8* %37, align 1
  %4244 = lshr i32 %4226, 31
  %4245 = xor i32 %4244, 1
  %4246 = xor i32 %4242, %4244
  %4247 = add nuw nsw i32 %4246, %4245
  %4248 = icmp eq i32 %4247, 2
  %4249 = zext i1 %4248 to i8
  store i8 %4249, i8* %43, align 1
  %.v719 = select i1 %4240, i64 29, i64 100
  %4250 = add i64 %4207, %.v719
  store i64 %4250, i64* %3, align 8
  br i1 %4240, label %block_4563a7, label %block_.L_4563ee

block_4563a7:                                     ; preds = %block_.L_45638a
  %4251 = add i64 %4208, -16
  %4252 = add i64 %4250, 4
  store i64 %4252, i64* %3, align 8
  %4253 = inttoptr i64 %4251 to i64*
  %4254 = load i64, i64* %4253, align 8
  store i64 %4254, i64* %RAX.i3176, align 8
  %4255 = add i64 %4254, 1600
  %4256 = add i64 %4250, 11
  store i64 %4256, i64* %3, align 8
  %4257 = inttoptr i64 %4255 to i64*
  %4258 = load i64, i64* %4257, align 8
  store i64 %4258, i64* %RAX.i3176, align 8
  %4259 = add i64 %4250, 14
  store i64 %4259, i64* %3, align 8
  %4260 = inttoptr i64 %4258 to i64*
  %4261 = load i64, i64* %4260, align 8
  store i64 %4261, i64* %RAX.i3176, align 8
  %4262 = add i64 %4208, -52
  %4263 = add i64 %4250, 18
  store i64 %4263, i64* %3, align 8
  %4264 = inttoptr i64 %4262 to i32*
  %4265 = load i32, i32* %4264, align 4
  %4266 = sext i32 %4265 to i64
  store i64 %4266, i64* %RCX.i7756, align 8
  %4267 = shl nsw i64 %4266, 3
  %4268 = add i64 %4267, %4261
  %4269 = add i64 %4250, 22
  store i64 %4269, i64* %3, align 8
  %4270 = inttoptr i64 %4268 to i64*
  %4271 = load i64, i64* %4270, align 8
  store i64 %4271, i64* %RAX.i3176, align 8
  %4272 = add i64 %4208, -56
  %4273 = add i64 %4250, 26
  store i64 %4273, i64* %3, align 8
  %4274 = inttoptr i64 %4272 to i32*
  %4275 = load i32, i32* %4274, align 4
  %4276 = sext i32 %4275 to i64
  store i64 %4276, i64* %RCX.i7756, align 8
  %4277 = shl nsw i64 %4276, 1
  %4278 = add i64 %4277, %4271
  %4279 = add i64 %4250, 32
  store i64 %4279, i64* %3, align 8
  %4280 = inttoptr i64 %4278 to i16*
  store i16 -1, i16* %4280, align 2
  %4281 = load i64, i64* %RBP.i, align 8
  %4282 = add i64 %4281, -16
  %4283 = load i64, i64* %3, align 8
  %4284 = add i64 %4283, 4
  store i64 %4284, i64* %3, align 8
  %4285 = inttoptr i64 %4282 to i64*
  %4286 = load i64, i64* %4285, align 8
  store i64 %4286, i64* %RAX.i3176, align 8
  %4287 = add i64 %4286, 1608
  %4288 = add i64 %4283, 11
  store i64 %4288, i64* %3, align 8
  %4289 = inttoptr i64 %4287 to i64*
  %4290 = load i64, i64* %4289, align 8
  store i64 %4290, i64* %RAX.i3176, align 8
  %4291 = add i64 %4283, 14
  store i64 %4291, i64* %3, align 8
  %4292 = inttoptr i64 %4290 to i64*
  %4293 = load i64, i64* %4292, align 8
  store i64 %4293, i64* %RAX.i3176, align 8
  %4294 = add i64 %4281, -52
  %4295 = add i64 %4283, 18
  store i64 %4295, i64* %3, align 8
  %4296 = inttoptr i64 %4294 to i32*
  %4297 = load i32, i32* %4296, align 4
  %4298 = sext i32 %4297 to i64
  store i64 %4298, i64* %RCX.i7756, align 8
  %4299 = shl nsw i64 %4298, 3
  %4300 = add i64 %4299, %4293
  %4301 = add i64 %4283, 22
  store i64 %4301, i64* %3, align 8
  %4302 = inttoptr i64 %4300 to i64*
  %4303 = load i64, i64* %4302, align 8
  store i64 %4303, i64* %RAX.i3176, align 8
  %4304 = add i64 %4281, -56
  %4305 = add i64 %4283, 26
  store i64 %4305, i64* %3, align 8
  %4306 = inttoptr i64 %4304 to i32*
  %4307 = load i32, i32* %4306, align 4
  %4308 = sext i32 %4307 to i64
  store i64 %4308, i64* %RCX.i7756, align 8
  %4309 = shl nsw i64 %4308, 3
  %4310 = add i64 %4309, %4303
  %4311 = add i64 %4283, 34
  store i64 %4311, i64* %3, align 8
  %4312 = inttoptr i64 %4310 to i64*
  store i64 -1, i64* %4312, align 8
  %4313 = load i64, i64* %3, align 8
  %4314 = add i64 %4313, 377
  store i64 %4314, i64* %3, align 8
  br label %block_.L_456562

block_.L_4563ee:                                  ; preds = %block_.L_45638a
  %4315 = add i64 %4208, -32
  %4316 = add i64 %4250, 4
  store i64 %4316, i64* %3, align 8
  %4317 = inttoptr i64 %4315 to i64*
  %4318 = load i64, i64* %4317, align 8
  store i64 %4318, i64* %RAX.i3176, align 8
  %4319 = add i64 %4318, 6480
  %4320 = add i64 %4250, 11
  store i64 %4320, i64* %3, align 8
  %4321 = inttoptr i64 %4319 to i64*
  %4322 = load i64, i64* %4321, align 8
  store i64 %4322, i64* %RAX.i3176, align 8
  %4323 = add i64 %4250, 14
  store i64 %4323, i64* %3, align 8
  %4324 = inttoptr i64 %4322 to i64*
  %4325 = load i64, i64* %4324, align 8
  store i64 %4325, i64* %RAX.i3176, align 8
  %4326 = add i64 %4208, -52
  %4327 = add i64 %4250, 17
  store i64 %4327, i64* %3, align 8
  %4328 = inttoptr i64 %4326 to i32*
  %4329 = load i32, i32* %4328, align 4
  %4330 = and i32 %4329, 2
  %4331 = zext i32 %4330 to i64
  store i64 %4331, i64* %RCX.i7756, align 8
  store i8 0, i8* %19, align 1
  %4332 = tail call i32 @llvm.ctpop.i32(i32 %4330)
  %4333 = trunc i32 %4332 to i8
  %4334 = xor i8 %4333, 1
  store i8 %4334, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit622 = lshr exact i32 %4330, 1
  %4335 = trunc i32 %.lobit622 to i8
  %4336 = xor i8 %4335, 1
  store i8 %4336, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4337 = add i64 %4208, -304
  %4338 = add i64 %4250, 30
  store i64 %4338, i64* %3, align 8
  %4339 = inttoptr i64 %4337 to i64*
  store i64 %4325, i64* %4339, align 8
  %4340 = load i64, i64* %3, align 8
  %4341 = load i8, i8* %34, align 1
  %4342 = icmp ne i8 %4341, 0
  %.v814 = select i1 %4342, i64 23, i64 6
  %4343 = add i64 %4340, %.v814
  %cmpBr_45640c = icmp eq i8 %4341, 1
  %4344 = load i64, i64* %RBP.i, align 8
  %4345 = add i64 %4344, -52
  %4346 = add i64 %4343, 3
  store i64 %4346, i64* %3, align 8
  %4347 = inttoptr i64 %4345 to i32*
  %4348 = load i32, i32* %4347, align 4
  %4349 = zext i32 %4348 to i64
  store i64 %4349, i64* %RAX.i3176, align 8
  %4350 = add i64 %4343, 6
  store i64 %4350, i64* %3, align 8
  br i1 %cmpBr_45640c, label %block_.L_456423, label %block_456412

block_456412:                                     ; preds = %block_.L_4563ee
  %4351 = or i64 %4349, 1
  %4352 = trunc i64 %4351 to i32
  store i64 %4351, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4353 = and i32 %4352, 255
  %4354 = tail call i32 @llvm.ctpop.i32(i32 %4353)
  %4355 = trunc i32 %4354 to i8
  %4356 = and i8 %4355, 1
  %4357 = xor i8 %4356, 1
  store i8 %4357, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4358 = lshr i32 %4352, 31
  %4359 = trunc i32 %4358 to i8
  store i8 %4359, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4360 = add i64 %4344, -308
  %4361 = add i64 %4343, 12
  store i64 %4361, i64* %3, align 8
  %4362 = inttoptr i64 %4360 to i32*
  store i32 %4352, i32* %4362, align 4
  %4363 = load i64, i64* %3, align 8
  %4364 = add i64 %4363, 17
  store i64 %4364, i64* %3, align 8
  br label %block_.L_45642f

block_.L_456423:                                  ; preds = %block_.L_4563ee
  %4365 = and i64 %4349, 4294967294
  store i64 %4365, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4366 = and i32 %4348, 254
  %4367 = tail call i32 @llvm.ctpop.i32(i32 %4366)
  %4368 = trunc i32 %4367 to i8
  %4369 = and i8 %4368, 1
  %4370 = xor i8 %4369, 1
  store i8 %4370, i8* %26, align 1
  %4371 = icmp ult i32 %4348, 2
  %4372 = zext i1 %4371 to i8
  store i8 %4372, i8* %34, align 1
  %4373 = lshr i32 %4348, 31
  %4374 = trunc i32 %4373 to i8
  store i8 %4374, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4375 = add i64 %4344, -308
  %4376 = trunc i64 %4365 to i32
  %4377 = add i64 %4343, 12
  store i64 %4377, i64* %3, align 8
  %4378 = inttoptr i64 %4375 to i32*
  store i32 %4376, i32* %4378, align 4
  %.pre449 = load i64, i64* %3, align 8
  br label %block_.L_45642f

block_.L_45642f:                                  ; preds = %block_.L_456423, %block_456412
  %4379 = phi i64 [ %.pre449, %block_.L_456423 ], [ %4364, %block_456412 ]
  %4380 = load i64, i64* %RBP.i, align 8
  %4381 = add i64 %4380, -308
  %4382 = add i64 %4379, 6
  store i64 %4382, i64* %3, align 8
  %4383 = inttoptr i64 %4381 to i32*
  %4384 = load i32, i32* %4383, align 4
  %4385 = zext i32 %4384 to i64
  store i64 %4385, i64* %RAX.i3176, align 8
  %4386 = sext i32 %4384 to i64
  store i64 %4386, i64* %RCX.i7756, align 8
  %4387 = add i64 %4380, -304
  %4388 = add i64 %4379, 16
  store i64 %4388, i64* %3, align 8
  %4389 = inttoptr i64 %4387 to i64*
  %4390 = load i64, i64* %4389, align 8
  store i64 %4390, i64* %RDX.i7753, align 8
  %4391 = shl nsw i64 %4386, 3
  %4392 = add i64 %4391, %4390
  %4393 = add i64 %4379, 20
  store i64 %4393, i64* %3, align 8
  %4394 = inttoptr i64 %4392 to i64*
  %4395 = load i64, i64* %4394, align 8
  store i64 %4395, i64* %RCX.i7756, align 8
  %4396 = add i64 %4380, -56
  %4397 = add i64 %4379, 23
  store i64 %4397, i64* %3, align 8
  %4398 = inttoptr i64 %4396 to i32*
  %4399 = load i32, i32* %4398, align 4
  %4400 = and i32 %4399, 2
  %4401 = zext i32 %4400 to i64
  store i64 %4401, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4402 = tail call i32 @llvm.ctpop.i32(i32 %4400)
  %4403 = trunc i32 %4402 to i8
  %4404 = xor i8 %4403, 1
  store i8 %4404, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit623 = lshr exact i32 %4400, 1
  %4405 = trunc i32 %.lobit623 to i8
  %4406 = xor i8 %4405, 1
  store i8 %4406, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4407 = add i64 %4380, -320
  %4408 = add i64 %4379, 36
  store i64 %4408, i64* %3, align 8
  %4409 = inttoptr i64 %4407 to i64*
  store i64 %4395, i64* %4409, align 8
  %4410 = load i64, i64* %3, align 8
  %4411 = load i8, i8* %34, align 1
  %4412 = icmp ne i8 %4411, 0
  %.v815 = select i1 %4412, i64 23, i64 6
  %4413 = add i64 %4410, %.v815
  %cmpBr_456453 = icmp eq i8 %4411, 1
  %4414 = load i64, i64* %RBP.i, align 8
  %4415 = add i64 %4414, -56
  %4416 = add i64 %4413, 3
  store i64 %4416, i64* %3, align 8
  %4417 = inttoptr i64 %4415 to i32*
  %4418 = load i32, i32* %4417, align 4
  %4419 = zext i32 %4418 to i64
  store i64 %4419, i64* %RAX.i3176, align 8
  %4420 = add i64 %4413, 6
  store i64 %4420, i64* %3, align 8
  br i1 %cmpBr_456453, label %block_.L_45646a, label %block_456459

block_456459:                                     ; preds = %block_.L_45642f
  %4421 = or i64 %4419, 1
  %4422 = trunc i64 %4421 to i32
  store i64 %4421, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4423 = and i32 %4422, 255
  %4424 = tail call i32 @llvm.ctpop.i32(i32 %4423)
  %4425 = trunc i32 %4424 to i8
  %4426 = and i8 %4425, 1
  %4427 = xor i8 %4426, 1
  store i8 %4427, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4428 = lshr i32 %4422, 31
  %4429 = trunc i32 %4428 to i8
  store i8 %4429, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4430 = add i64 %4414, -324
  %4431 = add i64 %4413, 12
  store i64 %4431, i64* %3, align 8
  %4432 = inttoptr i64 %4430 to i32*
  store i32 %4422, i32* %4432, align 4
  %4433 = load i64, i64* %3, align 8
  %4434 = add i64 %4433, 17
  store i64 %4434, i64* %3, align 8
  br label %block_.L_456476

block_.L_45646a:                                  ; preds = %block_.L_45642f
  %4435 = and i64 %4419, 4294967294
  store i64 %4435, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4436 = and i32 %4418, 254
  %4437 = tail call i32 @llvm.ctpop.i32(i32 %4436)
  %4438 = trunc i32 %4437 to i8
  %4439 = and i8 %4438, 1
  %4440 = xor i8 %4439, 1
  store i8 %4440, i8* %26, align 1
  %4441 = icmp ult i32 %4418, 2
  %4442 = zext i1 %4441 to i8
  store i8 %4442, i8* %34, align 1
  %4443 = lshr i32 %4418, 31
  %4444 = trunc i32 %4443 to i8
  store i8 %4444, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4445 = add i64 %4414, -324
  %4446 = trunc i64 %4435 to i32
  %4447 = add i64 %4413, 12
  store i64 %4447, i64* %3, align 8
  %4448 = inttoptr i64 %4445 to i32*
  store i32 %4446, i32* %4448, align 4
  %.pre450 = load i64, i64* %3, align 8
  br label %block_.L_456476

block_.L_456476:                                  ; preds = %block_.L_45646a, %block_456459
  %4449 = phi i64 [ %.pre450, %block_.L_45646a ], [ %4434, %block_456459 ]
  %4450 = load i64, i64* %RBP.i, align 8
  %4451 = add i64 %4450, -324
  %4452 = add i64 %4449, 6
  store i64 %4452, i64* %3, align 8
  %4453 = inttoptr i64 %4451 to i32*
  %4454 = load i32, i32* %4453, align 4
  %4455 = zext i32 %4454 to i64
  store i64 %4455, i64* %RAX.i3176, align 8
  %4456 = sext i32 %4454 to i64
  store i64 %4456, i64* %RCX.i7756, align 8
  %4457 = add i64 %4450, -320
  %4458 = add i64 %4449, 16
  store i64 %4458, i64* %3, align 8
  %4459 = inttoptr i64 %4457 to i64*
  %4460 = load i64, i64* %4459, align 8
  store i64 %4460, i64* %RDX.i7753, align 8
  %4461 = shl nsw i64 %4456, 1
  %4462 = add i64 %4461, %4460
  %4463 = add i64 %4449, 20
  store i64 %4463, i64* %3, align 8
  %4464 = inttoptr i64 %4462 to i16*
  %4465 = load i16, i16* %4464, align 2
  store i16 %4465, i16* %SI.i6180, align 2
  %4466 = add i64 %4450, -16
  %4467 = add i64 %4449, 24
  store i64 %4467, i64* %3, align 8
  %4468 = inttoptr i64 %4466 to i64*
  %4469 = load i64, i64* %4468, align 8
  store i64 %4469, i64* %RCX.i7756, align 8
  %4470 = add i64 %4469, 1600
  %4471 = add i64 %4449, 31
  store i64 %4471, i64* %3, align 8
  %4472 = inttoptr i64 %4470 to i64*
  %4473 = load i64, i64* %4472, align 8
  store i64 %4473, i64* %RCX.i7756, align 8
  %4474 = add i64 %4449, 34
  store i64 %4474, i64* %3, align 8
  %4475 = inttoptr i64 %4473 to i64*
  %4476 = load i64, i64* %4475, align 8
  store i64 %4476, i64* %RCX.i7756, align 8
  %4477 = add i64 %4450, -52
  %4478 = add i64 %4449, 38
  store i64 %4478, i64* %3, align 8
  %4479 = inttoptr i64 %4477 to i32*
  %4480 = load i32, i32* %4479, align 4
  %4481 = sext i32 %4480 to i64
  store i64 %4481, i64* %RDI.i732, align 8
  %4482 = shl nsw i64 %4481, 3
  %4483 = add i64 %4482, %4476
  %4484 = add i64 %4449, 42
  store i64 %4484, i64* %3, align 8
  %4485 = inttoptr i64 %4483 to i64*
  %4486 = load i64, i64* %4485, align 8
  store i64 %4486, i64* %RCX.i7756, align 8
  %4487 = add i64 %4450, -56
  %4488 = add i64 %4449, 46
  store i64 %4488, i64* %3, align 8
  %4489 = inttoptr i64 %4487 to i32*
  %4490 = load i32, i32* %4489, align 4
  %4491 = sext i32 %4490 to i64
  store i64 %4491, i64* %RDI.i732, align 8
  %4492 = shl nsw i64 %4491, 1
  %4493 = add i64 %4492, %4486
  %4494 = add i64 %4449, 50
  store i64 %4494, i64* %3, align 8
  %4495 = inttoptr i64 %4493 to i16*
  store i16 %4465, i16* %4495, align 2
  %4496 = load i64, i64* %RBP.i, align 8
  %4497 = add i64 %4496, -32
  %4498 = load i64, i64* %3, align 8
  %4499 = add i64 %4498, 4
  store i64 %4499, i64* %3, align 8
  %4500 = inttoptr i64 %4497 to i64*
  %4501 = load i64, i64* %4500, align 8
  store i64 %4501, i64* %RCX.i7756, align 8
  %4502 = add i64 %4501, 6496
  %4503 = add i64 %4498, 11
  store i64 %4503, i64* %3, align 8
  %4504 = inttoptr i64 %4502 to i64*
  %4505 = load i64, i64* %4504, align 8
  store i64 %4505, i64* %RCX.i7756, align 8
  %4506 = add i64 %4498, 14
  store i64 %4506, i64* %3, align 8
  %4507 = inttoptr i64 %4505 to i64*
  %4508 = load i64, i64* %4507, align 8
  store i64 %4508, i64* %RCX.i7756, align 8
  %4509 = add i64 %4496, -52
  %4510 = add i64 %4498, 17
  store i64 %4510, i64* %3, align 8
  %4511 = inttoptr i64 %4509 to i32*
  %4512 = load i32, i32* %4511, align 4
  %4513 = and i32 %4512, 2
  %4514 = zext i32 %4513 to i64
  store i64 %4514, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4515 = tail call i32 @llvm.ctpop.i32(i32 %4513)
  %4516 = trunc i32 %4515 to i8
  %4517 = xor i8 %4516, 1
  store i8 %4517, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit624 = lshr exact i32 %4513, 1
  %4518 = trunc i32 %.lobit624 to i8
  %4519 = xor i8 %4518, 1
  store i8 %4519, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4520 = add i64 %4496, -336
  %4521 = add i64 %4498, 30
  store i64 %4521, i64* %3, align 8
  %4522 = inttoptr i64 %4520 to i64*
  store i64 %4508, i64* %4522, align 8
  %4523 = load i64, i64* %3, align 8
  %4524 = load i8, i8* %34, align 1
  %4525 = icmp ne i8 %4524, 0
  %.v816 = select i1 %4525, i64 23, i64 6
  %4526 = add i64 %4523, %.v816
  %cmpBr_4564c6 = icmp eq i8 %4524, 1
  %4527 = load i64, i64* %RBP.i, align 8
  %4528 = add i64 %4527, -52
  %4529 = add i64 %4526, 3
  store i64 %4529, i64* %3, align 8
  %4530 = inttoptr i64 %4528 to i32*
  %4531 = load i32, i32* %4530, align 4
  %4532 = zext i32 %4531 to i64
  store i64 %4532, i64* %RAX.i3176, align 8
  %4533 = add i64 %4526, 6
  store i64 %4533, i64* %3, align 8
  br i1 %cmpBr_4564c6, label %block_.L_4564dd, label %block_4564cc

block_4564cc:                                     ; preds = %block_.L_456476
  %4534 = or i64 %4532, 1
  %4535 = trunc i64 %4534 to i32
  store i64 %4534, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4536 = and i32 %4535, 255
  %4537 = tail call i32 @llvm.ctpop.i32(i32 %4536)
  %4538 = trunc i32 %4537 to i8
  %4539 = and i8 %4538, 1
  %4540 = xor i8 %4539, 1
  store i8 %4540, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4541 = lshr i32 %4535, 31
  %4542 = trunc i32 %4541 to i8
  store i8 %4542, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4543 = add i64 %4527, -340
  %4544 = add i64 %4526, 12
  store i64 %4544, i64* %3, align 8
  %4545 = inttoptr i64 %4543 to i32*
  store i32 %4535, i32* %4545, align 4
  %4546 = load i64, i64* %3, align 8
  %4547 = add i64 %4546, 17
  store i64 %4547, i64* %3, align 8
  br label %block_.L_4564e9

block_.L_4564dd:                                  ; preds = %block_.L_456476
  %4548 = and i64 %4532, 4294967294
  store i64 %4548, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4549 = and i32 %4531, 254
  %4550 = tail call i32 @llvm.ctpop.i32(i32 %4549)
  %4551 = trunc i32 %4550 to i8
  %4552 = and i8 %4551, 1
  %4553 = xor i8 %4552, 1
  store i8 %4553, i8* %26, align 1
  %4554 = icmp ult i32 %4531, 2
  %4555 = zext i1 %4554 to i8
  store i8 %4555, i8* %34, align 1
  %4556 = lshr i32 %4531, 31
  %4557 = trunc i32 %4556 to i8
  store i8 %4557, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4558 = add i64 %4527, -340
  %4559 = trunc i64 %4548 to i32
  %4560 = add i64 %4526, 12
  store i64 %4560, i64* %3, align 8
  %4561 = inttoptr i64 %4558 to i32*
  store i32 %4559, i32* %4561, align 4
  %.pre451 = load i64, i64* %3, align 8
  br label %block_.L_4564e9

block_.L_4564e9:                                  ; preds = %block_.L_4564dd, %block_4564cc
  %4562 = phi i64 [ %.pre451, %block_.L_4564dd ], [ %4547, %block_4564cc ]
  %4563 = load i64, i64* %RBP.i, align 8
  %4564 = add i64 %4563, -340
  %4565 = add i64 %4562, 6
  store i64 %4565, i64* %3, align 8
  %4566 = inttoptr i64 %4564 to i32*
  %4567 = load i32, i32* %4566, align 4
  %4568 = zext i32 %4567 to i64
  store i64 %4568, i64* %RAX.i3176, align 8
  %4569 = sext i32 %4567 to i64
  store i64 %4569, i64* %RCX.i7756, align 8
  %4570 = add i64 %4563, -336
  %4571 = add i64 %4562, 16
  store i64 %4571, i64* %3, align 8
  %4572 = inttoptr i64 %4570 to i64*
  %4573 = load i64, i64* %4572, align 8
  store i64 %4573, i64* %RDX.i7753, align 8
  %4574 = shl nsw i64 %4569, 3
  %4575 = add i64 %4574, %4573
  %4576 = add i64 %4562, 20
  store i64 %4576, i64* %3, align 8
  %4577 = inttoptr i64 %4575 to i64*
  %4578 = load i64, i64* %4577, align 8
  store i64 %4578, i64* %RCX.i7756, align 8
  %4579 = add i64 %4563, -56
  %4580 = add i64 %4562, 23
  store i64 %4580, i64* %3, align 8
  %4581 = inttoptr i64 %4579 to i32*
  %4582 = load i32, i32* %4581, align 4
  %4583 = and i32 %4582, 2
  %4584 = zext i32 %4583 to i64
  store i64 %4584, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4585 = tail call i32 @llvm.ctpop.i32(i32 %4583)
  %4586 = trunc i32 %4585 to i8
  %4587 = xor i8 %4586, 1
  store i8 %4587, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit625 = lshr exact i32 %4583, 1
  %4588 = trunc i32 %.lobit625 to i8
  %4589 = xor i8 %4588, 1
  store i8 %4589, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4590 = add i64 %4563, -352
  %4591 = add i64 %4562, 36
  store i64 %4591, i64* %3, align 8
  %4592 = inttoptr i64 %4590 to i64*
  store i64 %4578, i64* %4592, align 8
  %4593 = load i64, i64* %3, align 8
  %4594 = load i8, i8* %34, align 1
  %4595 = icmp ne i8 %4594, 0
  %.v817 = select i1 %4595, i64 23, i64 6
  %4596 = add i64 %4593, %.v817
  %cmpBr_45650d = icmp eq i8 %4594, 1
  %4597 = load i64, i64* %RBP.i, align 8
  %4598 = add i64 %4597, -56
  %4599 = add i64 %4596, 3
  store i64 %4599, i64* %3, align 8
  %4600 = inttoptr i64 %4598 to i32*
  %4601 = load i32, i32* %4600, align 4
  %4602 = zext i32 %4601 to i64
  store i64 %4602, i64* %RAX.i3176, align 8
  %4603 = add i64 %4596, 6
  store i64 %4603, i64* %3, align 8
  br i1 %cmpBr_45650d, label %block_.L_456524, label %block_456513

block_456513:                                     ; preds = %block_.L_4564e9
  %4604 = or i64 %4602, 1
  %4605 = trunc i64 %4604 to i32
  store i64 %4604, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4606 = and i32 %4605, 255
  %4607 = tail call i32 @llvm.ctpop.i32(i32 %4606)
  %4608 = trunc i32 %4607 to i8
  %4609 = and i8 %4608, 1
  %4610 = xor i8 %4609, 1
  store i8 %4610, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4611 = lshr i32 %4605, 31
  %4612 = trunc i32 %4611 to i8
  store i8 %4612, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4613 = add i64 %4597, -356
  %4614 = add i64 %4596, 12
  store i64 %4614, i64* %3, align 8
  %4615 = inttoptr i64 %4613 to i32*
  store i32 %4605, i32* %4615, align 4
  %4616 = load i64, i64* %3, align 8
  %4617 = add i64 %4616, 17
  store i64 %4617, i64* %3, align 8
  br label %block_.L_456530

block_.L_456524:                                  ; preds = %block_.L_4564e9
  %4618 = and i64 %4602, 4294967294
  store i64 %4618, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4619 = and i32 %4601, 254
  %4620 = tail call i32 @llvm.ctpop.i32(i32 %4619)
  %4621 = trunc i32 %4620 to i8
  %4622 = and i8 %4621, 1
  %4623 = xor i8 %4622, 1
  store i8 %4623, i8* %26, align 1
  %4624 = icmp ult i32 %4601, 2
  %4625 = zext i1 %4624 to i8
  store i8 %4625, i8* %34, align 1
  %4626 = lshr i32 %4601, 31
  %4627 = trunc i32 %4626 to i8
  store i8 %4627, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4628 = add i64 %4597, -356
  %4629 = trunc i64 %4618 to i32
  %4630 = add i64 %4596, 12
  store i64 %4630, i64* %3, align 8
  %4631 = inttoptr i64 %4628 to i32*
  store i32 %4629, i32* %4631, align 4
  %.pre452 = load i64, i64* %3, align 8
  br label %block_.L_456530

block_.L_456530:                                  ; preds = %block_.L_456524, %block_456513
  %4632 = phi i64 [ %.pre452, %block_.L_456524 ], [ %4617, %block_456513 ]
  %4633 = load i64, i64* %RBP.i, align 8
  %4634 = add i64 %4633, -356
  %4635 = add i64 %4632, 6
  store i64 %4635, i64* %3, align 8
  %4636 = inttoptr i64 %4634 to i32*
  %4637 = load i32, i32* %4636, align 4
  %4638 = zext i32 %4637 to i64
  store i64 %4638, i64* %RAX.i3176, align 8
  %4639 = sext i32 %4637 to i64
  store i64 %4639, i64* %RCX.i7756, align 8
  %4640 = add i64 %4633, -352
  %4641 = add i64 %4632, 16
  store i64 %4641, i64* %3, align 8
  %4642 = inttoptr i64 %4640 to i64*
  %4643 = load i64, i64* %4642, align 8
  store i64 %4643, i64* %RDX.i7753, align 8
  %4644 = shl nsw i64 %4639, 3
  %4645 = add i64 %4644, %4643
  %4646 = add i64 %4632, 20
  store i64 %4646, i64* %3, align 8
  %4647 = inttoptr i64 %4645 to i64*
  %4648 = load i64, i64* %4647, align 8
  store i64 %4648, i64* %RCX.i7756, align 8
  %4649 = add i64 %4633, -16
  %4650 = add i64 %4632, 24
  store i64 %4650, i64* %3, align 8
  %4651 = inttoptr i64 %4649 to i64*
  %4652 = load i64, i64* %4651, align 8
  store i64 %4652, i64* %RSI.i766, align 8
  %4653 = add i64 %4652, 1608
  %4654 = add i64 %4632, 31
  store i64 %4654, i64* %3, align 8
  %4655 = inttoptr i64 %4653 to i64*
  %4656 = load i64, i64* %4655, align 8
  store i64 %4656, i64* %RSI.i766, align 8
  %4657 = add i64 %4632, 34
  store i64 %4657, i64* %3, align 8
  %4658 = inttoptr i64 %4656 to i64*
  %4659 = load i64, i64* %4658, align 8
  store i64 %4659, i64* %RSI.i766, align 8
  %4660 = add i64 %4633, -52
  %4661 = add i64 %4632, 38
  store i64 %4661, i64* %3, align 8
  %4662 = inttoptr i64 %4660 to i32*
  %4663 = load i32, i32* %4662, align 4
  %4664 = sext i32 %4663 to i64
  store i64 %4664, i64* %RDI.i732, align 8
  %4665 = shl nsw i64 %4664, 3
  %4666 = add i64 %4665, %4659
  %4667 = add i64 %4632, 42
  store i64 %4667, i64* %3, align 8
  %4668 = inttoptr i64 %4666 to i64*
  %4669 = load i64, i64* %4668, align 8
  store i64 %4669, i64* %RSI.i766, align 8
  %4670 = add i64 %4633, -56
  %4671 = add i64 %4632, 46
  store i64 %4671, i64* %3, align 8
  %4672 = inttoptr i64 %4670 to i32*
  %4673 = load i32, i32* %4672, align 4
  %4674 = sext i32 %4673 to i64
  store i64 %4674, i64* %RDI.i732, align 8
  %4675 = shl nsw i64 %4674, 3
  %4676 = add i64 %4675, %4669
  %4677 = add i64 %4632, 50
  store i64 %4677, i64* %3, align 8
  %4678 = inttoptr i64 %4676 to i64*
  store i64 %4648, i64* %4678, align 8
  %.pre453 = load i64, i64* %3, align 8
  br label %block_.L_456562

block_.L_456562:                                  ; preds = %block_.L_456530, %block_4563a7
  %4679 = phi i64 [ %.pre453, %block_.L_456530 ], [ %4314, %block_4563a7 ]
  %4680 = load i64, i64* %RBP.i, align 8
  %4681 = add i64 %4680, -32
  %4682 = add i64 %4679, 4
  store i64 %4682, i64* %3, align 8
  %4683 = inttoptr i64 %4681 to i64*
  %4684 = load i64, i64* %4683, align 8
  store i64 %4684, i64* %RAX.i3176, align 8
  %4685 = add i64 %4684, 6480
  %4686 = add i64 %4679, 11
  store i64 %4686, i64* %3, align 8
  %4687 = inttoptr i64 %4685 to i64*
  %4688 = load i64, i64* %4687, align 8
  store i64 %4688, i64* %RAX.i3176, align 8
  %4689 = add i64 %4688, 8
  %4690 = add i64 %4679, 15
  store i64 %4690, i64* %3, align 8
  %4691 = inttoptr i64 %4689 to i64*
  %4692 = load i64, i64* %4691, align 8
  store i64 %4692, i64* %RAX.i3176, align 8
  %4693 = add i64 %4680, -52
  %4694 = add i64 %4679, 18
  store i64 %4694, i64* %3, align 8
  %4695 = inttoptr i64 %4693 to i32*
  %4696 = load i32, i32* %4695, align 4
  %4697 = and i32 %4696, 2
  %4698 = zext i32 %4697 to i64
  store i64 %4698, i64* %RCX.i7756, align 8
  store i8 0, i8* %19, align 1
  %4699 = tail call i32 @llvm.ctpop.i32(i32 %4697)
  %4700 = trunc i32 %4699 to i8
  %4701 = xor i8 %4700, 1
  store i8 %4701, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit616 = lshr exact i32 %4697, 1
  %4702 = trunc i32 %.lobit616 to i8
  %4703 = xor i8 %4702, 1
  store i8 %4703, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4704 = add i64 %4680, -368
  %4705 = add i64 %4679, 31
  store i64 %4705, i64* %3, align 8
  %4706 = inttoptr i64 %4704 to i64*
  store i64 %4692, i64* %4706, align 8
  %4707 = load i64, i64* %3, align 8
  %4708 = load i8, i8* %34, align 1
  %4709 = icmp ne i8 %4708, 0
  %.v818 = select i1 %4709, i64 23, i64 6
  %4710 = add i64 %4707, %.v818
  %cmpBr_456581 = icmp eq i8 %4708, 1
  %4711 = load i64, i64* %RBP.i, align 8
  %4712 = add i64 %4711, -52
  %4713 = add i64 %4710, 3
  store i64 %4713, i64* %3, align 8
  %4714 = inttoptr i64 %4712 to i32*
  %4715 = load i32, i32* %4714, align 4
  %4716 = zext i32 %4715 to i64
  store i64 %4716, i64* %RAX.i3176, align 8
  %4717 = add i64 %4710, 6
  store i64 %4717, i64* %3, align 8
  br i1 %cmpBr_456581, label %block_.L_456598, label %block_456587

block_456587:                                     ; preds = %block_.L_456562
  %4718 = or i64 %4716, 1
  %4719 = trunc i64 %4718 to i32
  store i64 %4718, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4720 = and i32 %4719, 255
  %4721 = tail call i32 @llvm.ctpop.i32(i32 %4720)
  %4722 = trunc i32 %4721 to i8
  %4723 = and i8 %4722, 1
  %4724 = xor i8 %4723, 1
  store i8 %4724, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4725 = lshr i32 %4719, 31
  %4726 = trunc i32 %4725 to i8
  store i8 %4726, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4727 = add i64 %4711, -372
  %4728 = add i64 %4710, 12
  store i64 %4728, i64* %3, align 8
  %4729 = inttoptr i64 %4727 to i32*
  store i32 %4719, i32* %4729, align 4
  %4730 = load i64, i64* %3, align 8
  %4731 = add i64 %4730, 17
  store i64 %4731, i64* %3, align 8
  br label %block_.L_4565a4

block_.L_456598:                                  ; preds = %block_.L_456562
  %4732 = and i64 %4716, 4294967294
  store i64 %4732, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4733 = and i32 %4715, 254
  %4734 = tail call i32 @llvm.ctpop.i32(i32 %4733)
  %4735 = trunc i32 %4734 to i8
  %4736 = and i8 %4735, 1
  %4737 = xor i8 %4736, 1
  store i8 %4737, i8* %26, align 1
  %4738 = icmp ult i32 %4715, 2
  %4739 = zext i1 %4738 to i8
  store i8 %4739, i8* %34, align 1
  %4740 = lshr i32 %4715, 31
  %4741 = trunc i32 %4740 to i8
  store i8 %4741, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4742 = add i64 %4711, -372
  %4743 = trunc i64 %4732 to i32
  %4744 = add i64 %4710, 12
  store i64 %4744, i64* %3, align 8
  %4745 = inttoptr i64 %4742 to i32*
  store i32 %4743, i32* %4745, align 4
  %.pre454 = load i64, i64* %3, align 8
  br label %block_.L_4565a4

block_.L_4565a4:                                  ; preds = %block_.L_456598, %block_456587
  %4746 = phi i64 [ %.pre454, %block_.L_456598 ], [ %4731, %block_456587 ]
  %4747 = load i64, i64* %RBP.i, align 8
  %4748 = add i64 %4747, -372
  %4749 = add i64 %4746, 6
  store i64 %4749, i64* %3, align 8
  %4750 = inttoptr i64 %4748 to i32*
  %4751 = load i32, i32* %4750, align 4
  %4752 = zext i32 %4751 to i64
  store i64 %4752, i64* %RAX.i3176, align 8
  %4753 = sext i32 %4751 to i64
  store i64 %4753, i64* %RCX.i7756, align 8
  %4754 = add i64 %4747, -368
  %4755 = add i64 %4746, 16
  store i64 %4755, i64* %3, align 8
  %4756 = inttoptr i64 %4754 to i64*
  %4757 = load i64, i64* %4756, align 8
  store i64 %4757, i64* %RDX.i7753, align 8
  %4758 = shl nsw i64 %4753, 3
  %4759 = add i64 %4758, %4757
  %4760 = add i64 %4746, 20
  store i64 %4760, i64* %3, align 8
  %4761 = inttoptr i64 %4759 to i64*
  %4762 = load i64, i64* %4761, align 8
  store i64 %4762, i64* %RCX.i7756, align 8
  %4763 = add i64 %4747, -56
  %4764 = add i64 %4746, 23
  store i64 %4764, i64* %3, align 8
  %4765 = inttoptr i64 %4763 to i32*
  %4766 = load i32, i32* %4765, align 4
  %4767 = and i32 %4766, 2
  %4768 = zext i32 %4767 to i64
  store i64 %4768, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4769 = tail call i32 @llvm.ctpop.i32(i32 %4767)
  %4770 = trunc i32 %4769 to i8
  %4771 = xor i8 %4770, 1
  store i8 %4771, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit617 = lshr exact i32 %4767, 1
  %4772 = trunc i32 %.lobit617 to i8
  %4773 = xor i8 %4772, 1
  store i8 %4773, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4774 = add i64 %4747, -384
  %4775 = add i64 %4746, 36
  store i64 %4775, i64* %3, align 8
  %4776 = inttoptr i64 %4774 to i64*
  store i64 %4762, i64* %4776, align 8
  %4777 = load i64, i64* %3, align 8
  %4778 = load i8, i8* %34, align 1
  %4779 = icmp ne i8 %4778, 0
  %.v819 = select i1 %4779, i64 23, i64 6
  %4780 = add i64 %4777, %.v819
  %cmpBr_4565c8 = icmp eq i8 %4778, 1
  %4781 = load i64, i64* %RBP.i, align 8
  %4782 = add i64 %4781, -56
  %4783 = add i64 %4780, 3
  store i64 %4783, i64* %3, align 8
  %4784 = inttoptr i64 %4782 to i32*
  %4785 = load i32, i32* %4784, align 4
  %4786 = zext i32 %4785 to i64
  store i64 %4786, i64* %RAX.i3176, align 8
  %4787 = add i64 %4780, 6
  store i64 %4787, i64* %3, align 8
  br i1 %cmpBr_4565c8, label %block_.L_4565df, label %block_4565ce

block_4565ce:                                     ; preds = %block_.L_4565a4
  %4788 = or i64 %4786, 1
  %4789 = trunc i64 %4788 to i32
  store i64 %4788, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4790 = and i32 %4789, 255
  %4791 = tail call i32 @llvm.ctpop.i32(i32 %4790)
  %4792 = trunc i32 %4791 to i8
  %4793 = and i8 %4792, 1
  %4794 = xor i8 %4793, 1
  store i8 %4794, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4795 = lshr i32 %4789, 31
  %4796 = trunc i32 %4795 to i8
  store i8 %4796, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4797 = add i64 %4781, -388
  %4798 = add i64 %4780, 12
  store i64 %4798, i64* %3, align 8
  %4799 = inttoptr i64 %4797 to i32*
  store i32 %4789, i32* %4799, align 4
  %4800 = load i64, i64* %3, align 8
  %4801 = add i64 %4800, 17
  store i64 %4801, i64* %3, align 8
  br label %block_.L_4565eb

block_.L_4565df:                                  ; preds = %block_.L_4565a4
  %4802 = and i64 %4786, 4294967294
  store i64 %4802, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4803 = and i32 %4785, 254
  %4804 = tail call i32 @llvm.ctpop.i32(i32 %4803)
  %4805 = trunc i32 %4804 to i8
  %4806 = and i8 %4805, 1
  %4807 = xor i8 %4806, 1
  store i8 %4807, i8* %26, align 1
  %4808 = icmp ult i32 %4785, 2
  %4809 = zext i1 %4808 to i8
  store i8 %4809, i8* %34, align 1
  %4810 = lshr i32 %4785, 31
  %4811 = trunc i32 %4810 to i8
  store i8 %4811, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4812 = add i64 %4781, -388
  %4813 = trunc i64 %4802 to i32
  %4814 = add i64 %4780, 12
  store i64 %4814, i64* %3, align 8
  %4815 = inttoptr i64 %4812 to i32*
  store i32 %4813, i32* %4815, align 4
  %.pre455 = load i64, i64* %3, align 8
  br label %block_.L_4565eb

block_.L_4565eb:                                  ; preds = %block_.L_4565df, %block_4565ce
  %4816 = phi i64 [ %.pre455, %block_.L_4565df ], [ %4801, %block_4565ce ]
  %4817 = load i64, i64* %RBP.i, align 8
  %4818 = add i64 %4817, -388
  %4819 = add i64 %4816, 6
  store i64 %4819, i64* %3, align 8
  %4820 = inttoptr i64 %4818 to i32*
  %4821 = load i32, i32* %4820, align 4
  %4822 = zext i32 %4821 to i64
  store i64 %4822, i64* %RAX.i3176, align 8
  %4823 = sext i32 %4821 to i64
  store i64 %4823, i64* %RCX.i7756, align 8
  %4824 = add i64 %4817, -384
  %4825 = add i64 %4816, 16
  store i64 %4825, i64* %3, align 8
  %4826 = inttoptr i64 %4824 to i64*
  %4827 = load i64, i64* %4826, align 8
  store i64 %4827, i64* %RDX.i7753, align 8
  %4828 = shl nsw i64 %4823, 1
  %4829 = add i64 %4828, %4827
  %4830 = add i64 %4816, 20
  store i64 %4830, i64* %3, align 8
  %4831 = inttoptr i64 %4829 to i16*
  %4832 = load i16, i16* %4831, align 2
  %4833 = sext i16 %4832 to i64
  %4834 = and i64 %4833, 4294967295
  store i64 %4834, i64* %RAX.i3176, align 8
  %4835 = sext i16 %4832 to i32
  %4836 = add nsw i32 %4835, 1
  %4837 = icmp ne i16 %4832, -1
  %4838 = zext i1 %4837 to i8
  store i8 %4838, i8* %19, align 1
  %4839 = and i32 %4836, 255
  %4840 = tail call i32 @llvm.ctpop.i32(i32 %4839)
  %4841 = trunc i32 %4840 to i8
  %4842 = and i8 %4841, 1
  %4843 = xor i8 %4842, 1
  store i8 %4843, i8* %26, align 1
  %4844 = xor i32 %4835, 16
  %4845 = xor i32 %4844, %4836
  %4846 = lshr i32 %4845, 4
  %4847 = trunc i32 %4846 to i8
  %4848 = and i8 %4847, 1
  store i8 %4848, i8* %31, align 1
  %4849 = icmp eq i32 %4836, 0
  %4850 = zext i1 %4849 to i8
  store i8 %4850, i8* %34, align 1
  %4851 = lshr i32 %4836, 31
  %4852 = trunc i32 %4851 to i8
  store i8 %4852, i8* %37, align 1
  %4853 = lshr i32 %4835, 31
  %4854 = xor i32 %4853, 1
  %4855 = xor i32 %4851, %4853
  %4856 = add nuw nsw i32 %4855, %4854
  %4857 = icmp eq i32 %4856, 2
  %4858 = zext i1 %4857 to i8
  store i8 %4858, i8* %43, align 1
  %.v720 = select i1 %4849, i64 29, i64 102
  %4859 = add i64 %4816, %.v720
  store i64 %4859, i64* %3, align 8
  br i1 %4849, label %block_456608, label %block_.L_456651

block_456608:                                     ; preds = %block_.L_4565eb
  %4860 = add i64 %4817, -16
  %4861 = add i64 %4859, 4
  store i64 %4861, i64* %3, align 8
  %4862 = inttoptr i64 %4860 to i64*
  %4863 = load i64, i64* %4862, align 8
  store i64 %4863, i64* %RAX.i3176, align 8
  %4864 = add i64 %4863, 1600
  %4865 = add i64 %4859, 11
  store i64 %4865, i64* %3, align 8
  %4866 = inttoptr i64 %4864 to i64*
  %4867 = load i64, i64* %4866, align 8
  store i64 %4867, i64* %RAX.i3176, align 8
  %4868 = add i64 %4867, 8
  %4869 = add i64 %4859, 15
  store i64 %4869, i64* %3, align 8
  %4870 = inttoptr i64 %4868 to i64*
  %4871 = load i64, i64* %4870, align 8
  store i64 %4871, i64* %RAX.i3176, align 8
  %4872 = add i64 %4817, -52
  %4873 = add i64 %4859, 19
  store i64 %4873, i64* %3, align 8
  %4874 = inttoptr i64 %4872 to i32*
  %4875 = load i32, i32* %4874, align 4
  %4876 = sext i32 %4875 to i64
  store i64 %4876, i64* %RCX.i7756, align 8
  %4877 = shl nsw i64 %4876, 3
  %4878 = add i64 %4877, %4871
  %4879 = add i64 %4859, 23
  store i64 %4879, i64* %3, align 8
  %4880 = inttoptr i64 %4878 to i64*
  %4881 = load i64, i64* %4880, align 8
  store i64 %4881, i64* %RAX.i3176, align 8
  %4882 = add i64 %4817, -56
  %4883 = add i64 %4859, 27
  store i64 %4883, i64* %3, align 8
  %4884 = inttoptr i64 %4882 to i32*
  %4885 = load i32, i32* %4884, align 4
  %4886 = sext i32 %4885 to i64
  store i64 %4886, i64* %RCX.i7756, align 8
  %4887 = shl nsw i64 %4886, 1
  %4888 = add i64 %4887, %4881
  %4889 = add i64 %4859, 33
  store i64 %4889, i64* %3, align 8
  %4890 = inttoptr i64 %4888 to i16*
  store i16 -1, i16* %4890, align 2
  %4891 = load i64, i64* %RBP.i, align 8
  %4892 = add i64 %4891, -16
  %4893 = load i64, i64* %3, align 8
  %4894 = add i64 %4893, 4
  store i64 %4894, i64* %3, align 8
  %4895 = inttoptr i64 %4892 to i64*
  %4896 = load i64, i64* %4895, align 8
  store i64 %4896, i64* %RAX.i3176, align 8
  %4897 = add i64 %4896, 1608
  %4898 = add i64 %4893, 11
  store i64 %4898, i64* %3, align 8
  %4899 = inttoptr i64 %4897 to i64*
  %4900 = load i64, i64* %4899, align 8
  store i64 %4900, i64* %RAX.i3176, align 8
  %4901 = add i64 %4900, 8
  %4902 = add i64 %4893, 15
  store i64 %4902, i64* %3, align 8
  %4903 = inttoptr i64 %4901 to i64*
  %4904 = load i64, i64* %4903, align 8
  store i64 %4904, i64* %RAX.i3176, align 8
  %4905 = add i64 %4891, -52
  %4906 = add i64 %4893, 19
  store i64 %4906, i64* %3, align 8
  %4907 = inttoptr i64 %4905 to i32*
  %4908 = load i32, i32* %4907, align 4
  %4909 = sext i32 %4908 to i64
  store i64 %4909, i64* %RCX.i7756, align 8
  %4910 = shl nsw i64 %4909, 3
  %4911 = add i64 %4910, %4904
  %4912 = add i64 %4893, 23
  store i64 %4912, i64* %3, align 8
  %4913 = inttoptr i64 %4911 to i64*
  %4914 = load i64, i64* %4913, align 8
  store i64 %4914, i64* %RAX.i3176, align 8
  %4915 = add i64 %4891, -56
  %4916 = add i64 %4893, 27
  store i64 %4916, i64* %3, align 8
  %4917 = inttoptr i64 %4915 to i32*
  %4918 = load i32, i32* %4917, align 4
  %4919 = sext i32 %4918 to i64
  store i64 %4919, i64* %RCX.i7756, align 8
  %4920 = shl nsw i64 %4919, 3
  %4921 = add i64 %4920, %4914
  %4922 = add i64 %4893, 35
  store i64 %4922, i64* %3, align 8
  %4923 = inttoptr i64 %4921 to i64*
  store i64 -1, i64* %4923, align 8
  %4924 = load i64, i64* %3, align 8
  %4925 = add i64 %4924, 381
  store i64 %4925, i64* %3, align 8
  br label %block_.L_4567c9

block_.L_456651:                                  ; preds = %block_.L_4565eb
  %4926 = add i64 %4817, -32
  %4927 = add i64 %4859, 4
  store i64 %4927, i64* %3, align 8
  %4928 = inttoptr i64 %4926 to i64*
  %4929 = load i64, i64* %4928, align 8
  store i64 %4929, i64* %RAX.i3176, align 8
  %4930 = add i64 %4929, 6480
  %4931 = add i64 %4859, 11
  store i64 %4931, i64* %3, align 8
  %4932 = inttoptr i64 %4930 to i64*
  %4933 = load i64, i64* %4932, align 8
  store i64 %4933, i64* %RAX.i3176, align 8
  %4934 = add i64 %4933, 8
  %4935 = add i64 %4859, 15
  store i64 %4935, i64* %3, align 8
  %4936 = inttoptr i64 %4934 to i64*
  %4937 = load i64, i64* %4936, align 8
  store i64 %4937, i64* %RAX.i3176, align 8
  %4938 = add i64 %4817, -52
  %4939 = add i64 %4859, 18
  store i64 %4939, i64* %3, align 8
  %4940 = inttoptr i64 %4938 to i32*
  %4941 = load i32, i32* %4940, align 4
  %4942 = and i32 %4941, 2
  %4943 = zext i32 %4942 to i64
  store i64 %4943, i64* %RCX.i7756, align 8
  store i8 0, i8* %19, align 1
  %4944 = tail call i32 @llvm.ctpop.i32(i32 %4942)
  %4945 = trunc i32 %4944 to i8
  %4946 = xor i8 %4945, 1
  store i8 %4946, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit618 = lshr exact i32 %4942, 1
  %4947 = trunc i32 %.lobit618 to i8
  %4948 = xor i8 %4947, 1
  store i8 %4948, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4949 = add i64 %4817, -400
  %4950 = add i64 %4859, 31
  store i64 %4950, i64* %3, align 8
  %4951 = inttoptr i64 %4949 to i64*
  store i64 %4937, i64* %4951, align 8
  %4952 = load i64, i64* %3, align 8
  %4953 = load i8, i8* %34, align 1
  %4954 = icmp ne i8 %4953, 0
  %.v820 = select i1 %4954, i64 23, i64 6
  %4955 = add i64 %4952, %.v820
  %cmpBr_456670 = icmp eq i8 %4953, 1
  %4956 = load i64, i64* %RBP.i, align 8
  %4957 = add i64 %4956, -52
  %4958 = add i64 %4955, 3
  store i64 %4958, i64* %3, align 8
  %4959 = inttoptr i64 %4957 to i32*
  %4960 = load i32, i32* %4959, align 4
  %4961 = zext i32 %4960 to i64
  store i64 %4961, i64* %RAX.i3176, align 8
  %4962 = add i64 %4955, 6
  store i64 %4962, i64* %3, align 8
  br i1 %cmpBr_456670, label %block_.L_456687, label %block_456676

block_456676:                                     ; preds = %block_.L_456651
  %4963 = or i64 %4961, 1
  %4964 = trunc i64 %4963 to i32
  store i64 %4963, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4965 = and i32 %4964, 255
  %4966 = tail call i32 @llvm.ctpop.i32(i32 %4965)
  %4967 = trunc i32 %4966 to i8
  %4968 = and i8 %4967, 1
  %4969 = xor i8 %4968, 1
  store i8 %4969, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %4970 = lshr i32 %4964, 31
  %4971 = trunc i32 %4970 to i8
  store i8 %4971, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4972 = add i64 %4956, -404
  %4973 = add i64 %4955, 12
  store i64 %4973, i64* %3, align 8
  %4974 = inttoptr i64 %4972 to i32*
  store i32 %4964, i32* %4974, align 4
  %4975 = load i64, i64* %3, align 8
  %4976 = add i64 %4975, 17
  store i64 %4976, i64* %3, align 8
  br label %block_.L_456693

block_.L_456687:                                  ; preds = %block_.L_456651
  %4977 = and i64 %4961, 4294967294
  store i64 %4977, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %4978 = and i32 %4960, 254
  %4979 = tail call i32 @llvm.ctpop.i32(i32 %4978)
  %4980 = trunc i32 %4979 to i8
  %4981 = and i8 %4980, 1
  %4982 = xor i8 %4981, 1
  store i8 %4982, i8* %26, align 1
  %4983 = icmp ult i32 %4960, 2
  %4984 = zext i1 %4983 to i8
  store i8 %4984, i8* %34, align 1
  %4985 = lshr i32 %4960, 31
  %4986 = trunc i32 %4985 to i8
  store i8 %4986, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4987 = add i64 %4956, -404
  %4988 = trunc i64 %4977 to i32
  %4989 = add i64 %4955, 12
  store i64 %4989, i64* %3, align 8
  %4990 = inttoptr i64 %4987 to i32*
  store i32 %4988, i32* %4990, align 4
  %.pre456 = load i64, i64* %3, align 8
  br label %block_.L_456693

block_.L_456693:                                  ; preds = %block_.L_456687, %block_456676
  %4991 = phi i64 [ %.pre456, %block_.L_456687 ], [ %4976, %block_456676 ]
  %4992 = load i64, i64* %RBP.i, align 8
  %4993 = add i64 %4992, -404
  %4994 = add i64 %4991, 6
  store i64 %4994, i64* %3, align 8
  %4995 = inttoptr i64 %4993 to i32*
  %4996 = load i32, i32* %4995, align 4
  %4997 = zext i32 %4996 to i64
  store i64 %4997, i64* %RAX.i3176, align 8
  %4998 = sext i32 %4996 to i64
  store i64 %4998, i64* %RCX.i7756, align 8
  %4999 = add i64 %4992, -400
  %5000 = add i64 %4991, 16
  store i64 %5000, i64* %3, align 8
  %5001 = inttoptr i64 %4999 to i64*
  %5002 = load i64, i64* %5001, align 8
  store i64 %5002, i64* %RDX.i7753, align 8
  %5003 = shl nsw i64 %4998, 3
  %5004 = add i64 %5003, %5002
  %5005 = add i64 %4991, 20
  store i64 %5005, i64* %3, align 8
  %5006 = inttoptr i64 %5004 to i64*
  %5007 = load i64, i64* %5006, align 8
  store i64 %5007, i64* %RCX.i7756, align 8
  %5008 = add i64 %4992, -56
  %5009 = add i64 %4991, 23
  store i64 %5009, i64* %3, align 8
  %5010 = inttoptr i64 %5008 to i32*
  %5011 = load i32, i32* %5010, align 4
  %5012 = and i32 %5011, 2
  %5013 = zext i32 %5012 to i64
  store i64 %5013, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5014 = tail call i32 @llvm.ctpop.i32(i32 %5012)
  %5015 = trunc i32 %5014 to i8
  %5016 = xor i8 %5015, 1
  store i8 %5016, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit619 = lshr exact i32 %5012, 1
  %5017 = trunc i32 %.lobit619 to i8
  %5018 = xor i8 %5017, 1
  store i8 %5018, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %5019 = add i64 %4992, -416
  %5020 = add i64 %4991, 36
  store i64 %5020, i64* %3, align 8
  %5021 = inttoptr i64 %5019 to i64*
  store i64 %5007, i64* %5021, align 8
  %5022 = load i64, i64* %3, align 8
  %5023 = load i8, i8* %34, align 1
  %5024 = icmp ne i8 %5023, 0
  %.v821 = select i1 %5024, i64 23, i64 6
  %5025 = add i64 %5022, %.v821
  %cmpBr_4566b7 = icmp eq i8 %5023, 1
  %5026 = load i64, i64* %RBP.i, align 8
  %5027 = add i64 %5026, -56
  %5028 = add i64 %5025, 3
  store i64 %5028, i64* %3, align 8
  %5029 = inttoptr i64 %5027 to i32*
  %5030 = load i32, i32* %5029, align 4
  %5031 = zext i32 %5030 to i64
  store i64 %5031, i64* %RAX.i3176, align 8
  %5032 = add i64 %5025, 6
  store i64 %5032, i64* %3, align 8
  br i1 %cmpBr_4566b7, label %block_.L_4566ce, label %block_4566bd

block_4566bd:                                     ; preds = %block_.L_456693
  %5033 = or i64 %5031, 1
  %5034 = trunc i64 %5033 to i32
  store i64 %5033, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5035 = and i32 %5034, 255
  %5036 = tail call i32 @llvm.ctpop.i32(i32 %5035)
  %5037 = trunc i32 %5036 to i8
  %5038 = and i8 %5037, 1
  %5039 = xor i8 %5038, 1
  store i8 %5039, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %5040 = lshr i32 %5034, 31
  %5041 = trunc i32 %5040 to i8
  store i8 %5041, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5042 = add i64 %5026, -420
  %5043 = add i64 %5025, 12
  store i64 %5043, i64* %3, align 8
  %5044 = inttoptr i64 %5042 to i32*
  store i32 %5034, i32* %5044, align 4
  %5045 = load i64, i64* %3, align 8
  %5046 = add i64 %5045, 17
  store i64 %5046, i64* %3, align 8
  br label %block_.L_4566da

block_.L_4566ce:                                  ; preds = %block_.L_456693
  %5047 = and i64 %5031, 4294967294
  store i64 %5047, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5048 = and i32 %5030, 254
  %5049 = tail call i32 @llvm.ctpop.i32(i32 %5048)
  %5050 = trunc i32 %5049 to i8
  %5051 = and i8 %5050, 1
  %5052 = xor i8 %5051, 1
  store i8 %5052, i8* %26, align 1
  %5053 = icmp ult i32 %5030, 2
  %5054 = zext i1 %5053 to i8
  store i8 %5054, i8* %34, align 1
  %5055 = lshr i32 %5030, 31
  %5056 = trunc i32 %5055 to i8
  store i8 %5056, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5057 = add i64 %5026, -420
  %5058 = trunc i64 %5047 to i32
  %5059 = add i64 %5025, 12
  store i64 %5059, i64* %3, align 8
  %5060 = inttoptr i64 %5057 to i32*
  store i32 %5058, i32* %5060, align 4
  %.pre457 = load i64, i64* %3, align 8
  br label %block_.L_4566da

block_.L_4566da:                                  ; preds = %block_.L_4566ce, %block_4566bd
  %5061 = phi i64 [ %.pre457, %block_.L_4566ce ], [ %5046, %block_4566bd ]
  %5062 = load i64, i64* %RBP.i, align 8
  %5063 = add i64 %5062, -420
  %5064 = add i64 %5061, 6
  store i64 %5064, i64* %3, align 8
  %5065 = inttoptr i64 %5063 to i32*
  %5066 = load i32, i32* %5065, align 4
  %5067 = zext i32 %5066 to i64
  store i64 %5067, i64* %RAX.i3176, align 8
  %5068 = sext i32 %5066 to i64
  store i64 %5068, i64* %RCX.i7756, align 8
  %5069 = add i64 %5062, -416
  %5070 = add i64 %5061, 16
  store i64 %5070, i64* %3, align 8
  %5071 = inttoptr i64 %5069 to i64*
  %5072 = load i64, i64* %5071, align 8
  store i64 %5072, i64* %RDX.i7753, align 8
  %5073 = shl nsw i64 %5068, 1
  %5074 = add i64 %5073, %5072
  %5075 = add i64 %5061, 20
  store i64 %5075, i64* %3, align 8
  %5076 = inttoptr i64 %5074 to i16*
  %5077 = load i16, i16* %5076, align 2
  store i16 %5077, i16* %SI.i6180, align 2
  %5078 = add i64 %5062, -16
  %5079 = add i64 %5061, 24
  store i64 %5079, i64* %3, align 8
  %5080 = inttoptr i64 %5078 to i64*
  %5081 = load i64, i64* %5080, align 8
  store i64 %5081, i64* %RCX.i7756, align 8
  %5082 = add i64 %5081, 1600
  %5083 = add i64 %5061, 31
  store i64 %5083, i64* %3, align 8
  %5084 = inttoptr i64 %5082 to i64*
  %5085 = load i64, i64* %5084, align 8
  store i64 %5085, i64* %RCX.i7756, align 8
  %5086 = add i64 %5085, 8
  %5087 = add i64 %5061, 35
  store i64 %5087, i64* %3, align 8
  %5088 = inttoptr i64 %5086 to i64*
  %5089 = load i64, i64* %5088, align 8
  store i64 %5089, i64* %RCX.i7756, align 8
  %5090 = add i64 %5062, -52
  %5091 = add i64 %5061, 39
  store i64 %5091, i64* %3, align 8
  %5092 = inttoptr i64 %5090 to i32*
  %5093 = load i32, i32* %5092, align 4
  %5094 = sext i32 %5093 to i64
  store i64 %5094, i64* %RDI.i732, align 8
  %5095 = shl nsw i64 %5094, 3
  %5096 = add i64 %5095, %5089
  %5097 = add i64 %5061, 43
  store i64 %5097, i64* %3, align 8
  %5098 = inttoptr i64 %5096 to i64*
  %5099 = load i64, i64* %5098, align 8
  store i64 %5099, i64* %RCX.i7756, align 8
  %5100 = add i64 %5062, -56
  %5101 = add i64 %5061, 47
  store i64 %5101, i64* %3, align 8
  %5102 = inttoptr i64 %5100 to i32*
  %5103 = load i32, i32* %5102, align 4
  %5104 = sext i32 %5103 to i64
  store i64 %5104, i64* %RDI.i732, align 8
  %5105 = shl nsw i64 %5104, 1
  %5106 = add i64 %5105, %5099
  %5107 = add i64 %5061, 51
  store i64 %5107, i64* %3, align 8
  %5108 = inttoptr i64 %5106 to i16*
  store i16 %5077, i16* %5108, align 2
  %5109 = load i64, i64* %RBP.i, align 8
  %5110 = add i64 %5109, -32
  %5111 = load i64, i64* %3, align 8
  %5112 = add i64 %5111, 4
  store i64 %5112, i64* %3, align 8
  %5113 = inttoptr i64 %5110 to i64*
  %5114 = load i64, i64* %5113, align 8
  store i64 %5114, i64* %RCX.i7756, align 8
  %5115 = add i64 %5114, 6496
  %5116 = add i64 %5111, 11
  store i64 %5116, i64* %3, align 8
  %5117 = inttoptr i64 %5115 to i64*
  %5118 = load i64, i64* %5117, align 8
  store i64 %5118, i64* %RCX.i7756, align 8
  %5119 = add i64 %5118, 8
  %5120 = add i64 %5111, 15
  store i64 %5120, i64* %3, align 8
  %5121 = inttoptr i64 %5119 to i64*
  %5122 = load i64, i64* %5121, align 8
  store i64 %5122, i64* %RCX.i7756, align 8
  %5123 = add i64 %5109, -52
  %5124 = add i64 %5111, 18
  store i64 %5124, i64* %3, align 8
  %5125 = inttoptr i64 %5123 to i32*
  %5126 = load i32, i32* %5125, align 4
  %5127 = and i32 %5126, 2
  %5128 = zext i32 %5127 to i64
  store i64 %5128, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5129 = tail call i32 @llvm.ctpop.i32(i32 %5127)
  %5130 = trunc i32 %5129 to i8
  %5131 = xor i8 %5130, 1
  store i8 %5131, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit620 = lshr exact i32 %5127, 1
  %5132 = trunc i32 %.lobit620 to i8
  %5133 = xor i8 %5132, 1
  store i8 %5133, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %5134 = add i64 %5109, -432
  %5135 = add i64 %5111, 31
  store i64 %5135, i64* %3, align 8
  %5136 = inttoptr i64 %5134 to i64*
  store i64 %5122, i64* %5136, align 8
  %5137 = load i64, i64* %3, align 8
  %5138 = load i8, i8* %34, align 1
  %5139 = icmp ne i8 %5138, 0
  %.v822 = select i1 %5139, i64 23, i64 6
  %5140 = add i64 %5137, %.v822
  %cmpBr_45672c = icmp eq i8 %5138, 1
  %5141 = load i64, i64* %RBP.i, align 8
  %5142 = add i64 %5141, -52
  %5143 = add i64 %5140, 3
  store i64 %5143, i64* %3, align 8
  %5144 = inttoptr i64 %5142 to i32*
  %5145 = load i32, i32* %5144, align 4
  %5146 = zext i32 %5145 to i64
  store i64 %5146, i64* %RAX.i3176, align 8
  %5147 = add i64 %5140, 6
  store i64 %5147, i64* %3, align 8
  br i1 %cmpBr_45672c, label %block_.L_456743, label %block_456732

block_456732:                                     ; preds = %block_.L_4566da
  %5148 = or i64 %5146, 1
  %5149 = trunc i64 %5148 to i32
  store i64 %5148, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5150 = and i32 %5149, 255
  %5151 = tail call i32 @llvm.ctpop.i32(i32 %5150)
  %5152 = trunc i32 %5151 to i8
  %5153 = and i8 %5152, 1
  %5154 = xor i8 %5153, 1
  store i8 %5154, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %5155 = lshr i32 %5149, 31
  %5156 = trunc i32 %5155 to i8
  store i8 %5156, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5157 = add i64 %5141, -436
  %5158 = add i64 %5140, 12
  store i64 %5158, i64* %3, align 8
  %5159 = inttoptr i64 %5157 to i32*
  store i32 %5149, i32* %5159, align 4
  %5160 = load i64, i64* %3, align 8
  %5161 = add i64 %5160, 17
  store i64 %5161, i64* %3, align 8
  br label %block_.L_45674f

block_.L_456743:                                  ; preds = %block_.L_4566da
  %5162 = and i64 %5146, 4294967294
  store i64 %5162, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5163 = and i32 %5145, 254
  %5164 = tail call i32 @llvm.ctpop.i32(i32 %5163)
  %5165 = trunc i32 %5164 to i8
  %5166 = and i8 %5165, 1
  %5167 = xor i8 %5166, 1
  store i8 %5167, i8* %26, align 1
  %5168 = icmp ult i32 %5145, 2
  %5169 = zext i1 %5168 to i8
  store i8 %5169, i8* %34, align 1
  %5170 = lshr i32 %5145, 31
  %5171 = trunc i32 %5170 to i8
  store i8 %5171, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5172 = add i64 %5141, -436
  %5173 = trunc i64 %5162 to i32
  %5174 = add i64 %5140, 12
  store i64 %5174, i64* %3, align 8
  %5175 = inttoptr i64 %5172 to i32*
  store i32 %5173, i32* %5175, align 4
  %.pre458 = load i64, i64* %3, align 8
  br label %block_.L_45674f

block_.L_45674f:                                  ; preds = %block_.L_456743, %block_456732
  %5176 = phi i64 [ %.pre458, %block_.L_456743 ], [ %5161, %block_456732 ]
  %5177 = load i64, i64* %RBP.i, align 8
  %5178 = add i64 %5177, -436
  %5179 = add i64 %5176, 6
  store i64 %5179, i64* %3, align 8
  %5180 = inttoptr i64 %5178 to i32*
  %5181 = load i32, i32* %5180, align 4
  %5182 = zext i32 %5181 to i64
  store i64 %5182, i64* %RAX.i3176, align 8
  %5183 = sext i32 %5181 to i64
  store i64 %5183, i64* %RCX.i7756, align 8
  %5184 = add i64 %5177, -432
  %5185 = add i64 %5176, 16
  store i64 %5185, i64* %3, align 8
  %5186 = inttoptr i64 %5184 to i64*
  %5187 = load i64, i64* %5186, align 8
  store i64 %5187, i64* %RDX.i7753, align 8
  %5188 = shl nsw i64 %5183, 3
  %5189 = add i64 %5188, %5187
  %5190 = add i64 %5176, 20
  store i64 %5190, i64* %3, align 8
  %5191 = inttoptr i64 %5189 to i64*
  %5192 = load i64, i64* %5191, align 8
  store i64 %5192, i64* %RCX.i7756, align 8
  %5193 = add i64 %5177, -56
  %5194 = add i64 %5176, 23
  store i64 %5194, i64* %3, align 8
  %5195 = inttoptr i64 %5193 to i32*
  %5196 = load i32, i32* %5195, align 4
  %5197 = and i32 %5196, 2
  %5198 = zext i32 %5197 to i64
  store i64 %5198, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5199 = tail call i32 @llvm.ctpop.i32(i32 %5197)
  %5200 = trunc i32 %5199 to i8
  %5201 = xor i8 %5200, 1
  store i8 %5201, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit621 = lshr exact i32 %5197, 1
  %5202 = trunc i32 %.lobit621 to i8
  %5203 = xor i8 %5202, 1
  store i8 %5203, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %5204 = add i64 %5177, -448
  %5205 = add i64 %5176, 36
  store i64 %5205, i64* %3, align 8
  %5206 = inttoptr i64 %5204 to i64*
  store i64 %5192, i64* %5206, align 8
  %5207 = load i64, i64* %3, align 8
  %5208 = load i8, i8* %34, align 1
  %5209 = icmp ne i8 %5208, 0
  %.v823 = select i1 %5209, i64 23, i64 6
  %5210 = add i64 %5207, %.v823
  %cmpBr_456773 = icmp eq i8 %5208, 1
  %5211 = load i64, i64* %RBP.i, align 8
  %5212 = add i64 %5211, -56
  %5213 = add i64 %5210, 3
  store i64 %5213, i64* %3, align 8
  %5214 = inttoptr i64 %5212 to i32*
  %5215 = load i32, i32* %5214, align 4
  %5216 = zext i32 %5215 to i64
  store i64 %5216, i64* %RAX.i3176, align 8
  %5217 = add i64 %5210, 6
  store i64 %5217, i64* %3, align 8
  br i1 %cmpBr_456773, label %block_.L_45678a, label %block_456779

block_456779:                                     ; preds = %block_.L_45674f
  %5218 = or i64 %5216, 1
  %5219 = trunc i64 %5218 to i32
  store i64 %5218, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5220 = and i32 %5219, 255
  %5221 = tail call i32 @llvm.ctpop.i32(i32 %5220)
  %5222 = trunc i32 %5221 to i8
  %5223 = and i8 %5222, 1
  %5224 = xor i8 %5223, 1
  store i8 %5224, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %5225 = lshr i32 %5219, 31
  %5226 = trunc i32 %5225 to i8
  store i8 %5226, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5227 = add i64 %5211, -452
  %5228 = add i64 %5210, 12
  store i64 %5228, i64* %3, align 8
  %5229 = inttoptr i64 %5227 to i32*
  store i32 %5219, i32* %5229, align 4
  %5230 = load i64, i64* %3, align 8
  %5231 = add i64 %5230, 17
  store i64 %5231, i64* %3, align 8
  br label %block_.L_456796

block_.L_45678a:                                  ; preds = %block_.L_45674f
  %5232 = and i64 %5216, 4294967294
  store i64 %5232, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5233 = and i32 %5215, 254
  %5234 = tail call i32 @llvm.ctpop.i32(i32 %5233)
  %5235 = trunc i32 %5234 to i8
  %5236 = and i8 %5235, 1
  %5237 = xor i8 %5236, 1
  store i8 %5237, i8* %26, align 1
  %5238 = icmp ult i32 %5215, 2
  %5239 = zext i1 %5238 to i8
  store i8 %5239, i8* %34, align 1
  %5240 = lshr i32 %5215, 31
  %5241 = trunc i32 %5240 to i8
  store i8 %5241, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5242 = add i64 %5211, -452
  %5243 = trunc i64 %5232 to i32
  %5244 = add i64 %5210, 12
  store i64 %5244, i64* %3, align 8
  %5245 = inttoptr i64 %5242 to i32*
  store i32 %5243, i32* %5245, align 4
  %.pre459 = load i64, i64* %3, align 8
  br label %block_.L_456796

block_.L_456796:                                  ; preds = %block_.L_45678a, %block_456779
  %5246 = phi i64 [ %.pre459, %block_.L_45678a ], [ %5231, %block_456779 ]
  %5247 = load i64, i64* %RBP.i, align 8
  %5248 = add i64 %5247, -452
  %5249 = add i64 %5246, 6
  store i64 %5249, i64* %3, align 8
  %5250 = inttoptr i64 %5248 to i32*
  %5251 = load i32, i32* %5250, align 4
  %5252 = zext i32 %5251 to i64
  store i64 %5252, i64* %RAX.i3176, align 8
  %5253 = sext i32 %5251 to i64
  store i64 %5253, i64* %RCX.i7756, align 8
  %5254 = add i64 %5247, -448
  %5255 = add i64 %5246, 16
  store i64 %5255, i64* %3, align 8
  %5256 = inttoptr i64 %5254 to i64*
  %5257 = load i64, i64* %5256, align 8
  store i64 %5257, i64* %RDX.i7753, align 8
  %5258 = shl nsw i64 %5253, 3
  %5259 = add i64 %5258, %5257
  %5260 = add i64 %5246, 20
  store i64 %5260, i64* %3, align 8
  %5261 = inttoptr i64 %5259 to i64*
  %5262 = load i64, i64* %5261, align 8
  store i64 %5262, i64* %RCX.i7756, align 8
  %5263 = add i64 %5247, -16
  %5264 = add i64 %5246, 24
  store i64 %5264, i64* %3, align 8
  %5265 = inttoptr i64 %5263 to i64*
  %5266 = load i64, i64* %5265, align 8
  store i64 %5266, i64* %RSI.i766, align 8
  %5267 = add i64 %5266, 1608
  %5268 = add i64 %5246, 31
  store i64 %5268, i64* %3, align 8
  %5269 = inttoptr i64 %5267 to i64*
  %5270 = load i64, i64* %5269, align 8
  store i64 %5270, i64* %RSI.i766, align 8
  %5271 = add i64 %5270, 8
  %5272 = add i64 %5246, 35
  store i64 %5272, i64* %3, align 8
  %5273 = inttoptr i64 %5271 to i64*
  %5274 = load i64, i64* %5273, align 8
  store i64 %5274, i64* %RSI.i766, align 8
  %5275 = add i64 %5247, -52
  %5276 = add i64 %5246, 39
  store i64 %5276, i64* %3, align 8
  %5277 = inttoptr i64 %5275 to i32*
  %5278 = load i32, i32* %5277, align 4
  %5279 = sext i32 %5278 to i64
  store i64 %5279, i64* %RDI.i732, align 8
  %5280 = shl nsw i64 %5279, 3
  %5281 = add i64 %5280, %5274
  %5282 = add i64 %5246, 43
  store i64 %5282, i64* %3, align 8
  %5283 = inttoptr i64 %5281 to i64*
  %5284 = load i64, i64* %5283, align 8
  store i64 %5284, i64* %RSI.i766, align 8
  %5285 = add i64 %5247, -56
  %5286 = add i64 %5246, 47
  store i64 %5286, i64* %3, align 8
  %5287 = inttoptr i64 %5285 to i32*
  %5288 = load i32, i32* %5287, align 4
  %5289 = sext i32 %5288 to i64
  store i64 %5289, i64* %RDI.i732, align 8
  %5290 = shl nsw i64 %5289, 3
  %5291 = add i64 %5290, %5284
  %5292 = add i64 %5246, 51
  store i64 %5292, i64* %3, align 8
  %5293 = inttoptr i64 %5291 to i64*
  store i64 %5262, i64* %5293, align 8
  %.pre460 = load i64, i64* %3, align 8
  br label %block_.L_4567c9

block_.L_4567c9:                                  ; preds = %block_.L_456796, %block_456608
  %5294 = phi i64 [ %.pre460, %block_.L_456796 ], [ %4925, %block_456608 ]
  %5295 = load i64, i64* %RBP.i, align 8
  %5296 = add i64 %5295, -32
  %5297 = add i64 %5294, 4
  store i64 %5297, i64* %3, align 8
  %5298 = inttoptr i64 %5296 to i64*
  %5299 = load i64, i64* %5298, align 8
  store i64 %5299, i64* %RAX.i3176, align 8
  %5300 = add i64 %5299, 6376
  %5301 = add i64 %5294, 10
  store i64 %5301, i64* %3, align 8
  %5302 = inttoptr i64 %5300 to i32*
  %5303 = load i32, i32* %5302, align 4
  %5304 = zext i32 %5303 to i64
  store i64 %5304, i64* %RCX.i7756, align 8
  %5305 = add i64 %5295, -16
  %5306 = add i64 %5294, 14
  store i64 %5306, i64* %3, align 8
  %5307 = inttoptr i64 %5305 to i64*
  %5308 = load i64, i64* %5307, align 8
  %5309 = add i64 %5308, 4864
  %5310 = add i64 %5294, 20
  store i64 %5310, i64* %3, align 8
  %5311 = inttoptr i64 %5309 to i32*
  store i32 %5303, i32* %5311, align 4
  %5312 = load i64, i64* %3, align 8
  %5313 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5313, i64* %RAX.i3176, align 8
  %5314 = add i64 %5313, 71996
  %5315 = add i64 %5312, 15
  store i64 %5315, i64* %3, align 8
  %5316 = inttoptr i64 %5314 to i32*
  %5317 = load i32, i32* %5316, align 4
  %5318 = add i32 %5317, -1
  %5319 = icmp eq i32 %5317, 0
  %5320 = zext i1 %5319 to i8
  store i8 %5320, i8* %19, align 1
  %5321 = and i32 %5318, 255
  %5322 = tail call i32 @llvm.ctpop.i32(i32 %5321)
  %5323 = trunc i32 %5322 to i8
  %5324 = and i8 %5323, 1
  %5325 = xor i8 %5324, 1
  store i8 %5325, i8* %26, align 1
  %5326 = xor i32 %5318, %5317
  %5327 = lshr i32 %5326, 4
  %5328 = trunc i32 %5327 to i8
  %5329 = and i8 %5328, 1
  store i8 %5329, i8* %31, align 1
  %5330 = icmp eq i32 %5318, 0
  %5331 = zext i1 %5330 to i8
  store i8 %5331, i8* %34, align 1
  %5332 = lshr i32 %5318, 31
  %5333 = trunc i32 %5332 to i8
  store i8 %5333, i8* %37, align 1
  %5334 = lshr i32 %5317, 31
  %5335 = xor i32 %5332, %5334
  %5336 = add nuw nsw i32 %5335, %5334
  %5337 = icmp eq i32 %5336, 2
  %5338 = zext i1 %5337 to i8
  store i8 %5338, i8* %43, align 1
  %.v721 = select i1 %5330, i64 21, i64 455
  %5339 = add i64 %5312, %.v721
  store i64 %5339, i64* %3, align 8
  br i1 %5330, label %block_4567f2, label %block_.L_4569a4

block_4567f2:                                     ; preds = %block_.L_4567c9
  %5340 = load i64, i64* %RBP.i, align 8
  %5341 = add i64 %5340, -16
  %5342 = add i64 %5339, 4
  store i64 %5342, i64* %3, align 8
  %5343 = inttoptr i64 %5341 to i64*
  %5344 = load i64, i64* %5343, align 8
  store i64 %5344, i64* %RAX.i3176, align 8
  %5345 = add i64 %5344, 4864
  %5346 = add i64 %5339, 11
  store i64 %5346, i64* %3, align 8
  %5347 = inttoptr i64 %5345 to i32*
  %5348 = load i32, i32* %5347, align 4
  store i8 0, i8* %19, align 1
  %5349 = and i32 %5348, 255
  %5350 = tail call i32 @llvm.ctpop.i32(i32 %5349)
  %5351 = trunc i32 %5350 to i8
  %5352 = and i8 %5351, 1
  %5353 = xor i8 %5352, 1
  store i8 %5353, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5354 = icmp eq i32 %5348, 0
  %5355 = zext i1 %5354 to i8
  store i8 %5355, i8* %34, align 1
  %5356 = lshr i32 %5348, 31
  %5357 = trunc i32 %5356 to i8
  store i8 %5357, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v722 = select i1 %5354, i64 17, i64 165
  %5358 = add i64 %5339, %.v722
  store i64 %5358, i64* %3, align 8
  br i1 %5354, label %block_456803, label %block_.L_456897

block_456803:                                     ; preds = %block_4567f2
  %5359 = add i64 %5358, 4
  store i64 %5359, i64* %3, align 8
  %5360 = load i64, i64* %5343, align 8
  store i64 %5360, i64* %RAX.i3176, align 8
  %5361 = add i64 %5360, 1600
  %5362 = add i64 %5358, 11
  store i64 %5362, i64* %3, align 8
  %5363 = inttoptr i64 %5361 to i64*
  %5364 = load i64, i64* %5363, align 8
  store i64 %5364, i64* %RAX.i3176, align 8
  %5365 = add i64 %5358, 14
  store i64 %5365, i64* %3, align 8
  %5366 = inttoptr i64 %5364 to i64*
  %5367 = load i64, i64* %5366, align 8
  store i64 %5367, i64* %RAX.i3176, align 8
  %5368 = add i64 %5340, -52
  %5369 = add i64 %5358, 18
  store i64 %5369, i64* %3, align 8
  %5370 = inttoptr i64 %5368 to i32*
  %5371 = load i32, i32* %5370, align 4
  %5372 = sext i32 %5371 to i64
  store i64 %5372, i64* %RCX.i7756, align 8
  %5373 = shl nsw i64 %5372, 3
  %5374 = add i64 %5373, %5367
  %5375 = add i64 %5358, 22
  store i64 %5375, i64* %3, align 8
  %5376 = inttoptr i64 %5374 to i64*
  %5377 = load i64, i64* %5376, align 8
  store i64 %5377, i64* %RAX.i3176, align 8
  %5378 = add i64 %5340, -56
  %5379 = add i64 %5358, 26
  store i64 %5379, i64* %3, align 8
  %5380 = inttoptr i64 %5378 to i32*
  %5381 = load i32, i32* %5380, align 4
  %5382 = sext i32 %5381 to i64
  store i64 %5382, i64* %RCX.i7756, align 8
  %5383 = shl nsw i64 %5382, 1
  %5384 = add i64 %5383, %5377
  %5385 = add i64 %5358, 30
  store i64 %5385, i64* %3, align 8
  %5386 = inttoptr i64 %5384 to i16*
  %5387 = load i16, i16* %5386, align 2
  %5388 = sext i16 %5387 to i64
  %5389 = and i64 %5388, 4294967295
  store i64 %5389, i64* %RDX.i7753, align 8
  %5390 = sext i16 %5387 to i32
  store i8 0, i8* %19, align 1
  %5391 = and i32 %5390, 255
  %5392 = tail call i32 @llvm.ctpop.i32(i32 %5391)
  %5393 = trunc i32 %5392 to i8
  %5394 = and i8 %5393, 1
  %5395 = xor i8 %5394, 1
  store i8 %5395, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5396 = icmp eq i16 %5387, 0
  %5397 = zext i1 %5396 to i8
  store i8 %5397, i8* %34, align 1
  %5398 = lshr i32 %5390, 31
  %5399 = trunc i32 %5398 to i8
  store i8 %5399, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v723 = select i1 %5396, i64 39, i64 148
  %5400 = add i64 %5358, %.v723
  store i64 %5400, i64* %3, align 8
  br i1 %5396, label %block_45682a, label %block_.L_456897

block_45682a:                                     ; preds = %block_456803
  %5401 = add i64 %5400, 4
  store i64 %5401, i64* %3, align 8
  %5402 = load i64, i64* %5343, align 8
  store i64 %5402, i64* %RAX.i3176, align 8
  %5403 = add i64 %5402, 1616
  %5404 = add i64 %5400, 11
  store i64 %5404, i64* %3, align 8
  %5405 = inttoptr i64 %5403 to i64*
  %5406 = load i64, i64* %5405, align 8
  store i64 %5406, i64* %RAX.i3176, align 8
  %5407 = add i64 %5400, 14
  store i64 %5407, i64* %3, align 8
  %5408 = inttoptr i64 %5406 to i64*
  %5409 = load i64, i64* %5408, align 8
  store i64 %5409, i64* %RAX.i3176, align 8
  %5410 = add i64 %5400, 18
  store i64 %5410, i64* %3, align 8
  %5411 = load i32, i32* %5370, align 4
  %5412 = sext i32 %5411 to i64
  store i64 %5412, i64* %RCX.i7756, align 8
  %5413 = shl nsw i64 %5412, 3
  %5414 = add i64 %5413, %5409
  %5415 = add i64 %5400, 22
  store i64 %5415, i64* %3, align 8
  %5416 = inttoptr i64 %5414 to i64*
  %5417 = load i64, i64* %5416, align 8
  store i64 %5417, i64* %RAX.i3176, align 8
  %5418 = add i64 %5400, 26
  store i64 %5418, i64* %3, align 8
  %5419 = load i32, i32* %5380, align 4
  %5420 = sext i32 %5419 to i64
  store i64 %5420, i64* %RCX.i7756, align 8
  %5421 = shl nsw i64 %5420, 3
  %5422 = add i64 %5421, %5417
  %5423 = add i64 %5400, 30
  store i64 %5423, i64* %3, align 8
  %5424 = inttoptr i64 %5422 to i64*
  %5425 = load i64, i64* %5424, align 8
  store i64 %5425, i64* %RAX.i3176, align 8
  %5426 = add i64 %5400, 33
  store i64 %5426, i64* %3, align 8
  %5427 = inttoptr i64 %5425 to i16*
  %5428 = load i16, i16* %5427, align 2
  %5429 = sext i16 %5428 to i64
  %5430 = and i64 %5429, 4294967295
  store i64 %5430, i64* %RDI.i732, align 8
  %5431 = add i64 %5400, -350250
  %5432 = add i64 %5400, 38
  %5433 = load i64, i64* %6, align 8
  %5434 = add i64 %5433, -8
  %5435 = inttoptr i64 %5434 to i64*
  store i64 %5432, i64* %5435, align 8
  store i64 %5434, i64* %6, align 8
  store i64 %5431, i64* %3, align 8
  %5436 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %3264)
  %5437 = load i64, i64* %RAX.i3176, align 8
  %5438 = load i64, i64* %3, align 8
  %5439 = shl i64 %5437, 32
  %5440 = ashr i64 %5439, 33
  %5441 = and i64 %5440, 4294967295
  store i64 %5441, i64* %RAX.i3176, align 8
  %5442 = trunc i64 %5440 to i32
  store i8 0, i8* %19, align 1
  %5443 = and i32 %5442, 255
  %5444 = tail call i32 @llvm.ctpop.i32(i32 %5443)
  %5445 = trunc i32 %5444 to i8
  %5446 = and i8 %5445, 1
  %5447 = xor i8 %5446, 1
  store i8 %5447, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5448 = icmp eq i32 %5442, 0
  %5449 = zext i1 %5448 to i8
  store i8 %5449, i8* %34, align 1
  %5450 = lshr i64 %5440, 31
  %5451 = trunc i64 %5450 to i8
  %5452 = and i8 %5451, 1
  store i8 %5452, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v724 = select i1 %5448, i64 11, i64 70
  %5453 = add i64 %5438, %.v724
  store i64 %5453, i64* %3, align 8
  br i1 %5448, label %block_45685c, label %block_.L_456897

block_45685c:                                     ; preds = %block_45682a
  %5454 = load i64, i64* %RBP.i, align 8
  %5455 = add i64 %5454, -16
  %5456 = add i64 %5453, 4
  store i64 %5456, i64* %3, align 8
  %5457 = inttoptr i64 %5455 to i64*
  %5458 = load i64, i64* %5457, align 8
  store i64 %5458, i64* %RAX.i3176, align 8
  %5459 = add i64 %5458, 1616
  %5460 = add i64 %5453, 11
  store i64 %5460, i64* %3, align 8
  %5461 = inttoptr i64 %5459 to i64*
  %5462 = load i64, i64* %5461, align 8
  store i64 %5462, i64* %RAX.i3176, align 8
  %5463 = add i64 %5453, 14
  store i64 %5463, i64* %3, align 8
  %5464 = inttoptr i64 %5462 to i64*
  %5465 = load i64, i64* %5464, align 8
  store i64 %5465, i64* %RAX.i3176, align 8
  %5466 = add i64 %5454, -52
  %5467 = add i64 %5453, 18
  store i64 %5467, i64* %3, align 8
  %5468 = inttoptr i64 %5466 to i32*
  %5469 = load i32, i32* %5468, align 4
  %5470 = sext i32 %5469 to i64
  store i64 %5470, i64* %RCX.i7756, align 8
  %5471 = shl nsw i64 %5470, 3
  %5472 = add i64 %5471, %5465
  %5473 = add i64 %5453, 22
  store i64 %5473, i64* %3, align 8
  %5474 = inttoptr i64 %5472 to i64*
  %5475 = load i64, i64* %5474, align 8
  store i64 %5475, i64* %RAX.i3176, align 8
  %5476 = add i64 %5454, -56
  %5477 = add i64 %5453, 26
  store i64 %5477, i64* %3, align 8
  %5478 = inttoptr i64 %5476 to i32*
  %5479 = load i32, i32* %5478, align 4
  %5480 = sext i32 %5479 to i64
  store i64 %5480, i64* %RCX.i7756, align 8
  %5481 = shl nsw i64 %5480, 3
  %5482 = add i64 %5481, %5475
  %5483 = add i64 %5453, 30
  store i64 %5483, i64* %3, align 8
  %5484 = inttoptr i64 %5482 to i64*
  %5485 = load i64, i64* %5484, align 8
  store i64 %5485, i64* %RAX.i3176, align 8
  %5486 = add i64 %5485, 2
  %5487 = add i64 %5453, 34
  store i64 %5487, i64* %3, align 8
  %5488 = inttoptr i64 %5486 to i16*
  %5489 = load i16, i16* %5488, align 2
  %5490 = sext i16 %5489 to i64
  %5491 = and i64 %5490, 4294967295
  store i64 %5491, i64* %RDI.i732, align 8
  %5492 = add i64 %5453, -350300
  %5493 = add i64 %5453, 39
  %5494 = load i64, i64* %6, align 8
  %5495 = add i64 %5494, -8
  %5496 = inttoptr i64 %5495 to i64*
  store i64 %5493, i64* %5496, align 8
  store i64 %5495, i64* %6, align 8
  store i64 %5492, i64* %3, align 8
  %5497 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %5436)
  %5498 = load i64, i64* %3, align 8
  store i8 1, i8* %DL.i4045, align 1
  %5499 = load i64, i64* %RAX.i3176, align 8
  %5500 = shl i64 %5499, 32
  %5501 = ashr i64 %5500, 33
  %5502 = and i64 %5501, 4294967295
  store i64 %5502, i64* %RAX.i3176, align 8
  %5503 = trunc i64 %5501 to i32
  store i8 0, i8* %19, align 1
  %5504 = and i32 %5503, 255
  %5505 = tail call i32 @llvm.ctpop.i32(i32 %5504)
  %5506 = trunc i32 %5505 to i8
  %5507 = and i8 %5506, 1
  %5508 = xor i8 %5507, 1
  store i8 %5508, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5509 = icmp eq i32 %5503, 0
  %5510 = zext i1 %5509 to i8
  store i8 %5510, i8* %34, align 1
  %5511 = lshr i64 %5501, 31
  %5512 = trunc i64 %5511 to i8
  %5513 = and i8 %5512, 1
  store i8 %5513, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %5514 = load i64, i64* %RBP.i, align 8
  %5515 = add i64 %5514, -453
  %5516 = add i64 %5498, 13
  store i64 %5516, i64* %3, align 8
  %5517 = inttoptr i64 %5515 to i8*
  store i8 1, i8* %5517, align 1
  %5518 = load i64, i64* %3, align 8
  %5519 = load i8, i8* %34, align 1
  %5520 = icmp ne i8 %5519, 0
  %.v824 = select i1 %5520, i64 234, i64 6
  %5521 = add i64 %5518, %.v824
  store i64 %5521, i64* %3, align 8
  %cmpBr_456891 = icmp eq i8 %5519, 1
  br i1 %cmpBr_456891, label %block_.L_45697b, label %block_45685c.block_.L_456897_crit_edge

block_45685c.block_.L_456897_crit_edge:           ; preds = %block_45685c
  %.pre461 = load i64, i64* %RAX.i3176, align 8
  br label %block_.L_456897

block_.L_456897:                                  ; preds = %block_45682a, %block_456803, %block_4567f2, %block_45685c.block_.L_456897_crit_edge
  %5522 = phi i64 [ %5358, %block_4567f2 ], [ %5400, %block_456803 ], [ %5453, %block_45682a ], [ %5521, %block_45685c.block_.L_456897_crit_edge ]
  %5523 = phi i64 [ %5344, %block_4567f2 ], [ %5377, %block_456803 ], [ %5440, %block_45682a ], [ %.pre461, %block_45685c.block_.L_456897_crit_edge ]
  %5524 = phi i64 [ %5344, %block_4567f2 ], [ %5377, %block_456803 ], [ %5441, %block_45682a ], [ %.pre461, %block_45685c.block_.L_456897_crit_edge ]
  %MEMORY.36 = phi %struct.Memory* [ %3264, %block_4567f2 ], [ %3264, %block_456803 ], [ %5436, %block_45682a ], [ %5497, %block_45685c.block_.L_456897_crit_edge ]
  %5525 = and i64 %5523, 4294967295
  %5526 = xor i64 %5525, %5524
  %5527 = trunc i64 %5526 to i32
  %5528 = and i64 %5526, 4294967295
  store i64 %5528, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5529 = and i32 %5527, 255
  %5530 = tail call i32 @llvm.ctpop.i32(i32 %5529)
  %5531 = trunc i32 %5530 to i8
  %5532 = and i8 %5531, 1
  %5533 = xor i8 %5532, 1
  store i8 %5533, i8* %26, align 1
  %5534 = icmp eq i32 %5527, 0
  %5535 = zext i1 %5534 to i8
  store i8 %5535, i8* %34, align 1
  %5536 = lshr i32 %5527, 31
  %5537 = trunc i32 %5536 to i8
  store i8 %5537, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5538 = trunc i64 %5526 to i8
  store i8 %5538, i8* %CL.i4136, align 1
  %5539 = load i64, i64* %RBP.i, align 8
  %5540 = add i64 %5539, -16
  %5541 = add i64 %5522, 8
  store i64 %5541, i64* %3, align 8
  %5542 = inttoptr i64 %5540 to i64*
  %5543 = load i64, i64* %5542, align 8
  store i64 %5543, i64* %RDX.i7753, align 8
  %5544 = add i64 %5543, 1600
  %5545 = add i64 %5522, 15
  store i64 %5545, i64* %3, align 8
  %5546 = inttoptr i64 %5544 to i64*
  %5547 = load i64, i64* %5546, align 8
  store i64 %5547, i64* %RDX.i7753, align 8
  %5548 = add i64 %5522, 18
  store i64 %5548, i64* %3, align 8
  %5549 = inttoptr i64 %5547 to i64*
  %5550 = load i64, i64* %5549, align 8
  store i64 %5550, i64* %RDX.i7753, align 8
  %5551 = add i64 %5539, -52
  %5552 = add i64 %5522, 22
  store i64 %5552, i64* %3, align 8
  %5553 = inttoptr i64 %5551 to i32*
  %5554 = load i32, i32* %5553, align 4
  %5555 = sext i32 %5554 to i64
  store i64 %5555, i64* %RSI.i766, align 8
  %5556 = shl nsw i64 %5555, 3
  %5557 = add i64 %5556, %5550
  %5558 = add i64 %5522, 26
  store i64 %5558, i64* %3, align 8
  %5559 = inttoptr i64 %5557 to i64*
  %5560 = load i64, i64* %5559, align 8
  store i64 %5560, i64* %RDX.i7753, align 8
  %5561 = add i64 %5539, -56
  %5562 = add i64 %5522, 30
  store i64 %5562, i64* %3, align 8
  %5563 = inttoptr i64 %5561 to i32*
  %5564 = load i32, i32* %5563, align 4
  %5565 = sext i32 %5564 to i64
  store i64 %5565, i64* %RSI.i766, align 8
  %5566 = shl nsw i64 %5565, 1
  %5567 = add i64 %5566, %5560
  %5568 = add i64 %5522, 34
  store i64 %5568, i64* %3, align 8
  %5569 = inttoptr i64 %5567 to i16*
  %5570 = load i16, i16* %5569, align 2
  %5571 = sext i16 %5570 to i64
  %5572 = and i64 %5571, 4294967295
  store i64 %5572, i64* %RAX.i3176, align 8
  %5573 = sext i16 %5570 to i32
  %5574 = add nsw i32 %5573, 1
  %5575 = icmp ne i16 %5570, -1
  %5576 = zext i1 %5575 to i8
  store i8 %5576, i8* %19, align 1
  %5577 = and i32 %5574, 255
  %5578 = tail call i32 @llvm.ctpop.i32(i32 %5577)
  %5579 = trunc i32 %5578 to i8
  %5580 = and i8 %5579, 1
  %5581 = xor i8 %5580, 1
  store i8 %5581, i8* %26, align 1
  %5582 = xor i32 %5573, 16
  %5583 = xor i32 %5582, %5574
  %5584 = lshr i32 %5583, 4
  %5585 = trunc i32 %5584 to i8
  %5586 = and i8 %5585, 1
  store i8 %5586, i8* %31, align 1
  %5587 = icmp eq i32 %5574, 0
  %5588 = zext i1 %5587 to i8
  store i8 %5588, i8* %34, align 1
  %5589 = lshr i32 %5574, 31
  %5590 = trunc i32 %5589 to i8
  store i8 %5590, i8* %37, align 1
  %5591 = lshr i32 %5573, 31
  %5592 = xor i32 %5591, 1
  %5593 = xor i32 %5589, %5591
  %5594 = add nuw nsw i32 %5593, %5592
  %5595 = icmp eq i32 %5594, 2
  %5596 = zext i1 %5595 to i8
  store i8 %5596, i8* %43, align 1
  %5597 = add i64 %5539, -454
  %5598 = add i64 %5522, 43
  store i64 %5598, i64* %3, align 8
  %5599 = inttoptr i64 %5597 to i8*
  store i8 %5538, i8* %5599, align 1
  %5600 = load i64, i64* %3, align 8
  %5601 = add i64 %5600, 173
  %5602 = add i64 %5600, 6
  %5603 = load i8, i8* %34, align 1
  %5604 = icmp eq i8 %5603, 0
  %5605 = select i1 %5604, i64 %5601, i64 %5602
  store i64 %5605, i64* %3, align 8
  br i1 %5604, label %block_.L_45696f, label %block_4568c8

block_4568c8:                                     ; preds = %block_.L_456897
  store i64 0, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %CL.i4136, align 1
  %5606 = load i64, i64* %RBP.i, align 8
  %5607 = add i64 %5606, -16
  %5608 = add i64 %5605, 8
  store i64 %5608, i64* %3, align 8
  %5609 = inttoptr i64 %5607 to i64*
  %5610 = load i64, i64* %5609, align 8
  store i64 %5610, i64* %RDX.i7753, align 8
  %5611 = add i64 %5610, 1600
  %5612 = add i64 %5605, 15
  store i64 %5612, i64* %3, align 8
  %5613 = inttoptr i64 %5611 to i64*
  %5614 = load i64, i64* %5613, align 8
  store i64 %5614, i64* %RDX.i7753, align 8
  %5615 = add i64 %5614, 8
  %5616 = add i64 %5605, 19
  store i64 %5616, i64* %3, align 8
  %5617 = inttoptr i64 %5615 to i64*
  %5618 = load i64, i64* %5617, align 8
  store i64 %5618, i64* %RDX.i7753, align 8
  %5619 = add i64 %5606, -52
  %5620 = add i64 %5605, 23
  store i64 %5620, i64* %3, align 8
  %5621 = inttoptr i64 %5619 to i32*
  %5622 = load i32, i32* %5621, align 4
  %5623 = sext i32 %5622 to i64
  store i64 %5623, i64* %RSI.i766, align 8
  %5624 = shl nsw i64 %5623, 3
  %5625 = add i64 %5624, %5618
  %5626 = add i64 %5605, 27
  store i64 %5626, i64* %3, align 8
  %5627 = inttoptr i64 %5625 to i64*
  %5628 = load i64, i64* %5627, align 8
  store i64 %5628, i64* %RDX.i7753, align 8
  %5629 = add i64 %5606, -56
  %5630 = add i64 %5605, 31
  store i64 %5630, i64* %3, align 8
  %5631 = inttoptr i64 %5629 to i32*
  %5632 = load i32, i32* %5631, align 4
  %5633 = sext i32 %5632 to i64
  store i64 %5633, i64* %RSI.i766, align 8
  %5634 = shl nsw i64 %5633, 1
  %5635 = add i64 %5634, %5628
  %5636 = add i64 %5605, 35
  store i64 %5636, i64* %3, align 8
  %5637 = inttoptr i64 %5635 to i16*
  %5638 = load i16, i16* %5637, align 2
  %5639 = sext i16 %5638 to i64
  %5640 = and i64 %5639, 4294967295
  store i64 %5640, i64* %RAX.i3176, align 8
  %5641 = sext i16 %5638 to i32
  store i8 0, i8* %19, align 1
  %5642 = and i32 %5641, 255
  %5643 = tail call i32 @llvm.ctpop.i32(i32 %5642)
  %5644 = trunc i32 %5643 to i8
  %5645 = and i8 %5644, 1
  %5646 = xor i8 %5645, 1
  store i8 %5646, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5647 = icmp eq i16 %5638, 0
  %5648 = zext i1 %5647 to i8
  store i8 %5648, i8* %34, align 1
  %5649 = lshr i32 %5641, 31
  %5650 = trunc i32 %5649 to i8
  store i8 %5650, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %5651 = add i64 %5606, -454
  %5652 = add i64 %5605, 44
  store i64 %5652, i64* %3, align 8
  %5653 = inttoptr i64 %5651 to i8*
  store i8 0, i8* %5653, align 1
  %5654 = load i64, i64* %3, align 8
  %5655 = add i64 %5654, 123
  %5656 = add i64 %5654, 6
  %5657 = load i8, i8* %34, align 1
  %5658 = icmp eq i8 %5657, 0
  %5659 = select i1 %5658, i64 %5655, i64 %5656
  store i64 %5659, i64* %3, align 8
  br i1 %5658, label %block_.L_45696f, label %block_4568fa

block_4568fa:                                     ; preds = %block_4568c8
  %5660 = load i64, i64* %RBP.i, align 8
  %5661 = add i64 %5660, -16
  %5662 = add i64 %5659, 4
  store i64 %5662, i64* %3, align 8
  %5663 = inttoptr i64 %5661 to i64*
  %5664 = load i64, i64* %5663, align 8
  store i64 %5664, i64* %RAX.i3176, align 8
  %5665 = add i64 %5664, 1616
  %5666 = add i64 %5659, 11
  store i64 %5666, i64* %3, align 8
  %5667 = inttoptr i64 %5665 to i64*
  %5668 = load i64, i64* %5667, align 8
  store i64 %5668, i64* %RAX.i3176, align 8
  %5669 = add i64 %5668, 8
  %5670 = add i64 %5659, 15
  store i64 %5670, i64* %3, align 8
  %5671 = inttoptr i64 %5669 to i64*
  %5672 = load i64, i64* %5671, align 8
  store i64 %5672, i64* %RAX.i3176, align 8
  %5673 = add i64 %5660, -52
  %5674 = add i64 %5659, 19
  store i64 %5674, i64* %3, align 8
  %5675 = inttoptr i64 %5673 to i32*
  %5676 = load i32, i32* %5675, align 4
  %5677 = sext i32 %5676 to i64
  store i64 %5677, i64* %RCX.i7756, align 8
  %5678 = shl nsw i64 %5677, 3
  %5679 = add i64 %5678, %5672
  %5680 = add i64 %5659, 23
  store i64 %5680, i64* %3, align 8
  %5681 = inttoptr i64 %5679 to i64*
  %5682 = load i64, i64* %5681, align 8
  store i64 %5682, i64* %RAX.i3176, align 8
  %5683 = add i64 %5660, -56
  %5684 = add i64 %5659, 27
  store i64 %5684, i64* %3, align 8
  %5685 = inttoptr i64 %5683 to i32*
  %5686 = load i32, i32* %5685, align 4
  %5687 = sext i32 %5686 to i64
  store i64 %5687, i64* %RCX.i7756, align 8
  %5688 = shl nsw i64 %5687, 3
  %5689 = add i64 %5688, %5682
  %5690 = add i64 %5659, 31
  store i64 %5690, i64* %3, align 8
  %5691 = inttoptr i64 %5689 to i64*
  %5692 = load i64, i64* %5691, align 8
  store i64 %5692, i64* %RAX.i3176, align 8
  %5693 = add i64 %5659, 34
  store i64 %5693, i64* %3, align 8
  %5694 = inttoptr i64 %5692 to i16*
  %5695 = load i16, i16* %5694, align 2
  %5696 = sext i16 %5695 to i64
  %5697 = and i64 %5696, 4294967295
  store i64 %5697, i64* %RDI.i732, align 8
  %5698 = add i64 %5659, -350458
  %5699 = add i64 %5659, 39
  %5700 = load i64, i64* %6, align 8
  %5701 = add i64 %5700, -8
  %5702 = inttoptr i64 %5701 to i64*
  store i64 %5699, i64* %5702, align 8
  store i64 %5701, i64* %6, align 8
  store i64 %5698, i64* %3, align 8
  %5703 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.36)
  %5704 = load i64, i64* %3, align 8
  store i64 0, i64* %RDI.i732, align 8
  store i8 0, i8* %DL.i4045, align 1
  %5705 = load i64, i64* %RAX.i3176, align 8
  %5706 = shl i64 %5705, 32
  %5707 = ashr i64 %5706, 33
  %5708 = and i64 %5707, 4294967295
  store i64 %5708, i64* %RAX.i3176, align 8
  %5709 = trunc i64 %5707 to i32
  store i8 0, i8* %19, align 1
  %5710 = and i32 %5709, 255
  %5711 = tail call i32 @llvm.ctpop.i32(i32 %5710)
  %5712 = trunc i32 %5711 to i8
  %5713 = and i8 %5712, 1
  %5714 = xor i8 %5713, 1
  store i8 %5714, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5715 = icmp eq i32 %5709, 0
  %5716 = zext i1 %5715 to i8
  store i8 %5716, i8* %34, align 1
  %5717 = lshr i64 %5707, 31
  %5718 = trunc i64 %5717 to i8
  %5719 = and i8 %5718, 1
  store i8 %5719, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %5720 = load i64, i64* %RBP.i, align 8
  %5721 = add i64 %5720, -454
  %5722 = add i64 %5704, 16
  store i64 %5722, i64* %3, align 8
  %5723 = inttoptr i64 %5721 to i8*
  store i8 0, i8* %5723, align 1
  %5724 = load i64, i64* %3, align 8
  %5725 = add i64 %5724, 61
  %5726 = add i64 %5724, 6
  %5727 = load i8, i8* %34, align 1
  %5728 = icmp eq i8 %5727, 0
  %5729 = select i1 %5728, i64 %5725, i64 %5726
  store i64 %5729, i64* %3, align 8
  br i1 %5728, label %block_.L_45696f, label %block_456938

block_456938:                                     ; preds = %block_4568fa
  %5730 = load i64, i64* %RBP.i, align 8
  %5731 = add i64 %5730, -16
  %5732 = add i64 %5729, 4
  store i64 %5732, i64* %3, align 8
  %5733 = inttoptr i64 %5731 to i64*
  %5734 = load i64, i64* %5733, align 8
  store i64 %5734, i64* %RAX.i3176, align 8
  %5735 = add i64 %5734, 1616
  %5736 = add i64 %5729, 11
  store i64 %5736, i64* %3, align 8
  %5737 = inttoptr i64 %5735 to i64*
  %5738 = load i64, i64* %5737, align 8
  store i64 %5738, i64* %RAX.i3176, align 8
  %5739 = add i64 %5738, 8
  %5740 = add i64 %5729, 15
  store i64 %5740, i64* %3, align 8
  %5741 = inttoptr i64 %5739 to i64*
  %5742 = load i64, i64* %5741, align 8
  store i64 %5742, i64* %RAX.i3176, align 8
  %5743 = add i64 %5730, -52
  %5744 = add i64 %5729, 19
  store i64 %5744, i64* %3, align 8
  %5745 = inttoptr i64 %5743 to i32*
  %5746 = load i32, i32* %5745, align 4
  %5747 = sext i32 %5746 to i64
  store i64 %5747, i64* %RCX.i7756, align 8
  %5748 = shl nsw i64 %5747, 3
  %5749 = add i64 %5748, %5742
  %5750 = add i64 %5729, 23
  store i64 %5750, i64* %3, align 8
  %5751 = inttoptr i64 %5749 to i64*
  %5752 = load i64, i64* %5751, align 8
  store i64 %5752, i64* %RAX.i3176, align 8
  %5753 = add i64 %5730, -56
  %5754 = add i64 %5729, 27
  store i64 %5754, i64* %3, align 8
  %5755 = inttoptr i64 %5753 to i32*
  %5756 = load i32, i32* %5755, align 4
  %5757 = sext i32 %5756 to i64
  store i64 %5757, i64* %RCX.i7756, align 8
  %5758 = shl nsw i64 %5757, 3
  %5759 = add i64 %5758, %5752
  %5760 = add i64 %5729, 31
  store i64 %5760, i64* %3, align 8
  %5761 = inttoptr i64 %5759 to i64*
  %5762 = load i64, i64* %5761, align 8
  store i64 %5762, i64* %RAX.i3176, align 8
  %5763 = add i64 %5762, 2
  %5764 = add i64 %5729, 35
  store i64 %5764, i64* %3, align 8
  %5765 = inttoptr i64 %5763 to i16*
  %5766 = load i16, i16* %5765, align 2
  %5767 = sext i16 %5766 to i64
  %5768 = and i64 %5767, 4294967295
  store i64 %5768, i64* %RDI.i732, align 8
  %5769 = add i64 %5729, -350520
  %5770 = add i64 %5729, 40
  %5771 = load i64, i64* %6, align 8
  %5772 = add i64 %5771, -8
  %5773 = inttoptr i64 %5772 to i64*
  store i64 %5770, i64* %5773, align 8
  store i64 %5772, i64* %6, align 8
  store i64 %5769, i64* %3, align 8
  %5774 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %5703)
  %5775 = load i64, i64* %RAX.i3176, align 8
  %5776 = load i64, i64* %3, align 8
  %5777 = shl i64 %5775, 32
  %5778 = ashr i64 %5777, 33
  %5779 = and i64 %5778, 4294967295
  store i64 %5779, i64* %RAX.i3176, align 8
  %5780 = trunc i64 %5778 to i32
  store i8 0, i8* %19, align 1
  %5781 = and i32 %5780, 255
  %5782 = tail call i32 @llvm.ctpop.i32(i32 %5781)
  %5783 = trunc i32 %5782 to i8
  %5784 = and i8 %5783, 1
  %5785 = xor i8 %5784, 1
  store i8 %5785, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5786 = icmp eq i32 %5780, 0
  %5787 = zext i1 %5786 to i8
  store i8 %5787, i8* %34, align 1
  %5788 = lshr i64 %5778, 31
  %5789 = trunc i64 %5788 to i8
  %5790 = and i8 %5789, 1
  store i8 %5790, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 %5787, i8* %DL.i4045, align 1
  %5791 = load i64, i64* %RBP.i, align 8
  %5792 = add i64 %5791, -454
  %5793 = add i64 %5776, 14
  store i64 %5793, i64* %3, align 8
  %5794 = inttoptr i64 %5792 to i8*
  store i8 %5787, i8* %5794, align 1
  %.pre462 = load i64, i64* %3, align 8
  br label %block_.L_45696f

block_.L_45696f:                                  ; preds = %block_456938, %block_4568fa, %block_4568c8, %block_.L_456897
  %5795 = phi i64 [ %5601, %block_.L_456897 ], [ %5655, %block_4568c8 ], [ %5725, %block_4568fa ], [ %.pre462, %block_456938 ]
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.36, %block_.L_456897 ], [ %MEMORY.36, %block_4568c8 ], [ %5703, %block_4568fa ], [ %5774, %block_456938 ]
  %5796 = load i64, i64* %RBP.i, align 8
  %5797 = add i64 %5796, -454
  %5798 = add i64 %5795, 6
  store i64 %5798, i64* %3, align 8
  %5799 = inttoptr i64 %5797 to i8*
  %5800 = load i8, i8* %5799, align 1
  store i8 %5800, i8* %AL.i4135, align 1
  %5801 = add i64 %5796, -453
  %5802 = add i64 %5795, 12
  store i64 %5802, i64* %3, align 8
  %5803 = inttoptr i64 %5801 to i8*
  store i8 %5800, i8* %5803, align 1
  %.pre463 = load i64, i64* %3, align 8
  br label %block_.L_45697b

block_.L_45697b:                                  ; preds = %block_.L_45696f, %block_45685c
  %5804 = phi i64 [ %.pre463, %block_.L_45696f ], [ %5521, %block_45685c ]
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.37, %block_.L_45696f ], [ %5497, %block_45685c ]
  %5805 = load i64, i64* %RBP.i, align 8
  %5806 = add i64 %5805, -453
  %5807 = add i64 %5804, 6
  store i64 %5807, i64* %3, align 8
  %5808 = inttoptr i64 %5806 to i8*
  %5809 = load i8, i8* %5808, align 1
  %5810 = and i8 %5809, 1
  %5811 = xor i8 %5810, 1
  store i8 0, i8* %19, align 1
  %5812 = zext i8 %5811 to i32
  %5813 = tail call i32 @llvm.ctpop.i32(i32 %5812)
  %5814 = trunc i32 %5813 to i8
  %5815 = xor i8 %5814, 1
  store i8 %5815, i8* %26, align 1
  store i8 %5810, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5816 = zext i8 %5811 to i64
  store i64 %5816, i64* %RCX.i7756, align 8
  store i8 %5811, i8* %AL.i4135, align 1
  %5817 = add i64 %5805, -16
  %5818 = add i64 %5804, 19
  store i64 %5818, i64* %3, align 8
  %5819 = inttoptr i64 %5817 to i64*
  %5820 = load i64, i64* %5819, align 8
  store i64 %5820, i64* %RDX.i7753, align 8
  %5821 = add i64 %5820, 1624
  %5822 = add i64 %5804, 26
  store i64 %5822, i64* %3, align 8
  %5823 = inttoptr i64 %5821 to i64*
  %5824 = load i64, i64* %5823, align 8
  store i64 %5824, i64* %RDX.i7753, align 8
  %5825 = add i64 %5805, -52
  %5826 = add i64 %5804, 30
  store i64 %5826, i64* %3, align 8
  %5827 = inttoptr i64 %5825 to i32*
  %5828 = load i32, i32* %5827, align 4
  %5829 = sext i32 %5828 to i64
  store i64 %5829, i64* %RSI.i766, align 8
  %5830 = shl nsw i64 %5829, 3
  %5831 = add i64 %5830, %5824
  %5832 = add i64 %5804, 34
  store i64 %5832, i64* %3, align 8
  %5833 = inttoptr i64 %5831 to i64*
  %5834 = load i64, i64* %5833, align 8
  store i64 %5834, i64* %RDX.i7753, align 8
  %5835 = add i64 %5805, -56
  %5836 = add i64 %5804, 38
  store i64 %5836, i64* %3, align 8
  %5837 = inttoptr i64 %5835 to i32*
  %5838 = load i32, i32* %5837, align 4
  %5839 = sext i32 %5838 to i64
  store i64 %5839, i64* %RSI.i766, align 8
  %5840 = add i64 %5834, %5839
  %5841 = add i64 %5804, 41
  store i64 %5841, i64* %3, align 8
  %5842 = inttoptr i64 %5840 to i8*
  store i8 %5811, i8* %5842, align 1
  %.pre464 = load i64, i64* %3, align 8
  br label %block_.L_4569a4

block_.L_4569a4:                                  ; preds = %block_.L_4567c9, %block_.L_45697b
  %5843 = phi i64 [ %5339, %block_.L_4567c9 ], [ %.pre464, %block_.L_45697b ]
  %MEMORY.39 = phi %struct.Memory* [ %3264, %block_.L_4567c9 ], [ %MEMORY.38, %block_.L_45697b ]
  %5844 = add i64 %5843, 4224
  br label %block_.L_457a24

block_.L_4569a9:                                  ; preds = %block_455fe5
  %5845 = add i64 %3308, -48
  %5846 = add i64 %3307, 4
  store i64 %5846, i64* %3, align 8
  %5847 = inttoptr i64 %5845 to i64*
  %5848 = load i64, i64* %5847, align 8
  store i64 %5848, i64* %RAX.i3176, align 8
  %5849 = add i64 %5848, 6504
  %5850 = add i64 %3307, 11
  store i64 %5850, i64* %3, align 8
  %5851 = inttoptr i64 %5849 to i64*
  %5852 = load i64, i64* %5851, align 8
  store i64 %5852, i64* %RAX.i3176, align 8
  %5853 = add i64 %3307, 14
  store i64 %5853, i64* %3, align 8
  %5854 = inttoptr i64 %5852 to i64*
  %5855 = load i64, i64* %5854, align 8
  store i64 %5855, i64* %RAX.i3176, align 8
  %5856 = add i64 %3308, -52
  %5857 = add i64 %3307, 17
  store i64 %5857, i64* %3, align 8
  %5858 = inttoptr i64 %5856 to i32*
  %5859 = load i32, i32* %5858, align 4
  %5860 = and i32 %5859, 2
  %5861 = zext i32 %5860 to i64
  store i64 %5861, i64* %RCX.i7756, align 8
  store i8 0, i8* %19, align 1
  %5862 = tail call i32 @llvm.ctpop.i32(i32 %5860)
  %5863 = trunc i32 %5862 to i8
  %5864 = xor i8 %5863, 1
  store i8 %5864, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit626 = lshr exact i32 %5860, 1
  %5865 = trunc i32 %.lobit626 to i8
  %5866 = xor i8 %5865, 1
  store i8 %5866, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %5867 = add i64 %3308, -464
  %5868 = add i64 %3307, 30
  store i64 %5868, i64* %3, align 8
  %5869 = inttoptr i64 %5867 to i64*
  store i64 %5855, i64* %5869, align 8
  %5870 = load i64, i64* %3, align 8
  %5871 = load i8, i8* %34, align 1
  %5872 = icmp ne i8 %5871, 0
  %.v770 = select i1 %5872, i64 23, i64 6
  %5873 = add i64 %5870, %.v770
  %cmpBr_4569c7 = icmp eq i8 %5871, 1
  %5874 = load i64, i64* %RBP.i, align 8
  %5875 = add i64 %5874, -52
  %5876 = add i64 %5873, 3
  store i64 %5876, i64* %3, align 8
  %5877 = inttoptr i64 %5875 to i32*
  %5878 = load i32, i32* %5877, align 4
  %5879 = zext i32 %5878 to i64
  store i64 %5879, i64* %RAX.i3176, align 8
  %5880 = add i64 %5873, 6
  store i64 %5880, i64* %3, align 8
  br i1 %cmpBr_4569c7, label %block_.L_4569de, label %block_4569cd

block_4569cd:                                     ; preds = %block_.L_4569a9
  %5881 = or i64 %5879, 1
  %5882 = trunc i64 %5881 to i32
  store i64 %5881, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5883 = and i32 %5882, 255
  %5884 = tail call i32 @llvm.ctpop.i32(i32 %5883)
  %5885 = trunc i32 %5884 to i8
  %5886 = and i8 %5885, 1
  %5887 = xor i8 %5886, 1
  store i8 %5887, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %5888 = lshr i32 %5882, 31
  %5889 = trunc i32 %5888 to i8
  store i8 %5889, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5890 = add i64 %5874, -468
  %5891 = add i64 %5873, 12
  store i64 %5891, i64* %3, align 8
  %5892 = inttoptr i64 %5890 to i32*
  store i32 %5882, i32* %5892, align 4
  %5893 = load i64, i64* %3, align 8
  %5894 = add i64 %5893, 17
  store i64 %5894, i64* %3, align 8
  br label %block_.L_4569ea

block_.L_4569de:                                  ; preds = %block_.L_4569a9
  %5895 = and i64 %5879, 4294967294
  store i64 %5895, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5896 = and i32 %5878, 254
  %5897 = tail call i32 @llvm.ctpop.i32(i32 %5896)
  %5898 = trunc i32 %5897 to i8
  %5899 = and i8 %5898, 1
  %5900 = xor i8 %5899, 1
  store i8 %5900, i8* %26, align 1
  %5901 = icmp ult i32 %5878, 2
  %5902 = zext i1 %5901 to i8
  store i8 %5902, i8* %34, align 1
  %5903 = lshr i32 %5878, 31
  %5904 = trunc i32 %5903 to i8
  store i8 %5904, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5905 = add i64 %5874, -468
  %5906 = trunc i64 %5895 to i32
  %5907 = add i64 %5873, 12
  store i64 %5907, i64* %3, align 8
  %5908 = inttoptr i64 %5905 to i32*
  store i32 %5906, i32* %5908, align 4
  %.pre465 = load i64, i64* %3, align 8
  br label %block_.L_4569ea

block_.L_4569ea:                                  ; preds = %block_.L_4569de, %block_4569cd
  %5909 = phi i64 [ %.pre465, %block_.L_4569de ], [ %5894, %block_4569cd ]
  %5910 = load i64, i64* %RBP.i, align 8
  %5911 = add i64 %5910, -468
  %5912 = add i64 %5909, 6
  store i64 %5912, i64* %3, align 8
  %5913 = inttoptr i64 %5911 to i32*
  %5914 = load i32, i32* %5913, align 4
  %5915 = zext i32 %5914 to i64
  store i64 %5915, i64* %RAX.i3176, align 8
  %5916 = sext i32 %5914 to i64
  store i64 %5916, i64* %RCX.i7756, align 8
  %5917 = add i64 %5910, -464
  %5918 = add i64 %5909, 16
  store i64 %5918, i64* %3, align 8
  %5919 = inttoptr i64 %5917 to i64*
  %5920 = load i64, i64* %5919, align 8
  store i64 %5920, i64* %RDX.i7753, align 8
  %5921 = shl nsw i64 %5916, 3
  %5922 = add i64 %5921, %5920
  %5923 = add i64 %5909, 20
  store i64 %5923, i64* %3, align 8
  %5924 = inttoptr i64 %5922 to i64*
  %5925 = load i64, i64* %5924, align 8
  store i64 %5925, i64* %RCX.i7756, align 8
  %5926 = add i64 %5910, -56
  %5927 = add i64 %5909, 23
  store i64 %5927, i64* %3, align 8
  %5928 = inttoptr i64 %5926 to i32*
  %5929 = load i32, i32* %5928, align 4
  %5930 = and i32 %5929, 2
  %5931 = zext i32 %5930 to i64
  store i64 %5931, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5932 = tail call i32 @llvm.ctpop.i32(i32 %5930)
  %5933 = trunc i32 %5932 to i8
  %5934 = xor i8 %5933, 1
  store i8 %5934, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit627 = lshr exact i32 %5930, 1
  %5935 = trunc i32 %.lobit627 to i8
  %5936 = xor i8 %5935, 1
  store i8 %5936, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %5937 = add i64 %5910, -480
  %5938 = add i64 %5909, 36
  store i64 %5938, i64* %3, align 8
  %5939 = inttoptr i64 %5937 to i64*
  store i64 %5925, i64* %5939, align 8
  %5940 = load i64, i64* %3, align 8
  %5941 = load i8, i8* %34, align 1
  %5942 = icmp ne i8 %5941, 0
  %.v771 = select i1 %5942, i64 23, i64 6
  %5943 = add i64 %5940, %.v771
  %cmpBr_456a0e = icmp eq i8 %5941, 1
  %5944 = load i64, i64* %RBP.i, align 8
  %5945 = add i64 %5944, -56
  %5946 = add i64 %5943, 3
  store i64 %5946, i64* %3, align 8
  %5947 = inttoptr i64 %5945 to i32*
  %5948 = load i32, i32* %5947, align 4
  %5949 = zext i32 %5948 to i64
  store i64 %5949, i64* %RAX.i3176, align 8
  %5950 = add i64 %5943, 6
  store i64 %5950, i64* %3, align 8
  br i1 %cmpBr_456a0e, label %block_.L_456a25, label %block_456a14

block_456a14:                                     ; preds = %block_.L_4569ea
  %5951 = or i64 %5949, 1
  %5952 = trunc i64 %5951 to i32
  store i64 %5951, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5953 = and i32 %5952, 255
  %5954 = tail call i32 @llvm.ctpop.i32(i32 %5953)
  %5955 = trunc i32 %5954 to i8
  %5956 = and i8 %5955, 1
  %5957 = xor i8 %5956, 1
  store i8 %5957, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %5958 = lshr i32 %5952, 31
  %5959 = trunc i32 %5958 to i8
  store i8 %5959, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5960 = add i64 %5944, -484
  %5961 = add i64 %5943, 12
  store i64 %5961, i64* %3, align 8
  %5962 = inttoptr i64 %5960 to i32*
  store i32 %5952, i32* %5962, align 4
  %5963 = load i64, i64* %3, align 8
  %5964 = add i64 %5963, 17
  store i64 %5964, i64* %3, align 8
  br label %block_.L_456a31

block_.L_456a25:                                  ; preds = %block_.L_4569ea
  %5965 = and i64 %5949, 4294967294
  store i64 %5965, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %5966 = and i32 %5948, 254
  %5967 = tail call i32 @llvm.ctpop.i32(i32 %5966)
  %5968 = trunc i32 %5967 to i8
  %5969 = and i8 %5968, 1
  %5970 = xor i8 %5969, 1
  store i8 %5970, i8* %26, align 1
  %5971 = icmp ult i32 %5948, 2
  %5972 = zext i1 %5971 to i8
  store i8 %5972, i8* %34, align 1
  %5973 = lshr i32 %5948, 31
  %5974 = trunc i32 %5973 to i8
  store i8 %5974, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5975 = add i64 %5944, -484
  %5976 = trunc i64 %5965 to i32
  %5977 = add i64 %5943, 12
  store i64 %5977, i64* %3, align 8
  %5978 = inttoptr i64 %5975 to i32*
  store i32 %5976, i32* %5978, align 4
  %.pre466 = load i64, i64* %3, align 8
  br label %block_.L_456a31

block_.L_456a31:                                  ; preds = %block_.L_456a25, %block_456a14
  %5979 = phi i64 [ %.pre466, %block_.L_456a25 ], [ %5964, %block_456a14 ]
  %5980 = load i64, i64* %RBP.i, align 8
  %5981 = add i64 %5980, -484
  %5982 = add i64 %5979, 6
  store i64 %5982, i64* %3, align 8
  %5983 = inttoptr i64 %5981 to i32*
  %5984 = load i32, i32* %5983, align 4
  %5985 = zext i32 %5984 to i64
  store i64 %5985, i64* %RAX.i3176, align 8
  %5986 = sext i32 %5984 to i64
  store i64 %5986, i64* %RCX.i7756, align 8
  %5987 = add i64 %5980, -480
  %5988 = add i64 %5979, 16
  store i64 %5988, i64* %3, align 8
  %5989 = inttoptr i64 %5987 to i64*
  %5990 = load i64, i64* %5989, align 8
  store i64 %5990, i64* %RDX.i7753, align 8
  %5991 = shl nsw i64 %5986, 3
  %5992 = add i64 %5991, %5990
  %5993 = add i64 %5979, 20
  store i64 %5993, i64* %3, align 8
  %5994 = inttoptr i64 %5992 to i64*
  %5995 = load i64, i64* %5994, align 8
  store i64 %5995, i64* %RCX.i7756, align 8
  %5996 = add i64 %5979, 23
  store i64 %5996, i64* %3, align 8
  %5997 = inttoptr i64 %5995 to i16*
  %5998 = load i16, i16* %5997, align 2
  store i16 %5998, i16* %SI.i6180, align 2
  %5999 = add i64 %5980, -16
  %6000 = add i64 %5979, 27
  store i64 %6000, i64* %3, align 8
  %6001 = inttoptr i64 %5999 to i64*
  %6002 = load i64, i64* %6001, align 8
  store i64 %6002, i64* %RCX.i7756, align 8
  %6003 = add i64 %6002, 4848
  %6004 = add i64 %5979, 34
  store i64 %6004, i64* %3, align 8
  %6005 = inttoptr i64 %6003 to i64*
  %6006 = load i64, i64* %6005, align 8
  store i64 %6006, i64* %RCX.i7756, align 8
  %6007 = add i64 %5979, 37
  store i64 %6007, i64* %3, align 8
  %6008 = inttoptr i64 %6006 to i64*
  %6009 = load i64, i64* %6008, align 8
  store i64 %6009, i64* %RCX.i7756, align 8
  %6010 = add i64 %5980, -52
  %6011 = add i64 %5979, 41
  store i64 %6011, i64* %3, align 8
  %6012 = inttoptr i64 %6010 to i32*
  %6013 = load i32, i32* %6012, align 4
  %6014 = sext i32 %6013 to i64
  store i64 %6014, i64* %RDI.i732, align 8
  %6015 = shl nsw i64 %6014, 3
  %6016 = add i64 %6015, %6009
  %6017 = add i64 %5979, 45
  store i64 %6017, i64* %3, align 8
  %6018 = inttoptr i64 %6016 to i64*
  %6019 = load i64, i64* %6018, align 8
  store i64 %6019, i64* %RCX.i7756, align 8
  %6020 = add i64 %5980, -56
  %6021 = add i64 %5979, 49
  store i64 %6021, i64* %3, align 8
  %6022 = inttoptr i64 %6020 to i32*
  %6023 = load i32, i32* %6022, align 4
  %6024 = sext i32 %6023 to i64
  store i64 %6024, i64* %RDI.i732, align 8
  %6025 = shl nsw i64 %6024, 3
  %6026 = add i64 %6025, %6019
  %6027 = add i64 %5979, 53
  store i64 %6027, i64* %3, align 8
  %6028 = inttoptr i64 %6026 to i64*
  %6029 = load i64, i64* %6028, align 8
  store i64 %6029, i64* %RCX.i7756, align 8
  %6030 = add i64 %5979, 56
  store i64 %6030, i64* %3, align 8
  %6031 = inttoptr i64 %6029 to i16*
  store i16 %5998, i16* %6031, align 2
  %6032 = load i64, i64* %RBP.i, align 8
  %6033 = add i64 %6032, -48
  %6034 = load i64, i64* %3, align 8
  %6035 = add i64 %6034, 4
  store i64 %6035, i64* %3, align 8
  %6036 = inttoptr i64 %6033 to i64*
  %6037 = load i64, i64* %6036, align 8
  store i64 %6037, i64* %RCX.i7756, align 8
  %6038 = add i64 %6037, 6504
  %6039 = add i64 %6034, 11
  store i64 %6039, i64* %3, align 8
  %6040 = inttoptr i64 %6038 to i64*
  %6041 = load i64, i64* %6040, align 8
  store i64 %6041, i64* %RCX.i7756, align 8
  %6042 = add i64 %6034, 14
  store i64 %6042, i64* %3, align 8
  %6043 = inttoptr i64 %6041 to i64*
  %6044 = load i64, i64* %6043, align 8
  store i64 %6044, i64* %RCX.i7756, align 8
  %6045 = add i64 %6032, -52
  %6046 = add i64 %6034, 17
  store i64 %6046, i64* %3, align 8
  %6047 = inttoptr i64 %6045 to i32*
  %6048 = load i32, i32* %6047, align 4
  %6049 = and i32 %6048, 2
  %6050 = zext i32 %6049 to i64
  store i64 %6050, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6051 = tail call i32 @llvm.ctpop.i32(i32 %6049)
  %6052 = trunc i32 %6051 to i8
  %6053 = xor i8 %6052, 1
  store i8 %6053, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit628 = lshr exact i32 %6049, 1
  %6054 = trunc i32 %.lobit628 to i8
  %6055 = xor i8 %6054, 1
  store i8 %6055, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6056 = add i64 %6032, -496
  %6057 = add i64 %6034, 30
  store i64 %6057, i64* %3, align 8
  %6058 = inttoptr i64 %6056 to i64*
  store i64 %6044, i64* %6058, align 8
  %6059 = load i64, i64* %3, align 8
  %6060 = load i8, i8* %34, align 1
  %6061 = icmp ne i8 %6060, 0
  %.v772 = select i1 %6061, i64 23, i64 6
  %6062 = add i64 %6059, %.v772
  %cmpBr_456a87 = icmp eq i8 %6060, 1
  %6063 = load i64, i64* %RBP.i, align 8
  %6064 = add i64 %6063, -52
  %6065 = add i64 %6062, 3
  store i64 %6065, i64* %3, align 8
  %6066 = inttoptr i64 %6064 to i32*
  %6067 = load i32, i32* %6066, align 4
  %6068 = zext i32 %6067 to i64
  store i64 %6068, i64* %RAX.i3176, align 8
  %6069 = add i64 %6062, 6
  store i64 %6069, i64* %3, align 8
  br i1 %cmpBr_456a87, label %block_.L_456a9e, label %block_456a8d

block_456a8d:                                     ; preds = %block_.L_456a31
  %6070 = or i64 %6068, 1
  %6071 = trunc i64 %6070 to i32
  store i64 %6070, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6072 = and i32 %6071, 255
  %6073 = tail call i32 @llvm.ctpop.i32(i32 %6072)
  %6074 = trunc i32 %6073 to i8
  %6075 = and i8 %6074, 1
  %6076 = xor i8 %6075, 1
  store i8 %6076, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6077 = lshr i32 %6071, 31
  %6078 = trunc i32 %6077 to i8
  store i8 %6078, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6079 = add i64 %6063, -500
  %6080 = add i64 %6062, 12
  store i64 %6080, i64* %3, align 8
  %6081 = inttoptr i64 %6079 to i32*
  store i32 %6071, i32* %6081, align 4
  %6082 = load i64, i64* %3, align 8
  %6083 = add i64 %6082, 17
  store i64 %6083, i64* %3, align 8
  br label %block_.L_456aaa

block_.L_456a9e:                                  ; preds = %block_.L_456a31
  %6084 = and i64 %6068, 4294967294
  store i64 %6084, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6085 = and i32 %6067, 254
  %6086 = tail call i32 @llvm.ctpop.i32(i32 %6085)
  %6087 = trunc i32 %6086 to i8
  %6088 = and i8 %6087, 1
  %6089 = xor i8 %6088, 1
  store i8 %6089, i8* %26, align 1
  %6090 = icmp ult i32 %6067, 2
  %6091 = zext i1 %6090 to i8
  store i8 %6091, i8* %34, align 1
  %6092 = lshr i32 %6067, 31
  %6093 = trunc i32 %6092 to i8
  store i8 %6093, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6094 = add i64 %6063, -500
  %6095 = trunc i64 %6084 to i32
  %6096 = add i64 %6062, 12
  store i64 %6096, i64* %3, align 8
  %6097 = inttoptr i64 %6094 to i32*
  store i32 %6095, i32* %6097, align 4
  %.pre467 = load i64, i64* %3, align 8
  br label %block_.L_456aaa

block_.L_456aaa:                                  ; preds = %block_.L_456a9e, %block_456a8d
  %6098 = phi i64 [ %.pre467, %block_.L_456a9e ], [ %6083, %block_456a8d ]
  %6099 = load i64, i64* %RBP.i, align 8
  %6100 = add i64 %6099, -500
  %6101 = add i64 %6098, 6
  store i64 %6101, i64* %3, align 8
  %6102 = inttoptr i64 %6100 to i32*
  %6103 = load i32, i32* %6102, align 4
  %6104 = zext i32 %6103 to i64
  store i64 %6104, i64* %RAX.i3176, align 8
  %6105 = sext i32 %6103 to i64
  store i64 %6105, i64* %RCX.i7756, align 8
  %6106 = add i64 %6099, -496
  %6107 = add i64 %6098, 16
  store i64 %6107, i64* %3, align 8
  %6108 = inttoptr i64 %6106 to i64*
  %6109 = load i64, i64* %6108, align 8
  store i64 %6109, i64* %RDX.i7753, align 8
  %6110 = shl nsw i64 %6105, 3
  %6111 = add i64 %6110, %6109
  %6112 = add i64 %6098, 20
  store i64 %6112, i64* %3, align 8
  %6113 = inttoptr i64 %6111 to i64*
  %6114 = load i64, i64* %6113, align 8
  store i64 %6114, i64* %RCX.i7756, align 8
  %6115 = add i64 %6099, -56
  %6116 = add i64 %6098, 23
  store i64 %6116, i64* %3, align 8
  %6117 = inttoptr i64 %6115 to i32*
  %6118 = load i32, i32* %6117, align 4
  %6119 = and i32 %6118, 2
  %6120 = zext i32 %6119 to i64
  store i64 %6120, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6121 = tail call i32 @llvm.ctpop.i32(i32 %6119)
  %6122 = trunc i32 %6121 to i8
  %6123 = xor i8 %6122, 1
  store i8 %6123, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit629 = lshr exact i32 %6119, 1
  %6124 = trunc i32 %.lobit629 to i8
  %6125 = xor i8 %6124, 1
  store i8 %6125, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6126 = add i64 %6099, -512
  %6127 = add i64 %6098, 36
  store i64 %6127, i64* %3, align 8
  %6128 = inttoptr i64 %6126 to i64*
  store i64 %6114, i64* %6128, align 8
  %6129 = load i64, i64* %3, align 8
  %6130 = load i8, i8* %34, align 1
  %6131 = icmp ne i8 %6130, 0
  %.v773 = select i1 %6131, i64 23, i64 6
  %6132 = add i64 %6129, %.v773
  %cmpBr_456ace = icmp eq i8 %6130, 1
  %6133 = load i64, i64* %RBP.i, align 8
  %6134 = add i64 %6133, -56
  %6135 = add i64 %6132, 3
  store i64 %6135, i64* %3, align 8
  %6136 = inttoptr i64 %6134 to i32*
  %6137 = load i32, i32* %6136, align 4
  %6138 = zext i32 %6137 to i64
  store i64 %6138, i64* %RAX.i3176, align 8
  %6139 = add i64 %6132, 6
  store i64 %6139, i64* %3, align 8
  br i1 %cmpBr_456ace, label %block_.L_456ae5, label %block_456ad4

block_456ad4:                                     ; preds = %block_.L_456aaa
  %6140 = or i64 %6138, 1
  %6141 = trunc i64 %6140 to i32
  store i64 %6140, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6142 = and i32 %6141, 255
  %6143 = tail call i32 @llvm.ctpop.i32(i32 %6142)
  %6144 = trunc i32 %6143 to i8
  %6145 = and i8 %6144, 1
  %6146 = xor i8 %6145, 1
  store i8 %6146, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6147 = lshr i32 %6141, 31
  %6148 = trunc i32 %6147 to i8
  store i8 %6148, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6149 = add i64 %6133, -516
  %6150 = add i64 %6132, 12
  store i64 %6150, i64* %3, align 8
  %6151 = inttoptr i64 %6149 to i32*
  store i32 %6141, i32* %6151, align 4
  %6152 = load i64, i64* %3, align 8
  %6153 = add i64 %6152, 17
  store i64 %6153, i64* %3, align 8
  br label %block_.L_456af1

block_.L_456ae5:                                  ; preds = %block_.L_456aaa
  %6154 = and i64 %6138, 4294967294
  store i64 %6154, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6155 = and i32 %6137, 254
  %6156 = tail call i32 @llvm.ctpop.i32(i32 %6155)
  %6157 = trunc i32 %6156 to i8
  %6158 = and i8 %6157, 1
  %6159 = xor i8 %6158, 1
  store i8 %6159, i8* %26, align 1
  %6160 = icmp ult i32 %6137, 2
  %6161 = zext i1 %6160 to i8
  store i8 %6161, i8* %34, align 1
  %6162 = lshr i32 %6137, 31
  %6163 = trunc i32 %6162 to i8
  store i8 %6163, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6164 = add i64 %6133, -516
  %6165 = trunc i64 %6154 to i32
  %6166 = add i64 %6132, 12
  store i64 %6166, i64* %3, align 8
  %6167 = inttoptr i64 %6164 to i32*
  store i32 %6165, i32* %6167, align 4
  %.pre468 = load i64, i64* %3, align 8
  br label %block_.L_456af1

block_.L_456af1:                                  ; preds = %block_.L_456ae5, %block_456ad4
  %6168 = phi i64 [ %.pre468, %block_.L_456ae5 ], [ %6153, %block_456ad4 ]
  %6169 = load i64, i64* %RBP.i, align 8
  %6170 = add i64 %6169, -516
  %6171 = add i64 %6168, 6
  store i64 %6171, i64* %3, align 8
  %6172 = inttoptr i64 %6170 to i32*
  %6173 = load i32, i32* %6172, align 4
  %6174 = zext i32 %6173 to i64
  store i64 %6174, i64* %RAX.i3176, align 8
  %6175 = sext i32 %6173 to i64
  store i64 %6175, i64* %RCX.i7756, align 8
  %6176 = add i64 %6169, -512
  %6177 = add i64 %6168, 16
  store i64 %6177, i64* %3, align 8
  %6178 = inttoptr i64 %6176 to i64*
  %6179 = load i64, i64* %6178, align 8
  store i64 %6179, i64* %RDX.i7753, align 8
  %6180 = shl nsw i64 %6175, 3
  %6181 = add i64 %6180, %6179
  %6182 = add i64 %6168, 20
  store i64 %6182, i64* %3, align 8
  %6183 = inttoptr i64 %6181 to i64*
  %6184 = load i64, i64* %6183, align 8
  store i64 %6184, i64* %RCX.i7756, align 8
  %6185 = add i64 %6184, 2
  %6186 = add i64 %6168, 24
  store i64 %6186, i64* %3, align 8
  %6187 = inttoptr i64 %6185 to i16*
  %6188 = load i16, i16* %6187, align 2
  store i16 %6188, i16* %SI.i6180, align 2
  %6189 = add i64 %6169, -16
  %6190 = add i64 %6168, 28
  store i64 %6190, i64* %3, align 8
  %6191 = inttoptr i64 %6189 to i64*
  %6192 = load i64, i64* %6191, align 8
  store i64 %6192, i64* %RCX.i7756, align 8
  %6193 = add i64 %6192, 4848
  %6194 = add i64 %6168, 35
  store i64 %6194, i64* %3, align 8
  %6195 = inttoptr i64 %6193 to i64*
  %6196 = load i64, i64* %6195, align 8
  store i64 %6196, i64* %RCX.i7756, align 8
  %6197 = add i64 %6168, 38
  store i64 %6197, i64* %3, align 8
  %6198 = inttoptr i64 %6196 to i64*
  %6199 = load i64, i64* %6198, align 8
  store i64 %6199, i64* %RCX.i7756, align 8
  %6200 = add i64 %6169, -52
  %6201 = add i64 %6168, 42
  store i64 %6201, i64* %3, align 8
  %6202 = inttoptr i64 %6200 to i32*
  %6203 = load i32, i32* %6202, align 4
  %6204 = sext i32 %6203 to i64
  store i64 %6204, i64* %RDI.i732, align 8
  %6205 = shl nsw i64 %6204, 3
  %6206 = add i64 %6205, %6199
  %6207 = add i64 %6168, 46
  store i64 %6207, i64* %3, align 8
  %6208 = inttoptr i64 %6206 to i64*
  %6209 = load i64, i64* %6208, align 8
  store i64 %6209, i64* %RCX.i7756, align 8
  %6210 = add i64 %6169, -56
  %6211 = add i64 %6168, 50
  store i64 %6211, i64* %3, align 8
  %6212 = inttoptr i64 %6210 to i32*
  %6213 = load i32, i32* %6212, align 4
  %6214 = sext i32 %6213 to i64
  store i64 %6214, i64* %RDI.i732, align 8
  %6215 = shl nsw i64 %6214, 3
  %6216 = add i64 %6215, %6209
  %6217 = add i64 %6168, 54
  store i64 %6217, i64* %3, align 8
  %6218 = inttoptr i64 %6216 to i64*
  %6219 = load i64, i64* %6218, align 8
  store i64 %6219, i64* %RCX.i7756, align 8
  %6220 = add i64 %6219, 2
  %6221 = add i64 %6168, 58
  store i64 %6221, i64* %3, align 8
  %6222 = inttoptr i64 %6220 to i16*
  store i16 %6188, i16* %6222, align 2
  %6223 = load i64, i64* %RBP.i, align 8
  %6224 = add i64 %6223, -48
  %6225 = load i64, i64* %3, align 8
  %6226 = add i64 %6225, 4
  store i64 %6226, i64* %3, align 8
  %6227 = inttoptr i64 %6224 to i64*
  %6228 = load i64, i64* %6227, align 8
  store i64 %6228, i64* %RCX.i7756, align 8
  %6229 = add i64 %6228, 6504
  %6230 = add i64 %6225, 11
  store i64 %6230, i64* %3, align 8
  %6231 = inttoptr i64 %6229 to i64*
  %6232 = load i64, i64* %6231, align 8
  store i64 %6232, i64* %RCX.i7756, align 8
  %6233 = add i64 %6232, 8
  %6234 = add i64 %6225, 15
  store i64 %6234, i64* %3, align 8
  %6235 = inttoptr i64 %6233 to i64*
  %6236 = load i64, i64* %6235, align 8
  store i64 %6236, i64* %RCX.i7756, align 8
  %6237 = add i64 %6223, -52
  %6238 = add i64 %6225, 18
  store i64 %6238, i64* %3, align 8
  %6239 = inttoptr i64 %6237 to i32*
  %6240 = load i32, i32* %6239, align 4
  %6241 = and i32 %6240, 2
  %6242 = zext i32 %6241 to i64
  store i64 %6242, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6243 = tail call i32 @llvm.ctpop.i32(i32 %6241)
  %6244 = trunc i32 %6243 to i8
  %6245 = xor i8 %6244, 1
  store i8 %6245, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit630 = lshr exact i32 %6241, 1
  %6246 = trunc i32 %.lobit630 to i8
  %6247 = xor i8 %6246, 1
  store i8 %6247, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6248 = add i64 %6223, -528
  %6249 = add i64 %6225, 31
  store i64 %6249, i64* %3, align 8
  %6250 = inttoptr i64 %6248 to i64*
  store i64 %6236, i64* %6250, align 8
  %6251 = load i64, i64* %3, align 8
  %6252 = load i8, i8* %34, align 1
  %6253 = icmp ne i8 %6252, 0
  %.v774 = select i1 %6253, i64 23, i64 6
  %6254 = add i64 %6251, %.v774
  %cmpBr_456b4a = icmp eq i8 %6252, 1
  %6255 = load i64, i64* %RBP.i, align 8
  %6256 = add i64 %6255, -52
  %6257 = add i64 %6254, 3
  store i64 %6257, i64* %3, align 8
  %6258 = inttoptr i64 %6256 to i32*
  %6259 = load i32, i32* %6258, align 4
  %6260 = zext i32 %6259 to i64
  store i64 %6260, i64* %RAX.i3176, align 8
  %6261 = add i64 %6254, 6
  store i64 %6261, i64* %3, align 8
  br i1 %cmpBr_456b4a, label %block_.L_456b61, label %block_456b50

block_456b50:                                     ; preds = %block_.L_456af1
  %6262 = or i64 %6260, 1
  %6263 = trunc i64 %6262 to i32
  store i64 %6262, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6264 = and i32 %6263, 255
  %6265 = tail call i32 @llvm.ctpop.i32(i32 %6264)
  %6266 = trunc i32 %6265 to i8
  %6267 = and i8 %6266, 1
  %6268 = xor i8 %6267, 1
  store i8 %6268, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6269 = lshr i32 %6263, 31
  %6270 = trunc i32 %6269 to i8
  store i8 %6270, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6271 = add i64 %6255, -532
  %6272 = add i64 %6254, 12
  store i64 %6272, i64* %3, align 8
  %6273 = inttoptr i64 %6271 to i32*
  store i32 %6263, i32* %6273, align 4
  %6274 = load i64, i64* %3, align 8
  %6275 = add i64 %6274, 17
  store i64 %6275, i64* %3, align 8
  br label %block_.L_456b6d

block_.L_456b61:                                  ; preds = %block_.L_456af1
  %6276 = and i64 %6260, 4294967294
  store i64 %6276, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6277 = and i32 %6259, 254
  %6278 = tail call i32 @llvm.ctpop.i32(i32 %6277)
  %6279 = trunc i32 %6278 to i8
  %6280 = and i8 %6279, 1
  %6281 = xor i8 %6280, 1
  store i8 %6281, i8* %26, align 1
  %6282 = icmp ult i32 %6259, 2
  %6283 = zext i1 %6282 to i8
  store i8 %6283, i8* %34, align 1
  %6284 = lshr i32 %6259, 31
  %6285 = trunc i32 %6284 to i8
  store i8 %6285, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6286 = add i64 %6255, -532
  %6287 = trunc i64 %6276 to i32
  %6288 = add i64 %6254, 12
  store i64 %6288, i64* %3, align 8
  %6289 = inttoptr i64 %6286 to i32*
  store i32 %6287, i32* %6289, align 4
  %.pre469 = load i64, i64* %3, align 8
  br label %block_.L_456b6d

block_.L_456b6d:                                  ; preds = %block_.L_456b61, %block_456b50
  %6290 = phi i64 [ %.pre469, %block_.L_456b61 ], [ %6275, %block_456b50 ]
  %6291 = load i64, i64* %RBP.i, align 8
  %6292 = add i64 %6291, -532
  %6293 = add i64 %6290, 6
  store i64 %6293, i64* %3, align 8
  %6294 = inttoptr i64 %6292 to i32*
  %6295 = load i32, i32* %6294, align 4
  %6296 = zext i32 %6295 to i64
  store i64 %6296, i64* %RAX.i3176, align 8
  %6297 = sext i32 %6295 to i64
  store i64 %6297, i64* %RCX.i7756, align 8
  %6298 = add i64 %6291, -528
  %6299 = add i64 %6290, 16
  store i64 %6299, i64* %3, align 8
  %6300 = inttoptr i64 %6298 to i64*
  %6301 = load i64, i64* %6300, align 8
  store i64 %6301, i64* %RDX.i7753, align 8
  %6302 = shl nsw i64 %6297, 3
  %6303 = add i64 %6302, %6301
  %6304 = add i64 %6290, 20
  store i64 %6304, i64* %3, align 8
  %6305 = inttoptr i64 %6303 to i64*
  %6306 = load i64, i64* %6305, align 8
  store i64 %6306, i64* %RCX.i7756, align 8
  %6307 = add i64 %6291, -56
  %6308 = add i64 %6290, 23
  store i64 %6308, i64* %3, align 8
  %6309 = inttoptr i64 %6307 to i32*
  %6310 = load i32, i32* %6309, align 4
  %6311 = and i32 %6310, 2
  %6312 = zext i32 %6311 to i64
  store i64 %6312, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6313 = tail call i32 @llvm.ctpop.i32(i32 %6311)
  %6314 = trunc i32 %6313 to i8
  %6315 = xor i8 %6314, 1
  store i8 %6315, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit631 = lshr exact i32 %6311, 1
  %6316 = trunc i32 %.lobit631 to i8
  %6317 = xor i8 %6316, 1
  store i8 %6317, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6318 = add i64 %6291, -544
  %6319 = add i64 %6290, 36
  store i64 %6319, i64* %3, align 8
  %6320 = inttoptr i64 %6318 to i64*
  store i64 %6306, i64* %6320, align 8
  %6321 = load i64, i64* %3, align 8
  %6322 = load i8, i8* %34, align 1
  %6323 = icmp ne i8 %6322, 0
  %.v775 = select i1 %6323, i64 23, i64 6
  %6324 = add i64 %6321, %.v775
  %cmpBr_456b91 = icmp eq i8 %6322, 1
  %6325 = load i64, i64* %RBP.i, align 8
  %6326 = add i64 %6325, -56
  %6327 = add i64 %6324, 3
  store i64 %6327, i64* %3, align 8
  %6328 = inttoptr i64 %6326 to i32*
  %6329 = load i32, i32* %6328, align 4
  %6330 = zext i32 %6329 to i64
  store i64 %6330, i64* %RAX.i3176, align 8
  %6331 = add i64 %6324, 6
  store i64 %6331, i64* %3, align 8
  br i1 %cmpBr_456b91, label %block_.L_456ba8, label %block_456b97

block_456b97:                                     ; preds = %block_.L_456b6d
  %6332 = or i64 %6330, 1
  %6333 = trunc i64 %6332 to i32
  store i64 %6332, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6334 = and i32 %6333, 255
  %6335 = tail call i32 @llvm.ctpop.i32(i32 %6334)
  %6336 = trunc i32 %6335 to i8
  %6337 = and i8 %6336, 1
  %6338 = xor i8 %6337, 1
  store i8 %6338, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6339 = lshr i32 %6333, 31
  %6340 = trunc i32 %6339 to i8
  store i8 %6340, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6341 = add i64 %6325, -548
  %6342 = add i64 %6324, 12
  store i64 %6342, i64* %3, align 8
  %6343 = inttoptr i64 %6341 to i32*
  store i32 %6333, i32* %6343, align 4
  %6344 = load i64, i64* %3, align 8
  %6345 = add i64 %6344, 17
  store i64 %6345, i64* %3, align 8
  br label %block_.L_456bb4

block_.L_456ba8:                                  ; preds = %block_.L_456b6d
  %6346 = and i64 %6330, 4294967294
  store i64 %6346, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6347 = and i32 %6329, 254
  %6348 = tail call i32 @llvm.ctpop.i32(i32 %6347)
  %6349 = trunc i32 %6348 to i8
  %6350 = and i8 %6349, 1
  %6351 = xor i8 %6350, 1
  store i8 %6351, i8* %26, align 1
  %6352 = icmp ult i32 %6329, 2
  %6353 = zext i1 %6352 to i8
  store i8 %6353, i8* %34, align 1
  %6354 = lshr i32 %6329, 31
  %6355 = trunc i32 %6354 to i8
  store i8 %6355, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6356 = add i64 %6325, -548
  %6357 = trunc i64 %6346 to i32
  %6358 = add i64 %6324, 12
  store i64 %6358, i64* %3, align 8
  %6359 = inttoptr i64 %6356 to i32*
  store i32 %6357, i32* %6359, align 4
  %.pre470 = load i64, i64* %3, align 8
  br label %block_.L_456bb4

block_.L_456bb4:                                  ; preds = %block_.L_456ba8, %block_456b97
  %6360 = phi i64 [ %.pre470, %block_.L_456ba8 ], [ %6345, %block_456b97 ]
  %6361 = load i64, i64* %RBP.i, align 8
  %6362 = add i64 %6361, -548
  %6363 = add i64 %6360, 6
  store i64 %6363, i64* %3, align 8
  %6364 = inttoptr i64 %6362 to i32*
  %6365 = load i32, i32* %6364, align 4
  %6366 = zext i32 %6365 to i64
  store i64 %6366, i64* %RAX.i3176, align 8
  %6367 = sext i32 %6365 to i64
  store i64 %6367, i64* %RCX.i7756, align 8
  %6368 = add i64 %6361, -544
  %6369 = add i64 %6360, 16
  store i64 %6369, i64* %3, align 8
  %6370 = inttoptr i64 %6368 to i64*
  %6371 = load i64, i64* %6370, align 8
  store i64 %6371, i64* %RDX.i7753, align 8
  %6372 = shl nsw i64 %6367, 3
  %6373 = add i64 %6372, %6371
  %6374 = add i64 %6360, 20
  store i64 %6374, i64* %3, align 8
  %6375 = inttoptr i64 %6373 to i64*
  %6376 = load i64, i64* %6375, align 8
  store i64 %6376, i64* %RCX.i7756, align 8
  %6377 = add i64 %6360, 23
  store i64 %6377, i64* %3, align 8
  %6378 = inttoptr i64 %6376 to i16*
  %6379 = load i16, i16* %6378, align 2
  store i16 %6379, i16* %SI.i6180, align 2
  %6380 = add i64 %6361, -16
  %6381 = add i64 %6360, 27
  store i64 %6381, i64* %3, align 8
  %6382 = inttoptr i64 %6380 to i64*
  %6383 = load i64, i64* %6382, align 8
  store i64 %6383, i64* %RCX.i7756, align 8
  %6384 = add i64 %6383, 4848
  %6385 = add i64 %6360, 34
  store i64 %6385, i64* %3, align 8
  %6386 = inttoptr i64 %6384 to i64*
  %6387 = load i64, i64* %6386, align 8
  store i64 %6387, i64* %RCX.i7756, align 8
  %6388 = add i64 %6387, 8
  %6389 = add i64 %6360, 38
  store i64 %6389, i64* %3, align 8
  %6390 = inttoptr i64 %6388 to i64*
  %6391 = load i64, i64* %6390, align 8
  store i64 %6391, i64* %RCX.i7756, align 8
  %6392 = add i64 %6361, -52
  %6393 = add i64 %6360, 42
  store i64 %6393, i64* %3, align 8
  %6394 = inttoptr i64 %6392 to i32*
  %6395 = load i32, i32* %6394, align 4
  %6396 = sext i32 %6395 to i64
  store i64 %6396, i64* %RDI.i732, align 8
  %6397 = shl nsw i64 %6396, 3
  %6398 = add i64 %6397, %6391
  %6399 = add i64 %6360, 46
  store i64 %6399, i64* %3, align 8
  %6400 = inttoptr i64 %6398 to i64*
  %6401 = load i64, i64* %6400, align 8
  store i64 %6401, i64* %RCX.i7756, align 8
  %6402 = add i64 %6361, -56
  %6403 = add i64 %6360, 50
  store i64 %6403, i64* %3, align 8
  %6404 = inttoptr i64 %6402 to i32*
  %6405 = load i32, i32* %6404, align 4
  %6406 = sext i32 %6405 to i64
  store i64 %6406, i64* %RDI.i732, align 8
  %6407 = shl nsw i64 %6406, 3
  %6408 = add i64 %6407, %6401
  %6409 = add i64 %6360, 54
  store i64 %6409, i64* %3, align 8
  %6410 = inttoptr i64 %6408 to i64*
  %6411 = load i64, i64* %6410, align 8
  store i64 %6411, i64* %RCX.i7756, align 8
  %6412 = add i64 %6360, 57
  store i64 %6412, i64* %3, align 8
  %6413 = inttoptr i64 %6411 to i16*
  store i16 %6379, i16* %6413, align 2
  %6414 = load i64, i64* %RBP.i, align 8
  %6415 = add i64 %6414, -48
  %6416 = load i64, i64* %3, align 8
  %6417 = add i64 %6416, 4
  store i64 %6417, i64* %3, align 8
  %6418 = inttoptr i64 %6415 to i64*
  %6419 = load i64, i64* %6418, align 8
  store i64 %6419, i64* %RCX.i7756, align 8
  %6420 = add i64 %6419, 6504
  %6421 = add i64 %6416, 11
  store i64 %6421, i64* %3, align 8
  %6422 = inttoptr i64 %6420 to i64*
  %6423 = load i64, i64* %6422, align 8
  store i64 %6423, i64* %RCX.i7756, align 8
  %6424 = add i64 %6423, 8
  %6425 = add i64 %6416, 15
  store i64 %6425, i64* %3, align 8
  %6426 = inttoptr i64 %6424 to i64*
  %6427 = load i64, i64* %6426, align 8
  store i64 %6427, i64* %RCX.i7756, align 8
  %6428 = add i64 %6414, -52
  %6429 = add i64 %6416, 18
  store i64 %6429, i64* %3, align 8
  %6430 = inttoptr i64 %6428 to i32*
  %6431 = load i32, i32* %6430, align 4
  %6432 = and i32 %6431, 2
  %6433 = zext i32 %6432 to i64
  store i64 %6433, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6434 = tail call i32 @llvm.ctpop.i32(i32 %6432)
  %6435 = trunc i32 %6434 to i8
  %6436 = xor i8 %6435, 1
  store i8 %6436, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit632 = lshr exact i32 %6432, 1
  %6437 = trunc i32 %.lobit632 to i8
  %6438 = xor i8 %6437, 1
  store i8 %6438, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6439 = add i64 %6414, -560
  %6440 = add i64 %6416, 31
  store i64 %6440, i64* %3, align 8
  %6441 = inttoptr i64 %6439 to i64*
  store i64 %6427, i64* %6441, align 8
  %6442 = load i64, i64* %3, align 8
  %6443 = load i8, i8* %34, align 1
  %6444 = icmp ne i8 %6443, 0
  %.v776 = select i1 %6444, i64 23, i64 6
  %6445 = add i64 %6442, %.v776
  %cmpBr_456c0c = icmp eq i8 %6443, 1
  %6446 = load i64, i64* %RBP.i, align 8
  %6447 = add i64 %6446, -52
  %6448 = add i64 %6445, 3
  store i64 %6448, i64* %3, align 8
  %6449 = inttoptr i64 %6447 to i32*
  %6450 = load i32, i32* %6449, align 4
  %6451 = zext i32 %6450 to i64
  store i64 %6451, i64* %RAX.i3176, align 8
  %6452 = add i64 %6445, 6
  store i64 %6452, i64* %3, align 8
  br i1 %cmpBr_456c0c, label %block_.L_456c23, label %block_456c12

block_456c12:                                     ; preds = %block_.L_456bb4
  %6453 = or i64 %6451, 1
  %6454 = trunc i64 %6453 to i32
  store i64 %6453, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6455 = and i32 %6454, 255
  %6456 = tail call i32 @llvm.ctpop.i32(i32 %6455)
  %6457 = trunc i32 %6456 to i8
  %6458 = and i8 %6457, 1
  %6459 = xor i8 %6458, 1
  store i8 %6459, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6460 = lshr i32 %6454, 31
  %6461 = trunc i32 %6460 to i8
  store i8 %6461, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6462 = add i64 %6446, -564
  %6463 = add i64 %6445, 12
  store i64 %6463, i64* %3, align 8
  %6464 = inttoptr i64 %6462 to i32*
  store i32 %6454, i32* %6464, align 4
  %6465 = load i64, i64* %3, align 8
  %6466 = add i64 %6465, 17
  store i64 %6466, i64* %3, align 8
  br label %block_.L_456c2f

block_.L_456c23:                                  ; preds = %block_.L_456bb4
  %6467 = and i64 %6451, 4294967294
  store i64 %6467, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6468 = and i32 %6450, 254
  %6469 = tail call i32 @llvm.ctpop.i32(i32 %6468)
  %6470 = trunc i32 %6469 to i8
  %6471 = and i8 %6470, 1
  %6472 = xor i8 %6471, 1
  store i8 %6472, i8* %26, align 1
  %6473 = icmp ult i32 %6450, 2
  %6474 = zext i1 %6473 to i8
  store i8 %6474, i8* %34, align 1
  %6475 = lshr i32 %6450, 31
  %6476 = trunc i32 %6475 to i8
  store i8 %6476, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6477 = add i64 %6446, -564
  %6478 = trunc i64 %6467 to i32
  %6479 = add i64 %6445, 12
  store i64 %6479, i64* %3, align 8
  %6480 = inttoptr i64 %6477 to i32*
  store i32 %6478, i32* %6480, align 4
  %.pre471 = load i64, i64* %3, align 8
  br label %block_.L_456c2f

block_.L_456c2f:                                  ; preds = %block_.L_456c23, %block_456c12
  %6481 = phi i64 [ %.pre471, %block_.L_456c23 ], [ %6466, %block_456c12 ]
  %6482 = load i64, i64* %RBP.i, align 8
  %6483 = add i64 %6482, -564
  %6484 = add i64 %6481, 6
  store i64 %6484, i64* %3, align 8
  %6485 = inttoptr i64 %6483 to i32*
  %6486 = load i32, i32* %6485, align 4
  %6487 = zext i32 %6486 to i64
  store i64 %6487, i64* %RAX.i3176, align 8
  %6488 = sext i32 %6486 to i64
  store i64 %6488, i64* %RCX.i7756, align 8
  %6489 = add i64 %6482, -560
  %6490 = add i64 %6481, 16
  store i64 %6490, i64* %3, align 8
  %6491 = inttoptr i64 %6489 to i64*
  %6492 = load i64, i64* %6491, align 8
  store i64 %6492, i64* %RDX.i7753, align 8
  %6493 = shl nsw i64 %6488, 3
  %6494 = add i64 %6493, %6492
  %6495 = add i64 %6481, 20
  store i64 %6495, i64* %3, align 8
  %6496 = inttoptr i64 %6494 to i64*
  %6497 = load i64, i64* %6496, align 8
  store i64 %6497, i64* %RCX.i7756, align 8
  %6498 = add i64 %6482, -56
  %6499 = add i64 %6481, 23
  store i64 %6499, i64* %3, align 8
  %6500 = inttoptr i64 %6498 to i32*
  %6501 = load i32, i32* %6500, align 4
  %6502 = and i32 %6501, 2
  %6503 = zext i32 %6502 to i64
  store i64 %6503, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6504 = tail call i32 @llvm.ctpop.i32(i32 %6502)
  %6505 = trunc i32 %6504 to i8
  %6506 = xor i8 %6505, 1
  store i8 %6506, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit633 = lshr exact i32 %6502, 1
  %6507 = trunc i32 %.lobit633 to i8
  %6508 = xor i8 %6507, 1
  store i8 %6508, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6509 = add i64 %6482, -576
  %6510 = add i64 %6481, 36
  store i64 %6510, i64* %3, align 8
  %6511 = inttoptr i64 %6509 to i64*
  store i64 %6497, i64* %6511, align 8
  %6512 = load i64, i64* %3, align 8
  %6513 = load i8, i8* %34, align 1
  %6514 = icmp ne i8 %6513, 0
  %.v777 = select i1 %6514, i64 23, i64 6
  %6515 = add i64 %6512, %.v777
  %cmpBr_456c53 = icmp eq i8 %6513, 1
  %6516 = load i64, i64* %RBP.i, align 8
  %6517 = add i64 %6516, -56
  %6518 = add i64 %6515, 3
  store i64 %6518, i64* %3, align 8
  %6519 = inttoptr i64 %6517 to i32*
  %6520 = load i32, i32* %6519, align 4
  %6521 = zext i32 %6520 to i64
  store i64 %6521, i64* %RAX.i3176, align 8
  %6522 = add i64 %6515, 6
  store i64 %6522, i64* %3, align 8
  br i1 %cmpBr_456c53, label %block_.L_456c6a, label %block_456c59

block_456c59:                                     ; preds = %block_.L_456c2f
  %6523 = or i64 %6521, 1
  %6524 = trunc i64 %6523 to i32
  store i64 %6523, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6525 = and i32 %6524, 255
  %6526 = tail call i32 @llvm.ctpop.i32(i32 %6525)
  %6527 = trunc i32 %6526 to i8
  %6528 = and i8 %6527, 1
  %6529 = xor i8 %6528, 1
  store i8 %6529, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6530 = lshr i32 %6524, 31
  %6531 = trunc i32 %6530 to i8
  store i8 %6531, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6532 = add i64 %6516, -580
  %6533 = add i64 %6515, 12
  store i64 %6533, i64* %3, align 8
  %6534 = inttoptr i64 %6532 to i32*
  store i32 %6524, i32* %6534, align 4
  %6535 = load i64, i64* %3, align 8
  %6536 = add i64 %6535, 17
  store i64 %6536, i64* %3, align 8
  br label %block_.L_456c76

block_.L_456c6a:                                  ; preds = %block_.L_456c2f
  %6537 = and i64 %6521, 4294967294
  store i64 %6537, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6538 = and i32 %6520, 254
  %6539 = tail call i32 @llvm.ctpop.i32(i32 %6538)
  %6540 = trunc i32 %6539 to i8
  %6541 = and i8 %6540, 1
  %6542 = xor i8 %6541, 1
  store i8 %6542, i8* %26, align 1
  %6543 = icmp ult i32 %6520, 2
  %6544 = zext i1 %6543 to i8
  store i8 %6544, i8* %34, align 1
  %6545 = lshr i32 %6520, 31
  %6546 = trunc i32 %6545 to i8
  store i8 %6546, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6547 = add i64 %6516, -580
  %6548 = trunc i64 %6537 to i32
  %6549 = add i64 %6515, 12
  store i64 %6549, i64* %3, align 8
  %6550 = inttoptr i64 %6547 to i32*
  store i32 %6548, i32* %6550, align 4
  %.pre472 = load i64, i64* %3, align 8
  br label %block_.L_456c76

block_.L_456c76:                                  ; preds = %block_.L_456c6a, %block_456c59
  %6551 = phi i64 [ %.pre472, %block_.L_456c6a ], [ %6536, %block_456c59 ]
  %6552 = load i64, i64* %RBP.i, align 8
  %6553 = add i64 %6552, -580
  %6554 = add i64 %6551, 6
  store i64 %6554, i64* %3, align 8
  %6555 = inttoptr i64 %6553 to i32*
  %6556 = load i32, i32* %6555, align 4
  %6557 = zext i32 %6556 to i64
  store i64 %6557, i64* %RAX.i3176, align 8
  %6558 = sext i32 %6556 to i64
  store i64 %6558, i64* %RCX.i7756, align 8
  %6559 = add i64 %6552, -576
  %6560 = add i64 %6551, 16
  store i64 %6560, i64* %3, align 8
  %6561 = inttoptr i64 %6559 to i64*
  %6562 = load i64, i64* %6561, align 8
  store i64 %6562, i64* %RDX.i7753, align 8
  %6563 = shl nsw i64 %6558, 3
  %6564 = add i64 %6563, %6562
  %6565 = add i64 %6551, 20
  store i64 %6565, i64* %3, align 8
  %6566 = inttoptr i64 %6564 to i64*
  %6567 = load i64, i64* %6566, align 8
  store i64 %6567, i64* %RCX.i7756, align 8
  %6568 = add i64 %6567, 2
  %6569 = add i64 %6551, 24
  store i64 %6569, i64* %3, align 8
  %6570 = inttoptr i64 %6568 to i16*
  %6571 = load i16, i16* %6570, align 2
  store i16 %6571, i16* %SI.i6180, align 2
  %6572 = add i64 %6552, -16
  %6573 = add i64 %6551, 28
  store i64 %6573, i64* %3, align 8
  %6574 = inttoptr i64 %6572 to i64*
  %6575 = load i64, i64* %6574, align 8
  store i64 %6575, i64* %RCX.i7756, align 8
  %6576 = add i64 %6575, 4848
  %6577 = add i64 %6551, 35
  store i64 %6577, i64* %3, align 8
  %6578 = inttoptr i64 %6576 to i64*
  %6579 = load i64, i64* %6578, align 8
  store i64 %6579, i64* %RCX.i7756, align 8
  %6580 = add i64 %6579, 8
  %6581 = add i64 %6551, 39
  store i64 %6581, i64* %3, align 8
  %6582 = inttoptr i64 %6580 to i64*
  %6583 = load i64, i64* %6582, align 8
  store i64 %6583, i64* %RCX.i7756, align 8
  %6584 = add i64 %6552, -52
  %6585 = add i64 %6551, 43
  store i64 %6585, i64* %3, align 8
  %6586 = inttoptr i64 %6584 to i32*
  %6587 = load i32, i32* %6586, align 4
  %6588 = sext i32 %6587 to i64
  store i64 %6588, i64* %RDI.i732, align 8
  %6589 = shl nsw i64 %6588, 3
  %6590 = add i64 %6589, %6583
  %6591 = add i64 %6551, 47
  store i64 %6591, i64* %3, align 8
  %6592 = inttoptr i64 %6590 to i64*
  %6593 = load i64, i64* %6592, align 8
  store i64 %6593, i64* %RCX.i7756, align 8
  %6594 = add i64 %6552, -56
  %6595 = add i64 %6551, 51
  store i64 %6595, i64* %3, align 8
  %6596 = inttoptr i64 %6594 to i32*
  %6597 = load i32, i32* %6596, align 4
  %6598 = sext i32 %6597 to i64
  store i64 %6598, i64* %RDI.i732, align 8
  %6599 = shl nsw i64 %6598, 3
  %6600 = add i64 %6599, %6593
  %6601 = add i64 %6551, 55
  store i64 %6601, i64* %3, align 8
  %6602 = inttoptr i64 %6600 to i64*
  %6603 = load i64, i64* %6602, align 8
  store i64 %6603, i64* %RCX.i7756, align 8
  %6604 = add i64 %6603, 2
  %6605 = add i64 %6551, 59
  store i64 %6605, i64* %3, align 8
  %6606 = inttoptr i64 %6604 to i16*
  store i16 %6571, i16* %6606, align 2
  %6607 = load i64, i64* %RBP.i, align 8
  %6608 = add i64 %6607, -48
  %6609 = load i64, i64* %3, align 8
  %6610 = add i64 %6609, 4
  store i64 %6610, i64* %3, align 8
  %6611 = inttoptr i64 %6608 to i64*
  %6612 = load i64, i64* %6611, align 8
  store i64 %6612, i64* %RCX.i7756, align 8
  %6613 = add i64 %6612, 6480
  %6614 = add i64 %6609, 11
  store i64 %6614, i64* %3, align 8
  %6615 = inttoptr i64 %6613 to i64*
  %6616 = load i64, i64* %6615, align 8
  store i64 %6616, i64* %RCX.i7756, align 8
  %6617 = add i64 %6609, 14
  store i64 %6617, i64* %3, align 8
  %6618 = inttoptr i64 %6616 to i64*
  %6619 = load i64, i64* %6618, align 8
  store i64 %6619, i64* %RCX.i7756, align 8
  %6620 = add i64 %6607, -52
  %6621 = add i64 %6609, 17
  store i64 %6621, i64* %3, align 8
  %6622 = inttoptr i64 %6620 to i32*
  %6623 = load i32, i32* %6622, align 4
  %6624 = and i32 %6623, 2
  %6625 = zext i32 %6624 to i64
  store i64 %6625, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6626 = tail call i32 @llvm.ctpop.i32(i32 %6624)
  %6627 = trunc i32 %6626 to i8
  %6628 = xor i8 %6627, 1
  store i8 %6628, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit634 = lshr exact i32 %6624, 1
  %6629 = trunc i32 %.lobit634 to i8
  %6630 = xor i8 %6629, 1
  store i8 %6630, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6631 = add i64 %6607, -592
  %6632 = add i64 %6609, 30
  store i64 %6632, i64* %3, align 8
  %6633 = inttoptr i64 %6631 to i64*
  store i64 %6619, i64* %6633, align 8
  %6634 = load i64, i64* %3, align 8
  %6635 = load i8, i8* %34, align 1
  %6636 = icmp ne i8 %6635, 0
  %.v778 = select i1 %6636, i64 23, i64 6
  %6637 = add i64 %6634, %.v778
  %cmpBr_456ccf = icmp eq i8 %6635, 1
  %6638 = load i64, i64* %RBP.i, align 8
  %6639 = add i64 %6638, -52
  %6640 = add i64 %6637, 3
  store i64 %6640, i64* %3, align 8
  %6641 = inttoptr i64 %6639 to i32*
  %6642 = load i32, i32* %6641, align 4
  %6643 = zext i32 %6642 to i64
  store i64 %6643, i64* %RAX.i3176, align 8
  %6644 = add i64 %6637, 6
  store i64 %6644, i64* %3, align 8
  br i1 %cmpBr_456ccf, label %block_.L_456ce6, label %block_456cd5

block_456cd5:                                     ; preds = %block_.L_456c76
  %6645 = or i64 %6643, 1
  %6646 = trunc i64 %6645 to i32
  store i64 %6645, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6647 = and i32 %6646, 255
  %6648 = tail call i32 @llvm.ctpop.i32(i32 %6647)
  %6649 = trunc i32 %6648 to i8
  %6650 = and i8 %6649, 1
  %6651 = xor i8 %6650, 1
  store i8 %6651, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6652 = lshr i32 %6646, 31
  %6653 = trunc i32 %6652 to i8
  store i8 %6653, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6654 = add i64 %6638, -596
  %6655 = add i64 %6637, 12
  store i64 %6655, i64* %3, align 8
  %6656 = inttoptr i64 %6654 to i32*
  store i32 %6646, i32* %6656, align 4
  %6657 = load i64, i64* %3, align 8
  %6658 = add i64 %6657, 17
  store i64 %6658, i64* %3, align 8
  br label %block_.L_456cf2

block_.L_456ce6:                                  ; preds = %block_.L_456c76
  %6659 = and i64 %6643, 4294967294
  store i64 %6659, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6660 = and i32 %6642, 254
  %6661 = tail call i32 @llvm.ctpop.i32(i32 %6660)
  %6662 = trunc i32 %6661 to i8
  %6663 = and i8 %6662, 1
  %6664 = xor i8 %6663, 1
  store i8 %6664, i8* %26, align 1
  %6665 = icmp ult i32 %6642, 2
  %6666 = zext i1 %6665 to i8
  store i8 %6666, i8* %34, align 1
  %6667 = lshr i32 %6642, 31
  %6668 = trunc i32 %6667 to i8
  store i8 %6668, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6669 = add i64 %6638, -596
  %6670 = trunc i64 %6659 to i32
  %6671 = add i64 %6637, 12
  store i64 %6671, i64* %3, align 8
  %6672 = inttoptr i64 %6669 to i32*
  store i32 %6670, i32* %6672, align 4
  %.pre473 = load i64, i64* %3, align 8
  br label %block_.L_456cf2

block_.L_456cf2:                                  ; preds = %block_.L_456ce6, %block_456cd5
  %6673 = phi i64 [ %.pre473, %block_.L_456ce6 ], [ %6658, %block_456cd5 ]
  %6674 = load i64, i64* %RBP.i, align 8
  %6675 = add i64 %6674, -596
  %6676 = add i64 %6673, 6
  store i64 %6676, i64* %3, align 8
  %6677 = inttoptr i64 %6675 to i32*
  %6678 = load i32, i32* %6677, align 4
  %6679 = zext i32 %6678 to i64
  store i64 %6679, i64* %RAX.i3176, align 8
  %6680 = sext i32 %6678 to i64
  store i64 %6680, i64* %RCX.i7756, align 8
  %6681 = add i64 %6674, -592
  %6682 = add i64 %6673, 16
  store i64 %6682, i64* %3, align 8
  %6683 = inttoptr i64 %6681 to i64*
  %6684 = load i64, i64* %6683, align 8
  store i64 %6684, i64* %RDX.i7753, align 8
  %6685 = shl nsw i64 %6680, 3
  %6686 = add i64 %6685, %6684
  %6687 = add i64 %6673, 20
  store i64 %6687, i64* %3, align 8
  %6688 = inttoptr i64 %6686 to i64*
  %6689 = load i64, i64* %6688, align 8
  store i64 %6689, i64* %RCX.i7756, align 8
  %6690 = add i64 %6674, -56
  %6691 = add i64 %6673, 23
  store i64 %6691, i64* %3, align 8
  %6692 = inttoptr i64 %6690 to i32*
  %6693 = load i32, i32* %6692, align 4
  %6694 = and i32 %6693, 2
  %6695 = zext i32 %6694 to i64
  store i64 %6695, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6696 = tail call i32 @llvm.ctpop.i32(i32 %6694)
  %6697 = trunc i32 %6696 to i8
  %6698 = xor i8 %6697, 1
  store i8 %6698, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit635 = lshr exact i32 %6694, 1
  %6699 = trunc i32 %.lobit635 to i8
  %6700 = xor i8 %6699, 1
  store i8 %6700, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6701 = add i64 %6674, -608
  %6702 = add i64 %6673, 36
  store i64 %6702, i64* %3, align 8
  %6703 = inttoptr i64 %6701 to i64*
  store i64 %6689, i64* %6703, align 8
  %6704 = load i64, i64* %3, align 8
  %6705 = load i8, i8* %34, align 1
  %6706 = icmp ne i8 %6705, 0
  %.v779 = select i1 %6706, i64 23, i64 6
  %6707 = add i64 %6704, %.v779
  %cmpBr_456d16 = icmp eq i8 %6705, 1
  %6708 = load i64, i64* %RBP.i, align 8
  %6709 = add i64 %6708, -56
  %6710 = add i64 %6707, 3
  store i64 %6710, i64* %3, align 8
  %6711 = inttoptr i64 %6709 to i32*
  %6712 = load i32, i32* %6711, align 4
  %6713 = zext i32 %6712 to i64
  store i64 %6713, i64* %RAX.i3176, align 8
  %6714 = add i64 %6707, 6
  store i64 %6714, i64* %3, align 8
  br i1 %cmpBr_456d16, label %block_.L_456d2d, label %block_456d1c

block_456d1c:                                     ; preds = %block_.L_456cf2
  %6715 = or i64 %6713, 1
  %6716 = trunc i64 %6715 to i32
  store i64 %6715, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6717 = and i32 %6716, 255
  %6718 = tail call i32 @llvm.ctpop.i32(i32 %6717)
  %6719 = trunc i32 %6718 to i8
  %6720 = and i8 %6719, 1
  %6721 = xor i8 %6720, 1
  store i8 %6721, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6722 = lshr i32 %6716, 31
  %6723 = trunc i32 %6722 to i8
  store i8 %6723, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6724 = add i64 %6708, -612
  %6725 = add i64 %6707, 12
  store i64 %6725, i64* %3, align 8
  %6726 = inttoptr i64 %6724 to i32*
  store i32 %6716, i32* %6726, align 4
  %6727 = load i64, i64* %3, align 8
  %6728 = add i64 %6727, 17
  store i64 %6728, i64* %3, align 8
  br label %block_.L_456d39

block_.L_456d2d:                                  ; preds = %block_.L_456cf2
  %6729 = and i64 %6713, 4294967294
  store i64 %6729, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6730 = and i32 %6712, 254
  %6731 = tail call i32 @llvm.ctpop.i32(i32 %6730)
  %6732 = trunc i32 %6731 to i8
  %6733 = and i8 %6732, 1
  %6734 = xor i8 %6733, 1
  store i8 %6734, i8* %26, align 1
  %6735 = icmp ult i32 %6712, 2
  %6736 = zext i1 %6735 to i8
  store i8 %6736, i8* %34, align 1
  %6737 = lshr i32 %6712, 31
  %6738 = trunc i32 %6737 to i8
  store i8 %6738, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6739 = add i64 %6708, -612
  %6740 = trunc i64 %6729 to i32
  %6741 = add i64 %6707, 12
  store i64 %6741, i64* %3, align 8
  %6742 = inttoptr i64 %6739 to i32*
  store i32 %6740, i32* %6742, align 4
  %.pre474 = load i64, i64* %3, align 8
  br label %block_.L_456d39

block_.L_456d39:                                  ; preds = %block_.L_456d2d, %block_456d1c
  %6743 = phi i64 [ %.pre474, %block_.L_456d2d ], [ %6728, %block_456d1c ]
  %6744 = load i64, i64* %RBP.i, align 8
  %6745 = add i64 %6744, -612
  %6746 = add i64 %6743, 6
  store i64 %6746, i64* %3, align 8
  %6747 = inttoptr i64 %6745 to i32*
  %6748 = load i32, i32* %6747, align 4
  %6749 = zext i32 %6748 to i64
  store i64 %6749, i64* %RAX.i3176, align 8
  %6750 = sext i32 %6748 to i64
  store i64 %6750, i64* %RCX.i7756, align 8
  %6751 = add i64 %6744, -608
  %6752 = add i64 %6743, 16
  store i64 %6752, i64* %3, align 8
  %6753 = inttoptr i64 %6751 to i64*
  %6754 = load i64, i64* %6753, align 8
  store i64 %6754, i64* %RDX.i7753, align 8
  %6755 = shl nsw i64 %6750, 1
  %6756 = add i64 %6755, %6754
  %6757 = add i64 %6743, 20
  store i64 %6757, i64* %3, align 8
  %6758 = inttoptr i64 %6756 to i16*
  %6759 = load i16, i16* %6758, align 2
  store i16 %6759, i16* %SI.i6180, align 2
  %6760 = add i64 %6744, -16
  %6761 = add i64 %6743, 24
  store i64 %6761, i64* %3, align 8
  %6762 = inttoptr i64 %6760 to i64*
  %6763 = load i64, i64* %6762, align 8
  store i64 %6763, i64* %RCX.i7756, align 8
  %6764 = add i64 %6763, 4832
  %6765 = add i64 %6743, 31
  store i64 %6765, i64* %3, align 8
  %6766 = inttoptr i64 %6764 to i64*
  %6767 = load i64, i64* %6766, align 8
  store i64 %6767, i64* %RCX.i7756, align 8
  %6768 = add i64 %6743, 34
  store i64 %6768, i64* %3, align 8
  %6769 = inttoptr i64 %6767 to i64*
  %6770 = load i64, i64* %6769, align 8
  store i64 %6770, i64* %RCX.i7756, align 8
  %6771 = add i64 %6744, -52
  %6772 = add i64 %6743, 38
  store i64 %6772, i64* %3, align 8
  %6773 = inttoptr i64 %6771 to i32*
  %6774 = load i32, i32* %6773, align 4
  %6775 = sext i32 %6774 to i64
  store i64 %6775, i64* %RDI.i732, align 8
  %6776 = shl nsw i64 %6775, 3
  %6777 = add i64 %6776, %6770
  %6778 = add i64 %6743, 42
  store i64 %6778, i64* %3, align 8
  %6779 = inttoptr i64 %6777 to i64*
  %6780 = load i64, i64* %6779, align 8
  store i64 %6780, i64* %RCX.i7756, align 8
  %6781 = add i64 %6744, -56
  %6782 = add i64 %6743, 46
  store i64 %6782, i64* %3, align 8
  %6783 = inttoptr i64 %6781 to i32*
  %6784 = load i32, i32* %6783, align 4
  %6785 = sext i32 %6784 to i64
  store i64 %6785, i64* %RDI.i732, align 8
  %6786 = shl nsw i64 %6785, 1
  %6787 = add i64 %6786, %6780
  %6788 = add i64 %6743, 50
  store i64 %6788, i64* %3, align 8
  %6789 = inttoptr i64 %6787 to i16*
  store i16 %6759, i16* %6789, align 2
  %6790 = load i64, i64* %RBP.i, align 8
  %6791 = add i64 %6790, -48
  %6792 = load i64, i64* %3, align 8
  %6793 = add i64 %6792, 4
  store i64 %6793, i64* %3, align 8
  %6794 = inttoptr i64 %6791 to i64*
  %6795 = load i64, i64* %6794, align 8
  store i64 %6795, i64* %RCX.i7756, align 8
  %6796 = add i64 %6795, 6480
  %6797 = add i64 %6792, 11
  store i64 %6797, i64* %3, align 8
  %6798 = inttoptr i64 %6796 to i64*
  %6799 = load i64, i64* %6798, align 8
  store i64 %6799, i64* %RCX.i7756, align 8
  %6800 = add i64 %6799, 8
  %6801 = add i64 %6792, 15
  store i64 %6801, i64* %3, align 8
  %6802 = inttoptr i64 %6800 to i64*
  %6803 = load i64, i64* %6802, align 8
  store i64 %6803, i64* %RCX.i7756, align 8
  %6804 = add i64 %6790, -52
  %6805 = add i64 %6792, 18
  store i64 %6805, i64* %3, align 8
  %6806 = inttoptr i64 %6804 to i32*
  %6807 = load i32, i32* %6806, align 4
  %6808 = and i32 %6807, 2
  %6809 = zext i32 %6808 to i64
  store i64 %6809, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6810 = tail call i32 @llvm.ctpop.i32(i32 %6808)
  %6811 = trunc i32 %6810 to i8
  %6812 = xor i8 %6811, 1
  store i8 %6812, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit636 = lshr exact i32 %6808, 1
  %6813 = trunc i32 %.lobit636 to i8
  %6814 = xor i8 %6813, 1
  store i8 %6814, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6815 = add i64 %6790, -624
  %6816 = add i64 %6792, 31
  store i64 %6816, i64* %3, align 8
  %6817 = inttoptr i64 %6815 to i64*
  store i64 %6803, i64* %6817, align 8
  %6818 = load i64, i64* %3, align 8
  %6819 = load i8, i8* %34, align 1
  %6820 = icmp ne i8 %6819, 0
  %.v780 = select i1 %6820, i64 23, i64 6
  %6821 = add i64 %6818, %.v780
  %cmpBr_456d8a = icmp eq i8 %6819, 1
  %6822 = load i64, i64* %RBP.i, align 8
  %6823 = add i64 %6822, -52
  %6824 = add i64 %6821, 3
  store i64 %6824, i64* %3, align 8
  %6825 = inttoptr i64 %6823 to i32*
  %6826 = load i32, i32* %6825, align 4
  %6827 = zext i32 %6826 to i64
  store i64 %6827, i64* %RAX.i3176, align 8
  %6828 = add i64 %6821, 6
  store i64 %6828, i64* %3, align 8
  br i1 %cmpBr_456d8a, label %block_.L_456da1, label %block_456d90

block_456d90:                                     ; preds = %block_.L_456d39
  %6829 = or i64 %6827, 1
  %6830 = trunc i64 %6829 to i32
  store i64 %6829, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6831 = and i32 %6830, 255
  %6832 = tail call i32 @llvm.ctpop.i32(i32 %6831)
  %6833 = trunc i32 %6832 to i8
  %6834 = and i8 %6833, 1
  %6835 = xor i8 %6834, 1
  store i8 %6835, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6836 = lshr i32 %6830, 31
  %6837 = trunc i32 %6836 to i8
  store i8 %6837, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6838 = add i64 %6822, -628
  %6839 = add i64 %6821, 12
  store i64 %6839, i64* %3, align 8
  %6840 = inttoptr i64 %6838 to i32*
  store i32 %6830, i32* %6840, align 4
  %6841 = load i64, i64* %3, align 8
  %6842 = add i64 %6841, 17
  store i64 %6842, i64* %3, align 8
  br label %block_.L_456dad

block_.L_456da1:                                  ; preds = %block_.L_456d39
  %6843 = and i64 %6827, 4294967294
  store i64 %6843, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6844 = and i32 %6826, 254
  %6845 = tail call i32 @llvm.ctpop.i32(i32 %6844)
  %6846 = trunc i32 %6845 to i8
  %6847 = and i8 %6846, 1
  %6848 = xor i8 %6847, 1
  store i8 %6848, i8* %26, align 1
  %6849 = icmp ult i32 %6826, 2
  %6850 = zext i1 %6849 to i8
  store i8 %6850, i8* %34, align 1
  %6851 = lshr i32 %6826, 31
  %6852 = trunc i32 %6851 to i8
  store i8 %6852, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6853 = add i64 %6822, -628
  %6854 = trunc i64 %6843 to i32
  %6855 = add i64 %6821, 12
  store i64 %6855, i64* %3, align 8
  %6856 = inttoptr i64 %6853 to i32*
  store i32 %6854, i32* %6856, align 4
  %.pre475 = load i64, i64* %3, align 8
  br label %block_.L_456dad

block_.L_456dad:                                  ; preds = %block_.L_456da1, %block_456d90
  %6857 = phi i64 [ %.pre475, %block_.L_456da1 ], [ %6842, %block_456d90 ]
  %6858 = load i64, i64* %RBP.i, align 8
  %6859 = add i64 %6858, -628
  %6860 = add i64 %6857, 6
  store i64 %6860, i64* %3, align 8
  %6861 = inttoptr i64 %6859 to i32*
  %6862 = load i32, i32* %6861, align 4
  %6863 = zext i32 %6862 to i64
  store i64 %6863, i64* %RAX.i3176, align 8
  %6864 = sext i32 %6862 to i64
  store i64 %6864, i64* %RCX.i7756, align 8
  %6865 = add i64 %6858, -624
  %6866 = add i64 %6857, 16
  store i64 %6866, i64* %3, align 8
  %6867 = inttoptr i64 %6865 to i64*
  %6868 = load i64, i64* %6867, align 8
  store i64 %6868, i64* %RDX.i7753, align 8
  %6869 = shl nsw i64 %6864, 3
  %6870 = add i64 %6869, %6868
  %6871 = add i64 %6857, 20
  store i64 %6871, i64* %3, align 8
  %6872 = inttoptr i64 %6870 to i64*
  %6873 = load i64, i64* %6872, align 8
  store i64 %6873, i64* %RCX.i7756, align 8
  %6874 = add i64 %6858, -56
  %6875 = add i64 %6857, 23
  store i64 %6875, i64* %3, align 8
  %6876 = inttoptr i64 %6874 to i32*
  %6877 = load i32, i32* %6876, align 4
  %6878 = and i32 %6877, 2
  %6879 = zext i32 %6878 to i64
  store i64 %6879, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6880 = tail call i32 @llvm.ctpop.i32(i32 %6878)
  %6881 = trunc i32 %6880 to i8
  %6882 = xor i8 %6881, 1
  store i8 %6882, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit637 = lshr exact i32 %6878, 1
  %6883 = trunc i32 %.lobit637 to i8
  %6884 = xor i8 %6883, 1
  store i8 %6884, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6885 = add i64 %6858, -640
  %6886 = add i64 %6857, 36
  store i64 %6886, i64* %3, align 8
  %6887 = inttoptr i64 %6885 to i64*
  store i64 %6873, i64* %6887, align 8
  %6888 = load i64, i64* %3, align 8
  %6889 = load i8, i8* %34, align 1
  %6890 = icmp ne i8 %6889, 0
  %.v781 = select i1 %6890, i64 23, i64 6
  %6891 = add i64 %6888, %.v781
  %cmpBr_456dd1 = icmp eq i8 %6889, 1
  %6892 = load i64, i64* %RBP.i, align 8
  %6893 = add i64 %6892, -56
  %6894 = add i64 %6891, 3
  store i64 %6894, i64* %3, align 8
  %6895 = inttoptr i64 %6893 to i32*
  %6896 = load i32, i32* %6895, align 4
  %6897 = zext i32 %6896 to i64
  store i64 %6897, i64* %RAX.i3176, align 8
  %6898 = add i64 %6891, 6
  store i64 %6898, i64* %3, align 8
  br i1 %cmpBr_456dd1, label %block_.L_456de8, label %block_456dd7

block_456dd7:                                     ; preds = %block_.L_456dad
  %6899 = or i64 %6897, 1
  %6900 = trunc i64 %6899 to i32
  store i64 %6899, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6901 = and i32 %6900, 255
  %6902 = tail call i32 @llvm.ctpop.i32(i32 %6901)
  %6903 = trunc i32 %6902 to i8
  %6904 = and i8 %6903, 1
  %6905 = xor i8 %6904, 1
  store i8 %6905, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %6906 = lshr i32 %6900, 31
  %6907 = trunc i32 %6906 to i8
  store i8 %6907, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6908 = add i64 %6892, -644
  %6909 = add i64 %6891, 12
  store i64 %6909, i64* %3, align 8
  %6910 = inttoptr i64 %6908 to i32*
  store i32 %6900, i32* %6910, align 4
  %6911 = load i64, i64* %3, align 8
  %6912 = add i64 %6911, 17
  store i64 %6912, i64* %3, align 8
  br label %block_.L_456df4

block_.L_456de8:                                  ; preds = %block_.L_456dad
  %6913 = and i64 %6897, 4294967294
  store i64 %6913, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6914 = and i32 %6896, 254
  %6915 = tail call i32 @llvm.ctpop.i32(i32 %6914)
  %6916 = trunc i32 %6915 to i8
  %6917 = and i8 %6916, 1
  %6918 = xor i8 %6917, 1
  store i8 %6918, i8* %26, align 1
  %6919 = icmp ult i32 %6896, 2
  %6920 = zext i1 %6919 to i8
  store i8 %6920, i8* %34, align 1
  %6921 = lshr i32 %6896, 31
  %6922 = trunc i32 %6921 to i8
  store i8 %6922, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6923 = add i64 %6892, -644
  %6924 = trunc i64 %6913 to i32
  %6925 = add i64 %6891, 12
  store i64 %6925, i64* %3, align 8
  %6926 = inttoptr i64 %6923 to i32*
  store i32 %6924, i32* %6926, align 4
  %.pre476 = load i64, i64* %3, align 8
  br label %block_.L_456df4

block_.L_456df4:                                  ; preds = %block_.L_456de8, %block_456dd7
  %6927 = phi i64 [ %.pre476, %block_.L_456de8 ], [ %6912, %block_456dd7 ]
  %6928 = load i64, i64* %RBP.i, align 8
  %6929 = add i64 %6928, -644
  %6930 = add i64 %6927, 6
  store i64 %6930, i64* %3, align 8
  %6931 = inttoptr i64 %6929 to i32*
  %6932 = load i32, i32* %6931, align 4
  %6933 = zext i32 %6932 to i64
  store i64 %6933, i64* %RAX.i3176, align 8
  %6934 = sext i32 %6932 to i64
  store i64 %6934, i64* %RCX.i7756, align 8
  %6935 = add i64 %6928, -640
  %6936 = add i64 %6927, 16
  store i64 %6936, i64* %3, align 8
  %6937 = inttoptr i64 %6935 to i64*
  %6938 = load i64, i64* %6937, align 8
  store i64 %6938, i64* %RDX.i7753, align 8
  %6939 = shl nsw i64 %6934, 1
  %6940 = add i64 %6939, %6938
  %6941 = add i64 %6927, 20
  store i64 %6941, i64* %3, align 8
  %6942 = inttoptr i64 %6940 to i16*
  %6943 = load i16, i16* %6942, align 2
  store i16 %6943, i16* %SI.i6180, align 2
  %6944 = add i64 %6928, -16
  %6945 = add i64 %6927, 24
  store i64 %6945, i64* %3, align 8
  %6946 = inttoptr i64 %6944 to i64*
  %6947 = load i64, i64* %6946, align 8
  store i64 %6947, i64* %RCX.i7756, align 8
  %6948 = add i64 %6947, 4832
  %6949 = add i64 %6927, 31
  store i64 %6949, i64* %3, align 8
  %6950 = inttoptr i64 %6948 to i64*
  %6951 = load i64, i64* %6950, align 8
  store i64 %6951, i64* %RCX.i7756, align 8
  %6952 = add i64 %6951, 8
  %6953 = add i64 %6927, 35
  store i64 %6953, i64* %3, align 8
  %6954 = inttoptr i64 %6952 to i64*
  %6955 = load i64, i64* %6954, align 8
  store i64 %6955, i64* %RCX.i7756, align 8
  %6956 = add i64 %6928, -52
  %6957 = add i64 %6927, 39
  store i64 %6957, i64* %3, align 8
  %6958 = inttoptr i64 %6956 to i32*
  %6959 = load i32, i32* %6958, align 4
  %6960 = sext i32 %6959 to i64
  store i64 %6960, i64* %RDI.i732, align 8
  %6961 = shl nsw i64 %6960, 3
  %6962 = add i64 %6961, %6955
  %6963 = add i64 %6927, 43
  store i64 %6963, i64* %3, align 8
  %6964 = inttoptr i64 %6962 to i64*
  %6965 = load i64, i64* %6964, align 8
  store i64 %6965, i64* %RCX.i7756, align 8
  %6966 = add i64 %6928, -56
  %6967 = add i64 %6927, 47
  store i64 %6967, i64* %3, align 8
  %6968 = inttoptr i64 %6966 to i32*
  %6969 = load i32, i32* %6968, align 4
  %6970 = sext i32 %6969 to i64
  store i64 %6970, i64* %RDI.i732, align 8
  %6971 = shl nsw i64 %6970, 1
  %6972 = add i64 %6971, %6965
  %6973 = add i64 %6927, 51
  store i64 %6973, i64* %3, align 8
  %6974 = inttoptr i64 %6972 to i16*
  store i16 %6943, i16* %6974, align 2
  %6975 = load i64, i64* %RBP.i, align 8
  %6976 = add i64 %6975, -48
  %6977 = load i64, i64* %3, align 8
  %6978 = add i64 %6977, 4
  store i64 %6978, i64* %3, align 8
  %6979 = inttoptr i64 %6976 to i64*
  %6980 = load i64, i64* %6979, align 8
  store i64 %6980, i64* %RCX.i7756, align 8
  %6981 = add i64 %6980, 6496
  %6982 = add i64 %6977, 11
  store i64 %6982, i64* %3, align 8
  %6983 = inttoptr i64 %6981 to i64*
  %6984 = load i64, i64* %6983, align 8
  store i64 %6984, i64* %RCX.i7756, align 8
  %6985 = add i64 %6977, 14
  store i64 %6985, i64* %3, align 8
  %6986 = inttoptr i64 %6984 to i64*
  %6987 = load i64, i64* %6986, align 8
  store i64 %6987, i64* %RCX.i7756, align 8
  %6988 = add i64 %6975, -52
  %6989 = add i64 %6977, 17
  store i64 %6989, i64* %3, align 8
  %6990 = inttoptr i64 %6988 to i32*
  %6991 = load i32, i32* %6990, align 4
  %6992 = and i32 %6991, 2
  %6993 = zext i32 %6992 to i64
  store i64 %6993, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %6994 = tail call i32 @llvm.ctpop.i32(i32 %6992)
  %6995 = trunc i32 %6994 to i8
  %6996 = xor i8 %6995, 1
  store i8 %6996, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit638 = lshr exact i32 %6992, 1
  %6997 = trunc i32 %.lobit638 to i8
  %6998 = xor i8 %6997, 1
  store i8 %6998, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6999 = add i64 %6975, -656
  %7000 = add i64 %6977, 30
  store i64 %7000, i64* %3, align 8
  %7001 = inttoptr i64 %6999 to i64*
  store i64 %6987, i64* %7001, align 8
  %7002 = load i64, i64* %3, align 8
  %7003 = load i8, i8* %34, align 1
  %7004 = icmp ne i8 %7003, 0
  %.v782 = select i1 %7004, i64 23, i64 6
  %7005 = add i64 %7002, %.v782
  %cmpBr_456e45 = icmp eq i8 %7003, 1
  %7006 = load i64, i64* %RBP.i, align 8
  %7007 = add i64 %7006, -52
  %7008 = add i64 %7005, 3
  store i64 %7008, i64* %3, align 8
  %7009 = inttoptr i64 %7007 to i32*
  %7010 = load i32, i32* %7009, align 4
  %7011 = zext i32 %7010 to i64
  store i64 %7011, i64* %RAX.i3176, align 8
  %7012 = add i64 %7005, 6
  store i64 %7012, i64* %3, align 8
  br i1 %cmpBr_456e45, label %block_.L_456e5c, label %block_456e4b

block_456e4b:                                     ; preds = %block_.L_456df4
  %7013 = or i64 %7011, 1
  %7014 = trunc i64 %7013 to i32
  store i64 %7013, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7015 = and i32 %7014, 255
  %7016 = tail call i32 @llvm.ctpop.i32(i32 %7015)
  %7017 = trunc i32 %7016 to i8
  %7018 = and i8 %7017, 1
  %7019 = xor i8 %7018, 1
  store i8 %7019, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %7020 = lshr i32 %7014, 31
  %7021 = trunc i32 %7020 to i8
  store i8 %7021, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7022 = add i64 %7006, -660
  %7023 = add i64 %7005, 12
  store i64 %7023, i64* %3, align 8
  %7024 = inttoptr i64 %7022 to i32*
  store i32 %7014, i32* %7024, align 4
  %7025 = load i64, i64* %3, align 8
  %7026 = add i64 %7025, 17
  store i64 %7026, i64* %3, align 8
  br label %block_.L_456e68

block_.L_456e5c:                                  ; preds = %block_.L_456df4
  %7027 = and i64 %7011, 4294967294
  store i64 %7027, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7028 = and i32 %7010, 254
  %7029 = tail call i32 @llvm.ctpop.i32(i32 %7028)
  %7030 = trunc i32 %7029 to i8
  %7031 = and i8 %7030, 1
  %7032 = xor i8 %7031, 1
  store i8 %7032, i8* %26, align 1
  %7033 = icmp ult i32 %7010, 2
  %7034 = zext i1 %7033 to i8
  store i8 %7034, i8* %34, align 1
  %7035 = lshr i32 %7010, 31
  %7036 = trunc i32 %7035 to i8
  store i8 %7036, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7037 = add i64 %7006, -660
  %7038 = trunc i64 %7027 to i32
  %7039 = add i64 %7005, 12
  store i64 %7039, i64* %3, align 8
  %7040 = inttoptr i64 %7037 to i32*
  store i32 %7038, i32* %7040, align 4
  %.pre477 = load i64, i64* %3, align 8
  br label %block_.L_456e68

block_.L_456e68:                                  ; preds = %block_.L_456e5c, %block_456e4b
  %7041 = phi i64 [ %.pre477, %block_.L_456e5c ], [ %7026, %block_456e4b ]
  %7042 = load i64, i64* %RBP.i, align 8
  %7043 = add i64 %7042, -660
  %7044 = add i64 %7041, 6
  store i64 %7044, i64* %3, align 8
  %7045 = inttoptr i64 %7043 to i32*
  %7046 = load i32, i32* %7045, align 4
  %7047 = zext i32 %7046 to i64
  store i64 %7047, i64* %RAX.i3176, align 8
  %7048 = sext i32 %7046 to i64
  store i64 %7048, i64* %RCX.i7756, align 8
  %7049 = add i64 %7042, -656
  %7050 = add i64 %7041, 16
  store i64 %7050, i64* %3, align 8
  %7051 = inttoptr i64 %7049 to i64*
  %7052 = load i64, i64* %7051, align 8
  store i64 %7052, i64* %RDX.i7753, align 8
  %7053 = shl nsw i64 %7048, 3
  %7054 = add i64 %7053, %7052
  %7055 = add i64 %7041, 20
  store i64 %7055, i64* %3, align 8
  %7056 = inttoptr i64 %7054 to i64*
  %7057 = load i64, i64* %7056, align 8
  store i64 %7057, i64* %RCX.i7756, align 8
  %7058 = add i64 %7042, -56
  %7059 = add i64 %7041, 23
  store i64 %7059, i64* %3, align 8
  %7060 = inttoptr i64 %7058 to i32*
  %7061 = load i32, i32* %7060, align 4
  %7062 = and i32 %7061, 2
  %7063 = zext i32 %7062 to i64
  store i64 %7063, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7064 = tail call i32 @llvm.ctpop.i32(i32 %7062)
  %7065 = trunc i32 %7064 to i8
  %7066 = xor i8 %7065, 1
  store i8 %7066, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit639 = lshr exact i32 %7062, 1
  %7067 = trunc i32 %.lobit639 to i8
  %7068 = xor i8 %7067, 1
  store i8 %7068, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %7069 = add i64 %7042, -672
  %7070 = add i64 %7041, 36
  store i64 %7070, i64* %3, align 8
  %7071 = inttoptr i64 %7069 to i64*
  store i64 %7057, i64* %7071, align 8
  %7072 = load i64, i64* %3, align 8
  %7073 = load i8, i8* %34, align 1
  %7074 = icmp ne i8 %7073, 0
  %.v783 = select i1 %7074, i64 23, i64 6
  %7075 = add i64 %7072, %.v783
  %cmpBr_456e8c = icmp eq i8 %7073, 1
  %7076 = load i64, i64* %RBP.i, align 8
  %7077 = add i64 %7076, -56
  %7078 = add i64 %7075, 3
  store i64 %7078, i64* %3, align 8
  %7079 = inttoptr i64 %7077 to i32*
  %7080 = load i32, i32* %7079, align 4
  %7081 = zext i32 %7080 to i64
  store i64 %7081, i64* %RAX.i3176, align 8
  %7082 = add i64 %7075, 6
  store i64 %7082, i64* %3, align 8
  br i1 %cmpBr_456e8c, label %block_.L_456ea3, label %block_456e92

block_456e92:                                     ; preds = %block_.L_456e68
  %7083 = or i64 %7081, 1
  %7084 = trunc i64 %7083 to i32
  store i64 %7083, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7085 = and i32 %7084, 255
  %7086 = tail call i32 @llvm.ctpop.i32(i32 %7085)
  %7087 = trunc i32 %7086 to i8
  %7088 = and i8 %7087, 1
  %7089 = xor i8 %7088, 1
  store i8 %7089, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %7090 = lshr i32 %7084, 31
  %7091 = trunc i32 %7090 to i8
  store i8 %7091, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7092 = add i64 %7076, -676
  %7093 = add i64 %7075, 12
  store i64 %7093, i64* %3, align 8
  %7094 = inttoptr i64 %7092 to i32*
  store i32 %7084, i32* %7094, align 4
  %7095 = load i64, i64* %3, align 8
  %7096 = add i64 %7095, 17
  store i64 %7096, i64* %3, align 8
  br label %block_.L_456eaf

block_.L_456ea3:                                  ; preds = %block_.L_456e68
  %7097 = and i64 %7081, 4294967294
  store i64 %7097, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7098 = and i32 %7080, 254
  %7099 = tail call i32 @llvm.ctpop.i32(i32 %7098)
  %7100 = trunc i32 %7099 to i8
  %7101 = and i8 %7100, 1
  %7102 = xor i8 %7101, 1
  store i8 %7102, i8* %26, align 1
  %7103 = icmp ult i32 %7080, 2
  %7104 = zext i1 %7103 to i8
  store i8 %7104, i8* %34, align 1
  %7105 = lshr i32 %7080, 31
  %7106 = trunc i32 %7105 to i8
  store i8 %7106, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7107 = add i64 %7076, -676
  %7108 = trunc i64 %7097 to i32
  %7109 = add i64 %7075, 12
  store i64 %7109, i64* %3, align 8
  %7110 = inttoptr i64 %7107 to i32*
  store i32 %7108, i32* %7110, align 4
  %.pre478 = load i64, i64* %3, align 8
  br label %block_.L_456eaf

block_.L_456eaf:                                  ; preds = %block_.L_456ea3, %block_456e92
  %7111 = phi i64 [ %.pre478, %block_.L_456ea3 ], [ %7096, %block_456e92 ]
  %7112 = load i64, i64* %RBP.i, align 8
  %7113 = add i64 %7112, -676
  %7114 = add i64 %7111, 6
  store i64 %7114, i64* %3, align 8
  %7115 = inttoptr i64 %7113 to i32*
  %7116 = load i32, i32* %7115, align 4
  %7117 = zext i32 %7116 to i64
  store i64 %7117, i64* %RAX.i3176, align 8
  %7118 = sext i32 %7116 to i64
  store i64 %7118, i64* %RCX.i7756, align 8
  %7119 = add i64 %7112, -672
  %7120 = add i64 %7111, 16
  store i64 %7120, i64* %3, align 8
  %7121 = inttoptr i64 %7119 to i64*
  %7122 = load i64, i64* %7121, align 8
  store i64 %7122, i64* %RDX.i7753, align 8
  %7123 = shl nsw i64 %7118, 3
  %7124 = add i64 %7123, %7122
  %7125 = add i64 %7111, 20
  store i64 %7125, i64* %3, align 8
  %7126 = inttoptr i64 %7124 to i64*
  %7127 = load i64, i64* %7126, align 8
  store i64 %7127, i64* %RCX.i7756, align 8
  %7128 = add i64 %7112, -16
  %7129 = add i64 %7111, 24
  store i64 %7129, i64* %3, align 8
  %7130 = inttoptr i64 %7128 to i64*
  %7131 = load i64, i64* %7130, align 8
  store i64 %7131, i64* %RSI.i766, align 8
  %7132 = add i64 %7131, 4840
  %7133 = add i64 %7111, 31
  store i64 %7133, i64* %3, align 8
  %7134 = inttoptr i64 %7132 to i64*
  %7135 = load i64, i64* %7134, align 8
  store i64 %7135, i64* %RSI.i766, align 8
  %7136 = add i64 %7111, 34
  store i64 %7136, i64* %3, align 8
  %7137 = inttoptr i64 %7135 to i64*
  %7138 = load i64, i64* %7137, align 8
  store i64 %7138, i64* %RSI.i766, align 8
  %7139 = add i64 %7112, -52
  %7140 = add i64 %7111, 38
  store i64 %7140, i64* %3, align 8
  %7141 = inttoptr i64 %7139 to i32*
  %7142 = load i32, i32* %7141, align 4
  %7143 = sext i32 %7142 to i64
  store i64 %7143, i64* %RDI.i732, align 8
  %7144 = shl nsw i64 %7143, 3
  %7145 = add i64 %7144, %7138
  %7146 = add i64 %7111, 42
  store i64 %7146, i64* %3, align 8
  %7147 = inttoptr i64 %7145 to i64*
  %7148 = load i64, i64* %7147, align 8
  store i64 %7148, i64* %RSI.i766, align 8
  %7149 = add i64 %7112, -56
  %7150 = add i64 %7111, 46
  store i64 %7150, i64* %3, align 8
  %7151 = inttoptr i64 %7149 to i32*
  %7152 = load i32, i32* %7151, align 4
  %7153 = sext i32 %7152 to i64
  store i64 %7153, i64* %RDI.i732, align 8
  %7154 = shl nsw i64 %7153, 3
  %7155 = add i64 %7154, %7148
  %7156 = add i64 %7111, 50
  store i64 %7156, i64* %3, align 8
  %7157 = inttoptr i64 %7155 to i64*
  store i64 %7127, i64* %7157, align 8
  %7158 = load i64, i64* %RBP.i, align 8
  %7159 = add i64 %7158, -48
  %7160 = load i64, i64* %3, align 8
  %7161 = add i64 %7160, 4
  store i64 %7161, i64* %3, align 8
  %7162 = inttoptr i64 %7159 to i64*
  %7163 = load i64, i64* %7162, align 8
  store i64 %7163, i64* %RCX.i7756, align 8
  %7164 = add i64 %7163, 6496
  %7165 = add i64 %7160, 11
  store i64 %7165, i64* %3, align 8
  %7166 = inttoptr i64 %7164 to i64*
  %7167 = load i64, i64* %7166, align 8
  store i64 %7167, i64* %RCX.i7756, align 8
  %7168 = add i64 %7167, 8
  %7169 = add i64 %7160, 15
  store i64 %7169, i64* %3, align 8
  %7170 = inttoptr i64 %7168 to i64*
  %7171 = load i64, i64* %7170, align 8
  store i64 %7171, i64* %RCX.i7756, align 8
  %7172 = add i64 %7158, -52
  %7173 = add i64 %7160, 18
  store i64 %7173, i64* %3, align 8
  %7174 = inttoptr i64 %7172 to i32*
  %7175 = load i32, i32* %7174, align 4
  %7176 = and i32 %7175, 2
  %7177 = zext i32 %7176 to i64
  store i64 %7177, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7178 = tail call i32 @llvm.ctpop.i32(i32 %7176)
  %7179 = trunc i32 %7178 to i8
  %7180 = xor i8 %7179, 1
  store i8 %7180, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit640 = lshr exact i32 %7176, 1
  %7181 = trunc i32 %.lobit640 to i8
  %7182 = xor i8 %7181, 1
  store i8 %7182, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %7183 = add i64 %7158, -688
  %7184 = add i64 %7160, 31
  store i64 %7184, i64* %3, align 8
  %7185 = inttoptr i64 %7183 to i64*
  store i64 %7171, i64* %7185, align 8
  %7186 = load i64, i64* %3, align 8
  %7187 = load i8, i8* %34, align 1
  %7188 = icmp ne i8 %7187, 0
  %.v784 = select i1 %7188, i64 23, i64 6
  %7189 = add i64 %7186, %.v784
  %cmpBr_456f00 = icmp eq i8 %7187, 1
  %7190 = load i64, i64* %RBP.i, align 8
  %7191 = add i64 %7190, -52
  %7192 = add i64 %7189, 3
  store i64 %7192, i64* %3, align 8
  %7193 = inttoptr i64 %7191 to i32*
  %7194 = load i32, i32* %7193, align 4
  %7195 = zext i32 %7194 to i64
  store i64 %7195, i64* %RAX.i3176, align 8
  %7196 = add i64 %7189, 6
  store i64 %7196, i64* %3, align 8
  br i1 %cmpBr_456f00, label %block_.L_456f17, label %block_456f06

block_456f06:                                     ; preds = %block_.L_456eaf
  %7197 = or i64 %7195, 1
  %7198 = trunc i64 %7197 to i32
  store i64 %7197, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7199 = and i32 %7198, 255
  %7200 = tail call i32 @llvm.ctpop.i32(i32 %7199)
  %7201 = trunc i32 %7200 to i8
  %7202 = and i8 %7201, 1
  %7203 = xor i8 %7202, 1
  store i8 %7203, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %7204 = lshr i32 %7198, 31
  %7205 = trunc i32 %7204 to i8
  store i8 %7205, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7206 = add i64 %7190, -692
  %7207 = add i64 %7189, 12
  store i64 %7207, i64* %3, align 8
  %7208 = inttoptr i64 %7206 to i32*
  store i32 %7198, i32* %7208, align 4
  %7209 = load i64, i64* %3, align 8
  %7210 = add i64 %7209, 17
  store i64 %7210, i64* %3, align 8
  br label %block_.L_456f23

block_.L_456f17:                                  ; preds = %block_.L_456eaf
  %7211 = and i64 %7195, 4294967294
  store i64 %7211, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7212 = and i32 %7194, 254
  %7213 = tail call i32 @llvm.ctpop.i32(i32 %7212)
  %7214 = trunc i32 %7213 to i8
  %7215 = and i8 %7214, 1
  %7216 = xor i8 %7215, 1
  store i8 %7216, i8* %26, align 1
  %7217 = icmp ult i32 %7194, 2
  %7218 = zext i1 %7217 to i8
  store i8 %7218, i8* %34, align 1
  %7219 = lshr i32 %7194, 31
  %7220 = trunc i32 %7219 to i8
  store i8 %7220, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7221 = add i64 %7190, -692
  %7222 = trunc i64 %7211 to i32
  %7223 = add i64 %7189, 12
  store i64 %7223, i64* %3, align 8
  %7224 = inttoptr i64 %7221 to i32*
  store i32 %7222, i32* %7224, align 4
  %.pre479 = load i64, i64* %3, align 8
  br label %block_.L_456f23

block_.L_456f23:                                  ; preds = %block_.L_456f17, %block_456f06
  %7225 = phi i64 [ %.pre479, %block_.L_456f17 ], [ %7210, %block_456f06 ]
  %7226 = load i64, i64* %RBP.i, align 8
  %7227 = add i64 %7226, -692
  %7228 = add i64 %7225, 6
  store i64 %7228, i64* %3, align 8
  %7229 = inttoptr i64 %7227 to i32*
  %7230 = load i32, i32* %7229, align 4
  %7231 = zext i32 %7230 to i64
  store i64 %7231, i64* %RAX.i3176, align 8
  %7232 = sext i32 %7230 to i64
  store i64 %7232, i64* %RCX.i7756, align 8
  %7233 = add i64 %7226, -688
  %7234 = add i64 %7225, 16
  store i64 %7234, i64* %3, align 8
  %7235 = inttoptr i64 %7233 to i64*
  %7236 = load i64, i64* %7235, align 8
  store i64 %7236, i64* %RDX.i7753, align 8
  %7237 = shl nsw i64 %7232, 3
  %7238 = add i64 %7237, %7236
  %7239 = add i64 %7225, 20
  store i64 %7239, i64* %3, align 8
  %7240 = inttoptr i64 %7238 to i64*
  %7241 = load i64, i64* %7240, align 8
  store i64 %7241, i64* %RCX.i7756, align 8
  %7242 = add i64 %7226, -56
  %7243 = add i64 %7225, 23
  store i64 %7243, i64* %3, align 8
  %7244 = inttoptr i64 %7242 to i32*
  %7245 = load i32, i32* %7244, align 4
  %7246 = and i32 %7245, 2
  %7247 = zext i32 %7246 to i64
  store i64 %7247, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7248 = tail call i32 @llvm.ctpop.i32(i32 %7246)
  %7249 = trunc i32 %7248 to i8
  %7250 = xor i8 %7249, 1
  store i8 %7250, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit641 = lshr exact i32 %7246, 1
  %7251 = trunc i32 %.lobit641 to i8
  %7252 = xor i8 %7251, 1
  store i8 %7252, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %7253 = add i64 %7226, -704
  %7254 = add i64 %7225, 36
  store i64 %7254, i64* %3, align 8
  %7255 = inttoptr i64 %7253 to i64*
  store i64 %7241, i64* %7255, align 8
  %7256 = load i64, i64* %3, align 8
  %7257 = load i8, i8* %34, align 1
  %7258 = icmp ne i8 %7257, 0
  %.v785 = select i1 %7258, i64 23, i64 6
  %7259 = add i64 %7256, %.v785
  %cmpBr_456f47 = icmp eq i8 %7257, 1
  %7260 = load i64, i64* %RBP.i, align 8
  %7261 = add i64 %7260, -56
  %7262 = add i64 %7259, 3
  store i64 %7262, i64* %3, align 8
  %7263 = inttoptr i64 %7261 to i32*
  %7264 = load i32, i32* %7263, align 4
  %7265 = zext i32 %7264 to i64
  store i64 %7265, i64* %RAX.i3176, align 8
  %7266 = add i64 %7259, 6
  store i64 %7266, i64* %3, align 8
  br i1 %cmpBr_456f47, label %block_.L_456f5e, label %block_456f4d

block_456f4d:                                     ; preds = %block_.L_456f23
  %7267 = or i64 %7265, 1
  %7268 = trunc i64 %7267 to i32
  store i64 %7267, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7269 = and i32 %7268, 255
  %7270 = tail call i32 @llvm.ctpop.i32(i32 %7269)
  %7271 = trunc i32 %7270 to i8
  %7272 = and i8 %7271, 1
  %7273 = xor i8 %7272, 1
  store i8 %7273, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %7274 = lshr i32 %7268, 31
  %7275 = trunc i32 %7274 to i8
  store i8 %7275, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7276 = add i64 %7260, -708
  %7277 = add i64 %7259, 12
  store i64 %7277, i64* %3, align 8
  %7278 = inttoptr i64 %7276 to i32*
  store i32 %7268, i32* %7278, align 4
  %7279 = load i64, i64* %3, align 8
  %7280 = add i64 %7279, 17
  store i64 %7280, i64* %3, align 8
  br label %block_.L_456f6a

block_.L_456f5e:                                  ; preds = %block_.L_456f23
  %7281 = and i64 %7265, 4294967294
  store i64 %7281, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7282 = and i32 %7264, 254
  %7283 = tail call i32 @llvm.ctpop.i32(i32 %7282)
  %7284 = trunc i32 %7283 to i8
  %7285 = and i8 %7284, 1
  %7286 = xor i8 %7285, 1
  store i8 %7286, i8* %26, align 1
  %7287 = icmp ult i32 %7264, 2
  %7288 = zext i1 %7287 to i8
  store i8 %7288, i8* %34, align 1
  %7289 = lshr i32 %7264, 31
  %7290 = trunc i32 %7289 to i8
  store i8 %7290, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7291 = add i64 %7260, -708
  %7292 = trunc i64 %7281 to i32
  %7293 = add i64 %7259, 12
  store i64 %7293, i64* %3, align 8
  %7294 = inttoptr i64 %7291 to i32*
  store i32 %7292, i32* %7294, align 4
  %.pre480 = load i64, i64* %3, align 8
  br label %block_.L_456f6a

block_.L_456f6a:                                  ; preds = %block_.L_456f5e, %block_456f4d
  %7295 = phi i64 [ %.pre480, %block_.L_456f5e ], [ %7280, %block_456f4d ]
  %7296 = load i64, i64* %RBP.i, align 8
  %7297 = add i64 %7296, -708
  %7298 = add i64 %7295, 6
  store i64 %7298, i64* %3, align 8
  %7299 = inttoptr i64 %7297 to i32*
  %7300 = load i32, i32* %7299, align 4
  %7301 = zext i32 %7300 to i64
  store i64 %7301, i64* %RAX.i3176, align 8
  %7302 = sext i32 %7300 to i64
  store i64 %7302, i64* %RCX.i7756, align 8
  %7303 = add i64 %7296, -704
  %7304 = add i64 %7295, 16
  store i64 %7304, i64* %3, align 8
  %7305 = inttoptr i64 %7303 to i64*
  %7306 = load i64, i64* %7305, align 8
  store i64 %7306, i64* %RDX.i7753, align 8
  %7307 = shl nsw i64 %7302, 3
  %7308 = add i64 %7307, %7306
  %7309 = add i64 %7295, 20
  store i64 %7309, i64* %3, align 8
  %7310 = inttoptr i64 %7308 to i64*
  %7311 = load i64, i64* %7310, align 8
  store i64 %7311, i64* %RCX.i7756, align 8
  %7312 = add i64 %7296, -16
  %7313 = add i64 %7295, 24
  store i64 %7313, i64* %3, align 8
  %7314 = inttoptr i64 %7312 to i64*
  %7315 = load i64, i64* %7314, align 8
  store i64 %7315, i64* %RSI.i766, align 8
  %7316 = add i64 %7315, 4840
  %7317 = add i64 %7295, 31
  store i64 %7317, i64* %3, align 8
  %7318 = inttoptr i64 %7316 to i64*
  %7319 = load i64, i64* %7318, align 8
  store i64 %7319, i64* %RSI.i766, align 8
  %7320 = add i64 %7319, 8
  %7321 = add i64 %7295, 35
  store i64 %7321, i64* %3, align 8
  %7322 = inttoptr i64 %7320 to i64*
  %7323 = load i64, i64* %7322, align 8
  store i64 %7323, i64* %RSI.i766, align 8
  %7324 = add i64 %7296, -52
  %7325 = add i64 %7295, 39
  store i64 %7325, i64* %3, align 8
  %7326 = inttoptr i64 %7324 to i32*
  %7327 = load i32, i32* %7326, align 4
  %7328 = sext i32 %7327 to i64
  store i64 %7328, i64* %RDI.i732, align 8
  %7329 = shl nsw i64 %7328, 3
  %7330 = add i64 %7329, %7323
  %7331 = add i64 %7295, 43
  store i64 %7331, i64* %3, align 8
  %7332 = inttoptr i64 %7330 to i64*
  %7333 = load i64, i64* %7332, align 8
  store i64 %7333, i64* %RSI.i766, align 8
  %7334 = add i64 %7296, -56
  %7335 = add i64 %7295, 47
  store i64 %7335, i64* %3, align 8
  %7336 = inttoptr i64 %7334 to i32*
  %7337 = load i32, i32* %7336, align 4
  %7338 = sext i32 %7337 to i64
  store i64 %7338, i64* %RDI.i732, align 8
  %7339 = shl nsw i64 %7338, 3
  %7340 = add i64 %7339, %7333
  %7341 = add i64 %7295, 51
  store i64 %7341, i64* %3, align 8
  %7342 = inttoptr i64 %7340 to i64*
  store i64 %7311, i64* %7342, align 8
  %7343 = load i64, i64* %3, align 8
  %7344 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %7344, i64* %RCX.i7756, align 8
  %7345 = add i64 %7344, 71996
  %7346 = add i64 %7343, 15
  store i64 %7346, i64* %3, align 8
  %7347 = inttoptr i64 %7345 to i32*
  %7348 = load i32, i32* %7347, align 4
  %7349 = add i32 %7348, -1
  %7350 = icmp eq i32 %7348, 0
  %7351 = zext i1 %7350 to i8
  store i8 %7351, i8* %19, align 1
  %7352 = and i32 %7349, 255
  %7353 = tail call i32 @llvm.ctpop.i32(i32 %7352)
  %7354 = trunc i32 %7353 to i8
  %7355 = and i8 %7354, 1
  %7356 = xor i8 %7355, 1
  store i8 %7356, i8* %26, align 1
  %7357 = xor i32 %7349, %7348
  %7358 = lshr i32 %7357, 4
  %7359 = trunc i32 %7358 to i8
  %7360 = and i8 %7359, 1
  store i8 %7360, i8* %31, align 1
  %7361 = icmp eq i32 %7349, 0
  %7362 = zext i1 %7361 to i8
  store i8 %7362, i8* %34, align 1
  %7363 = lshr i32 %7349, 31
  %7364 = trunc i32 %7363 to i8
  store i8 %7364, i8* %37, align 1
  %7365 = lshr i32 %7348, 31
  %7366 = xor i32 %7363, %7365
  %7367 = add nuw nsw i32 %7366, %7365
  %7368 = icmp eq i32 %7367, 2
  %7369 = zext i1 %7368 to i8
  store i8 %7369, i8* %43, align 1
  %.v709 = select i1 %7361, i64 21, i64 455
  %7370 = add i64 %7343, %.v709
  store i64 %7370, i64* %3, align 8
  br i1 %7361, label %block_456fb2, label %block_.L_457164

block_456fb2:                                     ; preds = %block_.L_456f6a
  %7371 = load i64, i64* %RBP.i, align 8
  %7372 = add i64 %7371, -48
  %7373 = add i64 %7370, 4
  store i64 %7373, i64* %3, align 8
  %7374 = inttoptr i64 %7372 to i64*
  %7375 = load i64, i64* %7374, align 8
  store i64 %7375, i64* %RAX.i3176, align 8
  %7376 = add i64 %7375, 6376
  %7377 = add i64 %7370, 11
  store i64 %7377, i64* %3, align 8
  %7378 = inttoptr i64 %7376 to i32*
  %7379 = load i32, i32* %7378, align 4
  store i8 0, i8* %19, align 1
  %7380 = and i32 %7379, 255
  %7381 = tail call i32 @llvm.ctpop.i32(i32 %7380)
  %7382 = trunc i32 %7381 to i8
  %7383 = and i8 %7382, 1
  %7384 = xor i8 %7383, 1
  store i8 %7384, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7385 = icmp eq i32 %7379, 0
  %7386 = zext i1 %7385 to i8
  store i8 %7386, i8* %34, align 1
  %7387 = lshr i32 %7379, 31
  %7388 = trunc i32 %7387 to i8
  store i8 %7388, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v716 = select i1 %7385, i64 17, i64 165
  %7389 = add i64 %7370, %.v716
  store i64 %7389, i64* %3, align 8
  br i1 %7385, label %block_456fc3, label %block_.L_457057

block_456fc3:                                     ; preds = %block_456fb2
  %7390 = add i64 %7371, -16
  %7391 = add i64 %7389, 4
  store i64 %7391, i64* %3, align 8
  %7392 = inttoptr i64 %7390 to i64*
  %7393 = load i64, i64* %7392, align 8
  store i64 %7393, i64* %RAX.i3176, align 8
  %7394 = add i64 %7393, 4832
  %7395 = add i64 %7389, 11
  store i64 %7395, i64* %3, align 8
  %7396 = inttoptr i64 %7394 to i64*
  %7397 = load i64, i64* %7396, align 8
  store i64 %7397, i64* %RAX.i3176, align 8
  %7398 = add i64 %7389, 14
  store i64 %7398, i64* %3, align 8
  %7399 = inttoptr i64 %7397 to i64*
  %7400 = load i64, i64* %7399, align 8
  store i64 %7400, i64* %RAX.i3176, align 8
  %7401 = add i64 %7371, -52
  %7402 = add i64 %7389, 18
  store i64 %7402, i64* %3, align 8
  %7403 = inttoptr i64 %7401 to i32*
  %7404 = load i32, i32* %7403, align 4
  %7405 = sext i32 %7404 to i64
  store i64 %7405, i64* %RCX.i7756, align 8
  %7406 = shl nsw i64 %7405, 3
  %7407 = add i64 %7406, %7400
  %7408 = add i64 %7389, 22
  store i64 %7408, i64* %3, align 8
  %7409 = inttoptr i64 %7407 to i64*
  %7410 = load i64, i64* %7409, align 8
  store i64 %7410, i64* %RAX.i3176, align 8
  %7411 = add i64 %7371, -56
  %7412 = add i64 %7389, 26
  store i64 %7412, i64* %3, align 8
  %7413 = inttoptr i64 %7411 to i32*
  %7414 = load i32, i32* %7413, align 4
  %7415 = sext i32 %7414 to i64
  store i64 %7415, i64* %RCX.i7756, align 8
  %7416 = shl nsw i64 %7415, 1
  %7417 = add i64 %7416, %7410
  %7418 = add i64 %7389, 30
  store i64 %7418, i64* %3, align 8
  %7419 = inttoptr i64 %7417 to i16*
  %7420 = load i16, i16* %7419, align 2
  %7421 = sext i16 %7420 to i64
  %7422 = and i64 %7421, 4294967295
  store i64 %7422, i64* %RDX.i7753, align 8
  %7423 = sext i16 %7420 to i32
  store i8 0, i8* %19, align 1
  %7424 = and i32 %7423, 255
  %7425 = tail call i32 @llvm.ctpop.i32(i32 %7424)
  %7426 = trunc i32 %7425 to i8
  %7427 = and i8 %7426, 1
  %7428 = xor i8 %7427, 1
  store i8 %7428, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7429 = icmp eq i16 %7420, 0
  %7430 = zext i1 %7429 to i8
  store i8 %7430, i8* %34, align 1
  %7431 = lshr i32 %7423, 31
  %7432 = trunc i32 %7431 to i8
  store i8 %7432, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v717 = select i1 %7429, i64 39, i64 148
  %7433 = add i64 %7389, %.v717
  store i64 %7433, i64* %3, align 8
  br i1 %7429, label %block_456fea, label %block_.L_457057

block_456fea:                                     ; preds = %block_456fc3
  %7434 = add i64 %7433, 4
  store i64 %7434, i64* %3, align 8
  %7435 = load i64, i64* %7392, align 8
  store i64 %7435, i64* %RAX.i3176, align 8
  %7436 = add i64 %7435, 4848
  %7437 = add i64 %7433, 11
  store i64 %7437, i64* %3, align 8
  %7438 = inttoptr i64 %7436 to i64*
  %7439 = load i64, i64* %7438, align 8
  store i64 %7439, i64* %RAX.i3176, align 8
  %7440 = add i64 %7433, 14
  store i64 %7440, i64* %3, align 8
  %7441 = inttoptr i64 %7439 to i64*
  %7442 = load i64, i64* %7441, align 8
  store i64 %7442, i64* %RAX.i3176, align 8
  %7443 = add i64 %7433, 18
  store i64 %7443, i64* %3, align 8
  %7444 = load i32, i32* %7403, align 4
  %7445 = sext i32 %7444 to i64
  store i64 %7445, i64* %RCX.i7756, align 8
  %7446 = shl nsw i64 %7445, 3
  %7447 = add i64 %7446, %7442
  %7448 = add i64 %7433, 22
  store i64 %7448, i64* %3, align 8
  %7449 = inttoptr i64 %7447 to i64*
  %7450 = load i64, i64* %7449, align 8
  store i64 %7450, i64* %RAX.i3176, align 8
  %7451 = add i64 %7433, 26
  store i64 %7451, i64* %3, align 8
  %7452 = load i32, i32* %7413, align 4
  %7453 = sext i32 %7452 to i64
  store i64 %7453, i64* %RCX.i7756, align 8
  %7454 = shl nsw i64 %7453, 3
  %7455 = add i64 %7454, %7450
  %7456 = add i64 %7433, 30
  store i64 %7456, i64* %3, align 8
  %7457 = inttoptr i64 %7455 to i64*
  %7458 = load i64, i64* %7457, align 8
  store i64 %7458, i64* %RAX.i3176, align 8
  %7459 = add i64 %7433, 33
  store i64 %7459, i64* %3, align 8
  %7460 = inttoptr i64 %7458 to i16*
  %7461 = load i16, i16* %7460, align 2
  %7462 = sext i16 %7461 to i64
  %7463 = and i64 %7462, 4294967295
  store i64 %7463, i64* %RDI.i732, align 8
  %7464 = add i64 %7433, -352234
  %7465 = add i64 %7433, 38
  %7466 = load i64, i64* %6, align 8
  %7467 = add i64 %7466, -8
  %7468 = inttoptr i64 %7467 to i64*
  store i64 %7465, i64* %7468, align 8
  store i64 %7467, i64* %6, align 8
  store i64 %7464, i64* %3, align 8
  %7469 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %3264)
  %7470 = load i64, i64* %RAX.i3176, align 8
  %7471 = load i64, i64* %3, align 8
  %7472 = shl i64 %7470, 32
  %7473 = ashr i64 %7472, 33
  %7474 = and i64 %7473, 4294967295
  store i64 %7474, i64* %RAX.i3176, align 8
  %7475 = trunc i64 %7473 to i32
  store i8 0, i8* %19, align 1
  %7476 = and i32 %7475, 255
  %7477 = tail call i32 @llvm.ctpop.i32(i32 %7476)
  %7478 = trunc i32 %7477 to i8
  %7479 = and i8 %7478, 1
  %7480 = xor i8 %7479, 1
  store i8 %7480, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7481 = icmp eq i32 %7475, 0
  %7482 = zext i1 %7481 to i8
  store i8 %7482, i8* %34, align 1
  %7483 = lshr i64 %7473, 31
  %7484 = trunc i64 %7483 to i8
  %7485 = and i8 %7484, 1
  store i8 %7485, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v718 = select i1 %7481, i64 11, i64 70
  %7486 = add i64 %7471, %.v718
  store i64 %7486, i64* %3, align 8
  br i1 %7481, label %block_45701c, label %block_.L_457057

block_45701c:                                     ; preds = %block_456fea
  %7487 = load i64, i64* %RBP.i, align 8
  %7488 = add i64 %7487, -16
  %7489 = add i64 %7486, 4
  store i64 %7489, i64* %3, align 8
  %7490 = inttoptr i64 %7488 to i64*
  %7491 = load i64, i64* %7490, align 8
  store i64 %7491, i64* %RAX.i3176, align 8
  %7492 = add i64 %7491, 4848
  %7493 = add i64 %7486, 11
  store i64 %7493, i64* %3, align 8
  %7494 = inttoptr i64 %7492 to i64*
  %7495 = load i64, i64* %7494, align 8
  store i64 %7495, i64* %RAX.i3176, align 8
  %7496 = add i64 %7486, 14
  store i64 %7496, i64* %3, align 8
  %7497 = inttoptr i64 %7495 to i64*
  %7498 = load i64, i64* %7497, align 8
  store i64 %7498, i64* %RAX.i3176, align 8
  %7499 = add i64 %7487, -52
  %7500 = add i64 %7486, 18
  store i64 %7500, i64* %3, align 8
  %7501 = inttoptr i64 %7499 to i32*
  %7502 = load i32, i32* %7501, align 4
  %7503 = sext i32 %7502 to i64
  store i64 %7503, i64* %RCX.i7756, align 8
  %7504 = shl nsw i64 %7503, 3
  %7505 = add i64 %7504, %7498
  %7506 = add i64 %7486, 22
  store i64 %7506, i64* %3, align 8
  %7507 = inttoptr i64 %7505 to i64*
  %7508 = load i64, i64* %7507, align 8
  store i64 %7508, i64* %RAX.i3176, align 8
  %7509 = add i64 %7487, -56
  %7510 = add i64 %7486, 26
  store i64 %7510, i64* %3, align 8
  %7511 = inttoptr i64 %7509 to i32*
  %7512 = load i32, i32* %7511, align 4
  %7513 = sext i32 %7512 to i64
  store i64 %7513, i64* %RCX.i7756, align 8
  %7514 = shl nsw i64 %7513, 3
  %7515 = add i64 %7514, %7508
  %7516 = add i64 %7486, 30
  store i64 %7516, i64* %3, align 8
  %7517 = inttoptr i64 %7515 to i64*
  %7518 = load i64, i64* %7517, align 8
  store i64 %7518, i64* %RAX.i3176, align 8
  %7519 = add i64 %7518, 2
  %7520 = add i64 %7486, 34
  store i64 %7520, i64* %3, align 8
  %7521 = inttoptr i64 %7519 to i16*
  %7522 = load i16, i16* %7521, align 2
  %7523 = sext i16 %7522 to i64
  %7524 = and i64 %7523, 4294967295
  store i64 %7524, i64* %RDI.i732, align 8
  %7525 = add i64 %7486, -352284
  %7526 = add i64 %7486, 39
  %7527 = load i64, i64* %6, align 8
  %7528 = add i64 %7527, -8
  %7529 = inttoptr i64 %7528 to i64*
  store i64 %7526, i64* %7529, align 8
  store i64 %7528, i64* %6, align 8
  store i64 %7525, i64* %3, align 8
  %7530 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %7469)
  %7531 = load i64, i64* %3, align 8
  store i8 1, i8* %DL.i4045, align 1
  %7532 = load i64, i64* %RAX.i3176, align 8
  %7533 = shl i64 %7532, 32
  %7534 = ashr i64 %7533, 33
  %7535 = and i64 %7534, 4294967295
  store i64 %7535, i64* %RAX.i3176, align 8
  %7536 = trunc i64 %7534 to i32
  store i8 0, i8* %19, align 1
  %7537 = and i32 %7536, 255
  %7538 = tail call i32 @llvm.ctpop.i32(i32 %7537)
  %7539 = trunc i32 %7538 to i8
  %7540 = and i8 %7539, 1
  %7541 = xor i8 %7540, 1
  store i8 %7541, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7542 = icmp eq i32 %7536, 0
  %7543 = zext i1 %7542 to i8
  store i8 %7543, i8* %34, align 1
  %7544 = lshr i64 %7534, 31
  %7545 = trunc i64 %7544 to i8
  %7546 = and i8 %7545, 1
  store i8 %7546, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %7547 = load i64, i64* %RBP.i, align 8
  %7548 = add i64 %7547, -709
  %7549 = add i64 %7531, 13
  store i64 %7549, i64* %3, align 8
  %7550 = inttoptr i64 %7548 to i8*
  store i8 1, i8* %7550, align 1
  %7551 = load i64, i64* %3, align 8
  %7552 = load i8, i8* %34, align 1
  %7553 = icmp ne i8 %7552, 0
  %.v803 = select i1 %7553, i64 234, i64 6
  %7554 = add i64 %7551, %.v803
  store i64 %7554, i64* %3, align 8
  %cmpBr_457051 = icmp eq i8 %7552, 1
  br i1 %cmpBr_457051, label %block_.L_45713b, label %block_45701c.block_.L_457057_crit_edge

block_45701c.block_.L_457057_crit_edge:           ; preds = %block_45701c
  %.pre481 = load i64, i64* %RAX.i3176, align 8
  br label %block_.L_457057

block_.L_457057:                                  ; preds = %block_456fea, %block_456fc3, %block_456fb2, %block_45701c.block_.L_457057_crit_edge
  %7555 = phi i64 [ %7389, %block_456fb2 ], [ %7433, %block_456fc3 ], [ %7486, %block_456fea ], [ %7554, %block_45701c.block_.L_457057_crit_edge ]
  %7556 = phi i64 [ %7375, %block_456fb2 ], [ %7410, %block_456fc3 ], [ %7473, %block_456fea ], [ %.pre481, %block_45701c.block_.L_457057_crit_edge ]
  %7557 = phi i64 [ %7375, %block_456fb2 ], [ %7410, %block_456fc3 ], [ %7474, %block_456fea ], [ %.pre481, %block_45701c.block_.L_457057_crit_edge ]
  %MEMORY.56 = phi %struct.Memory* [ %3264, %block_456fb2 ], [ %3264, %block_456fc3 ], [ %7469, %block_456fea ], [ %7530, %block_45701c.block_.L_457057_crit_edge ]
  %7558 = and i64 %7556, 4294967295
  %7559 = xor i64 %7558, %7557
  %7560 = trunc i64 %7559 to i32
  %7561 = and i64 %7559, 4294967295
  store i64 %7561, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7562 = and i32 %7560, 255
  %7563 = tail call i32 @llvm.ctpop.i32(i32 %7562)
  %7564 = trunc i32 %7563 to i8
  %7565 = and i8 %7564, 1
  %7566 = xor i8 %7565, 1
  store i8 %7566, i8* %26, align 1
  %7567 = icmp eq i32 %7560, 0
  %7568 = zext i1 %7567 to i8
  store i8 %7568, i8* %34, align 1
  %7569 = lshr i32 %7560, 31
  %7570 = trunc i32 %7569 to i8
  store i8 %7570, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7571 = trunc i64 %7559 to i8
  store i8 %7571, i8* %CL.i4136, align 1
  %7572 = load i64, i64* %RBP.i, align 8
  %7573 = add i64 %7572, -16
  %7574 = add i64 %7555, 8
  store i64 %7574, i64* %3, align 8
  %7575 = inttoptr i64 %7573 to i64*
  %7576 = load i64, i64* %7575, align 8
  store i64 %7576, i64* %RDX.i7753, align 8
  %7577 = add i64 %7576, 4832
  %7578 = add i64 %7555, 15
  store i64 %7578, i64* %3, align 8
  %7579 = inttoptr i64 %7577 to i64*
  %7580 = load i64, i64* %7579, align 8
  store i64 %7580, i64* %RDX.i7753, align 8
  %7581 = add i64 %7555, 18
  store i64 %7581, i64* %3, align 8
  %7582 = inttoptr i64 %7580 to i64*
  %7583 = load i64, i64* %7582, align 8
  store i64 %7583, i64* %RDX.i7753, align 8
  %7584 = add i64 %7572, -52
  %7585 = add i64 %7555, 22
  store i64 %7585, i64* %3, align 8
  %7586 = inttoptr i64 %7584 to i32*
  %7587 = load i32, i32* %7586, align 4
  %7588 = sext i32 %7587 to i64
  store i64 %7588, i64* %RSI.i766, align 8
  %7589 = shl nsw i64 %7588, 3
  %7590 = add i64 %7589, %7583
  %7591 = add i64 %7555, 26
  store i64 %7591, i64* %3, align 8
  %7592 = inttoptr i64 %7590 to i64*
  %7593 = load i64, i64* %7592, align 8
  store i64 %7593, i64* %RDX.i7753, align 8
  %7594 = add i64 %7572, -56
  %7595 = add i64 %7555, 30
  store i64 %7595, i64* %3, align 8
  %7596 = inttoptr i64 %7594 to i32*
  %7597 = load i32, i32* %7596, align 4
  %7598 = sext i32 %7597 to i64
  store i64 %7598, i64* %RSI.i766, align 8
  %7599 = shl nsw i64 %7598, 1
  %7600 = add i64 %7599, %7593
  %7601 = add i64 %7555, 34
  store i64 %7601, i64* %3, align 8
  %7602 = inttoptr i64 %7600 to i16*
  %7603 = load i16, i16* %7602, align 2
  %7604 = sext i16 %7603 to i64
  %7605 = and i64 %7604, 4294967295
  store i64 %7605, i64* %RAX.i3176, align 8
  %7606 = sext i16 %7603 to i32
  %7607 = add nsw i32 %7606, 1
  %7608 = icmp ne i16 %7603, -1
  %7609 = zext i1 %7608 to i8
  store i8 %7609, i8* %19, align 1
  %7610 = and i32 %7607, 255
  %7611 = tail call i32 @llvm.ctpop.i32(i32 %7610)
  %7612 = trunc i32 %7611 to i8
  %7613 = and i8 %7612, 1
  %7614 = xor i8 %7613, 1
  store i8 %7614, i8* %26, align 1
  %7615 = xor i32 %7606, 16
  %7616 = xor i32 %7615, %7607
  %7617 = lshr i32 %7616, 4
  %7618 = trunc i32 %7617 to i8
  %7619 = and i8 %7618, 1
  store i8 %7619, i8* %31, align 1
  %7620 = icmp eq i32 %7607, 0
  %7621 = zext i1 %7620 to i8
  store i8 %7621, i8* %34, align 1
  %7622 = lshr i32 %7607, 31
  %7623 = trunc i32 %7622 to i8
  store i8 %7623, i8* %37, align 1
  %7624 = lshr i32 %7606, 31
  %7625 = xor i32 %7624, 1
  %7626 = xor i32 %7622, %7624
  %7627 = add nuw nsw i32 %7626, %7625
  %7628 = icmp eq i32 %7627, 2
  %7629 = zext i1 %7628 to i8
  store i8 %7629, i8* %43, align 1
  %7630 = add i64 %7572, -710
  %7631 = add i64 %7555, 43
  store i64 %7631, i64* %3, align 8
  %7632 = inttoptr i64 %7630 to i8*
  store i8 %7571, i8* %7632, align 1
  %7633 = load i64, i64* %3, align 8
  %7634 = add i64 %7633, 173
  %7635 = add i64 %7633, 6
  %7636 = load i8, i8* %34, align 1
  %7637 = icmp eq i8 %7636, 0
  %7638 = select i1 %7637, i64 %7634, i64 %7635
  store i64 %7638, i64* %3, align 8
  br i1 %7637, label %block_.L_45712f, label %block_457088

block_457088:                                     ; preds = %block_.L_457057
  store i64 0, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %CL.i4136, align 1
  %7639 = load i64, i64* %RBP.i, align 8
  %7640 = add i64 %7639, -16
  %7641 = add i64 %7638, 8
  store i64 %7641, i64* %3, align 8
  %7642 = inttoptr i64 %7640 to i64*
  %7643 = load i64, i64* %7642, align 8
  store i64 %7643, i64* %RDX.i7753, align 8
  %7644 = add i64 %7643, 4832
  %7645 = add i64 %7638, 15
  store i64 %7645, i64* %3, align 8
  %7646 = inttoptr i64 %7644 to i64*
  %7647 = load i64, i64* %7646, align 8
  store i64 %7647, i64* %RDX.i7753, align 8
  %7648 = add i64 %7647, 8
  %7649 = add i64 %7638, 19
  store i64 %7649, i64* %3, align 8
  %7650 = inttoptr i64 %7648 to i64*
  %7651 = load i64, i64* %7650, align 8
  store i64 %7651, i64* %RDX.i7753, align 8
  %7652 = add i64 %7639, -52
  %7653 = add i64 %7638, 23
  store i64 %7653, i64* %3, align 8
  %7654 = inttoptr i64 %7652 to i32*
  %7655 = load i32, i32* %7654, align 4
  %7656 = sext i32 %7655 to i64
  store i64 %7656, i64* %RSI.i766, align 8
  %7657 = shl nsw i64 %7656, 3
  %7658 = add i64 %7657, %7651
  %7659 = add i64 %7638, 27
  store i64 %7659, i64* %3, align 8
  %7660 = inttoptr i64 %7658 to i64*
  %7661 = load i64, i64* %7660, align 8
  store i64 %7661, i64* %RDX.i7753, align 8
  %7662 = add i64 %7639, -56
  %7663 = add i64 %7638, 31
  store i64 %7663, i64* %3, align 8
  %7664 = inttoptr i64 %7662 to i32*
  %7665 = load i32, i32* %7664, align 4
  %7666 = sext i32 %7665 to i64
  store i64 %7666, i64* %RSI.i766, align 8
  %7667 = shl nsw i64 %7666, 1
  %7668 = add i64 %7667, %7661
  %7669 = add i64 %7638, 35
  store i64 %7669, i64* %3, align 8
  %7670 = inttoptr i64 %7668 to i16*
  %7671 = load i16, i16* %7670, align 2
  %7672 = sext i16 %7671 to i64
  %7673 = and i64 %7672, 4294967295
  store i64 %7673, i64* %RAX.i3176, align 8
  %7674 = sext i16 %7671 to i32
  store i8 0, i8* %19, align 1
  %7675 = and i32 %7674, 255
  %7676 = tail call i32 @llvm.ctpop.i32(i32 %7675)
  %7677 = trunc i32 %7676 to i8
  %7678 = and i8 %7677, 1
  %7679 = xor i8 %7678, 1
  store i8 %7679, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7680 = icmp eq i16 %7671, 0
  %7681 = zext i1 %7680 to i8
  store i8 %7681, i8* %34, align 1
  %7682 = lshr i32 %7674, 31
  %7683 = trunc i32 %7682 to i8
  store i8 %7683, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %7684 = add i64 %7639, -710
  %7685 = add i64 %7638, 44
  store i64 %7685, i64* %3, align 8
  %7686 = inttoptr i64 %7684 to i8*
  store i8 0, i8* %7686, align 1
  %7687 = load i64, i64* %3, align 8
  %7688 = add i64 %7687, 123
  %7689 = add i64 %7687, 6
  %7690 = load i8, i8* %34, align 1
  %7691 = icmp eq i8 %7690, 0
  %7692 = select i1 %7691, i64 %7688, i64 %7689
  store i64 %7692, i64* %3, align 8
  br i1 %7691, label %block_.L_45712f, label %block_4570ba

block_4570ba:                                     ; preds = %block_457088
  %7693 = load i64, i64* %RBP.i, align 8
  %7694 = add i64 %7693, -16
  %7695 = add i64 %7692, 4
  store i64 %7695, i64* %3, align 8
  %7696 = inttoptr i64 %7694 to i64*
  %7697 = load i64, i64* %7696, align 8
  store i64 %7697, i64* %RAX.i3176, align 8
  %7698 = add i64 %7697, 4848
  %7699 = add i64 %7692, 11
  store i64 %7699, i64* %3, align 8
  %7700 = inttoptr i64 %7698 to i64*
  %7701 = load i64, i64* %7700, align 8
  store i64 %7701, i64* %RAX.i3176, align 8
  %7702 = add i64 %7701, 8
  %7703 = add i64 %7692, 15
  store i64 %7703, i64* %3, align 8
  %7704 = inttoptr i64 %7702 to i64*
  %7705 = load i64, i64* %7704, align 8
  store i64 %7705, i64* %RAX.i3176, align 8
  %7706 = add i64 %7693, -52
  %7707 = add i64 %7692, 19
  store i64 %7707, i64* %3, align 8
  %7708 = inttoptr i64 %7706 to i32*
  %7709 = load i32, i32* %7708, align 4
  %7710 = sext i32 %7709 to i64
  store i64 %7710, i64* %RCX.i7756, align 8
  %7711 = shl nsw i64 %7710, 3
  %7712 = add i64 %7711, %7705
  %7713 = add i64 %7692, 23
  store i64 %7713, i64* %3, align 8
  %7714 = inttoptr i64 %7712 to i64*
  %7715 = load i64, i64* %7714, align 8
  store i64 %7715, i64* %RAX.i3176, align 8
  %7716 = add i64 %7693, -56
  %7717 = add i64 %7692, 27
  store i64 %7717, i64* %3, align 8
  %7718 = inttoptr i64 %7716 to i32*
  %7719 = load i32, i32* %7718, align 4
  %7720 = sext i32 %7719 to i64
  store i64 %7720, i64* %RCX.i7756, align 8
  %7721 = shl nsw i64 %7720, 3
  %7722 = add i64 %7721, %7715
  %7723 = add i64 %7692, 31
  store i64 %7723, i64* %3, align 8
  %7724 = inttoptr i64 %7722 to i64*
  %7725 = load i64, i64* %7724, align 8
  store i64 %7725, i64* %RAX.i3176, align 8
  %7726 = add i64 %7692, 34
  store i64 %7726, i64* %3, align 8
  %7727 = inttoptr i64 %7725 to i16*
  %7728 = load i16, i16* %7727, align 2
  %7729 = sext i16 %7728 to i64
  %7730 = and i64 %7729, 4294967295
  store i64 %7730, i64* %RDI.i732, align 8
  %7731 = add i64 %7692, -352442
  %7732 = add i64 %7692, 39
  %7733 = load i64, i64* %6, align 8
  %7734 = add i64 %7733, -8
  %7735 = inttoptr i64 %7734 to i64*
  store i64 %7732, i64* %7735, align 8
  store i64 %7734, i64* %6, align 8
  store i64 %7731, i64* %3, align 8
  %7736 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.56)
  %7737 = load i64, i64* %3, align 8
  store i64 0, i64* %RDI.i732, align 8
  store i8 0, i8* %DL.i4045, align 1
  %7738 = load i64, i64* %RAX.i3176, align 8
  %7739 = shl i64 %7738, 32
  %7740 = ashr i64 %7739, 33
  %7741 = and i64 %7740, 4294967295
  store i64 %7741, i64* %RAX.i3176, align 8
  %7742 = trunc i64 %7740 to i32
  store i8 0, i8* %19, align 1
  %7743 = and i32 %7742, 255
  %7744 = tail call i32 @llvm.ctpop.i32(i32 %7743)
  %7745 = trunc i32 %7744 to i8
  %7746 = and i8 %7745, 1
  %7747 = xor i8 %7746, 1
  store i8 %7747, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7748 = icmp eq i32 %7742, 0
  %7749 = zext i1 %7748 to i8
  store i8 %7749, i8* %34, align 1
  %7750 = lshr i64 %7740, 31
  %7751 = trunc i64 %7750 to i8
  %7752 = and i8 %7751, 1
  store i8 %7752, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %7753 = load i64, i64* %RBP.i, align 8
  %7754 = add i64 %7753, -710
  %7755 = add i64 %7737, 16
  store i64 %7755, i64* %3, align 8
  %7756 = inttoptr i64 %7754 to i8*
  store i8 0, i8* %7756, align 1
  %7757 = load i64, i64* %3, align 8
  %7758 = add i64 %7757, 61
  %7759 = add i64 %7757, 6
  %7760 = load i8, i8* %34, align 1
  %7761 = icmp eq i8 %7760, 0
  %7762 = select i1 %7761, i64 %7758, i64 %7759
  store i64 %7762, i64* %3, align 8
  br i1 %7761, label %block_.L_45712f, label %block_4570f8

block_4570f8:                                     ; preds = %block_4570ba
  %7763 = load i64, i64* %RBP.i, align 8
  %7764 = add i64 %7763, -16
  %7765 = add i64 %7762, 4
  store i64 %7765, i64* %3, align 8
  %7766 = inttoptr i64 %7764 to i64*
  %7767 = load i64, i64* %7766, align 8
  store i64 %7767, i64* %RAX.i3176, align 8
  %7768 = add i64 %7767, 4848
  %7769 = add i64 %7762, 11
  store i64 %7769, i64* %3, align 8
  %7770 = inttoptr i64 %7768 to i64*
  %7771 = load i64, i64* %7770, align 8
  store i64 %7771, i64* %RAX.i3176, align 8
  %7772 = add i64 %7771, 8
  %7773 = add i64 %7762, 15
  store i64 %7773, i64* %3, align 8
  %7774 = inttoptr i64 %7772 to i64*
  %7775 = load i64, i64* %7774, align 8
  store i64 %7775, i64* %RAX.i3176, align 8
  %7776 = add i64 %7763, -52
  %7777 = add i64 %7762, 19
  store i64 %7777, i64* %3, align 8
  %7778 = inttoptr i64 %7776 to i32*
  %7779 = load i32, i32* %7778, align 4
  %7780 = sext i32 %7779 to i64
  store i64 %7780, i64* %RCX.i7756, align 8
  %7781 = shl nsw i64 %7780, 3
  %7782 = add i64 %7781, %7775
  %7783 = add i64 %7762, 23
  store i64 %7783, i64* %3, align 8
  %7784 = inttoptr i64 %7782 to i64*
  %7785 = load i64, i64* %7784, align 8
  store i64 %7785, i64* %RAX.i3176, align 8
  %7786 = add i64 %7763, -56
  %7787 = add i64 %7762, 27
  store i64 %7787, i64* %3, align 8
  %7788 = inttoptr i64 %7786 to i32*
  %7789 = load i32, i32* %7788, align 4
  %7790 = sext i32 %7789 to i64
  store i64 %7790, i64* %RCX.i7756, align 8
  %7791 = shl nsw i64 %7790, 3
  %7792 = add i64 %7791, %7785
  %7793 = add i64 %7762, 31
  store i64 %7793, i64* %3, align 8
  %7794 = inttoptr i64 %7792 to i64*
  %7795 = load i64, i64* %7794, align 8
  store i64 %7795, i64* %RAX.i3176, align 8
  %7796 = add i64 %7795, 2
  %7797 = add i64 %7762, 35
  store i64 %7797, i64* %3, align 8
  %7798 = inttoptr i64 %7796 to i16*
  %7799 = load i16, i16* %7798, align 2
  %7800 = sext i16 %7799 to i64
  %7801 = and i64 %7800, 4294967295
  store i64 %7801, i64* %RDI.i732, align 8
  %7802 = add i64 %7762, -352504
  %7803 = add i64 %7762, 40
  %7804 = load i64, i64* %6, align 8
  %7805 = add i64 %7804, -8
  %7806 = inttoptr i64 %7805 to i64*
  store i64 %7803, i64* %7806, align 8
  store i64 %7805, i64* %6, align 8
  store i64 %7802, i64* %3, align 8
  %7807 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %7736)
  %7808 = load i64, i64* %RAX.i3176, align 8
  %7809 = load i64, i64* %3, align 8
  %7810 = shl i64 %7808, 32
  %7811 = ashr i64 %7810, 33
  %7812 = and i64 %7811, 4294967295
  store i64 %7812, i64* %RAX.i3176, align 8
  %7813 = trunc i64 %7811 to i32
  store i8 0, i8* %19, align 1
  %7814 = and i32 %7813, 255
  %7815 = tail call i32 @llvm.ctpop.i32(i32 %7814)
  %7816 = trunc i32 %7815 to i8
  %7817 = and i8 %7816, 1
  %7818 = xor i8 %7817, 1
  store i8 %7818, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7819 = icmp eq i32 %7813, 0
  %7820 = zext i1 %7819 to i8
  store i8 %7820, i8* %34, align 1
  %7821 = lshr i64 %7811, 31
  %7822 = trunc i64 %7821 to i8
  %7823 = and i8 %7822, 1
  store i8 %7823, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 %7820, i8* %DL.i4045, align 1
  %7824 = load i64, i64* %RBP.i, align 8
  %7825 = add i64 %7824, -710
  %7826 = add i64 %7809, 14
  store i64 %7826, i64* %3, align 8
  %7827 = inttoptr i64 %7825 to i8*
  store i8 %7820, i8* %7827, align 1
  %.pre482 = load i64, i64* %3, align 8
  br label %block_.L_45712f

block_.L_45712f:                                  ; preds = %block_4570f8, %block_4570ba, %block_457088, %block_.L_457057
  %7828 = phi i64 [ %7634, %block_.L_457057 ], [ %7688, %block_457088 ], [ %7758, %block_4570ba ], [ %.pre482, %block_4570f8 ]
  %MEMORY.57 = phi %struct.Memory* [ %MEMORY.56, %block_.L_457057 ], [ %MEMORY.56, %block_457088 ], [ %7736, %block_4570ba ], [ %7807, %block_4570f8 ]
  %7829 = load i64, i64* %RBP.i, align 8
  %7830 = add i64 %7829, -710
  %7831 = add i64 %7828, 6
  store i64 %7831, i64* %3, align 8
  %7832 = inttoptr i64 %7830 to i8*
  %7833 = load i8, i8* %7832, align 1
  store i8 %7833, i8* %AL.i4135, align 1
  %7834 = add i64 %7829, -709
  %7835 = add i64 %7828, 12
  store i64 %7835, i64* %3, align 8
  %7836 = inttoptr i64 %7834 to i8*
  store i8 %7833, i8* %7836, align 1
  %.pre483 = load i64, i64* %3, align 8
  br label %block_.L_45713b

block_.L_45713b:                                  ; preds = %block_.L_45712f, %block_45701c
  %7837 = phi i64 [ %.pre483, %block_.L_45712f ], [ %7554, %block_45701c ]
  %MEMORY.58 = phi %struct.Memory* [ %MEMORY.57, %block_.L_45712f ], [ %7530, %block_45701c ]
  %7838 = load i64, i64* %RBP.i, align 8
  %7839 = add i64 %7838, -709
  %7840 = add i64 %7837, 6
  store i64 %7840, i64* %3, align 8
  %7841 = inttoptr i64 %7839 to i8*
  %7842 = load i8, i8* %7841, align 1
  %7843 = and i8 %7842, 1
  %7844 = xor i8 %7843, 1
  store i8 0, i8* %19, align 1
  %7845 = zext i8 %7844 to i32
  %7846 = tail call i32 @llvm.ctpop.i32(i32 %7845)
  %7847 = trunc i32 %7846 to i8
  %7848 = xor i8 %7847, 1
  store i8 %7848, i8* %26, align 1
  store i8 %7843, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7849 = zext i8 %7844 to i64
  store i64 %7849, i64* %RCX.i7756, align 8
  store i8 %7844, i8* %AL.i4135, align 1
  %7850 = add i64 %7838, -16
  %7851 = add i64 %7837, 19
  store i64 %7851, i64* %3, align 8
  %7852 = inttoptr i64 %7850 to i64*
  %7853 = load i64, i64* %7852, align 8
  store i64 %7853, i64* %RDX.i7753, align 8
  %7854 = add i64 %7853, 4856
  %7855 = add i64 %7837, 26
  store i64 %7855, i64* %3, align 8
  %7856 = inttoptr i64 %7854 to i64*
  %7857 = load i64, i64* %7856, align 8
  store i64 %7857, i64* %RDX.i7753, align 8
  %7858 = add i64 %7838, -52
  %7859 = add i64 %7837, 30
  store i64 %7859, i64* %3, align 8
  %7860 = inttoptr i64 %7858 to i32*
  %7861 = load i32, i32* %7860, align 4
  %7862 = sext i32 %7861 to i64
  store i64 %7862, i64* %RSI.i766, align 8
  %7863 = shl nsw i64 %7862, 3
  %7864 = add i64 %7863, %7857
  %7865 = add i64 %7837, 34
  store i64 %7865, i64* %3, align 8
  %7866 = inttoptr i64 %7864 to i64*
  %7867 = load i64, i64* %7866, align 8
  store i64 %7867, i64* %RDX.i7753, align 8
  %7868 = add i64 %7838, -56
  %7869 = add i64 %7837, 38
  store i64 %7869, i64* %3, align 8
  %7870 = inttoptr i64 %7868 to i32*
  %7871 = load i32, i32* %7870, align 4
  %7872 = sext i32 %7871 to i64
  store i64 %7872, i64* %RSI.i766, align 8
  %7873 = add i64 %7867, %7872
  %7874 = add i64 %7837, 41
  store i64 %7874, i64* %3, align 8
  %7875 = inttoptr i64 %7873 to i8*
  store i8 %7844, i8* %7875, align 1
  %.pre484 = load i64, i64* %3, align 8
  br label %block_.L_457164

block_.L_457164:                                  ; preds = %block_.L_456f6a, %block_.L_45713b
  %7876 = phi i64 [ %7370, %block_.L_456f6a ], [ %.pre484, %block_.L_45713b ]
  %MEMORY.59 = phi %struct.Memory* [ %3264, %block_.L_456f6a ], [ %MEMORY.58, %block_.L_45713b ]
  %7877 = load i64, i64* %RBP.i, align 8
  %7878 = add i64 %7877, -40
  %7879 = add i64 %7876, 4
  store i64 %7879, i64* %3, align 8
  %7880 = inttoptr i64 %7878 to i64*
  %7881 = load i64, i64* %7880, align 8
  store i64 %7881, i64* %RAX.i3176, align 8
  %7882 = add i64 %7881, 6504
  %7883 = add i64 %7876, 11
  store i64 %7883, i64* %3, align 8
  %7884 = inttoptr i64 %7882 to i64*
  %7885 = load i64, i64* %7884, align 8
  store i64 %7885, i64* %RAX.i3176, align 8
  %7886 = add i64 %7876, 14
  store i64 %7886, i64* %3, align 8
  %7887 = inttoptr i64 %7885 to i64*
  %7888 = load i64, i64* %7887, align 8
  store i64 %7888, i64* %RAX.i3176, align 8
  %7889 = add i64 %7877, -52
  %7890 = add i64 %7876, 17
  store i64 %7890, i64* %3, align 8
  %7891 = inttoptr i64 %7889 to i32*
  %7892 = load i32, i32* %7891, align 4
  %7893 = and i32 %7892, 2
  %7894 = zext i32 %7893 to i64
  store i64 %7894, i64* %RCX.i7756, align 8
  store i8 0, i8* %19, align 1
  %7895 = tail call i32 @llvm.ctpop.i32(i32 %7893)
  %7896 = trunc i32 %7895 to i8
  %7897 = xor i8 %7896, 1
  store i8 %7897, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit642 = lshr exact i32 %7893, 1
  %7898 = trunc i32 %.lobit642 to i8
  %7899 = xor i8 %7898, 1
  store i8 %7899, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %7900 = add i64 %7877, -720
  %7901 = add i64 %7876, 30
  store i64 %7901, i64* %3, align 8
  %7902 = inttoptr i64 %7900 to i64*
  store i64 %7888, i64* %7902, align 8
  %7903 = load i64, i64* %3, align 8
  %7904 = load i8, i8* %34, align 1
  %7905 = icmp ne i8 %7904, 0
  %.v786 = select i1 %7905, i64 23, i64 6
  %7906 = add i64 %7903, %.v786
  %cmpBr_457182 = icmp eq i8 %7904, 1
  %7907 = load i64, i64* %RBP.i, align 8
  %7908 = add i64 %7907, -52
  %7909 = add i64 %7906, 3
  store i64 %7909, i64* %3, align 8
  %7910 = inttoptr i64 %7908 to i32*
  %7911 = load i32, i32* %7910, align 4
  %7912 = zext i32 %7911 to i64
  store i64 %7912, i64* %RAX.i3176, align 8
  %7913 = add i64 %7906, 6
  store i64 %7913, i64* %3, align 8
  br i1 %cmpBr_457182, label %block_.L_457199, label %block_457188

block_457188:                                     ; preds = %block_.L_457164
  %7914 = or i64 %7912, 1
  %7915 = trunc i64 %7914 to i32
  store i64 %7914, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7916 = and i32 %7915, 255
  %7917 = tail call i32 @llvm.ctpop.i32(i32 %7916)
  %7918 = trunc i32 %7917 to i8
  %7919 = and i8 %7918, 1
  %7920 = xor i8 %7919, 1
  store i8 %7920, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %7921 = lshr i32 %7915, 31
  %7922 = trunc i32 %7921 to i8
  store i8 %7922, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7923 = add i64 %7907, -724
  %7924 = add i64 %7906, 12
  store i64 %7924, i64* %3, align 8
  %7925 = inttoptr i64 %7923 to i32*
  store i32 %7915, i32* %7925, align 4
  %7926 = load i64, i64* %3, align 8
  %7927 = add i64 %7926, 17
  store i64 %7927, i64* %3, align 8
  br label %block_.L_4571a5

block_.L_457199:                                  ; preds = %block_.L_457164
  %7928 = and i64 %7912, 4294967294
  store i64 %7928, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7929 = and i32 %7911, 254
  %7930 = tail call i32 @llvm.ctpop.i32(i32 %7929)
  %7931 = trunc i32 %7930 to i8
  %7932 = and i8 %7931, 1
  %7933 = xor i8 %7932, 1
  store i8 %7933, i8* %26, align 1
  %7934 = icmp ult i32 %7911, 2
  %7935 = zext i1 %7934 to i8
  store i8 %7935, i8* %34, align 1
  %7936 = lshr i32 %7911, 31
  %7937 = trunc i32 %7936 to i8
  store i8 %7937, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7938 = add i64 %7907, -724
  %7939 = trunc i64 %7928 to i32
  %7940 = add i64 %7906, 12
  store i64 %7940, i64* %3, align 8
  %7941 = inttoptr i64 %7938 to i32*
  store i32 %7939, i32* %7941, align 4
  %.pre485 = load i64, i64* %3, align 8
  br label %block_.L_4571a5

block_.L_4571a5:                                  ; preds = %block_.L_457199, %block_457188
  %7942 = phi i64 [ %.pre485, %block_.L_457199 ], [ %7927, %block_457188 ]
  %7943 = load i64, i64* %RBP.i, align 8
  %7944 = add i64 %7943, -724
  %7945 = add i64 %7942, 6
  store i64 %7945, i64* %3, align 8
  %7946 = inttoptr i64 %7944 to i32*
  %7947 = load i32, i32* %7946, align 4
  %7948 = zext i32 %7947 to i64
  store i64 %7948, i64* %RAX.i3176, align 8
  %7949 = sext i32 %7947 to i64
  store i64 %7949, i64* %RCX.i7756, align 8
  %7950 = add i64 %7943, -720
  %7951 = add i64 %7942, 16
  store i64 %7951, i64* %3, align 8
  %7952 = inttoptr i64 %7950 to i64*
  %7953 = load i64, i64* %7952, align 8
  store i64 %7953, i64* %RDX.i7753, align 8
  %7954 = shl nsw i64 %7949, 3
  %7955 = add i64 %7954, %7953
  %7956 = add i64 %7942, 20
  store i64 %7956, i64* %3, align 8
  %7957 = inttoptr i64 %7955 to i64*
  %7958 = load i64, i64* %7957, align 8
  store i64 %7958, i64* %RCX.i7756, align 8
  %7959 = add i64 %7943, -56
  %7960 = add i64 %7942, 23
  store i64 %7960, i64* %3, align 8
  %7961 = inttoptr i64 %7959 to i32*
  %7962 = load i32, i32* %7961, align 4
  %7963 = and i32 %7962, 2
  %7964 = zext i32 %7963 to i64
  store i64 %7964, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7965 = tail call i32 @llvm.ctpop.i32(i32 %7963)
  %7966 = trunc i32 %7965 to i8
  %7967 = xor i8 %7966, 1
  store i8 %7967, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit643 = lshr exact i32 %7963, 1
  %7968 = trunc i32 %.lobit643 to i8
  %7969 = xor i8 %7968, 1
  store i8 %7969, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %7970 = add i64 %7943, -736
  %7971 = add i64 %7942, 36
  store i64 %7971, i64* %3, align 8
  %7972 = inttoptr i64 %7970 to i64*
  store i64 %7958, i64* %7972, align 8
  %7973 = load i64, i64* %3, align 8
  %7974 = load i8, i8* %34, align 1
  %7975 = icmp ne i8 %7974, 0
  %.v787 = select i1 %7975, i64 23, i64 6
  %7976 = add i64 %7973, %.v787
  %cmpBr_4571c9 = icmp eq i8 %7974, 1
  %7977 = load i64, i64* %RBP.i, align 8
  %7978 = add i64 %7977, -56
  %7979 = add i64 %7976, 3
  store i64 %7979, i64* %3, align 8
  %7980 = inttoptr i64 %7978 to i32*
  %7981 = load i32, i32* %7980, align 4
  %7982 = zext i32 %7981 to i64
  store i64 %7982, i64* %RAX.i3176, align 8
  %7983 = add i64 %7976, 6
  store i64 %7983, i64* %3, align 8
  br i1 %cmpBr_4571c9, label %block_.L_4571e0, label %block_4571cf

block_4571cf:                                     ; preds = %block_.L_4571a5
  %7984 = or i64 %7982, 1
  %7985 = trunc i64 %7984 to i32
  store i64 %7984, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7986 = and i32 %7985, 255
  %7987 = tail call i32 @llvm.ctpop.i32(i32 %7986)
  %7988 = trunc i32 %7987 to i8
  %7989 = and i8 %7988, 1
  %7990 = xor i8 %7989, 1
  store i8 %7990, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %7991 = lshr i32 %7985, 31
  %7992 = trunc i32 %7991 to i8
  store i8 %7992, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7993 = add i64 %7977, -740
  %7994 = add i64 %7976, 12
  store i64 %7994, i64* %3, align 8
  %7995 = inttoptr i64 %7993 to i32*
  store i32 %7985, i32* %7995, align 4
  %7996 = load i64, i64* %3, align 8
  %7997 = add i64 %7996, 17
  store i64 %7997, i64* %3, align 8
  br label %block_.L_4571ec

block_.L_4571e0:                                  ; preds = %block_.L_4571a5
  %7998 = and i64 %7982, 4294967294
  store i64 %7998, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %7999 = and i32 %7981, 254
  %8000 = tail call i32 @llvm.ctpop.i32(i32 %7999)
  %8001 = trunc i32 %8000 to i8
  %8002 = and i8 %8001, 1
  %8003 = xor i8 %8002, 1
  store i8 %8003, i8* %26, align 1
  %8004 = icmp ult i32 %7981, 2
  %8005 = zext i1 %8004 to i8
  store i8 %8005, i8* %34, align 1
  %8006 = lshr i32 %7981, 31
  %8007 = trunc i32 %8006 to i8
  store i8 %8007, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8008 = add i64 %7977, -740
  %8009 = trunc i64 %7998 to i32
  %8010 = add i64 %7976, 12
  store i64 %8010, i64* %3, align 8
  %8011 = inttoptr i64 %8008 to i32*
  store i32 %8009, i32* %8011, align 4
  %.pre486 = load i64, i64* %3, align 8
  br label %block_.L_4571ec

block_.L_4571ec:                                  ; preds = %block_.L_4571e0, %block_4571cf
  %8012 = phi i64 [ %.pre486, %block_.L_4571e0 ], [ %7997, %block_4571cf ]
  %8013 = load i64, i64* %RBP.i, align 8
  %8014 = add i64 %8013, -740
  %8015 = add i64 %8012, 6
  store i64 %8015, i64* %3, align 8
  %8016 = inttoptr i64 %8014 to i32*
  %8017 = load i32, i32* %8016, align 4
  %8018 = zext i32 %8017 to i64
  store i64 %8018, i64* %RAX.i3176, align 8
  %8019 = sext i32 %8017 to i64
  store i64 %8019, i64* %RCX.i7756, align 8
  %8020 = add i64 %8013, -736
  %8021 = add i64 %8012, 16
  store i64 %8021, i64* %3, align 8
  %8022 = inttoptr i64 %8020 to i64*
  %8023 = load i64, i64* %8022, align 8
  store i64 %8023, i64* %RDX.i7753, align 8
  %8024 = shl nsw i64 %8019, 3
  %8025 = add i64 %8024, %8023
  %8026 = add i64 %8012, 20
  store i64 %8026, i64* %3, align 8
  %8027 = inttoptr i64 %8025 to i64*
  %8028 = load i64, i64* %8027, align 8
  store i64 %8028, i64* %RCX.i7756, align 8
  %8029 = add i64 %8012, 23
  store i64 %8029, i64* %3, align 8
  %8030 = inttoptr i64 %8028 to i16*
  %8031 = load i16, i16* %8030, align 2
  store i16 %8031, i16* %SI.i6180, align 2
  %8032 = add i64 %8013, -16
  %8033 = add i64 %8012, 27
  store i64 %8033, i64* %3, align 8
  %8034 = inttoptr i64 %8032 to i64*
  %8035 = load i64, i64* %8034, align 8
  store i64 %8035, i64* %RCX.i7756, align 8
  %8036 = add i64 %8035, 3232
  %8037 = add i64 %8012, 34
  store i64 %8037, i64* %3, align 8
  %8038 = inttoptr i64 %8036 to i64*
  %8039 = load i64, i64* %8038, align 8
  store i64 %8039, i64* %RCX.i7756, align 8
  %8040 = add i64 %8012, 37
  store i64 %8040, i64* %3, align 8
  %8041 = inttoptr i64 %8039 to i64*
  %8042 = load i64, i64* %8041, align 8
  store i64 %8042, i64* %RCX.i7756, align 8
  %8043 = add i64 %8013, -52
  %8044 = add i64 %8012, 41
  store i64 %8044, i64* %3, align 8
  %8045 = inttoptr i64 %8043 to i32*
  %8046 = load i32, i32* %8045, align 4
  %8047 = sext i32 %8046 to i64
  store i64 %8047, i64* %RDI.i732, align 8
  %8048 = shl nsw i64 %8047, 3
  %8049 = add i64 %8048, %8042
  %8050 = add i64 %8012, 45
  store i64 %8050, i64* %3, align 8
  %8051 = inttoptr i64 %8049 to i64*
  %8052 = load i64, i64* %8051, align 8
  store i64 %8052, i64* %RCX.i7756, align 8
  %8053 = add i64 %8013, -56
  %8054 = add i64 %8012, 49
  store i64 %8054, i64* %3, align 8
  %8055 = inttoptr i64 %8053 to i32*
  %8056 = load i32, i32* %8055, align 4
  %8057 = sext i32 %8056 to i64
  store i64 %8057, i64* %RDI.i732, align 8
  %8058 = shl nsw i64 %8057, 3
  %8059 = add i64 %8058, %8052
  %8060 = add i64 %8012, 53
  store i64 %8060, i64* %3, align 8
  %8061 = inttoptr i64 %8059 to i64*
  %8062 = load i64, i64* %8061, align 8
  store i64 %8062, i64* %RCX.i7756, align 8
  %8063 = add i64 %8012, 56
  store i64 %8063, i64* %3, align 8
  %8064 = inttoptr i64 %8062 to i16*
  store i16 %8031, i16* %8064, align 2
  %8065 = load i64, i64* %RBP.i, align 8
  %8066 = add i64 %8065, -40
  %8067 = load i64, i64* %3, align 8
  %8068 = add i64 %8067, 4
  store i64 %8068, i64* %3, align 8
  %8069 = inttoptr i64 %8066 to i64*
  %8070 = load i64, i64* %8069, align 8
  store i64 %8070, i64* %RCX.i7756, align 8
  %8071 = add i64 %8070, 6504
  %8072 = add i64 %8067, 11
  store i64 %8072, i64* %3, align 8
  %8073 = inttoptr i64 %8071 to i64*
  %8074 = load i64, i64* %8073, align 8
  store i64 %8074, i64* %RCX.i7756, align 8
  %8075 = add i64 %8067, 14
  store i64 %8075, i64* %3, align 8
  %8076 = inttoptr i64 %8074 to i64*
  %8077 = load i64, i64* %8076, align 8
  store i64 %8077, i64* %RCX.i7756, align 8
  %8078 = add i64 %8065, -52
  %8079 = add i64 %8067, 17
  store i64 %8079, i64* %3, align 8
  %8080 = inttoptr i64 %8078 to i32*
  %8081 = load i32, i32* %8080, align 4
  %8082 = and i32 %8081, 2
  %8083 = zext i32 %8082 to i64
  store i64 %8083, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8084 = tail call i32 @llvm.ctpop.i32(i32 %8082)
  %8085 = trunc i32 %8084 to i8
  %8086 = xor i8 %8085, 1
  store i8 %8086, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit644 = lshr exact i32 %8082, 1
  %8087 = trunc i32 %.lobit644 to i8
  %8088 = xor i8 %8087, 1
  store i8 %8088, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8089 = add i64 %8065, -752
  %8090 = add i64 %8067, 30
  store i64 %8090, i64* %3, align 8
  %8091 = inttoptr i64 %8089 to i64*
  store i64 %8077, i64* %8091, align 8
  %8092 = load i64, i64* %3, align 8
  %8093 = load i8, i8* %34, align 1
  %8094 = icmp ne i8 %8093, 0
  %.v788 = select i1 %8094, i64 23, i64 6
  %8095 = add i64 %8092, %.v788
  %cmpBr_457242 = icmp eq i8 %8093, 1
  %8096 = load i64, i64* %RBP.i, align 8
  %8097 = add i64 %8096, -52
  %8098 = add i64 %8095, 3
  store i64 %8098, i64* %3, align 8
  %8099 = inttoptr i64 %8097 to i32*
  %8100 = load i32, i32* %8099, align 4
  %8101 = zext i32 %8100 to i64
  store i64 %8101, i64* %RAX.i3176, align 8
  %8102 = add i64 %8095, 6
  store i64 %8102, i64* %3, align 8
  br i1 %cmpBr_457242, label %block_.L_457259, label %block_457248

block_457248:                                     ; preds = %block_.L_4571ec
  %8103 = or i64 %8101, 1
  %8104 = trunc i64 %8103 to i32
  store i64 %8103, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8105 = and i32 %8104, 255
  %8106 = tail call i32 @llvm.ctpop.i32(i32 %8105)
  %8107 = trunc i32 %8106 to i8
  %8108 = and i8 %8107, 1
  %8109 = xor i8 %8108, 1
  store i8 %8109, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8110 = lshr i32 %8104, 31
  %8111 = trunc i32 %8110 to i8
  store i8 %8111, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8112 = add i64 %8096, -756
  %8113 = add i64 %8095, 12
  store i64 %8113, i64* %3, align 8
  %8114 = inttoptr i64 %8112 to i32*
  store i32 %8104, i32* %8114, align 4
  %8115 = load i64, i64* %3, align 8
  %8116 = add i64 %8115, 17
  store i64 %8116, i64* %3, align 8
  br label %block_.L_457265

block_.L_457259:                                  ; preds = %block_.L_4571ec
  %8117 = and i64 %8101, 4294967294
  store i64 %8117, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8118 = and i32 %8100, 254
  %8119 = tail call i32 @llvm.ctpop.i32(i32 %8118)
  %8120 = trunc i32 %8119 to i8
  %8121 = and i8 %8120, 1
  %8122 = xor i8 %8121, 1
  store i8 %8122, i8* %26, align 1
  %8123 = icmp ult i32 %8100, 2
  %8124 = zext i1 %8123 to i8
  store i8 %8124, i8* %34, align 1
  %8125 = lshr i32 %8100, 31
  %8126 = trunc i32 %8125 to i8
  store i8 %8126, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8127 = add i64 %8096, -756
  %8128 = trunc i64 %8117 to i32
  %8129 = add i64 %8095, 12
  store i64 %8129, i64* %3, align 8
  %8130 = inttoptr i64 %8127 to i32*
  store i32 %8128, i32* %8130, align 4
  %.pre487 = load i64, i64* %3, align 8
  br label %block_.L_457265

block_.L_457265:                                  ; preds = %block_.L_457259, %block_457248
  %8131 = phi i64 [ %.pre487, %block_.L_457259 ], [ %8116, %block_457248 ]
  %8132 = load i64, i64* %RBP.i, align 8
  %8133 = add i64 %8132, -756
  %8134 = add i64 %8131, 6
  store i64 %8134, i64* %3, align 8
  %8135 = inttoptr i64 %8133 to i32*
  %8136 = load i32, i32* %8135, align 4
  %8137 = zext i32 %8136 to i64
  store i64 %8137, i64* %RAX.i3176, align 8
  %8138 = sext i32 %8136 to i64
  store i64 %8138, i64* %RCX.i7756, align 8
  %8139 = add i64 %8132, -752
  %8140 = add i64 %8131, 16
  store i64 %8140, i64* %3, align 8
  %8141 = inttoptr i64 %8139 to i64*
  %8142 = load i64, i64* %8141, align 8
  store i64 %8142, i64* %RDX.i7753, align 8
  %8143 = shl nsw i64 %8138, 3
  %8144 = add i64 %8143, %8142
  %8145 = add i64 %8131, 20
  store i64 %8145, i64* %3, align 8
  %8146 = inttoptr i64 %8144 to i64*
  %8147 = load i64, i64* %8146, align 8
  store i64 %8147, i64* %RCX.i7756, align 8
  %8148 = add i64 %8132, -56
  %8149 = add i64 %8131, 23
  store i64 %8149, i64* %3, align 8
  %8150 = inttoptr i64 %8148 to i32*
  %8151 = load i32, i32* %8150, align 4
  %8152 = and i32 %8151, 2
  %8153 = zext i32 %8152 to i64
  store i64 %8153, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8154 = tail call i32 @llvm.ctpop.i32(i32 %8152)
  %8155 = trunc i32 %8154 to i8
  %8156 = xor i8 %8155, 1
  store i8 %8156, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit645 = lshr exact i32 %8152, 1
  %8157 = trunc i32 %.lobit645 to i8
  %8158 = xor i8 %8157, 1
  store i8 %8158, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8159 = add i64 %8132, -768
  %8160 = add i64 %8131, 36
  store i64 %8160, i64* %3, align 8
  %8161 = inttoptr i64 %8159 to i64*
  store i64 %8147, i64* %8161, align 8
  %8162 = load i64, i64* %3, align 8
  %8163 = load i8, i8* %34, align 1
  %8164 = icmp ne i8 %8163, 0
  %.v789 = select i1 %8164, i64 23, i64 6
  %8165 = add i64 %8162, %.v789
  %cmpBr_457289 = icmp eq i8 %8163, 1
  %8166 = load i64, i64* %RBP.i, align 8
  %8167 = add i64 %8166, -56
  %8168 = add i64 %8165, 3
  store i64 %8168, i64* %3, align 8
  %8169 = inttoptr i64 %8167 to i32*
  %8170 = load i32, i32* %8169, align 4
  %8171 = zext i32 %8170 to i64
  store i64 %8171, i64* %RAX.i3176, align 8
  %8172 = add i64 %8165, 6
  store i64 %8172, i64* %3, align 8
  br i1 %cmpBr_457289, label %block_.L_4572a0, label %block_45728f

block_45728f:                                     ; preds = %block_.L_457265
  %8173 = or i64 %8171, 1
  %8174 = trunc i64 %8173 to i32
  store i64 %8173, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8175 = and i32 %8174, 255
  %8176 = tail call i32 @llvm.ctpop.i32(i32 %8175)
  %8177 = trunc i32 %8176 to i8
  %8178 = and i8 %8177, 1
  %8179 = xor i8 %8178, 1
  store i8 %8179, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8180 = lshr i32 %8174, 31
  %8181 = trunc i32 %8180 to i8
  store i8 %8181, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8182 = add i64 %8166, -772
  %8183 = add i64 %8165, 12
  store i64 %8183, i64* %3, align 8
  %8184 = inttoptr i64 %8182 to i32*
  store i32 %8174, i32* %8184, align 4
  %8185 = load i64, i64* %3, align 8
  %8186 = add i64 %8185, 17
  store i64 %8186, i64* %3, align 8
  br label %block_.L_4572ac

block_.L_4572a0:                                  ; preds = %block_.L_457265
  %8187 = and i64 %8171, 4294967294
  store i64 %8187, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8188 = and i32 %8170, 254
  %8189 = tail call i32 @llvm.ctpop.i32(i32 %8188)
  %8190 = trunc i32 %8189 to i8
  %8191 = and i8 %8190, 1
  %8192 = xor i8 %8191, 1
  store i8 %8192, i8* %26, align 1
  %8193 = icmp ult i32 %8170, 2
  %8194 = zext i1 %8193 to i8
  store i8 %8194, i8* %34, align 1
  %8195 = lshr i32 %8170, 31
  %8196 = trunc i32 %8195 to i8
  store i8 %8196, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8197 = add i64 %8166, -772
  %8198 = trunc i64 %8187 to i32
  %8199 = add i64 %8165, 12
  store i64 %8199, i64* %3, align 8
  %8200 = inttoptr i64 %8197 to i32*
  store i32 %8198, i32* %8200, align 4
  %.pre488 = load i64, i64* %3, align 8
  br label %block_.L_4572ac

block_.L_4572ac:                                  ; preds = %block_.L_4572a0, %block_45728f
  %8201 = phi i64 [ %.pre488, %block_.L_4572a0 ], [ %8186, %block_45728f ]
  %8202 = load i64, i64* %RBP.i, align 8
  %8203 = add i64 %8202, -772
  %8204 = add i64 %8201, 6
  store i64 %8204, i64* %3, align 8
  %8205 = inttoptr i64 %8203 to i32*
  %8206 = load i32, i32* %8205, align 4
  %8207 = zext i32 %8206 to i64
  store i64 %8207, i64* %RAX.i3176, align 8
  %8208 = sext i32 %8206 to i64
  store i64 %8208, i64* %RCX.i7756, align 8
  %8209 = add i64 %8202, -768
  %8210 = add i64 %8201, 16
  store i64 %8210, i64* %3, align 8
  %8211 = inttoptr i64 %8209 to i64*
  %8212 = load i64, i64* %8211, align 8
  store i64 %8212, i64* %RDX.i7753, align 8
  %8213 = shl nsw i64 %8208, 3
  %8214 = add i64 %8213, %8212
  %8215 = add i64 %8201, 20
  store i64 %8215, i64* %3, align 8
  %8216 = inttoptr i64 %8214 to i64*
  %8217 = load i64, i64* %8216, align 8
  store i64 %8217, i64* %RCX.i7756, align 8
  %8218 = add i64 %8217, 2
  %8219 = add i64 %8201, 24
  store i64 %8219, i64* %3, align 8
  %8220 = inttoptr i64 %8218 to i16*
  %8221 = load i16, i16* %8220, align 2
  store i16 %8221, i16* %SI.i6180, align 2
  %8222 = add i64 %8202, -16
  %8223 = add i64 %8201, 28
  store i64 %8223, i64* %3, align 8
  %8224 = inttoptr i64 %8222 to i64*
  %8225 = load i64, i64* %8224, align 8
  store i64 %8225, i64* %RCX.i7756, align 8
  %8226 = add i64 %8225, 3232
  %8227 = add i64 %8201, 35
  store i64 %8227, i64* %3, align 8
  %8228 = inttoptr i64 %8226 to i64*
  %8229 = load i64, i64* %8228, align 8
  store i64 %8229, i64* %RCX.i7756, align 8
  %8230 = add i64 %8201, 38
  store i64 %8230, i64* %3, align 8
  %8231 = inttoptr i64 %8229 to i64*
  %8232 = load i64, i64* %8231, align 8
  store i64 %8232, i64* %RCX.i7756, align 8
  %8233 = add i64 %8202, -52
  %8234 = add i64 %8201, 42
  store i64 %8234, i64* %3, align 8
  %8235 = inttoptr i64 %8233 to i32*
  %8236 = load i32, i32* %8235, align 4
  %8237 = sext i32 %8236 to i64
  store i64 %8237, i64* %RDI.i732, align 8
  %8238 = shl nsw i64 %8237, 3
  %8239 = add i64 %8238, %8232
  %8240 = add i64 %8201, 46
  store i64 %8240, i64* %3, align 8
  %8241 = inttoptr i64 %8239 to i64*
  %8242 = load i64, i64* %8241, align 8
  store i64 %8242, i64* %RCX.i7756, align 8
  %8243 = add i64 %8202, -56
  %8244 = add i64 %8201, 50
  store i64 %8244, i64* %3, align 8
  %8245 = inttoptr i64 %8243 to i32*
  %8246 = load i32, i32* %8245, align 4
  %8247 = sext i32 %8246 to i64
  store i64 %8247, i64* %RDI.i732, align 8
  %8248 = shl nsw i64 %8247, 3
  %8249 = add i64 %8248, %8242
  %8250 = add i64 %8201, 54
  store i64 %8250, i64* %3, align 8
  %8251 = inttoptr i64 %8249 to i64*
  %8252 = load i64, i64* %8251, align 8
  store i64 %8252, i64* %RCX.i7756, align 8
  %8253 = add i64 %8252, 2
  %8254 = add i64 %8201, 58
  store i64 %8254, i64* %3, align 8
  %8255 = inttoptr i64 %8253 to i16*
  store i16 %8221, i16* %8255, align 2
  %8256 = load i64, i64* %RBP.i, align 8
  %8257 = add i64 %8256, -40
  %8258 = load i64, i64* %3, align 8
  %8259 = add i64 %8258, 4
  store i64 %8259, i64* %3, align 8
  %8260 = inttoptr i64 %8257 to i64*
  %8261 = load i64, i64* %8260, align 8
  store i64 %8261, i64* %RCX.i7756, align 8
  %8262 = add i64 %8261, 6504
  %8263 = add i64 %8258, 11
  store i64 %8263, i64* %3, align 8
  %8264 = inttoptr i64 %8262 to i64*
  %8265 = load i64, i64* %8264, align 8
  store i64 %8265, i64* %RCX.i7756, align 8
  %8266 = add i64 %8265, 8
  %8267 = add i64 %8258, 15
  store i64 %8267, i64* %3, align 8
  %8268 = inttoptr i64 %8266 to i64*
  %8269 = load i64, i64* %8268, align 8
  store i64 %8269, i64* %RCX.i7756, align 8
  %8270 = add i64 %8256, -52
  %8271 = add i64 %8258, 18
  store i64 %8271, i64* %3, align 8
  %8272 = inttoptr i64 %8270 to i32*
  %8273 = load i32, i32* %8272, align 4
  %8274 = and i32 %8273, 2
  %8275 = zext i32 %8274 to i64
  store i64 %8275, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8276 = tail call i32 @llvm.ctpop.i32(i32 %8274)
  %8277 = trunc i32 %8276 to i8
  %8278 = xor i8 %8277, 1
  store i8 %8278, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit646 = lshr exact i32 %8274, 1
  %8279 = trunc i32 %.lobit646 to i8
  %8280 = xor i8 %8279, 1
  store i8 %8280, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8281 = add i64 %8256, -784
  %8282 = add i64 %8258, 31
  store i64 %8282, i64* %3, align 8
  %8283 = inttoptr i64 %8281 to i64*
  store i64 %8269, i64* %8283, align 8
  %8284 = load i64, i64* %3, align 8
  %8285 = load i8, i8* %34, align 1
  %8286 = icmp ne i8 %8285, 0
  %.v790 = select i1 %8286, i64 23, i64 6
  %8287 = add i64 %8284, %.v790
  %cmpBr_457305 = icmp eq i8 %8285, 1
  %8288 = load i64, i64* %RBP.i, align 8
  %8289 = add i64 %8288, -52
  %8290 = add i64 %8287, 3
  store i64 %8290, i64* %3, align 8
  %8291 = inttoptr i64 %8289 to i32*
  %8292 = load i32, i32* %8291, align 4
  %8293 = zext i32 %8292 to i64
  store i64 %8293, i64* %RAX.i3176, align 8
  %8294 = add i64 %8287, 6
  store i64 %8294, i64* %3, align 8
  br i1 %cmpBr_457305, label %block_.L_45731c, label %block_45730b

block_45730b:                                     ; preds = %block_.L_4572ac
  %8295 = or i64 %8293, 1
  %8296 = trunc i64 %8295 to i32
  store i64 %8295, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8297 = and i32 %8296, 255
  %8298 = tail call i32 @llvm.ctpop.i32(i32 %8297)
  %8299 = trunc i32 %8298 to i8
  %8300 = and i8 %8299, 1
  %8301 = xor i8 %8300, 1
  store i8 %8301, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8302 = lshr i32 %8296, 31
  %8303 = trunc i32 %8302 to i8
  store i8 %8303, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8304 = add i64 %8288, -788
  %8305 = add i64 %8287, 12
  store i64 %8305, i64* %3, align 8
  %8306 = inttoptr i64 %8304 to i32*
  store i32 %8296, i32* %8306, align 4
  %8307 = load i64, i64* %3, align 8
  %8308 = add i64 %8307, 17
  store i64 %8308, i64* %3, align 8
  br label %block_.L_457328

block_.L_45731c:                                  ; preds = %block_.L_4572ac
  %8309 = and i64 %8293, 4294967294
  store i64 %8309, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8310 = and i32 %8292, 254
  %8311 = tail call i32 @llvm.ctpop.i32(i32 %8310)
  %8312 = trunc i32 %8311 to i8
  %8313 = and i8 %8312, 1
  %8314 = xor i8 %8313, 1
  store i8 %8314, i8* %26, align 1
  %8315 = icmp ult i32 %8292, 2
  %8316 = zext i1 %8315 to i8
  store i8 %8316, i8* %34, align 1
  %8317 = lshr i32 %8292, 31
  %8318 = trunc i32 %8317 to i8
  store i8 %8318, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8319 = add i64 %8288, -788
  %8320 = trunc i64 %8309 to i32
  %8321 = add i64 %8287, 12
  store i64 %8321, i64* %3, align 8
  %8322 = inttoptr i64 %8319 to i32*
  store i32 %8320, i32* %8322, align 4
  %.pre489 = load i64, i64* %3, align 8
  br label %block_.L_457328

block_.L_457328:                                  ; preds = %block_.L_45731c, %block_45730b
  %8323 = phi i64 [ %.pre489, %block_.L_45731c ], [ %8308, %block_45730b ]
  %8324 = load i64, i64* %RBP.i, align 8
  %8325 = add i64 %8324, -788
  %8326 = add i64 %8323, 6
  store i64 %8326, i64* %3, align 8
  %8327 = inttoptr i64 %8325 to i32*
  %8328 = load i32, i32* %8327, align 4
  %8329 = zext i32 %8328 to i64
  store i64 %8329, i64* %RAX.i3176, align 8
  %8330 = sext i32 %8328 to i64
  store i64 %8330, i64* %RCX.i7756, align 8
  %8331 = add i64 %8324, -784
  %8332 = add i64 %8323, 16
  store i64 %8332, i64* %3, align 8
  %8333 = inttoptr i64 %8331 to i64*
  %8334 = load i64, i64* %8333, align 8
  store i64 %8334, i64* %RDX.i7753, align 8
  %8335 = shl nsw i64 %8330, 3
  %8336 = add i64 %8335, %8334
  %8337 = add i64 %8323, 20
  store i64 %8337, i64* %3, align 8
  %8338 = inttoptr i64 %8336 to i64*
  %8339 = load i64, i64* %8338, align 8
  store i64 %8339, i64* %RCX.i7756, align 8
  %8340 = add i64 %8324, -56
  %8341 = add i64 %8323, 23
  store i64 %8341, i64* %3, align 8
  %8342 = inttoptr i64 %8340 to i32*
  %8343 = load i32, i32* %8342, align 4
  %8344 = and i32 %8343, 2
  %8345 = zext i32 %8344 to i64
  store i64 %8345, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8346 = tail call i32 @llvm.ctpop.i32(i32 %8344)
  %8347 = trunc i32 %8346 to i8
  %8348 = xor i8 %8347, 1
  store i8 %8348, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit647 = lshr exact i32 %8344, 1
  %8349 = trunc i32 %.lobit647 to i8
  %8350 = xor i8 %8349, 1
  store i8 %8350, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8351 = add i64 %8324, -800
  %8352 = add i64 %8323, 36
  store i64 %8352, i64* %3, align 8
  %8353 = inttoptr i64 %8351 to i64*
  store i64 %8339, i64* %8353, align 8
  %8354 = load i64, i64* %3, align 8
  %8355 = load i8, i8* %34, align 1
  %8356 = icmp ne i8 %8355, 0
  %.v791 = select i1 %8356, i64 23, i64 6
  %8357 = add i64 %8354, %.v791
  %cmpBr_45734c = icmp eq i8 %8355, 1
  %8358 = load i64, i64* %RBP.i, align 8
  %8359 = add i64 %8358, -56
  %8360 = add i64 %8357, 3
  store i64 %8360, i64* %3, align 8
  %8361 = inttoptr i64 %8359 to i32*
  %8362 = load i32, i32* %8361, align 4
  %8363 = zext i32 %8362 to i64
  store i64 %8363, i64* %RAX.i3176, align 8
  %8364 = add i64 %8357, 6
  store i64 %8364, i64* %3, align 8
  br i1 %cmpBr_45734c, label %block_.L_457363, label %block_457352

block_457352:                                     ; preds = %block_.L_457328
  %8365 = or i64 %8363, 1
  %8366 = trunc i64 %8365 to i32
  store i64 %8365, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8367 = and i32 %8366, 255
  %8368 = tail call i32 @llvm.ctpop.i32(i32 %8367)
  %8369 = trunc i32 %8368 to i8
  %8370 = and i8 %8369, 1
  %8371 = xor i8 %8370, 1
  store i8 %8371, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8372 = lshr i32 %8366, 31
  %8373 = trunc i32 %8372 to i8
  store i8 %8373, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8374 = add i64 %8358, -804
  %8375 = add i64 %8357, 12
  store i64 %8375, i64* %3, align 8
  %8376 = inttoptr i64 %8374 to i32*
  store i32 %8366, i32* %8376, align 4
  %8377 = load i64, i64* %3, align 8
  %8378 = add i64 %8377, 17
  store i64 %8378, i64* %3, align 8
  br label %block_.L_45736f

block_.L_457363:                                  ; preds = %block_.L_457328
  %8379 = and i64 %8363, 4294967294
  store i64 %8379, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8380 = and i32 %8362, 254
  %8381 = tail call i32 @llvm.ctpop.i32(i32 %8380)
  %8382 = trunc i32 %8381 to i8
  %8383 = and i8 %8382, 1
  %8384 = xor i8 %8383, 1
  store i8 %8384, i8* %26, align 1
  %8385 = icmp ult i32 %8362, 2
  %8386 = zext i1 %8385 to i8
  store i8 %8386, i8* %34, align 1
  %8387 = lshr i32 %8362, 31
  %8388 = trunc i32 %8387 to i8
  store i8 %8388, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8389 = add i64 %8358, -804
  %8390 = trunc i64 %8379 to i32
  %8391 = add i64 %8357, 12
  store i64 %8391, i64* %3, align 8
  %8392 = inttoptr i64 %8389 to i32*
  store i32 %8390, i32* %8392, align 4
  %.pre490 = load i64, i64* %3, align 8
  br label %block_.L_45736f

block_.L_45736f:                                  ; preds = %block_.L_457363, %block_457352
  %8393 = phi i64 [ %.pre490, %block_.L_457363 ], [ %8378, %block_457352 ]
  %8394 = load i64, i64* %RBP.i, align 8
  %8395 = add i64 %8394, -804
  %8396 = add i64 %8393, 6
  store i64 %8396, i64* %3, align 8
  %8397 = inttoptr i64 %8395 to i32*
  %8398 = load i32, i32* %8397, align 4
  %8399 = zext i32 %8398 to i64
  store i64 %8399, i64* %RAX.i3176, align 8
  %8400 = sext i32 %8398 to i64
  store i64 %8400, i64* %RCX.i7756, align 8
  %8401 = add i64 %8394, -800
  %8402 = add i64 %8393, 16
  store i64 %8402, i64* %3, align 8
  %8403 = inttoptr i64 %8401 to i64*
  %8404 = load i64, i64* %8403, align 8
  store i64 %8404, i64* %RDX.i7753, align 8
  %8405 = shl nsw i64 %8400, 3
  %8406 = add i64 %8405, %8404
  %8407 = add i64 %8393, 20
  store i64 %8407, i64* %3, align 8
  %8408 = inttoptr i64 %8406 to i64*
  %8409 = load i64, i64* %8408, align 8
  store i64 %8409, i64* %RCX.i7756, align 8
  %8410 = add i64 %8393, 23
  store i64 %8410, i64* %3, align 8
  %8411 = inttoptr i64 %8409 to i16*
  %8412 = load i16, i16* %8411, align 2
  store i16 %8412, i16* %SI.i6180, align 2
  %8413 = add i64 %8394, -16
  %8414 = add i64 %8393, 27
  store i64 %8414, i64* %3, align 8
  %8415 = inttoptr i64 %8413 to i64*
  %8416 = load i64, i64* %8415, align 8
  store i64 %8416, i64* %RCX.i7756, align 8
  %8417 = add i64 %8416, 3232
  %8418 = add i64 %8393, 34
  store i64 %8418, i64* %3, align 8
  %8419 = inttoptr i64 %8417 to i64*
  %8420 = load i64, i64* %8419, align 8
  store i64 %8420, i64* %RCX.i7756, align 8
  %8421 = add i64 %8420, 8
  %8422 = add i64 %8393, 38
  store i64 %8422, i64* %3, align 8
  %8423 = inttoptr i64 %8421 to i64*
  %8424 = load i64, i64* %8423, align 8
  store i64 %8424, i64* %RCX.i7756, align 8
  %8425 = add i64 %8394, -52
  %8426 = add i64 %8393, 42
  store i64 %8426, i64* %3, align 8
  %8427 = inttoptr i64 %8425 to i32*
  %8428 = load i32, i32* %8427, align 4
  %8429 = sext i32 %8428 to i64
  store i64 %8429, i64* %RDI.i732, align 8
  %8430 = shl nsw i64 %8429, 3
  %8431 = add i64 %8430, %8424
  %8432 = add i64 %8393, 46
  store i64 %8432, i64* %3, align 8
  %8433 = inttoptr i64 %8431 to i64*
  %8434 = load i64, i64* %8433, align 8
  store i64 %8434, i64* %RCX.i7756, align 8
  %8435 = add i64 %8394, -56
  %8436 = add i64 %8393, 50
  store i64 %8436, i64* %3, align 8
  %8437 = inttoptr i64 %8435 to i32*
  %8438 = load i32, i32* %8437, align 4
  %8439 = sext i32 %8438 to i64
  store i64 %8439, i64* %RDI.i732, align 8
  %8440 = shl nsw i64 %8439, 3
  %8441 = add i64 %8440, %8434
  %8442 = add i64 %8393, 54
  store i64 %8442, i64* %3, align 8
  %8443 = inttoptr i64 %8441 to i64*
  %8444 = load i64, i64* %8443, align 8
  store i64 %8444, i64* %RCX.i7756, align 8
  %8445 = add i64 %8393, 57
  store i64 %8445, i64* %3, align 8
  %8446 = inttoptr i64 %8444 to i16*
  store i16 %8412, i16* %8446, align 2
  %8447 = load i64, i64* %RBP.i, align 8
  %8448 = add i64 %8447, -40
  %8449 = load i64, i64* %3, align 8
  %8450 = add i64 %8449, 4
  store i64 %8450, i64* %3, align 8
  %8451 = inttoptr i64 %8448 to i64*
  %8452 = load i64, i64* %8451, align 8
  store i64 %8452, i64* %RCX.i7756, align 8
  %8453 = add i64 %8452, 6504
  %8454 = add i64 %8449, 11
  store i64 %8454, i64* %3, align 8
  %8455 = inttoptr i64 %8453 to i64*
  %8456 = load i64, i64* %8455, align 8
  store i64 %8456, i64* %RCX.i7756, align 8
  %8457 = add i64 %8456, 8
  %8458 = add i64 %8449, 15
  store i64 %8458, i64* %3, align 8
  %8459 = inttoptr i64 %8457 to i64*
  %8460 = load i64, i64* %8459, align 8
  store i64 %8460, i64* %RCX.i7756, align 8
  %8461 = add i64 %8447, -52
  %8462 = add i64 %8449, 18
  store i64 %8462, i64* %3, align 8
  %8463 = inttoptr i64 %8461 to i32*
  %8464 = load i32, i32* %8463, align 4
  %8465 = and i32 %8464, 2
  %8466 = zext i32 %8465 to i64
  store i64 %8466, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8467 = tail call i32 @llvm.ctpop.i32(i32 %8465)
  %8468 = trunc i32 %8467 to i8
  %8469 = xor i8 %8468, 1
  store i8 %8469, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit648 = lshr exact i32 %8465, 1
  %8470 = trunc i32 %.lobit648 to i8
  %8471 = xor i8 %8470, 1
  store i8 %8471, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8472 = add i64 %8447, -816
  %8473 = add i64 %8449, 31
  store i64 %8473, i64* %3, align 8
  %8474 = inttoptr i64 %8472 to i64*
  store i64 %8460, i64* %8474, align 8
  %8475 = load i64, i64* %3, align 8
  %8476 = load i8, i8* %34, align 1
  %8477 = icmp ne i8 %8476, 0
  %.v792 = select i1 %8477, i64 23, i64 6
  %8478 = add i64 %8475, %.v792
  %cmpBr_4573c7 = icmp eq i8 %8476, 1
  %8479 = load i64, i64* %RBP.i, align 8
  %8480 = add i64 %8479, -52
  %8481 = add i64 %8478, 3
  store i64 %8481, i64* %3, align 8
  %8482 = inttoptr i64 %8480 to i32*
  %8483 = load i32, i32* %8482, align 4
  %8484 = zext i32 %8483 to i64
  store i64 %8484, i64* %RAX.i3176, align 8
  %8485 = add i64 %8478, 6
  store i64 %8485, i64* %3, align 8
  br i1 %cmpBr_4573c7, label %block_.L_4573de, label %block_4573cd

block_4573cd:                                     ; preds = %block_.L_45736f
  %8486 = or i64 %8484, 1
  %8487 = trunc i64 %8486 to i32
  store i64 %8486, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8488 = and i32 %8487, 255
  %8489 = tail call i32 @llvm.ctpop.i32(i32 %8488)
  %8490 = trunc i32 %8489 to i8
  %8491 = and i8 %8490, 1
  %8492 = xor i8 %8491, 1
  store i8 %8492, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8493 = lshr i32 %8487, 31
  %8494 = trunc i32 %8493 to i8
  store i8 %8494, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8495 = add i64 %8479, -820
  %8496 = add i64 %8478, 12
  store i64 %8496, i64* %3, align 8
  %8497 = inttoptr i64 %8495 to i32*
  store i32 %8487, i32* %8497, align 4
  %8498 = load i64, i64* %3, align 8
  %8499 = add i64 %8498, 17
  store i64 %8499, i64* %3, align 8
  br label %block_.L_4573ea

block_.L_4573de:                                  ; preds = %block_.L_45736f
  %8500 = and i64 %8484, 4294967294
  store i64 %8500, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8501 = and i32 %8483, 254
  %8502 = tail call i32 @llvm.ctpop.i32(i32 %8501)
  %8503 = trunc i32 %8502 to i8
  %8504 = and i8 %8503, 1
  %8505 = xor i8 %8504, 1
  store i8 %8505, i8* %26, align 1
  %8506 = icmp ult i32 %8483, 2
  %8507 = zext i1 %8506 to i8
  store i8 %8507, i8* %34, align 1
  %8508 = lshr i32 %8483, 31
  %8509 = trunc i32 %8508 to i8
  store i8 %8509, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8510 = add i64 %8479, -820
  %8511 = trunc i64 %8500 to i32
  %8512 = add i64 %8478, 12
  store i64 %8512, i64* %3, align 8
  %8513 = inttoptr i64 %8510 to i32*
  store i32 %8511, i32* %8513, align 4
  %.pre491 = load i64, i64* %3, align 8
  br label %block_.L_4573ea

block_.L_4573ea:                                  ; preds = %block_.L_4573de, %block_4573cd
  %8514 = phi i64 [ %.pre491, %block_.L_4573de ], [ %8499, %block_4573cd ]
  %8515 = load i64, i64* %RBP.i, align 8
  %8516 = add i64 %8515, -820
  %8517 = add i64 %8514, 6
  store i64 %8517, i64* %3, align 8
  %8518 = inttoptr i64 %8516 to i32*
  %8519 = load i32, i32* %8518, align 4
  %8520 = zext i32 %8519 to i64
  store i64 %8520, i64* %RAX.i3176, align 8
  %8521 = sext i32 %8519 to i64
  store i64 %8521, i64* %RCX.i7756, align 8
  %8522 = add i64 %8515, -816
  %8523 = add i64 %8514, 16
  store i64 %8523, i64* %3, align 8
  %8524 = inttoptr i64 %8522 to i64*
  %8525 = load i64, i64* %8524, align 8
  store i64 %8525, i64* %RDX.i7753, align 8
  %8526 = shl nsw i64 %8521, 3
  %8527 = add i64 %8526, %8525
  %8528 = add i64 %8514, 20
  store i64 %8528, i64* %3, align 8
  %8529 = inttoptr i64 %8527 to i64*
  %8530 = load i64, i64* %8529, align 8
  store i64 %8530, i64* %RCX.i7756, align 8
  %8531 = add i64 %8515, -56
  %8532 = add i64 %8514, 23
  store i64 %8532, i64* %3, align 8
  %8533 = inttoptr i64 %8531 to i32*
  %8534 = load i32, i32* %8533, align 4
  %8535 = and i32 %8534, 2
  %8536 = zext i32 %8535 to i64
  store i64 %8536, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8537 = tail call i32 @llvm.ctpop.i32(i32 %8535)
  %8538 = trunc i32 %8537 to i8
  %8539 = xor i8 %8538, 1
  store i8 %8539, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit649 = lshr exact i32 %8535, 1
  %8540 = trunc i32 %.lobit649 to i8
  %8541 = xor i8 %8540, 1
  store i8 %8541, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8542 = add i64 %8515, -832
  %8543 = add i64 %8514, 36
  store i64 %8543, i64* %3, align 8
  %8544 = inttoptr i64 %8542 to i64*
  store i64 %8530, i64* %8544, align 8
  %8545 = load i64, i64* %3, align 8
  %8546 = load i8, i8* %34, align 1
  %8547 = icmp ne i8 %8546, 0
  %.v793 = select i1 %8547, i64 23, i64 6
  %8548 = add i64 %8545, %.v793
  %cmpBr_45740e = icmp eq i8 %8546, 1
  %8549 = load i64, i64* %RBP.i, align 8
  %8550 = add i64 %8549, -56
  %8551 = add i64 %8548, 3
  store i64 %8551, i64* %3, align 8
  %8552 = inttoptr i64 %8550 to i32*
  %8553 = load i32, i32* %8552, align 4
  %8554 = zext i32 %8553 to i64
  store i64 %8554, i64* %RAX.i3176, align 8
  %8555 = add i64 %8548, 6
  store i64 %8555, i64* %3, align 8
  br i1 %cmpBr_45740e, label %block_.L_457425, label %block_457414

block_457414:                                     ; preds = %block_.L_4573ea
  %8556 = or i64 %8554, 1
  %8557 = trunc i64 %8556 to i32
  store i64 %8556, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8558 = and i32 %8557, 255
  %8559 = tail call i32 @llvm.ctpop.i32(i32 %8558)
  %8560 = trunc i32 %8559 to i8
  %8561 = and i8 %8560, 1
  %8562 = xor i8 %8561, 1
  store i8 %8562, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8563 = lshr i32 %8557, 31
  %8564 = trunc i32 %8563 to i8
  store i8 %8564, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8565 = add i64 %8549, -836
  %8566 = add i64 %8548, 12
  store i64 %8566, i64* %3, align 8
  %8567 = inttoptr i64 %8565 to i32*
  store i32 %8557, i32* %8567, align 4
  %8568 = load i64, i64* %3, align 8
  %8569 = add i64 %8568, 17
  store i64 %8569, i64* %3, align 8
  br label %block_.L_457431

block_.L_457425:                                  ; preds = %block_.L_4573ea
  %8570 = and i64 %8554, 4294967294
  store i64 %8570, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8571 = and i32 %8553, 254
  %8572 = tail call i32 @llvm.ctpop.i32(i32 %8571)
  %8573 = trunc i32 %8572 to i8
  %8574 = and i8 %8573, 1
  %8575 = xor i8 %8574, 1
  store i8 %8575, i8* %26, align 1
  %8576 = icmp ult i32 %8553, 2
  %8577 = zext i1 %8576 to i8
  store i8 %8577, i8* %34, align 1
  %8578 = lshr i32 %8553, 31
  %8579 = trunc i32 %8578 to i8
  store i8 %8579, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8580 = add i64 %8549, -836
  %8581 = trunc i64 %8570 to i32
  %8582 = add i64 %8548, 12
  store i64 %8582, i64* %3, align 8
  %8583 = inttoptr i64 %8580 to i32*
  store i32 %8581, i32* %8583, align 4
  %.pre492 = load i64, i64* %3, align 8
  br label %block_.L_457431

block_.L_457431:                                  ; preds = %block_.L_457425, %block_457414
  %8584 = phi i64 [ %.pre492, %block_.L_457425 ], [ %8569, %block_457414 ]
  %8585 = load i64, i64* %RBP.i, align 8
  %8586 = add i64 %8585, -836
  %8587 = add i64 %8584, 6
  store i64 %8587, i64* %3, align 8
  %8588 = inttoptr i64 %8586 to i32*
  %8589 = load i32, i32* %8588, align 4
  %8590 = zext i32 %8589 to i64
  store i64 %8590, i64* %RAX.i3176, align 8
  %8591 = sext i32 %8589 to i64
  store i64 %8591, i64* %RCX.i7756, align 8
  %8592 = add i64 %8585, -832
  %8593 = add i64 %8584, 16
  store i64 %8593, i64* %3, align 8
  %8594 = inttoptr i64 %8592 to i64*
  %8595 = load i64, i64* %8594, align 8
  store i64 %8595, i64* %RDX.i7753, align 8
  %8596 = shl nsw i64 %8591, 3
  %8597 = add i64 %8596, %8595
  %8598 = add i64 %8584, 20
  store i64 %8598, i64* %3, align 8
  %8599 = inttoptr i64 %8597 to i64*
  %8600 = load i64, i64* %8599, align 8
  store i64 %8600, i64* %RCX.i7756, align 8
  %8601 = add i64 %8600, 2
  %8602 = add i64 %8584, 24
  store i64 %8602, i64* %3, align 8
  %8603 = inttoptr i64 %8601 to i16*
  %8604 = load i16, i16* %8603, align 2
  store i16 %8604, i16* %SI.i6180, align 2
  %8605 = add i64 %8585, -16
  %8606 = add i64 %8584, 28
  store i64 %8606, i64* %3, align 8
  %8607 = inttoptr i64 %8605 to i64*
  %8608 = load i64, i64* %8607, align 8
  store i64 %8608, i64* %RCX.i7756, align 8
  %8609 = add i64 %8608, 3232
  %8610 = add i64 %8584, 35
  store i64 %8610, i64* %3, align 8
  %8611 = inttoptr i64 %8609 to i64*
  %8612 = load i64, i64* %8611, align 8
  store i64 %8612, i64* %RCX.i7756, align 8
  %8613 = add i64 %8612, 8
  %8614 = add i64 %8584, 39
  store i64 %8614, i64* %3, align 8
  %8615 = inttoptr i64 %8613 to i64*
  %8616 = load i64, i64* %8615, align 8
  store i64 %8616, i64* %RCX.i7756, align 8
  %8617 = add i64 %8585, -52
  %8618 = add i64 %8584, 43
  store i64 %8618, i64* %3, align 8
  %8619 = inttoptr i64 %8617 to i32*
  %8620 = load i32, i32* %8619, align 4
  %8621 = sext i32 %8620 to i64
  store i64 %8621, i64* %RDI.i732, align 8
  %8622 = shl nsw i64 %8621, 3
  %8623 = add i64 %8622, %8616
  %8624 = add i64 %8584, 47
  store i64 %8624, i64* %3, align 8
  %8625 = inttoptr i64 %8623 to i64*
  %8626 = load i64, i64* %8625, align 8
  store i64 %8626, i64* %RCX.i7756, align 8
  %8627 = add i64 %8585, -56
  %8628 = add i64 %8584, 51
  store i64 %8628, i64* %3, align 8
  %8629 = inttoptr i64 %8627 to i32*
  %8630 = load i32, i32* %8629, align 4
  %8631 = sext i32 %8630 to i64
  store i64 %8631, i64* %RDI.i732, align 8
  %8632 = shl nsw i64 %8631, 3
  %8633 = add i64 %8632, %8626
  %8634 = add i64 %8584, 55
  store i64 %8634, i64* %3, align 8
  %8635 = inttoptr i64 %8633 to i64*
  %8636 = load i64, i64* %8635, align 8
  store i64 %8636, i64* %RCX.i7756, align 8
  %8637 = add i64 %8636, 2
  %8638 = add i64 %8584, 59
  store i64 %8638, i64* %3, align 8
  %8639 = inttoptr i64 %8637 to i16*
  store i16 %8604, i16* %8639, align 2
  %8640 = load i64, i64* %RBP.i, align 8
  %8641 = add i64 %8640, -40
  %8642 = load i64, i64* %3, align 8
  %8643 = add i64 %8642, 4
  store i64 %8643, i64* %3, align 8
  %8644 = inttoptr i64 %8641 to i64*
  %8645 = load i64, i64* %8644, align 8
  store i64 %8645, i64* %RCX.i7756, align 8
  %8646 = add i64 %8645, 6480
  %8647 = add i64 %8642, 11
  store i64 %8647, i64* %3, align 8
  %8648 = inttoptr i64 %8646 to i64*
  %8649 = load i64, i64* %8648, align 8
  store i64 %8649, i64* %RCX.i7756, align 8
  %8650 = add i64 %8642, 14
  store i64 %8650, i64* %3, align 8
  %8651 = inttoptr i64 %8649 to i64*
  %8652 = load i64, i64* %8651, align 8
  store i64 %8652, i64* %RCX.i7756, align 8
  %8653 = add i64 %8640, -52
  %8654 = add i64 %8642, 17
  store i64 %8654, i64* %3, align 8
  %8655 = inttoptr i64 %8653 to i32*
  %8656 = load i32, i32* %8655, align 4
  %8657 = and i32 %8656, 2
  %8658 = zext i32 %8657 to i64
  store i64 %8658, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8659 = tail call i32 @llvm.ctpop.i32(i32 %8657)
  %8660 = trunc i32 %8659 to i8
  %8661 = xor i8 %8660, 1
  store i8 %8661, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit650 = lshr exact i32 %8657, 1
  %8662 = trunc i32 %.lobit650 to i8
  %8663 = xor i8 %8662, 1
  store i8 %8663, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8664 = add i64 %8640, -848
  %8665 = add i64 %8642, 30
  store i64 %8665, i64* %3, align 8
  %8666 = inttoptr i64 %8664 to i64*
  store i64 %8652, i64* %8666, align 8
  %8667 = load i64, i64* %3, align 8
  %8668 = load i8, i8* %34, align 1
  %8669 = icmp ne i8 %8668, 0
  %.v794 = select i1 %8669, i64 23, i64 6
  %8670 = add i64 %8667, %.v794
  %cmpBr_45748a = icmp eq i8 %8668, 1
  %8671 = load i64, i64* %RBP.i, align 8
  %8672 = add i64 %8671, -52
  %8673 = add i64 %8670, 3
  store i64 %8673, i64* %3, align 8
  %8674 = inttoptr i64 %8672 to i32*
  %8675 = load i32, i32* %8674, align 4
  %8676 = zext i32 %8675 to i64
  store i64 %8676, i64* %RAX.i3176, align 8
  %8677 = add i64 %8670, 6
  store i64 %8677, i64* %3, align 8
  br i1 %cmpBr_45748a, label %block_.L_4574a1, label %block_457490

block_457490:                                     ; preds = %block_.L_457431
  %8678 = or i64 %8676, 1
  %8679 = trunc i64 %8678 to i32
  store i64 %8678, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8680 = and i32 %8679, 255
  %8681 = tail call i32 @llvm.ctpop.i32(i32 %8680)
  %8682 = trunc i32 %8681 to i8
  %8683 = and i8 %8682, 1
  %8684 = xor i8 %8683, 1
  store i8 %8684, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8685 = lshr i32 %8679, 31
  %8686 = trunc i32 %8685 to i8
  store i8 %8686, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8687 = add i64 %8671, -852
  %8688 = add i64 %8670, 12
  store i64 %8688, i64* %3, align 8
  %8689 = inttoptr i64 %8687 to i32*
  store i32 %8679, i32* %8689, align 4
  %8690 = load i64, i64* %3, align 8
  %8691 = add i64 %8690, 17
  store i64 %8691, i64* %3, align 8
  br label %block_.L_4574ad

block_.L_4574a1:                                  ; preds = %block_.L_457431
  %8692 = and i64 %8676, 4294967294
  store i64 %8692, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8693 = and i32 %8675, 254
  %8694 = tail call i32 @llvm.ctpop.i32(i32 %8693)
  %8695 = trunc i32 %8694 to i8
  %8696 = and i8 %8695, 1
  %8697 = xor i8 %8696, 1
  store i8 %8697, i8* %26, align 1
  %8698 = icmp ult i32 %8675, 2
  %8699 = zext i1 %8698 to i8
  store i8 %8699, i8* %34, align 1
  %8700 = lshr i32 %8675, 31
  %8701 = trunc i32 %8700 to i8
  store i8 %8701, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8702 = add i64 %8671, -852
  %8703 = trunc i64 %8692 to i32
  %8704 = add i64 %8670, 12
  store i64 %8704, i64* %3, align 8
  %8705 = inttoptr i64 %8702 to i32*
  store i32 %8703, i32* %8705, align 4
  %.pre493 = load i64, i64* %3, align 8
  br label %block_.L_4574ad

block_.L_4574ad:                                  ; preds = %block_.L_4574a1, %block_457490
  %8706 = phi i64 [ %.pre493, %block_.L_4574a1 ], [ %8691, %block_457490 ]
  %8707 = load i64, i64* %RBP.i, align 8
  %8708 = add i64 %8707, -852
  %8709 = add i64 %8706, 6
  store i64 %8709, i64* %3, align 8
  %8710 = inttoptr i64 %8708 to i32*
  %8711 = load i32, i32* %8710, align 4
  %8712 = zext i32 %8711 to i64
  store i64 %8712, i64* %RAX.i3176, align 8
  %8713 = sext i32 %8711 to i64
  store i64 %8713, i64* %RCX.i7756, align 8
  %8714 = add i64 %8707, -848
  %8715 = add i64 %8706, 16
  store i64 %8715, i64* %3, align 8
  %8716 = inttoptr i64 %8714 to i64*
  %8717 = load i64, i64* %8716, align 8
  store i64 %8717, i64* %RDX.i7753, align 8
  %8718 = shl nsw i64 %8713, 3
  %8719 = add i64 %8718, %8717
  %8720 = add i64 %8706, 20
  store i64 %8720, i64* %3, align 8
  %8721 = inttoptr i64 %8719 to i64*
  %8722 = load i64, i64* %8721, align 8
  store i64 %8722, i64* %RCX.i7756, align 8
  %8723 = add i64 %8707, -56
  %8724 = add i64 %8706, 23
  store i64 %8724, i64* %3, align 8
  %8725 = inttoptr i64 %8723 to i32*
  %8726 = load i32, i32* %8725, align 4
  %8727 = and i32 %8726, 2
  %8728 = zext i32 %8727 to i64
  store i64 %8728, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8729 = tail call i32 @llvm.ctpop.i32(i32 %8727)
  %8730 = trunc i32 %8729 to i8
  %8731 = xor i8 %8730, 1
  store i8 %8731, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit651 = lshr exact i32 %8727, 1
  %8732 = trunc i32 %.lobit651 to i8
  %8733 = xor i8 %8732, 1
  store i8 %8733, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8734 = add i64 %8707, -864
  %8735 = add i64 %8706, 36
  store i64 %8735, i64* %3, align 8
  %8736 = inttoptr i64 %8734 to i64*
  store i64 %8722, i64* %8736, align 8
  %8737 = load i64, i64* %3, align 8
  %8738 = load i8, i8* %34, align 1
  %8739 = icmp ne i8 %8738, 0
  %.v795 = select i1 %8739, i64 23, i64 6
  %8740 = add i64 %8737, %.v795
  %cmpBr_4574d1 = icmp eq i8 %8738, 1
  %8741 = load i64, i64* %RBP.i, align 8
  %8742 = add i64 %8741, -56
  %8743 = add i64 %8740, 3
  store i64 %8743, i64* %3, align 8
  %8744 = inttoptr i64 %8742 to i32*
  %8745 = load i32, i32* %8744, align 4
  %8746 = zext i32 %8745 to i64
  store i64 %8746, i64* %RAX.i3176, align 8
  %8747 = add i64 %8740, 6
  store i64 %8747, i64* %3, align 8
  br i1 %cmpBr_4574d1, label %block_.L_4574e8, label %block_4574d7

block_4574d7:                                     ; preds = %block_.L_4574ad
  %8748 = or i64 %8746, 1
  %8749 = trunc i64 %8748 to i32
  store i64 %8748, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8750 = and i32 %8749, 255
  %8751 = tail call i32 @llvm.ctpop.i32(i32 %8750)
  %8752 = trunc i32 %8751 to i8
  %8753 = and i8 %8752, 1
  %8754 = xor i8 %8753, 1
  store i8 %8754, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8755 = lshr i32 %8749, 31
  %8756 = trunc i32 %8755 to i8
  store i8 %8756, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8757 = add i64 %8741, -868
  %8758 = add i64 %8740, 12
  store i64 %8758, i64* %3, align 8
  %8759 = inttoptr i64 %8757 to i32*
  store i32 %8749, i32* %8759, align 4
  %8760 = load i64, i64* %3, align 8
  %8761 = add i64 %8760, 17
  store i64 %8761, i64* %3, align 8
  br label %block_.L_4574f4

block_.L_4574e8:                                  ; preds = %block_.L_4574ad
  %8762 = and i64 %8746, 4294967294
  store i64 %8762, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8763 = and i32 %8745, 254
  %8764 = tail call i32 @llvm.ctpop.i32(i32 %8763)
  %8765 = trunc i32 %8764 to i8
  %8766 = and i8 %8765, 1
  %8767 = xor i8 %8766, 1
  store i8 %8767, i8* %26, align 1
  %8768 = icmp ult i32 %8745, 2
  %8769 = zext i1 %8768 to i8
  store i8 %8769, i8* %34, align 1
  %8770 = lshr i32 %8745, 31
  %8771 = trunc i32 %8770 to i8
  store i8 %8771, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8772 = add i64 %8741, -868
  %8773 = trunc i64 %8762 to i32
  %8774 = add i64 %8740, 12
  store i64 %8774, i64* %3, align 8
  %8775 = inttoptr i64 %8772 to i32*
  store i32 %8773, i32* %8775, align 4
  %.pre494 = load i64, i64* %3, align 8
  br label %block_.L_4574f4

block_.L_4574f4:                                  ; preds = %block_.L_4574e8, %block_4574d7
  %8776 = phi i64 [ %.pre494, %block_.L_4574e8 ], [ %8761, %block_4574d7 ]
  %8777 = load i64, i64* %RBP.i, align 8
  %8778 = add i64 %8777, -868
  %8779 = add i64 %8776, 6
  store i64 %8779, i64* %3, align 8
  %8780 = inttoptr i64 %8778 to i32*
  %8781 = load i32, i32* %8780, align 4
  %8782 = zext i32 %8781 to i64
  store i64 %8782, i64* %RAX.i3176, align 8
  %8783 = sext i32 %8781 to i64
  store i64 %8783, i64* %RCX.i7756, align 8
  %8784 = add i64 %8777, -864
  %8785 = add i64 %8776, 16
  store i64 %8785, i64* %3, align 8
  %8786 = inttoptr i64 %8784 to i64*
  %8787 = load i64, i64* %8786, align 8
  store i64 %8787, i64* %RDX.i7753, align 8
  %8788 = shl nsw i64 %8783, 1
  %8789 = add i64 %8788, %8787
  %8790 = add i64 %8776, 20
  store i64 %8790, i64* %3, align 8
  %8791 = inttoptr i64 %8789 to i16*
  %8792 = load i16, i16* %8791, align 2
  store i16 %8792, i16* %SI.i6180, align 2
  %8793 = add i64 %8777, -16
  %8794 = add i64 %8776, 24
  store i64 %8794, i64* %3, align 8
  %8795 = inttoptr i64 %8793 to i64*
  %8796 = load i64, i64* %8795, align 8
  store i64 %8796, i64* %RCX.i7756, align 8
  %8797 = add i64 %8796, 3216
  %8798 = add i64 %8776, 31
  store i64 %8798, i64* %3, align 8
  %8799 = inttoptr i64 %8797 to i64*
  %8800 = load i64, i64* %8799, align 8
  store i64 %8800, i64* %RCX.i7756, align 8
  %8801 = add i64 %8776, 34
  store i64 %8801, i64* %3, align 8
  %8802 = inttoptr i64 %8800 to i64*
  %8803 = load i64, i64* %8802, align 8
  store i64 %8803, i64* %RCX.i7756, align 8
  %8804 = add i64 %8777, -52
  %8805 = add i64 %8776, 38
  store i64 %8805, i64* %3, align 8
  %8806 = inttoptr i64 %8804 to i32*
  %8807 = load i32, i32* %8806, align 4
  %8808 = sext i32 %8807 to i64
  store i64 %8808, i64* %RDI.i732, align 8
  %8809 = shl nsw i64 %8808, 3
  %8810 = add i64 %8809, %8803
  %8811 = add i64 %8776, 42
  store i64 %8811, i64* %3, align 8
  %8812 = inttoptr i64 %8810 to i64*
  %8813 = load i64, i64* %8812, align 8
  store i64 %8813, i64* %RCX.i7756, align 8
  %8814 = add i64 %8777, -56
  %8815 = add i64 %8776, 46
  store i64 %8815, i64* %3, align 8
  %8816 = inttoptr i64 %8814 to i32*
  %8817 = load i32, i32* %8816, align 4
  %8818 = sext i32 %8817 to i64
  store i64 %8818, i64* %RDI.i732, align 8
  %8819 = shl nsw i64 %8818, 1
  %8820 = add i64 %8819, %8813
  %8821 = add i64 %8776, 50
  store i64 %8821, i64* %3, align 8
  %8822 = inttoptr i64 %8820 to i16*
  store i16 %8792, i16* %8822, align 2
  %8823 = load i64, i64* %RBP.i, align 8
  %8824 = add i64 %8823, -40
  %8825 = load i64, i64* %3, align 8
  %8826 = add i64 %8825, 4
  store i64 %8826, i64* %3, align 8
  %8827 = inttoptr i64 %8824 to i64*
  %8828 = load i64, i64* %8827, align 8
  store i64 %8828, i64* %RCX.i7756, align 8
  %8829 = add i64 %8828, 6480
  %8830 = add i64 %8825, 11
  store i64 %8830, i64* %3, align 8
  %8831 = inttoptr i64 %8829 to i64*
  %8832 = load i64, i64* %8831, align 8
  store i64 %8832, i64* %RCX.i7756, align 8
  %8833 = add i64 %8832, 8
  %8834 = add i64 %8825, 15
  store i64 %8834, i64* %3, align 8
  %8835 = inttoptr i64 %8833 to i64*
  %8836 = load i64, i64* %8835, align 8
  store i64 %8836, i64* %RCX.i7756, align 8
  %8837 = add i64 %8823, -52
  %8838 = add i64 %8825, 18
  store i64 %8838, i64* %3, align 8
  %8839 = inttoptr i64 %8837 to i32*
  %8840 = load i32, i32* %8839, align 4
  %8841 = and i32 %8840, 2
  %8842 = zext i32 %8841 to i64
  store i64 %8842, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8843 = tail call i32 @llvm.ctpop.i32(i32 %8841)
  %8844 = trunc i32 %8843 to i8
  %8845 = xor i8 %8844, 1
  store i8 %8845, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit652 = lshr exact i32 %8841, 1
  %8846 = trunc i32 %.lobit652 to i8
  %8847 = xor i8 %8846, 1
  store i8 %8847, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8848 = add i64 %8823, -880
  %8849 = add i64 %8825, 31
  store i64 %8849, i64* %3, align 8
  %8850 = inttoptr i64 %8848 to i64*
  store i64 %8836, i64* %8850, align 8
  %8851 = load i64, i64* %3, align 8
  %8852 = load i8, i8* %34, align 1
  %8853 = icmp ne i8 %8852, 0
  %.v796 = select i1 %8853, i64 23, i64 6
  %8854 = add i64 %8851, %.v796
  %cmpBr_457545 = icmp eq i8 %8852, 1
  %8855 = load i64, i64* %RBP.i, align 8
  %8856 = add i64 %8855, -52
  %8857 = add i64 %8854, 3
  store i64 %8857, i64* %3, align 8
  %8858 = inttoptr i64 %8856 to i32*
  %8859 = load i32, i32* %8858, align 4
  %8860 = zext i32 %8859 to i64
  store i64 %8860, i64* %RAX.i3176, align 8
  %8861 = add i64 %8854, 6
  store i64 %8861, i64* %3, align 8
  br i1 %cmpBr_457545, label %block_.L_45755c, label %block_45754b

block_45754b:                                     ; preds = %block_.L_4574f4
  %8862 = or i64 %8860, 1
  %8863 = trunc i64 %8862 to i32
  store i64 %8862, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8864 = and i32 %8863, 255
  %8865 = tail call i32 @llvm.ctpop.i32(i32 %8864)
  %8866 = trunc i32 %8865 to i8
  %8867 = and i8 %8866, 1
  %8868 = xor i8 %8867, 1
  store i8 %8868, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8869 = lshr i32 %8863, 31
  %8870 = trunc i32 %8869 to i8
  store i8 %8870, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8871 = add i64 %8855, -884
  %8872 = add i64 %8854, 12
  store i64 %8872, i64* %3, align 8
  %8873 = inttoptr i64 %8871 to i32*
  store i32 %8863, i32* %8873, align 4
  %8874 = load i64, i64* %3, align 8
  %8875 = add i64 %8874, 17
  store i64 %8875, i64* %3, align 8
  br label %block_.L_457568

block_.L_45755c:                                  ; preds = %block_.L_4574f4
  %8876 = and i64 %8860, 4294967294
  store i64 %8876, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8877 = and i32 %8859, 254
  %8878 = tail call i32 @llvm.ctpop.i32(i32 %8877)
  %8879 = trunc i32 %8878 to i8
  %8880 = and i8 %8879, 1
  %8881 = xor i8 %8880, 1
  store i8 %8881, i8* %26, align 1
  %8882 = icmp ult i32 %8859, 2
  %8883 = zext i1 %8882 to i8
  store i8 %8883, i8* %34, align 1
  %8884 = lshr i32 %8859, 31
  %8885 = trunc i32 %8884 to i8
  store i8 %8885, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8886 = add i64 %8855, -884
  %8887 = trunc i64 %8876 to i32
  %8888 = add i64 %8854, 12
  store i64 %8888, i64* %3, align 8
  %8889 = inttoptr i64 %8886 to i32*
  store i32 %8887, i32* %8889, align 4
  %.pre495 = load i64, i64* %3, align 8
  br label %block_.L_457568

block_.L_457568:                                  ; preds = %block_.L_45755c, %block_45754b
  %8890 = phi i64 [ %.pre495, %block_.L_45755c ], [ %8875, %block_45754b ]
  %8891 = load i64, i64* %RBP.i, align 8
  %8892 = add i64 %8891, -884
  %8893 = add i64 %8890, 6
  store i64 %8893, i64* %3, align 8
  %8894 = inttoptr i64 %8892 to i32*
  %8895 = load i32, i32* %8894, align 4
  %8896 = zext i32 %8895 to i64
  store i64 %8896, i64* %RAX.i3176, align 8
  %8897 = sext i32 %8895 to i64
  store i64 %8897, i64* %RCX.i7756, align 8
  %8898 = add i64 %8891, -880
  %8899 = add i64 %8890, 16
  store i64 %8899, i64* %3, align 8
  %8900 = inttoptr i64 %8898 to i64*
  %8901 = load i64, i64* %8900, align 8
  store i64 %8901, i64* %RDX.i7753, align 8
  %8902 = shl nsw i64 %8897, 3
  %8903 = add i64 %8902, %8901
  %8904 = add i64 %8890, 20
  store i64 %8904, i64* %3, align 8
  %8905 = inttoptr i64 %8903 to i64*
  %8906 = load i64, i64* %8905, align 8
  store i64 %8906, i64* %RCX.i7756, align 8
  %8907 = add i64 %8891, -56
  %8908 = add i64 %8890, 23
  store i64 %8908, i64* %3, align 8
  %8909 = inttoptr i64 %8907 to i32*
  %8910 = load i32, i32* %8909, align 4
  %8911 = and i32 %8910, 2
  %8912 = zext i32 %8911 to i64
  store i64 %8912, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8913 = tail call i32 @llvm.ctpop.i32(i32 %8911)
  %8914 = trunc i32 %8913 to i8
  %8915 = xor i8 %8914, 1
  store i8 %8915, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit653 = lshr exact i32 %8911, 1
  %8916 = trunc i32 %.lobit653 to i8
  %8917 = xor i8 %8916, 1
  store i8 %8917, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %8918 = add i64 %8891, -896
  %8919 = add i64 %8890, 36
  store i64 %8919, i64* %3, align 8
  %8920 = inttoptr i64 %8918 to i64*
  store i64 %8906, i64* %8920, align 8
  %8921 = load i64, i64* %3, align 8
  %8922 = load i8, i8* %34, align 1
  %8923 = icmp ne i8 %8922, 0
  %.v797 = select i1 %8923, i64 23, i64 6
  %8924 = add i64 %8921, %.v797
  %cmpBr_45758c = icmp eq i8 %8922, 1
  %8925 = load i64, i64* %RBP.i, align 8
  %8926 = add i64 %8925, -56
  %8927 = add i64 %8924, 3
  store i64 %8927, i64* %3, align 8
  %8928 = inttoptr i64 %8926 to i32*
  %8929 = load i32, i32* %8928, align 4
  %8930 = zext i32 %8929 to i64
  store i64 %8930, i64* %RAX.i3176, align 8
  %8931 = add i64 %8924, 6
  store i64 %8931, i64* %3, align 8
  br i1 %cmpBr_45758c, label %block_.L_4575a3, label %block_457592

block_457592:                                     ; preds = %block_.L_457568
  %8932 = or i64 %8930, 1
  %8933 = trunc i64 %8932 to i32
  store i64 %8932, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8934 = and i32 %8933, 255
  %8935 = tail call i32 @llvm.ctpop.i32(i32 %8934)
  %8936 = trunc i32 %8935 to i8
  %8937 = and i8 %8936, 1
  %8938 = xor i8 %8937, 1
  store i8 %8938, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %8939 = lshr i32 %8933, 31
  %8940 = trunc i32 %8939 to i8
  store i8 %8940, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8941 = add i64 %8925, -900
  %8942 = add i64 %8924, 12
  store i64 %8942, i64* %3, align 8
  %8943 = inttoptr i64 %8941 to i32*
  store i32 %8933, i32* %8943, align 4
  %8944 = load i64, i64* %3, align 8
  %8945 = add i64 %8944, 17
  store i64 %8945, i64* %3, align 8
  br label %block_.L_4575af

block_.L_4575a3:                                  ; preds = %block_.L_457568
  %8946 = and i64 %8930, 4294967294
  store i64 %8946, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %8947 = and i32 %8929, 254
  %8948 = tail call i32 @llvm.ctpop.i32(i32 %8947)
  %8949 = trunc i32 %8948 to i8
  %8950 = and i8 %8949, 1
  %8951 = xor i8 %8950, 1
  store i8 %8951, i8* %26, align 1
  %8952 = icmp ult i32 %8929, 2
  %8953 = zext i1 %8952 to i8
  store i8 %8953, i8* %34, align 1
  %8954 = lshr i32 %8929, 31
  %8955 = trunc i32 %8954 to i8
  store i8 %8955, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %8956 = add i64 %8925, -900
  %8957 = trunc i64 %8946 to i32
  %8958 = add i64 %8924, 12
  store i64 %8958, i64* %3, align 8
  %8959 = inttoptr i64 %8956 to i32*
  store i32 %8957, i32* %8959, align 4
  %.pre496 = load i64, i64* %3, align 8
  br label %block_.L_4575af

block_.L_4575af:                                  ; preds = %block_.L_4575a3, %block_457592
  %8960 = phi i64 [ %.pre496, %block_.L_4575a3 ], [ %8945, %block_457592 ]
  %8961 = load i64, i64* %RBP.i, align 8
  %8962 = add i64 %8961, -900
  %8963 = add i64 %8960, 6
  store i64 %8963, i64* %3, align 8
  %8964 = inttoptr i64 %8962 to i32*
  %8965 = load i32, i32* %8964, align 4
  %8966 = zext i32 %8965 to i64
  store i64 %8966, i64* %RAX.i3176, align 8
  %8967 = sext i32 %8965 to i64
  store i64 %8967, i64* %RCX.i7756, align 8
  %8968 = add i64 %8961, -896
  %8969 = add i64 %8960, 16
  store i64 %8969, i64* %3, align 8
  %8970 = inttoptr i64 %8968 to i64*
  %8971 = load i64, i64* %8970, align 8
  store i64 %8971, i64* %RDX.i7753, align 8
  %8972 = shl nsw i64 %8967, 1
  %8973 = add i64 %8972, %8971
  %8974 = add i64 %8960, 20
  store i64 %8974, i64* %3, align 8
  %8975 = inttoptr i64 %8973 to i16*
  %8976 = load i16, i16* %8975, align 2
  store i16 %8976, i16* %SI.i6180, align 2
  %8977 = add i64 %8961, -16
  %8978 = add i64 %8960, 24
  store i64 %8978, i64* %3, align 8
  %8979 = inttoptr i64 %8977 to i64*
  %8980 = load i64, i64* %8979, align 8
  store i64 %8980, i64* %RCX.i7756, align 8
  %8981 = add i64 %8980, 3216
  %8982 = add i64 %8960, 31
  store i64 %8982, i64* %3, align 8
  %8983 = inttoptr i64 %8981 to i64*
  %8984 = load i64, i64* %8983, align 8
  store i64 %8984, i64* %RCX.i7756, align 8
  %8985 = add i64 %8984, 8
  %8986 = add i64 %8960, 35
  store i64 %8986, i64* %3, align 8
  %8987 = inttoptr i64 %8985 to i64*
  %8988 = load i64, i64* %8987, align 8
  store i64 %8988, i64* %RCX.i7756, align 8
  %8989 = add i64 %8961, -52
  %8990 = add i64 %8960, 39
  store i64 %8990, i64* %3, align 8
  %8991 = inttoptr i64 %8989 to i32*
  %8992 = load i32, i32* %8991, align 4
  %8993 = sext i32 %8992 to i64
  store i64 %8993, i64* %RDI.i732, align 8
  %8994 = shl nsw i64 %8993, 3
  %8995 = add i64 %8994, %8988
  %8996 = add i64 %8960, 43
  store i64 %8996, i64* %3, align 8
  %8997 = inttoptr i64 %8995 to i64*
  %8998 = load i64, i64* %8997, align 8
  store i64 %8998, i64* %RCX.i7756, align 8
  %8999 = add i64 %8961, -56
  %9000 = add i64 %8960, 47
  store i64 %9000, i64* %3, align 8
  %9001 = inttoptr i64 %8999 to i32*
  %9002 = load i32, i32* %9001, align 4
  %9003 = sext i32 %9002 to i64
  store i64 %9003, i64* %RDI.i732, align 8
  %9004 = shl nsw i64 %9003, 1
  %9005 = add i64 %9004, %8998
  %9006 = add i64 %8960, 51
  store i64 %9006, i64* %3, align 8
  %9007 = inttoptr i64 %9005 to i16*
  store i16 %8976, i16* %9007, align 2
  %9008 = load i64, i64* %RBP.i, align 8
  %9009 = add i64 %9008, -40
  %9010 = load i64, i64* %3, align 8
  %9011 = add i64 %9010, 4
  store i64 %9011, i64* %3, align 8
  %9012 = inttoptr i64 %9009 to i64*
  %9013 = load i64, i64* %9012, align 8
  store i64 %9013, i64* %RCX.i7756, align 8
  %9014 = add i64 %9013, 6496
  %9015 = add i64 %9010, 11
  store i64 %9015, i64* %3, align 8
  %9016 = inttoptr i64 %9014 to i64*
  %9017 = load i64, i64* %9016, align 8
  store i64 %9017, i64* %RCX.i7756, align 8
  %9018 = add i64 %9010, 14
  store i64 %9018, i64* %3, align 8
  %9019 = inttoptr i64 %9017 to i64*
  %9020 = load i64, i64* %9019, align 8
  store i64 %9020, i64* %RCX.i7756, align 8
  %9021 = add i64 %9008, -52
  %9022 = add i64 %9010, 17
  store i64 %9022, i64* %3, align 8
  %9023 = inttoptr i64 %9021 to i32*
  %9024 = load i32, i32* %9023, align 4
  %9025 = and i32 %9024, 2
  %9026 = zext i32 %9025 to i64
  store i64 %9026, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9027 = tail call i32 @llvm.ctpop.i32(i32 %9025)
  %9028 = trunc i32 %9027 to i8
  %9029 = xor i8 %9028, 1
  store i8 %9029, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit654 = lshr exact i32 %9025, 1
  %9030 = trunc i32 %.lobit654 to i8
  %9031 = xor i8 %9030, 1
  store i8 %9031, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %9032 = add i64 %9008, -912
  %9033 = add i64 %9010, 30
  store i64 %9033, i64* %3, align 8
  %9034 = inttoptr i64 %9032 to i64*
  store i64 %9020, i64* %9034, align 8
  %9035 = load i64, i64* %3, align 8
  %9036 = load i8, i8* %34, align 1
  %9037 = icmp ne i8 %9036, 0
  %.v798 = select i1 %9037, i64 23, i64 6
  %9038 = add i64 %9035, %.v798
  %cmpBr_457600 = icmp eq i8 %9036, 1
  %9039 = load i64, i64* %RBP.i, align 8
  %9040 = add i64 %9039, -52
  %9041 = add i64 %9038, 3
  store i64 %9041, i64* %3, align 8
  %9042 = inttoptr i64 %9040 to i32*
  %9043 = load i32, i32* %9042, align 4
  %9044 = zext i32 %9043 to i64
  store i64 %9044, i64* %RAX.i3176, align 8
  %9045 = add i64 %9038, 6
  store i64 %9045, i64* %3, align 8
  br i1 %cmpBr_457600, label %block_.L_457617, label %block_457606

block_457606:                                     ; preds = %block_.L_4575af
  %9046 = or i64 %9044, 1
  %9047 = trunc i64 %9046 to i32
  store i64 %9046, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9048 = and i32 %9047, 255
  %9049 = tail call i32 @llvm.ctpop.i32(i32 %9048)
  %9050 = trunc i32 %9049 to i8
  %9051 = and i8 %9050, 1
  %9052 = xor i8 %9051, 1
  store i8 %9052, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %9053 = lshr i32 %9047, 31
  %9054 = trunc i32 %9053 to i8
  store i8 %9054, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9055 = add i64 %9039, -916
  %9056 = add i64 %9038, 12
  store i64 %9056, i64* %3, align 8
  %9057 = inttoptr i64 %9055 to i32*
  store i32 %9047, i32* %9057, align 4
  %9058 = load i64, i64* %3, align 8
  %9059 = add i64 %9058, 17
  store i64 %9059, i64* %3, align 8
  br label %block_.L_457623

block_.L_457617:                                  ; preds = %block_.L_4575af
  %9060 = and i64 %9044, 4294967294
  store i64 %9060, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9061 = and i32 %9043, 254
  %9062 = tail call i32 @llvm.ctpop.i32(i32 %9061)
  %9063 = trunc i32 %9062 to i8
  %9064 = and i8 %9063, 1
  %9065 = xor i8 %9064, 1
  store i8 %9065, i8* %26, align 1
  %9066 = icmp ult i32 %9043, 2
  %9067 = zext i1 %9066 to i8
  store i8 %9067, i8* %34, align 1
  %9068 = lshr i32 %9043, 31
  %9069 = trunc i32 %9068 to i8
  store i8 %9069, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9070 = add i64 %9039, -916
  %9071 = trunc i64 %9060 to i32
  %9072 = add i64 %9038, 12
  store i64 %9072, i64* %3, align 8
  %9073 = inttoptr i64 %9070 to i32*
  store i32 %9071, i32* %9073, align 4
  %.pre497 = load i64, i64* %3, align 8
  br label %block_.L_457623

block_.L_457623:                                  ; preds = %block_.L_457617, %block_457606
  %9074 = phi i64 [ %.pre497, %block_.L_457617 ], [ %9059, %block_457606 ]
  %9075 = load i64, i64* %RBP.i, align 8
  %9076 = add i64 %9075, -916
  %9077 = add i64 %9074, 6
  store i64 %9077, i64* %3, align 8
  %9078 = inttoptr i64 %9076 to i32*
  %9079 = load i32, i32* %9078, align 4
  %9080 = zext i32 %9079 to i64
  store i64 %9080, i64* %RAX.i3176, align 8
  %9081 = sext i32 %9079 to i64
  store i64 %9081, i64* %RCX.i7756, align 8
  %9082 = add i64 %9075, -912
  %9083 = add i64 %9074, 16
  store i64 %9083, i64* %3, align 8
  %9084 = inttoptr i64 %9082 to i64*
  %9085 = load i64, i64* %9084, align 8
  store i64 %9085, i64* %RDX.i7753, align 8
  %9086 = shl nsw i64 %9081, 3
  %9087 = add i64 %9086, %9085
  %9088 = add i64 %9074, 20
  store i64 %9088, i64* %3, align 8
  %9089 = inttoptr i64 %9087 to i64*
  %9090 = load i64, i64* %9089, align 8
  store i64 %9090, i64* %RCX.i7756, align 8
  %9091 = add i64 %9075, -56
  %9092 = add i64 %9074, 23
  store i64 %9092, i64* %3, align 8
  %9093 = inttoptr i64 %9091 to i32*
  %9094 = load i32, i32* %9093, align 4
  %9095 = and i32 %9094, 2
  %9096 = zext i32 %9095 to i64
  store i64 %9096, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9097 = tail call i32 @llvm.ctpop.i32(i32 %9095)
  %9098 = trunc i32 %9097 to i8
  %9099 = xor i8 %9098, 1
  store i8 %9099, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit655 = lshr exact i32 %9095, 1
  %9100 = trunc i32 %.lobit655 to i8
  %9101 = xor i8 %9100, 1
  store i8 %9101, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %9102 = add i64 %9075, -928
  %9103 = add i64 %9074, 36
  store i64 %9103, i64* %3, align 8
  %9104 = inttoptr i64 %9102 to i64*
  store i64 %9090, i64* %9104, align 8
  %9105 = load i64, i64* %3, align 8
  %9106 = load i8, i8* %34, align 1
  %9107 = icmp ne i8 %9106, 0
  %.v799 = select i1 %9107, i64 23, i64 6
  %9108 = add i64 %9105, %.v799
  %cmpBr_457647 = icmp eq i8 %9106, 1
  %9109 = load i64, i64* %RBP.i, align 8
  %9110 = add i64 %9109, -56
  %9111 = add i64 %9108, 3
  store i64 %9111, i64* %3, align 8
  %9112 = inttoptr i64 %9110 to i32*
  %9113 = load i32, i32* %9112, align 4
  %9114 = zext i32 %9113 to i64
  store i64 %9114, i64* %RAX.i3176, align 8
  %9115 = add i64 %9108, 6
  store i64 %9115, i64* %3, align 8
  br i1 %cmpBr_457647, label %block_.L_45765e, label %block_45764d

block_45764d:                                     ; preds = %block_.L_457623
  %9116 = or i64 %9114, 1
  %9117 = trunc i64 %9116 to i32
  store i64 %9116, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9118 = and i32 %9117, 255
  %9119 = tail call i32 @llvm.ctpop.i32(i32 %9118)
  %9120 = trunc i32 %9119 to i8
  %9121 = and i8 %9120, 1
  %9122 = xor i8 %9121, 1
  store i8 %9122, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %9123 = lshr i32 %9117, 31
  %9124 = trunc i32 %9123 to i8
  store i8 %9124, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9125 = add i64 %9109, -932
  %9126 = add i64 %9108, 12
  store i64 %9126, i64* %3, align 8
  %9127 = inttoptr i64 %9125 to i32*
  store i32 %9117, i32* %9127, align 4
  %9128 = load i64, i64* %3, align 8
  %9129 = add i64 %9128, 17
  store i64 %9129, i64* %3, align 8
  br label %block_.L_45766a

block_.L_45765e:                                  ; preds = %block_.L_457623
  %9130 = and i64 %9114, 4294967294
  store i64 %9130, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9131 = and i32 %9113, 254
  %9132 = tail call i32 @llvm.ctpop.i32(i32 %9131)
  %9133 = trunc i32 %9132 to i8
  %9134 = and i8 %9133, 1
  %9135 = xor i8 %9134, 1
  store i8 %9135, i8* %26, align 1
  %9136 = icmp ult i32 %9113, 2
  %9137 = zext i1 %9136 to i8
  store i8 %9137, i8* %34, align 1
  %9138 = lshr i32 %9113, 31
  %9139 = trunc i32 %9138 to i8
  store i8 %9139, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9140 = add i64 %9109, -932
  %9141 = trunc i64 %9130 to i32
  %9142 = add i64 %9108, 12
  store i64 %9142, i64* %3, align 8
  %9143 = inttoptr i64 %9140 to i32*
  store i32 %9141, i32* %9143, align 4
  %.pre498 = load i64, i64* %3, align 8
  br label %block_.L_45766a

block_.L_45766a:                                  ; preds = %block_.L_45765e, %block_45764d
  %9144 = phi i64 [ %.pre498, %block_.L_45765e ], [ %9129, %block_45764d ]
  %9145 = load i64, i64* %RBP.i, align 8
  %9146 = add i64 %9145, -932
  %9147 = add i64 %9144, 6
  store i64 %9147, i64* %3, align 8
  %9148 = inttoptr i64 %9146 to i32*
  %9149 = load i32, i32* %9148, align 4
  %9150 = zext i32 %9149 to i64
  store i64 %9150, i64* %RAX.i3176, align 8
  %9151 = sext i32 %9149 to i64
  store i64 %9151, i64* %RCX.i7756, align 8
  %9152 = add i64 %9145, -928
  %9153 = add i64 %9144, 16
  store i64 %9153, i64* %3, align 8
  %9154 = inttoptr i64 %9152 to i64*
  %9155 = load i64, i64* %9154, align 8
  store i64 %9155, i64* %RDX.i7753, align 8
  %9156 = shl nsw i64 %9151, 3
  %9157 = add i64 %9156, %9155
  %9158 = add i64 %9144, 20
  store i64 %9158, i64* %3, align 8
  %9159 = inttoptr i64 %9157 to i64*
  %9160 = load i64, i64* %9159, align 8
  store i64 %9160, i64* %RCX.i7756, align 8
  %9161 = add i64 %9145, -16
  %9162 = add i64 %9144, 24
  store i64 %9162, i64* %3, align 8
  %9163 = inttoptr i64 %9161 to i64*
  %9164 = load i64, i64* %9163, align 8
  store i64 %9164, i64* %RSI.i766, align 8
  %9165 = add i64 %9164, 3224
  %9166 = add i64 %9144, 31
  store i64 %9166, i64* %3, align 8
  %9167 = inttoptr i64 %9165 to i64*
  %9168 = load i64, i64* %9167, align 8
  store i64 %9168, i64* %RSI.i766, align 8
  %9169 = add i64 %9144, 34
  store i64 %9169, i64* %3, align 8
  %9170 = inttoptr i64 %9168 to i64*
  %9171 = load i64, i64* %9170, align 8
  store i64 %9171, i64* %RSI.i766, align 8
  %9172 = add i64 %9145, -52
  %9173 = add i64 %9144, 38
  store i64 %9173, i64* %3, align 8
  %9174 = inttoptr i64 %9172 to i32*
  %9175 = load i32, i32* %9174, align 4
  %9176 = sext i32 %9175 to i64
  store i64 %9176, i64* %RDI.i732, align 8
  %9177 = shl nsw i64 %9176, 3
  %9178 = add i64 %9177, %9171
  %9179 = add i64 %9144, 42
  store i64 %9179, i64* %3, align 8
  %9180 = inttoptr i64 %9178 to i64*
  %9181 = load i64, i64* %9180, align 8
  store i64 %9181, i64* %RSI.i766, align 8
  %9182 = add i64 %9145, -56
  %9183 = add i64 %9144, 46
  store i64 %9183, i64* %3, align 8
  %9184 = inttoptr i64 %9182 to i32*
  %9185 = load i32, i32* %9184, align 4
  %9186 = sext i32 %9185 to i64
  store i64 %9186, i64* %RDI.i732, align 8
  %9187 = shl nsw i64 %9186, 3
  %9188 = add i64 %9187, %9181
  %9189 = add i64 %9144, 50
  store i64 %9189, i64* %3, align 8
  %9190 = inttoptr i64 %9188 to i64*
  store i64 %9160, i64* %9190, align 8
  %9191 = load i64, i64* %RBP.i, align 8
  %9192 = add i64 %9191, -40
  %9193 = load i64, i64* %3, align 8
  %9194 = add i64 %9193, 4
  store i64 %9194, i64* %3, align 8
  %9195 = inttoptr i64 %9192 to i64*
  %9196 = load i64, i64* %9195, align 8
  store i64 %9196, i64* %RCX.i7756, align 8
  %9197 = add i64 %9196, 6496
  %9198 = add i64 %9193, 11
  store i64 %9198, i64* %3, align 8
  %9199 = inttoptr i64 %9197 to i64*
  %9200 = load i64, i64* %9199, align 8
  store i64 %9200, i64* %RCX.i7756, align 8
  %9201 = add i64 %9200, 8
  %9202 = add i64 %9193, 15
  store i64 %9202, i64* %3, align 8
  %9203 = inttoptr i64 %9201 to i64*
  %9204 = load i64, i64* %9203, align 8
  store i64 %9204, i64* %RCX.i7756, align 8
  %9205 = add i64 %9191, -52
  %9206 = add i64 %9193, 18
  store i64 %9206, i64* %3, align 8
  %9207 = inttoptr i64 %9205 to i32*
  %9208 = load i32, i32* %9207, align 4
  %9209 = and i32 %9208, 2
  %9210 = zext i32 %9209 to i64
  store i64 %9210, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9211 = tail call i32 @llvm.ctpop.i32(i32 %9209)
  %9212 = trunc i32 %9211 to i8
  %9213 = xor i8 %9212, 1
  store i8 %9213, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit656 = lshr exact i32 %9209, 1
  %9214 = trunc i32 %.lobit656 to i8
  %9215 = xor i8 %9214, 1
  store i8 %9215, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %9216 = add i64 %9191, -944
  %9217 = add i64 %9193, 31
  store i64 %9217, i64* %3, align 8
  %9218 = inttoptr i64 %9216 to i64*
  store i64 %9204, i64* %9218, align 8
  %9219 = load i64, i64* %3, align 8
  %9220 = load i8, i8* %34, align 1
  %9221 = icmp ne i8 %9220, 0
  %.v800 = select i1 %9221, i64 23, i64 6
  %9222 = add i64 %9219, %.v800
  %cmpBr_4576bb = icmp eq i8 %9220, 1
  %9223 = load i64, i64* %RBP.i, align 8
  %9224 = add i64 %9223, -52
  %9225 = add i64 %9222, 3
  store i64 %9225, i64* %3, align 8
  %9226 = inttoptr i64 %9224 to i32*
  %9227 = load i32, i32* %9226, align 4
  %9228 = zext i32 %9227 to i64
  store i64 %9228, i64* %RAX.i3176, align 8
  %9229 = add i64 %9222, 6
  store i64 %9229, i64* %3, align 8
  br i1 %cmpBr_4576bb, label %block_.L_4576d2, label %block_4576c1

block_4576c1:                                     ; preds = %block_.L_45766a
  %9230 = or i64 %9228, 1
  %9231 = trunc i64 %9230 to i32
  store i64 %9230, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9232 = and i32 %9231, 255
  %9233 = tail call i32 @llvm.ctpop.i32(i32 %9232)
  %9234 = trunc i32 %9233 to i8
  %9235 = and i8 %9234, 1
  %9236 = xor i8 %9235, 1
  store i8 %9236, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %9237 = lshr i32 %9231, 31
  %9238 = trunc i32 %9237 to i8
  store i8 %9238, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9239 = add i64 %9223, -948
  %9240 = add i64 %9222, 12
  store i64 %9240, i64* %3, align 8
  %9241 = inttoptr i64 %9239 to i32*
  store i32 %9231, i32* %9241, align 4
  %9242 = load i64, i64* %3, align 8
  %9243 = add i64 %9242, 17
  store i64 %9243, i64* %3, align 8
  br label %block_.L_4576de

block_.L_4576d2:                                  ; preds = %block_.L_45766a
  %9244 = and i64 %9228, 4294967294
  store i64 %9244, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9245 = and i32 %9227, 254
  %9246 = tail call i32 @llvm.ctpop.i32(i32 %9245)
  %9247 = trunc i32 %9246 to i8
  %9248 = and i8 %9247, 1
  %9249 = xor i8 %9248, 1
  store i8 %9249, i8* %26, align 1
  %9250 = icmp ult i32 %9227, 2
  %9251 = zext i1 %9250 to i8
  store i8 %9251, i8* %34, align 1
  %9252 = lshr i32 %9227, 31
  %9253 = trunc i32 %9252 to i8
  store i8 %9253, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9254 = add i64 %9223, -948
  %9255 = trunc i64 %9244 to i32
  %9256 = add i64 %9222, 12
  store i64 %9256, i64* %3, align 8
  %9257 = inttoptr i64 %9254 to i32*
  store i32 %9255, i32* %9257, align 4
  %.pre499 = load i64, i64* %3, align 8
  br label %block_.L_4576de

block_.L_4576de:                                  ; preds = %block_.L_4576d2, %block_4576c1
  %9258 = phi i64 [ %.pre499, %block_.L_4576d2 ], [ %9243, %block_4576c1 ]
  %9259 = load i64, i64* %RBP.i, align 8
  %9260 = add i64 %9259, -948
  %9261 = add i64 %9258, 6
  store i64 %9261, i64* %3, align 8
  %9262 = inttoptr i64 %9260 to i32*
  %9263 = load i32, i32* %9262, align 4
  %9264 = zext i32 %9263 to i64
  store i64 %9264, i64* %RAX.i3176, align 8
  %9265 = sext i32 %9263 to i64
  store i64 %9265, i64* %RCX.i7756, align 8
  %9266 = add i64 %9259, -944
  %9267 = add i64 %9258, 16
  store i64 %9267, i64* %3, align 8
  %9268 = inttoptr i64 %9266 to i64*
  %9269 = load i64, i64* %9268, align 8
  store i64 %9269, i64* %RDX.i7753, align 8
  %9270 = shl nsw i64 %9265, 3
  %9271 = add i64 %9270, %9269
  %9272 = add i64 %9258, 20
  store i64 %9272, i64* %3, align 8
  %9273 = inttoptr i64 %9271 to i64*
  %9274 = load i64, i64* %9273, align 8
  store i64 %9274, i64* %RCX.i7756, align 8
  %9275 = add i64 %9259, -56
  %9276 = add i64 %9258, 23
  store i64 %9276, i64* %3, align 8
  %9277 = inttoptr i64 %9275 to i32*
  %9278 = load i32, i32* %9277, align 4
  %9279 = and i32 %9278, 2
  %9280 = zext i32 %9279 to i64
  store i64 %9280, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9281 = tail call i32 @llvm.ctpop.i32(i32 %9279)
  %9282 = trunc i32 %9281 to i8
  %9283 = xor i8 %9282, 1
  store i8 %9283, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit657 = lshr exact i32 %9279, 1
  %9284 = trunc i32 %.lobit657 to i8
  %9285 = xor i8 %9284, 1
  store i8 %9285, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %9286 = add i64 %9259, -960
  %9287 = add i64 %9258, 36
  store i64 %9287, i64* %3, align 8
  %9288 = inttoptr i64 %9286 to i64*
  store i64 %9274, i64* %9288, align 8
  %9289 = load i64, i64* %3, align 8
  %9290 = load i8, i8* %34, align 1
  %9291 = icmp ne i8 %9290, 0
  %.v801 = select i1 %9291, i64 23, i64 6
  %9292 = add i64 %9289, %.v801
  %cmpBr_457702 = icmp eq i8 %9290, 1
  %9293 = load i64, i64* %RBP.i, align 8
  %9294 = add i64 %9293, -56
  %9295 = add i64 %9292, 3
  store i64 %9295, i64* %3, align 8
  %9296 = inttoptr i64 %9294 to i32*
  %9297 = load i32, i32* %9296, align 4
  %9298 = zext i32 %9297 to i64
  store i64 %9298, i64* %RAX.i3176, align 8
  %9299 = add i64 %9292, 6
  store i64 %9299, i64* %3, align 8
  br i1 %cmpBr_457702, label %block_.L_457719, label %block_457708

block_457708:                                     ; preds = %block_.L_4576de
  %9300 = or i64 %9298, 1
  %9301 = trunc i64 %9300 to i32
  store i64 %9300, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9302 = and i32 %9301, 255
  %9303 = tail call i32 @llvm.ctpop.i32(i32 %9302)
  %9304 = trunc i32 %9303 to i8
  %9305 = and i8 %9304, 1
  %9306 = xor i8 %9305, 1
  store i8 %9306, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %9307 = lshr i32 %9301, 31
  %9308 = trunc i32 %9307 to i8
  store i8 %9308, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9309 = add i64 %9293, -964
  %9310 = add i64 %9292, 12
  store i64 %9310, i64* %3, align 8
  %9311 = inttoptr i64 %9309 to i32*
  store i32 %9301, i32* %9311, align 4
  %9312 = load i64, i64* %3, align 8
  %9313 = add i64 %9312, 17
  store i64 %9313, i64* %3, align 8
  br label %block_.L_457725

block_.L_457719:                                  ; preds = %block_.L_4576de
  %9314 = and i64 %9298, 4294967294
  store i64 %9314, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9315 = and i32 %9297, 254
  %9316 = tail call i32 @llvm.ctpop.i32(i32 %9315)
  %9317 = trunc i32 %9316 to i8
  %9318 = and i8 %9317, 1
  %9319 = xor i8 %9318, 1
  store i8 %9319, i8* %26, align 1
  %9320 = icmp ult i32 %9297, 2
  %9321 = zext i1 %9320 to i8
  store i8 %9321, i8* %34, align 1
  %9322 = lshr i32 %9297, 31
  %9323 = trunc i32 %9322 to i8
  store i8 %9323, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9324 = add i64 %9293, -964
  %9325 = trunc i64 %9314 to i32
  %9326 = add i64 %9292, 12
  store i64 %9326, i64* %3, align 8
  %9327 = inttoptr i64 %9324 to i32*
  store i32 %9325, i32* %9327, align 4
  %.pre500 = load i64, i64* %3, align 8
  br label %block_.L_457725

block_.L_457725:                                  ; preds = %block_.L_457719, %block_457708
  %9328 = phi i64 [ %.pre500, %block_.L_457719 ], [ %9313, %block_457708 ]
  %9329 = load i64, i64* %RBP.i, align 8
  %9330 = add i64 %9329, -964
  %9331 = add i64 %9328, 6
  store i64 %9331, i64* %3, align 8
  %9332 = inttoptr i64 %9330 to i32*
  %9333 = load i32, i32* %9332, align 4
  %9334 = zext i32 %9333 to i64
  store i64 %9334, i64* %RAX.i3176, align 8
  %9335 = sext i32 %9333 to i64
  store i64 %9335, i64* %RCX.i7756, align 8
  %9336 = add i64 %9329, -960
  %9337 = add i64 %9328, 16
  store i64 %9337, i64* %3, align 8
  %9338 = inttoptr i64 %9336 to i64*
  %9339 = load i64, i64* %9338, align 8
  store i64 %9339, i64* %RDX.i7753, align 8
  %9340 = shl nsw i64 %9335, 3
  %9341 = add i64 %9340, %9339
  %9342 = add i64 %9328, 20
  store i64 %9342, i64* %3, align 8
  %9343 = inttoptr i64 %9341 to i64*
  %9344 = load i64, i64* %9343, align 8
  store i64 %9344, i64* %RCX.i7756, align 8
  %9345 = add i64 %9329, -16
  %9346 = add i64 %9328, 24
  store i64 %9346, i64* %3, align 8
  %9347 = inttoptr i64 %9345 to i64*
  %9348 = load i64, i64* %9347, align 8
  store i64 %9348, i64* %RSI.i766, align 8
  %9349 = add i64 %9348, 3224
  %9350 = add i64 %9328, 31
  store i64 %9350, i64* %3, align 8
  %9351 = inttoptr i64 %9349 to i64*
  %9352 = load i64, i64* %9351, align 8
  store i64 %9352, i64* %RSI.i766, align 8
  %9353 = add i64 %9352, 8
  %9354 = add i64 %9328, 35
  store i64 %9354, i64* %3, align 8
  %9355 = inttoptr i64 %9353 to i64*
  %9356 = load i64, i64* %9355, align 8
  store i64 %9356, i64* %RSI.i766, align 8
  %9357 = add i64 %9329, -52
  %9358 = add i64 %9328, 39
  store i64 %9358, i64* %3, align 8
  %9359 = inttoptr i64 %9357 to i32*
  %9360 = load i32, i32* %9359, align 4
  %9361 = sext i32 %9360 to i64
  store i64 %9361, i64* %RDI.i732, align 8
  %9362 = shl nsw i64 %9361, 3
  %9363 = add i64 %9362, %9356
  %9364 = add i64 %9328, 43
  store i64 %9364, i64* %3, align 8
  %9365 = inttoptr i64 %9363 to i64*
  %9366 = load i64, i64* %9365, align 8
  store i64 %9366, i64* %RSI.i766, align 8
  %9367 = add i64 %9329, -56
  %9368 = add i64 %9328, 47
  store i64 %9368, i64* %3, align 8
  %9369 = inttoptr i64 %9367 to i32*
  %9370 = load i32, i32* %9369, align 4
  %9371 = sext i32 %9370 to i64
  store i64 %9371, i64* %RDI.i732, align 8
  %9372 = shl nsw i64 %9371, 3
  %9373 = add i64 %9372, %9366
  %9374 = add i64 %9328, 51
  store i64 %9374, i64* %3, align 8
  %9375 = inttoptr i64 %9373 to i64*
  store i64 %9344, i64* %9375, align 8
  %9376 = load i64, i64* %3, align 8
  %9377 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9377, i64* %RCX.i7756, align 8
  %9378 = add i64 %9377, 71996
  %9379 = add i64 %9376, 15
  store i64 %9379, i64* %3, align 8
  %9380 = inttoptr i64 %9378 to i32*
  %9381 = load i32, i32* %9380, align 4
  %9382 = add i32 %9381, -1
  %9383 = icmp eq i32 %9381, 0
  %9384 = zext i1 %9383 to i8
  store i8 %9384, i8* %19, align 1
  %9385 = and i32 %9382, 255
  %9386 = tail call i32 @llvm.ctpop.i32(i32 %9385)
  %9387 = trunc i32 %9386 to i8
  %9388 = and i8 %9387, 1
  %9389 = xor i8 %9388, 1
  store i8 %9389, i8* %26, align 1
  %9390 = xor i32 %9382, %9381
  %9391 = lshr i32 %9390, 4
  %9392 = trunc i32 %9391 to i8
  %9393 = and i8 %9392, 1
  store i8 %9393, i8* %31, align 1
  %9394 = icmp eq i32 %9382, 0
  %9395 = zext i1 %9394 to i8
  store i8 %9395, i8* %34, align 1
  %9396 = lshr i32 %9382, 31
  %9397 = trunc i32 %9396 to i8
  store i8 %9397, i8* %37, align 1
  %9398 = lshr i32 %9381, 31
  %9399 = xor i32 %9396, %9398
  %9400 = add nuw nsw i32 %9399, %9398
  %9401 = icmp eq i32 %9400, 2
  %9402 = zext i1 %9401 to i8
  store i8 %9402, i8* %43, align 1
  %.v710 = select i1 %9394, i64 21, i64 455
  %9403 = add i64 %9376, %.v710
  store i64 %9403, i64* %3, align 8
  br i1 %9394, label %block_45776d, label %block_.L_45791f

block_45776d:                                     ; preds = %block_.L_457725
  %9404 = load i64, i64* %RBP.i, align 8
  %9405 = add i64 %9404, -40
  %9406 = add i64 %9403, 4
  store i64 %9406, i64* %3, align 8
  %9407 = inttoptr i64 %9405 to i64*
  %9408 = load i64, i64* %9407, align 8
  store i64 %9408, i64* %RAX.i3176, align 8
  %9409 = add i64 %9408, 6376
  %9410 = add i64 %9403, 11
  store i64 %9410, i64* %3, align 8
  %9411 = inttoptr i64 %9409 to i32*
  %9412 = load i32, i32* %9411, align 4
  store i8 0, i8* %19, align 1
  %9413 = and i32 %9412, 255
  %9414 = tail call i32 @llvm.ctpop.i32(i32 %9413)
  %9415 = trunc i32 %9414 to i8
  %9416 = and i8 %9415, 1
  %9417 = xor i8 %9416, 1
  store i8 %9417, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9418 = icmp eq i32 %9412, 0
  %9419 = zext i1 %9418 to i8
  store i8 %9419, i8* %34, align 1
  %9420 = lshr i32 %9412, 31
  %9421 = trunc i32 %9420 to i8
  store i8 %9421, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v713 = select i1 %9418, i64 17, i64 165
  %9422 = add i64 %9403, %.v713
  store i64 %9422, i64* %3, align 8
  br i1 %9418, label %block_45777e, label %block_.L_457812

block_45777e:                                     ; preds = %block_45776d
  %9423 = add i64 %9404, -16
  %9424 = add i64 %9422, 4
  store i64 %9424, i64* %3, align 8
  %9425 = inttoptr i64 %9423 to i64*
  %9426 = load i64, i64* %9425, align 8
  store i64 %9426, i64* %RAX.i3176, align 8
  %9427 = add i64 %9426, 3216
  %9428 = add i64 %9422, 11
  store i64 %9428, i64* %3, align 8
  %9429 = inttoptr i64 %9427 to i64*
  %9430 = load i64, i64* %9429, align 8
  store i64 %9430, i64* %RAX.i3176, align 8
  %9431 = add i64 %9422, 14
  store i64 %9431, i64* %3, align 8
  %9432 = inttoptr i64 %9430 to i64*
  %9433 = load i64, i64* %9432, align 8
  store i64 %9433, i64* %RAX.i3176, align 8
  %9434 = add i64 %9404, -52
  %9435 = add i64 %9422, 18
  store i64 %9435, i64* %3, align 8
  %9436 = inttoptr i64 %9434 to i32*
  %9437 = load i32, i32* %9436, align 4
  %9438 = sext i32 %9437 to i64
  store i64 %9438, i64* %RCX.i7756, align 8
  %9439 = shl nsw i64 %9438, 3
  %9440 = add i64 %9439, %9433
  %9441 = add i64 %9422, 22
  store i64 %9441, i64* %3, align 8
  %9442 = inttoptr i64 %9440 to i64*
  %9443 = load i64, i64* %9442, align 8
  store i64 %9443, i64* %RAX.i3176, align 8
  %9444 = add i64 %9404, -56
  %9445 = add i64 %9422, 26
  store i64 %9445, i64* %3, align 8
  %9446 = inttoptr i64 %9444 to i32*
  %9447 = load i32, i32* %9446, align 4
  %9448 = sext i32 %9447 to i64
  store i64 %9448, i64* %RCX.i7756, align 8
  %9449 = shl nsw i64 %9448, 1
  %9450 = add i64 %9449, %9443
  %9451 = add i64 %9422, 30
  store i64 %9451, i64* %3, align 8
  %9452 = inttoptr i64 %9450 to i16*
  %9453 = load i16, i16* %9452, align 2
  %9454 = sext i16 %9453 to i64
  %9455 = and i64 %9454, 4294967295
  store i64 %9455, i64* %RDX.i7753, align 8
  %9456 = sext i16 %9453 to i32
  store i8 0, i8* %19, align 1
  %9457 = and i32 %9456, 255
  %9458 = tail call i32 @llvm.ctpop.i32(i32 %9457)
  %9459 = trunc i32 %9458 to i8
  %9460 = and i8 %9459, 1
  %9461 = xor i8 %9460, 1
  store i8 %9461, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9462 = icmp eq i16 %9453, 0
  %9463 = zext i1 %9462 to i8
  store i8 %9463, i8* %34, align 1
  %9464 = lshr i32 %9456, 31
  %9465 = trunc i32 %9464 to i8
  store i8 %9465, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v714 = select i1 %9462, i64 39, i64 148
  %9466 = add i64 %9422, %.v714
  store i64 %9466, i64* %3, align 8
  br i1 %9462, label %block_4577a5, label %block_.L_457812

block_4577a5:                                     ; preds = %block_45777e
  %9467 = add i64 %9466, 4
  store i64 %9467, i64* %3, align 8
  %9468 = load i64, i64* %9425, align 8
  store i64 %9468, i64* %RAX.i3176, align 8
  %9469 = add i64 %9468, 3232
  %9470 = add i64 %9466, 11
  store i64 %9470, i64* %3, align 8
  %9471 = inttoptr i64 %9469 to i64*
  %9472 = load i64, i64* %9471, align 8
  store i64 %9472, i64* %RAX.i3176, align 8
  %9473 = add i64 %9466, 14
  store i64 %9473, i64* %3, align 8
  %9474 = inttoptr i64 %9472 to i64*
  %9475 = load i64, i64* %9474, align 8
  store i64 %9475, i64* %RAX.i3176, align 8
  %9476 = add i64 %9466, 18
  store i64 %9476, i64* %3, align 8
  %9477 = load i32, i32* %9436, align 4
  %9478 = sext i32 %9477 to i64
  store i64 %9478, i64* %RCX.i7756, align 8
  %9479 = shl nsw i64 %9478, 3
  %9480 = add i64 %9479, %9475
  %9481 = add i64 %9466, 22
  store i64 %9481, i64* %3, align 8
  %9482 = inttoptr i64 %9480 to i64*
  %9483 = load i64, i64* %9482, align 8
  store i64 %9483, i64* %RAX.i3176, align 8
  %9484 = add i64 %9466, 26
  store i64 %9484, i64* %3, align 8
  %9485 = load i32, i32* %9446, align 4
  %9486 = sext i32 %9485 to i64
  store i64 %9486, i64* %RCX.i7756, align 8
  %9487 = shl nsw i64 %9486, 3
  %9488 = add i64 %9487, %9483
  %9489 = add i64 %9466, 30
  store i64 %9489, i64* %3, align 8
  %9490 = inttoptr i64 %9488 to i64*
  %9491 = load i64, i64* %9490, align 8
  store i64 %9491, i64* %RAX.i3176, align 8
  %9492 = add i64 %9466, 33
  store i64 %9492, i64* %3, align 8
  %9493 = inttoptr i64 %9491 to i16*
  %9494 = load i16, i16* %9493, align 2
  %9495 = sext i16 %9494 to i64
  %9496 = and i64 %9495, 4294967295
  store i64 %9496, i64* %RDI.i732, align 8
  %9497 = add i64 %9466, -354213
  %9498 = add i64 %9466, 38
  %9499 = load i64, i64* %6, align 8
  %9500 = add i64 %9499, -8
  %9501 = inttoptr i64 %9500 to i64*
  store i64 %9498, i64* %9501, align 8
  store i64 %9500, i64* %6, align 8
  store i64 %9497, i64* %3, align 8
  %9502 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.59)
  %9503 = load i64, i64* %RAX.i3176, align 8
  %9504 = load i64, i64* %3, align 8
  %9505 = shl i64 %9503, 32
  %9506 = ashr i64 %9505, 33
  %9507 = and i64 %9506, 4294967295
  store i64 %9507, i64* %RAX.i3176, align 8
  %9508 = trunc i64 %9506 to i32
  store i8 0, i8* %19, align 1
  %9509 = and i32 %9508, 255
  %9510 = tail call i32 @llvm.ctpop.i32(i32 %9509)
  %9511 = trunc i32 %9510 to i8
  %9512 = and i8 %9511, 1
  %9513 = xor i8 %9512, 1
  store i8 %9513, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9514 = icmp eq i32 %9508, 0
  %9515 = zext i1 %9514 to i8
  store i8 %9515, i8* %34, align 1
  %9516 = lshr i64 %9506, 31
  %9517 = trunc i64 %9516 to i8
  %9518 = and i8 %9517, 1
  store i8 %9518, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v715 = select i1 %9514, i64 11, i64 70
  %9519 = add i64 %9504, %.v715
  store i64 %9519, i64* %3, align 8
  br i1 %9514, label %block_4577d7, label %block_.L_457812

block_4577d7:                                     ; preds = %block_4577a5
  %9520 = load i64, i64* %RBP.i, align 8
  %9521 = add i64 %9520, -16
  %9522 = add i64 %9519, 4
  store i64 %9522, i64* %3, align 8
  %9523 = inttoptr i64 %9521 to i64*
  %9524 = load i64, i64* %9523, align 8
  store i64 %9524, i64* %RAX.i3176, align 8
  %9525 = add i64 %9524, 3232
  %9526 = add i64 %9519, 11
  store i64 %9526, i64* %3, align 8
  %9527 = inttoptr i64 %9525 to i64*
  %9528 = load i64, i64* %9527, align 8
  store i64 %9528, i64* %RAX.i3176, align 8
  %9529 = add i64 %9519, 14
  store i64 %9529, i64* %3, align 8
  %9530 = inttoptr i64 %9528 to i64*
  %9531 = load i64, i64* %9530, align 8
  store i64 %9531, i64* %RAX.i3176, align 8
  %9532 = add i64 %9520, -52
  %9533 = add i64 %9519, 18
  store i64 %9533, i64* %3, align 8
  %9534 = inttoptr i64 %9532 to i32*
  %9535 = load i32, i32* %9534, align 4
  %9536 = sext i32 %9535 to i64
  store i64 %9536, i64* %RCX.i7756, align 8
  %9537 = shl nsw i64 %9536, 3
  %9538 = add i64 %9537, %9531
  %9539 = add i64 %9519, 22
  store i64 %9539, i64* %3, align 8
  %9540 = inttoptr i64 %9538 to i64*
  %9541 = load i64, i64* %9540, align 8
  store i64 %9541, i64* %RAX.i3176, align 8
  %9542 = add i64 %9520, -56
  %9543 = add i64 %9519, 26
  store i64 %9543, i64* %3, align 8
  %9544 = inttoptr i64 %9542 to i32*
  %9545 = load i32, i32* %9544, align 4
  %9546 = sext i32 %9545 to i64
  store i64 %9546, i64* %RCX.i7756, align 8
  %9547 = shl nsw i64 %9546, 3
  %9548 = add i64 %9547, %9541
  %9549 = add i64 %9519, 30
  store i64 %9549, i64* %3, align 8
  %9550 = inttoptr i64 %9548 to i64*
  %9551 = load i64, i64* %9550, align 8
  store i64 %9551, i64* %RAX.i3176, align 8
  %9552 = add i64 %9551, 2
  %9553 = add i64 %9519, 34
  store i64 %9553, i64* %3, align 8
  %9554 = inttoptr i64 %9552 to i16*
  %9555 = load i16, i16* %9554, align 2
  %9556 = sext i16 %9555 to i64
  %9557 = and i64 %9556, 4294967295
  store i64 %9557, i64* %RDI.i732, align 8
  %9558 = add i64 %9519, -354263
  %9559 = add i64 %9519, 39
  %9560 = load i64, i64* %6, align 8
  %9561 = add i64 %9560, -8
  %9562 = inttoptr i64 %9561 to i64*
  store i64 %9559, i64* %9562, align 8
  store i64 %9561, i64* %6, align 8
  store i64 %9558, i64* %3, align 8
  %9563 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %9502)
  %9564 = load i64, i64* %3, align 8
  store i8 1, i8* %DL.i4045, align 1
  %9565 = load i64, i64* %RAX.i3176, align 8
  %9566 = shl i64 %9565, 32
  %9567 = ashr i64 %9566, 33
  %9568 = and i64 %9567, 4294967295
  store i64 %9568, i64* %RAX.i3176, align 8
  %9569 = trunc i64 %9567 to i32
  store i8 0, i8* %19, align 1
  %9570 = and i32 %9569, 255
  %9571 = tail call i32 @llvm.ctpop.i32(i32 %9570)
  %9572 = trunc i32 %9571 to i8
  %9573 = and i8 %9572, 1
  %9574 = xor i8 %9573, 1
  store i8 %9574, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9575 = icmp eq i32 %9569, 0
  %9576 = zext i1 %9575 to i8
  store i8 %9576, i8* %34, align 1
  %9577 = lshr i64 %9567, 31
  %9578 = trunc i64 %9577 to i8
  %9579 = and i8 %9578, 1
  store i8 %9579, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %9580 = load i64, i64* %RBP.i, align 8
  %9581 = add i64 %9580, -965
  %9582 = add i64 %9564, 13
  store i64 %9582, i64* %3, align 8
  %9583 = inttoptr i64 %9581 to i8*
  store i8 1, i8* %9583, align 1
  %9584 = load i64, i64* %3, align 8
  %9585 = load i8, i8* %34, align 1
  %9586 = icmp ne i8 %9585, 0
  %.v802 = select i1 %9586, i64 234, i64 6
  %9587 = add i64 %9584, %.v802
  store i64 %9587, i64* %3, align 8
  %cmpBr_45780c = icmp eq i8 %9585, 1
  br i1 %cmpBr_45780c, label %block_.L_4578f6, label %block_4577d7.block_.L_457812_crit_edge

block_4577d7.block_.L_457812_crit_edge:           ; preds = %block_4577d7
  %.pre501 = load i64, i64* %RAX.i3176, align 8
  br label %block_.L_457812

block_.L_457812:                                  ; preds = %block_4577a5, %block_45777e, %block_45776d, %block_4577d7.block_.L_457812_crit_edge
  %9588 = phi i64 [ %9422, %block_45776d ], [ %9466, %block_45777e ], [ %9519, %block_4577a5 ], [ %9587, %block_4577d7.block_.L_457812_crit_edge ]
  %9589 = phi i64 [ %9408, %block_45776d ], [ %9443, %block_45777e ], [ %9506, %block_4577a5 ], [ %.pre501, %block_4577d7.block_.L_457812_crit_edge ]
  %9590 = phi i64 [ %9408, %block_45776d ], [ %9443, %block_45777e ], [ %9507, %block_4577a5 ], [ %.pre501, %block_4577d7.block_.L_457812_crit_edge ]
  %MEMORY.76 = phi %struct.Memory* [ %MEMORY.59, %block_45776d ], [ %MEMORY.59, %block_45777e ], [ %9502, %block_4577a5 ], [ %9563, %block_4577d7.block_.L_457812_crit_edge ]
  %9591 = and i64 %9589, 4294967295
  %9592 = xor i64 %9591, %9590
  %9593 = trunc i64 %9592 to i32
  %9594 = and i64 %9592, 4294967295
  store i64 %9594, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %9595 = and i32 %9593, 255
  %9596 = tail call i32 @llvm.ctpop.i32(i32 %9595)
  %9597 = trunc i32 %9596 to i8
  %9598 = and i8 %9597, 1
  %9599 = xor i8 %9598, 1
  store i8 %9599, i8* %26, align 1
  %9600 = icmp eq i32 %9593, 0
  %9601 = zext i1 %9600 to i8
  store i8 %9601, i8* %34, align 1
  %9602 = lshr i32 %9593, 31
  %9603 = trunc i32 %9602 to i8
  store i8 %9603, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9604 = trunc i64 %9592 to i8
  store i8 %9604, i8* %CL.i4136, align 1
  %9605 = load i64, i64* %RBP.i, align 8
  %9606 = add i64 %9605, -16
  %9607 = add i64 %9588, 8
  store i64 %9607, i64* %3, align 8
  %9608 = inttoptr i64 %9606 to i64*
  %9609 = load i64, i64* %9608, align 8
  store i64 %9609, i64* %RDX.i7753, align 8
  %9610 = add i64 %9609, 3216
  %9611 = add i64 %9588, 15
  store i64 %9611, i64* %3, align 8
  %9612 = inttoptr i64 %9610 to i64*
  %9613 = load i64, i64* %9612, align 8
  store i64 %9613, i64* %RDX.i7753, align 8
  %9614 = add i64 %9588, 18
  store i64 %9614, i64* %3, align 8
  %9615 = inttoptr i64 %9613 to i64*
  %9616 = load i64, i64* %9615, align 8
  store i64 %9616, i64* %RDX.i7753, align 8
  %9617 = add i64 %9605, -52
  %9618 = add i64 %9588, 22
  store i64 %9618, i64* %3, align 8
  %9619 = inttoptr i64 %9617 to i32*
  %9620 = load i32, i32* %9619, align 4
  %9621 = sext i32 %9620 to i64
  store i64 %9621, i64* %RSI.i766, align 8
  %9622 = shl nsw i64 %9621, 3
  %9623 = add i64 %9622, %9616
  %9624 = add i64 %9588, 26
  store i64 %9624, i64* %3, align 8
  %9625 = inttoptr i64 %9623 to i64*
  %9626 = load i64, i64* %9625, align 8
  store i64 %9626, i64* %RDX.i7753, align 8
  %9627 = add i64 %9605, -56
  %9628 = add i64 %9588, 30
  store i64 %9628, i64* %3, align 8
  %9629 = inttoptr i64 %9627 to i32*
  %9630 = load i32, i32* %9629, align 4
  %9631 = sext i32 %9630 to i64
  store i64 %9631, i64* %RSI.i766, align 8
  %9632 = shl nsw i64 %9631, 1
  %9633 = add i64 %9632, %9626
  %9634 = add i64 %9588, 34
  store i64 %9634, i64* %3, align 8
  %9635 = inttoptr i64 %9633 to i16*
  %9636 = load i16, i16* %9635, align 2
  %9637 = sext i16 %9636 to i64
  %9638 = and i64 %9637, 4294967295
  store i64 %9638, i64* %RAX.i3176, align 8
  %9639 = sext i16 %9636 to i32
  %9640 = add nsw i32 %9639, 1
  %9641 = icmp ne i16 %9636, -1
  %9642 = zext i1 %9641 to i8
  store i8 %9642, i8* %19, align 1
  %9643 = and i32 %9640, 255
  %9644 = tail call i32 @llvm.ctpop.i32(i32 %9643)
  %9645 = trunc i32 %9644 to i8
  %9646 = and i8 %9645, 1
  %9647 = xor i8 %9646, 1
  store i8 %9647, i8* %26, align 1
  %9648 = xor i32 %9639, 16
  %9649 = xor i32 %9648, %9640
  %9650 = lshr i32 %9649, 4
  %9651 = trunc i32 %9650 to i8
  %9652 = and i8 %9651, 1
  store i8 %9652, i8* %31, align 1
  %9653 = icmp eq i32 %9640, 0
  %9654 = zext i1 %9653 to i8
  store i8 %9654, i8* %34, align 1
  %9655 = lshr i32 %9640, 31
  %9656 = trunc i32 %9655 to i8
  store i8 %9656, i8* %37, align 1
  %9657 = lshr i32 %9639, 31
  %9658 = xor i32 %9657, 1
  %9659 = xor i32 %9655, %9657
  %9660 = add nuw nsw i32 %9659, %9658
  %9661 = icmp eq i32 %9660, 2
  %9662 = zext i1 %9661 to i8
  store i8 %9662, i8* %43, align 1
  %9663 = add i64 %9605, -966
  %9664 = add i64 %9588, 43
  store i64 %9664, i64* %3, align 8
  %9665 = inttoptr i64 %9663 to i8*
  store i8 %9604, i8* %9665, align 1
  %9666 = load i64, i64* %3, align 8
  %9667 = add i64 %9666, 173
  %9668 = add i64 %9666, 6
  %9669 = load i8, i8* %34, align 1
  %9670 = icmp eq i8 %9669, 0
  %9671 = select i1 %9670, i64 %9667, i64 %9668
  store i64 %9671, i64* %3, align 8
  br i1 %9670, label %block_.L_4578ea, label %block_457843

block_457843:                                     ; preds = %block_.L_457812
  store i64 0, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %CL.i4136, align 1
  %9672 = load i64, i64* %RBP.i, align 8
  %9673 = add i64 %9672, -16
  %9674 = add i64 %9671, 8
  store i64 %9674, i64* %3, align 8
  %9675 = inttoptr i64 %9673 to i64*
  %9676 = load i64, i64* %9675, align 8
  store i64 %9676, i64* %RDX.i7753, align 8
  %9677 = add i64 %9676, 3216
  %9678 = add i64 %9671, 15
  store i64 %9678, i64* %3, align 8
  %9679 = inttoptr i64 %9677 to i64*
  %9680 = load i64, i64* %9679, align 8
  store i64 %9680, i64* %RDX.i7753, align 8
  %9681 = add i64 %9680, 8
  %9682 = add i64 %9671, 19
  store i64 %9682, i64* %3, align 8
  %9683 = inttoptr i64 %9681 to i64*
  %9684 = load i64, i64* %9683, align 8
  store i64 %9684, i64* %RDX.i7753, align 8
  %9685 = add i64 %9672, -52
  %9686 = add i64 %9671, 23
  store i64 %9686, i64* %3, align 8
  %9687 = inttoptr i64 %9685 to i32*
  %9688 = load i32, i32* %9687, align 4
  %9689 = sext i32 %9688 to i64
  store i64 %9689, i64* %RSI.i766, align 8
  %9690 = shl nsw i64 %9689, 3
  %9691 = add i64 %9690, %9684
  %9692 = add i64 %9671, 27
  store i64 %9692, i64* %3, align 8
  %9693 = inttoptr i64 %9691 to i64*
  %9694 = load i64, i64* %9693, align 8
  store i64 %9694, i64* %RDX.i7753, align 8
  %9695 = add i64 %9672, -56
  %9696 = add i64 %9671, 31
  store i64 %9696, i64* %3, align 8
  %9697 = inttoptr i64 %9695 to i32*
  %9698 = load i32, i32* %9697, align 4
  %9699 = sext i32 %9698 to i64
  store i64 %9699, i64* %RSI.i766, align 8
  %9700 = shl nsw i64 %9699, 1
  %9701 = add i64 %9700, %9694
  %9702 = add i64 %9671, 35
  store i64 %9702, i64* %3, align 8
  %9703 = inttoptr i64 %9701 to i16*
  %9704 = load i16, i16* %9703, align 2
  %9705 = sext i16 %9704 to i64
  %9706 = and i64 %9705, 4294967295
  store i64 %9706, i64* %RAX.i3176, align 8
  %9707 = sext i16 %9704 to i32
  store i8 0, i8* %19, align 1
  %9708 = and i32 %9707, 255
  %9709 = tail call i32 @llvm.ctpop.i32(i32 %9708)
  %9710 = trunc i32 %9709 to i8
  %9711 = and i8 %9710, 1
  %9712 = xor i8 %9711, 1
  store i8 %9712, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9713 = icmp eq i16 %9704, 0
  %9714 = zext i1 %9713 to i8
  store i8 %9714, i8* %34, align 1
  %9715 = lshr i32 %9707, 31
  %9716 = trunc i32 %9715 to i8
  store i8 %9716, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %9717 = add i64 %9672, -966
  %9718 = add i64 %9671, 44
  store i64 %9718, i64* %3, align 8
  %9719 = inttoptr i64 %9717 to i8*
  store i8 0, i8* %9719, align 1
  %9720 = load i64, i64* %3, align 8
  %9721 = add i64 %9720, 123
  %9722 = add i64 %9720, 6
  %9723 = load i8, i8* %34, align 1
  %9724 = icmp eq i8 %9723, 0
  %9725 = select i1 %9724, i64 %9721, i64 %9722
  store i64 %9725, i64* %3, align 8
  br i1 %9724, label %block_.L_4578ea, label %block_457875

block_457875:                                     ; preds = %block_457843
  %9726 = load i64, i64* %RBP.i, align 8
  %9727 = add i64 %9726, -16
  %9728 = add i64 %9725, 4
  store i64 %9728, i64* %3, align 8
  %9729 = inttoptr i64 %9727 to i64*
  %9730 = load i64, i64* %9729, align 8
  store i64 %9730, i64* %RAX.i3176, align 8
  %9731 = add i64 %9730, 3232
  %9732 = add i64 %9725, 11
  store i64 %9732, i64* %3, align 8
  %9733 = inttoptr i64 %9731 to i64*
  %9734 = load i64, i64* %9733, align 8
  store i64 %9734, i64* %RAX.i3176, align 8
  %9735 = add i64 %9734, 8
  %9736 = add i64 %9725, 15
  store i64 %9736, i64* %3, align 8
  %9737 = inttoptr i64 %9735 to i64*
  %9738 = load i64, i64* %9737, align 8
  store i64 %9738, i64* %RAX.i3176, align 8
  %9739 = add i64 %9726, -52
  %9740 = add i64 %9725, 19
  store i64 %9740, i64* %3, align 8
  %9741 = inttoptr i64 %9739 to i32*
  %9742 = load i32, i32* %9741, align 4
  %9743 = sext i32 %9742 to i64
  store i64 %9743, i64* %RCX.i7756, align 8
  %9744 = shl nsw i64 %9743, 3
  %9745 = add i64 %9744, %9738
  %9746 = add i64 %9725, 23
  store i64 %9746, i64* %3, align 8
  %9747 = inttoptr i64 %9745 to i64*
  %9748 = load i64, i64* %9747, align 8
  store i64 %9748, i64* %RAX.i3176, align 8
  %9749 = add i64 %9726, -56
  %9750 = add i64 %9725, 27
  store i64 %9750, i64* %3, align 8
  %9751 = inttoptr i64 %9749 to i32*
  %9752 = load i32, i32* %9751, align 4
  %9753 = sext i32 %9752 to i64
  store i64 %9753, i64* %RCX.i7756, align 8
  %9754 = shl nsw i64 %9753, 3
  %9755 = add i64 %9754, %9748
  %9756 = add i64 %9725, 31
  store i64 %9756, i64* %3, align 8
  %9757 = inttoptr i64 %9755 to i64*
  %9758 = load i64, i64* %9757, align 8
  store i64 %9758, i64* %RAX.i3176, align 8
  %9759 = add i64 %9725, 34
  store i64 %9759, i64* %3, align 8
  %9760 = inttoptr i64 %9758 to i16*
  %9761 = load i16, i16* %9760, align 2
  %9762 = sext i16 %9761 to i64
  %9763 = and i64 %9762, 4294967295
  store i64 %9763, i64* %RDI.i732, align 8
  %9764 = add i64 %9725, -354421
  %9765 = add i64 %9725, 39
  %9766 = load i64, i64* %6, align 8
  %9767 = add i64 %9766, -8
  %9768 = inttoptr i64 %9767 to i64*
  store i64 %9765, i64* %9768, align 8
  store i64 %9767, i64* %6, align 8
  store i64 %9764, i64* %3, align 8
  %9769 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.76)
  %9770 = load i64, i64* %3, align 8
  store i64 0, i64* %RDI.i732, align 8
  store i8 0, i8* %DL.i4045, align 1
  %9771 = load i64, i64* %RAX.i3176, align 8
  %9772 = shl i64 %9771, 32
  %9773 = ashr i64 %9772, 33
  %9774 = and i64 %9773, 4294967295
  store i64 %9774, i64* %RAX.i3176, align 8
  %9775 = trunc i64 %9773 to i32
  store i8 0, i8* %19, align 1
  %9776 = and i32 %9775, 255
  %9777 = tail call i32 @llvm.ctpop.i32(i32 %9776)
  %9778 = trunc i32 %9777 to i8
  %9779 = and i8 %9778, 1
  %9780 = xor i8 %9779, 1
  store i8 %9780, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9781 = icmp eq i32 %9775, 0
  %9782 = zext i1 %9781 to i8
  store i8 %9782, i8* %34, align 1
  %9783 = lshr i64 %9773, 31
  %9784 = trunc i64 %9783 to i8
  %9785 = and i8 %9784, 1
  store i8 %9785, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %9786 = load i64, i64* %RBP.i, align 8
  %9787 = add i64 %9786, -966
  %9788 = add i64 %9770, 16
  store i64 %9788, i64* %3, align 8
  %9789 = inttoptr i64 %9787 to i8*
  store i8 0, i8* %9789, align 1
  %9790 = load i64, i64* %3, align 8
  %9791 = add i64 %9790, 61
  %9792 = add i64 %9790, 6
  %9793 = load i8, i8* %34, align 1
  %9794 = icmp eq i8 %9793, 0
  %9795 = select i1 %9794, i64 %9791, i64 %9792
  store i64 %9795, i64* %3, align 8
  br i1 %9794, label %block_.L_4578ea, label %block_4578b3

block_4578b3:                                     ; preds = %block_457875
  %9796 = load i64, i64* %RBP.i, align 8
  %9797 = add i64 %9796, -16
  %9798 = add i64 %9795, 4
  store i64 %9798, i64* %3, align 8
  %9799 = inttoptr i64 %9797 to i64*
  %9800 = load i64, i64* %9799, align 8
  store i64 %9800, i64* %RAX.i3176, align 8
  %9801 = add i64 %9800, 3232
  %9802 = add i64 %9795, 11
  store i64 %9802, i64* %3, align 8
  %9803 = inttoptr i64 %9801 to i64*
  %9804 = load i64, i64* %9803, align 8
  store i64 %9804, i64* %RAX.i3176, align 8
  %9805 = add i64 %9804, 8
  %9806 = add i64 %9795, 15
  store i64 %9806, i64* %3, align 8
  %9807 = inttoptr i64 %9805 to i64*
  %9808 = load i64, i64* %9807, align 8
  store i64 %9808, i64* %RAX.i3176, align 8
  %9809 = add i64 %9796, -52
  %9810 = add i64 %9795, 19
  store i64 %9810, i64* %3, align 8
  %9811 = inttoptr i64 %9809 to i32*
  %9812 = load i32, i32* %9811, align 4
  %9813 = sext i32 %9812 to i64
  store i64 %9813, i64* %RCX.i7756, align 8
  %9814 = shl nsw i64 %9813, 3
  %9815 = add i64 %9814, %9808
  %9816 = add i64 %9795, 23
  store i64 %9816, i64* %3, align 8
  %9817 = inttoptr i64 %9815 to i64*
  %9818 = load i64, i64* %9817, align 8
  store i64 %9818, i64* %RAX.i3176, align 8
  %9819 = add i64 %9796, -56
  %9820 = add i64 %9795, 27
  store i64 %9820, i64* %3, align 8
  %9821 = inttoptr i64 %9819 to i32*
  %9822 = load i32, i32* %9821, align 4
  %9823 = sext i32 %9822 to i64
  store i64 %9823, i64* %RCX.i7756, align 8
  %9824 = shl nsw i64 %9823, 3
  %9825 = add i64 %9824, %9818
  %9826 = add i64 %9795, 31
  store i64 %9826, i64* %3, align 8
  %9827 = inttoptr i64 %9825 to i64*
  %9828 = load i64, i64* %9827, align 8
  store i64 %9828, i64* %RAX.i3176, align 8
  %9829 = add i64 %9828, 2
  %9830 = add i64 %9795, 35
  store i64 %9830, i64* %3, align 8
  %9831 = inttoptr i64 %9829 to i16*
  %9832 = load i16, i16* %9831, align 2
  %9833 = sext i16 %9832 to i64
  %9834 = and i64 %9833, 4294967295
  store i64 %9834, i64* %RDI.i732, align 8
  %9835 = add i64 %9795, -354483
  %9836 = add i64 %9795, 40
  %9837 = load i64, i64* %6, align 8
  %9838 = add i64 %9837, -8
  %9839 = inttoptr i64 %9838 to i64*
  store i64 %9836, i64* %9839, align 8
  store i64 %9838, i64* %6, align 8
  store i64 %9835, i64* %3, align 8
  %9840 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %9769)
  %9841 = load i64, i64* %RAX.i3176, align 8
  %9842 = load i64, i64* %3, align 8
  %9843 = shl i64 %9841, 32
  %9844 = ashr i64 %9843, 33
  %9845 = and i64 %9844, 4294967295
  store i64 %9845, i64* %RAX.i3176, align 8
  %9846 = trunc i64 %9844 to i32
  store i8 0, i8* %19, align 1
  %9847 = and i32 %9846, 255
  %9848 = tail call i32 @llvm.ctpop.i32(i32 %9847)
  %9849 = trunc i32 %9848 to i8
  %9850 = and i8 %9849, 1
  %9851 = xor i8 %9850, 1
  store i8 %9851, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9852 = icmp eq i32 %9846, 0
  %9853 = zext i1 %9852 to i8
  store i8 %9853, i8* %34, align 1
  %9854 = lshr i64 %9844, 31
  %9855 = trunc i64 %9854 to i8
  %9856 = and i8 %9855, 1
  store i8 %9856, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 %9853, i8* %DL.i4045, align 1
  %9857 = load i64, i64* %RBP.i, align 8
  %9858 = add i64 %9857, -966
  %9859 = add i64 %9842, 14
  store i64 %9859, i64* %3, align 8
  %9860 = inttoptr i64 %9858 to i8*
  store i8 %9853, i8* %9860, align 1
  %.pre502 = load i64, i64* %3, align 8
  br label %block_.L_4578ea

block_.L_4578ea:                                  ; preds = %block_4578b3, %block_457875, %block_457843, %block_.L_457812
  %9861 = phi i64 [ %9667, %block_.L_457812 ], [ %9721, %block_457843 ], [ %9791, %block_457875 ], [ %.pre502, %block_4578b3 ]
  %MEMORY.77 = phi %struct.Memory* [ %MEMORY.76, %block_.L_457812 ], [ %MEMORY.76, %block_457843 ], [ %9769, %block_457875 ], [ %9840, %block_4578b3 ]
  %9862 = load i64, i64* %RBP.i, align 8
  %9863 = add i64 %9862, -966
  %9864 = add i64 %9861, 6
  store i64 %9864, i64* %3, align 8
  %9865 = inttoptr i64 %9863 to i8*
  %9866 = load i8, i8* %9865, align 1
  store i8 %9866, i8* %AL.i4135, align 1
  %9867 = add i64 %9862, -965
  %9868 = add i64 %9861, 12
  store i64 %9868, i64* %3, align 8
  %9869 = inttoptr i64 %9867 to i8*
  store i8 %9866, i8* %9869, align 1
  %.pre503 = load i64, i64* %3, align 8
  br label %block_.L_4578f6

block_.L_4578f6:                                  ; preds = %block_.L_4578ea, %block_4577d7
  %9870 = phi i64 [ %.pre503, %block_.L_4578ea ], [ %9587, %block_4577d7 ]
  %MEMORY.78 = phi %struct.Memory* [ %MEMORY.77, %block_.L_4578ea ], [ %9563, %block_4577d7 ]
  %9871 = load i64, i64* %RBP.i, align 8
  %9872 = add i64 %9871, -965
  %9873 = add i64 %9870, 6
  store i64 %9873, i64* %3, align 8
  %9874 = inttoptr i64 %9872 to i8*
  %9875 = load i8, i8* %9874, align 1
  %9876 = and i8 %9875, 1
  %9877 = xor i8 %9876, 1
  store i8 0, i8* %19, align 1
  %9878 = zext i8 %9877 to i32
  %9879 = tail call i32 @llvm.ctpop.i32(i32 %9878)
  %9880 = trunc i32 %9879 to i8
  %9881 = xor i8 %9880, 1
  store i8 %9881, i8* %26, align 1
  store i8 %9876, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9882 = zext i8 %9877 to i64
  store i64 %9882, i64* %RCX.i7756, align 8
  store i8 %9877, i8* %AL.i4135, align 1
  %9883 = add i64 %9871, -16
  %9884 = add i64 %9870, 19
  store i64 %9884, i64* %3, align 8
  %9885 = inttoptr i64 %9883 to i64*
  %9886 = load i64, i64* %9885, align 8
  store i64 %9886, i64* %RDX.i7753, align 8
  %9887 = add i64 %9886, 3240
  %9888 = add i64 %9870, 26
  store i64 %9888, i64* %3, align 8
  %9889 = inttoptr i64 %9887 to i64*
  %9890 = load i64, i64* %9889, align 8
  store i64 %9890, i64* %RDX.i7753, align 8
  %9891 = add i64 %9871, -52
  %9892 = add i64 %9870, 30
  store i64 %9892, i64* %3, align 8
  %9893 = inttoptr i64 %9891 to i32*
  %9894 = load i32, i32* %9893, align 4
  %9895 = sext i32 %9894 to i64
  store i64 %9895, i64* %RSI.i766, align 8
  %9896 = shl nsw i64 %9895, 3
  %9897 = add i64 %9896, %9890
  %9898 = add i64 %9870, 34
  store i64 %9898, i64* %3, align 8
  %9899 = inttoptr i64 %9897 to i64*
  %9900 = load i64, i64* %9899, align 8
  store i64 %9900, i64* %RDX.i7753, align 8
  %9901 = add i64 %9871, -56
  %9902 = add i64 %9870, 38
  store i64 %9902, i64* %3, align 8
  %9903 = inttoptr i64 %9901 to i32*
  %9904 = load i32, i32* %9903, align 4
  %9905 = sext i32 %9904 to i64
  store i64 %9905, i64* %RSI.i766, align 8
  %9906 = add i64 %9900, %9905
  %9907 = add i64 %9870, 41
  store i64 %9907, i64* %3, align 8
  %9908 = inttoptr i64 %9906 to i8*
  store i8 %9877, i8* %9908, align 1
  %.pre504 = load i64, i64* %3, align 8
  %.pre505 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  br label %block_.L_45791f

block_.L_45791f:                                  ; preds = %block_.L_457725, %block_.L_4578f6
  %9909 = phi i64 [ %9377, %block_.L_457725 ], [ %.pre505, %block_.L_4578f6 ]
  %9910 = phi i64 [ %9403, %block_.L_457725 ], [ %.pre504, %block_.L_4578f6 ]
  %MEMORY.79 = phi %struct.Memory* [ %MEMORY.59, %block_.L_457725 ], [ %MEMORY.78, %block_.L_4578f6 ]
  store i64 %9909, i64* %RAX.i3176, align 8
  %9911 = add i64 %9909, 71996
  %9912 = add i64 %9910, 15
  store i64 %9912, i64* %3, align 8
  %9913 = inttoptr i64 %9911 to i32*
  %9914 = load i32, i32* %9913, align 4
  store i8 0, i8* %19, align 1
  %9915 = and i32 %9914, 255
  %9916 = tail call i32 @llvm.ctpop.i32(i32 %9915)
  %9917 = trunc i32 %9916 to i8
  %9918 = and i8 %9917, 1
  %9919 = xor i8 %9918, 1
  store i8 %9919, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9920 = icmp eq i32 %9914, 0
  %9921 = zext i1 %9920 to i8
  store i8 %9921, i8* %34, align 1
  %9922 = lshr i32 %9914, 31
  %9923 = trunc i32 %9922 to i8
  store i8 %9923, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v711 = select i1 %9920, i64 21, i64 256
  %9924 = add i64 %9910, %.v711
  store i64 %9924, i64* %3, align 8
  br i1 %9920, label %block_457934, label %block_.L_457a1f

block_457934:                                     ; preds = %block_.L_45791f
  %9925 = load i64, i64* %RBP.i, align 8
  %9926 = add i64 %9925, -32
  %9927 = add i64 %9924, 4
  store i64 %9927, i64* %3, align 8
  %9928 = inttoptr i64 %9926 to i64*
  %9929 = load i64, i64* %9928, align 8
  store i64 %9929, i64* %RAX.i3176, align 8
  %9930 = add i64 %9929, 6520
  %9931 = add i64 %9924, 11
  store i64 %9931, i64* %3, align 8
  %9932 = inttoptr i64 %9930 to i64*
  %9933 = load i64, i64* %9932, align 8
  store i64 %9933, i64* %RAX.i3176, align 8
  %9934 = add i64 %9925, -52
  %9935 = add i64 %9924, 15
  store i64 %9935, i64* %3, align 8
  %9936 = inttoptr i64 %9934 to i32*
  %9937 = load i32, i32* %9936, align 4
  %9938 = sext i32 %9937 to i64
  store i64 %9938, i64* %RCX.i7756, align 8
  %9939 = shl nsw i64 %9938, 3
  %9940 = add i64 %9939, %9933
  %9941 = add i64 %9924, 19
  store i64 %9941, i64* %3, align 8
  %9942 = inttoptr i64 %9940 to i64*
  %9943 = load i64, i64* %9942, align 8
  store i64 %9943, i64* %RAX.i3176, align 8
  %9944 = add i64 %9925, -56
  %9945 = add i64 %9924, 22
  store i64 %9945, i64* %3, align 8
  %9946 = inttoptr i64 %9944 to i32*
  %9947 = load i32, i32* %9946, align 4
  %9948 = shl i32 %9947, 1
  %9949 = icmp slt i32 %9947, 0
  %9950 = icmp slt i32 %9948, 0
  %9951 = xor i1 %9949, %9950
  %9952 = zext i32 %9948 to i64
  store i64 %9952, i64* %RDX.i7753, align 8
  %.lobit216 = lshr i32 %9947, 31
  %9953 = trunc i32 %.lobit216 to i8
  store i8 %9953, i8* %19, align 1
  %9954 = and i32 %9948, 254
  %9955 = tail call i32 @llvm.ctpop.i32(i32 %9954)
  %9956 = trunc i32 %9955 to i8
  %9957 = and i8 %9956, 1
  %9958 = xor i8 %9957, 1
  store i8 %9958, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9959 = icmp eq i32 %9948, 0
  %9960 = zext i1 %9959 to i8
  store i8 %9960, i8* %34, align 1
  %9961 = lshr i32 %9947, 30
  %9962 = trunc i32 %9961 to i8
  %9963 = and i8 %9962, 1
  store i8 %9963, i8* %37, align 1
  %9964 = zext i1 %9951 to i8
  store i8 %9964, i8* %43, align 1
  %9965 = sext i32 %9948 to i64
  store i64 %9965, i64* %RCX.i7756, align 8
  %9966 = add i64 %9943, %9965
  %9967 = add i64 %9924, 31
  store i64 %9967, i64* %3, align 8
  %9968 = inttoptr i64 %9966 to i8*
  %9969 = load i8, i8* %9968, align 1
  store i8 0, i8* %19, align 1
  %9970 = zext i8 %9969 to i32
  %9971 = tail call i32 @llvm.ctpop.i32(i32 %9970)
  %9972 = trunc i32 %9971 to i8
  %9973 = and i8 %9972, 1
  %9974 = xor i8 %9973, 1
  store i8 %9974, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9975 = icmp eq i8 %9969, 0
  %9976 = zext i1 %9975 to i8
  store i8 %9976, i8* %34, align 1
  %9977 = lshr i8 %9969, 7
  store i8 %9977, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v712 = select i1 %9975, i64 37, i64 234
  %9978 = add i64 %9924, %.v712
  store i64 %9978, i64* %3, align 8
  br i1 %9975, label %block_45795a, label %block_.L_457a1f

block_45795a:                                     ; preds = %block_457934
  store i64 2, i64* %RAX.i3176, align 8
  %9979 = add i64 %9925, -16
  %9980 = add i64 %9978, 9
  store i64 %9980, i64* %3, align 8
  %9981 = inttoptr i64 %9979 to i64*
  %9982 = load i64, i64* %9981, align 8
  store i64 %9982, i64* %RCX.i7756, align 8
  %9983 = add i64 %9982, 3232
  %9984 = add i64 %9978, 16
  store i64 %9984, i64* %3, align 8
  %9985 = inttoptr i64 %9983 to i64*
  %9986 = load i64, i64* %9985, align 8
  store i64 %9986, i64* %RCX.i7756, align 8
  %9987 = add i64 %9978, 19
  store i64 %9987, i64* %3, align 8
  %9988 = inttoptr i64 %9986 to i64*
  %9989 = load i64, i64* %9988, align 8
  store i64 %9989, i64* %RCX.i7756, align 8
  %9990 = add i64 %9978, 23
  store i64 %9990, i64* %3, align 8
  %9991 = load i32, i32* %9936, align 4
  %9992 = sext i32 %9991 to i64
  store i64 %9992, i64* %RDX.i7753, align 8
  %9993 = shl nsw i64 %9992, 3
  %9994 = add i64 %9993, %9989
  %9995 = add i64 %9978, 27
  store i64 %9995, i64* %3, align 8
  %9996 = inttoptr i64 %9994 to i64*
  %9997 = load i64, i64* %9996, align 8
  store i64 %9997, i64* %RCX.i7756, align 8
  %9998 = add i64 %9978, 31
  store i64 %9998, i64* %3, align 8
  %9999 = load i32, i32* %9946, align 4
  %10000 = sext i32 %9999 to i64
  store i64 %10000, i64* %RDX.i7753, align 8
  %10001 = shl nsw i64 %10000, 3
  %10002 = add i64 %10001, %9997
  %10003 = add i64 %9978, 35
  store i64 %10003, i64* %3, align 8
  %10004 = inttoptr i64 %10002 to i64*
  %10005 = load i64, i64* %10004, align 8
  store i64 %10005, i64* %RCX.i7756, align 8
  %10006 = add i64 %10005, 2
  %10007 = add i64 %9978, 39
  store i64 %10007, i64* %3, align 8
  %10008 = inttoptr i64 %10006 to i16*
  %10009 = load i16, i16* %10008, align 2
  %10010 = sext i16 %10009 to i64
  %10011 = and i64 %10010, 4294967295
  store i64 %10011, i64* %RSI.i766, align 8
  %10012 = add i64 %9925, -972
  %10013 = add i64 %9978, 45
  store i64 %10013, i64* %3, align 8
  %10014 = inttoptr i64 %10012 to i32*
  store i32 2, i32* %10014, align 4
  %10015 = load i32, i32* %ESI.i7744, align 4
  %10016 = zext i32 %10015 to i64
  %10017 = load i64, i64* %3, align 8
  store i64 %10016, i64* %RAX.i3176, align 8
  %10018 = sext i32 %10015 to i64
  %10019 = lshr i64 %10018, 32
  store i64 %10019, i64* %3136, align 8
  %10020 = load i64, i64* %RBP.i, align 8
  %10021 = add i64 %10020, -972
  %10022 = add i64 %10017, 9
  store i64 %10022, i64* %3, align 8
  %10023 = inttoptr i64 %10021 to i32*
  %10024 = load i32, i32* %10023, align 4
  %10025 = zext i32 %10024 to i64
  store i64 %10025, i64* %RSI.i766, align 8
  %10026 = add i64 %10017, 11
  store i64 %10026, i64* %3, align 8
  %10027 = sext i32 %10024 to i64
  %10028 = shl nuw i64 %10019, 32
  %10029 = or i64 %10028, %10016
  %10030 = sdiv i64 %10029, %10027
  %10031 = shl i64 %10030, 32
  %10032 = ashr exact i64 %10031, 32
  %10033 = icmp eq i64 %10030, %10032
  br i1 %10033, label %10036, label %10034

; <label>:10034:                                  ; preds = %block_45795a
  %10035 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10026, %struct.Memory* %MEMORY.79)
  %.pre506 = load i16, i16* %AX.i3895, align 2
  %.pre507 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit3899

; <label>:10036:                                  ; preds = %block_45795a
  %10037 = srem i64 %10029, %10027
  %10038 = and i64 %10030, 4294967295
  store i64 %10038, i64* %RAX.i3176, align 8
  %10039 = and i64 %10037, 4294967295
  store i64 %10039, i64* %RDX.i7753, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10040 = trunc i64 %10030 to i16
  br label %routine_idivl__esi.exit3899

routine_idivl__esi.exit3899:                      ; preds = %10036, %10034
  %10041 = phi i64 [ %.pre507, %10034 ], [ %10026, %10036 ]
  %10042 = phi i16 [ %.pre506, %10034 ], [ %10040, %10036 ]
  %10043 = phi %struct.Memory* [ %10035, %10034 ], [ %MEMORY.79, %10036 ]
  store i16 %10042, i16* %DI.i3896, align 2
  %10044 = load i64, i64* %RCX.i7756, align 8
  %10045 = add i64 %10044, 2
  %10046 = add i64 %10041, 7
  store i64 %10046, i64* %3, align 8
  %10047 = inttoptr i64 %10045 to i16*
  store i16 %10042, i16* %10047, align 2
  %10048 = load i64, i64* %RBP.i, align 8
  %10049 = add i64 %10048, -16
  %10050 = load i64, i64* %3, align 8
  %10051 = add i64 %10050, 4
  store i64 %10051, i64* %3, align 8
  %10052 = inttoptr i64 %10049 to i64*
  %10053 = load i64, i64* %10052, align 8
  store i64 %10053, i64* %RCX.i7756, align 8
  %10054 = add i64 %10053, 3232
  %10055 = add i64 %10050, 11
  store i64 %10055, i64* %3, align 8
  %10056 = inttoptr i64 %10054 to i64*
  %10057 = load i64, i64* %10056, align 8
  store i64 %10057, i64* %RCX.i7756, align 8
  %10058 = add i64 %10057, 8
  %10059 = add i64 %10050, 15
  store i64 %10059, i64* %3, align 8
  %10060 = inttoptr i64 %10058 to i64*
  %10061 = load i64, i64* %10060, align 8
  store i64 %10061, i64* %RCX.i7756, align 8
  %10062 = add i64 %10048, -52
  %10063 = add i64 %10050, 19
  store i64 %10063, i64* %3, align 8
  %10064 = inttoptr i64 %10062 to i32*
  %10065 = load i32, i32* %10064, align 4
  %10066 = sext i32 %10065 to i64
  store i64 %10066, i64* %R8.i3883, align 8
  %10067 = shl nsw i64 %10066, 3
  %10068 = add i64 %10067, %10061
  %10069 = add i64 %10050, 23
  store i64 %10069, i64* %3, align 8
  %10070 = inttoptr i64 %10068 to i64*
  %10071 = load i64, i64* %10070, align 8
  store i64 %10071, i64* %RCX.i7756, align 8
  %10072 = add i64 %10048, -56
  %10073 = add i64 %10050, 27
  store i64 %10073, i64* %3, align 8
  %10074 = inttoptr i64 %10072 to i32*
  %10075 = load i32, i32* %10074, align 4
  %10076 = sext i32 %10075 to i64
  store i64 %10076, i64* %R8.i3883, align 8
  %10077 = shl nsw i64 %10076, 3
  %10078 = add i64 %10077, %10071
  %10079 = add i64 %10050, 31
  store i64 %10079, i64* %3, align 8
  %10080 = inttoptr i64 %10078 to i64*
  %10081 = load i64, i64* %10080, align 8
  store i64 %10081, i64* %RCX.i7756, align 8
  %10082 = add i64 %10081, 2
  %10083 = add i64 %10050, 35
  store i64 %10083, i64* %3, align 8
  %10084 = inttoptr i64 %10082 to i16*
  %10085 = load i16, i16* %10084, align 2
  %10086 = sext i16 %10085 to i64
  %10087 = and i64 %10086, 4294967295
  store i64 %10087, i64* %RAX.i3176, align 8
  %10088 = sext i16 %10085 to i64
  %10089 = sext i16 %10085 to i64
  %10090 = lshr i64 %10089, 32
  store i64 %10090, i64* %3136, align 8
  %10091 = load i32, i32* %ESI.i7744, align 4
  %10092 = add i64 %10050, 38
  store i64 %10092, i64* %3, align 8
  %10093 = and i64 %10088, 4294967295
  %10094 = sext i32 %10091 to i64
  %10095 = shl nuw i64 %10090, 32
  %10096 = or i64 %10095, %10093
  %10097 = sdiv i64 %10096, %10094
  %10098 = shl i64 %10097, 32
  %10099 = ashr exact i64 %10098, 32
  %10100 = icmp eq i64 %10097, %10099
  br i1 %10100, label %10103, label %10101

; <label>:10101:                                  ; preds = %routine_idivl__esi.exit3899
  %10102 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10092, %struct.Memory* %10043)
  %.pre508 = load i16, i16* %AX.i3895, align 2
  %.pre509 = load i64, i64* %3, align 8
  %.pre510 = load i64, i64* %RCX.i7756, align 8
  br label %routine_idivl__esi.exit3865

; <label>:10103:                                  ; preds = %routine_idivl__esi.exit3899
  %10104 = srem i64 %10096, %10094
  %10105 = and i64 %10097, 4294967295
  store i64 %10105, i64* %RAX.i3176, align 8
  %10106 = and i64 %10104, 4294967295
  store i64 %10106, i64* %RDX.i7753, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10107 = trunc i64 %10097 to i16
  br label %routine_idivl__esi.exit3865

routine_idivl__esi.exit3865:                      ; preds = %10103, %10101
  %10108 = phi i64 [ %.pre510, %10101 ], [ %10081, %10103 ]
  %10109 = phi i64 [ %.pre509, %10101 ], [ %10092, %10103 ]
  %10110 = phi i16 [ %.pre508, %10101 ], [ %10107, %10103 ]
  %10111 = phi %struct.Memory* [ %10102, %10101 ], [ %10043, %10103 ]
  store i16 %10110, i16* %DI.i3896, align 2
  %10112 = add i64 %10108, 2
  %10113 = add i64 %10109, 7
  store i64 %10113, i64* %3, align 8
  %10114 = inttoptr i64 %10112 to i16*
  store i16 %10110, i16* %10114, align 2
  %10115 = load i64, i64* %RBP.i, align 8
  %10116 = add i64 %10115, -16
  %10117 = load i64, i64* %3, align 8
  %10118 = add i64 %10117, 4
  store i64 %10118, i64* %3, align 8
  %10119 = inttoptr i64 %10116 to i64*
  %10120 = load i64, i64* %10119, align 8
  store i64 %10120, i64* %RCX.i7756, align 8
  %10121 = add i64 %10120, 4848
  %10122 = add i64 %10117, 11
  store i64 %10122, i64* %3, align 8
  %10123 = inttoptr i64 %10121 to i64*
  %10124 = load i64, i64* %10123, align 8
  store i64 %10124, i64* %RCX.i7756, align 8
  %10125 = add i64 %10117, 14
  store i64 %10125, i64* %3, align 8
  %10126 = inttoptr i64 %10124 to i64*
  %10127 = load i64, i64* %10126, align 8
  store i64 %10127, i64* %RCX.i7756, align 8
  %10128 = add i64 %10115, -52
  %10129 = add i64 %10117, 18
  store i64 %10129, i64* %3, align 8
  %10130 = inttoptr i64 %10128 to i32*
  %10131 = load i32, i32* %10130, align 4
  %10132 = sext i32 %10131 to i64
  store i64 %10132, i64* %R8.i3883, align 8
  %10133 = shl nsw i64 %10132, 3
  %10134 = add i64 %10133, %10127
  %10135 = add i64 %10117, 22
  store i64 %10135, i64* %3, align 8
  %10136 = inttoptr i64 %10134 to i64*
  %10137 = load i64, i64* %10136, align 8
  store i64 %10137, i64* %RCX.i7756, align 8
  %10138 = add i64 %10115, -56
  %10139 = add i64 %10117, 26
  store i64 %10139, i64* %3, align 8
  %10140 = inttoptr i64 %10138 to i32*
  %10141 = load i32, i32* %10140, align 4
  %10142 = sext i32 %10141 to i64
  store i64 %10142, i64* %R8.i3883, align 8
  %10143 = shl nsw i64 %10142, 3
  %10144 = add i64 %10143, %10137
  %10145 = add i64 %10117, 30
  store i64 %10145, i64* %3, align 8
  %10146 = inttoptr i64 %10144 to i64*
  %10147 = load i64, i64* %10146, align 8
  store i64 %10147, i64* %RCX.i7756, align 8
  %10148 = add i64 %10147, 2
  %10149 = add i64 %10117, 34
  store i64 %10149, i64* %3, align 8
  %10150 = inttoptr i64 %10148 to i16*
  %10151 = load i16, i16* %10150, align 2
  %10152 = sext i16 %10151 to i64
  %10153 = and i64 %10152, 4294967295
  store i64 %10153, i64* %RAX.i3176, align 8
  %10154 = sext i16 %10151 to i64
  %10155 = sext i16 %10151 to i64
  %10156 = lshr i64 %10155, 32
  store i64 %10156, i64* %3136, align 8
  %10157 = load i32, i32* %ESI.i7744, align 4
  %10158 = add i64 %10117, 37
  store i64 %10158, i64* %3, align 8
  %10159 = and i64 %10154, 4294967295
  %10160 = sext i32 %10157 to i64
  %10161 = shl nuw i64 %10156, 32
  %10162 = or i64 %10161, %10159
  %10163 = sdiv i64 %10162, %10160
  %10164 = shl i64 %10163, 32
  %10165 = ashr exact i64 %10164, 32
  %10166 = icmp eq i64 %10163, %10165
  br i1 %10166, label %10169, label %10167

; <label>:10167:                                  ; preds = %routine_idivl__esi.exit3865
  %10168 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10158, %struct.Memory* %10111)
  %.pre511 = load i16, i16* %AX.i3895, align 2
  %.pre512 = load i64, i64* %3, align 8
  %.pre513 = load i64, i64* %RCX.i7756, align 8
  br label %routine_idivl__esi.exit3831

; <label>:10169:                                  ; preds = %routine_idivl__esi.exit3865
  %10170 = srem i64 %10162, %10160
  %10171 = and i64 %10163, 4294967295
  store i64 %10171, i64* %RAX.i3176, align 8
  %10172 = and i64 %10170, 4294967295
  store i64 %10172, i64* %RDX.i7753, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10173 = trunc i64 %10163 to i16
  br label %routine_idivl__esi.exit3831

routine_idivl__esi.exit3831:                      ; preds = %10169, %10167
  %10174 = phi i64 [ %.pre513, %10167 ], [ %10147, %10169 ]
  %10175 = phi i64 [ %.pre512, %10167 ], [ %10158, %10169 ]
  %10176 = phi i16 [ %.pre511, %10167 ], [ %10173, %10169 ]
  %10177 = phi %struct.Memory* [ %10168, %10167 ], [ %10111, %10169 ]
  store i16 %10176, i16* %DI.i3896, align 2
  %10178 = add i64 %10174, 2
  %10179 = add i64 %10175, 7
  store i64 %10179, i64* %3, align 8
  %10180 = inttoptr i64 %10178 to i16*
  store i16 %10176, i16* %10180, align 2
  %10181 = load i64, i64* %RBP.i, align 8
  %10182 = add i64 %10181, -16
  %10183 = load i64, i64* %3, align 8
  %10184 = add i64 %10183, 4
  store i64 %10184, i64* %3, align 8
  %10185 = inttoptr i64 %10182 to i64*
  %10186 = load i64, i64* %10185, align 8
  store i64 %10186, i64* %RCX.i7756, align 8
  %10187 = add i64 %10186, 4848
  %10188 = add i64 %10183, 11
  store i64 %10188, i64* %3, align 8
  %10189 = inttoptr i64 %10187 to i64*
  %10190 = load i64, i64* %10189, align 8
  store i64 %10190, i64* %RCX.i7756, align 8
  %10191 = add i64 %10190, 8
  %10192 = add i64 %10183, 15
  store i64 %10192, i64* %3, align 8
  %10193 = inttoptr i64 %10191 to i64*
  %10194 = load i64, i64* %10193, align 8
  store i64 %10194, i64* %RCX.i7756, align 8
  %10195 = add i64 %10181, -52
  %10196 = add i64 %10183, 19
  store i64 %10196, i64* %3, align 8
  %10197 = inttoptr i64 %10195 to i32*
  %10198 = load i32, i32* %10197, align 4
  %10199 = sext i32 %10198 to i64
  store i64 %10199, i64* %R8.i3883, align 8
  %10200 = shl nsw i64 %10199, 3
  %10201 = add i64 %10200, %10194
  %10202 = add i64 %10183, 23
  store i64 %10202, i64* %3, align 8
  %10203 = inttoptr i64 %10201 to i64*
  %10204 = load i64, i64* %10203, align 8
  store i64 %10204, i64* %RCX.i7756, align 8
  %10205 = add i64 %10181, -56
  %10206 = add i64 %10183, 27
  store i64 %10206, i64* %3, align 8
  %10207 = inttoptr i64 %10205 to i32*
  %10208 = load i32, i32* %10207, align 4
  %10209 = sext i32 %10208 to i64
  store i64 %10209, i64* %R8.i3883, align 8
  %10210 = shl nsw i64 %10209, 3
  %10211 = add i64 %10210, %10204
  %10212 = add i64 %10183, 31
  store i64 %10212, i64* %3, align 8
  %10213 = inttoptr i64 %10211 to i64*
  %10214 = load i64, i64* %10213, align 8
  store i64 %10214, i64* %RCX.i7756, align 8
  %10215 = add i64 %10214, 2
  %10216 = add i64 %10183, 35
  store i64 %10216, i64* %3, align 8
  %10217 = inttoptr i64 %10215 to i16*
  %10218 = load i16, i16* %10217, align 2
  %10219 = sext i16 %10218 to i64
  %10220 = and i64 %10219, 4294967295
  store i64 %10220, i64* %RAX.i3176, align 8
  %10221 = sext i16 %10218 to i64
  %10222 = sext i16 %10218 to i64
  %10223 = lshr i64 %10222, 32
  store i64 %10223, i64* %3136, align 8
  %10224 = load i32, i32* %ESI.i7744, align 4
  %10225 = add i64 %10183, 38
  store i64 %10225, i64* %3, align 8
  %10226 = and i64 %10221, 4294967295
  %10227 = sext i32 %10224 to i64
  %10228 = shl nuw i64 %10223, 32
  %10229 = or i64 %10228, %10226
  %10230 = sdiv i64 %10229, %10227
  %10231 = shl i64 %10230, 32
  %10232 = ashr exact i64 %10231, 32
  %10233 = icmp eq i64 %10230, %10232
  br i1 %10233, label %10236, label %10234

; <label>:10234:                                  ; preds = %routine_idivl__esi.exit3831
  %10235 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10225, %struct.Memory* %10177)
  %.pre514 = load i16, i16* %AX.i3895, align 2
  %.pre515 = load i64, i64* %3, align 8
  %.pre516 = load i64, i64* %RCX.i7756, align 8
  br label %routine_idivl__esi.exit3796

; <label>:10236:                                  ; preds = %routine_idivl__esi.exit3831
  %10237 = srem i64 %10229, %10227
  %10238 = and i64 %10230, 4294967295
  store i64 %10238, i64* %RAX.i3176, align 8
  %10239 = and i64 %10237, 4294967295
  store i64 %10239, i64* %RDX.i7753, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10240 = trunc i64 %10230 to i16
  br label %routine_idivl__esi.exit3796

routine_idivl__esi.exit3796:                      ; preds = %10236, %10234
  %10241 = phi i64 [ %.pre516, %10234 ], [ %10214, %10236 ]
  %10242 = phi i64 [ %.pre515, %10234 ], [ %10225, %10236 ]
  %10243 = phi i16 [ %.pre514, %10234 ], [ %10240, %10236 ]
  %10244 = phi %struct.Memory* [ %10235, %10234 ], [ %10177, %10236 ]
  store i16 %10243, i16* %DI.i3896, align 2
  %10245 = add i64 %10241, 2
  %10246 = add i64 %10242, 7
  store i64 %10246, i64* %3, align 8
  %10247 = inttoptr i64 %10245 to i16*
  store i16 %10243, i16* %10247, align 2
  %.pre517 = load i64, i64* %3, align 8
  br label %block_.L_457a1f

block_.L_457a1f:                                  ; preds = %block_457934, %block_.L_45791f, %routine_idivl__esi.exit3796
  %10248 = phi i64 [ %9924, %block_.L_45791f ], [ %9978, %block_457934 ], [ %.pre517, %routine_idivl__esi.exit3796 ]
  %MEMORY.80 = phi %struct.Memory* [ %MEMORY.79, %block_.L_45791f ], [ %MEMORY.79, %block_457934 ], [ %10244, %routine_idivl__esi.exit3796 ]
  %10249 = add i64 %10248, 5
  store i64 %10249, i64* %3, align 8
  br label %block_.L_457a24

block_.L_457a24:                                  ; preds = %block_.L_457a1f, %block_.L_4569a4
  %storemerge175 = phi i64 [ %5844, %block_.L_4569a4 ], [ %10249, %block_.L_457a1f ]
  %MEMORY.81 = phi %struct.Memory* [ %MEMORY.39, %block_.L_4569a4 ], [ %MEMORY.80, %block_.L_457a1f ]
  %10250 = load i64, i64* %RBP.i, align 8
  %10251 = add i64 %10250, -56
  %10252 = add i64 %storemerge175, 8
  store i64 %10252, i64* %3, align 8
  %10253 = inttoptr i64 %10251 to i32*
  %10254 = load i32, i32* %10253, align 4
  %10255 = add i32 %10254, 1
  %10256 = zext i32 %10255 to i64
  store i64 %10256, i64* %RAX.i3176, align 8
  %10257 = icmp eq i32 %10254, -1
  %10258 = icmp eq i32 %10255, 0
  %10259 = or i1 %10257, %10258
  %10260 = zext i1 %10259 to i8
  store i8 %10260, i8* %19, align 1
  %10261 = and i32 %10255, 255
  %10262 = tail call i32 @llvm.ctpop.i32(i32 %10261)
  %10263 = trunc i32 %10262 to i8
  %10264 = and i8 %10263, 1
  %10265 = xor i8 %10264, 1
  store i8 %10265, i8* %26, align 1
  %10266 = xor i32 %10255, %10254
  %10267 = lshr i32 %10266, 4
  %10268 = trunc i32 %10267 to i8
  %10269 = and i8 %10268, 1
  store i8 %10269, i8* %31, align 1
  %10270 = zext i1 %10258 to i8
  store i8 %10270, i8* %34, align 1
  %10271 = lshr i32 %10255, 31
  %10272 = trunc i32 %10271 to i8
  store i8 %10272, i8* %37, align 1
  %10273 = lshr i32 %10254, 31
  %10274 = xor i32 %10271, %10273
  %10275 = add nuw nsw i32 %10274, %10271
  %10276 = icmp eq i32 %10275, 2
  %10277 = zext i1 %10276 to i8
  store i8 %10277, i8* %43, align 1
  %10278 = add i64 %storemerge175, 14
  store i64 %10278, i64* %3, align 8
  store i32 %10255, i32* %10253, align 4
  %10279 = load i64, i64* %3, align 8
  %10280 = add i64 %10279, -6776
  store i64 %10280, i64* %3, align 8
  br label %block_.L_455fba

block_.L_457a37:                                  ; preds = %routine_idivl__esi.exit7706
  %10281 = load i64, i64* %RBP.i, align 8
  %10282 = add i64 %10281, -52
  %10283 = add i64 %3292, 8
  store i64 %10283, i64* %3, align 8
  %10284 = inttoptr i64 %10282 to i32*
  %10285 = load i32, i32* %10284, align 4
  %10286 = add i32 %10285, 1
  %10287 = zext i32 %10286 to i64
  store i64 %10287, i64* %RAX.i3176, align 8
  %10288 = icmp eq i32 %10285, -1
  %10289 = icmp eq i32 %10286, 0
  %10290 = or i1 %10288, %10289
  %10291 = zext i1 %10290 to i8
  store i8 %10291, i8* %19, align 1
  %10292 = and i32 %10286, 255
  %10293 = tail call i32 @llvm.ctpop.i32(i32 %10292)
  %10294 = trunc i32 %10293 to i8
  %10295 = and i8 %10294, 1
  %10296 = xor i8 %10295, 1
  store i8 %10296, i8* %26, align 1
  %10297 = xor i32 %10286, %10285
  %10298 = lshr i32 %10297, 4
  %10299 = trunc i32 %10298 to i8
  %10300 = and i8 %10299, 1
  store i8 %10300, i8* %31, align 1
  %10301 = zext i1 %10289 to i8
  store i8 %10301, i8* %34, align 1
  %10302 = lshr i32 %10286, 31
  %10303 = trunc i32 %10302 to i8
  store i8 %10303, i8* %37, align 1
  %10304 = lshr i32 %10285, 31
  %10305 = xor i32 %10302, %10304
  %10306 = add nuw nsw i32 %10305, %10302
  %10307 = icmp eq i32 %10306, 2
  %10308 = zext i1 %10307 to i8
  store i8 %10308, i8* %43, align 1
  %10309 = add i64 %3292, 14
  store i64 %10309, i64* %3, align 8
  store i32 %10286, i32* %10284, align 4
  %10310 = load i64, i64* %3, align 8
  %10311 = add i64 %10310, -6845
  store i64 %10311, i64* %3, align 8
  br label %block_.L_455f88

block_.L_457a4a:                                  ; preds = %routine_idivl__esi.exit7737
  %10312 = add i64 %3212, 5
  store i64 %10312, i64* %3, align 8
  br label %block_.L_457a4f

block_.L_457a4f:                                  ; preds = %block_.L_457a4a, %block_455f6c
  %10313 = phi i64 [ %10312, %block_.L_457a4a ], [ %3128, %block_455f6c ]
  %MEMORY.82 = phi %struct.Memory* [ %3184, %block_.L_457a4a ], [ %MEMORY.10, %block_455f6c ]
  %10314 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %10314, i64* %RAX.i3176, align 8
  %10315 = add i64 %10314, 1148
  %10316 = add i64 %10313, 15
  store i64 %10316, i64* %3, align 8
  %10317 = inttoptr i64 %10315 to i32*
  %10318 = load i32, i32* %10317, align 4
  store i8 0, i8* %19, align 1
  %10319 = and i32 %10318, 255
  %10320 = tail call i32 @llvm.ctpop.i32(i32 %10319)
  %10321 = trunc i32 %10320 to i8
  %10322 = and i8 %10321, 1
  %10323 = xor i8 %10322, 1
  store i8 %10323, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10324 = icmp eq i32 %10318, 0
  %10325 = zext i1 %10324 to i8
  store i8 %10325, i8* %34, align 1
  %10326 = lshr i32 %10318, 31
  %10327 = trunc i32 %10326 to i8
  store i8 %10327, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v668 = select i1 %10324, i64 42, i64 21
  %10328 = add i64 %10313, %.v668
  store i64 %10328, i64* %3, align 8
  br i1 %10324, label %block_.L_457a79, label %block_457a64

block_457a64:                                     ; preds = %block_.L_457a4f
  store i64 %10314, i64* %RAX.i3176, align 8
  %10329 = add i64 %10314, 1156
  %10330 = add i64 %10328, 15
  store i64 %10330, i64* %3, align 8
  %10331 = inttoptr i64 %10329 to i32*
  %10332 = load i32, i32* %10331, align 4
  store i8 0, i8* %19, align 1
  %10333 = and i32 %10332, 255
  %10334 = tail call i32 @llvm.ctpop.i32(i32 %10333)
  %10335 = trunc i32 %10334 to i8
  %10336 = and i8 %10335, 1
  %10337 = xor i8 %10336, 1
  store i8 %10337, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10338 = icmp eq i32 %10332, 0
  %10339 = zext i1 %10338 to i8
  store i8 %10339, i8* %34, align 1
  %10340 = lshr i32 %10332, 31
  %10341 = trunc i32 %10340 to i8
  store i8 %10341, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v669 = select i1 %10338, i64 1775, i64 21
  %10342 = add i64 %10328, %.v669
  store i64 %10342, i64* %3, align 8
  br i1 %10338, label %block_.L_458153, label %block_.L_457a79

block_.L_457a79:                                  ; preds = %block_457a64, %block_.L_457a4f
  %10343 = phi i64 [ %10342, %block_457a64 ], [ %10328, %block_.L_457a4f ]
  %10344 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10344, i64* %RAX.i3176, align 8
  %10345 = add i64 %10344, 28
  %10346 = add i64 %10343, 12
  store i64 %10346, i64* %3, align 8
  %10347 = inttoptr i64 %10345 to i32*
  %10348 = load i32, i32* %10347, align 4
  store i8 0, i8* %19, align 1
  %10349 = and i32 %10348, 255
  %10350 = tail call i32 @llvm.ctpop.i32(i32 %10349)
  %10351 = trunc i32 %10350 to i8
  %10352 = and i8 %10351, 1
  %10353 = xor i8 %10352, 1
  store i8 %10353, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10354 = icmp eq i32 %10348, 0
  %10355 = zext i1 %10354 to i8
  store i8 %10355, i8* %34, align 1
  %10356 = lshr i32 %10348, 31
  %10357 = trunc i32 %10356 to i8
  store i8 %10357, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v670 = select i1 %10354, i64 18, i64 1749
  %10358 = add i64 %10343, %.v670
  store i64 %10358, i64* %3, align 8
  br i1 %10354, label %block_457a8b, label %block_.L_45814e

block_457a8b:                                     ; preds = %block_.L_457a79
  %10359 = load i64, i64* %RBP.i, align 8
  %10360 = add i64 %10359, -56
  %10361 = add i64 %10358, 7
  store i64 %10361, i64* %3, align 8
  %10362 = inttoptr i64 %10360 to i32*
  store i32 0, i32* %10362, align 4
  %10363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i3745 = getelementptr inbounds %union.anon, %union.anon* %10363, i64 0, i32 0
  %RDX.i3742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %EAX.i3736 = bitcast %union.anon* %101 to i32*
  %ESI.i3733 = bitcast %union.anon* %50 to i32*
  %10364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %ECX.i3723 = bitcast %union.anon* %10363 to i32*
  %EDI.i3096 = bitcast %union.anon* %44 to i32*
  %R8.i3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %10365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W.i3076 = bitcast %union.anon* %10365 to i16*
  %R10.i3067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %10366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %.pre303 = load i64, i64* %3, align 8
  br label %block_.L_457a92

block_.L_457a92:                                  ; preds = %block_.L_458136, %block_457a8b
  %10367 = phi i64 [ %.pre303, %block_457a8b ], [ %12664, %block_.L_458136 ]
  %MEMORY.84 = phi %struct.Memory* [ %MEMORY.82, %block_457a8b ], [ %10494, %block_.L_458136 ]
  store i64 4, i64* %RAX.i3176, align 8
  %10368 = load i64, i64* %RBP.i, align 8
  %10369 = add i64 %10368, -56
  %10370 = add i64 %10367, 8
  store i64 %10370, i64* %3, align 8
  %10371 = inttoptr i64 %10369 to i32*
  %10372 = load i32, i32* %10371, align 4
  %10373 = zext i32 %10372 to i64
  store i64 %10373, i64* %RCX.i3745, align 8
  %10374 = add i64 %10368, -32
  %10375 = add i64 %10367, 12
  store i64 %10375, i64* %3, align 8
  %10376 = inttoptr i64 %10374 to i64*
  %10377 = load i64, i64* %10376, align 8
  store i64 %10377, i64* %RDX.i3742, align 8
  %10378 = add i64 %10377, 6396
  %10379 = add i64 %10367, 18
  store i64 %10379, i64* %3, align 8
  %10380 = inttoptr i64 %10378 to i32*
  %10381 = load i32, i32* %10380, align 4
  %10382 = zext i32 %10381 to i64
  store i64 %10382, i64* %RSI.i766, align 8
  %10383 = add i64 %10368, -976
  %10384 = add i64 %10367, 24
  store i64 %10384, i64* %3, align 8
  %10385 = inttoptr i64 %10383 to i32*
  store i32 4, i32* %10385, align 4
  %10386 = load i32, i32* %ESI.i3733, align 4
  %10387 = zext i32 %10386 to i64
  %10388 = load i64, i64* %3, align 8
  store i64 %10387, i64* %RAX.i3176, align 8
  %10389 = sext i32 %10386 to i64
  %10390 = lshr i64 %10389, 32
  store i64 %10390, i64* %RDX.i3742, align 8
  %10391 = load i64, i64* %RBP.i, align 8
  %10392 = add i64 %10391, -976
  %10393 = add i64 %10388, 9
  store i64 %10393, i64* %3, align 8
  %10394 = inttoptr i64 %10392 to i32*
  %10395 = load i32, i32* %10394, align 4
  %10396 = zext i32 %10395 to i64
  store i64 %10396, i64* %RSI.i766, align 8
  %10397 = add i64 %10388, 11
  store i64 %10397, i64* %3, align 8
  %10398 = sext i32 %10395 to i64
  %10399 = shl nuw i64 %10390, 32
  %10400 = or i64 %10399, %10387
  %10401 = sdiv i64 %10400, %10398
  %10402 = shl i64 %10401, 32
  %10403 = ashr exact i64 %10402, 32
  %10404 = icmp eq i64 %10401, %10403
  br i1 %10404, label %10407, label %10405

; <label>:10405:                                  ; preds = %block_.L_457a92
  %10406 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10397, %struct.Memory* %MEMORY.84)
  %.pre304 = load i32, i32* %EAX.i3736, align 4
  %.pre305 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit3726

; <label>:10407:                                  ; preds = %block_.L_457a92
  %10408 = srem i64 %10400, %10398
  %10409 = and i64 %10401, 4294967295
  store i64 %10409, i64* %RAX.i3176, align 8
  %10410 = and i64 %10408, 4294967295
  store i64 %10410, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10411 = trunc i64 %10401 to i32
  br label %routine_idivl__esi.exit3726

routine_idivl__esi.exit3726:                      ; preds = %10407, %10405
  %10412 = phi i64 [ %.pre305, %10405 ], [ %10397, %10407 ]
  %10413 = phi i32 [ %.pre304, %10405 ], [ %10411, %10407 ]
  %10414 = phi %struct.Memory* [ %10406, %10405 ], [ %MEMORY.84, %10407 ]
  %10415 = load i32, i32* %ECX.i3723, align 4
  %10416 = sub i32 %10415, %10413
  %10417 = icmp ult i32 %10415, %10413
  %10418 = zext i1 %10417 to i8
  store i8 %10418, i8* %19, align 1
  %10419 = and i32 %10416, 255
  %10420 = tail call i32 @llvm.ctpop.i32(i32 %10419)
  %10421 = trunc i32 %10420 to i8
  %10422 = and i8 %10421, 1
  %10423 = xor i8 %10422, 1
  store i8 %10423, i8* %26, align 1
  %10424 = xor i32 %10413, %10415
  %10425 = xor i32 %10424, %10416
  %10426 = lshr i32 %10425, 4
  %10427 = trunc i32 %10426 to i8
  %10428 = and i8 %10427, 1
  store i8 %10428, i8* %31, align 1
  %10429 = icmp eq i32 %10416, 0
  %10430 = zext i1 %10429 to i8
  store i8 %10430, i8* %34, align 1
  %10431 = lshr i32 %10416, 31
  %10432 = trunc i32 %10431 to i8
  store i8 %10432, i8* %37, align 1
  %10433 = lshr i32 %10415, 31
  %10434 = lshr i32 %10413, 31
  %10435 = xor i32 %10434, %10433
  %10436 = xor i32 %10431, %10433
  %10437 = add nuw nsw i32 %10436, %10435
  %10438 = icmp eq i32 %10437, 2
  %10439 = zext i1 %10438 to i8
  store i8 %10439, i8* %43, align 1
  %10440 = icmp ne i8 %10432, 0
  %10441 = xor i1 %10440, %10438
  %.v703 = select i1 %10441, i64 8, i64 1684
  %10442 = add i64 %10412, %.v703
  store i64 %10442, i64* %3, align 8
  br i1 %10441, label %block_457abd, label %block_.L_458149

block_457abd:                                     ; preds = %routine_idivl__esi.exit3726
  %10443 = load i64, i64* %RBP.i, align 8
  %10444 = add i64 %10443, -52
  %10445 = add i64 %10442, 7
  store i64 %10445, i64* %3, align 8
  %10446 = inttoptr i64 %10444 to i32*
  store i32 0, i32* %10446, align 4
  %.pre306 = load i64, i64* %3, align 8
  br label %block_.L_457ac4

block_.L_457ac4:                                  ; preds = %block_.L_458123, %block_457abd
  %10447 = phi i64 [ %.pre306, %block_457abd ], [ %12634, %block_.L_458123 ]
  %MEMORY.85 = phi %struct.Memory* [ %10414, %block_457abd ], [ %MEMORY.87, %block_.L_458123 ]
  store i64 4, i64* %RAX.i3176, align 8
  %10448 = load i64, i64* %RBP.i, align 8
  %10449 = add i64 %10448, -52
  %10450 = add i64 %10447, 8
  store i64 %10450, i64* %3, align 8
  %10451 = inttoptr i64 %10449 to i32*
  %10452 = load i32, i32* %10451, align 4
  %10453 = zext i32 %10452 to i64
  store i64 %10453, i64* %RCX.i3745, align 8
  %10454 = add i64 %10448, -32
  %10455 = add i64 %10447, 12
  store i64 %10455, i64* %3, align 8
  %10456 = inttoptr i64 %10454 to i64*
  %10457 = load i64, i64* %10456, align 8
  store i64 %10457, i64* %RDX.i3742, align 8
  %10458 = add i64 %10457, 6392
  %10459 = add i64 %10447, 18
  store i64 %10459, i64* %3, align 8
  %10460 = inttoptr i64 %10458 to i32*
  %10461 = load i32, i32* %10460, align 4
  %10462 = zext i32 %10461 to i64
  store i64 %10462, i64* %RSI.i766, align 8
  %10463 = add i64 %10448, -980
  %10464 = add i64 %10447, 24
  store i64 %10464, i64* %3, align 8
  %10465 = inttoptr i64 %10463 to i32*
  store i32 4, i32* %10465, align 4
  %10466 = load i32, i32* %ESI.i3733, align 4
  %10467 = zext i32 %10466 to i64
  %10468 = load i64, i64* %3, align 8
  store i64 %10467, i64* %RAX.i3176, align 8
  %10469 = sext i32 %10466 to i64
  %10470 = lshr i64 %10469, 32
  store i64 %10470, i64* %RDX.i3742, align 8
  %10471 = load i64, i64* %RBP.i, align 8
  %10472 = add i64 %10471, -980
  %10473 = add i64 %10468, 9
  store i64 %10473, i64* %3, align 8
  %10474 = inttoptr i64 %10472 to i32*
  %10475 = load i32, i32* %10474, align 4
  %10476 = zext i32 %10475 to i64
  store i64 %10476, i64* %RSI.i766, align 8
  %10477 = add i64 %10468, 11
  store i64 %10477, i64* %3, align 8
  %10478 = sext i32 %10475 to i64
  %10479 = shl nuw i64 %10470, 32
  %10480 = or i64 %10479, %10467
  %10481 = sdiv i64 %10480, %10478
  %10482 = shl i64 %10481, 32
  %10483 = ashr exact i64 %10482, 32
  %10484 = icmp eq i64 %10481, %10483
  br i1 %10484, label %10487, label %10485

; <label>:10485:                                  ; preds = %block_.L_457ac4
  %10486 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10477, %struct.Memory* %MEMORY.85)
  %.pre307 = load i32, i32* %EAX.i3736, align 4
  %.pre308 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit3694

; <label>:10487:                                  ; preds = %block_.L_457ac4
  %10488 = srem i64 %10480, %10478
  %10489 = and i64 %10481, 4294967295
  store i64 %10489, i64* %RAX.i3176, align 8
  %10490 = and i64 %10488, 4294967295
  store i64 %10490, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10491 = trunc i64 %10481 to i32
  br label %routine_idivl__esi.exit3694

routine_idivl__esi.exit3694:                      ; preds = %10487, %10485
  %10492 = phi i64 [ %.pre308, %10485 ], [ %10477, %10487 ]
  %10493 = phi i32 [ %.pre307, %10485 ], [ %10491, %10487 ]
  %10494 = phi %struct.Memory* [ %10486, %10485 ], [ %MEMORY.85, %10487 ]
  %10495 = load i32, i32* %ECX.i3723, align 4
  %10496 = sub i32 %10495, %10493
  %10497 = icmp ult i32 %10495, %10493
  %10498 = zext i1 %10497 to i8
  store i8 %10498, i8* %19, align 1
  %10499 = and i32 %10496, 255
  %10500 = tail call i32 @llvm.ctpop.i32(i32 %10499)
  %10501 = trunc i32 %10500 to i8
  %10502 = and i8 %10501, 1
  %10503 = xor i8 %10502, 1
  store i8 %10503, i8* %26, align 1
  %10504 = xor i32 %10493, %10495
  %10505 = xor i32 %10504, %10496
  %10506 = lshr i32 %10505, 4
  %10507 = trunc i32 %10506 to i8
  %10508 = and i8 %10507, 1
  store i8 %10508, i8* %31, align 1
  %10509 = icmp eq i32 %10496, 0
  %10510 = zext i1 %10509 to i8
  store i8 %10510, i8* %34, align 1
  %10511 = lshr i32 %10496, 31
  %10512 = trunc i32 %10511 to i8
  store i8 %10512, i8* %37, align 1
  %10513 = lshr i32 %10495, 31
  %10514 = lshr i32 %10493, 31
  %10515 = xor i32 %10514, %10513
  %10516 = xor i32 %10511, %10513
  %10517 = add nuw nsw i32 %10516, %10515
  %10518 = icmp eq i32 %10517, 2
  %10519 = zext i1 %10518 to i8
  store i8 %10519, i8* %43, align 1
  %10520 = icmp ne i8 %10512, 0
  %10521 = xor i1 %10520, %10518
  %.v704 = select i1 %10521, i64 8, i64 1615
  %10522 = add i64 %10492, %.v704
  store i64 %10522, i64* %3, align 8
  %10523 = load i64, i64* %RBP.i, align 8
  br i1 %10521, label %block_457aef, label %block_.L_458136

block_457aef:                                     ; preds = %routine_idivl__esi.exit3694
  %10524 = add i64 %10523, -32
  %10525 = add i64 %10522, 4
  store i64 %10525, i64* %3, align 8
  %10526 = inttoptr i64 %10524 to i64*
  %10527 = load i64, i64* %10526, align 8
  store i64 %10527, i64* %RAX.i3176, align 8
  %10528 = add i64 %10527, 6520
  %10529 = add i64 %10522, 11
  store i64 %10529, i64* %3, align 8
  %10530 = inttoptr i64 %10528 to i64*
  %10531 = load i64, i64* %10530, align 8
  store i64 %10531, i64* %RAX.i3176, align 8
  %10532 = add i64 %10523, -52
  %10533 = add i64 %10522, 15
  store i64 %10533, i64* %3, align 8
  %10534 = inttoptr i64 %10532 to i32*
  %10535 = load i32, i32* %10534, align 4
  %10536 = sext i32 %10535 to i64
  store i64 %10536, i64* %RCX.i3745, align 8
  %10537 = shl nsw i64 %10536, 3
  %10538 = add i64 %10537, %10531
  %10539 = add i64 %10522, 19
  store i64 %10539, i64* %3, align 8
  %10540 = inttoptr i64 %10538 to i64*
  %10541 = load i64, i64* %10540, align 8
  store i64 %10541, i64* %RAX.i3176, align 8
  %10542 = add i64 %10523, -56
  %10543 = add i64 %10522, 23
  store i64 %10543, i64* %3, align 8
  %10544 = inttoptr i64 %10542 to i32*
  %10545 = load i32, i32* %10544, align 4
  %10546 = sext i32 %10545 to i64
  store i64 %10546, i64* %RCX.i3745, align 8
  %10547 = add i64 %10541, %10546
  %10548 = add i64 %10522, 27
  store i64 %10548, i64* %3, align 8
  %10549 = inttoptr i64 %10547 to i8*
  %10550 = load i8, i8* %10549, align 1
  store i8 0, i8* %19, align 1
  %10551 = zext i8 %10550 to i32
  %10552 = tail call i32 @llvm.ctpop.i32(i32 %10551)
  %10553 = trunc i32 %10552 to i8
  %10554 = and i8 %10553, 1
  %10555 = xor i8 %10554, 1
  store i8 %10555, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10556 = icmp eq i8 %10550, 0
  %10557 = zext i1 %10556 to i8
  store i8 %10557, i8* %34, align 1
  %10558 = lshr i8 %10550, 7
  store i8 %10558, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v705 = select i1 %10556, i64 1588, i64 33
  %10559 = add i64 %10522, %.v705
  store i64 %10559, i64* %3, align 8
  br i1 %10556, label %block_.L_458123, label %block_457b10

block_457b10:                                     ; preds = %block_457aef
  %10560 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %10560, i64* %RAX.i3176, align 8
  %10561 = add i64 %10560, 4
  %10562 = add i64 %10559, 11
  store i64 %10562, i64* %3, align 8
  %10563 = inttoptr i64 %10561 to i32*
  %10564 = load i32, i32* %10563, align 4
  %10565 = zext i32 %10564 to i64
  store i64 %10565, i64* %RCX.i3745, align 8
  %10566 = add i64 %10559, 15
  store i64 %10566, i64* %3, align 8
  %10567 = load i64, i64* %10526, align 8
  store i64 %10567, i64* %RAX.i3176, align 8
  %10568 = add i64 %10567, 6536
  %10569 = add i64 %10559, 22
  store i64 %10569, i64* %3, align 8
  %10570 = inttoptr i64 %10568 to i64*
  %10571 = load i64, i64* %10570, align 8
  store i64 %10571, i64* %RAX.i3176, align 8
  %10572 = add i64 %10571, 4
  %10573 = add i64 %10559, 25
  store i64 %10573, i64* %3, align 8
  %10574 = inttoptr i64 %10572 to i32*
  %10575 = load i32, i32* %10574, align 4
  %10576 = sub i32 %10564, %10575
  %10577 = zext i32 %10576 to i64
  store i64 %10577, i64* %RCX.i3745, align 8
  %10578 = icmp ult i32 %10564, %10575
  %10579 = zext i1 %10578 to i8
  store i8 %10579, i8* %19, align 1
  %10580 = and i32 %10576, 255
  %10581 = tail call i32 @llvm.ctpop.i32(i32 %10580)
  %10582 = trunc i32 %10581 to i8
  %10583 = and i8 %10582, 1
  %10584 = xor i8 %10583, 1
  store i8 %10584, i8* %26, align 1
  %10585 = xor i32 %10575, %10564
  %10586 = xor i32 %10585, %10576
  %10587 = lshr i32 %10586, 4
  %10588 = trunc i32 %10587 to i8
  %10589 = and i8 %10588, 1
  store i8 %10589, i8* %31, align 1
  %10590 = icmp eq i32 %10576, 0
  %10591 = zext i1 %10590 to i8
  store i8 %10591, i8* %34, align 1
  %10592 = lshr i32 %10576, 31
  %10593 = trunc i32 %10592 to i8
  store i8 %10593, i8* %37, align 1
  %10594 = lshr i32 %10564, 31
  %10595 = lshr i32 %10575, 31
  %10596 = xor i32 %10595, %10594
  %10597 = xor i32 %10592, %10594
  %10598 = add nuw nsw i32 %10597, %10596
  %10599 = icmp eq i32 %10598, 2
  %10600 = zext i1 %10599 to i8
  store i8 %10600, i8* %43, align 1
  store i64 %10577, i64* %RDI.i732, align 8
  %10601 = add i64 %10559, -355088
  %10602 = add i64 %10559, 32
  %10603 = load i64, i64* %6, align 8
  %10604 = add i64 %10603, -8
  %10605 = inttoptr i64 %10604 to i64*
  store i64 %10602, i64* %10605, align 8
  store i64 %10604, i64* %6, align 8
  store i64 %10601, i64* %3, align 8
  %10606 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %10494)
  %10607 = load i64, i64* %3, align 8
  %10608 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %10608, i64* %RDX.i3742, align 8
  %10609 = add i64 %10608, 4
  %10610 = add i64 %10607, 11
  store i64 %10610, i64* %3, align 8
  %10611 = inttoptr i64 %10609 to i32*
  %10612 = load i32, i32* %10611, align 4
  %10613 = zext i32 %10612 to i64
  store i64 %10613, i64* %RCX.i3745, align 8
  %10614 = load i64, i64* %RBP.i, align 8
  %10615 = add i64 %10614, -32
  %10616 = add i64 %10607, 15
  store i64 %10616, i64* %3, align 8
  %10617 = inttoptr i64 %10615 to i64*
  %10618 = load i64, i64* %10617, align 8
  store i64 %10618, i64* %RDX.i3742, align 8
  %10619 = add i64 %10618, 6528
  %10620 = add i64 %10607, 22
  store i64 %10620, i64* %3, align 8
  %10621 = inttoptr i64 %10619 to i64*
  %10622 = load i64, i64* %10621, align 8
  store i64 %10622, i64* %RDX.i3742, align 8
  %10623 = add i64 %10622, 4
  %10624 = add i64 %10607, 25
  store i64 %10624, i64* %3, align 8
  %10625 = inttoptr i64 %10623 to i32*
  %10626 = load i32, i32* %10625, align 4
  %10627 = sub i32 %10612, %10626
  %10628 = zext i32 %10627 to i64
  store i64 %10628, i64* %RCX.i3745, align 8
  %10629 = icmp ult i32 %10612, %10626
  %10630 = zext i1 %10629 to i8
  store i8 %10630, i8* %19, align 1
  %10631 = and i32 %10627, 255
  %10632 = tail call i32 @llvm.ctpop.i32(i32 %10631)
  %10633 = trunc i32 %10632 to i8
  %10634 = and i8 %10633, 1
  %10635 = xor i8 %10634, 1
  store i8 %10635, i8* %26, align 1
  %10636 = xor i32 %10626, %10612
  %10637 = xor i32 %10636, %10627
  %10638 = lshr i32 %10637, 4
  %10639 = trunc i32 %10638 to i8
  %10640 = and i8 %10639, 1
  store i8 %10640, i8* %31, align 1
  %10641 = icmp eq i32 %10627, 0
  %10642 = zext i1 %10641 to i8
  store i8 %10642, i8* %34, align 1
  %10643 = lshr i32 %10627, 31
  %10644 = trunc i32 %10643 to i8
  store i8 %10644, i8* %37, align 1
  %10645 = lshr i32 %10612, 31
  %10646 = lshr i32 %10626, 31
  %10647 = xor i32 %10646, %10645
  %10648 = xor i32 %10643, %10645
  %10649 = add nuw nsw i32 %10648, %10647
  %10650 = icmp eq i32 %10649, 2
  %10651 = zext i1 %10650 to i8
  store i8 %10651, i8* %43, align 1
  store i64 %10628, i64* %RDI.i732, align 8
  %10652 = add i64 %10614, -984
  %10653 = load i32, i32* %EAX.i3736, align 4
  %10654 = add i64 %10607, 33
  store i64 %10654, i64* %3, align 8
  %10655 = inttoptr i64 %10652 to i32*
  store i32 %10653, i32* %10655, align 4
  %10656 = load i64, i64* %3, align 8
  %10657 = add i64 %10656, -355153
  %10658 = add i64 %10656, 5
  %10659 = load i64, i64* %6, align 8
  %10660 = add i64 %10659, -8
  %10661 = inttoptr i64 %10660 to i64*
  store i64 %10658, i64* %10661, align 8
  store i64 %10660, i64* %6, align 8
  store i64 %10657, i64* %3, align 8
  %10662 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %10606)
  %10663 = load i64, i64* %RBP.i, align 8
  %10664 = add i64 %10663, -984
  %10665 = load i64, i64* %3, align 8
  %10666 = add i64 %10665, 6
  store i64 %10666, i64* %3, align 8
  %10667 = inttoptr i64 %10664 to i32*
  %10668 = load i32, i32* %10667, align 4
  %10669 = load i32, i32* %EAX.i3736, align 4
  %10670 = sub i32 %10668, %10669
  %10671 = icmp ult i32 %10668, %10669
  %10672 = zext i1 %10671 to i8
  store i8 %10672, i8* %19, align 1
  %10673 = and i32 %10670, 255
  %10674 = tail call i32 @llvm.ctpop.i32(i32 %10673)
  %10675 = trunc i32 %10674 to i8
  %10676 = and i8 %10675, 1
  %10677 = xor i8 %10676, 1
  store i8 %10677, i8* %26, align 1
  %10678 = xor i32 %10669, %10668
  %10679 = xor i32 %10678, %10670
  %10680 = lshr i32 %10679, 4
  %10681 = trunc i32 %10680 to i8
  %10682 = and i8 %10681, 1
  store i8 %10682, i8* %31, align 1
  %10683 = icmp eq i32 %10670, 0
  %10684 = zext i1 %10683 to i8
  store i8 %10684, i8* %34, align 1
  %10685 = lshr i32 %10670, 31
  %10686 = trunc i32 %10685 to i8
  store i8 %10686, i8* %37, align 1
  %10687 = lshr i32 %10668, 31
  %10688 = lshr i32 %10669, 31
  %10689 = xor i32 %10688, %10687
  %10690 = xor i32 %10685, %10687
  %10691 = add nuw nsw i32 %10690, %10689
  %10692 = icmp eq i32 %10691, 2
  %10693 = zext i1 %10692 to i8
  store i8 %10693, i8* %43, align 1
  %10694 = icmp ne i8 %10686, 0
  %10695 = xor i1 %10694, %10692
  %10696 = or i1 %10683, %10695
  %.v706 = select i1 %10696, i64 746, i64 14
  %10697 = add i64 %10665, %.v706
  store i64 8, i64* %RAX.i3176, align 8
  store i64 2, i64* %RCX.i3745, align 8
  %10698 = add i64 %10663, -32
  %10699 = add i64 %10697, 14
  store i64 %10699, i64* %3, align 8
  %10700 = inttoptr i64 %10698 to i64*
  %10701 = load i64, i64* %10700, align 8
  store i64 %10701, i64* %RDX.i3742, align 8
  br i1 %10696, label %block_.L_457e40, label %block_457b64

block_457b64:                                     ; preds = %block_457b10
  %10702 = add i64 %10701, 6528
  %10703 = add i64 %10697, 21
  store i64 %10703, i64* %3, align 8
  %10704 = inttoptr i64 %10702 to i64*
  %10705 = load i64, i64* %10704, align 8
  store i64 %10705, i64* %RDX.i3742, align 8
  %10706 = add i64 %10705, 6504
  %10707 = add i64 %10697, 28
  store i64 %10707, i64* %3, align 8
  %10708 = inttoptr i64 %10706 to i64*
  %10709 = load i64, i64* %10708, align 8
  store i64 %10709, i64* %RDX.i3742, align 8
  %10710 = add i64 %10697, 31
  store i64 %10710, i64* %3, align 8
  %10711 = inttoptr i64 %10709 to i64*
  %10712 = load i64, i64* %10711, align 8
  store i64 %10712, i64* %RDX.i3742, align 8
  %10713 = add i64 %10663, -52
  %10714 = add i64 %10697, 35
  store i64 %10714, i64* %3, align 8
  %10715 = inttoptr i64 %10713 to i32*
  %10716 = load i32, i32* %10715, align 4
  %10717 = sext i32 %10716 to i64
  store i64 %10717, i64* %RSI.i766, align 8
  %10718 = shl nsw i64 %10717, 3
  %10719 = add i64 %10718, %10712
  %10720 = add i64 %10697, 39
  store i64 %10720, i64* %3, align 8
  %10721 = inttoptr i64 %10719 to i64*
  %10722 = load i64, i64* %10721, align 8
  store i64 %10722, i64* %RDX.i3742, align 8
  %10723 = add i64 %10663, -56
  %10724 = add i64 %10697, 42
  store i64 %10724, i64* %3, align 8
  %10725 = inttoptr i64 %10723 to i32*
  %10726 = load i32, i32* %10725, align 4
  %10727 = zext i32 %10726 to i64
  store i64 %10727, i64* %RDI.i732, align 8
  %10728 = add i64 %10663, -988
  %10729 = add i64 %10697, 48
  store i64 %10729, i64* %3, align 8
  %10730 = inttoptr i64 %10728 to i32*
  store i32 8, i32* %10730, align 4
  %10731 = load i32, i32* %EDI.i3096, align 4
  %10732 = zext i32 %10731 to i64
  %10733 = load i64, i64* %3, align 8
  store i64 %10732, i64* %RAX.i3176, align 8
  %10734 = load i64, i64* %RBP.i, align 8
  %10735 = add i64 %10734, -1000
  %10736 = load i64, i64* %RDX.i3742, align 8
  %10737 = add i64 %10733, 9
  store i64 %10737, i64* %3, align 8
  %10738 = inttoptr i64 %10735 to i64*
  store i64 %10736, i64* %10738, align 8
  %10739 = load i64, i64* %3, align 8
  %10740 = load i32, i32* %EAX.i3736, align 8
  %10741 = sext i32 %10740 to i64
  %10742 = lshr i64 %10741, 32
  store i64 %10742, i64* %RDX.i3742, align 8
  %10743 = load i32, i32* %ECX.i3723, align 4
  %10744 = add i64 %10739, 3
  store i64 %10744, i64* %3, align 8
  %10745 = zext i32 %10740 to i64
  %10746 = sext i32 %10743 to i64
  %10747 = shl nuw i64 %10742, 32
  %10748 = or i64 %10747, %10745
  %10749 = sdiv i64 %10748, %10746
  %10750 = shl i64 %10749, 32
  %10751 = ashr exact i64 %10750, 32
  %10752 = icmp eq i64 %10749, %10751
  br i1 %10752, label %10755, label %10753

; <label>:10753:                                  ; preds = %block_457b64
  %10754 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10744, %struct.Memory* %10662)
  %.pre309 = load i32, i32* %EAX.i3736, align 4
  %.pre310 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3588

; <label>:10755:                                  ; preds = %block_457b64
  %10756 = srem i64 %10748, %10746
  %10757 = and i64 %10749, 4294967295
  store i64 %10757, i64* %RAX.i3176, align 8
  %10758 = and i64 %10756, 4294967295
  store i64 %10758, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10759 = trunc i64 %10749 to i32
  br label %routine_idivl__ecx.exit3588

routine_idivl__ecx.exit3588:                      ; preds = %10755, %10753
  %10760 = phi i64 [ %.pre310, %10753 ], [ %10744, %10755 ]
  %10761 = phi i32 [ %.pre309, %10753 ], [ %10759, %10755 ]
  %10762 = phi %struct.Memory* [ %10754, %10753 ], [ %10662, %10755 ]
  %10763 = sext i32 %10761 to i64
  store i64 %10763, i64* %RSI.i766, align 8
  %10764 = load i64, i64* %RBP.i, align 8
  %10765 = add i64 %10764, -1000
  %10766 = add i64 %10760, 10
  store i64 %10766, i64* %3, align 8
  %10767 = inttoptr i64 %10765 to i64*
  %10768 = load i64, i64* %10767, align 8
  store i64 %10768, i64* %R8.i3083, align 8
  %10769 = shl nsw i64 %10763, 3
  %10770 = add i64 %10769, %10768
  %10771 = add i64 %10760, 14
  store i64 %10771, i64* %3, align 8
  %10772 = inttoptr i64 %10770 to i64*
  %10773 = load i64, i64* %10772, align 8
  store i64 %10773, i64* %RSI.i766, align 8
  %10774 = add i64 %10760, 18
  store i64 %10774, i64* %3, align 8
  %10775 = inttoptr i64 %10773 to i16*
  %10776 = load i16, i16* %10775, align 2
  store i16 %10776, i16* %R9W.i3076, align 2
  %10777 = add i64 %10764, -16
  %10778 = add i64 %10760, 22
  store i64 %10778, i64* %3, align 8
  %10779 = inttoptr i64 %10777 to i64*
  %10780 = load i64, i64* %10779, align 8
  store i64 %10780, i64* %RSI.i766, align 8
  %10781 = add i64 %10780, 1616
  %10782 = add i64 %10760, 29
  store i64 %10782, i64* %3, align 8
  %10783 = inttoptr i64 %10781 to i64*
  %10784 = load i64, i64* %10783, align 8
  store i64 %10784, i64* %RSI.i766, align 8
  %10785 = add i64 %10760, 32
  store i64 %10785, i64* %3, align 8
  %10786 = inttoptr i64 %10784 to i64*
  %10787 = load i64, i64* %10786, align 8
  store i64 %10787, i64* %RSI.i766, align 8
  %10788 = add i64 %10764, -52
  %10789 = add i64 %10760, 36
  store i64 %10789, i64* %3, align 8
  %10790 = inttoptr i64 %10788 to i32*
  %10791 = load i32, i32* %10790, align 4
  %10792 = sext i32 %10791 to i64
  store i64 %10792, i64* %R10.i3067, align 8
  %10793 = shl nsw i64 %10792, 3
  %10794 = add i64 %10793, %10787
  %10795 = add i64 %10760, 40
  store i64 %10795, i64* %3, align 8
  %10796 = inttoptr i64 %10794 to i64*
  %10797 = load i64, i64* %10796, align 8
  store i64 %10797, i64* %RSI.i766, align 8
  %10798 = add i64 %10764, -56
  %10799 = add i64 %10760, 44
  store i64 %10799, i64* %3, align 8
  %10800 = inttoptr i64 %10798 to i32*
  %10801 = load i32, i32* %10800, align 4
  %10802 = sext i32 %10801 to i64
  store i64 %10802, i64* %R10.i3067, align 8
  %10803 = shl nsw i64 %10802, 3
  %10804 = add i64 %10803, %10797
  %10805 = add i64 %10760, 48
  store i64 %10805, i64* %3, align 8
  %10806 = inttoptr i64 %10804 to i64*
  %10807 = load i64, i64* %10806, align 8
  store i64 %10807, i64* %RSI.i766, align 8
  %10808 = add i64 %10760, 52
  store i64 %10808, i64* %3, align 8
  %10809 = inttoptr i64 %10807 to i16*
  store i16 %10776, i16* %10809, align 2
  %10810 = load i64, i64* %RBP.i, align 8
  %10811 = add i64 %10810, -32
  %10812 = load i64, i64* %3, align 8
  %10813 = add i64 %10812, 4
  store i64 %10813, i64* %3, align 8
  %10814 = inttoptr i64 %10811 to i64*
  %10815 = load i64, i64* %10814, align 8
  store i64 %10815, i64* %RSI.i766, align 8
  %10816 = add i64 %10815, 6528
  %10817 = add i64 %10812, 11
  store i64 %10817, i64* %3, align 8
  %10818 = inttoptr i64 %10816 to i64*
  %10819 = load i64, i64* %10818, align 8
  store i64 %10819, i64* %RSI.i766, align 8
  %10820 = add i64 %10819, 6504
  %10821 = add i64 %10812, 18
  store i64 %10821, i64* %3, align 8
  %10822 = inttoptr i64 %10820 to i64*
  %10823 = load i64, i64* %10822, align 8
  store i64 %10823, i64* %RSI.i766, align 8
  %10824 = add i64 %10812, 21
  store i64 %10824, i64* %3, align 8
  %10825 = inttoptr i64 %10823 to i64*
  %10826 = load i64, i64* %10825, align 8
  store i64 %10826, i64* %RSI.i766, align 8
  %10827 = add i64 %10810, -52
  %10828 = add i64 %10812, 25
  store i64 %10828, i64* %3, align 8
  %10829 = inttoptr i64 %10827 to i32*
  %10830 = load i32, i32* %10829, align 4
  %10831 = sext i32 %10830 to i64
  store i64 %10831, i64* %R10.i3067, align 8
  %10832 = shl nsw i64 %10831, 3
  %10833 = add i64 %10832, %10826
  %10834 = add i64 %10812, 29
  store i64 %10834, i64* %3, align 8
  %10835 = inttoptr i64 %10833 to i64*
  %10836 = load i64, i64* %10835, align 8
  store i64 %10836, i64* %RSI.i766, align 8
  %10837 = add i64 %10810, -56
  %10838 = add i64 %10812, 32
  store i64 %10838, i64* %3, align 8
  %10839 = inttoptr i64 %10837 to i32*
  %10840 = load i32, i32* %10839, align 4
  %10841 = zext i32 %10840 to i64
  store i64 %10841, i64* %RAX.i3176, align 8
  %10842 = sext i32 %10840 to i64
  %10843 = lshr i64 %10842, 32
  store i64 %10843, i64* %RDX.i3742, align 8
  %10844 = load i32, i32* %ECX.i3723, align 4
  %10845 = add i64 %10812, 35
  store i64 %10845, i64* %3, align 8
  %10846 = sext i32 %10844 to i64
  %10847 = shl nuw i64 %10843, 32
  %10848 = or i64 %10847, %10841
  %10849 = sdiv i64 %10848, %10846
  %10850 = shl i64 %10849, 32
  %10851 = ashr exact i64 %10850, 32
  %10852 = icmp eq i64 %10849, %10851
  br i1 %10852, label %10855, label %10853

; <label>:10853:                                  ; preds = %routine_idivl__ecx.exit3588
  %10854 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10845, %struct.Memory* %10762)
  %.pre311 = load i32, i32* %EAX.i3736, align 4
  %.pre312 = load i64, i64* %3, align 8
  %.pre313 = load i64, i64* %RSI.i766, align 8
  %.pre314 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3529

; <label>:10855:                                  ; preds = %routine_idivl__ecx.exit3588
  %10856 = srem i64 %10848, %10846
  %10857 = and i64 %10849, 4294967295
  store i64 %10857, i64* %RAX.i3176, align 8
  %10858 = and i64 %10856, 4294967295
  store i64 %10858, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10859 = trunc i64 %10849 to i32
  br label %routine_idivl__ecx.exit3529

routine_idivl__ecx.exit3529:                      ; preds = %10855, %10853
  %10860 = phi i64 [ %.pre314, %10853 ], [ %10810, %10855 ]
  %10861 = phi i64 [ %.pre313, %10853 ], [ %10836, %10855 ]
  %10862 = phi i64 [ %.pre312, %10853 ], [ %10845, %10855 ]
  %10863 = phi i32 [ %.pre311, %10853 ], [ %10859, %10855 ]
  %10864 = phi %struct.Memory* [ %10854, %10853 ], [ %10762, %10855 ]
  %10865 = sext i32 %10863 to i64
  store i64 %10865, i64* %R10.i3067, align 8
  %10866 = shl nsw i64 %10865, 3
  %10867 = add i64 %10861, %10866
  %10868 = add i64 %10862, 7
  store i64 %10868, i64* %3, align 8
  %10869 = inttoptr i64 %10867 to i64*
  %10870 = load i64, i64* %10869, align 8
  store i64 %10870, i64* %RSI.i766, align 8
  %10871 = add i64 %10870, 2
  %10872 = add i64 %10862, 12
  store i64 %10872, i64* %3, align 8
  %10873 = inttoptr i64 %10871 to i16*
  %10874 = load i16, i16* %10873, align 2
  store i16 %10874, i16* %R9W.i3076, align 2
  %10875 = add i64 %10860, -16
  %10876 = add i64 %10862, 16
  store i64 %10876, i64* %3, align 8
  %10877 = inttoptr i64 %10875 to i64*
  %10878 = load i64, i64* %10877, align 8
  store i64 %10878, i64* %RSI.i766, align 8
  %10879 = add i64 %10878, 1616
  %10880 = add i64 %10862, 23
  store i64 %10880, i64* %3, align 8
  %10881 = inttoptr i64 %10879 to i64*
  %10882 = load i64, i64* %10881, align 8
  store i64 %10882, i64* %RSI.i766, align 8
  %10883 = add i64 %10862, 26
  store i64 %10883, i64* %3, align 8
  %10884 = inttoptr i64 %10882 to i64*
  %10885 = load i64, i64* %10884, align 8
  store i64 %10885, i64* %RSI.i766, align 8
  %10886 = add i64 %10860, -52
  %10887 = add i64 %10862, 30
  store i64 %10887, i64* %3, align 8
  %10888 = inttoptr i64 %10886 to i32*
  %10889 = load i32, i32* %10888, align 4
  %10890 = sext i32 %10889 to i64
  store i64 %10890, i64* %R10.i3067, align 8
  %10891 = shl nsw i64 %10890, 3
  %10892 = add i64 %10891, %10885
  %10893 = add i64 %10862, 34
  store i64 %10893, i64* %3, align 8
  %10894 = inttoptr i64 %10892 to i64*
  %10895 = load i64, i64* %10894, align 8
  store i64 %10895, i64* %RSI.i766, align 8
  %10896 = add i64 %10860, -56
  %10897 = add i64 %10862, 38
  store i64 %10897, i64* %3, align 8
  %10898 = inttoptr i64 %10896 to i32*
  %10899 = load i32, i32* %10898, align 4
  %10900 = sext i32 %10899 to i64
  store i64 %10900, i64* %R10.i3067, align 8
  %10901 = shl nsw i64 %10900, 3
  %10902 = add i64 %10901, %10895
  %10903 = add i64 %10862, 42
  store i64 %10903, i64* %3, align 8
  %10904 = inttoptr i64 %10902 to i64*
  %10905 = load i64, i64* %10904, align 8
  store i64 %10905, i64* %RSI.i766, align 8
  %10906 = add i64 %10905, 2
  %10907 = add i64 %10862, 47
  store i64 %10907, i64* %3, align 8
  %10908 = inttoptr i64 %10906 to i16*
  store i16 %10874, i16* %10908, align 2
  %10909 = load i64, i64* %RBP.i, align 8
  %10910 = add i64 %10909, -32
  %10911 = load i64, i64* %3, align 8
  %10912 = add i64 %10911, 4
  store i64 %10912, i64* %3, align 8
  %10913 = inttoptr i64 %10910 to i64*
  %10914 = load i64, i64* %10913, align 8
  store i64 %10914, i64* %RSI.i766, align 8
  %10915 = add i64 %10914, 6528
  %10916 = add i64 %10911, 11
  store i64 %10916, i64* %3, align 8
  %10917 = inttoptr i64 %10915 to i64*
  %10918 = load i64, i64* %10917, align 8
  store i64 %10918, i64* %RSI.i766, align 8
  %10919 = add i64 %10918, 6504
  %10920 = add i64 %10911, 18
  store i64 %10920, i64* %3, align 8
  %10921 = inttoptr i64 %10919 to i64*
  %10922 = load i64, i64* %10921, align 8
  store i64 %10922, i64* %RSI.i766, align 8
  %10923 = add i64 %10922, 8
  %10924 = add i64 %10911, 22
  store i64 %10924, i64* %3, align 8
  %10925 = inttoptr i64 %10923 to i64*
  %10926 = load i64, i64* %10925, align 8
  store i64 %10926, i64* %RSI.i766, align 8
  %10927 = add i64 %10909, -52
  %10928 = add i64 %10911, 26
  store i64 %10928, i64* %3, align 8
  %10929 = inttoptr i64 %10927 to i32*
  %10930 = load i32, i32* %10929, align 4
  %10931 = sext i32 %10930 to i64
  store i64 %10931, i64* %R10.i3067, align 8
  %10932 = shl nsw i64 %10931, 3
  %10933 = add i64 %10932, %10926
  %10934 = add i64 %10911, 30
  store i64 %10934, i64* %3, align 8
  %10935 = inttoptr i64 %10933 to i64*
  %10936 = load i64, i64* %10935, align 8
  store i64 %10936, i64* %RSI.i766, align 8
  %10937 = add i64 %10909, -56
  %10938 = add i64 %10911, 33
  store i64 %10938, i64* %3, align 8
  %10939 = inttoptr i64 %10937 to i32*
  %10940 = load i32, i32* %10939, align 4
  %10941 = zext i32 %10940 to i64
  store i64 %10941, i64* %RAX.i3176, align 8
  %10942 = sext i32 %10940 to i64
  %10943 = lshr i64 %10942, 32
  store i64 %10943, i64* %RDX.i3742, align 8
  %10944 = load i32, i32* %ECX.i3723, align 4
  %10945 = add i64 %10911, 36
  store i64 %10945, i64* %3, align 8
  %10946 = sext i32 %10944 to i64
  %10947 = shl nuw i64 %10943, 32
  %10948 = or i64 %10947, %10941
  %10949 = sdiv i64 %10948, %10946
  %10950 = shl i64 %10949, 32
  %10951 = ashr exact i64 %10950, 32
  %10952 = icmp eq i64 %10949, %10951
  br i1 %10952, label %10955, label %10953

; <label>:10953:                                  ; preds = %routine_idivl__ecx.exit3529
  %10954 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %10945, %struct.Memory* %10864)
  %.pre315 = load i32, i32* %EAX.i3736, align 4
  %.pre316 = load i64, i64* %3, align 8
  %.pre317 = load i64, i64* %RSI.i766, align 8
  %.pre318 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3475

; <label>:10955:                                  ; preds = %routine_idivl__ecx.exit3529
  %10956 = srem i64 %10948, %10946
  %10957 = and i64 %10949, 4294967295
  store i64 %10957, i64* %RAX.i3176, align 8
  %10958 = and i64 %10956, 4294967295
  store i64 %10958, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10959 = trunc i64 %10949 to i32
  br label %routine_idivl__ecx.exit3475

routine_idivl__ecx.exit3475:                      ; preds = %10955, %10953
  %10960 = phi i64 [ %.pre318, %10953 ], [ %10909, %10955 ]
  %10961 = phi i64 [ %.pre317, %10953 ], [ %10936, %10955 ]
  %10962 = phi i64 [ %.pre316, %10953 ], [ %10945, %10955 ]
  %10963 = phi i32 [ %.pre315, %10953 ], [ %10959, %10955 ]
  %10964 = phi %struct.Memory* [ %10954, %10953 ], [ %10864, %10955 ]
  %10965 = sext i32 %10963 to i64
  store i64 %10965, i64* %R10.i3067, align 8
  %10966 = shl nsw i64 %10965, 3
  %10967 = add i64 %10961, %10966
  %10968 = add i64 %10962, 7
  store i64 %10968, i64* %3, align 8
  %10969 = inttoptr i64 %10967 to i64*
  %10970 = load i64, i64* %10969, align 8
  store i64 %10970, i64* %RSI.i766, align 8
  %10971 = add i64 %10962, 11
  store i64 %10971, i64* %3, align 8
  %10972 = inttoptr i64 %10970 to i16*
  %10973 = load i16, i16* %10972, align 2
  store i16 %10973, i16* %R9W.i3076, align 2
  %10974 = add i64 %10960, -16
  %10975 = add i64 %10962, 15
  store i64 %10975, i64* %3, align 8
  %10976 = inttoptr i64 %10974 to i64*
  %10977 = load i64, i64* %10976, align 8
  store i64 %10977, i64* %RSI.i766, align 8
  %10978 = add i64 %10977, 1616
  %10979 = add i64 %10962, 22
  store i64 %10979, i64* %3, align 8
  %10980 = inttoptr i64 %10978 to i64*
  %10981 = load i64, i64* %10980, align 8
  store i64 %10981, i64* %RSI.i766, align 8
  %10982 = add i64 %10981, 8
  %10983 = add i64 %10962, 26
  store i64 %10983, i64* %3, align 8
  %10984 = inttoptr i64 %10982 to i64*
  %10985 = load i64, i64* %10984, align 8
  store i64 %10985, i64* %RSI.i766, align 8
  %10986 = add i64 %10960, -52
  %10987 = add i64 %10962, 30
  store i64 %10987, i64* %3, align 8
  %10988 = inttoptr i64 %10986 to i32*
  %10989 = load i32, i32* %10988, align 4
  %10990 = sext i32 %10989 to i64
  store i64 %10990, i64* %R10.i3067, align 8
  %10991 = shl nsw i64 %10990, 3
  %10992 = add i64 %10991, %10985
  %10993 = add i64 %10962, 34
  store i64 %10993, i64* %3, align 8
  %10994 = inttoptr i64 %10992 to i64*
  %10995 = load i64, i64* %10994, align 8
  store i64 %10995, i64* %RSI.i766, align 8
  %10996 = add i64 %10960, -56
  %10997 = add i64 %10962, 38
  store i64 %10997, i64* %3, align 8
  %10998 = inttoptr i64 %10996 to i32*
  %10999 = load i32, i32* %10998, align 4
  %11000 = sext i32 %10999 to i64
  store i64 %11000, i64* %R10.i3067, align 8
  %11001 = shl nsw i64 %11000, 3
  %11002 = add i64 %11001, %10995
  %11003 = add i64 %10962, 42
  store i64 %11003, i64* %3, align 8
  %11004 = inttoptr i64 %11002 to i64*
  %11005 = load i64, i64* %11004, align 8
  store i64 %11005, i64* %RSI.i766, align 8
  %11006 = add i64 %10962, 46
  store i64 %11006, i64* %3, align 8
  %11007 = inttoptr i64 %11005 to i16*
  store i16 %10973, i16* %11007, align 2
  %11008 = load i64, i64* %RBP.i, align 8
  %11009 = add i64 %11008, -32
  %11010 = load i64, i64* %3, align 8
  %11011 = add i64 %11010, 4
  store i64 %11011, i64* %3, align 8
  %11012 = inttoptr i64 %11009 to i64*
  %11013 = load i64, i64* %11012, align 8
  store i64 %11013, i64* %RSI.i766, align 8
  %11014 = add i64 %11013, 6528
  %11015 = add i64 %11010, 11
  store i64 %11015, i64* %3, align 8
  %11016 = inttoptr i64 %11014 to i64*
  %11017 = load i64, i64* %11016, align 8
  store i64 %11017, i64* %RSI.i766, align 8
  %11018 = add i64 %11017, 6504
  %11019 = add i64 %11010, 18
  store i64 %11019, i64* %3, align 8
  %11020 = inttoptr i64 %11018 to i64*
  %11021 = load i64, i64* %11020, align 8
  store i64 %11021, i64* %RSI.i766, align 8
  %11022 = add i64 %11021, 8
  %11023 = add i64 %11010, 22
  store i64 %11023, i64* %3, align 8
  %11024 = inttoptr i64 %11022 to i64*
  %11025 = load i64, i64* %11024, align 8
  store i64 %11025, i64* %RSI.i766, align 8
  %11026 = add i64 %11008, -52
  %11027 = add i64 %11010, 26
  store i64 %11027, i64* %3, align 8
  %11028 = inttoptr i64 %11026 to i32*
  %11029 = load i32, i32* %11028, align 4
  %11030 = sext i32 %11029 to i64
  store i64 %11030, i64* %R10.i3067, align 8
  %11031 = shl nsw i64 %11030, 3
  %11032 = add i64 %11031, %11025
  %11033 = add i64 %11010, 30
  store i64 %11033, i64* %3, align 8
  %11034 = inttoptr i64 %11032 to i64*
  %11035 = load i64, i64* %11034, align 8
  store i64 %11035, i64* %RSI.i766, align 8
  %11036 = add i64 %11008, -56
  %11037 = add i64 %11010, 33
  store i64 %11037, i64* %3, align 8
  %11038 = inttoptr i64 %11036 to i32*
  %11039 = load i32, i32* %11038, align 4
  %11040 = zext i32 %11039 to i64
  store i64 %11040, i64* %RAX.i3176, align 8
  %11041 = sext i32 %11039 to i64
  %11042 = lshr i64 %11041, 32
  store i64 %11042, i64* %RDX.i3742, align 8
  %11043 = load i32, i32* %ECX.i3723, align 4
  %11044 = add i64 %11010, 36
  store i64 %11044, i64* %3, align 8
  %11045 = sext i32 %11043 to i64
  %11046 = shl nuw i64 %11042, 32
  %11047 = or i64 %11046, %11040
  %11048 = sdiv i64 %11047, %11045
  %11049 = shl i64 %11048, 32
  %11050 = ashr exact i64 %11049, 32
  %11051 = icmp eq i64 %11048, %11050
  br i1 %11051, label %11054, label %11052

; <label>:11052:                                  ; preds = %routine_idivl__ecx.exit3475
  %11053 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11044, %struct.Memory* %10964)
  %.pre319 = load i32, i32* %EAX.i3736, align 4
  %.pre320 = load i64, i64* %3, align 8
  %.pre321 = load i64, i64* %RSI.i766, align 8
  %.pre322 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3419

; <label>:11054:                                  ; preds = %routine_idivl__ecx.exit3475
  %11055 = srem i64 %11047, %11045
  %11056 = and i64 %11048, 4294967295
  store i64 %11056, i64* %RAX.i3176, align 8
  %11057 = and i64 %11055, 4294967295
  store i64 %11057, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11058 = trunc i64 %11048 to i32
  br label %routine_idivl__ecx.exit3419

routine_idivl__ecx.exit3419:                      ; preds = %11054, %11052
  %11059 = phi i64 [ %.pre322, %11052 ], [ %11008, %11054 ]
  %11060 = phi i64 [ %.pre321, %11052 ], [ %11035, %11054 ]
  %11061 = phi i64 [ %.pre320, %11052 ], [ %11044, %11054 ]
  %11062 = phi i32 [ %.pre319, %11052 ], [ %11058, %11054 ]
  %11063 = phi %struct.Memory* [ %11053, %11052 ], [ %10964, %11054 ]
  %11064 = sext i32 %11062 to i64
  store i64 %11064, i64* %R10.i3067, align 8
  %11065 = shl nsw i64 %11064, 3
  %11066 = add i64 %11060, %11065
  %11067 = add i64 %11061, 7
  store i64 %11067, i64* %3, align 8
  %11068 = inttoptr i64 %11066 to i64*
  %11069 = load i64, i64* %11068, align 8
  store i64 %11069, i64* %RSI.i766, align 8
  %11070 = add i64 %11069, 2
  %11071 = add i64 %11061, 12
  store i64 %11071, i64* %3, align 8
  %11072 = inttoptr i64 %11070 to i16*
  %11073 = load i16, i16* %11072, align 2
  store i16 %11073, i16* %R9W.i3076, align 2
  %11074 = add i64 %11059, -16
  %11075 = add i64 %11061, 16
  store i64 %11075, i64* %3, align 8
  %11076 = inttoptr i64 %11074 to i64*
  %11077 = load i64, i64* %11076, align 8
  store i64 %11077, i64* %RSI.i766, align 8
  %11078 = add i64 %11077, 1616
  %11079 = add i64 %11061, 23
  store i64 %11079, i64* %3, align 8
  %11080 = inttoptr i64 %11078 to i64*
  %11081 = load i64, i64* %11080, align 8
  store i64 %11081, i64* %RSI.i766, align 8
  %11082 = add i64 %11081, 8
  %11083 = add i64 %11061, 27
  store i64 %11083, i64* %3, align 8
  %11084 = inttoptr i64 %11082 to i64*
  %11085 = load i64, i64* %11084, align 8
  store i64 %11085, i64* %RSI.i766, align 8
  %11086 = add i64 %11059, -52
  %11087 = add i64 %11061, 31
  store i64 %11087, i64* %3, align 8
  %11088 = inttoptr i64 %11086 to i32*
  %11089 = load i32, i32* %11088, align 4
  %11090 = sext i32 %11089 to i64
  store i64 %11090, i64* %R10.i3067, align 8
  %11091 = shl nsw i64 %11090, 3
  %11092 = add i64 %11091, %11085
  %11093 = add i64 %11061, 35
  store i64 %11093, i64* %3, align 8
  %11094 = inttoptr i64 %11092 to i64*
  %11095 = load i64, i64* %11094, align 8
  store i64 %11095, i64* %RSI.i766, align 8
  %11096 = add i64 %11059, -56
  %11097 = add i64 %11061, 39
  store i64 %11097, i64* %3, align 8
  %11098 = inttoptr i64 %11096 to i32*
  %11099 = load i32, i32* %11098, align 4
  %11100 = sext i32 %11099 to i64
  store i64 %11100, i64* %R10.i3067, align 8
  %11101 = shl nsw i64 %11100, 3
  %11102 = add i64 %11101, %11095
  %11103 = add i64 %11061, 43
  store i64 %11103, i64* %3, align 8
  %11104 = inttoptr i64 %11102 to i64*
  %11105 = load i64, i64* %11104, align 8
  store i64 %11105, i64* %RSI.i766, align 8
  %11106 = add i64 %11105, 2
  %11107 = add i64 %11061, 48
  store i64 %11107, i64* %3, align 8
  %11108 = inttoptr i64 %11106 to i16*
  store i16 %11073, i16* %11108, align 2
  %11109 = load i64, i64* %RBP.i, align 8
  %11110 = add i64 %11109, -32
  %11111 = load i64, i64* %3, align 8
  %11112 = add i64 %11111, 4
  store i64 %11112, i64* %3, align 8
  %11113 = inttoptr i64 %11110 to i64*
  %11114 = load i64, i64* %11113, align 8
  store i64 %11114, i64* %RSI.i766, align 8
  %11115 = add i64 %11114, 6528
  %11116 = add i64 %11111, 11
  store i64 %11116, i64* %3, align 8
  %11117 = inttoptr i64 %11115 to i64*
  %11118 = load i64, i64* %11117, align 8
  store i64 %11118, i64* %RSI.i766, align 8
  %11119 = add i64 %11118, 6480
  %11120 = add i64 %11111, 18
  store i64 %11120, i64* %3, align 8
  %11121 = inttoptr i64 %11119 to i64*
  %11122 = load i64, i64* %11121, align 8
  store i64 %11122, i64* %RSI.i766, align 8
  %11123 = add i64 %11111, 21
  store i64 %11123, i64* %3, align 8
  %11124 = inttoptr i64 %11122 to i64*
  %11125 = load i64, i64* %11124, align 8
  store i64 %11125, i64* %RSI.i766, align 8
  %11126 = add i64 %11109, -52
  %11127 = add i64 %11111, 25
  store i64 %11127, i64* %3, align 8
  %11128 = inttoptr i64 %11126 to i32*
  %11129 = load i32, i32* %11128, align 4
  %11130 = sext i32 %11129 to i64
  store i64 %11130, i64* %R10.i3067, align 8
  %11131 = shl nsw i64 %11130, 3
  %11132 = add i64 %11131, %11125
  %11133 = add i64 %11111, 29
  store i64 %11133, i64* %3, align 8
  %11134 = inttoptr i64 %11132 to i64*
  %11135 = load i64, i64* %11134, align 8
  store i64 %11135, i64* %RSI.i766, align 8
  %11136 = add i64 %11109, -56
  %11137 = add i64 %11111, 32
  store i64 %11137, i64* %3, align 8
  %11138 = inttoptr i64 %11136 to i32*
  %11139 = load i32, i32* %11138, align 4
  %11140 = zext i32 %11139 to i64
  store i64 %11140, i64* %RAX.i3176, align 8
  %11141 = sext i32 %11139 to i64
  %11142 = lshr i64 %11141, 32
  store i64 %11142, i64* %RDX.i3742, align 8
  %11143 = load i32, i32* %ECX.i3723, align 4
  %11144 = add i64 %11111, 35
  store i64 %11144, i64* %3, align 8
  %11145 = sext i32 %11143 to i64
  %11146 = shl nuw i64 %11142, 32
  %11147 = or i64 %11146, %11140
  %11148 = sdiv i64 %11147, %11145
  %11149 = shl i64 %11148, 32
  %11150 = ashr exact i64 %11149, 32
  %11151 = icmp eq i64 %11148, %11150
  br i1 %11151, label %11154, label %11152

; <label>:11152:                                  ; preds = %routine_idivl__ecx.exit3419
  %11153 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11144, %struct.Memory* %11063)
  %.pre323 = load i32, i32* %EAX.i3736, align 4
  %.pre324 = load i64, i64* %3, align 8
  %.pre325 = load i64, i64* %RSI.i766, align 8
  %.pre326 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3363

; <label>:11154:                                  ; preds = %routine_idivl__ecx.exit3419
  %11155 = srem i64 %11147, %11145
  %11156 = and i64 %11148, 4294967295
  store i64 %11156, i64* %RAX.i3176, align 8
  %11157 = and i64 %11155, 4294967295
  store i64 %11157, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11158 = trunc i64 %11148 to i32
  br label %routine_idivl__ecx.exit3363

routine_idivl__ecx.exit3363:                      ; preds = %11154, %11152
  %11159 = phi i64 [ %.pre326, %11152 ], [ %11109, %11154 ]
  %11160 = phi i64 [ %.pre325, %11152 ], [ %11135, %11154 ]
  %11161 = phi i64 [ %.pre324, %11152 ], [ %11144, %11154 ]
  %11162 = phi i32 [ %.pre323, %11152 ], [ %11158, %11154 ]
  %11163 = phi %struct.Memory* [ %11153, %11152 ], [ %11063, %11154 ]
  %11164 = sext i32 %11162 to i64
  store i64 %11164, i64* %R10.i3067, align 8
  %11165 = shl nsw i64 %11164, 1
  %11166 = add i64 %11160, %11165
  %11167 = add i64 %11161, 8
  store i64 %11167, i64* %3, align 8
  %11168 = inttoptr i64 %11166 to i16*
  %11169 = load i16, i16* %11168, align 2
  store i16 %11169, i16* %R9W.i3076, align 2
  %11170 = add i64 %11159, -16
  %11171 = add i64 %11161, 12
  store i64 %11171, i64* %3, align 8
  %11172 = inttoptr i64 %11170 to i64*
  %11173 = load i64, i64* %11172, align 8
  store i64 %11173, i64* %RSI.i766, align 8
  %11174 = add i64 %11173, 1600
  %11175 = add i64 %11161, 19
  store i64 %11175, i64* %3, align 8
  %11176 = inttoptr i64 %11174 to i64*
  %11177 = load i64, i64* %11176, align 8
  store i64 %11177, i64* %RSI.i766, align 8
  %11178 = add i64 %11161, 22
  store i64 %11178, i64* %3, align 8
  %11179 = inttoptr i64 %11177 to i64*
  %11180 = load i64, i64* %11179, align 8
  store i64 %11180, i64* %RSI.i766, align 8
  %11181 = add i64 %11159, -52
  %11182 = add i64 %11161, 26
  store i64 %11182, i64* %3, align 8
  %11183 = inttoptr i64 %11181 to i32*
  %11184 = load i32, i32* %11183, align 4
  %11185 = sext i32 %11184 to i64
  store i64 %11185, i64* %R10.i3067, align 8
  %11186 = shl nsw i64 %11185, 3
  %11187 = add i64 %11186, %11180
  %11188 = add i64 %11161, 30
  store i64 %11188, i64* %3, align 8
  %11189 = inttoptr i64 %11187 to i64*
  %11190 = load i64, i64* %11189, align 8
  store i64 %11190, i64* %RSI.i766, align 8
  %11191 = add i64 %11159, -56
  %11192 = add i64 %11161, 34
  store i64 %11192, i64* %3, align 8
  %11193 = inttoptr i64 %11191 to i32*
  %11194 = load i32, i32* %11193, align 4
  %11195 = sext i32 %11194 to i64
  store i64 %11195, i64* %R10.i3067, align 8
  %11196 = shl nsw i64 %11195, 1
  %11197 = add i64 %11196, %11190
  %11198 = add i64 %11161, 39
  store i64 %11198, i64* %3, align 8
  %11199 = inttoptr i64 %11197 to i16*
  store i16 %11169, i16* %11199, align 2
  %11200 = load i64, i64* %RBP.i, align 8
  %11201 = add i64 %11200, -32
  %11202 = load i64, i64* %3, align 8
  %11203 = add i64 %11202, 4
  store i64 %11203, i64* %3, align 8
  %11204 = inttoptr i64 %11201 to i64*
  %11205 = load i64, i64* %11204, align 8
  store i64 %11205, i64* %RSI.i766, align 8
  %11206 = add i64 %11205, 6528
  %11207 = add i64 %11202, 11
  store i64 %11207, i64* %3, align 8
  %11208 = inttoptr i64 %11206 to i64*
  %11209 = load i64, i64* %11208, align 8
  store i64 %11209, i64* %RSI.i766, align 8
  %11210 = add i64 %11209, 6480
  %11211 = add i64 %11202, 18
  store i64 %11211, i64* %3, align 8
  %11212 = inttoptr i64 %11210 to i64*
  %11213 = load i64, i64* %11212, align 8
  store i64 %11213, i64* %RSI.i766, align 8
  %11214 = add i64 %11213, 8
  %11215 = add i64 %11202, 22
  store i64 %11215, i64* %3, align 8
  %11216 = inttoptr i64 %11214 to i64*
  %11217 = load i64, i64* %11216, align 8
  store i64 %11217, i64* %RSI.i766, align 8
  %11218 = add i64 %11200, -52
  %11219 = add i64 %11202, 26
  store i64 %11219, i64* %3, align 8
  %11220 = inttoptr i64 %11218 to i32*
  %11221 = load i32, i32* %11220, align 4
  %11222 = sext i32 %11221 to i64
  store i64 %11222, i64* %R10.i3067, align 8
  %11223 = shl nsw i64 %11222, 3
  %11224 = add i64 %11223, %11217
  %11225 = add i64 %11202, 30
  store i64 %11225, i64* %3, align 8
  %11226 = inttoptr i64 %11224 to i64*
  %11227 = load i64, i64* %11226, align 8
  store i64 %11227, i64* %RSI.i766, align 8
  %11228 = add i64 %11200, -56
  %11229 = add i64 %11202, 33
  store i64 %11229, i64* %3, align 8
  %11230 = inttoptr i64 %11228 to i32*
  %11231 = load i32, i32* %11230, align 4
  %11232 = zext i32 %11231 to i64
  store i64 %11232, i64* %RAX.i3176, align 8
  %11233 = sext i32 %11231 to i64
  %11234 = lshr i64 %11233, 32
  store i64 %11234, i64* %RDX.i3742, align 8
  %11235 = load i32, i32* %ECX.i3723, align 4
  %11236 = add i64 %11202, 36
  store i64 %11236, i64* %3, align 8
  %11237 = sext i32 %11235 to i64
  %11238 = shl nuw i64 %11234, 32
  %11239 = or i64 %11238, %11232
  %11240 = sdiv i64 %11239, %11237
  %11241 = shl i64 %11240, 32
  %11242 = ashr exact i64 %11241, 32
  %11243 = icmp eq i64 %11240, %11242
  br i1 %11243, label %11246, label %11244

; <label>:11244:                                  ; preds = %routine_idivl__ecx.exit3363
  %11245 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11236, %struct.Memory* %11163)
  %.pre327 = load i32, i32* %EAX.i3736, align 4
  %.pre328 = load i64, i64* %3, align 8
  %.pre329 = load i64, i64* %RSI.i766, align 8
  %.pre330 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3311

; <label>:11246:                                  ; preds = %routine_idivl__ecx.exit3363
  %11247 = srem i64 %11239, %11237
  %11248 = and i64 %11240, 4294967295
  store i64 %11248, i64* %RAX.i3176, align 8
  %11249 = and i64 %11247, 4294967295
  store i64 %11249, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11250 = trunc i64 %11240 to i32
  br label %routine_idivl__ecx.exit3311

routine_idivl__ecx.exit3311:                      ; preds = %11246, %11244
  %11251 = phi i64 [ %.pre330, %11244 ], [ %11200, %11246 ]
  %11252 = phi i64 [ %.pre329, %11244 ], [ %11227, %11246 ]
  %11253 = phi i64 [ %.pre328, %11244 ], [ %11236, %11246 ]
  %11254 = phi i32 [ %.pre327, %11244 ], [ %11250, %11246 ]
  %11255 = phi %struct.Memory* [ %11245, %11244 ], [ %11163, %11246 ]
  %11256 = sext i32 %11254 to i64
  store i64 %11256, i64* %R10.i3067, align 8
  %11257 = shl nsw i64 %11256, 1
  %11258 = add i64 %11252, %11257
  %11259 = add i64 %11253, 8
  store i64 %11259, i64* %3, align 8
  %11260 = inttoptr i64 %11258 to i16*
  %11261 = load i16, i16* %11260, align 2
  store i16 %11261, i16* %R9W.i3076, align 2
  %11262 = add i64 %11251, -16
  %11263 = add i64 %11253, 12
  store i64 %11263, i64* %3, align 8
  %11264 = inttoptr i64 %11262 to i64*
  %11265 = load i64, i64* %11264, align 8
  store i64 %11265, i64* %RSI.i766, align 8
  %11266 = add i64 %11265, 1600
  %11267 = add i64 %11253, 19
  store i64 %11267, i64* %3, align 8
  %11268 = inttoptr i64 %11266 to i64*
  %11269 = load i64, i64* %11268, align 8
  store i64 %11269, i64* %RSI.i766, align 8
  %11270 = add i64 %11269, 8
  %11271 = add i64 %11253, 23
  store i64 %11271, i64* %3, align 8
  %11272 = inttoptr i64 %11270 to i64*
  %11273 = load i64, i64* %11272, align 8
  store i64 %11273, i64* %RSI.i766, align 8
  %11274 = add i64 %11251, -52
  %11275 = add i64 %11253, 27
  store i64 %11275, i64* %3, align 8
  %11276 = inttoptr i64 %11274 to i32*
  %11277 = load i32, i32* %11276, align 4
  %11278 = sext i32 %11277 to i64
  store i64 %11278, i64* %R10.i3067, align 8
  %11279 = shl nsw i64 %11278, 3
  %11280 = add i64 %11279, %11273
  %11281 = add i64 %11253, 31
  store i64 %11281, i64* %3, align 8
  %11282 = inttoptr i64 %11280 to i64*
  %11283 = load i64, i64* %11282, align 8
  store i64 %11283, i64* %RSI.i766, align 8
  %11284 = add i64 %11251, -56
  %11285 = add i64 %11253, 35
  store i64 %11285, i64* %3, align 8
  %11286 = inttoptr i64 %11284 to i32*
  %11287 = load i32, i32* %11286, align 4
  %11288 = sext i32 %11287 to i64
  store i64 %11288, i64* %R10.i3067, align 8
  %11289 = shl nsw i64 %11288, 1
  %11290 = add i64 %11289, %11283
  %11291 = add i64 %11253, 40
  store i64 %11291, i64* %3, align 8
  %11292 = inttoptr i64 %11290 to i16*
  store i16 %11261, i16* %11292, align 2
  %11293 = load i64, i64* %RBP.i, align 8
  %11294 = add i64 %11293, -32
  %11295 = load i64, i64* %3, align 8
  %11296 = add i64 %11295, 4
  store i64 %11296, i64* %3, align 8
  %11297 = inttoptr i64 %11294 to i64*
  %11298 = load i64, i64* %11297, align 8
  store i64 %11298, i64* %RSI.i766, align 8
  %11299 = add i64 %11298, 6496
  %11300 = add i64 %11295, 11
  store i64 %11300, i64* %3, align 8
  %11301 = inttoptr i64 %11299 to i64*
  %11302 = load i64, i64* %11301, align 8
  store i64 %11302, i64* %RSI.i766, align 8
  %11303 = add i64 %11295, 14
  store i64 %11303, i64* %3, align 8
  %11304 = inttoptr i64 %11302 to i64*
  %11305 = load i64, i64* %11304, align 8
  store i64 %11305, i64* %RSI.i766, align 8
  %11306 = add i64 %11293, -52
  %11307 = add i64 %11295, 18
  store i64 %11307, i64* %3, align 8
  %11308 = inttoptr i64 %11306 to i32*
  %11309 = load i32, i32* %11308, align 4
  %11310 = sext i32 %11309 to i64
  store i64 %11310, i64* %R10.i3067, align 8
  %11311 = shl nsw i64 %11310, 3
  %11312 = add i64 %11311, %11305
  %11313 = add i64 %11295, 22
  store i64 %11313, i64* %3, align 8
  %11314 = inttoptr i64 %11312 to i64*
  %11315 = load i64, i64* %11314, align 8
  store i64 %11315, i64* %RSI.i766, align 8
  %11316 = add i64 %11293, -56
  %11317 = add i64 %11295, 25
  store i64 %11317, i64* %3, align 8
  %11318 = inttoptr i64 %11316 to i32*
  %11319 = load i32, i32* %11318, align 4
  %11320 = zext i32 %11319 to i64
  store i64 %11320, i64* %RAX.i3176, align 8
  %11321 = sext i32 %11319 to i64
  %11322 = lshr i64 %11321, 32
  store i64 %11322, i64* %RDX.i3742, align 8
  %11323 = load i32, i32* %ECX.i3723, align 4
  %11324 = add i64 %11295, 28
  store i64 %11324, i64* %3, align 8
  %11325 = sext i32 %11323 to i64
  %11326 = shl nuw i64 %11322, 32
  %11327 = or i64 %11326, %11320
  %11328 = sdiv i64 %11327, %11325
  %11329 = shl i64 %11328, 32
  %11330 = ashr exact i64 %11329, 32
  %11331 = icmp eq i64 %11328, %11330
  br i1 %11331, label %11334, label %11332

; <label>:11332:                                  ; preds = %routine_idivl__ecx.exit3311
  %11333 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11324, %struct.Memory* %11255)
  %.pre331 = load i64, i64* %RBP.i, align 8
  %.pre332 = load i64, i64* %3, align 8
  %.pre333 = load i32, i32* %EAX.i3736, align 4
  br label %routine_idivl__ecx.exit3262

; <label>:11334:                                  ; preds = %routine_idivl__ecx.exit3311
  %11335 = srem i64 %11327, %11325
  %11336 = and i64 %11328, 4294967295
  store i64 %11336, i64* %RAX.i3176, align 8
  %11337 = and i64 %11335, 4294967295
  store i64 %11337, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11338 = trunc i64 %11328 to i32
  br label %routine_idivl__ecx.exit3262

routine_idivl__ecx.exit3262:                      ; preds = %11334, %11332
  %11339 = phi i32 [ %.pre333, %11332 ], [ %11338, %11334 ]
  %11340 = phi i64 [ %.pre332, %11332 ], [ %11324, %11334 ]
  %11341 = phi i64 [ %.pre331, %11332 ], [ %11293, %11334 ]
  %11342 = phi %struct.Memory* [ %11333, %11332 ], [ %11255, %11334 ]
  %11343 = add i64 %11341, -56
  %11344 = add i64 %11340, 3
  store i64 %11344, i64* %3, align 8
  %11345 = inttoptr i64 %11343 to i32*
  %11346 = load i32, i32* %11345, align 4
  %11347 = zext i32 %11346 to i64
  store i64 %11347, i64* %RDI.i732, align 8
  %11348 = add i64 %11341, -1004
  %11349 = add i64 %11340, 9
  store i64 %11349, i64* %3, align 8
  %11350 = inttoptr i64 %11348 to i32*
  store i32 %11339, i32* %11350, align 4
  %11351 = load i32, i32* %EDI.i3096, align 4
  %11352 = zext i32 %11351 to i64
  %11353 = load i64, i64* %3, align 8
  store i64 %11352, i64* %RAX.i3176, align 8
  %11354 = sext i32 %11351 to i64
  %11355 = lshr i64 %11354, 32
  store i64 %11355, i64* %RDX.i3742, align 8
  %11356 = load i64, i64* %RBP.i, align 8
  %11357 = add i64 %11356, -988
  %11358 = add i64 %11353, 9
  store i64 %11358, i64* %3, align 8
  %11359 = inttoptr i64 %11357 to i32*
  %11360 = load i32, i32* %11359, align 4
  %11361 = zext i32 %11360 to i64
  store i64 %11361, i64* %RDI.i732, align 8
  %11362 = add i64 %11353, 11
  store i64 %11362, i64* %3, align 8
  %11363 = sext i32 %11360 to i64
  %11364 = shl nuw i64 %11355, 32
  %11365 = or i64 %11364, %11352
  %11366 = sdiv i64 %11365, %11363
  %11367 = shl i64 %11366, 32
  %11368 = ashr exact i64 %11367, 32
  %11369 = icmp eq i64 %11366, %11368
  br i1 %11369, label %11372, label %11370

; <label>:11370:                                  ; preds = %routine_idivl__ecx.exit3262
  %11371 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11362, %struct.Memory* %11342)
  %.pre334 = load i64, i64* %RAX.i3176, align 8
  %.pre335 = load i64, i64* %3, align 8
  %.pre336 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit3245

; <label>:11372:                                  ; preds = %routine_idivl__ecx.exit3262
  %11373 = srem i64 %11365, %11363
  %11374 = and i64 %11366, 4294967295
  store i64 %11374, i64* %RAX.i3176, align 8
  %11375 = and i64 %11373, 4294967295
  store i64 %11375, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  br label %routine_idivl__edi.exit3245

routine_idivl__edi.exit3245:                      ; preds = %11372, %11370
  %11376 = phi i64 [ %.pre336, %11370 ], [ %11356, %11372 ]
  %11377 = phi i64 [ %.pre335, %11370 ], [ %11362, %11372 ]
  %11378 = phi i64 [ %.pre334, %11370 ], [ %11374, %11372 ]
  %11379 = phi %struct.Memory* [ %11371, %11370 ], [ %11342, %11372 ]
  %.tr217 = trunc i64 %11378 to i32
  %11380 = shl i32 %.tr217, 2
  %11381 = zext i32 %11380 to i64
  store i64 %11381, i64* %RAX.i3176, align 8
  %11382 = lshr i64 %11378, 30
  %11383 = trunc i64 %11382 to i8
  %11384 = and i8 %11383, 1
  store i8 %11384, i8* %19, align 1
  %11385 = and i32 %11380, 252
  %11386 = tail call i32 @llvm.ctpop.i32(i32 %11385)
  %11387 = trunc i32 %11386 to i8
  %11388 = and i8 %11387, 1
  %11389 = xor i8 %11388, 1
  store i8 %11389, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11390 = icmp eq i32 %11380, 0
  %11391 = zext i1 %11390 to i8
  store i8 %11391, i8* %34, align 1
  %11392 = lshr i32 %.tr217, 29
  %11393 = trunc i32 %11392 to i8
  %11394 = and i8 %11393, 1
  store i8 %11394, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11395 = add i64 %11376, -1004
  %11396 = add i64 %11377, 10
  store i64 %11396, i64* %3, align 8
  %11397 = inttoptr i64 %11395 to i32*
  %11398 = load i32, i32* %11397, align 4
  %11399 = add i32 %11380, %11398
  %11400 = zext i32 %11399 to i64
  store i64 %11400, i64* %10366, align 8
  %11401 = icmp ult i32 %11399, %11398
  %11402 = icmp ult i32 %11399, %11380
  %11403 = or i1 %11401, %11402
  %11404 = zext i1 %11403 to i8
  store i8 %11404, i8* %19, align 1
  %11405 = and i32 %11399, 255
  %11406 = tail call i32 @llvm.ctpop.i32(i32 %11405)
  %11407 = trunc i32 %11406 to i8
  %11408 = and i8 %11407, 1
  %11409 = xor i8 %11408, 1
  store i8 %11409, i8* %26, align 1
  %11410 = xor i32 %11380, %11398
  %11411 = xor i32 %11410, %11399
  %11412 = lshr i32 %11411, 4
  %11413 = trunc i32 %11412 to i8
  %11414 = and i8 %11413, 1
  store i8 %11414, i8* %31, align 1
  %11415 = icmp eq i32 %11399, 0
  %11416 = zext i1 %11415 to i8
  store i8 %11416, i8* %34, align 1
  %11417 = lshr i32 %11399, 31
  %11418 = trunc i32 %11417 to i8
  store i8 %11418, i8* %37, align 1
  %11419 = lshr i32 %11398, 31
  %11420 = lshr i32 %.tr217, 29
  %11421 = and i32 %11420, 1
  %11422 = xor i32 %11417, %11419
  %11423 = xor i32 %11417, %11421
  %11424 = add nuw nsw i32 %11422, %11423
  %11425 = icmp eq i32 %11424, 2
  %11426 = zext i1 %11425 to i8
  store i8 %11426, i8* %43, align 1
  %11427 = sext i32 %11399 to i64
  store i64 %11427, i64* %R10.i3067, align 8
  %11428 = load i64, i64* %RSI.i766, align 8
  %11429 = shl nsw i64 %11427, 3
  %11430 = add i64 %11428, %11429
  %11431 = add i64 %11377, 20
  store i64 %11431, i64* %3, align 8
  %11432 = inttoptr i64 %11430 to i64*
  %11433 = load i64, i64* %11432, align 8
  store i64 %11433, i64* %RSI.i766, align 8
  %11434 = add i64 %11376, -16
  %11435 = add i64 %11377, 24
  store i64 %11435, i64* %3, align 8
  %11436 = inttoptr i64 %11434 to i64*
  %11437 = load i64, i64* %11436, align 8
  store i64 %11437, i64* %R10.i3067, align 8
  %11438 = add i64 %11437, 1608
  %11439 = add i64 %11377, 31
  store i64 %11439, i64* %3, align 8
  %11440 = inttoptr i64 %11438 to i64*
  %11441 = load i64, i64* %11440, align 8
  store i64 %11441, i64* %R10.i3067, align 8
  %11442 = add i64 %11377, 34
  store i64 %11442, i64* %3, align 8
  %11443 = inttoptr i64 %11441 to i64*
  %11444 = load i64, i64* %11443, align 8
  store i64 %11444, i64* %R10.i3067, align 8
  %11445 = load i64, i64* %RBP.i, align 8
  %11446 = add i64 %11445, -52
  %11447 = add i64 %11377, 38
  store i64 %11447, i64* %3, align 8
  %11448 = inttoptr i64 %11446 to i32*
  %11449 = load i32, i32* %11448, align 4
  %11450 = sext i32 %11449 to i64
  store i64 %11450, i64* %RBX.i133, align 8
  %11451 = shl nsw i64 %11450, 3
  %11452 = add i64 %11451, %11444
  %11453 = add i64 %11377, 42
  store i64 %11453, i64* %3, align 8
  %11454 = inttoptr i64 %11452 to i64*
  %11455 = load i64, i64* %11454, align 8
  store i64 %11455, i64* %R10.i3067, align 8
  %11456 = add i64 %11445, -56
  %11457 = add i64 %11377, 46
  store i64 %11457, i64* %3, align 8
  %11458 = inttoptr i64 %11456 to i32*
  %11459 = load i32, i32* %11458, align 4
  %11460 = sext i32 %11459 to i64
  store i64 %11460, i64* %RBX.i133, align 8
  %11461 = shl nsw i64 %11460, 3
  %11462 = add i64 %11461, %11455
  %11463 = add i64 %11377, 50
  store i64 %11463, i64* %3, align 8
  %11464 = inttoptr i64 %11462 to i64*
  store i64 %11433, i64* %11464, align 8
  %11465 = load i64, i64* %RBP.i, align 8
  %11466 = add i64 %11465, -32
  %11467 = load i64, i64* %3, align 8
  %11468 = add i64 %11467, 4
  store i64 %11468, i64* %3, align 8
  %11469 = inttoptr i64 %11466 to i64*
  %11470 = load i64, i64* %11469, align 8
  store i64 %11470, i64* %RSI.i766, align 8
  %11471 = add i64 %11470, 6496
  %11472 = add i64 %11467, 11
  store i64 %11472, i64* %3, align 8
  %11473 = inttoptr i64 %11471 to i64*
  %11474 = load i64, i64* %11473, align 8
  store i64 %11474, i64* %RSI.i766, align 8
  %11475 = add i64 %11474, 8
  %11476 = add i64 %11467, 15
  store i64 %11476, i64* %3, align 8
  %11477 = inttoptr i64 %11475 to i64*
  %11478 = load i64, i64* %11477, align 8
  store i64 %11478, i64* %RSI.i766, align 8
  %11479 = add i64 %11465, -52
  %11480 = add i64 %11467, 19
  store i64 %11480, i64* %3, align 8
  %11481 = inttoptr i64 %11479 to i32*
  %11482 = load i32, i32* %11481, align 4
  %11483 = sext i32 %11482 to i64
  store i64 %11483, i64* %R10.i3067, align 8
  %11484 = shl nsw i64 %11483, 3
  %11485 = add i64 %11484, %11478
  %11486 = add i64 %11467, 23
  store i64 %11486, i64* %3, align 8
  %11487 = inttoptr i64 %11485 to i64*
  %11488 = load i64, i64* %11487, align 8
  store i64 %11488, i64* %RSI.i766, align 8
  %11489 = add i64 %11465, -56
  %11490 = add i64 %11467, 26
  store i64 %11490, i64* %3, align 8
  %11491 = inttoptr i64 %11489 to i32*
  %11492 = load i32, i32* %11491, align 4
  %11493 = zext i32 %11492 to i64
  store i64 %11493, i64* %RAX.i3176, align 8
  %11494 = sext i32 %11492 to i64
  %11495 = lshr i64 %11494, 32
  store i64 %11495, i64* %RDX.i3742, align 8
  %11496 = load i32, i32* %ECX.i3723, align 4
  %11497 = add i64 %11467, 29
  store i64 %11497, i64* %3, align 8
  %11498 = sext i32 %11496 to i64
  %11499 = shl nuw i64 %11495, 32
  %11500 = or i64 %11499, %11493
  %11501 = sdiv i64 %11500, %11498
  %11502 = shl i64 %11501, 32
  %11503 = ashr exact i64 %11502, 32
  %11504 = icmp eq i64 %11501, %11503
  br i1 %11504, label %11507, label %11505

; <label>:11505:                                  ; preds = %routine_idivl__edi.exit3245
  %11506 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11497, %struct.Memory* %11379)
  %.pre337 = load i64, i64* %RBP.i, align 8
  %.pre338 = load i64, i64* %3, align 8
  %.pre339 = load i32, i32* %EAX.i3736, align 4
  br label %routine_idivl__ecx.exit3189

; <label>:11507:                                  ; preds = %routine_idivl__edi.exit3245
  %11508 = srem i64 %11500, %11498
  %11509 = and i64 %11501, 4294967295
  store i64 %11509, i64* %RAX.i3176, align 8
  %11510 = and i64 %11508, 4294967295
  store i64 %11510, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11511 = trunc i64 %11501 to i32
  br label %routine_idivl__ecx.exit3189

routine_idivl__ecx.exit3189:                      ; preds = %11507, %11505
  %11512 = phi i32 [ %.pre339, %11505 ], [ %11511, %11507 ]
  %11513 = phi i64 [ %.pre338, %11505 ], [ %11497, %11507 ]
  %11514 = phi i64 [ %.pre337, %11505 ], [ %11465, %11507 ]
  %11515 = phi %struct.Memory* [ %11506, %11505 ], [ %11379, %11507 ]
  %11516 = add i64 %11514, -56
  %11517 = add i64 %11513, 3
  store i64 %11517, i64* %3, align 8
  %11518 = inttoptr i64 %11516 to i32*
  %11519 = load i32, i32* %11518, align 4
  %11520 = zext i32 %11519 to i64
  store i64 %11520, i64* %RCX.i3745, align 8
  %11521 = add i64 %11514, -1008
  %11522 = add i64 %11513, 9
  store i64 %11522, i64* %3, align 8
  %11523 = inttoptr i64 %11521 to i32*
  store i32 %11512, i32* %11523, align 4
  %11524 = load i32, i32* %ECX.i3723, align 4
  %11525 = zext i32 %11524 to i64
  %11526 = load i64, i64* %3, align 8
  store i64 %11525, i64* %RAX.i3176, align 8
  %11527 = sext i32 %11524 to i64
  %11528 = lshr i64 %11527, 32
  store i64 %11528, i64* %RDX.i3742, align 8
  %11529 = load i32, i32* %EDI.i3096, align 4
  %11530 = add i64 %11526, 5
  store i64 %11530, i64* %3, align 8
  %11531 = sext i32 %11529 to i64
  %11532 = shl nuw i64 %11528, 32
  %11533 = or i64 %11532, %11525
  %11534 = sdiv i64 %11533, %11531
  %11535 = shl i64 %11534, 32
  %11536 = ashr exact i64 %11535, 32
  %11537 = icmp eq i64 %11534, %11536
  br i1 %11537, label %11540, label %11538

; <label>:11538:                                  ; preds = %routine_idivl__ecx.exit3189
  %11539 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11530, %struct.Memory* %11515)
  %.pre340 = load i64, i64* %RAX.i3176, align 8
  %.pre341 = load i64, i64* %3, align 8
  br label %routine_idivl__edi.exit3174

; <label>:11540:                                  ; preds = %routine_idivl__ecx.exit3189
  %11541 = srem i64 %11533, %11531
  %11542 = and i64 %11534, 4294967295
  store i64 %11542, i64* %RAX.i3176, align 8
  %11543 = and i64 %11541, 4294967295
  store i64 %11543, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  br label %routine_idivl__edi.exit3174

routine_idivl__edi.exit3174:                      ; preds = %11540, %11538
  %11544 = phi i64 [ %.pre341, %11538 ], [ %11530, %11540 ]
  %11545 = phi i64 [ %.pre340, %11538 ], [ %11542, %11540 ]
  %11546 = phi %struct.Memory* [ %11539, %11538 ], [ %11515, %11540 ]
  %.tr220 = trunc i64 %11545 to i32
  %11547 = shl i32 %.tr220, 2
  %11548 = zext i32 %11547 to i64
  store i64 %11548, i64* %RAX.i3176, align 8
  %11549 = lshr i64 %11545, 30
  %11550 = trunc i64 %11549 to i8
  %11551 = and i8 %11550, 1
  store i8 %11551, i8* %19, align 1
  %11552 = and i32 %11547, 252
  %11553 = tail call i32 @llvm.ctpop.i32(i32 %11552)
  %11554 = trunc i32 %11553 to i8
  %11555 = and i8 %11554, 1
  %11556 = xor i8 %11555, 1
  store i8 %11556, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11557 = icmp eq i32 %11547, 0
  %11558 = zext i1 %11557 to i8
  store i8 %11558, i8* %34, align 1
  %11559 = lshr i32 %.tr220, 29
  %11560 = trunc i32 %11559 to i8
  %11561 = and i8 %11560, 1
  store i8 %11561, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11562 = load i64, i64* %RBP.i, align 8
  %11563 = add i64 %11562, -1008
  %11564 = add i64 %11544, 9
  store i64 %11564, i64* %3, align 8
  %11565 = inttoptr i64 %11563 to i32*
  %11566 = load i32, i32* %11565, align 4
  %11567 = add i32 %11547, %11566
  %11568 = zext i32 %11567 to i64
  store i64 %11568, i64* %RCX.i3745, align 8
  %11569 = icmp ult i32 %11567, %11566
  %11570 = icmp ult i32 %11567, %11547
  %11571 = or i1 %11569, %11570
  %11572 = zext i1 %11571 to i8
  store i8 %11572, i8* %19, align 1
  %11573 = and i32 %11567, 255
  %11574 = tail call i32 @llvm.ctpop.i32(i32 %11573)
  %11575 = trunc i32 %11574 to i8
  %11576 = and i8 %11575, 1
  %11577 = xor i8 %11576, 1
  store i8 %11577, i8* %26, align 1
  %11578 = xor i32 %11547, %11566
  %11579 = xor i32 %11578, %11567
  %11580 = lshr i32 %11579, 4
  %11581 = trunc i32 %11580 to i8
  %11582 = and i8 %11581, 1
  store i8 %11582, i8* %31, align 1
  %11583 = icmp eq i32 %11567, 0
  %11584 = zext i1 %11583 to i8
  store i8 %11584, i8* %34, align 1
  %11585 = lshr i32 %11567, 31
  %11586 = trunc i32 %11585 to i8
  store i8 %11586, i8* %37, align 1
  %11587 = lshr i32 %11566, 31
  %11588 = lshr i32 %.tr220, 29
  %11589 = and i32 %11588, 1
  %11590 = xor i32 %11585, %11587
  %11591 = xor i32 %11585, %11589
  %11592 = add nuw nsw i32 %11590, %11591
  %11593 = icmp eq i32 %11592, 2
  %11594 = zext i1 %11593 to i8
  store i8 %11594, i8* %43, align 1
  %11595 = sext i32 %11567 to i64
  store i64 %11595, i64* %R10.i3067, align 8
  %11596 = load i64, i64* %RSI.i766, align 8
  %11597 = shl nsw i64 %11595, 3
  %11598 = add i64 %11596, %11597
  %11599 = add i64 %11544, 18
  store i64 %11599, i64* %3, align 8
  %11600 = inttoptr i64 %11598 to i64*
  %11601 = load i64, i64* %11600, align 8
  store i64 %11601, i64* %RSI.i766, align 8
  %11602 = add i64 %11562, -16
  %11603 = add i64 %11544, 22
  store i64 %11603, i64* %3, align 8
  %11604 = inttoptr i64 %11602 to i64*
  %11605 = load i64, i64* %11604, align 8
  store i64 %11605, i64* %R10.i3067, align 8
  %11606 = add i64 %11605, 1608
  %11607 = add i64 %11544, 29
  store i64 %11607, i64* %3, align 8
  %11608 = inttoptr i64 %11606 to i64*
  %11609 = load i64, i64* %11608, align 8
  store i64 %11609, i64* %R10.i3067, align 8
  %11610 = add i64 %11609, 8
  %11611 = add i64 %11544, 33
  store i64 %11611, i64* %3, align 8
  %11612 = inttoptr i64 %11610 to i64*
  %11613 = load i64, i64* %11612, align 8
  store i64 %11613, i64* %R10.i3067, align 8
  %11614 = add i64 %11562, -52
  %11615 = add i64 %11544, 37
  store i64 %11615, i64* %3, align 8
  %11616 = inttoptr i64 %11614 to i32*
  %11617 = load i32, i32* %11616, align 4
  %11618 = sext i32 %11617 to i64
  store i64 %11618, i64* %RBX.i133, align 8
  %11619 = shl nsw i64 %11618, 3
  %11620 = add i64 %11619, %11613
  %11621 = add i64 %11544, 41
  store i64 %11621, i64* %3, align 8
  %11622 = inttoptr i64 %11620 to i64*
  %11623 = load i64, i64* %11622, align 8
  store i64 %11623, i64* %R10.i3067, align 8
  %11624 = add i64 %11562, -56
  %11625 = add i64 %11544, 45
  store i64 %11625, i64* %3, align 8
  %11626 = inttoptr i64 %11624 to i32*
  %11627 = load i32, i32* %11626, align 4
  %11628 = sext i32 %11627 to i64
  store i64 %11628, i64* %RBX.i133, align 8
  %11629 = shl nsw i64 %11628, 3
  %11630 = add i64 %11629, %11623
  %11631 = add i64 %11544, 49
  store i64 %11631, i64* %3, align 8
  %11632 = inttoptr i64 %11630 to i64*
  store i64 %11601, i64* %11632, align 8
  %11633 = load i64, i64* %RBP.i, align 8
  %11634 = add i64 %11633, -32
  %11635 = load i64, i64* %3, align 8
  %11636 = add i64 %11635, 4
  store i64 %11636, i64* %3, align 8
  %11637 = inttoptr i64 %11634 to i64*
  %11638 = load i64, i64* %11637, align 8
  store i64 %11638, i64* %RSI.i766, align 8
  %11639 = add i64 %11638, 6528
  %11640 = add i64 %11635, 11
  store i64 %11640, i64* %3, align 8
  %11641 = inttoptr i64 %11639 to i64*
  %11642 = load i64, i64* %11641, align 8
  store i64 %11642, i64* %RSI.i766, align 8
  %11643 = add i64 %11642, 6376
  %11644 = add i64 %11635, 17
  store i64 %11644, i64* %3, align 8
  %11645 = inttoptr i64 %11643 to i32*
  %11646 = load i32, i32* %11645, align 4
  %11647 = zext i32 %11646 to i64
  store i64 %11647, i64* %RAX.i3176, align 8
  %11648 = add i64 %11633, -16
  %11649 = add i64 %11635, 21
  store i64 %11649, i64* %3, align 8
  %11650 = inttoptr i64 %11648 to i64*
  %11651 = load i64, i64* %11650, align 8
  store i64 %11651, i64* %RSI.i766, align 8
  %11652 = add i64 %11651, 4864
  %11653 = add i64 %11635, 27
  store i64 %11653, i64* %3, align 8
  %11654 = inttoptr i64 %11652 to i32*
  store i32 %11646, i32* %11654, align 4
  %11655 = load i64, i64* %3, align 8
  %11656 = add i64 %11655, 739
  store i64 %11656, i64* %3, align 8
  br label %block_.L_45811e

block_.L_457e40:                                  ; preds = %block_457b10
  %11657 = add i64 %10701, 6536
  %11658 = add i64 %10697, 21
  store i64 %11658, i64* %3, align 8
  %11659 = inttoptr i64 %11657 to i64*
  %11660 = load i64, i64* %11659, align 8
  store i64 %11660, i64* %RDX.i3742, align 8
  %11661 = add i64 %11660, 6504
  %11662 = add i64 %10697, 28
  store i64 %11662, i64* %3, align 8
  %11663 = inttoptr i64 %11661 to i64*
  %11664 = load i64, i64* %11663, align 8
  store i64 %11664, i64* %RDX.i3742, align 8
  %11665 = add i64 %10697, 31
  store i64 %11665, i64* %3, align 8
  %11666 = inttoptr i64 %11664 to i64*
  %11667 = load i64, i64* %11666, align 8
  store i64 %11667, i64* %RDX.i3742, align 8
  %11668 = add i64 %10663, -52
  %11669 = add i64 %10697, 35
  store i64 %11669, i64* %3, align 8
  %11670 = inttoptr i64 %11668 to i32*
  %11671 = load i32, i32* %11670, align 4
  %11672 = sext i32 %11671 to i64
  store i64 %11672, i64* %RSI.i766, align 8
  %11673 = shl nsw i64 %11672, 3
  %11674 = add i64 %11673, %11667
  %11675 = add i64 %10697, 39
  store i64 %11675, i64* %3, align 8
  %11676 = inttoptr i64 %11674 to i64*
  %11677 = load i64, i64* %11676, align 8
  store i64 %11677, i64* %RDX.i3742, align 8
  %11678 = add i64 %10663, -56
  %11679 = add i64 %10697, 42
  store i64 %11679, i64* %3, align 8
  %11680 = inttoptr i64 %11678 to i32*
  %11681 = load i32, i32* %11680, align 4
  %11682 = zext i32 %11681 to i64
  store i64 %11682, i64* %RDI.i732, align 8
  %11683 = add i64 %10663, -1012
  %11684 = add i64 %10697, 48
  store i64 %11684, i64* %3, align 8
  %11685 = inttoptr i64 %11683 to i32*
  store i32 8, i32* %11685, align 4
  %11686 = load i32, i32* %EDI.i3096, align 4
  %11687 = zext i32 %11686 to i64
  %11688 = load i64, i64* %3, align 8
  store i64 %11687, i64* %RAX.i3176, align 8
  %11689 = load i64, i64* %RBP.i, align 8
  %11690 = add i64 %11689, -1024
  %11691 = load i64, i64* %RDX.i3742, align 8
  %11692 = add i64 %11688, 9
  store i64 %11692, i64* %3, align 8
  %11693 = inttoptr i64 %11690 to i64*
  store i64 %11691, i64* %11693, align 8
  %11694 = load i64, i64* %3, align 8
  %11695 = load i32, i32* %EAX.i3736, align 8
  %11696 = sext i32 %11695 to i64
  %11697 = lshr i64 %11696, 32
  store i64 %11697, i64* %RDX.i3742, align 8
  %11698 = load i32, i32* %ECX.i3723, align 4
  %11699 = add i64 %11694, 3
  store i64 %11699, i64* %3, align 8
  %11700 = zext i32 %11695 to i64
  %11701 = sext i32 %11698 to i64
  %11702 = shl nuw i64 %11697, 32
  %11703 = or i64 %11702, %11700
  %11704 = sdiv i64 %11703, %11701
  %11705 = shl i64 %11704, 32
  %11706 = ashr exact i64 %11705, 32
  %11707 = icmp eq i64 %11704, %11706
  br i1 %11707, label %11710, label %11708

; <label>:11708:                                  ; preds = %block_.L_457e40
  %11709 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11699, %struct.Memory* %10662)
  %.pre342 = load i32, i32* %EAX.i3736, align 4
  %.pre343 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3089

; <label>:11710:                                  ; preds = %block_.L_457e40
  %11711 = srem i64 %11703, %11701
  %11712 = and i64 %11704, 4294967295
  store i64 %11712, i64* %RAX.i3176, align 8
  %11713 = and i64 %11711, 4294967295
  store i64 %11713, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11714 = trunc i64 %11704 to i32
  br label %routine_idivl__ecx.exit3089

routine_idivl__ecx.exit3089:                      ; preds = %11710, %11708
  %11715 = phi i64 [ %.pre343, %11708 ], [ %11699, %11710 ]
  %11716 = phi i32 [ %.pre342, %11708 ], [ %11714, %11710 ]
  %11717 = phi %struct.Memory* [ %11709, %11708 ], [ %10662, %11710 ]
  %11718 = sext i32 %11716 to i64
  store i64 %11718, i64* %RSI.i766, align 8
  %11719 = load i64, i64* %RBP.i, align 8
  %11720 = add i64 %11719, -1024
  %11721 = add i64 %11715, 10
  store i64 %11721, i64* %3, align 8
  %11722 = inttoptr i64 %11720 to i64*
  %11723 = load i64, i64* %11722, align 8
  store i64 %11723, i64* %R8.i3083, align 8
  %11724 = shl nsw i64 %11718, 3
  %11725 = add i64 %11724, %11723
  %11726 = add i64 %11715, 14
  store i64 %11726, i64* %3, align 8
  %11727 = inttoptr i64 %11725 to i64*
  %11728 = load i64, i64* %11727, align 8
  store i64 %11728, i64* %RSI.i766, align 8
  %11729 = add i64 %11715, 18
  store i64 %11729, i64* %3, align 8
  %11730 = inttoptr i64 %11728 to i16*
  %11731 = load i16, i16* %11730, align 2
  store i16 %11731, i16* %R9W.i3076, align 2
  %11732 = add i64 %11719, -16
  %11733 = add i64 %11715, 22
  store i64 %11733, i64* %3, align 8
  %11734 = inttoptr i64 %11732 to i64*
  %11735 = load i64, i64* %11734, align 8
  store i64 %11735, i64* %RSI.i766, align 8
  %11736 = add i64 %11735, 1616
  %11737 = add i64 %11715, 29
  store i64 %11737, i64* %3, align 8
  %11738 = inttoptr i64 %11736 to i64*
  %11739 = load i64, i64* %11738, align 8
  store i64 %11739, i64* %RSI.i766, align 8
  %11740 = add i64 %11715, 32
  store i64 %11740, i64* %3, align 8
  %11741 = inttoptr i64 %11739 to i64*
  %11742 = load i64, i64* %11741, align 8
  store i64 %11742, i64* %RSI.i766, align 8
  %11743 = add i64 %11719, -52
  %11744 = add i64 %11715, 36
  store i64 %11744, i64* %3, align 8
  %11745 = inttoptr i64 %11743 to i32*
  %11746 = load i32, i32* %11745, align 4
  %11747 = sext i32 %11746 to i64
  store i64 %11747, i64* %R10.i3067, align 8
  %11748 = shl nsw i64 %11747, 3
  %11749 = add i64 %11748, %11742
  %11750 = add i64 %11715, 40
  store i64 %11750, i64* %3, align 8
  %11751 = inttoptr i64 %11749 to i64*
  %11752 = load i64, i64* %11751, align 8
  store i64 %11752, i64* %RSI.i766, align 8
  %11753 = add i64 %11719, -56
  %11754 = add i64 %11715, 44
  store i64 %11754, i64* %3, align 8
  %11755 = inttoptr i64 %11753 to i32*
  %11756 = load i32, i32* %11755, align 4
  %11757 = sext i32 %11756 to i64
  store i64 %11757, i64* %R10.i3067, align 8
  %11758 = shl nsw i64 %11757, 3
  %11759 = add i64 %11758, %11752
  %11760 = add i64 %11715, 48
  store i64 %11760, i64* %3, align 8
  %11761 = inttoptr i64 %11759 to i64*
  %11762 = load i64, i64* %11761, align 8
  store i64 %11762, i64* %RSI.i766, align 8
  %11763 = add i64 %11715, 52
  store i64 %11763, i64* %3, align 8
  %11764 = inttoptr i64 %11762 to i16*
  store i16 %11731, i16* %11764, align 2
  %11765 = load i64, i64* %RBP.i, align 8
  %11766 = add i64 %11765, -32
  %11767 = load i64, i64* %3, align 8
  %11768 = add i64 %11767, 4
  store i64 %11768, i64* %3, align 8
  %11769 = inttoptr i64 %11766 to i64*
  %11770 = load i64, i64* %11769, align 8
  store i64 %11770, i64* %RSI.i766, align 8
  %11771 = add i64 %11770, 6536
  %11772 = add i64 %11767, 11
  store i64 %11772, i64* %3, align 8
  %11773 = inttoptr i64 %11771 to i64*
  %11774 = load i64, i64* %11773, align 8
  store i64 %11774, i64* %RSI.i766, align 8
  %11775 = add i64 %11774, 6504
  %11776 = add i64 %11767, 18
  store i64 %11776, i64* %3, align 8
  %11777 = inttoptr i64 %11775 to i64*
  %11778 = load i64, i64* %11777, align 8
  store i64 %11778, i64* %RSI.i766, align 8
  %11779 = add i64 %11767, 21
  store i64 %11779, i64* %3, align 8
  %11780 = inttoptr i64 %11778 to i64*
  %11781 = load i64, i64* %11780, align 8
  store i64 %11781, i64* %RSI.i766, align 8
  %11782 = add i64 %11765, -52
  %11783 = add i64 %11767, 25
  store i64 %11783, i64* %3, align 8
  %11784 = inttoptr i64 %11782 to i32*
  %11785 = load i32, i32* %11784, align 4
  %11786 = sext i32 %11785 to i64
  store i64 %11786, i64* %R10.i3067, align 8
  %11787 = shl nsw i64 %11786, 3
  %11788 = add i64 %11787, %11781
  %11789 = add i64 %11767, 29
  store i64 %11789, i64* %3, align 8
  %11790 = inttoptr i64 %11788 to i64*
  %11791 = load i64, i64* %11790, align 8
  store i64 %11791, i64* %RSI.i766, align 8
  %11792 = add i64 %11765, -56
  %11793 = add i64 %11767, 32
  store i64 %11793, i64* %3, align 8
  %11794 = inttoptr i64 %11792 to i32*
  %11795 = load i32, i32* %11794, align 4
  %11796 = zext i32 %11795 to i64
  store i64 %11796, i64* %RAX.i3176, align 8
  %11797 = sext i32 %11795 to i64
  %11798 = lshr i64 %11797, 32
  store i64 %11798, i64* %RDX.i3742, align 8
  %11799 = load i32, i32* %ECX.i3723, align 4
  %11800 = add i64 %11767, 35
  store i64 %11800, i64* %3, align 8
  %11801 = sext i32 %11799 to i64
  %11802 = shl nuw i64 %11798, 32
  %11803 = or i64 %11802, %11796
  %11804 = sdiv i64 %11803, %11801
  %11805 = shl i64 %11804, 32
  %11806 = ashr exact i64 %11805, 32
  %11807 = icmp eq i64 %11804, %11806
  br i1 %11807, label %11810, label %11808

; <label>:11808:                                  ; preds = %routine_idivl__ecx.exit3089
  %11809 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11800, %struct.Memory* %11717)
  %.pre344 = load i32, i32* %EAX.i3736, align 4
  %.pre345 = load i64, i64* %3, align 8
  %.pre346 = load i64, i64* %RSI.i766, align 8
  %.pre347 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3030

; <label>:11810:                                  ; preds = %routine_idivl__ecx.exit3089
  %11811 = srem i64 %11803, %11801
  %11812 = and i64 %11804, 4294967295
  store i64 %11812, i64* %RAX.i3176, align 8
  %11813 = and i64 %11811, 4294967295
  store i64 %11813, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11814 = trunc i64 %11804 to i32
  br label %routine_idivl__ecx.exit3030

routine_idivl__ecx.exit3030:                      ; preds = %11810, %11808
  %11815 = phi i64 [ %.pre347, %11808 ], [ %11765, %11810 ]
  %11816 = phi i64 [ %.pre346, %11808 ], [ %11791, %11810 ]
  %11817 = phi i64 [ %.pre345, %11808 ], [ %11800, %11810 ]
  %11818 = phi i32 [ %.pre344, %11808 ], [ %11814, %11810 ]
  %11819 = phi %struct.Memory* [ %11809, %11808 ], [ %11717, %11810 ]
  %11820 = sext i32 %11818 to i64
  store i64 %11820, i64* %R10.i3067, align 8
  %11821 = shl nsw i64 %11820, 3
  %11822 = add i64 %11816, %11821
  %11823 = add i64 %11817, 7
  store i64 %11823, i64* %3, align 8
  %11824 = inttoptr i64 %11822 to i64*
  %11825 = load i64, i64* %11824, align 8
  store i64 %11825, i64* %RSI.i766, align 8
  %11826 = add i64 %11825, 2
  %11827 = add i64 %11817, 12
  store i64 %11827, i64* %3, align 8
  %11828 = inttoptr i64 %11826 to i16*
  %11829 = load i16, i16* %11828, align 2
  store i16 %11829, i16* %R9W.i3076, align 2
  %11830 = add i64 %11815, -16
  %11831 = add i64 %11817, 16
  store i64 %11831, i64* %3, align 8
  %11832 = inttoptr i64 %11830 to i64*
  %11833 = load i64, i64* %11832, align 8
  store i64 %11833, i64* %RSI.i766, align 8
  %11834 = add i64 %11833, 1616
  %11835 = add i64 %11817, 23
  store i64 %11835, i64* %3, align 8
  %11836 = inttoptr i64 %11834 to i64*
  %11837 = load i64, i64* %11836, align 8
  store i64 %11837, i64* %RSI.i766, align 8
  %11838 = add i64 %11817, 26
  store i64 %11838, i64* %3, align 8
  %11839 = inttoptr i64 %11837 to i64*
  %11840 = load i64, i64* %11839, align 8
  store i64 %11840, i64* %RSI.i766, align 8
  %11841 = add i64 %11815, -52
  %11842 = add i64 %11817, 30
  store i64 %11842, i64* %3, align 8
  %11843 = inttoptr i64 %11841 to i32*
  %11844 = load i32, i32* %11843, align 4
  %11845 = sext i32 %11844 to i64
  store i64 %11845, i64* %R10.i3067, align 8
  %11846 = shl nsw i64 %11845, 3
  %11847 = add i64 %11846, %11840
  %11848 = add i64 %11817, 34
  store i64 %11848, i64* %3, align 8
  %11849 = inttoptr i64 %11847 to i64*
  %11850 = load i64, i64* %11849, align 8
  store i64 %11850, i64* %RSI.i766, align 8
  %11851 = add i64 %11815, -56
  %11852 = add i64 %11817, 38
  store i64 %11852, i64* %3, align 8
  %11853 = inttoptr i64 %11851 to i32*
  %11854 = load i32, i32* %11853, align 4
  %11855 = sext i32 %11854 to i64
  store i64 %11855, i64* %R10.i3067, align 8
  %11856 = shl nsw i64 %11855, 3
  %11857 = add i64 %11856, %11850
  %11858 = add i64 %11817, 42
  store i64 %11858, i64* %3, align 8
  %11859 = inttoptr i64 %11857 to i64*
  %11860 = load i64, i64* %11859, align 8
  store i64 %11860, i64* %RSI.i766, align 8
  %11861 = add i64 %11860, 2
  %11862 = add i64 %11817, 47
  store i64 %11862, i64* %3, align 8
  %11863 = inttoptr i64 %11861 to i16*
  store i16 %11829, i16* %11863, align 2
  %11864 = load i64, i64* %RBP.i, align 8
  %11865 = add i64 %11864, -32
  %11866 = load i64, i64* %3, align 8
  %11867 = add i64 %11866, 4
  store i64 %11867, i64* %3, align 8
  %11868 = inttoptr i64 %11865 to i64*
  %11869 = load i64, i64* %11868, align 8
  store i64 %11869, i64* %RSI.i766, align 8
  %11870 = add i64 %11869, 6536
  %11871 = add i64 %11866, 11
  store i64 %11871, i64* %3, align 8
  %11872 = inttoptr i64 %11870 to i64*
  %11873 = load i64, i64* %11872, align 8
  store i64 %11873, i64* %RSI.i766, align 8
  %11874 = add i64 %11873, 6504
  %11875 = add i64 %11866, 18
  store i64 %11875, i64* %3, align 8
  %11876 = inttoptr i64 %11874 to i64*
  %11877 = load i64, i64* %11876, align 8
  store i64 %11877, i64* %RSI.i766, align 8
  %11878 = add i64 %11877, 8
  %11879 = add i64 %11866, 22
  store i64 %11879, i64* %3, align 8
  %11880 = inttoptr i64 %11878 to i64*
  %11881 = load i64, i64* %11880, align 8
  store i64 %11881, i64* %RSI.i766, align 8
  %11882 = add i64 %11864, -52
  %11883 = add i64 %11866, 26
  store i64 %11883, i64* %3, align 8
  %11884 = inttoptr i64 %11882 to i32*
  %11885 = load i32, i32* %11884, align 4
  %11886 = sext i32 %11885 to i64
  store i64 %11886, i64* %R10.i3067, align 8
  %11887 = shl nsw i64 %11886, 3
  %11888 = add i64 %11887, %11881
  %11889 = add i64 %11866, 30
  store i64 %11889, i64* %3, align 8
  %11890 = inttoptr i64 %11888 to i64*
  %11891 = load i64, i64* %11890, align 8
  store i64 %11891, i64* %RSI.i766, align 8
  %11892 = add i64 %11864, -56
  %11893 = add i64 %11866, 33
  store i64 %11893, i64* %3, align 8
  %11894 = inttoptr i64 %11892 to i32*
  %11895 = load i32, i32* %11894, align 4
  %11896 = zext i32 %11895 to i64
  store i64 %11896, i64* %RAX.i3176, align 8
  %11897 = sext i32 %11895 to i64
  %11898 = lshr i64 %11897, 32
  store i64 %11898, i64* %RDX.i3742, align 8
  %11899 = load i32, i32* %ECX.i3723, align 4
  %11900 = add i64 %11866, 36
  store i64 %11900, i64* %3, align 8
  %11901 = sext i32 %11899 to i64
  %11902 = shl nuw i64 %11898, 32
  %11903 = or i64 %11902, %11896
  %11904 = sdiv i64 %11903, %11901
  %11905 = shl i64 %11904, 32
  %11906 = ashr exact i64 %11905, 32
  %11907 = icmp eq i64 %11904, %11906
  br i1 %11907, label %11910, label %11908

; <label>:11908:                                  ; preds = %routine_idivl__ecx.exit3030
  %11909 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11900, %struct.Memory* %11819)
  %.pre348 = load i32, i32* %EAX.i3736, align 4
  %.pre349 = load i64, i64* %3, align 8
  %.pre350 = load i64, i64* %RSI.i766, align 8
  %.pre351 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2975

; <label>:11910:                                  ; preds = %routine_idivl__ecx.exit3030
  %11911 = srem i64 %11903, %11901
  %11912 = and i64 %11904, 4294967295
  store i64 %11912, i64* %RAX.i3176, align 8
  %11913 = and i64 %11911, 4294967295
  store i64 %11913, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11914 = trunc i64 %11904 to i32
  br label %routine_idivl__ecx.exit2975

routine_idivl__ecx.exit2975:                      ; preds = %11910, %11908
  %11915 = phi i64 [ %.pre351, %11908 ], [ %11864, %11910 ]
  %11916 = phi i64 [ %.pre350, %11908 ], [ %11891, %11910 ]
  %11917 = phi i64 [ %.pre349, %11908 ], [ %11900, %11910 ]
  %11918 = phi i32 [ %.pre348, %11908 ], [ %11914, %11910 ]
  %11919 = phi %struct.Memory* [ %11909, %11908 ], [ %11819, %11910 ]
  %11920 = sext i32 %11918 to i64
  store i64 %11920, i64* %R10.i3067, align 8
  %11921 = shl nsw i64 %11920, 3
  %11922 = add i64 %11916, %11921
  %11923 = add i64 %11917, 7
  store i64 %11923, i64* %3, align 8
  %11924 = inttoptr i64 %11922 to i64*
  %11925 = load i64, i64* %11924, align 8
  store i64 %11925, i64* %RSI.i766, align 8
  %11926 = add i64 %11917, 11
  store i64 %11926, i64* %3, align 8
  %11927 = inttoptr i64 %11925 to i16*
  %11928 = load i16, i16* %11927, align 2
  store i16 %11928, i16* %R9W.i3076, align 2
  %11929 = add i64 %11915, -16
  %11930 = add i64 %11917, 15
  store i64 %11930, i64* %3, align 8
  %11931 = inttoptr i64 %11929 to i64*
  %11932 = load i64, i64* %11931, align 8
  store i64 %11932, i64* %RSI.i766, align 8
  %11933 = add i64 %11932, 1616
  %11934 = add i64 %11917, 22
  store i64 %11934, i64* %3, align 8
  %11935 = inttoptr i64 %11933 to i64*
  %11936 = load i64, i64* %11935, align 8
  store i64 %11936, i64* %RSI.i766, align 8
  %11937 = add i64 %11936, 8
  %11938 = add i64 %11917, 26
  store i64 %11938, i64* %3, align 8
  %11939 = inttoptr i64 %11937 to i64*
  %11940 = load i64, i64* %11939, align 8
  store i64 %11940, i64* %RSI.i766, align 8
  %11941 = add i64 %11915, -52
  %11942 = add i64 %11917, 30
  store i64 %11942, i64* %3, align 8
  %11943 = inttoptr i64 %11941 to i32*
  %11944 = load i32, i32* %11943, align 4
  %11945 = sext i32 %11944 to i64
  store i64 %11945, i64* %R10.i3067, align 8
  %11946 = shl nsw i64 %11945, 3
  %11947 = add i64 %11946, %11940
  %11948 = add i64 %11917, 34
  store i64 %11948, i64* %3, align 8
  %11949 = inttoptr i64 %11947 to i64*
  %11950 = load i64, i64* %11949, align 8
  store i64 %11950, i64* %RSI.i766, align 8
  %11951 = add i64 %11915, -56
  %11952 = add i64 %11917, 38
  store i64 %11952, i64* %3, align 8
  %11953 = inttoptr i64 %11951 to i32*
  %11954 = load i32, i32* %11953, align 4
  %11955 = sext i32 %11954 to i64
  store i64 %11955, i64* %R10.i3067, align 8
  %11956 = shl nsw i64 %11955, 3
  %11957 = add i64 %11956, %11950
  %11958 = add i64 %11917, 42
  store i64 %11958, i64* %3, align 8
  %11959 = inttoptr i64 %11957 to i64*
  %11960 = load i64, i64* %11959, align 8
  store i64 %11960, i64* %RSI.i766, align 8
  %11961 = add i64 %11917, 46
  store i64 %11961, i64* %3, align 8
  %11962 = inttoptr i64 %11960 to i16*
  store i16 %11928, i16* %11962, align 2
  %11963 = load i64, i64* %RBP.i, align 8
  %11964 = add i64 %11963, -32
  %11965 = load i64, i64* %3, align 8
  %11966 = add i64 %11965, 4
  store i64 %11966, i64* %3, align 8
  %11967 = inttoptr i64 %11964 to i64*
  %11968 = load i64, i64* %11967, align 8
  store i64 %11968, i64* %RSI.i766, align 8
  %11969 = add i64 %11968, 6536
  %11970 = add i64 %11965, 11
  store i64 %11970, i64* %3, align 8
  %11971 = inttoptr i64 %11969 to i64*
  %11972 = load i64, i64* %11971, align 8
  store i64 %11972, i64* %RSI.i766, align 8
  %11973 = add i64 %11972, 6504
  %11974 = add i64 %11965, 18
  store i64 %11974, i64* %3, align 8
  %11975 = inttoptr i64 %11973 to i64*
  %11976 = load i64, i64* %11975, align 8
  store i64 %11976, i64* %RSI.i766, align 8
  %11977 = add i64 %11976, 8
  %11978 = add i64 %11965, 22
  store i64 %11978, i64* %3, align 8
  %11979 = inttoptr i64 %11977 to i64*
  %11980 = load i64, i64* %11979, align 8
  store i64 %11980, i64* %RSI.i766, align 8
  %11981 = add i64 %11963, -52
  %11982 = add i64 %11965, 26
  store i64 %11982, i64* %3, align 8
  %11983 = inttoptr i64 %11981 to i32*
  %11984 = load i32, i32* %11983, align 4
  %11985 = sext i32 %11984 to i64
  store i64 %11985, i64* %R10.i3067, align 8
  %11986 = shl nsw i64 %11985, 3
  %11987 = add i64 %11986, %11980
  %11988 = add i64 %11965, 30
  store i64 %11988, i64* %3, align 8
  %11989 = inttoptr i64 %11987 to i64*
  %11990 = load i64, i64* %11989, align 8
  store i64 %11990, i64* %RSI.i766, align 8
  %11991 = add i64 %11963, -56
  %11992 = add i64 %11965, 33
  store i64 %11992, i64* %3, align 8
  %11993 = inttoptr i64 %11991 to i32*
  %11994 = load i32, i32* %11993, align 4
  %11995 = zext i32 %11994 to i64
  store i64 %11995, i64* %RAX.i3176, align 8
  %11996 = sext i32 %11994 to i64
  %11997 = lshr i64 %11996, 32
  store i64 %11997, i64* %RDX.i3742, align 8
  %11998 = load i32, i32* %ECX.i3723, align 4
  %11999 = add i64 %11965, 36
  store i64 %11999, i64* %3, align 8
  %12000 = sext i32 %11998 to i64
  %12001 = shl nuw i64 %11997, 32
  %12002 = or i64 %12001, %11995
  %12003 = sdiv i64 %12002, %12000
  %12004 = shl i64 %12003, 32
  %12005 = ashr exact i64 %12004, 32
  %12006 = icmp eq i64 %12003, %12005
  br i1 %12006, label %12009, label %12007

; <label>:12007:                                  ; preds = %routine_idivl__ecx.exit2975
  %12008 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %11999, %struct.Memory* %11919)
  %.pre352 = load i32, i32* %EAX.i3736, align 4
  %.pre353 = load i64, i64* %3, align 8
  %.pre354 = load i64, i64* %RSI.i766, align 8
  %.pre355 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2920

; <label>:12009:                                  ; preds = %routine_idivl__ecx.exit2975
  %12010 = srem i64 %12002, %12000
  %12011 = and i64 %12003, 4294967295
  store i64 %12011, i64* %RAX.i3176, align 8
  %12012 = and i64 %12010, 4294967295
  store i64 %12012, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12013 = trunc i64 %12003 to i32
  br label %routine_idivl__ecx.exit2920

routine_idivl__ecx.exit2920:                      ; preds = %12009, %12007
  %12014 = phi i64 [ %.pre355, %12007 ], [ %11963, %12009 ]
  %12015 = phi i64 [ %.pre354, %12007 ], [ %11990, %12009 ]
  %12016 = phi i64 [ %.pre353, %12007 ], [ %11999, %12009 ]
  %12017 = phi i32 [ %.pre352, %12007 ], [ %12013, %12009 ]
  %12018 = phi %struct.Memory* [ %12008, %12007 ], [ %11919, %12009 ]
  %12019 = sext i32 %12017 to i64
  store i64 %12019, i64* %R10.i3067, align 8
  %12020 = shl nsw i64 %12019, 3
  %12021 = add i64 %12015, %12020
  %12022 = add i64 %12016, 7
  store i64 %12022, i64* %3, align 8
  %12023 = inttoptr i64 %12021 to i64*
  %12024 = load i64, i64* %12023, align 8
  store i64 %12024, i64* %RSI.i766, align 8
  %12025 = add i64 %12024, 2
  %12026 = add i64 %12016, 12
  store i64 %12026, i64* %3, align 8
  %12027 = inttoptr i64 %12025 to i16*
  %12028 = load i16, i16* %12027, align 2
  store i16 %12028, i16* %R9W.i3076, align 2
  %12029 = add i64 %12014, -16
  %12030 = add i64 %12016, 16
  store i64 %12030, i64* %3, align 8
  %12031 = inttoptr i64 %12029 to i64*
  %12032 = load i64, i64* %12031, align 8
  store i64 %12032, i64* %RSI.i766, align 8
  %12033 = add i64 %12032, 1616
  %12034 = add i64 %12016, 23
  store i64 %12034, i64* %3, align 8
  %12035 = inttoptr i64 %12033 to i64*
  %12036 = load i64, i64* %12035, align 8
  store i64 %12036, i64* %RSI.i766, align 8
  %12037 = add i64 %12036, 8
  %12038 = add i64 %12016, 27
  store i64 %12038, i64* %3, align 8
  %12039 = inttoptr i64 %12037 to i64*
  %12040 = load i64, i64* %12039, align 8
  store i64 %12040, i64* %RSI.i766, align 8
  %12041 = add i64 %12014, -52
  %12042 = add i64 %12016, 31
  store i64 %12042, i64* %3, align 8
  %12043 = inttoptr i64 %12041 to i32*
  %12044 = load i32, i32* %12043, align 4
  %12045 = sext i32 %12044 to i64
  store i64 %12045, i64* %R10.i3067, align 8
  %12046 = shl nsw i64 %12045, 3
  %12047 = add i64 %12046, %12040
  %12048 = add i64 %12016, 35
  store i64 %12048, i64* %3, align 8
  %12049 = inttoptr i64 %12047 to i64*
  %12050 = load i64, i64* %12049, align 8
  store i64 %12050, i64* %RSI.i766, align 8
  %12051 = add i64 %12014, -56
  %12052 = add i64 %12016, 39
  store i64 %12052, i64* %3, align 8
  %12053 = inttoptr i64 %12051 to i32*
  %12054 = load i32, i32* %12053, align 4
  %12055 = sext i32 %12054 to i64
  store i64 %12055, i64* %R10.i3067, align 8
  %12056 = shl nsw i64 %12055, 3
  %12057 = add i64 %12056, %12050
  %12058 = add i64 %12016, 43
  store i64 %12058, i64* %3, align 8
  %12059 = inttoptr i64 %12057 to i64*
  %12060 = load i64, i64* %12059, align 8
  store i64 %12060, i64* %RSI.i766, align 8
  %12061 = add i64 %12060, 2
  %12062 = add i64 %12016, 48
  store i64 %12062, i64* %3, align 8
  %12063 = inttoptr i64 %12061 to i16*
  store i16 %12028, i16* %12063, align 2
  %12064 = load i64, i64* %RBP.i, align 8
  %12065 = add i64 %12064, -32
  %12066 = load i64, i64* %3, align 8
  %12067 = add i64 %12066, 4
  store i64 %12067, i64* %3, align 8
  %12068 = inttoptr i64 %12065 to i64*
  %12069 = load i64, i64* %12068, align 8
  store i64 %12069, i64* %RSI.i766, align 8
  %12070 = add i64 %12069, 6536
  %12071 = add i64 %12066, 11
  store i64 %12071, i64* %3, align 8
  %12072 = inttoptr i64 %12070 to i64*
  %12073 = load i64, i64* %12072, align 8
  store i64 %12073, i64* %RSI.i766, align 8
  %12074 = add i64 %12073, 6480
  %12075 = add i64 %12066, 18
  store i64 %12075, i64* %3, align 8
  %12076 = inttoptr i64 %12074 to i64*
  %12077 = load i64, i64* %12076, align 8
  store i64 %12077, i64* %RSI.i766, align 8
  %12078 = add i64 %12066, 21
  store i64 %12078, i64* %3, align 8
  %12079 = inttoptr i64 %12077 to i64*
  %12080 = load i64, i64* %12079, align 8
  store i64 %12080, i64* %RSI.i766, align 8
  %12081 = add i64 %12064, -52
  %12082 = add i64 %12066, 25
  store i64 %12082, i64* %3, align 8
  %12083 = inttoptr i64 %12081 to i32*
  %12084 = load i32, i32* %12083, align 4
  %12085 = sext i32 %12084 to i64
  store i64 %12085, i64* %R10.i3067, align 8
  %12086 = shl nsw i64 %12085, 3
  %12087 = add i64 %12086, %12080
  %12088 = add i64 %12066, 29
  store i64 %12088, i64* %3, align 8
  %12089 = inttoptr i64 %12087 to i64*
  %12090 = load i64, i64* %12089, align 8
  store i64 %12090, i64* %RSI.i766, align 8
  %12091 = add i64 %12064, -56
  %12092 = add i64 %12066, 32
  store i64 %12092, i64* %3, align 8
  %12093 = inttoptr i64 %12091 to i32*
  %12094 = load i32, i32* %12093, align 4
  %12095 = zext i32 %12094 to i64
  store i64 %12095, i64* %RAX.i3176, align 8
  %12096 = sext i32 %12094 to i64
  %12097 = lshr i64 %12096, 32
  store i64 %12097, i64* %RDX.i3742, align 8
  %12098 = load i32, i32* %ECX.i3723, align 4
  %12099 = add i64 %12066, 35
  store i64 %12099, i64* %3, align 8
  %12100 = sext i32 %12098 to i64
  %12101 = shl nuw i64 %12097, 32
  %12102 = or i64 %12101, %12095
  %12103 = sdiv i64 %12102, %12100
  %12104 = shl i64 %12103, 32
  %12105 = ashr exact i64 %12104, 32
  %12106 = icmp eq i64 %12103, %12105
  br i1 %12106, label %12109, label %12107

; <label>:12107:                                  ; preds = %routine_idivl__ecx.exit2920
  %12108 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12099, %struct.Memory* %12018)
  %.pre356 = load i32, i32* %EAX.i3736, align 4
  %.pre357 = load i64, i64* %3, align 8
  %.pre358 = load i64, i64* %RSI.i766, align 8
  %.pre359 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2864

; <label>:12109:                                  ; preds = %routine_idivl__ecx.exit2920
  %12110 = srem i64 %12102, %12100
  %12111 = and i64 %12103, 4294967295
  store i64 %12111, i64* %RAX.i3176, align 8
  %12112 = and i64 %12110, 4294967295
  store i64 %12112, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12113 = trunc i64 %12103 to i32
  br label %routine_idivl__ecx.exit2864

routine_idivl__ecx.exit2864:                      ; preds = %12109, %12107
  %12114 = phi i64 [ %.pre359, %12107 ], [ %12064, %12109 ]
  %12115 = phi i64 [ %.pre358, %12107 ], [ %12090, %12109 ]
  %12116 = phi i64 [ %.pre357, %12107 ], [ %12099, %12109 ]
  %12117 = phi i32 [ %.pre356, %12107 ], [ %12113, %12109 ]
  %12118 = phi %struct.Memory* [ %12108, %12107 ], [ %12018, %12109 ]
  %12119 = sext i32 %12117 to i64
  store i64 %12119, i64* %R10.i3067, align 8
  %12120 = shl nsw i64 %12119, 1
  %12121 = add i64 %12115, %12120
  %12122 = add i64 %12116, 8
  store i64 %12122, i64* %3, align 8
  %12123 = inttoptr i64 %12121 to i16*
  %12124 = load i16, i16* %12123, align 2
  store i16 %12124, i16* %R9W.i3076, align 2
  %12125 = add i64 %12114, -16
  %12126 = add i64 %12116, 12
  store i64 %12126, i64* %3, align 8
  %12127 = inttoptr i64 %12125 to i64*
  %12128 = load i64, i64* %12127, align 8
  store i64 %12128, i64* %RSI.i766, align 8
  %12129 = add i64 %12128, 1600
  %12130 = add i64 %12116, 19
  store i64 %12130, i64* %3, align 8
  %12131 = inttoptr i64 %12129 to i64*
  %12132 = load i64, i64* %12131, align 8
  store i64 %12132, i64* %RSI.i766, align 8
  %12133 = add i64 %12116, 22
  store i64 %12133, i64* %3, align 8
  %12134 = inttoptr i64 %12132 to i64*
  %12135 = load i64, i64* %12134, align 8
  store i64 %12135, i64* %RSI.i766, align 8
  %12136 = add i64 %12114, -52
  %12137 = add i64 %12116, 26
  store i64 %12137, i64* %3, align 8
  %12138 = inttoptr i64 %12136 to i32*
  %12139 = load i32, i32* %12138, align 4
  %12140 = sext i32 %12139 to i64
  store i64 %12140, i64* %R10.i3067, align 8
  %12141 = shl nsw i64 %12140, 3
  %12142 = add i64 %12141, %12135
  %12143 = add i64 %12116, 30
  store i64 %12143, i64* %3, align 8
  %12144 = inttoptr i64 %12142 to i64*
  %12145 = load i64, i64* %12144, align 8
  store i64 %12145, i64* %RSI.i766, align 8
  %12146 = add i64 %12114, -56
  %12147 = add i64 %12116, 34
  store i64 %12147, i64* %3, align 8
  %12148 = inttoptr i64 %12146 to i32*
  %12149 = load i32, i32* %12148, align 4
  %12150 = sext i32 %12149 to i64
  store i64 %12150, i64* %R10.i3067, align 8
  %12151 = shl nsw i64 %12150, 1
  %12152 = add i64 %12151, %12145
  %12153 = add i64 %12116, 39
  store i64 %12153, i64* %3, align 8
  %12154 = inttoptr i64 %12152 to i16*
  store i16 %12124, i16* %12154, align 2
  %12155 = load i64, i64* %RBP.i, align 8
  %12156 = add i64 %12155, -32
  %12157 = load i64, i64* %3, align 8
  %12158 = add i64 %12157, 4
  store i64 %12158, i64* %3, align 8
  %12159 = inttoptr i64 %12156 to i64*
  %12160 = load i64, i64* %12159, align 8
  store i64 %12160, i64* %RSI.i766, align 8
  %12161 = add i64 %12160, 6536
  %12162 = add i64 %12157, 11
  store i64 %12162, i64* %3, align 8
  %12163 = inttoptr i64 %12161 to i64*
  %12164 = load i64, i64* %12163, align 8
  store i64 %12164, i64* %RSI.i766, align 8
  %12165 = add i64 %12164, 6480
  %12166 = add i64 %12157, 18
  store i64 %12166, i64* %3, align 8
  %12167 = inttoptr i64 %12165 to i64*
  %12168 = load i64, i64* %12167, align 8
  store i64 %12168, i64* %RSI.i766, align 8
  %12169 = add i64 %12168, 8
  %12170 = add i64 %12157, 22
  store i64 %12170, i64* %3, align 8
  %12171 = inttoptr i64 %12169 to i64*
  %12172 = load i64, i64* %12171, align 8
  store i64 %12172, i64* %RSI.i766, align 8
  %12173 = add i64 %12155, -52
  %12174 = add i64 %12157, 26
  store i64 %12174, i64* %3, align 8
  %12175 = inttoptr i64 %12173 to i32*
  %12176 = load i32, i32* %12175, align 4
  %12177 = sext i32 %12176 to i64
  store i64 %12177, i64* %R10.i3067, align 8
  %12178 = shl nsw i64 %12177, 3
  %12179 = add i64 %12178, %12172
  %12180 = add i64 %12157, 30
  store i64 %12180, i64* %3, align 8
  %12181 = inttoptr i64 %12179 to i64*
  %12182 = load i64, i64* %12181, align 8
  store i64 %12182, i64* %RSI.i766, align 8
  %12183 = add i64 %12155, -56
  %12184 = add i64 %12157, 33
  store i64 %12184, i64* %3, align 8
  %12185 = inttoptr i64 %12183 to i32*
  %12186 = load i32, i32* %12185, align 4
  %12187 = zext i32 %12186 to i64
  store i64 %12187, i64* %RAX.i3176, align 8
  %12188 = sext i32 %12186 to i64
  %12189 = lshr i64 %12188, 32
  store i64 %12189, i64* %RDX.i3742, align 8
  %12190 = load i32, i32* %ECX.i3723, align 4
  %12191 = add i64 %12157, 36
  store i64 %12191, i64* %3, align 8
  %12192 = sext i32 %12190 to i64
  %12193 = shl nuw i64 %12189, 32
  %12194 = or i64 %12193, %12187
  %12195 = sdiv i64 %12194, %12192
  %12196 = shl i64 %12195, 32
  %12197 = ashr exact i64 %12196, 32
  %12198 = icmp eq i64 %12195, %12197
  br i1 %12198, label %12201, label %12199

; <label>:12199:                                  ; preds = %routine_idivl__ecx.exit2864
  %12200 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12191, %struct.Memory* %12118)
  %.pre360 = load i32, i32* %EAX.i3736, align 4
  %.pre361 = load i64, i64* %3, align 8
  %.pre362 = load i64, i64* %RSI.i766, align 8
  %.pre363 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2812

; <label>:12201:                                  ; preds = %routine_idivl__ecx.exit2864
  %12202 = srem i64 %12194, %12192
  %12203 = and i64 %12195, 4294967295
  store i64 %12203, i64* %RAX.i3176, align 8
  %12204 = and i64 %12202, 4294967295
  store i64 %12204, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12205 = trunc i64 %12195 to i32
  br label %routine_idivl__ecx.exit2812

routine_idivl__ecx.exit2812:                      ; preds = %12201, %12199
  %12206 = phi i64 [ %.pre363, %12199 ], [ %12155, %12201 ]
  %12207 = phi i64 [ %.pre362, %12199 ], [ %12182, %12201 ]
  %12208 = phi i64 [ %.pre361, %12199 ], [ %12191, %12201 ]
  %12209 = phi i32 [ %.pre360, %12199 ], [ %12205, %12201 ]
  %12210 = phi %struct.Memory* [ %12200, %12199 ], [ %12118, %12201 ]
  %12211 = sext i32 %12209 to i64
  store i64 %12211, i64* %R10.i3067, align 8
  %12212 = shl nsw i64 %12211, 1
  %12213 = add i64 %12207, %12212
  %12214 = add i64 %12208, 8
  store i64 %12214, i64* %3, align 8
  %12215 = inttoptr i64 %12213 to i16*
  %12216 = load i16, i16* %12215, align 2
  store i16 %12216, i16* %R9W.i3076, align 2
  %12217 = add i64 %12206, -16
  %12218 = add i64 %12208, 12
  store i64 %12218, i64* %3, align 8
  %12219 = inttoptr i64 %12217 to i64*
  %12220 = load i64, i64* %12219, align 8
  store i64 %12220, i64* %RSI.i766, align 8
  %12221 = add i64 %12220, 1600
  %12222 = add i64 %12208, 19
  store i64 %12222, i64* %3, align 8
  %12223 = inttoptr i64 %12221 to i64*
  %12224 = load i64, i64* %12223, align 8
  store i64 %12224, i64* %RSI.i766, align 8
  %12225 = add i64 %12224, 8
  %12226 = add i64 %12208, 23
  store i64 %12226, i64* %3, align 8
  %12227 = inttoptr i64 %12225 to i64*
  %12228 = load i64, i64* %12227, align 8
  store i64 %12228, i64* %RSI.i766, align 8
  %12229 = add i64 %12206, -52
  %12230 = add i64 %12208, 27
  store i64 %12230, i64* %3, align 8
  %12231 = inttoptr i64 %12229 to i32*
  %12232 = load i32, i32* %12231, align 4
  %12233 = sext i32 %12232 to i64
  store i64 %12233, i64* %R10.i3067, align 8
  %12234 = shl nsw i64 %12233, 3
  %12235 = add i64 %12234, %12228
  %12236 = add i64 %12208, 31
  store i64 %12236, i64* %3, align 8
  %12237 = inttoptr i64 %12235 to i64*
  %12238 = load i64, i64* %12237, align 8
  store i64 %12238, i64* %RSI.i766, align 8
  %12239 = add i64 %12206, -56
  %12240 = add i64 %12208, 35
  store i64 %12240, i64* %3, align 8
  %12241 = inttoptr i64 %12239 to i32*
  %12242 = load i32, i32* %12241, align 4
  %12243 = sext i32 %12242 to i64
  store i64 %12243, i64* %R10.i3067, align 8
  %12244 = shl nsw i64 %12243, 1
  %12245 = add i64 %12244, %12238
  %12246 = add i64 %12208, 40
  store i64 %12246, i64* %3, align 8
  %12247 = inttoptr i64 %12245 to i16*
  store i16 %12216, i16* %12247, align 2
  %12248 = load i64, i64* %RBP.i, align 8
  %12249 = add i64 %12248, -32
  %12250 = load i64, i64* %3, align 8
  %12251 = add i64 %12250, 4
  store i64 %12251, i64* %3, align 8
  %12252 = inttoptr i64 %12249 to i64*
  %12253 = load i64, i64* %12252, align 8
  store i64 %12253, i64* %RSI.i766, align 8
  %12254 = add i64 %12253, 6496
  %12255 = add i64 %12250, 11
  store i64 %12255, i64* %3, align 8
  %12256 = inttoptr i64 %12254 to i64*
  %12257 = load i64, i64* %12256, align 8
  store i64 %12257, i64* %RSI.i766, align 8
  %12258 = add i64 %12250, 14
  store i64 %12258, i64* %3, align 8
  %12259 = inttoptr i64 %12257 to i64*
  %12260 = load i64, i64* %12259, align 8
  store i64 %12260, i64* %RSI.i766, align 8
  %12261 = add i64 %12248, -52
  %12262 = add i64 %12250, 18
  store i64 %12262, i64* %3, align 8
  %12263 = inttoptr i64 %12261 to i32*
  %12264 = load i32, i32* %12263, align 4
  %12265 = sext i32 %12264 to i64
  store i64 %12265, i64* %R10.i3067, align 8
  %12266 = shl nsw i64 %12265, 3
  %12267 = add i64 %12266, %12260
  %12268 = add i64 %12250, 22
  store i64 %12268, i64* %3, align 8
  %12269 = inttoptr i64 %12267 to i64*
  %12270 = load i64, i64* %12269, align 8
  store i64 %12270, i64* %RSI.i766, align 8
  %12271 = add i64 %12248, -56
  %12272 = add i64 %12250, 25
  store i64 %12272, i64* %3, align 8
  %12273 = inttoptr i64 %12271 to i32*
  %12274 = load i32, i32* %12273, align 4
  %12275 = zext i32 %12274 to i64
  store i64 %12275, i64* %RAX.i3176, align 8
  %12276 = sext i32 %12274 to i64
  %12277 = lshr i64 %12276, 32
  store i64 %12277, i64* %RDX.i3742, align 8
  %12278 = load i32, i32* %ECX.i3723, align 4
  %12279 = add i64 %12250, 28
  store i64 %12279, i64* %3, align 8
  %12280 = sext i32 %12278 to i64
  %12281 = shl nuw i64 %12277, 32
  %12282 = or i64 %12281, %12275
  %12283 = sdiv i64 %12282, %12280
  %12284 = shl i64 %12283, 32
  %12285 = ashr exact i64 %12284, 32
  %12286 = icmp eq i64 %12283, %12285
  br i1 %12286, label %12289, label %12287

; <label>:12287:                                  ; preds = %routine_idivl__ecx.exit2812
  %12288 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12279, %struct.Memory* %12210)
  %.pre364 = load i64, i64* %RBP.i, align 8
  %.pre365 = load i64, i64* %3, align 8
  %.pre366 = load i32, i32* %EAX.i3736, align 4
  br label %routine_idivl__ecx.exit2764

; <label>:12289:                                  ; preds = %routine_idivl__ecx.exit2812
  %12290 = srem i64 %12282, %12280
  %12291 = and i64 %12283, 4294967295
  store i64 %12291, i64* %RAX.i3176, align 8
  %12292 = and i64 %12290, 4294967295
  store i64 %12292, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12293 = trunc i64 %12283 to i32
  br label %routine_idivl__ecx.exit2764

routine_idivl__ecx.exit2764:                      ; preds = %12289, %12287
  %12294 = phi i32 [ %.pre366, %12287 ], [ %12293, %12289 ]
  %12295 = phi i64 [ %.pre365, %12287 ], [ %12279, %12289 ]
  %12296 = phi i64 [ %.pre364, %12287 ], [ %12248, %12289 ]
  %12297 = phi %struct.Memory* [ %12288, %12287 ], [ %12210, %12289 ]
  %12298 = add i64 %12296, -56
  %12299 = add i64 %12295, 3
  store i64 %12299, i64* %3, align 8
  %12300 = inttoptr i64 %12298 to i32*
  %12301 = load i32, i32* %12300, align 4
  %12302 = zext i32 %12301 to i64
  store i64 %12302, i64* %RDI.i732, align 8
  %12303 = add i64 %12296, -1028
  %12304 = add i64 %12295, 9
  store i64 %12304, i64* %3, align 8
  %12305 = inttoptr i64 %12303 to i32*
  store i32 %12294, i32* %12305, align 4
  %12306 = load i32, i32* %EDI.i3096, align 4
  %12307 = zext i32 %12306 to i64
  %12308 = load i64, i64* %3, align 8
  store i64 %12307, i64* %RAX.i3176, align 8
  %12309 = sext i32 %12306 to i64
  %12310 = lshr i64 %12309, 32
  store i64 %12310, i64* %RDX.i3742, align 8
  %12311 = load i64, i64* %RBP.i, align 8
  %12312 = add i64 %12311, -1012
  %12313 = add i64 %12308, 9
  store i64 %12313, i64* %3, align 8
  %12314 = inttoptr i64 %12312 to i32*
  %12315 = load i32, i32* %12314, align 4
  %12316 = zext i32 %12315 to i64
  store i64 %12316, i64* %RDI.i732, align 8
  %12317 = add i64 %12308, 11
  store i64 %12317, i64* %3, align 8
  %12318 = sext i32 %12315 to i64
  %12319 = shl nuw i64 %12310, 32
  %12320 = or i64 %12319, %12307
  %12321 = sdiv i64 %12320, %12318
  %12322 = shl i64 %12321, 32
  %12323 = ashr exact i64 %12322, 32
  %12324 = icmp eq i64 %12321, %12323
  br i1 %12324, label %12327, label %12325

; <label>:12325:                                  ; preds = %routine_idivl__ecx.exit2764
  %12326 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12317, %struct.Memory* %12297)
  %.pre367 = load i64, i64* %RAX.i3176, align 8
  %.pre368 = load i64, i64* %3, align 8
  %.pre369 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit2746

; <label>:12327:                                  ; preds = %routine_idivl__ecx.exit2764
  %12328 = srem i64 %12320, %12318
  %12329 = and i64 %12321, 4294967295
  store i64 %12329, i64* %RAX.i3176, align 8
  %12330 = and i64 %12328, 4294967295
  store i64 %12330, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  br label %routine_idivl__edi.exit2746

routine_idivl__edi.exit2746:                      ; preds = %12327, %12325
  %12331 = phi i64 [ %.pre369, %12325 ], [ %12311, %12327 ]
  %12332 = phi i64 [ %.pre368, %12325 ], [ %12317, %12327 ]
  %12333 = phi i64 [ %.pre367, %12325 ], [ %12329, %12327 ]
  %12334 = phi %struct.Memory* [ %12326, %12325 ], [ %12297, %12327 ]
  %.tr223 = trunc i64 %12333 to i32
  %12335 = shl i32 %.tr223, 2
  %12336 = zext i32 %12335 to i64
  store i64 %12336, i64* %RAX.i3176, align 8
  %12337 = lshr i64 %12333, 30
  %12338 = trunc i64 %12337 to i8
  %12339 = and i8 %12338, 1
  store i8 %12339, i8* %19, align 1
  %12340 = and i32 %12335, 252
  %12341 = tail call i32 @llvm.ctpop.i32(i32 %12340)
  %12342 = trunc i32 %12341 to i8
  %12343 = and i8 %12342, 1
  %12344 = xor i8 %12343, 1
  store i8 %12344, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %12345 = icmp eq i32 %12335, 0
  %12346 = zext i1 %12345 to i8
  store i8 %12346, i8* %34, align 1
  %12347 = lshr i32 %.tr223, 29
  %12348 = trunc i32 %12347 to i8
  %12349 = and i8 %12348, 1
  store i8 %12349, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12350 = add i64 %12331, -1028
  %12351 = add i64 %12332, 10
  store i64 %12351, i64* %3, align 8
  %12352 = inttoptr i64 %12350 to i32*
  %12353 = load i32, i32* %12352, align 4
  %12354 = add i32 %12335, %12353
  %12355 = lshr i32 %12354, 31
  %12356 = add i32 %12354, 4
  %12357 = zext i32 %12356 to i64
  store i64 %12357, i64* %10366, align 8
  %12358 = icmp ugt i32 %12354, -5
  %12359 = zext i1 %12358 to i8
  store i8 %12359, i8* %19, align 1
  %12360 = and i32 %12356, 255
  %12361 = tail call i32 @llvm.ctpop.i32(i32 %12360)
  %12362 = trunc i32 %12361 to i8
  %12363 = and i8 %12362, 1
  %12364 = xor i8 %12363, 1
  store i8 %12364, i8* %26, align 1
  %12365 = xor i32 %12356, %12354
  %12366 = lshr i32 %12365, 4
  %12367 = trunc i32 %12366 to i8
  %12368 = and i8 %12367, 1
  store i8 %12368, i8* %31, align 1
  %12369 = icmp eq i32 %12356, 0
  %12370 = zext i1 %12369 to i8
  store i8 %12370, i8* %34, align 1
  %12371 = lshr i32 %12356, 31
  %12372 = trunc i32 %12371 to i8
  store i8 %12372, i8* %37, align 1
  %12373 = xor i32 %12371, %12355
  %12374 = add nuw nsw i32 %12373, %12371
  %12375 = icmp eq i32 %12374, 2
  %12376 = zext i1 %12375 to i8
  store i8 %12376, i8* %43, align 1
  %12377 = sext i32 %12356 to i64
  store i64 %12377, i64* %R10.i3067, align 8
  %12378 = load i64, i64* %RSI.i766, align 8
  %12379 = shl nsw i64 %12377, 3
  %12380 = add i64 %12378, %12379
  %12381 = add i64 %12332, 24
  store i64 %12381, i64* %3, align 8
  %12382 = inttoptr i64 %12380 to i64*
  %12383 = load i64, i64* %12382, align 8
  store i64 %12383, i64* %RSI.i766, align 8
  %12384 = load i64, i64* %RBP.i, align 8
  %12385 = add i64 %12384, -16
  %12386 = add i64 %12332, 28
  store i64 %12386, i64* %3, align 8
  %12387 = inttoptr i64 %12385 to i64*
  %12388 = load i64, i64* %12387, align 8
  store i64 %12388, i64* %R10.i3067, align 8
  %12389 = add i64 %12388, 1608
  %12390 = add i64 %12332, 35
  store i64 %12390, i64* %3, align 8
  %12391 = inttoptr i64 %12389 to i64*
  %12392 = load i64, i64* %12391, align 8
  store i64 %12392, i64* %R10.i3067, align 8
  %12393 = add i64 %12332, 38
  store i64 %12393, i64* %3, align 8
  %12394 = inttoptr i64 %12392 to i64*
  %12395 = load i64, i64* %12394, align 8
  store i64 %12395, i64* %R10.i3067, align 8
  %12396 = add i64 %12384, -52
  %12397 = add i64 %12332, 42
  store i64 %12397, i64* %3, align 8
  %12398 = inttoptr i64 %12396 to i32*
  %12399 = load i32, i32* %12398, align 4
  %12400 = sext i32 %12399 to i64
  store i64 %12400, i64* %RBX.i133, align 8
  %12401 = shl nsw i64 %12400, 3
  %12402 = add i64 %12401, %12395
  %12403 = add i64 %12332, 46
  store i64 %12403, i64* %3, align 8
  %12404 = inttoptr i64 %12402 to i64*
  %12405 = load i64, i64* %12404, align 8
  store i64 %12405, i64* %R10.i3067, align 8
  %12406 = add i64 %12384, -56
  %12407 = add i64 %12332, 50
  store i64 %12407, i64* %3, align 8
  %12408 = inttoptr i64 %12406 to i32*
  %12409 = load i32, i32* %12408, align 4
  %12410 = sext i32 %12409 to i64
  store i64 %12410, i64* %RBX.i133, align 8
  %12411 = shl nsw i64 %12410, 3
  %12412 = add i64 %12411, %12405
  %12413 = add i64 %12332, 54
  store i64 %12413, i64* %3, align 8
  %12414 = inttoptr i64 %12412 to i64*
  store i64 %12383, i64* %12414, align 8
  %12415 = load i64, i64* %RBP.i, align 8
  %12416 = add i64 %12415, -32
  %12417 = load i64, i64* %3, align 8
  %12418 = add i64 %12417, 4
  store i64 %12418, i64* %3, align 8
  %12419 = inttoptr i64 %12416 to i64*
  %12420 = load i64, i64* %12419, align 8
  store i64 %12420, i64* %RSI.i766, align 8
  %12421 = add i64 %12420, 6496
  %12422 = add i64 %12417, 11
  store i64 %12422, i64* %3, align 8
  %12423 = inttoptr i64 %12421 to i64*
  %12424 = load i64, i64* %12423, align 8
  store i64 %12424, i64* %RSI.i766, align 8
  %12425 = add i64 %12424, 8
  %12426 = add i64 %12417, 15
  store i64 %12426, i64* %3, align 8
  %12427 = inttoptr i64 %12425 to i64*
  %12428 = load i64, i64* %12427, align 8
  store i64 %12428, i64* %RSI.i766, align 8
  %12429 = add i64 %12415, -52
  %12430 = add i64 %12417, 19
  store i64 %12430, i64* %3, align 8
  %12431 = inttoptr i64 %12429 to i32*
  %12432 = load i32, i32* %12431, align 4
  %12433 = sext i32 %12432 to i64
  store i64 %12433, i64* %R10.i3067, align 8
  %12434 = shl nsw i64 %12433, 3
  %12435 = add i64 %12434, %12428
  %12436 = add i64 %12417, 23
  store i64 %12436, i64* %3, align 8
  %12437 = inttoptr i64 %12435 to i64*
  %12438 = load i64, i64* %12437, align 8
  store i64 %12438, i64* %RSI.i766, align 8
  %12439 = add i64 %12415, -56
  %12440 = add i64 %12417, 26
  store i64 %12440, i64* %3, align 8
  %12441 = inttoptr i64 %12439 to i32*
  %12442 = load i32, i32* %12441, align 4
  %12443 = zext i32 %12442 to i64
  store i64 %12443, i64* %RAX.i3176, align 8
  %12444 = sext i32 %12442 to i64
  %12445 = lshr i64 %12444, 32
  store i64 %12445, i64* %RDX.i3742, align 8
  %12446 = load i32, i32* %ECX.i3723, align 4
  %12447 = add i64 %12417, 29
  store i64 %12447, i64* %3, align 8
  %12448 = sext i32 %12446 to i64
  %12449 = shl nuw i64 %12445, 32
  %12450 = or i64 %12449, %12443
  %12451 = sdiv i64 %12450, %12448
  %12452 = shl i64 %12451, 32
  %12453 = ashr exact i64 %12452, 32
  %12454 = icmp eq i64 %12451, %12453
  br i1 %12454, label %12457, label %12455

; <label>:12455:                                  ; preds = %routine_idivl__edi.exit2746
  %12456 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12447, %struct.Memory* %12334)
  %.pre370 = load i64, i64* %RBP.i, align 8
  %.pre371 = load i64, i64* %3, align 8
  %.pre372 = load i32, i32* %EAX.i3736, align 4
  br label %routine_idivl__ecx.exit2688

; <label>:12457:                                  ; preds = %routine_idivl__edi.exit2746
  %12458 = srem i64 %12450, %12448
  %12459 = and i64 %12451, 4294967295
  store i64 %12459, i64* %RAX.i3176, align 8
  %12460 = and i64 %12458, 4294967295
  store i64 %12460, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12461 = trunc i64 %12451 to i32
  br label %routine_idivl__ecx.exit2688

routine_idivl__ecx.exit2688:                      ; preds = %12457, %12455
  %12462 = phi i32 [ %.pre372, %12455 ], [ %12461, %12457 ]
  %12463 = phi i64 [ %.pre371, %12455 ], [ %12447, %12457 ]
  %12464 = phi i64 [ %.pre370, %12455 ], [ %12415, %12457 ]
  %12465 = phi %struct.Memory* [ %12456, %12455 ], [ %12334, %12457 ]
  %12466 = add i64 %12464, -56
  %12467 = add i64 %12463, 3
  store i64 %12467, i64* %3, align 8
  %12468 = inttoptr i64 %12466 to i32*
  %12469 = load i32, i32* %12468, align 4
  %12470 = zext i32 %12469 to i64
  store i64 %12470, i64* %RCX.i3745, align 8
  %12471 = add i64 %12464, -1032
  %12472 = add i64 %12463, 9
  store i64 %12472, i64* %3, align 8
  %12473 = inttoptr i64 %12471 to i32*
  store i32 %12462, i32* %12473, align 4
  %12474 = load i32, i32* %ECX.i3723, align 4
  %12475 = zext i32 %12474 to i64
  %12476 = load i64, i64* %3, align 8
  store i64 %12475, i64* %RAX.i3176, align 8
  %12477 = sext i32 %12474 to i64
  %12478 = lshr i64 %12477, 32
  store i64 %12478, i64* %RDX.i3742, align 8
  %12479 = load i32, i32* %EDI.i3096, align 4
  %12480 = add i64 %12476, 5
  store i64 %12480, i64* %3, align 8
  %12481 = sext i32 %12479 to i64
  %12482 = shl nuw i64 %12478, 32
  %12483 = or i64 %12482, %12475
  %12484 = sdiv i64 %12483, %12481
  %12485 = shl i64 %12484, 32
  %12486 = ashr exact i64 %12485, 32
  %12487 = icmp eq i64 %12484, %12486
  br i1 %12487, label %12490, label %12488

; <label>:12488:                                  ; preds = %routine_idivl__ecx.exit2688
  %12489 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12480, %struct.Memory* %12465)
  %.pre373 = load i64, i64* %RAX.i3176, align 8
  %.pre374 = load i64, i64* %3, align 8
  br label %routine_idivl__edi.exit

; <label>:12490:                                  ; preds = %routine_idivl__ecx.exit2688
  %12491 = srem i64 %12483, %12481
  %12492 = and i64 %12484, 4294967295
  store i64 %12492, i64* %RAX.i3176, align 8
  %12493 = and i64 %12491, 4294967295
  store i64 %12493, i64* %10364, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  br label %routine_idivl__edi.exit

routine_idivl__edi.exit:                          ; preds = %12490, %12488
  %12494 = phi i64 [ %.pre374, %12488 ], [ %12480, %12490 ]
  %12495 = phi i64 [ %.pre373, %12488 ], [ %12492, %12490 ]
  %12496 = phi %struct.Memory* [ %12489, %12488 ], [ %12465, %12490 ]
  %.tr226 = trunc i64 %12495 to i32
  %12497 = shl i32 %.tr226, 2
  %12498 = zext i32 %12497 to i64
  store i64 %12498, i64* %RAX.i3176, align 8
  %12499 = lshr i64 %12495, 30
  %12500 = trunc i64 %12499 to i8
  %12501 = and i8 %12500, 1
  store i8 %12501, i8* %19, align 1
  %12502 = and i32 %12497, 252
  %12503 = tail call i32 @llvm.ctpop.i32(i32 %12502)
  %12504 = trunc i32 %12503 to i8
  %12505 = and i8 %12504, 1
  %12506 = xor i8 %12505, 1
  store i8 %12506, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %12507 = icmp eq i32 %12497, 0
  %12508 = zext i1 %12507 to i8
  store i8 %12508, i8* %34, align 1
  %12509 = lshr i32 %.tr226, 29
  %12510 = trunc i32 %12509 to i8
  %12511 = and i8 %12510, 1
  store i8 %12511, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12512 = load i64, i64* %RBP.i, align 8
  %12513 = add i64 %12512, -1032
  %12514 = add i64 %12494, 9
  store i64 %12514, i64* %3, align 8
  %12515 = inttoptr i64 %12513 to i32*
  %12516 = load i32, i32* %12515, align 4
  %12517 = add i32 %12497, %12516
  %12518 = lshr i32 %12517, 31
  %12519 = add i32 %12517, 4
  %12520 = zext i32 %12519 to i64
  store i64 %12520, i64* %RCX.i3745, align 8
  %12521 = icmp ugt i32 %12517, -5
  %12522 = zext i1 %12521 to i8
  store i8 %12522, i8* %19, align 1
  %12523 = and i32 %12519, 255
  %12524 = tail call i32 @llvm.ctpop.i32(i32 %12523)
  %12525 = trunc i32 %12524 to i8
  %12526 = and i8 %12525, 1
  %12527 = xor i8 %12526, 1
  store i8 %12527, i8* %26, align 1
  %12528 = xor i32 %12519, %12517
  %12529 = lshr i32 %12528, 4
  %12530 = trunc i32 %12529 to i8
  %12531 = and i8 %12530, 1
  store i8 %12531, i8* %31, align 1
  %12532 = icmp eq i32 %12519, 0
  %12533 = zext i1 %12532 to i8
  store i8 %12533, i8* %34, align 1
  %12534 = lshr i32 %12519, 31
  %12535 = trunc i32 %12534 to i8
  store i8 %12535, i8* %37, align 1
  %12536 = xor i32 %12534, %12518
  %12537 = add nuw nsw i32 %12536, %12534
  %12538 = icmp eq i32 %12537, 2
  %12539 = zext i1 %12538 to i8
  store i8 %12539, i8* %43, align 1
  %12540 = sext i32 %12519 to i64
  store i64 %12540, i64* %R10.i3067, align 8
  %12541 = load i64, i64* %RSI.i766, align 8
  %12542 = shl nsw i64 %12540, 3
  %12543 = add i64 %12541, %12542
  %12544 = add i64 %12494, 21
  store i64 %12544, i64* %3, align 8
  %12545 = inttoptr i64 %12543 to i64*
  %12546 = load i64, i64* %12545, align 8
  store i64 %12546, i64* %RSI.i766, align 8
  %12547 = add i64 %12512, -16
  %12548 = add i64 %12494, 25
  store i64 %12548, i64* %3, align 8
  %12549 = inttoptr i64 %12547 to i64*
  %12550 = load i64, i64* %12549, align 8
  store i64 %12550, i64* %R10.i3067, align 8
  %12551 = add i64 %12550, 1608
  %12552 = add i64 %12494, 32
  store i64 %12552, i64* %3, align 8
  %12553 = inttoptr i64 %12551 to i64*
  %12554 = load i64, i64* %12553, align 8
  store i64 %12554, i64* %R10.i3067, align 8
  %12555 = add i64 %12554, 8
  %12556 = add i64 %12494, 36
  store i64 %12556, i64* %3, align 8
  %12557 = inttoptr i64 %12555 to i64*
  %12558 = load i64, i64* %12557, align 8
  store i64 %12558, i64* %R10.i3067, align 8
  %12559 = load i64, i64* %RBP.i, align 8
  %12560 = add i64 %12559, -52
  %12561 = add i64 %12494, 40
  store i64 %12561, i64* %3, align 8
  %12562 = inttoptr i64 %12560 to i32*
  %12563 = load i32, i32* %12562, align 4
  %12564 = sext i32 %12563 to i64
  store i64 %12564, i64* %RBX.i133, align 8
  %12565 = shl nsw i64 %12564, 3
  %12566 = add i64 %12565, %12558
  %12567 = add i64 %12494, 44
  store i64 %12567, i64* %3, align 8
  %12568 = inttoptr i64 %12566 to i64*
  %12569 = load i64, i64* %12568, align 8
  store i64 %12569, i64* %R10.i3067, align 8
  %12570 = add i64 %12559, -56
  %12571 = add i64 %12494, 48
  store i64 %12571, i64* %3, align 8
  %12572 = inttoptr i64 %12570 to i32*
  %12573 = load i32, i32* %12572, align 4
  %12574 = sext i32 %12573 to i64
  store i64 %12574, i64* %RBX.i133, align 8
  %12575 = shl nsw i64 %12574, 3
  %12576 = add i64 %12575, %12569
  %12577 = add i64 %12494, 52
  store i64 %12577, i64* %3, align 8
  %12578 = inttoptr i64 %12576 to i64*
  store i64 %12546, i64* %12578, align 8
  %12579 = load i64, i64* %RBP.i, align 8
  %12580 = add i64 %12579, -32
  %12581 = load i64, i64* %3, align 8
  %12582 = add i64 %12581, 4
  store i64 %12582, i64* %3, align 8
  %12583 = inttoptr i64 %12580 to i64*
  %12584 = load i64, i64* %12583, align 8
  store i64 %12584, i64* %RSI.i766, align 8
  %12585 = add i64 %12584, 6536
  %12586 = add i64 %12581, 11
  store i64 %12586, i64* %3, align 8
  %12587 = inttoptr i64 %12585 to i64*
  %12588 = load i64, i64* %12587, align 8
  store i64 %12588, i64* %RSI.i766, align 8
  %12589 = add i64 %12588, 6376
  %12590 = add i64 %12581, 17
  store i64 %12590, i64* %3, align 8
  %12591 = inttoptr i64 %12589 to i32*
  %12592 = load i32, i32* %12591, align 4
  %12593 = zext i32 %12592 to i64
  store i64 %12593, i64* %RAX.i3176, align 8
  %12594 = add i64 %12579, -16
  %12595 = add i64 %12581, 21
  store i64 %12595, i64* %3, align 8
  %12596 = inttoptr i64 %12594 to i64*
  %12597 = load i64, i64* %12596, align 8
  store i64 %12597, i64* %RSI.i766, align 8
  %12598 = add i64 %12597, 4864
  %12599 = add i64 %12581, 27
  store i64 %12599, i64* %3, align 8
  %12600 = inttoptr i64 %12598 to i32*
  store i32 %12592, i32* %12600, align 4
  %.pre375 = load i64, i64* %3, align 8
  br label %block_.L_45811e

block_.L_45811e:                                  ; preds = %routine_idivl__edi.exit, %routine_idivl__edi.exit3174
  %12601 = phi i64 [ %.pre375, %routine_idivl__edi.exit ], [ %11656, %routine_idivl__edi.exit3174 ]
  %MEMORY.86 = phi %struct.Memory* [ %12496, %routine_idivl__edi.exit ], [ %11546, %routine_idivl__edi.exit3174 ]
  %12602 = add i64 %12601, 5
  store i64 %12602, i64* %3, align 8
  %.pre376 = load i64, i64* %RBP.i, align 8
  br label %block_.L_458123

block_.L_458123:                                  ; preds = %block_.L_45811e, %block_457aef
  %12603 = phi i64 [ %10523, %block_457aef ], [ %.pre376, %block_.L_45811e ]
  %12604 = phi i64 [ %10559, %block_457aef ], [ %12602, %block_.L_45811e ]
  %MEMORY.87 = phi %struct.Memory* [ %10494, %block_457aef ], [ %MEMORY.86, %block_.L_45811e ]
  %12605 = add i64 %12603, -52
  %12606 = add i64 %12604, 8
  store i64 %12606, i64* %3, align 8
  %12607 = inttoptr i64 %12605 to i32*
  %12608 = load i32, i32* %12607, align 4
  %12609 = add i32 %12608, 1
  %12610 = zext i32 %12609 to i64
  store i64 %12610, i64* %RAX.i3176, align 8
  %12611 = icmp eq i32 %12608, -1
  %12612 = icmp eq i32 %12609, 0
  %12613 = or i1 %12611, %12612
  %12614 = zext i1 %12613 to i8
  store i8 %12614, i8* %19, align 1
  %12615 = and i32 %12609, 255
  %12616 = tail call i32 @llvm.ctpop.i32(i32 %12615)
  %12617 = trunc i32 %12616 to i8
  %12618 = and i8 %12617, 1
  %12619 = xor i8 %12618, 1
  store i8 %12619, i8* %26, align 1
  %12620 = xor i32 %12609, %12608
  %12621 = lshr i32 %12620, 4
  %12622 = trunc i32 %12621 to i8
  %12623 = and i8 %12622, 1
  store i8 %12623, i8* %31, align 1
  %12624 = zext i1 %12612 to i8
  store i8 %12624, i8* %34, align 1
  %12625 = lshr i32 %12609, 31
  %12626 = trunc i32 %12625 to i8
  store i8 %12626, i8* %37, align 1
  %12627 = lshr i32 %12608, 31
  %12628 = xor i32 %12625, %12627
  %12629 = add nuw nsw i32 %12628, %12625
  %12630 = icmp eq i32 %12629, 2
  %12631 = zext i1 %12630 to i8
  store i8 %12631, i8* %43, align 1
  %12632 = add i64 %12604, 14
  store i64 %12632, i64* %3, align 8
  store i32 %12609, i32* %12607, align 4
  %12633 = load i64, i64* %3, align 8
  %12634 = add i64 %12633, -1645
  store i64 %12634, i64* %3, align 8
  br label %block_.L_457ac4

block_.L_458136:                                  ; preds = %routine_idivl__esi.exit3694
  %12635 = add i64 %10523, -56
  %12636 = add i64 %10522, 8
  store i64 %12636, i64* %3, align 8
  %12637 = inttoptr i64 %12635 to i32*
  %12638 = load i32, i32* %12637, align 4
  %12639 = add i32 %12638, 1
  %12640 = zext i32 %12639 to i64
  store i64 %12640, i64* %RAX.i3176, align 8
  %12641 = icmp eq i32 %12638, -1
  %12642 = icmp eq i32 %12639, 0
  %12643 = or i1 %12641, %12642
  %12644 = zext i1 %12643 to i8
  store i8 %12644, i8* %19, align 1
  %12645 = and i32 %12639, 255
  %12646 = tail call i32 @llvm.ctpop.i32(i32 %12645)
  %12647 = trunc i32 %12646 to i8
  %12648 = and i8 %12647, 1
  %12649 = xor i8 %12648, 1
  store i8 %12649, i8* %26, align 1
  %12650 = xor i32 %12639, %12638
  %12651 = lshr i32 %12650, 4
  %12652 = trunc i32 %12651 to i8
  %12653 = and i8 %12652, 1
  store i8 %12653, i8* %31, align 1
  %12654 = zext i1 %12642 to i8
  store i8 %12654, i8* %34, align 1
  %12655 = lshr i32 %12639, 31
  %12656 = trunc i32 %12655 to i8
  store i8 %12656, i8* %37, align 1
  %12657 = lshr i32 %12638, 31
  %12658 = xor i32 %12655, %12657
  %12659 = add nuw nsw i32 %12658, %12655
  %12660 = icmp eq i32 %12659, 2
  %12661 = zext i1 %12660 to i8
  store i8 %12661, i8* %43, align 1
  %12662 = add i64 %10522, 14
  store i64 %12662, i64* %3, align 8
  store i32 %12639, i32* %12637, align 4
  %12663 = load i64, i64* %3, align 8
  %12664 = add i64 %12663, -1714
  store i64 %12664, i64* %3, align 8
  br label %block_.L_457a92

block_.L_458149:                                  ; preds = %routine_idivl__esi.exit3726
  %12665 = add i64 %10442, 5
  store i64 %12665, i64* %3, align 8
  br label %block_.L_45814e

block_.L_45814e:                                  ; preds = %block_.L_457a79, %block_.L_458149
  %12666 = phi i64 [ %10358, %block_.L_457a79 ], [ %12665, %block_.L_458149 ]
  %MEMORY.88 = phi %struct.Memory* [ %MEMORY.82, %block_.L_457a79 ], [ %10414, %block_.L_458149 ]
  %12667 = add i64 %12666, 5
  store i64 %12667, i64* %3, align 8
  br label %block_.L_458153

block_.L_458153:                                  ; preds = %block_.L_45814e, %block_457a64
  %12668 = phi i64 [ %12667, %block_.L_45814e ], [ %10342, %block_457a64 ]
  %MEMORY.89 = phi %struct.Memory* [ %MEMORY.88, %block_.L_45814e ], [ %MEMORY.82, %block_457a64 ]
  %12669 = load i64, i64* %RBP.i, align 8
  %12670 = add i64 %12669, -56
  %12671 = add i64 %12668, 7
  store i64 %12671, i64* %3, align 8
  %12672 = inttoptr i64 %12670 to i32*
  store i32 0, i32* %12672, align 4
  %12673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i2595 = getelementptr inbounds %union.anon, %union.anon* %12673, i64 0, i32 0
  %12674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i2592 = getelementptr inbounds %union.anon, %union.anon* %12674, i64 0, i32 0
  %EAX.i2586 = bitcast %union.anon* %101 to i32*
  %ESI.i2583 = bitcast %union.anon* %50 to i32*
  %12675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %ECX.i2572 = bitcast %union.anon* %12673 to i32*
  %SI.i2438 = bitcast %union.anon* %50 to i16*
  %AL.i1196 = bitcast %union.anon* %101 to i8*
  %CL.i1197 = bitcast %union.anon* %12673 to i8*
  %DL.i1108 = bitcast %union.anon* %12674 to i8*
  %DX.i1627 = bitcast %union.anon* %12674 to i16*
  %.pre377 = load i64, i64* %3, align 8
  br label %block_.L_45815a

block_.L_45815a:                                  ; preds = %block_.L_458bcc, %block_.L_458153
  %12676 = phi i64 [ %.pre377, %block_.L_458153 ], [ %15481, %block_.L_458bcc ]
  %MEMORY.90 = phi %struct.Memory* [ %MEMORY.89, %block_.L_458153 ], [ %12803, %block_.L_458bcc ]
  store i64 4, i64* %RAX.i3176, align 8
  %12677 = load i64, i64* %RBP.i, align 8
  %12678 = add i64 %12677, -56
  %12679 = add i64 %12676, 8
  store i64 %12679, i64* %3, align 8
  %12680 = inttoptr i64 %12678 to i32*
  %12681 = load i32, i32* %12680, align 4
  %12682 = zext i32 %12681 to i64
  store i64 %12682, i64* %RCX.i2595, align 8
  %12683 = add i64 %12677, -32
  %12684 = add i64 %12676, 12
  store i64 %12684, i64* %3, align 8
  %12685 = inttoptr i64 %12683 to i64*
  %12686 = load i64, i64* %12685, align 8
  store i64 %12686, i64* %RDX.i2592, align 8
  %12687 = add i64 %12686, 6396
  %12688 = add i64 %12676, 18
  store i64 %12688, i64* %3, align 8
  %12689 = inttoptr i64 %12687 to i32*
  %12690 = load i32, i32* %12689, align 4
  %12691 = zext i32 %12690 to i64
  store i64 %12691, i64* %RSI.i766, align 8
  %12692 = add i64 %12677, -1036
  %12693 = add i64 %12676, 24
  store i64 %12693, i64* %3, align 8
  %12694 = inttoptr i64 %12692 to i32*
  store i32 4, i32* %12694, align 4
  %12695 = load i32, i32* %ESI.i2583, align 4
  %12696 = zext i32 %12695 to i64
  %12697 = load i64, i64* %3, align 8
  store i64 %12696, i64* %RAX.i3176, align 8
  %12698 = sext i32 %12695 to i64
  %12699 = lshr i64 %12698, 32
  store i64 %12699, i64* %12675, align 8
  %12700 = load i64, i64* %RBP.i, align 8
  %12701 = add i64 %12700, -1036
  %12702 = add i64 %12697, 9
  store i64 %12702, i64* %3, align 8
  %12703 = inttoptr i64 %12701 to i32*
  %12704 = load i32, i32* %12703, align 4
  %12705 = zext i32 %12704 to i64
  store i64 %12705, i64* %RSI.i766, align 8
  %12706 = add i64 %12697, 11
  store i64 %12706, i64* %3, align 8
  %12707 = sext i32 %12704 to i64
  %12708 = shl nuw i64 %12699, 32
  %12709 = or i64 %12708, %12696
  %12710 = sdiv i64 %12709, %12707
  %12711 = shl i64 %12710, 32
  %12712 = ashr exact i64 %12711, 32
  %12713 = icmp eq i64 %12710, %12712
  br i1 %12713, label %12716, label %12714

; <label>:12714:                                  ; preds = %block_.L_45815a
  %12715 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12706, %struct.Memory* %MEMORY.90)
  %.pre378 = load i32, i32* %EAX.i2586, align 4
  %.pre379 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit2575

; <label>:12716:                                  ; preds = %block_.L_45815a
  %12717 = srem i64 %12709, %12707
  %12718 = and i64 %12710, 4294967295
  store i64 %12718, i64* %RAX.i3176, align 8
  %12719 = and i64 %12717, 4294967295
  store i64 %12719, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12720 = trunc i64 %12710 to i32
  br label %routine_idivl__esi.exit2575

routine_idivl__esi.exit2575:                      ; preds = %12716, %12714
  %12721 = phi i64 [ %.pre379, %12714 ], [ %12706, %12716 ]
  %12722 = phi i32 [ %.pre378, %12714 ], [ %12720, %12716 ]
  %12723 = phi %struct.Memory* [ %12715, %12714 ], [ %MEMORY.90, %12716 ]
  %12724 = load i32, i32* %ECX.i2572, align 4
  %12725 = sub i32 %12724, %12722
  %12726 = icmp ult i32 %12724, %12722
  %12727 = zext i1 %12726 to i8
  store i8 %12727, i8* %19, align 1
  %12728 = and i32 %12725, 255
  %12729 = tail call i32 @llvm.ctpop.i32(i32 %12728)
  %12730 = trunc i32 %12729 to i8
  %12731 = and i8 %12730, 1
  %12732 = xor i8 %12731, 1
  store i8 %12732, i8* %26, align 1
  %12733 = xor i32 %12722, %12724
  %12734 = xor i32 %12733, %12725
  %12735 = lshr i32 %12734, 4
  %12736 = trunc i32 %12735 to i8
  %12737 = and i8 %12736, 1
  store i8 %12737, i8* %31, align 1
  %12738 = icmp eq i32 %12725, 0
  %12739 = zext i1 %12738 to i8
  store i8 %12739, i8* %34, align 1
  %12740 = lshr i32 %12725, 31
  %12741 = trunc i32 %12740 to i8
  store i8 %12741, i8* %37, align 1
  %12742 = lshr i32 %12724, 31
  %12743 = lshr i32 %12722, 31
  %12744 = xor i32 %12743, %12742
  %12745 = xor i32 %12740, %12742
  %12746 = add nuw nsw i32 %12745, %12744
  %12747 = icmp eq i32 %12746, 2
  %12748 = zext i1 %12747 to i8
  store i8 %12748, i8* %43, align 1
  %12749 = icmp ne i8 %12741, 0
  %12750 = xor i1 %12749, %12747
  %.v671 = select i1 %12750, i64 8, i64 2658
  %12751 = add i64 %12721, %.v671
  store i64 %12751, i64* %3, align 8
  br i1 %12750, label %block_458185, label %block_.L_458bdf

block_458185:                                     ; preds = %routine_idivl__esi.exit2575
  %12752 = load i64, i64* %RBP.i, align 8
  %12753 = add i64 %12752, -52
  %12754 = add i64 %12751, 7
  store i64 %12754, i64* %3, align 8
  %12755 = inttoptr i64 %12753 to i32*
  store i32 0, i32* %12755, align 4
  %.pre412 = load i64, i64* %3, align 8
  br label %block_.L_45818c

block_.L_45818c:                                  ; preds = %block_.L_458bb9, %block_458185
  %12756 = phi i64 [ %.pre412, %block_458185 ], [ %15450, %block_.L_458bb9 ]
  %MEMORY.91 = phi %struct.Memory* [ %12723, %block_458185 ], [ %MEMORY.113, %block_.L_458bb9 ]
  store i64 4, i64* %RAX.i3176, align 8
  %12757 = load i64, i64* %RBP.i, align 8
  %12758 = add i64 %12757, -52
  %12759 = add i64 %12756, 8
  store i64 %12759, i64* %3, align 8
  %12760 = inttoptr i64 %12758 to i32*
  %12761 = load i32, i32* %12760, align 4
  %12762 = zext i32 %12761 to i64
  store i64 %12762, i64* %RCX.i2595, align 8
  %12763 = add i64 %12757, -32
  %12764 = add i64 %12756, 12
  store i64 %12764, i64* %3, align 8
  %12765 = inttoptr i64 %12763 to i64*
  %12766 = load i64, i64* %12765, align 8
  store i64 %12766, i64* %RDX.i2592, align 8
  %12767 = add i64 %12766, 6392
  %12768 = add i64 %12756, 18
  store i64 %12768, i64* %3, align 8
  %12769 = inttoptr i64 %12767 to i32*
  %12770 = load i32, i32* %12769, align 4
  %12771 = zext i32 %12770 to i64
  store i64 %12771, i64* %RSI.i766, align 8
  %12772 = add i64 %12757, -1040
  %12773 = add i64 %12756, 24
  store i64 %12773, i64* %3, align 8
  %12774 = inttoptr i64 %12772 to i32*
  store i32 4, i32* %12774, align 4
  %12775 = load i32, i32* %ESI.i2583, align 4
  %12776 = zext i32 %12775 to i64
  %12777 = load i64, i64* %3, align 8
  store i64 %12776, i64* %RAX.i3176, align 8
  %12778 = sext i32 %12775 to i64
  %12779 = lshr i64 %12778, 32
  store i64 %12779, i64* %12675, align 8
  %12780 = load i64, i64* %RBP.i, align 8
  %12781 = add i64 %12780, -1040
  %12782 = add i64 %12777, 9
  store i64 %12782, i64* %3, align 8
  %12783 = inttoptr i64 %12781 to i32*
  %12784 = load i32, i32* %12783, align 4
  %12785 = zext i32 %12784 to i64
  store i64 %12785, i64* %RSI.i766, align 8
  %12786 = add i64 %12777, 11
  store i64 %12786, i64* %3, align 8
  %12787 = sext i32 %12784 to i64
  %12788 = shl nuw i64 %12779, 32
  %12789 = or i64 %12788, %12776
  %12790 = sdiv i64 %12789, %12787
  %12791 = shl i64 %12790, 32
  %12792 = ashr exact i64 %12791, 32
  %12793 = icmp eq i64 %12790, %12792
  br i1 %12793, label %12796, label %12794

; <label>:12794:                                  ; preds = %block_.L_45818c
  %12795 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12786, %struct.Memory* %MEMORY.91)
  %.pre413 = load i32, i32* %EAX.i2586, align 4
  %.pre414 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit2543

; <label>:12796:                                  ; preds = %block_.L_45818c
  %12797 = srem i64 %12789, %12787
  %12798 = and i64 %12790, 4294967295
  store i64 %12798, i64* %RAX.i3176, align 8
  %12799 = and i64 %12797, 4294967295
  store i64 %12799, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12800 = trunc i64 %12790 to i32
  br label %routine_idivl__esi.exit2543

routine_idivl__esi.exit2543:                      ; preds = %12796, %12794
  %12801 = phi i64 [ %.pre414, %12794 ], [ %12786, %12796 ]
  %12802 = phi i32 [ %.pre413, %12794 ], [ %12800, %12796 ]
  %12803 = phi %struct.Memory* [ %12795, %12794 ], [ %MEMORY.91, %12796 ]
  %12804 = load i32, i32* %ECX.i2572, align 4
  %12805 = sub i32 %12804, %12802
  %12806 = icmp ult i32 %12804, %12802
  %12807 = zext i1 %12806 to i8
  store i8 %12807, i8* %19, align 1
  %12808 = and i32 %12805, 255
  %12809 = tail call i32 @llvm.ctpop.i32(i32 %12808)
  %12810 = trunc i32 %12809 to i8
  %12811 = and i8 %12810, 1
  %12812 = xor i8 %12811, 1
  store i8 %12812, i8* %26, align 1
  %12813 = xor i32 %12802, %12804
  %12814 = xor i32 %12813, %12805
  %12815 = lshr i32 %12814, 4
  %12816 = trunc i32 %12815 to i8
  %12817 = and i8 %12816, 1
  store i8 %12817, i8* %31, align 1
  %12818 = icmp eq i32 %12805, 0
  %12819 = zext i1 %12818 to i8
  store i8 %12819, i8* %34, align 1
  %12820 = lshr i32 %12805, 31
  %12821 = trunc i32 %12820 to i8
  store i8 %12821, i8* %37, align 1
  %12822 = lshr i32 %12804, 31
  %12823 = lshr i32 %12802, 31
  %12824 = xor i32 %12823, %12822
  %12825 = xor i32 %12820, %12822
  %12826 = add nuw nsw i32 %12825, %12824
  %12827 = icmp eq i32 %12826, 2
  %12828 = zext i1 %12827 to i8
  store i8 %12828, i8* %43, align 1
  %12829 = icmp ne i8 %12821, 0
  %12830 = xor i1 %12829, %12827
  %.v696 = select i1 %12830, i64 8, i64 2589
  %12831 = add i64 %12801, %.v696
  store i64 %12831, i64* %3, align 8
  br i1 %12830, label %block_4581b7, label %block_.L_458bcc

block_4581b7:                                     ; preds = %routine_idivl__esi.exit2543
  %12832 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %12832, i64* %RAX.i3176, align 8
  %12833 = add i64 %12832, 1148
  %12834 = add i64 %12831, 15
  store i64 %12834, i64* %3, align 8
  %12835 = inttoptr i64 %12833 to i32*
  %12836 = load i32, i32* %12835, align 4
  store i8 0, i8* %19, align 1
  %12837 = and i32 %12836, 255
  %12838 = tail call i32 @llvm.ctpop.i32(i32 %12837)
  %12839 = trunc i32 %12838 to i8
  %12840 = and i8 %12839, 1
  %12841 = xor i8 %12840, 1
  store i8 %12841, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %12842 = icmp eq i32 %12836, 0
  %12843 = zext i1 %12842 to i8
  store i8 %12843, i8* %34, align 1
  %12844 = lshr i32 %12836, 31
  %12845 = trunc i32 %12844 to i8
  store i8 %12845, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v697 = select i1 %12842, i64 42, i64 21
  %12846 = add i64 %12831, %.v697
  store i64 %12846, i64* %3, align 8
  br i1 %12842, label %block_.L_4581e1, label %block_4581cc

block_4581cc:                                     ; preds = %block_4581b7
  store i64 %12832, i64* %RAX.i3176, align 8
  %12847 = add i64 %12832, 1156
  %12848 = add i64 %12846, 15
  store i64 %12848, i64* %3, align 8
  %12849 = inttoptr i64 %12847 to i32*
  %12850 = load i32, i32* %12849, align 4
  store i8 0, i8* %19, align 1
  %12851 = and i32 %12850, 255
  %12852 = tail call i32 @llvm.ctpop.i32(i32 %12851)
  %12853 = trunc i32 %12852 to i8
  %12854 = and i8 %12853, 1
  %12855 = xor i8 %12854, 1
  store i8 %12855, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %12856 = icmp eq i32 %12850, 0
  %12857 = zext i1 %12856 to i8
  store i8 %12857, i8* %34, align 1
  %12858 = lshr i32 %12850, 31
  %12859 = trunc i32 %12858 to i8
  store i8 %12859, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v698 = select i1 %12856, i64 1550, i64 21
  %12860 = add i64 %12846, %.v698
  store i64 %12860, i64* %3, align 8
  br i1 %12856, label %block_.L_4587da, label %block_.L_4581e1

block_.L_4581e1:                                  ; preds = %block_4581cc, %block_4581b7
  %12861 = phi i64 [ %12860, %block_4581cc ], [ %12846, %block_4581b7 ]
  %12862 = load i64, i64* %RBP.i, align 8
  %12863 = add i64 %12862, -16
  %12864 = add i64 %12861, 4
  store i64 %12864, i64* %3, align 8
  %12865 = inttoptr i64 %12863 to i64*
  %12866 = load i64, i64* %12865, align 8
  store i64 %12866, i64* %RAX.i3176, align 8
  %12867 = add i64 %12866, 1616
  %12868 = add i64 %12861, 11
  store i64 %12868, i64* %3, align 8
  %12869 = inttoptr i64 %12867 to i64*
  %12870 = load i64, i64* %12869, align 8
  store i64 %12870, i64* %RAX.i3176, align 8
  %12871 = add i64 %12861, 14
  store i64 %12871, i64* %3, align 8
  %12872 = inttoptr i64 %12870 to i64*
  %12873 = load i64, i64* %12872, align 8
  store i64 %12873, i64* %RAX.i3176, align 8
  %12874 = add i64 %12862, -52
  %12875 = add i64 %12861, 17
  store i64 %12875, i64* %3, align 8
  %12876 = inttoptr i64 %12874 to i32*
  %12877 = load i32, i32* %12876, align 4
  %12878 = and i32 %12877, 2
  %12879 = zext i32 %12878 to i64
  store i64 %12879, i64* %RCX.i2595, align 8
  store i8 0, i8* %19, align 1
  %12880 = tail call i32 @llvm.ctpop.i32(i32 %12878)
  %12881 = trunc i32 %12880 to i8
  %12882 = xor i8 %12881, 1
  store i8 %12882, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit590 = lshr exact i32 %12878, 1
  %12883 = trunc i32 %.lobit590 to i8
  %12884 = xor i8 %12883, 1
  store i8 %12884, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12885 = add i64 %12862, -1048
  %12886 = add i64 %12861, 30
  store i64 %12886, i64* %3, align 8
  %12887 = inttoptr i64 %12885 to i64*
  store i64 %12873, i64* %12887, align 8
  %12888 = load i64, i64* %3, align 8
  %12889 = load i8, i8* %34, align 1
  %12890 = icmp ne i8 %12889, 0
  %.v753 = select i1 %12890, i64 23, i64 6
  %12891 = add i64 %12888, %.v753
  %cmpBr_4581ff = icmp eq i8 %12889, 1
  %12892 = load i64, i64* %RBP.i, align 8
  %12893 = add i64 %12892, -52
  %12894 = add i64 %12891, 3
  store i64 %12894, i64* %3, align 8
  %12895 = inttoptr i64 %12893 to i32*
  %12896 = load i32, i32* %12895, align 4
  %12897 = zext i32 %12896 to i64
  store i64 %12897, i64* %RAX.i3176, align 8
  %12898 = add i64 %12891, 6
  store i64 %12898, i64* %3, align 8
  br i1 %cmpBr_4581ff, label %block_.L_458216, label %block_458205

block_458205:                                     ; preds = %block_.L_4581e1
  %12899 = or i64 %12897, 1
  %12900 = trunc i64 %12899 to i32
  store i64 %12899, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %12901 = and i32 %12900, 255
  %12902 = tail call i32 @llvm.ctpop.i32(i32 %12901)
  %12903 = trunc i32 %12902 to i8
  %12904 = and i8 %12903, 1
  %12905 = xor i8 %12904, 1
  store i8 %12905, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %12906 = lshr i32 %12900, 31
  %12907 = trunc i32 %12906 to i8
  store i8 %12907, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %12908 = add i64 %12892, -1052
  %12909 = add i64 %12891, 12
  store i64 %12909, i64* %3, align 8
  %12910 = inttoptr i64 %12908 to i32*
  store i32 %12900, i32* %12910, align 4
  %12911 = load i64, i64* %3, align 8
  %12912 = add i64 %12911, 17
  store i64 %12912, i64* %3, align 8
  br label %block_.L_458222

block_.L_458216:                                  ; preds = %block_.L_4581e1
  %12913 = and i64 %12897, 4294967294
  store i64 %12913, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %12914 = and i32 %12896, 254
  %12915 = tail call i32 @llvm.ctpop.i32(i32 %12914)
  %12916 = trunc i32 %12915 to i8
  %12917 = and i8 %12916, 1
  %12918 = xor i8 %12917, 1
  store i8 %12918, i8* %26, align 1
  %12919 = icmp ult i32 %12896, 2
  %12920 = zext i1 %12919 to i8
  store i8 %12920, i8* %34, align 1
  %12921 = lshr i32 %12896, 31
  %12922 = trunc i32 %12921 to i8
  store i8 %12922, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %12923 = add i64 %12892, -1052
  %12924 = trunc i64 %12913 to i32
  %12925 = add i64 %12891, 12
  store i64 %12925, i64* %3, align 8
  %12926 = inttoptr i64 %12923 to i32*
  store i32 %12924, i32* %12926, align 4
  %.pre415 = load i64, i64* %3, align 8
  br label %block_.L_458222

block_.L_458222:                                  ; preds = %block_.L_458216, %block_458205
  %12927 = phi i64 [ %.pre415, %block_.L_458216 ], [ %12912, %block_458205 ]
  %12928 = load i64, i64* %RBP.i, align 8
  %12929 = add i64 %12928, -1052
  %12930 = add i64 %12927, 6
  store i64 %12930, i64* %3, align 8
  %12931 = inttoptr i64 %12929 to i32*
  %12932 = load i32, i32* %12931, align 4
  %12933 = zext i32 %12932 to i64
  store i64 %12933, i64* %RAX.i3176, align 8
  %12934 = sext i32 %12932 to i64
  store i64 %12934, i64* %RCX.i2595, align 8
  %12935 = add i64 %12928, -1048
  %12936 = add i64 %12927, 16
  store i64 %12936, i64* %3, align 8
  %12937 = inttoptr i64 %12935 to i64*
  %12938 = load i64, i64* %12937, align 8
  store i64 %12938, i64* %RDX.i2592, align 8
  %12939 = shl nsw i64 %12934, 3
  %12940 = add i64 %12939, %12938
  %12941 = add i64 %12927, 20
  store i64 %12941, i64* %3, align 8
  %12942 = inttoptr i64 %12940 to i64*
  %12943 = load i64, i64* %12942, align 8
  store i64 %12943, i64* %RCX.i2595, align 8
  %12944 = add i64 %12928, -56
  %12945 = add i64 %12927, 23
  store i64 %12945, i64* %3, align 8
  %12946 = inttoptr i64 %12944 to i32*
  %12947 = load i32, i32* %12946, align 4
  %12948 = and i32 %12947, 2
  %12949 = zext i32 %12948 to i64
  store i64 %12949, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %12950 = tail call i32 @llvm.ctpop.i32(i32 %12948)
  %12951 = trunc i32 %12950 to i8
  %12952 = xor i8 %12951, 1
  store i8 %12952, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit591 = lshr exact i32 %12948, 1
  %12953 = trunc i32 %.lobit591 to i8
  %12954 = xor i8 %12953, 1
  store i8 %12954, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %12955 = add i64 %12928, -1064
  %12956 = add i64 %12927, 36
  store i64 %12956, i64* %3, align 8
  %12957 = inttoptr i64 %12955 to i64*
  store i64 %12943, i64* %12957, align 8
  %12958 = load i64, i64* %3, align 8
  %12959 = load i8, i8* %34, align 1
  %12960 = icmp ne i8 %12959, 0
  %.v754 = select i1 %12960, i64 23, i64 6
  %12961 = add i64 %12958, %.v754
  %cmpBr_458246 = icmp eq i8 %12959, 1
  %12962 = load i64, i64* %RBP.i, align 8
  %12963 = add i64 %12962, -56
  %12964 = add i64 %12961, 3
  store i64 %12964, i64* %3, align 8
  %12965 = inttoptr i64 %12963 to i32*
  %12966 = load i32, i32* %12965, align 4
  %12967 = zext i32 %12966 to i64
  store i64 %12967, i64* %RAX.i3176, align 8
  %12968 = add i64 %12961, 6
  store i64 %12968, i64* %3, align 8
  br i1 %cmpBr_458246, label %block_.L_45825d, label %block_45824c

block_45824c:                                     ; preds = %block_.L_458222
  %12969 = or i64 %12967, 1
  %12970 = trunc i64 %12969 to i32
  store i64 %12969, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %12971 = and i32 %12970, 255
  %12972 = tail call i32 @llvm.ctpop.i32(i32 %12971)
  %12973 = trunc i32 %12972 to i8
  %12974 = and i8 %12973, 1
  %12975 = xor i8 %12974, 1
  store i8 %12975, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %12976 = lshr i32 %12970, 31
  %12977 = trunc i32 %12976 to i8
  store i8 %12977, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %12978 = add i64 %12962, -1068
  %12979 = add i64 %12961, 12
  store i64 %12979, i64* %3, align 8
  %12980 = inttoptr i64 %12978 to i32*
  store i32 %12970, i32* %12980, align 4
  %12981 = load i64, i64* %3, align 8
  %12982 = add i64 %12981, 17
  store i64 %12982, i64* %3, align 8
  br label %block_.L_458269

block_.L_45825d:                                  ; preds = %block_.L_458222
  %12983 = and i64 %12967, 4294967294
  store i64 %12983, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %12984 = and i32 %12966, 254
  %12985 = tail call i32 @llvm.ctpop.i32(i32 %12984)
  %12986 = trunc i32 %12985 to i8
  %12987 = and i8 %12986, 1
  %12988 = xor i8 %12987, 1
  store i8 %12988, i8* %26, align 1
  %12989 = icmp ult i32 %12966, 2
  %12990 = zext i1 %12989 to i8
  store i8 %12990, i8* %34, align 1
  %12991 = lshr i32 %12966, 31
  %12992 = trunc i32 %12991 to i8
  store i8 %12992, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %12993 = add i64 %12962, -1068
  %12994 = trunc i64 %12983 to i32
  %12995 = add i64 %12961, 12
  store i64 %12995, i64* %3, align 8
  %12996 = inttoptr i64 %12993 to i32*
  store i32 %12994, i32* %12996, align 4
  %.pre416 = load i64, i64* %3, align 8
  br label %block_.L_458269

block_.L_458269:                                  ; preds = %block_.L_45825d, %block_45824c
  %12997 = phi i64 [ %.pre416, %block_.L_45825d ], [ %12982, %block_45824c ]
  %12998 = load i64, i64* %RBP.i, align 8
  %12999 = add i64 %12998, -1068
  %13000 = add i64 %12997, 6
  store i64 %13000, i64* %3, align 8
  %13001 = inttoptr i64 %12999 to i32*
  %13002 = load i32, i32* %13001, align 4
  %13003 = zext i32 %13002 to i64
  store i64 %13003, i64* %RAX.i3176, align 8
  %13004 = sext i32 %13002 to i64
  store i64 %13004, i64* %RCX.i2595, align 8
  %13005 = add i64 %12998, -1064
  %13006 = add i64 %12997, 16
  store i64 %13006, i64* %3, align 8
  %13007 = inttoptr i64 %13005 to i64*
  %13008 = load i64, i64* %13007, align 8
  store i64 %13008, i64* %RDX.i2592, align 8
  %13009 = shl nsw i64 %13004, 3
  %13010 = add i64 %13009, %13008
  %13011 = add i64 %12997, 20
  store i64 %13011, i64* %3, align 8
  %13012 = inttoptr i64 %13010 to i64*
  %13013 = load i64, i64* %13012, align 8
  store i64 %13013, i64* %RCX.i2595, align 8
  %13014 = add i64 %12997, 23
  store i64 %13014, i64* %3, align 8
  %13015 = inttoptr i64 %13013 to i16*
  %13016 = load i16, i16* %13015, align 2
  store i16 %13016, i16* %SI.i2438, align 2
  %13017 = add i64 %12998, -16
  %13018 = add i64 %12997, 27
  store i64 %13018, i64* %3, align 8
  %13019 = inttoptr i64 %13017 to i64*
  %13020 = load i64, i64* %13019, align 8
  store i64 %13020, i64* %RCX.i2595, align 8
  %13021 = add i64 %13020, 1616
  %13022 = add i64 %12997, 34
  store i64 %13022, i64* %3, align 8
  %13023 = inttoptr i64 %13021 to i64*
  %13024 = load i64, i64* %13023, align 8
  store i64 %13024, i64* %RCX.i2595, align 8
  %13025 = add i64 %12997, 37
  store i64 %13025, i64* %3, align 8
  %13026 = inttoptr i64 %13024 to i64*
  %13027 = load i64, i64* %13026, align 8
  store i64 %13027, i64* %RCX.i2595, align 8
  %13028 = add i64 %12998, -52
  %13029 = add i64 %12997, 41
  store i64 %13029, i64* %3, align 8
  %13030 = inttoptr i64 %13028 to i32*
  %13031 = load i32, i32* %13030, align 4
  %13032 = sext i32 %13031 to i64
  store i64 %13032, i64* %RDI.i732, align 8
  %13033 = shl nsw i64 %13032, 3
  %13034 = add i64 %13033, %13027
  %13035 = add i64 %12997, 45
  store i64 %13035, i64* %3, align 8
  %13036 = inttoptr i64 %13034 to i64*
  %13037 = load i64, i64* %13036, align 8
  store i64 %13037, i64* %RCX.i2595, align 8
  %13038 = add i64 %12998, -56
  %13039 = add i64 %12997, 49
  store i64 %13039, i64* %3, align 8
  %13040 = inttoptr i64 %13038 to i32*
  %13041 = load i32, i32* %13040, align 4
  %13042 = sext i32 %13041 to i64
  store i64 %13042, i64* %RDI.i732, align 8
  %13043 = shl nsw i64 %13042, 3
  %13044 = add i64 %13043, %13037
  %13045 = add i64 %12997, 53
  store i64 %13045, i64* %3, align 8
  %13046 = inttoptr i64 %13044 to i64*
  %13047 = load i64, i64* %13046, align 8
  store i64 %13047, i64* %RCX.i2595, align 8
  %13048 = add i64 %12997, 56
  store i64 %13048, i64* %3, align 8
  %13049 = inttoptr i64 %13047 to i16*
  store i16 %13016, i16* %13049, align 2
  %13050 = load i64, i64* %RBP.i, align 8
  %13051 = add i64 %13050, -16
  %13052 = load i64, i64* %3, align 8
  %13053 = add i64 %13052, 4
  store i64 %13053, i64* %3, align 8
  %13054 = inttoptr i64 %13051 to i64*
  %13055 = load i64, i64* %13054, align 8
  store i64 %13055, i64* %RCX.i2595, align 8
  %13056 = add i64 %13055, 1616
  %13057 = add i64 %13052, 11
  store i64 %13057, i64* %3, align 8
  %13058 = inttoptr i64 %13056 to i64*
  %13059 = load i64, i64* %13058, align 8
  store i64 %13059, i64* %RCX.i2595, align 8
  %13060 = add i64 %13052, 14
  store i64 %13060, i64* %3, align 8
  %13061 = inttoptr i64 %13059 to i64*
  %13062 = load i64, i64* %13061, align 8
  store i64 %13062, i64* %RCX.i2595, align 8
  %13063 = add i64 %13050, -52
  %13064 = add i64 %13052, 17
  store i64 %13064, i64* %3, align 8
  %13065 = inttoptr i64 %13063 to i32*
  %13066 = load i32, i32* %13065, align 4
  %13067 = and i32 %13066, 2
  %13068 = zext i32 %13067 to i64
  store i64 %13068, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13069 = tail call i32 @llvm.ctpop.i32(i32 %13067)
  %13070 = trunc i32 %13069 to i8
  %13071 = xor i8 %13070, 1
  store i8 %13071, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit592 = lshr exact i32 %13067, 1
  %13072 = trunc i32 %.lobit592 to i8
  %13073 = xor i8 %13072, 1
  store i8 %13073, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13074 = add i64 %13050, -1080
  %13075 = add i64 %13052, 30
  store i64 %13075, i64* %3, align 8
  %13076 = inttoptr i64 %13074 to i64*
  store i64 %13062, i64* %13076, align 8
  %13077 = load i64, i64* %3, align 8
  %13078 = load i8, i8* %34, align 1
  %13079 = icmp ne i8 %13078, 0
  %.v755 = select i1 %13079, i64 23, i64 6
  %13080 = add i64 %13077, %.v755
  %cmpBr_4582bf = icmp eq i8 %13078, 1
  %13081 = load i64, i64* %RBP.i, align 8
  %13082 = add i64 %13081, -52
  %13083 = add i64 %13080, 3
  store i64 %13083, i64* %3, align 8
  %13084 = inttoptr i64 %13082 to i32*
  %13085 = load i32, i32* %13084, align 4
  %13086 = zext i32 %13085 to i64
  store i64 %13086, i64* %RAX.i3176, align 8
  %13087 = add i64 %13080, 6
  store i64 %13087, i64* %3, align 8
  br i1 %cmpBr_4582bf, label %block_.L_4582d6, label %block_4582c5

block_4582c5:                                     ; preds = %block_.L_458269
  %13088 = or i64 %13086, 1
  %13089 = trunc i64 %13088 to i32
  store i64 %13088, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13090 = and i32 %13089, 255
  %13091 = tail call i32 @llvm.ctpop.i32(i32 %13090)
  %13092 = trunc i32 %13091 to i8
  %13093 = and i8 %13092, 1
  %13094 = xor i8 %13093, 1
  store i8 %13094, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13095 = lshr i32 %13089, 31
  %13096 = trunc i32 %13095 to i8
  store i8 %13096, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13097 = add i64 %13081, -1084
  %13098 = add i64 %13080, 12
  store i64 %13098, i64* %3, align 8
  %13099 = inttoptr i64 %13097 to i32*
  store i32 %13089, i32* %13099, align 4
  %13100 = load i64, i64* %3, align 8
  %13101 = add i64 %13100, 17
  store i64 %13101, i64* %3, align 8
  br label %block_.L_4582e2

block_.L_4582d6:                                  ; preds = %block_.L_458269
  %13102 = and i64 %13086, 4294967294
  store i64 %13102, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13103 = and i32 %13085, 254
  %13104 = tail call i32 @llvm.ctpop.i32(i32 %13103)
  %13105 = trunc i32 %13104 to i8
  %13106 = and i8 %13105, 1
  %13107 = xor i8 %13106, 1
  store i8 %13107, i8* %26, align 1
  %13108 = icmp ult i32 %13085, 2
  %13109 = zext i1 %13108 to i8
  store i8 %13109, i8* %34, align 1
  %13110 = lshr i32 %13085, 31
  %13111 = trunc i32 %13110 to i8
  store i8 %13111, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13112 = add i64 %13081, -1084
  %13113 = trunc i64 %13102 to i32
  %13114 = add i64 %13080, 12
  store i64 %13114, i64* %3, align 8
  %13115 = inttoptr i64 %13112 to i32*
  store i32 %13113, i32* %13115, align 4
  %.pre417 = load i64, i64* %3, align 8
  br label %block_.L_4582e2

block_.L_4582e2:                                  ; preds = %block_.L_4582d6, %block_4582c5
  %13116 = phi i64 [ %.pre417, %block_.L_4582d6 ], [ %13101, %block_4582c5 ]
  %13117 = load i64, i64* %RBP.i, align 8
  %13118 = add i64 %13117, -1084
  %13119 = add i64 %13116, 6
  store i64 %13119, i64* %3, align 8
  %13120 = inttoptr i64 %13118 to i32*
  %13121 = load i32, i32* %13120, align 4
  %13122 = zext i32 %13121 to i64
  store i64 %13122, i64* %RAX.i3176, align 8
  %13123 = sext i32 %13121 to i64
  store i64 %13123, i64* %RCX.i2595, align 8
  %13124 = add i64 %13117, -1080
  %13125 = add i64 %13116, 16
  store i64 %13125, i64* %3, align 8
  %13126 = inttoptr i64 %13124 to i64*
  %13127 = load i64, i64* %13126, align 8
  store i64 %13127, i64* %RDX.i2592, align 8
  %13128 = shl nsw i64 %13123, 3
  %13129 = add i64 %13128, %13127
  %13130 = add i64 %13116, 20
  store i64 %13130, i64* %3, align 8
  %13131 = inttoptr i64 %13129 to i64*
  %13132 = load i64, i64* %13131, align 8
  store i64 %13132, i64* %RCX.i2595, align 8
  %13133 = add i64 %13117, -56
  %13134 = add i64 %13116, 23
  store i64 %13134, i64* %3, align 8
  %13135 = inttoptr i64 %13133 to i32*
  %13136 = load i32, i32* %13135, align 4
  %13137 = and i32 %13136, 2
  %13138 = zext i32 %13137 to i64
  store i64 %13138, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13139 = tail call i32 @llvm.ctpop.i32(i32 %13137)
  %13140 = trunc i32 %13139 to i8
  %13141 = xor i8 %13140, 1
  store i8 %13141, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit593 = lshr exact i32 %13137, 1
  %13142 = trunc i32 %.lobit593 to i8
  %13143 = xor i8 %13142, 1
  store i8 %13143, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13144 = add i64 %13117, -1096
  %13145 = add i64 %13116, 36
  store i64 %13145, i64* %3, align 8
  %13146 = inttoptr i64 %13144 to i64*
  store i64 %13132, i64* %13146, align 8
  %13147 = load i64, i64* %3, align 8
  %13148 = load i8, i8* %34, align 1
  %13149 = icmp ne i8 %13148, 0
  %.v756 = select i1 %13149, i64 23, i64 6
  %13150 = add i64 %13147, %.v756
  %cmpBr_458306 = icmp eq i8 %13148, 1
  %13151 = load i64, i64* %RBP.i, align 8
  %13152 = add i64 %13151, -56
  %13153 = add i64 %13150, 3
  store i64 %13153, i64* %3, align 8
  %13154 = inttoptr i64 %13152 to i32*
  %13155 = load i32, i32* %13154, align 4
  %13156 = zext i32 %13155 to i64
  store i64 %13156, i64* %RAX.i3176, align 8
  %13157 = add i64 %13150, 6
  store i64 %13157, i64* %3, align 8
  br i1 %cmpBr_458306, label %block_.L_45831d, label %block_45830c

block_45830c:                                     ; preds = %block_.L_4582e2
  %13158 = or i64 %13156, 1
  %13159 = trunc i64 %13158 to i32
  store i64 %13158, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13160 = and i32 %13159, 255
  %13161 = tail call i32 @llvm.ctpop.i32(i32 %13160)
  %13162 = trunc i32 %13161 to i8
  %13163 = and i8 %13162, 1
  %13164 = xor i8 %13163, 1
  store i8 %13164, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13165 = lshr i32 %13159, 31
  %13166 = trunc i32 %13165 to i8
  store i8 %13166, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13167 = add i64 %13151, -1100
  %13168 = add i64 %13150, 12
  store i64 %13168, i64* %3, align 8
  %13169 = inttoptr i64 %13167 to i32*
  store i32 %13159, i32* %13169, align 4
  %13170 = load i64, i64* %3, align 8
  %13171 = add i64 %13170, 17
  store i64 %13171, i64* %3, align 8
  br label %block_.L_458329

block_.L_45831d:                                  ; preds = %block_.L_4582e2
  %13172 = and i64 %13156, 4294967294
  store i64 %13172, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13173 = and i32 %13155, 254
  %13174 = tail call i32 @llvm.ctpop.i32(i32 %13173)
  %13175 = trunc i32 %13174 to i8
  %13176 = and i8 %13175, 1
  %13177 = xor i8 %13176, 1
  store i8 %13177, i8* %26, align 1
  %13178 = icmp ult i32 %13155, 2
  %13179 = zext i1 %13178 to i8
  store i8 %13179, i8* %34, align 1
  %13180 = lshr i32 %13155, 31
  %13181 = trunc i32 %13180 to i8
  store i8 %13181, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13182 = add i64 %13151, -1100
  %13183 = trunc i64 %13172 to i32
  %13184 = add i64 %13150, 12
  store i64 %13184, i64* %3, align 8
  %13185 = inttoptr i64 %13182 to i32*
  store i32 %13183, i32* %13185, align 4
  %.pre418 = load i64, i64* %3, align 8
  br label %block_.L_458329

block_.L_458329:                                  ; preds = %block_.L_45831d, %block_45830c
  %13186 = phi i64 [ %.pre418, %block_.L_45831d ], [ %13171, %block_45830c ]
  %13187 = load i64, i64* %RBP.i, align 8
  %13188 = add i64 %13187, -1100
  %13189 = add i64 %13186, 6
  store i64 %13189, i64* %3, align 8
  %13190 = inttoptr i64 %13188 to i32*
  %13191 = load i32, i32* %13190, align 4
  %13192 = zext i32 %13191 to i64
  store i64 %13192, i64* %RAX.i3176, align 8
  %13193 = sext i32 %13191 to i64
  store i64 %13193, i64* %RCX.i2595, align 8
  %13194 = add i64 %13187, -1096
  %13195 = add i64 %13186, 16
  store i64 %13195, i64* %3, align 8
  %13196 = inttoptr i64 %13194 to i64*
  %13197 = load i64, i64* %13196, align 8
  store i64 %13197, i64* %RDX.i2592, align 8
  %13198 = shl nsw i64 %13193, 3
  %13199 = add i64 %13198, %13197
  %13200 = add i64 %13186, 20
  store i64 %13200, i64* %3, align 8
  %13201 = inttoptr i64 %13199 to i64*
  %13202 = load i64, i64* %13201, align 8
  store i64 %13202, i64* %RCX.i2595, align 8
  %13203 = add i64 %13202, 2
  %13204 = add i64 %13186, 24
  store i64 %13204, i64* %3, align 8
  %13205 = inttoptr i64 %13203 to i16*
  %13206 = load i16, i16* %13205, align 2
  store i16 %13206, i16* %SI.i2438, align 2
  %13207 = add i64 %13187, -16
  %13208 = add i64 %13186, 28
  store i64 %13208, i64* %3, align 8
  %13209 = inttoptr i64 %13207 to i64*
  %13210 = load i64, i64* %13209, align 8
  store i64 %13210, i64* %RCX.i2595, align 8
  %13211 = add i64 %13210, 1616
  %13212 = add i64 %13186, 35
  store i64 %13212, i64* %3, align 8
  %13213 = inttoptr i64 %13211 to i64*
  %13214 = load i64, i64* %13213, align 8
  store i64 %13214, i64* %RCX.i2595, align 8
  %13215 = add i64 %13186, 38
  store i64 %13215, i64* %3, align 8
  %13216 = inttoptr i64 %13214 to i64*
  %13217 = load i64, i64* %13216, align 8
  store i64 %13217, i64* %RCX.i2595, align 8
  %13218 = add i64 %13187, -52
  %13219 = add i64 %13186, 42
  store i64 %13219, i64* %3, align 8
  %13220 = inttoptr i64 %13218 to i32*
  %13221 = load i32, i32* %13220, align 4
  %13222 = sext i32 %13221 to i64
  store i64 %13222, i64* %RDI.i732, align 8
  %13223 = shl nsw i64 %13222, 3
  %13224 = add i64 %13223, %13217
  %13225 = add i64 %13186, 46
  store i64 %13225, i64* %3, align 8
  %13226 = inttoptr i64 %13224 to i64*
  %13227 = load i64, i64* %13226, align 8
  store i64 %13227, i64* %RCX.i2595, align 8
  %13228 = add i64 %13187, -56
  %13229 = add i64 %13186, 50
  store i64 %13229, i64* %3, align 8
  %13230 = inttoptr i64 %13228 to i32*
  %13231 = load i32, i32* %13230, align 4
  %13232 = sext i32 %13231 to i64
  store i64 %13232, i64* %RDI.i732, align 8
  %13233 = shl nsw i64 %13232, 3
  %13234 = add i64 %13233, %13227
  %13235 = add i64 %13186, 54
  store i64 %13235, i64* %3, align 8
  %13236 = inttoptr i64 %13234 to i64*
  %13237 = load i64, i64* %13236, align 8
  store i64 %13237, i64* %RCX.i2595, align 8
  %13238 = add i64 %13237, 2
  %13239 = add i64 %13186, 58
  store i64 %13239, i64* %3, align 8
  %13240 = inttoptr i64 %13238 to i16*
  store i16 %13206, i16* %13240, align 2
  %13241 = load i64, i64* %RBP.i, align 8
  %13242 = add i64 %13241, -16
  %13243 = load i64, i64* %3, align 8
  %13244 = add i64 %13243, 4
  store i64 %13244, i64* %3, align 8
  %13245 = inttoptr i64 %13242 to i64*
  %13246 = load i64, i64* %13245, align 8
  store i64 %13246, i64* %RCX.i2595, align 8
  %13247 = add i64 %13246, 1616
  %13248 = add i64 %13243, 11
  store i64 %13248, i64* %3, align 8
  %13249 = inttoptr i64 %13247 to i64*
  %13250 = load i64, i64* %13249, align 8
  store i64 %13250, i64* %RCX.i2595, align 8
  %13251 = add i64 %13250, 8
  %13252 = add i64 %13243, 15
  store i64 %13252, i64* %3, align 8
  %13253 = inttoptr i64 %13251 to i64*
  %13254 = load i64, i64* %13253, align 8
  store i64 %13254, i64* %RCX.i2595, align 8
  %13255 = add i64 %13241, -52
  %13256 = add i64 %13243, 18
  store i64 %13256, i64* %3, align 8
  %13257 = inttoptr i64 %13255 to i32*
  %13258 = load i32, i32* %13257, align 4
  %13259 = and i32 %13258, 2
  %13260 = zext i32 %13259 to i64
  store i64 %13260, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13261 = tail call i32 @llvm.ctpop.i32(i32 %13259)
  %13262 = trunc i32 %13261 to i8
  %13263 = xor i8 %13262, 1
  store i8 %13263, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit594 = lshr exact i32 %13259, 1
  %13264 = trunc i32 %.lobit594 to i8
  %13265 = xor i8 %13264, 1
  store i8 %13265, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13266 = add i64 %13241, -1112
  %13267 = add i64 %13243, 31
  store i64 %13267, i64* %3, align 8
  %13268 = inttoptr i64 %13266 to i64*
  store i64 %13254, i64* %13268, align 8
  %13269 = load i64, i64* %3, align 8
  %13270 = load i8, i8* %34, align 1
  %13271 = icmp ne i8 %13270, 0
  %.v757 = select i1 %13271, i64 23, i64 6
  %13272 = add i64 %13269, %.v757
  %cmpBr_458382 = icmp eq i8 %13270, 1
  %13273 = load i64, i64* %RBP.i, align 8
  %13274 = add i64 %13273, -52
  %13275 = add i64 %13272, 3
  store i64 %13275, i64* %3, align 8
  %13276 = inttoptr i64 %13274 to i32*
  %13277 = load i32, i32* %13276, align 4
  %13278 = zext i32 %13277 to i64
  store i64 %13278, i64* %RAX.i3176, align 8
  %13279 = add i64 %13272, 6
  store i64 %13279, i64* %3, align 8
  br i1 %cmpBr_458382, label %block_.L_458399, label %block_458388

block_458388:                                     ; preds = %block_.L_458329
  %13280 = or i64 %13278, 1
  %13281 = trunc i64 %13280 to i32
  store i64 %13280, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13282 = and i32 %13281, 255
  %13283 = tail call i32 @llvm.ctpop.i32(i32 %13282)
  %13284 = trunc i32 %13283 to i8
  %13285 = and i8 %13284, 1
  %13286 = xor i8 %13285, 1
  store i8 %13286, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13287 = lshr i32 %13281, 31
  %13288 = trunc i32 %13287 to i8
  store i8 %13288, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13289 = add i64 %13273, -1116
  %13290 = add i64 %13272, 12
  store i64 %13290, i64* %3, align 8
  %13291 = inttoptr i64 %13289 to i32*
  store i32 %13281, i32* %13291, align 4
  %13292 = load i64, i64* %3, align 8
  %13293 = add i64 %13292, 17
  store i64 %13293, i64* %3, align 8
  br label %block_.L_4583a5

block_.L_458399:                                  ; preds = %block_.L_458329
  %13294 = and i64 %13278, 4294967294
  store i64 %13294, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13295 = and i32 %13277, 254
  %13296 = tail call i32 @llvm.ctpop.i32(i32 %13295)
  %13297 = trunc i32 %13296 to i8
  %13298 = and i8 %13297, 1
  %13299 = xor i8 %13298, 1
  store i8 %13299, i8* %26, align 1
  %13300 = icmp ult i32 %13277, 2
  %13301 = zext i1 %13300 to i8
  store i8 %13301, i8* %34, align 1
  %13302 = lshr i32 %13277, 31
  %13303 = trunc i32 %13302 to i8
  store i8 %13303, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13304 = add i64 %13273, -1116
  %13305 = trunc i64 %13294 to i32
  %13306 = add i64 %13272, 12
  store i64 %13306, i64* %3, align 8
  %13307 = inttoptr i64 %13304 to i32*
  store i32 %13305, i32* %13307, align 4
  %.pre419 = load i64, i64* %3, align 8
  br label %block_.L_4583a5

block_.L_4583a5:                                  ; preds = %block_.L_458399, %block_458388
  %13308 = phi i64 [ %.pre419, %block_.L_458399 ], [ %13293, %block_458388 ]
  %13309 = load i64, i64* %RBP.i, align 8
  %13310 = add i64 %13309, -1116
  %13311 = add i64 %13308, 6
  store i64 %13311, i64* %3, align 8
  %13312 = inttoptr i64 %13310 to i32*
  %13313 = load i32, i32* %13312, align 4
  %13314 = zext i32 %13313 to i64
  store i64 %13314, i64* %RAX.i3176, align 8
  %13315 = sext i32 %13313 to i64
  store i64 %13315, i64* %RCX.i2595, align 8
  %13316 = add i64 %13309, -1112
  %13317 = add i64 %13308, 16
  store i64 %13317, i64* %3, align 8
  %13318 = inttoptr i64 %13316 to i64*
  %13319 = load i64, i64* %13318, align 8
  store i64 %13319, i64* %RDX.i2592, align 8
  %13320 = shl nsw i64 %13315, 3
  %13321 = add i64 %13320, %13319
  %13322 = add i64 %13308, 20
  store i64 %13322, i64* %3, align 8
  %13323 = inttoptr i64 %13321 to i64*
  %13324 = load i64, i64* %13323, align 8
  store i64 %13324, i64* %RCX.i2595, align 8
  %13325 = add i64 %13309, -56
  %13326 = add i64 %13308, 23
  store i64 %13326, i64* %3, align 8
  %13327 = inttoptr i64 %13325 to i32*
  %13328 = load i32, i32* %13327, align 4
  %13329 = and i32 %13328, 2
  %13330 = zext i32 %13329 to i64
  store i64 %13330, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13331 = tail call i32 @llvm.ctpop.i32(i32 %13329)
  %13332 = trunc i32 %13331 to i8
  %13333 = xor i8 %13332, 1
  store i8 %13333, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit595 = lshr exact i32 %13329, 1
  %13334 = trunc i32 %.lobit595 to i8
  %13335 = xor i8 %13334, 1
  store i8 %13335, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13336 = add i64 %13309, -1128
  %13337 = add i64 %13308, 36
  store i64 %13337, i64* %3, align 8
  %13338 = inttoptr i64 %13336 to i64*
  store i64 %13324, i64* %13338, align 8
  %13339 = load i64, i64* %3, align 8
  %13340 = load i8, i8* %34, align 1
  %13341 = icmp ne i8 %13340, 0
  %.v758 = select i1 %13341, i64 23, i64 6
  %13342 = add i64 %13339, %.v758
  %cmpBr_4583c9 = icmp eq i8 %13340, 1
  %13343 = load i64, i64* %RBP.i, align 8
  %13344 = add i64 %13343, -56
  %13345 = add i64 %13342, 3
  store i64 %13345, i64* %3, align 8
  %13346 = inttoptr i64 %13344 to i32*
  %13347 = load i32, i32* %13346, align 4
  %13348 = zext i32 %13347 to i64
  store i64 %13348, i64* %RAX.i3176, align 8
  %13349 = add i64 %13342, 6
  store i64 %13349, i64* %3, align 8
  br i1 %cmpBr_4583c9, label %block_.L_4583e0, label %block_4583cf

block_4583cf:                                     ; preds = %block_.L_4583a5
  %13350 = or i64 %13348, 1
  %13351 = trunc i64 %13350 to i32
  store i64 %13350, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13352 = and i32 %13351, 255
  %13353 = tail call i32 @llvm.ctpop.i32(i32 %13352)
  %13354 = trunc i32 %13353 to i8
  %13355 = and i8 %13354, 1
  %13356 = xor i8 %13355, 1
  store i8 %13356, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13357 = lshr i32 %13351, 31
  %13358 = trunc i32 %13357 to i8
  store i8 %13358, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13359 = add i64 %13343, -1132
  %13360 = add i64 %13342, 12
  store i64 %13360, i64* %3, align 8
  %13361 = inttoptr i64 %13359 to i32*
  store i32 %13351, i32* %13361, align 4
  %13362 = load i64, i64* %3, align 8
  %13363 = add i64 %13362, 17
  store i64 %13363, i64* %3, align 8
  br label %block_.L_4583ec

block_.L_4583e0:                                  ; preds = %block_.L_4583a5
  %13364 = and i64 %13348, 4294967294
  store i64 %13364, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13365 = and i32 %13347, 254
  %13366 = tail call i32 @llvm.ctpop.i32(i32 %13365)
  %13367 = trunc i32 %13366 to i8
  %13368 = and i8 %13367, 1
  %13369 = xor i8 %13368, 1
  store i8 %13369, i8* %26, align 1
  %13370 = icmp ult i32 %13347, 2
  %13371 = zext i1 %13370 to i8
  store i8 %13371, i8* %34, align 1
  %13372 = lshr i32 %13347, 31
  %13373 = trunc i32 %13372 to i8
  store i8 %13373, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13374 = add i64 %13343, -1132
  %13375 = trunc i64 %13364 to i32
  %13376 = add i64 %13342, 12
  store i64 %13376, i64* %3, align 8
  %13377 = inttoptr i64 %13374 to i32*
  store i32 %13375, i32* %13377, align 4
  %.pre420 = load i64, i64* %3, align 8
  br label %block_.L_4583ec

block_.L_4583ec:                                  ; preds = %block_.L_4583e0, %block_4583cf
  %13378 = phi i64 [ %.pre420, %block_.L_4583e0 ], [ %13363, %block_4583cf ]
  %13379 = load i64, i64* %RBP.i, align 8
  %13380 = add i64 %13379, -1132
  %13381 = add i64 %13378, 6
  store i64 %13381, i64* %3, align 8
  %13382 = inttoptr i64 %13380 to i32*
  %13383 = load i32, i32* %13382, align 4
  %13384 = zext i32 %13383 to i64
  store i64 %13384, i64* %RAX.i3176, align 8
  %13385 = sext i32 %13383 to i64
  store i64 %13385, i64* %RCX.i2595, align 8
  %13386 = add i64 %13379, -1128
  %13387 = add i64 %13378, 16
  store i64 %13387, i64* %3, align 8
  %13388 = inttoptr i64 %13386 to i64*
  %13389 = load i64, i64* %13388, align 8
  store i64 %13389, i64* %RDX.i2592, align 8
  %13390 = shl nsw i64 %13385, 3
  %13391 = add i64 %13390, %13389
  %13392 = add i64 %13378, 20
  store i64 %13392, i64* %3, align 8
  %13393 = inttoptr i64 %13391 to i64*
  %13394 = load i64, i64* %13393, align 8
  store i64 %13394, i64* %RCX.i2595, align 8
  %13395 = add i64 %13378, 23
  store i64 %13395, i64* %3, align 8
  %13396 = inttoptr i64 %13394 to i16*
  %13397 = load i16, i16* %13396, align 2
  store i16 %13397, i16* %SI.i2438, align 2
  %13398 = add i64 %13379, -16
  %13399 = add i64 %13378, 27
  store i64 %13399, i64* %3, align 8
  %13400 = inttoptr i64 %13398 to i64*
  %13401 = load i64, i64* %13400, align 8
  store i64 %13401, i64* %RCX.i2595, align 8
  %13402 = add i64 %13401, 1616
  %13403 = add i64 %13378, 34
  store i64 %13403, i64* %3, align 8
  %13404 = inttoptr i64 %13402 to i64*
  %13405 = load i64, i64* %13404, align 8
  store i64 %13405, i64* %RCX.i2595, align 8
  %13406 = add i64 %13405, 8
  %13407 = add i64 %13378, 38
  store i64 %13407, i64* %3, align 8
  %13408 = inttoptr i64 %13406 to i64*
  %13409 = load i64, i64* %13408, align 8
  store i64 %13409, i64* %RCX.i2595, align 8
  %13410 = add i64 %13379, -52
  %13411 = add i64 %13378, 42
  store i64 %13411, i64* %3, align 8
  %13412 = inttoptr i64 %13410 to i32*
  %13413 = load i32, i32* %13412, align 4
  %13414 = sext i32 %13413 to i64
  store i64 %13414, i64* %RDI.i732, align 8
  %13415 = shl nsw i64 %13414, 3
  %13416 = add i64 %13415, %13409
  %13417 = add i64 %13378, 46
  store i64 %13417, i64* %3, align 8
  %13418 = inttoptr i64 %13416 to i64*
  %13419 = load i64, i64* %13418, align 8
  store i64 %13419, i64* %RCX.i2595, align 8
  %13420 = add i64 %13379, -56
  %13421 = add i64 %13378, 50
  store i64 %13421, i64* %3, align 8
  %13422 = inttoptr i64 %13420 to i32*
  %13423 = load i32, i32* %13422, align 4
  %13424 = sext i32 %13423 to i64
  store i64 %13424, i64* %RDI.i732, align 8
  %13425 = shl nsw i64 %13424, 3
  %13426 = add i64 %13425, %13419
  %13427 = add i64 %13378, 54
  store i64 %13427, i64* %3, align 8
  %13428 = inttoptr i64 %13426 to i64*
  %13429 = load i64, i64* %13428, align 8
  store i64 %13429, i64* %RCX.i2595, align 8
  %13430 = add i64 %13378, 57
  store i64 %13430, i64* %3, align 8
  %13431 = inttoptr i64 %13429 to i16*
  store i16 %13397, i16* %13431, align 2
  %13432 = load i64, i64* %RBP.i, align 8
  %13433 = add i64 %13432, -16
  %13434 = load i64, i64* %3, align 8
  %13435 = add i64 %13434, 4
  store i64 %13435, i64* %3, align 8
  %13436 = inttoptr i64 %13433 to i64*
  %13437 = load i64, i64* %13436, align 8
  store i64 %13437, i64* %RCX.i2595, align 8
  %13438 = add i64 %13437, 1616
  %13439 = add i64 %13434, 11
  store i64 %13439, i64* %3, align 8
  %13440 = inttoptr i64 %13438 to i64*
  %13441 = load i64, i64* %13440, align 8
  store i64 %13441, i64* %RCX.i2595, align 8
  %13442 = add i64 %13441, 8
  %13443 = add i64 %13434, 15
  store i64 %13443, i64* %3, align 8
  %13444 = inttoptr i64 %13442 to i64*
  %13445 = load i64, i64* %13444, align 8
  store i64 %13445, i64* %RCX.i2595, align 8
  %13446 = add i64 %13432, -52
  %13447 = add i64 %13434, 18
  store i64 %13447, i64* %3, align 8
  %13448 = inttoptr i64 %13446 to i32*
  %13449 = load i32, i32* %13448, align 4
  %13450 = and i32 %13449, 2
  %13451 = zext i32 %13450 to i64
  store i64 %13451, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13452 = tail call i32 @llvm.ctpop.i32(i32 %13450)
  %13453 = trunc i32 %13452 to i8
  %13454 = xor i8 %13453, 1
  store i8 %13454, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit596 = lshr exact i32 %13450, 1
  %13455 = trunc i32 %.lobit596 to i8
  %13456 = xor i8 %13455, 1
  store i8 %13456, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13457 = add i64 %13432, -1144
  %13458 = add i64 %13434, 31
  store i64 %13458, i64* %3, align 8
  %13459 = inttoptr i64 %13457 to i64*
  store i64 %13445, i64* %13459, align 8
  %13460 = load i64, i64* %3, align 8
  %13461 = load i8, i8* %34, align 1
  %13462 = icmp ne i8 %13461, 0
  %.v759 = select i1 %13462, i64 23, i64 6
  %13463 = add i64 %13460, %.v759
  %cmpBr_458444 = icmp eq i8 %13461, 1
  %13464 = load i64, i64* %RBP.i, align 8
  %13465 = add i64 %13464, -52
  %13466 = add i64 %13463, 3
  store i64 %13466, i64* %3, align 8
  %13467 = inttoptr i64 %13465 to i32*
  %13468 = load i32, i32* %13467, align 4
  %13469 = zext i32 %13468 to i64
  store i64 %13469, i64* %RAX.i3176, align 8
  %13470 = add i64 %13463, 6
  store i64 %13470, i64* %3, align 8
  br i1 %cmpBr_458444, label %block_.L_45845b, label %block_45844a

block_45844a:                                     ; preds = %block_.L_4583ec
  %13471 = or i64 %13469, 1
  %13472 = trunc i64 %13471 to i32
  store i64 %13471, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13473 = and i32 %13472, 255
  %13474 = tail call i32 @llvm.ctpop.i32(i32 %13473)
  %13475 = trunc i32 %13474 to i8
  %13476 = and i8 %13475, 1
  %13477 = xor i8 %13476, 1
  store i8 %13477, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13478 = lshr i32 %13472, 31
  %13479 = trunc i32 %13478 to i8
  store i8 %13479, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13480 = add i64 %13464, -1148
  %13481 = add i64 %13463, 12
  store i64 %13481, i64* %3, align 8
  %13482 = inttoptr i64 %13480 to i32*
  store i32 %13472, i32* %13482, align 4
  %13483 = load i64, i64* %3, align 8
  %13484 = add i64 %13483, 17
  store i64 %13484, i64* %3, align 8
  br label %block_.L_458467

block_.L_45845b:                                  ; preds = %block_.L_4583ec
  %13485 = and i64 %13469, 4294967294
  store i64 %13485, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13486 = and i32 %13468, 254
  %13487 = tail call i32 @llvm.ctpop.i32(i32 %13486)
  %13488 = trunc i32 %13487 to i8
  %13489 = and i8 %13488, 1
  %13490 = xor i8 %13489, 1
  store i8 %13490, i8* %26, align 1
  %13491 = icmp ult i32 %13468, 2
  %13492 = zext i1 %13491 to i8
  store i8 %13492, i8* %34, align 1
  %13493 = lshr i32 %13468, 31
  %13494 = trunc i32 %13493 to i8
  store i8 %13494, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13495 = add i64 %13464, -1148
  %13496 = trunc i64 %13485 to i32
  %13497 = add i64 %13463, 12
  store i64 %13497, i64* %3, align 8
  %13498 = inttoptr i64 %13495 to i32*
  store i32 %13496, i32* %13498, align 4
  %.pre421 = load i64, i64* %3, align 8
  br label %block_.L_458467

block_.L_458467:                                  ; preds = %block_.L_45845b, %block_45844a
  %13499 = phi i64 [ %.pre421, %block_.L_45845b ], [ %13484, %block_45844a ]
  %13500 = load i64, i64* %RBP.i, align 8
  %13501 = add i64 %13500, -1148
  %13502 = add i64 %13499, 6
  store i64 %13502, i64* %3, align 8
  %13503 = inttoptr i64 %13501 to i32*
  %13504 = load i32, i32* %13503, align 4
  %13505 = zext i32 %13504 to i64
  store i64 %13505, i64* %RAX.i3176, align 8
  %13506 = sext i32 %13504 to i64
  store i64 %13506, i64* %RCX.i2595, align 8
  %13507 = add i64 %13500, -1144
  %13508 = add i64 %13499, 16
  store i64 %13508, i64* %3, align 8
  %13509 = inttoptr i64 %13507 to i64*
  %13510 = load i64, i64* %13509, align 8
  store i64 %13510, i64* %RDX.i2592, align 8
  %13511 = shl nsw i64 %13506, 3
  %13512 = add i64 %13511, %13510
  %13513 = add i64 %13499, 20
  store i64 %13513, i64* %3, align 8
  %13514 = inttoptr i64 %13512 to i64*
  %13515 = load i64, i64* %13514, align 8
  store i64 %13515, i64* %RCX.i2595, align 8
  %13516 = add i64 %13500, -56
  %13517 = add i64 %13499, 23
  store i64 %13517, i64* %3, align 8
  %13518 = inttoptr i64 %13516 to i32*
  %13519 = load i32, i32* %13518, align 4
  %13520 = and i32 %13519, 2
  %13521 = zext i32 %13520 to i64
  store i64 %13521, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13522 = tail call i32 @llvm.ctpop.i32(i32 %13520)
  %13523 = trunc i32 %13522 to i8
  %13524 = xor i8 %13523, 1
  store i8 %13524, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit597 = lshr exact i32 %13520, 1
  %13525 = trunc i32 %.lobit597 to i8
  %13526 = xor i8 %13525, 1
  store i8 %13526, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13527 = add i64 %13500, -1160
  %13528 = add i64 %13499, 36
  store i64 %13528, i64* %3, align 8
  %13529 = inttoptr i64 %13527 to i64*
  store i64 %13515, i64* %13529, align 8
  %13530 = load i64, i64* %3, align 8
  %13531 = load i8, i8* %34, align 1
  %13532 = icmp ne i8 %13531, 0
  %.v760 = select i1 %13532, i64 23, i64 6
  %13533 = add i64 %13530, %.v760
  %cmpBr_45848b = icmp eq i8 %13531, 1
  %13534 = load i64, i64* %RBP.i, align 8
  %13535 = add i64 %13534, -56
  %13536 = add i64 %13533, 3
  store i64 %13536, i64* %3, align 8
  %13537 = inttoptr i64 %13535 to i32*
  %13538 = load i32, i32* %13537, align 4
  %13539 = zext i32 %13538 to i64
  store i64 %13539, i64* %RAX.i3176, align 8
  %13540 = add i64 %13533, 6
  store i64 %13540, i64* %3, align 8
  br i1 %cmpBr_45848b, label %block_.L_4584a2, label %block_458491

block_458491:                                     ; preds = %block_.L_458467
  %13541 = or i64 %13539, 1
  %13542 = trunc i64 %13541 to i32
  store i64 %13541, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13543 = and i32 %13542, 255
  %13544 = tail call i32 @llvm.ctpop.i32(i32 %13543)
  %13545 = trunc i32 %13544 to i8
  %13546 = and i8 %13545, 1
  %13547 = xor i8 %13546, 1
  store i8 %13547, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13548 = lshr i32 %13542, 31
  %13549 = trunc i32 %13548 to i8
  store i8 %13549, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13550 = add i64 %13534, -1164
  %13551 = add i64 %13533, 12
  store i64 %13551, i64* %3, align 8
  %13552 = inttoptr i64 %13550 to i32*
  store i32 %13542, i32* %13552, align 4
  %13553 = load i64, i64* %3, align 8
  %13554 = add i64 %13553, 17
  store i64 %13554, i64* %3, align 8
  br label %block_.L_4584ae

block_.L_4584a2:                                  ; preds = %block_.L_458467
  %13555 = and i64 %13539, 4294967294
  store i64 %13555, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13556 = and i32 %13538, 254
  %13557 = tail call i32 @llvm.ctpop.i32(i32 %13556)
  %13558 = trunc i32 %13557 to i8
  %13559 = and i8 %13558, 1
  %13560 = xor i8 %13559, 1
  store i8 %13560, i8* %26, align 1
  %13561 = icmp ult i32 %13538, 2
  %13562 = zext i1 %13561 to i8
  store i8 %13562, i8* %34, align 1
  %13563 = lshr i32 %13538, 31
  %13564 = trunc i32 %13563 to i8
  store i8 %13564, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13565 = add i64 %13534, -1164
  %13566 = trunc i64 %13555 to i32
  %13567 = add i64 %13533, 12
  store i64 %13567, i64* %3, align 8
  %13568 = inttoptr i64 %13565 to i32*
  store i32 %13566, i32* %13568, align 4
  %.pre422 = load i64, i64* %3, align 8
  br label %block_.L_4584ae

block_.L_4584ae:                                  ; preds = %block_.L_4584a2, %block_458491
  %13569 = phi i64 [ %.pre422, %block_.L_4584a2 ], [ %13554, %block_458491 ]
  %13570 = load i64, i64* %RBP.i, align 8
  %13571 = add i64 %13570, -1164
  %13572 = add i64 %13569, 6
  store i64 %13572, i64* %3, align 8
  %13573 = inttoptr i64 %13571 to i32*
  %13574 = load i32, i32* %13573, align 4
  %13575 = zext i32 %13574 to i64
  store i64 %13575, i64* %RAX.i3176, align 8
  %13576 = sext i32 %13574 to i64
  store i64 %13576, i64* %RCX.i2595, align 8
  %13577 = add i64 %13570, -1160
  %13578 = add i64 %13569, 16
  store i64 %13578, i64* %3, align 8
  %13579 = inttoptr i64 %13577 to i64*
  %13580 = load i64, i64* %13579, align 8
  store i64 %13580, i64* %RDX.i2592, align 8
  %13581 = shl nsw i64 %13576, 3
  %13582 = add i64 %13581, %13580
  %13583 = add i64 %13569, 20
  store i64 %13583, i64* %3, align 8
  %13584 = inttoptr i64 %13582 to i64*
  %13585 = load i64, i64* %13584, align 8
  store i64 %13585, i64* %RCX.i2595, align 8
  %13586 = add i64 %13585, 2
  %13587 = add i64 %13569, 24
  store i64 %13587, i64* %3, align 8
  %13588 = inttoptr i64 %13586 to i16*
  %13589 = load i16, i16* %13588, align 2
  store i16 %13589, i16* %SI.i2438, align 2
  %13590 = add i64 %13570, -16
  %13591 = add i64 %13569, 28
  store i64 %13591, i64* %3, align 8
  %13592 = inttoptr i64 %13590 to i64*
  %13593 = load i64, i64* %13592, align 8
  store i64 %13593, i64* %RCX.i2595, align 8
  %13594 = add i64 %13593, 1616
  %13595 = add i64 %13569, 35
  store i64 %13595, i64* %3, align 8
  %13596 = inttoptr i64 %13594 to i64*
  %13597 = load i64, i64* %13596, align 8
  store i64 %13597, i64* %RCX.i2595, align 8
  %13598 = add i64 %13597, 8
  %13599 = add i64 %13569, 39
  store i64 %13599, i64* %3, align 8
  %13600 = inttoptr i64 %13598 to i64*
  %13601 = load i64, i64* %13600, align 8
  store i64 %13601, i64* %RCX.i2595, align 8
  %13602 = add i64 %13570, -52
  %13603 = add i64 %13569, 43
  store i64 %13603, i64* %3, align 8
  %13604 = inttoptr i64 %13602 to i32*
  %13605 = load i32, i32* %13604, align 4
  %13606 = sext i32 %13605 to i64
  store i64 %13606, i64* %RDI.i732, align 8
  %13607 = shl nsw i64 %13606, 3
  %13608 = add i64 %13607, %13601
  %13609 = add i64 %13569, 47
  store i64 %13609, i64* %3, align 8
  %13610 = inttoptr i64 %13608 to i64*
  %13611 = load i64, i64* %13610, align 8
  store i64 %13611, i64* %RCX.i2595, align 8
  %13612 = add i64 %13570, -56
  %13613 = add i64 %13569, 51
  store i64 %13613, i64* %3, align 8
  %13614 = inttoptr i64 %13612 to i32*
  %13615 = load i32, i32* %13614, align 4
  %13616 = sext i32 %13615 to i64
  store i64 %13616, i64* %RDI.i732, align 8
  %13617 = shl nsw i64 %13616, 3
  %13618 = add i64 %13617, %13611
  %13619 = add i64 %13569, 55
  store i64 %13619, i64* %3, align 8
  %13620 = inttoptr i64 %13618 to i64*
  %13621 = load i64, i64* %13620, align 8
  store i64 %13621, i64* %RCX.i2595, align 8
  %13622 = add i64 %13621, 2
  %13623 = add i64 %13569, 59
  store i64 %13623, i64* %3, align 8
  %13624 = inttoptr i64 %13622 to i16*
  store i16 %13589, i16* %13624, align 2
  %13625 = load i64, i64* %RBP.i, align 8
  %13626 = add i64 %13625, -16
  %13627 = load i64, i64* %3, align 8
  %13628 = add i64 %13627, 4
  store i64 %13628, i64* %3, align 8
  %13629 = inttoptr i64 %13626 to i64*
  %13630 = load i64, i64* %13629, align 8
  store i64 %13630, i64* %RCX.i2595, align 8
  %13631 = add i64 %13630, 1600
  %13632 = add i64 %13627, 11
  store i64 %13632, i64* %3, align 8
  %13633 = inttoptr i64 %13631 to i64*
  %13634 = load i64, i64* %13633, align 8
  store i64 %13634, i64* %RCX.i2595, align 8
  %13635 = add i64 %13627, 14
  store i64 %13635, i64* %3, align 8
  %13636 = inttoptr i64 %13634 to i64*
  %13637 = load i64, i64* %13636, align 8
  store i64 %13637, i64* %RCX.i2595, align 8
  %13638 = add i64 %13625, -52
  %13639 = add i64 %13627, 17
  store i64 %13639, i64* %3, align 8
  %13640 = inttoptr i64 %13638 to i32*
  %13641 = load i32, i32* %13640, align 4
  %13642 = and i32 %13641, 2
  %13643 = zext i32 %13642 to i64
  store i64 %13643, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13644 = tail call i32 @llvm.ctpop.i32(i32 %13642)
  %13645 = trunc i32 %13644 to i8
  %13646 = xor i8 %13645, 1
  store i8 %13646, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit598 = lshr exact i32 %13642, 1
  %13647 = trunc i32 %.lobit598 to i8
  %13648 = xor i8 %13647, 1
  store i8 %13648, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13649 = add i64 %13625, -1176
  %13650 = add i64 %13627, 30
  store i64 %13650, i64* %3, align 8
  %13651 = inttoptr i64 %13649 to i64*
  store i64 %13637, i64* %13651, align 8
  %13652 = load i64, i64* %3, align 8
  %13653 = load i8, i8* %34, align 1
  %13654 = icmp ne i8 %13653, 0
  %.v761 = select i1 %13654, i64 23, i64 6
  %13655 = add i64 %13652, %.v761
  %cmpBr_458507 = icmp eq i8 %13653, 1
  %13656 = load i64, i64* %RBP.i, align 8
  %13657 = add i64 %13656, -52
  %13658 = add i64 %13655, 3
  store i64 %13658, i64* %3, align 8
  %13659 = inttoptr i64 %13657 to i32*
  %13660 = load i32, i32* %13659, align 4
  %13661 = zext i32 %13660 to i64
  store i64 %13661, i64* %RAX.i3176, align 8
  %13662 = add i64 %13655, 6
  store i64 %13662, i64* %3, align 8
  br i1 %cmpBr_458507, label %block_.L_45851e, label %block_45850d

block_45850d:                                     ; preds = %block_.L_4584ae
  %13663 = or i64 %13661, 1
  %13664 = trunc i64 %13663 to i32
  store i64 %13663, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13665 = and i32 %13664, 255
  %13666 = tail call i32 @llvm.ctpop.i32(i32 %13665)
  %13667 = trunc i32 %13666 to i8
  %13668 = and i8 %13667, 1
  %13669 = xor i8 %13668, 1
  store i8 %13669, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13670 = lshr i32 %13664, 31
  %13671 = trunc i32 %13670 to i8
  store i8 %13671, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13672 = add i64 %13656, -1180
  %13673 = add i64 %13655, 12
  store i64 %13673, i64* %3, align 8
  %13674 = inttoptr i64 %13672 to i32*
  store i32 %13664, i32* %13674, align 4
  %13675 = load i64, i64* %3, align 8
  %13676 = add i64 %13675, 17
  store i64 %13676, i64* %3, align 8
  br label %block_.L_45852a

block_.L_45851e:                                  ; preds = %block_.L_4584ae
  %13677 = and i64 %13661, 4294967294
  store i64 %13677, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13678 = and i32 %13660, 254
  %13679 = tail call i32 @llvm.ctpop.i32(i32 %13678)
  %13680 = trunc i32 %13679 to i8
  %13681 = and i8 %13680, 1
  %13682 = xor i8 %13681, 1
  store i8 %13682, i8* %26, align 1
  %13683 = icmp ult i32 %13660, 2
  %13684 = zext i1 %13683 to i8
  store i8 %13684, i8* %34, align 1
  %13685 = lshr i32 %13660, 31
  %13686 = trunc i32 %13685 to i8
  store i8 %13686, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13687 = add i64 %13656, -1180
  %13688 = trunc i64 %13677 to i32
  %13689 = add i64 %13655, 12
  store i64 %13689, i64* %3, align 8
  %13690 = inttoptr i64 %13687 to i32*
  store i32 %13688, i32* %13690, align 4
  %.pre423 = load i64, i64* %3, align 8
  br label %block_.L_45852a

block_.L_45852a:                                  ; preds = %block_.L_45851e, %block_45850d
  %13691 = phi i64 [ %.pre423, %block_.L_45851e ], [ %13676, %block_45850d ]
  %13692 = load i64, i64* %RBP.i, align 8
  %13693 = add i64 %13692, -1180
  %13694 = add i64 %13691, 6
  store i64 %13694, i64* %3, align 8
  %13695 = inttoptr i64 %13693 to i32*
  %13696 = load i32, i32* %13695, align 4
  %13697 = zext i32 %13696 to i64
  store i64 %13697, i64* %RAX.i3176, align 8
  %13698 = sext i32 %13696 to i64
  store i64 %13698, i64* %RCX.i2595, align 8
  %13699 = add i64 %13692, -1176
  %13700 = add i64 %13691, 16
  store i64 %13700, i64* %3, align 8
  %13701 = inttoptr i64 %13699 to i64*
  %13702 = load i64, i64* %13701, align 8
  store i64 %13702, i64* %RDX.i2592, align 8
  %13703 = shl nsw i64 %13698, 3
  %13704 = add i64 %13703, %13702
  %13705 = add i64 %13691, 20
  store i64 %13705, i64* %3, align 8
  %13706 = inttoptr i64 %13704 to i64*
  %13707 = load i64, i64* %13706, align 8
  store i64 %13707, i64* %RCX.i2595, align 8
  %13708 = add i64 %13692, -56
  %13709 = add i64 %13691, 23
  store i64 %13709, i64* %3, align 8
  %13710 = inttoptr i64 %13708 to i32*
  %13711 = load i32, i32* %13710, align 4
  %13712 = and i32 %13711, 2
  %13713 = zext i32 %13712 to i64
  store i64 %13713, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13714 = tail call i32 @llvm.ctpop.i32(i32 %13712)
  %13715 = trunc i32 %13714 to i8
  %13716 = xor i8 %13715, 1
  store i8 %13716, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit599 = lshr exact i32 %13712, 1
  %13717 = trunc i32 %.lobit599 to i8
  %13718 = xor i8 %13717, 1
  store i8 %13718, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13719 = add i64 %13692, -1192
  %13720 = add i64 %13691, 36
  store i64 %13720, i64* %3, align 8
  %13721 = inttoptr i64 %13719 to i64*
  store i64 %13707, i64* %13721, align 8
  %13722 = load i64, i64* %3, align 8
  %13723 = load i8, i8* %34, align 1
  %13724 = icmp ne i8 %13723, 0
  %.v762 = select i1 %13724, i64 23, i64 6
  %13725 = add i64 %13722, %.v762
  %cmpBr_45854e = icmp eq i8 %13723, 1
  %13726 = load i64, i64* %RBP.i, align 8
  %13727 = add i64 %13726, -56
  %13728 = add i64 %13725, 3
  store i64 %13728, i64* %3, align 8
  %13729 = inttoptr i64 %13727 to i32*
  %13730 = load i32, i32* %13729, align 4
  %13731 = zext i32 %13730 to i64
  store i64 %13731, i64* %RAX.i3176, align 8
  %13732 = add i64 %13725, 6
  store i64 %13732, i64* %3, align 8
  br i1 %cmpBr_45854e, label %block_.L_458565, label %block_458554

block_458554:                                     ; preds = %block_.L_45852a
  %13733 = or i64 %13731, 1
  %13734 = trunc i64 %13733 to i32
  store i64 %13733, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13735 = and i32 %13734, 255
  %13736 = tail call i32 @llvm.ctpop.i32(i32 %13735)
  %13737 = trunc i32 %13736 to i8
  %13738 = and i8 %13737, 1
  %13739 = xor i8 %13738, 1
  store i8 %13739, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13740 = lshr i32 %13734, 31
  %13741 = trunc i32 %13740 to i8
  store i8 %13741, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13742 = add i64 %13726, -1196
  %13743 = add i64 %13725, 12
  store i64 %13743, i64* %3, align 8
  %13744 = inttoptr i64 %13742 to i32*
  store i32 %13734, i32* %13744, align 4
  %13745 = load i64, i64* %3, align 8
  %13746 = add i64 %13745, 17
  store i64 %13746, i64* %3, align 8
  br label %block_.L_458571

block_.L_458565:                                  ; preds = %block_.L_45852a
  %13747 = and i64 %13731, 4294967294
  store i64 %13747, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13748 = and i32 %13730, 254
  %13749 = tail call i32 @llvm.ctpop.i32(i32 %13748)
  %13750 = trunc i32 %13749 to i8
  %13751 = and i8 %13750, 1
  %13752 = xor i8 %13751, 1
  store i8 %13752, i8* %26, align 1
  %13753 = icmp ult i32 %13730, 2
  %13754 = zext i1 %13753 to i8
  store i8 %13754, i8* %34, align 1
  %13755 = lshr i32 %13730, 31
  %13756 = trunc i32 %13755 to i8
  store i8 %13756, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13757 = add i64 %13726, -1196
  %13758 = trunc i64 %13747 to i32
  %13759 = add i64 %13725, 12
  store i64 %13759, i64* %3, align 8
  %13760 = inttoptr i64 %13757 to i32*
  store i32 %13758, i32* %13760, align 4
  %.pre424 = load i64, i64* %3, align 8
  br label %block_.L_458571

block_.L_458571:                                  ; preds = %block_.L_458565, %block_458554
  %13761 = phi i64 [ %.pre424, %block_.L_458565 ], [ %13746, %block_458554 ]
  %13762 = load i64, i64* %RBP.i, align 8
  %13763 = add i64 %13762, -1196
  %13764 = add i64 %13761, 6
  store i64 %13764, i64* %3, align 8
  %13765 = inttoptr i64 %13763 to i32*
  %13766 = load i32, i32* %13765, align 4
  %13767 = zext i32 %13766 to i64
  store i64 %13767, i64* %RAX.i3176, align 8
  %13768 = sext i32 %13766 to i64
  store i64 %13768, i64* %RCX.i2595, align 8
  %13769 = add i64 %13762, -1192
  %13770 = add i64 %13761, 16
  store i64 %13770, i64* %3, align 8
  %13771 = inttoptr i64 %13769 to i64*
  %13772 = load i64, i64* %13771, align 8
  store i64 %13772, i64* %RDX.i2592, align 8
  %13773 = shl nsw i64 %13768, 1
  %13774 = add i64 %13773, %13772
  %13775 = add i64 %13761, 20
  store i64 %13775, i64* %3, align 8
  %13776 = inttoptr i64 %13774 to i16*
  %13777 = load i16, i16* %13776, align 2
  store i16 %13777, i16* %SI.i2438, align 2
  %13778 = add i64 %13762, -16
  %13779 = add i64 %13761, 24
  store i64 %13779, i64* %3, align 8
  %13780 = inttoptr i64 %13778 to i64*
  %13781 = load i64, i64* %13780, align 8
  store i64 %13781, i64* %RCX.i2595, align 8
  %13782 = add i64 %13781, 1600
  %13783 = add i64 %13761, 31
  store i64 %13783, i64* %3, align 8
  %13784 = inttoptr i64 %13782 to i64*
  %13785 = load i64, i64* %13784, align 8
  store i64 %13785, i64* %RCX.i2595, align 8
  %13786 = add i64 %13761, 34
  store i64 %13786, i64* %3, align 8
  %13787 = inttoptr i64 %13785 to i64*
  %13788 = load i64, i64* %13787, align 8
  store i64 %13788, i64* %RCX.i2595, align 8
  %13789 = add i64 %13762, -52
  %13790 = add i64 %13761, 38
  store i64 %13790, i64* %3, align 8
  %13791 = inttoptr i64 %13789 to i32*
  %13792 = load i32, i32* %13791, align 4
  %13793 = sext i32 %13792 to i64
  store i64 %13793, i64* %RDI.i732, align 8
  %13794 = shl nsw i64 %13793, 3
  %13795 = add i64 %13794, %13788
  %13796 = add i64 %13761, 42
  store i64 %13796, i64* %3, align 8
  %13797 = inttoptr i64 %13795 to i64*
  %13798 = load i64, i64* %13797, align 8
  store i64 %13798, i64* %RCX.i2595, align 8
  %13799 = add i64 %13762, -56
  %13800 = add i64 %13761, 46
  store i64 %13800, i64* %3, align 8
  %13801 = inttoptr i64 %13799 to i32*
  %13802 = load i32, i32* %13801, align 4
  %13803 = sext i32 %13802 to i64
  store i64 %13803, i64* %RDI.i732, align 8
  %13804 = shl nsw i64 %13803, 1
  %13805 = add i64 %13804, %13798
  %13806 = add i64 %13761, 50
  store i64 %13806, i64* %3, align 8
  %13807 = inttoptr i64 %13805 to i16*
  store i16 %13777, i16* %13807, align 2
  %13808 = load i64, i64* %RBP.i, align 8
  %13809 = add i64 %13808, -16
  %13810 = load i64, i64* %3, align 8
  %13811 = add i64 %13810, 4
  store i64 %13811, i64* %3, align 8
  %13812 = inttoptr i64 %13809 to i64*
  %13813 = load i64, i64* %13812, align 8
  store i64 %13813, i64* %RCX.i2595, align 8
  %13814 = add i64 %13813, 1600
  %13815 = add i64 %13810, 11
  store i64 %13815, i64* %3, align 8
  %13816 = inttoptr i64 %13814 to i64*
  %13817 = load i64, i64* %13816, align 8
  store i64 %13817, i64* %RCX.i2595, align 8
  %13818 = add i64 %13817, 8
  %13819 = add i64 %13810, 15
  store i64 %13819, i64* %3, align 8
  %13820 = inttoptr i64 %13818 to i64*
  %13821 = load i64, i64* %13820, align 8
  store i64 %13821, i64* %RCX.i2595, align 8
  %13822 = add i64 %13808, -52
  %13823 = add i64 %13810, 18
  store i64 %13823, i64* %3, align 8
  %13824 = inttoptr i64 %13822 to i32*
  %13825 = load i32, i32* %13824, align 4
  %13826 = and i32 %13825, 2
  %13827 = zext i32 %13826 to i64
  store i64 %13827, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13828 = tail call i32 @llvm.ctpop.i32(i32 %13826)
  %13829 = trunc i32 %13828 to i8
  %13830 = xor i8 %13829, 1
  store i8 %13830, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit600 = lshr exact i32 %13826, 1
  %13831 = trunc i32 %.lobit600 to i8
  %13832 = xor i8 %13831, 1
  store i8 %13832, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13833 = add i64 %13808, -1208
  %13834 = add i64 %13810, 31
  store i64 %13834, i64* %3, align 8
  %13835 = inttoptr i64 %13833 to i64*
  store i64 %13821, i64* %13835, align 8
  %13836 = load i64, i64* %3, align 8
  %13837 = load i8, i8* %34, align 1
  %13838 = icmp ne i8 %13837, 0
  %.v763 = select i1 %13838, i64 23, i64 6
  %13839 = add i64 %13836, %.v763
  %cmpBr_4585c2 = icmp eq i8 %13837, 1
  %13840 = load i64, i64* %RBP.i, align 8
  %13841 = add i64 %13840, -52
  %13842 = add i64 %13839, 3
  store i64 %13842, i64* %3, align 8
  %13843 = inttoptr i64 %13841 to i32*
  %13844 = load i32, i32* %13843, align 4
  %13845 = zext i32 %13844 to i64
  store i64 %13845, i64* %RAX.i3176, align 8
  %13846 = add i64 %13839, 6
  store i64 %13846, i64* %3, align 8
  br i1 %cmpBr_4585c2, label %block_.L_4585d9, label %block_4585c8

block_4585c8:                                     ; preds = %block_.L_458571
  %13847 = or i64 %13845, 1
  %13848 = trunc i64 %13847 to i32
  store i64 %13847, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13849 = and i32 %13848, 255
  %13850 = tail call i32 @llvm.ctpop.i32(i32 %13849)
  %13851 = trunc i32 %13850 to i8
  %13852 = and i8 %13851, 1
  %13853 = xor i8 %13852, 1
  store i8 %13853, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13854 = lshr i32 %13848, 31
  %13855 = trunc i32 %13854 to i8
  store i8 %13855, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13856 = add i64 %13840, -1212
  %13857 = add i64 %13839, 12
  store i64 %13857, i64* %3, align 8
  %13858 = inttoptr i64 %13856 to i32*
  store i32 %13848, i32* %13858, align 4
  %13859 = load i64, i64* %3, align 8
  %13860 = add i64 %13859, 17
  store i64 %13860, i64* %3, align 8
  br label %block_.L_4585e5

block_.L_4585d9:                                  ; preds = %block_.L_458571
  %13861 = and i64 %13845, 4294967294
  store i64 %13861, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13862 = and i32 %13844, 254
  %13863 = tail call i32 @llvm.ctpop.i32(i32 %13862)
  %13864 = trunc i32 %13863 to i8
  %13865 = and i8 %13864, 1
  %13866 = xor i8 %13865, 1
  store i8 %13866, i8* %26, align 1
  %13867 = icmp ult i32 %13844, 2
  %13868 = zext i1 %13867 to i8
  store i8 %13868, i8* %34, align 1
  %13869 = lshr i32 %13844, 31
  %13870 = trunc i32 %13869 to i8
  store i8 %13870, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13871 = add i64 %13840, -1212
  %13872 = trunc i64 %13861 to i32
  %13873 = add i64 %13839, 12
  store i64 %13873, i64* %3, align 8
  %13874 = inttoptr i64 %13871 to i32*
  store i32 %13872, i32* %13874, align 4
  %.pre425 = load i64, i64* %3, align 8
  br label %block_.L_4585e5

block_.L_4585e5:                                  ; preds = %block_.L_4585d9, %block_4585c8
  %13875 = phi i64 [ %.pre425, %block_.L_4585d9 ], [ %13860, %block_4585c8 ]
  %13876 = load i64, i64* %RBP.i, align 8
  %13877 = add i64 %13876, -1212
  %13878 = add i64 %13875, 6
  store i64 %13878, i64* %3, align 8
  %13879 = inttoptr i64 %13877 to i32*
  %13880 = load i32, i32* %13879, align 4
  %13881 = zext i32 %13880 to i64
  store i64 %13881, i64* %RAX.i3176, align 8
  %13882 = sext i32 %13880 to i64
  store i64 %13882, i64* %RCX.i2595, align 8
  %13883 = add i64 %13876, -1208
  %13884 = add i64 %13875, 16
  store i64 %13884, i64* %3, align 8
  %13885 = inttoptr i64 %13883 to i64*
  %13886 = load i64, i64* %13885, align 8
  store i64 %13886, i64* %RDX.i2592, align 8
  %13887 = shl nsw i64 %13882, 3
  %13888 = add i64 %13887, %13886
  %13889 = add i64 %13875, 20
  store i64 %13889, i64* %3, align 8
  %13890 = inttoptr i64 %13888 to i64*
  %13891 = load i64, i64* %13890, align 8
  store i64 %13891, i64* %RCX.i2595, align 8
  %13892 = add i64 %13876, -56
  %13893 = add i64 %13875, 23
  store i64 %13893, i64* %3, align 8
  %13894 = inttoptr i64 %13892 to i32*
  %13895 = load i32, i32* %13894, align 4
  %13896 = and i32 %13895, 2
  %13897 = zext i32 %13896 to i64
  store i64 %13897, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13898 = tail call i32 @llvm.ctpop.i32(i32 %13896)
  %13899 = trunc i32 %13898 to i8
  %13900 = xor i8 %13899, 1
  store i8 %13900, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit601 = lshr exact i32 %13896, 1
  %13901 = trunc i32 %.lobit601 to i8
  %13902 = xor i8 %13901, 1
  store i8 %13902, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %13903 = add i64 %13876, -1224
  %13904 = add i64 %13875, 36
  store i64 %13904, i64* %3, align 8
  %13905 = inttoptr i64 %13903 to i64*
  store i64 %13891, i64* %13905, align 8
  %13906 = load i64, i64* %3, align 8
  %13907 = load i8, i8* %34, align 1
  %13908 = icmp ne i8 %13907, 0
  %.v764 = select i1 %13908, i64 23, i64 6
  %13909 = add i64 %13906, %.v764
  %cmpBr_458609 = icmp eq i8 %13907, 1
  %13910 = load i64, i64* %RBP.i, align 8
  %13911 = add i64 %13910, -56
  %13912 = add i64 %13909, 3
  store i64 %13912, i64* %3, align 8
  %13913 = inttoptr i64 %13911 to i32*
  %13914 = load i32, i32* %13913, align 4
  %13915 = zext i32 %13914 to i64
  store i64 %13915, i64* %RAX.i3176, align 8
  %13916 = add i64 %13909, 6
  store i64 %13916, i64* %3, align 8
  br i1 %cmpBr_458609, label %block_.L_458620, label %block_45860f

block_45860f:                                     ; preds = %block_.L_4585e5
  %13917 = or i64 %13915, 1
  %13918 = trunc i64 %13917 to i32
  store i64 %13917, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13919 = and i32 %13918, 255
  %13920 = tail call i32 @llvm.ctpop.i32(i32 %13919)
  %13921 = trunc i32 %13920 to i8
  %13922 = and i8 %13921, 1
  %13923 = xor i8 %13922, 1
  store i8 %13923, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %13924 = lshr i32 %13918, 31
  %13925 = trunc i32 %13924 to i8
  store i8 %13925, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13926 = add i64 %13910, -1228
  %13927 = add i64 %13909, 12
  store i64 %13927, i64* %3, align 8
  %13928 = inttoptr i64 %13926 to i32*
  store i32 %13918, i32* %13928, align 4
  %13929 = load i64, i64* %3, align 8
  %13930 = add i64 %13929, 17
  store i64 %13930, i64* %3, align 8
  br label %block_.L_45862c

block_.L_458620:                                  ; preds = %block_.L_4585e5
  %13931 = and i64 %13915, 4294967294
  store i64 %13931, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %13932 = and i32 %13914, 254
  %13933 = tail call i32 @llvm.ctpop.i32(i32 %13932)
  %13934 = trunc i32 %13933 to i8
  %13935 = and i8 %13934, 1
  %13936 = xor i8 %13935, 1
  store i8 %13936, i8* %26, align 1
  %13937 = icmp ult i32 %13914, 2
  %13938 = zext i1 %13937 to i8
  store i8 %13938, i8* %34, align 1
  %13939 = lshr i32 %13914, 31
  %13940 = trunc i32 %13939 to i8
  store i8 %13940, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %13941 = add i64 %13910, -1228
  %13942 = trunc i64 %13931 to i32
  %13943 = add i64 %13909, 12
  store i64 %13943, i64* %3, align 8
  %13944 = inttoptr i64 %13941 to i32*
  store i32 %13942, i32* %13944, align 4
  %.pre426 = load i64, i64* %3, align 8
  br label %block_.L_45862c

block_.L_45862c:                                  ; preds = %block_.L_458620, %block_45860f
  %13945 = phi i64 [ %.pre426, %block_.L_458620 ], [ %13930, %block_45860f ]
  %13946 = load i64, i64* %RBP.i, align 8
  %13947 = add i64 %13946, -1228
  %13948 = add i64 %13945, 6
  store i64 %13948, i64* %3, align 8
  %13949 = inttoptr i64 %13947 to i32*
  %13950 = load i32, i32* %13949, align 4
  %13951 = zext i32 %13950 to i64
  store i64 %13951, i64* %RAX.i3176, align 8
  %13952 = sext i32 %13950 to i64
  store i64 %13952, i64* %RCX.i2595, align 8
  %13953 = add i64 %13946, -1224
  %13954 = add i64 %13945, 16
  store i64 %13954, i64* %3, align 8
  %13955 = inttoptr i64 %13953 to i64*
  %13956 = load i64, i64* %13955, align 8
  store i64 %13956, i64* %RDX.i2592, align 8
  %13957 = shl nsw i64 %13952, 1
  %13958 = add i64 %13957, %13956
  %13959 = add i64 %13945, 20
  store i64 %13959, i64* %3, align 8
  %13960 = inttoptr i64 %13958 to i16*
  %13961 = load i16, i16* %13960, align 2
  store i16 %13961, i16* %SI.i2438, align 2
  %13962 = add i64 %13946, -16
  %13963 = add i64 %13945, 24
  store i64 %13963, i64* %3, align 8
  %13964 = inttoptr i64 %13962 to i64*
  %13965 = load i64, i64* %13964, align 8
  store i64 %13965, i64* %RCX.i2595, align 8
  %13966 = add i64 %13965, 1600
  %13967 = add i64 %13945, 31
  store i64 %13967, i64* %3, align 8
  %13968 = inttoptr i64 %13966 to i64*
  %13969 = load i64, i64* %13968, align 8
  store i64 %13969, i64* %RCX.i2595, align 8
  %13970 = add i64 %13969, 8
  %13971 = add i64 %13945, 35
  store i64 %13971, i64* %3, align 8
  %13972 = inttoptr i64 %13970 to i64*
  %13973 = load i64, i64* %13972, align 8
  store i64 %13973, i64* %RCX.i2595, align 8
  %13974 = add i64 %13946, -52
  %13975 = add i64 %13945, 39
  store i64 %13975, i64* %3, align 8
  %13976 = inttoptr i64 %13974 to i32*
  %13977 = load i32, i32* %13976, align 4
  %13978 = sext i32 %13977 to i64
  store i64 %13978, i64* %RDI.i732, align 8
  %13979 = shl nsw i64 %13978, 3
  %13980 = add i64 %13979, %13973
  %13981 = add i64 %13945, 43
  store i64 %13981, i64* %3, align 8
  %13982 = inttoptr i64 %13980 to i64*
  %13983 = load i64, i64* %13982, align 8
  store i64 %13983, i64* %RCX.i2595, align 8
  %13984 = add i64 %13946, -56
  %13985 = add i64 %13945, 47
  store i64 %13985, i64* %3, align 8
  %13986 = inttoptr i64 %13984 to i32*
  %13987 = load i32, i32* %13986, align 4
  %13988 = sext i32 %13987 to i64
  store i64 %13988, i64* %RDI.i732, align 8
  %13989 = shl nsw i64 %13988, 1
  %13990 = add i64 %13989, %13983
  %13991 = add i64 %13945, 51
  store i64 %13991, i64* %3, align 8
  %13992 = inttoptr i64 %13990 to i16*
  store i16 %13961, i16* %13992, align 2
  %13993 = load i64, i64* %RBP.i, align 8
  %13994 = add i64 %13993, -16
  %13995 = load i64, i64* %3, align 8
  %13996 = add i64 %13995, 4
  store i64 %13996, i64* %3, align 8
  %13997 = inttoptr i64 %13994 to i64*
  %13998 = load i64, i64* %13997, align 8
  store i64 %13998, i64* %RCX.i2595, align 8
  %13999 = add i64 %13998, 1608
  %14000 = add i64 %13995, 11
  store i64 %14000, i64* %3, align 8
  %14001 = inttoptr i64 %13999 to i64*
  %14002 = load i64, i64* %14001, align 8
  store i64 %14002, i64* %RCX.i2595, align 8
  %14003 = add i64 %13995, 14
  store i64 %14003, i64* %3, align 8
  %14004 = inttoptr i64 %14002 to i64*
  %14005 = load i64, i64* %14004, align 8
  store i64 %14005, i64* %RCX.i2595, align 8
  %14006 = add i64 %13993, -52
  %14007 = add i64 %13995, 17
  store i64 %14007, i64* %3, align 8
  %14008 = inttoptr i64 %14006 to i32*
  %14009 = load i32, i32* %14008, align 4
  %14010 = and i32 %14009, 2
  %14011 = zext i32 %14010 to i64
  store i64 %14011, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14012 = tail call i32 @llvm.ctpop.i32(i32 %14010)
  %14013 = trunc i32 %14012 to i8
  %14014 = xor i8 %14013, 1
  store i8 %14014, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit602 = lshr exact i32 %14010, 1
  %14015 = trunc i32 %.lobit602 to i8
  %14016 = xor i8 %14015, 1
  store i8 %14016, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %14017 = add i64 %13993, -1240
  %14018 = add i64 %13995, 30
  store i64 %14018, i64* %3, align 8
  %14019 = inttoptr i64 %14017 to i64*
  store i64 %14005, i64* %14019, align 8
  %14020 = load i64, i64* %3, align 8
  %14021 = load i8, i8* %34, align 1
  %14022 = icmp ne i8 %14021, 0
  %.v765 = select i1 %14022, i64 23, i64 6
  %14023 = add i64 %14020, %.v765
  %cmpBr_45867d = icmp eq i8 %14021, 1
  %14024 = load i64, i64* %RBP.i, align 8
  %14025 = add i64 %14024, -52
  %14026 = add i64 %14023, 3
  store i64 %14026, i64* %3, align 8
  %14027 = inttoptr i64 %14025 to i32*
  %14028 = load i32, i32* %14027, align 4
  %14029 = zext i32 %14028 to i64
  store i64 %14029, i64* %RAX.i3176, align 8
  %14030 = add i64 %14023, 6
  store i64 %14030, i64* %3, align 8
  br i1 %cmpBr_45867d, label %block_.L_458694, label %block_458683

block_458683:                                     ; preds = %block_.L_45862c
  %14031 = or i64 %14029, 1
  %14032 = trunc i64 %14031 to i32
  store i64 %14031, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14033 = and i32 %14032, 255
  %14034 = tail call i32 @llvm.ctpop.i32(i32 %14033)
  %14035 = trunc i32 %14034 to i8
  %14036 = and i8 %14035, 1
  %14037 = xor i8 %14036, 1
  store i8 %14037, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %14038 = lshr i32 %14032, 31
  %14039 = trunc i32 %14038 to i8
  store i8 %14039, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %14040 = add i64 %14024, -1244
  %14041 = add i64 %14023, 12
  store i64 %14041, i64* %3, align 8
  %14042 = inttoptr i64 %14040 to i32*
  store i32 %14032, i32* %14042, align 4
  %14043 = load i64, i64* %3, align 8
  %14044 = add i64 %14043, 17
  store i64 %14044, i64* %3, align 8
  br label %block_.L_4586a0

block_.L_458694:                                  ; preds = %block_.L_45862c
  %14045 = and i64 %14029, 4294967294
  store i64 %14045, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14046 = and i32 %14028, 254
  %14047 = tail call i32 @llvm.ctpop.i32(i32 %14046)
  %14048 = trunc i32 %14047 to i8
  %14049 = and i8 %14048, 1
  %14050 = xor i8 %14049, 1
  store i8 %14050, i8* %26, align 1
  %14051 = icmp ult i32 %14028, 2
  %14052 = zext i1 %14051 to i8
  store i8 %14052, i8* %34, align 1
  %14053 = lshr i32 %14028, 31
  %14054 = trunc i32 %14053 to i8
  store i8 %14054, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %14055 = add i64 %14024, -1244
  %14056 = trunc i64 %14045 to i32
  %14057 = add i64 %14023, 12
  store i64 %14057, i64* %3, align 8
  %14058 = inttoptr i64 %14055 to i32*
  store i32 %14056, i32* %14058, align 4
  %.pre427 = load i64, i64* %3, align 8
  br label %block_.L_4586a0

block_.L_4586a0:                                  ; preds = %block_.L_458694, %block_458683
  %14059 = phi i64 [ %.pre427, %block_.L_458694 ], [ %14044, %block_458683 ]
  %14060 = load i64, i64* %RBP.i, align 8
  %14061 = add i64 %14060, -1244
  %14062 = add i64 %14059, 6
  store i64 %14062, i64* %3, align 8
  %14063 = inttoptr i64 %14061 to i32*
  %14064 = load i32, i32* %14063, align 4
  %14065 = zext i32 %14064 to i64
  store i64 %14065, i64* %RAX.i3176, align 8
  %14066 = sext i32 %14064 to i64
  store i64 %14066, i64* %RCX.i2595, align 8
  %14067 = add i64 %14060, -1240
  %14068 = add i64 %14059, 16
  store i64 %14068, i64* %3, align 8
  %14069 = inttoptr i64 %14067 to i64*
  %14070 = load i64, i64* %14069, align 8
  store i64 %14070, i64* %RDX.i2592, align 8
  %14071 = shl nsw i64 %14066, 3
  %14072 = add i64 %14071, %14070
  %14073 = add i64 %14059, 20
  store i64 %14073, i64* %3, align 8
  %14074 = inttoptr i64 %14072 to i64*
  %14075 = load i64, i64* %14074, align 8
  store i64 %14075, i64* %RCX.i2595, align 8
  %14076 = add i64 %14060, -56
  %14077 = add i64 %14059, 23
  store i64 %14077, i64* %3, align 8
  %14078 = inttoptr i64 %14076 to i32*
  %14079 = load i32, i32* %14078, align 4
  %14080 = and i32 %14079, 2
  %14081 = zext i32 %14080 to i64
  store i64 %14081, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14082 = tail call i32 @llvm.ctpop.i32(i32 %14080)
  %14083 = trunc i32 %14082 to i8
  %14084 = xor i8 %14083, 1
  store i8 %14084, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit603 = lshr exact i32 %14080, 1
  %14085 = trunc i32 %.lobit603 to i8
  %14086 = xor i8 %14085, 1
  store i8 %14086, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %14087 = add i64 %14060, -1256
  %14088 = add i64 %14059, 36
  store i64 %14088, i64* %3, align 8
  %14089 = inttoptr i64 %14087 to i64*
  store i64 %14075, i64* %14089, align 8
  %14090 = load i64, i64* %3, align 8
  %14091 = load i8, i8* %34, align 1
  %14092 = icmp ne i8 %14091, 0
  %.v766 = select i1 %14092, i64 23, i64 6
  %14093 = add i64 %14090, %.v766
  %cmpBr_4586c4 = icmp eq i8 %14091, 1
  %14094 = load i64, i64* %RBP.i, align 8
  %14095 = add i64 %14094, -56
  %14096 = add i64 %14093, 3
  store i64 %14096, i64* %3, align 8
  %14097 = inttoptr i64 %14095 to i32*
  %14098 = load i32, i32* %14097, align 4
  %14099 = zext i32 %14098 to i64
  store i64 %14099, i64* %RAX.i3176, align 8
  %14100 = add i64 %14093, 6
  store i64 %14100, i64* %3, align 8
  br i1 %cmpBr_4586c4, label %block_.L_4586db, label %block_4586ca

block_4586ca:                                     ; preds = %block_.L_4586a0
  %14101 = or i64 %14099, 1
  %14102 = trunc i64 %14101 to i32
  store i64 %14101, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14103 = and i32 %14102, 255
  %14104 = tail call i32 @llvm.ctpop.i32(i32 %14103)
  %14105 = trunc i32 %14104 to i8
  %14106 = and i8 %14105, 1
  %14107 = xor i8 %14106, 1
  store i8 %14107, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %14108 = lshr i32 %14102, 31
  %14109 = trunc i32 %14108 to i8
  store i8 %14109, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %14110 = add i64 %14094, -1260
  %14111 = add i64 %14093, 12
  store i64 %14111, i64* %3, align 8
  %14112 = inttoptr i64 %14110 to i32*
  store i32 %14102, i32* %14112, align 4
  %14113 = load i64, i64* %3, align 8
  %14114 = add i64 %14113, 17
  store i64 %14114, i64* %3, align 8
  br label %block_.L_4586e7

block_.L_4586db:                                  ; preds = %block_.L_4586a0
  %14115 = and i64 %14099, 4294967294
  store i64 %14115, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14116 = and i32 %14098, 254
  %14117 = tail call i32 @llvm.ctpop.i32(i32 %14116)
  %14118 = trunc i32 %14117 to i8
  %14119 = and i8 %14118, 1
  %14120 = xor i8 %14119, 1
  store i8 %14120, i8* %26, align 1
  %14121 = icmp ult i32 %14098, 2
  %14122 = zext i1 %14121 to i8
  store i8 %14122, i8* %34, align 1
  %14123 = lshr i32 %14098, 31
  %14124 = trunc i32 %14123 to i8
  store i8 %14124, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %14125 = add i64 %14094, -1260
  %14126 = trunc i64 %14115 to i32
  %14127 = add i64 %14093, 12
  store i64 %14127, i64* %3, align 8
  %14128 = inttoptr i64 %14125 to i32*
  store i32 %14126, i32* %14128, align 4
  %.pre428 = load i64, i64* %3, align 8
  br label %block_.L_4586e7

block_.L_4586e7:                                  ; preds = %block_.L_4586db, %block_4586ca
  %14129 = phi i64 [ %.pre428, %block_.L_4586db ], [ %14114, %block_4586ca ]
  %14130 = load i64, i64* %RBP.i, align 8
  %14131 = add i64 %14130, -1260
  %14132 = add i64 %14129, 6
  store i64 %14132, i64* %3, align 8
  %14133 = inttoptr i64 %14131 to i32*
  %14134 = load i32, i32* %14133, align 4
  %14135 = zext i32 %14134 to i64
  store i64 %14135, i64* %RAX.i3176, align 8
  %14136 = sext i32 %14134 to i64
  store i64 %14136, i64* %RCX.i2595, align 8
  %14137 = add i64 %14130, -1256
  %14138 = add i64 %14129, 16
  store i64 %14138, i64* %3, align 8
  %14139 = inttoptr i64 %14137 to i64*
  %14140 = load i64, i64* %14139, align 8
  store i64 %14140, i64* %RDX.i2592, align 8
  %14141 = shl nsw i64 %14136, 3
  %14142 = add i64 %14141, %14140
  %14143 = add i64 %14129, 20
  store i64 %14143, i64* %3, align 8
  %14144 = inttoptr i64 %14142 to i64*
  %14145 = load i64, i64* %14144, align 8
  store i64 %14145, i64* %RCX.i2595, align 8
  %14146 = add i64 %14130, -16
  %14147 = add i64 %14129, 24
  store i64 %14147, i64* %3, align 8
  %14148 = inttoptr i64 %14146 to i64*
  %14149 = load i64, i64* %14148, align 8
  store i64 %14149, i64* %RSI.i766, align 8
  %14150 = add i64 %14149, 1608
  %14151 = add i64 %14129, 31
  store i64 %14151, i64* %3, align 8
  %14152 = inttoptr i64 %14150 to i64*
  %14153 = load i64, i64* %14152, align 8
  store i64 %14153, i64* %RSI.i766, align 8
  %14154 = add i64 %14129, 34
  store i64 %14154, i64* %3, align 8
  %14155 = inttoptr i64 %14153 to i64*
  %14156 = load i64, i64* %14155, align 8
  store i64 %14156, i64* %RSI.i766, align 8
  %14157 = add i64 %14130, -52
  %14158 = add i64 %14129, 38
  store i64 %14158, i64* %3, align 8
  %14159 = inttoptr i64 %14157 to i32*
  %14160 = load i32, i32* %14159, align 4
  %14161 = sext i32 %14160 to i64
  store i64 %14161, i64* %RDI.i732, align 8
  %14162 = shl nsw i64 %14161, 3
  %14163 = add i64 %14162, %14156
  %14164 = add i64 %14129, 42
  store i64 %14164, i64* %3, align 8
  %14165 = inttoptr i64 %14163 to i64*
  %14166 = load i64, i64* %14165, align 8
  store i64 %14166, i64* %RSI.i766, align 8
  %14167 = add i64 %14130, -56
  %14168 = add i64 %14129, 46
  store i64 %14168, i64* %3, align 8
  %14169 = inttoptr i64 %14167 to i32*
  %14170 = load i32, i32* %14169, align 4
  %14171 = sext i32 %14170 to i64
  store i64 %14171, i64* %RDI.i732, align 8
  %14172 = shl nsw i64 %14171, 3
  %14173 = add i64 %14172, %14166
  %14174 = add i64 %14129, 50
  store i64 %14174, i64* %3, align 8
  %14175 = inttoptr i64 %14173 to i64*
  store i64 %14145, i64* %14175, align 8
  %14176 = load i64, i64* %RBP.i, align 8
  %14177 = add i64 %14176, -16
  %14178 = load i64, i64* %3, align 8
  %14179 = add i64 %14178, 4
  store i64 %14179, i64* %3, align 8
  %14180 = inttoptr i64 %14177 to i64*
  %14181 = load i64, i64* %14180, align 8
  store i64 %14181, i64* %RCX.i2595, align 8
  %14182 = add i64 %14181, 1608
  %14183 = add i64 %14178, 11
  store i64 %14183, i64* %3, align 8
  %14184 = inttoptr i64 %14182 to i64*
  %14185 = load i64, i64* %14184, align 8
  store i64 %14185, i64* %RCX.i2595, align 8
  %14186 = add i64 %14185, 8
  %14187 = add i64 %14178, 15
  store i64 %14187, i64* %3, align 8
  %14188 = inttoptr i64 %14186 to i64*
  %14189 = load i64, i64* %14188, align 8
  store i64 %14189, i64* %RCX.i2595, align 8
  %14190 = add i64 %14176, -52
  %14191 = add i64 %14178, 18
  store i64 %14191, i64* %3, align 8
  %14192 = inttoptr i64 %14190 to i32*
  %14193 = load i32, i32* %14192, align 4
  %14194 = and i32 %14193, 2
  %14195 = zext i32 %14194 to i64
  store i64 %14195, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14196 = tail call i32 @llvm.ctpop.i32(i32 %14194)
  %14197 = trunc i32 %14196 to i8
  %14198 = xor i8 %14197, 1
  store i8 %14198, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit604 = lshr exact i32 %14194, 1
  %14199 = trunc i32 %.lobit604 to i8
  %14200 = xor i8 %14199, 1
  store i8 %14200, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %14201 = add i64 %14176, -1272
  %14202 = add i64 %14178, 31
  store i64 %14202, i64* %3, align 8
  %14203 = inttoptr i64 %14201 to i64*
  store i64 %14189, i64* %14203, align 8
  %14204 = load i64, i64* %3, align 8
  %14205 = load i8, i8* %34, align 1
  %14206 = icmp ne i8 %14205, 0
  %.v767 = select i1 %14206, i64 23, i64 6
  %14207 = add i64 %14204, %.v767
  %cmpBr_458738 = icmp eq i8 %14205, 1
  %14208 = load i64, i64* %RBP.i, align 8
  %14209 = add i64 %14208, -52
  %14210 = add i64 %14207, 3
  store i64 %14210, i64* %3, align 8
  %14211 = inttoptr i64 %14209 to i32*
  %14212 = load i32, i32* %14211, align 4
  %14213 = zext i32 %14212 to i64
  store i64 %14213, i64* %RAX.i3176, align 8
  %14214 = add i64 %14207, 6
  store i64 %14214, i64* %3, align 8
  br i1 %cmpBr_458738, label %block_.L_45874f, label %block_45873e

block_45873e:                                     ; preds = %block_.L_4586e7
  %14215 = or i64 %14213, 1
  %14216 = trunc i64 %14215 to i32
  store i64 %14215, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14217 = and i32 %14216, 255
  %14218 = tail call i32 @llvm.ctpop.i32(i32 %14217)
  %14219 = trunc i32 %14218 to i8
  %14220 = and i8 %14219, 1
  %14221 = xor i8 %14220, 1
  store i8 %14221, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %14222 = lshr i32 %14216, 31
  %14223 = trunc i32 %14222 to i8
  store i8 %14223, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %14224 = add i64 %14208, -1276
  %14225 = add i64 %14207, 12
  store i64 %14225, i64* %3, align 8
  %14226 = inttoptr i64 %14224 to i32*
  store i32 %14216, i32* %14226, align 4
  %14227 = load i64, i64* %3, align 8
  %14228 = add i64 %14227, 17
  store i64 %14228, i64* %3, align 8
  br label %block_.L_45875b

block_.L_45874f:                                  ; preds = %block_.L_4586e7
  %14229 = and i64 %14213, 4294967294
  store i64 %14229, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14230 = and i32 %14212, 254
  %14231 = tail call i32 @llvm.ctpop.i32(i32 %14230)
  %14232 = trunc i32 %14231 to i8
  %14233 = and i8 %14232, 1
  %14234 = xor i8 %14233, 1
  store i8 %14234, i8* %26, align 1
  %14235 = icmp ult i32 %14212, 2
  %14236 = zext i1 %14235 to i8
  store i8 %14236, i8* %34, align 1
  %14237 = lshr i32 %14212, 31
  %14238 = trunc i32 %14237 to i8
  store i8 %14238, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %14239 = add i64 %14208, -1276
  %14240 = trunc i64 %14229 to i32
  %14241 = add i64 %14207, 12
  store i64 %14241, i64* %3, align 8
  %14242 = inttoptr i64 %14239 to i32*
  store i32 %14240, i32* %14242, align 4
  %.pre429 = load i64, i64* %3, align 8
  br label %block_.L_45875b

block_.L_45875b:                                  ; preds = %block_.L_45874f, %block_45873e
  %14243 = phi i64 [ %.pre429, %block_.L_45874f ], [ %14228, %block_45873e ]
  %14244 = load i64, i64* %RBP.i, align 8
  %14245 = add i64 %14244, -1276
  %14246 = add i64 %14243, 6
  store i64 %14246, i64* %3, align 8
  %14247 = inttoptr i64 %14245 to i32*
  %14248 = load i32, i32* %14247, align 4
  %14249 = zext i32 %14248 to i64
  store i64 %14249, i64* %RAX.i3176, align 8
  %14250 = sext i32 %14248 to i64
  store i64 %14250, i64* %RCX.i2595, align 8
  %14251 = add i64 %14244, -1272
  %14252 = add i64 %14243, 16
  store i64 %14252, i64* %3, align 8
  %14253 = inttoptr i64 %14251 to i64*
  %14254 = load i64, i64* %14253, align 8
  store i64 %14254, i64* %RDX.i2592, align 8
  %14255 = shl nsw i64 %14250, 3
  %14256 = add i64 %14255, %14254
  %14257 = add i64 %14243, 20
  store i64 %14257, i64* %3, align 8
  %14258 = inttoptr i64 %14256 to i64*
  %14259 = load i64, i64* %14258, align 8
  store i64 %14259, i64* %RCX.i2595, align 8
  %14260 = add i64 %14244, -56
  %14261 = add i64 %14243, 23
  store i64 %14261, i64* %3, align 8
  %14262 = inttoptr i64 %14260 to i32*
  %14263 = load i32, i32* %14262, align 4
  %14264 = and i32 %14263, 2
  %14265 = zext i32 %14264 to i64
  store i64 %14265, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14266 = tail call i32 @llvm.ctpop.i32(i32 %14264)
  %14267 = trunc i32 %14266 to i8
  %14268 = xor i8 %14267, 1
  store i8 %14268, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit605 = lshr exact i32 %14264, 1
  %14269 = trunc i32 %.lobit605 to i8
  %14270 = xor i8 %14269, 1
  store i8 %14270, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %14271 = add i64 %14244, -1288
  %14272 = add i64 %14243, 36
  store i64 %14272, i64* %3, align 8
  %14273 = inttoptr i64 %14271 to i64*
  store i64 %14259, i64* %14273, align 8
  %14274 = load i64, i64* %3, align 8
  %14275 = load i8, i8* %34, align 1
  %14276 = icmp ne i8 %14275, 0
  %.v768 = select i1 %14276, i64 23, i64 6
  %14277 = add i64 %14274, %.v768
  %cmpBr_45877f = icmp eq i8 %14275, 1
  %14278 = load i64, i64* %RBP.i, align 8
  %14279 = add i64 %14278, -56
  %14280 = add i64 %14277, 3
  store i64 %14280, i64* %3, align 8
  %14281 = inttoptr i64 %14279 to i32*
  %14282 = load i32, i32* %14281, align 4
  %14283 = zext i32 %14282 to i64
  store i64 %14283, i64* %RAX.i3176, align 8
  %14284 = add i64 %14277, 6
  store i64 %14284, i64* %3, align 8
  br i1 %cmpBr_45877f, label %block_.L_458796, label %block_458785

block_458785:                                     ; preds = %block_.L_45875b
  %14285 = or i64 %14283, 1
  %14286 = trunc i64 %14285 to i32
  store i64 %14285, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14287 = and i32 %14286, 255
  %14288 = tail call i32 @llvm.ctpop.i32(i32 %14287)
  %14289 = trunc i32 %14288 to i8
  %14290 = and i8 %14289, 1
  %14291 = xor i8 %14290, 1
  store i8 %14291, i8* %26, align 1
  store i8 0, i8* %34, align 1
  %14292 = lshr i32 %14286, 31
  %14293 = trunc i32 %14292 to i8
  store i8 %14293, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %14294 = add i64 %14278, -1292
  %14295 = add i64 %14277, 12
  store i64 %14295, i64* %3, align 8
  %14296 = inttoptr i64 %14294 to i32*
  store i32 %14286, i32* %14296, align 4
  %14297 = load i64, i64* %3, align 8
  %14298 = add i64 %14297, 17
  store i64 %14298, i64* %3, align 8
  br label %block_.L_4587a2

block_.L_458796:                                  ; preds = %block_.L_45875b
  %14299 = and i64 %14283, 4294967294
  store i64 %14299, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %14300 = and i32 %14282, 254
  %14301 = tail call i32 @llvm.ctpop.i32(i32 %14300)
  %14302 = trunc i32 %14301 to i8
  %14303 = and i8 %14302, 1
  %14304 = xor i8 %14303, 1
  store i8 %14304, i8* %26, align 1
  %14305 = icmp ult i32 %14282, 2
  %14306 = zext i1 %14305 to i8
  store i8 %14306, i8* %34, align 1
  %14307 = lshr i32 %14282, 31
  %14308 = trunc i32 %14307 to i8
  store i8 %14308, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %14309 = add i64 %14278, -1292
  %14310 = trunc i64 %14299 to i32
  %14311 = add i64 %14277, 12
  store i64 %14311, i64* %3, align 8
  %14312 = inttoptr i64 %14309 to i32*
  store i32 %14310, i32* %14312, align 4
  %.pre430 = load i64, i64* %3, align 8
  br label %block_.L_4587a2

block_.L_4587a2:                                  ; preds = %block_.L_458796, %block_458785
  %14313 = phi i64 [ %.pre430, %block_.L_458796 ], [ %14298, %block_458785 ]
  %14314 = load i64, i64* %RBP.i, align 8
  %14315 = add i64 %14314, -1292
  %14316 = add i64 %14313, 6
  store i64 %14316, i64* %3, align 8
  %14317 = inttoptr i64 %14315 to i32*
  %14318 = load i32, i32* %14317, align 4
  %14319 = zext i32 %14318 to i64
  store i64 %14319, i64* %RAX.i3176, align 8
  %14320 = sext i32 %14318 to i64
  store i64 %14320, i64* %RCX.i2595, align 8
  %14321 = add i64 %14314, -1288
  %14322 = add i64 %14313, 16
  store i64 %14322, i64* %3, align 8
  %14323 = inttoptr i64 %14321 to i64*
  %14324 = load i64, i64* %14323, align 8
  store i64 %14324, i64* %RDX.i2592, align 8
  %14325 = shl nsw i64 %14320, 3
  %14326 = add i64 %14325, %14324
  %14327 = add i64 %14313, 20
  store i64 %14327, i64* %3, align 8
  %14328 = inttoptr i64 %14326 to i64*
  %14329 = load i64, i64* %14328, align 8
  store i64 %14329, i64* %RCX.i2595, align 8
  %14330 = add i64 %14314, -16
  %14331 = add i64 %14313, 24
  store i64 %14331, i64* %3, align 8
  %14332 = inttoptr i64 %14330 to i64*
  %14333 = load i64, i64* %14332, align 8
  store i64 %14333, i64* %RSI.i766, align 8
  %14334 = add i64 %14333, 1608
  %14335 = add i64 %14313, 31
  store i64 %14335, i64* %3, align 8
  %14336 = inttoptr i64 %14334 to i64*
  %14337 = load i64, i64* %14336, align 8
  store i64 %14337, i64* %RSI.i766, align 8
  %14338 = add i64 %14337, 8
  %14339 = add i64 %14313, 35
  store i64 %14339, i64* %3, align 8
  %14340 = inttoptr i64 %14338 to i64*
  %14341 = load i64, i64* %14340, align 8
  store i64 %14341, i64* %RSI.i766, align 8
  %14342 = add i64 %14314, -52
  %14343 = add i64 %14313, 39
  store i64 %14343, i64* %3, align 8
  %14344 = inttoptr i64 %14342 to i32*
  %14345 = load i32, i32* %14344, align 4
  %14346 = sext i32 %14345 to i64
  store i64 %14346, i64* %RDI.i732, align 8
  %14347 = shl nsw i64 %14346, 3
  %14348 = add i64 %14347, %14341
  %14349 = add i64 %14313, 43
  store i64 %14349, i64* %3, align 8
  %14350 = inttoptr i64 %14348 to i64*
  %14351 = load i64, i64* %14350, align 8
  store i64 %14351, i64* %RSI.i766, align 8
  %14352 = add i64 %14314, -56
  %14353 = add i64 %14313, 47
  store i64 %14353, i64* %3, align 8
  %14354 = inttoptr i64 %14352 to i32*
  %14355 = load i32, i32* %14354, align 4
  %14356 = sext i32 %14355 to i64
  store i64 %14356, i64* %RDI.i732, align 8
  %14357 = shl nsw i64 %14356, 3
  %14358 = add i64 %14357, %14351
  %14359 = add i64 %14313, 51
  store i64 %14359, i64* %3, align 8
  %14360 = inttoptr i64 %14358 to i64*
  store i64 %14329, i64* %14360, align 8
  %14361 = load i64, i64* %3, align 8
  %14362 = add i64 %14361, 521
  store i64 %14362, i64* %3, align 8
  br label %block_.L_4589de

block_.L_4587da:                                  ; preds = %block_4581cc
  %14363 = load i64, i64* %RBP.i, align 8
  %14364 = add i64 %14363, -32
  %14365 = add i64 %12860, 4
  store i64 %14365, i64* %3, align 8
  %14366 = inttoptr i64 %14364 to i64*
  %14367 = load i64, i64* %14366, align 8
  store i64 %14367, i64* %RAX.i3176, align 8
  %14368 = add i64 %14367, 6504
  %14369 = add i64 %12860, 11
  store i64 %14369, i64* %3, align 8
  %14370 = inttoptr i64 %14368 to i64*
  %14371 = load i64, i64* %14370, align 8
  store i64 %14371, i64* %RAX.i3176, align 8
  %14372 = add i64 %12860, 14
  store i64 %14372, i64* %3, align 8
  %14373 = inttoptr i64 %14371 to i64*
  %14374 = load i64, i64* %14373, align 8
  store i64 %14374, i64* %RAX.i3176, align 8
  %14375 = add i64 %14363, -52
  %14376 = add i64 %12860, 18
  store i64 %14376, i64* %3, align 8
  %14377 = inttoptr i64 %14375 to i32*
  %14378 = load i32, i32* %14377, align 4
  %14379 = sext i32 %14378 to i64
  store i64 %14379, i64* %RCX.i2595, align 8
  %14380 = shl nsw i64 %14379, 3
  %14381 = add i64 %14380, %14374
  %14382 = add i64 %12860, 22
  store i64 %14382, i64* %3, align 8
  %14383 = inttoptr i64 %14381 to i64*
  %14384 = load i64, i64* %14383, align 8
  store i64 %14384, i64* %RAX.i3176, align 8
  %14385 = add i64 %14363, -56
  %14386 = add i64 %12860, 26
  store i64 %14386, i64* %3, align 8
  %14387 = inttoptr i64 %14385 to i32*
  %14388 = load i32, i32* %14387, align 4
  %14389 = sext i32 %14388 to i64
  store i64 %14389, i64* %RCX.i2595, align 8
  %14390 = shl nsw i64 %14389, 3
  %14391 = add i64 %14390, %14384
  %14392 = add i64 %12860, 30
  store i64 %14392, i64* %3, align 8
  %14393 = inttoptr i64 %14391 to i64*
  %14394 = load i64, i64* %14393, align 8
  store i64 %14394, i64* %RAX.i3176, align 8
  %14395 = add i64 %12860, 33
  store i64 %14395, i64* %3, align 8
  %14396 = inttoptr i64 %14394 to i16*
  %14397 = load i16, i16* %14396, align 2
  store i16 %14397, i16* %DX.i1627, align 2
  %14398 = add i64 %14363, -16
  %14399 = add i64 %12860, 37
  store i64 %14399, i64* %3, align 8
  %14400 = inttoptr i64 %14398 to i64*
  %14401 = load i64, i64* %14400, align 8
  store i64 %14401, i64* %RAX.i3176, align 8
  %14402 = add i64 %14401, 1616
  %14403 = add i64 %12860, 44
  store i64 %14403, i64* %3, align 8
  %14404 = inttoptr i64 %14402 to i64*
  %14405 = load i64, i64* %14404, align 8
  store i64 %14405, i64* %RAX.i3176, align 8
  %14406 = add i64 %12860, 47
  store i64 %14406, i64* %3, align 8
  %14407 = inttoptr i64 %14405 to i64*
  %14408 = load i64, i64* %14407, align 8
  store i64 %14408, i64* %RAX.i3176, align 8
  %14409 = add i64 %12860, 51
  store i64 %14409, i64* %3, align 8
  %14410 = load i32, i32* %14377, align 4
  %14411 = sext i32 %14410 to i64
  store i64 %14411, i64* %RCX.i2595, align 8
  %14412 = shl nsw i64 %14411, 3
  %14413 = add i64 %14412, %14408
  %14414 = add i64 %12860, 55
  store i64 %14414, i64* %3, align 8
  %14415 = inttoptr i64 %14413 to i64*
  %14416 = load i64, i64* %14415, align 8
  store i64 %14416, i64* %RAX.i3176, align 8
  %14417 = add i64 %12860, 59
  store i64 %14417, i64* %3, align 8
  %14418 = load i32, i32* %14387, align 4
  %14419 = sext i32 %14418 to i64
  store i64 %14419, i64* %RCX.i2595, align 8
  %14420 = shl nsw i64 %14419, 3
  %14421 = add i64 %14420, %14416
  %14422 = add i64 %12860, 63
  store i64 %14422, i64* %3, align 8
  %14423 = inttoptr i64 %14421 to i64*
  %14424 = load i64, i64* %14423, align 8
  store i64 %14424, i64* %RAX.i3176, align 8
  %14425 = add i64 %12860, 66
  store i64 %14425, i64* %3, align 8
  %14426 = inttoptr i64 %14424 to i16*
  store i16 %14397, i16* %14426, align 2
  %14427 = load i64, i64* %RBP.i, align 8
  %14428 = add i64 %14427, -32
  %14429 = load i64, i64* %3, align 8
  %14430 = add i64 %14429, 4
  store i64 %14430, i64* %3, align 8
  %14431 = inttoptr i64 %14428 to i64*
  %14432 = load i64, i64* %14431, align 8
  store i64 %14432, i64* %RAX.i3176, align 8
  %14433 = add i64 %14432, 6504
  %14434 = add i64 %14429, 11
  store i64 %14434, i64* %3, align 8
  %14435 = inttoptr i64 %14433 to i64*
  %14436 = load i64, i64* %14435, align 8
  store i64 %14436, i64* %RAX.i3176, align 8
  %14437 = add i64 %14429, 14
  store i64 %14437, i64* %3, align 8
  %14438 = inttoptr i64 %14436 to i64*
  %14439 = load i64, i64* %14438, align 8
  store i64 %14439, i64* %RAX.i3176, align 8
  %14440 = add i64 %14427, -52
  %14441 = add i64 %14429, 18
  store i64 %14441, i64* %3, align 8
  %14442 = inttoptr i64 %14440 to i32*
  %14443 = load i32, i32* %14442, align 4
  %14444 = sext i32 %14443 to i64
  store i64 %14444, i64* %RCX.i2595, align 8
  %14445 = shl nsw i64 %14444, 3
  %14446 = add i64 %14445, %14439
  %14447 = add i64 %14429, 22
  store i64 %14447, i64* %3, align 8
  %14448 = inttoptr i64 %14446 to i64*
  %14449 = load i64, i64* %14448, align 8
  store i64 %14449, i64* %RAX.i3176, align 8
  %14450 = add i64 %14427, -56
  %14451 = add i64 %14429, 26
  store i64 %14451, i64* %3, align 8
  %14452 = inttoptr i64 %14450 to i32*
  %14453 = load i32, i32* %14452, align 4
  %14454 = sext i32 %14453 to i64
  store i64 %14454, i64* %RCX.i2595, align 8
  %14455 = shl nsw i64 %14454, 3
  %14456 = add i64 %14455, %14449
  %14457 = add i64 %14429, 30
  store i64 %14457, i64* %3, align 8
  %14458 = inttoptr i64 %14456 to i64*
  %14459 = load i64, i64* %14458, align 8
  store i64 %14459, i64* %RAX.i3176, align 8
  %14460 = add i64 %14459, 2
  %14461 = add i64 %14429, 34
  store i64 %14461, i64* %3, align 8
  %14462 = inttoptr i64 %14460 to i16*
  %14463 = load i16, i16* %14462, align 2
  store i16 %14463, i16* %DX.i1627, align 2
  %14464 = add i64 %14427, -16
  %14465 = add i64 %14429, 38
  store i64 %14465, i64* %3, align 8
  %14466 = inttoptr i64 %14464 to i64*
  %14467 = load i64, i64* %14466, align 8
  store i64 %14467, i64* %RAX.i3176, align 8
  %14468 = add i64 %14467, 1616
  %14469 = add i64 %14429, 45
  store i64 %14469, i64* %3, align 8
  %14470 = inttoptr i64 %14468 to i64*
  %14471 = load i64, i64* %14470, align 8
  store i64 %14471, i64* %RAX.i3176, align 8
  %14472 = add i64 %14429, 48
  store i64 %14472, i64* %3, align 8
  %14473 = inttoptr i64 %14471 to i64*
  %14474 = load i64, i64* %14473, align 8
  store i64 %14474, i64* %RAX.i3176, align 8
  %14475 = add i64 %14429, 52
  store i64 %14475, i64* %3, align 8
  %14476 = load i32, i32* %14442, align 4
  %14477 = sext i32 %14476 to i64
  store i64 %14477, i64* %RCX.i2595, align 8
  %14478 = shl nsw i64 %14477, 3
  %14479 = add i64 %14478, %14474
  %14480 = add i64 %14429, 56
  store i64 %14480, i64* %3, align 8
  %14481 = inttoptr i64 %14479 to i64*
  %14482 = load i64, i64* %14481, align 8
  store i64 %14482, i64* %RAX.i3176, align 8
  %14483 = add i64 %14429, 60
  store i64 %14483, i64* %3, align 8
  %14484 = load i32, i32* %14452, align 4
  %14485 = sext i32 %14484 to i64
  store i64 %14485, i64* %RCX.i2595, align 8
  %14486 = shl nsw i64 %14485, 3
  %14487 = add i64 %14486, %14482
  %14488 = add i64 %14429, 64
  store i64 %14488, i64* %3, align 8
  %14489 = inttoptr i64 %14487 to i64*
  %14490 = load i64, i64* %14489, align 8
  store i64 %14490, i64* %RAX.i3176, align 8
  %14491 = add i64 %14490, 2
  %14492 = add i64 %14429, 68
  store i64 %14492, i64* %3, align 8
  %14493 = inttoptr i64 %14491 to i16*
  store i16 %14463, i16* %14493, align 2
  %14494 = load i64, i64* %RBP.i, align 8
  %14495 = add i64 %14494, -32
  %14496 = load i64, i64* %3, align 8
  %14497 = add i64 %14496, 4
  store i64 %14497, i64* %3, align 8
  %14498 = inttoptr i64 %14495 to i64*
  %14499 = load i64, i64* %14498, align 8
  store i64 %14499, i64* %RAX.i3176, align 8
  %14500 = add i64 %14499, 6504
  %14501 = add i64 %14496, 11
  store i64 %14501, i64* %3, align 8
  %14502 = inttoptr i64 %14500 to i64*
  %14503 = load i64, i64* %14502, align 8
  store i64 %14503, i64* %RAX.i3176, align 8
  %14504 = add i64 %14503, 8
  %14505 = add i64 %14496, 15
  store i64 %14505, i64* %3, align 8
  %14506 = inttoptr i64 %14504 to i64*
  %14507 = load i64, i64* %14506, align 8
  store i64 %14507, i64* %RAX.i3176, align 8
  %14508 = add i64 %14494, -52
  %14509 = add i64 %14496, 19
  store i64 %14509, i64* %3, align 8
  %14510 = inttoptr i64 %14508 to i32*
  %14511 = load i32, i32* %14510, align 4
  %14512 = sext i32 %14511 to i64
  store i64 %14512, i64* %RCX.i2595, align 8
  %14513 = shl nsw i64 %14512, 3
  %14514 = add i64 %14513, %14507
  %14515 = add i64 %14496, 23
  store i64 %14515, i64* %3, align 8
  %14516 = inttoptr i64 %14514 to i64*
  %14517 = load i64, i64* %14516, align 8
  store i64 %14517, i64* %RAX.i3176, align 8
  %14518 = add i64 %14494, -56
  %14519 = add i64 %14496, 27
  store i64 %14519, i64* %3, align 8
  %14520 = inttoptr i64 %14518 to i32*
  %14521 = load i32, i32* %14520, align 4
  %14522 = sext i32 %14521 to i64
  store i64 %14522, i64* %RCX.i2595, align 8
  %14523 = shl nsw i64 %14522, 3
  %14524 = add i64 %14523, %14517
  %14525 = add i64 %14496, 31
  store i64 %14525, i64* %3, align 8
  %14526 = inttoptr i64 %14524 to i64*
  %14527 = load i64, i64* %14526, align 8
  store i64 %14527, i64* %RAX.i3176, align 8
  %14528 = add i64 %14496, 34
  store i64 %14528, i64* %3, align 8
  %14529 = inttoptr i64 %14527 to i16*
  %14530 = load i16, i16* %14529, align 2
  store i16 %14530, i16* %DX.i1627, align 2
  %14531 = add i64 %14494, -16
  %14532 = add i64 %14496, 38
  store i64 %14532, i64* %3, align 8
  %14533 = inttoptr i64 %14531 to i64*
  %14534 = load i64, i64* %14533, align 8
  store i64 %14534, i64* %RAX.i3176, align 8
  %14535 = add i64 %14534, 1616
  %14536 = add i64 %14496, 45
  store i64 %14536, i64* %3, align 8
  %14537 = inttoptr i64 %14535 to i64*
  %14538 = load i64, i64* %14537, align 8
  store i64 %14538, i64* %RAX.i3176, align 8
  %14539 = add i64 %14538, 8
  %14540 = add i64 %14496, 49
  store i64 %14540, i64* %3, align 8
  %14541 = inttoptr i64 %14539 to i64*
  %14542 = load i64, i64* %14541, align 8
  store i64 %14542, i64* %RAX.i3176, align 8
  %14543 = add i64 %14496, 53
  store i64 %14543, i64* %3, align 8
  %14544 = load i32, i32* %14510, align 4
  %14545 = sext i32 %14544 to i64
  store i64 %14545, i64* %RCX.i2595, align 8
  %14546 = shl nsw i64 %14545, 3
  %14547 = add i64 %14546, %14542
  %14548 = add i64 %14496, 57
  store i64 %14548, i64* %3, align 8
  %14549 = inttoptr i64 %14547 to i64*
  %14550 = load i64, i64* %14549, align 8
  store i64 %14550, i64* %RAX.i3176, align 8
  %14551 = add i64 %14496, 61
  store i64 %14551, i64* %3, align 8
  %14552 = load i32, i32* %14520, align 4
  %14553 = sext i32 %14552 to i64
  store i64 %14553, i64* %RCX.i2595, align 8
  %14554 = shl nsw i64 %14553, 3
  %14555 = add i64 %14554, %14550
  %14556 = add i64 %14496, 65
  store i64 %14556, i64* %3, align 8
  %14557 = inttoptr i64 %14555 to i64*
  %14558 = load i64, i64* %14557, align 8
  store i64 %14558, i64* %RAX.i3176, align 8
  %14559 = add i64 %14496, 68
  store i64 %14559, i64* %3, align 8
  %14560 = inttoptr i64 %14558 to i16*
  store i16 %14530, i16* %14560, align 2
  %14561 = load i64, i64* %RBP.i, align 8
  %14562 = add i64 %14561, -32
  %14563 = load i64, i64* %3, align 8
  %14564 = add i64 %14563, 4
  store i64 %14564, i64* %3, align 8
  %14565 = inttoptr i64 %14562 to i64*
  %14566 = load i64, i64* %14565, align 8
  store i64 %14566, i64* %RAX.i3176, align 8
  %14567 = add i64 %14566, 6504
  %14568 = add i64 %14563, 11
  store i64 %14568, i64* %3, align 8
  %14569 = inttoptr i64 %14567 to i64*
  %14570 = load i64, i64* %14569, align 8
  store i64 %14570, i64* %RAX.i3176, align 8
  %14571 = add i64 %14570, 8
  %14572 = add i64 %14563, 15
  store i64 %14572, i64* %3, align 8
  %14573 = inttoptr i64 %14571 to i64*
  %14574 = load i64, i64* %14573, align 8
  store i64 %14574, i64* %RAX.i3176, align 8
  %14575 = add i64 %14561, -52
  %14576 = add i64 %14563, 19
  store i64 %14576, i64* %3, align 8
  %14577 = inttoptr i64 %14575 to i32*
  %14578 = load i32, i32* %14577, align 4
  %14579 = sext i32 %14578 to i64
  store i64 %14579, i64* %RCX.i2595, align 8
  %14580 = shl nsw i64 %14579, 3
  %14581 = add i64 %14580, %14574
  %14582 = add i64 %14563, 23
  store i64 %14582, i64* %3, align 8
  %14583 = inttoptr i64 %14581 to i64*
  %14584 = load i64, i64* %14583, align 8
  store i64 %14584, i64* %RAX.i3176, align 8
  %14585 = add i64 %14561, -56
  %14586 = add i64 %14563, 27
  store i64 %14586, i64* %3, align 8
  %14587 = inttoptr i64 %14585 to i32*
  %14588 = load i32, i32* %14587, align 4
  %14589 = sext i32 %14588 to i64
  store i64 %14589, i64* %RCX.i2595, align 8
  %14590 = shl nsw i64 %14589, 3
  %14591 = add i64 %14590, %14584
  %14592 = add i64 %14563, 31
  store i64 %14592, i64* %3, align 8
  %14593 = inttoptr i64 %14591 to i64*
  %14594 = load i64, i64* %14593, align 8
  store i64 %14594, i64* %RAX.i3176, align 8
  %14595 = add i64 %14594, 2
  %14596 = add i64 %14563, 35
  store i64 %14596, i64* %3, align 8
  %14597 = inttoptr i64 %14595 to i16*
  %14598 = load i16, i16* %14597, align 2
  store i16 %14598, i16* %DX.i1627, align 2
  %14599 = add i64 %14561, -16
  %14600 = add i64 %14563, 39
  store i64 %14600, i64* %3, align 8
  %14601 = inttoptr i64 %14599 to i64*
  %14602 = load i64, i64* %14601, align 8
  store i64 %14602, i64* %RAX.i3176, align 8
  %14603 = add i64 %14602, 1616
  %14604 = add i64 %14563, 46
  store i64 %14604, i64* %3, align 8
  %14605 = inttoptr i64 %14603 to i64*
  %14606 = load i64, i64* %14605, align 8
  store i64 %14606, i64* %RAX.i3176, align 8
  %14607 = add i64 %14606, 8
  %14608 = add i64 %14563, 50
  store i64 %14608, i64* %3, align 8
  %14609 = inttoptr i64 %14607 to i64*
  %14610 = load i64, i64* %14609, align 8
  store i64 %14610, i64* %RAX.i3176, align 8
  %14611 = add i64 %14563, 54
  store i64 %14611, i64* %3, align 8
  %14612 = load i32, i32* %14577, align 4
  %14613 = sext i32 %14612 to i64
  store i64 %14613, i64* %RCX.i2595, align 8
  %14614 = shl nsw i64 %14613, 3
  %14615 = add i64 %14614, %14610
  %14616 = add i64 %14563, 58
  store i64 %14616, i64* %3, align 8
  %14617 = inttoptr i64 %14615 to i64*
  %14618 = load i64, i64* %14617, align 8
  store i64 %14618, i64* %RAX.i3176, align 8
  %14619 = add i64 %14563, 62
  store i64 %14619, i64* %3, align 8
  %14620 = load i32, i32* %14587, align 4
  %14621 = sext i32 %14620 to i64
  store i64 %14621, i64* %RCX.i2595, align 8
  %14622 = shl nsw i64 %14621, 3
  %14623 = add i64 %14622, %14618
  %14624 = add i64 %14563, 66
  store i64 %14624, i64* %3, align 8
  %14625 = inttoptr i64 %14623 to i64*
  %14626 = load i64, i64* %14625, align 8
  store i64 %14626, i64* %RAX.i3176, align 8
  %14627 = add i64 %14626, 2
  %14628 = add i64 %14563, 70
  store i64 %14628, i64* %3, align 8
  %14629 = inttoptr i64 %14627 to i16*
  store i16 %14598, i16* %14629, align 2
  %14630 = load i64, i64* %RBP.i, align 8
  %14631 = add i64 %14630, -32
  %14632 = load i64, i64* %3, align 8
  %14633 = add i64 %14632, 4
  store i64 %14633, i64* %3, align 8
  %14634 = inttoptr i64 %14631 to i64*
  %14635 = load i64, i64* %14634, align 8
  store i64 %14635, i64* %RAX.i3176, align 8
  %14636 = add i64 %14635, 6480
  %14637 = add i64 %14632, 11
  store i64 %14637, i64* %3, align 8
  %14638 = inttoptr i64 %14636 to i64*
  %14639 = load i64, i64* %14638, align 8
  store i64 %14639, i64* %RAX.i3176, align 8
  %14640 = add i64 %14632, 14
  store i64 %14640, i64* %3, align 8
  %14641 = inttoptr i64 %14639 to i64*
  %14642 = load i64, i64* %14641, align 8
  store i64 %14642, i64* %RAX.i3176, align 8
  %14643 = add i64 %14630, -52
  %14644 = add i64 %14632, 18
  store i64 %14644, i64* %3, align 8
  %14645 = inttoptr i64 %14643 to i32*
  %14646 = load i32, i32* %14645, align 4
  %14647 = sext i32 %14646 to i64
  store i64 %14647, i64* %RCX.i2595, align 8
  %14648 = shl nsw i64 %14647, 3
  %14649 = add i64 %14648, %14642
  %14650 = add i64 %14632, 22
  store i64 %14650, i64* %3, align 8
  %14651 = inttoptr i64 %14649 to i64*
  %14652 = load i64, i64* %14651, align 8
  store i64 %14652, i64* %RAX.i3176, align 8
  %14653 = add i64 %14630, -56
  %14654 = add i64 %14632, 26
  store i64 %14654, i64* %3, align 8
  %14655 = inttoptr i64 %14653 to i32*
  %14656 = load i32, i32* %14655, align 4
  %14657 = sext i32 %14656 to i64
  store i64 %14657, i64* %RCX.i2595, align 8
  %14658 = shl nsw i64 %14657, 1
  %14659 = add i64 %14658, %14652
  %14660 = add i64 %14632, 30
  store i64 %14660, i64* %3, align 8
  %14661 = inttoptr i64 %14659 to i16*
  %14662 = load i16, i16* %14661, align 2
  store i16 %14662, i16* %DX.i1627, align 2
  %14663 = add i64 %14630, -16
  %14664 = add i64 %14632, 34
  store i64 %14664, i64* %3, align 8
  %14665 = inttoptr i64 %14663 to i64*
  %14666 = load i64, i64* %14665, align 8
  store i64 %14666, i64* %RAX.i3176, align 8
  %14667 = add i64 %14666, 1600
  %14668 = add i64 %14632, 41
  store i64 %14668, i64* %3, align 8
  %14669 = inttoptr i64 %14667 to i64*
  %14670 = load i64, i64* %14669, align 8
  store i64 %14670, i64* %RAX.i3176, align 8
  %14671 = add i64 %14632, 44
  store i64 %14671, i64* %3, align 8
  %14672 = inttoptr i64 %14670 to i64*
  %14673 = load i64, i64* %14672, align 8
  store i64 %14673, i64* %RAX.i3176, align 8
  %14674 = add i64 %14632, 48
  store i64 %14674, i64* %3, align 8
  %14675 = load i32, i32* %14645, align 4
  %14676 = sext i32 %14675 to i64
  store i64 %14676, i64* %RCX.i2595, align 8
  %14677 = shl nsw i64 %14676, 3
  %14678 = add i64 %14677, %14673
  %14679 = add i64 %14632, 52
  store i64 %14679, i64* %3, align 8
  %14680 = inttoptr i64 %14678 to i64*
  %14681 = load i64, i64* %14680, align 8
  store i64 %14681, i64* %RAX.i3176, align 8
  %14682 = add i64 %14632, 56
  store i64 %14682, i64* %3, align 8
  %14683 = load i32, i32* %14655, align 4
  %14684 = sext i32 %14683 to i64
  store i64 %14684, i64* %RCX.i2595, align 8
  %14685 = shl nsw i64 %14684, 1
  %14686 = add i64 %14685, %14681
  %14687 = add i64 %14632, 60
  store i64 %14687, i64* %3, align 8
  %14688 = inttoptr i64 %14686 to i16*
  store i16 %14662, i16* %14688, align 2
  %14689 = load i64, i64* %RBP.i, align 8
  %14690 = add i64 %14689, -32
  %14691 = load i64, i64* %3, align 8
  %14692 = add i64 %14691, 4
  store i64 %14692, i64* %3, align 8
  %14693 = inttoptr i64 %14690 to i64*
  %14694 = load i64, i64* %14693, align 8
  store i64 %14694, i64* %RAX.i3176, align 8
  %14695 = add i64 %14694, 6480
  %14696 = add i64 %14691, 11
  store i64 %14696, i64* %3, align 8
  %14697 = inttoptr i64 %14695 to i64*
  %14698 = load i64, i64* %14697, align 8
  store i64 %14698, i64* %RAX.i3176, align 8
  %14699 = add i64 %14698, 8
  %14700 = add i64 %14691, 15
  store i64 %14700, i64* %3, align 8
  %14701 = inttoptr i64 %14699 to i64*
  %14702 = load i64, i64* %14701, align 8
  store i64 %14702, i64* %RAX.i3176, align 8
  %14703 = add i64 %14689, -52
  %14704 = add i64 %14691, 19
  store i64 %14704, i64* %3, align 8
  %14705 = inttoptr i64 %14703 to i32*
  %14706 = load i32, i32* %14705, align 4
  %14707 = sext i32 %14706 to i64
  store i64 %14707, i64* %RCX.i2595, align 8
  %14708 = shl nsw i64 %14707, 3
  %14709 = add i64 %14708, %14702
  %14710 = add i64 %14691, 23
  store i64 %14710, i64* %3, align 8
  %14711 = inttoptr i64 %14709 to i64*
  %14712 = load i64, i64* %14711, align 8
  store i64 %14712, i64* %RAX.i3176, align 8
  %14713 = add i64 %14689, -56
  %14714 = add i64 %14691, 27
  store i64 %14714, i64* %3, align 8
  %14715 = inttoptr i64 %14713 to i32*
  %14716 = load i32, i32* %14715, align 4
  %14717 = sext i32 %14716 to i64
  store i64 %14717, i64* %RCX.i2595, align 8
  %14718 = shl nsw i64 %14717, 1
  %14719 = add i64 %14718, %14712
  %14720 = add i64 %14691, 31
  store i64 %14720, i64* %3, align 8
  %14721 = inttoptr i64 %14719 to i16*
  %14722 = load i16, i16* %14721, align 2
  store i16 %14722, i16* %DX.i1627, align 2
  %14723 = add i64 %14689, -16
  %14724 = add i64 %14691, 35
  store i64 %14724, i64* %3, align 8
  %14725 = inttoptr i64 %14723 to i64*
  %14726 = load i64, i64* %14725, align 8
  store i64 %14726, i64* %RAX.i3176, align 8
  %14727 = add i64 %14726, 1600
  %14728 = add i64 %14691, 42
  store i64 %14728, i64* %3, align 8
  %14729 = inttoptr i64 %14727 to i64*
  %14730 = load i64, i64* %14729, align 8
  store i64 %14730, i64* %RAX.i3176, align 8
  %14731 = add i64 %14730, 8
  %14732 = add i64 %14691, 46
  store i64 %14732, i64* %3, align 8
  %14733 = inttoptr i64 %14731 to i64*
  %14734 = load i64, i64* %14733, align 8
  store i64 %14734, i64* %RAX.i3176, align 8
  %14735 = add i64 %14691, 50
  store i64 %14735, i64* %3, align 8
  %14736 = load i32, i32* %14705, align 4
  %14737 = sext i32 %14736 to i64
  store i64 %14737, i64* %RCX.i2595, align 8
  %14738 = shl nsw i64 %14737, 3
  %14739 = add i64 %14738, %14734
  %14740 = add i64 %14691, 54
  store i64 %14740, i64* %3, align 8
  %14741 = inttoptr i64 %14739 to i64*
  %14742 = load i64, i64* %14741, align 8
  store i64 %14742, i64* %RAX.i3176, align 8
  %14743 = add i64 %14691, 58
  store i64 %14743, i64* %3, align 8
  %14744 = load i32, i32* %14715, align 4
  %14745 = sext i32 %14744 to i64
  store i64 %14745, i64* %RCX.i2595, align 8
  %14746 = shl nsw i64 %14745, 1
  %14747 = add i64 %14746, %14742
  %14748 = add i64 %14691, 62
  store i64 %14748, i64* %3, align 8
  %14749 = inttoptr i64 %14747 to i16*
  store i16 %14722, i16* %14749, align 2
  %14750 = load i64, i64* %RBP.i, align 8
  %14751 = add i64 %14750, -32
  %14752 = load i64, i64* %3, align 8
  %14753 = add i64 %14752, 4
  store i64 %14753, i64* %3, align 8
  %14754 = inttoptr i64 %14751 to i64*
  %14755 = load i64, i64* %14754, align 8
  store i64 %14755, i64* %RAX.i3176, align 8
  %14756 = add i64 %14755, 6496
  %14757 = add i64 %14752, 11
  store i64 %14757, i64* %3, align 8
  %14758 = inttoptr i64 %14756 to i64*
  %14759 = load i64, i64* %14758, align 8
  store i64 %14759, i64* %RAX.i3176, align 8
  %14760 = add i64 %14752, 14
  store i64 %14760, i64* %3, align 8
  %14761 = inttoptr i64 %14759 to i64*
  %14762 = load i64, i64* %14761, align 8
  store i64 %14762, i64* %RAX.i3176, align 8
  %14763 = add i64 %14750, -52
  %14764 = add i64 %14752, 18
  store i64 %14764, i64* %3, align 8
  %14765 = inttoptr i64 %14763 to i32*
  %14766 = load i32, i32* %14765, align 4
  %14767 = sext i32 %14766 to i64
  store i64 %14767, i64* %RCX.i2595, align 8
  %14768 = shl nsw i64 %14767, 3
  %14769 = add i64 %14768, %14762
  %14770 = add i64 %14752, 22
  store i64 %14770, i64* %3, align 8
  %14771 = inttoptr i64 %14769 to i64*
  %14772 = load i64, i64* %14771, align 8
  store i64 %14772, i64* %RAX.i3176, align 8
  %14773 = add i64 %14750, -56
  %14774 = add i64 %14752, 26
  store i64 %14774, i64* %3, align 8
  %14775 = inttoptr i64 %14773 to i32*
  %14776 = load i32, i32* %14775, align 4
  %14777 = sext i32 %14776 to i64
  store i64 %14777, i64* %RCX.i2595, align 8
  %14778 = shl nsw i64 %14777, 3
  %14779 = add i64 %14778, %14772
  %14780 = add i64 %14752, 30
  store i64 %14780, i64* %3, align 8
  %14781 = inttoptr i64 %14779 to i64*
  %14782 = load i64, i64* %14781, align 8
  store i64 %14782, i64* %RAX.i3176, align 8
  %14783 = add i64 %14750, -16
  %14784 = add i64 %14752, 34
  store i64 %14784, i64* %3, align 8
  %14785 = inttoptr i64 %14783 to i64*
  %14786 = load i64, i64* %14785, align 8
  store i64 %14786, i64* %RCX.i2595, align 8
  %14787 = add i64 %14786, 1608
  %14788 = add i64 %14752, 41
  store i64 %14788, i64* %3, align 8
  %14789 = inttoptr i64 %14787 to i64*
  %14790 = load i64, i64* %14789, align 8
  store i64 %14790, i64* %RCX.i2595, align 8
  %14791 = add i64 %14752, 44
  store i64 %14791, i64* %3, align 8
  %14792 = inttoptr i64 %14790 to i64*
  %14793 = load i64, i64* %14792, align 8
  store i64 %14793, i64* %RCX.i2595, align 8
  %14794 = add i64 %14752, 48
  store i64 %14794, i64* %3, align 8
  %14795 = load i32, i32* %14765, align 4
  %14796 = sext i32 %14795 to i64
  store i64 %14796, i64* %RSI.i766, align 8
  %14797 = shl nsw i64 %14796, 3
  %14798 = add i64 %14797, %14793
  %14799 = add i64 %14752, 52
  store i64 %14799, i64* %3, align 8
  %14800 = inttoptr i64 %14798 to i64*
  %14801 = load i64, i64* %14800, align 8
  store i64 %14801, i64* %RCX.i2595, align 8
  %14802 = add i64 %14752, 56
  store i64 %14802, i64* %3, align 8
  %14803 = load i32, i32* %14775, align 4
  %14804 = sext i32 %14803 to i64
  store i64 %14804, i64* %RSI.i766, align 8
  %14805 = shl nsw i64 %14804, 3
  %14806 = add i64 %14805, %14801
  %14807 = add i64 %14752, 60
  store i64 %14807, i64* %3, align 8
  %14808 = inttoptr i64 %14806 to i64*
  store i64 %14782, i64* %14808, align 8
  %14809 = load i64, i64* %RBP.i, align 8
  %14810 = add i64 %14809, -32
  %14811 = load i64, i64* %3, align 8
  %14812 = add i64 %14811, 4
  store i64 %14812, i64* %3, align 8
  %14813 = inttoptr i64 %14810 to i64*
  %14814 = load i64, i64* %14813, align 8
  store i64 %14814, i64* %RAX.i3176, align 8
  %14815 = add i64 %14814, 6496
  %14816 = add i64 %14811, 11
  store i64 %14816, i64* %3, align 8
  %14817 = inttoptr i64 %14815 to i64*
  %14818 = load i64, i64* %14817, align 8
  store i64 %14818, i64* %RAX.i3176, align 8
  %14819 = add i64 %14818, 8
  %14820 = add i64 %14811, 15
  store i64 %14820, i64* %3, align 8
  %14821 = inttoptr i64 %14819 to i64*
  %14822 = load i64, i64* %14821, align 8
  store i64 %14822, i64* %RAX.i3176, align 8
  %14823 = add i64 %14809, -52
  %14824 = add i64 %14811, 19
  store i64 %14824, i64* %3, align 8
  %14825 = inttoptr i64 %14823 to i32*
  %14826 = load i32, i32* %14825, align 4
  %14827 = sext i32 %14826 to i64
  store i64 %14827, i64* %RCX.i2595, align 8
  %14828 = shl nsw i64 %14827, 3
  %14829 = add i64 %14828, %14822
  %14830 = add i64 %14811, 23
  store i64 %14830, i64* %3, align 8
  %14831 = inttoptr i64 %14829 to i64*
  %14832 = load i64, i64* %14831, align 8
  store i64 %14832, i64* %RAX.i3176, align 8
  %14833 = add i64 %14809, -56
  %14834 = add i64 %14811, 27
  store i64 %14834, i64* %3, align 8
  %14835 = inttoptr i64 %14833 to i32*
  %14836 = load i32, i32* %14835, align 4
  %14837 = sext i32 %14836 to i64
  store i64 %14837, i64* %RCX.i2595, align 8
  %14838 = shl nsw i64 %14837, 3
  %14839 = add i64 %14838, %14832
  %14840 = add i64 %14811, 31
  store i64 %14840, i64* %3, align 8
  %14841 = inttoptr i64 %14839 to i64*
  %14842 = load i64, i64* %14841, align 8
  store i64 %14842, i64* %RAX.i3176, align 8
  %14843 = add i64 %14809, -16
  %14844 = add i64 %14811, 35
  store i64 %14844, i64* %3, align 8
  %14845 = inttoptr i64 %14843 to i64*
  %14846 = load i64, i64* %14845, align 8
  store i64 %14846, i64* %RCX.i2595, align 8
  %14847 = add i64 %14846, 1608
  %14848 = add i64 %14811, 42
  store i64 %14848, i64* %3, align 8
  %14849 = inttoptr i64 %14847 to i64*
  %14850 = load i64, i64* %14849, align 8
  store i64 %14850, i64* %RCX.i2595, align 8
  %14851 = add i64 %14850, 8
  %14852 = add i64 %14811, 46
  store i64 %14852, i64* %3, align 8
  %14853 = inttoptr i64 %14851 to i64*
  %14854 = load i64, i64* %14853, align 8
  store i64 %14854, i64* %RCX.i2595, align 8
  %14855 = add i64 %14811, 50
  store i64 %14855, i64* %3, align 8
  %14856 = load i32, i32* %14825, align 4
  %14857 = sext i32 %14856 to i64
  store i64 %14857, i64* %RSI.i766, align 8
  %14858 = shl nsw i64 %14857, 3
  %14859 = add i64 %14858, %14854
  %14860 = add i64 %14811, 54
  store i64 %14860, i64* %3, align 8
  %14861 = inttoptr i64 %14859 to i64*
  %14862 = load i64, i64* %14861, align 8
  store i64 %14862, i64* %RCX.i2595, align 8
  %14863 = add i64 %14811, 58
  store i64 %14863, i64* %3, align 8
  %14864 = load i32, i32* %14835, align 4
  %14865 = sext i32 %14864 to i64
  store i64 %14865, i64* %RSI.i766, align 8
  %14866 = shl nsw i64 %14865, 3
  %14867 = add i64 %14866, %14862
  %14868 = add i64 %14811, 62
  store i64 %14868, i64* %3, align 8
  %14869 = inttoptr i64 %14867 to i64*
  store i64 %14842, i64* %14869, align 8
  %.pre431 = load i64, i64* %3, align 8
  br label %block_.L_4589de

block_.L_4589de:                                  ; preds = %block_.L_4587da, %block_.L_4587a2
  %14870 = phi i64 [ %.pre431, %block_.L_4587da ], [ %14362, %block_.L_4587a2 ]
  %14871 = load i64, i64* %RBP.i, align 8
  %14872 = add i64 %14871, -32
  %14873 = add i64 %14870, 4
  store i64 %14873, i64* %3, align 8
  %14874 = inttoptr i64 %14872 to i64*
  %14875 = load i64, i64* %14874, align 8
  store i64 %14875, i64* %RAX.i3176, align 8
  %14876 = add i64 %14875, 6376
  %14877 = add i64 %14870, 10
  store i64 %14877, i64* %3, align 8
  %14878 = inttoptr i64 %14876 to i32*
  %14879 = load i32, i32* %14878, align 4
  %14880 = zext i32 %14879 to i64
  store i64 %14880, i64* %RCX.i2595, align 8
  %14881 = add i64 %14871, -16
  %14882 = add i64 %14870, 14
  store i64 %14882, i64* %3, align 8
  %14883 = inttoptr i64 %14881 to i64*
  %14884 = load i64, i64* %14883, align 8
  %14885 = add i64 %14884, 4864
  %14886 = add i64 %14870, 20
  store i64 %14886, i64* %3, align 8
  %14887 = inttoptr i64 %14885 to i32*
  store i32 %14879, i32* %14887, align 4
  %14888 = load i64, i64* %3, align 8
  %14889 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %14889, i64* %RAX.i3176, align 8
  %14890 = add i64 %14889, 71996
  %14891 = add i64 %14888, 15
  store i64 %14891, i64* %3, align 8
  %14892 = inttoptr i64 %14890 to i32*
  %14893 = load i32, i32* %14892, align 4
  %14894 = add i32 %14893, -1
  %14895 = icmp eq i32 %14893, 0
  %14896 = zext i1 %14895 to i8
  store i8 %14896, i8* %19, align 1
  %14897 = and i32 %14894, 255
  %14898 = tail call i32 @llvm.ctpop.i32(i32 %14897)
  %14899 = trunc i32 %14898 to i8
  %14900 = and i8 %14899, 1
  %14901 = xor i8 %14900, 1
  store i8 %14901, i8* %26, align 1
  %14902 = xor i32 %14894, %14893
  %14903 = lshr i32 %14902, 4
  %14904 = trunc i32 %14903 to i8
  %14905 = and i8 %14904, 1
  store i8 %14905, i8* %31, align 1
  %14906 = icmp eq i32 %14894, 0
  %14907 = zext i1 %14906 to i8
  store i8 %14907, i8* %34, align 1
  %14908 = lshr i32 %14894, 31
  %14909 = trunc i32 %14908 to i8
  store i8 %14909, i8* %37, align 1
  %14910 = lshr i32 %14893, 31
  %14911 = xor i32 %14908, %14910
  %14912 = add nuw nsw i32 %14911, %14910
  %14913 = icmp eq i32 %14912, 2
  %14914 = zext i1 %14913 to i8
  store i8 %14914, i8* %43, align 1
  %.v699 = select i1 %14906, i64 21, i64 455
  %14915 = add i64 %14888, %.v699
  store i64 %14915, i64* %3, align 8
  br i1 %14906, label %block_458a07, label %block_.L_458bb9

block_458a07:                                     ; preds = %block_.L_4589de
  %14916 = load i64, i64* %RBP.i, align 8
  %14917 = add i64 %14916, -16
  %14918 = add i64 %14915, 4
  store i64 %14918, i64* %3, align 8
  %14919 = inttoptr i64 %14917 to i64*
  %14920 = load i64, i64* %14919, align 8
  store i64 %14920, i64* %RAX.i3176, align 8
  %14921 = add i64 %14920, 4864
  %14922 = add i64 %14915, 11
  store i64 %14922, i64* %3, align 8
  %14923 = inttoptr i64 %14921 to i32*
  %14924 = load i32, i32* %14923, align 4
  store i8 0, i8* %19, align 1
  %14925 = and i32 %14924, 255
  %14926 = tail call i32 @llvm.ctpop.i32(i32 %14925)
  %14927 = trunc i32 %14926 to i8
  %14928 = and i8 %14927, 1
  %14929 = xor i8 %14928, 1
  store i8 %14929, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %14930 = icmp eq i32 %14924, 0
  %14931 = zext i1 %14930 to i8
  store i8 %14931, i8* %34, align 1
  %14932 = lshr i32 %14924, 31
  %14933 = trunc i32 %14932 to i8
  store i8 %14933, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v700 = select i1 %14930, i64 17, i64 165
  %14934 = add i64 %14915, %.v700
  store i64 %14934, i64* %3, align 8
  br i1 %14930, label %block_458a18, label %block_.L_458aac

block_458a18:                                     ; preds = %block_458a07
  %14935 = add i64 %14934, 4
  store i64 %14935, i64* %3, align 8
  %14936 = load i64, i64* %14919, align 8
  store i64 %14936, i64* %RAX.i3176, align 8
  %14937 = add i64 %14936, 1600
  %14938 = add i64 %14934, 11
  store i64 %14938, i64* %3, align 8
  %14939 = inttoptr i64 %14937 to i64*
  %14940 = load i64, i64* %14939, align 8
  store i64 %14940, i64* %RAX.i3176, align 8
  %14941 = add i64 %14934, 14
  store i64 %14941, i64* %3, align 8
  %14942 = inttoptr i64 %14940 to i64*
  %14943 = load i64, i64* %14942, align 8
  store i64 %14943, i64* %RAX.i3176, align 8
  %14944 = add i64 %14916, -52
  %14945 = add i64 %14934, 18
  store i64 %14945, i64* %3, align 8
  %14946 = inttoptr i64 %14944 to i32*
  %14947 = load i32, i32* %14946, align 4
  %14948 = sext i32 %14947 to i64
  store i64 %14948, i64* %RCX.i2595, align 8
  %14949 = shl nsw i64 %14948, 3
  %14950 = add i64 %14949, %14943
  %14951 = add i64 %14934, 22
  store i64 %14951, i64* %3, align 8
  %14952 = inttoptr i64 %14950 to i64*
  %14953 = load i64, i64* %14952, align 8
  store i64 %14953, i64* %RAX.i3176, align 8
  %14954 = add i64 %14916, -56
  %14955 = add i64 %14934, 26
  store i64 %14955, i64* %3, align 8
  %14956 = inttoptr i64 %14954 to i32*
  %14957 = load i32, i32* %14956, align 4
  %14958 = sext i32 %14957 to i64
  store i64 %14958, i64* %RCX.i2595, align 8
  %14959 = shl nsw i64 %14958, 1
  %14960 = add i64 %14959, %14953
  %14961 = add i64 %14934, 30
  store i64 %14961, i64* %3, align 8
  %14962 = inttoptr i64 %14960 to i16*
  %14963 = load i16, i16* %14962, align 2
  %14964 = sext i16 %14963 to i64
  %14965 = and i64 %14964, 4294967295
  store i64 %14965, i64* %RDX.i2592, align 8
  %14966 = sext i16 %14963 to i32
  store i8 0, i8* %19, align 1
  %14967 = and i32 %14966, 255
  %14968 = tail call i32 @llvm.ctpop.i32(i32 %14967)
  %14969 = trunc i32 %14968 to i8
  %14970 = and i8 %14969, 1
  %14971 = xor i8 %14970, 1
  store i8 %14971, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %14972 = icmp eq i16 %14963, 0
  %14973 = zext i1 %14972 to i8
  store i8 %14973, i8* %34, align 1
  %14974 = lshr i32 %14966, 31
  %14975 = trunc i32 %14974 to i8
  store i8 %14975, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v701 = select i1 %14972, i64 39, i64 148
  %14976 = add i64 %14934, %.v701
  store i64 %14976, i64* %3, align 8
  br i1 %14972, label %block_458a3f, label %block_.L_458aac

block_458a3f:                                     ; preds = %block_458a18
  %14977 = add i64 %14976, 4
  store i64 %14977, i64* %3, align 8
  %14978 = load i64, i64* %14919, align 8
  store i64 %14978, i64* %RAX.i3176, align 8
  %14979 = add i64 %14978, 1616
  %14980 = add i64 %14976, 11
  store i64 %14980, i64* %3, align 8
  %14981 = inttoptr i64 %14979 to i64*
  %14982 = load i64, i64* %14981, align 8
  store i64 %14982, i64* %RAX.i3176, align 8
  %14983 = add i64 %14976, 14
  store i64 %14983, i64* %3, align 8
  %14984 = inttoptr i64 %14982 to i64*
  %14985 = load i64, i64* %14984, align 8
  store i64 %14985, i64* %RAX.i3176, align 8
  %14986 = add i64 %14976, 18
  store i64 %14986, i64* %3, align 8
  %14987 = load i32, i32* %14946, align 4
  %14988 = sext i32 %14987 to i64
  store i64 %14988, i64* %RCX.i2595, align 8
  %14989 = shl nsw i64 %14988, 3
  %14990 = add i64 %14989, %14985
  %14991 = add i64 %14976, 22
  store i64 %14991, i64* %3, align 8
  %14992 = inttoptr i64 %14990 to i64*
  %14993 = load i64, i64* %14992, align 8
  store i64 %14993, i64* %RAX.i3176, align 8
  %14994 = add i64 %14976, 26
  store i64 %14994, i64* %3, align 8
  %14995 = load i32, i32* %14956, align 4
  %14996 = sext i32 %14995 to i64
  store i64 %14996, i64* %RCX.i2595, align 8
  %14997 = shl nsw i64 %14996, 3
  %14998 = add i64 %14997, %14993
  %14999 = add i64 %14976, 30
  store i64 %14999, i64* %3, align 8
  %15000 = inttoptr i64 %14998 to i64*
  %15001 = load i64, i64* %15000, align 8
  store i64 %15001, i64* %RAX.i3176, align 8
  %15002 = add i64 %14976, 33
  store i64 %15002, i64* %3, align 8
  %15003 = inttoptr i64 %15001 to i16*
  %15004 = load i16, i16* %15003, align 2
  %15005 = sext i16 %15004 to i64
  %15006 = and i64 %15005, 4294967295
  store i64 %15006, i64* %RDI.i732, align 8
  %15007 = add i64 %14976, -358975
  %15008 = add i64 %14976, 38
  %15009 = load i64, i64* %6, align 8
  %15010 = add i64 %15009, -8
  %15011 = inttoptr i64 %15010 to i64*
  store i64 %15008, i64* %15011, align 8
  store i64 %15010, i64* %6, align 8
  store i64 %15007, i64* %3, align 8
  %15012 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %12803)
  %15013 = load i64, i64* %RAX.i3176, align 8
  %15014 = load i64, i64* %3, align 8
  %15015 = shl i64 %15013, 32
  %15016 = ashr i64 %15015, 33
  %15017 = and i64 %15016, 4294967295
  store i64 %15017, i64* %RAX.i3176, align 8
  %15018 = trunc i64 %15016 to i32
  store i8 0, i8* %19, align 1
  %15019 = and i32 %15018, 255
  %15020 = tail call i32 @llvm.ctpop.i32(i32 %15019)
  %15021 = trunc i32 %15020 to i8
  %15022 = and i8 %15021, 1
  %15023 = xor i8 %15022, 1
  store i8 %15023, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15024 = icmp eq i32 %15018, 0
  %15025 = zext i1 %15024 to i8
  store i8 %15025, i8* %34, align 1
  %15026 = lshr i64 %15016, 31
  %15027 = trunc i64 %15026 to i8
  %15028 = and i8 %15027, 1
  store i8 %15028, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v702 = select i1 %15024, i64 11, i64 70
  %15029 = add i64 %15014, %.v702
  store i64 %15029, i64* %3, align 8
  br i1 %15024, label %block_458a71, label %block_.L_458aac

block_458a71:                                     ; preds = %block_458a3f
  %15030 = load i64, i64* %RBP.i, align 8
  %15031 = add i64 %15030, -16
  %15032 = add i64 %15029, 4
  store i64 %15032, i64* %3, align 8
  %15033 = inttoptr i64 %15031 to i64*
  %15034 = load i64, i64* %15033, align 8
  store i64 %15034, i64* %RAX.i3176, align 8
  %15035 = add i64 %15034, 1616
  %15036 = add i64 %15029, 11
  store i64 %15036, i64* %3, align 8
  %15037 = inttoptr i64 %15035 to i64*
  %15038 = load i64, i64* %15037, align 8
  store i64 %15038, i64* %RAX.i3176, align 8
  %15039 = add i64 %15029, 14
  store i64 %15039, i64* %3, align 8
  %15040 = inttoptr i64 %15038 to i64*
  %15041 = load i64, i64* %15040, align 8
  store i64 %15041, i64* %RAX.i3176, align 8
  %15042 = add i64 %15030, -52
  %15043 = add i64 %15029, 18
  store i64 %15043, i64* %3, align 8
  %15044 = inttoptr i64 %15042 to i32*
  %15045 = load i32, i32* %15044, align 4
  %15046 = sext i32 %15045 to i64
  store i64 %15046, i64* %RCX.i2595, align 8
  %15047 = shl nsw i64 %15046, 3
  %15048 = add i64 %15047, %15041
  %15049 = add i64 %15029, 22
  store i64 %15049, i64* %3, align 8
  %15050 = inttoptr i64 %15048 to i64*
  %15051 = load i64, i64* %15050, align 8
  store i64 %15051, i64* %RAX.i3176, align 8
  %15052 = add i64 %15030, -56
  %15053 = add i64 %15029, 26
  store i64 %15053, i64* %3, align 8
  %15054 = inttoptr i64 %15052 to i32*
  %15055 = load i32, i32* %15054, align 4
  %15056 = sext i32 %15055 to i64
  store i64 %15056, i64* %RCX.i2595, align 8
  %15057 = shl nsw i64 %15056, 3
  %15058 = add i64 %15057, %15051
  %15059 = add i64 %15029, 30
  store i64 %15059, i64* %3, align 8
  %15060 = inttoptr i64 %15058 to i64*
  %15061 = load i64, i64* %15060, align 8
  store i64 %15061, i64* %RAX.i3176, align 8
  %15062 = add i64 %15061, 2
  %15063 = add i64 %15029, 34
  store i64 %15063, i64* %3, align 8
  %15064 = inttoptr i64 %15062 to i16*
  %15065 = load i16, i16* %15064, align 2
  %15066 = sext i16 %15065 to i64
  %15067 = and i64 %15066, 4294967295
  store i64 %15067, i64* %RDI.i732, align 8
  %15068 = add i64 %15029, -359025
  %15069 = add i64 %15029, 39
  %15070 = load i64, i64* %6, align 8
  %15071 = add i64 %15070, -8
  %15072 = inttoptr i64 %15071 to i64*
  store i64 %15069, i64* %15072, align 8
  store i64 %15071, i64* %6, align 8
  store i64 %15068, i64* %3, align 8
  %15073 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %15012)
  %15074 = load i64, i64* %3, align 8
  store i8 1, i8* %DL.i1108, align 1
  %15075 = load i64, i64* %RAX.i3176, align 8
  %15076 = shl i64 %15075, 32
  %15077 = ashr i64 %15076, 33
  %15078 = and i64 %15077, 4294967295
  store i64 %15078, i64* %RAX.i3176, align 8
  %15079 = trunc i64 %15077 to i32
  store i8 0, i8* %19, align 1
  %15080 = and i32 %15079, 255
  %15081 = tail call i32 @llvm.ctpop.i32(i32 %15080)
  %15082 = trunc i32 %15081 to i8
  %15083 = and i8 %15082, 1
  %15084 = xor i8 %15083, 1
  store i8 %15084, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15085 = icmp eq i32 %15079, 0
  %15086 = zext i1 %15085 to i8
  store i8 %15086, i8* %34, align 1
  %15087 = lshr i64 %15077, 31
  %15088 = trunc i64 %15087 to i8
  %15089 = and i8 %15088, 1
  store i8 %15089, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %15090 = load i64, i64* %RBP.i, align 8
  %15091 = add i64 %15090, -1293
  %15092 = add i64 %15074, 13
  store i64 %15092, i64* %3, align 8
  %15093 = inttoptr i64 %15091 to i8*
  store i8 1, i8* %15093, align 1
  %15094 = load i64, i64* %3, align 8
  %15095 = load i8, i8* %34, align 1
  %15096 = icmp ne i8 %15095, 0
  %.v769 = select i1 %15096, i64 234, i64 6
  %15097 = add i64 %15094, %.v769
  store i64 %15097, i64* %3, align 8
  %cmpBr_458aa6 = icmp eq i8 %15095, 1
  br i1 %cmpBr_458aa6, label %block_.L_458b90, label %block_458a71.block_.L_458aac_crit_edge

block_458a71.block_.L_458aac_crit_edge:           ; preds = %block_458a71
  %.pre432 = load i64, i64* %RAX.i3176, align 8
  br label %block_.L_458aac

block_.L_458aac:                                  ; preds = %block_458a3f, %block_458a18, %block_458a07, %block_458a71.block_.L_458aac_crit_edge
  %15098 = phi i64 [ %14934, %block_458a07 ], [ %14976, %block_458a18 ], [ %15029, %block_458a3f ], [ %15097, %block_458a71.block_.L_458aac_crit_edge ]
  %15099 = phi i64 [ %14920, %block_458a07 ], [ %14953, %block_458a18 ], [ %15016, %block_458a3f ], [ %.pre432, %block_458a71.block_.L_458aac_crit_edge ]
  %15100 = phi i64 [ %14920, %block_458a07 ], [ %14953, %block_458a18 ], [ %15017, %block_458a3f ], [ %.pre432, %block_458a71.block_.L_458aac_crit_edge ]
  %MEMORY.110 = phi %struct.Memory* [ %12803, %block_458a07 ], [ %12803, %block_458a18 ], [ %15012, %block_458a3f ], [ %15073, %block_458a71.block_.L_458aac_crit_edge ]
  %15101 = and i64 %15099, 4294967295
  %15102 = xor i64 %15101, %15100
  %15103 = trunc i64 %15102 to i32
  %15104 = and i64 %15102, 4294967295
  store i64 %15104, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  %15105 = and i32 %15103, 255
  %15106 = tail call i32 @llvm.ctpop.i32(i32 %15105)
  %15107 = trunc i32 %15106 to i8
  %15108 = and i8 %15107, 1
  %15109 = xor i8 %15108, 1
  store i8 %15109, i8* %26, align 1
  %15110 = icmp eq i32 %15103, 0
  %15111 = zext i1 %15110 to i8
  store i8 %15111, i8* %34, align 1
  %15112 = lshr i32 %15103, 31
  %15113 = trunc i32 %15112 to i8
  store i8 %15113, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %15114 = trunc i64 %15102 to i8
  store i8 %15114, i8* %CL.i1197, align 1
  %15115 = load i64, i64* %RBP.i, align 8
  %15116 = add i64 %15115, -16
  %15117 = add i64 %15098, 8
  store i64 %15117, i64* %3, align 8
  %15118 = inttoptr i64 %15116 to i64*
  %15119 = load i64, i64* %15118, align 8
  store i64 %15119, i64* %RDX.i2592, align 8
  %15120 = add i64 %15119, 1600
  %15121 = add i64 %15098, 15
  store i64 %15121, i64* %3, align 8
  %15122 = inttoptr i64 %15120 to i64*
  %15123 = load i64, i64* %15122, align 8
  store i64 %15123, i64* %RDX.i2592, align 8
  %15124 = add i64 %15098, 18
  store i64 %15124, i64* %3, align 8
  %15125 = inttoptr i64 %15123 to i64*
  %15126 = load i64, i64* %15125, align 8
  store i64 %15126, i64* %RDX.i2592, align 8
  %15127 = add i64 %15115, -52
  %15128 = add i64 %15098, 22
  store i64 %15128, i64* %3, align 8
  %15129 = inttoptr i64 %15127 to i32*
  %15130 = load i32, i32* %15129, align 4
  %15131 = sext i32 %15130 to i64
  store i64 %15131, i64* %RSI.i766, align 8
  %15132 = shl nsw i64 %15131, 3
  %15133 = add i64 %15132, %15126
  %15134 = add i64 %15098, 26
  store i64 %15134, i64* %3, align 8
  %15135 = inttoptr i64 %15133 to i64*
  %15136 = load i64, i64* %15135, align 8
  store i64 %15136, i64* %RDX.i2592, align 8
  %15137 = add i64 %15115, -56
  %15138 = add i64 %15098, 30
  store i64 %15138, i64* %3, align 8
  %15139 = inttoptr i64 %15137 to i32*
  %15140 = load i32, i32* %15139, align 4
  %15141 = sext i32 %15140 to i64
  store i64 %15141, i64* %RSI.i766, align 8
  %15142 = shl nsw i64 %15141, 1
  %15143 = add i64 %15142, %15136
  %15144 = add i64 %15098, 34
  store i64 %15144, i64* %3, align 8
  %15145 = inttoptr i64 %15143 to i16*
  %15146 = load i16, i16* %15145, align 2
  %15147 = sext i16 %15146 to i64
  %15148 = and i64 %15147, 4294967295
  store i64 %15148, i64* %RAX.i3176, align 8
  %15149 = sext i16 %15146 to i32
  %15150 = add nsw i32 %15149, 1
  %15151 = icmp ne i16 %15146, -1
  %15152 = zext i1 %15151 to i8
  store i8 %15152, i8* %19, align 1
  %15153 = and i32 %15150, 255
  %15154 = tail call i32 @llvm.ctpop.i32(i32 %15153)
  %15155 = trunc i32 %15154 to i8
  %15156 = and i8 %15155, 1
  %15157 = xor i8 %15156, 1
  store i8 %15157, i8* %26, align 1
  %15158 = xor i32 %15149, 16
  %15159 = xor i32 %15158, %15150
  %15160 = lshr i32 %15159, 4
  %15161 = trunc i32 %15160 to i8
  %15162 = and i8 %15161, 1
  store i8 %15162, i8* %31, align 1
  %15163 = icmp eq i32 %15150, 0
  %15164 = zext i1 %15163 to i8
  store i8 %15164, i8* %34, align 1
  %15165 = lshr i32 %15150, 31
  %15166 = trunc i32 %15165 to i8
  store i8 %15166, i8* %37, align 1
  %15167 = lshr i32 %15149, 31
  %15168 = xor i32 %15167, 1
  %15169 = xor i32 %15165, %15167
  %15170 = add nuw nsw i32 %15169, %15168
  %15171 = icmp eq i32 %15170, 2
  %15172 = zext i1 %15171 to i8
  store i8 %15172, i8* %43, align 1
  %15173 = add i64 %15115, -1294
  %15174 = add i64 %15098, 43
  store i64 %15174, i64* %3, align 8
  %15175 = inttoptr i64 %15173 to i8*
  store i8 %15114, i8* %15175, align 1
  %15176 = load i64, i64* %3, align 8
  %15177 = add i64 %15176, 173
  %15178 = add i64 %15176, 6
  %15179 = load i8, i8* %34, align 1
  %15180 = icmp eq i8 %15179, 0
  %15181 = select i1 %15180, i64 %15177, i64 %15178
  store i64 %15181, i64* %3, align 8
  br i1 %15180, label %block_.L_458b84, label %block_458add

block_458add:                                     ; preds = %block_.L_458aac
  store i64 0, i64* %RAX.i3176, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %CL.i1197, align 1
  %15182 = load i64, i64* %RBP.i, align 8
  %15183 = add i64 %15182, -16
  %15184 = add i64 %15181, 8
  store i64 %15184, i64* %3, align 8
  %15185 = inttoptr i64 %15183 to i64*
  %15186 = load i64, i64* %15185, align 8
  store i64 %15186, i64* %RDX.i2592, align 8
  %15187 = add i64 %15186, 1600
  %15188 = add i64 %15181, 15
  store i64 %15188, i64* %3, align 8
  %15189 = inttoptr i64 %15187 to i64*
  %15190 = load i64, i64* %15189, align 8
  store i64 %15190, i64* %RDX.i2592, align 8
  %15191 = add i64 %15190, 8
  %15192 = add i64 %15181, 19
  store i64 %15192, i64* %3, align 8
  %15193 = inttoptr i64 %15191 to i64*
  %15194 = load i64, i64* %15193, align 8
  store i64 %15194, i64* %RDX.i2592, align 8
  %15195 = add i64 %15182, -52
  %15196 = add i64 %15181, 23
  store i64 %15196, i64* %3, align 8
  %15197 = inttoptr i64 %15195 to i32*
  %15198 = load i32, i32* %15197, align 4
  %15199 = sext i32 %15198 to i64
  store i64 %15199, i64* %RSI.i766, align 8
  %15200 = shl nsw i64 %15199, 3
  %15201 = add i64 %15200, %15194
  %15202 = add i64 %15181, 27
  store i64 %15202, i64* %3, align 8
  %15203 = inttoptr i64 %15201 to i64*
  %15204 = load i64, i64* %15203, align 8
  store i64 %15204, i64* %RDX.i2592, align 8
  %15205 = add i64 %15182, -56
  %15206 = add i64 %15181, 31
  store i64 %15206, i64* %3, align 8
  %15207 = inttoptr i64 %15205 to i32*
  %15208 = load i32, i32* %15207, align 4
  %15209 = sext i32 %15208 to i64
  store i64 %15209, i64* %RSI.i766, align 8
  %15210 = shl nsw i64 %15209, 1
  %15211 = add i64 %15210, %15204
  %15212 = add i64 %15181, 35
  store i64 %15212, i64* %3, align 8
  %15213 = inttoptr i64 %15211 to i16*
  %15214 = load i16, i16* %15213, align 2
  %15215 = sext i16 %15214 to i64
  %15216 = and i64 %15215, 4294967295
  store i64 %15216, i64* %RAX.i3176, align 8
  %15217 = sext i16 %15214 to i32
  store i8 0, i8* %19, align 1
  %15218 = and i32 %15217, 255
  %15219 = tail call i32 @llvm.ctpop.i32(i32 %15218)
  %15220 = trunc i32 %15219 to i8
  %15221 = and i8 %15220, 1
  %15222 = xor i8 %15221, 1
  store i8 %15222, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15223 = icmp eq i16 %15214, 0
  %15224 = zext i1 %15223 to i8
  store i8 %15224, i8* %34, align 1
  %15225 = lshr i32 %15217, 31
  %15226 = trunc i32 %15225 to i8
  store i8 %15226, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %15227 = add i64 %15182, -1294
  %15228 = add i64 %15181, 44
  store i64 %15228, i64* %3, align 8
  %15229 = inttoptr i64 %15227 to i8*
  store i8 0, i8* %15229, align 1
  %15230 = load i64, i64* %3, align 8
  %15231 = add i64 %15230, 123
  %15232 = add i64 %15230, 6
  %15233 = load i8, i8* %34, align 1
  %15234 = icmp eq i8 %15233, 0
  %15235 = select i1 %15234, i64 %15231, i64 %15232
  store i64 %15235, i64* %3, align 8
  br i1 %15234, label %block_.L_458b84, label %block_458b0f

block_458b0f:                                     ; preds = %block_458add
  %15236 = load i64, i64* %RBP.i, align 8
  %15237 = add i64 %15236, -16
  %15238 = add i64 %15235, 4
  store i64 %15238, i64* %3, align 8
  %15239 = inttoptr i64 %15237 to i64*
  %15240 = load i64, i64* %15239, align 8
  store i64 %15240, i64* %RAX.i3176, align 8
  %15241 = add i64 %15240, 1616
  %15242 = add i64 %15235, 11
  store i64 %15242, i64* %3, align 8
  %15243 = inttoptr i64 %15241 to i64*
  %15244 = load i64, i64* %15243, align 8
  store i64 %15244, i64* %RAX.i3176, align 8
  %15245 = add i64 %15244, 8
  %15246 = add i64 %15235, 15
  store i64 %15246, i64* %3, align 8
  %15247 = inttoptr i64 %15245 to i64*
  %15248 = load i64, i64* %15247, align 8
  store i64 %15248, i64* %RAX.i3176, align 8
  %15249 = add i64 %15236, -52
  %15250 = add i64 %15235, 19
  store i64 %15250, i64* %3, align 8
  %15251 = inttoptr i64 %15249 to i32*
  %15252 = load i32, i32* %15251, align 4
  %15253 = sext i32 %15252 to i64
  store i64 %15253, i64* %RCX.i2595, align 8
  %15254 = shl nsw i64 %15253, 3
  %15255 = add i64 %15254, %15248
  %15256 = add i64 %15235, 23
  store i64 %15256, i64* %3, align 8
  %15257 = inttoptr i64 %15255 to i64*
  %15258 = load i64, i64* %15257, align 8
  store i64 %15258, i64* %RAX.i3176, align 8
  %15259 = add i64 %15236, -56
  %15260 = add i64 %15235, 27
  store i64 %15260, i64* %3, align 8
  %15261 = inttoptr i64 %15259 to i32*
  %15262 = load i32, i32* %15261, align 4
  %15263 = sext i32 %15262 to i64
  store i64 %15263, i64* %RCX.i2595, align 8
  %15264 = shl nsw i64 %15263, 3
  %15265 = add i64 %15264, %15258
  %15266 = add i64 %15235, 31
  store i64 %15266, i64* %3, align 8
  %15267 = inttoptr i64 %15265 to i64*
  %15268 = load i64, i64* %15267, align 8
  store i64 %15268, i64* %RAX.i3176, align 8
  %15269 = add i64 %15235, 34
  store i64 %15269, i64* %3, align 8
  %15270 = inttoptr i64 %15268 to i16*
  %15271 = load i16, i16* %15270, align 2
  %15272 = sext i16 %15271 to i64
  %15273 = and i64 %15272, 4294967295
  store i64 %15273, i64* %RDI.i732, align 8
  %15274 = add i64 %15235, -359183
  %15275 = add i64 %15235, 39
  %15276 = load i64, i64* %6, align 8
  %15277 = add i64 %15276, -8
  %15278 = inttoptr i64 %15277 to i64*
  store i64 %15275, i64* %15278, align 8
  store i64 %15277, i64* %6, align 8
  store i64 %15274, i64* %3, align 8
  %15279 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.110)
  %15280 = load i64, i64* %3, align 8
  store i64 0, i64* %RDI.i732, align 8
  store i8 0, i8* %DL.i1108, align 1
  %15281 = load i64, i64* %RAX.i3176, align 8
  %15282 = shl i64 %15281, 32
  %15283 = ashr i64 %15282, 33
  %15284 = and i64 %15283, 4294967295
  store i64 %15284, i64* %RAX.i3176, align 8
  %15285 = trunc i64 %15283 to i32
  store i8 0, i8* %19, align 1
  %15286 = and i32 %15285, 255
  %15287 = tail call i32 @llvm.ctpop.i32(i32 %15286)
  %15288 = trunc i32 %15287 to i8
  %15289 = and i8 %15288, 1
  %15290 = xor i8 %15289, 1
  store i8 %15290, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15291 = icmp eq i32 %15285, 0
  %15292 = zext i1 %15291 to i8
  store i8 %15292, i8* %34, align 1
  %15293 = lshr i64 %15283, 31
  %15294 = trunc i64 %15293 to i8
  %15295 = and i8 %15294, 1
  store i8 %15295, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %15296 = load i64, i64* %RBP.i, align 8
  %15297 = add i64 %15296, -1294
  %15298 = add i64 %15280, 16
  store i64 %15298, i64* %3, align 8
  %15299 = inttoptr i64 %15297 to i8*
  store i8 0, i8* %15299, align 1
  %15300 = load i64, i64* %3, align 8
  %15301 = add i64 %15300, 61
  %15302 = add i64 %15300, 6
  %15303 = load i8, i8* %34, align 1
  %15304 = icmp eq i8 %15303, 0
  %15305 = select i1 %15304, i64 %15301, i64 %15302
  store i64 %15305, i64* %3, align 8
  br i1 %15304, label %block_.L_458b84, label %block_458b4d

block_458b4d:                                     ; preds = %block_458b0f
  %15306 = load i64, i64* %RBP.i, align 8
  %15307 = add i64 %15306, -16
  %15308 = add i64 %15305, 4
  store i64 %15308, i64* %3, align 8
  %15309 = inttoptr i64 %15307 to i64*
  %15310 = load i64, i64* %15309, align 8
  store i64 %15310, i64* %RAX.i3176, align 8
  %15311 = add i64 %15310, 1616
  %15312 = add i64 %15305, 11
  store i64 %15312, i64* %3, align 8
  %15313 = inttoptr i64 %15311 to i64*
  %15314 = load i64, i64* %15313, align 8
  store i64 %15314, i64* %RAX.i3176, align 8
  %15315 = add i64 %15314, 8
  %15316 = add i64 %15305, 15
  store i64 %15316, i64* %3, align 8
  %15317 = inttoptr i64 %15315 to i64*
  %15318 = load i64, i64* %15317, align 8
  store i64 %15318, i64* %RAX.i3176, align 8
  %15319 = add i64 %15306, -52
  %15320 = add i64 %15305, 19
  store i64 %15320, i64* %3, align 8
  %15321 = inttoptr i64 %15319 to i32*
  %15322 = load i32, i32* %15321, align 4
  %15323 = sext i32 %15322 to i64
  store i64 %15323, i64* %RCX.i2595, align 8
  %15324 = shl nsw i64 %15323, 3
  %15325 = add i64 %15324, %15318
  %15326 = add i64 %15305, 23
  store i64 %15326, i64* %3, align 8
  %15327 = inttoptr i64 %15325 to i64*
  %15328 = load i64, i64* %15327, align 8
  store i64 %15328, i64* %RAX.i3176, align 8
  %15329 = add i64 %15306, -56
  %15330 = add i64 %15305, 27
  store i64 %15330, i64* %3, align 8
  %15331 = inttoptr i64 %15329 to i32*
  %15332 = load i32, i32* %15331, align 4
  %15333 = sext i32 %15332 to i64
  store i64 %15333, i64* %RCX.i2595, align 8
  %15334 = shl nsw i64 %15333, 3
  %15335 = add i64 %15334, %15328
  %15336 = add i64 %15305, 31
  store i64 %15336, i64* %3, align 8
  %15337 = inttoptr i64 %15335 to i64*
  %15338 = load i64, i64* %15337, align 8
  store i64 %15338, i64* %RAX.i3176, align 8
  %15339 = add i64 %15338, 2
  %15340 = add i64 %15305, 35
  store i64 %15340, i64* %3, align 8
  %15341 = inttoptr i64 %15339 to i16*
  %15342 = load i16, i16* %15341, align 2
  %15343 = sext i16 %15342 to i64
  %15344 = and i64 %15343, 4294967295
  store i64 %15344, i64* %RDI.i732, align 8
  %15345 = add i64 %15305, -359245
  %15346 = add i64 %15305, 40
  %15347 = load i64, i64* %6, align 8
  %15348 = add i64 %15347, -8
  %15349 = inttoptr i64 %15348 to i64*
  store i64 %15346, i64* %15349, align 8
  store i64 %15348, i64* %6, align 8
  store i64 %15345, i64* %3, align 8
  %15350 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %15279)
  %15351 = load i64, i64* %RAX.i3176, align 8
  %15352 = load i64, i64* %3, align 8
  %15353 = shl i64 %15351, 32
  %15354 = ashr i64 %15353, 33
  %15355 = and i64 %15354, 4294967295
  store i64 %15355, i64* %RAX.i3176, align 8
  %15356 = trunc i64 %15354 to i32
  store i8 0, i8* %19, align 1
  %15357 = and i32 %15356, 255
  %15358 = tail call i32 @llvm.ctpop.i32(i32 %15357)
  %15359 = trunc i32 %15358 to i8
  %15360 = and i8 %15359, 1
  %15361 = xor i8 %15360, 1
  store i8 %15361, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15362 = icmp eq i32 %15356, 0
  %15363 = zext i1 %15362 to i8
  store i8 %15363, i8* %34, align 1
  %15364 = lshr i64 %15354, 31
  %15365 = trunc i64 %15364 to i8
  %15366 = and i8 %15365, 1
  store i8 %15366, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 %15363, i8* %DL.i1108, align 1
  %15367 = load i64, i64* %RBP.i, align 8
  %15368 = add i64 %15367, -1294
  %15369 = add i64 %15352, 14
  store i64 %15369, i64* %3, align 8
  %15370 = inttoptr i64 %15368 to i8*
  store i8 %15363, i8* %15370, align 1
  %.pre433 = load i64, i64* %3, align 8
  br label %block_.L_458b84

block_.L_458b84:                                  ; preds = %block_458b4d, %block_458b0f, %block_458add, %block_.L_458aac
  %15371 = phi i64 [ %15177, %block_.L_458aac ], [ %15231, %block_458add ], [ %15301, %block_458b0f ], [ %.pre433, %block_458b4d ]
  %MEMORY.111 = phi %struct.Memory* [ %MEMORY.110, %block_.L_458aac ], [ %MEMORY.110, %block_458add ], [ %15279, %block_458b0f ], [ %15350, %block_458b4d ]
  %15372 = load i64, i64* %RBP.i, align 8
  %15373 = add i64 %15372, -1294
  %15374 = add i64 %15371, 6
  store i64 %15374, i64* %3, align 8
  %15375 = inttoptr i64 %15373 to i8*
  %15376 = load i8, i8* %15375, align 1
  store i8 %15376, i8* %AL.i1196, align 1
  %15377 = add i64 %15372, -1293
  %15378 = add i64 %15371, 12
  store i64 %15378, i64* %3, align 8
  %15379 = inttoptr i64 %15377 to i8*
  store i8 %15376, i8* %15379, align 1
  %.pre434 = load i64, i64* %3, align 8
  br label %block_.L_458b90

block_.L_458b90:                                  ; preds = %block_.L_458b84, %block_458a71
  %15380 = phi i64 [ %.pre434, %block_.L_458b84 ], [ %15097, %block_458a71 ]
  %MEMORY.112 = phi %struct.Memory* [ %MEMORY.111, %block_.L_458b84 ], [ %15073, %block_458a71 ]
  %15381 = load i64, i64* %RBP.i, align 8
  %15382 = add i64 %15381, -1293
  %15383 = add i64 %15380, 6
  store i64 %15383, i64* %3, align 8
  %15384 = inttoptr i64 %15382 to i8*
  %15385 = load i8, i8* %15384, align 1
  %15386 = and i8 %15385, 1
  %15387 = xor i8 %15386, 1
  store i8 0, i8* %19, align 1
  %15388 = zext i8 %15387 to i32
  %15389 = tail call i32 @llvm.ctpop.i32(i32 %15388)
  %15390 = trunc i32 %15389 to i8
  %15391 = xor i8 %15390, 1
  store i8 %15391, i8* %26, align 1
  store i8 %15386, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %15392 = zext i8 %15387 to i64
  store i64 %15392, i64* %RCX.i2595, align 8
  store i8 %15387, i8* %AL.i1196, align 1
  %15393 = add i64 %15381, -16
  %15394 = add i64 %15380, 19
  store i64 %15394, i64* %3, align 8
  %15395 = inttoptr i64 %15393 to i64*
  %15396 = load i64, i64* %15395, align 8
  store i64 %15396, i64* %RDX.i2592, align 8
  %15397 = add i64 %15396, 1624
  %15398 = add i64 %15380, 26
  store i64 %15398, i64* %3, align 8
  %15399 = inttoptr i64 %15397 to i64*
  %15400 = load i64, i64* %15399, align 8
  store i64 %15400, i64* %RDX.i2592, align 8
  %15401 = add i64 %15381, -52
  %15402 = add i64 %15380, 30
  store i64 %15402, i64* %3, align 8
  %15403 = inttoptr i64 %15401 to i32*
  %15404 = load i32, i32* %15403, align 4
  %15405 = sext i32 %15404 to i64
  store i64 %15405, i64* %RSI.i766, align 8
  %15406 = shl nsw i64 %15405, 3
  %15407 = add i64 %15406, %15400
  %15408 = add i64 %15380, 34
  store i64 %15408, i64* %3, align 8
  %15409 = inttoptr i64 %15407 to i64*
  %15410 = load i64, i64* %15409, align 8
  store i64 %15410, i64* %RDX.i2592, align 8
  %15411 = add i64 %15381, -56
  %15412 = add i64 %15380, 38
  store i64 %15412, i64* %3, align 8
  %15413 = inttoptr i64 %15411 to i32*
  %15414 = load i32, i32* %15413, align 4
  %15415 = sext i32 %15414 to i64
  store i64 %15415, i64* %RSI.i766, align 8
  %15416 = add i64 %15410, %15415
  %15417 = add i64 %15380, 41
  store i64 %15417, i64* %3, align 8
  %15418 = inttoptr i64 %15416 to i8*
  store i8 %15387, i8* %15418, align 1
  %.pre435 = load i64, i64* %3, align 8
  br label %block_.L_458bb9

block_.L_458bb9:                                  ; preds = %block_.L_4589de, %block_.L_458b90
  %15419 = phi i64 [ %14915, %block_.L_4589de ], [ %.pre435, %block_.L_458b90 ]
  %MEMORY.113 = phi %struct.Memory* [ %12803, %block_.L_4589de ], [ %MEMORY.112, %block_.L_458b90 ]
  %15420 = load i64, i64* %RBP.i, align 8
  %15421 = add i64 %15420, -52
  %15422 = add i64 %15419, 8
  store i64 %15422, i64* %3, align 8
  %15423 = inttoptr i64 %15421 to i32*
  %15424 = load i32, i32* %15423, align 4
  %15425 = add i32 %15424, 1
  %15426 = zext i32 %15425 to i64
  store i64 %15426, i64* %RAX.i3176, align 8
  %15427 = icmp eq i32 %15424, -1
  %15428 = icmp eq i32 %15425, 0
  %15429 = or i1 %15427, %15428
  %15430 = zext i1 %15429 to i8
  store i8 %15430, i8* %19, align 1
  %15431 = and i32 %15425, 255
  %15432 = tail call i32 @llvm.ctpop.i32(i32 %15431)
  %15433 = trunc i32 %15432 to i8
  %15434 = and i8 %15433, 1
  %15435 = xor i8 %15434, 1
  store i8 %15435, i8* %26, align 1
  %15436 = xor i32 %15425, %15424
  %15437 = lshr i32 %15436, 4
  %15438 = trunc i32 %15437 to i8
  %15439 = and i8 %15438, 1
  store i8 %15439, i8* %31, align 1
  %15440 = zext i1 %15428 to i8
  store i8 %15440, i8* %34, align 1
  %15441 = lshr i32 %15425, 31
  %15442 = trunc i32 %15441 to i8
  store i8 %15442, i8* %37, align 1
  %15443 = lshr i32 %15424, 31
  %15444 = xor i32 %15441, %15443
  %15445 = add nuw nsw i32 %15444, %15441
  %15446 = icmp eq i32 %15445, 2
  %15447 = zext i1 %15446 to i8
  store i8 %15447, i8* %43, align 1
  %15448 = add i64 %15419, 14
  store i64 %15448, i64* %3, align 8
  store i32 %15425, i32* %15423, align 4
  %15449 = load i64, i64* %3, align 8
  %15450 = add i64 %15449, -2619
  store i64 %15450, i64* %3, align 8
  br label %block_.L_45818c

block_.L_458bcc:                                  ; preds = %routine_idivl__esi.exit2543
  %15451 = load i64, i64* %RBP.i, align 8
  %15452 = add i64 %15451, -56
  %15453 = add i64 %12831, 8
  store i64 %15453, i64* %3, align 8
  %15454 = inttoptr i64 %15452 to i32*
  %15455 = load i32, i32* %15454, align 4
  %15456 = add i32 %15455, 1
  %15457 = zext i32 %15456 to i64
  store i64 %15457, i64* %RAX.i3176, align 8
  %15458 = icmp eq i32 %15455, -1
  %15459 = icmp eq i32 %15456, 0
  %15460 = or i1 %15458, %15459
  %15461 = zext i1 %15460 to i8
  store i8 %15461, i8* %19, align 1
  %15462 = and i32 %15456, 255
  %15463 = tail call i32 @llvm.ctpop.i32(i32 %15462)
  %15464 = trunc i32 %15463 to i8
  %15465 = and i8 %15464, 1
  %15466 = xor i8 %15465, 1
  store i8 %15466, i8* %26, align 1
  %15467 = xor i32 %15456, %15455
  %15468 = lshr i32 %15467, 4
  %15469 = trunc i32 %15468 to i8
  %15470 = and i8 %15469, 1
  store i8 %15470, i8* %31, align 1
  %15471 = zext i1 %15459 to i8
  store i8 %15471, i8* %34, align 1
  %15472 = lshr i32 %15456, 31
  %15473 = trunc i32 %15472 to i8
  store i8 %15473, i8* %37, align 1
  %15474 = lshr i32 %15455, 31
  %15475 = xor i32 %15472, %15474
  %15476 = add nuw nsw i32 %15475, %15472
  %15477 = icmp eq i32 %15476, 2
  %15478 = zext i1 %15477 to i8
  store i8 %15478, i8* %43, align 1
  %15479 = add i64 %12831, 14
  store i64 %15479, i64* %3, align 8
  store i32 %15456, i32* %15454, align 4
  %15480 = load i64, i64* %3, align 8
  %15481 = add i64 %15480, -2688
  store i64 %15481, i64* %3, align 8
  br label %block_.L_45815a

block_.L_458bdf:                                  ; preds = %routine_idivl__esi.exit2575
  %15482 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %15482, i64* %RAX.i3176, align 8
  %15483 = add i64 %15482, 71996
  %15484 = add i64 %12751, 15
  store i64 %15484, i64* %3, align 8
  %15485 = inttoptr i64 %15483 to i32*
  %15486 = load i32, i32* %15485, align 4
  store i8 0, i8* %19, align 1
  %15487 = and i32 %15486, 255
  %15488 = tail call i32 @llvm.ctpop.i32(i32 %15487)
  %15489 = trunc i32 %15488 to i8
  %15490 = and i8 %15489, 1
  %15491 = xor i8 %15490, 1
  store i8 %15491, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15492 = icmp eq i32 %15486, 0
  %15493 = zext i1 %15492 to i8
  store i8 %15493, i8* %34, align 1
  %15494 = lshr i32 %15486, 31
  %15495 = trunc i32 %15494 to i8
  store i8 %15495, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v672 = select i1 %15492, i64 21, i64 1749
  %15496 = add i64 %12751, %.v672
  store i64 %15496, i64* %3, align 8
  br i1 %15492, label %block_458bf4, label %block_.L_4592b4

block_458bf4:                                     ; preds = %block_.L_458bdf
  %15497 = load i64, i64* %RBP.i, align 8
  %15498 = add i64 %15497, -56
  %15499 = add i64 %15496, 7
  store i64 %15499, i64* %3, align 8
  %15500 = inttoptr i64 %15498 to i32*
  store i32 0, i32* %15500, align 4
  %AX.i760 = bitcast %union.anon* %101 to i16*
  %DI.i761 = bitcast %union.anon* %44 to i16*
  %R8.i748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %.pre380 = load i64, i64* %3, align 8
  br label %block_.L_458bfb

block_.L_458bfb:                                  ; preds = %block_.L_458df1, %block_458bf4
  %15501 = phi i64 [ %.pre380, %block_458bf4 ], [ %16133, %block_.L_458df1 ]
  %MEMORY.114 = phi %struct.Memory* [ %12723, %block_458bf4 ], [ %15628, %block_.L_458df1 ]
  store i64 4, i64* %RAX.i3176, align 8
  %15502 = load i64, i64* %RBP.i, align 8
  %15503 = add i64 %15502, -56
  %15504 = add i64 %15501, 8
  store i64 %15504, i64* %3, align 8
  %15505 = inttoptr i64 %15503 to i32*
  %15506 = load i32, i32* %15505, align 4
  %15507 = zext i32 %15506 to i64
  store i64 %15507, i64* %RCX.i2595, align 8
  %15508 = add i64 %15502, -32
  %15509 = add i64 %15501, 12
  store i64 %15509, i64* %3, align 8
  %15510 = inttoptr i64 %15508 to i64*
  %15511 = load i64, i64* %15510, align 8
  store i64 %15511, i64* %RDX.i2592, align 8
  %15512 = add i64 %15511, 6396
  %15513 = add i64 %15501, 18
  store i64 %15513, i64* %3, align 8
  %15514 = inttoptr i64 %15512 to i32*
  %15515 = load i32, i32* %15514, align 4
  %15516 = zext i32 %15515 to i64
  store i64 %15516, i64* %RSI.i766, align 8
  %15517 = add i64 %15502, -1300
  %15518 = add i64 %15501, 24
  store i64 %15518, i64* %3, align 8
  %15519 = inttoptr i64 %15517 to i32*
  store i32 4, i32* %15519, align 4
  %15520 = load i32, i32* %ESI.i2583, align 4
  %15521 = zext i32 %15520 to i64
  %15522 = load i64, i64* %3, align 8
  store i64 %15521, i64* %RAX.i3176, align 8
  %15523 = sext i32 %15520 to i64
  %15524 = lshr i64 %15523, 32
  store i64 %15524, i64* %12675, align 8
  %15525 = load i64, i64* %RBP.i, align 8
  %15526 = add i64 %15525, -1300
  %15527 = add i64 %15522, 9
  store i64 %15527, i64* %3, align 8
  %15528 = inttoptr i64 %15526 to i32*
  %15529 = load i32, i32* %15528, align 4
  %15530 = zext i32 %15529 to i64
  store i64 %15530, i64* %RSI.i766, align 8
  %15531 = add i64 %15522, 11
  store i64 %15531, i64* %3, align 8
  %15532 = sext i32 %15529 to i64
  %15533 = shl nuw i64 %15524, 32
  %15534 = or i64 %15533, %15521
  %15535 = sdiv i64 %15534, %15532
  %15536 = shl i64 %15535, 32
  %15537 = ashr exact i64 %15536, 32
  %15538 = icmp eq i64 %15535, %15537
  br i1 %15538, label %15541, label %15539

; <label>:15539:                                  ; preds = %block_.L_458bfb
  %15540 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15531, %struct.Memory* %MEMORY.114)
  %.pre381 = load i32, i32* %EAX.i2586, align 4
  %.pre382 = load i64, i64* %3, align 8
  %.pre383 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit980

; <label>:15541:                                  ; preds = %block_.L_458bfb
  %15542 = srem i64 %15534, %15532
  %15543 = and i64 %15535, 4294967295
  store i64 %15543, i64* %RAX.i3176, align 8
  %15544 = and i64 %15542, 4294967295
  store i64 %15544, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %15545 = trunc i64 %15535 to i32
  br label %routine_idivl__esi.exit980

routine_idivl__esi.exit980:                       ; preds = %15541, %15539
  %15546 = phi i64 [ %.pre383, %15539 ], [ %15525, %15541 ]
  %15547 = phi i64 [ %.pre382, %15539 ], [ %15531, %15541 ]
  %15548 = phi i32 [ %.pre381, %15539 ], [ %15545, %15541 ]
  %15549 = phi %struct.Memory* [ %15540, %15539 ], [ %MEMORY.114, %15541 ]
  %15550 = load i32, i32* %ECX.i2572, align 4
  %15551 = sub i32 %15550, %15548
  %15552 = icmp ult i32 %15550, %15548
  %15553 = zext i1 %15552 to i8
  store i8 %15553, i8* %19, align 1
  %15554 = and i32 %15551, 255
  %15555 = tail call i32 @llvm.ctpop.i32(i32 %15554)
  %15556 = trunc i32 %15555 to i8
  %15557 = and i8 %15556, 1
  %15558 = xor i8 %15557, 1
  store i8 %15558, i8* %26, align 1
  %15559 = xor i32 %15548, %15550
  %15560 = xor i32 %15559, %15551
  %15561 = lshr i32 %15560, 4
  %15562 = trunc i32 %15561 to i8
  %15563 = and i8 %15562, 1
  store i8 %15563, i8* %31, align 1
  %15564 = icmp eq i32 %15551, 0
  %15565 = zext i1 %15564 to i8
  store i8 %15565, i8* %34, align 1
  %15566 = lshr i32 %15551, 31
  %15567 = trunc i32 %15566 to i8
  store i8 %15567, i8* %37, align 1
  %15568 = lshr i32 %15550, 31
  %15569 = lshr i32 %15548, 31
  %15570 = xor i32 %15569, %15568
  %15571 = xor i32 %15566, %15568
  %15572 = add nuw nsw i32 %15571, %15570
  %15573 = icmp eq i32 %15572, 2
  %15574 = zext i1 %15573 to i8
  store i8 %15574, i8* %43, align 1
  %15575 = icmp ne i8 %15567, 0
  %15576 = xor i1 %15575, %15573
  %.v673 = select i1 %15576, i64 8, i64 486
  %15577 = add i64 %15547, %.v673
  store i64 %15577, i64* %3, align 8
  br i1 %15576, label %block_458c26, label %block_.L_458e04

block_458c26:                                     ; preds = %routine_idivl__esi.exit980
  %15578 = add i64 %15546, -52
  %15579 = add i64 %15577, 7
  store i64 %15579, i64* %3, align 8
  %15580 = inttoptr i64 %15578 to i32*
  store i32 0, i32* %15580, align 4
  %.pre403 = load i64, i64* %3, align 8
  br label %block_.L_458c2d

block_.L_458c2d:                                  ; preds = %block_.L_458dde, %block_458c26
  %15581 = phi i64 [ %.pre403, %block_458c26 ], [ %16102, %block_.L_458dde ]
  %MEMORY.115 = phi %struct.Memory* [ %15549, %block_458c26 ], [ %MEMORY.120, %block_.L_458dde ]
  store i64 4, i64* %RAX.i3176, align 8
  %15582 = load i64, i64* %RBP.i, align 8
  %15583 = add i64 %15582, -52
  %15584 = add i64 %15581, 8
  store i64 %15584, i64* %3, align 8
  %15585 = inttoptr i64 %15583 to i32*
  %15586 = load i32, i32* %15585, align 4
  %15587 = zext i32 %15586 to i64
  store i64 %15587, i64* %RCX.i2595, align 8
  %15588 = add i64 %15582, -32
  %15589 = add i64 %15581, 12
  store i64 %15589, i64* %3, align 8
  %15590 = inttoptr i64 %15588 to i64*
  %15591 = load i64, i64* %15590, align 8
  store i64 %15591, i64* %RDX.i2592, align 8
  %15592 = add i64 %15591, 6392
  %15593 = add i64 %15581, 18
  store i64 %15593, i64* %3, align 8
  %15594 = inttoptr i64 %15592 to i32*
  %15595 = load i32, i32* %15594, align 4
  %15596 = zext i32 %15595 to i64
  store i64 %15596, i64* %RSI.i766, align 8
  %15597 = add i64 %15582, -1304
  %15598 = add i64 %15581, 24
  store i64 %15598, i64* %3, align 8
  %15599 = inttoptr i64 %15597 to i32*
  store i32 4, i32* %15599, align 4
  %15600 = load i32, i32* %ESI.i2583, align 4
  %15601 = zext i32 %15600 to i64
  %15602 = load i64, i64* %3, align 8
  store i64 %15601, i64* %RAX.i3176, align 8
  %15603 = sext i32 %15600 to i64
  %15604 = lshr i64 %15603, 32
  store i64 %15604, i64* %12675, align 8
  %15605 = load i64, i64* %RBP.i, align 8
  %15606 = add i64 %15605, -1304
  %15607 = add i64 %15602, 9
  store i64 %15607, i64* %3, align 8
  %15608 = inttoptr i64 %15606 to i32*
  %15609 = load i32, i32* %15608, align 4
  %15610 = zext i32 %15609 to i64
  store i64 %15610, i64* %RSI.i766, align 8
  %15611 = add i64 %15602, 11
  store i64 %15611, i64* %3, align 8
  %15612 = sext i32 %15609 to i64
  %15613 = shl nuw i64 %15604, 32
  %15614 = or i64 %15613, %15601
  %15615 = sdiv i64 %15614, %15612
  %15616 = shl i64 %15615, 32
  %15617 = ashr exact i64 %15616, 32
  %15618 = icmp eq i64 %15615, %15617
  br i1 %15618, label %15621, label %15619

; <label>:15619:                                  ; preds = %block_.L_458c2d
  %15620 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15611, %struct.Memory* %MEMORY.115)
  %.pre404 = load i32, i32* %EAX.i2586, align 4
  %.pre405 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit947

; <label>:15621:                                  ; preds = %block_.L_458c2d
  %15622 = srem i64 %15614, %15612
  %15623 = and i64 %15615, 4294967295
  store i64 %15623, i64* %RAX.i3176, align 8
  %15624 = and i64 %15622, 4294967295
  store i64 %15624, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %15625 = trunc i64 %15615 to i32
  br label %routine_idivl__esi.exit947

routine_idivl__esi.exit947:                       ; preds = %15621, %15619
  %15626 = phi i64 [ %.pre405, %15619 ], [ %15611, %15621 ]
  %15627 = phi i32 [ %.pre404, %15619 ], [ %15625, %15621 ]
  %15628 = phi %struct.Memory* [ %15620, %15619 ], [ %MEMORY.115, %15621 ]
  %15629 = load i32, i32* %ECX.i2572, align 4
  %15630 = sub i32 %15629, %15627
  %15631 = icmp ult i32 %15629, %15627
  %15632 = zext i1 %15631 to i8
  store i8 %15632, i8* %19, align 1
  %15633 = and i32 %15630, 255
  %15634 = tail call i32 @llvm.ctpop.i32(i32 %15633)
  %15635 = trunc i32 %15634 to i8
  %15636 = and i8 %15635, 1
  %15637 = xor i8 %15636, 1
  store i8 %15637, i8* %26, align 1
  %15638 = xor i32 %15627, %15629
  %15639 = xor i32 %15638, %15630
  %15640 = lshr i32 %15639, 4
  %15641 = trunc i32 %15640 to i8
  %15642 = and i8 %15641, 1
  store i8 %15642, i8* %31, align 1
  %15643 = icmp eq i32 %15630, 0
  %15644 = zext i1 %15643 to i8
  store i8 %15644, i8* %34, align 1
  %15645 = lshr i32 %15630, 31
  %15646 = trunc i32 %15645 to i8
  store i8 %15646, i8* %37, align 1
  %15647 = lshr i32 %15629, 31
  %15648 = lshr i32 %15627, 31
  %15649 = xor i32 %15648, %15647
  %15650 = xor i32 %15645, %15647
  %15651 = add nuw nsw i32 %15650, %15649
  %15652 = icmp eq i32 %15651, 2
  %15653 = zext i1 %15652 to i8
  store i8 %15653, i8* %43, align 1
  %15654 = icmp ne i8 %15646, 0
  %15655 = xor i1 %15654, %15652
  %.v688 = select i1 %15655, i64 8, i64 417
  %15656 = add i64 %15626, %.v688
  store i64 %15656, i64* %3, align 8
  br i1 %15655, label %block_458c58, label %block_.L_458df1

block_458c58:                                     ; preds = %routine_idivl__esi.exit947
  %15657 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %15657, i64* %RAX.i3176, align 8
  %15658 = add i64 %15657, 72400
  %15659 = add i64 %15656, 15
  store i64 %15659, i64* %3, align 8
  %15660 = inttoptr i64 %15658 to i32*
  %15661 = load i32, i32* %15660, align 4
  store i8 0, i8* %19, align 1
  %15662 = and i32 %15661, 255
  %15663 = tail call i32 @llvm.ctpop.i32(i32 %15662)
  %15664 = trunc i32 %15663 to i8
  %15665 = and i8 %15664, 1
  %15666 = xor i8 %15665, 1
  store i8 %15666, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15667 = icmp eq i32 %15661, 0
  %15668 = zext i1 %15667 to i8
  store i8 %15668, i8* %34, align 1
  %15669 = lshr i32 %15661, 31
  %15670 = trunc i32 %15669 to i8
  store i8 %15670, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v689 = select i1 %15667, i64 21, i64 75
  %15671 = add i64 %15656, %.v689
  store i64 %15671, i64* %3, align 8
  br i1 %15667, label %block_458c6d, label %block_.L_458ca3

block_458c6d:                                     ; preds = %block_458c58
  store i64 %15657, i64* %RAX.i3176, align 8
  %15672 = add i64 %15657, 28
  %15673 = add i64 %15671, 12
  store i64 %15673, i64* %3, align 8
  %15674 = inttoptr i64 %15672 to i32*
  %15675 = load i32, i32* %15674, align 4
  store i8 0, i8* %19, align 1
  %15676 = and i32 %15675, 255
  %15677 = tail call i32 @llvm.ctpop.i32(i32 %15676)
  %15678 = trunc i32 %15677 to i8
  %15679 = and i8 %15678, 1
  %15680 = xor i8 %15679, 1
  store i8 %15680, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15681 = icmp eq i32 %15675, 0
  %15682 = zext i1 %15681 to i8
  store i8 %15682, i8* %34, align 1
  %15683 = lshr i32 %15675, 31
  %15684 = trunc i32 %15683 to i8
  store i8 %15684, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v694 = select i1 %15681, i64 18, i64 54
  %15685 = add i64 %15671, %.v694
  store i64 %15685, i64* %3, align 8
  br i1 %15681, label %block_458c7f, label %block_.L_458ca3

block_458c7f:                                     ; preds = %block_458c6d
  %15686 = load i64, i64* %RBP.i, align 8
  %15687 = add i64 %15686, -32
  %15688 = add i64 %15685, 4
  store i64 %15688, i64* %3, align 8
  %15689 = inttoptr i64 %15687 to i64*
  %15690 = load i64, i64* %15689, align 8
  store i64 %15690, i64* %RAX.i3176, align 8
  %15691 = add i64 %15690, 6520
  %15692 = add i64 %15685, 11
  store i64 %15692, i64* %3, align 8
  %15693 = inttoptr i64 %15691 to i64*
  %15694 = load i64, i64* %15693, align 8
  store i64 %15694, i64* %RAX.i3176, align 8
  %15695 = add i64 %15686, -52
  %15696 = add i64 %15685, 15
  store i64 %15696, i64* %3, align 8
  %15697 = inttoptr i64 %15695 to i32*
  %15698 = load i32, i32* %15697, align 4
  %15699 = sext i32 %15698 to i64
  store i64 %15699, i64* %RCX.i2595, align 8
  %15700 = shl nsw i64 %15699, 3
  %15701 = add i64 %15700, %15694
  %15702 = add i64 %15685, 19
  store i64 %15702, i64* %3, align 8
  %15703 = inttoptr i64 %15701 to i64*
  %15704 = load i64, i64* %15703, align 8
  store i64 %15704, i64* %RAX.i3176, align 8
  %15705 = add i64 %15686, -56
  %15706 = add i64 %15685, 23
  store i64 %15706, i64* %3, align 8
  %15707 = inttoptr i64 %15705 to i32*
  %15708 = load i32, i32* %15707, align 4
  %15709 = sext i32 %15708 to i64
  store i64 %15709, i64* %RCX.i2595, align 8
  %15710 = add i64 %15704, %15709
  %15711 = add i64 %15685, 27
  store i64 %15711, i64* %3, align 8
  %15712 = inttoptr i64 %15710 to i8*
  %15713 = load i8, i8* %15712, align 1
  %15714 = zext i8 %15713 to i64
  store i64 %15714, i64* %RDX.i2592, align 8
  %15715 = zext i8 %15713 to i32
  store i8 0, i8* %19, align 1
  %15716 = tail call i32 @llvm.ctpop.i32(i32 %15715)
  %15717 = trunc i32 %15716 to i8
  %15718 = and i8 %15717, 1
  %15719 = xor i8 %15718, 1
  store i8 %15719, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15720 = icmp eq i8 %15713, 0
  %15721 = zext i1 %15720 to i8
  store i8 %15721, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v695 = select i1 %15720, i64 36, i64 93
  %15722 = add i64 %15685, %.v695
  store i64 %15722, i64* %3, align 8
  br i1 %15720, label %block_.L_458ca3, label %block_.L_458cdc

block_.L_458ca3:                                  ; preds = %block_458c7f, %block_458c6d, %block_458c58
  %15723 = phi i64 [ %15722, %block_458c7f ], [ %15685, %block_458c6d ], [ %15671, %block_458c58 ]
  store i64 %15657, i64* %RAX.i3176, align 8
  %15724 = add i64 %15723, 15
  store i64 %15724, i64* %3, align 8
  %15725 = load i32, i32* %15660, align 4
  store i8 0, i8* %19, align 1
  %15726 = and i32 %15725, 255
  %15727 = tail call i32 @llvm.ctpop.i32(i32 %15726)
  %15728 = trunc i32 %15727 to i8
  %15729 = and i8 %15728, 1
  %15730 = xor i8 %15729, 1
  store i8 %15730, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15731 = icmp eq i32 %15725, 0
  %15732 = zext i1 %15731 to i8
  store i8 %15732, i8* %34, align 1
  %15733 = lshr i32 %15725, 31
  %15734 = trunc i32 %15733 to i8
  store i8 %15734, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v690 = select i1 %15731, i64 151, i64 21
  %15735 = add i64 %15723, %.v690
  store i64 %15735, i64* %3, align 8
  br i1 %15731, label %block_.L_458d3a, label %block_458cb8

block_458cb8:                                     ; preds = %block_.L_458ca3
  %15736 = load i64, i64* %RBP.i, align 8
  %15737 = add i64 %15736, -32
  %15738 = add i64 %15735, 4
  store i64 %15738, i64* %3, align 8
  %15739 = inttoptr i64 %15737 to i64*
  %15740 = load i64, i64* %15739, align 8
  store i64 %15740, i64* %RAX.i3176, align 8
  %15741 = add i64 %15740, 6520
  %15742 = add i64 %15735, 11
  store i64 %15742, i64* %3, align 8
  %15743 = inttoptr i64 %15741 to i64*
  %15744 = load i64, i64* %15743, align 8
  store i64 %15744, i64* %RAX.i3176, align 8
  %15745 = add i64 %15736, -52
  %15746 = add i64 %15735, 15
  store i64 %15746, i64* %3, align 8
  %15747 = inttoptr i64 %15745 to i32*
  %15748 = load i32, i32* %15747, align 4
  %15749 = sext i32 %15748 to i64
  store i64 %15749, i64* %RCX.i2595, align 8
  %15750 = shl nsw i64 %15749, 3
  %15751 = add i64 %15750, %15744
  %15752 = add i64 %15735, 19
  store i64 %15752, i64* %3, align 8
  %15753 = inttoptr i64 %15751 to i64*
  %15754 = load i64, i64* %15753, align 8
  store i64 %15754, i64* %RAX.i3176, align 8
  %15755 = add i64 %15736, -56
  %15756 = add i64 %15735, 23
  store i64 %15756, i64* %3, align 8
  %15757 = inttoptr i64 %15755 to i32*
  %15758 = load i32, i32* %15757, align 4
  %15759 = sext i32 %15758 to i64
  store i64 %15759, i64* %RCX.i2595, align 8
  %15760 = add i64 %15754, %15759
  %15761 = add i64 %15735, 27
  store i64 %15761, i64* %3, align 8
  %15762 = inttoptr i64 %15760 to i8*
  %15763 = load i8, i8* %15762, align 1
  %15764 = zext i8 %15763 to i64
  store i64 %15764, i64* %RDX.i2592, align 8
  %15765 = zext i8 %15763 to i32
  store i8 0, i8* %19, align 1
  %15766 = tail call i32 @llvm.ctpop.i32(i32 %15765)
  %15767 = trunc i32 %15766 to i8
  %15768 = and i8 %15767, 1
  %15769 = xor i8 %15768, 1
  store i8 %15769, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15770 = icmp eq i8 %15763, 0
  %15771 = zext i1 %15770 to i8
  store i8 %15771, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v691 = select i1 %15770, i64 130, i64 36
  %15772 = add i64 %15735, %.v691
  store i64 %15772, i64* %3, align 8
  br i1 %15770, label %block_.L_458d3a, label %block_.L_458cdc

block_.L_458cdc:                                  ; preds = %block_458c7f, %block_458cb8
  %15773 = phi i64 [ %15772, %block_458cb8 ], [ %15722, %block_458c7f ]
  %15774 = phi i64 [ %15736, %block_458cb8 ], [ %15686, %block_458c7f ]
  %15775 = add i64 %15774, -16
  %15776 = add i64 %15773, 4
  store i64 %15776, i64* %3, align 8
  %15777 = inttoptr i64 %15775 to i64*
  %15778 = load i64, i64* %15777, align 8
  store i64 %15778, i64* %RAX.i3176, align 8
  %15779 = add i64 %15778, 1616
  %15780 = add i64 %15773, 11
  store i64 %15780, i64* %3, align 8
  %15781 = inttoptr i64 %15779 to i64*
  %15782 = load i64, i64* %15781, align 8
  store i64 %15782, i64* %RAX.i3176, align 8
  %15783 = add i64 %15773, 14
  store i64 %15783, i64* %3, align 8
  %15784 = inttoptr i64 %15782 to i64*
  %15785 = load i64, i64* %15784, align 8
  store i64 %15785, i64* %RAX.i3176, align 8
  %15786 = add i64 %15774, -52
  %15787 = add i64 %15773, 18
  store i64 %15787, i64* %3, align 8
  %15788 = inttoptr i64 %15786 to i32*
  %15789 = load i32, i32* %15788, align 4
  %15790 = sext i32 %15789 to i64
  store i64 %15790, i64* %RCX.i2595, align 8
  %15791 = shl nsw i64 %15790, 3
  %15792 = add i64 %15791, %15785
  %15793 = add i64 %15773, 22
  store i64 %15793, i64* %3, align 8
  %15794 = inttoptr i64 %15792 to i64*
  %15795 = load i64, i64* %15794, align 8
  store i64 %15795, i64* %RAX.i3176, align 8
  %15796 = add i64 %15774, -56
  %15797 = add i64 %15773, 26
  store i64 %15797, i64* %3, align 8
  %15798 = inttoptr i64 %15796 to i32*
  %15799 = load i32, i32* %15798, align 4
  %15800 = sext i32 %15799 to i64
  store i64 %15800, i64* %RCX.i2595, align 8
  %15801 = shl nsw i64 %15800, 3
  %15802 = add i64 %15801, %15795
  %15803 = add i64 %15773, 30
  store i64 %15803, i64* %3, align 8
  %15804 = inttoptr i64 %15802 to i64*
  %15805 = load i64, i64* %15804, align 8
  store i64 %15805, i64* %RAX.i3176, align 8
  %15806 = add i64 %15805, 2
  %15807 = add i64 %15773, 34
  store i64 %15807, i64* %3, align 8
  %15808 = inttoptr i64 %15806 to i16*
  %15809 = load i16, i16* %15808, align 2
  %15810 = sext i16 %15809 to i32
  %15811 = shl nsw i32 %15810, 1
  %15812 = zext i32 %15811 to i64
  store i64 %15812, i64* %RDX.i2592, align 8
  %.lobit245 = lshr i16 %15809, 15
  %15813 = trunc i16 %.lobit245 to i8
  store i8 %15813, i8* %19, align 1
  %15814 = and i32 %15811, 254
  %15815 = tail call i32 @llvm.ctpop.i32(i32 %15814)
  %15816 = trunc i32 %15815 to i8
  %15817 = and i8 %15816, 1
  %15818 = xor i8 %15817, 1
  store i8 %15818, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15819 = icmp eq i16 %15809, 0
  %15820 = zext i1 %15819 to i8
  store i8 %15820, i8* %34, align 1
  %15821 = lshr i32 %15810, 30
  %15822 = trunc i32 %15821 to i8
  %15823 = and i8 %15822, 1
  store i8 %15823, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %15824 = trunc i32 %15811 to i16
  store i16 %15824, i16* %SI.i2438, align 2
  %15825 = add i64 %15773, 43
  store i64 %15825, i64* %3, align 8
  store i16 %15824, i16* %15808, align 2
  %15826 = load i64, i64* %RBP.i, align 8
  %15827 = add i64 %15826, -16
  %15828 = load i64, i64* %3, align 8
  %15829 = add i64 %15828, 4
  store i64 %15829, i64* %3, align 8
  %15830 = inttoptr i64 %15827 to i64*
  %15831 = load i64, i64* %15830, align 8
  store i64 %15831, i64* %RAX.i3176, align 8
  %15832 = add i64 %15831, 1616
  %15833 = add i64 %15828, 11
  store i64 %15833, i64* %3, align 8
  %15834 = inttoptr i64 %15832 to i64*
  %15835 = load i64, i64* %15834, align 8
  store i64 %15835, i64* %RAX.i3176, align 8
  %15836 = add i64 %15835, 8
  %15837 = add i64 %15828, 15
  store i64 %15837, i64* %3, align 8
  %15838 = inttoptr i64 %15836 to i64*
  %15839 = load i64, i64* %15838, align 8
  store i64 %15839, i64* %RAX.i3176, align 8
  %15840 = add i64 %15826, -52
  %15841 = add i64 %15828, 19
  store i64 %15841, i64* %3, align 8
  %15842 = inttoptr i64 %15840 to i32*
  %15843 = load i32, i32* %15842, align 4
  %15844 = sext i32 %15843 to i64
  store i64 %15844, i64* %RCX.i2595, align 8
  %15845 = shl nsw i64 %15844, 3
  %15846 = add i64 %15845, %15839
  %15847 = add i64 %15828, 23
  store i64 %15847, i64* %3, align 8
  %15848 = inttoptr i64 %15846 to i64*
  %15849 = load i64, i64* %15848, align 8
  store i64 %15849, i64* %RAX.i3176, align 8
  %15850 = add i64 %15826, -56
  %15851 = add i64 %15828, 27
  store i64 %15851, i64* %3, align 8
  %15852 = inttoptr i64 %15850 to i32*
  %15853 = load i32, i32* %15852, align 4
  %15854 = sext i32 %15853 to i64
  store i64 %15854, i64* %RCX.i2595, align 8
  %15855 = shl nsw i64 %15854, 3
  %15856 = add i64 %15855, %15849
  %15857 = add i64 %15828, 31
  store i64 %15857, i64* %3, align 8
  %15858 = inttoptr i64 %15856 to i64*
  %15859 = load i64, i64* %15858, align 8
  store i64 %15859, i64* %RAX.i3176, align 8
  %15860 = add i64 %15859, 2
  %15861 = add i64 %15828, 35
  store i64 %15861, i64* %3, align 8
  %15862 = inttoptr i64 %15860 to i16*
  %15863 = load i16, i16* %15862, align 2
  %15864 = sext i16 %15863 to i32
  %15865 = shl nsw i32 %15864, 1
  %15866 = zext i32 %15865 to i64
  store i64 %15866, i64* %RDX.i2592, align 8
  %.lobit246 = lshr i16 %15863, 15
  %15867 = trunc i16 %.lobit246 to i8
  store i8 %15867, i8* %19, align 1
  %15868 = and i32 %15865, 254
  %15869 = tail call i32 @llvm.ctpop.i32(i32 %15868)
  %15870 = trunc i32 %15869 to i8
  %15871 = and i8 %15870, 1
  %15872 = xor i8 %15871, 1
  store i8 %15872, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15873 = icmp eq i16 %15863, 0
  %15874 = zext i1 %15873 to i8
  store i8 %15874, i8* %34, align 1
  %15875 = lshr i32 %15864, 30
  %15876 = trunc i32 %15875 to i8
  %15877 = and i8 %15876, 1
  store i8 %15877, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %15878 = trunc i32 %15865 to i16
  store i16 %15878, i16* %SI.i2438, align 2
  %15879 = add i64 %15828, 44
  store i64 %15879, i64* %3, align 8
  store i16 %15878, i16* %15862, align 2
  %15880 = load i64, i64* %3, align 8
  %15881 = add i64 %15880, 169
  br label %block_.L_458dde

block_.L_458d3a:                                  ; preds = %block_458cb8, %block_.L_458ca3
  %15882 = phi i64 [ %15772, %block_458cb8 ], [ %15735, %block_.L_458ca3 ]
  store i64 %15657, i64* %RAX.i3176, align 8
  %15883 = add i64 %15657, 28
  %15884 = add i64 %15882, 12
  store i64 %15884, i64* %3, align 8
  %15885 = inttoptr i64 %15883 to i32*
  %15886 = load i32, i32* %15885, align 4
  store i8 0, i8* %19, align 1
  %15887 = and i32 %15886, 255
  %15888 = tail call i32 @llvm.ctpop.i32(i32 %15887)
  %15889 = trunc i32 %15888 to i8
  %15890 = and i8 %15889, 1
  %15891 = xor i8 %15890, 1
  store i8 %15891, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15892 = icmp eq i32 %15886, 0
  %15893 = zext i1 %15892 to i8
  store i8 %15893, i8* %34, align 1
  %15894 = lshr i32 %15886, 31
  %15895 = trunc i32 %15894 to i8
  store i8 %15895, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v692 = select i1 %15892, i64 159, i64 18
  %15896 = add i64 %15882, %.v692
  store i64 %15896, i64* %3, align 8
  br i1 %15892, label %block_.L_458dd9, label %block_458d4c

block_458d4c:                                     ; preds = %block_.L_458d3a
  %15897 = load i64, i64* %RBP.i, align 8
  %15898 = add i64 %15897, -32
  %15899 = add i64 %15896, 4
  store i64 %15899, i64* %3, align 8
  %15900 = inttoptr i64 %15898 to i64*
  %15901 = load i64, i64* %15900, align 8
  store i64 %15901, i64* %RAX.i3176, align 8
  %15902 = add i64 %15901, 6520
  %15903 = add i64 %15896, 11
  store i64 %15903, i64* %3, align 8
  %15904 = inttoptr i64 %15902 to i64*
  %15905 = load i64, i64* %15904, align 8
  store i64 %15905, i64* %RAX.i3176, align 8
  %15906 = add i64 %15897, -52
  %15907 = add i64 %15896, 15
  store i64 %15907, i64* %3, align 8
  %15908 = inttoptr i64 %15906 to i32*
  %15909 = load i32, i32* %15908, align 4
  %15910 = sext i32 %15909 to i64
  store i64 %15910, i64* %RCX.i2595, align 8
  %15911 = shl nsw i64 %15910, 3
  %15912 = add i64 %15911, %15905
  %15913 = add i64 %15896, 19
  store i64 %15913, i64* %3, align 8
  %15914 = inttoptr i64 %15912 to i64*
  %15915 = load i64, i64* %15914, align 8
  store i64 %15915, i64* %RAX.i3176, align 8
  %15916 = add i64 %15897, -56
  %15917 = add i64 %15896, 23
  store i64 %15917, i64* %3, align 8
  %15918 = inttoptr i64 %15916 to i32*
  %15919 = load i32, i32* %15918, align 4
  %15920 = sext i32 %15919 to i64
  store i64 %15920, i64* %RCX.i2595, align 8
  %15921 = add i64 %15915, %15920
  %15922 = add i64 %15896, 27
  store i64 %15922, i64* %3, align 8
  %15923 = inttoptr i64 %15921 to i8*
  %15924 = load i8, i8* %15923, align 1
  store i8 0, i8* %19, align 1
  %15925 = zext i8 %15924 to i32
  %15926 = tail call i32 @llvm.ctpop.i32(i32 %15925)
  %15927 = trunc i32 %15926 to i8
  %15928 = and i8 %15927, 1
  %15929 = xor i8 %15928, 1
  store i8 %15929, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %15930 = icmp eq i8 %15924, 0
  %15931 = zext i1 %15930 to i8
  store i8 %15931, i8* %34, align 1
  %15932 = lshr i8 %15924, 7
  store i8 %15932, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v693 = select i1 %15930, i64 33, i64 141
  %15933 = add i64 %15896, %.v693
  store i64 %15933, i64* %3, align 8
  br i1 %15930, label %block_458d6d, label %block_.L_458dd9

block_458d6d:                                     ; preds = %block_458d4c
  store i64 2, i64* %RAX.i3176, align 8
  %15934 = add i64 %15897, -16
  %15935 = add i64 %15933, 9
  store i64 %15935, i64* %3, align 8
  %15936 = inttoptr i64 %15934 to i64*
  %15937 = load i64, i64* %15936, align 8
  store i64 %15937, i64* %RCX.i2595, align 8
  %15938 = add i64 %15937, 1616
  %15939 = add i64 %15933, 16
  store i64 %15939, i64* %3, align 8
  %15940 = inttoptr i64 %15938 to i64*
  %15941 = load i64, i64* %15940, align 8
  store i64 %15941, i64* %RCX.i2595, align 8
  %15942 = add i64 %15933, 19
  store i64 %15942, i64* %3, align 8
  %15943 = inttoptr i64 %15941 to i64*
  %15944 = load i64, i64* %15943, align 8
  store i64 %15944, i64* %RCX.i2595, align 8
  %15945 = add i64 %15933, 23
  store i64 %15945, i64* %3, align 8
  %15946 = load i32, i32* %15908, align 4
  %15947 = sext i32 %15946 to i64
  store i64 %15947, i64* %RDX.i2592, align 8
  %15948 = shl nsw i64 %15947, 3
  %15949 = add i64 %15948, %15944
  %15950 = add i64 %15933, 27
  store i64 %15950, i64* %3, align 8
  %15951 = inttoptr i64 %15949 to i64*
  %15952 = load i64, i64* %15951, align 8
  store i64 %15952, i64* %RCX.i2595, align 8
  %15953 = add i64 %15933, 31
  store i64 %15953, i64* %3, align 8
  %15954 = load i32, i32* %15918, align 4
  %15955 = sext i32 %15954 to i64
  store i64 %15955, i64* %RDX.i2592, align 8
  %15956 = shl nsw i64 %15955, 3
  %15957 = add i64 %15956, %15952
  %15958 = add i64 %15933, 35
  store i64 %15958, i64* %3, align 8
  %15959 = inttoptr i64 %15957 to i64*
  %15960 = load i64, i64* %15959, align 8
  store i64 %15960, i64* %RCX.i2595, align 8
  %15961 = add i64 %15960, 2
  %15962 = add i64 %15933, 39
  store i64 %15962, i64* %3, align 8
  %15963 = inttoptr i64 %15961 to i16*
  %15964 = load i16, i16* %15963, align 2
  %15965 = sext i16 %15964 to i64
  %15966 = and i64 %15965, 4294967295
  store i64 %15966, i64* %RSI.i766, align 8
  %15967 = add i64 %15897, -1308
  %15968 = add i64 %15933, 45
  store i64 %15968, i64* %3, align 8
  %15969 = inttoptr i64 %15967 to i32*
  store i32 2, i32* %15969, align 4
  %15970 = load i32, i32* %ESI.i2583, align 4
  %15971 = zext i32 %15970 to i64
  %15972 = load i64, i64* %3, align 8
  store i64 %15971, i64* %RAX.i3176, align 8
  %15973 = sext i32 %15970 to i64
  %15974 = lshr i64 %15973, 32
  store i64 %15974, i64* %12675, align 8
  %15975 = load i64, i64* %RBP.i, align 8
  %15976 = add i64 %15975, -1308
  %15977 = add i64 %15972, 9
  store i64 %15977, i64* %3, align 8
  %15978 = inttoptr i64 %15976 to i32*
  %15979 = load i32, i32* %15978, align 4
  %15980 = zext i32 %15979 to i64
  store i64 %15980, i64* %RSI.i766, align 8
  %15981 = add i64 %15972, 11
  store i64 %15981, i64* %3, align 8
  %15982 = sext i32 %15979 to i64
  %15983 = shl nuw i64 %15974, 32
  %15984 = or i64 %15983, %15971
  %15985 = sdiv i64 %15984, %15982
  %15986 = shl i64 %15985, 32
  %15987 = ashr exact i64 %15986, 32
  %15988 = icmp eq i64 %15985, %15987
  br i1 %15988, label %15991, label %15989

; <label>:15989:                                  ; preds = %block_458d6d
  %15990 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %15981, %struct.Memory* %15628)
  %.pre406 = load i16, i16* %AX.i760, align 2
  %.pre407 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit764

; <label>:15991:                                  ; preds = %block_458d6d
  %15992 = srem i64 %15984, %15982
  %15993 = and i64 %15985, 4294967295
  store i64 %15993, i64* %RAX.i3176, align 8
  %15994 = and i64 %15992, 4294967295
  store i64 %15994, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %15995 = trunc i64 %15985 to i16
  br label %routine_idivl__esi.exit764

routine_idivl__esi.exit764:                       ; preds = %15991, %15989
  %15996 = phi i64 [ %.pre407, %15989 ], [ %15981, %15991 ]
  %15997 = phi i16 [ %.pre406, %15989 ], [ %15995, %15991 ]
  %15998 = phi %struct.Memory* [ %15990, %15989 ], [ %15628, %15991 ]
  store i16 %15997, i16* %DI.i761, align 2
  %15999 = load i64, i64* %RCX.i2595, align 8
  %16000 = add i64 %15999, 2
  %16001 = add i64 %15996, 7
  store i64 %16001, i64* %3, align 8
  %16002 = inttoptr i64 %16000 to i16*
  store i16 %15997, i16* %16002, align 2
  %16003 = load i64, i64* %RBP.i, align 8
  %16004 = add i64 %16003, -16
  %16005 = load i64, i64* %3, align 8
  %16006 = add i64 %16005, 4
  store i64 %16006, i64* %3, align 8
  %16007 = inttoptr i64 %16004 to i64*
  %16008 = load i64, i64* %16007, align 8
  store i64 %16008, i64* %RCX.i2595, align 8
  %16009 = add i64 %16008, 1616
  %16010 = add i64 %16005, 11
  store i64 %16010, i64* %3, align 8
  %16011 = inttoptr i64 %16009 to i64*
  %16012 = load i64, i64* %16011, align 8
  store i64 %16012, i64* %RCX.i2595, align 8
  %16013 = add i64 %16012, 8
  %16014 = add i64 %16005, 15
  store i64 %16014, i64* %3, align 8
  %16015 = inttoptr i64 %16013 to i64*
  %16016 = load i64, i64* %16015, align 8
  store i64 %16016, i64* %RCX.i2595, align 8
  %16017 = add i64 %16003, -52
  %16018 = add i64 %16005, 19
  store i64 %16018, i64* %3, align 8
  %16019 = inttoptr i64 %16017 to i32*
  %16020 = load i32, i32* %16019, align 4
  %16021 = sext i32 %16020 to i64
  store i64 %16021, i64* %R8.i748, align 8
  %16022 = shl nsw i64 %16021, 3
  %16023 = add i64 %16022, %16016
  %16024 = add i64 %16005, 23
  store i64 %16024, i64* %3, align 8
  %16025 = inttoptr i64 %16023 to i64*
  %16026 = load i64, i64* %16025, align 8
  store i64 %16026, i64* %RCX.i2595, align 8
  %16027 = add i64 %16003, -56
  %16028 = add i64 %16005, 27
  store i64 %16028, i64* %3, align 8
  %16029 = inttoptr i64 %16027 to i32*
  %16030 = load i32, i32* %16029, align 4
  %16031 = sext i32 %16030 to i64
  store i64 %16031, i64* %R8.i748, align 8
  %16032 = shl nsw i64 %16031, 3
  %16033 = add i64 %16032, %16026
  %16034 = add i64 %16005, 31
  store i64 %16034, i64* %3, align 8
  %16035 = inttoptr i64 %16033 to i64*
  %16036 = load i64, i64* %16035, align 8
  store i64 %16036, i64* %RCX.i2595, align 8
  %16037 = add i64 %16036, 2
  %16038 = add i64 %16005, 35
  store i64 %16038, i64* %3, align 8
  %16039 = inttoptr i64 %16037 to i16*
  %16040 = load i16, i16* %16039, align 2
  %16041 = sext i16 %16040 to i64
  %16042 = and i64 %16041, 4294967295
  store i64 %16042, i64* %RAX.i3176, align 8
  %16043 = sext i16 %16040 to i64
  %16044 = sext i16 %16040 to i64
  %16045 = lshr i64 %16044, 32
  store i64 %16045, i64* %12675, align 8
  %16046 = load i32, i32* %ESI.i2583, align 4
  %16047 = add i64 %16005, 38
  store i64 %16047, i64* %3, align 8
  %16048 = and i64 %16043, 4294967295
  %16049 = sext i32 %16046 to i64
  %16050 = shl nuw i64 %16045, 32
  %16051 = or i64 %16050, %16048
  %16052 = sdiv i64 %16051, %16049
  %16053 = shl i64 %16052, 32
  %16054 = ashr exact i64 %16053, 32
  %16055 = icmp eq i64 %16052, %16054
  br i1 %16055, label %16058, label %16056

; <label>:16056:                                  ; preds = %routine_idivl__esi.exit764
  %16057 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %16047, %struct.Memory* %15998)
  %.pre408 = load i16, i16* %AX.i760, align 2
  %.pre409 = load i64, i64* %3, align 8
  %.pre410 = load i64, i64* %RCX.i2595, align 8
  br label %routine_idivl__esi.exit

; <label>:16058:                                  ; preds = %routine_idivl__esi.exit764
  %16059 = srem i64 %16051, %16049
  %16060 = and i64 %16052, 4294967295
  store i64 %16060, i64* %RAX.i3176, align 8
  %16061 = and i64 %16059, 4294967295
  store i64 %16061, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16062 = trunc i64 %16052 to i16
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %16058, %16056
  %16063 = phi i64 [ %.pre410, %16056 ], [ %16036, %16058 ]
  %16064 = phi i64 [ %.pre409, %16056 ], [ %16047, %16058 ]
  %16065 = phi i16 [ %.pre408, %16056 ], [ %16062, %16058 ]
  %16066 = phi %struct.Memory* [ %16057, %16056 ], [ %15998, %16058 ]
  store i16 %16065, i16* %DI.i761, align 2
  %16067 = add i64 %16063, 2
  %16068 = add i64 %16064, 7
  store i64 %16068, i64* %3, align 8
  %16069 = inttoptr i64 %16067 to i16*
  store i16 %16065, i16* %16069, align 2
  %.pre411 = load i64, i64* %3, align 8
  br label %block_.L_458dd9

block_.L_458dd9:                                  ; preds = %block_458d4c, %routine_idivl__esi.exit, %block_.L_458d3a
  %16070 = phi i64 [ %15896, %block_.L_458d3a ], [ %15933, %block_458d4c ], [ %.pre411, %routine_idivl__esi.exit ]
  %MEMORY.119 = phi %struct.Memory* [ %15628, %block_.L_458d3a ], [ %15628, %block_458d4c ], [ %16066, %routine_idivl__esi.exit ]
  %16071 = add i64 %16070, 5
  store i64 %16071, i64* %3, align 8
  br label %block_.L_458dde

block_.L_458dde:                                  ; preds = %block_.L_458dd9, %block_.L_458cdc
  %storemerge247 = phi i64 [ %15881, %block_.L_458cdc ], [ %16071, %block_.L_458dd9 ]
  %MEMORY.120 = phi %struct.Memory* [ %15628, %block_.L_458cdc ], [ %MEMORY.119, %block_.L_458dd9 ]
  %16072 = load i64, i64* %RBP.i, align 8
  %16073 = add i64 %16072, -52
  %16074 = add i64 %storemerge247, 8
  store i64 %16074, i64* %3, align 8
  %16075 = inttoptr i64 %16073 to i32*
  %16076 = load i32, i32* %16075, align 4
  %16077 = add i32 %16076, 1
  %16078 = zext i32 %16077 to i64
  store i64 %16078, i64* %RAX.i3176, align 8
  %16079 = icmp eq i32 %16076, -1
  %16080 = icmp eq i32 %16077, 0
  %16081 = or i1 %16079, %16080
  %16082 = zext i1 %16081 to i8
  store i8 %16082, i8* %19, align 1
  %16083 = and i32 %16077, 255
  %16084 = tail call i32 @llvm.ctpop.i32(i32 %16083)
  %16085 = trunc i32 %16084 to i8
  %16086 = and i8 %16085, 1
  %16087 = xor i8 %16086, 1
  store i8 %16087, i8* %26, align 1
  %16088 = xor i32 %16077, %16076
  %16089 = lshr i32 %16088, 4
  %16090 = trunc i32 %16089 to i8
  %16091 = and i8 %16090, 1
  store i8 %16091, i8* %31, align 1
  %16092 = zext i1 %16080 to i8
  store i8 %16092, i8* %34, align 1
  %16093 = lshr i32 %16077, 31
  %16094 = trunc i32 %16093 to i8
  store i8 %16094, i8* %37, align 1
  %16095 = lshr i32 %16076, 31
  %16096 = xor i32 %16093, %16095
  %16097 = add nuw nsw i32 %16096, %16093
  %16098 = icmp eq i32 %16097, 2
  %16099 = zext i1 %16098 to i8
  store i8 %16099, i8* %43, align 1
  %16100 = add i64 %storemerge247, 14
  store i64 %16100, i64* %3, align 8
  store i32 %16077, i32* %16075, align 4
  %16101 = load i64, i64* %3, align 8
  %16102 = add i64 %16101, -447
  store i64 %16102, i64* %3, align 8
  br label %block_.L_458c2d

block_.L_458df1:                                  ; preds = %routine_idivl__esi.exit947
  %16103 = load i64, i64* %RBP.i, align 8
  %16104 = add i64 %16103, -56
  %16105 = add i64 %15656, 8
  store i64 %16105, i64* %3, align 8
  %16106 = inttoptr i64 %16104 to i32*
  %16107 = load i32, i32* %16106, align 4
  %16108 = add i32 %16107, 1
  %16109 = zext i32 %16108 to i64
  store i64 %16109, i64* %RAX.i3176, align 8
  %16110 = icmp eq i32 %16107, -1
  %16111 = icmp eq i32 %16108, 0
  %16112 = or i1 %16110, %16111
  %16113 = zext i1 %16112 to i8
  store i8 %16113, i8* %19, align 1
  %16114 = and i32 %16108, 255
  %16115 = tail call i32 @llvm.ctpop.i32(i32 %16114)
  %16116 = trunc i32 %16115 to i8
  %16117 = and i8 %16116, 1
  %16118 = xor i8 %16117, 1
  store i8 %16118, i8* %26, align 1
  %16119 = xor i32 %16108, %16107
  %16120 = lshr i32 %16119, 4
  %16121 = trunc i32 %16120 to i8
  %16122 = and i8 %16121, 1
  store i8 %16122, i8* %31, align 1
  %16123 = zext i1 %16111 to i8
  store i8 %16123, i8* %34, align 1
  %16124 = lshr i32 %16108, 31
  %16125 = trunc i32 %16124 to i8
  store i8 %16125, i8* %37, align 1
  %16126 = lshr i32 %16107, 31
  %16127 = xor i32 %16124, %16126
  %16128 = add nuw nsw i32 %16127, %16124
  %16129 = icmp eq i32 %16128, 2
  %16130 = zext i1 %16129 to i8
  store i8 %16130, i8* %43, align 1
  %16131 = add i64 %15656, 14
  store i64 %16131, i64* %3, align 8
  store i32 %16108, i32* %16106, align 4
  %16132 = load i64, i64* %3, align 8
  %16133 = add i64 %16132, -516
  store i64 %16133, i64* %3, align 8
  br label %block_.L_458bfb

block_.L_458e04:                                  ; preds = %routine_idivl__esi.exit980
  %16134 = add i64 %15546, -56
  %16135 = add i64 %15577, 7
  store i64 %16135, i64* %3, align 8
  %16136 = inttoptr i64 %16134 to i32*
  store i32 0, i32* %16136, align 4
  %.pre384 = load i64, i64* %3, align 8
  br label %block_.L_458e0b

block_.L_458e0b:                                  ; preds = %block_.L_45929c, %block_.L_458e04
  %16137 = phi i64 [ %.pre384, %block_.L_458e04 ], [ %17818, %block_.L_45929c ]
  %MEMORY.121 = phi %struct.Memory* [ %15549, %block_.L_458e04 ], [ %MEMORY.122, %block_.L_45929c ]
  %16138 = load i64, i64* %RBP.i, align 8
  %16139 = add i64 %16138, -56
  %16140 = add i64 %16137, 3
  store i64 %16140, i64* %3, align 8
  %16141 = inttoptr i64 %16139 to i32*
  %16142 = load i32, i32* %16141, align 4
  %16143 = zext i32 %16142 to i64
  store i64 %16143, i64* %RAX.i3176, align 8
  %16144 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %16144, i64* %RCX.i2595, align 8
  %16145 = add i64 %16144, 72400
  %16146 = add i64 %16137, 17
  store i64 %16146, i64* %3, align 8
  %16147 = inttoptr i64 %16145 to i32*
  %16148 = load i32, i32* %16147, align 4
  %16149 = shl i32 %16148, 2
  %16150 = or i32 %16149, 2
  %16151 = zext i32 %16150 to i64
  store i64 %16151, i64* %RDX.i2592, align 8
  %16152 = lshr i32 %16148, 29
  %16153 = and i32 %16152, 1
  %16154 = sub i32 %16142, %16150
  %16155 = icmp ult i32 %16142, %16150
  %16156 = zext i1 %16155 to i8
  store i8 %16156, i8* %19, align 1
  %16157 = and i32 %16154, 255
  %16158 = tail call i32 @llvm.ctpop.i32(i32 %16157)
  %16159 = trunc i32 %16158 to i8
  %16160 = and i8 %16159, 1
  %16161 = xor i8 %16160, 1
  store i8 %16161, i8* %26, align 1
  %16162 = xor i32 %16149, %16142
  %16163 = xor i32 %16162, %16154
  %16164 = lshr i32 %16163, 4
  %16165 = trunc i32 %16164 to i8
  %16166 = and i8 %16165, 1
  store i8 %16166, i8* %31, align 1
  %16167 = icmp eq i32 %16154, 0
  %16168 = zext i1 %16167 to i8
  store i8 %16168, i8* %34, align 1
  %16169 = lshr i32 %16154, 31
  %16170 = trunc i32 %16169 to i8
  store i8 %16170, i8* %37, align 1
  %16171 = lshr i32 %16142, 31
  %16172 = xor i32 %16153, %16171
  %16173 = xor i32 %16169, %16171
  %16174 = add nuw nsw i32 %16173, %16172
  %16175 = icmp eq i32 %16174, 2
  %16176 = zext i1 %16175 to i8
  store i8 %16176, i8* %43, align 1
  %16177 = icmp ne i8 %16170, 0
  %16178 = xor i1 %16177, %16175
  %.v674 = select i1 %16178, i64 31, i64 1188
  %16179 = add i64 %16137, %.v674
  store i64 %16179, i64* %3, align 8
  br i1 %16178, label %block_458e2a, label %block_.L_4592af

block_458e2a:                                     ; preds = %block_.L_458e0b
  %16180 = load i64, i64* %RBP.i, align 8
  %16181 = add i64 %16180, -52
  %16182 = add i64 %16179, 7
  store i64 %16182, i64* %3, align 8
  %16183 = inttoptr i64 %16181 to i32*
  store i32 0, i32* %16183, align 4
  %.pre385 = load i64, i64* %3, align 8
  br label %block_.L_458e31

block_.L_458e31:                                  ; preds = %block_.L_459289, %block_458e2a
  %16184 = phi i64 [ %.pre385, %block_458e2a ], [ %17791, %block_.L_459289 ]
  %MEMORY.122 = phi %struct.Memory* [ %MEMORY.121, %block_458e2a ], [ %MEMORY.135, %block_.L_459289 ]
  %16185 = load i64, i64* %RBP.i, align 8
  %16186 = add i64 %16185, -52
  %16187 = add i64 %16184, 3
  store i64 %16187, i64* %3, align 8
  %16188 = inttoptr i64 %16186 to i32*
  %16189 = load i32, i32* %16188, align 4
  %16190 = zext i32 %16189 to i64
  store i64 %16190, i64* %RAX.i3176, align 8
  %16191 = add i64 %16185, -56
  %16192 = add i64 %16184, 7
  store i64 %16192, i64* %3, align 8
  %16193 = inttoptr i64 %16191 to i32*
  %16194 = load i32, i32* %16193, align 4
  %16195 = sext i32 %16194 to i64
  store i64 %16195, i64* %RCX.i2595, align 8
  %16196 = shl nsw i64 %16195, 2
  %16197 = add nsw i64 %16196, 7489456
  %16198 = add i64 %16184, 14
  store i64 %16198, i64* %3, align 8
  %16199 = inttoptr i64 %16197 to i32*
  %16200 = load i32, i32* %16199, align 4
  %16201 = sub i32 %16189, %16200
  %16202 = icmp ult i32 %16189, %16200
  %16203 = zext i1 %16202 to i8
  store i8 %16203, i8* %19, align 1
  %16204 = and i32 %16201, 255
  %16205 = tail call i32 @llvm.ctpop.i32(i32 %16204)
  %16206 = trunc i32 %16205 to i8
  %16207 = and i8 %16206, 1
  %16208 = xor i8 %16207, 1
  store i8 %16208, i8* %26, align 1
  %16209 = xor i32 %16200, %16189
  %16210 = xor i32 %16209, %16201
  %16211 = lshr i32 %16210, 4
  %16212 = trunc i32 %16211 to i8
  %16213 = and i8 %16212, 1
  store i8 %16213, i8* %31, align 1
  %16214 = icmp eq i32 %16201, 0
  %16215 = zext i1 %16214 to i8
  store i8 %16215, i8* %34, align 1
  %16216 = lshr i32 %16201, 31
  %16217 = trunc i32 %16216 to i8
  store i8 %16217, i8* %37, align 1
  %16218 = lshr i32 %16189, 31
  %16219 = lshr i32 %16200, 31
  %16220 = xor i32 %16219, %16218
  %16221 = xor i32 %16216, %16218
  %16222 = add nuw nsw i32 %16221, %16220
  %16223 = icmp eq i32 %16222, 2
  %16224 = zext i1 %16223 to i8
  store i8 %16224, i8* %43, align 1
  %16225 = icmp ne i8 %16217, 0
  %16226 = xor i1 %16225, %16223
  %.v = select i1 %16226, i64 20, i64 1131
  %16227 = add i64 %16184, %.v
  store i64 %16227, i64* %3, align 8
  br i1 %16226, label %block_458e45, label %block_.L_45929c

block_458e45:                                     ; preds = %block_.L_458e31
  %16228 = add i64 %16227, 4
  store i64 %16228, i64* %3, align 8
  %16229 = load i32, i32* %16193, align 4
  store i8 0, i8* %19, align 1
  %16230 = and i32 %16229, 255
  %16231 = tail call i32 @llvm.ctpop.i32(i32 %16230)
  %16232 = trunc i32 %16231 to i8
  %16233 = and i8 %16232, 1
  %16234 = xor i8 %16233, 1
  store i8 %16234, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16235 = icmp eq i32 %16229, 0
  %16236 = zext i1 %16235 to i8
  store i8 %16236, i8* %34, align 1
  %16237 = lshr i32 %16229, 31
  %16238 = trunc i32 %16237 to i8
  store i8 %16238, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v675 = select i1 %16235, i64 10, i64 209
  %16239 = add i64 %16227, %.v675
  store i64 %16239, i64* %3, align 8
  br i1 %16235, label %block_458e4f, label %block_.L_458f16

block_458e4f:                                     ; preds = %block_458e45
  %16240 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16240, i64* %RAX.i3176, align 8
  %16241 = add i64 %16240, 4
  %16242 = add i64 %16239, 11
  store i64 %16242, i64* %3, align 8
  %16243 = inttoptr i64 %16241 to i32*
  %16244 = load i32, i32* %16243, align 4
  %16245 = zext i32 %16244 to i64
  store i64 %16245, i64* %RCX.i2595, align 8
  %16246 = add i64 %16185, -24
  %16247 = add i64 %16239, 15
  store i64 %16247, i64* %3, align 8
  %16248 = inttoptr i64 %16246 to i64*
  %16249 = load i64, i64* %16248, align 8
  store i64 %16249, i64* %RAX.i3176, align 8
  %16250 = add i64 %16239, 18
  store i64 %16250, i64* %3, align 8
  %16251 = load i32, i32* %16193, align 4
  %16252 = zext i32 %16251 to i64
  store i64 %16252, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16253 = and i32 %16251, 255
  %16254 = tail call i32 @llvm.ctpop.i32(i32 %16253)
  %16255 = trunc i32 %16254 to i8
  %16256 = and i8 %16255, 1
  %16257 = xor i8 %16256, 1
  store i8 %16257, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16258 = icmp eq i32 %16251, 0
  %16259 = zext i1 %16258 to i8
  store i8 %16259, i8* %34, align 1
  %16260 = lshr i32 %16251, 31
  %16261 = trunc i32 %16260 to i8
  store i8 %16261, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16262 = sext i32 %16251 to i64
  store i64 %16262, i64* %RSI.i766, align 8
  %16263 = shl nsw i64 %16262, 3
  %16264 = add i64 %16249, %16263
  %16265 = add i64 %16239, 28
  store i64 %16265, i64* %3, align 8
  %16266 = inttoptr i64 %16264 to i64*
  %16267 = load i64, i64* %16266, align 8
  store i64 %16267, i64* %RAX.i3176, align 8
  %16268 = add i64 %16239, 32
  store i64 %16268, i64* %3, align 8
  %16269 = load i32, i32* %16188, align 4
  %16270 = sext i32 %16269 to i64
  store i64 %16270, i64* %RSI.i766, align 8
  %16271 = shl nsw i64 %16270, 3
  %16272 = add i64 %16271, %16267
  %16273 = add i64 %16239, 36
  store i64 %16273, i64* %3, align 8
  %16274 = inttoptr i64 %16272 to i64*
  %16275 = load i64, i64* %16274, align 8
  store i64 %16275, i64* %RAX.i3176, align 8
  %16276 = add i64 %16275, 4
  %16277 = add i64 %16239, 39
  store i64 %16277, i64* %3, align 8
  %16278 = inttoptr i64 %16276 to i32*
  %16279 = load i32, i32* %16278, align 4
  %16280 = sub i32 %16244, %16279
  %16281 = zext i32 %16280 to i64
  store i64 %16281, i64* %RCX.i2595, align 8
  %16282 = lshr i32 %16280, 31
  %16283 = add i32 %16280, 128
  %16284 = icmp ult i32 %16280, -128
  %16285 = zext i1 %16284 to i8
  store i8 %16285, i8* %19, align 1
  %16286 = and i32 %16283, 255
  %16287 = tail call i32 @llvm.ctpop.i32(i32 %16286)
  %16288 = trunc i32 %16287 to i8
  %16289 = and i8 %16288, 1
  %16290 = xor i8 %16289, 1
  store i8 %16290, i8* %26, align 1
  %16291 = xor i32 %16283, %16280
  %16292 = lshr i32 %16291, 4
  %16293 = trunc i32 %16292 to i8
  %16294 = and i8 %16293, 1
  store i8 %16294, i8* %31, align 1
  %16295 = icmp eq i32 %16283, 0
  %16296 = zext i1 %16295 to i8
  store i8 %16296, i8* %34, align 1
  %16297 = lshr i32 %16283, 31
  %16298 = trunc i32 %16297 to i8
  store i8 %16298, i8* %37, align 1
  %16299 = xor i32 %16282, 1
  %16300 = xor i32 %16297, %16282
  %16301 = add nuw nsw i32 %16300, %16299
  %16302 = icmp eq i32 %16301, 2
  %16303 = zext i1 %16302 to i8
  store i8 %16303, i8* %43, align 1
  %16304 = icmp ne i8 %16298, 0
  %16305 = xor i1 %16304, %16302
  %.v686 = select i1 %16305, i64 48, i64 64
  %16306 = add i64 %16239, %.v686
  store i64 %16306, i64* %3, align 8
  br i1 %16305, label %block_458e7f, label %block_.L_458e8f

block_458e7f:                                     ; preds = %block_458e4f
  store i64 4294967168, i64* %RAX.i3176, align 8
  %16307 = load i64, i64* %RBP.i, align 8
  %16308 = add i64 %16307, -1312
  %16309 = add i64 %16306, 11
  store i64 %16309, i64* %3, align 8
  %16310 = inttoptr i64 %16308 to i32*
  store i32 -128, i32* %16310, align 4
  %16311 = load i64, i64* %3, align 8
  %16312 = add i64 %16311, 126
  store i64 %16312, i64* %3, align 8
  br label %block_.L_458f08

block_.L_458e8f:                                  ; preds = %block_458e4f
  %16313 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16313, i64* %RAX.i3176, align 8
  %16314 = add i64 %16313, 4
  %16315 = add i64 %16306, 11
  store i64 %16315, i64* %3, align 8
  %16316 = inttoptr i64 %16314 to i32*
  %16317 = load i32, i32* %16316, align 4
  %16318 = zext i32 %16317 to i64
  store i64 %16318, i64* %RCX.i2595, align 8
  %16319 = load i64, i64* %RBP.i, align 8
  %16320 = add i64 %16319, -24
  %16321 = add i64 %16306, 15
  store i64 %16321, i64* %3, align 8
  %16322 = inttoptr i64 %16320 to i64*
  %16323 = load i64, i64* %16322, align 8
  store i64 %16323, i64* %RAX.i3176, align 8
  %16324 = add i64 %16319, -56
  %16325 = add i64 %16306, 18
  store i64 %16325, i64* %3, align 8
  %16326 = inttoptr i64 %16324 to i32*
  %16327 = load i32, i32* %16326, align 4
  %16328 = zext i32 %16327 to i64
  store i64 %16328, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16329 = and i32 %16327, 255
  %16330 = tail call i32 @llvm.ctpop.i32(i32 %16329)
  %16331 = trunc i32 %16330 to i8
  %16332 = and i8 %16331, 1
  %16333 = xor i8 %16332, 1
  store i8 %16333, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16334 = icmp eq i32 %16327, 0
  %16335 = zext i1 %16334 to i8
  store i8 %16335, i8* %34, align 1
  %16336 = lshr i32 %16327, 31
  %16337 = trunc i32 %16336 to i8
  store i8 %16337, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16338 = sext i32 %16327 to i64
  store i64 %16338, i64* %RSI.i766, align 8
  %16339 = shl nsw i64 %16338, 3
  %16340 = add i64 %16323, %16339
  %16341 = add i64 %16306, 28
  store i64 %16341, i64* %3, align 8
  %16342 = inttoptr i64 %16340 to i64*
  %16343 = load i64, i64* %16342, align 8
  store i64 %16343, i64* %RAX.i3176, align 8
  %16344 = add i64 %16319, -52
  %16345 = add i64 %16306, 32
  store i64 %16345, i64* %3, align 8
  %16346 = inttoptr i64 %16344 to i32*
  %16347 = load i32, i32* %16346, align 4
  %16348 = sext i32 %16347 to i64
  store i64 %16348, i64* %RSI.i766, align 8
  %16349 = shl nsw i64 %16348, 3
  %16350 = add i64 %16349, %16343
  %16351 = add i64 %16306, 36
  store i64 %16351, i64* %3, align 8
  %16352 = inttoptr i64 %16350 to i64*
  %16353 = load i64, i64* %16352, align 8
  store i64 %16353, i64* %RAX.i3176, align 8
  %16354 = add i64 %16353, 4
  %16355 = add i64 %16306, 39
  store i64 %16355, i64* %3, align 8
  %16356 = inttoptr i64 %16354 to i32*
  %16357 = load i32, i32* %16356, align 4
  %16358 = sub i32 %16317, %16357
  %16359 = zext i32 %16358 to i64
  store i64 %16359, i64* %RCX.i2595, align 8
  %16360 = lshr i32 %16358, 31
  %16361 = add i32 %16358, -127
  %16362 = icmp ult i32 %16358, 127
  %16363 = zext i1 %16362 to i8
  store i8 %16363, i8* %19, align 1
  %16364 = and i32 %16361, 255
  %16365 = tail call i32 @llvm.ctpop.i32(i32 %16364)
  %16366 = trunc i32 %16365 to i8
  %16367 = and i8 %16366, 1
  %16368 = xor i8 %16367, 1
  store i8 %16368, i8* %26, align 1
  %16369 = xor i32 %16358, 16
  %16370 = xor i32 %16369, %16361
  %16371 = lshr i32 %16370, 4
  %16372 = trunc i32 %16371 to i8
  %16373 = and i8 %16372, 1
  store i8 %16373, i8* %31, align 1
  %16374 = icmp eq i32 %16361, 0
  %16375 = zext i1 %16374 to i8
  store i8 %16375, i8* %34, align 1
  %16376 = lshr i32 %16361, 31
  %16377 = trunc i32 %16376 to i8
  store i8 %16377, i8* %37, align 1
  %16378 = xor i32 %16376, %16360
  %16379 = add nuw nsw i32 %16378, %16360
  %16380 = icmp eq i32 %16379, 2
  %16381 = zext i1 %16380 to i8
  store i8 %16381, i8* %43, align 1
  %16382 = icmp ne i8 %16377, 0
  %16383 = xor i1 %16382, %16380
  %16384 = or i1 %16374, %16383
  %.v687 = select i1 %16384, i64 64, i64 48
  %16385 = add i64 %16306, %.v687
  store i64 %16385, i64* %3, align 8
  br i1 %16384, label %block_.L_458ecf, label %block_458ebf

block_458ebf:                                     ; preds = %block_.L_458e8f
  store i64 127, i64* %RAX.i3176, align 8
  %16386 = load i64, i64* %RBP.i, align 8
  %16387 = add i64 %16386, -1316
  %16388 = add i64 %16385, 11
  store i64 %16388, i64* %3, align 8
  %16389 = inttoptr i64 %16387 to i32*
  store i32 127, i32* %16389, align 4
  %16390 = load i64, i64* %3, align 8
  %16391 = add i64 %16390, 50
  store i64 %16391, i64* %3, align 8
  br label %block_.L_458efc

block_.L_458ecf:                                  ; preds = %block_.L_458e8f
  %16392 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16392, i64* %RAX.i3176, align 8
  %16393 = add i64 %16392, 4
  %16394 = add i64 %16385, 11
  store i64 %16394, i64* %3, align 8
  %16395 = inttoptr i64 %16393 to i32*
  %16396 = load i32, i32* %16395, align 4
  %16397 = zext i32 %16396 to i64
  store i64 %16397, i64* %RCX.i2595, align 8
  %16398 = load i64, i64* %RBP.i, align 8
  %16399 = add i64 %16398, -24
  %16400 = add i64 %16385, 15
  store i64 %16400, i64* %3, align 8
  %16401 = inttoptr i64 %16399 to i64*
  %16402 = load i64, i64* %16401, align 8
  store i64 %16402, i64* %RAX.i3176, align 8
  %16403 = add i64 %16398, -56
  %16404 = add i64 %16385, 18
  store i64 %16404, i64* %3, align 8
  %16405 = inttoptr i64 %16403 to i32*
  %16406 = load i32, i32* %16405, align 4
  %16407 = zext i32 %16406 to i64
  store i64 %16407, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16408 = and i32 %16406, 255
  %16409 = tail call i32 @llvm.ctpop.i32(i32 %16408)
  %16410 = trunc i32 %16409 to i8
  %16411 = and i8 %16410, 1
  %16412 = xor i8 %16411, 1
  store i8 %16412, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16413 = icmp eq i32 %16406, 0
  %16414 = zext i1 %16413 to i8
  store i8 %16414, i8* %34, align 1
  %16415 = lshr i32 %16406, 31
  %16416 = trunc i32 %16415 to i8
  store i8 %16416, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16417 = sext i32 %16406 to i64
  store i64 %16417, i64* %RSI.i766, align 8
  %16418 = shl nsw i64 %16417, 3
  %16419 = add i64 %16402, %16418
  %16420 = add i64 %16385, 28
  store i64 %16420, i64* %3, align 8
  %16421 = inttoptr i64 %16419 to i64*
  %16422 = load i64, i64* %16421, align 8
  store i64 %16422, i64* %RAX.i3176, align 8
  %16423 = add i64 %16398, -52
  %16424 = add i64 %16385, 32
  store i64 %16424, i64* %3, align 8
  %16425 = inttoptr i64 %16423 to i32*
  %16426 = load i32, i32* %16425, align 4
  %16427 = sext i32 %16426 to i64
  store i64 %16427, i64* %RSI.i766, align 8
  %16428 = shl nsw i64 %16427, 3
  %16429 = add i64 %16428, %16422
  %16430 = add i64 %16385, 36
  store i64 %16430, i64* %3, align 8
  %16431 = inttoptr i64 %16429 to i64*
  %16432 = load i64, i64* %16431, align 8
  store i64 %16432, i64* %RAX.i3176, align 8
  %16433 = add i64 %16432, 4
  %16434 = add i64 %16385, 39
  store i64 %16434, i64* %3, align 8
  %16435 = inttoptr i64 %16433 to i32*
  %16436 = load i32, i32* %16435, align 4
  %16437 = sub i32 %16396, %16436
  %16438 = zext i32 %16437 to i64
  store i64 %16438, i64* %RCX.i2595, align 8
  %16439 = icmp ult i32 %16396, %16436
  %16440 = zext i1 %16439 to i8
  store i8 %16440, i8* %19, align 1
  %16441 = and i32 %16437, 255
  %16442 = tail call i32 @llvm.ctpop.i32(i32 %16441)
  %16443 = trunc i32 %16442 to i8
  %16444 = and i8 %16443, 1
  %16445 = xor i8 %16444, 1
  store i8 %16445, i8* %26, align 1
  %16446 = xor i32 %16436, %16396
  %16447 = xor i32 %16446, %16437
  %16448 = lshr i32 %16447, 4
  %16449 = trunc i32 %16448 to i8
  %16450 = and i8 %16449, 1
  store i8 %16450, i8* %31, align 1
  %16451 = icmp eq i32 %16437, 0
  %16452 = zext i1 %16451 to i8
  store i8 %16452, i8* %34, align 1
  %16453 = lshr i32 %16437, 31
  %16454 = trunc i32 %16453 to i8
  store i8 %16454, i8* %37, align 1
  %16455 = lshr i32 %16396, 31
  %16456 = lshr i32 %16436, 31
  %16457 = xor i32 %16456, %16455
  %16458 = xor i32 %16453, %16455
  %16459 = add nuw nsw i32 %16458, %16457
  %16460 = icmp eq i32 %16459, 2
  %16461 = zext i1 %16460 to i8
  store i8 %16461, i8* %43, align 1
  %16462 = add i64 %16398, -1316
  %16463 = add i64 %16385, 45
  store i64 %16463, i64* %3, align 8
  %16464 = inttoptr i64 %16462 to i32*
  store i32 %16437, i32* %16464, align 4
  %.pre386 = load i64, i64* %3, align 8
  br label %block_.L_458efc

block_.L_458efc:                                  ; preds = %block_.L_458ecf, %block_458ebf
  %16465 = phi i64 [ %.pre386, %block_.L_458ecf ], [ %16391, %block_458ebf ]
  %16466 = load i64, i64* %RBP.i, align 8
  %16467 = add i64 %16466, -1316
  %16468 = add i64 %16465, 6
  store i64 %16468, i64* %3, align 8
  %16469 = inttoptr i64 %16467 to i32*
  %16470 = load i32, i32* %16469, align 4
  %16471 = zext i32 %16470 to i64
  store i64 %16471, i64* %RAX.i3176, align 8
  %16472 = add i64 %16466, -1312
  %16473 = add i64 %16465, 12
  store i64 %16473, i64* %3, align 8
  %16474 = inttoptr i64 %16472 to i32*
  store i32 %16470, i32* %16474, align 4
  %.pre387 = load i64, i64* %3, align 8
  br label %block_.L_458f08

block_.L_458f08:                                  ; preds = %block_.L_458efc, %block_458e7f
  %16475 = phi i64 [ %.pre387, %block_.L_458efc ], [ %16312, %block_458e7f ]
  %16476 = load i64, i64* %RBP.i, align 8
  %16477 = add i64 %16476, -1312
  %16478 = add i64 %16475, 6
  store i64 %16478, i64* %3, align 8
  %16479 = inttoptr i64 %16477 to i32*
  %16480 = load i32, i32* %16479, align 4
  %16481 = zext i32 %16480 to i64
  store i64 %16481, i64* %RAX.i3176, align 8
  %16482 = add i64 %16476, -64
  %16483 = add i64 %16475, 9
  store i64 %16483, i64* %3, align 8
  %16484 = inttoptr i64 %16482 to i32*
  store i32 %16480, i32* %16484, align 4
  %16485 = load i64, i64* %3, align 8
  %16486 = add i64 %16485, 413
  br label %block_.L_4590ae

block_.L_458f16:                                  ; preds = %block_458e45
  %16487 = add i64 %16239, 4
  store i64 %16487, i64* %3, align 8
  %16488 = load i32, i32* %16193, align 4
  %16489 = add i32 %16488, -2
  %16490 = icmp ult i32 %16488, 2
  %16491 = zext i1 %16490 to i8
  store i8 %16491, i8* %19, align 1
  %16492 = and i32 %16489, 255
  %16493 = tail call i32 @llvm.ctpop.i32(i32 %16492)
  %16494 = trunc i32 %16493 to i8
  %16495 = and i8 %16494, 1
  %16496 = xor i8 %16495, 1
  store i8 %16496, i8* %26, align 1
  %16497 = xor i32 %16489, %16488
  %16498 = lshr i32 %16497, 4
  %16499 = trunc i32 %16498 to i8
  %16500 = and i8 %16499, 1
  store i8 %16500, i8* %31, align 1
  %16501 = icmp eq i32 %16489, 0
  %16502 = zext i1 %16501 to i8
  store i8 %16502, i8* %34, align 1
  %16503 = lshr i32 %16489, 31
  %16504 = trunc i32 %16503 to i8
  store i8 %16504, i8* %37, align 1
  %16505 = lshr i32 %16488, 31
  %16506 = xor i32 %16503, %16505
  %16507 = add nuw nsw i32 %16506, %16505
  %16508 = icmp eq i32 %16507, 2
  %16509 = zext i1 %16508 to i8
  store i8 %16509, i8* %43, align 1
  %.v676 = select i1 %16501, i64 10, i64 209
  %16510 = add i64 %16239, %.v676
  %16511 = add i64 %16510, 8
  store i64 %16511, i64* %3, align 8
  %16512 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16512, i64* %RAX.i3176, align 8
  br i1 %16501, label %block_458f20, label %block_.L_458fe7

block_458f20:                                     ; preds = %block_.L_458f16
  %16513 = add i64 %16512, 8
  %16514 = add i64 %16510, 11
  store i64 %16514, i64* %3, align 8
  %16515 = inttoptr i64 %16513 to i32*
  %16516 = load i32, i32* %16515, align 4
  %16517 = zext i32 %16516 to i64
  store i64 %16517, i64* %RCX.i2595, align 8
  %16518 = add i64 %16185, -24
  %16519 = add i64 %16510, 15
  store i64 %16519, i64* %3, align 8
  %16520 = inttoptr i64 %16518 to i64*
  %16521 = load i64, i64* %16520, align 8
  store i64 %16521, i64* %RAX.i3176, align 8
  %16522 = add i64 %16510, 18
  store i64 %16522, i64* %3, align 8
  %16523 = load i32, i32* %16193, align 4
  %16524 = zext i32 %16523 to i64
  store i64 %16524, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16525 = and i32 %16523, 255
  %16526 = tail call i32 @llvm.ctpop.i32(i32 %16525)
  %16527 = trunc i32 %16526 to i8
  %16528 = and i8 %16527, 1
  %16529 = xor i8 %16528, 1
  store i8 %16529, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16530 = icmp eq i32 %16523, 0
  %16531 = zext i1 %16530 to i8
  store i8 %16531, i8* %34, align 1
  %16532 = lshr i32 %16523, 31
  %16533 = trunc i32 %16532 to i8
  store i8 %16533, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16534 = sext i32 %16523 to i64
  store i64 %16534, i64* %RSI.i766, align 8
  %16535 = shl nsw i64 %16534, 3
  %16536 = add i64 %16521, %16535
  %16537 = add i64 %16510, 28
  store i64 %16537, i64* %3, align 8
  %16538 = inttoptr i64 %16536 to i64*
  %16539 = load i64, i64* %16538, align 8
  store i64 %16539, i64* %RAX.i3176, align 8
  %16540 = add i64 %16510, 32
  store i64 %16540, i64* %3, align 8
  %16541 = load i32, i32* %16188, align 4
  %16542 = sext i32 %16541 to i64
  store i64 %16542, i64* %RSI.i766, align 8
  %16543 = shl nsw i64 %16542, 3
  %16544 = add i64 %16543, %16539
  %16545 = add i64 %16510, 36
  store i64 %16545, i64* %3, align 8
  %16546 = inttoptr i64 %16544 to i64*
  %16547 = load i64, i64* %16546, align 8
  store i64 %16547, i64* %RAX.i3176, align 8
  %16548 = add i64 %16547, 4
  %16549 = add i64 %16510, 39
  store i64 %16549, i64* %3, align 8
  %16550 = inttoptr i64 %16548 to i32*
  %16551 = load i32, i32* %16550, align 4
  %16552 = sub i32 %16516, %16551
  %16553 = zext i32 %16552 to i64
  store i64 %16553, i64* %RCX.i2595, align 8
  %16554 = lshr i32 %16552, 31
  %16555 = add i32 %16552, 128
  %16556 = icmp ult i32 %16552, -128
  %16557 = zext i1 %16556 to i8
  store i8 %16557, i8* %19, align 1
  %16558 = and i32 %16555, 255
  %16559 = tail call i32 @llvm.ctpop.i32(i32 %16558)
  %16560 = trunc i32 %16559 to i8
  %16561 = and i8 %16560, 1
  %16562 = xor i8 %16561, 1
  store i8 %16562, i8* %26, align 1
  %16563 = xor i32 %16555, %16552
  %16564 = lshr i32 %16563, 4
  %16565 = trunc i32 %16564 to i8
  %16566 = and i8 %16565, 1
  store i8 %16566, i8* %31, align 1
  %16567 = icmp eq i32 %16555, 0
  %16568 = zext i1 %16567 to i8
  store i8 %16568, i8* %34, align 1
  %16569 = lshr i32 %16555, 31
  %16570 = trunc i32 %16569 to i8
  store i8 %16570, i8* %37, align 1
  %16571 = xor i32 %16554, 1
  %16572 = xor i32 %16569, %16554
  %16573 = add nuw nsw i32 %16572, %16571
  %16574 = icmp eq i32 %16573, 2
  %16575 = zext i1 %16574 to i8
  store i8 %16575, i8* %43, align 1
  %16576 = icmp ne i8 %16570, 0
  %16577 = xor i1 %16576, %16574
  %.v684 = select i1 %16577, i64 48, i64 64
  %16578 = add i64 %16510, %.v684
  store i64 %16578, i64* %3, align 8
  br i1 %16577, label %block_458f50, label %block_.L_458f60

block_458f50:                                     ; preds = %block_458f20
  store i64 4294967168, i64* %RAX.i3176, align 8
  %16579 = load i64, i64* %RBP.i, align 8
  %16580 = add i64 %16579, -1320
  %16581 = add i64 %16578, 11
  store i64 %16581, i64* %3, align 8
  %16582 = inttoptr i64 %16580 to i32*
  store i32 -128, i32* %16582, align 4
  %16583 = load i64, i64* %3, align 8
  %16584 = add i64 %16583, 126
  store i64 %16584, i64* %3, align 8
  br label %block_.L_458fd9

block_.L_458f60:                                  ; preds = %block_458f20
  %16585 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16585, i64* %RAX.i3176, align 8
  %16586 = add i64 %16585, 8
  %16587 = add i64 %16578, 11
  store i64 %16587, i64* %3, align 8
  %16588 = inttoptr i64 %16586 to i32*
  %16589 = load i32, i32* %16588, align 4
  %16590 = zext i32 %16589 to i64
  store i64 %16590, i64* %RCX.i2595, align 8
  %16591 = load i64, i64* %RBP.i, align 8
  %16592 = add i64 %16591, -24
  %16593 = add i64 %16578, 15
  store i64 %16593, i64* %3, align 8
  %16594 = inttoptr i64 %16592 to i64*
  %16595 = load i64, i64* %16594, align 8
  store i64 %16595, i64* %RAX.i3176, align 8
  %16596 = add i64 %16591, -56
  %16597 = add i64 %16578, 18
  store i64 %16597, i64* %3, align 8
  %16598 = inttoptr i64 %16596 to i32*
  %16599 = load i32, i32* %16598, align 4
  %16600 = zext i32 %16599 to i64
  store i64 %16600, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16601 = and i32 %16599, 255
  %16602 = tail call i32 @llvm.ctpop.i32(i32 %16601)
  %16603 = trunc i32 %16602 to i8
  %16604 = and i8 %16603, 1
  %16605 = xor i8 %16604, 1
  store i8 %16605, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16606 = icmp eq i32 %16599, 0
  %16607 = zext i1 %16606 to i8
  store i8 %16607, i8* %34, align 1
  %16608 = lshr i32 %16599, 31
  %16609 = trunc i32 %16608 to i8
  store i8 %16609, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16610 = sext i32 %16599 to i64
  store i64 %16610, i64* %RSI.i766, align 8
  %16611 = shl nsw i64 %16610, 3
  %16612 = add i64 %16595, %16611
  %16613 = add i64 %16578, 28
  store i64 %16613, i64* %3, align 8
  %16614 = inttoptr i64 %16612 to i64*
  %16615 = load i64, i64* %16614, align 8
  store i64 %16615, i64* %RAX.i3176, align 8
  %16616 = add i64 %16591, -52
  %16617 = add i64 %16578, 32
  store i64 %16617, i64* %3, align 8
  %16618 = inttoptr i64 %16616 to i32*
  %16619 = load i32, i32* %16618, align 4
  %16620 = sext i32 %16619 to i64
  store i64 %16620, i64* %RSI.i766, align 8
  %16621 = shl nsw i64 %16620, 3
  %16622 = add i64 %16621, %16615
  %16623 = add i64 %16578, 36
  store i64 %16623, i64* %3, align 8
  %16624 = inttoptr i64 %16622 to i64*
  %16625 = load i64, i64* %16624, align 8
  store i64 %16625, i64* %RAX.i3176, align 8
  %16626 = add i64 %16625, 4
  %16627 = add i64 %16578, 39
  store i64 %16627, i64* %3, align 8
  %16628 = inttoptr i64 %16626 to i32*
  %16629 = load i32, i32* %16628, align 4
  %16630 = sub i32 %16589, %16629
  %16631 = zext i32 %16630 to i64
  store i64 %16631, i64* %RCX.i2595, align 8
  %16632 = lshr i32 %16630, 31
  %16633 = add i32 %16630, -127
  %16634 = icmp ult i32 %16630, 127
  %16635 = zext i1 %16634 to i8
  store i8 %16635, i8* %19, align 1
  %16636 = and i32 %16633, 255
  %16637 = tail call i32 @llvm.ctpop.i32(i32 %16636)
  %16638 = trunc i32 %16637 to i8
  %16639 = and i8 %16638, 1
  %16640 = xor i8 %16639, 1
  store i8 %16640, i8* %26, align 1
  %16641 = xor i32 %16630, 16
  %16642 = xor i32 %16641, %16633
  %16643 = lshr i32 %16642, 4
  %16644 = trunc i32 %16643 to i8
  %16645 = and i8 %16644, 1
  store i8 %16645, i8* %31, align 1
  %16646 = icmp eq i32 %16633, 0
  %16647 = zext i1 %16646 to i8
  store i8 %16647, i8* %34, align 1
  %16648 = lshr i32 %16633, 31
  %16649 = trunc i32 %16648 to i8
  store i8 %16649, i8* %37, align 1
  %16650 = xor i32 %16648, %16632
  %16651 = add nuw nsw i32 %16650, %16632
  %16652 = icmp eq i32 %16651, 2
  %16653 = zext i1 %16652 to i8
  store i8 %16653, i8* %43, align 1
  %16654 = icmp ne i8 %16649, 0
  %16655 = xor i1 %16654, %16652
  %16656 = or i1 %16646, %16655
  %.v685 = select i1 %16656, i64 64, i64 48
  %16657 = add i64 %16578, %.v685
  store i64 %16657, i64* %3, align 8
  br i1 %16656, label %block_.L_458fa0, label %block_458f90

block_458f90:                                     ; preds = %block_.L_458f60
  store i64 127, i64* %RAX.i3176, align 8
  %16658 = load i64, i64* %RBP.i, align 8
  %16659 = add i64 %16658, -1324
  %16660 = add i64 %16657, 11
  store i64 %16660, i64* %3, align 8
  %16661 = inttoptr i64 %16659 to i32*
  store i32 127, i32* %16661, align 4
  %16662 = load i64, i64* %3, align 8
  %16663 = add i64 %16662, 50
  store i64 %16663, i64* %3, align 8
  br label %block_.L_458fcd

block_.L_458fa0:                                  ; preds = %block_.L_458f60
  %16664 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16664, i64* %RAX.i3176, align 8
  %16665 = add i64 %16664, 8
  %16666 = add i64 %16657, 11
  store i64 %16666, i64* %3, align 8
  %16667 = inttoptr i64 %16665 to i32*
  %16668 = load i32, i32* %16667, align 4
  %16669 = zext i32 %16668 to i64
  store i64 %16669, i64* %RCX.i2595, align 8
  %16670 = load i64, i64* %RBP.i, align 8
  %16671 = add i64 %16670, -24
  %16672 = add i64 %16657, 15
  store i64 %16672, i64* %3, align 8
  %16673 = inttoptr i64 %16671 to i64*
  %16674 = load i64, i64* %16673, align 8
  store i64 %16674, i64* %RAX.i3176, align 8
  %16675 = add i64 %16670, -56
  %16676 = add i64 %16657, 18
  store i64 %16676, i64* %3, align 8
  %16677 = inttoptr i64 %16675 to i32*
  %16678 = load i32, i32* %16677, align 4
  %16679 = zext i32 %16678 to i64
  store i64 %16679, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16680 = and i32 %16678, 255
  %16681 = tail call i32 @llvm.ctpop.i32(i32 %16680)
  %16682 = trunc i32 %16681 to i8
  %16683 = and i8 %16682, 1
  %16684 = xor i8 %16683, 1
  store i8 %16684, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16685 = icmp eq i32 %16678, 0
  %16686 = zext i1 %16685 to i8
  store i8 %16686, i8* %34, align 1
  %16687 = lshr i32 %16678, 31
  %16688 = trunc i32 %16687 to i8
  store i8 %16688, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16689 = sext i32 %16678 to i64
  store i64 %16689, i64* %RSI.i766, align 8
  %16690 = shl nsw i64 %16689, 3
  %16691 = add i64 %16674, %16690
  %16692 = add i64 %16657, 28
  store i64 %16692, i64* %3, align 8
  %16693 = inttoptr i64 %16691 to i64*
  %16694 = load i64, i64* %16693, align 8
  store i64 %16694, i64* %RAX.i3176, align 8
  %16695 = add i64 %16670, -52
  %16696 = add i64 %16657, 32
  store i64 %16696, i64* %3, align 8
  %16697 = inttoptr i64 %16695 to i32*
  %16698 = load i32, i32* %16697, align 4
  %16699 = sext i32 %16698 to i64
  store i64 %16699, i64* %RSI.i766, align 8
  %16700 = shl nsw i64 %16699, 3
  %16701 = add i64 %16700, %16694
  %16702 = add i64 %16657, 36
  store i64 %16702, i64* %3, align 8
  %16703 = inttoptr i64 %16701 to i64*
  %16704 = load i64, i64* %16703, align 8
  store i64 %16704, i64* %RAX.i3176, align 8
  %16705 = add i64 %16704, 4
  %16706 = add i64 %16657, 39
  store i64 %16706, i64* %3, align 8
  %16707 = inttoptr i64 %16705 to i32*
  %16708 = load i32, i32* %16707, align 4
  %16709 = sub i32 %16668, %16708
  %16710 = zext i32 %16709 to i64
  store i64 %16710, i64* %RCX.i2595, align 8
  %16711 = icmp ult i32 %16668, %16708
  %16712 = zext i1 %16711 to i8
  store i8 %16712, i8* %19, align 1
  %16713 = and i32 %16709, 255
  %16714 = tail call i32 @llvm.ctpop.i32(i32 %16713)
  %16715 = trunc i32 %16714 to i8
  %16716 = and i8 %16715, 1
  %16717 = xor i8 %16716, 1
  store i8 %16717, i8* %26, align 1
  %16718 = xor i32 %16708, %16668
  %16719 = xor i32 %16718, %16709
  %16720 = lshr i32 %16719, 4
  %16721 = trunc i32 %16720 to i8
  %16722 = and i8 %16721, 1
  store i8 %16722, i8* %31, align 1
  %16723 = icmp eq i32 %16709, 0
  %16724 = zext i1 %16723 to i8
  store i8 %16724, i8* %34, align 1
  %16725 = lshr i32 %16709, 31
  %16726 = trunc i32 %16725 to i8
  store i8 %16726, i8* %37, align 1
  %16727 = lshr i32 %16668, 31
  %16728 = lshr i32 %16708, 31
  %16729 = xor i32 %16728, %16727
  %16730 = xor i32 %16725, %16727
  %16731 = add nuw nsw i32 %16730, %16729
  %16732 = icmp eq i32 %16731, 2
  %16733 = zext i1 %16732 to i8
  store i8 %16733, i8* %43, align 1
  %16734 = add i64 %16670, -1324
  %16735 = add i64 %16657, 45
  store i64 %16735, i64* %3, align 8
  %16736 = inttoptr i64 %16734 to i32*
  store i32 %16709, i32* %16736, align 4
  %.pre388 = load i64, i64* %3, align 8
  br label %block_.L_458fcd

block_.L_458fcd:                                  ; preds = %block_.L_458fa0, %block_458f90
  %16737 = phi i64 [ %.pre388, %block_.L_458fa0 ], [ %16663, %block_458f90 ]
  %16738 = load i64, i64* %RBP.i, align 8
  %16739 = add i64 %16738, -1324
  %16740 = add i64 %16737, 6
  store i64 %16740, i64* %3, align 8
  %16741 = inttoptr i64 %16739 to i32*
  %16742 = load i32, i32* %16741, align 4
  %16743 = zext i32 %16742 to i64
  store i64 %16743, i64* %RAX.i3176, align 8
  %16744 = add i64 %16738, -1320
  %16745 = add i64 %16737, 12
  store i64 %16745, i64* %3, align 8
  %16746 = inttoptr i64 %16744 to i32*
  store i32 %16742, i32* %16746, align 4
  %.pre389 = load i64, i64* %3, align 8
  br label %block_.L_458fd9

block_.L_458fd9:                                  ; preds = %block_.L_458fcd, %block_458f50
  %16747 = phi i64 [ %.pre389, %block_.L_458fcd ], [ %16584, %block_458f50 ]
  %16748 = load i64, i64* %RBP.i, align 8
  %16749 = add i64 %16748, -1320
  %16750 = add i64 %16747, 6
  store i64 %16750, i64* %3, align 8
  %16751 = inttoptr i64 %16749 to i32*
  %16752 = load i32, i32* %16751, align 4
  %16753 = zext i32 %16752 to i64
  store i64 %16753, i64* %RAX.i3176, align 8
  %16754 = add i64 %16748, -64
  %16755 = add i64 %16747, 9
  store i64 %16755, i64* %3, align 8
  %16756 = inttoptr i64 %16754 to i32*
  store i32 %16752, i32* %16756, align 4
  %16757 = load i64, i64* %3, align 8
  %16758 = add i64 %16757, 199
  store i64 %16758, i64* %3, align 8
  br label %block_.L_4590a9

block_.L_458fe7:                                  ; preds = %block_.L_458f16
  %16759 = add i64 %16512, 12
  %16760 = add i64 %16510, 11
  store i64 %16760, i64* %3, align 8
  %16761 = inttoptr i64 %16759 to i32*
  %16762 = load i32, i32* %16761, align 4
  %16763 = zext i32 %16762 to i64
  store i64 %16763, i64* %RCX.i2595, align 8
  %16764 = add i64 %16185, -24
  %16765 = add i64 %16510, 15
  store i64 %16765, i64* %3, align 8
  %16766 = inttoptr i64 %16764 to i64*
  %16767 = load i64, i64* %16766, align 8
  store i64 %16767, i64* %RAX.i3176, align 8
  %16768 = add i64 %16510, 18
  store i64 %16768, i64* %3, align 8
  %16769 = load i32, i32* %16193, align 4
  %16770 = zext i32 %16769 to i64
  store i64 %16770, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16771 = and i32 %16769, 255
  %16772 = tail call i32 @llvm.ctpop.i32(i32 %16771)
  %16773 = trunc i32 %16772 to i8
  %16774 = and i8 %16773, 1
  %16775 = xor i8 %16774, 1
  store i8 %16775, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16776 = icmp eq i32 %16769, 0
  %16777 = zext i1 %16776 to i8
  store i8 %16777, i8* %34, align 1
  %16778 = lshr i32 %16769, 31
  %16779 = trunc i32 %16778 to i8
  store i8 %16779, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16780 = sext i32 %16769 to i64
  store i64 %16780, i64* %RSI.i766, align 8
  %16781 = shl nsw i64 %16780, 3
  %16782 = add i64 %16767, %16781
  %16783 = add i64 %16510, 28
  store i64 %16783, i64* %3, align 8
  %16784 = inttoptr i64 %16782 to i64*
  %16785 = load i64, i64* %16784, align 8
  store i64 %16785, i64* %RAX.i3176, align 8
  %16786 = add i64 %16510, 32
  store i64 %16786, i64* %3, align 8
  %16787 = load i32, i32* %16188, align 4
  %16788 = sext i32 %16787 to i64
  store i64 %16788, i64* %RSI.i766, align 8
  %16789 = shl nsw i64 %16788, 3
  %16790 = add i64 %16789, %16785
  %16791 = add i64 %16510, 36
  store i64 %16791, i64* %3, align 8
  %16792 = inttoptr i64 %16790 to i64*
  %16793 = load i64, i64* %16792, align 8
  store i64 %16793, i64* %RAX.i3176, align 8
  %16794 = add i64 %16793, 4
  %16795 = add i64 %16510, 39
  store i64 %16795, i64* %3, align 8
  %16796 = inttoptr i64 %16794 to i32*
  %16797 = load i32, i32* %16796, align 4
  %16798 = sub i32 %16762, %16797
  %16799 = zext i32 %16798 to i64
  store i64 %16799, i64* %RCX.i2595, align 8
  %16800 = lshr i32 %16798, 31
  %16801 = add i32 %16798, 128
  %16802 = icmp ult i32 %16798, -128
  %16803 = zext i1 %16802 to i8
  store i8 %16803, i8* %19, align 1
  %16804 = and i32 %16801, 255
  %16805 = tail call i32 @llvm.ctpop.i32(i32 %16804)
  %16806 = trunc i32 %16805 to i8
  %16807 = and i8 %16806, 1
  %16808 = xor i8 %16807, 1
  store i8 %16808, i8* %26, align 1
  %16809 = xor i32 %16801, %16798
  %16810 = lshr i32 %16809, 4
  %16811 = trunc i32 %16810 to i8
  %16812 = and i8 %16811, 1
  store i8 %16812, i8* %31, align 1
  %16813 = icmp eq i32 %16801, 0
  %16814 = zext i1 %16813 to i8
  store i8 %16814, i8* %34, align 1
  %16815 = lshr i32 %16801, 31
  %16816 = trunc i32 %16815 to i8
  store i8 %16816, i8* %37, align 1
  %16817 = xor i32 %16800, 1
  %16818 = xor i32 %16815, %16800
  %16819 = add nuw nsw i32 %16818, %16817
  %16820 = icmp eq i32 %16819, 2
  %16821 = zext i1 %16820 to i8
  store i8 %16821, i8* %43, align 1
  %16822 = icmp ne i8 %16816, 0
  %16823 = xor i1 %16822, %16820
  %.v677 = select i1 %16823, i64 48, i64 64
  %16824 = add i64 %16510, %.v677
  store i64 %16824, i64* %3, align 8
  br i1 %16823, label %block_459017, label %block_.L_459027

block_459017:                                     ; preds = %block_.L_458fe7
  store i64 4294967168, i64* %RAX.i3176, align 8
  %16825 = load i64, i64* %RBP.i, align 8
  %16826 = add i64 %16825, -1328
  %16827 = add i64 %16824, 11
  store i64 %16827, i64* %3, align 8
  %16828 = inttoptr i64 %16826 to i32*
  store i32 -128, i32* %16828, align 4
  %16829 = load i64, i64* %3, align 8
  %16830 = add i64 %16829, 126
  store i64 %16830, i64* %3, align 8
  br label %block_.L_4590a0

block_.L_459027:                                  ; preds = %block_.L_458fe7
  %16831 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16831, i64* %RAX.i3176, align 8
  %16832 = add i64 %16831, 12
  %16833 = add i64 %16824, 11
  store i64 %16833, i64* %3, align 8
  %16834 = inttoptr i64 %16832 to i32*
  %16835 = load i32, i32* %16834, align 4
  %16836 = zext i32 %16835 to i64
  store i64 %16836, i64* %RCX.i2595, align 8
  %16837 = load i64, i64* %RBP.i, align 8
  %16838 = add i64 %16837, -24
  %16839 = add i64 %16824, 15
  store i64 %16839, i64* %3, align 8
  %16840 = inttoptr i64 %16838 to i64*
  %16841 = load i64, i64* %16840, align 8
  store i64 %16841, i64* %RAX.i3176, align 8
  %16842 = add i64 %16837, -56
  %16843 = add i64 %16824, 18
  store i64 %16843, i64* %3, align 8
  %16844 = inttoptr i64 %16842 to i32*
  %16845 = load i32, i32* %16844, align 4
  %16846 = zext i32 %16845 to i64
  store i64 %16846, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16847 = and i32 %16845, 255
  %16848 = tail call i32 @llvm.ctpop.i32(i32 %16847)
  %16849 = trunc i32 %16848 to i8
  %16850 = and i8 %16849, 1
  %16851 = xor i8 %16850, 1
  store i8 %16851, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16852 = icmp eq i32 %16845, 0
  %16853 = zext i1 %16852 to i8
  store i8 %16853, i8* %34, align 1
  %16854 = lshr i32 %16845, 31
  %16855 = trunc i32 %16854 to i8
  store i8 %16855, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16856 = sext i32 %16845 to i64
  store i64 %16856, i64* %RSI.i766, align 8
  %16857 = shl nsw i64 %16856, 3
  %16858 = add i64 %16841, %16857
  %16859 = add i64 %16824, 28
  store i64 %16859, i64* %3, align 8
  %16860 = inttoptr i64 %16858 to i64*
  %16861 = load i64, i64* %16860, align 8
  store i64 %16861, i64* %RAX.i3176, align 8
  %16862 = add i64 %16837, -52
  %16863 = add i64 %16824, 32
  store i64 %16863, i64* %3, align 8
  %16864 = inttoptr i64 %16862 to i32*
  %16865 = load i32, i32* %16864, align 4
  %16866 = sext i32 %16865 to i64
  store i64 %16866, i64* %RSI.i766, align 8
  %16867 = shl nsw i64 %16866, 3
  %16868 = add i64 %16867, %16861
  %16869 = add i64 %16824, 36
  store i64 %16869, i64* %3, align 8
  %16870 = inttoptr i64 %16868 to i64*
  %16871 = load i64, i64* %16870, align 8
  store i64 %16871, i64* %RAX.i3176, align 8
  %16872 = add i64 %16871, 4
  %16873 = add i64 %16824, 39
  store i64 %16873, i64* %3, align 8
  %16874 = inttoptr i64 %16872 to i32*
  %16875 = load i32, i32* %16874, align 4
  %16876 = sub i32 %16835, %16875
  %16877 = zext i32 %16876 to i64
  store i64 %16877, i64* %RCX.i2595, align 8
  %16878 = lshr i32 %16876, 31
  %16879 = add i32 %16876, -127
  %16880 = icmp ult i32 %16876, 127
  %16881 = zext i1 %16880 to i8
  store i8 %16881, i8* %19, align 1
  %16882 = and i32 %16879, 255
  %16883 = tail call i32 @llvm.ctpop.i32(i32 %16882)
  %16884 = trunc i32 %16883 to i8
  %16885 = and i8 %16884, 1
  %16886 = xor i8 %16885, 1
  store i8 %16886, i8* %26, align 1
  %16887 = xor i32 %16876, 16
  %16888 = xor i32 %16887, %16879
  %16889 = lshr i32 %16888, 4
  %16890 = trunc i32 %16889 to i8
  %16891 = and i8 %16890, 1
  store i8 %16891, i8* %31, align 1
  %16892 = icmp eq i32 %16879, 0
  %16893 = zext i1 %16892 to i8
  store i8 %16893, i8* %34, align 1
  %16894 = lshr i32 %16879, 31
  %16895 = trunc i32 %16894 to i8
  store i8 %16895, i8* %37, align 1
  %16896 = xor i32 %16894, %16878
  %16897 = add nuw nsw i32 %16896, %16878
  %16898 = icmp eq i32 %16897, 2
  %16899 = zext i1 %16898 to i8
  store i8 %16899, i8* %43, align 1
  %16900 = icmp ne i8 %16895, 0
  %16901 = xor i1 %16900, %16898
  %16902 = or i1 %16892, %16901
  %.v678 = select i1 %16902, i64 64, i64 48
  %16903 = add i64 %16824, %.v678
  store i64 %16903, i64* %3, align 8
  br i1 %16902, label %block_.L_459067, label %block_459057

block_459057:                                     ; preds = %block_.L_459027
  store i64 127, i64* %RAX.i3176, align 8
  %16904 = load i64, i64* %RBP.i, align 8
  %16905 = add i64 %16904, -1332
  %16906 = add i64 %16903, 11
  store i64 %16906, i64* %3, align 8
  %16907 = inttoptr i64 %16905 to i32*
  store i32 127, i32* %16907, align 4
  %16908 = load i64, i64* %3, align 8
  %16909 = add i64 %16908, 50
  store i64 %16909, i64* %3, align 8
  br label %block_.L_459094

block_.L_459067:                                  ; preds = %block_.L_459027
  %16910 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %16910, i64* %RAX.i3176, align 8
  %16911 = add i64 %16910, 12
  %16912 = add i64 %16903, 11
  store i64 %16912, i64* %3, align 8
  %16913 = inttoptr i64 %16911 to i32*
  %16914 = load i32, i32* %16913, align 4
  %16915 = zext i32 %16914 to i64
  store i64 %16915, i64* %RCX.i2595, align 8
  %16916 = load i64, i64* %RBP.i, align 8
  %16917 = add i64 %16916, -24
  %16918 = add i64 %16903, 15
  store i64 %16918, i64* %3, align 8
  %16919 = inttoptr i64 %16917 to i64*
  %16920 = load i64, i64* %16919, align 8
  store i64 %16920, i64* %RAX.i3176, align 8
  %16921 = add i64 %16916, -56
  %16922 = add i64 %16903, 18
  store i64 %16922, i64* %3, align 8
  %16923 = inttoptr i64 %16921 to i32*
  %16924 = load i32, i32* %16923, align 4
  %16925 = zext i32 %16924 to i64
  store i64 %16925, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  %16926 = and i32 %16924, 255
  %16927 = tail call i32 @llvm.ctpop.i32(i32 %16926)
  %16928 = trunc i32 %16927 to i8
  %16929 = and i8 %16928, 1
  %16930 = xor i8 %16929, 1
  store i8 %16930, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %16931 = icmp eq i32 %16924, 0
  %16932 = zext i1 %16931 to i8
  store i8 %16932, i8* %34, align 1
  %16933 = lshr i32 %16924, 31
  %16934 = trunc i32 %16933 to i8
  store i8 %16934, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %16935 = sext i32 %16924 to i64
  store i64 %16935, i64* %RSI.i766, align 8
  %16936 = shl nsw i64 %16935, 3
  %16937 = add i64 %16920, %16936
  %16938 = add i64 %16903, 28
  store i64 %16938, i64* %3, align 8
  %16939 = inttoptr i64 %16937 to i64*
  %16940 = load i64, i64* %16939, align 8
  store i64 %16940, i64* %RAX.i3176, align 8
  %16941 = add i64 %16916, -52
  %16942 = add i64 %16903, 32
  store i64 %16942, i64* %3, align 8
  %16943 = inttoptr i64 %16941 to i32*
  %16944 = load i32, i32* %16943, align 4
  %16945 = sext i32 %16944 to i64
  store i64 %16945, i64* %RSI.i766, align 8
  %16946 = shl nsw i64 %16945, 3
  %16947 = add i64 %16946, %16940
  %16948 = add i64 %16903, 36
  store i64 %16948, i64* %3, align 8
  %16949 = inttoptr i64 %16947 to i64*
  %16950 = load i64, i64* %16949, align 8
  store i64 %16950, i64* %RAX.i3176, align 8
  %16951 = add i64 %16950, 4
  %16952 = add i64 %16903, 39
  store i64 %16952, i64* %3, align 8
  %16953 = inttoptr i64 %16951 to i32*
  %16954 = load i32, i32* %16953, align 4
  %16955 = sub i32 %16914, %16954
  %16956 = zext i32 %16955 to i64
  store i64 %16956, i64* %RCX.i2595, align 8
  %16957 = icmp ult i32 %16914, %16954
  %16958 = zext i1 %16957 to i8
  store i8 %16958, i8* %19, align 1
  %16959 = and i32 %16955, 255
  %16960 = tail call i32 @llvm.ctpop.i32(i32 %16959)
  %16961 = trunc i32 %16960 to i8
  %16962 = and i8 %16961, 1
  %16963 = xor i8 %16962, 1
  store i8 %16963, i8* %26, align 1
  %16964 = xor i32 %16954, %16914
  %16965 = xor i32 %16964, %16955
  %16966 = lshr i32 %16965, 4
  %16967 = trunc i32 %16966 to i8
  %16968 = and i8 %16967, 1
  store i8 %16968, i8* %31, align 1
  %16969 = icmp eq i32 %16955, 0
  %16970 = zext i1 %16969 to i8
  store i8 %16970, i8* %34, align 1
  %16971 = lshr i32 %16955, 31
  %16972 = trunc i32 %16971 to i8
  store i8 %16972, i8* %37, align 1
  %16973 = lshr i32 %16914, 31
  %16974 = lshr i32 %16954, 31
  %16975 = xor i32 %16974, %16973
  %16976 = xor i32 %16971, %16973
  %16977 = add nuw nsw i32 %16976, %16975
  %16978 = icmp eq i32 %16977, 2
  %16979 = zext i1 %16978 to i8
  store i8 %16979, i8* %43, align 1
  %16980 = add i64 %16916, -1332
  %16981 = add i64 %16903, 45
  store i64 %16981, i64* %3, align 8
  %16982 = inttoptr i64 %16980 to i32*
  store i32 %16955, i32* %16982, align 4
  %.pre390 = load i64, i64* %3, align 8
  br label %block_.L_459094

block_.L_459094:                                  ; preds = %block_.L_459067, %block_459057
  %16983 = phi i64 [ %.pre390, %block_.L_459067 ], [ %16909, %block_459057 ]
  %16984 = load i64, i64* %RBP.i, align 8
  %16985 = add i64 %16984, -1332
  %16986 = add i64 %16983, 6
  store i64 %16986, i64* %3, align 8
  %16987 = inttoptr i64 %16985 to i32*
  %16988 = load i32, i32* %16987, align 4
  %16989 = zext i32 %16988 to i64
  store i64 %16989, i64* %RAX.i3176, align 8
  %16990 = add i64 %16984, -1328
  %16991 = add i64 %16983, 12
  store i64 %16991, i64* %3, align 8
  %16992 = inttoptr i64 %16990 to i32*
  store i32 %16988, i32* %16992, align 4
  %.pre391 = load i64, i64* %3, align 8
  br label %block_.L_4590a0

block_.L_4590a0:                                  ; preds = %block_.L_459094, %block_459017
  %16993 = phi i64 [ %.pre391, %block_.L_459094 ], [ %16830, %block_459017 ]
  %16994 = load i64, i64* %RBP.i, align 8
  %16995 = add i64 %16994, -1328
  %16996 = add i64 %16993, 6
  store i64 %16996, i64* %3, align 8
  %16997 = inttoptr i64 %16995 to i32*
  %16998 = load i32, i32* %16997, align 4
  %16999 = zext i32 %16998 to i64
  store i64 %16999, i64* %RAX.i3176, align 8
  %17000 = add i64 %16994, -64
  %17001 = add i64 %16993, 9
  store i64 %17001, i64* %3, align 8
  %17002 = inttoptr i64 %17000 to i32*
  store i32 %16998, i32* %17002, align 4
  %.pre392 = load i64, i64* %3, align 8
  br label %block_.L_4590a9

block_.L_4590a9:                                  ; preds = %block_.L_4590a0, %block_.L_458fd9
  %17003 = phi i64 [ %.pre392, %block_.L_4590a0 ], [ %16758, %block_.L_458fd9 ]
  %17004 = add i64 %17003, 5
  store i64 %17004, i64* %3, align 8
  br label %block_.L_4590ae

block_.L_4590ae:                                  ; preds = %block_.L_4590a9, %block_.L_458f08
  %storemerge249 = phi i64 [ %16486, %block_.L_458f08 ], [ %17004, %block_.L_4590a9 ]
  %17005 = load i64, i64* %RBP.i, align 8
  %17006 = add i64 %17005, -24
  %17007 = add i64 %storemerge249, 4
  store i64 %17007, i64* %3, align 8
  %17008 = inttoptr i64 %17006 to i64*
  %17009 = load i64, i64* %17008, align 8
  store i64 %17009, i64* %RAX.i3176, align 8
  %17010 = add i64 %17005, -56
  %17011 = add i64 %storemerge249, 7
  store i64 %17011, i64* %3, align 8
  %17012 = inttoptr i64 %17010 to i32*
  %17013 = load i32, i32* %17012, align 4
  %17014 = add i32 %17013, 1
  %17015 = zext i32 %17014 to i64
  store i64 %17015, i64* %RCX.i2595, align 8
  %17016 = icmp eq i32 %17013, -1
  %17017 = icmp eq i32 %17014, 0
  %17018 = or i1 %17016, %17017
  %17019 = zext i1 %17018 to i8
  store i8 %17019, i8* %19, align 1
  %17020 = and i32 %17014, 255
  %17021 = tail call i32 @llvm.ctpop.i32(i32 %17020)
  %17022 = trunc i32 %17021 to i8
  %17023 = and i8 %17022, 1
  %17024 = xor i8 %17023, 1
  store i8 %17024, i8* %26, align 1
  %17025 = xor i32 %17014, %17013
  %17026 = lshr i32 %17025, 4
  %17027 = trunc i32 %17026 to i8
  %17028 = and i8 %17027, 1
  store i8 %17028, i8* %31, align 1
  %17029 = zext i1 %17017 to i8
  store i8 %17029, i8* %34, align 1
  %17030 = lshr i32 %17014, 31
  %17031 = trunc i32 %17030 to i8
  store i8 %17031, i8* %37, align 1
  %17032 = lshr i32 %17013, 31
  %17033 = xor i32 %17030, %17032
  %17034 = add nuw nsw i32 %17033, %17030
  %17035 = icmp eq i32 %17034, 2
  %17036 = zext i1 %17035 to i8
  store i8 %17036, i8* %43, align 1
  %17037 = sext i32 %17014 to i64
  store i64 %17037, i64* %RDX.i2592, align 8
  %17038 = shl nsw i64 %17037, 3
  %17039 = add i64 %17009, %17038
  %17040 = add i64 %storemerge249, 17
  store i64 %17040, i64* %3, align 8
  %17041 = inttoptr i64 %17039 to i64*
  %17042 = load i64, i64* %17041, align 8
  store i64 %17042, i64* %RAX.i3176, align 8
  %17043 = add i64 %storemerge249, 20
  store i64 %17043, i64* %3, align 8
  %17044 = inttoptr i64 %17042 to i64*
  %17045 = load i64, i64* %17044, align 8
  store i64 %17045, i64* %RAX.i3176, align 8
  %17046 = add i64 %17045, 4
  %17047 = add i64 %storemerge249, 23
  store i64 %17047, i64* %3, align 8
  %17048 = inttoptr i64 %17046 to i32*
  %17049 = load i32, i32* %17048, align 4
  %17050 = zext i32 %17049 to i64
  store i64 %17050, i64* %RCX.i2595, align 8
  %17051 = add i64 %storemerge249, 27
  store i64 %17051, i64* %3, align 8
  %17052 = load i64, i64* %17008, align 8
  store i64 %17052, i64* %RAX.i3176, align 8
  %17053 = add i64 %storemerge249, 30
  store i64 %17053, i64* %3, align 8
  %17054 = load i32, i32* %17012, align 4
  %17055 = zext i32 %17054 to i64
  store i64 %17055, i64* %RSI.i766, align 8
  store i8 0, i8* %19, align 1
  %17056 = and i32 %17054, 255
  %17057 = tail call i32 @llvm.ctpop.i32(i32 %17056)
  %17058 = trunc i32 %17057 to i8
  %17059 = and i8 %17058, 1
  %17060 = xor i8 %17059, 1
  store i8 %17060, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %17061 = icmp eq i32 %17054, 0
  %17062 = zext i1 %17061 to i8
  store i8 %17062, i8* %34, align 1
  %17063 = lshr i32 %17054, 31
  %17064 = trunc i32 %17063 to i8
  store i8 %17064, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %17065 = sext i32 %17054 to i64
  store i64 %17065, i64* %RDX.i2592, align 8
  %17066 = shl nsw i64 %17065, 3
  %17067 = add i64 %17052, %17066
  %17068 = add i64 %storemerge249, 40
  store i64 %17068, i64* %3, align 8
  %17069 = inttoptr i64 %17067 to i64*
  %17070 = load i64, i64* %17069, align 8
  store i64 %17070, i64* %RAX.i3176, align 8
  %17071 = load i64, i64* %RBP.i, align 8
  %17072 = add i64 %17071, -52
  %17073 = add i64 %storemerge249, 44
  store i64 %17073, i64* %3, align 8
  %17074 = inttoptr i64 %17072 to i32*
  %17075 = load i32, i32* %17074, align 4
  %17076 = sext i32 %17075 to i64
  store i64 %17076, i64* %RDX.i2592, align 8
  %17077 = shl nsw i64 %17076, 3
  %17078 = add i64 %17077, %17070
  %17079 = add i64 %storemerge249, 48
  store i64 %17079, i64* %3, align 8
  %17080 = inttoptr i64 %17078 to i64*
  %17081 = load i64, i64* %17080, align 8
  store i64 %17081, i64* %RAX.i3176, align 8
  %17082 = add i64 %17081, 4
  %17083 = add i64 %storemerge249, 51
  store i64 %17083, i64* %3, align 8
  %17084 = inttoptr i64 %17082 to i32*
  %17085 = load i32, i32* %17084, align 4
  %17086 = sub i32 %17049, %17085
  %17087 = zext i32 %17086 to i64
  store i64 %17087, i64* %RCX.i2595, align 8
  %17088 = lshr i32 %17086, 31
  %17089 = add i32 %17086, 128
  %17090 = icmp ult i32 %17086, -128
  %17091 = zext i1 %17090 to i8
  store i8 %17091, i8* %19, align 1
  %17092 = and i32 %17089, 255
  %17093 = tail call i32 @llvm.ctpop.i32(i32 %17092)
  %17094 = trunc i32 %17093 to i8
  %17095 = and i8 %17094, 1
  %17096 = xor i8 %17095, 1
  store i8 %17096, i8* %26, align 1
  %17097 = xor i32 %17089, %17086
  %17098 = lshr i32 %17097, 4
  %17099 = trunc i32 %17098 to i8
  %17100 = and i8 %17099, 1
  store i8 %17100, i8* %31, align 1
  %17101 = icmp eq i32 %17089, 0
  %17102 = zext i1 %17101 to i8
  store i8 %17102, i8* %34, align 1
  %17103 = lshr i32 %17089, 31
  %17104 = trunc i32 %17103 to i8
  store i8 %17104, i8* %37, align 1
  %17105 = xor i32 %17088, 1
  %17106 = xor i32 %17103, %17088
  %17107 = add nuw nsw i32 %17106, %17105
  %17108 = icmp eq i32 %17107, 2
  %17109 = zext i1 %17108 to i8
  store i8 %17109, i8* %43, align 1
  %17110 = icmp ne i8 %17104, 0
  %17111 = xor i1 %17110, %17108
  %.v679 = select i1 %17111, i64 60, i64 76
  %17112 = add i64 %storemerge249, %.v679
  store i64 %17112, i64* %3, align 8
  br i1 %17111, label %block_4590ea, label %block_.L_4590fa

block_4590ea:                                     ; preds = %block_.L_4590ae
  store i64 4294967168, i64* %RAX.i3176, align 8
  %17113 = add i64 %17071, -1336
  %17114 = add i64 %17112, 11
  store i64 %17114, i64* %3, align 8
  %17115 = inttoptr i64 %17113 to i32*
  store i32 -128, i32* %17115, align 4
  %17116 = load i64, i64* %3, align 8
  %17117 = add i64 %17116, 150
  store i64 %17117, i64* %3, align 8
  br label %block_.L_45918b

block_.L_4590fa:                                  ; preds = %block_.L_4590ae
  %17118 = add i64 %17071, -24
  %17119 = add i64 %17112, 4
  store i64 %17119, i64* %3, align 8
  %17120 = inttoptr i64 %17118 to i64*
  %17121 = load i64, i64* %17120, align 8
  store i64 %17121, i64* %RAX.i3176, align 8
  %17122 = add i64 %17071, -56
  %17123 = add i64 %17112, 7
  store i64 %17123, i64* %3, align 8
  %17124 = inttoptr i64 %17122 to i32*
  %17125 = load i32, i32* %17124, align 4
  %17126 = add i32 %17125, 1
  %17127 = zext i32 %17126 to i64
  store i64 %17127, i64* %RCX.i2595, align 8
  %17128 = icmp eq i32 %17125, -1
  %17129 = icmp eq i32 %17126, 0
  %17130 = or i1 %17128, %17129
  %17131 = zext i1 %17130 to i8
  store i8 %17131, i8* %19, align 1
  %17132 = and i32 %17126, 255
  %17133 = tail call i32 @llvm.ctpop.i32(i32 %17132)
  %17134 = trunc i32 %17133 to i8
  %17135 = and i8 %17134, 1
  %17136 = xor i8 %17135, 1
  store i8 %17136, i8* %26, align 1
  %17137 = xor i32 %17126, %17125
  %17138 = lshr i32 %17137, 4
  %17139 = trunc i32 %17138 to i8
  %17140 = and i8 %17139, 1
  store i8 %17140, i8* %31, align 1
  %17141 = zext i1 %17129 to i8
  store i8 %17141, i8* %34, align 1
  %17142 = lshr i32 %17126, 31
  %17143 = trunc i32 %17142 to i8
  store i8 %17143, i8* %37, align 1
  %17144 = lshr i32 %17125, 31
  %17145 = xor i32 %17142, %17144
  %17146 = add nuw nsw i32 %17145, %17142
  %17147 = icmp eq i32 %17146, 2
  %17148 = zext i1 %17147 to i8
  store i8 %17148, i8* %43, align 1
  %17149 = sext i32 %17126 to i64
  store i64 %17149, i64* %RDX.i2592, align 8
  %17150 = shl nsw i64 %17149, 3
  %17151 = add i64 %17121, %17150
  %17152 = add i64 %17112, 17
  store i64 %17152, i64* %3, align 8
  %17153 = inttoptr i64 %17151 to i64*
  %17154 = load i64, i64* %17153, align 8
  store i64 %17154, i64* %RAX.i3176, align 8
  %17155 = add i64 %17112, 20
  store i64 %17155, i64* %3, align 8
  %17156 = inttoptr i64 %17154 to i64*
  %17157 = load i64, i64* %17156, align 8
  store i64 %17157, i64* %RAX.i3176, align 8
  %17158 = add i64 %17157, 4
  %17159 = add i64 %17112, 23
  store i64 %17159, i64* %3, align 8
  %17160 = inttoptr i64 %17158 to i32*
  %17161 = load i32, i32* %17160, align 4
  %17162 = zext i32 %17161 to i64
  store i64 %17162, i64* %RCX.i2595, align 8
  %17163 = add i64 %17112, 27
  store i64 %17163, i64* %3, align 8
  %17164 = load i64, i64* %17120, align 8
  store i64 %17164, i64* %RAX.i3176, align 8
  %17165 = add i64 %17112, 30
  store i64 %17165, i64* %3, align 8
  %17166 = load i32, i32* %17124, align 4
  %17167 = zext i32 %17166 to i64
  store i64 %17167, i64* %RSI.i766, align 8
  store i8 0, i8* %19, align 1
  %17168 = and i32 %17166, 255
  %17169 = tail call i32 @llvm.ctpop.i32(i32 %17168)
  %17170 = trunc i32 %17169 to i8
  %17171 = and i8 %17170, 1
  %17172 = xor i8 %17171, 1
  store i8 %17172, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %17173 = icmp eq i32 %17166, 0
  %17174 = zext i1 %17173 to i8
  store i8 %17174, i8* %34, align 1
  %17175 = lshr i32 %17166, 31
  %17176 = trunc i32 %17175 to i8
  store i8 %17176, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %17177 = sext i32 %17166 to i64
  store i64 %17177, i64* %RDX.i2592, align 8
  %17178 = shl nsw i64 %17177, 3
  %17179 = add i64 %17164, %17178
  %17180 = add i64 %17112, 40
  store i64 %17180, i64* %3, align 8
  %17181 = inttoptr i64 %17179 to i64*
  %17182 = load i64, i64* %17181, align 8
  store i64 %17182, i64* %RAX.i3176, align 8
  %17183 = load i64, i64* %RBP.i, align 8
  %17184 = add i64 %17183, -52
  %17185 = add i64 %17112, 44
  store i64 %17185, i64* %3, align 8
  %17186 = inttoptr i64 %17184 to i32*
  %17187 = load i32, i32* %17186, align 4
  %17188 = sext i32 %17187 to i64
  store i64 %17188, i64* %RDX.i2592, align 8
  %17189 = shl nsw i64 %17188, 3
  %17190 = add i64 %17189, %17182
  %17191 = add i64 %17112, 48
  store i64 %17191, i64* %3, align 8
  %17192 = inttoptr i64 %17190 to i64*
  %17193 = load i64, i64* %17192, align 8
  store i64 %17193, i64* %RAX.i3176, align 8
  %17194 = add i64 %17193, 4
  %17195 = add i64 %17112, 51
  store i64 %17195, i64* %3, align 8
  %17196 = inttoptr i64 %17194 to i32*
  %17197 = load i32, i32* %17196, align 4
  %17198 = sub i32 %17161, %17197
  %17199 = zext i32 %17198 to i64
  store i64 %17199, i64* %RCX.i2595, align 8
  %17200 = lshr i32 %17198, 31
  %17201 = add i32 %17198, -127
  %17202 = icmp ult i32 %17198, 127
  %17203 = zext i1 %17202 to i8
  store i8 %17203, i8* %19, align 1
  %17204 = and i32 %17201, 255
  %17205 = tail call i32 @llvm.ctpop.i32(i32 %17204)
  %17206 = trunc i32 %17205 to i8
  %17207 = and i8 %17206, 1
  %17208 = xor i8 %17207, 1
  store i8 %17208, i8* %26, align 1
  %17209 = xor i32 %17198, 16
  %17210 = xor i32 %17209, %17201
  %17211 = lshr i32 %17210, 4
  %17212 = trunc i32 %17211 to i8
  %17213 = and i8 %17212, 1
  store i8 %17213, i8* %31, align 1
  %17214 = icmp eq i32 %17201, 0
  %17215 = zext i1 %17214 to i8
  store i8 %17215, i8* %34, align 1
  %17216 = lshr i32 %17201, 31
  %17217 = trunc i32 %17216 to i8
  store i8 %17217, i8* %37, align 1
  %17218 = xor i32 %17216, %17200
  %17219 = add nuw nsw i32 %17218, %17200
  %17220 = icmp eq i32 %17219, 2
  %17221 = zext i1 %17220 to i8
  store i8 %17221, i8* %43, align 1
  %17222 = icmp ne i8 %17217, 0
  %17223 = xor i1 %17222, %17220
  %17224 = or i1 %17214, %17223
  %.v680 = select i1 %17224, i64 76, i64 60
  %17225 = add i64 %17112, %.v680
  store i64 %17225, i64* %3, align 8
  br i1 %17224, label %block_.L_459146, label %block_459136

block_459136:                                     ; preds = %block_.L_4590fa
  store i64 127, i64* %RAX.i3176, align 8
  %17226 = add i64 %17183, -1340
  %17227 = add i64 %17225, 11
  store i64 %17227, i64* %3, align 8
  %17228 = inttoptr i64 %17226 to i32*
  store i32 127, i32* %17228, align 4
  %17229 = load i64, i64* %3, align 8
  %17230 = add i64 %17229, 62
  store i64 %17230, i64* %3, align 8
  br label %block_.L_45917f

block_.L_459146:                                  ; preds = %block_.L_4590fa
  %17231 = add i64 %17183, -24
  %17232 = add i64 %17225, 4
  store i64 %17232, i64* %3, align 8
  %17233 = inttoptr i64 %17231 to i64*
  %17234 = load i64, i64* %17233, align 8
  store i64 %17234, i64* %RAX.i3176, align 8
  %17235 = add i64 %17183, -56
  %17236 = add i64 %17225, 7
  store i64 %17236, i64* %3, align 8
  %17237 = inttoptr i64 %17235 to i32*
  %17238 = load i32, i32* %17237, align 4
  %17239 = add i32 %17238, 1
  %17240 = zext i32 %17239 to i64
  store i64 %17240, i64* %RCX.i2595, align 8
  %17241 = icmp eq i32 %17238, -1
  %17242 = icmp eq i32 %17239, 0
  %17243 = or i1 %17241, %17242
  %17244 = zext i1 %17243 to i8
  store i8 %17244, i8* %19, align 1
  %17245 = and i32 %17239, 255
  %17246 = tail call i32 @llvm.ctpop.i32(i32 %17245)
  %17247 = trunc i32 %17246 to i8
  %17248 = and i8 %17247, 1
  %17249 = xor i8 %17248, 1
  store i8 %17249, i8* %26, align 1
  %17250 = xor i32 %17239, %17238
  %17251 = lshr i32 %17250, 4
  %17252 = trunc i32 %17251 to i8
  %17253 = and i8 %17252, 1
  store i8 %17253, i8* %31, align 1
  %17254 = zext i1 %17242 to i8
  store i8 %17254, i8* %34, align 1
  %17255 = lshr i32 %17239, 31
  %17256 = trunc i32 %17255 to i8
  store i8 %17256, i8* %37, align 1
  %17257 = lshr i32 %17238, 31
  %17258 = xor i32 %17255, %17257
  %17259 = add nuw nsw i32 %17258, %17255
  %17260 = icmp eq i32 %17259, 2
  %17261 = zext i1 %17260 to i8
  store i8 %17261, i8* %43, align 1
  %17262 = sext i32 %17239 to i64
  store i64 %17262, i64* %RDX.i2592, align 8
  %17263 = shl nsw i64 %17262, 3
  %17264 = add i64 %17234, %17263
  %17265 = add i64 %17225, 17
  store i64 %17265, i64* %3, align 8
  %17266 = inttoptr i64 %17264 to i64*
  %17267 = load i64, i64* %17266, align 8
  store i64 %17267, i64* %RAX.i3176, align 8
  %17268 = add i64 %17225, 20
  store i64 %17268, i64* %3, align 8
  %17269 = inttoptr i64 %17267 to i64*
  %17270 = load i64, i64* %17269, align 8
  store i64 %17270, i64* %RAX.i3176, align 8
  %17271 = add i64 %17270, 4
  %17272 = add i64 %17225, 23
  store i64 %17272, i64* %3, align 8
  %17273 = inttoptr i64 %17271 to i32*
  %17274 = load i32, i32* %17273, align 4
  %17275 = zext i32 %17274 to i64
  store i64 %17275, i64* %RCX.i2595, align 8
  %17276 = add i64 %17225, 27
  store i64 %17276, i64* %3, align 8
  %17277 = load i64, i64* %17233, align 8
  store i64 %17277, i64* %RAX.i3176, align 8
  %17278 = add i64 %17225, 30
  store i64 %17278, i64* %3, align 8
  %17279 = load i32, i32* %17237, align 4
  %17280 = zext i32 %17279 to i64
  store i64 %17280, i64* %RSI.i766, align 8
  store i8 0, i8* %19, align 1
  %17281 = and i32 %17279, 255
  %17282 = tail call i32 @llvm.ctpop.i32(i32 %17281)
  %17283 = trunc i32 %17282 to i8
  %17284 = and i8 %17283, 1
  %17285 = xor i8 %17284, 1
  store i8 %17285, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %17286 = icmp eq i32 %17279, 0
  %17287 = zext i1 %17286 to i8
  store i8 %17287, i8* %34, align 1
  %17288 = lshr i32 %17279, 31
  %17289 = trunc i32 %17288 to i8
  store i8 %17289, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %17290 = sext i32 %17279 to i64
  store i64 %17290, i64* %RDX.i2592, align 8
  %17291 = shl nsw i64 %17290, 3
  %17292 = add i64 %17277, %17291
  %17293 = add i64 %17225, 40
  store i64 %17293, i64* %3, align 8
  %17294 = inttoptr i64 %17292 to i64*
  %17295 = load i64, i64* %17294, align 8
  store i64 %17295, i64* %RAX.i3176, align 8
  %17296 = load i64, i64* %RBP.i, align 8
  %17297 = add i64 %17296, -52
  %17298 = add i64 %17225, 44
  store i64 %17298, i64* %3, align 8
  %17299 = inttoptr i64 %17297 to i32*
  %17300 = load i32, i32* %17299, align 4
  %17301 = sext i32 %17300 to i64
  store i64 %17301, i64* %RDX.i2592, align 8
  %17302 = shl nsw i64 %17301, 3
  %17303 = add i64 %17302, %17295
  %17304 = add i64 %17225, 48
  store i64 %17304, i64* %3, align 8
  %17305 = inttoptr i64 %17303 to i64*
  %17306 = load i64, i64* %17305, align 8
  store i64 %17306, i64* %RAX.i3176, align 8
  %17307 = add i64 %17306, 4
  %17308 = add i64 %17225, 51
  store i64 %17308, i64* %3, align 8
  %17309 = inttoptr i64 %17307 to i32*
  %17310 = load i32, i32* %17309, align 4
  %17311 = sub i32 %17274, %17310
  %17312 = zext i32 %17311 to i64
  store i64 %17312, i64* %RCX.i2595, align 8
  %17313 = icmp ult i32 %17274, %17310
  %17314 = zext i1 %17313 to i8
  store i8 %17314, i8* %19, align 1
  %17315 = and i32 %17311, 255
  %17316 = tail call i32 @llvm.ctpop.i32(i32 %17315)
  %17317 = trunc i32 %17316 to i8
  %17318 = and i8 %17317, 1
  %17319 = xor i8 %17318, 1
  store i8 %17319, i8* %26, align 1
  %17320 = xor i32 %17310, %17274
  %17321 = xor i32 %17320, %17311
  %17322 = lshr i32 %17321, 4
  %17323 = trunc i32 %17322 to i8
  %17324 = and i8 %17323, 1
  store i8 %17324, i8* %31, align 1
  %17325 = icmp eq i32 %17311, 0
  %17326 = zext i1 %17325 to i8
  store i8 %17326, i8* %34, align 1
  %17327 = lshr i32 %17311, 31
  %17328 = trunc i32 %17327 to i8
  store i8 %17328, i8* %37, align 1
  %17329 = lshr i32 %17274, 31
  %17330 = lshr i32 %17310, 31
  %17331 = xor i32 %17330, %17329
  %17332 = xor i32 %17327, %17329
  %17333 = add nuw nsw i32 %17332, %17331
  %17334 = icmp eq i32 %17333, 2
  %17335 = zext i1 %17334 to i8
  store i8 %17335, i8* %43, align 1
  %17336 = add i64 %17296, -1340
  %17337 = add i64 %17225, 57
  store i64 %17337, i64* %3, align 8
  %17338 = inttoptr i64 %17336 to i32*
  store i32 %17311, i32* %17338, align 4
  %.pre393 = load i64, i64* %3, align 8
  br label %block_.L_45917f

block_.L_45917f:                                  ; preds = %block_.L_459146, %block_459136
  %17339 = phi i64 [ %.pre393, %block_.L_459146 ], [ %17230, %block_459136 ]
  %17340 = load i64, i64* %RBP.i, align 8
  %17341 = add i64 %17340, -1340
  %17342 = add i64 %17339, 6
  store i64 %17342, i64* %3, align 8
  %17343 = inttoptr i64 %17341 to i32*
  %17344 = load i32, i32* %17343, align 4
  %17345 = zext i32 %17344 to i64
  store i64 %17345, i64* %RAX.i3176, align 8
  %17346 = add i64 %17340, -1336
  %17347 = add i64 %17339, 12
  store i64 %17347, i64* %3, align 8
  %17348 = inttoptr i64 %17346 to i32*
  store i32 %17344, i32* %17348, align 4
  %.pre394 = load i64, i64* %3, align 8
  br label %block_.L_45918b

block_.L_45918b:                                  ; preds = %block_.L_45917f, %block_4590ea
  %17349 = phi i64 [ %.pre394, %block_.L_45917f ], [ %17117, %block_4590ea ]
  %17350 = load i64, i64* %RBP.i, align 8
  %17351 = add i64 %17350, -1336
  %17352 = add i64 %17349, 6
  store i64 %17352, i64* %3, align 8
  %17353 = inttoptr i64 %17351 to i32*
  %17354 = load i32, i32* %17353, align 4
  %17355 = zext i32 %17354 to i64
  store i64 %17355, i64* %RAX.i3176, align 8
  %17356 = add i64 %17350, -68
  %17357 = add i64 %17349, 9
  store i64 %17357, i64* %3, align 8
  %17358 = inttoptr i64 %17356 to i32*
  store i32 %17354, i32* %17358, align 4
  %17359 = load i64, i64* %RBP.i, align 8
  %17360 = add i64 %17359, -68
  %17361 = load i64, i64* %3, align 8
  %17362 = add i64 %17361, 4
  store i64 %17362, i64* %3, align 8
  %17363 = inttoptr i64 %17360 to i32*
  %17364 = load i32, i32* %17363, align 4
  store i8 0, i8* %19, align 1
  %17365 = and i32 %17364, 255
  %17366 = tail call i32 @llvm.ctpop.i32(i32 %17365)
  %17367 = trunc i32 %17366 to i8
  %17368 = and i8 %17367, 1
  %17369 = xor i8 %17368, 1
  store i8 %17369, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %17370 = icmp eq i32 %17364, 0
  %17371 = zext i1 %17370 to i8
  store i8 %17371, i8* %34, align 1
  %17372 = lshr i32 %17364, 31
  %17373 = trunc i32 %17372 to i8
  store i8 %17373, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v681 = select i1 %17370, i64 209, i64 10
  %17374 = add i64 %17361, %.v681
  store i64 %17374, i64* %3, align 8
  br i1 %17370, label %block_.L_459265, label %block_45919e

block_45919e:                                     ; preds = %block_.L_45918b
  store i64 2, i64* %RAX.i3176, align 8
  %17375 = add i64 %17374, 8
  store i64 %17375, i64* %3, align 8
  %17376 = load i32, i32* %17363, align 4
  %17377 = zext i32 %17376 to i64
  store i64 %17377, i64* %RCX.i2595, align 8
  %17378 = add i64 %17359, -1344
  %17379 = add i64 %17374, 14
  store i64 %17379, i64* %3, align 8
  %17380 = inttoptr i64 %17378 to i32*
  store i32 2, i32* %17380, align 4
  %17381 = load i32, i32* %ECX.i2572, align 4
  %17382 = zext i32 %17381 to i64
  %17383 = load i64, i64* %3, align 8
  store i64 %17382, i64* %RAX.i3176, align 8
  %17384 = sext i32 %17381 to i64
  %17385 = lshr i64 %17384, 32
  store i64 %17385, i64* %12675, align 8
  %17386 = load i64, i64* %RBP.i, align 8
  %17387 = add i64 %17386, -1344
  %17388 = add i64 %17383, 9
  store i64 %17388, i64* %3, align 8
  %17389 = inttoptr i64 %17387 to i32*
  %17390 = load i32, i32* %17389, align 4
  %17391 = zext i32 %17390 to i64
  store i64 %17391, i64* %RCX.i2595, align 8
  %17392 = add i64 %17383, 11
  store i64 %17392, i64* %3, align 8
  %17393 = sext i32 %17390 to i64
  %17394 = shl nuw i64 %17385, 32
  %17395 = or i64 %17394, %17382
  %17396 = sdiv i64 %17395, %17393
  %17397 = shl i64 %17396, 32
  %17398 = ashr exact i64 %17397, 32
  %17399 = icmp eq i64 %17396, %17398
  br i1 %17399, label %17402, label %17400

; <label>:17400:                                  ; preds = %block_45919e
  %17401 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %17392, %struct.Memory* %MEMORY.122)
  %.pre395 = load i32, i32* %EAX.i2586, align 4
  %.pre396 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit

; <label>:17402:                                  ; preds = %block_45919e
  %17403 = srem i64 %17395, %17393
  %17404 = and i64 %17396, 4294967295
  store i64 %17404, i64* %RAX.i3176, align 8
  %17405 = and i64 %17403, 4294967295
  store i64 %17405, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %17406 = trunc i64 %17396 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %17402, %17400
  %17407 = phi i64 [ %.pre396, %17400 ], [ %17392, %17402 ]
  %17408 = phi i32 [ %.pre395, %17400 ], [ %17406, %17402 ]
  %17409 = phi %struct.Memory* [ %17401, %17400 ], [ %MEMORY.122, %17402 ]
  %17410 = zext i32 %17408 to i64
  store i64 %17410, i64* %RDI.i732, align 8
  %17411 = add i64 %17407, -360887
  %17412 = add i64 %17407, 7
  %17413 = load i64, i64* %6, align 8
  %17414 = add i64 %17413, -8
  %17415 = inttoptr i64 %17414 to i64*
  store i64 %17412, i64* %17415, align 8
  store i64 %17414, i64* %6, align 8
  store i64 %17411, i64* %3, align 8
  %17416 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %17409)
  %17417 = load i64, i64* %RAX.i3176, align 8
  %17418 = load i64, i64* %3, align 8
  %17419 = trunc i64 %17417 to i32
  %17420 = add i32 %17419, 16384
  %17421 = zext i32 %17420 to i64
  store i64 %17421, i64* %RAX.i3176, align 8
  %17422 = icmp ugt i32 %17419, -16385
  %17423 = zext i1 %17422 to i8
  store i8 %17423, i8* %19, align 1
  %17424 = and i32 %17420, 255
  %17425 = tail call i32 @llvm.ctpop.i32(i32 %17424)
  %17426 = trunc i32 %17425 to i8
  %17427 = and i8 %17426, 1
  %17428 = xor i8 %17427, 1
  store i8 %17428, i8* %26, align 1
  %17429 = xor i32 %17420, %17419
  %17430 = lshr i32 %17429, 4
  %17431 = trunc i32 %17430 to i8
  %17432 = and i8 %17431, 1
  store i8 %17432, i8* %31, align 1
  %17433 = icmp eq i32 %17420, 0
  %17434 = zext i1 %17433 to i8
  store i8 %17434, i8* %34, align 1
  %17435 = lshr i32 %17420, 31
  %17436 = trunc i32 %17435 to i8
  store i8 %17436, i8* %37, align 1
  %17437 = lshr i32 %17419, 31
  %17438 = xor i32 %17435, %17437
  %17439 = add nuw nsw i32 %17438, %17435
  %17440 = icmp eq i32 %17439, 2
  %17441 = zext i1 %17440 to i8
  store i8 %17441, i8* %43, align 1
  %17442 = sext i32 %17420 to i64
  %17443 = lshr i64 %17442, 32
  store i64 %17443, i64* %12675, align 8
  %17444 = load i64, i64* %RBP.i, align 8
  %17445 = add i64 %17444, -68
  %17446 = add i64 %17418, 9
  store i64 %17446, i64* %3, align 8
  %17447 = inttoptr i64 %17445 to i32*
  %17448 = load i32, i32* %17447, align 4
  %17449 = sext i32 %17448 to i64
  %17450 = shl nuw i64 %17443, 32
  %17451 = or i64 %17450, %17421
  %17452 = sdiv i64 %17451, %17449
  %17453 = shl i64 %17452, 32
  %17454 = ashr exact i64 %17453, 32
  %17455 = icmp eq i64 %17452, %17454
  br i1 %17455, label %17458, label %17456

; <label>:17456:                                  ; preds = %routine_idivl__ecx.exit
  %17457 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %17446, %struct.Memory* %17416)
  %.pre397 = load i64, i64* %RBP.i, align 8
  %.pre398 = load i32, i32* %EAX.i2586, align 4
  %.pre399 = load i64, i64* %3, align 8
  br label %routine_idivl_MINUS0x44__rbp_.exit

; <label>:17458:                                  ; preds = %routine_idivl__ecx.exit
  %17459 = srem i64 %17451, %17449
  %17460 = and i64 %17452, 4294967295
  store i64 %17460, i64* %RAX.i3176, align 8
  %17461 = and i64 %17459, 4294967295
  store i64 %17461, i64* %RDX.i2592, align 8
  store i8 0, i8* %19, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %17462 = trunc i64 %17452 to i32
  br label %routine_idivl_MINUS0x44__rbp_.exit

routine_idivl_MINUS0x44__rbp_.exit:               ; preds = %17458, %17456
  %17463 = phi i64 [ %.pre399, %17456 ], [ %17446, %17458 ]
  %17464 = phi i32 [ %.pre398, %17456 ], [ %17462, %17458 ]
  %17465 = phi i64 [ %.pre397, %17456 ], [ %17444, %17458 ]
  %17466 = phi %struct.Memory* [ %17457, %17456 ], [ %17416, %17458 ]
  %17467 = add i64 %17465, -60
  %17468 = add i64 %17463, 3
  store i64 %17468, i64* %3, align 8
  %17469 = inttoptr i64 %17467 to i32*
  store i32 %17464, i32* %17469, align 4
  %17470 = load i64, i64* %RBP.i, align 8
  %17471 = add i64 %17470, -64
  %17472 = load i64, i64* %3, align 8
  %17473 = add i64 %17472, 3
  store i64 %17473, i64* %3, align 8
  %17474 = inttoptr i64 %17471 to i32*
  %17475 = load i32, i32* %17474, align 4
  %17476 = zext i32 %17475 to i64
  store i64 %17476, i64* %RAX.i3176, align 8
  %17477 = add i64 %17470, -60
  %17478 = add i64 %17472, 7
  store i64 %17478, i64* %3, align 8
  %17479 = inttoptr i64 %17477 to i32*
  %17480 = load i32, i32* %17479, align 4
  %17481 = mul i32 %17480, %17475
  %17482 = add i32 %17481, 32
  %17483 = zext i32 %17482 to i64
  %17484 = shl nuw i64 %17483, 32
  %17485 = ashr i64 %17484, 37
  %17486 = lshr i64 %17485, 1
  %17487 = and i64 %17486, 4294967295
  store i64 %17487, i64* %RAX.i3176, align 8
  %17488 = trunc i64 %17486 to i32
  %17489 = add i32 %17488, 1024
  %17490 = icmp ult i32 %17488, -1024
  %17491 = zext i1 %17490 to i8
  store i8 %17491, i8* %19, align 1
  %17492 = and i32 %17489, 255
  %17493 = tail call i32 @llvm.ctpop.i32(i32 %17492)
  %17494 = trunc i32 %17493 to i8
  %17495 = and i8 %17494, 1
  %17496 = xor i8 %17495, 1
  store i8 %17496, i8* %26, align 1
  %17497 = xor i32 %17489, %17488
  %17498 = lshr i32 %17497, 4
  %17499 = trunc i32 %17498 to i8
  %17500 = and i8 %17499, 1
  store i8 %17500, i8* %31, align 1
  %17501 = icmp eq i32 %17489, 0
  %17502 = zext i1 %17501 to i8
  store i8 %17502, i8* %34, align 1
  %17503 = lshr i32 %17489, 31
  %17504 = trunc i32 %17503 to i8
  store i8 %17504, i8* %37, align 1
  %17505 = lshr i64 %17485, 32
  %17506 = trunc i64 %17505 to i32
  %17507 = and i32 %17506, 1
  %17508 = xor i32 %17507, 1
  %17509 = xor i32 %17503, %17507
  %17510 = add nuw nsw i32 %17509, %17508
  %17511 = icmp eq i32 %17510, 2
  %17512 = zext i1 %17511 to i8
  store i8 %17512, i8* %43, align 1
  %17513 = icmp ne i8 %17504, 0
  %17514 = xor i1 %17513, %17511
  %.v682 = select i1 %17514, i64 24, i64 40
  %17515 = add i64 %17472, %.v682
  store i64 %17515, i64* %3, align 8
  br i1 %17514, label %block_4591e2, label %block_.L_4591f2

block_4591e2:                                     ; preds = %routine_idivl_MINUS0x44__rbp_.exit
  store i64 4294966272, i64* %RAX.i3176, align 8
  %17516 = load i64, i64* %RBP.i, align 8
  %17517 = add i64 %17516, -1348
  %17518 = add i64 %17515, 11
  store i64 %17518, i64* %3, align 8
  %17519 = inttoptr i64 %17517 to i32*
  store i32 -1024, i32* %17519, align 4
  %17520 = load i64, i64* %3, align 8
  %17521 = add i64 %17520, 76
  store i64 %17521, i64* %3, align 8
  br label %block_.L_459239

block_.L_4591f2:                                  ; preds = %routine_idivl_MINUS0x44__rbp_.exit
  %17522 = load i64, i64* %RBP.i, align 8
  %17523 = add i64 %17522, -64
  %17524 = add i64 %17515, 3
  store i64 %17524, i64* %3, align 8
  %17525 = inttoptr i64 %17523 to i32*
  %17526 = load i32, i32* %17525, align 4
  %17527 = zext i32 %17526 to i64
  store i64 %17527, i64* %RAX.i3176, align 8
  %17528 = add i64 %17522, -60
  %17529 = add i64 %17515, 7
  store i64 %17529, i64* %3, align 8
  %17530 = inttoptr i64 %17528 to i32*
  %17531 = load i32, i32* %17530, align 4
  %17532 = mul i32 %17531, %17526
  %17533 = add i32 %17532, 32
  %17534 = zext i32 %17533 to i64
  %17535 = shl nuw i64 %17534, 32
  %17536 = ashr i64 %17535, 37
  %17537 = lshr i64 %17536, 1
  %17538 = and i64 %17537, 4294967295
  store i64 %17538, i64* %RAX.i3176, align 8
  %17539 = trunc i64 %17537 to i32
  %17540 = add i32 %17539, -1023
  %17541 = icmp ult i32 %17539, 1023
  %17542 = zext i1 %17541 to i8
  store i8 %17542, i8* %19, align 1
  %17543 = and i32 %17540, 255
  %17544 = tail call i32 @llvm.ctpop.i32(i32 %17543)
  %17545 = trunc i32 %17544 to i8
  %17546 = and i8 %17545, 1
  %17547 = xor i8 %17546, 1
  store i8 %17547, i8* %26, align 1
  %17548 = xor i32 %17539, 16
  %17549 = xor i32 %17548, %17540
  %17550 = lshr i32 %17549, 4
  %17551 = trunc i32 %17550 to i8
  %17552 = and i8 %17551, 1
  store i8 %17552, i8* %31, align 1
  %17553 = icmp eq i32 %17540, 0
  %17554 = zext i1 %17553 to i8
  store i8 %17554, i8* %34, align 1
  %17555 = lshr i32 %17540, 31
  %17556 = trunc i32 %17555 to i8
  store i8 %17556, i8* %37, align 1
  %17557 = lshr i64 %17536, 32
  %17558 = trunc i64 %17557 to i32
  %17559 = and i32 %17558, 1
  %17560 = xor i32 %17555, %17559
  %17561 = add nuw nsw i32 %17560, %17559
  %17562 = icmp eq i32 %17561, 2
  %17563 = zext i1 %17562 to i8
  store i8 %17563, i8* %43, align 1
  %17564 = icmp ne i8 %17556, 0
  %17565 = xor i1 %17564, %17562
  %17566 = or i1 %17553, %17565
  %.v683 = select i1 %17566, i64 40, i64 24
  %17567 = add i64 %17515, %.v683
  store i64 %17567, i64* %3, align 8
  br i1 %17566, label %block_.L_45921a, label %block_45920a

block_45920a:                                     ; preds = %block_.L_4591f2
  store i64 1023, i64* %RAX.i3176, align 8
  %17568 = load i64, i64* %RBP.i, align 8
  %17569 = add i64 %17568, -1352
  %17570 = add i64 %17567, 11
  store i64 %17570, i64* %3, align 8
  %17571 = inttoptr i64 %17569 to i32*
  store i32 1023, i32* %17571, align 4
  %17572 = load i64, i64* %3, align 8
  %17573 = add i64 %17572, 24
  store i64 %17573, i64* %3, align 8
  br label %block_.L_45922d

block_.L_45921a:                                  ; preds = %block_.L_4591f2
  %17574 = load i64, i64* %RBP.i, align 8
  %17575 = add i64 %17574, -64
  %17576 = add i64 %17567, 3
  store i64 %17576, i64* %3, align 8
  %17577 = inttoptr i64 %17575 to i32*
  %17578 = load i32, i32* %17577, align 4
  %17579 = zext i32 %17578 to i64
  store i64 %17579, i64* %RAX.i3176, align 8
  %17580 = add i64 %17574, -60
  %17581 = add i64 %17567, 7
  store i64 %17581, i64* %3, align 8
  %17582 = inttoptr i64 %17580 to i32*
  %17583 = load i32, i32* %17582, align 4
  %17584 = mul i32 %17583, %17578
  %17585 = add i32 %17584, 32
  %17586 = zext i32 %17585 to i64
  %17587 = shl nuw i64 %17586, 32
  %17588 = ashr i64 %17587, 37
  %17589 = lshr i64 %17588, 1
  %17590 = trunc i64 %17588 to i8
  %17591 = and i8 %17590, 1
  %17592 = trunc i64 %17589 to i32
  %17593 = and i64 %17589, 4294967295
  store i64 %17593, i64* %RAX.i3176, align 8
  store i8 %17591, i8* %19, align 1
  %17594 = and i32 %17592, 255
  %17595 = tail call i32 @llvm.ctpop.i32(i32 %17594)
  %17596 = trunc i32 %17595 to i8
  %17597 = and i8 %17596, 1
  %17598 = xor i8 %17597, 1
  store i8 %17598, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %17599 = icmp eq i32 %17592, 0
  %17600 = zext i1 %17599 to i8
  store i8 %17600, i8* %34, align 1
  %17601 = lshr i64 %17588, 32
  %17602 = trunc i64 %17601 to i8
  %17603 = and i8 %17602, 1
  store i8 %17603, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %17604 = add i64 %17574, -1352
  %17605 = trunc i64 %17589 to i32
  %17606 = add i64 %17567, 19
  store i64 %17606, i64* %3, align 8
  %17607 = inttoptr i64 %17604 to i32*
  store i32 %17605, i32* %17607, align 4
  %.pre400 = load i64, i64* %3, align 8
  br label %block_.L_45922d

block_.L_45922d:                                  ; preds = %block_.L_45921a, %block_45920a
  %17608 = phi i64 [ %.pre400, %block_.L_45921a ], [ %17573, %block_45920a ]
  %17609 = load i64, i64* %RBP.i, align 8
  %17610 = add i64 %17609, -1352
  %17611 = add i64 %17608, 6
  store i64 %17611, i64* %3, align 8
  %17612 = inttoptr i64 %17610 to i32*
  %17613 = load i32, i32* %17612, align 4
  %17614 = zext i32 %17613 to i64
  store i64 %17614, i64* %RAX.i3176, align 8
  %17615 = add i64 %17609, -1348
  %17616 = add i64 %17608, 12
  store i64 %17616, i64* %3, align 8
  %17617 = inttoptr i64 %17615 to i32*
  store i32 %17613, i32* %17617, align 4
  %.pre401 = load i64, i64* %3, align 8
  br label %block_.L_459239

block_.L_459239:                                  ; preds = %block_.L_45922d, %block_4591e2
  %17618 = phi i64 [ %.pre401, %block_.L_45922d ], [ %17521, %block_4591e2 ]
  %17619 = load i64, i64* %RBP.i, align 8
  %17620 = add i64 %17619, -1348
  %17621 = add i64 %17618, 6
  store i64 %17621, i64* %3, align 8
  %17622 = inttoptr i64 %17620 to i32*
  %17623 = load i32, i32* %17622, align 4
  %17624 = zext i32 %17623 to i64
  store i64 %17624, i64* %RAX.i3176, align 8
  %17625 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %17626 = add i64 %17625, 72016
  store i64 %17626, i64* %RCX.i2595, align 8
  %17627 = icmp ugt i64 %17625, -72017
  %17628 = zext i1 %17627 to i8
  store i8 %17628, i8* %19, align 1
  %17629 = trunc i64 %17626 to i32
  %17630 = and i32 %17629, 255
  %17631 = tail call i32 @llvm.ctpop.i32(i32 %17630)
  %17632 = trunc i32 %17631 to i8
  %17633 = and i8 %17632, 1
  %17634 = xor i8 %17633, 1
  store i8 %17634, i8* %26, align 1
  %17635 = xor i64 %17625, 16
  %17636 = xor i64 %17635, %17626
  %17637 = lshr i64 %17636, 4
  %17638 = trunc i64 %17637 to i8
  %17639 = and i8 %17638, 1
  store i8 %17639, i8* %31, align 1
  %17640 = icmp eq i64 %17626, 0
  %17641 = zext i1 %17640 to i8
  store i8 %17641, i8* %34, align 1
  %17642 = lshr i64 %17626, 63
  %17643 = trunc i64 %17642 to i8
  store i8 %17643, i8* %37, align 1
  %17644 = lshr i64 %17625, 63
  %17645 = xor i64 %17642, %17644
  %17646 = add nuw nsw i64 %17645, %17642
  %17647 = icmp eq i64 %17646, 2
  %17648 = zext i1 %17647 to i8
  store i8 %17648, i8* %43, align 1
  %17649 = add i64 %17619, -56
  %17650 = add i64 %17618, 25
  store i64 %17650, i64* %3, align 8
  %17651 = inttoptr i64 %17649 to i32*
  %17652 = load i32, i32* %17651, align 4
  %17653 = sext i32 %17652 to i64
  %17654 = mul nsw i64 %17653, 60
  store i64 %17654, i64* %RDX.i2592, align 8
  %17655 = lshr i64 %17654, 63
  %17656 = add i64 %17654, %17626
  store i64 %17656, i64* %RCX.i2595, align 8
  %17657 = icmp ult i64 %17656, %17626
  %17658 = icmp ult i64 %17656, %17654
  %17659 = or i1 %17657, %17658
  %17660 = zext i1 %17659 to i8
  store i8 %17660, i8* %19, align 1
  %17661 = trunc i64 %17656 to i32
  %17662 = and i32 %17661, 255
  %17663 = tail call i32 @llvm.ctpop.i32(i32 %17662)
  %17664 = trunc i32 %17663 to i8
  %17665 = and i8 %17664, 1
  %17666 = xor i8 %17665, 1
  store i8 %17666, i8* %26, align 1
  %17667 = xor i64 %17654, %17626
  %17668 = xor i64 %17667, %17656
  %17669 = lshr i64 %17668, 4
  %17670 = trunc i64 %17669 to i8
  %17671 = and i8 %17670, 1
  store i8 %17671, i8* %31, align 1
  %17672 = icmp eq i64 %17656, 0
  %17673 = zext i1 %17672 to i8
  store i8 %17673, i8* %34, align 1
  %17674 = lshr i64 %17656, 63
  %17675 = trunc i64 %17674 to i8
  store i8 %17675, i8* %37, align 1
  %17676 = xor i64 %17674, %17642
  %17677 = xor i64 %17674, %17655
  %17678 = add nuw nsw i64 %17676, %17677
  %17679 = icmp eq i64 %17678, 2
  %17680 = zext i1 %17679 to i8
  store i8 %17680, i8* %43, align 1
  %17681 = load i64, i64* %RBP.i, align 8
  %17682 = add i64 %17681, -52
  %17683 = add i64 %17618, 36
  store i64 %17683, i64* %3, align 8
  %17684 = inttoptr i64 %17682 to i32*
  %17685 = load i32, i32* %17684, align 4
  %17686 = sext i32 %17685 to i64
  store i64 %17686, i64* %RDX.i2592, align 8
  %17687 = shl nsw i64 %17686, 2
  %17688 = add i64 %17687, %17656
  %17689 = load i32, i32* %EAX.i2586, align 4
  %17690 = add i64 %17618, 39
  store i64 %17690, i64* %3, align 8
  %17691 = inttoptr i64 %17688 to i32*
  store i32 %17689, i32* %17691, align 4
  %17692 = load i64, i64* %3, align 8
  %17693 = add i64 %17692, 41
  store i64 %17693, i64* %3, align 8
  br label %block_.L_459289

block_.L_459265:                                  ; preds = %block_.L_45918b
  %17694 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %17695 = add i64 %17694, 72016
  store i64 %17695, i64* %RAX.i3176, align 8
  %17696 = icmp ugt i64 %17694, -72017
  %17697 = zext i1 %17696 to i8
  store i8 %17697, i8* %19, align 1
  %17698 = trunc i64 %17695 to i32
  %17699 = and i32 %17698, 255
  %17700 = tail call i32 @llvm.ctpop.i32(i32 %17699)
  %17701 = trunc i32 %17700 to i8
  %17702 = and i8 %17701, 1
  %17703 = xor i8 %17702, 1
  store i8 %17703, i8* %26, align 1
  %17704 = xor i64 %17694, 16
  %17705 = xor i64 %17704, %17695
  %17706 = lshr i64 %17705, 4
  %17707 = trunc i64 %17706 to i8
  %17708 = and i8 %17707, 1
  store i8 %17708, i8* %31, align 1
  %17709 = icmp eq i64 %17695, 0
  %17710 = zext i1 %17709 to i8
  store i8 %17710, i8* %34, align 1
  %17711 = lshr i64 %17695, 63
  %17712 = trunc i64 %17711 to i8
  store i8 %17712, i8* %37, align 1
  %17713 = lshr i64 %17694, 63
  %17714 = xor i64 %17711, %17713
  %17715 = add nuw nsw i64 %17714, %17711
  %17716 = icmp eq i64 %17715, 2
  %17717 = zext i1 %17716 to i8
  store i8 %17717, i8* %43, align 1
  %17718 = add i64 %17359, -56
  %17719 = add i64 %17374, 18
  store i64 %17719, i64* %3, align 8
  %17720 = inttoptr i64 %17718 to i32*
  %17721 = load i32, i32* %17720, align 4
  %17722 = sext i32 %17721 to i64
  %17723 = mul nsw i64 %17722, 60
  store i64 %17723, i64* %RCX.i2595, align 8
  %17724 = lshr i64 %17723, 63
  %17725 = add i64 %17723, %17695
  store i64 %17725, i64* %RAX.i3176, align 8
  %17726 = icmp ult i64 %17725, %17695
  %17727 = icmp ult i64 %17725, %17723
  %17728 = or i1 %17726, %17727
  %17729 = zext i1 %17728 to i8
  store i8 %17729, i8* %19, align 1
  %17730 = trunc i64 %17725 to i32
  %17731 = and i32 %17730, 255
  %17732 = tail call i32 @llvm.ctpop.i32(i32 %17731)
  %17733 = trunc i32 %17732 to i8
  %17734 = and i8 %17733, 1
  %17735 = xor i8 %17734, 1
  store i8 %17735, i8* %26, align 1
  %17736 = xor i64 %17723, %17695
  %17737 = xor i64 %17736, %17725
  %17738 = lshr i64 %17737, 4
  %17739 = trunc i64 %17738 to i8
  %17740 = and i8 %17739, 1
  store i8 %17740, i8* %31, align 1
  %17741 = icmp eq i64 %17725, 0
  %17742 = zext i1 %17741 to i8
  store i8 %17742, i8* %34, align 1
  %17743 = lshr i64 %17725, 63
  %17744 = trunc i64 %17743 to i8
  store i8 %17744, i8* %37, align 1
  %17745 = xor i64 %17743, %17711
  %17746 = xor i64 %17743, %17724
  %17747 = add nuw nsw i64 %17745, %17746
  %17748 = icmp eq i64 %17747, 2
  %17749 = zext i1 %17748 to i8
  store i8 %17749, i8* %43, align 1
  %17750 = load i64, i64* %RBP.i, align 8
  %17751 = add i64 %17750, -52
  %17752 = add i64 %17374, 29
  store i64 %17752, i64* %3, align 8
  %17753 = inttoptr i64 %17751 to i32*
  %17754 = load i32, i32* %17753, align 4
  %17755 = sext i32 %17754 to i64
  store i64 %17755, i64* %RCX.i2595, align 8
  %17756 = shl nsw i64 %17755, 2
  %17757 = add i64 %17756, %17725
  %17758 = add i64 %17374, 36
  store i64 %17758, i64* %3, align 8
  %17759 = inttoptr i64 %17757 to i32*
  store i32 9999, i32* %17759, align 4
  %.pre402 = load i64, i64* %3, align 8
  br label %block_.L_459289

block_.L_459289:                                  ; preds = %block_.L_459265, %block_.L_459239
  %17760 = phi i64 [ %.pre402, %block_.L_459265 ], [ %17693, %block_.L_459239 ]
  %MEMORY.135 = phi %struct.Memory* [ %MEMORY.122, %block_.L_459265 ], [ %17466, %block_.L_459239 ]
  %17761 = load i64, i64* %RBP.i, align 8
  %17762 = add i64 %17761, -52
  %17763 = add i64 %17760, 8
  store i64 %17763, i64* %3, align 8
  %17764 = inttoptr i64 %17762 to i32*
  %17765 = load i32, i32* %17764, align 4
  %17766 = add i32 %17765, 1
  %17767 = zext i32 %17766 to i64
  store i64 %17767, i64* %RAX.i3176, align 8
  %17768 = icmp eq i32 %17765, -1
  %17769 = icmp eq i32 %17766, 0
  %17770 = or i1 %17768, %17769
  %17771 = zext i1 %17770 to i8
  store i8 %17771, i8* %19, align 1
  %17772 = and i32 %17766, 255
  %17773 = tail call i32 @llvm.ctpop.i32(i32 %17772)
  %17774 = trunc i32 %17773 to i8
  %17775 = and i8 %17774, 1
  %17776 = xor i8 %17775, 1
  store i8 %17776, i8* %26, align 1
  %17777 = xor i32 %17766, %17765
  %17778 = lshr i32 %17777, 4
  %17779 = trunc i32 %17778 to i8
  %17780 = and i8 %17779, 1
  store i8 %17780, i8* %31, align 1
  %17781 = zext i1 %17769 to i8
  store i8 %17781, i8* %34, align 1
  %17782 = lshr i32 %17766, 31
  %17783 = trunc i32 %17782 to i8
  store i8 %17783, i8* %37, align 1
  %17784 = lshr i32 %17765, 31
  %17785 = xor i32 %17782, %17784
  %17786 = add nuw nsw i32 %17785, %17782
  %17787 = icmp eq i32 %17786, 2
  %17788 = zext i1 %17787 to i8
  store i8 %17788, i8* %43, align 1
  %17789 = add i64 %17760, 14
  store i64 %17789, i64* %3, align 8
  store i32 %17766, i32* %17764, align 4
  %17790 = load i64, i64* %3, align 8
  %17791 = add i64 %17790, -1126
  store i64 %17791, i64* %3, align 8
  br label %block_.L_458e31

block_.L_45929c:                                  ; preds = %block_.L_458e31
  %17792 = add i64 %16227, 8
  store i64 %17792, i64* %3, align 8
  %17793 = load i32, i32* %16193, align 4
  %17794 = add i32 %17793, 2
  %17795 = zext i32 %17794 to i64
  store i64 %17795, i64* %RAX.i3176, align 8
  %17796 = icmp ugt i32 %17793, -3
  %17797 = zext i1 %17796 to i8
  store i8 %17797, i8* %19, align 1
  %17798 = and i32 %17794, 255
  %17799 = tail call i32 @llvm.ctpop.i32(i32 %17798)
  %17800 = trunc i32 %17799 to i8
  %17801 = and i8 %17800, 1
  %17802 = xor i8 %17801, 1
  store i8 %17802, i8* %26, align 1
  %17803 = xor i32 %17794, %17793
  %17804 = lshr i32 %17803, 4
  %17805 = trunc i32 %17804 to i8
  %17806 = and i8 %17805, 1
  store i8 %17806, i8* %31, align 1
  %17807 = icmp eq i32 %17794, 0
  %17808 = zext i1 %17807 to i8
  store i8 %17808, i8* %34, align 1
  %17809 = lshr i32 %17794, 31
  %17810 = trunc i32 %17809 to i8
  store i8 %17810, i8* %37, align 1
  %17811 = lshr i32 %17793, 31
  %17812 = xor i32 %17809, %17811
  %17813 = add nuw nsw i32 %17812, %17809
  %17814 = icmp eq i32 %17813, 2
  %17815 = zext i1 %17814 to i8
  store i8 %17815, i8* %43, align 1
  %17816 = add i64 %16227, 14
  store i64 %17816, i64* %3, align 8
  store i32 %17794, i32* %16193, align 4
  %17817 = load i64, i64* %3, align 8
  %17818 = add i64 %17817, -1183
  store i64 %17818, i64* %3, align 8
  br label %block_.L_458e0b

block_.L_4592af:                                  ; preds = %block_.L_458e0b
  %17819 = add i64 %16179, 5
  store i64 %17819, i64* %3, align 8
  br label %block_.L_4592b4

block_.L_4592b4:                                  ; preds = %block_.L_458bdf, %block_.L_4592af
  %17820 = phi i64 [ %15496, %block_.L_458bdf ], [ %17819, %block_.L_4592af ]
  %MEMORY.136 = phi %struct.Memory* [ %12723, %block_.L_458bdf ], [ %MEMORY.121, %block_.L_4592af ]
  %17821 = load i64, i64* %6, align 8
  %17822 = add i64 %17821, 1352
  store i64 %17822, i64* %6, align 8
  %17823 = icmp ugt i64 %17821, -1353
  %17824 = zext i1 %17823 to i8
  store i8 %17824, i8* %19, align 1
  %17825 = trunc i64 %17822 to i32
  %17826 = and i32 %17825, 255
  %17827 = tail call i32 @llvm.ctpop.i32(i32 %17826)
  %17828 = trunc i32 %17827 to i8
  %17829 = and i8 %17828, 1
  %17830 = xor i8 %17829, 1
  store i8 %17830, i8* %26, align 1
  %17831 = xor i64 %17822, %17821
  %17832 = lshr i64 %17831, 4
  %17833 = trunc i64 %17832 to i8
  %17834 = and i8 %17833, 1
  store i8 %17834, i8* %31, align 1
  %17835 = icmp eq i64 %17822, 0
  %17836 = zext i1 %17835 to i8
  store i8 %17836, i8* %34, align 1
  %17837 = lshr i64 %17822, 63
  %17838 = trunc i64 %17837 to i8
  store i8 %17838, i8* %37, align 1
  %17839 = lshr i64 %17821, 63
  %17840 = xor i64 %17837, %17839
  %17841 = add nuw nsw i64 %17840, %17837
  %17842 = icmp eq i64 %17841, 2
  %17843 = zext i1 %17842 to i8
  store i8 %17843, i8* %43, align 1
  %17844 = add i64 %17820, 8
  store i64 %17844, i64* %3, align 8
  %17845 = add i64 %17821, 1360
  %17846 = inttoptr i64 %17822 to i64*
  %17847 = load i64, i64* %17846, align 8
  store i64 %17847, i64* %RBX.i133, align 8
  store i64 %17845, i64* %6, align 8
  %17848 = add i64 %17820, 9
  store i64 %17848, i64* %3, align 8
  %17849 = add i64 %17821, 1368
  %17850 = inttoptr i64 %17845 to i64*
  %17851 = load i64, i64* %17850, align 8
  store i64 %17851, i64* %RBP.i, align 8
  store i64 %17849, i64* %6, align 8
  %17852 = add i64 %17820, 10
  store i64 %17852, i64* %3, align 8
  %17853 = inttoptr i64 %17849 to i64*
  %17854 = load i64, i64* %17853, align 8
  store i64 %17854, i64* %3, align 8
  %17855 = add i64 %17821, 1376
  store i64 %17855, i64* %6, align 8
  ret %struct.Memory* %MEMORY.136
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x548___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -1352
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 1352
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %28
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x18__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = bitcast i64* %RSI to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11ad0__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 72400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_455653(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x18__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x18__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x28__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4556ef(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x1c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4556ea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1c__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x20__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl___rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = bitcast i64* %RAX to i32**
  %6 = load i32*, i32** %5, align 8
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = load i32, i32* %6, align 4
  %10 = sub i32 %4, %9
  %11 = icmp ult i32 %4, %9
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %9, %4
  %21 = xor i32 %20, %10
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i32 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %10, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %4, 31
  %33 = lshr i32 %9, 31
  %34 = xor i32 %33, %32
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4556e5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x190c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6412
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x1c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4556c2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1980__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4556e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1988__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4556e5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4556ea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x722cb0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x722cb0_type* @G_0x722cb0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x47c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_455719(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x484__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_455f5a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x20__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18fc__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -72
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x48__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_455f55(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18f8__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_455f42(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11ad0__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_455d17(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1978__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6520
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl___rax__rcx_1____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x4__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.abs_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rdx____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_0x4__rdx____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_455a7d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x8___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RDX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rsi_8____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x60__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___r8__rsi_8____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rsi____r9w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = bitcast i64* %RSI to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %R9W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x650__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 1616
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi__r10_8____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r9w____rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = bitcast i64* %RSI to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %R9W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rsi____r9w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %R9W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r9w__0x2__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %R9W, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rsi__r10_2____r9w(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %R10, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i16*
  %11 = load i16, i16* %10, align 2
  store i16 %11, i16* %R9W, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x640__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 1600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__r9w____rsi__r10_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9W = bitcast %union.anon* %3 to i16*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %R10, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %R9W, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 5
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x20__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1960__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__edi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %6 = load i32, i32* %R11D, align 4
  %7 = load i32, i32* %EAX, align 4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = add i32 %7, %6
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %5, align 8
  %12 = icmp ult i32 %10, %6
  %13 = icmp ult i32 %10, %7
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %7, %6
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %6, 31
  %36 = lshr i32 %7, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__r11d___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i32, i32* %R11D, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x648__r10____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 1608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___r10____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = bitcast i64* %R10 to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___r10__rbx_8____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %RBX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi____r10__rbx_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %RBX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %RSI, align 8
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %6 to i64*
  store i64 %7, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -104
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__r10____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18e8__rsi____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x1300__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 4864
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_455d12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x78__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -120
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x7c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -124
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x7c__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -124
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x4___r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R11D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ugt i32 %5, -5
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -128
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -5
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_455f2f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rax____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x650__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1616
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %DX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rax____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx__0x2__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %DX, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rax__rcx_2____dx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i16*
  %11 = load i16, i16* %10, align 2
  store i16 %11, i16* %DX, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x640__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %DX, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1960__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x648__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 1608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RCX to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rsi_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax____rcx__rsi_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %RAX, align 8
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %6 to i64*
  store i64 %7, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18e8__rax____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__0x1300__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 4864
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_455f34(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45574c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_455f47(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_455720(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_455f5a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_455f81(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_457a4f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x84__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -132
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x84__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_457a4a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -136
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x88__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_457a37(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4569a9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 2
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RCX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %.lobit = lshr exact i32 %7, 1
  %13 = trunc i32 %.lobit to i8
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45602f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = or i64 %3, 1
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %RAX, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %16, align 1
  %17 = lshr i32 %7, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x94__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -148
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45603b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0xfffffffe___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967294
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 254
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp ult i32 %6, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %6, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x94__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x90__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rdx__rcx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 2
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %.lobit = lshr exact i32 %7, 1
  %13 = trunc i32 %.lobit to i8
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xa0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456076(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -164
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456082(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xa0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rcx____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = load i16, i16* %5, align 2
  store i16 %8, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x650__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 1616
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdi_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i16**
  %5 = load i16*, i16** %4, align 8
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i16 %6, i16* %5, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x20__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1968__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6504
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4560ef(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4560fb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xb0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456136(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -196
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456142(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xc0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw_0x2__rcx____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i16*
  %9 = load i16, i16* %8, align 2
  store i16 %9, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__0x2__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4561b2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4561be(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4561f9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456205(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xe4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xe0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456274(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xf4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -244
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456280(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xf4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -244
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xf0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x100__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4562bb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x104__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -260
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4562c7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x104__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x100__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1950__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x110__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456337(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x114__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -276
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456343(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x114__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -276
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x110__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45637e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x124__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -292
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45638a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x124__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x120__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rdx__rcx_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, 1
  %8 = icmp ne i32 %4, -1
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %4, 16
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %4, 31
  %30 = xor i32 %29, 1
  %31 = xor i32 %26, %29
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4563ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__0xffff____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  store i16 -1, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x648__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 1608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xffffffffffffffff____rax__rcx_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  store i64 -1, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456562(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x130__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456423(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x134__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -308
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45642f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x134__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -308
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x130__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x140__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -320
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45646a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x144__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -324
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456476(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x144__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -324
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x140__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -320
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw___rdx__rcx_2____si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i16*
  %11 = load i16, i16* %10, align 2
  store i16 %11, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x640__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 1600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si____rcx__rdi_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDI, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %SI, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1960__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 6496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x150__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4564dd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x154__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -340
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4564e9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x154__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -340
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x150__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x160__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -352
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456524(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x164__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -356
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456530(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x164__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -356
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x160__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -352
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x648__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 1608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rsi__rdi_8____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx____rsi__rdi_8_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %RCX, align 8
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %6 to i64*
  store i64 %7, i64* %10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -368
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456598(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -372
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4565a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x174__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -372
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x170__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -368
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x180__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4565df(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x184__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -388
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4565eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x184__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x180__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_456651(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4567c9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x190__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456687(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x194__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456693(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x194__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x190__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4566ce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -420
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4566da(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1a4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -420
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1a0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -416
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -432
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456743(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -436
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45674f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1b4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -436
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1b0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45678a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -452
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456796(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -452
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1c0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18e8__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x1300__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 4864
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x1193c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 71996
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4569a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x1300__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4864
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_456897(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rax__rcx_2____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rax____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = bitcast i64* %RAX to i16**
  %4 = load i16*, i16** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i16, i16* %4, align 2
  %8 = sext i16 %7 to i64
  %9 = and i64 %8, 4294967295
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_0x2__rax____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x1___dl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  store i8 1, i8* %DL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x1c5__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -453
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45697b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al___cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %AL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x640__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 1600
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl___rdx__rsi_2____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x1c6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -454
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_45696f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__edi___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RDI, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dil___dl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DIL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %DIL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %DL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x1c6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -454
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_sete__dl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* %DL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x1c6__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -454
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x1c5__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -453
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x1c5__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -453
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorb__0xff___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = xor i8 %4, -1
  store i8 %7, i8* %AL, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = icmp eq i8 %4, -1
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i8 %7, 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andb__0x1___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = and i8 %4, 1
  store i8 %7, i8* %AL, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i8 %7, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl__al___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i8, i8* %AL, align 1
  %5 = zext i8 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x658__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 1624
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al____rdx__rsi_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = add i64 %5, %4
  %7 = load i8, i8* %AL, align 1
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %6 to i8*
  store i8 %7, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457a24(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x1d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4569de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -468
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4569ea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1d4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -468
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1d0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456a25(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -484
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456a31(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1e4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -484
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1e0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12f0__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 4848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x1f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456a9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -500
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456aaa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1f4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -500
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x1f0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -496
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x200__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456ae5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x204__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -516
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456af1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x204__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -516
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x200__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x210__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -528
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456b61(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x214__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -532
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456b6d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x214__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -532
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x210__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x220__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456ba8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x224__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -548
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456bb4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x224__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -548
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x220__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x230__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456c23(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x234__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -564
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456c2f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x234__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -564
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x230__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -560
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x240__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -576
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456c6a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x244__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -580
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456c76(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x244__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -580
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x240__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -576
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x250__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -592
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456ce6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x254__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -596
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456cf2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x254__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -596
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x250__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -592
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x260__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -608
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456d2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x264__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -612
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456d39(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x264__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -612
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x260__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -608
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12e0__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 4832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x270__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456da1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x274__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -628
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456dad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x274__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -628
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x270__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -624
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x280__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -640
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456de8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x284__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -644
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456df4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x284__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -644
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x280__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -640
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x290__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -656
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456e5c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x294__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -660
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456e68(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x294__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -660
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x290__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -656
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x2a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -672
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456ea3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -676
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456eaf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2a4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -676
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2a0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -672
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12e8__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 4840
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x2b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -688
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456f17(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -692
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456f23(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2b4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -692
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2b0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -688
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x2c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -704
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_456f5e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -708
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_456f6a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -708
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2c0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x1193c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 71996
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_457164(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x18e8__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_457057(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12e0__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12f0__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x2c5__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -709
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45713b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12e0__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 4832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x2c6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -710
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_45712f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x2c6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -710
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x2c6__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -710
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x2c5__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -709
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x2c5__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -709
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x12f8__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 4856
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x2d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -720
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_457199(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -724
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4571a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2d4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -724
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2d0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -720
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x2e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4571e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -740
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4571ec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2e4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -740
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2e0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xca0__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 3232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x2f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -752
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_457259(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -756
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457265(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2f4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -756
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x2f0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -752
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x300__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4572a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x304__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -772
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4572ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x304__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -772
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x300__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x310__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -784
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45731c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x314__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -788
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457328(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x314__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -788
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x310__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -784
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x320__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -800
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_457363(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x324__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -804
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45736f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x324__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -804
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x320__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -800
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x330__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -816
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4573de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x334__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -820
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4573ea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x334__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -820
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x330__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -816
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x340__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -832
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_457425(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x344__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -836
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457431(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x344__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -836
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x340__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x350__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -848
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4574a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x354__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -852
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4574ad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x354__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -852
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x350__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x360__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -864
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4574e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x364__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -868
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4574f4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x364__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -868
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x360__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -864
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xc90__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 3216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x370__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -880
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45755c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x374__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -884
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457568(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x374__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -884
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x370__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -880
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x380__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -896
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4575a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x384__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -900
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4575af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x384__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -900
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x380__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -896
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x390__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -912
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_457617(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x394__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -916
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457623(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x394__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -916
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x390__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -912
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x3a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -928
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45765e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -932
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45766a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3a4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -932
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3a0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -928
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xc98__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 3224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x3b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -944
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4576d2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -948
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4576de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3b4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -948
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3b0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -944
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x3c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -960
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_457719(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -964
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457725(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -964
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3c0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -960
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_45791f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_457812(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xc90__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 3216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xca0__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 3232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x3c5__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -965
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4578f6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xc90__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 3216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x3c6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -966
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4578ea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x3c6__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -966
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x3c6__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -966
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x3c5__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -965
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x3c5__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -965
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xca8__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 3240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x1193c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 71996
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_457a1f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpb__0x0____rax__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = zext i8 %9 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i8 %9, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i8 %9, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__rdx_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_0x2__rcx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -972
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3cc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -972
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__ax___di(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %AX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %DI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__di__0x2__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DI = bitcast %union.anon* %3 to i16*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %DI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x34__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rcx__r8_8____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x38__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_0x2__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457a29(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_455fba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457a3c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_455f88(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457a4f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_457a79(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458153(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_45814e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -976
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3d0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -976
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_458149(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -980
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3d4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -980
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_458136(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458123(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1980__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -984
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3d8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -984
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_457e40(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -988
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x3e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1000
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3e8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1000
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1980__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6528
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1004
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3dc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -988
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3ec__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1004
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1008
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3f0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1008
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45811e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1988__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 6536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1012
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x400__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1024
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x400__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1024
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1988__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 6536
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x404__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1028
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3f4__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1012
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x404__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1028
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x408__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1032
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x408__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1032
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458123(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458128(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457ac4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45813b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_457a92(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45814e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458153(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x40c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1036
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1036
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_458bdf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x410__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1040
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x410__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1040
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_458bcc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4581e1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4587da(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x418__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1048
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458216(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x41c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1052
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458222(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x41c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1052
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x418__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1048
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x428__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1064
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45825d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x42c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1068
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458269(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x42c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x428__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1064
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x438__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1080
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4582d6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x43c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1084
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4582e2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x43c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1084
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x438__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1080
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x448__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1096
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45831d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x44c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1100
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458329(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x44c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x448__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1096
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x458__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1112
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458399(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x45c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1116
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4583a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x45c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x458__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x468__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4583e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x46c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1132
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4583ec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x46c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x468__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x478__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1144
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45845b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x47c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1148
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458467(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x47c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x478__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x488__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1160
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4584a2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x48c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1164
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4584ae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x48c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x488__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x498__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1176
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45851e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x49c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45852a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x49c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x498__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x4a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1192
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458565(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1196
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458571(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4ac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x4a8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x4b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1208
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4585d9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4585e5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4bc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x4b8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x4c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1224
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458620(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4cc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1228
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45862c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4cc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1228
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x4c8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x4d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1240
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458694(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1244
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4586a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4dc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1244
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x4d8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x4e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1256
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4586db(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1260
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4586e7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x4e8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x4f8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1272
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_45874f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4fc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1276
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45875b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4fc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1276
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x4f8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x508__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1288
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458796(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x50c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1292
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4587a2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1292
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x508__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4589de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_458bb9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_458aac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x50d__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1293
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458b90(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x50e__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1294
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_458b84(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x50e__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1294
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x50e__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1294
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x50d__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1293
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x50d__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1293
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458bbe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45818c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458bd1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45815a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4592b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x514__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1300
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x514__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1300
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_458e04(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x518__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1304
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x518__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_458df1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_458ca3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_458cdc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458d3a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movswl_0x2__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = sext i16 %8 to i64
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx___si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %DX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si__0x2__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 2
  %6 = load i16, i16* %SI, align 2
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i16*
  store i16 %6, i16* %9, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458dde(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_458dd9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_458dd9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x51c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1308
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x51c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1308
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458de3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458c2d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458df6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458bfb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11ad0__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 72400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 2
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 30
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = and i32 %6, 252
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i32 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i32 %.tr, 29
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4592af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x7247b0___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, 7489456
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %4, %11
  %13 = icmp ult i32 %4, %11
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %12, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %11, %4
  %23 = xor i32 %22, %12
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %12, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %12, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %4, 31
  %35 = lshr i32 %11, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_45929c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_458f16(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rsi_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffff80___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, 128
  %8 = icmp ult i32 %4, -128
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %28, 1
  %30 = xor i32 %25, %28
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_458e8f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffff80___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4294967168, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x520__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1312
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458f08(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x7f___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -127
  %8 = icmp ult i32 %4, 127
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %4, 16
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %4, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_458ecf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x7f___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 127, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x524__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1316
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458efc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x524__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1316
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x524__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1316
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x520__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -64
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4590ae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x38__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_458fe7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_458f60(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x528__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1320
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458fd9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_458fa0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x52c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1324
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458fcd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x52c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1324
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x52c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1324
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x528__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1320
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4590a9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_459027(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x530__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1328
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4590a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_459067(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x534__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1332
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_459094(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x534__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1332
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x534__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1332
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x530__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1328
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rdx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x0___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RSI, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__esi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4590fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x538__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1336
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45918b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_459146(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x53c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1340
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45917f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x53c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1340
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x53c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1340
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x538__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1336
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -68
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_459265(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x44__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x540__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1344
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x540__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1344
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x4000___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 5
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 16384
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -16385
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl_MINUS0x44__rbp_(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -68
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = inttoptr i64 %4 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = shl nuw i64 %14, 32
  %19 = or i64 %18, %10
  %20 = sdiv i64 %19, %17
  %21 = shl i64 %20, 32
  %22 = ashr exact i64 %21, 32
  %23 = icmp eq i64 %20, %22
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %block_400488
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:26:                                     ; preds = %block_400488
  %27 = srem i64 %19, %17
  %28 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %29 = and i64 %20, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %31 = and i64 %27, 4294967295
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %26, %24
  %38 = phi %struct.Memory* [ %25, %24 ], [ %2, %26 ]
  ret %struct.Memory* %38
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = shl i64 %3, 32
  %11 = ashr exact i64 %10, 32
  %12 = sext i32 %9 to i64
  %13 = mul nsw i64 %12, %11
  %14 = trunc i64 %13 to i32
  %15 = and i64 %13, 4294967295
  store i64 %15, i64* %RAX, align 8
  %16 = shl i64 %13, 32
  %17 = ashr exact i64 %16, 32
  %18 = icmp ne i64 %17, %13
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1
  %29 = lshr i32 %14, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xfffffc00___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, 1024
  %8 = icmp ult i32 %4, -1024
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %28, 1
  %30 = xor i32 %25, %28
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4591f2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xfffffc00___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4294966272, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x544__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1348
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_459239(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3ff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1023
  %8 = icmp ult i32 %4, 1023
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %4, 16
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %4, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_45921a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3ff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1023, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x548__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1352
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45922d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x548__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1352
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x544__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1348
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x11950___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 72016
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -72017
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x3c___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 60
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_459289(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x11950___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 72016
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -72017
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x3c___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 60
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x270f____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  store i32 9999, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_45928e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458e31(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4592a1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 2
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -3
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_458e0b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4592b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x548___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 1352
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -1353
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBX, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
