; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x6cb8f8_type = type <{ [8 x i8] }>
%G_0x6cb900_type = type <{ [8 x i8] }>
%G_0x6d4750_type = type <{ [1 x i8] }>
%G_0x70fcf0_type = type <{ [8 x i8] }>
%G_0xa58ed__rip__type = type <{ [8 x i8] }>
%G_0xa5a55__rip__type = type <{ [8 x i8] }>
%G__0x4b23a0_type = type <{ [8 x i8] }>
%G__0x4b2750_type = type <{ [8 x i8] }>
%G__0x4b28d0_type = type <{ [8 x i8] }>
%G__0x4b2a50_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x6cb8f8 = local_unnamed_addr global %G_0x6cb8f8_type zeroinitializer
@G_0x6cb900 = local_unnamed_addr global %G_0x6cb900_type zeroinitializer
@G_0x6d4750 = local_unnamed_addr global %G_0x6d4750_type zeroinitializer
@G_0x70fcf0 = local_unnamed_addr global %G_0x70fcf0_type zeroinitializer
@G_0xa58ed__rip_ = global %G_0xa58ed__rip__type zeroinitializer
@G_0xa5a55__rip_ = global %G_0xa5a55__rip__type zeroinitializer
@G__0x4b23a0 = global %G__0x4b23a0_type zeroinitializer
@G__0x4b2750 = global %G__0x4b2750_type zeroinitializer
@G__0x4b28d0 = global %G__0x4b28d0_type zeroinitializer
@G__0x4b2a50 = global %G__0x4b2a50_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @abs(i64)

declare extern_weak x86_64_sysvcc i64 @pow(i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_475150.sign(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4ace70.levrun_linfo_inter(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @dct_luma_sp(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -424
  store i64 %11, i64* %6, align 8
  %12 = icmp ult i64 %8, 416
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %40 = add i64 %10, add (i64 ptrtoint (%G_0xa5a55__rip__type* @G_0xa5a55__rip_ to i64), i64 10)
  %41 = add i64 %10, 18
  store i64 %41, i64* %3, align 8
  %42 = inttoptr i64 %40 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast [32 x %union.VectorReg]* %39 to double*
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %43, i64* %45, align 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %47 = bitcast i64* %46 to double*
  store double 0.000000e+00, double* %47, align 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %49 = bitcast %union.VectorReg* %48 to i8*
  %50 = add i64 %10, add (i64 ptrtoint (%G_0xa5a55__rip__type* @G_0xa5a55__rip_ to i64), i64 18)
  %51 = add i64 %10, 26
  store i64 %51, i64* %3, align 8
  %52 = inttoptr i64 %50 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %union.VectorReg* %48 to double*
  %55 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %48, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %53, i64* %55, align 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to double*
  store double 0.000000e+00, double* %57, align 1
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i1161 = getelementptr inbounds %union.anon, %union.anon* %58, i64 0, i32 0
  store i64 2, i64* %RAX.i1161, align 8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i1519 = getelementptr inbounds %union.anon, %union.anon* %59, i64 0, i32 0
  store i64 4, i64* %RCX.i1519, align 8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI.i1603 = bitcast %union.anon* %60 to i32*
  %61 = add i64 %7, -12
  %62 = load i32, i32* %EDI.i1603, align 4
  %63 = add i64 %10, 39
  store i64 %63, i64* %3, align 8
  %64 = inttoptr i64 %61 to i32*
  store i32 %62, i32* %64, align 4
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI.i1668 = bitcast %union.anon* %65 to i32*
  %66 = load i64, i64* %RBP.i, align 8
  %67 = add i64 %66, -8
  %68 = load i32, i32* %ESI.i1668, align 4
  %69 = load i64, i64* %3, align 8
  %70 = add i64 %69, 3
  store i64 %70, i64* %3, align 8
  %71 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %71, align 4
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i1748 = getelementptr inbounds %union.anon, %union.anon* %72, i64 0, i32 0
  %73 = load i64, i64* %RBP.i, align 8
  %74 = add i64 %73, -16
  %75 = load i64, i64* %RDX.i1748, align 8
  %76 = load i64, i64* %3, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %3, align 8
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78, align 8
  %RSI.i2777 = getelementptr inbounds %union.anon, %union.anon* %65, i64 0, i32 0
  %79 = load i64, i64* %RBP.i, align 8
  %80 = add i64 %79, -4
  %81 = load i64, i64* %3, align 8
  %82 = add i64 %81, 3
  store i64 %82, i64* %3, align 8
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RSI.i2777, align 8
  %EAX.i2800 = bitcast %union.anon* %58 to i32*
  %86 = add i64 %79, -300
  %87 = load i32, i32* %EAX.i2800, align 4
  %88 = add i64 %81, 9
  store i64 %88, i64* %3, align 8
  %89 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %89, align 4
  %90 = load i32, i32* %ESI.i1668, align 4
  %91 = zext i32 %90 to i64
  %92 = load i64, i64* %3, align 8
  store i64 %91, i64* %RAX.i1161, align 8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %94 = sext i32 %90 to i64
  %95 = lshr i64 %94, 32
  store i64 %95, i64* %93, align 8
  %ECX.i2881 = bitcast %union.anon* %59 to i32*
  %96 = load i32, i32* %ECX.i2881, align 4
  %97 = add i64 %92, 5
  store i64 %97, i64* %3, align 8
  %98 = bitcast %union.anon* %72 to i32*
  %99 = sext i32 %96 to i64
  %100 = shl nuw i64 %95, 32
  %101 = or i64 %100, %91
  %102 = sdiv i64 %101, %99
  %103 = shl i64 %102, 32
  %104 = ashr exact i64 %103, 32
  %105 = icmp eq i64 %102, %104
  br i1 %105, label %108, label %106

; <label>:106:                                    ; preds = %entry
  %107 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %97, %struct.Memory* %2)
  %.pre = load i32, i32* %EAX.i2800, align 4
  %.pre154 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit

; <label>:108:                                    ; preds = %entry
  %109 = srem i64 %101, %99
  %110 = and i64 %102, 4294967295
  store i64 %110, i64* %RAX.i1161, align 8
  %111 = and i64 %109, 4294967295
  store i64 %111, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %112 = trunc i64 %102 to i32
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %108, %106
  %113 = phi i64 [ %.pre154, %106 ], [ %97, %108 ]
  %114 = phi i32 [ %.pre, %106 ], [ %112, %108 ]
  %115 = phi %struct.Memory* [ %107, %106 ], [ %2, %108 ]
  %116 = load i64, i64* %RBP.i, align 8
  %117 = add i64 %116, -212
  %118 = add i64 %113, 6
  store i64 %118, i64* %3, align 8
  %119 = inttoptr i64 %117 to i32*
  store i32 %114, i32* %119, align 4
  %120 = load i64, i64* %RBP.i, align 8
  %121 = add i64 %120, -8
  %122 = load i64, i64* %3, align 8
  %123 = add i64 %122, 3
  store i64 %123, i64* %3, align 8
  %124 = inttoptr i64 %121 to i32*
  %125 = load i32, i32* %124, align 4
  %126 = zext i32 %125 to i64
  store i64 %126, i64* %RAX.i1161, align 8
  %127 = sext i32 %125 to i64
  %128 = lshr i64 %127, 32
  store i64 %128, i64* %93, align 8
  %129 = load i32, i32* %ECX.i2881, align 4
  %130 = add i64 %122, 6
  store i64 %130, i64* %3, align 8
  %131 = sext i32 %129 to i64
  %132 = shl nuw i64 %128, 32
  %133 = or i64 %132, %126
  %134 = sdiv i64 %133, %131
  %135 = shl i64 %134, 32
  %136 = ashr exact i64 %135, 32
  %137 = icmp eq i64 %134, %136
  br i1 %137, label %140, label %138

; <label>:138:                                    ; preds = %routine_idivl__ecx.exit
  %139 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %130, %struct.Memory* %115)
  %.pre155 = load i64, i64* %RBP.i, align 8
  %.pre156 = load i32, i32* %EAX.i2800, align 4
  %.pre157 = load i64, i64* %3, align 8
  br label %routine_idivl__ecx.exit3028

; <label>:140:                                    ; preds = %routine_idivl__ecx.exit
  %141 = srem i64 %133, %131
  %142 = and i64 %134, 4294967295
  store i64 %142, i64* %RAX.i1161, align 8
  %143 = and i64 %141, 4294967295
  store i64 %143, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %144 = trunc i64 %134 to i32
  br label %routine_idivl__ecx.exit3028

routine_idivl__ecx.exit3028:                      ; preds = %140, %138
  %145 = phi i64 [ %.pre157, %138 ], [ %130, %140 ]
  %146 = phi i32 [ %.pre156, %138 ], [ %144, %140 ]
  %147 = phi i64 [ %.pre155, %138 ], [ %120, %140 ]
  %148 = phi %struct.Memory* [ %139, %138 ], [ %115, %140 ]
  %149 = add i64 %147, -216
  %150 = add i64 %145, 6
  store i64 %150, i64* %3, align 8
  %151 = inttoptr i64 %149 to i32*
  store i32 %146, i32* %151, align 4
  %152 = load i64, i64* %RBP.i, align 8
  %153 = add i64 %152, -216
  %154 = load i64, i64* %3, align 8
  %155 = add i64 %154, 6
  store i64 %155, i64* %3, align 8
  %156 = inttoptr i64 %153 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %RAX.i1161, align 8
  %159 = sext i32 %157 to i64
  %160 = lshr i64 %159, 32
  store i64 %160, i64* %93, align 8
  %161 = add i64 %152, -300
  %162 = add i64 %154, 13
  store i64 %162, i64* %3, align 8
  %163 = inttoptr i64 %161 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RCX.i1519, align 8
  %166 = add i64 %154, 15
  store i64 %166, i64* %3, align 8
  %167 = sext i32 %164 to i64
  %168 = shl nuw i64 %160, 32
  %169 = or i64 %168, %158
  %170 = sdiv i64 %169, %167
  %171 = shl i64 %170, 32
  %172 = ashr exact i64 %171, 32
  %173 = icmp eq i64 %170, %172
  br i1 %173, label %176, label %174

; <label>:174:                                    ; preds = %routine_idivl__ecx.exit3028
  %175 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %166, %struct.Memory* %148)
  %.pre158 = load i64, i64* %RAX.i1161, align 8
  %.pre159 = load i64, i64* %3, align 8
  %.pre160 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3081

; <label>:176:                                    ; preds = %routine_idivl__ecx.exit3028
  %177 = srem i64 %169, %167
  %178 = and i64 %170, 4294967295
  store i64 %178, i64* %RAX.i1161, align 8
  %179 = and i64 %177, 4294967295
  store i64 %179, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  br label %routine_idivl__ecx.exit3081

routine_idivl__ecx.exit3081:                      ; preds = %176, %174
  %180 = phi i64 [ %.pre160, %174 ], [ %152, %176 ]
  %181 = phi i64 [ %.pre159, %174 ], [ %166, %176 ]
  %182 = phi i64 [ %.pre158, %174 ], [ %178, %176 ]
  %183 = phi %struct.Memory* [ %175, %174 ], [ %148, %176 ]
  %184 = trunc i64 %182 to i32
  %185 = shl i32 %184, 1
  %186 = icmp slt i32 %184, 0
  %187 = icmp slt i32 %185, 0
  %188 = xor i1 %186, %187
  %189 = zext i32 %185 to i64
  store i64 %189, i64* %RAX.i1161, align 8
  %.lobit = lshr i32 %184, 31
  %190 = trunc i32 %.lobit to i8
  store i8 %190, i8* %14, align 1
  %191 = and i32 %185, 254
  %192 = tail call i32 @llvm.ctpop.i32(i32 %191)
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  %195 = xor i8 %194, 1
  store i8 %195, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %196 = icmp eq i32 %185, 0
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %29, align 1
  %198 = lshr i32 %184, 30
  %199 = trunc i32 %198 to i8
  %200 = and i8 %199, 1
  store i8 %200, i8* %32, align 1
  %201 = zext i1 %188 to i8
  store i8 %201, i8* %38, align 1
  %202 = add i64 %180, -212
  %203 = add i64 %181, 8
  store i64 %203, i64* %3, align 8
  %204 = inttoptr i64 %202 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = zext i32 %205 to i64
  store i64 %206, i64* %RSI.i2777, align 8
  %207 = add i64 %180, -304
  %208 = add i64 %181, 14
  store i64 %208, i64* %3, align 8
  %209 = inttoptr i64 %207 to i32*
  store i32 %185, i32* %209, align 4
  %210 = load i32, i32* %ESI.i1668, align 4
  %211 = zext i32 %210 to i64
  %212 = load i64, i64* %3, align 8
  store i64 %211, i64* %RAX.i1161, align 8
  %213 = sext i32 %210 to i64
  %214 = lshr i64 %213, 32
  store i64 %214, i64* %93, align 8
  %215 = load i32, i32* %ECX.i2881, align 4
  %216 = add i64 %212, 5
  store i64 %216, i64* %3, align 8
  %217 = sext i32 %215 to i64
  %218 = shl nuw i64 %214, 32
  %219 = or i64 %218, %211
  %220 = sdiv i64 %219, %217
  %221 = shl i64 %220, 32
  %222 = ashr exact i64 %221, 32
  %223 = icmp eq i64 %220, %222
  br i1 %223, label %226, label %224

; <label>:224:                                    ; preds = %routine_idivl__ecx.exit3081
  %225 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %216, %struct.Memory* %183)
  %.pre161 = load i64, i64* %3, align 8
  %.pre162 = load i32, i32* %EAX.i2800, align 4
  br label %routine_idivl__ecx.exit3065

; <label>:226:                                    ; preds = %routine_idivl__ecx.exit3081
  %227 = srem i64 %219, %217
  %228 = and i64 %220, 4294967295
  store i64 %228, i64* %RAX.i1161, align 8
  %229 = and i64 %227, 4294967295
  store i64 %229, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %230 = trunc i64 %220 to i32
  br label %routine_idivl__ecx.exit3065

routine_idivl__ecx.exit3065:                      ; preds = %226, %224
  %231 = phi i32 [ %.pre162, %224 ], [ %230, %226 ]
  %232 = phi i64 [ %.pre161, %224 ], [ %216, %226 ]
  %233 = phi %struct.Memory* [ %225, %224 ], [ %183, %226 ]
  %234 = load i64, i64* %RBP.i, align 8
  %235 = add i64 %234, -304
  %236 = add i64 %232, 6
  store i64 %236, i64* %3, align 8
  %237 = inttoptr i64 %235 to i32*
  %238 = load i32, i32* %237, align 4
  %239 = add i32 %231, %238
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RSI.i2777, align 8
  %241 = icmp ult i32 %239, %238
  %242 = icmp ult i32 %239, %231
  %243 = or i1 %241, %242
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %14, align 1
  %245 = and i32 %239, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245)
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %21, align 1
  %250 = xor i32 %231, %238
  %251 = xor i32 %250, %239
  %252 = lshr i32 %251, 4
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  store i8 %254, i8* %26, align 1
  %255 = icmp eq i32 %239, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %29, align 1
  %257 = lshr i32 %239, 31
  %258 = trunc i32 %257 to i8
  store i8 %258, i8* %32, align 1
  %259 = lshr i32 %238, 31
  %260 = lshr i32 %231, 31
  %261 = xor i32 %257, %259
  %262 = xor i32 %257, %260
  %263 = add nuw nsw i32 %261, %262
  %264 = icmp eq i32 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %38, align 1
  %266 = add i64 %234, -220
  %267 = add i64 %232, 14
  store i64 %267, i64* %3, align 8
  %268 = inttoptr i64 %266 to i32*
  store i32 %239, i32* %268, align 4
  %269 = load i64, i64* %RBP.i, align 8
  %270 = add i64 %269, -216
  %271 = load i64, i64* %3, align 8
  %272 = add i64 %271, 6
  store i64 %272, i64* %3, align 8
  %273 = inttoptr i64 %270 to i32*
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RAX.i1161, align 8
  %276 = sext i32 %274 to i64
  %277 = lshr i64 %276, 32
  store i64 %277, i64* %93, align 8
  %278 = load i32, i32* %ECX.i2881, align 4
  %279 = add i64 %271, 9
  store i64 %279, i64* %3, align 8
  %280 = sext i32 %278 to i64
  %281 = shl nuw i64 %277, 32
  %282 = or i64 %281, %275
  %283 = sdiv i64 %282, %280
  %284 = shl i64 %283, 32
  %285 = ashr exact i64 %284, 32
  %286 = icmp eq i64 %283, %285
  br i1 %286, label %289, label %287

; <label>:287:                                    ; preds = %routine_idivl__ecx.exit3065
  %288 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %279, %struct.Memory* %233)
  %.pre163 = load i64, i64* %RDX.i1748, align 8
  %.pre164 = load i64, i64* %3, align 8
  %.pre165 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit3046

; <label>:289:                                    ; preds = %routine_idivl__ecx.exit3065
  %290 = srem i64 %282, %280
  %291 = and i64 %283, 4294967295
  store i64 %291, i64* %RAX.i1161, align 8
  %292 = and i64 %290, 4294967295
  store i64 %292, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  br label %routine_idivl__ecx.exit3046

routine_idivl__ecx.exit3046:                      ; preds = %289, %287
  %293 = phi i64 [ %.pre165, %287 ], [ %269, %289 ]
  %294 = phi i64 [ %.pre164, %287 ], [ %279, %289 ]
  %295 = phi i64 [ %.pre163, %287 ], [ %292, %289 ]
  %296 = phi %struct.Memory* [ %288, %287 ], [ %233, %289 ]
  %297 = trunc i64 %295 to i32
  %298 = shl i32 %297, 1
  %299 = icmp slt i32 %297, 0
  %300 = icmp slt i32 %298, 0
  %301 = xor i1 %299, %300
  %302 = zext i32 %298 to i64
  store i64 %302, i64* %RDX.i1748, align 8
  %.lobit41 = lshr i32 %297, 31
  %303 = trunc i32 %.lobit41 to i8
  store i8 %303, i8* %14, align 1
  %304 = and i32 %298, 254
  %305 = tail call i32 @llvm.ctpop.i32(i32 %304)
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = xor i8 %307, 1
  store i8 %308, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %309 = icmp eq i32 %298, 0
  %310 = zext i1 %309 to i8
  store i8 %310, i8* %29, align 1
  %311 = lshr i32 %297, 30
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  store i8 %313, i8* %32, align 1
  %314 = zext i1 %301 to i8
  store i8 %314, i8* %38, align 1
  %315 = add i64 %293, -212
  %316 = add i64 %294, 8
  store i64 %316, i64* %3, align 8
  %317 = inttoptr i64 %315 to i32*
  %318 = load i32, i32* %317, align 4
  %319 = zext i32 %318 to i64
  store i64 %319, i64* %RSI.i2777, align 8
  store i64 %319, i64* %RAX.i1161, align 8
  %320 = add i64 %293, -308
  %321 = add i64 %294, 16
  store i64 %321, i64* %3, align 8
  %322 = inttoptr i64 %320 to i32*
  store i32 %298, i32* %322, align 4
  %323 = load i64, i64* %3, align 8
  %324 = load i32, i32* %EAX.i2800, align 8
  %325 = sext i32 %324 to i64
  %326 = lshr i64 %325, 32
  store i64 %326, i64* %93, align 8
  %327 = load i32, i32* %ECX.i2881, align 4
  %328 = add i64 %323, 3
  store i64 %328, i64* %3, align 8
  %329 = zext i32 %324 to i64
  %330 = sext i32 %327 to i64
  %331 = shl nuw i64 %326, 32
  %332 = or i64 %331, %329
  %333 = sdiv i64 %332, %330
  %334 = shl i64 %333, 32
  %335 = ashr exact i64 %334, 32
  %336 = icmp eq i64 %333, %335
  br i1 %336, label %339, label %337

; <label>:337:                                    ; preds = %routine_idivl__ecx.exit3046
  %338 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %328, %struct.Memory* %296)
  %.pre166 = load i64, i64* %3, align 8
  %.pre167 = load i32, i32* %98, align 4
  br label %routine_idivl__ecx.exit3025

; <label>:339:                                    ; preds = %routine_idivl__ecx.exit3046
  %340 = srem i64 %332, %330
  %341 = and i64 %333, 4294967295
  store i64 %341, i64* %RAX.i1161, align 8
  %342 = and i64 %340, 4294967295
  store i64 %342, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %343 = trunc i64 %340 to i32
  br label %routine_idivl__ecx.exit3025

routine_idivl__ecx.exit3025:                      ; preds = %339, %337
  %344 = phi i32 [ %.pre167, %337 ], [ %343, %339 ]
  %345 = phi i64 [ %.pre166, %337 ], [ %328, %339 ]
  %346 = phi %struct.Memory* [ %338, %337 ], [ %296, %339 ]
  %347 = load i64, i64* %RBP.i, align 8
  %348 = add i64 %347, -308
  %349 = add i64 %345, 6
  store i64 %349, i64* %3, align 8
  %350 = inttoptr i64 %348 to i32*
  %351 = load i32, i32* %350, align 4
  %352 = add i32 %344, %351
  %353 = zext i32 %352 to i64
  store i64 %353, i64* %RSI.i2777, align 8
  %354 = icmp ult i32 %352, %351
  %355 = icmp ult i32 %352, %344
  %356 = or i1 %354, %355
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %14, align 1
  %358 = and i32 %352, 255
  %359 = tail call i32 @llvm.ctpop.i32(i32 %358)
  %360 = trunc i32 %359 to i8
  %361 = and i8 %360, 1
  %362 = xor i8 %361, 1
  store i8 %362, i8* %21, align 1
  %363 = xor i32 %344, %351
  %364 = xor i32 %363, %352
  %365 = lshr i32 %364, 4
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  store i8 %367, i8* %26, align 1
  %368 = icmp eq i32 %352, 0
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %29, align 1
  %370 = lshr i32 %352, 31
  %371 = trunc i32 %370 to i8
  store i8 %371, i8* %32, align 1
  %372 = lshr i32 %351, 31
  %373 = lshr i32 %344, 31
  %374 = xor i32 %370, %372
  %375 = xor i32 %370, %373
  %376 = add nuw nsw i32 %374, %375
  %377 = icmp eq i32 %376, 2
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %38, align 1
  %379 = add i64 %347, -224
  %380 = add i64 %345, 14
  store i64 %380, i64* %3, align 8
  %381 = inttoptr i64 %379 to i32*
  store i32 %352, i32* %381, align 4
  %R8.i3013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %382 = load i64, i64* %3, align 8
  %383 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %383, i64* %R8.i3013, align 8
  %384 = add i64 %383, 14136
  %385 = add i64 %382, 15
  store i64 %385, i64* %3, align 8
  %386 = inttoptr i64 %384 to i64*
  %387 = load i64, i64* %386, align 8
  store i64 %387, i64* %R8.i3013, align 8
  %R9.i3009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %388 = load i64, i64* %RBP.i, align 8
  %389 = add i64 %388, -220
  %390 = add i64 %382, 22
  store i64 %390, i64* %3, align 8
  %391 = inttoptr i64 %389 to i32*
  %392 = load i32, i32* %391, align 4
  %393 = sext i32 %392 to i64
  store i64 %393, i64* %R9.i3009, align 8
  %394 = shl nsw i64 %393, 3
  %395 = add i64 %394, %387
  %396 = add i64 %382, 26
  store i64 %396, i64* %3, align 8
  %397 = inttoptr i64 %395 to i64*
  %398 = load i64, i64* %397, align 8
  store i64 %398, i64* %R8.i3013, align 8
  %399 = add i64 %388, -224
  %400 = add i64 %382, 33
  store i64 %400, i64* %3, align 8
  %401 = inttoptr i64 %399 to i32*
  %402 = load i32, i32* %401, align 4
  %403 = sext i32 %402 to i64
  store i64 %403, i64* %R9.i3009, align 8
  %404 = shl nsw i64 %403, 3
  %405 = add i64 %404, %398
  %406 = add i64 %382, 37
  store i64 %406, i64* %3, align 8
  %407 = inttoptr i64 %405 to i64*
  %408 = load i64, i64* %407, align 8
  store i64 %408, i64* %R8.i3013, align 8
  %409 = add i64 %382, 40
  store i64 %409, i64* %3, align 8
  %410 = inttoptr i64 %408 to i64*
  %411 = load i64, i64* %410, align 8
  %412 = add i64 %388, -232
  %413 = add i64 %382, 47
  store i64 %413, i64* %3, align 8
  %414 = inttoptr i64 %412 to i64*
  store i64 %411, i64* %414, align 8
  %415 = load i64, i64* %3, align 8
  %416 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %416, i64* %R8.i3013, align 8
  %417 = add i64 %416, 14136
  %418 = add i64 %415, 15
  store i64 %418, i64* %3, align 8
  %419 = inttoptr i64 %417 to i64*
  %420 = load i64, i64* %419, align 8
  store i64 %420, i64* %R8.i3013, align 8
  %421 = load i64, i64* %RBP.i, align 8
  %422 = add i64 %421, -220
  %423 = add i64 %415, 22
  store i64 %423, i64* %3, align 8
  %424 = inttoptr i64 %422 to i32*
  %425 = load i32, i32* %424, align 4
  %426 = sext i32 %425 to i64
  store i64 %426, i64* %R9.i3009, align 8
  %427 = shl nsw i64 %426, 3
  %428 = add i64 %427, %420
  %429 = add i64 %415, 26
  store i64 %429, i64* %3, align 8
  %430 = inttoptr i64 %428 to i64*
  %431 = load i64, i64* %430, align 8
  store i64 %431, i64* %R8.i3013, align 8
  %432 = add i64 %421, -224
  %433 = add i64 %415, 33
  store i64 %433, i64* %3, align 8
  %434 = inttoptr i64 %432 to i32*
  %435 = load i32, i32* %434, align 4
  %436 = sext i32 %435 to i64
  store i64 %436, i64* %R9.i3009, align 8
  %437 = shl nsw i64 %436, 3
  %438 = add i64 %437, %431
  %439 = add i64 %415, 37
  store i64 %439, i64* %3, align 8
  %440 = inttoptr i64 %438 to i64*
  %441 = load i64, i64* %440, align 8
  store i64 %441, i64* %R8.i3013, align 8
  %442 = add i64 %441, 8
  %443 = add i64 %415, 41
  store i64 %443, i64* %3, align 8
  %444 = inttoptr i64 %442 to i64*
  %445 = load i64, i64* %444, align 8
  %446 = add i64 %421, -240
  %447 = add i64 %415, 48
  store i64 %447, i64* %3, align 8
  %448 = inttoptr i64 %446 to i64*
  store i64 %445, i64* %448, align 8
  %449 = load i64, i64* %3, align 8
  %450 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %450, i64* %R8.i3013, align 8
  %451 = add i64 %450, 14168
  %452 = add i64 %449, 15
  store i64 %452, i64* %3, align 8
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453, align 8
  store i64 %454, i64* %R8.i3013, align 8
  store i64 %450, i64* %R9.i3009, align 8
  %455 = add i64 %450, 12
  %456 = add i64 %449, 27
  store i64 %456, i64* %3, align 8
  %457 = inttoptr i64 %455 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = sext i32 %458 to i64
  %460 = mul nsw i64 %459, 632
  store i64 %460, i64* %R9.i3009, align 8
  %461 = lshr i64 %460, 63
  %462 = add i64 %460, %454
  store i64 %462, i64* %R8.i3013, align 8
  %463 = icmp ult i64 %462, %454
  %464 = icmp ult i64 %462, %460
  %465 = or i1 %463, %464
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %14, align 1
  %467 = trunc i64 %462 to i32
  %468 = and i32 %467, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468)
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %21, align 1
  %473 = xor i64 %460, %454
  %474 = xor i64 %473, %462
  %475 = lshr i64 %474, 4
  %476 = trunc i64 %475 to i8
  %477 = and i8 %476, 1
  store i8 %477, i8* %26, align 1
  %478 = icmp eq i64 %462, 0
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %29, align 1
  %480 = lshr i64 %462, 63
  %481 = trunc i64 %480 to i8
  store i8 %481, i8* %32, align 1
  %482 = lshr i64 %454, 63
  %483 = xor i64 %480, %482
  %484 = xor i64 %480, %461
  %485 = add nuw nsw i64 %483, %484
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %38, align 1
  %488 = load i64, i64* %RBP.i, align 8
  %489 = add i64 %488, -248
  %490 = add i64 %449, 44
  store i64 %490, i64* %3, align 8
  %491 = inttoptr i64 %489 to i64*
  store i64 %462, i64* %491, align 8
  %492 = load i64, i64* %RBP.i, align 8
  %493 = add i64 %492, -248
  %494 = load i64, i64* %3, align 8
  %495 = add i64 %494, 7
  store i64 %495, i64* %3, align 8
  %496 = inttoptr i64 %493 to i64*
  %497 = load i64, i64* %496, align 8
  store i64 %497, i64* %R8.i3013, align 8
  %498 = add i64 %497, 12
  %499 = add i64 %494, 11
  store i64 %499, i64* %3, align 8
  %500 = inttoptr i64 %498 to i32*
  %501 = load i32, i32* %500, align 4
  %502 = add i32 %501, -12
  %503 = zext i32 %502 to i64
  store i64 %503, i64* %RDX.i1748, align 8
  %504 = icmp ult i32 %501, 12
  %505 = zext i1 %504 to i8
  store i8 %505, i8* %14, align 1
  %506 = and i32 %502, 255
  %507 = tail call i32 @llvm.ctpop.i32(i32 %506)
  %508 = trunc i32 %507 to i8
  %509 = and i8 %508, 1
  %510 = xor i8 %509, 1
  store i8 %510, i8* %21, align 1
  %511 = xor i32 %502, %501
  %512 = lshr i32 %511, 4
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  store i8 %514, i8* %26, align 1
  %515 = icmp eq i32 %502, 0
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %29, align 1
  %517 = lshr i32 %502, 31
  %518 = trunc i32 %517 to i8
  store i8 %518, i8* %32, align 1
  %519 = lshr i32 %501, 31
  %520 = xor i32 %517, %519
  %521 = add nuw nsw i32 %520, %519
  %522 = icmp eq i32 %521, 2
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %38, align 1
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %525 = sitofp i32 %502 to double
  %526 = bitcast %union.VectorReg* %524 to double*
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %528 = bitcast i64* %527 to <2 x i32>*
  %529 = load <2 x i32>, <2 x i32>* %528, align 1
  %530 = load double, double* %54, align 1
  %531 = fdiv double %525, %530
  store double %531, double* %526, align 1
  %.cast119 = bitcast double %531 to <2 x i32>
  %532 = extractelement <2 x i32> %.cast119, i32 0
  %533 = bitcast %union.VectorReg* %48 to i32*
  store i32 %532, i32* %533, align 1
  %534 = extractelement <2 x i32> %.cast119, i32 1
  %535 = getelementptr inbounds i8, i8* %49, i64 4
  %536 = bitcast i8* %535 to i32*
  store i32 %534, i32* %536, align 1
  %537 = extractelement <2 x i32> %529, i32 0
  %538 = bitcast i64* %56 to i32*
  store i32 %537, i32* %538, align 1
  %539 = extractelement <2 x i32> %529, i32 1
  %540 = getelementptr inbounds i8, i8* %49, i64 12
  %541 = bitcast i8* %540 to i32*
  store i32 %539, i32* %541, align 1
  %542 = add i64 %494, -44694
  %543 = add i64 %494, 30
  %544 = load i64, i64* %6, align 8
  %545 = add i64 %544, -8
  %546 = inttoptr i64 %545 to i64*
  store i64 %543, i64* %546, align 8
  store i64 %545, i64* %6, align 8
  store i64 %542, i64* %3, align 8
  %547 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64)* @pow to i64), %struct.Memory* %346)
  %548 = load i64, i64* %3, align 8
  store i64 2, i64* %RCX.i1519, align 8
  store i64 1, i64* %RDX.i1748, align 8
  store i64 6, i64* %RSI.i2777, align 8
  %549 = add i64 %548, add (i64 ptrtoint (%G_0xa58ed__rip__type* @G_0xa58ed__rip_ to i64), i64 15)
  %550 = add i64 %548, 23
  store i64 %550, i64* %3, align 8
  %551 = inttoptr i64 %549 to i64*
  %552 = load i64, i64* %551, align 8
  store i64 %552, i64* %55, align 1
  store double 0.000000e+00, double* %57, align 1
  %553 = add i64 %548, add (i64 ptrtoint (%G_0xa58ed__rip__type* @G_0xa58ed__rip_ to i64), i64 23)
  %554 = add i64 %548, 31
  store i64 %554, i64* %3, align 8
  %555 = inttoptr i64 %553 to double*
  %556 = load double, double* %555, align 8
  %557 = load double, double* %44, align 1
  %558 = fmul double %556, %557
  %559 = bitcast i64 %552 to double
  %560 = fmul double %558, %559
  store double %560, double* %526, align 1
  store i64 0, i64* %527, align 1
  %561 = load i64, i64* %RBP.i, align 8
  %562 = add i64 %561, -296
  %563 = add i64 %548, 47
  store i64 %563, i64* %3, align 8
  %564 = inttoptr i64 %562 to double*
  store double %560, double* %564, align 8
  %565 = load i64, i64* %RBP.i, align 8
  %566 = add i64 %565, -248
  %567 = load i64, i64* %3, align 8
  %568 = add i64 %567, 7
  store i64 %568, i64* %3, align 8
  %569 = inttoptr i64 %566 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %R8.i3013, align 8
  %RDI.i2913 = getelementptr inbounds %union.anon, %union.anon* %60, i64 0, i32 0
  %571 = add i64 %570, 12
  %572 = add i64 %567, 11
  store i64 %572, i64* %3, align 8
  %573 = inttoptr i64 %571 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RDI.i2913, align 8
  store i8 0, i8* %14, align 1
  %576 = and i32 %574, 255
  %577 = tail call i32 @llvm.ctpop.i32(i32 %576)
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  store i8 %580, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %581 = icmp eq i32 %574, 0
  %582 = zext i1 %581 to i8
  store i8 %582, i8* %29, align 1
  %583 = lshr i32 %574, 31
  %584 = trunc i32 %583 to i8
  store i8 %584, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i64 %575, i64* %RAX.i1161, align 8
  %585 = add i64 %565, -312
  %586 = load i32, i32* %98, align 4
  %587 = add i64 %567, 22
  store i64 %587, i64* %3, align 8
  %588 = inttoptr i64 %585 to i32*
  store i32 %586, i32* %588, align 4
  %589 = load i64, i64* %3, align 8
  %590 = load i32, i32* %EAX.i2800, align 8
  %591 = sext i32 %590 to i64
  %592 = lshr i64 %591, 32
  store i64 %592, i64* %93, align 8
  %593 = load i32, i32* %ESI.i1668, align 4
  %594 = add i64 %589, 3
  store i64 %594, i64* %3, align 8
  %595 = zext i32 %590 to i64
  %596 = sext i32 %593 to i64
  %597 = shl nuw i64 %592, 32
  %598 = or i64 %597, %595
  %599 = sdiv i64 %598, %596
  %600 = shl i64 %599, 32
  %601 = ashr exact i64 %600, 32
  %602 = icmp eq i64 %599, %601
  br i1 %602, label %605, label %603

; <label>:603:                                    ; preds = %routine_idivl__ecx.exit3025
  %604 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %594, %struct.Memory* %547)
  %.pre168 = load i32, i32* %EAX.i2800, align 4
  %.pre169 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit2899

; <label>:605:                                    ; preds = %routine_idivl__ecx.exit3025
  %606 = srem i64 %598, %596
  %607 = and i64 %599, 4294967295
  store i64 %607, i64* %RAX.i1161, align 8
  %608 = and i64 %606, 4294967295
  store i64 %608, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %609 = trunc i64 %599 to i32
  br label %routine_idivl__esi.exit2899

routine_idivl__esi.exit2899:                      ; preds = %605, %603
  %610 = phi i64 [ %.pre169, %603 ], [ %594, %605 ]
  %611 = phi i32 [ %.pre168, %603 ], [ %609, %605 ]
  %612 = phi %struct.Memory* [ %604, %603 ], [ %547, %605 ]
  %613 = load i64, i64* %RBP.i, align 8
  %614 = add i64 %613, -188
  %615 = add i64 %610, 6
  store i64 %615, i64* %3, align 8
  %616 = inttoptr i64 %614 to i32*
  store i32 %611, i32* %616, align 4
  %617 = load i64, i64* %RBP.i, align 8
  %618 = add i64 %617, -248
  %619 = load i64, i64* %3, align 8
  %620 = add i64 %619, 7
  store i64 %620, i64* %3, align 8
  %621 = inttoptr i64 %618 to i64*
  %622 = load i64, i64* %621, align 8
  store i64 %622, i64* %R8.i3013, align 8
  %623 = add i64 %622, 12
  %624 = add i64 %619, 11
  store i64 %624, i64* %3, align 8
  %625 = inttoptr i64 %623 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = zext i32 %626 to i64
  store i64 %627, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  %628 = and i32 %626, 255
  %629 = tail call i32 @llvm.ctpop.i32(i32 %628)
  %630 = trunc i32 %629 to i8
  %631 = and i8 %630, 1
  %632 = xor i8 %631, 1
  store i8 %632, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %633 = icmp eq i32 %626, 0
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %29, align 1
  %635 = lshr i32 %626, 31
  %636 = trunc i32 %635 to i8
  store i8 %636, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %637 = sext i32 %626 to i64
  %638 = lshr i64 %637, 32
  store i64 %638, i64* %93, align 8
  %639 = load i32, i32* %ESI.i1668, align 4
  %640 = add i64 %619, 17
  store i64 %640, i64* %3, align 8
  %641 = sext i32 %639 to i64
  %642 = shl nuw i64 %638, 32
  %643 = or i64 %642, %627
  %644 = sdiv i64 %643, %641
  %645 = shl i64 %644, 32
  %646 = ashr exact i64 %645, 32
  %647 = icmp eq i64 %644, %646
  br i1 %647, label %650, label %648

; <label>:648:                                    ; preds = %routine_idivl__esi.exit2899
  %649 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %640, %struct.Memory* %612)
  %.pre170 = load i64, i64* %RBP.i, align 8
  %.pre171 = load i32, i32* %98, align 4
  %.pre172 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit2879

; <label>:650:                                    ; preds = %routine_idivl__esi.exit2899
  %651 = srem i64 %643, %641
  %652 = and i64 %644, 4294967295
  store i64 %652, i64* %RAX.i1161, align 8
  %653 = and i64 %651, 4294967295
  store i64 %653, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %654 = trunc i64 %651 to i32
  br label %routine_idivl__esi.exit2879

routine_idivl__esi.exit2879:                      ; preds = %650, %648
  %655 = phi i64 [ %.pre172, %648 ], [ %640, %650 ]
  %656 = phi i32 [ %.pre171, %648 ], [ %654, %650 ]
  %657 = phi i64 [ %.pre170, %648 ], [ %617, %650 ]
  %658 = phi %struct.Memory* [ %649, %648 ], [ %612, %650 ]
  %659 = add i64 %657, -192
  %660 = add i64 %655, 6
  store i64 %660, i64* %3, align 8
  %661 = inttoptr i64 %659 to i32*
  store i32 %656, i32* %661, align 4
  %662 = load i64, i64* %RBP.i, align 8
  %663 = add i64 %662, -188
  %664 = load i64, i64* %3, align 8
  %665 = add i64 %664, 6
  store i64 %665, i64* %3, align 8
  %666 = inttoptr i64 %663 to i32*
  %667 = load i32, i32* %666, align 4
  %668 = add i32 %667, 15
  %669 = zext i32 %668 to i64
  store i64 %669, i64* %RDX.i1748, align 8
  %670 = icmp ugt i32 %667, -16
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %14, align 1
  %672 = and i32 %668, 255
  %673 = tail call i32 @llvm.ctpop.i32(i32 %672)
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  store i8 %676, i8* %21, align 1
  %677 = xor i32 %668, %667
  %678 = lshr i32 %677, 4
  %679 = trunc i32 %678 to i8
  %680 = and i8 %679, 1
  store i8 %680, i8* %26, align 1
  %681 = icmp eq i32 %668, 0
  %682 = zext i1 %681 to i8
  store i8 %682, i8* %29, align 1
  %683 = lshr i32 %668, 31
  %684 = trunc i32 %683 to i8
  store i8 %684, i8* %32, align 1
  %685 = lshr i32 %667, 31
  %686 = xor i32 %683, %685
  %687 = add nuw nsw i32 %686, %683
  %688 = icmp eq i32 %687, 2
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %38, align 1
  %690 = add i64 %662, -196
  %691 = add i64 %664, 15
  store i64 %691, i64* %3, align 8
  %692 = inttoptr i64 %690 to i32*
  store i32 %668, i32* %692, align 4
  %693 = load i64, i64* %RBP.i, align 8
  %694 = add i64 %693, -248
  %695 = load i64, i64* %3, align 8
  %696 = add i64 %695, 7
  store i64 %696, i64* %3, align 8
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697, align 8
  store i64 %698, i64* %R8.i3013, align 8
  %699 = add i64 %698, 16
  %700 = add i64 %695, 11
  store i64 %700, i64* %3, align 8
  %701 = inttoptr i64 %699 to i32*
  %702 = load i32, i32* %701, align 4
  %703 = zext i32 %702 to i64
  store i8 0, i8* %14, align 1
  %704 = and i32 %702, 255
  %705 = tail call i32 @llvm.ctpop.i32(i32 %704)
  %706 = trunc i32 %705 to i8
  %707 = and i8 %706, 1
  %708 = xor i8 %707, 1
  store i8 %708, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %709 = icmp eq i32 %702, 0
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %29, align 1
  %711 = lshr i32 %702, 31
  %712 = trunc i32 %711 to i8
  store i8 %712, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i64 %703, i64* %RAX.i1161, align 8
  %713 = sext i32 %702 to i64
  %714 = lshr i64 %713, 32
  store i64 %714, i64* %93, align 8
  %715 = load i32, i32* %ESI.i1668, align 4
  %716 = add i64 %695, 19
  store i64 %716, i64* %3, align 8
  %717 = sext i32 %715 to i64
  %718 = shl nuw i64 %714, 32
  %719 = or i64 %718, %703
  %720 = sdiv i64 %719, %717
  %721 = shl i64 %720, 32
  %722 = ashr exact i64 %721, 32
  %723 = icmp eq i64 %720, %722
  br i1 %723, label %726, label %724

; <label>:724:                                    ; preds = %routine_idivl__esi.exit2879
  %725 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %716, %struct.Memory* %658)
  %.pre173 = load i64, i64* %RBP.i, align 8
  %.pre174 = load i32, i32* %EAX.i2800, align 4
  %.pre175 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit2852

; <label>:726:                                    ; preds = %routine_idivl__esi.exit2879
  %727 = srem i64 %719, %717
  %728 = and i64 %720, 4294967295
  store i64 %728, i64* %RAX.i1161, align 8
  %729 = and i64 %727, 4294967295
  store i64 %729, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %730 = trunc i64 %720 to i32
  br label %routine_idivl__esi.exit2852

routine_idivl__esi.exit2852:                      ; preds = %726, %724
  %731 = phi i64 [ %.pre175, %724 ], [ %716, %726 ]
  %732 = phi i32 [ %.pre174, %724 ], [ %730, %726 ]
  %733 = phi i64 [ %.pre173, %724 ], [ %693, %726 ]
  %734 = phi %struct.Memory* [ %725, %724 ], [ %658, %726 ]
  %735 = add i64 %733, -200
  %736 = add i64 %731, 6
  store i64 %736, i64* %3, align 8
  %737 = inttoptr i64 %735 to i32*
  store i32 %732, i32* %737, align 4
  %738 = load i64, i64* %RBP.i, align 8
  %739 = add i64 %738, -248
  %740 = load i64, i64* %3, align 8
  %741 = add i64 %740, 7
  store i64 %741, i64* %3, align 8
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742, align 8
  store i64 %743, i64* %R8.i3013, align 8
  %744 = add i64 %743, 16
  %745 = add i64 %740, 11
  store i64 %745, i64* %3, align 8
  %746 = inttoptr i64 %744 to i32*
  %747 = load i32, i32* %746, align 4
  %748 = zext i32 %747 to i64
  store i64 %748, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  %749 = and i32 %747, 255
  %750 = tail call i32 @llvm.ctpop.i32(i32 %749)
  %751 = trunc i32 %750 to i8
  %752 = and i8 %751, 1
  %753 = xor i8 %752, 1
  store i8 %753, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %754 = icmp eq i32 %747, 0
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %29, align 1
  %756 = lshr i32 %747, 31
  %757 = trunc i32 %756 to i8
  store i8 %757, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %758 = sext i32 %747 to i64
  %759 = lshr i64 %758, 32
  store i64 %759, i64* %93, align 8
  %760 = load i32, i32* %ESI.i1668, align 4
  %761 = add i64 %740, 17
  store i64 %761, i64* %3, align 8
  %762 = sext i32 %760 to i64
  %763 = shl nuw i64 %759, 32
  %764 = or i64 %763, %748
  %765 = sdiv i64 %764, %762
  %766 = shl i64 %765, 32
  %767 = ashr exact i64 %766, 32
  %768 = icmp eq i64 %765, %767
  br i1 %768, label %771, label %769

; <label>:769:                                    ; preds = %routine_idivl__esi.exit2852
  %770 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %761, %struct.Memory* %734)
  %.pre176 = load i64, i64* %RBP.i, align 8
  %.pre177 = load i32, i32* %98, align 4
  %.pre178 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit2834

; <label>:771:                                    ; preds = %routine_idivl__esi.exit2852
  %772 = srem i64 %764, %762
  %773 = and i64 %765, 4294967295
  store i64 %773, i64* %RAX.i1161, align 8
  %774 = and i64 %772, 4294967295
  store i64 %774, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %775 = trunc i64 %772 to i32
  br label %routine_idivl__esi.exit2834

routine_idivl__esi.exit2834:                      ; preds = %771, %769
  %776 = phi i64 [ %.pre178, %769 ], [ %761, %771 ]
  %777 = phi i32 [ %.pre177, %769 ], [ %775, %771 ]
  %778 = phi i64 [ %.pre176, %769 ], [ %738, %771 ]
  %779 = phi %struct.Memory* [ %770, %769 ], [ %734, %771 ]
  %780 = add i64 %778, -204
  %781 = add i64 %776, 6
  store i64 %781, i64* %3, align 8
  %782 = inttoptr i64 %780 to i32*
  store i32 %777, i32* %782, align 4
  %783 = load i64, i64* %RBP.i, align 8
  %784 = add i64 %783, -200
  %785 = load i64, i64* %3, align 8
  %786 = add i64 %785, 6
  store i64 %786, i64* %3, align 8
  %787 = inttoptr i64 %784 to i32*
  %788 = load i32, i32* %787, align 4
  %789 = add i32 %788, 15
  %790 = zext i32 %789 to i64
  store i64 %790, i64* %RDX.i1748, align 8
  %791 = icmp ugt i32 %788, -16
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %14, align 1
  %793 = and i32 %789, 255
  %794 = tail call i32 @llvm.ctpop.i32(i32 %793)
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = xor i8 %796, 1
  store i8 %797, i8* %21, align 1
  %798 = xor i32 %789, %788
  %799 = lshr i32 %798, 4
  %800 = trunc i32 %799 to i8
  %801 = and i8 %800, 1
  store i8 %801, i8* %26, align 1
  %802 = icmp eq i32 %789, 0
  %803 = zext i1 %802 to i8
  store i8 %803, i8* %29, align 1
  %804 = lshr i32 %789, 31
  %805 = trunc i32 %804 to i8
  store i8 %805, i8* %32, align 1
  %806 = lshr i32 %788, 31
  %807 = xor i32 %804, %806
  %808 = add nuw nsw i32 %807, %804
  %809 = icmp eq i32 %808, 2
  %810 = zext i1 %809 to i8
  store i8 %810, i8* %38, align 1
  %811 = add i64 %783, -208
  %812 = add i64 %785, 15
  store i64 %812, i64* %3, align 8
  %813 = inttoptr i64 %811 to i32*
  store i32 %789, i32* %813, align 4
  %814 = load i64, i64* %RBP.i, align 8
  %815 = add i64 %814, -196
  %816 = load i64, i64* %3, align 8
  %817 = add i64 %816, 6
  store i64 %817, i64* %3, align 8
  %818 = inttoptr i64 %815 to i32*
  %819 = load i32, i32* %818, align 4
  %820 = zext i32 %819 to i64
  store i64 %820, i64* %RDX.i1748, align 8
  %821 = add i64 %814, -316
  %822 = load i32, i32* %ECX.i2881, align 4
  %823 = add i64 %816, 12
  store i64 %823, i64* %3, align 8
  %824 = inttoptr i64 %821 to i32*
  store i32 %822, i32* %824, align 4
  %825 = load i32, i32* %98, align 4
  %826 = zext i32 %825 to i64
  %827 = load i64, i64* %3, align 8
  store i64 %826, i64* %RCX.i1519, align 8
  %828 = load i64, i64* %RBP.i, align 8
  %829 = add i64 %828, -312
  %830 = add i64 %827, 8
  store i64 %830, i64* %3, align 8
  %831 = inttoptr i64 %829 to i32*
  %832 = load i32, i32* %831, align 4
  %833 = zext i32 %832 to i64
  store i64 %833, i64* %RDX.i1748, align 8
  %834 = add i64 %827, 10
  store i64 %834, i64* %3, align 8
  %835 = trunc i32 %825 to i5
  switch i5 %835, label %841 [
    i5 0, label %routine_shll__cl___edx.exit
    i5 1, label %836
  ]

; <label>:836:                                    ; preds = %routine_idivl__esi.exit2834
  %837 = shl i32 %832, 1
  %838 = icmp slt i32 %832, 0
  %839 = icmp slt i32 %837, 0
  %840 = xor i1 %838, %839
  br label %850

; <label>:841:                                    ; preds = %routine_idivl__esi.exit2834
  %842 = and i32 %825, 31
  %843 = zext i32 %842 to i64
  %844 = add nuw nsw i64 %843, 4294967295
  %845 = and i64 %844, 4294967295
  %846 = shl i64 %833, %845
  %847 = trunc i64 %846 to i32
  %848 = icmp slt i32 %847, 0
  %849 = shl i32 %847, 1
  br label %850

; <label>:850:                                    ; preds = %841, %836
  %851 = phi i1 [ %838, %836 ], [ %848, %841 ]
  %852 = phi i1 [ %840, %836 ], [ false, %841 ]
  %853 = phi i32 [ %837, %836 ], [ %849, %841 ]
  %854 = zext i32 %853 to i64
  store i64 %854, i64* %RDX.i1748, align 8
  %855 = zext i1 %851 to i8
  store i8 %855, i8* %14, align 1
  %856 = and i32 %853, 254
  %857 = tail call i32 @llvm.ctpop.i32(i32 %856)
  %858 = trunc i32 %857 to i8
  %859 = and i8 %858, 1
  %860 = xor i8 %859, 1
  store i8 %860, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %861 = icmp eq i32 %853, 0
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %29, align 1
  %863 = lshr i32 %853, 31
  %864 = trunc i32 %863 to i8
  store i8 %864, i8* %32, align 1
  %865 = zext i1 %852 to i8
  store i8 %865, i8* %38, align 1
  br label %routine_shll__cl___edx.exit

routine_shll__cl___edx.exit:                      ; preds = %850, %routine_idivl__esi.exit2834
  %866 = phi i32 [ %853, %850 ], [ %832, %routine_idivl__esi.exit2834 ]
  %867 = zext i32 %866 to i64
  store i64 %867, i64* %RAX.i1161, align 8
  %868 = sext i32 %866 to i64
  %869 = lshr i64 %868, 32
  store i64 %869, i64* %93, align 8
  %870 = load i32, i32* %ESI.i1668, align 4
  %871 = add i64 %827, 15
  store i64 %871, i64* %3, align 8
  %872 = sext i32 %870 to i64
  %873 = shl nuw i64 %869, 32
  %874 = or i64 %873, %867
  %875 = sdiv i64 %874, %872
  %876 = shl i64 %875, 32
  %877 = ashr exact i64 %876, 32
  %878 = icmp eq i64 %875, %877
  br i1 %878, label %881, label %879

; <label>:879:                                    ; preds = %routine_shll__cl___edx.exit
  %880 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %871, %struct.Memory* %779)
  %.pre179 = load i64, i64* %RBP.i, align 8
  %.pre180 = load i32, i32* %EAX.i2800, align 4
  %.pre181 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit2798

; <label>:881:                                    ; preds = %routine_shll__cl___edx.exit
  %882 = srem i64 %874, %872
  %883 = and i64 %875, 4294967295
  store i64 %883, i64* %RAX.i1161, align 8
  %884 = and i64 %882, 4294967295
  store i64 %884, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %885 = trunc i64 %875 to i32
  br label %routine_idivl__esi.exit2798

routine_idivl__esi.exit2798:                      ; preds = %881, %879
  %886 = phi i64 [ %.pre181, %879 ], [ %871, %881 ]
  %887 = phi i32 [ %.pre180, %879 ], [ %885, %881 ]
  %888 = phi i64 [ %.pre179, %879 ], [ %828, %881 ]
  %889 = phi %struct.Memory* [ %880, %879 ], [ %779, %881 ]
  %890 = add i64 %888, -88
  %891 = add i64 %886, 3
  store i64 %891, i64* %3, align 8
  %892 = inttoptr i64 %890 to i32*
  store i32 %887, i32* %892, align 4
  %893 = load i64, i64* %RBP.i, align 8
  %894 = add i64 %893, -208
  %895 = load i64, i64* %3, align 8
  %896 = add i64 %895, 6
  store i64 %896, i64* %3, align 8
  %897 = inttoptr i64 %894 to i32*
  %898 = load i32, i32* %897, align 4
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RCX.i1519, align 8
  %900 = add i64 %893, -312
  %901 = add i64 %895, 12
  store i64 %901, i64* %3, align 8
  %902 = inttoptr i64 %900 to i32*
  %903 = load i32, i32* %902, align 4
  %904 = zext i32 %903 to i64
  store i64 %904, i64* %RAX.i1161, align 8
  %905 = add i64 %895, 14
  store i64 %905, i64* %3, align 8
  %906 = trunc i32 %898 to i5
  switch i5 %906, label %912 [
    i5 0, label %routine_shll__cl___eax.exit2786
    i5 1, label %907
  ]

; <label>:907:                                    ; preds = %routine_idivl__esi.exit2798
  %908 = shl i32 %903, 1
  %909 = icmp slt i32 %903, 0
  %910 = icmp slt i32 %908, 0
  %911 = xor i1 %909, %910
  br label %921

; <label>:912:                                    ; preds = %routine_idivl__esi.exit2798
  %913 = and i32 %898, 31
  %914 = zext i32 %913 to i64
  %915 = add nuw nsw i64 %914, 4294967295
  %916 = and i64 %915, 4294967295
  %917 = shl i64 %904, %916
  %918 = trunc i64 %917 to i32
  %919 = icmp slt i32 %918, 0
  %920 = shl i32 %918, 1
  br label %921

; <label>:921:                                    ; preds = %912, %907
  %922 = phi i1 [ %909, %907 ], [ %919, %912 ]
  %923 = phi i1 [ %911, %907 ], [ false, %912 ]
  %924 = phi i32 [ %908, %907 ], [ %920, %912 ]
  %925 = zext i32 %924 to i64
  store i64 %925, i64* %RAX.i1161, align 8
  %926 = zext i1 %922 to i8
  store i8 %926, i8* %14, align 1
  %927 = and i32 %924, 254
  %928 = tail call i32 @llvm.ctpop.i32(i32 %927)
  %929 = trunc i32 %928 to i8
  %930 = and i8 %929, 1
  %931 = xor i8 %930, 1
  store i8 %931, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %932 = icmp eq i32 %924, 0
  %933 = zext i1 %932 to i8
  store i8 %933, i8* %29, align 1
  %934 = lshr i32 %924, 31
  %935 = trunc i32 %934 to i8
  store i8 %935, i8* %32, align 1
  %936 = zext i1 %923 to i8
  store i8 %936, i8* %38, align 1
  br label %routine_shll__cl___eax.exit2786

routine_shll__cl___eax.exit2786:                  ; preds = %921, %routine_idivl__esi.exit2798
  %937 = phi i32 [ %924, %921 ], [ %903, %routine_idivl__esi.exit2798 ]
  %938 = sext i32 %937 to i64
  %939 = lshr i64 %938, 32
  store i64 %939, i64* %93, align 8
  %940 = add i64 %893, -316
  %941 = add i64 %895, 21
  store i64 %941, i64* %3, align 8
  %942 = inttoptr i64 %940 to i32*
  %943 = load i32, i32* %942, align 4
  %944 = zext i32 %943 to i64
  store i64 %944, i64* %RSI.i2777, align 8
  %945 = add i64 %895, 23
  store i64 %945, i64* %3, align 8
  %946 = zext i32 %937 to i64
  %947 = sext i32 %943 to i64
  %948 = shl nuw i64 %939, 32
  %949 = or i64 %948, %946
  %950 = sdiv i64 %949, %947
  %951 = shl i64 %950, 32
  %952 = ashr exact i64 %951, 32
  %953 = icmp eq i64 %950, %952
  br i1 %953, label %956, label %954

; <label>:954:                                    ; preds = %routine_shll__cl___eax.exit2786
  %955 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %945, %struct.Memory* %889)
  %.pre182 = load i64, i64* %RBP.i, align 8
  %.pre183 = load i32, i32* %EAX.i2800, align 4
  %.pre184 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit

; <label>:956:                                    ; preds = %routine_shll__cl___eax.exit2786
  %957 = srem i64 %949, %947
  %958 = and i64 %950, 4294967295
  store i64 %958, i64* %RAX.i1161, align 8
  %959 = and i64 %957, 4294967295
  store i64 %959, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %960 = trunc i64 %950 to i32
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %956, %954
  %961 = phi i64 [ %.pre184, %954 ], [ %945, %956 ]
  %962 = phi i32 [ %.pre183, %954 ], [ %960, %956 ]
  %963 = phi i64 [ %.pre182, %954 ], [ %893, %956 ]
  %964 = phi %struct.Memory* [ %955, %954 ], [ %889, %956 ]
  %965 = add i64 %963, -184
  %966 = add i64 %961, 6
  store i64 %966, i64* %3, align 8
  %967 = inttoptr i64 %965 to i32*
  store i32 %962, i32* %967, align 4
  %968 = load i64, i64* %RBP.i, align 8
  %969 = add i64 %968, -24
  %970 = load i64, i64* %3, align 8
  %971 = add i64 %970, 7
  store i64 %971, i64* %3, align 8
  %972 = inttoptr i64 %969 to i32*
  store i32 0, i32* %972, align 4
  %.pre185 = load i64, i64* %3, align 8
  br label %block_.L_40c029

block_.L_40c029:                                  ; preds = %block_.L_40c0e7, %routine_idivl__esi.exit
  %973 = phi i64 [ %1434, %block_.L_40c0e7 ], [ %.pre185, %routine_idivl__esi.exit ]
  %974 = load i64, i64* %RBP.i, align 8
  %975 = add i64 %974, -24
  %976 = add i64 %973, 4
  store i64 %976, i64* %3, align 8
  %977 = inttoptr i64 %975 to i32*
  %978 = load i32, i32* %977, align 4
  %979 = add i32 %978, -4
  %980 = icmp ult i32 %978, 4
  %981 = zext i1 %980 to i8
  store i8 %981, i8* %14, align 1
  %982 = and i32 %979, 255
  %983 = tail call i32 @llvm.ctpop.i32(i32 %982)
  %984 = trunc i32 %983 to i8
  %985 = and i8 %984, 1
  %986 = xor i8 %985, 1
  store i8 %986, i8* %21, align 1
  %987 = xor i32 %979, %978
  %988 = lshr i32 %987, 4
  %989 = trunc i32 %988 to i8
  %990 = and i8 %989, 1
  store i8 %990, i8* %26, align 1
  %991 = icmp eq i32 %979, 0
  %992 = zext i1 %991 to i8
  store i8 %992, i8* %29, align 1
  %993 = lshr i32 %979, 31
  %994 = trunc i32 %993 to i8
  store i8 %994, i8* %32, align 1
  %995 = lshr i32 %978, 31
  %996 = xor i32 %993, %995
  %997 = add nuw nsw i32 %996, %995
  %998 = icmp eq i32 %997, 2
  %999 = zext i1 %998 to i8
  store i8 %999, i8* %38, align 1
  %1000 = icmp ne i8 %994, 0
  %1001 = xor i1 %1000, %998
  %.v234 = select i1 %1001, i64 10, i64 209
  %1002 = add i64 %973, %.v234
  store i64 %1002, i64* %3, align 8
  br i1 %1001, label %block_40c033, label %block_.L_40c0fa

block_40c033:                                     ; preds = %block_.L_40c029
  %1003 = add i64 %974, -20
  %1004 = add i64 %1002, 7
  store i64 %1004, i64* %3, align 8
  %1005 = inttoptr i64 %1003 to i32*
  store i32 0, i32* %1005, align 4
  %.pre225 = load i64, i64* %3, align 8
  br label %block_.L_40c03a

block_.L_40c03a:                                  ; preds = %block_40c044, %block_40c033
  %1006 = phi i64 [ %1404, %block_40c044 ], [ %.pre225, %block_40c033 ]
  %1007 = load i64, i64* %RBP.i, align 8
  %1008 = add i64 %1007, -20
  %1009 = add i64 %1006, 4
  store i64 %1009, i64* %3, align 8
  %1010 = inttoptr i64 %1008 to i32*
  %1011 = load i32, i32* %1010, align 4
  %1012 = add i32 %1011, -4
  %1013 = icmp ult i32 %1011, 4
  %1014 = zext i1 %1013 to i8
  store i8 %1014, i8* %14, align 1
  %1015 = and i32 %1012, 255
  %1016 = tail call i32 @llvm.ctpop.i32(i32 %1015)
  %1017 = trunc i32 %1016 to i8
  %1018 = and i8 %1017, 1
  %1019 = xor i8 %1018, 1
  store i8 %1019, i8* %21, align 1
  %1020 = xor i32 %1012, %1011
  %1021 = lshr i32 %1020, 4
  %1022 = trunc i32 %1021 to i8
  %1023 = and i8 %1022, 1
  store i8 %1023, i8* %26, align 1
  %1024 = icmp eq i32 %1012, 0
  %1025 = zext i1 %1024 to i8
  store i8 %1025, i8* %29, align 1
  %1026 = lshr i32 %1012, 31
  %1027 = trunc i32 %1026 to i8
  store i8 %1027, i8* %32, align 1
  %1028 = lshr i32 %1011, 31
  %1029 = xor i32 %1026, %1028
  %1030 = add nuw nsw i32 %1029, %1028
  %1031 = icmp eq i32 %1030, 2
  %1032 = zext i1 %1031 to i8
  store i8 %1032, i8* %38, align 1
  %1033 = icmp ne i8 %1027, 0
  %1034 = xor i1 %1033, %1031
  %.v233 = select i1 %1034, i64 10, i64 173
  %1035 = add i64 %1006, %.v233
  store i64 %1035, i64* %3, align 8
  br i1 %1034, label %block_40c044, label %block_.L_40c0e7

block_40c044:                                     ; preds = %block_.L_40c03a
  %1036 = add i64 %1007, -176
  store i64 %1036, i64* %RAX.i1161, align 8
  %1037 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1038 = add i64 %1037, 12600
  store i64 %1038, i64* %RCX.i1519, align 8
  %1039 = icmp ugt i64 %1037, -12601
  %1040 = zext i1 %1039 to i8
  store i8 %1040, i8* %14, align 1
  %1041 = trunc i64 %1038 to i32
  %1042 = and i32 %1041, 255
  %1043 = tail call i32 @llvm.ctpop.i32(i32 %1042)
  %1044 = trunc i32 %1043 to i8
  %1045 = and i8 %1044, 1
  %1046 = xor i8 %1045, 1
  store i8 %1046, i8* %21, align 1
  %1047 = xor i64 %1037, 16
  %1048 = xor i64 %1047, %1038
  %1049 = lshr i64 %1048, 4
  %1050 = trunc i64 %1049 to i8
  %1051 = and i8 %1050, 1
  store i8 %1051, i8* %26, align 1
  %1052 = icmp eq i64 %1038, 0
  %1053 = zext i1 %1052 to i8
  store i8 %1053, i8* %29, align 1
  %1054 = lshr i64 %1038, 63
  %1055 = trunc i64 %1054 to i8
  store i8 %1055, i8* %32, align 1
  %1056 = lshr i64 %1037, 63
  %1057 = xor i64 %1054, %1056
  %1058 = add nuw nsw i64 %1057, %1054
  %1059 = icmp eq i64 %1058, 2
  %1060 = zext i1 %1059 to i8
  store i8 %1060, i8* %38, align 1
  %1061 = add i64 %1035, 25
  store i64 %1061, i64* %3, align 8
  %1062 = load i32, i32* %1010, align 4
  %1063 = zext i32 %1062 to i64
  store i64 %1063, i64* %RDX.i1748, align 8
  %1064 = add i64 %1007, -4
  %1065 = add i64 %1035, 28
  store i64 %1065, i64* %3, align 8
  %1066 = inttoptr i64 %1064 to i32*
  %1067 = load i32, i32* %1066, align 4
  %1068 = add i32 %1067, %1062
  %1069 = zext i32 %1068 to i64
  store i64 %1069, i64* %RDX.i1748, align 8
  %1070 = sext i32 %1068 to i64
  %1071 = shl nsw i64 %1070, 5
  store i64 %1071, i64* %RSI.i2777, align 8
  %1072 = load i64, i64* %RCX.i1519, align 8
  %1073 = add i64 %1071, %1072
  store i64 %1073, i64* %RCX.i1519, align 8
  %1074 = icmp ult i64 %1073, %1072
  %1075 = icmp ult i64 %1073, %1071
  %1076 = or i1 %1074, %1075
  %1077 = zext i1 %1076 to i8
  store i8 %1077, i8* %14, align 1
  %1078 = trunc i64 %1073 to i32
  %1079 = and i32 %1078, 255
  %1080 = tail call i32 @llvm.ctpop.i32(i32 %1079)
  %1081 = trunc i32 %1080 to i8
  %1082 = and i8 %1081, 1
  %1083 = xor i8 %1082, 1
  store i8 %1083, i8* %21, align 1
  %1084 = xor i64 %1072, %1073
  %1085 = lshr i64 %1084, 4
  %1086 = trunc i64 %1085 to i8
  %1087 = and i8 %1086, 1
  store i8 %1087, i8* %26, align 1
  %1088 = icmp eq i64 %1073, 0
  %1089 = zext i1 %1088 to i8
  store i8 %1089, i8* %29, align 1
  %1090 = lshr i64 %1073, 63
  %1091 = trunc i64 %1090 to i8
  store i8 %1091, i8* %32, align 1
  %1092 = lshr i64 %1072, 63
  %1093 = lshr i64 %1070, 58
  %1094 = and i64 %1093, 1
  %1095 = xor i64 %1090, %1092
  %1096 = xor i64 %1090, %1094
  %1097 = add nuw nsw i64 %1095, %1096
  %1098 = icmp eq i64 %1097, 2
  %1099 = zext i1 %1098 to i8
  store i8 %1099, i8* %38, align 1
  %1100 = load i64, i64* %RBP.i, align 8
  %1101 = add i64 %1100, -24
  %1102 = add i64 %1035, 41
  store i64 %1102, i64* %3, align 8
  %1103 = inttoptr i64 %1101 to i32*
  %1104 = load i32, i32* %1103, align 4
  %1105 = zext i32 %1104 to i64
  store i64 %1105, i64* %RDX.i1748, align 8
  %1106 = add i64 %1100, -8
  %1107 = add i64 %1035, 44
  store i64 %1107, i64* %3, align 8
  %1108 = inttoptr i64 %1106 to i32*
  %1109 = load i32, i32* %1108, align 4
  %1110 = add i32 %1109, %1104
  %1111 = zext i32 %1110 to i64
  store i64 %1111, i64* %RDX.i1748, align 8
  %1112 = icmp ult i32 %1110, %1104
  %1113 = icmp ult i32 %1110, %1109
  %1114 = or i1 %1112, %1113
  %1115 = zext i1 %1114 to i8
  store i8 %1115, i8* %14, align 1
  %1116 = and i32 %1110, 255
  %1117 = tail call i32 @llvm.ctpop.i32(i32 %1116)
  %1118 = trunc i32 %1117 to i8
  %1119 = and i8 %1118, 1
  %1120 = xor i8 %1119, 1
  store i8 %1120, i8* %21, align 1
  %1121 = xor i32 %1109, %1104
  %1122 = xor i32 %1121, %1110
  %1123 = lshr i32 %1122, 4
  %1124 = trunc i32 %1123 to i8
  %1125 = and i8 %1124, 1
  store i8 %1125, i8* %26, align 1
  %1126 = icmp eq i32 %1110, 0
  %1127 = zext i1 %1126 to i8
  store i8 %1127, i8* %29, align 1
  %1128 = lshr i32 %1110, 31
  %1129 = trunc i32 %1128 to i8
  store i8 %1129, i8* %32, align 1
  %1130 = lshr i32 %1104, 31
  %1131 = lshr i32 %1109, 31
  %1132 = xor i32 %1128, %1130
  %1133 = xor i32 %1128, %1131
  %1134 = add nuw nsw i32 %1132, %1133
  %1135 = icmp eq i32 %1134, 2
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %38, align 1
  %1137 = sext i32 %1110 to i64
  store i64 %1137, i64* %RSI.i2777, align 8
  %1138 = shl nsw i64 %1137, 1
  %1139 = add i64 %1073, %1138
  %1140 = add i64 %1035, 51
  store i64 %1140, i64* %3, align 8
  %1141 = inttoptr i64 %1139 to i16*
  %1142 = load i16, i16* %1141, align 2
  %1143 = zext i16 %1142 to i64
  store i64 %1143, i64* %RDX.i1748, align 8
  %1144 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1145 = add i64 %1144, 13112
  store i64 %1145, i64* %RCX.i1519, align 8
  %1146 = icmp ugt i64 %1144, -13113
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %14, align 1
  %1148 = trunc i64 %1145 to i32
  %1149 = and i32 %1148, 255
  %1150 = tail call i32 @llvm.ctpop.i32(i32 %1149)
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = xor i8 %1152, 1
  store i8 %1153, i8* %21, align 1
  %1154 = xor i64 %1144, 16
  %1155 = xor i64 %1154, %1145
  %1156 = lshr i64 %1155, 4
  %1157 = trunc i64 %1156 to i8
  %1158 = and i8 %1157, 1
  store i8 %1158, i8* %26, align 1
  %1159 = icmp eq i64 %1145, 0
  %1160 = zext i1 %1159 to i8
  store i8 %1160, i8* %29, align 1
  %1161 = lshr i64 %1145, 63
  %1162 = trunc i64 %1161 to i8
  store i8 %1162, i8* %32, align 1
  %1163 = lshr i64 %1144, 63
  %1164 = xor i64 %1161, %1163
  %1165 = add nuw nsw i64 %1164, %1161
  %1166 = icmp eq i64 %1165, 2
  %1167 = zext i1 %1166 to i8
  store i8 %1167, i8* %38, align 1
  %1168 = add i64 %1100, -20
  %1169 = add i64 %1035, 70
  store i64 %1169, i64* %3, align 8
  %1170 = inttoptr i64 %1168 to i32*
  %1171 = load i32, i32* %1170, align 4
  %1172 = sext i32 %1171 to i64
  %1173 = shl nsw i64 %1172, 6
  store i64 %1173, i64* %RSI.i2777, align 8
  %1174 = add i64 %1173, %1145
  store i64 %1174, i64* %RCX.i1519, align 8
  %1175 = icmp ult i64 %1174, %1145
  %1176 = icmp ult i64 %1174, %1173
  %1177 = or i1 %1175, %1176
  %1178 = zext i1 %1177 to i8
  store i8 %1178, i8* %14, align 1
  %1179 = trunc i64 %1174 to i32
  %1180 = and i32 %1179, 255
  %1181 = tail call i32 @llvm.ctpop.i32(i32 %1180)
  %1182 = trunc i32 %1181 to i8
  %1183 = and i8 %1182, 1
  %1184 = xor i8 %1183, 1
  store i8 %1184, i8* %21, align 1
  %1185 = xor i64 %1145, %1174
  %1186 = lshr i64 %1185, 4
  %1187 = trunc i64 %1186 to i8
  %1188 = and i8 %1187, 1
  store i8 %1188, i8* %26, align 1
  %1189 = icmp eq i64 %1174, 0
  %1190 = zext i1 %1189 to i8
  store i8 %1190, i8* %29, align 1
  %1191 = lshr i64 %1174, 63
  %1192 = trunc i64 %1191 to i8
  store i8 %1192, i8* %32, align 1
  %1193 = lshr i64 %1172, 57
  %1194 = and i64 %1193, 1
  %1195 = xor i64 %1191, %1161
  %1196 = xor i64 %1191, %1194
  %1197 = add nuw nsw i64 %1195, %1196
  %1198 = icmp eq i64 %1197, 2
  %1199 = zext i1 %1198 to i8
  store i8 %1199, i8* %38, align 1
  %1200 = load i64, i64* %RBP.i, align 8
  %1201 = add i64 %1200, -24
  %1202 = add i64 %1035, 81
  store i64 %1202, i64* %3, align 8
  %1203 = inttoptr i64 %1201 to i32*
  %1204 = load i32, i32* %1203, align 4
  %1205 = sext i32 %1204 to i64
  store i64 %1205, i64* %RSI.i2777, align 8
  %1206 = load i64, i64* %RDX.i1748, align 8
  %1207 = shl nsw i64 %1205, 2
  %1208 = add i64 %1174, %1207
  %1209 = add i64 %1035, 84
  store i64 %1209, i64* %3, align 8
  %1210 = trunc i64 %1206 to i32
  %1211 = inttoptr i64 %1208 to i32*
  %1212 = load i32, i32* %1211, align 4
  %1213 = add i32 %1212, %1210
  %1214 = zext i32 %1213 to i64
  store i64 %1214, i64* %RDX.i1748, align 8
  %1215 = add i64 %1035, 87
  store i64 %1215, i64* %3, align 8
  store i32 %1213, i32* %1211, align 4
  %1216 = load i64, i64* %3, align 8
  %1217 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1218 = add i64 %1217, 12600
  store i64 %1218, i64* %RCX.i1519, align 8
  %1219 = icmp ugt i64 %1217, -12601
  %1220 = zext i1 %1219 to i8
  store i8 %1220, i8* %14, align 1
  %1221 = trunc i64 %1218 to i32
  %1222 = and i32 %1221, 255
  %1223 = tail call i32 @llvm.ctpop.i32(i32 %1222)
  %1224 = trunc i32 %1223 to i8
  %1225 = and i8 %1224, 1
  %1226 = xor i8 %1225, 1
  store i8 %1226, i8* %21, align 1
  %1227 = xor i64 %1217, 16
  %1228 = xor i64 %1227, %1218
  %1229 = lshr i64 %1228, 4
  %1230 = trunc i64 %1229 to i8
  %1231 = and i8 %1230, 1
  store i8 %1231, i8* %26, align 1
  %1232 = icmp eq i64 %1218, 0
  %1233 = zext i1 %1232 to i8
  store i8 %1233, i8* %29, align 1
  %1234 = lshr i64 %1218, 63
  %1235 = trunc i64 %1234 to i8
  store i8 %1235, i8* %32, align 1
  %1236 = lshr i64 %1217, 63
  %1237 = xor i64 %1234, %1236
  %1238 = add nuw nsw i64 %1237, %1234
  %1239 = icmp eq i64 %1238, 2
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %38, align 1
  %1241 = load i64, i64* %RBP.i, align 8
  %1242 = add i64 %1241, -20
  %1243 = add i64 %1216, 18
  store i64 %1243, i64* %3, align 8
  %1244 = inttoptr i64 %1242 to i32*
  %1245 = load i32, i32* %1244, align 4
  %1246 = zext i32 %1245 to i64
  store i64 %1246, i64* %RDX.i1748, align 8
  %1247 = add i64 %1241, -4
  %1248 = add i64 %1216, 21
  store i64 %1248, i64* %3, align 8
  %1249 = inttoptr i64 %1247 to i32*
  %1250 = load i32, i32* %1249, align 4
  %1251 = add i32 %1250, %1245
  %1252 = zext i32 %1251 to i64
  store i64 %1252, i64* %RDX.i1748, align 8
  %1253 = sext i32 %1251 to i64
  %1254 = shl nsw i64 %1253, 5
  store i64 %1254, i64* %RSI.i2777, align 8
  %1255 = load i64, i64* %RCX.i1519, align 8
  %1256 = add i64 %1254, %1255
  store i64 %1256, i64* %RCX.i1519, align 8
  %1257 = icmp ult i64 %1256, %1255
  %1258 = icmp ult i64 %1256, %1254
  %1259 = or i1 %1257, %1258
  %1260 = zext i1 %1259 to i8
  store i8 %1260, i8* %14, align 1
  %1261 = trunc i64 %1256 to i32
  %1262 = and i32 %1261, 255
  %1263 = tail call i32 @llvm.ctpop.i32(i32 %1262)
  %1264 = trunc i32 %1263 to i8
  %1265 = and i8 %1264, 1
  %1266 = xor i8 %1265, 1
  store i8 %1266, i8* %21, align 1
  %1267 = xor i64 %1255, %1256
  %1268 = lshr i64 %1267, 4
  %1269 = trunc i64 %1268 to i8
  %1270 = and i8 %1269, 1
  store i8 %1270, i8* %26, align 1
  %1271 = icmp eq i64 %1256, 0
  %1272 = zext i1 %1271 to i8
  store i8 %1272, i8* %29, align 1
  %1273 = lshr i64 %1256, 63
  %1274 = trunc i64 %1273 to i8
  store i8 %1274, i8* %32, align 1
  %1275 = lshr i64 %1255, 63
  %1276 = lshr i64 %1253, 58
  %1277 = and i64 %1276, 1
  %1278 = xor i64 %1273, %1275
  %1279 = xor i64 %1273, %1277
  %1280 = add nuw nsw i64 %1278, %1279
  %1281 = icmp eq i64 %1280, 2
  %1282 = zext i1 %1281 to i8
  store i8 %1282, i8* %38, align 1
  %1283 = load i64, i64* %RBP.i, align 8
  %1284 = add i64 %1283, -24
  %1285 = add i64 %1216, 34
  store i64 %1285, i64* %3, align 8
  %1286 = inttoptr i64 %1284 to i32*
  %1287 = load i32, i32* %1286, align 4
  %1288 = zext i32 %1287 to i64
  store i64 %1288, i64* %RDX.i1748, align 8
  %1289 = add i64 %1283, -8
  %1290 = add i64 %1216, 37
  store i64 %1290, i64* %3, align 8
  %1291 = inttoptr i64 %1289 to i32*
  %1292 = load i32, i32* %1291, align 4
  %1293 = add i32 %1292, %1287
  %1294 = zext i32 %1293 to i64
  store i64 %1294, i64* %RDX.i1748, align 8
  %1295 = icmp ult i32 %1293, %1287
  %1296 = icmp ult i32 %1293, %1292
  %1297 = or i1 %1295, %1296
  %1298 = zext i1 %1297 to i8
  store i8 %1298, i8* %14, align 1
  %1299 = and i32 %1293, 255
  %1300 = tail call i32 @llvm.ctpop.i32(i32 %1299)
  %1301 = trunc i32 %1300 to i8
  %1302 = and i8 %1301, 1
  %1303 = xor i8 %1302, 1
  store i8 %1303, i8* %21, align 1
  %1304 = xor i32 %1292, %1287
  %1305 = xor i32 %1304, %1293
  %1306 = lshr i32 %1305, 4
  %1307 = trunc i32 %1306 to i8
  %1308 = and i8 %1307, 1
  store i8 %1308, i8* %26, align 1
  %1309 = icmp eq i32 %1293, 0
  %1310 = zext i1 %1309 to i8
  store i8 %1310, i8* %29, align 1
  %1311 = lshr i32 %1293, 31
  %1312 = trunc i32 %1311 to i8
  store i8 %1312, i8* %32, align 1
  %1313 = lshr i32 %1287, 31
  %1314 = lshr i32 %1292, 31
  %1315 = xor i32 %1311, %1313
  %1316 = xor i32 %1311, %1314
  %1317 = add nuw nsw i32 %1315, %1316
  %1318 = icmp eq i32 %1317, 2
  %1319 = zext i1 %1318 to i8
  store i8 %1319, i8* %38, align 1
  %1320 = sext i32 %1293 to i64
  store i64 %1320, i64* %RSI.i2777, align 8
  %1321 = shl nsw i64 %1320, 1
  %1322 = add i64 %1256, %1321
  %1323 = add i64 %1216, 44
  store i64 %1323, i64* %3, align 8
  %1324 = inttoptr i64 %1322 to i16*
  %1325 = load i16, i16* %1324, align 2
  %1326 = zext i16 %1325 to i64
  store i64 %1326, i64* %RDX.i1748, align 8
  %1327 = add i64 %1283, -20
  %1328 = add i64 %1216, 48
  store i64 %1328, i64* %3, align 8
  %1329 = inttoptr i64 %1327 to i32*
  %1330 = load i32, i32* %1329, align 4
  %1331 = sext i32 %1330 to i64
  %1332 = shl nsw i64 %1331, 4
  store i64 %1332, i64* %RCX.i1519, align 8
  %1333 = load i64, i64* %RAX.i1161, align 8
  %1334 = add i64 %1332, %1333
  store i64 %1334, i64* %RAX.i1161, align 8
  %1335 = icmp ult i64 %1334, %1333
  %1336 = icmp ult i64 %1334, %1332
  %1337 = or i1 %1335, %1336
  %1338 = zext i1 %1337 to i8
  store i8 %1338, i8* %14, align 1
  %1339 = trunc i64 %1334 to i32
  %1340 = and i32 %1339, 255
  %1341 = tail call i32 @llvm.ctpop.i32(i32 %1340)
  %1342 = trunc i32 %1341 to i8
  %1343 = and i8 %1342, 1
  %1344 = xor i8 %1343, 1
  store i8 %1344, i8* %21, align 1
  %1345 = xor i64 %1332, %1333
  %1346 = xor i64 %1345, %1334
  %1347 = lshr i64 %1346, 4
  %1348 = trunc i64 %1347 to i8
  %1349 = and i8 %1348, 1
  store i8 %1349, i8* %26, align 1
  %1350 = icmp eq i64 %1334, 0
  %1351 = zext i1 %1350 to i8
  store i8 %1351, i8* %29, align 1
  %1352 = lshr i64 %1334, 63
  %1353 = trunc i64 %1352 to i8
  store i8 %1353, i8* %32, align 1
  %1354 = lshr i64 %1333, 63
  %1355 = lshr i64 %1331, 59
  %1356 = and i64 %1355, 1
  %1357 = xor i64 %1352, %1354
  %1358 = xor i64 %1352, %1356
  %1359 = add nuw nsw i64 %1357, %1358
  %1360 = icmp eq i64 %1359, 2
  %1361 = zext i1 %1360 to i8
  store i8 %1361, i8* %38, align 1
  %1362 = load i64, i64* %RBP.i, align 8
  %1363 = add i64 %1362, -24
  %1364 = add i64 %1216, 59
  store i64 %1364, i64* %3, align 8
  %1365 = inttoptr i64 %1363 to i32*
  %1366 = load i32, i32* %1365, align 4
  %1367 = sext i32 %1366 to i64
  store i64 %1367, i64* %RCX.i1519, align 8
  %1368 = shl nsw i64 %1367, 2
  %1369 = add i64 %1368, %1334
  %1370 = zext i16 %1325 to i32
  %1371 = add i64 %1216, 62
  store i64 %1371, i64* %3, align 8
  %1372 = inttoptr i64 %1369 to i32*
  store i32 %1370, i32* %1372, align 4
  %1373 = load i64, i64* %RBP.i, align 8
  %1374 = add i64 %1373, -20
  %1375 = load i64, i64* %3, align 8
  %1376 = add i64 %1375, 3
  store i64 %1376, i64* %3, align 8
  %1377 = inttoptr i64 %1374 to i32*
  %1378 = load i32, i32* %1377, align 4
  %1379 = add i32 %1378, 1
  %1380 = zext i32 %1379 to i64
  store i64 %1380, i64* %RAX.i1161, align 8
  %1381 = icmp eq i32 %1378, -1
  %1382 = icmp eq i32 %1379, 0
  %1383 = or i1 %1381, %1382
  %1384 = zext i1 %1383 to i8
  store i8 %1384, i8* %14, align 1
  %1385 = and i32 %1379, 255
  %1386 = tail call i32 @llvm.ctpop.i32(i32 %1385)
  %1387 = trunc i32 %1386 to i8
  %1388 = and i8 %1387, 1
  %1389 = xor i8 %1388, 1
  store i8 %1389, i8* %21, align 1
  %1390 = xor i32 %1379, %1378
  %1391 = lshr i32 %1390, 4
  %1392 = trunc i32 %1391 to i8
  %1393 = and i8 %1392, 1
  store i8 %1393, i8* %26, align 1
  %1394 = zext i1 %1382 to i8
  store i8 %1394, i8* %29, align 1
  %1395 = lshr i32 %1379, 31
  %1396 = trunc i32 %1395 to i8
  store i8 %1396, i8* %32, align 1
  %1397 = lshr i32 %1378, 31
  %1398 = xor i32 %1395, %1397
  %1399 = add nuw nsw i32 %1398, %1395
  %1400 = icmp eq i32 %1399, 2
  %1401 = zext i1 %1400 to i8
  store i8 %1401, i8* %38, align 1
  %1402 = add i64 %1375, 9
  store i64 %1402, i64* %3, align 8
  store i32 %1379, i32* %1377, align 4
  %1403 = load i64, i64* %3, align 8
  %1404 = add i64 %1403, -168
  store i64 %1404, i64* %3, align 8
  br label %block_.L_40c03a

block_.L_40c0e7:                                  ; preds = %block_.L_40c03a
  %1405 = add i64 %1007, -24
  %1406 = add i64 %1035, 8
  store i64 %1406, i64* %3, align 8
  %1407 = inttoptr i64 %1405 to i32*
  %1408 = load i32, i32* %1407, align 4
  %1409 = add i32 %1408, 1
  %1410 = zext i32 %1409 to i64
  store i64 %1410, i64* %RAX.i1161, align 8
  %1411 = icmp eq i32 %1408, -1
  %1412 = icmp eq i32 %1409, 0
  %1413 = or i1 %1411, %1412
  %1414 = zext i1 %1413 to i8
  store i8 %1414, i8* %14, align 1
  %1415 = and i32 %1409, 255
  %1416 = tail call i32 @llvm.ctpop.i32(i32 %1415)
  %1417 = trunc i32 %1416 to i8
  %1418 = and i8 %1417, 1
  %1419 = xor i8 %1418, 1
  store i8 %1419, i8* %21, align 1
  %1420 = xor i32 %1409, %1408
  %1421 = lshr i32 %1420, 4
  %1422 = trunc i32 %1421 to i8
  %1423 = and i8 %1422, 1
  store i8 %1423, i8* %26, align 1
  %1424 = zext i1 %1412 to i8
  store i8 %1424, i8* %29, align 1
  %1425 = lshr i32 %1409, 31
  %1426 = trunc i32 %1425 to i8
  store i8 %1426, i8* %32, align 1
  %1427 = lshr i32 %1408, 31
  %1428 = xor i32 %1425, %1427
  %1429 = add nuw nsw i32 %1428, %1425
  %1430 = icmp eq i32 %1429, 2
  %1431 = zext i1 %1430 to i8
  store i8 %1431, i8* %38, align 1
  %1432 = add i64 %1035, 14
  store i64 %1432, i64* %3, align 8
  store i32 %1409, i32* %1407, align 4
  %1433 = load i64, i64* %3, align 8
  %1434 = add i64 %1433, -204
  store i64 %1434, i64* %3, align 8
  br label %block_.L_40c029

block_.L_40c0fa:                                  ; preds = %block_.L_40c029
  %1435 = add i64 %1002, 7
  store i64 %1435, i64* %3, align 8
  store i32 0, i32* %977, align 4
  %.pre186 = load i64, i64* %3, align 8
  br label %block_.L_40c101

block_.L_40c101:                                  ; preds = %block_.L_40c1c9, %block_.L_40c0fa
  %1436 = phi i64 [ %2129, %block_.L_40c1c9 ], [ %.pre186, %block_.L_40c0fa ]
  %1437 = load i64, i64* %RBP.i, align 8
  %1438 = add i64 %1437, -24
  %1439 = add i64 %1436, 4
  store i64 %1439, i64* %3, align 8
  %1440 = inttoptr i64 %1438 to i32*
  %1441 = load i32, i32* %1440, align 4
  %1442 = add i32 %1441, -4
  %1443 = icmp ult i32 %1441, 4
  %1444 = zext i1 %1443 to i8
  store i8 %1444, i8* %14, align 1
  %1445 = and i32 %1442, 255
  %1446 = tail call i32 @llvm.ctpop.i32(i32 %1445)
  %1447 = trunc i32 %1446 to i8
  %1448 = and i8 %1447, 1
  %1449 = xor i8 %1448, 1
  store i8 %1449, i8* %21, align 1
  %1450 = xor i32 %1442, %1441
  %1451 = lshr i32 %1450, 4
  %1452 = trunc i32 %1451 to i8
  %1453 = and i8 %1452, 1
  store i8 %1453, i8* %26, align 1
  %1454 = icmp eq i32 %1442, 0
  %1455 = zext i1 %1454 to i8
  store i8 %1455, i8* %29, align 1
  %1456 = lshr i32 %1442, 31
  %1457 = trunc i32 %1456 to i8
  store i8 %1457, i8* %32, align 1
  %1458 = lshr i32 %1441, 31
  %1459 = xor i32 %1456, %1458
  %1460 = add nuw nsw i32 %1459, %1458
  %1461 = icmp eq i32 %1460, 2
  %1462 = zext i1 %1461 to i8
  store i8 %1462, i8* %38, align 1
  %1463 = icmp ne i8 %1457, 0
  %1464 = xor i1 %1463, %1461
  %.v = select i1 %1464, i64 10, i64 322
  %1465 = add i64 %1436, %.v
  %1466 = add i64 %1437, -20
  %1467 = add i64 %1465, 7
  store i64 %1467, i64* %3, align 8
  %1468 = inttoptr i64 %1466 to i32*
  store i32 0, i32* %1468, align 4
  %.pre224 = load i64, i64* %3, align 8
  br i1 %1464, label %block_.L_40c112.preheader, label %block_.L_40c24a.preheader

block_.L_40c112.preheader:                        ; preds = %block_.L_40c101
  br label %block_.L_40c112

block_.L_40c24a.preheader:                        ; preds = %block_.L_40c101
  br label %block_.L_40c24a

block_.L_40c112:                                  ; preds = %block_.L_40c112.preheader, %block_40c11c
  %1469 = phi i64 [ %1887, %block_40c11c ], [ %.pre224, %block_.L_40c112.preheader ]
  %1470 = load i64, i64* %RBP.i, align 8
  %1471 = add i64 %1470, -20
  %1472 = add i64 %1469, 4
  store i64 %1472, i64* %3, align 8
  %1473 = inttoptr i64 %1471 to i32*
  %1474 = load i32, i32* %1473, align 4
  %1475 = add i32 %1474, -2
  %1476 = icmp ult i32 %1474, 2
  %1477 = zext i1 %1476 to i8
  store i8 %1477, i8* %14, align 1
  %1478 = and i32 %1475, 255
  %1479 = tail call i32 @llvm.ctpop.i32(i32 %1478)
  %1480 = trunc i32 %1479 to i8
  %1481 = and i8 %1480, 1
  %1482 = xor i8 %1481, 1
  store i8 %1482, i8* %21, align 1
  %1483 = xor i32 %1475, %1474
  %1484 = lshr i32 %1483, 4
  %1485 = trunc i32 %1484 to i8
  %1486 = and i8 %1485, 1
  store i8 %1486, i8* %26, align 1
  %1487 = icmp eq i32 %1475, 0
  %1488 = zext i1 %1487 to i8
  store i8 %1488, i8* %29, align 1
  %1489 = lshr i32 %1475, 31
  %1490 = trunc i32 %1489 to i8
  store i8 %1490, i8* %32, align 1
  %1491 = lshr i32 %1474, 31
  %1492 = xor i32 %1489, %1491
  %1493 = add nuw nsw i32 %1492, %1491
  %1494 = icmp eq i32 %1493, 2
  %1495 = zext i1 %1494 to i8
  store i8 %1495, i8* %38, align 1
  %1496 = icmp ne i8 %1490, 0
  %1497 = xor i1 %1496, %1494
  %.v260 = select i1 %1497, i64 10, i64 183
  %1498 = add i64 %1469, %.v260
  store i64 %1498, i64* %3, align 8
  br i1 %1497, label %block_40c11c, label %block_.L_40c1c9

block_40c11c:                                     ; preds = %block_.L_40c112
  store i64 3, i64* %RAX.i1161, align 8
  %1499 = add i64 %1498, 8
  store i64 %1499, i64* %3, align 8
  %1500 = load i32, i32* %1473, align 4
  %1501 = sub i32 3, %1500
  %1502 = zext i32 %1501 to i64
  store i64 %1502, i64* %RAX.i1161, align 8
  %1503 = add i64 %1470, -28
  %1504 = add i64 %1498, 11
  store i64 %1504, i64* %3, align 8
  %1505 = inttoptr i64 %1503 to i32*
  store i32 %1501, i32* %1505, align 4
  %1506 = load i64, i64* %3, align 8
  %1507 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1508 = add i64 %1507, 13112
  store i64 %1508, i64* %RCX.i1519, align 8
  %1509 = icmp ugt i64 %1507, -13113
  %1510 = zext i1 %1509 to i8
  store i8 %1510, i8* %14, align 1
  %1511 = trunc i64 %1508 to i32
  %1512 = and i32 %1511, 255
  %1513 = tail call i32 @llvm.ctpop.i32(i32 %1512)
  %1514 = trunc i32 %1513 to i8
  %1515 = and i8 %1514, 1
  %1516 = xor i8 %1515, 1
  store i8 %1516, i8* %21, align 1
  %1517 = xor i64 %1507, 16
  %1518 = xor i64 %1517, %1508
  %1519 = lshr i64 %1518, 4
  %1520 = trunc i64 %1519 to i8
  %1521 = and i8 %1520, 1
  store i8 %1521, i8* %26, align 1
  %1522 = icmp eq i64 %1508, 0
  %1523 = zext i1 %1522 to i8
  store i8 %1523, i8* %29, align 1
  %1524 = lshr i64 %1508, 63
  %1525 = trunc i64 %1524 to i8
  store i8 %1525, i8* %32, align 1
  %1526 = lshr i64 %1507, 63
  %1527 = xor i64 %1524, %1526
  %1528 = add nuw nsw i64 %1527, %1524
  %1529 = icmp eq i64 %1528, 2
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %38, align 1
  %1531 = load i64, i64* %RBP.i, align 8
  %1532 = add i64 %1531, -20
  %1533 = add i64 %1506, 19
  store i64 %1533, i64* %3, align 8
  %1534 = inttoptr i64 %1532 to i32*
  %1535 = load i32, i32* %1534, align 4
  %1536 = sext i32 %1535 to i64
  %1537 = shl nsw i64 %1536, 6
  store i64 %1537, i64* %RDX.i1748, align 8
  %1538 = add i64 %1537, %1508
  store i64 %1538, i64* %RCX.i1519, align 8
  %1539 = icmp ult i64 %1538, %1508
  %1540 = icmp ult i64 %1538, %1537
  %1541 = or i1 %1539, %1540
  %1542 = zext i1 %1541 to i8
  store i8 %1542, i8* %14, align 1
  %1543 = trunc i64 %1538 to i32
  %1544 = and i32 %1543, 255
  %1545 = tail call i32 @llvm.ctpop.i32(i32 %1544)
  %1546 = trunc i32 %1545 to i8
  %1547 = and i8 %1546, 1
  %1548 = xor i8 %1547, 1
  store i8 %1548, i8* %21, align 1
  %1549 = xor i64 %1508, %1538
  %1550 = lshr i64 %1549, 4
  %1551 = trunc i64 %1550 to i8
  %1552 = and i8 %1551, 1
  store i8 %1552, i8* %26, align 1
  %1553 = icmp eq i64 %1538, 0
  %1554 = zext i1 %1553 to i8
  store i8 %1554, i8* %29, align 1
  %1555 = lshr i64 %1538, 63
  %1556 = trunc i64 %1555 to i8
  store i8 %1556, i8* %32, align 1
  %1557 = lshr i64 %1536, 57
  %1558 = and i64 %1557, 1
  %1559 = xor i64 %1555, %1524
  %1560 = xor i64 %1555, %1558
  %1561 = add nuw nsw i64 %1559, %1560
  %1562 = icmp eq i64 %1561, 2
  %1563 = zext i1 %1562 to i8
  store i8 %1563, i8* %38, align 1
  %1564 = add i64 %1531, -24
  %1565 = add i64 %1506, 30
  store i64 %1565, i64* %3, align 8
  %1566 = inttoptr i64 %1564 to i32*
  %1567 = load i32, i32* %1566, align 4
  %1568 = sext i32 %1567 to i64
  store i64 %1568, i64* %RDX.i1748, align 8
  %1569 = shl nsw i64 %1568, 2
  %1570 = add i64 %1569, %1538
  %1571 = add i64 %1506, 33
  store i64 %1571, i64* %3, align 8
  %1572 = inttoptr i64 %1570 to i32*
  %1573 = load i32, i32* %1572, align 4
  %1574 = zext i32 %1573 to i64
  store i64 %1574, i64* %RAX.i1161, align 8
  %1575 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1576 = add i64 %1575, 13112
  store i64 %1576, i64* %RCX.i1519, align 8
  %1577 = icmp ugt i64 %1575, -13113
  %1578 = zext i1 %1577 to i8
  store i8 %1578, i8* %14, align 1
  %1579 = trunc i64 %1576 to i32
  %1580 = and i32 %1579, 255
  %1581 = tail call i32 @llvm.ctpop.i32(i32 %1580)
  %1582 = trunc i32 %1581 to i8
  %1583 = and i8 %1582, 1
  %1584 = xor i8 %1583, 1
  store i8 %1584, i8* %21, align 1
  %1585 = xor i64 %1575, 16
  %1586 = xor i64 %1585, %1576
  %1587 = lshr i64 %1586, 4
  %1588 = trunc i64 %1587 to i8
  %1589 = and i8 %1588, 1
  store i8 %1589, i8* %26, align 1
  %1590 = icmp eq i64 %1576, 0
  %1591 = zext i1 %1590 to i8
  store i8 %1591, i8* %29, align 1
  %1592 = lshr i64 %1576, 63
  %1593 = trunc i64 %1592 to i8
  store i8 %1593, i8* %32, align 1
  %1594 = lshr i64 %1575, 63
  %1595 = xor i64 %1592, %1594
  %1596 = add nuw nsw i64 %1595, %1592
  %1597 = icmp eq i64 %1596, 2
  %1598 = zext i1 %1597 to i8
  store i8 %1598, i8* %38, align 1
  %1599 = load i64, i64* %RBP.i, align 8
  %1600 = add i64 %1599, -28
  %1601 = add i64 %1506, 52
  store i64 %1601, i64* %3, align 8
  %1602 = inttoptr i64 %1600 to i32*
  %1603 = load i32, i32* %1602, align 4
  %1604 = sext i32 %1603 to i64
  %1605 = shl nsw i64 %1604, 6
  store i64 %1605, i64* %RDX.i1748, align 8
  %1606 = add i64 %1605, %1576
  store i64 %1606, i64* %RCX.i1519, align 8
  %1607 = icmp ult i64 %1606, %1576
  %1608 = icmp ult i64 %1606, %1605
  %1609 = or i1 %1607, %1608
  %1610 = zext i1 %1609 to i8
  store i8 %1610, i8* %14, align 1
  %1611 = trunc i64 %1606 to i32
  %1612 = and i32 %1611, 255
  %1613 = tail call i32 @llvm.ctpop.i32(i32 %1612)
  %1614 = trunc i32 %1613 to i8
  %1615 = and i8 %1614, 1
  %1616 = xor i8 %1615, 1
  store i8 %1616, i8* %21, align 1
  %1617 = xor i64 %1576, %1606
  %1618 = lshr i64 %1617, 4
  %1619 = trunc i64 %1618 to i8
  %1620 = and i8 %1619, 1
  store i8 %1620, i8* %26, align 1
  %1621 = icmp eq i64 %1606, 0
  %1622 = zext i1 %1621 to i8
  store i8 %1622, i8* %29, align 1
  %1623 = lshr i64 %1606, 63
  %1624 = trunc i64 %1623 to i8
  store i8 %1624, i8* %32, align 1
  %1625 = lshr i64 %1604, 57
  %1626 = and i64 %1625, 1
  %1627 = xor i64 %1623, %1592
  %1628 = xor i64 %1623, %1626
  %1629 = add nuw nsw i64 %1627, %1628
  %1630 = icmp eq i64 %1629, 2
  %1631 = zext i1 %1630 to i8
  store i8 %1631, i8* %38, align 1
  %1632 = add i64 %1599, -24
  %1633 = add i64 %1506, 63
  store i64 %1633, i64* %3, align 8
  %1634 = inttoptr i64 %1632 to i32*
  %1635 = load i32, i32* %1634, align 4
  %1636 = sext i32 %1635 to i64
  store i64 %1636, i64* %RDX.i1748, align 8
  %1637 = load i64, i64* %RAX.i1161, align 8
  %1638 = shl nsw i64 %1636, 2
  %1639 = add i64 %1606, %1638
  %1640 = add i64 %1506, 66
  store i64 %1640, i64* %3, align 8
  %1641 = trunc i64 %1637 to i32
  %1642 = inttoptr i64 %1639 to i32*
  %1643 = load i32, i32* %1642, align 4
  %1644 = add i32 %1643, %1641
  %1645 = zext i32 %1644 to i64
  store i64 %1645, i64* %RAX.i1161, align 8
  %1646 = icmp ult i32 %1644, %1641
  %1647 = icmp ult i32 %1644, %1643
  %1648 = or i1 %1646, %1647
  %1649 = zext i1 %1648 to i8
  store i8 %1649, i8* %14, align 1
  %1650 = and i32 %1644, 255
  %1651 = tail call i32 @llvm.ctpop.i32(i32 %1650)
  %1652 = trunc i32 %1651 to i8
  %1653 = and i8 %1652, 1
  %1654 = xor i8 %1653, 1
  store i8 %1654, i8* %21, align 1
  %1655 = xor i32 %1643, %1641
  %1656 = xor i32 %1655, %1644
  %1657 = lshr i32 %1656, 4
  %1658 = trunc i32 %1657 to i8
  %1659 = and i8 %1658, 1
  store i8 %1659, i8* %26, align 1
  %1660 = icmp eq i32 %1644, 0
  %1661 = zext i1 %1660 to i8
  store i8 %1661, i8* %29, align 1
  %1662 = lshr i32 %1644, 31
  %1663 = trunc i32 %1662 to i8
  store i8 %1663, i8* %32, align 1
  %1664 = lshr i32 %1641, 31
  %1665 = lshr i32 %1643, 31
  %1666 = xor i32 %1662, %1664
  %1667 = xor i32 %1662, %1665
  %1668 = add nuw nsw i32 %1666, %1667
  %1669 = icmp eq i32 %1668, 2
  %1670 = zext i1 %1669 to i8
  store i8 %1670, i8* %38, align 1
  %1671 = load i64, i64* %RBP.i, align 8
  %1672 = add i64 %1671, -20
  %1673 = add i64 %1506, 70
  store i64 %1673, i64* %3, align 8
  %1674 = inttoptr i64 %1672 to i32*
  %1675 = load i32, i32* %1674, align 4
  %1676 = sext i32 %1675 to i64
  %1677 = shl nsw i64 %1676, 2
  %1678 = add i64 %1671, -64
  %1679 = add i64 %1678, %1677
  %1680 = add i64 %1506, 74
  store i64 %1680, i64* %3, align 8
  %1681 = inttoptr i64 %1679 to i32*
  store i32 %1644, i32* %1681, align 4
  %1682 = load i64, i64* %3, align 8
  %1683 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1684 = add i64 %1683, 13112
  store i64 %1684, i64* %RCX.i1519, align 8
  %1685 = icmp ugt i64 %1683, -13113
  %1686 = zext i1 %1685 to i8
  store i8 %1686, i8* %14, align 1
  %1687 = trunc i64 %1684 to i32
  %1688 = and i32 %1687, 255
  %1689 = tail call i32 @llvm.ctpop.i32(i32 %1688)
  %1690 = trunc i32 %1689 to i8
  %1691 = and i8 %1690, 1
  %1692 = xor i8 %1691, 1
  store i8 %1692, i8* %21, align 1
  %1693 = xor i64 %1683, 16
  %1694 = xor i64 %1693, %1684
  %1695 = lshr i64 %1694, 4
  %1696 = trunc i64 %1695 to i8
  %1697 = and i8 %1696, 1
  store i8 %1697, i8* %26, align 1
  %1698 = icmp eq i64 %1684, 0
  %1699 = zext i1 %1698 to i8
  store i8 %1699, i8* %29, align 1
  %1700 = lshr i64 %1684, 63
  %1701 = trunc i64 %1700 to i8
  store i8 %1701, i8* %32, align 1
  %1702 = lshr i64 %1683, 63
  %1703 = xor i64 %1700, %1702
  %1704 = add nuw nsw i64 %1703, %1700
  %1705 = icmp eq i64 %1704, 2
  %1706 = zext i1 %1705 to i8
  store i8 %1706, i8* %38, align 1
  %1707 = load i64, i64* %RBP.i, align 8
  %1708 = add i64 %1707, -20
  %1709 = add i64 %1682, 19
  store i64 %1709, i64* %3, align 8
  %1710 = inttoptr i64 %1708 to i32*
  %1711 = load i32, i32* %1710, align 4
  %1712 = sext i32 %1711 to i64
  %1713 = shl nsw i64 %1712, 6
  store i64 %1713, i64* %RDX.i1748, align 8
  %1714 = add i64 %1713, %1684
  store i64 %1714, i64* %RCX.i1519, align 8
  %1715 = icmp ult i64 %1714, %1684
  %1716 = icmp ult i64 %1714, %1713
  %1717 = or i1 %1715, %1716
  %1718 = zext i1 %1717 to i8
  store i8 %1718, i8* %14, align 1
  %1719 = trunc i64 %1714 to i32
  %1720 = and i32 %1719, 255
  %1721 = tail call i32 @llvm.ctpop.i32(i32 %1720)
  %1722 = trunc i32 %1721 to i8
  %1723 = and i8 %1722, 1
  %1724 = xor i8 %1723, 1
  store i8 %1724, i8* %21, align 1
  %1725 = xor i64 %1684, %1714
  %1726 = lshr i64 %1725, 4
  %1727 = trunc i64 %1726 to i8
  %1728 = and i8 %1727, 1
  store i8 %1728, i8* %26, align 1
  %1729 = icmp eq i64 %1714, 0
  %1730 = zext i1 %1729 to i8
  store i8 %1730, i8* %29, align 1
  %1731 = lshr i64 %1714, 63
  %1732 = trunc i64 %1731 to i8
  store i8 %1732, i8* %32, align 1
  %1733 = lshr i64 %1712, 57
  %1734 = and i64 %1733, 1
  %1735 = xor i64 %1731, %1700
  %1736 = xor i64 %1731, %1734
  %1737 = add nuw nsw i64 %1735, %1736
  %1738 = icmp eq i64 %1737, 2
  %1739 = zext i1 %1738 to i8
  store i8 %1739, i8* %38, align 1
  %1740 = add i64 %1707, -24
  %1741 = add i64 %1682, 30
  store i64 %1741, i64* %3, align 8
  %1742 = inttoptr i64 %1740 to i32*
  %1743 = load i32, i32* %1742, align 4
  %1744 = sext i32 %1743 to i64
  store i64 %1744, i64* %RDX.i1748, align 8
  %1745 = shl nsw i64 %1744, 2
  %1746 = add i64 %1745, %1714
  %1747 = add i64 %1682, 33
  store i64 %1747, i64* %3, align 8
  %1748 = inttoptr i64 %1746 to i32*
  %1749 = load i32, i32* %1748, align 4
  %1750 = zext i32 %1749 to i64
  store i64 %1750, i64* %RAX.i1161, align 8
  %1751 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %1752 = add i64 %1751, 13112
  store i64 %1752, i64* %RCX.i1519, align 8
  %1753 = icmp ugt i64 %1751, -13113
  %1754 = zext i1 %1753 to i8
  store i8 %1754, i8* %14, align 1
  %1755 = trunc i64 %1752 to i32
  %1756 = and i32 %1755, 255
  %1757 = tail call i32 @llvm.ctpop.i32(i32 %1756)
  %1758 = trunc i32 %1757 to i8
  %1759 = and i8 %1758, 1
  %1760 = xor i8 %1759, 1
  store i8 %1760, i8* %21, align 1
  %1761 = xor i64 %1751, 16
  %1762 = xor i64 %1761, %1752
  %1763 = lshr i64 %1762, 4
  %1764 = trunc i64 %1763 to i8
  %1765 = and i8 %1764, 1
  store i8 %1765, i8* %26, align 1
  %1766 = icmp eq i64 %1752, 0
  %1767 = zext i1 %1766 to i8
  store i8 %1767, i8* %29, align 1
  %1768 = lshr i64 %1752, 63
  %1769 = trunc i64 %1768 to i8
  store i8 %1769, i8* %32, align 1
  %1770 = lshr i64 %1751, 63
  %1771 = xor i64 %1768, %1770
  %1772 = add nuw nsw i64 %1771, %1768
  %1773 = icmp eq i64 %1772, 2
  %1774 = zext i1 %1773 to i8
  store i8 %1774, i8* %38, align 1
  %1775 = load i64, i64* %RBP.i, align 8
  %1776 = add i64 %1775, -28
  %1777 = add i64 %1682, 52
  store i64 %1777, i64* %3, align 8
  %1778 = inttoptr i64 %1776 to i32*
  %1779 = load i32, i32* %1778, align 4
  %1780 = sext i32 %1779 to i64
  %1781 = shl nsw i64 %1780, 6
  store i64 %1781, i64* %RDX.i1748, align 8
  %1782 = add i64 %1781, %1752
  store i64 %1782, i64* %RCX.i1519, align 8
  %1783 = icmp ult i64 %1782, %1752
  %1784 = icmp ult i64 %1782, %1781
  %1785 = or i1 %1783, %1784
  %1786 = zext i1 %1785 to i8
  store i8 %1786, i8* %14, align 1
  %1787 = trunc i64 %1782 to i32
  %1788 = and i32 %1787, 255
  %1789 = tail call i32 @llvm.ctpop.i32(i32 %1788)
  %1790 = trunc i32 %1789 to i8
  %1791 = and i8 %1790, 1
  %1792 = xor i8 %1791, 1
  store i8 %1792, i8* %21, align 1
  %1793 = xor i64 %1752, %1782
  %1794 = lshr i64 %1793, 4
  %1795 = trunc i64 %1794 to i8
  %1796 = and i8 %1795, 1
  store i8 %1796, i8* %26, align 1
  %1797 = icmp eq i64 %1782, 0
  %1798 = zext i1 %1797 to i8
  store i8 %1798, i8* %29, align 1
  %1799 = lshr i64 %1782, 63
  %1800 = trunc i64 %1799 to i8
  store i8 %1800, i8* %32, align 1
  %1801 = lshr i64 %1780, 57
  %1802 = and i64 %1801, 1
  %1803 = xor i64 %1799, %1768
  %1804 = xor i64 %1799, %1802
  %1805 = add nuw nsw i64 %1803, %1804
  %1806 = icmp eq i64 %1805, 2
  %1807 = zext i1 %1806 to i8
  store i8 %1807, i8* %38, align 1
  %1808 = add i64 %1775, -24
  %1809 = add i64 %1682, 63
  store i64 %1809, i64* %3, align 8
  %1810 = inttoptr i64 %1808 to i32*
  %1811 = load i32, i32* %1810, align 4
  %1812 = sext i32 %1811 to i64
  store i64 %1812, i64* %RDX.i1748, align 8
  %1813 = load i64, i64* %RAX.i1161, align 8
  %1814 = shl nsw i64 %1812, 2
  %1815 = add i64 %1782, %1814
  %1816 = add i64 %1682, 66
  store i64 %1816, i64* %3, align 8
  %1817 = trunc i64 %1813 to i32
  %1818 = inttoptr i64 %1815 to i32*
  %1819 = load i32, i32* %1818, align 4
  %1820 = sub i32 %1817, %1819
  %1821 = zext i32 %1820 to i64
  store i64 %1821, i64* %RAX.i1161, align 8
  %1822 = icmp ult i32 %1817, %1819
  %1823 = zext i1 %1822 to i8
  store i8 %1823, i8* %14, align 1
  %1824 = and i32 %1820, 255
  %1825 = tail call i32 @llvm.ctpop.i32(i32 %1824)
  %1826 = trunc i32 %1825 to i8
  %1827 = and i8 %1826, 1
  %1828 = xor i8 %1827, 1
  store i8 %1828, i8* %21, align 1
  %1829 = xor i32 %1819, %1817
  %1830 = xor i32 %1829, %1820
  %1831 = lshr i32 %1830, 4
  %1832 = trunc i32 %1831 to i8
  %1833 = and i8 %1832, 1
  store i8 %1833, i8* %26, align 1
  %1834 = icmp eq i32 %1820, 0
  %1835 = zext i1 %1834 to i8
  store i8 %1835, i8* %29, align 1
  %1836 = lshr i32 %1820, 31
  %1837 = trunc i32 %1836 to i8
  store i8 %1837, i8* %32, align 1
  %1838 = lshr i32 %1817, 31
  %1839 = lshr i32 %1819, 31
  %1840 = xor i32 %1839, %1838
  %1841 = xor i32 %1836, %1838
  %1842 = add nuw nsw i32 %1841, %1840
  %1843 = icmp eq i32 %1842, 2
  %1844 = zext i1 %1843 to i8
  store i8 %1844, i8* %38, align 1
  %1845 = load i64, i64* %RBP.i, align 8
  %1846 = add i64 %1845, -28
  %1847 = add i64 %1682, 70
  store i64 %1847, i64* %3, align 8
  %1848 = inttoptr i64 %1846 to i32*
  %1849 = load i32, i32* %1848, align 4
  %1850 = sext i32 %1849 to i64
  store i64 %1850, i64* %RCX.i1519, align 8
  %1851 = shl nsw i64 %1850, 2
  %1852 = add i64 %1845, -64
  %1853 = add i64 %1852, %1851
  %1854 = add i64 %1682, 74
  store i64 %1854, i64* %3, align 8
  %1855 = inttoptr i64 %1853 to i32*
  store i32 %1820, i32* %1855, align 4
  %1856 = load i64, i64* %RBP.i, align 8
  %1857 = add i64 %1856, -20
  %1858 = load i64, i64* %3, align 8
  %1859 = add i64 %1858, 3
  store i64 %1859, i64* %3, align 8
  %1860 = inttoptr i64 %1857 to i32*
  %1861 = load i32, i32* %1860, align 4
  %1862 = add i32 %1861, 1
  %1863 = zext i32 %1862 to i64
  store i64 %1863, i64* %RAX.i1161, align 8
  %1864 = icmp eq i32 %1861, -1
  %1865 = icmp eq i32 %1862, 0
  %1866 = or i1 %1864, %1865
  %1867 = zext i1 %1866 to i8
  store i8 %1867, i8* %14, align 1
  %1868 = and i32 %1862, 255
  %1869 = tail call i32 @llvm.ctpop.i32(i32 %1868)
  %1870 = trunc i32 %1869 to i8
  %1871 = and i8 %1870, 1
  %1872 = xor i8 %1871, 1
  store i8 %1872, i8* %21, align 1
  %1873 = xor i32 %1862, %1861
  %1874 = lshr i32 %1873, 4
  %1875 = trunc i32 %1874 to i8
  %1876 = and i8 %1875, 1
  store i8 %1876, i8* %26, align 1
  %1877 = zext i1 %1865 to i8
  store i8 %1877, i8* %29, align 1
  %1878 = lshr i32 %1862, 31
  %1879 = trunc i32 %1878 to i8
  store i8 %1879, i8* %32, align 1
  %1880 = lshr i32 %1861, 31
  %1881 = xor i32 %1878, %1880
  %1882 = add nuw nsw i32 %1881, %1878
  %1883 = icmp eq i32 %1882, 2
  %1884 = zext i1 %1883 to i8
  store i8 %1884, i8* %38, align 1
  %1885 = add i64 %1858, 9
  store i64 %1885, i64* %3, align 8
  store i32 %1862, i32* %1860, align 4
  %1886 = load i64, i64* %3, align 8
  %1887 = add i64 %1886, -178
  store i64 %1887, i64* %3, align 8
  br label %block_.L_40c112

block_.L_40c1c9:                                  ; preds = %block_.L_40c112
  %1888 = add i64 %1470, -64
  %1889 = add i64 %1498, 3
  store i64 %1889, i64* %3, align 8
  %1890 = inttoptr i64 %1888 to i32*
  %1891 = load i32, i32* %1890, align 4
  %1892 = zext i32 %1891 to i64
  store i64 %1892, i64* %RAX.i1161, align 8
  %1893 = add i64 %1470, -60
  %1894 = add i64 %1498, 6
  store i64 %1894, i64* %3, align 8
  %1895 = inttoptr i64 %1893 to i32*
  %1896 = load i32, i32* %1895, align 4
  %1897 = add i32 %1896, %1891
  %1898 = zext i32 %1897 to i64
  store i64 %1898, i64* %RAX.i1161, align 8
  %1899 = icmp ult i32 %1897, %1891
  %1900 = icmp ult i32 %1897, %1896
  %1901 = or i1 %1899, %1900
  %1902 = zext i1 %1901 to i8
  store i8 %1902, i8* %14, align 1
  %1903 = and i32 %1897, 255
  %1904 = tail call i32 @llvm.ctpop.i32(i32 %1903)
  %1905 = trunc i32 %1904 to i8
  %1906 = and i8 %1905, 1
  %1907 = xor i8 %1906, 1
  store i8 %1907, i8* %21, align 1
  %1908 = xor i32 %1896, %1891
  %1909 = xor i32 %1908, %1897
  %1910 = lshr i32 %1909, 4
  %1911 = trunc i32 %1910 to i8
  %1912 = and i8 %1911, 1
  store i8 %1912, i8* %26, align 1
  %1913 = icmp eq i32 %1897, 0
  %1914 = zext i1 %1913 to i8
  store i8 %1914, i8* %29, align 1
  %1915 = lshr i32 %1897, 31
  %1916 = trunc i32 %1915 to i8
  store i8 %1916, i8* %32, align 1
  %1917 = lshr i32 %1891, 31
  %1918 = lshr i32 %1896, 31
  %1919 = xor i32 %1915, %1917
  %1920 = xor i32 %1915, %1918
  %1921 = add nuw nsw i32 %1919, %1920
  %1922 = icmp eq i32 %1921, 2
  %1923 = zext i1 %1922 to i8
  store i8 %1923, i8* %38, align 1
  %1924 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1924, i64* %RCX.i1519, align 8
  %1925 = add i64 %1470, -24
  %1926 = add i64 %1498, 18
  store i64 %1926, i64* %3, align 8
  %1927 = inttoptr i64 %1925 to i32*
  %1928 = load i32, i32* %1927, align 4
  %1929 = sext i32 %1928 to i64
  store i64 %1929, i64* %RDX.i1748, align 8
  %1930 = shl nsw i64 %1929, 2
  %1931 = add i64 %1924, 13112
  %1932 = add i64 %1931, %1930
  %1933 = add i64 %1498, 25
  store i64 %1933, i64* %3, align 8
  %1934 = inttoptr i64 %1932 to i32*
  store i32 %1897, i32* %1934, align 4
  %1935 = load i64, i64* %RBP.i, align 8
  %1936 = add i64 %1935, -64
  %1937 = load i64, i64* %3, align 8
  %1938 = add i64 %1937, 3
  store i64 %1938, i64* %3, align 8
  %1939 = inttoptr i64 %1936 to i32*
  %1940 = load i32, i32* %1939, align 4
  %1941 = zext i32 %1940 to i64
  store i64 %1941, i64* %RAX.i1161, align 8
  %1942 = add i64 %1935, -60
  %1943 = add i64 %1937, 6
  store i64 %1943, i64* %3, align 8
  %1944 = inttoptr i64 %1942 to i32*
  %1945 = load i32, i32* %1944, align 4
  %1946 = sub i32 %1940, %1945
  %1947 = zext i32 %1946 to i64
  store i64 %1947, i64* %RAX.i1161, align 8
  %1948 = icmp ult i32 %1940, %1945
  %1949 = zext i1 %1948 to i8
  store i8 %1949, i8* %14, align 1
  %1950 = and i32 %1946, 255
  %1951 = tail call i32 @llvm.ctpop.i32(i32 %1950)
  %1952 = trunc i32 %1951 to i8
  %1953 = and i8 %1952, 1
  %1954 = xor i8 %1953, 1
  store i8 %1954, i8* %21, align 1
  %1955 = xor i32 %1945, %1940
  %1956 = xor i32 %1955, %1946
  %1957 = lshr i32 %1956, 4
  %1958 = trunc i32 %1957 to i8
  %1959 = and i8 %1958, 1
  store i8 %1959, i8* %26, align 1
  %1960 = icmp eq i32 %1946, 0
  %1961 = zext i1 %1960 to i8
  store i8 %1961, i8* %29, align 1
  %1962 = lshr i32 %1946, 31
  %1963 = trunc i32 %1962 to i8
  store i8 %1963, i8* %32, align 1
  %1964 = lshr i32 %1940, 31
  %1965 = lshr i32 %1945, 31
  %1966 = xor i32 %1965, %1964
  %1967 = xor i32 %1962, %1964
  %1968 = add nuw nsw i32 %1967, %1966
  %1969 = icmp eq i32 %1968, 2
  %1970 = zext i1 %1969 to i8
  store i8 %1970, i8* %38, align 1
  %1971 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %1971, i64* %RCX.i1519, align 8
  %1972 = add i64 %1935, -24
  %1973 = add i64 %1937, 18
  store i64 %1973, i64* %3, align 8
  %1974 = inttoptr i64 %1972 to i32*
  %1975 = load i32, i32* %1974, align 4
  %1976 = sext i32 %1975 to i64
  store i64 %1976, i64* %RDX.i1748, align 8
  %1977 = shl nsw i64 %1976, 2
  %1978 = add i64 %1971, 13240
  %1979 = add i64 %1978, %1977
  %1980 = add i64 %1937, 25
  store i64 %1980, i64* %3, align 8
  %1981 = inttoptr i64 %1979 to i32*
  store i32 %1946, i32* %1981, align 4
  %1982 = load i64, i64* %RBP.i, align 8
  %1983 = add i64 %1982, -52
  %1984 = load i64, i64* %3, align 8
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %3, align 8
  %1986 = inttoptr i64 %1983 to i32*
  %1987 = load i32, i32* %1986, align 4
  %1988 = shl i32 %1987, 1
  %1989 = icmp slt i32 %1987, 0
  %1990 = icmp slt i32 %1988, 0
  %1991 = xor i1 %1989, %1990
  %1992 = zext i32 %1988 to i64
  store i64 %1992, i64* %RAX.i1161, align 8
  %.lobit50 = lshr i32 %1987, 31
  %1993 = trunc i32 %.lobit50 to i8
  store i8 %1993, i8* %14, align 1
  %1994 = and i32 %1988, 254
  %1995 = tail call i32 @llvm.ctpop.i32(i32 %1994)
  %1996 = trunc i32 %1995 to i8
  %1997 = and i8 %1996, 1
  %1998 = xor i8 %1997, 1
  store i8 %1998, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %1999 = icmp eq i32 %1988, 0
  %2000 = zext i1 %1999 to i8
  store i8 %2000, i8* %29, align 1
  %2001 = lshr i32 %1987, 30
  %2002 = trunc i32 %2001 to i8
  %2003 = and i8 %2002, 1
  store i8 %2003, i8* %32, align 1
  %2004 = zext i1 %1991 to i8
  store i8 %2004, i8* %38, align 1
  %2005 = add i64 %1982, -56
  %2006 = add i64 %1984, 8
  store i64 %2006, i64* %3, align 8
  %2007 = inttoptr i64 %2005 to i32*
  %2008 = load i32, i32* %2007, align 4
  %2009 = add i32 %2008, %1988
  %2010 = zext i32 %2009 to i64
  store i64 %2010, i64* %RAX.i1161, align 8
  %2011 = icmp ult i32 %2009, %1988
  %2012 = icmp ult i32 %2009, %2008
  %2013 = or i1 %2011, %2012
  %2014 = zext i1 %2013 to i8
  store i8 %2014, i8* %14, align 1
  %2015 = and i32 %2009, 255
  %2016 = tail call i32 @llvm.ctpop.i32(i32 %2015)
  %2017 = trunc i32 %2016 to i8
  %2018 = and i8 %2017, 1
  %2019 = xor i8 %2018, 1
  store i8 %2019, i8* %21, align 1
  %2020 = xor i32 %2008, %1988
  %2021 = xor i32 %2020, %2009
  %2022 = lshr i32 %2021, 4
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  store i8 %2024, i8* %26, align 1
  %2025 = icmp eq i32 %2009, 0
  %2026 = zext i1 %2025 to i8
  store i8 %2026, i8* %29, align 1
  %2027 = lshr i32 %2009, 31
  %2028 = trunc i32 %2027 to i8
  store i8 %2028, i8* %32, align 1
  %2029 = lshr i32 %1987, 30
  %2030 = and i32 %2029, 1
  %2031 = lshr i32 %2008, 31
  %2032 = xor i32 %2027, %2030
  %2033 = xor i32 %2027, %2031
  %2034 = add nuw nsw i32 %2032, %2033
  %2035 = icmp eq i32 %2034, 2
  %2036 = zext i1 %2035 to i8
  store i8 %2036, i8* %38, align 1
  %2037 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2037, i64* %RCX.i1519, align 8
  %2038 = add i64 %1982, -24
  %2039 = add i64 %1984, 20
  store i64 %2039, i64* %3, align 8
  %2040 = inttoptr i64 %2038 to i32*
  %2041 = load i32, i32* %2040, align 4
  %2042 = sext i32 %2041 to i64
  store i64 %2042, i64* %RDX.i1748, align 8
  %2043 = shl nsw i64 %2042, 2
  %2044 = add i64 %2037, 13176
  %2045 = add i64 %2044, %2043
  %2046 = add i64 %1984, 27
  store i64 %2046, i64* %3, align 8
  %2047 = inttoptr i64 %2045 to i32*
  store i32 %2009, i32* %2047, align 4
  %2048 = load i64, i64* %RBP.i, align 8
  %2049 = add i64 %2048, -52
  %2050 = load i64, i64* %3, align 8
  %2051 = add i64 %2050, 3
  store i64 %2051, i64* %3, align 8
  %2052 = inttoptr i64 %2049 to i32*
  %2053 = load i32, i32* %2052, align 4
  %2054 = zext i32 %2053 to i64
  store i64 %2054, i64* %RAX.i1161, align 8
  %2055 = add i64 %2048, -56
  %2056 = add i64 %2050, 6
  store i64 %2056, i64* %3, align 8
  %2057 = inttoptr i64 %2055 to i32*
  %2058 = load i32, i32* %2057, align 4
  %2059 = shl i32 %2058, 1
  %2060 = zext i32 %2059 to i64
  store i64 %2060, i64* %RSI.i2777, align 8
  %2061 = sub i32 %2053, %2059
  %2062 = zext i32 %2061 to i64
  store i64 %2062, i64* %RAX.i1161, align 8
  %2063 = icmp ult i32 %2053, %2059
  %2064 = zext i1 %2063 to i8
  store i8 %2064, i8* %14, align 1
  %2065 = and i32 %2061, 255
  %2066 = tail call i32 @llvm.ctpop.i32(i32 %2065)
  %2067 = trunc i32 %2066 to i8
  %2068 = and i8 %2067, 1
  %2069 = xor i8 %2068, 1
  store i8 %2069, i8* %21, align 1
  %2070 = xor i32 %2059, %2053
  %2071 = xor i32 %2070, %2061
  %2072 = lshr i32 %2071, 4
  %2073 = trunc i32 %2072 to i8
  %2074 = and i8 %2073, 1
  store i8 %2074, i8* %26, align 1
  %2075 = icmp eq i32 %2061, 0
  %2076 = zext i1 %2075 to i8
  store i8 %2076, i8* %29, align 1
  %2077 = lshr i32 %2061, 31
  %2078 = trunc i32 %2077 to i8
  store i8 %2078, i8* %32, align 1
  %2079 = lshr i32 %2053, 31
  %2080 = lshr i32 %2058, 30
  %2081 = and i32 %2080, 1
  %2082 = xor i32 %2081, %2079
  %2083 = xor i32 %2077, %2079
  %2084 = add nuw nsw i32 %2083, %2082
  %2085 = icmp eq i32 %2084, 2
  %2086 = zext i1 %2085 to i8
  store i8 %2086, i8* %38, align 1
  %2087 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %2087, i64* %RCX.i1519, align 8
  %2088 = add i64 %2048, -24
  %2089 = add i64 %2050, 22
  store i64 %2089, i64* %3, align 8
  %2090 = inttoptr i64 %2088 to i32*
  %2091 = load i32, i32* %2090, align 4
  %2092 = sext i32 %2091 to i64
  store i64 %2092, i64* %RDX.i1748, align 8
  %2093 = shl nsw i64 %2092, 2
  %2094 = add i64 %2087, 13304
  %2095 = add i64 %2094, %2093
  %2096 = add i64 %2050, 29
  store i64 %2096, i64* %3, align 8
  %2097 = inttoptr i64 %2095 to i32*
  store i32 %2061, i32* %2097, align 4
  %2098 = load i64, i64* %RBP.i, align 8
  %2099 = add i64 %2098, -24
  %2100 = load i64, i64* %3, align 8
  %2101 = add i64 %2100, 3
  store i64 %2101, i64* %3, align 8
  %2102 = inttoptr i64 %2099 to i32*
  %2103 = load i32, i32* %2102, align 4
  %2104 = add i32 %2103, 1
  %2105 = zext i32 %2104 to i64
  store i64 %2105, i64* %RAX.i1161, align 8
  %2106 = icmp eq i32 %2103, -1
  %2107 = icmp eq i32 %2104, 0
  %2108 = or i1 %2106, %2107
  %2109 = zext i1 %2108 to i8
  store i8 %2109, i8* %14, align 1
  %2110 = and i32 %2104, 255
  %2111 = tail call i32 @llvm.ctpop.i32(i32 %2110)
  %2112 = trunc i32 %2111 to i8
  %2113 = and i8 %2112, 1
  %2114 = xor i8 %2113, 1
  store i8 %2114, i8* %21, align 1
  %2115 = xor i32 %2104, %2103
  %2116 = lshr i32 %2115, 4
  %2117 = trunc i32 %2116 to i8
  %2118 = and i8 %2117, 1
  store i8 %2118, i8* %26, align 1
  %2119 = zext i1 %2107 to i8
  store i8 %2119, i8* %29, align 1
  %2120 = lshr i32 %2104, 31
  %2121 = trunc i32 %2120 to i8
  store i8 %2121, i8* %32, align 1
  %2122 = lshr i32 %2103, 31
  %2123 = xor i32 %2120, %2122
  %2124 = add nuw nsw i32 %2123, %2120
  %2125 = icmp eq i32 %2124, 2
  %2126 = zext i1 %2125 to i8
  store i8 %2126, i8* %38, align 1
  %2127 = add i64 %2100, 9
  store i64 %2127, i64* %3, align 8
  store i32 %2104, i32* %2102, align 4
  %2128 = load i64, i64* %3, align 8
  %2129 = add i64 %2128, -317
  store i64 %2129, i64* %3, align 8
  br label %block_.L_40c101

block_.L_40c24a:                                  ; preds = %block_.L_40c24a.preheader, %block_.L_40c312
  %2130 = phi i64 [ %2922, %block_.L_40c312 ], [ %.pre224, %block_.L_40c24a.preheader ]
  %2131 = load i64, i64* %RBP.i, align 8
  %2132 = add i64 %2131, -20
  %2133 = add i64 %2130, 4
  store i64 %2133, i64* %3, align 8
  %2134 = inttoptr i64 %2132 to i32*
  %2135 = load i32, i32* %2134, align 4
  %2136 = add i32 %2135, -4
  %2137 = icmp ult i32 %2135, 4
  %2138 = zext i1 %2137 to i8
  store i8 %2138, i8* %14, align 1
  %2139 = and i32 %2136, 255
  %2140 = tail call i32 @llvm.ctpop.i32(i32 %2139)
  %2141 = trunc i32 %2140 to i8
  %2142 = and i8 %2141, 1
  %2143 = xor i8 %2142, 1
  store i8 %2143, i8* %21, align 1
  %2144 = xor i32 %2136, %2135
  %2145 = lshr i32 %2144, 4
  %2146 = trunc i32 %2145 to i8
  %2147 = and i8 %2146, 1
  store i8 %2147, i8* %26, align 1
  %2148 = icmp eq i32 %2136, 0
  %2149 = zext i1 %2148 to i8
  store i8 %2149, i8* %29, align 1
  %2150 = lshr i32 %2136, 31
  %2151 = trunc i32 %2150 to i8
  store i8 %2151, i8* %32, align 1
  %2152 = lshr i32 %2135, 31
  %2153 = xor i32 %2150, %2152
  %2154 = add nuw nsw i32 %2153, %2152
  %2155 = icmp eq i32 %2154, 2
  %2156 = zext i1 %2155 to i8
  store i8 %2156, i8* %38, align 1
  %2157 = icmp ne i8 %2151, 0
  %2158 = xor i1 %2157, %2155
  %.v226 = select i1 %2158, i64 10, i64 361
  %2159 = add i64 %2130, %.v226
  %2160 = add i64 %2131, -24
  %2161 = add i64 %2159, 7
  store i64 %2161, i64* %3, align 8
  %2162 = inttoptr i64 %2160 to i32*
  store i32 0, i32* %2162, align 4
  %.pre223 = load i64, i64* %3, align 8
  br i1 %2158, label %block_.L_40c25b.preheader, label %block_.L_40c3ba.preheader

block_.L_40c25b.preheader:                        ; preds = %block_.L_40c24a
  br label %block_.L_40c25b

block_.L_40c3ba.preheader:                        ; preds = %block_.L_40c24a
  br label %block_.L_40c3ba

block_.L_40c25b:                                  ; preds = %block_.L_40c25b.preheader, %block_40c265
  %2163 = phi i64 [ %2581, %block_40c265 ], [ %.pre223, %block_.L_40c25b.preheader ]
  %2164 = load i64, i64* %RBP.i, align 8
  %2165 = add i64 %2164, -24
  %2166 = add i64 %2163, 4
  store i64 %2166, i64* %3, align 8
  %2167 = inttoptr i64 %2165 to i32*
  %2168 = load i32, i32* %2167, align 4
  %2169 = add i32 %2168, -2
  %2170 = icmp ult i32 %2168, 2
  %2171 = zext i1 %2170 to i8
  store i8 %2171, i8* %14, align 1
  %2172 = and i32 %2169, 255
  %2173 = tail call i32 @llvm.ctpop.i32(i32 %2172)
  %2174 = trunc i32 %2173 to i8
  %2175 = and i8 %2174, 1
  %2176 = xor i8 %2175, 1
  store i8 %2176, i8* %21, align 1
  %2177 = xor i32 %2169, %2168
  %2178 = lshr i32 %2177, 4
  %2179 = trunc i32 %2178 to i8
  %2180 = and i8 %2179, 1
  store i8 %2180, i8* %26, align 1
  %2181 = icmp eq i32 %2169, 0
  %2182 = zext i1 %2181 to i8
  store i8 %2182, i8* %29, align 1
  %2183 = lshr i32 %2169, 31
  %2184 = trunc i32 %2183 to i8
  store i8 %2184, i8* %32, align 1
  %2185 = lshr i32 %2168, 31
  %2186 = xor i32 %2183, %2185
  %2187 = add nuw nsw i32 %2186, %2185
  %2188 = icmp eq i32 %2187, 2
  %2189 = zext i1 %2188 to i8
  store i8 %2189, i8* %38, align 1
  %2190 = icmp ne i8 %2184, 0
  %2191 = xor i1 %2190, %2188
  %.v259 = select i1 %2191, i64 10, i64 183
  %2192 = add i64 %2163, %.v259
  store i64 %2192, i64* %3, align 8
  br i1 %2191, label %block_40c265, label %block_.L_40c312

block_40c265:                                     ; preds = %block_.L_40c25b
  store i64 3, i64* %RAX.i1161, align 8
  %2193 = add i64 %2192, 8
  store i64 %2193, i64* %3, align 8
  %2194 = load i32, i32* %2167, align 4
  %2195 = sub i32 3, %2194
  %2196 = zext i32 %2195 to i64
  store i64 %2196, i64* %RAX.i1161, align 8
  %2197 = add i64 %2164, -32
  %2198 = add i64 %2192, 11
  store i64 %2198, i64* %3, align 8
  %2199 = inttoptr i64 %2197 to i32*
  store i32 %2195, i32* %2199, align 4
  %2200 = load i64, i64* %3, align 8
  %2201 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2202 = add i64 %2201, 13112
  store i64 %2202, i64* %RCX.i1519, align 8
  %2203 = icmp ugt i64 %2201, -13113
  %2204 = zext i1 %2203 to i8
  store i8 %2204, i8* %14, align 1
  %2205 = trunc i64 %2202 to i32
  %2206 = and i32 %2205, 255
  %2207 = tail call i32 @llvm.ctpop.i32(i32 %2206)
  %2208 = trunc i32 %2207 to i8
  %2209 = and i8 %2208, 1
  %2210 = xor i8 %2209, 1
  store i8 %2210, i8* %21, align 1
  %2211 = xor i64 %2201, 16
  %2212 = xor i64 %2211, %2202
  %2213 = lshr i64 %2212, 4
  %2214 = trunc i64 %2213 to i8
  %2215 = and i8 %2214, 1
  store i8 %2215, i8* %26, align 1
  %2216 = icmp eq i64 %2202, 0
  %2217 = zext i1 %2216 to i8
  store i8 %2217, i8* %29, align 1
  %2218 = lshr i64 %2202, 63
  %2219 = trunc i64 %2218 to i8
  store i8 %2219, i8* %32, align 1
  %2220 = lshr i64 %2201, 63
  %2221 = xor i64 %2218, %2220
  %2222 = add nuw nsw i64 %2221, %2218
  %2223 = icmp eq i64 %2222, 2
  %2224 = zext i1 %2223 to i8
  store i8 %2224, i8* %38, align 1
  %2225 = load i64, i64* %RBP.i, align 8
  %2226 = add i64 %2225, -20
  %2227 = add i64 %2200, 19
  store i64 %2227, i64* %3, align 8
  %2228 = inttoptr i64 %2226 to i32*
  %2229 = load i32, i32* %2228, align 4
  %2230 = sext i32 %2229 to i64
  %2231 = shl nsw i64 %2230, 6
  store i64 %2231, i64* %RDX.i1748, align 8
  %2232 = add i64 %2231, %2202
  store i64 %2232, i64* %RCX.i1519, align 8
  %2233 = icmp ult i64 %2232, %2202
  %2234 = icmp ult i64 %2232, %2231
  %2235 = or i1 %2233, %2234
  %2236 = zext i1 %2235 to i8
  store i8 %2236, i8* %14, align 1
  %2237 = trunc i64 %2232 to i32
  %2238 = and i32 %2237, 255
  %2239 = tail call i32 @llvm.ctpop.i32(i32 %2238)
  %2240 = trunc i32 %2239 to i8
  %2241 = and i8 %2240, 1
  %2242 = xor i8 %2241, 1
  store i8 %2242, i8* %21, align 1
  %2243 = xor i64 %2202, %2232
  %2244 = lshr i64 %2243, 4
  %2245 = trunc i64 %2244 to i8
  %2246 = and i8 %2245, 1
  store i8 %2246, i8* %26, align 1
  %2247 = icmp eq i64 %2232, 0
  %2248 = zext i1 %2247 to i8
  store i8 %2248, i8* %29, align 1
  %2249 = lshr i64 %2232, 63
  %2250 = trunc i64 %2249 to i8
  store i8 %2250, i8* %32, align 1
  %2251 = lshr i64 %2230, 57
  %2252 = and i64 %2251, 1
  %2253 = xor i64 %2249, %2218
  %2254 = xor i64 %2249, %2252
  %2255 = add nuw nsw i64 %2253, %2254
  %2256 = icmp eq i64 %2255, 2
  %2257 = zext i1 %2256 to i8
  store i8 %2257, i8* %38, align 1
  %2258 = add i64 %2225, -24
  %2259 = add i64 %2200, 30
  store i64 %2259, i64* %3, align 8
  %2260 = inttoptr i64 %2258 to i32*
  %2261 = load i32, i32* %2260, align 4
  %2262 = sext i32 %2261 to i64
  store i64 %2262, i64* %RDX.i1748, align 8
  %2263 = shl nsw i64 %2262, 2
  %2264 = add i64 %2263, %2232
  %2265 = add i64 %2200, 33
  store i64 %2265, i64* %3, align 8
  %2266 = inttoptr i64 %2264 to i32*
  %2267 = load i32, i32* %2266, align 4
  %2268 = zext i32 %2267 to i64
  store i64 %2268, i64* %RAX.i1161, align 8
  %2269 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2270 = add i64 %2269, 13112
  store i64 %2270, i64* %RCX.i1519, align 8
  %2271 = icmp ugt i64 %2269, -13113
  %2272 = zext i1 %2271 to i8
  store i8 %2272, i8* %14, align 1
  %2273 = trunc i64 %2270 to i32
  %2274 = and i32 %2273, 255
  %2275 = tail call i32 @llvm.ctpop.i32(i32 %2274)
  %2276 = trunc i32 %2275 to i8
  %2277 = and i8 %2276, 1
  %2278 = xor i8 %2277, 1
  store i8 %2278, i8* %21, align 1
  %2279 = xor i64 %2269, 16
  %2280 = xor i64 %2279, %2270
  %2281 = lshr i64 %2280, 4
  %2282 = trunc i64 %2281 to i8
  %2283 = and i8 %2282, 1
  store i8 %2283, i8* %26, align 1
  %2284 = icmp eq i64 %2270, 0
  %2285 = zext i1 %2284 to i8
  store i8 %2285, i8* %29, align 1
  %2286 = lshr i64 %2270, 63
  %2287 = trunc i64 %2286 to i8
  store i8 %2287, i8* %32, align 1
  %2288 = lshr i64 %2269, 63
  %2289 = xor i64 %2286, %2288
  %2290 = add nuw nsw i64 %2289, %2286
  %2291 = icmp eq i64 %2290, 2
  %2292 = zext i1 %2291 to i8
  store i8 %2292, i8* %38, align 1
  %2293 = load i64, i64* %RBP.i, align 8
  %2294 = add i64 %2293, -20
  %2295 = add i64 %2200, 52
  store i64 %2295, i64* %3, align 8
  %2296 = inttoptr i64 %2294 to i32*
  %2297 = load i32, i32* %2296, align 4
  %2298 = sext i32 %2297 to i64
  %2299 = shl nsw i64 %2298, 6
  store i64 %2299, i64* %RDX.i1748, align 8
  %2300 = add i64 %2299, %2270
  store i64 %2300, i64* %RCX.i1519, align 8
  %2301 = icmp ult i64 %2300, %2270
  %2302 = icmp ult i64 %2300, %2299
  %2303 = or i1 %2301, %2302
  %2304 = zext i1 %2303 to i8
  store i8 %2304, i8* %14, align 1
  %2305 = trunc i64 %2300 to i32
  %2306 = and i32 %2305, 255
  %2307 = tail call i32 @llvm.ctpop.i32(i32 %2306)
  %2308 = trunc i32 %2307 to i8
  %2309 = and i8 %2308, 1
  %2310 = xor i8 %2309, 1
  store i8 %2310, i8* %21, align 1
  %2311 = xor i64 %2270, %2300
  %2312 = lshr i64 %2311, 4
  %2313 = trunc i64 %2312 to i8
  %2314 = and i8 %2313, 1
  store i8 %2314, i8* %26, align 1
  %2315 = icmp eq i64 %2300, 0
  %2316 = zext i1 %2315 to i8
  store i8 %2316, i8* %29, align 1
  %2317 = lshr i64 %2300, 63
  %2318 = trunc i64 %2317 to i8
  store i8 %2318, i8* %32, align 1
  %2319 = lshr i64 %2298, 57
  %2320 = and i64 %2319, 1
  %2321 = xor i64 %2317, %2286
  %2322 = xor i64 %2317, %2320
  %2323 = add nuw nsw i64 %2321, %2322
  %2324 = icmp eq i64 %2323, 2
  %2325 = zext i1 %2324 to i8
  store i8 %2325, i8* %38, align 1
  %2326 = add i64 %2293, -32
  %2327 = add i64 %2200, 63
  store i64 %2327, i64* %3, align 8
  %2328 = inttoptr i64 %2326 to i32*
  %2329 = load i32, i32* %2328, align 4
  %2330 = sext i32 %2329 to i64
  store i64 %2330, i64* %RDX.i1748, align 8
  %2331 = load i64, i64* %RAX.i1161, align 8
  %2332 = shl nsw i64 %2330, 2
  %2333 = add i64 %2300, %2332
  %2334 = add i64 %2200, 66
  store i64 %2334, i64* %3, align 8
  %2335 = trunc i64 %2331 to i32
  %2336 = inttoptr i64 %2333 to i32*
  %2337 = load i32, i32* %2336, align 4
  %2338 = add i32 %2337, %2335
  %2339 = zext i32 %2338 to i64
  store i64 %2339, i64* %RAX.i1161, align 8
  %2340 = icmp ult i32 %2338, %2335
  %2341 = icmp ult i32 %2338, %2337
  %2342 = or i1 %2340, %2341
  %2343 = zext i1 %2342 to i8
  store i8 %2343, i8* %14, align 1
  %2344 = and i32 %2338, 255
  %2345 = tail call i32 @llvm.ctpop.i32(i32 %2344)
  %2346 = trunc i32 %2345 to i8
  %2347 = and i8 %2346, 1
  %2348 = xor i8 %2347, 1
  store i8 %2348, i8* %21, align 1
  %2349 = xor i32 %2337, %2335
  %2350 = xor i32 %2349, %2338
  %2351 = lshr i32 %2350, 4
  %2352 = trunc i32 %2351 to i8
  %2353 = and i8 %2352, 1
  store i8 %2353, i8* %26, align 1
  %2354 = icmp eq i32 %2338, 0
  %2355 = zext i1 %2354 to i8
  store i8 %2355, i8* %29, align 1
  %2356 = lshr i32 %2338, 31
  %2357 = trunc i32 %2356 to i8
  store i8 %2357, i8* %32, align 1
  %2358 = lshr i32 %2335, 31
  %2359 = lshr i32 %2337, 31
  %2360 = xor i32 %2356, %2358
  %2361 = xor i32 %2356, %2359
  %2362 = add nuw nsw i32 %2360, %2361
  %2363 = icmp eq i32 %2362, 2
  %2364 = zext i1 %2363 to i8
  store i8 %2364, i8* %38, align 1
  %2365 = load i64, i64* %RBP.i, align 8
  %2366 = add i64 %2365, -24
  %2367 = add i64 %2200, 70
  store i64 %2367, i64* %3, align 8
  %2368 = inttoptr i64 %2366 to i32*
  %2369 = load i32, i32* %2368, align 4
  %2370 = sext i32 %2369 to i64
  %2371 = shl nsw i64 %2370, 2
  %2372 = add i64 %2365, -64
  %2373 = add i64 %2372, %2371
  %2374 = add i64 %2200, 74
  store i64 %2374, i64* %3, align 8
  %2375 = inttoptr i64 %2373 to i32*
  store i32 %2338, i32* %2375, align 4
  %2376 = load i64, i64* %3, align 8
  %2377 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2378 = add i64 %2377, 13112
  store i64 %2378, i64* %RCX.i1519, align 8
  %2379 = icmp ugt i64 %2377, -13113
  %2380 = zext i1 %2379 to i8
  store i8 %2380, i8* %14, align 1
  %2381 = trunc i64 %2378 to i32
  %2382 = and i32 %2381, 255
  %2383 = tail call i32 @llvm.ctpop.i32(i32 %2382)
  %2384 = trunc i32 %2383 to i8
  %2385 = and i8 %2384, 1
  %2386 = xor i8 %2385, 1
  store i8 %2386, i8* %21, align 1
  %2387 = xor i64 %2377, 16
  %2388 = xor i64 %2387, %2378
  %2389 = lshr i64 %2388, 4
  %2390 = trunc i64 %2389 to i8
  %2391 = and i8 %2390, 1
  store i8 %2391, i8* %26, align 1
  %2392 = icmp eq i64 %2378, 0
  %2393 = zext i1 %2392 to i8
  store i8 %2393, i8* %29, align 1
  %2394 = lshr i64 %2378, 63
  %2395 = trunc i64 %2394 to i8
  store i8 %2395, i8* %32, align 1
  %2396 = lshr i64 %2377, 63
  %2397 = xor i64 %2394, %2396
  %2398 = add nuw nsw i64 %2397, %2394
  %2399 = icmp eq i64 %2398, 2
  %2400 = zext i1 %2399 to i8
  store i8 %2400, i8* %38, align 1
  %2401 = load i64, i64* %RBP.i, align 8
  %2402 = add i64 %2401, -20
  %2403 = add i64 %2376, 19
  store i64 %2403, i64* %3, align 8
  %2404 = inttoptr i64 %2402 to i32*
  %2405 = load i32, i32* %2404, align 4
  %2406 = sext i32 %2405 to i64
  %2407 = shl nsw i64 %2406, 6
  store i64 %2407, i64* %RDX.i1748, align 8
  %2408 = add i64 %2407, %2378
  store i64 %2408, i64* %RCX.i1519, align 8
  %2409 = icmp ult i64 %2408, %2378
  %2410 = icmp ult i64 %2408, %2407
  %2411 = or i1 %2409, %2410
  %2412 = zext i1 %2411 to i8
  store i8 %2412, i8* %14, align 1
  %2413 = trunc i64 %2408 to i32
  %2414 = and i32 %2413, 255
  %2415 = tail call i32 @llvm.ctpop.i32(i32 %2414)
  %2416 = trunc i32 %2415 to i8
  %2417 = and i8 %2416, 1
  %2418 = xor i8 %2417, 1
  store i8 %2418, i8* %21, align 1
  %2419 = xor i64 %2378, %2408
  %2420 = lshr i64 %2419, 4
  %2421 = trunc i64 %2420 to i8
  %2422 = and i8 %2421, 1
  store i8 %2422, i8* %26, align 1
  %2423 = icmp eq i64 %2408, 0
  %2424 = zext i1 %2423 to i8
  store i8 %2424, i8* %29, align 1
  %2425 = lshr i64 %2408, 63
  %2426 = trunc i64 %2425 to i8
  store i8 %2426, i8* %32, align 1
  %2427 = lshr i64 %2406, 57
  %2428 = and i64 %2427, 1
  %2429 = xor i64 %2425, %2394
  %2430 = xor i64 %2425, %2428
  %2431 = add nuw nsw i64 %2429, %2430
  %2432 = icmp eq i64 %2431, 2
  %2433 = zext i1 %2432 to i8
  store i8 %2433, i8* %38, align 1
  %2434 = add i64 %2401, -24
  %2435 = add i64 %2376, 30
  store i64 %2435, i64* %3, align 8
  %2436 = inttoptr i64 %2434 to i32*
  %2437 = load i32, i32* %2436, align 4
  %2438 = sext i32 %2437 to i64
  store i64 %2438, i64* %RDX.i1748, align 8
  %2439 = shl nsw i64 %2438, 2
  %2440 = add i64 %2439, %2408
  %2441 = add i64 %2376, 33
  store i64 %2441, i64* %3, align 8
  %2442 = inttoptr i64 %2440 to i32*
  %2443 = load i32, i32* %2442, align 4
  %2444 = zext i32 %2443 to i64
  store i64 %2444, i64* %RAX.i1161, align 8
  %2445 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2446 = add i64 %2445, 13112
  store i64 %2446, i64* %RCX.i1519, align 8
  %2447 = icmp ugt i64 %2445, -13113
  %2448 = zext i1 %2447 to i8
  store i8 %2448, i8* %14, align 1
  %2449 = trunc i64 %2446 to i32
  %2450 = and i32 %2449, 255
  %2451 = tail call i32 @llvm.ctpop.i32(i32 %2450)
  %2452 = trunc i32 %2451 to i8
  %2453 = and i8 %2452, 1
  %2454 = xor i8 %2453, 1
  store i8 %2454, i8* %21, align 1
  %2455 = xor i64 %2445, 16
  %2456 = xor i64 %2455, %2446
  %2457 = lshr i64 %2456, 4
  %2458 = trunc i64 %2457 to i8
  %2459 = and i8 %2458, 1
  store i8 %2459, i8* %26, align 1
  %2460 = icmp eq i64 %2446, 0
  %2461 = zext i1 %2460 to i8
  store i8 %2461, i8* %29, align 1
  %2462 = lshr i64 %2446, 63
  %2463 = trunc i64 %2462 to i8
  store i8 %2463, i8* %32, align 1
  %2464 = lshr i64 %2445, 63
  %2465 = xor i64 %2462, %2464
  %2466 = add nuw nsw i64 %2465, %2462
  %2467 = icmp eq i64 %2466, 2
  %2468 = zext i1 %2467 to i8
  store i8 %2468, i8* %38, align 1
  %2469 = load i64, i64* %RBP.i, align 8
  %2470 = add i64 %2469, -20
  %2471 = add i64 %2376, 52
  store i64 %2471, i64* %3, align 8
  %2472 = inttoptr i64 %2470 to i32*
  %2473 = load i32, i32* %2472, align 4
  %2474 = sext i32 %2473 to i64
  %2475 = shl nsw i64 %2474, 6
  store i64 %2475, i64* %RDX.i1748, align 8
  %2476 = add i64 %2475, %2446
  store i64 %2476, i64* %RCX.i1519, align 8
  %2477 = icmp ult i64 %2476, %2446
  %2478 = icmp ult i64 %2476, %2475
  %2479 = or i1 %2477, %2478
  %2480 = zext i1 %2479 to i8
  store i8 %2480, i8* %14, align 1
  %2481 = trunc i64 %2476 to i32
  %2482 = and i32 %2481, 255
  %2483 = tail call i32 @llvm.ctpop.i32(i32 %2482)
  %2484 = trunc i32 %2483 to i8
  %2485 = and i8 %2484, 1
  %2486 = xor i8 %2485, 1
  store i8 %2486, i8* %21, align 1
  %2487 = xor i64 %2446, %2476
  %2488 = lshr i64 %2487, 4
  %2489 = trunc i64 %2488 to i8
  %2490 = and i8 %2489, 1
  store i8 %2490, i8* %26, align 1
  %2491 = icmp eq i64 %2476, 0
  %2492 = zext i1 %2491 to i8
  store i8 %2492, i8* %29, align 1
  %2493 = lshr i64 %2476, 63
  %2494 = trunc i64 %2493 to i8
  store i8 %2494, i8* %32, align 1
  %2495 = lshr i64 %2474, 57
  %2496 = and i64 %2495, 1
  %2497 = xor i64 %2493, %2462
  %2498 = xor i64 %2493, %2496
  %2499 = add nuw nsw i64 %2497, %2498
  %2500 = icmp eq i64 %2499, 2
  %2501 = zext i1 %2500 to i8
  store i8 %2501, i8* %38, align 1
  %2502 = add i64 %2469, -32
  %2503 = add i64 %2376, 63
  store i64 %2503, i64* %3, align 8
  %2504 = inttoptr i64 %2502 to i32*
  %2505 = load i32, i32* %2504, align 4
  %2506 = sext i32 %2505 to i64
  store i64 %2506, i64* %RDX.i1748, align 8
  %2507 = load i64, i64* %RAX.i1161, align 8
  %2508 = shl nsw i64 %2506, 2
  %2509 = add i64 %2476, %2508
  %2510 = add i64 %2376, 66
  store i64 %2510, i64* %3, align 8
  %2511 = trunc i64 %2507 to i32
  %2512 = inttoptr i64 %2509 to i32*
  %2513 = load i32, i32* %2512, align 4
  %2514 = sub i32 %2511, %2513
  %2515 = zext i32 %2514 to i64
  store i64 %2515, i64* %RAX.i1161, align 8
  %2516 = icmp ult i32 %2511, %2513
  %2517 = zext i1 %2516 to i8
  store i8 %2517, i8* %14, align 1
  %2518 = and i32 %2514, 255
  %2519 = tail call i32 @llvm.ctpop.i32(i32 %2518)
  %2520 = trunc i32 %2519 to i8
  %2521 = and i8 %2520, 1
  %2522 = xor i8 %2521, 1
  store i8 %2522, i8* %21, align 1
  %2523 = xor i32 %2513, %2511
  %2524 = xor i32 %2523, %2514
  %2525 = lshr i32 %2524, 4
  %2526 = trunc i32 %2525 to i8
  %2527 = and i8 %2526, 1
  store i8 %2527, i8* %26, align 1
  %2528 = icmp eq i32 %2514, 0
  %2529 = zext i1 %2528 to i8
  store i8 %2529, i8* %29, align 1
  %2530 = lshr i32 %2514, 31
  %2531 = trunc i32 %2530 to i8
  store i8 %2531, i8* %32, align 1
  %2532 = lshr i32 %2511, 31
  %2533 = lshr i32 %2513, 31
  %2534 = xor i32 %2533, %2532
  %2535 = xor i32 %2530, %2532
  %2536 = add nuw nsw i32 %2535, %2534
  %2537 = icmp eq i32 %2536, 2
  %2538 = zext i1 %2537 to i8
  store i8 %2538, i8* %38, align 1
  %2539 = load i64, i64* %RBP.i, align 8
  %2540 = add i64 %2539, -32
  %2541 = add i64 %2376, 70
  store i64 %2541, i64* %3, align 8
  %2542 = inttoptr i64 %2540 to i32*
  %2543 = load i32, i32* %2542, align 4
  %2544 = sext i32 %2543 to i64
  store i64 %2544, i64* %RCX.i1519, align 8
  %2545 = shl nsw i64 %2544, 2
  %2546 = add i64 %2539, -64
  %2547 = add i64 %2546, %2545
  %2548 = add i64 %2376, 74
  store i64 %2548, i64* %3, align 8
  %2549 = inttoptr i64 %2547 to i32*
  store i32 %2514, i32* %2549, align 4
  %2550 = load i64, i64* %RBP.i, align 8
  %2551 = add i64 %2550, -24
  %2552 = load i64, i64* %3, align 8
  %2553 = add i64 %2552, 3
  store i64 %2553, i64* %3, align 8
  %2554 = inttoptr i64 %2551 to i32*
  %2555 = load i32, i32* %2554, align 4
  %2556 = add i32 %2555, 1
  %2557 = zext i32 %2556 to i64
  store i64 %2557, i64* %RAX.i1161, align 8
  %2558 = icmp eq i32 %2555, -1
  %2559 = icmp eq i32 %2556, 0
  %2560 = or i1 %2558, %2559
  %2561 = zext i1 %2560 to i8
  store i8 %2561, i8* %14, align 1
  %2562 = and i32 %2556, 255
  %2563 = tail call i32 @llvm.ctpop.i32(i32 %2562)
  %2564 = trunc i32 %2563 to i8
  %2565 = and i8 %2564, 1
  %2566 = xor i8 %2565, 1
  store i8 %2566, i8* %21, align 1
  %2567 = xor i32 %2556, %2555
  %2568 = lshr i32 %2567, 4
  %2569 = trunc i32 %2568 to i8
  %2570 = and i8 %2569, 1
  store i8 %2570, i8* %26, align 1
  %2571 = zext i1 %2559 to i8
  store i8 %2571, i8* %29, align 1
  %2572 = lshr i32 %2556, 31
  %2573 = trunc i32 %2572 to i8
  store i8 %2573, i8* %32, align 1
  %2574 = lshr i32 %2555, 31
  %2575 = xor i32 %2572, %2574
  %2576 = add nuw nsw i32 %2575, %2572
  %2577 = icmp eq i32 %2576, 2
  %2578 = zext i1 %2577 to i8
  store i8 %2578, i8* %38, align 1
  %2579 = add i64 %2552, 9
  store i64 %2579, i64* %3, align 8
  store i32 %2556, i32* %2554, align 4
  %2580 = load i64, i64* %3, align 8
  %2581 = add i64 %2580, -178
  store i64 %2581, i64* %3, align 8
  br label %block_.L_40c25b

block_.L_40c312:                                  ; preds = %block_.L_40c25b
  %2582 = add i64 %2164, -64
  %2583 = add i64 %2192, 3
  store i64 %2583, i64* %3, align 8
  %2584 = inttoptr i64 %2582 to i32*
  %2585 = load i32, i32* %2584, align 4
  %2586 = zext i32 %2585 to i64
  store i64 %2586, i64* %RAX.i1161, align 8
  %2587 = add i64 %2164, -60
  %2588 = add i64 %2192, 6
  store i64 %2588, i64* %3, align 8
  %2589 = inttoptr i64 %2587 to i32*
  %2590 = load i32, i32* %2589, align 4
  %2591 = add i32 %2590, %2585
  %2592 = zext i32 %2591 to i64
  store i64 %2592, i64* %RAX.i1161, align 8
  %2593 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2594 = add i64 %2593, 13112
  store i64 %2594, i64* %RCX.i1519, align 8
  %2595 = icmp ugt i64 %2593, -13113
  %2596 = zext i1 %2595 to i8
  store i8 %2596, i8* %14, align 1
  %2597 = trunc i64 %2594 to i32
  %2598 = and i32 %2597, 255
  %2599 = tail call i32 @llvm.ctpop.i32(i32 %2598)
  %2600 = trunc i32 %2599 to i8
  %2601 = and i8 %2600, 1
  %2602 = xor i8 %2601, 1
  store i8 %2602, i8* %21, align 1
  %2603 = xor i64 %2593, 16
  %2604 = xor i64 %2603, %2594
  %2605 = lshr i64 %2604, 4
  %2606 = trunc i64 %2605 to i8
  %2607 = and i8 %2606, 1
  store i8 %2607, i8* %26, align 1
  %2608 = icmp eq i64 %2594, 0
  %2609 = zext i1 %2608 to i8
  store i8 %2609, i8* %29, align 1
  %2610 = lshr i64 %2594, 63
  %2611 = trunc i64 %2610 to i8
  store i8 %2611, i8* %32, align 1
  %2612 = lshr i64 %2593, 63
  %2613 = xor i64 %2610, %2612
  %2614 = add nuw nsw i64 %2613, %2610
  %2615 = icmp eq i64 %2614, 2
  %2616 = zext i1 %2615 to i8
  store i8 %2616, i8* %38, align 1
  %2617 = add i64 %2164, -20
  %2618 = add i64 %2192, 25
  store i64 %2618, i64* %3, align 8
  %2619 = inttoptr i64 %2617 to i32*
  %2620 = load i32, i32* %2619, align 4
  %2621 = sext i32 %2620 to i64
  %2622 = shl nsw i64 %2621, 6
  store i64 %2622, i64* %RDX.i1748, align 8
  %2623 = add i64 %2622, %2594
  store i64 %2623, i64* %RCX.i1519, align 8
  %2624 = icmp ult i64 %2623, %2594
  %2625 = icmp ult i64 %2623, %2622
  %2626 = or i1 %2624, %2625
  %2627 = zext i1 %2626 to i8
  store i8 %2627, i8* %14, align 1
  %2628 = trunc i64 %2623 to i32
  %2629 = and i32 %2628, 255
  %2630 = tail call i32 @llvm.ctpop.i32(i32 %2629)
  %2631 = trunc i32 %2630 to i8
  %2632 = and i8 %2631, 1
  %2633 = xor i8 %2632, 1
  store i8 %2633, i8* %21, align 1
  %2634 = xor i64 %2594, %2623
  %2635 = lshr i64 %2634, 4
  %2636 = trunc i64 %2635 to i8
  %2637 = and i8 %2636, 1
  store i8 %2637, i8* %26, align 1
  %2638 = icmp eq i64 %2623, 0
  %2639 = zext i1 %2638 to i8
  store i8 %2639, i8* %29, align 1
  %2640 = lshr i64 %2623, 63
  %2641 = trunc i64 %2640 to i8
  store i8 %2641, i8* %32, align 1
  %2642 = lshr i64 %2621, 57
  %2643 = and i64 %2642, 1
  %2644 = xor i64 %2640, %2610
  %2645 = xor i64 %2640, %2643
  %2646 = add nuw nsw i64 %2644, %2645
  %2647 = icmp eq i64 %2646, 2
  %2648 = zext i1 %2647 to i8
  store i8 %2648, i8* %38, align 1
  %2649 = inttoptr i64 %2623 to i32*
  %2650 = load i32, i32* %EAX.i2800, align 4
  %2651 = add i64 %2192, 34
  store i64 %2651, i64* %3, align 8
  store i32 %2650, i32* %2649, align 4
  %2652 = load i64, i64* %RBP.i, align 8
  %2653 = add i64 %2652, -64
  %2654 = load i64, i64* %3, align 8
  %2655 = add i64 %2654, 3
  store i64 %2655, i64* %3, align 8
  %2656 = inttoptr i64 %2653 to i32*
  %2657 = load i32, i32* %2656, align 4
  %2658 = zext i32 %2657 to i64
  store i64 %2658, i64* %RAX.i1161, align 8
  %2659 = add i64 %2652, -60
  %2660 = add i64 %2654, 6
  store i64 %2660, i64* %3, align 8
  %2661 = inttoptr i64 %2659 to i32*
  %2662 = load i32, i32* %2661, align 4
  %2663 = sub i32 %2657, %2662
  %2664 = zext i32 %2663 to i64
  store i64 %2664, i64* %RAX.i1161, align 8
  %2665 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2666 = add i64 %2665, 13112
  store i64 %2666, i64* %RCX.i1519, align 8
  %2667 = icmp ugt i64 %2665, -13113
  %2668 = zext i1 %2667 to i8
  store i8 %2668, i8* %14, align 1
  %2669 = trunc i64 %2666 to i32
  %2670 = and i32 %2669, 255
  %2671 = tail call i32 @llvm.ctpop.i32(i32 %2670)
  %2672 = trunc i32 %2671 to i8
  %2673 = and i8 %2672, 1
  %2674 = xor i8 %2673, 1
  store i8 %2674, i8* %21, align 1
  %2675 = xor i64 %2665, 16
  %2676 = xor i64 %2675, %2666
  %2677 = lshr i64 %2676, 4
  %2678 = trunc i64 %2677 to i8
  %2679 = and i8 %2678, 1
  store i8 %2679, i8* %26, align 1
  %2680 = icmp eq i64 %2666, 0
  %2681 = zext i1 %2680 to i8
  store i8 %2681, i8* %29, align 1
  %2682 = lshr i64 %2666, 63
  %2683 = trunc i64 %2682 to i8
  store i8 %2683, i8* %32, align 1
  %2684 = lshr i64 %2665, 63
  %2685 = xor i64 %2682, %2684
  %2686 = add nuw nsw i64 %2685, %2682
  %2687 = icmp eq i64 %2686, 2
  %2688 = zext i1 %2687 to i8
  store i8 %2688, i8* %38, align 1
  %2689 = add i64 %2652, -20
  %2690 = add i64 %2654, 25
  store i64 %2690, i64* %3, align 8
  %2691 = inttoptr i64 %2689 to i32*
  %2692 = load i32, i32* %2691, align 4
  %2693 = sext i32 %2692 to i64
  %2694 = shl nsw i64 %2693, 6
  store i64 %2694, i64* %RDX.i1748, align 8
  %2695 = add i64 %2694, %2666
  store i64 %2695, i64* %RCX.i1519, align 8
  %2696 = icmp ult i64 %2695, %2666
  %2697 = icmp ult i64 %2695, %2694
  %2698 = or i1 %2696, %2697
  %2699 = zext i1 %2698 to i8
  store i8 %2699, i8* %14, align 1
  %2700 = trunc i64 %2695 to i32
  %2701 = and i32 %2700, 255
  %2702 = tail call i32 @llvm.ctpop.i32(i32 %2701)
  %2703 = trunc i32 %2702 to i8
  %2704 = and i8 %2703, 1
  %2705 = xor i8 %2704, 1
  store i8 %2705, i8* %21, align 1
  %2706 = xor i64 %2666, %2695
  %2707 = lshr i64 %2706, 4
  %2708 = trunc i64 %2707 to i8
  %2709 = and i8 %2708, 1
  store i8 %2709, i8* %26, align 1
  %2710 = icmp eq i64 %2695, 0
  %2711 = zext i1 %2710 to i8
  store i8 %2711, i8* %29, align 1
  %2712 = lshr i64 %2695, 63
  %2713 = trunc i64 %2712 to i8
  store i8 %2713, i8* %32, align 1
  %2714 = lshr i64 %2693, 57
  %2715 = and i64 %2714, 1
  %2716 = xor i64 %2712, %2682
  %2717 = xor i64 %2712, %2715
  %2718 = add nuw nsw i64 %2716, %2717
  %2719 = icmp eq i64 %2718, 2
  %2720 = zext i1 %2719 to i8
  store i8 %2720, i8* %38, align 1
  %2721 = add i64 %2695, 8
  %2722 = load i32, i32* %EAX.i2800, align 4
  %2723 = add i64 %2654, 35
  store i64 %2723, i64* %3, align 8
  %2724 = inttoptr i64 %2721 to i32*
  store i32 %2722, i32* %2724, align 4
  %2725 = load i64, i64* %RBP.i, align 8
  %2726 = add i64 %2725, -52
  %2727 = load i64, i64* %3, align 8
  %2728 = add i64 %2727, 3
  store i64 %2728, i64* %3, align 8
  %2729 = inttoptr i64 %2726 to i32*
  %2730 = load i32, i32* %2729, align 4
  %2731 = shl i32 %2730, 1
  %2732 = icmp slt i32 %2730, 0
  %2733 = icmp slt i32 %2731, 0
  %2734 = xor i1 %2732, %2733
  %2735 = zext i32 %2731 to i64
  store i64 %2735, i64* %RAX.i1161, align 8
  %.lobit58 = lshr i32 %2730, 31
  %2736 = trunc i32 %.lobit58 to i8
  store i8 %2736, i8* %14, align 1
  %2737 = and i32 %2731, 254
  %2738 = tail call i32 @llvm.ctpop.i32(i32 %2737)
  %2739 = trunc i32 %2738 to i8
  %2740 = and i8 %2739, 1
  %2741 = xor i8 %2740, 1
  store i8 %2741, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %2742 = icmp eq i32 %2731, 0
  %2743 = zext i1 %2742 to i8
  store i8 %2743, i8* %29, align 1
  %2744 = lshr i32 %2730, 30
  %2745 = trunc i32 %2744 to i8
  %2746 = and i8 %2745, 1
  store i8 %2746, i8* %32, align 1
  %2747 = zext i1 %2734 to i8
  store i8 %2747, i8* %38, align 1
  %2748 = add i64 %2725, -56
  %2749 = add i64 %2727, 8
  store i64 %2749, i64* %3, align 8
  %2750 = inttoptr i64 %2748 to i32*
  %2751 = load i32, i32* %2750, align 4
  %2752 = add i32 %2751, %2731
  %2753 = zext i32 %2752 to i64
  store i64 %2753, i64* %RAX.i1161, align 8
  %2754 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2755 = add i64 %2754, 13112
  store i64 %2755, i64* %RCX.i1519, align 8
  %2756 = icmp ugt i64 %2754, -13113
  %2757 = zext i1 %2756 to i8
  store i8 %2757, i8* %14, align 1
  %2758 = trunc i64 %2755 to i32
  %2759 = and i32 %2758, 255
  %2760 = tail call i32 @llvm.ctpop.i32(i32 %2759)
  %2761 = trunc i32 %2760 to i8
  %2762 = and i8 %2761, 1
  %2763 = xor i8 %2762, 1
  store i8 %2763, i8* %21, align 1
  %2764 = xor i64 %2754, 16
  %2765 = xor i64 %2764, %2755
  %2766 = lshr i64 %2765, 4
  %2767 = trunc i64 %2766 to i8
  %2768 = and i8 %2767, 1
  store i8 %2768, i8* %26, align 1
  %2769 = icmp eq i64 %2755, 0
  %2770 = zext i1 %2769 to i8
  store i8 %2770, i8* %29, align 1
  %2771 = lshr i64 %2755, 63
  %2772 = trunc i64 %2771 to i8
  store i8 %2772, i8* %32, align 1
  %2773 = lshr i64 %2754, 63
  %2774 = xor i64 %2771, %2773
  %2775 = add nuw nsw i64 %2774, %2771
  %2776 = icmp eq i64 %2775, 2
  %2777 = zext i1 %2776 to i8
  store i8 %2777, i8* %38, align 1
  %2778 = load i64, i64* %RBP.i, align 8
  %2779 = add i64 %2778, -20
  %2780 = add i64 %2727, 27
  store i64 %2780, i64* %3, align 8
  %2781 = inttoptr i64 %2779 to i32*
  %2782 = load i32, i32* %2781, align 4
  %2783 = sext i32 %2782 to i64
  %2784 = shl nsw i64 %2783, 6
  store i64 %2784, i64* %RDX.i1748, align 8
  %2785 = add i64 %2784, %2755
  store i64 %2785, i64* %RCX.i1519, align 8
  %2786 = icmp ult i64 %2785, %2755
  %2787 = icmp ult i64 %2785, %2784
  %2788 = or i1 %2786, %2787
  %2789 = zext i1 %2788 to i8
  store i8 %2789, i8* %14, align 1
  %2790 = trunc i64 %2785 to i32
  %2791 = and i32 %2790, 255
  %2792 = tail call i32 @llvm.ctpop.i32(i32 %2791)
  %2793 = trunc i32 %2792 to i8
  %2794 = and i8 %2793, 1
  %2795 = xor i8 %2794, 1
  store i8 %2795, i8* %21, align 1
  %2796 = xor i64 %2755, %2785
  %2797 = lshr i64 %2796, 4
  %2798 = trunc i64 %2797 to i8
  %2799 = and i8 %2798, 1
  store i8 %2799, i8* %26, align 1
  %2800 = icmp eq i64 %2785, 0
  %2801 = zext i1 %2800 to i8
  store i8 %2801, i8* %29, align 1
  %2802 = lshr i64 %2785, 63
  %2803 = trunc i64 %2802 to i8
  store i8 %2803, i8* %32, align 1
  %2804 = lshr i64 %2783, 57
  %2805 = and i64 %2804, 1
  %2806 = xor i64 %2802, %2771
  %2807 = xor i64 %2802, %2805
  %2808 = add nuw nsw i64 %2806, %2807
  %2809 = icmp eq i64 %2808, 2
  %2810 = zext i1 %2809 to i8
  store i8 %2810, i8* %38, align 1
  %2811 = add i64 %2785, 4
  %2812 = load i32, i32* %EAX.i2800, align 4
  %2813 = add i64 %2727, 37
  store i64 %2813, i64* %3, align 8
  %2814 = inttoptr i64 %2811 to i32*
  store i32 %2812, i32* %2814, align 4
  %2815 = load i64, i64* %RBP.i, align 8
  %2816 = add i64 %2815, -52
  %2817 = load i64, i64* %3, align 8
  %2818 = add i64 %2817, 3
  store i64 %2818, i64* %3, align 8
  %2819 = inttoptr i64 %2816 to i32*
  %2820 = load i32, i32* %2819, align 4
  %2821 = zext i32 %2820 to i64
  store i64 %2821, i64* %RAX.i1161, align 8
  %2822 = add i64 %2815, -56
  %2823 = add i64 %2817, 6
  store i64 %2823, i64* %3, align 8
  %2824 = inttoptr i64 %2822 to i32*
  %2825 = load i32, i32* %2824, align 4
  %2826 = shl i32 %2825, 1
  %2827 = zext i32 %2826 to i64
  store i64 %2827, i64* %RSI.i2777, align 8
  %2828 = sub i32 %2820, %2826
  %2829 = zext i32 %2828 to i64
  store i64 %2829, i64* %RAX.i1161, align 8
  %2830 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %2831 = add i64 %2830, 13112
  store i64 %2831, i64* %RCX.i1519, align 8
  %2832 = icmp ugt i64 %2830, -13113
  %2833 = zext i1 %2832 to i8
  store i8 %2833, i8* %14, align 1
  %2834 = trunc i64 %2831 to i32
  %2835 = and i32 %2834, 255
  %2836 = tail call i32 @llvm.ctpop.i32(i32 %2835)
  %2837 = trunc i32 %2836 to i8
  %2838 = and i8 %2837, 1
  %2839 = xor i8 %2838, 1
  store i8 %2839, i8* %21, align 1
  %2840 = xor i64 %2830, 16
  %2841 = xor i64 %2840, %2831
  %2842 = lshr i64 %2841, 4
  %2843 = trunc i64 %2842 to i8
  %2844 = and i8 %2843, 1
  store i8 %2844, i8* %26, align 1
  %2845 = icmp eq i64 %2831, 0
  %2846 = zext i1 %2845 to i8
  store i8 %2846, i8* %29, align 1
  %2847 = lshr i64 %2831, 63
  %2848 = trunc i64 %2847 to i8
  store i8 %2848, i8* %32, align 1
  %2849 = lshr i64 %2830, 63
  %2850 = xor i64 %2847, %2849
  %2851 = add nuw nsw i64 %2850, %2847
  %2852 = icmp eq i64 %2851, 2
  %2853 = zext i1 %2852 to i8
  store i8 %2853, i8* %38, align 1
  %2854 = load i64, i64* %RBP.i, align 8
  %2855 = add i64 %2854, -20
  %2856 = add i64 %2817, 29
  store i64 %2856, i64* %3, align 8
  %2857 = inttoptr i64 %2855 to i32*
  %2858 = load i32, i32* %2857, align 4
  %2859 = sext i32 %2858 to i64
  %2860 = shl nsw i64 %2859, 6
  store i64 %2860, i64* %RDX.i1748, align 8
  %2861 = add i64 %2860, %2831
  store i64 %2861, i64* %RCX.i1519, align 8
  %2862 = icmp ult i64 %2861, %2831
  %2863 = icmp ult i64 %2861, %2860
  %2864 = or i1 %2862, %2863
  %2865 = zext i1 %2864 to i8
  store i8 %2865, i8* %14, align 1
  %2866 = trunc i64 %2861 to i32
  %2867 = and i32 %2866, 255
  %2868 = tail call i32 @llvm.ctpop.i32(i32 %2867)
  %2869 = trunc i32 %2868 to i8
  %2870 = and i8 %2869, 1
  %2871 = xor i8 %2870, 1
  store i8 %2871, i8* %21, align 1
  %2872 = xor i64 %2831, %2861
  %2873 = lshr i64 %2872, 4
  %2874 = trunc i64 %2873 to i8
  %2875 = and i8 %2874, 1
  store i8 %2875, i8* %26, align 1
  %2876 = icmp eq i64 %2861, 0
  %2877 = zext i1 %2876 to i8
  store i8 %2877, i8* %29, align 1
  %2878 = lshr i64 %2861, 63
  %2879 = trunc i64 %2878 to i8
  store i8 %2879, i8* %32, align 1
  %2880 = lshr i64 %2859, 57
  %2881 = and i64 %2880, 1
  %2882 = xor i64 %2878, %2847
  %2883 = xor i64 %2878, %2881
  %2884 = add nuw nsw i64 %2882, %2883
  %2885 = icmp eq i64 %2884, 2
  %2886 = zext i1 %2885 to i8
  store i8 %2886, i8* %38, align 1
  %2887 = add i64 %2861, 12
  %2888 = load i32, i32* %EAX.i2800, align 4
  %2889 = add i64 %2817, 39
  store i64 %2889, i64* %3, align 8
  %2890 = inttoptr i64 %2887 to i32*
  store i32 %2888, i32* %2890, align 4
  %2891 = load i64, i64* %RBP.i, align 8
  %2892 = add i64 %2891, -20
  %2893 = load i64, i64* %3, align 8
  %2894 = add i64 %2893, 3
  store i64 %2894, i64* %3, align 8
  %2895 = inttoptr i64 %2892 to i32*
  %2896 = load i32, i32* %2895, align 4
  %2897 = add i32 %2896, 1
  %2898 = zext i32 %2897 to i64
  store i64 %2898, i64* %RAX.i1161, align 8
  %2899 = icmp eq i32 %2896, -1
  %2900 = icmp eq i32 %2897, 0
  %2901 = or i1 %2899, %2900
  %2902 = zext i1 %2901 to i8
  store i8 %2902, i8* %14, align 1
  %2903 = and i32 %2897, 255
  %2904 = tail call i32 @llvm.ctpop.i32(i32 %2903)
  %2905 = trunc i32 %2904 to i8
  %2906 = and i8 %2905, 1
  %2907 = xor i8 %2906, 1
  store i8 %2907, i8* %21, align 1
  %2908 = xor i32 %2897, %2896
  %2909 = lshr i32 %2908, 4
  %2910 = trunc i32 %2909 to i8
  %2911 = and i8 %2910, 1
  store i8 %2911, i8* %26, align 1
  %2912 = zext i1 %2900 to i8
  store i8 %2912, i8* %29, align 1
  %2913 = lshr i32 %2897, 31
  %2914 = trunc i32 %2913 to i8
  store i8 %2914, i8* %32, align 1
  %2915 = lshr i32 %2896, 31
  %2916 = xor i32 %2913, %2915
  %2917 = add nuw nsw i32 %2916, %2913
  %2918 = icmp eq i32 %2917, 2
  %2919 = zext i1 %2918 to i8
  store i8 %2919, i8* %38, align 1
  %2920 = add i64 %2893, 9
  store i64 %2920, i64* %3, align 8
  store i32 %2897, i32* %2895, align 4
  %2921 = load i64, i64* %3, align 8
  %2922 = add i64 %2921, -356
  store i64 %2922, i64* %3, align 8
  br label %block_.L_40c24a

block_.L_40c3ba:                                  ; preds = %block_.L_40c3ba.preheader, %block_.L_40c456
  %2923 = phi i64 [ %3538, %block_.L_40c456 ], [ %.pre223, %block_.L_40c3ba.preheader ]
  %2924 = load i64, i64* %RBP.i, align 8
  %2925 = add i64 %2924, -24
  %2926 = add i64 %2923, 4
  store i64 %2926, i64* %3, align 8
  %2927 = inttoptr i64 %2925 to i32*
  %2928 = load i32, i32* %2927, align 4
  %2929 = add i32 %2928, -4
  %2930 = icmp ult i32 %2928, 4
  %2931 = zext i1 %2930 to i8
  store i8 %2931, i8* %14, align 1
  %2932 = and i32 %2929, 255
  %2933 = tail call i32 @llvm.ctpop.i32(i32 %2932)
  %2934 = trunc i32 %2933 to i8
  %2935 = and i8 %2934, 1
  %2936 = xor i8 %2935, 1
  store i8 %2936, i8* %21, align 1
  %2937 = xor i32 %2929, %2928
  %2938 = lshr i32 %2937, 4
  %2939 = trunc i32 %2938 to i8
  %2940 = and i8 %2939, 1
  store i8 %2940, i8* %26, align 1
  %2941 = icmp eq i32 %2929, 0
  %2942 = zext i1 %2941 to i8
  store i8 %2942, i8* %29, align 1
  %2943 = lshr i32 %2929, 31
  %2944 = trunc i32 %2943 to i8
  store i8 %2944, i8* %32, align 1
  %2945 = lshr i32 %2928, 31
  %2946 = xor i32 %2943, %2945
  %2947 = add nuw nsw i32 %2946, %2945
  %2948 = icmp eq i32 %2947, 2
  %2949 = zext i1 %2948 to i8
  store i8 %2949, i8* %38, align 1
  %2950 = icmp ne i8 %2944, 0
  %2951 = xor i1 %2950, %2948
  %.v227 = select i1 %2951, i64 10, i64 243
  %2952 = add i64 %2923, %.v227
  %2953 = add i64 %2924, -20
  %2954 = add i64 %2952, 7
  store i64 %2954, i64* %3, align 8
  %2955 = inttoptr i64 %2953 to i32*
  store i32 0, i32* %2955, align 4
  %.pre222 = load i64, i64* %3, align 8
  br i1 %2951, label %block_.L_40c3cb.preheader, label %block_.L_40c4b4.preheader

block_.L_40c3cb.preheader:                        ; preds = %block_.L_40c3ba
  br label %block_.L_40c3cb

block_.L_40c4b4.preheader:                        ; preds = %block_.L_40c3ba
  br label %block_.L_40c4b4

block_.L_40c3cb:                                  ; preds = %block_.L_40c3cb.preheader, %block_40c3d5
  %2956 = phi i64 [ %3300, %block_40c3d5 ], [ %.pre222, %block_.L_40c3cb.preheader ]
  %2957 = load i64, i64* %RBP.i, align 8
  %2958 = add i64 %2957, -20
  %2959 = add i64 %2956, 4
  store i64 %2959, i64* %3, align 8
  %2960 = inttoptr i64 %2958 to i32*
  %2961 = load i32, i32* %2960, align 4
  %2962 = add i32 %2961, -2
  %2963 = icmp ult i32 %2961, 2
  %2964 = zext i1 %2963 to i8
  store i8 %2964, i8* %14, align 1
  %2965 = and i32 %2962, 255
  %2966 = tail call i32 @llvm.ctpop.i32(i32 %2965)
  %2967 = trunc i32 %2966 to i8
  %2968 = and i8 %2967, 1
  %2969 = xor i8 %2968, 1
  store i8 %2969, i8* %21, align 1
  %2970 = xor i32 %2962, %2961
  %2971 = lshr i32 %2970, 4
  %2972 = trunc i32 %2971 to i8
  %2973 = and i8 %2972, 1
  store i8 %2973, i8* %26, align 1
  %2974 = icmp eq i32 %2962, 0
  %2975 = zext i1 %2974 to i8
  store i8 %2975, i8* %29, align 1
  %2976 = lshr i32 %2962, 31
  %2977 = trunc i32 %2976 to i8
  store i8 %2977, i8* %32, align 1
  %2978 = lshr i32 %2961, 31
  %2979 = xor i32 %2976, %2978
  %2980 = add nuw nsw i32 %2979, %2978
  %2981 = icmp eq i32 %2980, 2
  %2982 = zext i1 %2981 to i8
  store i8 %2982, i8* %38, align 1
  %2983 = icmp ne i8 %2977, 0
  %2984 = xor i1 %2983, %2981
  %.v258 = select i1 %2984, i64 10, i64 139
  %2985 = add i64 %2956, %.v258
  store i64 %2985, i64* %3, align 8
  br i1 %2984, label %block_40c3d5, label %block_.L_40c456

block_40c3d5:                                     ; preds = %block_.L_40c3cb
  %2986 = add i64 %2957, -176
  store i64 %2986, i64* %RAX.i1161, align 8
  store i64 3, i64* %RCX.i1519, align 8
  %2987 = add i64 %2985, 15
  store i64 %2987, i64* %3, align 8
  %2988 = load i32, i32* %2960, align 4
  %2989 = sub i32 3, %2988
  %2990 = zext i32 %2989 to i64
  store i64 %2990, i64* %RCX.i1519, align 8
  %2991 = icmp ugt i32 %2988, 3
  %2992 = zext i1 %2991 to i8
  store i8 %2992, i8* %14, align 1
  %2993 = and i32 %2989, 255
  %2994 = tail call i32 @llvm.ctpop.i32(i32 %2993)
  %2995 = trunc i32 %2994 to i8
  %2996 = and i8 %2995, 1
  %2997 = xor i8 %2996, 1
  store i8 %2997, i8* %21, align 1
  %2998 = xor i32 %2989, %2988
  %2999 = lshr i32 %2998, 4
  %3000 = trunc i32 %2999 to i8
  %3001 = and i8 %3000, 1
  store i8 %3001, i8* %26, align 1
  %3002 = icmp eq i32 %2989, 0
  %3003 = zext i1 %3002 to i8
  store i8 %3003, i8* %29, align 1
  %3004 = lshr i32 %2989, 31
  %3005 = trunc i32 %3004 to i8
  store i8 %3005, i8* %32, align 1
  %3006 = lshr i32 %2988, 31
  %3007 = add nuw nsw i32 %3004, %3006
  %3008 = icmp eq i32 %3007, 2
  %3009 = zext i1 %3008 to i8
  store i8 %3009, i8* %38, align 1
  %3010 = add i64 %2957, -28
  %3011 = add i64 %2985, 18
  store i64 %3011, i64* %3, align 8
  %3012 = inttoptr i64 %3010 to i32*
  store i32 %2989, i32* %3012, align 4
  %3013 = load i64, i64* %RBP.i, align 8
  %3014 = add i64 %3013, -20
  %3015 = load i64, i64* %3, align 8
  %3016 = add i64 %3015, 4
  store i64 %3016, i64* %3, align 8
  %3017 = inttoptr i64 %3014 to i32*
  %3018 = load i32, i32* %3017, align 4
  %3019 = sext i32 %3018 to i64
  %3020 = shl nsw i64 %3019, 4
  store i64 %3020, i64* %RDX.i1748, align 8
  %3021 = load i64, i64* %RAX.i1161, align 8
  %3022 = add i64 %3020, %3021
  store i64 %3022, i64* %RSI.i2777, align 8
  %3023 = icmp ult i64 %3022, %3021
  %3024 = icmp ult i64 %3022, %3020
  %3025 = or i1 %3023, %3024
  %3026 = zext i1 %3025 to i8
  store i8 %3026, i8* %14, align 1
  %3027 = trunc i64 %3022 to i32
  %3028 = and i32 %3027, 255
  %3029 = tail call i32 @llvm.ctpop.i32(i32 %3028)
  %3030 = trunc i32 %3029 to i8
  %3031 = and i8 %3030, 1
  %3032 = xor i8 %3031, 1
  store i8 %3032, i8* %21, align 1
  %3033 = xor i64 %3020, %3021
  %3034 = xor i64 %3033, %3022
  %3035 = lshr i64 %3034, 4
  %3036 = trunc i64 %3035 to i8
  %3037 = and i8 %3036, 1
  store i8 %3037, i8* %26, align 1
  %3038 = icmp eq i64 %3022, 0
  %3039 = zext i1 %3038 to i8
  store i8 %3039, i8* %29, align 1
  %3040 = lshr i64 %3022, 63
  %3041 = trunc i64 %3040 to i8
  store i8 %3041, i8* %32, align 1
  %3042 = lshr i64 %3021, 63
  %3043 = lshr i64 %3019, 59
  %3044 = and i64 %3043, 1
  %3045 = xor i64 %3040, %3042
  %3046 = xor i64 %3040, %3044
  %3047 = add nuw nsw i64 %3045, %3046
  %3048 = icmp eq i64 %3047, 2
  %3049 = zext i1 %3048 to i8
  store i8 %3049, i8* %38, align 1
  %3050 = add i64 %3013, -24
  %3051 = add i64 %3015, 18
  store i64 %3051, i64* %3, align 8
  %3052 = inttoptr i64 %3050 to i32*
  %3053 = load i32, i32* %3052, align 4
  %3054 = sext i32 %3053 to i64
  store i64 %3054, i64* %RDX.i1748, align 8
  %3055 = shl nsw i64 %3054, 2
  %3056 = add i64 %3055, %3022
  %3057 = add i64 %3015, 21
  store i64 %3057, i64* %3, align 8
  %3058 = inttoptr i64 %3056 to i32*
  %3059 = load i32, i32* %3058, align 4
  %3060 = zext i32 %3059 to i64
  store i64 %3060, i64* %RCX.i1519, align 8
  %3061 = add i64 %3013, -28
  %3062 = add i64 %3015, 25
  store i64 %3062, i64* %3, align 8
  %3063 = inttoptr i64 %3061 to i32*
  %3064 = load i32, i32* %3063, align 4
  %3065 = sext i32 %3064 to i64
  %3066 = shl nsw i64 %3065, 4
  store i64 %3066, i64* %RDX.i1748, align 8
  %3067 = add i64 %3066, %3021
  store i64 %3067, i64* %RSI.i2777, align 8
  %3068 = icmp ult i64 %3067, %3021
  %3069 = icmp ult i64 %3067, %3066
  %3070 = or i1 %3068, %3069
  %3071 = zext i1 %3070 to i8
  store i8 %3071, i8* %14, align 1
  %3072 = trunc i64 %3067 to i32
  %3073 = and i32 %3072, 255
  %3074 = tail call i32 @llvm.ctpop.i32(i32 %3073)
  %3075 = trunc i32 %3074 to i8
  %3076 = and i8 %3075, 1
  %3077 = xor i8 %3076, 1
  store i8 %3077, i8* %21, align 1
  %3078 = xor i64 %3066, %3021
  %3079 = xor i64 %3078, %3067
  %3080 = lshr i64 %3079, 4
  %3081 = trunc i64 %3080 to i8
  %3082 = and i8 %3081, 1
  store i8 %3082, i8* %26, align 1
  %3083 = icmp eq i64 %3067, 0
  %3084 = zext i1 %3083 to i8
  store i8 %3084, i8* %29, align 1
  %3085 = lshr i64 %3067, 63
  %3086 = trunc i64 %3085 to i8
  store i8 %3086, i8* %32, align 1
  %3087 = lshr i64 %3065, 59
  %3088 = and i64 %3087, 1
  %3089 = xor i64 %3085, %3042
  %3090 = xor i64 %3085, %3088
  %3091 = add nuw nsw i64 %3089, %3090
  %3092 = icmp eq i64 %3091, 2
  %3093 = zext i1 %3092 to i8
  store i8 %3093, i8* %38, align 1
  %3094 = load i64, i64* %RBP.i, align 8
  %3095 = add i64 %3094, -24
  %3096 = add i64 %3015, 39
  store i64 %3096, i64* %3, align 8
  %3097 = inttoptr i64 %3095 to i32*
  %3098 = load i32, i32* %3097, align 4
  %3099 = sext i32 %3098 to i64
  store i64 %3099, i64* %RDX.i1748, align 8
  %3100 = shl nsw i64 %3099, 2
  %3101 = add i64 %3067, %3100
  %3102 = add i64 %3015, 42
  store i64 %3102, i64* %3, align 8
  %3103 = inttoptr i64 %3101 to i32*
  %3104 = load i32, i32* %3103, align 4
  %3105 = add i32 %3104, %3059
  %3106 = zext i32 %3105 to i64
  store i64 %3106, i64* %RCX.i1519, align 8
  %3107 = icmp ult i32 %3105, %3059
  %3108 = icmp ult i32 %3105, %3104
  %3109 = or i1 %3107, %3108
  %3110 = zext i1 %3109 to i8
  store i8 %3110, i8* %14, align 1
  %3111 = and i32 %3105, 255
  %3112 = tail call i32 @llvm.ctpop.i32(i32 %3111)
  %3113 = trunc i32 %3112 to i8
  %3114 = and i8 %3113, 1
  %3115 = xor i8 %3114, 1
  store i8 %3115, i8* %21, align 1
  %3116 = xor i32 %3104, %3059
  %3117 = xor i32 %3116, %3105
  %3118 = lshr i32 %3117, 4
  %3119 = trunc i32 %3118 to i8
  %3120 = and i8 %3119, 1
  store i8 %3120, i8* %26, align 1
  %3121 = icmp eq i32 %3105, 0
  %3122 = zext i1 %3121 to i8
  store i8 %3122, i8* %29, align 1
  %3123 = lshr i32 %3105, 31
  %3124 = trunc i32 %3123 to i8
  store i8 %3124, i8* %32, align 1
  %3125 = lshr i32 %3059, 31
  %3126 = lshr i32 %3104, 31
  %3127 = xor i32 %3123, %3125
  %3128 = xor i32 %3123, %3126
  %3129 = add nuw nsw i32 %3127, %3128
  %3130 = icmp eq i32 %3129, 2
  %3131 = zext i1 %3130 to i8
  store i8 %3131, i8* %38, align 1
  %3132 = add i64 %3094, -20
  %3133 = add i64 %3015, 46
  store i64 %3133, i64* %3, align 8
  %3134 = inttoptr i64 %3132 to i32*
  %3135 = load i32, i32* %3134, align 4
  %3136 = sext i32 %3135 to i64
  store i64 %3136, i64* %RDX.i1748, align 8
  %3137 = shl nsw i64 %3136, 2
  %3138 = add i64 %3094, -64
  %3139 = add i64 %3138, %3137
  %3140 = add i64 %3015, 50
  store i64 %3140, i64* %3, align 8
  %3141 = inttoptr i64 %3139 to i32*
  store i32 %3105, i32* %3141, align 4
  %3142 = load i64, i64* %RBP.i, align 8
  %3143 = add i64 %3142, -20
  %3144 = load i64, i64* %3, align 8
  %3145 = add i64 %3144, 4
  store i64 %3145, i64* %3, align 8
  %3146 = inttoptr i64 %3143 to i32*
  %3147 = load i32, i32* %3146, align 4
  %3148 = sext i32 %3147 to i64
  %3149 = shl nsw i64 %3148, 4
  store i64 %3149, i64* %RDX.i1748, align 8
  %3150 = load i64, i64* %RAX.i1161, align 8
  %3151 = add i64 %3149, %3150
  store i64 %3151, i64* %RSI.i2777, align 8
  %3152 = icmp ult i64 %3151, %3150
  %3153 = icmp ult i64 %3151, %3149
  %3154 = or i1 %3152, %3153
  %3155 = zext i1 %3154 to i8
  store i8 %3155, i8* %14, align 1
  %3156 = trunc i64 %3151 to i32
  %3157 = and i32 %3156, 255
  %3158 = tail call i32 @llvm.ctpop.i32(i32 %3157)
  %3159 = trunc i32 %3158 to i8
  %3160 = and i8 %3159, 1
  %3161 = xor i8 %3160, 1
  store i8 %3161, i8* %21, align 1
  %3162 = xor i64 %3149, %3150
  %3163 = xor i64 %3162, %3151
  %3164 = lshr i64 %3163, 4
  %3165 = trunc i64 %3164 to i8
  %3166 = and i8 %3165, 1
  store i8 %3166, i8* %26, align 1
  %3167 = icmp eq i64 %3151, 0
  %3168 = zext i1 %3167 to i8
  store i8 %3168, i8* %29, align 1
  %3169 = lshr i64 %3151, 63
  %3170 = trunc i64 %3169 to i8
  store i8 %3170, i8* %32, align 1
  %3171 = lshr i64 %3150, 63
  %3172 = lshr i64 %3148, 59
  %3173 = and i64 %3172, 1
  %3174 = xor i64 %3169, %3171
  %3175 = xor i64 %3169, %3173
  %3176 = add nuw nsw i64 %3174, %3175
  %3177 = icmp eq i64 %3176, 2
  %3178 = zext i1 %3177 to i8
  store i8 %3178, i8* %38, align 1
  %3179 = add i64 %3142, -24
  %3180 = add i64 %3144, 18
  store i64 %3180, i64* %3, align 8
  %3181 = inttoptr i64 %3179 to i32*
  %3182 = load i32, i32* %3181, align 4
  %3183 = sext i32 %3182 to i64
  store i64 %3183, i64* %RDX.i1748, align 8
  %3184 = shl nsw i64 %3183, 2
  %3185 = add i64 %3184, %3151
  %3186 = add i64 %3144, 21
  store i64 %3186, i64* %3, align 8
  %3187 = inttoptr i64 %3185 to i32*
  %3188 = load i32, i32* %3187, align 4
  %3189 = zext i32 %3188 to i64
  store i64 %3189, i64* %RCX.i1519, align 8
  %3190 = add i64 %3142, -28
  %3191 = add i64 %3144, 25
  store i64 %3191, i64* %3, align 8
  %3192 = inttoptr i64 %3190 to i32*
  %3193 = load i32, i32* %3192, align 4
  %3194 = sext i32 %3193 to i64
  %3195 = shl nsw i64 %3194, 4
  store i64 %3195, i64* %RDX.i1748, align 8
  %3196 = add i64 %3195, %3150
  store i64 %3196, i64* %RAX.i1161, align 8
  %3197 = icmp ult i64 %3196, %3150
  %3198 = icmp ult i64 %3196, %3195
  %3199 = or i1 %3197, %3198
  %3200 = zext i1 %3199 to i8
  store i8 %3200, i8* %14, align 1
  %3201 = trunc i64 %3196 to i32
  %3202 = and i32 %3201, 255
  %3203 = tail call i32 @llvm.ctpop.i32(i32 %3202)
  %3204 = trunc i32 %3203 to i8
  %3205 = and i8 %3204, 1
  %3206 = xor i8 %3205, 1
  store i8 %3206, i8* %21, align 1
  %3207 = xor i64 %3195, %3150
  %3208 = xor i64 %3207, %3196
  %3209 = lshr i64 %3208, 4
  %3210 = trunc i64 %3209 to i8
  %3211 = and i8 %3210, 1
  store i8 %3211, i8* %26, align 1
  %3212 = icmp eq i64 %3196, 0
  %3213 = zext i1 %3212 to i8
  store i8 %3213, i8* %29, align 1
  %3214 = lshr i64 %3196, 63
  %3215 = trunc i64 %3214 to i8
  store i8 %3215, i8* %32, align 1
  %3216 = lshr i64 %3194, 59
  %3217 = and i64 %3216, 1
  %3218 = xor i64 %3214, %3171
  %3219 = xor i64 %3214, %3217
  %3220 = add nuw nsw i64 %3218, %3219
  %3221 = icmp eq i64 %3220, 2
  %3222 = zext i1 %3221 to i8
  store i8 %3222, i8* %38, align 1
  %3223 = load i64, i64* %RBP.i, align 8
  %3224 = add i64 %3223, -24
  %3225 = add i64 %3144, 36
  store i64 %3225, i64* %3, align 8
  %3226 = inttoptr i64 %3224 to i32*
  %3227 = load i32, i32* %3226, align 4
  %3228 = sext i32 %3227 to i64
  store i64 %3228, i64* %RDX.i1748, align 8
  %3229 = shl nsw i64 %3228, 2
  %3230 = add i64 %3196, %3229
  %3231 = add i64 %3144, 39
  store i64 %3231, i64* %3, align 8
  %3232 = inttoptr i64 %3230 to i32*
  %3233 = load i32, i32* %3232, align 4
  %3234 = sub i32 %3188, %3233
  %3235 = zext i32 %3234 to i64
  store i64 %3235, i64* %RCX.i1519, align 8
  %3236 = icmp ult i32 %3188, %3233
  %3237 = zext i1 %3236 to i8
  store i8 %3237, i8* %14, align 1
  %3238 = and i32 %3234, 255
  %3239 = tail call i32 @llvm.ctpop.i32(i32 %3238)
  %3240 = trunc i32 %3239 to i8
  %3241 = and i8 %3240, 1
  %3242 = xor i8 %3241, 1
  store i8 %3242, i8* %21, align 1
  %3243 = xor i32 %3233, %3188
  %3244 = xor i32 %3243, %3234
  %3245 = lshr i32 %3244, 4
  %3246 = trunc i32 %3245 to i8
  %3247 = and i8 %3246, 1
  store i8 %3247, i8* %26, align 1
  %3248 = icmp eq i32 %3234, 0
  %3249 = zext i1 %3248 to i8
  store i8 %3249, i8* %29, align 1
  %3250 = lshr i32 %3234, 31
  %3251 = trunc i32 %3250 to i8
  store i8 %3251, i8* %32, align 1
  %3252 = lshr i32 %3188, 31
  %3253 = lshr i32 %3233, 31
  %3254 = xor i32 %3253, %3252
  %3255 = xor i32 %3250, %3252
  %3256 = add nuw nsw i32 %3255, %3254
  %3257 = icmp eq i32 %3256, 2
  %3258 = zext i1 %3257 to i8
  store i8 %3258, i8* %38, align 1
  %3259 = add i64 %3223, -28
  %3260 = add i64 %3144, 43
  store i64 %3260, i64* %3, align 8
  %3261 = inttoptr i64 %3259 to i32*
  %3262 = load i32, i32* %3261, align 4
  %3263 = sext i32 %3262 to i64
  store i64 %3263, i64* %RAX.i1161, align 8
  %3264 = shl nsw i64 %3263, 2
  %3265 = add i64 %3223, -64
  %3266 = add i64 %3265, %3264
  %3267 = add i64 %3144, 47
  store i64 %3267, i64* %3, align 8
  %3268 = inttoptr i64 %3266 to i32*
  store i32 %3234, i32* %3268, align 4
  %3269 = load i64, i64* %RBP.i, align 8
  %3270 = add i64 %3269, -20
  %3271 = load i64, i64* %3, align 8
  %3272 = add i64 %3271, 3
  store i64 %3272, i64* %3, align 8
  %3273 = inttoptr i64 %3270 to i32*
  %3274 = load i32, i32* %3273, align 4
  %3275 = add i32 %3274, 1
  %3276 = zext i32 %3275 to i64
  store i64 %3276, i64* %RAX.i1161, align 8
  %3277 = icmp eq i32 %3274, -1
  %3278 = icmp eq i32 %3275, 0
  %3279 = or i1 %3277, %3278
  %3280 = zext i1 %3279 to i8
  store i8 %3280, i8* %14, align 1
  %3281 = and i32 %3275, 255
  %3282 = tail call i32 @llvm.ctpop.i32(i32 %3281)
  %3283 = trunc i32 %3282 to i8
  %3284 = and i8 %3283, 1
  %3285 = xor i8 %3284, 1
  store i8 %3285, i8* %21, align 1
  %3286 = xor i32 %3275, %3274
  %3287 = lshr i32 %3286, 4
  %3288 = trunc i32 %3287 to i8
  %3289 = and i8 %3288, 1
  store i8 %3289, i8* %26, align 1
  %3290 = zext i1 %3278 to i8
  store i8 %3290, i8* %29, align 1
  %3291 = lshr i32 %3275, 31
  %3292 = trunc i32 %3291 to i8
  store i8 %3292, i8* %32, align 1
  %3293 = lshr i32 %3274, 31
  %3294 = xor i32 %3291, %3293
  %3295 = add nuw nsw i32 %3294, %3291
  %3296 = icmp eq i32 %3295, 2
  %3297 = zext i1 %3296 to i8
  store i8 %3297, i8* %38, align 1
  %3298 = add i64 %3271, 9
  store i64 %3298, i64* %3, align 8
  store i32 %3275, i32* %3273, align 4
  %3299 = load i64, i64* %3, align 8
  %3300 = add i64 %3299, -134
  store i64 %3300, i64* %3, align 8
  br label %block_.L_40c3cb

block_.L_40c456:                                  ; preds = %block_.L_40c3cb
  %3301 = add i64 %2957, -64
  %3302 = add i64 %2985, 3
  store i64 %3302, i64* %3, align 8
  %3303 = inttoptr i64 %3301 to i32*
  %3304 = load i32, i32* %3303, align 4
  %3305 = zext i32 %3304 to i64
  store i64 %3305, i64* %RAX.i1161, align 8
  %3306 = add i64 %2957, -60
  %3307 = add i64 %2985, 6
  store i64 %3307, i64* %3, align 8
  %3308 = inttoptr i64 %3306 to i32*
  %3309 = load i32, i32* %3308, align 4
  %3310 = add i32 %3309, %3304
  %3311 = zext i32 %3310 to i64
  store i64 %3311, i64* %RAX.i1161, align 8
  %3312 = icmp ult i32 %3310, %3304
  %3313 = icmp ult i32 %3310, %3309
  %3314 = or i1 %3312, %3313
  %3315 = zext i1 %3314 to i8
  store i8 %3315, i8* %14, align 1
  %3316 = and i32 %3310, 255
  %3317 = tail call i32 @llvm.ctpop.i32(i32 %3316)
  %3318 = trunc i32 %3317 to i8
  %3319 = and i8 %3318, 1
  %3320 = xor i8 %3319, 1
  store i8 %3320, i8* %21, align 1
  %3321 = xor i32 %3309, %3304
  %3322 = xor i32 %3321, %3310
  %3323 = lshr i32 %3322, 4
  %3324 = trunc i32 %3323 to i8
  %3325 = and i8 %3324, 1
  store i8 %3325, i8* %26, align 1
  %3326 = icmp eq i32 %3310, 0
  %3327 = zext i1 %3326 to i8
  store i8 %3327, i8* %29, align 1
  %3328 = lshr i32 %3310, 31
  %3329 = trunc i32 %3328 to i8
  store i8 %3329, i8* %32, align 1
  %3330 = lshr i32 %3304, 31
  %3331 = lshr i32 %3309, 31
  %3332 = xor i32 %3328, %3330
  %3333 = xor i32 %3328, %3331
  %3334 = add nuw nsw i32 %3332, %3333
  %3335 = icmp eq i32 %3334, 2
  %3336 = zext i1 %3335 to i8
  store i8 %3336, i8* %38, align 1
  %3337 = add i64 %2957, -24
  %3338 = add i64 %2985, 10
  store i64 %3338, i64* %3, align 8
  %3339 = inttoptr i64 %3337 to i32*
  %3340 = load i32, i32* %3339, align 4
  %3341 = sext i32 %3340 to i64
  store i64 %3341, i64* %RCX.i1519, align 8
  %3342 = shl nsw i64 %3341, 2
  %3343 = add i64 %2957, -176
  %3344 = add i64 %3343, %3342
  %3345 = add i64 %2985, 17
  store i64 %3345, i64* %3, align 8
  %3346 = inttoptr i64 %3344 to i32*
  store i32 %3310, i32* %3346, align 4
  %3347 = load i64, i64* %RBP.i, align 8
  %3348 = add i64 %3347, -64
  %3349 = load i64, i64* %3, align 8
  %3350 = add i64 %3349, 3
  store i64 %3350, i64* %3, align 8
  %3351 = inttoptr i64 %3348 to i32*
  %3352 = load i32, i32* %3351, align 4
  %3353 = zext i32 %3352 to i64
  store i64 %3353, i64* %RAX.i1161, align 8
  %3354 = add i64 %3347, -60
  %3355 = add i64 %3349, 6
  store i64 %3355, i64* %3, align 8
  %3356 = inttoptr i64 %3354 to i32*
  %3357 = load i32, i32* %3356, align 4
  %3358 = sub i32 %3352, %3357
  %3359 = zext i32 %3358 to i64
  store i64 %3359, i64* %RAX.i1161, align 8
  %3360 = icmp ult i32 %3352, %3357
  %3361 = zext i1 %3360 to i8
  store i8 %3361, i8* %14, align 1
  %3362 = and i32 %3358, 255
  %3363 = tail call i32 @llvm.ctpop.i32(i32 %3362)
  %3364 = trunc i32 %3363 to i8
  %3365 = and i8 %3364, 1
  %3366 = xor i8 %3365, 1
  store i8 %3366, i8* %21, align 1
  %3367 = xor i32 %3357, %3352
  %3368 = xor i32 %3367, %3358
  %3369 = lshr i32 %3368, 4
  %3370 = trunc i32 %3369 to i8
  %3371 = and i8 %3370, 1
  store i8 %3371, i8* %26, align 1
  %3372 = icmp eq i32 %3358, 0
  %3373 = zext i1 %3372 to i8
  store i8 %3373, i8* %29, align 1
  %3374 = lshr i32 %3358, 31
  %3375 = trunc i32 %3374 to i8
  store i8 %3375, i8* %32, align 1
  %3376 = lshr i32 %3352, 31
  %3377 = lshr i32 %3357, 31
  %3378 = xor i32 %3377, %3376
  %3379 = xor i32 %3374, %3376
  %3380 = add nuw nsw i32 %3379, %3378
  %3381 = icmp eq i32 %3380, 2
  %3382 = zext i1 %3381 to i8
  store i8 %3382, i8* %38, align 1
  %3383 = add i64 %3347, -24
  %3384 = add i64 %3349, 10
  store i64 %3384, i64* %3, align 8
  %3385 = inttoptr i64 %3383 to i32*
  %3386 = load i32, i32* %3385, align 4
  %3387 = sext i32 %3386 to i64
  store i64 %3387, i64* %RCX.i1519, align 8
  %3388 = shl nsw i64 %3387, 2
  %3389 = add i64 %3347, -144
  %3390 = add i64 %3389, %3388
  %3391 = add i64 %3349, 17
  store i64 %3391, i64* %3, align 8
  %3392 = inttoptr i64 %3390 to i32*
  store i32 %3358, i32* %3392, align 4
  %3393 = load i64, i64* %RBP.i, align 8
  %3394 = add i64 %3393, -52
  %3395 = load i64, i64* %3, align 8
  %3396 = add i64 %3395, 3
  store i64 %3396, i64* %3, align 8
  %3397 = inttoptr i64 %3394 to i32*
  %3398 = load i32, i32* %3397, align 4
  %3399 = shl i32 %3398, 1
  %3400 = icmp slt i32 %3398, 0
  %3401 = icmp slt i32 %3399, 0
  %3402 = xor i1 %3400, %3401
  %3403 = zext i32 %3399 to i64
  store i64 %3403, i64* %RAX.i1161, align 8
  %.lobit66 = lshr i32 %3398, 31
  %3404 = trunc i32 %.lobit66 to i8
  store i8 %3404, i8* %14, align 1
  %3405 = and i32 %3399, 254
  %3406 = tail call i32 @llvm.ctpop.i32(i32 %3405)
  %3407 = trunc i32 %3406 to i8
  %3408 = and i8 %3407, 1
  %3409 = xor i8 %3408, 1
  store i8 %3409, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %3410 = icmp eq i32 %3399, 0
  %3411 = zext i1 %3410 to i8
  store i8 %3411, i8* %29, align 1
  %3412 = lshr i32 %3398, 30
  %3413 = trunc i32 %3412 to i8
  %3414 = and i8 %3413, 1
  store i8 %3414, i8* %32, align 1
  %3415 = zext i1 %3402 to i8
  store i8 %3415, i8* %38, align 1
  %3416 = add i64 %3393, -56
  %3417 = add i64 %3395, 8
  store i64 %3417, i64* %3, align 8
  %3418 = inttoptr i64 %3416 to i32*
  %3419 = load i32, i32* %3418, align 4
  %3420 = add i32 %3419, %3399
  %3421 = zext i32 %3420 to i64
  store i64 %3421, i64* %RAX.i1161, align 8
  %3422 = icmp ult i32 %3420, %3399
  %3423 = icmp ult i32 %3420, %3419
  %3424 = or i1 %3422, %3423
  %3425 = zext i1 %3424 to i8
  store i8 %3425, i8* %14, align 1
  %3426 = and i32 %3420, 255
  %3427 = tail call i32 @llvm.ctpop.i32(i32 %3426)
  %3428 = trunc i32 %3427 to i8
  %3429 = and i8 %3428, 1
  %3430 = xor i8 %3429, 1
  store i8 %3430, i8* %21, align 1
  %3431 = xor i32 %3419, %3399
  %3432 = xor i32 %3431, %3420
  %3433 = lshr i32 %3432, 4
  %3434 = trunc i32 %3433 to i8
  %3435 = and i8 %3434, 1
  store i8 %3435, i8* %26, align 1
  %3436 = icmp eq i32 %3420, 0
  %3437 = zext i1 %3436 to i8
  store i8 %3437, i8* %29, align 1
  %3438 = lshr i32 %3420, 31
  %3439 = trunc i32 %3438 to i8
  store i8 %3439, i8* %32, align 1
  %3440 = lshr i32 %3398, 30
  %3441 = and i32 %3440, 1
  %3442 = lshr i32 %3419, 31
  %3443 = xor i32 %3438, %3441
  %3444 = xor i32 %3438, %3442
  %3445 = add nuw nsw i32 %3443, %3444
  %3446 = icmp eq i32 %3445, 2
  %3447 = zext i1 %3446 to i8
  store i8 %3447, i8* %38, align 1
  %3448 = add i64 %3393, -24
  %3449 = add i64 %3395, 12
  store i64 %3449, i64* %3, align 8
  %3450 = inttoptr i64 %3448 to i32*
  %3451 = load i32, i32* %3450, align 4
  %3452 = sext i32 %3451 to i64
  store i64 %3452, i64* %RCX.i1519, align 8
  %3453 = shl nsw i64 %3452, 2
  %3454 = add i64 %3393, -160
  %3455 = add i64 %3454, %3453
  %3456 = add i64 %3395, 19
  store i64 %3456, i64* %3, align 8
  %3457 = inttoptr i64 %3455 to i32*
  store i32 %3420, i32* %3457, align 4
  %3458 = load i64, i64* %RBP.i, align 8
  %3459 = add i64 %3458, -52
  %3460 = load i64, i64* %3, align 8
  %3461 = add i64 %3460, 3
  store i64 %3461, i64* %3, align 8
  %3462 = inttoptr i64 %3459 to i32*
  %3463 = load i32, i32* %3462, align 4
  %3464 = zext i32 %3463 to i64
  store i64 %3464, i64* %RAX.i1161, align 8
  %3465 = add i64 %3458, -56
  %3466 = add i64 %3460, 6
  store i64 %3466, i64* %3, align 8
  %3467 = inttoptr i64 %3465 to i32*
  %3468 = load i32, i32* %3467, align 4
  %3469 = shl i32 %3468, 1
  %3470 = zext i32 %3469 to i64
  store i64 %3470, i64* %RDX.i1748, align 8
  %3471 = sub i32 %3463, %3469
  %3472 = zext i32 %3471 to i64
  store i64 %3472, i64* %RAX.i1161, align 8
  %3473 = icmp ult i32 %3463, %3469
  %3474 = zext i1 %3473 to i8
  store i8 %3474, i8* %14, align 1
  %3475 = and i32 %3471, 255
  %3476 = tail call i32 @llvm.ctpop.i32(i32 %3475)
  %3477 = trunc i32 %3476 to i8
  %3478 = and i8 %3477, 1
  %3479 = xor i8 %3478, 1
  store i8 %3479, i8* %21, align 1
  %3480 = xor i32 %3469, %3463
  %3481 = xor i32 %3480, %3471
  %3482 = lshr i32 %3481, 4
  %3483 = trunc i32 %3482 to i8
  %3484 = and i8 %3483, 1
  store i8 %3484, i8* %26, align 1
  %3485 = icmp eq i32 %3471, 0
  %3486 = zext i1 %3485 to i8
  store i8 %3486, i8* %29, align 1
  %3487 = lshr i32 %3471, 31
  %3488 = trunc i32 %3487 to i8
  store i8 %3488, i8* %32, align 1
  %3489 = lshr i32 %3463, 31
  %3490 = lshr i32 %3468, 30
  %3491 = and i32 %3490, 1
  %3492 = xor i32 %3491, %3489
  %3493 = xor i32 %3487, %3489
  %3494 = add nuw nsw i32 %3493, %3492
  %3495 = icmp eq i32 %3494, 2
  %3496 = zext i1 %3495 to i8
  store i8 %3496, i8* %38, align 1
  %3497 = add i64 %3458, -24
  %3498 = add i64 %3460, 14
  store i64 %3498, i64* %3, align 8
  %3499 = inttoptr i64 %3497 to i32*
  %3500 = load i32, i32* %3499, align 4
  %3501 = sext i32 %3500 to i64
  store i64 %3501, i64* %RCX.i1519, align 8
  %3502 = shl nsw i64 %3501, 2
  %3503 = add i64 %3458, -128
  %3504 = add i64 %3503, %3502
  %3505 = add i64 %3460, 18
  store i64 %3505, i64* %3, align 8
  %3506 = inttoptr i64 %3504 to i32*
  store i32 %3471, i32* %3506, align 4
  %3507 = load i64, i64* %RBP.i, align 8
  %3508 = add i64 %3507, -24
  %3509 = load i64, i64* %3, align 8
  %3510 = add i64 %3509, 3
  store i64 %3510, i64* %3, align 8
  %3511 = inttoptr i64 %3508 to i32*
  %3512 = load i32, i32* %3511, align 4
  %3513 = add i32 %3512, 1
  %3514 = zext i32 %3513 to i64
  store i64 %3514, i64* %RAX.i1161, align 8
  %3515 = icmp eq i32 %3512, -1
  %3516 = icmp eq i32 %3513, 0
  %3517 = or i1 %3515, %3516
  %3518 = zext i1 %3517 to i8
  store i8 %3518, i8* %14, align 1
  %3519 = and i32 %3513, 255
  %3520 = tail call i32 @llvm.ctpop.i32(i32 %3519)
  %3521 = trunc i32 %3520 to i8
  %3522 = and i8 %3521, 1
  %3523 = xor i8 %3522, 1
  store i8 %3523, i8* %21, align 1
  %3524 = xor i32 %3513, %3512
  %3525 = lshr i32 %3524, 4
  %3526 = trunc i32 %3525 to i8
  %3527 = and i8 %3526, 1
  store i8 %3527, i8* %26, align 1
  %3528 = zext i1 %3516 to i8
  store i8 %3528, i8* %29, align 1
  %3529 = lshr i32 %3513, 31
  %3530 = trunc i32 %3529 to i8
  store i8 %3530, i8* %32, align 1
  %3531 = lshr i32 %3512, 31
  %3532 = xor i32 %3529, %3531
  %3533 = add nuw nsw i32 %3532, %3529
  %3534 = icmp eq i32 %3533, 2
  %3535 = zext i1 %3534 to i8
  store i8 %3535, i8* %38, align 1
  %3536 = add i64 %3509, 9
  store i64 %3536, i64* %3, align 8
  store i32 %3513, i32* %3511, align 4
  %3537 = load i64, i64* %3, align 8
  %3538 = add i64 %3537, -238
  store i64 %3538, i64* %3, align 8
  br label %block_.L_40c3ba

block_.L_40c4b4:                                  ; preds = %block_.L_40c4b4.preheader, %block_.L_40c550
  %3539 = phi i64 [ %4262, %block_.L_40c550 ], [ %.pre222, %block_.L_40c4b4.preheader ]
  %3540 = load i64, i64* %RBP.i, align 8
  %3541 = add i64 %3540, -20
  %3542 = add i64 %3539, 4
  store i64 %3542, i64* %3, align 8
  %3543 = inttoptr i64 %3541 to i32*
  %3544 = load i32, i32* %3543, align 4
  %3545 = add i32 %3544, -4
  %3546 = icmp ult i32 %3544, 4
  %3547 = zext i1 %3546 to i8
  store i8 %3547, i8* %14, align 1
  %3548 = and i32 %3545, 255
  %3549 = tail call i32 @llvm.ctpop.i32(i32 %3548)
  %3550 = trunc i32 %3549 to i8
  %3551 = and i8 %3550, 1
  %3552 = xor i8 %3551, 1
  store i8 %3552, i8* %21, align 1
  %3553 = xor i32 %3545, %3544
  %3554 = lshr i32 %3553, 4
  %3555 = trunc i32 %3554 to i8
  %3556 = and i8 %3555, 1
  store i8 %3556, i8* %26, align 1
  %3557 = icmp eq i32 %3545, 0
  %3558 = zext i1 %3557 to i8
  store i8 %3558, i8* %29, align 1
  %3559 = lshr i32 %3545, 31
  %3560 = trunc i32 %3559 to i8
  store i8 %3560, i8* %32, align 1
  %3561 = lshr i32 %3544, 31
  %3562 = xor i32 %3559, %3561
  %3563 = add nuw nsw i32 %3562, %3561
  %3564 = icmp eq i32 %3563, 2
  %3565 = zext i1 %3564 to i8
  store i8 %3565, i8* %38, align 1
  %3566 = icmp ne i8 %3560, 0
  %3567 = xor i1 %3566, %3564
  %.v235 = select i1 %3567, i64 10, i64 273
  %3568 = add i64 %3539, %.v235
  store i64 %3568, i64* %3, align 8
  br i1 %3567, label %block_40c4be, label %block_.L_40c5c5

block_40c4be:                                     ; preds = %block_.L_40c4b4
  %3569 = add i64 %3540, -24
  %3570 = add i64 %3568, 7
  store i64 %3570, i64* %3, align 8
  %3571 = inttoptr i64 %3569 to i32*
  store i32 0, i32* %3571, align 4
  %.pre221 = load i64, i64* %3, align 8
  br label %block_.L_40c4c5

block_.L_40c4c5:                                  ; preds = %block_40c4cf, %block_40c4be
  %3572 = phi i64 [ %3911, %block_40c4cf ], [ %.pre221, %block_40c4be ]
  %3573 = load i64, i64* %RBP.i, align 8
  %3574 = add i64 %3573, -24
  %3575 = add i64 %3572, 4
  store i64 %3575, i64* %3, align 8
  %3576 = inttoptr i64 %3574 to i32*
  %3577 = load i32, i32* %3576, align 4
  %3578 = add i32 %3577, -2
  %3579 = icmp ult i32 %3577, 2
  %3580 = zext i1 %3579 to i8
  store i8 %3580, i8* %14, align 1
  %3581 = and i32 %3578, 255
  %3582 = tail call i32 @llvm.ctpop.i32(i32 %3581)
  %3583 = trunc i32 %3582 to i8
  %3584 = and i8 %3583, 1
  %3585 = xor i8 %3584, 1
  store i8 %3585, i8* %21, align 1
  %3586 = xor i32 %3578, %3577
  %3587 = lshr i32 %3586, 4
  %3588 = trunc i32 %3587 to i8
  %3589 = and i8 %3588, 1
  store i8 %3589, i8* %26, align 1
  %3590 = icmp eq i32 %3578, 0
  %3591 = zext i1 %3590 to i8
  store i8 %3591, i8* %29, align 1
  %3592 = lshr i32 %3578, 31
  %3593 = trunc i32 %3592 to i8
  store i8 %3593, i8* %32, align 1
  %3594 = lshr i32 %3577, 31
  %3595 = xor i32 %3592, %3594
  %3596 = add nuw nsw i32 %3595, %3594
  %3597 = icmp eq i32 %3596, 2
  %3598 = zext i1 %3597 to i8
  store i8 %3598, i8* %38, align 1
  %3599 = icmp ne i8 %3593, 0
  %3600 = xor i1 %3599, %3597
  %.v232 = select i1 %3600, i64 10, i64 139
  %3601 = add i64 %3572, %.v232
  %3602 = add i64 %3573, -176
  %3603 = add i64 %3601, 7
  store i64 %3603, i64* %3, align 8
  store i64 %3602, i64* %RAX.i1161, align 8
  br i1 %3600, label %block_40c4cf, label %block_.L_40c550

block_40c4cf:                                     ; preds = %block_.L_40c4c5
  store i64 3, i64* %RCX.i1519, align 8
  %3604 = add i64 %3601, 15
  store i64 %3604, i64* %3, align 8
  %3605 = load i32, i32* %3576, align 4
  %3606 = sub i32 3, %3605
  %3607 = zext i32 %3606 to i64
  store i64 %3607, i64* %RCX.i1519, align 8
  %3608 = icmp ugt i32 %3605, 3
  %3609 = zext i1 %3608 to i8
  store i8 %3609, i8* %14, align 1
  %3610 = and i32 %3606, 255
  %3611 = tail call i32 @llvm.ctpop.i32(i32 %3610)
  %3612 = trunc i32 %3611 to i8
  %3613 = and i8 %3612, 1
  %3614 = xor i8 %3613, 1
  store i8 %3614, i8* %21, align 1
  %3615 = xor i32 %3606, %3605
  %3616 = lshr i32 %3615, 4
  %3617 = trunc i32 %3616 to i8
  %3618 = and i8 %3617, 1
  store i8 %3618, i8* %26, align 1
  %3619 = icmp eq i32 %3606, 0
  %3620 = zext i1 %3619 to i8
  store i8 %3620, i8* %29, align 1
  %3621 = lshr i32 %3606, 31
  %3622 = trunc i32 %3621 to i8
  store i8 %3622, i8* %32, align 1
  %3623 = lshr i32 %3605, 31
  %3624 = add nuw nsw i32 %3621, %3623
  %3625 = icmp eq i32 %3624, 2
  %3626 = zext i1 %3625 to i8
  store i8 %3626, i8* %38, align 1
  %3627 = add i64 %3573, -32
  %3628 = add i64 %3601, 18
  store i64 %3628, i64* %3, align 8
  %3629 = inttoptr i64 %3627 to i32*
  store i32 %3606, i32* %3629, align 4
  %3630 = load i64, i64* %RBP.i, align 8
  %3631 = add i64 %3630, -20
  %3632 = load i64, i64* %3, align 8
  %3633 = add i64 %3632, 4
  store i64 %3633, i64* %3, align 8
  %3634 = inttoptr i64 %3631 to i32*
  %3635 = load i32, i32* %3634, align 4
  %3636 = sext i32 %3635 to i64
  %3637 = shl nsw i64 %3636, 4
  store i64 %3637, i64* %RDX.i1748, align 8
  %3638 = load i64, i64* %RAX.i1161, align 8
  %3639 = add i64 %3637, %3638
  store i64 %3639, i64* %RSI.i2777, align 8
  %3640 = icmp ult i64 %3639, %3638
  %3641 = icmp ult i64 %3639, %3637
  %3642 = or i1 %3640, %3641
  %3643 = zext i1 %3642 to i8
  store i8 %3643, i8* %14, align 1
  %3644 = trunc i64 %3639 to i32
  %3645 = and i32 %3644, 255
  %3646 = tail call i32 @llvm.ctpop.i32(i32 %3645)
  %3647 = trunc i32 %3646 to i8
  %3648 = and i8 %3647, 1
  %3649 = xor i8 %3648, 1
  store i8 %3649, i8* %21, align 1
  %3650 = xor i64 %3637, %3638
  %3651 = xor i64 %3650, %3639
  %3652 = lshr i64 %3651, 4
  %3653 = trunc i64 %3652 to i8
  %3654 = and i8 %3653, 1
  store i8 %3654, i8* %26, align 1
  %3655 = icmp eq i64 %3639, 0
  %3656 = zext i1 %3655 to i8
  store i8 %3656, i8* %29, align 1
  %3657 = lshr i64 %3639, 63
  %3658 = trunc i64 %3657 to i8
  store i8 %3658, i8* %32, align 1
  %3659 = lshr i64 %3638, 63
  %3660 = lshr i64 %3636, 59
  %3661 = and i64 %3660, 1
  %3662 = xor i64 %3657, %3659
  %3663 = xor i64 %3657, %3661
  %3664 = add nuw nsw i64 %3662, %3663
  %3665 = icmp eq i64 %3664, 2
  %3666 = zext i1 %3665 to i8
  store i8 %3666, i8* %38, align 1
  %3667 = add i64 %3630, -24
  %3668 = add i64 %3632, 18
  store i64 %3668, i64* %3, align 8
  %3669 = inttoptr i64 %3667 to i32*
  %3670 = load i32, i32* %3669, align 4
  %3671 = sext i32 %3670 to i64
  store i64 %3671, i64* %RDX.i1748, align 8
  %3672 = shl nsw i64 %3671, 2
  %3673 = add i64 %3672, %3639
  %3674 = add i64 %3632, 21
  store i64 %3674, i64* %3, align 8
  %3675 = inttoptr i64 %3673 to i32*
  %3676 = load i32, i32* %3675, align 4
  %3677 = zext i32 %3676 to i64
  store i64 %3677, i64* %RCX.i1519, align 8
  %3678 = add i64 %3632, 25
  store i64 %3678, i64* %3, align 8
  %3679 = load i32, i32* %3634, align 4
  %3680 = sext i32 %3679 to i64
  %3681 = shl nsw i64 %3680, 4
  store i64 %3681, i64* %RDX.i1748, align 8
  %3682 = add i64 %3681, %3638
  store i64 %3682, i64* %RSI.i2777, align 8
  %3683 = icmp ult i64 %3682, %3638
  %3684 = icmp ult i64 %3682, %3681
  %3685 = or i1 %3683, %3684
  %3686 = zext i1 %3685 to i8
  store i8 %3686, i8* %14, align 1
  %3687 = trunc i64 %3682 to i32
  %3688 = and i32 %3687, 255
  %3689 = tail call i32 @llvm.ctpop.i32(i32 %3688)
  %3690 = trunc i32 %3689 to i8
  %3691 = and i8 %3690, 1
  %3692 = xor i8 %3691, 1
  store i8 %3692, i8* %21, align 1
  %3693 = xor i64 %3681, %3638
  %3694 = xor i64 %3693, %3682
  %3695 = lshr i64 %3694, 4
  %3696 = trunc i64 %3695 to i8
  %3697 = and i8 %3696, 1
  store i8 %3697, i8* %26, align 1
  %3698 = icmp eq i64 %3682, 0
  %3699 = zext i1 %3698 to i8
  store i8 %3699, i8* %29, align 1
  %3700 = lshr i64 %3682, 63
  %3701 = trunc i64 %3700 to i8
  store i8 %3701, i8* %32, align 1
  %3702 = lshr i64 %3680, 59
  %3703 = and i64 %3702, 1
  %3704 = xor i64 %3700, %3659
  %3705 = xor i64 %3700, %3703
  %3706 = add nuw nsw i64 %3704, %3705
  %3707 = icmp eq i64 %3706, 2
  %3708 = zext i1 %3707 to i8
  store i8 %3708, i8* %38, align 1
  %3709 = load i64, i64* %RBP.i, align 8
  %3710 = add i64 %3709, -32
  %3711 = add i64 %3632, 39
  store i64 %3711, i64* %3, align 8
  %3712 = inttoptr i64 %3710 to i32*
  %3713 = load i32, i32* %3712, align 4
  %3714 = sext i32 %3713 to i64
  store i64 %3714, i64* %RDX.i1748, align 8
  %3715 = shl nsw i64 %3714, 2
  %3716 = add i64 %3682, %3715
  %3717 = add i64 %3632, 42
  store i64 %3717, i64* %3, align 8
  %3718 = inttoptr i64 %3716 to i32*
  %3719 = load i32, i32* %3718, align 4
  %3720 = add i32 %3719, %3676
  %3721 = zext i32 %3720 to i64
  store i64 %3721, i64* %RCX.i1519, align 8
  %3722 = icmp ult i32 %3720, %3676
  %3723 = icmp ult i32 %3720, %3719
  %3724 = or i1 %3722, %3723
  %3725 = zext i1 %3724 to i8
  store i8 %3725, i8* %14, align 1
  %3726 = and i32 %3720, 255
  %3727 = tail call i32 @llvm.ctpop.i32(i32 %3726)
  %3728 = trunc i32 %3727 to i8
  %3729 = and i8 %3728, 1
  %3730 = xor i8 %3729, 1
  store i8 %3730, i8* %21, align 1
  %3731 = xor i32 %3719, %3676
  %3732 = xor i32 %3731, %3720
  %3733 = lshr i32 %3732, 4
  %3734 = trunc i32 %3733 to i8
  %3735 = and i8 %3734, 1
  store i8 %3735, i8* %26, align 1
  %3736 = icmp eq i32 %3720, 0
  %3737 = zext i1 %3736 to i8
  store i8 %3737, i8* %29, align 1
  %3738 = lshr i32 %3720, 31
  %3739 = trunc i32 %3738 to i8
  store i8 %3739, i8* %32, align 1
  %3740 = lshr i32 %3676, 31
  %3741 = lshr i32 %3719, 31
  %3742 = xor i32 %3738, %3740
  %3743 = xor i32 %3738, %3741
  %3744 = add nuw nsw i32 %3742, %3743
  %3745 = icmp eq i32 %3744, 2
  %3746 = zext i1 %3745 to i8
  store i8 %3746, i8* %38, align 1
  %3747 = add i64 %3709, -24
  %3748 = add i64 %3632, 46
  store i64 %3748, i64* %3, align 8
  %3749 = inttoptr i64 %3747 to i32*
  %3750 = load i32, i32* %3749, align 4
  %3751 = sext i32 %3750 to i64
  store i64 %3751, i64* %RDX.i1748, align 8
  %3752 = shl nsw i64 %3751, 2
  %3753 = add i64 %3709, -64
  %3754 = add i64 %3753, %3752
  %3755 = add i64 %3632, 50
  store i64 %3755, i64* %3, align 8
  %3756 = inttoptr i64 %3754 to i32*
  store i32 %3720, i32* %3756, align 4
  %3757 = load i64, i64* %RBP.i, align 8
  %3758 = add i64 %3757, -20
  %3759 = load i64, i64* %3, align 8
  %3760 = add i64 %3759, 4
  store i64 %3760, i64* %3, align 8
  %3761 = inttoptr i64 %3758 to i32*
  %3762 = load i32, i32* %3761, align 4
  %3763 = sext i32 %3762 to i64
  %3764 = shl nsw i64 %3763, 4
  store i64 %3764, i64* %RDX.i1748, align 8
  %3765 = load i64, i64* %RAX.i1161, align 8
  %3766 = add i64 %3764, %3765
  store i64 %3766, i64* %RSI.i2777, align 8
  %3767 = icmp ult i64 %3766, %3765
  %3768 = icmp ult i64 %3766, %3764
  %3769 = or i1 %3767, %3768
  %3770 = zext i1 %3769 to i8
  store i8 %3770, i8* %14, align 1
  %3771 = trunc i64 %3766 to i32
  %3772 = and i32 %3771, 255
  %3773 = tail call i32 @llvm.ctpop.i32(i32 %3772)
  %3774 = trunc i32 %3773 to i8
  %3775 = and i8 %3774, 1
  %3776 = xor i8 %3775, 1
  store i8 %3776, i8* %21, align 1
  %3777 = xor i64 %3764, %3765
  %3778 = xor i64 %3777, %3766
  %3779 = lshr i64 %3778, 4
  %3780 = trunc i64 %3779 to i8
  %3781 = and i8 %3780, 1
  store i8 %3781, i8* %26, align 1
  %3782 = icmp eq i64 %3766, 0
  %3783 = zext i1 %3782 to i8
  store i8 %3783, i8* %29, align 1
  %3784 = lshr i64 %3766, 63
  %3785 = trunc i64 %3784 to i8
  store i8 %3785, i8* %32, align 1
  %3786 = lshr i64 %3765, 63
  %3787 = lshr i64 %3763, 59
  %3788 = and i64 %3787, 1
  %3789 = xor i64 %3784, %3786
  %3790 = xor i64 %3784, %3788
  %3791 = add nuw nsw i64 %3789, %3790
  %3792 = icmp eq i64 %3791, 2
  %3793 = zext i1 %3792 to i8
  store i8 %3793, i8* %38, align 1
  %3794 = add i64 %3757, -24
  %3795 = add i64 %3759, 18
  store i64 %3795, i64* %3, align 8
  %3796 = inttoptr i64 %3794 to i32*
  %3797 = load i32, i32* %3796, align 4
  %3798 = sext i32 %3797 to i64
  store i64 %3798, i64* %RDX.i1748, align 8
  %3799 = shl nsw i64 %3798, 2
  %3800 = add i64 %3799, %3766
  %3801 = add i64 %3759, 21
  store i64 %3801, i64* %3, align 8
  %3802 = inttoptr i64 %3800 to i32*
  %3803 = load i32, i32* %3802, align 4
  %3804 = zext i32 %3803 to i64
  store i64 %3804, i64* %RCX.i1519, align 8
  %3805 = add i64 %3759, 25
  store i64 %3805, i64* %3, align 8
  %3806 = load i32, i32* %3761, align 4
  %3807 = sext i32 %3806 to i64
  %3808 = shl nsw i64 %3807, 4
  store i64 %3808, i64* %RDX.i1748, align 8
  %3809 = add i64 %3808, %3765
  store i64 %3809, i64* %RAX.i1161, align 8
  %3810 = icmp ult i64 %3809, %3765
  %3811 = icmp ult i64 %3809, %3808
  %3812 = or i1 %3810, %3811
  %3813 = zext i1 %3812 to i8
  store i8 %3813, i8* %14, align 1
  %3814 = trunc i64 %3809 to i32
  %3815 = and i32 %3814, 255
  %3816 = tail call i32 @llvm.ctpop.i32(i32 %3815)
  %3817 = trunc i32 %3816 to i8
  %3818 = and i8 %3817, 1
  %3819 = xor i8 %3818, 1
  store i8 %3819, i8* %21, align 1
  %3820 = xor i64 %3808, %3765
  %3821 = xor i64 %3820, %3809
  %3822 = lshr i64 %3821, 4
  %3823 = trunc i64 %3822 to i8
  %3824 = and i8 %3823, 1
  store i8 %3824, i8* %26, align 1
  %3825 = icmp eq i64 %3809, 0
  %3826 = zext i1 %3825 to i8
  store i8 %3826, i8* %29, align 1
  %3827 = lshr i64 %3809, 63
  %3828 = trunc i64 %3827 to i8
  store i8 %3828, i8* %32, align 1
  %3829 = lshr i64 %3807, 59
  %3830 = and i64 %3829, 1
  %3831 = xor i64 %3827, %3786
  %3832 = xor i64 %3827, %3830
  %3833 = add nuw nsw i64 %3831, %3832
  %3834 = icmp eq i64 %3833, 2
  %3835 = zext i1 %3834 to i8
  store i8 %3835, i8* %38, align 1
  %3836 = load i64, i64* %RBP.i, align 8
  %3837 = add i64 %3836, -32
  %3838 = add i64 %3759, 36
  store i64 %3838, i64* %3, align 8
  %3839 = inttoptr i64 %3837 to i32*
  %3840 = load i32, i32* %3839, align 4
  %3841 = sext i32 %3840 to i64
  store i64 %3841, i64* %RDX.i1748, align 8
  %3842 = shl nsw i64 %3841, 2
  %3843 = add i64 %3809, %3842
  %3844 = add i64 %3759, 39
  store i64 %3844, i64* %3, align 8
  %3845 = inttoptr i64 %3843 to i32*
  %3846 = load i32, i32* %3845, align 4
  %3847 = sub i32 %3803, %3846
  %3848 = zext i32 %3847 to i64
  store i64 %3848, i64* %RCX.i1519, align 8
  %3849 = icmp ult i32 %3803, %3846
  %3850 = zext i1 %3849 to i8
  store i8 %3850, i8* %14, align 1
  %3851 = and i32 %3847, 255
  %3852 = tail call i32 @llvm.ctpop.i32(i32 %3851)
  %3853 = trunc i32 %3852 to i8
  %3854 = and i8 %3853, 1
  %3855 = xor i8 %3854, 1
  store i8 %3855, i8* %21, align 1
  %3856 = xor i32 %3846, %3803
  %3857 = xor i32 %3856, %3847
  %3858 = lshr i32 %3857, 4
  %3859 = trunc i32 %3858 to i8
  %3860 = and i8 %3859, 1
  store i8 %3860, i8* %26, align 1
  %3861 = icmp eq i32 %3847, 0
  %3862 = zext i1 %3861 to i8
  store i8 %3862, i8* %29, align 1
  %3863 = lshr i32 %3847, 31
  %3864 = trunc i32 %3863 to i8
  store i8 %3864, i8* %32, align 1
  %3865 = lshr i32 %3803, 31
  %3866 = lshr i32 %3846, 31
  %3867 = xor i32 %3866, %3865
  %3868 = xor i32 %3863, %3865
  %3869 = add nuw nsw i32 %3868, %3867
  %3870 = icmp eq i32 %3869, 2
  %3871 = zext i1 %3870 to i8
  store i8 %3871, i8* %38, align 1
  %3872 = add i64 %3759, 43
  store i64 %3872, i64* %3, align 8
  %3873 = load i32, i32* %3839, align 4
  %3874 = sext i32 %3873 to i64
  store i64 %3874, i64* %RAX.i1161, align 8
  %3875 = shl nsw i64 %3874, 2
  %3876 = add i64 %3836, -64
  %3877 = add i64 %3876, %3875
  %3878 = add i64 %3759, 47
  store i64 %3878, i64* %3, align 8
  %3879 = inttoptr i64 %3877 to i32*
  store i32 %3847, i32* %3879, align 4
  %3880 = load i64, i64* %RBP.i, align 8
  %3881 = add i64 %3880, -24
  %3882 = load i64, i64* %3, align 8
  %3883 = add i64 %3882, 3
  store i64 %3883, i64* %3, align 8
  %3884 = inttoptr i64 %3881 to i32*
  %3885 = load i32, i32* %3884, align 4
  %3886 = add i32 %3885, 1
  %3887 = zext i32 %3886 to i64
  store i64 %3887, i64* %RAX.i1161, align 8
  %3888 = icmp eq i32 %3885, -1
  %3889 = icmp eq i32 %3886, 0
  %3890 = or i1 %3888, %3889
  %3891 = zext i1 %3890 to i8
  store i8 %3891, i8* %14, align 1
  %3892 = and i32 %3886, 255
  %3893 = tail call i32 @llvm.ctpop.i32(i32 %3892)
  %3894 = trunc i32 %3893 to i8
  %3895 = and i8 %3894, 1
  %3896 = xor i8 %3895, 1
  store i8 %3896, i8* %21, align 1
  %3897 = xor i32 %3886, %3885
  %3898 = lshr i32 %3897, 4
  %3899 = trunc i32 %3898 to i8
  %3900 = and i8 %3899, 1
  store i8 %3900, i8* %26, align 1
  %3901 = zext i1 %3889 to i8
  store i8 %3901, i8* %29, align 1
  %3902 = lshr i32 %3886, 31
  %3903 = trunc i32 %3902 to i8
  store i8 %3903, i8* %32, align 1
  %3904 = lshr i32 %3885, 31
  %3905 = xor i32 %3902, %3904
  %3906 = add nuw nsw i32 %3905, %3902
  %3907 = icmp eq i32 %3906, 2
  %3908 = zext i1 %3907 to i8
  store i8 %3908, i8* %38, align 1
  %3909 = add i64 %3882, 9
  store i64 %3909, i64* %3, align 8
  store i32 %3886, i32* %3884, align 4
  %3910 = load i64, i64* %3, align 8
  %3911 = add i64 %3910, -134
  store i64 %3911, i64* %3, align 8
  br label %block_.L_40c4c5

block_.L_40c550:                                  ; preds = %block_.L_40c4c5
  %3912 = add i64 %3573, -64
  %3913 = add i64 %3601, 10
  store i64 %3913, i64* %3, align 8
  %3914 = inttoptr i64 %3912 to i32*
  %3915 = load i32, i32* %3914, align 4
  %3916 = zext i32 %3915 to i64
  store i64 %3916, i64* %RCX.i1519, align 8
  %3917 = add i64 %3573, -60
  %3918 = add i64 %3601, 13
  store i64 %3918, i64* %3, align 8
  %3919 = inttoptr i64 %3917 to i32*
  %3920 = load i32, i32* %3919, align 4
  %3921 = add i32 %3920, %3915
  %3922 = zext i32 %3921 to i64
  store i64 %3922, i64* %RCX.i1519, align 8
  %3923 = icmp ult i32 %3921, %3915
  %3924 = icmp ult i32 %3921, %3920
  %3925 = or i1 %3923, %3924
  %3926 = zext i1 %3925 to i8
  store i8 %3926, i8* %14, align 1
  %3927 = and i32 %3921, 255
  %3928 = tail call i32 @llvm.ctpop.i32(i32 %3927)
  %3929 = trunc i32 %3928 to i8
  %3930 = and i8 %3929, 1
  %3931 = xor i8 %3930, 1
  store i8 %3931, i8* %21, align 1
  %3932 = xor i32 %3920, %3915
  %3933 = xor i32 %3932, %3921
  %3934 = lshr i32 %3933, 4
  %3935 = trunc i32 %3934 to i8
  %3936 = and i8 %3935, 1
  store i8 %3936, i8* %26, align 1
  %3937 = icmp eq i32 %3921, 0
  %3938 = zext i1 %3937 to i8
  store i8 %3938, i8* %29, align 1
  %3939 = lshr i32 %3921, 31
  %3940 = trunc i32 %3939 to i8
  store i8 %3940, i8* %32, align 1
  %3941 = lshr i32 %3915, 31
  %3942 = lshr i32 %3920, 31
  %3943 = xor i32 %3939, %3941
  %3944 = xor i32 %3939, %3942
  %3945 = add nuw nsw i32 %3943, %3944
  %3946 = icmp eq i32 %3945, 2
  %3947 = zext i1 %3946 to i8
  store i8 %3947, i8* %38, align 1
  %3948 = add i64 %3573, -20
  %3949 = add i64 %3601, 17
  store i64 %3949, i64* %3, align 8
  %3950 = inttoptr i64 %3948 to i32*
  %3951 = load i32, i32* %3950, align 4
  %3952 = sext i32 %3951 to i64
  %3953 = shl nsw i64 %3952, 4
  store i64 %3953, i64* %RDX.i1748, align 8
  %3954 = add i64 %3953, %3602
  store i64 %3954, i64* %RSI.i2777, align 8
  %3955 = icmp ult i64 %3954, %3602
  %3956 = icmp ult i64 %3954, %3953
  %3957 = or i1 %3955, %3956
  %3958 = zext i1 %3957 to i8
  store i8 %3958, i8* %14, align 1
  %3959 = trunc i64 %3954 to i32
  %3960 = and i32 %3959, 255
  %3961 = tail call i32 @llvm.ctpop.i32(i32 %3960)
  %3962 = trunc i32 %3961 to i8
  %3963 = and i8 %3962, 1
  %3964 = xor i8 %3963, 1
  store i8 %3964, i8* %21, align 1
  %3965 = xor i64 %3953, %3602
  %3966 = xor i64 %3965, %3954
  %3967 = lshr i64 %3966, 4
  %3968 = trunc i64 %3967 to i8
  %3969 = and i8 %3968, 1
  store i8 %3969, i8* %26, align 1
  %3970 = icmp eq i64 %3954, 0
  %3971 = zext i1 %3970 to i8
  store i8 %3971, i8* %29, align 1
  %3972 = lshr i64 %3954, 63
  %3973 = trunc i64 %3972 to i8
  store i8 %3973, i8* %32, align 1
  %3974 = lshr i64 %3602, 63
  %3975 = lshr i64 %3952, 59
  %3976 = and i64 %3975, 1
  %3977 = xor i64 %3972, %3974
  %3978 = xor i64 %3972, %3976
  %3979 = add nuw nsw i64 %3977, %3978
  %3980 = icmp eq i64 %3979, 2
  %3981 = zext i1 %3980 to i8
  store i8 %3981, i8* %38, align 1
  %3982 = inttoptr i64 %3954 to i32*
  %3983 = load i32, i32* %ECX.i2881, align 4
  %3984 = add i64 %3601, 29
  store i64 %3984, i64* %3, align 8
  store i32 %3983, i32* %3982, align 4
  %3985 = load i64, i64* %RBP.i, align 8
  %3986 = add i64 %3985, -64
  %3987 = load i64, i64* %3, align 8
  %3988 = add i64 %3987, 3
  store i64 %3988, i64* %3, align 8
  %3989 = inttoptr i64 %3986 to i32*
  %3990 = load i32, i32* %3989, align 4
  %3991 = zext i32 %3990 to i64
  store i64 %3991, i64* %RCX.i1519, align 8
  %3992 = add i64 %3985, -60
  %3993 = add i64 %3987, 6
  store i64 %3993, i64* %3, align 8
  %3994 = inttoptr i64 %3992 to i32*
  %3995 = load i32, i32* %3994, align 4
  %3996 = sub i32 %3990, %3995
  %3997 = zext i32 %3996 to i64
  store i64 %3997, i64* %RCX.i1519, align 8
  %3998 = icmp ult i32 %3990, %3995
  %3999 = zext i1 %3998 to i8
  store i8 %3999, i8* %14, align 1
  %4000 = and i32 %3996, 255
  %4001 = tail call i32 @llvm.ctpop.i32(i32 %4000)
  %4002 = trunc i32 %4001 to i8
  %4003 = and i8 %4002, 1
  %4004 = xor i8 %4003, 1
  store i8 %4004, i8* %21, align 1
  %4005 = xor i32 %3995, %3990
  %4006 = xor i32 %4005, %3996
  %4007 = lshr i32 %4006, 4
  %4008 = trunc i32 %4007 to i8
  %4009 = and i8 %4008, 1
  store i8 %4009, i8* %26, align 1
  %4010 = icmp eq i32 %3996, 0
  %4011 = zext i1 %4010 to i8
  store i8 %4011, i8* %29, align 1
  %4012 = lshr i32 %3996, 31
  %4013 = trunc i32 %4012 to i8
  store i8 %4013, i8* %32, align 1
  %4014 = lshr i32 %3990, 31
  %4015 = lshr i32 %3995, 31
  %4016 = xor i32 %4015, %4014
  %4017 = xor i32 %4012, %4014
  %4018 = add nuw nsw i32 %4017, %4016
  %4019 = icmp eq i32 %4018, 2
  %4020 = zext i1 %4019 to i8
  store i8 %4020, i8* %38, align 1
  %4021 = add i64 %3985, -20
  %4022 = add i64 %3987, 10
  store i64 %4022, i64* %3, align 8
  %4023 = inttoptr i64 %4021 to i32*
  %4024 = load i32, i32* %4023, align 4
  %4025 = sext i32 %4024 to i64
  %4026 = shl nsw i64 %4025, 4
  store i64 %4026, i64* %RDX.i1748, align 8
  %4027 = load i64, i64* %RAX.i1161, align 8
  %4028 = add i64 %4026, %4027
  store i64 %4028, i64* %RSI.i2777, align 8
  %4029 = icmp ult i64 %4028, %4027
  %4030 = icmp ult i64 %4028, %4026
  %4031 = or i1 %4029, %4030
  %4032 = zext i1 %4031 to i8
  store i8 %4032, i8* %14, align 1
  %4033 = trunc i64 %4028 to i32
  %4034 = and i32 %4033, 255
  %4035 = tail call i32 @llvm.ctpop.i32(i32 %4034)
  %4036 = trunc i32 %4035 to i8
  %4037 = and i8 %4036, 1
  %4038 = xor i8 %4037, 1
  store i8 %4038, i8* %21, align 1
  %4039 = xor i64 %4026, %4027
  %4040 = xor i64 %4039, %4028
  %4041 = lshr i64 %4040, 4
  %4042 = trunc i64 %4041 to i8
  %4043 = and i8 %4042, 1
  store i8 %4043, i8* %26, align 1
  %4044 = icmp eq i64 %4028, 0
  %4045 = zext i1 %4044 to i8
  store i8 %4045, i8* %29, align 1
  %4046 = lshr i64 %4028, 63
  %4047 = trunc i64 %4046 to i8
  store i8 %4047, i8* %32, align 1
  %4048 = lshr i64 %4027, 63
  %4049 = lshr i64 %4025, 59
  %4050 = and i64 %4049, 1
  %4051 = xor i64 %4046, %4048
  %4052 = xor i64 %4046, %4050
  %4053 = add nuw nsw i64 %4051, %4052
  %4054 = icmp eq i64 %4053, 2
  %4055 = zext i1 %4054 to i8
  store i8 %4055, i8* %38, align 1
  %4056 = add i64 %4028, 8
  %4057 = load i32, i32* %ECX.i2881, align 4
  %4058 = add i64 %3987, 23
  store i64 %4058, i64* %3, align 8
  %4059 = inttoptr i64 %4056 to i32*
  store i32 %4057, i32* %4059, align 4
  %4060 = load i64, i64* %RBP.i, align 8
  %4061 = add i64 %4060, -52
  %4062 = load i64, i64* %3, align 8
  %4063 = add i64 %4062, 3
  store i64 %4063, i64* %3, align 8
  %4064 = inttoptr i64 %4061 to i32*
  %4065 = load i32, i32* %4064, align 4
  %4066 = shl i32 %4065, 1
  %4067 = icmp slt i32 %4065, 0
  %4068 = icmp slt i32 %4066, 0
  %4069 = xor i1 %4067, %4068
  %4070 = zext i32 %4066 to i64
  store i64 %4070, i64* %RCX.i1519, align 8
  %.lobit74 = lshr i32 %4065, 31
  %4071 = trunc i32 %.lobit74 to i8
  store i8 %4071, i8* %14, align 1
  %4072 = and i32 %4066, 254
  %4073 = tail call i32 @llvm.ctpop.i32(i32 %4072)
  %4074 = trunc i32 %4073 to i8
  %4075 = and i8 %4074, 1
  %4076 = xor i8 %4075, 1
  store i8 %4076, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %4077 = icmp eq i32 %4066, 0
  %4078 = zext i1 %4077 to i8
  store i8 %4078, i8* %29, align 1
  %4079 = lshr i32 %4065, 30
  %4080 = trunc i32 %4079 to i8
  %4081 = and i8 %4080, 1
  store i8 %4081, i8* %32, align 1
  %4082 = zext i1 %4069 to i8
  store i8 %4082, i8* %38, align 1
  %4083 = add i64 %4060, -56
  %4084 = add i64 %4062, 8
  store i64 %4084, i64* %3, align 8
  %4085 = inttoptr i64 %4083 to i32*
  %4086 = load i32, i32* %4085, align 4
  %4087 = add i32 %4086, %4066
  %4088 = zext i32 %4087 to i64
  store i64 %4088, i64* %RCX.i1519, align 8
  %4089 = icmp ult i32 %4087, %4066
  %4090 = icmp ult i32 %4087, %4086
  %4091 = or i1 %4089, %4090
  %4092 = zext i1 %4091 to i8
  store i8 %4092, i8* %14, align 1
  %4093 = and i32 %4087, 255
  %4094 = tail call i32 @llvm.ctpop.i32(i32 %4093)
  %4095 = trunc i32 %4094 to i8
  %4096 = and i8 %4095, 1
  %4097 = xor i8 %4096, 1
  store i8 %4097, i8* %21, align 1
  %4098 = xor i32 %4086, %4066
  %4099 = xor i32 %4098, %4087
  %4100 = lshr i32 %4099, 4
  %4101 = trunc i32 %4100 to i8
  %4102 = and i8 %4101, 1
  store i8 %4102, i8* %26, align 1
  %4103 = icmp eq i32 %4087, 0
  %4104 = zext i1 %4103 to i8
  store i8 %4104, i8* %29, align 1
  %4105 = lshr i32 %4087, 31
  %4106 = trunc i32 %4105 to i8
  store i8 %4106, i8* %32, align 1
  %4107 = lshr i32 %4065, 30
  %4108 = and i32 %4107, 1
  %4109 = lshr i32 %4086, 31
  %4110 = xor i32 %4105, %4108
  %4111 = xor i32 %4105, %4109
  %4112 = add nuw nsw i32 %4110, %4111
  %4113 = icmp eq i32 %4112, 2
  %4114 = zext i1 %4113 to i8
  store i8 %4114, i8* %38, align 1
  %4115 = add i64 %4060, -20
  %4116 = add i64 %4062, 12
  store i64 %4116, i64* %3, align 8
  %4117 = inttoptr i64 %4115 to i32*
  %4118 = load i32, i32* %4117, align 4
  %4119 = sext i32 %4118 to i64
  %4120 = shl nsw i64 %4119, 4
  store i64 %4120, i64* %RDX.i1748, align 8
  %4121 = load i64, i64* %RAX.i1161, align 8
  %4122 = add i64 %4120, %4121
  store i64 %4122, i64* %RSI.i2777, align 8
  %4123 = icmp ult i64 %4122, %4121
  %4124 = icmp ult i64 %4122, %4120
  %4125 = or i1 %4123, %4124
  %4126 = zext i1 %4125 to i8
  store i8 %4126, i8* %14, align 1
  %4127 = trunc i64 %4122 to i32
  %4128 = and i32 %4127, 255
  %4129 = tail call i32 @llvm.ctpop.i32(i32 %4128)
  %4130 = trunc i32 %4129 to i8
  %4131 = and i8 %4130, 1
  %4132 = xor i8 %4131, 1
  store i8 %4132, i8* %21, align 1
  %4133 = xor i64 %4120, %4121
  %4134 = xor i64 %4133, %4122
  %4135 = lshr i64 %4134, 4
  %4136 = trunc i64 %4135 to i8
  %4137 = and i8 %4136, 1
  store i8 %4137, i8* %26, align 1
  %4138 = icmp eq i64 %4122, 0
  %4139 = zext i1 %4138 to i8
  store i8 %4139, i8* %29, align 1
  %4140 = lshr i64 %4122, 63
  %4141 = trunc i64 %4140 to i8
  store i8 %4141, i8* %32, align 1
  %4142 = lshr i64 %4121, 63
  %4143 = lshr i64 %4119, 59
  %4144 = and i64 %4143, 1
  %4145 = xor i64 %4140, %4142
  %4146 = xor i64 %4140, %4144
  %4147 = add nuw nsw i64 %4145, %4146
  %4148 = icmp eq i64 %4147, 2
  %4149 = zext i1 %4148 to i8
  store i8 %4149, i8* %38, align 1
  %4150 = add i64 %4122, 4
  %4151 = load i32, i32* %ECX.i2881, align 4
  %4152 = add i64 %4062, 25
  store i64 %4152, i64* %3, align 8
  %4153 = inttoptr i64 %4150 to i32*
  store i32 %4151, i32* %4153, align 4
  %4154 = load i64, i64* %RBP.i, align 8
  %4155 = add i64 %4154, -52
  %4156 = load i64, i64* %3, align 8
  %4157 = add i64 %4156, 3
  store i64 %4157, i64* %3, align 8
  %4158 = inttoptr i64 %4155 to i32*
  %4159 = load i32, i32* %4158, align 4
  %4160 = zext i32 %4159 to i64
  store i64 %4160, i64* %RCX.i1519, align 8
  %4161 = add i64 %4154, -56
  %4162 = add i64 %4156, 6
  store i64 %4162, i64* %3, align 8
  %4163 = inttoptr i64 %4161 to i32*
  %4164 = load i32, i32* %4163, align 4
  %4165 = shl i32 %4164, 1
  %4166 = zext i32 %4165 to i64
  store i64 %4166, i64* %RDI.i2913, align 8
  %4167 = sub i32 %4159, %4165
  %4168 = zext i32 %4167 to i64
  store i64 %4168, i64* %RCX.i1519, align 8
  %4169 = icmp ult i32 %4159, %4165
  %4170 = zext i1 %4169 to i8
  store i8 %4170, i8* %14, align 1
  %4171 = and i32 %4167, 255
  %4172 = tail call i32 @llvm.ctpop.i32(i32 %4171)
  %4173 = trunc i32 %4172 to i8
  %4174 = and i8 %4173, 1
  %4175 = xor i8 %4174, 1
  store i8 %4175, i8* %21, align 1
  %4176 = xor i32 %4165, %4159
  %4177 = xor i32 %4176, %4167
  %4178 = lshr i32 %4177, 4
  %4179 = trunc i32 %4178 to i8
  %4180 = and i8 %4179, 1
  store i8 %4180, i8* %26, align 1
  %4181 = icmp eq i32 %4167, 0
  %4182 = zext i1 %4181 to i8
  store i8 %4182, i8* %29, align 1
  %4183 = lshr i32 %4167, 31
  %4184 = trunc i32 %4183 to i8
  store i8 %4184, i8* %32, align 1
  %4185 = lshr i32 %4159, 31
  %4186 = lshr i32 %4164, 30
  %4187 = and i32 %4186, 1
  %4188 = xor i32 %4187, %4185
  %4189 = xor i32 %4183, %4185
  %4190 = add nuw nsw i32 %4189, %4188
  %4191 = icmp eq i32 %4190, 2
  %4192 = zext i1 %4191 to i8
  store i8 %4192, i8* %38, align 1
  %4193 = add i64 %4154, -20
  %4194 = add i64 %4156, 14
  store i64 %4194, i64* %3, align 8
  %4195 = inttoptr i64 %4193 to i32*
  %4196 = load i32, i32* %4195, align 4
  %4197 = sext i32 %4196 to i64
  %4198 = shl nsw i64 %4197, 4
  store i64 %4198, i64* %RDX.i1748, align 8
  %4199 = load i64, i64* %RAX.i1161, align 8
  %4200 = add i64 %4198, %4199
  store i64 %4200, i64* %RAX.i1161, align 8
  %4201 = icmp ult i64 %4200, %4199
  %4202 = icmp ult i64 %4200, %4198
  %4203 = or i1 %4201, %4202
  %4204 = zext i1 %4203 to i8
  store i8 %4204, i8* %14, align 1
  %4205 = trunc i64 %4200 to i32
  %4206 = and i32 %4205, 255
  %4207 = tail call i32 @llvm.ctpop.i32(i32 %4206)
  %4208 = trunc i32 %4207 to i8
  %4209 = and i8 %4208, 1
  %4210 = xor i8 %4209, 1
  store i8 %4210, i8* %21, align 1
  %4211 = xor i64 %4198, %4199
  %4212 = xor i64 %4211, %4200
  %4213 = lshr i64 %4212, 4
  %4214 = trunc i64 %4213 to i8
  %4215 = and i8 %4214, 1
  store i8 %4215, i8* %26, align 1
  %4216 = icmp eq i64 %4200, 0
  %4217 = zext i1 %4216 to i8
  store i8 %4217, i8* %29, align 1
  %4218 = lshr i64 %4200, 63
  %4219 = trunc i64 %4218 to i8
  store i8 %4219, i8* %32, align 1
  %4220 = lshr i64 %4199, 63
  %4221 = lshr i64 %4197, 59
  %4222 = and i64 %4221, 1
  %4223 = xor i64 %4218, %4220
  %4224 = xor i64 %4218, %4222
  %4225 = add nuw nsw i64 %4223, %4224
  %4226 = icmp eq i64 %4225, 2
  %4227 = zext i1 %4226 to i8
  store i8 %4227, i8* %38, align 1
  %4228 = add i64 %4200, 12
  %4229 = add i64 %4156, 24
  store i64 %4229, i64* %3, align 8
  %4230 = inttoptr i64 %4228 to i32*
  store i32 %4167, i32* %4230, align 4
  %4231 = load i64, i64* %RBP.i, align 8
  %4232 = add i64 %4231, -20
  %4233 = load i64, i64* %3, align 8
  %4234 = add i64 %4233, 3
  store i64 %4234, i64* %3, align 8
  %4235 = inttoptr i64 %4232 to i32*
  %4236 = load i32, i32* %4235, align 4
  %4237 = add i32 %4236, 1
  %4238 = zext i32 %4237 to i64
  store i64 %4238, i64* %RAX.i1161, align 8
  %4239 = icmp eq i32 %4236, -1
  %4240 = icmp eq i32 %4237, 0
  %4241 = or i1 %4239, %4240
  %4242 = zext i1 %4241 to i8
  store i8 %4242, i8* %14, align 1
  %4243 = and i32 %4237, 255
  %4244 = tail call i32 @llvm.ctpop.i32(i32 %4243)
  %4245 = trunc i32 %4244 to i8
  %4246 = and i8 %4245, 1
  %4247 = xor i8 %4246, 1
  store i8 %4247, i8* %21, align 1
  %4248 = xor i32 %4237, %4236
  %4249 = lshr i32 %4248, 4
  %4250 = trunc i32 %4249 to i8
  %4251 = and i8 %4250, 1
  store i8 %4251, i8* %26, align 1
  %4252 = zext i1 %4240 to i8
  store i8 %4252, i8* %29, align 1
  %4253 = lshr i32 %4237, 31
  %4254 = trunc i32 %4253 to i8
  store i8 %4254, i8* %32, align 1
  %4255 = lshr i32 %4236, 31
  %4256 = xor i32 %4253, %4255
  %4257 = add nuw nsw i32 %4256, %4253
  %4258 = icmp eq i32 %4257, 2
  %4259 = zext i1 %4258 to i8
  store i8 %4259, i8* %38, align 1
  %4260 = add i64 %4233, 9
  store i64 %4260, i64* %3, align 8
  store i32 %4237, i32* %4235, align 4
  %4261 = load i64, i64* %3, align 8
  %4262 = add i64 %4261, -268
  store i64 %4262, i64* %3, align 8
  br label %block_.L_40c4b4

block_.L_40c5c5:                                  ; preds = %block_.L_40c4b4
  %4263 = add i64 %3540, -104
  %4264 = add i64 %3568, 7
  store i64 %4264, i64* %3, align 8
  %4265 = inttoptr i64 %4263 to i32*
  store i32 0, i32* %4265, align 4
  %4266 = load i64, i64* %RBP.i, align 8
  %4267 = add i64 %4266, -100
  %4268 = load i64, i64* %3, align 8
  %4269 = add i64 %4268, 7
  store i64 %4269, i64* %3, align 8
  %4270 = inttoptr i64 %4267 to i32*
  store i32 -1, i32* %4270, align 4
  %4271 = load i64, i64* %RBP.i, align 8
  %4272 = add i64 %4271, -96
  %4273 = load i64, i64* %3, align 8
  %4274 = add i64 %4273, 7
  store i64 %4274, i64* %3, align 8
  %4275 = inttoptr i64 %4272 to i32*
  store i32 0, i32* %4275, align 4
  %4276 = load i64, i64* %RBP.i, align 8
  %4277 = add i64 %4276, -84
  %4278 = load i64, i64* %3, align 8
  %4279 = add i64 %4278, 7
  store i64 %4279, i64* %3, align 8
  %4280 = inttoptr i64 %4277 to i32*
  store i32 0, i32* %4280, align 4
  %R10.i1596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11.i1424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %.pre190 = load i64, i64* %3, align 8
  br label %block_.L_40c5e1

block_.L_40c5e1:                                  ; preds = %routine_shll__cl___eax.exit, %block_.L_40c5c5
  %4281 = phi i64 [ %.pre190, %block_.L_40c5c5 ], [ %7888, %routine_shll__cl___eax.exit ]
  %MEMORY.10 = phi %struct.Memory* [ %964, %block_.L_40c5c5 ], [ %call2_40cd82, %routine_shll__cl___eax.exit ]
  %4282 = load i64, i64* %RBP.i, align 8
  %4283 = add i64 %4282, -84
  %4284 = add i64 %4281, 4
  store i64 %4284, i64* %3, align 8
  %4285 = inttoptr i64 %4283 to i32*
  %4286 = load i32, i32* %4285, align 4
  %4287 = add i32 %4286, -16
  %4288 = icmp ult i32 %4286, 16
  %4289 = zext i1 %4288 to i8
  store i8 %4289, i8* %14, align 1
  %4290 = and i32 %4287, 255
  %4291 = tail call i32 @llvm.ctpop.i32(i32 %4290)
  %4292 = trunc i32 %4291 to i8
  %4293 = and i8 %4292, 1
  %4294 = xor i8 %4293, 1
  store i8 %4294, i8* %21, align 1
  %4295 = xor i32 %4286, 16
  %4296 = xor i32 %4295, %4287
  %4297 = lshr i32 %4296, 4
  %4298 = trunc i32 %4297 to i8
  %4299 = and i8 %4298, 1
  store i8 %4299, i8* %26, align 1
  %4300 = icmp eq i32 %4287, 0
  %4301 = zext i1 %4300 to i8
  store i8 %4301, i8* %29, align 1
  %4302 = lshr i32 %4287, 31
  %4303 = trunc i32 %4302 to i8
  store i8 %4303, i8* %32, align 1
  %4304 = lshr i32 %4286, 31
  %4305 = xor i32 %4302, %4304
  %4306 = add nuw nsw i32 %4305, %4304
  %4307 = icmp eq i32 %4306, 2
  %4308 = zext i1 %4307 to i8
  store i8 %4308, i8* %38, align 1
  %4309 = icmp ne i8 %4303, 0
  %4310 = xor i1 %4309, %4307
  %.v236 = select i1 %4310, i64 10, i64 2058
  %4311 = add i64 %4281, %.v236
  store i64 %4311, i64* %3, align 8
  br i1 %4310, label %block_40c5eb, label %block_.L_40cdeb

block_40c5eb:                                     ; preds = %block_.L_40c5e1
  %4312 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %4312, i64* %RAX.i1161, align 8
  %4313 = add i64 %4312, 72444
  %4314 = add i64 %4311, 15
  store i64 %4314, i64* %3, align 8
  %4315 = inttoptr i64 %4313 to i32*
  %4316 = load i32, i32* %4315, align 4
  store i8 0, i8* %14, align 1
  %4317 = and i32 %4316, 255
  %4318 = tail call i32 @llvm.ctpop.i32(i32 %4317)
  %4319 = trunc i32 %4318 to i8
  %4320 = and i8 %4319, 1
  %4321 = xor i8 %4320, 1
  store i8 %4321, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %4322 = icmp eq i32 %4316, 0
  %4323 = zext i1 %4322 to i8
  store i8 %4323, i8* %29, align 1
  %4324 = lshr i32 %4316, 31
  %4325 = trunc i32 %4324 to i8
  store i8 %4325, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v245 = select i1 %4322, i64 21, i64 56
  %4326 = add i64 %4311, %.v245
  store i64 %4326, i64* %3, align 8
  br i1 %4322, label %block_40c600, label %block_.L_40c623

block_40c600:                                     ; preds = %block_40c5eb
  %4327 = load i32, i32* bitcast (%G_0x6d4750_type* @G_0x6d4750 to i32*), align 8
  store i8 0, i8* %14, align 1
  %4328 = and i32 %4327, 255
  %4329 = tail call i32 @llvm.ctpop.i32(i32 %4328)
  %4330 = trunc i32 %4329 to i8
  %4331 = and i8 %4330, 1
  %4332 = xor i8 %4331, 1
  store i8 %4332, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %4333 = icmp eq i32 %4327, 0
  %4334 = zext i1 %4333 to i8
  store i8 %4334, i8* %29, align 1
  %4335 = lshr i32 %4327, 31
  %4336 = trunc i32 %4335 to i8
  store i8 %4336, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v256 = select i1 %4333, i64 70, i64 14
  %4337 = add i64 %4326, %.v256
  store i64 %4337, i64* %3, align 8
  br i1 %4333, label %block_.L_40c646, label %block_40c60e

block_40c60e:                                     ; preds = %block_40c600
  store i64 %4312, i64* %RAX.i1161, align 8
  %4338 = add i64 %4312, 72008
  %4339 = add i64 %4337, 15
  store i64 %4339, i64* %3, align 8
  %4340 = inttoptr i64 %4338 to i32*
  %4341 = load i32, i32* %4340, align 4
  store i8 0, i8* %14, align 1
  %4342 = and i32 %4341, 255
  %4343 = tail call i32 @llvm.ctpop.i32(i32 %4342)
  %4344 = trunc i32 %4343 to i8
  %4345 = and i8 %4344, 1
  %4346 = xor i8 %4345, 1
  store i8 %4346, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %4347 = icmp eq i32 %4341, 0
  %4348 = zext i1 %4347 to i8
  store i8 %4348, i8* %29, align 1
  %4349 = lshr i32 %4341, 31
  %4350 = trunc i32 %4349 to i8
  store i8 %4350, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v257 = select i1 %4347, i64 56, i64 21
  %4351 = add i64 %4337, %.v257
  store i64 %4351, i64* %3, align 8
  br i1 %4347, label %block_.L_40c646, label %block_.L_40c623

block_.L_40c623:                                  ; preds = %block_40c5eb, %block_40c60e
  %4352 = phi i64 [ %4351, %block_40c60e ], [ %4326, %block_40c5eb ]
  %4353 = add i64 %4352, 4
  store i64 %4353, i64* %3, align 8
  %4354 = load i32, i32* %4285, align 4
  %4355 = sext i32 %4354 to i64
  store i64 %4355, i64* %RAX.i1161, align 8
  %4356 = shl nsw i64 %4355, 1
  %4357 = add nsw i64 %4356, 4924288
  %4358 = add i64 %4352, 12
  store i64 %4358, i64* %3, align 8
  %4359 = inttoptr i64 %4357 to i8*
  %4360 = load i8, i8* %4359, align 2
  %4361 = zext i8 %4360 to i64
  store i64 %4361, i64* %RCX.i1519, align 8
  %4362 = add i64 %4282, -20
  %4363 = zext i8 %4360 to i32
  %4364 = add i64 %4352, 15
  store i64 %4364, i64* %3, align 8
  %4365 = inttoptr i64 %4362 to i32*
  store i32 %4363, i32* %4365, align 4
  %4366 = load i64, i64* %RBP.i, align 8
  %4367 = add i64 %4366, -84
  %4368 = load i64, i64* %3, align 8
  %4369 = add i64 %4368, 4
  store i64 %4369, i64* %3, align 8
  %4370 = inttoptr i64 %4367 to i32*
  %4371 = load i32, i32* %4370, align 4
  %4372 = sext i32 %4371 to i64
  store i64 %4372, i64* %RAX.i1161, align 8
  %4373 = shl nsw i64 %4372, 1
  %4374 = add nsw i64 %4373, 4924289
  %4375 = add i64 %4368, 12
  store i64 %4375, i64* %3, align 8
  %4376 = inttoptr i64 %4374 to i8*
  %4377 = load i8, i8* %4376, align 1
  %4378 = zext i8 %4377 to i64
  store i64 %4378, i64* %RCX.i1519, align 8
  %4379 = add i64 %4366, -24
  %4380 = zext i8 %4377 to i32
  %4381 = add i64 %4368, 15
  store i64 %4381, i64* %3, align 8
  %4382 = inttoptr i64 %4379 to i32*
  store i32 %4380, i32* %4382, align 4
  %4383 = load i64, i64* %3, align 8
  %4384 = add i64 %4383, 35
  store i64 %4384, i64* %3, align 8
  br label %block_.L_40c664

block_.L_40c646:                                  ; preds = %block_40c60e, %block_40c600
  %4385 = phi i64 [ %4351, %block_40c60e ], [ %4337, %block_40c600 ]
  %4386 = add i64 %4385, 4
  store i64 %4386, i64* %3, align 8
  %4387 = load i32, i32* %4285, align 4
  %4388 = sext i32 %4387 to i64
  store i64 %4388, i64* %RAX.i1161, align 8
  %4389 = shl nsw i64 %4388, 1
  %4390 = add nsw i64 %4389, 4924256
  %4391 = add i64 %4385, 12
  store i64 %4391, i64* %3, align 8
  %4392 = inttoptr i64 %4390 to i8*
  %4393 = load i8, i8* %4392, align 2
  %4394 = zext i8 %4393 to i64
  store i64 %4394, i64* %RCX.i1519, align 8
  %4395 = add i64 %4282, -20
  %4396 = zext i8 %4393 to i32
  %4397 = add i64 %4385, 15
  store i64 %4397, i64* %3, align 8
  %4398 = inttoptr i64 %4395 to i32*
  store i32 %4396, i32* %4398, align 4
  %4399 = load i64, i64* %RBP.i, align 8
  %4400 = add i64 %4399, -84
  %4401 = load i64, i64* %3, align 8
  %4402 = add i64 %4401, 4
  store i64 %4402, i64* %3, align 8
  %4403 = inttoptr i64 %4400 to i32*
  %4404 = load i32, i32* %4403, align 4
  %4405 = sext i32 %4404 to i64
  store i64 %4405, i64* %RAX.i1161, align 8
  %4406 = shl nsw i64 %4405, 1
  %4407 = add nsw i64 %4406, 4924257
  %4408 = add i64 %4401, 12
  store i64 %4408, i64* %3, align 8
  %4409 = inttoptr i64 %4407 to i8*
  %4410 = load i8, i8* %4409, align 1
  %4411 = zext i8 %4410 to i64
  store i64 %4411, i64* %RCX.i1519, align 8
  %4412 = add i64 %4399, -24
  %4413 = zext i8 %4410 to i32
  %4414 = add i64 %4401, 15
  store i64 %4414, i64* %3, align 8
  %4415 = inttoptr i64 %4412 to i32*
  store i32 %4413, i32* %4415, align 4
  %.pre205 = load i64, i64* %3, align 8
  br label %block_.L_40c664

block_.L_40c664:                                  ; preds = %block_.L_40c646, %block_.L_40c623
  %4416 = phi i64 [ %.pre205, %block_.L_40c646 ], [ %4384, %block_.L_40c623 ]
  %4417 = load i64, i64* %RBP.i, align 8
  %4418 = add i64 %4417, -176
  store i64 %4418, i64* %RAX.i1161, align 8
  %4419 = add i64 %4417, -100
  %4420 = add i64 %4416, 10
  store i64 %4420, i64* %3, align 8
  %4421 = inttoptr i64 %4419 to i32*
  %4422 = load i32, i32* %4421, align 4
  %4423 = add i32 %4422, 1
  %4424 = zext i32 %4423 to i64
  store i64 %4424, i64* %RCX.i1519, align 8
  %4425 = icmp eq i32 %4422, -1
  %4426 = icmp eq i32 %4423, 0
  %4427 = or i1 %4425, %4426
  %4428 = zext i1 %4427 to i8
  store i8 %4428, i8* %14, align 1
  %4429 = and i32 %4423, 255
  %4430 = tail call i32 @llvm.ctpop.i32(i32 %4429)
  %4431 = trunc i32 %4430 to i8
  %4432 = and i8 %4431, 1
  %4433 = xor i8 %4432, 1
  store i8 %4433, i8* %21, align 1
  %4434 = xor i32 %4423, %4422
  %4435 = lshr i32 %4434, 4
  %4436 = trunc i32 %4435 to i8
  %4437 = and i8 %4436, 1
  store i8 %4437, i8* %26, align 1
  %4438 = zext i1 %4426 to i8
  store i8 %4438, i8* %29, align 1
  %4439 = lshr i32 %4423, 31
  %4440 = trunc i32 %4439 to i8
  store i8 %4440, i8* %32, align 1
  %4441 = lshr i32 %4422, 31
  %4442 = xor i32 %4439, %4441
  %4443 = add nuw nsw i32 %4442, %4439
  %4444 = icmp eq i32 %4443, 2
  %4445 = zext i1 %4444 to i8
  store i8 %4445, i8* %38, align 1
  %4446 = add i64 %4416, 16
  store i64 %4446, i64* %3, align 8
  store i32 %4423, i32* %4421, align 4
  %4447 = load i64, i64* %RBP.i, align 8
  %4448 = add i64 %4447, -36
  %4449 = load i64, i64* %3, align 8
  %4450 = add i64 %4449, 7
  store i64 %4450, i64* %3, align 8
  %4451 = inttoptr i64 %4448 to i32*
  store i32 0, i32* %4451, align 4
  %4452 = load i64, i64* %RBP.i, align 8
  %4453 = add i64 %4452, -20
  %4454 = load i64, i64* %3, align 8
  %4455 = add i64 %4454, 4
  store i64 %4455, i64* %3, align 8
  %4456 = inttoptr i64 %4453 to i32*
  %4457 = load i32, i32* %4456, align 4
  %4458 = sext i32 %4457 to i64
  %4459 = shl nsw i64 %4458, 4
  store i64 %4459, i64* %RDX.i1748, align 8
  %4460 = load i64, i64* %RAX.i1161, align 8
  %4461 = add i64 %4459, %4460
  store i64 %4461, i64* %RAX.i1161, align 8
  %4462 = icmp ult i64 %4461, %4460
  %4463 = icmp ult i64 %4461, %4459
  %4464 = or i1 %4462, %4463
  %4465 = zext i1 %4464 to i8
  store i8 %4465, i8* %14, align 1
  %4466 = trunc i64 %4461 to i32
  %4467 = and i32 %4466, 255
  %4468 = tail call i32 @llvm.ctpop.i32(i32 %4467)
  %4469 = trunc i32 %4468 to i8
  %4470 = and i8 %4469, 1
  %4471 = xor i8 %4470, 1
  store i8 %4471, i8* %21, align 1
  %4472 = xor i64 %4459, %4460
  %4473 = xor i64 %4472, %4461
  %4474 = lshr i64 %4473, 4
  %4475 = trunc i64 %4474 to i8
  %4476 = and i8 %4475, 1
  store i8 %4476, i8* %26, align 1
  %4477 = icmp eq i64 %4461, 0
  %4478 = zext i1 %4477 to i8
  store i8 %4478, i8* %29, align 1
  %4479 = lshr i64 %4461, 63
  %4480 = trunc i64 %4479 to i8
  store i8 %4480, i8* %32, align 1
  %4481 = lshr i64 %4460, 63
  %4482 = lshr i64 %4458, 59
  %4483 = and i64 %4482, 1
  %4484 = xor i64 %4479, %4481
  %4485 = xor i64 %4479, %4483
  %4486 = add nuw nsw i64 %4484, %4485
  %4487 = icmp eq i64 %4486, 2
  %4488 = zext i1 %4487 to i8
  store i8 %4488, i8* %38, align 1
  %4489 = add i64 %4452, -24
  %4490 = add i64 %4454, 15
  store i64 %4490, i64* %3, align 8
  %4491 = inttoptr i64 %4489 to i32*
  %4492 = load i32, i32* %4491, align 4
  %4493 = sext i32 %4492 to i64
  store i64 %4493, i64* %RDX.i1748, align 8
  %4494 = shl nsw i64 %4493, 2
  %4495 = add i64 %4494, %4461
  %4496 = add i64 %4454, 18
  store i64 %4496, i64* %3, align 8
  %4497 = inttoptr i64 %4495 to i32*
  %4498 = load i32, i32* %4497, align 4
  %4499 = zext i32 %4498 to i64
  store i64 %4499, i64* %RDI.i2913, align 8
  %4500 = add i64 %4454, -46715
  %4501 = add i64 %4454, 23
  %4502 = load i64, i64* %6, align 8
  %4503 = add i64 %4502, -8
  %4504 = inttoptr i64 %4503 to i64*
  store i64 %4501, i64* %4504, align 8
  store i64 %4503, i64* %6, align 8
  store i64 %4500, i64* %3, align 8
  %4505 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.10)
  %4506 = load i64, i64* %RBP.i, align 8
  %4507 = add i64 %4506, -176
  %4508 = load i64, i64* %3, align 8
  store i64 %4507, i64* %RDX.i1748, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RSI.i2777, align 8
  %4509 = add i64 %4506, -204
  %4510 = add i64 %4508, 24
  store i64 %4510, i64* %3, align 8
  %4511 = inttoptr i64 %4509 to i32*
  %4512 = load i32, i32* %4511, align 4
  %4513 = sext i32 %4512 to i64
  %4514 = shl nsw i64 %4513, 6
  store i64 %4514, i64* %R8.i3013, align 8
  %4515 = add i64 %4514, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %4515, i64* %R9.i3009, align 8
  %4516 = icmp ult i64 %4515, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %4517 = icmp ult i64 %4515, %4514
  %4518 = or i1 %4516, %4517
  %4519 = zext i1 %4518 to i8
  store i8 %4519, i8* %14, align 1
  %4520 = trunc i64 %4515 to i32
  %4521 = and i32 %4520, 248
  %4522 = tail call i32 @llvm.ctpop.i32(i32 %4521)
  %4523 = trunc i32 %4522 to i8
  %4524 = and i8 %4523, 1
  %4525 = xor i8 %4524, 1
  store i8 %4525, i8* %21, align 1
  %4526 = xor i64 %4515, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %4527 = lshr i64 %4526, 4
  %4528 = trunc i64 %4527 to i8
  %4529 = and i8 %4528, 1
  store i8 %4529, i8* %26, align 1
  %4530 = icmp eq i64 %4515, 0
  %4531 = zext i1 %4530 to i8
  store i8 %4531, i8* %29, align 1
  %4532 = lshr i64 %4515, 63
  %4533 = trunc i64 %4532 to i8
  store i8 %4533, i8* %32, align 1
  %4534 = lshr i64 %4513, 57
  %4535 = and i64 %4534, 1
  %4536 = xor i64 %4532, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %4537 = xor i64 %4532, %4535
  %4538 = add nuw nsw i64 %4536, %4537
  %4539 = icmp eq i64 %4538, 2
  %4540 = zext i1 %4539 to i8
  store i8 %4540, i8* %38, align 1
  %4541 = add i64 %4506, -20
  %4542 = add i64 %4508, 38
  store i64 %4542, i64* %3, align 8
  %4543 = inttoptr i64 %4541 to i32*
  %4544 = load i32, i32* %4543, align 4
  %4545 = sext i32 %4544 to i64
  %4546 = shl nsw i64 %4545, 4
  store i64 %4546, i64* %R8.i3013, align 8
  %4547 = add i64 %4546, %4515
  store i64 %4547, i64* %R9.i3009, align 8
  %4548 = icmp ult i64 %4547, %4515
  %4549 = icmp ult i64 %4547, %4546
  %4550 = or i1 %4548, %4549
  %4551 = zext i1 %4550 to i8
  store i8 %4551, i8* %14, align 1
  %4552 = trunc i64 %4547 to i32
  %4553 = and i32 %4552, 248
  %4554 = tail call i32 @llvm.ctpop.i32(i32 %4553)
  %4555 = trunc i32 %4554 to i8
  %4556 = and i8 %4555, 1
  %4557 = xor i8 %4556, 1
  store i8 %4557, i8* %21, align 1
  %4558 = xor i64 %4546, %4515
  %4559 = xor i64 %4558, %4547
  %4560 = lshr i64 %4559, 4
  %4561 = trunc i64 %4560 to i8
  %4562 = and i8 %4561, 1
  store i8 %4562, i8* %26, align 1
  %4563 = icmp eq i64 %4547, 0
  %4564 = zext i1 %4563 to i8
  store i8 %4564, i8* %29, align 1
  %4565 = lshr i64 %4547, 63
  %4566 = trunc i64 %4565 to i8
  store i8 %4566, i8* %32, align 1
  %4567 = lshr i64 %4545, 59
  %4568 = and i64 %4567, 1
  %4569 = xor i64 %4565, %4532
  %4570 = xor i64 %4565, %4568
  %4571 = add nuw nsw i64 %4569, %4570
  %4572 = icmp eq i64 %4571, 2
  %4573 = zext i1 %4572 to i8
  store i8 %4573, i8* %38, align 1
  %4574 = load i64, i64* %RBP.i, align 8
  %4575 = add i64 %4574, -24
  %4576 = add i64 %4508, 49
  store i64 %4576, i64* %3, align 8
  %4577 = inttoptr i64 %4575 to i32*
  %4578 = load i32, i32* %4577, align 4
  %4579 = sext i32 %4578 to i64
  store i64 %4579, i64* %R8.i3013, align 8
  %4580 = load i64, i64* %RAX.i1161, align 8
  %4581 = shl nsw i64 %4579, 2
  %4582 = add i64 %4547, %4581
  %4583 = add i64 %4508, 54
  store i64 %4583, i64* %3, align 8
  %4584 = inttoptr i64 %4582 to i32*
  %4585 = load i32, i32* %4584, align 4
  %4586 = shl i64 %4580, 32
  %4587 = ashr exact i64 %4586, 32
  %4588 = sext i32 %4585 to i64
  %4589 = mul nsw i64 %4588, %4587
  %4590 = trunc i64 %4589 to i32
  %4591 = and i64 %4589, 4294967295
  store i64 %4591, i64* %RAX.i1161, align 8
  %4592 = shl i64 %4589, 32
  %4593 = ashr exact i64 %4592, 32
  %4594 = icmp ne i64 %4593, %4589
  %4595 = zext i1 %4594 to i8
  store i8 %4595, i8* %14, align 1
  %4596 = and i32 %4590, 255
  %4597 = tail call i32 @llvm.ctpop.i32(i32 %4596)
  %4598 = trunc i32 %4597 to i8
  %4599 = and i8 %4598, 1
  %4600 = xor i8 %4599, 1
  store i8 %4600, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %4601 = lshr i32 %4590, 31
  %4602 = trunc i32 %4601 to i8
  store i8 %4602, i8* %32, align 1
  store i8 %4595, i8* %38, align 1
  %4603 = add i64 %4574, -184
  %4604 = add i64 %4508, 60
  store i64 %4604, i64* %3, align 8
  %4605 = trunc i64 %4589 to i32
  %4606 = inttoptr i64 %4603 to i32*
  %4607 = load i32, i32* %4606, align 4
  %4608 = add i32 %4607, %4605
  %4609 = zext i32 %4608 to i64
  store i64 %4609, i64* %RAX.i1161, align 8
  %4610 = icmp ult i32 %4608, %4605
  %4611 = icmp ult i32 %4608, %4607
  %4612 = or i1 %4610, %4611
  %4613 = zext i1 %4612 to i8
  store i8 %4613, i8* %14, align 1
  %4614 = and i32 %4608, 255
  %4615 = tail call i32 @llvm.ctpop.i32(i32 %4614)
  %4616 = trunc i32 %4615 to i8
  %4617 = and i8 %4616, 1
  %4618 = xor i8 %4617, 1
  store i8 %4618, i8* %21, align 1
  %4619 = xor i32 %4607, %4605
  %4620 = xor i32 %4619, %4608
  %4621 = lshr i32 %4620, 4
  %4622 = trunc i32 %4621 to i8
  %4623 = and i8 %4622, 1
  store i8 %4623, i8* %26, align 1
  %4624 = icmp eq i32 %4608, 0
  %4625 = zext i1 %4624 to i8
  store i8 %4625, i8* %29, align 1
  %4626 = lshr i32 %4608, 31
  %4627 = trunc i32 %4626 to i8
  store i8 %4627, i8* %32, align 1
  %4628 = lshr i32 %4605, 31
  %4629 = lshr i32 %4607, 31
  %4630 = xor i32 %4626, %4628
  %4631 = xor i32 %4626, %4629
  %4632 = add nuw nsw i32 %4630, %4631
  %4633 = icmp eq i32 %4632, 2
  %4634 = zext i1 %4633 to i8
  store i8 %4634, i8* %38, align 1
  %4635 = add i64 %4574, -208
  %4636 = add i64 %4508, 66
  store i64 %4636, i64* %3, align 8
  %4637 = inttoptr i64 %4635 to i32*
  %4638 = load i32, i32* %4637, align 4
  %4639 = zext i32 %4638 to i64
  store i64 %4639, i64* %RCX.i1519, align 8
  %4640 = add i64 %4508, 68
  store i64 %4640, i64* %3, align 8
  %4641 = trunc i32 %4638 to i5
  switch i5 %4641, label %4645 [
    i5 0, label %routine_sarl__cl___eax.exit1709
    i5 1, label %4642
  ]

; <label>:4642:                                   ; preds = %block_.L_40c664
  %4643 = shl nuw i64 %4609, 32
  %4644 = ashr i64 %4643, 33
  br label %4652

; <label>:4645:                                   ; preds = %block_.L_40c664
  %4646 = and i32 %4638, 31
  %4647 = zext i32 %4646 to i64
  %4648 = add nsw i64 %4647, -1
  %4649 = sext i32 %4608 to i64
  %4650 = ashr i64 %4649, %4648
  %4651 = lshr i64 %4650, 1
  br label %4652

; <label>:4652:                                   ; preds = %4645, %4642
  %4653 = phi i64 [ %4651, %4645 ], [ %4644, %4642 ]
  %4654 = phi i64 [ %4650, %4645 ], [ %4609, %4642 ]
  %4655 = trunc i64 %4654 to i8
  %4656 = and i8 %4655, 1
  %4657 = trunc i64 %4653 to i32
  %4658 = and i64 %4653, 4294967295
  store i64 %4658, i64* %RAX.i1161, align 8
  store i8 %4656, i8* %14, align 1
  %4659 = and i32 %4657, 255
  %4660 = tail call i32 @llvm.ctpop.i32(i32 %4659)
  %4661 = trunc i32 %4660 to i8
  %4662 = and i8 %4661, 1
  %4663 = xor i8 %4662, 1
  store i8 %4663, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %4664 = icmp eq i32 %4657, 0
  %4665 = zext i1 %4664 to i8
  store i8 %4665, i8* %29, align 1
  %4666 = lshr i32 %4657, 31
  %4667 = trunc i32 %4666 to i8
  store i8 %4667, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %4668 = trunc i64 %4653 to i32
  br label %routine_sarl__cl___eax.exit1709

routine_sarl__cl___eax.exit1709:                  ; preds = %4652, %block_.L_40c664
  %4669 = phi i32 [ %4668, %4652 ], [ %4608, %block_.L_40c664 ]
  %4670 = add i64 %4574, -260
  %4671 = add i64 %4508, 74
  store i64 %4671, i64* %3, align 8
  %4672 = inttoptr i64 %4670 to i32*
  store i32 %4669, i32* %4672, align 4
  %4673 = load i64, i64* %RBP.i, align 8
  %4674 = add i64 %4673, -260
  %4675 = load i64, i64* %3, align 8
  %4676 = add i64 %4675, 6
  store i64 %4676, i64* %3, align 8
  %4677 = inttoptr i64 %4674 to i32*
  %4678 = load i32, i32* %4677, align 4
  %4679 = zext i32 %4678 to i64
  store i64 %4679, i64* %RAX.i1161, align 8
  %4680 = add i64 %4673, -208
  %4681 = add i64 %4675, 12
  store i64 %4681, i64* %3, align 8
  %4682 = inttoptr i64 %4680 to i32*
  %4683 = load i32, i32* %4682, align 4
  %4684 = zext i32 %4683 to i64
  store i64 %4684, i64* %RCX.i1519, align 8
  %4685 = add i64 %4675, 14
  store i64 %4685, i64* %3, align 8
  %4686 = trunc i32 %4683 to i5
  switch i5 %4686, label %4692 [
    i5 0, label %routine_shll__cl___eax.exit1696
    i5 1, label %4687
  ]

; <label>:4687:                                   ; preds = %routine_sarl__cl___eax.exit1709
  %4688 = shl i32 %4678, 1
  %4689 = icmp slt i32 %4678, 0
  %4690 = icmp slt i32 %4688, 0
  %4691 = xor i1 %4689, %4690
  br label %4701

; <label>:4692:                                   ; preds = %routine_sarl__cl___eax.exit1709
  %4693 = and i32 %4683, 31
  %4694 = zext i32 %4693 to i64
  %4695 = add nuw nsw i64 %4694, 4294967295
  %4696 = and i64 %4695, 4294967295
  %4697 = shl i64 %4679, %4696
  %4698 = trunc i64 %4697 to i32
  %4699 = icmp slt i32 %4698, 0
  %4700 = shl i32 %4698, 1
  br label %4701

; <label>:4701:                                   ; preds = %4692, %4687
  %4702 = phi i1 [ %4689, %4687 ], [ %4699, %4692 ]
  %4703 = phi i1 [ %4691, %4687 ], [ false, %4692 ]
  %4704 = phi i32 [ %4688, %4687 ], [ %4700, %4692 ]
  %4705 = zext i32 %4704 to i64
  store i64 %4705, i64* %RAX.i1161, align 8
  %4706 = zext i1 %4702 to i8
  store i8 %4706, i8* %14, align 1
  %4707 = and i32 %4704, 254
  %4708 = tail call i32 @llvm.ctpop.i32(i32 %4707)
  %4709 = trunc i32 %4708 to i8
  %4710 = and i8 %4709, 1
  %4711 = xor i8 %4710, 1
  store i8 %4711, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %4712 = icmp eq i32 %4704, 0
  %4713 = zext i1 %4712 to i8
  store i8 %4713, i8* %29, align 1
  %4714 = lshr i32 %4704, 31
  %4715 = trunc i32 %4714 to i8
  store i8 %4715, i8* %32, align 1
  %4716 = zext i1 %4703 to i8
  store i8 %4716, i8* %38, align 1
  br label %routine_shll__cl___eax.exit1696

routine_shll__cl___eax.exit1696:                  ; preds = %4701, %routine_sarl__cl___eax.exit1709
  %4717 = add i64 %4673, -204
  %4718 = add i64 %4675, 21
  store i64 %4718, i64* %3, align 8
  %4719 = inttoptr i64 %4717 to i32*
  %4720 = load i32, i32* %4719, align 4
  %4721 = sext i32 %4720 to i64
  %4722 = shl nsw i64 %4721, 6
  store i64 %4722, i64* %R8.i3013, align 8
  %4723 = load i64, i64* %RSI.i2777, align 8
  %4724 = add i64 %4722, %4723
  store i64 %4724, i64* %RSI.i2777, align 8
  %4725 = icmp ult i64 %4724, %4723
  %4726 = icmp ult i64 %4724, %4722
  %4727 = or i1 %4725, %4726
  %4728 = zext i1 %4727 to i8
  store i8 %4728, i8* %14, align 1
  %4729 = trunc i64 %4724 to i32
  %4730 = and i32 %4729, 255
  %4731 = tail call i32 @llvm.ctpop.i32(i32 %4730)
  %4732 = trunc i32 %4731 to i8
  %4733 = and i8 %4732, 1
  %4734 = xor i8 %4733, 1
  store i8 %4734, i8* %21, align 1
  %4735 = xor i64 %4723, %4724
  %4736 = lshr i64 %4735, 4
  %4737 = trunc i64 %4736 to i8
  %4738 = and i8 %4737, 1
  store i8 %4738, i8* %26, align 1
  %4739 = icmp eq i64 %4724, 0
  %4740 = zext i1 %4739 to i8
  store i8 %4740, i8* %29, align 1
  %4741 = lshr i64 %4724, 63
  %4742 = trunc i64 %4741 to i8
  store i8 %4742, i8* %32, align 1
  %4743 = lshr i64 %4723, 63
  %4744 = lshr i64 %4721, 57
  %4745 = and i64 %4744, 1
  %4746 = xor i64 %4741, %4743
  %4747 = xor i64 %4741, %4745
  %4748 = add nuw nsw i64 %4746, %4747
  %4749 = icmp eq i64 %4748, 2
  %4750 = zext i1 %4749 to i8
  store i8 %4750, i8* %38, align 1
  %4751 = add i64 %4673, -20
  %4752 = add i64 %4675, 32
  store i64 %4752, i64* %3, align 8
  %4753 = inttoptr i64 %4751 to i32*
  %4754 = load i32, i32* %4753, align 4
  %4755 = sext i32 %4754 to i64
  %4756 = shl nsw i64 %4755, 4
  store i64 %4756, i64* %R8.i3013, align 8
  %4757 = add i64 %4756, %4724
  store i64 %4757, i64* %RSI.i2777, align 8
  %4758 = icmp ult i64 %4757, %4724
  %4759 = icmp ult i64 %4757, %4756
  %4760 = or i1 %4758, %4759
  %4761 = zext i1 %4760 to i8
  store i8 %4761, i8* %14, align 1
  %4762 = trunc i64 %4757 to i32
  %4763 = and i32 %4762, 255
  %4764 = tail call i32 @llvm.ctpop.i32(i32 %4763)
  %4765 = trunc i32 %4764 to i8
  %4766 = and i8 %4765, 1
  %4767 = xor i8 %4766, 1
  store i8 %4767, i8* %21, align 1
  %4768 = xor i64 %4756, %4724
  %4769 = xor i64 %4768, %4757
  %4770 = lshr i64 %4769, 4
  %4771 = trunc i64 %4770 to i8
  %4772 = and i8 %4771, 1
  store i8 %4772, i8* %26, align 1
  %4773 = icmp eq i64 %4757, 0
  %4774 = zext i1 %4773 to i8
  store i8 %4774, i8* %29, align 1
  %4775 = lshr i64 %4757, 63
  %4776 = trunc i64 %4775 to i8
  store i8 %4776, i8* %32, align 1
  %4777 = lshr i64 %4755, 59
  %4778 = and i64 %4777, 1
  %4779 = xor i64 %4775, %4741
  %4780 = xor i64 %4775, %4778
  %4781 = add nuw nsw i64 %4779, %4780
  %4782 = icmp eq i64 %4781, 2
  %4783 = zext i1 %4782 to i8
  store i8 %4783, i8* %38, align 1
  %4784 = load i64, i64* %RBP.i, align 8
  %4785 = add i64 %4784, -24
  %4786 = add i64 %4675, 43
  store i64 %4786, i64* %3, align 8
  %4787 = inttoptr i64 %4785 to i32*
  %4788 = load i32, i32* %4787, align 4
  %4789 = sext i32 %4788 to i64
  store i64 %4789, i64* %R8.i3013, align 8
  %4790 = add i64 %4784, -328
  %4791 = load i64, i64* %RDX.i1748, align 8
  %4792 = add i64 %4675, 50
  store i64 %4792, i64* %3, align 8
  %4793 = inttoptr i64 %4790 to i64*
  store i64 %4791, i64* %4793, align 8
  %4794 = load i64, i64* %3, align 8
  %4795 = load i32, i32* %EAX.i2800, align 8
  %4796 = sext i32 %4795 to i64
  %4797 = lshr i64 %4796, 32
  store i64 %4797, i64* %93, align 8
  %4798 = load i64, i64* %RSI.i2777, align 8
  %4799 = load i64, i64* %R8.i3013, align 8
  %4800 = shl i64 %4799, 2
  %4801 = add i64 %4800, %4798
  %4802 = add i64 %4794, 5
  store i64 %4802, i64* %3, align 8
  %4803 = zext i32 %4795 to i64
  %4804 = inttoptr i64 %4801 to i32*
  %4805 = load i32, i32* %4804, align 4
  %4806 = sext i32 %4805 to i64
  %4807 = shl nuw i64 %4797, 32
  %4808 = or i64 %4807, %4803
  %4809 = sdiv i64 %4808, %4806
  %4810 = shl i64 %4809, 32
  %4811 = ashr exact i64 %4810, 32
  %4812 = icmp eq i64 %4809, %4811
  br i1 %4812, label %4815, label %4813

; <label>:4813:                                   ; preds = %routine_shll__cl___eax.exit1696
  %4814 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4802, %struct.Memory* %4505)
  %.pre206 = load i32, i32* %EAX.i2800, align 4
  %.pre207 = load i64, i64* %3, align 8
  br label %routine_idivl___rsi__r8_4_.exit

; <label>:4815:                                   ; preds = %routine_shll__cl___eax.exit1696
  %4816 = srem i64 %4808, %4806
  %4817 = and i64 %4809, 4294967295
  store i64 %4817, i64* %RAX.i1161, align 8
  %4818 = and i64 %4816, 4294967295
  store i64 %4818, i64* %RDX.i1748, align 8
  store i8 0, i8* %14, align 1
  store i8 0, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %4819 = trunc i64 %4809 to i32
  br label %routine_idivl___rsi__r8_4_.exit

routine_idivl___rsi__r8_4_.exit:                  ; preds = %4815, %4813
  %4820 = phi i64 [ %.pre207, %4813 ], [ %4802, %4815 ]
  %4821 = phi i32 [ %.pre206, %4813 ], [ %4819, %4815 ]
  %4822 = phi %struct.Memory* [ %4814, %4813 ], [ %4505, %4815 ]
  %4823 = load i64, i64* %RBP.i, align 8
  %4824 = add i64 %4823, -260
  %4825 = add i64 %4820, 6
  store i64 %4825, i64* %3, align 8
  %4826 = inttoptr i64 %4824 to i32*
  store i32 %4821, i32* %4826, align 4
  %4827 = load i64, i64* %3, align 8
  %4828 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %4829 = add i64 %4828, 13112
  store i64 %4829, i64* %RSI.i2777, align 8
  %4830 = icmp ugt i64 %4828, -13113
  %4831 = zext i1 %4830 to i8
  store i8 %4831, i8* %14, align 1
  %4832 = trunc i64 %4829 to i32
  %4833 = and i32 %4832, 255
  %4834 = tail call i32 @llvm.ctpop.i32(i32 %4833)
  %4835 = trunc i32 %4834 to i8
  %4836 = and i8 %4835, 1
  %4837 = xor i8 %4836, 1
  store i8 %4837, i8* %21, align 1
  %4838 = xor i64 %4828, 16
  %4839 = xor i64 %4838, %4829
  %4840 = lshr i64 %4839, 4
  %4841 = trunc i64 %4840 to i8
  %4842 = and i8 %4841, 1
  store i8 %4842, i8* %26, align 1
  %4843 = icmp eq i64 %4829, 0
  %4844 = zext i1 %4843 to i8
  store i8 %4844, i8* %29, align 1
  %4845 = lshr i64 %4829, 63
  %4846 = trunc i64 %4845 to i8
  store i8 %4846, i8* %32, align 1
  %4847 = lshr i64 %4828, 63
  %4848 = xor i64 %4845, %4847
  %4849 = add nuw nsw i64 %4848, %4845
  %4850 = icmp eq i64 %4849, 2
  %4851 = zext i1 %4850 to i8
  store i8 %4851, i8* %38, align 1
  %4852 = load i64, i64* %RBP.i, align 8
  %4853 = add i64 %4852, -20
  %4854 = add i64 %4827, 19
  store i64 %4854, i64* %3, align 8
  %4855 = inttoptr i64 %4853 to i32*
  %4856 = load i32, i32* %4855, align 4
  %4857 = sext i32 %4856 to i64
  %4858 = shl nsw i64 %4857, 6
  store i64 %4858, i64* %R8.i3013, align 8
  %4859 = add i64 %4858, %4829
  store i64 %4859, i64* %RSI.i2777, align 8
  %4860 = icmp ult i64 %4859, %4829
  %4861 = icmp ult i64 %4859, %4858
  %4862 = or i1 %4860, %4861
  %4863 = zext i1 %4862 to i8
  store i8 %4863, i8* %14, align 1
  %4864 = trunc i64 %4859 to i32
  %4865 = and i32 %4864, 255
  %4866 = tail call i32 @llvm.ctpop.i32(i32 %4865)
  %4867 = trunc i32 %4866 to i8
  %4868 = and i8 %4867, 1
  %4869 = xor i8 %4868, 1
  store i8 %4869, i8* %21, align 1
  %4870 = xor i64 %4829, %4859
  %4871 = lshr i64 %4870, 4
  %4872 = trunc i64 %4871 to i8
  %4873 = and i8 %4872, 1
  store i8 %4873, i8* %26, align 1
  %4874 = icmp eq i64 %4859, 0
  %4875 = zext i1 %4874 to i8
  store i8 %4875, i8* %29, align 1
  %4876 = lshr i64 %4859, 63
  %4877 = trunc i64 %4876 to i8
  store i8 %4877, i8* %32, align 1
  %4878 = lshr i64 %4857, 57
  %4879 = and i64 %4878, 1
  %4880 = xor i64 %4876, %4845
  %4881 = xor i64 %4876, %4879
  %4882 = add nuw nsw i64 %4880, %4881
  %4883 = icmp eq i64 %4882, 2
  %4884 = zext i1 %4883 to i8
  store i8 %4884, i8* %38, align 1
  %4885 = add i64 %4852, -24
  %4886 = add i64 %4827, 30
  store i64 %4886, i64* %3, align 8
  %4887 = inttoptr i64 %4885 to i32*
  %4888 = load i32, i32* %4887, align 4
  %4889 = sext i32 %4888 to i64
  store i64 %4889, i64* %R8.i3013, align 8
  %4890 = shl nsw i64 %4889, 2
  %4891 = add i64 %4890, %4859
  %4892 = add i64 %4827, 34
  store i64 %4892, i64* %3, align 8
  %4893 = inttoptr i64 %4891 to i32*
  %4894 = load i32, i32* %4893, align 4
  %4895 = zext i32 %4894 to i64
  store i64 %4895, i64* %RAX.i1161, align 8
  %4896 = add i64 %4852, -260
  %4897 = add i64 %4827, 40
  store i64 %4897, i64* %3, align 8
  %4898 = inttoptr i64 %4896 to i32*
  %4899 = load i32, i32* %4898, align 4
  %4900 = zext i32 %4899 to i64
  store i64 %4900, i64* %RDI.i2913, align 8
  %4901 = add i64 %4827, 44
  store i64 %4901, i64* %3, align 8
  %4902 = load i32, i32* %4855, align 4
  %4903 = sext i32 %4902 to i64
  %4904 = shl nsw i64 %4903, 4
  store i64 %4904, i64* %RSI.i2777, align 8
  %.lobit84 = lshr i32 %4902, 31
  %4905 = trunc i32 %.lobit84 to i8
  store i8 %4905, i8* %14, align 1
  %4906 = trunc i64 %4904 to i32
  %4907 = and i32 %4906, 240
  %4908 = tail call i32 @llvm.ctpop.i32(i32 %4907)
  %4909 = trunc i32 %4908 to i8
  %4910 = and i8 %4909, 1
  %4911 = xor i8 %4910, 1
  store i8 %4911, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %4912 = icmp eq i32 %4902, 0
  %4913 = zext i1 %4912 to i8
  store i8 %4913, i8* %29, align 1
  %4914 = lshr i64 %4903, 59
  %4915 = trunc i64 %4914 to i8
  %4916 = and i8 %4915, 1
  store i8 %4916, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %4917 = load i64, i64* %RBP.i, align 8
  %4918 = add i64 %4917, -328
  %4919 = add i64 %4827, 55
  store i64 %4919, i64* %3, align 8
  %4920 = inttoptr i64 %4918 to i64*
  %4921 = load i64, i64* %4920, align 8
  %4922 = add i64 %4904, %4921
  store i64 %4922, i64* %R8.i3013, align 8
  %4923 = icmp ult i64 %4922, %4921
  %4924 = icmp ult i64 %4922, %4904
  %4925 = or i1 %4923, %4924
  %4926 = zext i1 %4925 to i8
  store i8 %4926, i8* %14, align 1
  %4927 = trunc i64 %4922 to i32
  %4928 = and i32 %4927, 255
  %4929 = tail call i32 @llvm.ctpop.i32(i32 %4928)
  %4930 = trunc i32 %4929 to i8
  %4931 = and i8 %4930, 1
  %4932 = xor i8 %4931, 1
  store i8 %4932, i8* %21, align 1
  %4933 = xor i64 %4904, %4921
  %4934 = xor i64 %4933, %4922
  %4935 = lshr i64 %4934, 4
  %4936 = trunc i64 %4935 to i8
  %4937 = and i8 %4936, 1
  store i8 %4937, i8* %26, align 1
  %4938 = icmp eq i64 %4922, 0
  %4939 = zext i1 %4938 to i8
  store i8 %4939, i8* %29, align 1
  %4940 = lshr i64 %4922, 63
  %4941 = trunc i64 %4940 to i8
  store i8 %4941, i8* %32, align 1
  %4942 = lshr i64 %4921, 63
  %4943 = lshr i64 %4903, 59
  %4944 = and i64 %4943, 1
  %4945 = xor i64 %4940, %4942
  %4946 = xor i64 %4940, %4944
  %4947 = add nuw nsw i64 %4945, %4946
  %4948 = icmp eq i64 %4947, 2
  %4949 = zext i1 %4948 to i8
  store i8 %4949, i8* %38, align 1
  %4950 = add i64 %4917, -24
  %4951 = add i64 %4827, 62
  store i64 %4951, i64* %3, align 8
  %4952 = inttoptr i64 %4950 to i32*
  %4953 = load i32, i32* %4952, align 4
  %4954 = sext i32 %4953 to i64
  store i64 %4954, i64* %RSI.i2777, align 8
  %4955 = shl nsw i64 %4954, 2
  %4956 = add i64 %4955, %4922
  %4957 = add i64 %4827, 66
  store i64 %4957, i64* %3, align 8
  %4958 = inttoptr i64 %4956 to i32*
  %4959 = load i32, i32* %4958, align 4
  %4960 = zext i32 %4959 to i64
  store i64 %4960, i64* %RSI.i2777, align 8
  %4961 = add i64 %4917, -332
  %4962 = add i64 %4827, 72
  store i64 %4962, i64* %3, align 8
  %4963 = inttoptr i64 %4961 to i32*
  store i32 %4894, i32* %4963, align 4
  %4964 = load i64, i64* %3, align 8
  %4965 = add i64 %4964, 428527
  %4966 = add i64 %4964, 5
  %4967 = load i64, i64* %6, align 8
  %4968 = add i64 %4967, -8
  %4969 = inttoptr i64 %4968 to i64*
  store i64 %4966, i64* %4969, align 8
  store i64 %4968, i64* %6, align 8
  store i64 %4965, i64* %3, align 8
  %call2_40c761 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %4965, %struct.Memory* %4822)
  %4970 = load i64, i64* %RBP.i, align 8
  %4971 = add i64 %4970, -332
  %4972 = load i64, i64* %3, align 8
  %4973 = add i64 %4972, 6
  store i64 %4973, i64* %3, align 8
  %4974 = inttoptr i64 %4971 to i32*
  %4975 = load i32, i32* %4974, align 4
  %4976 = load i32, i32* %EAX.i2800, align 4
  %4977 = sub i32 %4975, %4976
  %4978 = zext i32 %4977 to i64
  store i64 %4978, i64* %RSI.i2777, align 8
  %4979 = icmp ult i32 %4975, %4976
  %4980 = zext i1 %4979 to i8
  store i8 %4980, i8* %14, align 1
  %4981 = and i32 %4977, 255
  %4982 = tail call i32 @llvm.ctpop.i32(i32 %4981)
  %4983 = trunc i32 %4982 to i8
  %4984 = and i8 %4983, 1
  %4985 = xor i8 %4984, 1
  store i8 %4985, i8* %21, align 1
  %4986 = xor i32 %4976, %4975
  %4987 = xor i32 %4986, %4977
  %4988 = lshr i32 %4987, 4
  %4989 = trunc i32 %4988 to i8
  %4990 = and i8 %4989, 1
  store i8 %4990, i8* %26, align 1
  %4991 = icmp eq i32 %4977, 0
  %4992 = zext i1 %4991 to i8
  store i8 %4992, i8* %29, align 1
  %4993 = lshr i32 %4977, 31
  %4994 = trunc i32 %4993 to i8
  store i8 %4994, i8* %32, align 1
  %4995 = lshr i32 %4975, 31
  %4996 = lshr i32 %4976, 31
  %4997 = xor i32 %4996, %4995
  %4998 = xor i32 %4993, %4995
  %4999 = add nuw nsw i32 %4998, %4997
  %5000 = icmp eq i32 %4999, 2
  %5001 = zext i1 %5000 to i8
  store i8 %5001, i8* %38, align 1
  %5002 = add i64 %4970, -252
  %5003 = add i64 %4972, 14
  store i64 %5003, i64* %3, align 8
  %5004 = inttoptr i64 %5002 to i32*
  store i32 %4977, i32* %5004, align 4
  %5005 = load i64, i64* %RBP.i, align 8
  %5006 = add i64 %5005, -252
  %5007 = load i64, i64* %3, align 8
  %5008 = add i64 %5007, 6
  store i64 %5008, i64* %3, align 8
  %5009 = inttoptr i64 %5006 to i32*
  %5010 = load i32, i32* %5009, align 4
  %5011 = zext i32 %5010 to i64
  store i64 %5011, i64* %RDI.i2913, align 8
  %5012 = add i64 %5007, -46964
  %5013 = add i64 %5007, 11
  %5014 = load i64, i64* %6, align 8
  %5015 = add i64 %5014, -8
  %5016 = inttoptr i64 %5015 to i64*
  store i64 %5013, i64* %5016, align 8
  store i64 %5015, i64* %6, align 8
  store i64 %5012, i64* %3, align 8
  %5017 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %call2_40c761)
  %5018 = load i64, i64* %RBP.i, align 8
  %5019 = add i64 %5018, -176
  %5020 = load i64, i64* %3, align 8
  store i64 %5019, i64* %R8.i3013, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R9.i3009, align 8
  %5021 = add i64 %5018, -192
  %5022 = add i64 %5020, 24
  store i64 %5022, i64* %3, align 8
  %5023 = inttoptr i64 %5021 to i32*
  %5024 = load i32, i32* %5023, align 4
  %5025 = sext i32 %5024 to i64
  %5026 = shl nsw i64 %5025, 6
  store i64 %5026, i64* %R10.i1596, align 8
  %5027 = add i64 %5026, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %5027, i64* %R9.i3009, align 8
  %5028 = icmp ult i64 %5027, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %5029 = icmp ult i64 %5027, %5026
  %5030 = or i1 %5028, %5029
  %5031 = zext i1 %5030 to i8
  store i8 %5031, i8* %14, align 1
  %5032 = trunc i64 %5027 to i32
  %5033 = and i32 %5032, 248
  %5034 = tail call i32 @llvm.ctpop.i32(i32 %5033)
  %5035 = trunc i32 %5034 to i8
  %5036 = and i8 %5035, 1
  %5037 = xor i8 %5036, 1
  store i8 %5037, i8* %21, align 1
  %5038 = xor i64 %5027, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %5039 = lshr i64 %5038, 4
  %5040 = trunc i64 %5039 to i8
  %5041 = and i8 %5040, 1
  store i8 %5041, i8* %26, align 1
  %5042 = icmp eq i64 %5027, 0
  %5043 = zext i1 %5042 to i8
  store i8 %5043, i8* %29, align 1
  %5044 = lshr i64 %5027, 63
  %5045 = trunc i64 %5044 to i8
  store i8 %5045, i8* %32, align 1
  %5046 = lshr i64 %5025, 57
  %5047 = and i64 %5046, 1
  %5048 = xor i64 %5044, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %5049 = xor i64 %5044, %5047
  %5050 = add nuw nsw i64 %5048, %5049
  %5051 = icmp eq i64 %5050, 2
  %5052 = zext i1 %5051 to i8
  store i8 %5052, i8* %38, align 1
  %5053 = add i64 %5018, -20
  %5054 = add i64 %5020, 35
  store i64 %5054, i64* %3, align 8
  %5055 = inttoptr i64 %5053 to i32*
  %5056 = load i32, i32* %5055, align 4
  %5057 = sext i32 %5056 to i64
  %5058 = shl nsw i64 %5057, 4
  store i64 %5058, i64* %R10.i1596, align 8
  %5059 = add i64 %5058, %5027
  store i64 %5059, i64* %R9.i3009, align 8
  %5060 = icmp ult i64 %5059, %5027
  %5061 = icmp ult i64 %5059, %5058
  %5062 = or i1 %5060, %5061
  %5063 = zext i1 %5062 to i8
  store i8 %5063, i8* %14, align 1
  %5064 = trunc i64 %5059 to i32
  %5065 = and i32 %5064, 248
  %5066 = tail call i32 @llvm.ctpop.i32(i32 %5065)
  %5067 = trunc i32 %5066 to i8
  %5068 = and i8 %5067, 1
  %5069 = xor i8 %5068, 1
  store i8 %5069, i8* %21, align 1
  %5070 = xor i64 %5058, %5027
  %5071 = xor i64 %5070, %5059
  %5072 = lshr i64 %5071, 4
  %5073 = trunc i64 %5072 to i8
  %5074 = and i8 %5073, 1
  store i8 %5074, i8* %26, align 1
  %5075 = icmp eq i64 %5059, 0
  %5076 = zext i1 %5075 to i8
  store i8 %5076, i8* %29, align 1
  %5077 = lshr i64 %5059, 63
  %5078 = trunc i64 %5077 to i8
  store i8 %5078, i8* %32, align 1
  %5079 = lshr i64 %5057, 59
  %5080 = and i64 %5079, 1
  %5081 = xor i64 %5077, %5044
  %5082 = xor i64 %5077, %5080
  %5083 = add nuw nsw i64 %5081, %5082
  %5084 = icmp eq i64 %5083, 2
  %5085 = zext i1 %5084 to i8
  store i8 %5085, i8* %38, align 1
  %5086 = load i64, i64* %RBP.i, align 8
  %5087 = add i64 %5086, -24
  %5088 = add i64 %5020, 46
  store i64 %5088, i64* %3, align 8
  %5089 = inttoptr i64 %5087 to i32*
  %5090 = load i32, i32* %5089, align 4
  %5091 = sext i32 %5090 to i64
  store i64 %5091, i64* %R10.i1596, align 8
  %5092 = load i64, i64* %RAX.i1161, align 8
  %5093 = shl nsw i64 %5091, 2
  %5094 = add i64 %5059, %5093
  %5095 = add i64 %5020, 51
  store i64 %5095, i64* %3, align 8
  %5096 = inttoptr i64 %5094 to i32*
  %5097 = load i32, i32* %5096, align 4
  %5098 = shl i64 %5092, 32
  %5099 = ashr exact i64 %5098, 32
  %5100 = sext i32 %5097 to i64
  %5101 = mul nsw i64 %5100, %5099
  %5102 = trunc i64 %5101 to i32
  %5103 = and i64 %5101, 4294967295
  store i64 %5103, i64* %RAX.i1161, align 8
  %5104 = shl i64 %5101, 32
  %5105 = ashr exact i64 %5104, 32
  %5106 = icmp ne i64 %5105, %5101
  %5107 = zext i1 %5106 to i8
  store i8 %5107, i8* %14, align 1
  %5108 = and i32 %5102, 255
  %5109 = tail call i32 @llvm.ctpop.i32(i32 %5108)
  %5110 = trunc i32 %5109 to i8
  %5111 = and i8 %5110, 1
  %5112 = xor i8 %5111, 1
  store i8 %5112, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %5113 = lshr i32 %5102, 31
  %5114 = trunc i32 %5113 to i8
  store i8 %5114, i8* %32, align 1
  store i8 %5107, i8* %38, align 1
  %5115 = add i64 %5086, -88
  %5116 = add i64 %5020, 54
  store i64 %5116, i64* %3, align 8
  %5117 = trunc i64 %5101 to i32
  %5118 = inttoptr i64 %5115 to i32*
  %5119 = load i32, i32* %5118, align 4
  %5120 = add i32 %5119, %5117
  %5121 = zext i32 %5120 to i64
  store i64 %5121, i64* %RAX.i1161, align 8
  %5122 = icmp ult i32 %5120, %5117
  %5123 = icmp ult i32 %5120, %5119
  %5124 = or i1 %5122, %5123
  %5125 = zext i1 %5124 to i8
  store i8 %5125, i8* %14, align 1
  %5126 = and i32 %5120, 255
  %5127 = tail call i32 @llvm.ctpop.i32(i32 %5126)
  %5128 = trunc i32 %5127 to i8
  %5129 = and i8 %5128, 1
  %5130 = xor i8 %5129, 1
  store i8 %5130, i8* %21, align 1
  %5131 = xor i32 %5119, %5117
  %5132 = xor i32 %5131, %5120
  %5133 = lshr i32 %5132, 4
  %5134 = trunc i32 %5133 to i8
  %5135 = and i8 %5134, 1
  store i8 %5135, i8* %26, align 1
  %5136 = icmp eq i32 %5120, 0
  %5137 = zext i1 %5136 to i8
  store i8 %5137, i8* %29, align 1
  %5138 = lshr i32 %5120, 31
  %5139 = trunc i32 %5138 to i8
  store i8 %5139, i8* %32, align 1
  %5140 = lshr i32 %5117, 31
  %5141 = lshr i32 %5119, 31
  %5142 = xor i32 %5138, %5140
  %5143 = xor i32 %5138, %5141
  %5144 = add nuw nsw i32 %5142, %5143
  %5145 = icmp eq i32 %5144, 2
  %5146 = zext i1 %5145 to i8
  store i8 %5146, i8* %38, align 1
  %5147 = add i64 %5086, -196
  %5148 = add i64 %5020, 60
  store i64 %5148, i64* %3, align 8
  %5149 = inttoptr i64 %5147 to i32*
  %5150 = load i32, i32* %5149, align 4
  %5151 = zext i32 %5150 to i64
  store i64 %5151, i64* %RCX.i1519, align 8
  %5152 = add i64 %5020, 62
  store i64 %5152, i64* %3, align 8
  %5153 = trunc i32 %5150 to i5
  switch i5 %5153, label %5157 [
    i5 0, label %routine_sarl__cl___eax.exit1567
    i5 1, label %5154
  ]

; <label>:5154:                                   ; preds = %routine_idivl___rsi__r8_4_.exit
  %5155 = shl nuw i64 %5121, 32
  %5156 = ashr i64 %5155, 33
  br label %5164

; <label>:5157:                                   ; preds = %routine_idivl___rsi__r8_4_.exit
  %5158 = and i32 %5150, 31
  %5159 = zext i32 %5158 to i64
  %5160 = add nsw i64 %5159, -1
  %5161 = sext i32 %5120 to i64
  %5162 = ashr i64 %5161, %5160
  %5163 = lshr i64 %5162, 1
  br label %5164

; <label>:5164:                                   ; preds = %5157, %5154
  %5165 = phi i64 [ %5163, %5157 ], [ %5156, %5154 ]
  %5166 = phi i64 [ %5162, %5157 ], [ %5121, %5154 ]
  %5167 = trunc i64 %5166 to i8
  %5168 = and i8 %5167, 1
  %5169 = trunc i64 %5165 to i32
  %5170 = and i64 %5165, 4294967295
  store i64 %5170, i64* %RAX.i1161, align 8
  store i8 %5168, i8* %14, align 1
  %5171 = and i32 %5169, 255
  %5172 = tail call i32 @llvm.ctpop.i32(i32 %5171)
  %5173 = trunc i32 %5172 to i8
  %5174 = and i8 %5173, 1
  %5175 = xor i8 %5174, 1
  store i8 %5175, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %5176 = icmp eq i32 %5169, 0
  %5177 = zext i1 %5176 to i8
  store i8 %5177, i8* %29, align 1
  %5178 = lshr i32 %5169, 31
  %5179 = trunc i32 %5178 to i8
  store i8 %5179, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5180 = trunc i64 %5165 to i32
  br label %routine_sarl__cl___eax.exit1567

routine_sarl__cl___eax.exit1567:                  ; preds = %5164, %routine_idivl___rsi__r8_4_.exit
  %5181 = phi i32 [ %5180, %5164 ], [ %5120, %routine_idivl___rsi__r8_4_.exit ]
  %5182 = add i64 %5086, -260
  %5183 = add i64 %5020, 68
  store i64 %5183, i64* %3, align 8
  %5184 = inttoptr i64 %5182 to i32*
  store i32 %5181, i32* %5184, align 4
  %5185 = load i64, i64* %3, align 8
  %5186 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %5187 = add i64 %5186, 13112
  store i64 %5187, i64* %R9.i3009, align 8
  %5188 = icmp ugt i64 %5186, -13113
  %5189 = zext i1 %5188 to i8
  store i8 %5189, i8* %14, align 1
  %5190 = trunc i64 %5187 to i32
  %5191 = and i32 %5190, 255
  %5192 = tail call i32 @llvm.ctpop.i32(i32 %5191)
  %5193 = trunc i32 %5192 to i8
  %5194 = and i8 %5193, 1
  %5195 = xor i8 %5194, 1
  store i8 %5195, i8* %21, align 1
  %5196 = xor i64 %5186, 16
  %5197 = xor i64 %5196, %5187
  %5198 = lshr i64 %5197, 4
  %5199 = trunc i64 %5198 to i8
  %5200 = and i8 %5199, 1
  store i8 %5200, i8* %26, align 1
  %5201 = icmp eq i64 %5187, 0
  %5202 = zext i1 %5201 to i8
  store i8 %5202, i8* %29, align 1
  %5203 = lshr i64 %5187, 63
  %5204 = trunc i64 %5203 to i8
  store i8 %5204, i8* %32, align 1
  %5205 = lshr i64 %5186, 63
  %5206 = xor i64 %5203, %5205
  %5207 = add nuw nsw i64 %5206, %5203
  %5208 = icmp eq i64 %5207, 2
  %5209 = zext i1 %5208 to i8
  store i8 %5209, i8* %38, align 1
  %5210 = load i64, i64* %RBP.i, align 8
  %5211 = add i64 %5210, -20
  %5212 = add i64 %5185, 19
  store i64 %5212, i64* %3, align 8
  %5213 = inttoptr i64 %5211 to i32*
  %5214 = load i32, i32* %5213, align 4
  %5215 = sext i32 %5214 to i64
  %5216 = shl nsw i64 %5215, 6
  store i64 %5216, i64* %R10.i1596, align 8
  %5217 = add i64 %5216, %5187
  store i64 %5217, i64* %R9.i3009, align 8
  %5218 = icmp ult i64 %5217, %5187
  %5219 = icmp ult i64 %5217, %5216
  %5220 = or i1 %5218, %5219
  %5221 = zext i1 %5220 to i8
  store i8 %5221, i8* %14, align 1
  %5222 = trunc i64 %5217 to i32
  %5223 = and i32 %5222, 255
  %5224 = tail call i32 @llvm.ctpop.i32(i32 %5223)
  %5225 = trunc i32 %5224 to i8
  %5226 = and i8 %5225, 1
  %5227 = xor i8 %5226, 1
  store i8 %5227, i8* %21, align 1
  %5228 = xor i64 %5187, %5217
  %5229 = lshr i64 %5228, 4
  %5230 = trunc i64 %5229 to i8
  %5231 = and i8 %5230, 1
  store i8 %5231, i8* %26, align 1
  %5232 = icmp eq i64 %5217, 0
  %5233 = zext i1 %5232 to i8
  store i8 %5233, i8* %29, align 1
  %5234 = lshr i64 %5217, 63
  %5235 = trunc i64 %5234 to i8
  store i8 %5235, i8* %32, align 1
  %5236 = lshr i64 %5215, 57
  %5237 = and i64 %5236, 1
  %5238 = xor i64 %5234, %5203
  %5239 = xor i64 %5234, %5237
  %5240 = add nuw nsw i64 %5238, %5239
  %5241 = icmp eq i64 %5240, 2
  %5242 = zext i1 %5241 to i8
  store i8 %5242, i8* %38, align 1
  %5243 = add i64 %5210, -24
  %5244 = add i64 %5185, 30
  store i64 %5244, i64* %3, align 8
  %5245 = inttoptr i64 %5243 to i32*
  %5246 = load i32, i32* %5245, align 4
  %5247 = sext i32 %5246 to i64
  store i64 %5247, i64* %R10.i1596, align 8
  %5248 = shl nsw i64 %5247, 2
  %5249 = add i64 %5248, %5217
  %5250 = add i64 %5185, 34
  store i64 %5250, i64* %3, align 8
  %5251 = inttoptr i64 %5249 to i32*
  %5252 = load i32, i32* %5251, align 4
  %5253 = zext i32 %5252 to i64
  store i64 %5253, i64* %RAX.i1161, align 8
  %5254 = add i64 %5185, 38
  store i64 %5254, i64* %3, align 8
  %5255 = load i32, i32* %5213, align 4
  %5256 = sext i32 %5255 to i64
  %5257 = shl nsw i64 %5256, 4
  store i64 %5257, i64* %R9.i3009, align 8
  %5258 = load i64, i64* %R8.i3013, align 8
  %5259 = add i64 %5257, %5258
  store i64 %5259, i64* %R8.i3013, align 8
  %5260 = icmp ult i64 %5259, %5258
  %5261 = icmp ult i64 %5259, %5257
  %5262 = or i1 %5260, %5261
  %5263 = zext i1 %5262 to i8
  store i8 %5263, i8* %14, align 1
  %5264 = trunc i64 %5259 to i32
  %5265 = and i32 %5264, 255
  %5266 = tail call i32 @llvm.ctpop.i32(i32 %5265)
  %5267 = trunc i32 %5266 to i8
  %5268 = and i8 %5267, 1
  %5269 = xor i8 %5268, 1
  store i8 %5269, i8* %21, align 1
  %5270 = xor i64 %5257, %5258
  %5271 = xor i64 %5270, %5259
  %5272 = lshr i64 %5271, 4
  %5273 = trunc i64 %5272 to i8
  %5274 = and i8 %5273, 1
  store i8 %5274, i8* %26, align 1
  %5275 = icmp eq i64 %5259, 0
  %5276 = zext i1 %5275 to i8
  store i8 %5276, i8* %29, align 1
  %5277 = lshr i64 %5259, 63
  %5278 = trunc i64 %5277 to i8
  store i8 %5278, i8* %32, align 1
  %5279 = lshr i64 %5258, 63
  %5280 = lshr i64 %5256, 59
  %5281 = and i64 %5280, 1
  %5282 = xor i64 %5277, %5279
  %5283 = xor i64 %5277, %5281
  %5284 = add nuw nsw i64 %5282, %5283
  %5285 = icmp eq i64 %5284, 2
  %5286 = zext i1 %5285 to i8
  store i8 %5286, i8* %38, align 1
  %5287 = load i64, i64* %RBP.i, align 8
  %5288 = add i64 %5287, -24
  %5289 = add i64 %5185, 49
  store i64 %5289, i64* %3, align 8
  %5290 = inttoptr i64 %5288 to i32*
  %5291 = load i32, i32* %5290, align 4
  %5292 = sext i32 %5291 to i64
  store i64 %5292, i64* %R9.i3009, align 8
  %5293 = shl nsw i64 %5292, 2
  %5294 = add i64 %5259, %5293
  %5295 = add i64 %5185, 53
  store i64 %5295, i64* %3, align 8
  %5296 = inttoptr i64 %5294 to i32*
  %5297 = load i32, i32* %5296, align 4
  %5298 = sub i32 %5252, %5297
  %5299 = zext i32 %5298 to i64
  store i64 %5299, i64* %RAX.i1161, align 8
  %5300 = icmp ult i32 %5252, %5297
  %5301 = zext i1 %5300 to i8
  store i8 %5301, i8* %14, align 1
  %5302 = and i32 %5298, 255
  %5303 = tail call i32 @llvm.ctpop.i32(i32 %5302)
  %5304 = trunc i32 %5303 to i8
  %5305 = and i8 %5304, 1
  %5306 = xor i8 %5305, 1
  store i8 %5306, i8* %21, align 1
  %5307 = xor i32 %5297, %5252
  %5308 = xor i32 %5307, %5298
  %5309 = lshr i32 %5308, 4
  %5310 = trunc i32 %5309 to i8
  %5311 = and i8 %5310, 1
  store i8 %5311, i8* %26, align 1
  %5312 = icmp eq i32 %5298, 0
  %5313 = zext i1 %5312 to i8
  store i8 %5313, i8* %29, align 1
  %5314 = lshr i32 %5298, 31
  %5315 = trunc i32 %5314 to i8
  store i8 %5315, i8* %32, align 1
  %5316 = lshr i32 %5252, 31
  %5317 = lshr i32 %5297, 31
  %5318 = xor i32 %5317, %5316
  %5319 = xor i32 %5314, %5316
  %5320 = add nuw nsw i32 %5319, %5318
  %5321 = icmp eq i32 %5320, 2
  %5322 = zext i1 %5321 to i8
  store i8 %5322, i8* %38, align 1
  %5323 = add i64 %5287, -256
  %5324 = add i64 %5185, 59
  store i64 %5324, i64* %3, align 8
  %5325 = inttoptr i64 %5323 to i32*
  store i32 %5298, i32* %5325, align 4
  %5326 = load i64, i64* %RBP.i, align 8
  %5327 = add i64 %5326, -256
  %5328 = load i64, i64* %3, align 8
  %5329 = add i64 %5328, 6
  store i64 %5329, i64* %3, align 8
  %5330 = inttoptr i64 %5327 to i32*
  %5331 = load i32, i32* %5330, align 4
  %5332 = zext i32 %5331 to i64
  store i64 %5332, i64* %RDI.i2913, align 8
  %5333 = add i64 %5328, -47102
  %5334 = add i64 %5328, 11
  %5335 = load i64, i64* %6, align 8
  %5336 = add i64 %5335, -8
  %5337 = inttoptr i64 %5336 to i64*
  store i64 %5334, i64* %5337, align 8
  store i64 %5336, i64* %6, align 8
  store i64 %5333, i64* %3, align 8
  %5338 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %5017)
  %5339 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R8.i3013, align 8
  %5340 = load i64, i64* %RBP.i, align 8
  %5341 = add i64 %5340, -192
  %5342 = add i64 %5339, 17
  store i64 %5342, i64* %3, align 8
  %5343 = inttoptr i64 %5341 to i32*
  %5344 = load i32, i32* %5343, align 4
  %5345 = sext i32 %5344 to i64
  %5346 = shl nsw i64 %5345, 6
  store i64 %5346, i64* %R9.i3009, align 8
  %5347 = add i64 %5346, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %5347, i64* %R8.i3013, align 8
  %5348 = icmp ult i64 %5347, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %5349 = icmp ult i64 %5347, %5346
  %5350 = or i1 %5348, %5349
  %5351 = zext i1 %5350 to i8
  store i8 %5351, i8* %14, align 1
  %5352 = trunc i64 %5347 to i32
  %5353 = and i32 %5352, 248
  %5354 = tail call i32 @llvm.ctpop.i32(i32 %5353)
  %5355 = trunc i32 %5354 to i8
  %5356 = and i8 %5355, 1
  %5357 = xor i8 %5356, 1
  store i8 %5357, i8* %21, align 1
  %5358 = xor i64 %5347, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %5359 = lshr i64 %5358, 4
  %5360 = trunc i64 %5359 to i8
  %5361 = and i8 %5360, 1
  store i8 %5361, i8* %26, align 1
  %5362 = icmp eq i64 %5347, 0
  %5363 = zext i1 %5362 to i8
  store i8 %5363, i8* %29, align 1
  %5364 = lshr i64 %5347, 63
  %5365 = trunc i64 %5364 to i8
  store i8 %5365, i8* %32, align 1
  %5366 = lshr i64 %5345, 57
  %5367 = and i64 %5366, 1
  %5368 = xor i64 %5364, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %5369 = xor i64 %5364, %5367
  %5370 = add nuw nsw i64 %5368, %5369
  %5371 = icmp eq i64 %5370, 2
  %5372 = zext i1 %5371 to i8
  store i8 %5372, i8* %38, align 1
  %5373 = add i64 %5340, -20
  %5374 = add i64 %5339, 28
  store i64 %5374, i64* %3, align 8
  %5375 = inttoptr i64 %5373 to i32*
  %5376 = load i32, i32* %5375, align 4
  %5377 = sext i32 %5376 to i64
  %5378 = shl nsw i64 %5377, 4
  store i64 %5378, i64* %R9.i3009, align 8
  %5379 = add i64 %5378, %5347
  store i64 %5379, i64* %R8.i3013, align 8
  %5380 = icmp ult i64 %5379, %5347
  %5381 = icmp ult i64 %5379, %5378
  %5382 = or i1 %5380, %5381
  %5383 = zext i1 %5382 to i8
  store i8 %5383, i8* %14, align 1
  %5384 = trunc i64 %5379 to i32
  %5385 = and i32 %5384, 248
  %5386 = tail call i32 @llvm.ctpop.i32(i32 %5385)
  %5387 = trunc i32 %5386 to i8
  %5388 = and i8 %5387, 1
  %5389 = xor i8 %5388, 1
  store i8 %5389, i8* %21, align 1
  %5390 = xor i64 %5378, %5347
  %5391 = xor i64 %5390, %5379
  %5392 = lshr i64 %5391, 4
  %5393 = trunc i64 %5392 to i8
  %5394 = and i8 %5393, 1
  store i8 %5394, i8* %26, align 1
  %5395 = icmp eq i64 %5379, 0
  %5396 = zext i1 %5395 to i8
  store i8 %5396, i8* %29, align 1
  %5397 = lshr i64 %5379, 63
  %5398 = trunc i64 %5397 to i8
  store i8 %5398, i8* %32, align 1
  %5399 = lshr i64 %5377, 59
  %5400 = and i64 %5399, 1
  %5401 = xor i64 %5397, %5364
  %5402 = xor i64 %5397, %5400
  %5403 = add nuw nsw i64 %5401, %5402
  %5404 = icmp eq i64 %5403, 2
  %5405 = zext i1 %5404 to i8
  store i8 %5405, i8* %38, align 1
  %5406 = load i64, i64* %RBP.i, align 8
  %5407 = add i64 %5406, -24
  %5408 = add i64 %5339, 39
  store i64 %5408, i64* %3, align 8
  %5409 = inttoptr i64 %5407 to i32*
  %5410 = load i32, i32* %5409, align 4
  %5411 = sext i32 %5410 to i64
  store i64 %5411, i64* %R9.i3009, align 8
  %5412 = load i64, i64* %RAX.i1161, align 8
  %5413 = shl nsw i64 %5411, 2
  %5414 = add i64 %5379, %5413
  %5415 = add i64 %5339, 44
  store i64 %5415, i64* %3, align 8
  %5416 = inttoptr i64 %5414 to i32*
  %5417 = load i32, i32* %5416, align 4
  %5418 = shl i64 %5412, 32
  %5419 = ashr exact i64 %5418, 32
  %5420 = sext i32 %5417 to i64
  %5421 = mul nsw i64 %5420, %5419
  %5422 = trunc i64 %5421 to i32
  %5423 = and i64 %5421, 4294967295
  store i64 %5423, i64* %RAX.i1161, align 8
  %5424 = shl i64 %5421, 32
  %5425 = ashr exact i64 %5424, 32
  %5426 = icmp ne i64 %5425, %5421
  %5427 = zext i1 %5426 to i8
  store i8 %5427, i8* %14, align 1
  %5428 = and i32 %5422, 255
  %5429 = tail call i32 @llvm.ctpop.i32(i32 %5428)
  %5430 = trunc i32 %5429 to i8
  %5431 = and i8 %5430, 1
  %5432 = xor i8 %5431, 1
  store i8 %5432, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %5433 = lshr i32 %5422, 31
  %5434 = trunc i32 %5433 to i8
  store i8 %5434, i8* %32, align 1
  store i8 %5427, i8* %38, align 1
  %5435 = add i64 %5406, -88
  %5436 = add i64 %5339, 47
  store i64 %5436, i64* %3, align 8
  %5437 = trunc i64 %5421 to i32
  %5438 = inttoptr i64 %5435 to i32*
  %5439 = load i32, i32* %5438, align 4
  %5440 = add i32 %5439, %5437
  %5441 = zext i32 %5440 to i64
  store i64 %5441, i64* %RAX.i1161, align 8
  %5442 = icmp ult i32 %5440, %5437
  %5443 = icmp ult i32 %5440, %5439
  %5444 = or i1 %5442, %5443
  %5445 = zext i1 %5444 to i8
  store i8 %5445, i8* %14, align 1
  %5446 = and i32 %5440, 255
  %5447 = tail call i32 @llvm.ctpop.i32(i32 %5446)
  %5448 = trunc i32 %5447 to i8
  %5449 = and i8 %5448, 1
  %5450 = xor i8 %5449, 1
  store i8 %5450, i8* %21, align 1
  %5451 = xor i32 %5439, %5437
  %5452 = xor i32 %5451, %5440
  %5453 = lshr i32 %5452, 4
  %5454 = trunc i32 %5453 to i8
  %5455 = and i8 %5454, 1
  store i8 %5455, i8* %26, align 1
  %5456 = icmp eq i32 %5440, 0
  %5457 = zext i1 %5456 to i8
  store i8 %5457, i8* %29, align 1
  %5458 = lshr i32 %5440, 31
  %5459 = trunc i32 %5458 to i8
  store i8 %5459, i8* %32, align 1
  %5460 = lshr i32 %5437, 31
  %5461 = lshr i32 %5439, 31
  %5462 = xor i32 %5458, %5460
  %5463 = xor i32 %5458, %5461
  %5464 = add nuw nsw i32 %5462, %5463
  %5465 = icmp eq i32 %5464, 2
  %5466 = zext i1 %5465 to i8
  store i8 %5466, i8* %38, align 1
  %5467 = add i64 %5406, -196
  %5468 = add i64 %5339, 53
  store i64 %5468, i64* %3, align 8
  %5469 = inttoptr i64 %5467 to i32*
  %5470 = load i32, i32* %5469, align 4
  %5471 = zext i32 %5470 to i64
  store i64 %5471, i64* %RCX.i1519, align 8
  %5472 = add i64 %5339, 55
  store i64 %5472, i64* %3, align 8
  %5473 = trunc i32 %5470 to i5
  switch i5 %5473, label %5477 [
    i5 0, label %routine_sarl__cl___eax.exit1486
    i5 1, label %5474
  ]

; <label>:5474:                                   ; preds = %routine_sarl__cl___eax.exit1567
  %5475 = shl nuw i64 %5441, 32
  %5476 = ashr i64 %5475, 33
  br label %5484

; <label>:5477:                                   ; preds = %routine_sarl__cl___eax.exit1567
  %5478 = and i32 %5470, 31
  %5479 = zext i32 %5478 to i64
  %5480 = add nsw i64 %5479, -1
  %5481 = sext i32 %5440 to i64
  %5482 = ashr i64 %5481, %5480
  %5483 = lshr i64 %5482, 1
  br label %5484

; <label>:5484:                                   ; preds = %5477, %5474
  %5485 = phi i64 [ %5483, %5477 ], [ %5476, %5474 ]
  %5486 = phi i64 [ %5482, %5477 ], [ %5441, %5474 ]
  %5487 = trunc i64 %5486 to i8
  %5488 = and i8 %5487, 1
  %5489 = trunc i64 %5485 to i32
  %5490 = and i64 %5485, 4294967295
  store i64 %5490, i64* %RAX.i1161, align 8
  store i8 %5488, i8* %14, align 1
  %5491 = and i32 %5489, 255
  %5492 = tail call i32 @llvm.ctpop.i32(i32 %5491)
  %5493 = trunc i32 %5492 to i8
  %5494 = and i8 %5493, 1
  %5495 = xor i8 %5494, 1
  store i8 %5495, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %5496 = icmp eq i32 %5489, 0
  %5497 = zext i1 %5496 to i8
  store i8 %5497, i8* %29, align 1
  %5498 = lshr i32 %5489, 31
  %5499 = trunc i32 %5498 to i8
  store i8 %5499, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5500 = trunc i64 %5485 to i32
  br label %routine_sarl__cl___eax.exit1486

routine_sarl__cl___eax.exit1486:                  ; preds = %5484, %routine_sarl__cl___eax.exit1567
  %5501 = phi i32 [ %5500, %5484 ], [ %5440, %routine_sarl__cl___eax.exit1567 ]
  %5502 = add i64 %5406, -264
  %5503 = add i64 %5339, 61
  store i64 %5503, i64* %3, align 8
  %5504 = inttoptr i64 %5502 to i32*
  store i32 %5501, i32* %5504, align 4
  %5505 = load i64, i64* %RBP.i, align 8
  %5506 = add i64 %5505, -260
  %5507 = load i64, i64* %3, align 8
  %5508 = add i64 %5507, 6
  store i64 %5508, i64* %3, align 8
  %5509 = inttoptr i64 %5506 to i32*
  %5510 = load i32, i32* %5509, align 4
  %5511 = zext i32 %5510 to i64
  store i64 %5511, i64* %RAX.i1161, align 8
  %5512 = add i64 %5505, -264
  %5513 = add i64 %5507, 12
  store i64 %5513, i64* %3, align 8
  %5514 = inttoptr i64 %5512 to i32*
  %5515 = load i32, i32* %5514, align 4
  %5516 = sub i32 %5510, %5515
  %5517 = icmp ult i32 %5510, %5515
  %5518 = zext i1 %5517 to i8
  store i8 %5518, i8* %14, align 1
  %5519 = and i32 %5516, 255
  %5520 = tail call i32 @llvm.ctpop.i32(i32 %5519)
  %5521 = trunc i32 %5520 to i8
  %5522 = and i8 %5521, 1
  %5523 = xor i8 %5522, 1
  store i8 %5523, i8* %21, align 1
  %5524 = xor i32 %5515, %5510
  %5525 = xor i32 %5524, %5516
  %5526 = lshr i32 %5525, 4
  %5527 = trunc i32 %5526 to i8
  %5528 = and i8 %5527, 1
  store i8 %5528, i8* %26, align 1
  %5529 = icmp eq i32 %5516, 0
  %5530 = zext i1 %5529 to i8
  store i8 %5530, i8* %29, align 1
  %5531 = lshr i32 %5516, 31
  %5532 = trunc i32 %5531 to i8
  store i8 %5532, i8* %32, align 1
  %5533 = lshr i32 %5510, 31
  %5534 = lshr i32 %5515, 31
  %5535 = xor i32 %5534, %5533
  %5536 = xor i32 %5531, %5533
  %5537 = add nuw nsw i32 %5536, %5535
  %5538 = icmp eq i32 %5537, 2
  %5539 = zext i1 %5538 to i8
  store i8 %5539, i8* %38, align 1
  %.v246 = select i1 %5529, i64 829, i64 18
  %5540 = add i64 %5507, %.v246
  store i64 %5540, i64* %3, align 8
  br i1 %5529, label %block_.L_40cb83, label %block_40c858

block_40c858:                                     ; preds = %routine_sarl__cl___eax.exit1486
  %5541 = add i64 %5540, 7
  store i64 %5541, i64* %3, align 8
  %5542 = load i32, i32* %5509, align 4
  store i8 0, i8* %14, align 1
  %5543 = and i32 %5542, 255
  %5544 = tail call i32 @llvm.ctpop.i32(i32 %5543)
  %5545 = trunc i32 %5544 to i8
  %5546 = and i8 %5545, 1
  %5547 = xor i8 %5546, 1
  store i8 %5547, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %5548 = icmp eq i32 %5542, 0
  %5549 = zext i1 %5548 to i8
  store i8 %5549, i8* %29, align 1
  %5550 = lshr i32 %5542, 31
  %5551 = trunc i32 %5550 to i8
  store i8 %5551, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v247 = select i1 %5548, i64 811, i64 13
  %5552 = add i64 %5540, %.v247
  store i64 %5552, i64* %3, align 8
  br i1 %5548, label %block_.L_40cb83, label %block_40c865

block_40c865:                                     ; preds = %block_40c858
  %5553 = add i64 %5552, 7
  store i64 %5553, i64* %3, align 8
  %5554 = load i32, i32* %5514, align 4
  store i8 0, i8* %14, align 1
  %5555 = and i32 %5554, 255
  %5556 = tail call i32 @llvm.ctpop.i32(i32 %5555)
  %5557 = trunc i32 %5556 to i8
  %5558 = and i8 %5557, 1
  %5559 = xor i8 %5558, 1
  store i8 %5559, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %5560 = icmp eq i32 %5554, 0
  %5561 = zext i1 %5560 to i8
  store i8 %5561, i8* %29, align 1
  %5562 = lshr i32 %5554, 31
  %5563 = trunc i32 %5562 to i8
  store i8 %5563, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v248 = select i1 %5560, i64 798, i64 13
  %5564 = add i64 %5552, %.v248
  store i64 %5564, i64* %3, align 8
  br i1 %5560, label %block_.L_40cb83, label %block_40c872

block_40c872:                                     ; preds = %block_40c865
  %5565 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %5566 = add i64 %5565, 13112
  store i64 %5566, i64* %RAX.i1161, align 8
  %5567 = icmp ugt i64 %5565, -13113
  %5568 = zext i1 %5567 to i8
  store i8 %5568, i8* %14, align 1
  %5569 = trunc i64 %5566 to i32
  %5570 = and i32 %5569, 255
  %5571 = tail call i32 @llvm.ctpop.i32(i32 %5570)
  %5572 = trunc i32 %5571 to i8
  %5573 = and i8 %5572, 1
  %5574 = xor i8 %5573, 1
  store i8 %5574, i8* %21, align 1
  %5575 = xor i64 %5565, 16
  %5576 = xor i64 %5575, %5566
  %5577 = lshr i64 %5576, 4
  %5578 = trunc i64 %5577 to i8
  %5579 = and i8 %5578, 1
  store i8 %5579, i8* %26, align 1
  %5580 = icmp eq i64 %5566, 0
  %5581 = zext i1 %5580 to i8
  store i8 %5581, i8* %29, align 1
  %5582 = lshr i64 %5566, 63
  %5583 = trunc i64 %5582 to i8
  store i8 %5583, i8* %32, align 1
  %5584 = lshr i64 %5565, 63
  %5585 = xor i64 %5582, %5584
  %5586 = add nuw nsw i64 %5585, %5582
  %5587 = icmp eq i64 %5586, 2
  %5588 = zext i1 %5587 to i8
  store i8 %5588, i8* %38, align 1
  %5589 = add i64 %5505, -20
  %5590 = add i64 %5564, 18
  store i64 %5590, i64* %3, align 8
  %5591 = inttoptr i64 %5589 to i32*
  %5592 = load i32, i32* %5591, align 4
  %5593 = sext i32 %5592 to i64
  %5594 = shl nsw i64 %5593, 6
  store i64 %5594, i64* %RCX.i1519, align 8
  %5595 = add i64 %5594, %5566
  store i64 %5595, i64* %RAX.i1161, align 8
  %5596 = icmp ult i64 %5595, %5566
  %5597 = icmp ult i64 %5595, %5594
  %5598 = or i1 %5596, %5597
  %5599 = zext i1 %5598 to i8
  store i8 %5599, i8* %14, align 1
  %5600 = trunc i64 %5595 to i32
  %5601 = and i32 %5600, 255
  %5602 = tail call i32 @llvm.ctpop.i32(i32 %5601)
  %5603 = trunc i32 %5602 to i8
  %5604 = and i8 %5603, 1
  %5605 = xor i8 %5604, 1
  store i8 %5605, i8* %21, align 1
  %5606 = xor i64 %5566, %5595
  %5607 = lshr i64 %5606, 4
  %5608 = trunc i64 %5607 to i8
  %5609 = and i8 %5608, 1
  store i8 %5609, i8* %26, align 1
  %5610 = icmp eq i64 %5595, 0
  %5611 = zext i1 %5610 to i8
  store i8 %5611, i8* %29, align 1
  %5612 = lshr i64 %5595, 63
  %5613 = trunc i64 %5612 to i8
  store i8 %5613, i8* %32, align 1
  %5614 = lshr i64 %5593, 57
  %5615 = and i64 %5614, 1
  %5616 = xor i64 %5612, %5582
  %5617 = xor i64 %5612, %5615
  %5618 = add nuw nsw i64 %5616, %5617
  %5619 = icmp eq i64 %5618, 2
  %5620 = zext i1 %5619 to i8
  store i8 %5620, i8* %38, align 1
  %5621 = load i64, i64* %RBP.i, align 8
  %5622 = add i64 %5621, -24
  %5623 = add i64 %5564, 29
  store i64 %5623, i64* %3, align 8
  %5624 = inttoptr i64 %5622 to i32*
  %5625 = load i32, i32* %5624, align 4
  %5626 = sext i32 %5625 to i64
  store i64 %5626, i64* %RCX.i1519, align 8
  %5627 = shl nsw i64 %5626, 2
  %5628 = add i64 %5627, %5595
  %5629 = add i64 %5564, 32
  store i64 %5629, i64* %3, align 8
  %5630 = inttoptr i64 %5628 to i32*
  %5631 = load i32, i32* %5630, align 4
  %5632 = zext i32 %5631 to i64
  store i64 %5632, i64* %RDX.i1748, align 8
  %5633 = add i64 %5621, -260
  %5634 = add i64 %5564, 38
  store i64 %5634, i64* %3, align 8
  %5635 = inttoptr i64 %5633 to i32*
  %5636 = load i32, i32* %5635, align 4
  %5637 = zext i32 %5636 to i64
  store i64 %5637, i64* %RDI.i2913, align 8
  %5638 = add i64 %5621, -252
  %5639 = add i64 %5564, 44
  store i64 %5639, i64* %3, align 8
  %5640 = inttoptr i64 %5638 to i32*
  %5641 = load i32, i32* %5640, align 4
  %5642 = zext i32 %5641 to i64
  store i64 %5642, i64* %RSI.i2777, align 8
  %5643 = add i64 %5621, -336
  %5644 = add i64 %5564, 50
  store i64 %5644, i64* %3, align 8
  %5645 = inttoptr i64 %5643 to i32*
  store i32 %5631, i32* %5645, align 4
  %5646 = load i64, i64* %3, align 8
  %5647 = add i64 %5646, 428204
  %5648 = add i64 %5646, 5
  %5649 = load i64, i64* %6, align 8
  %5650 = add i64 %5649, -8
  %5651 = inttoptr i64 %5650 to i64*
  store i64 %5648, i64* %5651, align 8
  store i64 %5650, i64* %6, align 8
  store i64 %5647, i64* %3, align 8
  %call2_40c8a4 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %5647, %struct.Memory* %5338)
  %5652 = load i64, i64* %RBP.i, align 8
  %5653 = add i64 %5652, -284
  %5654 = load i64, i64* %3, align 8
  store i64 %5653, i64* %RDX.i1748, align 8
  %5655 = add i64 %5652, -288
  store i64 %5655, i64* %RCX.i1519, align 8
  %5656 = add i64 %5652, -176
  store i64 %5656, i64* %R8.i3013, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %R9.i3009, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R10.i1596, align 8
  %5657 = add i64 %5652, -192
  %5658 = add i64 %5654, 48
  store i64 %5658, i64* %3, align 8
  %5659 = inttoptr i64 %5657 to i32*
  %5660 = load i32, i32* %5659, align 4
  %5661 = sext i32 %5660 to i64
  %5662 = shl nsw i64 %5661, 6
  store i64 %5662, i64* %R11.i1424, align 8
  %5663 = add i64 %5662, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %5663, i64* %R10.i1596, align 8
  %5664 = icmp ult i64 %5663, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %5665 = icmp ult i64 %5663, %5662
  %5666 = or i1 %5664, %5665
  %5667 = zext i1 %5666 to i8
  store i8 %5667, i8* %14, align 1
  %5668 = trunc i64 %5663 to i32
  %5669 = and i32 %5668, 248
  %5670 = tail call i32 @llvm.ctpop.i32(i32 %5669)
  %5671 = trunc i32 %5670 to i8
  %5672 = and i8 %5671, 1
  %5673 = xor i8 %5672, 1
  store i8 %5673, i8* %21, align 1
  %5674 = xor i64 %5663, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %5675 = lshr i64 %5674, 4
  %5676 = trunc i64 %5675 to i8
  %5677 = and i8 %5676, 1
  store i8 %5677, i8* %26, align 1
  %5678 = icmp eq i64 %5663, 0
  %5679 = zext i1 %5678 to i8
  store i8 %5679, i8* %29, align 1
  %5680 = lshr i64 %5663, 63
  %5681 = trunc i64 %5680 to i8
  store i8 %5681, i8* %32, align 1
  %5682 = lshr i64 %5661, 57
  %5683 = and i64 %5682, 1
  %5684 = xor i64 %5680, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %5685 = xor i64 %5680, %5683
  %5686 = add nuw nsw i64 %5684, %5685
  %5687 = icmp eq i64 %5686, 2
  %5688 = zext i1 %5687 to i8
  store i8 %5688, i8* %38, align 1
  %5689 = add i64 %5652, -20
  %5690 = add i64 %5654, 59
  store i64 %5690, i64* %3, align 8
  %5691 = inttoptr i64 %5689 to i32*
  %5692 = load i32, i32* %5691, align 4
  %5693 = sext i32 %5692 to i64
  %5694 = shl nsw i64 %5693, 4
  store i64 %5694, i64* %R11.i1424, align 8
  %5695 = add i64 %5694, %5663
  store i64 %5695, i64* %R10.i1596, align 8
  %5696 = icmp ult i64 %5695, %5663
  %5697 = icmp ult i64 %5695, %5694
  %5698 = or i1 %5696, %5697
  %5699 = zext i1 %5698 to i8
  store i8 %5699, i8* %14, align 1
  %5700 = trunc i64 %5695 to i32
  %5701 = and i32 %5700, 248
  %5702 = tail call i32 @llvm.ctpop.i32(i32 %5701)
  %5703 = trunc i32 %5702 to i8
  %5704 = and i8 %5703, 1
  %5705 = xor i8 %5704, 1
  store i8 %5705, i8* %21, align 1
  %5706 = xor i64 %5694, %5663
  %5707 = xor i64 %5706, %5695
  %5708 = lshr i64 %5707, 4
  %5709 = trunc i64 %5708 to i8
  %5710 = and i8 %5709, 1
  store i8 %5710, i8* %26, align 1
  %5711 = icmp eq i64 %5695, 0
  %5712 = zext i1 %5711 to i8
  store i8 %5712, i8* %29, align 1
  %5713 = lshr i64 %5695, 63
  %5714 = trunc i64 %5713 to i8
  store i8 %5714, i8* %32, align 1
  %5715 = lshr i64 %5693, 59
  %5716 = and i64 %5715, 1
  %5717 = xor i64 %5713, %5680
  %5718 = xor i64 %5713, %5716
  %5719 = add nuw nsw i64 %5717, %5718
  %5720 = icmp eq i64 %5719, 2
  %5721 = zext i1 %5720 to i8
  store i8 %5721, i8* %38, align 1
  %5722 = load i64, i64* %RBP.i, align 8
  %5723 = add i64 %5722, -24
  %5724 = add i64 %5654, 70
  store i64 %5724, i64* %3, align 8
  %5725 = inttoptr i64 %5723 to i32*
  %5726 = load i32, i32* %5725, align 4
  %5727 = sext i32 %5726 to i64
  store i64 %5727, i64* %R11.i1424, align 8
  %5728 = load i64, i64* %RAX.i1161, align 8
  %5729 = shl nsw i64 %5727, 2
  %5730 = add i64 %5695, %5729
  %5731 = add i64 %5654, 75
  store i64 %5731, i64* %3, align 8
  %5732 = inttoptr i64 %5730 to i32*
  %5733 = load i32, i32* %5732, align 4
  %5734 = shl i64 %5728, 32
  %5735 = ashr exact i64 %5734, 32
  %5736 = sext i32 %5733 to i64
  %5737 = mul nsw i64 %5736, %5735
  %5738 = trunc i64 %5737 to i32
  %5739 = and i64 %5737, 4294967295
  store i64 %5739, i64* %RAX.i1161, align 8
  %5740 = shl i64 %5737, 32
  %5741 = ashr exact i64 %5740, 32
  %5742 = icmp ne i64 %5741, %5737
  %5743 = zext i1 %5742 to i8
  store i8 %5743, i8* %14, align 1
  %5744 = and i32 %5738, 255
  %5745 = tail call i32 @llvm.ctpop.i32(i32 %5744)
  %5746 = trunc i32 %5745 to i8
  %5747 = and i8 %5746, 1
  %5748 = xor i8 %5747, 1
  store i8 %5748, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %5749 = lshr i32 %5738, 31
  %5750 = trunc i32 %5749 to i8
  store i8 %5750, i8* %32, align 1
  store i8 %5743, i8* %38, align 1
  %5751 = add i64 %5722, -20
  %5752 = add i64 %5654, 79
  store i64 %5752, i64* %3, align 8
  %5753 = inttoptr i64 %5751 to i32*
  %5754 = load i32, i32* %5753, align 4
  %5755 = sext i32 %5754 to i64
  %5756 = shl nsw i64 %5755, 4
  store i64 %5756, i64* %R10.i1596, align 8
  %5757 = load i64, i64* %R9.i3009, align 8
  %5758 = add i64 %5756, %5757
  store i64 %5758, i64* %R9.i3009, align 8
  %5759 = icmp ult i64 %5758, %5757
  %5760 = icmp ult i64 %5758, %5756
  %5761 = or i1 %5759, %5760
  %5762 = zext i1 %5761 to i8
  store i8 %5762, i8* %14, align 1
  %5763 = trunc i64 %5758 to i32
  %5764 = and i32 %5763, 255
  %5765 = tail call i32 @llvm.ctpop.i32(i32 %5764)
  %5766 = trunc i32 %5765 to i8
  %5767 = and i8 %5766, 1
  %5768 = xor i8 %5767, 1
  store i8 %5768, i8* %21, align 1
  %5769 = xor i64 %5756, %5757
  %5770 = xor i64 %5769, %5758
  %5771 = lshr i64 %5770, 4
  %5772 = trunc i64 %5771 to i8
  %5773 = and i8 %5772, 1
  store i8 %5773, i8* %26, align 1
  %5774 = icmp eq i64 %5758, 0
  %5775 = zext i1 %5774 to i8
  store i8 %5775, i8* %29, align 1
  %5776 = lshr i64 %5758, 63
  %5777 = trunc i64 %5776 to i8
  store i8 %5777, i8* %32, align 1
  %5778 = lshr i64 %5757, 63
  %5779 = lshr i64 %5755, 59
  %5780 = and i64 %5779, 1
  %5781 = xor i64 %5776, %5778
  %5782 = xor i64 %5776, %5780
  %5783 = add nuw nsw i64 %5781, %5782
  %5784 = icmp eq i64 %5783, 2
  %5785 = zext i1 %5784 to i8
  store i8 %5785, i8* %38, align 1
  %5786 = load i64, i64* %RBP.i, align 8
  %5787 = add i64 %5786, -24
  %5788 = add i64 %5654, 90
  store i64 %5788, i64* %3, align 8
  %5789 = inttoptr i64 %5787 to i32*
  %5790 = load i32, i32* %5789, align 4
  %5791 = sext i32 %5790 to i64
  store i64 %5791, i64* %R10.i1596, align 8
  %5792 = shl nsw i64 %5791, 2
  %5793 = add i64 %5758, %5792
  %5794 = add i64 %5654, 95
  store i64 %5794, i64* %3, align 8
  %5795 = inttoptr i64 %5793 to i32*
  %5796 = load i32, i32* %5795, align 4
  %5797 = shl i64 %5737, 32
  %5798 = ashr exact i64 %5797, 32
  %5799 = sext i32 %5796 to i64
  %5800 = mul nsw i64 %5799, %5798
  %5801 = trunc i64 %5800 to i32
  %5802 = and i64 %5800, 4294967295
  store i64 %5802, i64* %RAX.i1161, align 8
  %5803 = shl i64 %5800, 32
  %5804 = ashr exact i64 %5803, 32
  %5805 = icmp ne i64 %5804, %5800
  %5806 = zext i1 %5805 to i8
  store i8 %5806, i8* %14, align 1
  %5807 = and i32 %5801, 255
  %5808 = tail call i32 @llvm.ctpop.i32(i32 %5807)
  %5809 = trunc i32 %5808 to i8
  %5810 = and i8 %5809, 1
  %5811 = xor i8 %5810, 1
  store i8 %5811, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %5812 = lshr i32 %5801, 31
  %5813 = trunc i32 %5812 to i8
  store i8 %5813, i8* %32, align 1
  store i8 %5806, i8* %38, align 1
  %5814 = add i64 %5786, -188
  %5815 = add i64 %5654, 101
  store i64 %5815, i64* %3, align 8
  %5816 = inttoptr i64 %5814 to i32*
  %5817 = load i32, i32* %5816, align 4
  %5818 = zext i32 %5817 to i64
  store i64 %5818, i64* %RSI.i2777, align 8
  %5819 = add i64 %5786, -344
  %5820 = load i64, i64* %RCX.i1519, align 8
  %5821 = add i64 %5654, 108
  store i64 %5821, i64* %3, align 8
  %5822 = inttoptr i64 %5819 to i64*
  store i64 %5820, i64* %5822, align 8
  %5823 = load i32, i32* %ESI.i1668, align 4
  %5824 = zext i32 %5823 to i64
  %5825 = load i64, i64* %3, align 8
  store i64 %5824, i64* %RCX.i1519, align 8
  %5826 = load i64, i64* %RAX.i1161, align 8
  %5827 = add i64 %5825, 4
  store i64 %5827, i64* %3, align 8
  %5828 = trunc i32 %5823 to i5
  switch i5 %5828, label %5835 [
    i5 0, label %routine_shll__cl___eax.exit1377
    i5 1, label %5829
  ]

; <label>:5829:                                   ; preds = %block_40c872
  %5830 = trunc i64 %5826 to i32
  %5831 = shl i32 %5830, 1
  %5832 = icmp slt i32 %5830, 0
  %5833 = icmp slt i32 %5831, 0
  %5834 = xor i1 %5832, %5833
  br label %5845

; <label>:5835:                                   ; preds = %block_40c872
  %5836 = and i32 %5823, 31
  %5837 = zext i32 %5836 to i64
  %5838 = add nuw nsw i64 %5837, 4294967295
  %5839 = and i64 %5826, 4294967295
  %5840 = and i64 %5838, 4294967295
  %5841 = shl i64 %5839, %5840
  %5842 = trunc i64 %5841 to i32
  %5843 = icmp slt i32 %5842, 0
  %5844 = shl i32 %5842, 1
  br label %5845

; <label>:5845:                                   ; preds = %5835, %5829
  %5846 = phi i1 [ %5832, %5829 ], [ %5843, %5835 ]
  %5847 = phi i1 [ %5834, %5829 ], [ false, %5835 ]
  %5848 = phi i32 [ %5831, %5829 ], [ %5844, %5835 ]
  %5849 = zext i32 %5848 to i64
  store i64 %5849, i64* %RAX.i1161, align 8
  %5850 = zext i1 %5846 to i8
  store i8 %5850, i8* %14, align 1
  %5851 = and i32 %5848, 254
  %5852 = tail call i32 @llvm.ctpop.i32(i32 %5851)
  %5853 = trunc i32 %5852 to i8
  %5854 = and i8 %5853, 1
  %5855 = xor i8 %5854, 1
  store i8 %5855, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %5856 = icmp eq i32 %5848, 0
  %5857 = zext i1 %5856 to i8
  store i8 %5857, i8* %29, align 1
  %5858 = lshr i32 %5848, 31
  %5859 = trunc i32 %5858 to i8
  store i8 %5859, i8* %32, align 1
  %5860 = zext i1 %5847 to i8
  store i8 %5860, i8* %38, align 1
  br label %routine_shll__cl___eax.exit1377

routine_shll__cl___eax.exit1377:                  ; preds = %5845, %block_40c872
  %5861 = phi i64 [ %5849, %5845 ], [ %5826, %block_40c872 ]
  %5862 = shl i64 %5861, 32
  %5863 = ashr i64 %5862, 37
  %5864 = lshr i64 %5863, 1
  %5865 = trunc i64 %5863 to i8
  %5866 = and i8 %5865, 1
  %5867 = trunc i64 %5864 to i32
  %5868 = and i64 %5864, 4294967295
  store i64 %5868, i64* %RAX.i1161, align 8
  store i8 %5866, i8* %14, align 1
  %5869 = and i32 %5867, 255
  %5870 = tail call i32 @llvm.ctpop.i32(i32 %5869)
  %5871 = trunc i32 %5870 to i8
  %5872 = and i8 %5871, 1
  %5873 = xor i8 %5872, 1
  store i8 %5873, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %5874 = icmp eq i32 %5867, 0
  %5875 = zext i1 %5874 to i8
  store i8 %5875, i8* %29, align 1
  %5876 = lshr i64 %5863, 32
  %5877 = trunc i64 %5876 to i8
  %5878 = and i8 %5877, 1
  store i8 %5878, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %5879 = load i64, i64* %RBP.i, align 8
  %5880 = add i64 %5879, -336
  %5881 = add i64 %5825, 13
  store i64 %5881, i64* %3, align 8
  %5882 = inttoptr i64 %5880 to i32*
  %5883 = load i32, i32* %5882, align 4
  %5884 = trunc i64 %5864 to i32
  %5885 = sub i32 %5883, %5884
  %5886 = zext i32 %5885 to i64
  store i64 %5886, i64* %RSI.i2777, align 8
  %5887 = icmp ult i32 %5883, %5884
  %5888 = zext i1 %5887 to i8
  store i8 %5888, i8* %14, align 1
  %5889 = and i32 %5885, 255
  %5890 = tail call i32 @llvm.ctpop.i32(i32 %5889)
  %5891 = trunc i32 %5890 to i8
  %5892 = and i8 %5891, 1
  %5893 = xor i8 %5892, 1
  store i8 %5893, i8* %21, align 1
  %5894 = xor i32 %5884, %5883
  %5895 = xor i32 %5894, %5885
  %5896 = lshr i32 %5895, 4
  %5897 = trunc i32 %5896 to i8
  %5898 = and i8 %5897, 1
  store i8 %5898, i8* %26, align 1
  %5899 = icmp eq i32 %5885, 0
  %5900 = zext i1 %5899 to i8
  store i8 %5900, i8* %29, align 1
  %5901 = lshr i32 %5885, 31
  %5902 = trunc i32 %5901 to i8
  store i8 %5902, i8* %32, align 1
  %5903 = lshr i32 %5883, 31
  %5904 = lshr i64 %5863, 32
  %5905 = trunc i64 %5904 to i32
  %5906 = and i32 %5905, 1
  %5907 = xor i32 %5906, %5903
  %5908 = xor i32 %5901, %5903
  %5909 = add nuw nsw i32 %5908, %5907
  %5910 = icmp eq i32 %5909, 2
  %5911 = zext i1 %5910 to i8
  store i8 %5911, i8* %38, align 1
  %5912 = add i64 %5879, -20
  %5913 = add i64 %5825, 19
  store i64 %5913, i64* %3, align 8
  %5914 = inttoptr i64 %5912 to i32*
  %5915 = load i32, i32* %5914, align 4
  %5916 = sext i32 %5915 to i64
  %5917 = shl nsw i64 %5916, 4
  store i64 %5917, i64* %R9.i3009, align 8
  %5918 = load i64, i64* %R8.i3013, align 8
  %5919 = add i64 %5917, %5918
  store i64 %5919, i64* %R8.i3013, align 8
  %5920 = icmp ult i64 %5919, %5918
  %5921 = icmp ult i64 %5919, %5917
  %5922 = or i1 %5920, %5921
  %5923 = zext i1 %5922 to i8
  store i8 %5923, i8* %14, align 1
  %5924 = trunc i64 %5919 to i32
  %5925 = and i32 %5924, 255
  %5926 = tail call i32 @llvm.ctpop.i32(i32 %5925)
  %5927 = trunc i32 %5926 to i8
  %5928 = and i8 %5927, 1
  %5929 = xor i8 %5928, 1
  store i8 %5929, i8* %21, align 1
  %5930 = xor i64 %5917, %5918
  %5931 = xor i64 %5930, %5919
  %5932 = lshr i64 %5931, 4
  %5933 = trunc i64 %5932 to i8
  %5934 = and i8 %5933, 1
  store i8 %5934, i8* %26, align 1
  %5935 = icmp eq i64 %5919, 0
  %5936 = zext i1 %5935 to i8
  store i8 %5936, i8* %29, align 1
  %5937 = lshr i64 %5919, 63
  %5938 = trunc i64 %5937 to i8
  store i8 %5938, i8* %32, align 1
  %5939 = lshr i64 %5918, 63
  %5940 = lshr i64 %5916, 59
  %5941 = and i64 %5940, 1
  %5942 = xor i64 %5937, %5939
  %5943 = xor i64 %5937, %5941
  %5944 = add nuw nsw i64 %5942, %5943
  %5945 = icmp eq i64 %5944, 2
  %5946 = zext i1 %5945 to i8
  store i8 %5946, i8* %38, align 1
  %5947 = load i64, i64* %RBP.i, align 8
  %5948 = add i64 %5947, -24
  %5949 = add i64 %5825, 30
  store i64 %5949, i64* %3, align 8
  %5950 = inttoptr i64 %5948 to i32*
  %5951 = load i32, i32* %5950, align 4
  %5952 = sext i32 %5951 to i64
  store i64 %5952, i64* %R9.i3009, align 8
  %5953 = load i64, i64* %RSI.i2777, align 8
  %5954 = shl nsw i64 %5952, 2
  %5955 = add i64 %5919, %5954
  %5956 = add i64 %5825, 34
  store i64 %5956, i64* %3, align 8
  %5957 = trunc i64 %5953 to i32
  %5958 = inttoptr i64 %5955 to i32*
  %5959 = load i32, i32* %5958, align 4
  %5960 = sub i32 %5957, %5959
  %5961 = zext i32 %5960 to i64
  store i64 %5961, i64* %RSI.i2777, align 8
  %5962 = icmp ult i32 %5957, %5959
  %5963 = zext i1 %5962 to i8
  store i8 %5963, i8* %14, align 1
  %5964 = and i32 %5960, 255
  %5965 = tail call i32 @llvm.ctpop.i32(i32 %5964)
  %5966 = trunc i32 %5965 to i8
  %5967 = and i8 %5966, 1
  %5968 = xor i8 %5967, 1
  store i8 %5968, i8* %21, align 1
  %5969 = xor i32 %5959, %5957
  %5970 = xor i32 %5969, %5960
  %5971 = lshr i32 %5970, 4
  %5972 = trunc i32 %5971 to i8
  %5973 = and i8 %5972, 1
  store i8 %5973, i8* %26, align 1
  %5974 = icmp eq i32 %5960, 0
  %5975 = zext i1 %5974 to i8
  store i8 %5975, i8* %29, align 1
  %5976 = lshr i32 %5960, 31
  %5977 = trunc i32 %5976 to i8
  store i8 %5977, i8* %32, align 1
  %5978 = lshr i32 %5957, 31
  %5979 = lshr i32 %5959, 31
  %5980 = xor i32 %5979, %5978
  %5981 = xor i32 %5976, %5978
  %5982 = add nuw nsw i32 %5981, %5980
  %5983 = icmp eq i32 %5982, 2
  %5984 = zext i1 %5983 to i8
  store i8 %5984, i8* %38, align 1
  %5985 = sitofp i32 %5960 to double
  store double %5985, double* %44, align 1
  %5986 = add i64 %5947, -272
  %5987 = add i64 %5825, 46
  store i64 %5987, i64* %3, align 8
  %5988 = inttoptr i64 %5986 to double*
  store double %5985, double* %5988, align 8
  %5989 = load i64, i64* %RBP.i, align 8
  %5990 = add i64 %5989, -260
  %5991 = load i64, i64* %3, align 8
  %5992 = add i64 %5991, 6
  store i64 %5992, i64* %3, align 8
  %5993 = inttoptr i64 %5990 to i32*
  %5994 = load i32, i32* %5993, align 4
  %5995 = zext i32 %5994 to i64
  store i64 %5995, i64* %RDI.i2913, align 8
  %5996 = add i64 %5989, -100
  %5997 = add i64 %5991, 9
  store i64 %5997, i64* %3, align 8
  %5998 = inttoptr i64 %5996 to i32*
  %5999 = load i32, i32* %5998, align 4
  %6000 = zext i32 %5999 to i64
  store i64 %6000, i64* %RSI.i2777, align 8
  %6001 = add i64 %5989, -344
  %6002 = add i64 %5991, 16
  store i64 %6002, i64* %3, align 8
  %6003 = inttoptr i64 %6001 to i64*
  %6004 = load i64, i64* %6003, align 8
  store i64 %6004, i64* %RCX.i1519, align 8
  %6005 = add i64 %5991, 656685
  %6006 = add i64 %5991, 21
  %6007 = load i64, i64* %6, align 8
  %6008 = add i64 %6007, -8
  %6009 = inttoptr i64 %6008 to i64*
  store i64 %6006, i64* %6009, align 8
  store i64 %6008, i64* %6, align 8
  store i64 %6005, i64* %3, align 8
  %call2_40c953 = tail call %struct.Memory* @sub_4ace70.levrun_linfo_inter(%struct.State* nonnull %0, i64 %6005, %struct.Memory* %call2_40c8a4)
  %6010 = load i64, i64* %RBP.i, align 8
  %6011 = add i64 %6010, -272
  %6012 = load i64, i64* %3, align 8
  %6013 = add i64 %6012, 8
  store i64 %6013, i64* %3, align 8
  %6014 = inttoptr i64 %6011 to i64*
  %6015 = load i64, i64* %6014, align 8
  store i64 %6015, i64* %45, align 1
  store double 0.000000e+00, double* %47, align 1
  %6016 = add i64 %6012, 16
  store i64 %6016, i64* %3, align 8
  %6017 = bitcast i64 %6015 to double
  %6018 = inttoptr i64 %6011 to double*
  %6019 = load double, double* %6018, align 8
  %6020 = fmul double %6017, %6019
  store double %6020, double* %44, align 1
  store i64 0, i64* %46, align 1
  %6021 = add i64 %6010, -296
  %6022 = add i64 %6012, 24
  store i64 %6022, i64* %3, align 8
  %6023 = inttoptr i64 %6021 to i64*
  %6024 = load i64, i64* %6023, align 8
  store i64 %6024, i64* %55, align 1
  store double 0.000000e+00, double* %57, align 1
  %6025 = add i64 %6010, -284
  %6026 = add i64 %6012, 32
  store i64 %6026, i64* %3, align 8
  %6027 = inttoptr i64 %6025 to i32*
  %6028 = load i32, i32* %6027, align 4
  %6029 = sitofp i32 %6028 to double
  store double %6029, double* %526, align 1
  %6030 = bitcast i64 %6024 to double
  %6031 = fmul double %6029, %6030
  store double %6031, double* %54, align 1
  store i64 0, i64* %56, align 1
  %6032 = fadd double %6031, %6020
  store double %6032, double* %44, align 1
  store i64 0, i64* %46, align 1
  %6033 = add i64 %6012, 48
  store i64 %6033, i64* %3, align 8
  %6034 = inttoptr i64 %6011 to double*
  store double %6032, double* %6034, align 8
  %6035 = load i64, i64* %3, align 8
  %6036 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %6037 = add i64 %6036, 13112
  store i64 %6037, i64* %RCX.i1519, align 8
  %6038 = icmp ugt i64 %6036, -13113
  %6039 = zext i1 %6038 to i8
  store i8 %6039, i8* %14, align 1
  %6040 = trunc i64 %6037 to i32
  %6041 = and i32 %6040, 255
  %6042 = tail call i32 @llvm.ctpop.i32(i32 %6041)
  %6043 = trunc i32 %6042 to i8
  %6044 = and i8 %6043, 1
  %6045 = xor i8 %6044, 1
  store i8 %6045, i8* %21, align 1
  %6046 = xor i64 %6036, 16
  %6047 = xor i64 %6046, %6037
  %6048 = lshr i64 %6047, 4
  %6049 = trunc i64 %6048 to i8
  %6050 = and i8 %6049, 1
  store i8 %6050, i8* %26, align 1
  %6051 = icmp eq i64 %6037, 0
  %6052 = zext i1 %6051 to i8
  store i8 %6052, i8* %29, align 1
  %6053 = lshr i64 %6037, 63
  %6054 = trunc i64 %6053 to i8
  store i8 %6054, i8* %32, align 1
  %6055 = lshr i64 %6036, 63
  %6056 = xor i64 %6053, %6055
  %6057 = add nuw nsw i64 %6056, %6053
  %6058 = icmp eq i64 %6057, 2
  %6059 = zext i1 %6058 to i8
  store i8 %6059, i8* %38, align 1
  %6060 = load i64, i64* %RBP.i, align 8
  %6061 = add i64 %6060, -20
  %6062 = add i64 %6035, 19
  store i64 %6062, i64* %3, align 8
  %6063 = inttoptr i64 %6061 to i32*
  %6064 = load i32, i32* %6063, align 4
  %6065 = sext i32 %6064 to i64
  %6066 = shl nsw i64 %6065, 6
  store i64 %6066, i64* %RDX.i1748, align 8
  %6067 = add i64 %6066, %6037
  store i64 %6067, i64* %RCX.i1519, align 8
  %6068 = icmp ult i64 %6067, %6037
  %6069 = icmp ult i64 %6067, %6066
  %6070 = or i1 %6068, %6069
  %6071 = zext i1 %6070 to i8
  store i8 %6071, i8* %14, align 1
  %6072 = trunc i64 %6067 to i32
  %6073 = and i32 %6072, 255
  %6074 = tail call i32 @llvm.ctpop.i32(i32 %6073)
  %6075 = trunc i32 %6074 to i8
  %6076 = and i8 %6075, 1
  %6077 = xor i8 %6076, 1
  store i8 %6077, i8* %21, align 1
  %6078 = xor i64 %6037, %6067
  %6079 = lshr i64 %6078, 4
  %6080 = trunc i64 %6079 to i8
  %6081 = and i8 %6080, 1
  store i8 %6081, i8* %26, align 1
  %6082 = icmp eq i64 %6067, 0
  %6083 = zext i1 %6082 to i8
  store i8 %6083, i8* %29, align 1
  %6084 = lshr i64 %6067, 63
  %6085 = trunc i64 %6084 to i8
  store i8 %6085, i8* %32, align 1
  %6086 = lshr i64 %6065, 57
  %6087 = and i64 %6086, 1
  %6088 = xor i64 %6084, %6053
  %6089 = xor i64 %6084, %6087
  %6090 = add nuw nsw i64 %6088, %6089
  %6091 = icmp eq i64 %6090, 2
  %6092 = zext i1 %6091 to i8
  store i8 %6092, i8* %38, align 1
  %6093 = add i64 %6060, -24
  %6094 = add i64 %6035, 30
  store i64 %6094, i64* %3, align 8
  %6095 = inttoptr i64 %6093 to i32*
  %6096 = load i32, i32* %6095, align 4
  %6097 = sext i32 %6096 to i64
  store i64 %6097, i64* %RDX.i1748, align 8
  %6098 = shl nsw i64 %6097, 2
  %6099 = add i64 %6098, %6067
  %6100 = add i64 %6035, 33
  store i64 %6100, i64* %3, align 8
  %6101 = inttoptr i64 %6099 to i32*
  %6102 = load i32, i32* %6101, align 4
  %6103 = zext i32 %6102 to i64
  store i64 %6103, i64* %RAX.i1161, align 8
  %6104 = add i64 %6060, -264
  %6105 = add i64 %6035, 39
  store i64 %6105, i64* %3, align 8
  %6106 = inttoptr i64 %6104 to i32*
  %6107 = load i32, i32* %6106, align 4
  %6108 = zext i32 %6107 to i64
  store i64 %6108, i64* %RDI.i2913, align 8
  %6109 = add i64 %6060, -256
  %6110 = add i64 %6035, 45
  store i64 %6110, i64* %3, align 8
  %6111 = inttoptr i64 %6109 to i32*
  %6112 = load i32, i32* %6111, align 4
  %6113 = zext i32 %6112 to i64
  store i64 %6113, i64* %RSI.i2777, align 8
  %6114 = add i64 %6060, -348
  %6115 = add i64 %6035, 51
  store i64 %6115, i64* %3, align 8
  %6116 = inttoptr i64 %6114 to i32*
  store i32 %6102, i32* %6116, align 4
  %6117 = load i64, i64* %3, align 8
  %6118 = add i64 %6117, 427925
  %6119 = add i64 %6117, 5
  %6120 = load i64, i64* %6, align 8
  %6121 = add i64 %6120, -8
  %6122 = inttoptr i64 %6121 to i64*
  store i64 %6119, i64* %6122, align 8
  store i64 %6121, i64* %6, align 8
  store i64 %6118, i64* %3, align 8
  %call2_40c9bb = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %6118, %struct.Memory* %call2_40c953)
  %6123 = load i64, i64* %RBP.i, align 8
  %6124 = add i64 %6123, -284
  %6125 = load i64, i64* %3, align 8
  store i64 %6124, i64* %RDX.i1748, align 8
  %6126 = add i64 %6123, -288
  store i64 %6126, i64* %RCX.i1519, align 8
  %6127 = add i64 %6123, -176
  store i64 %6127, i64* %R8.i3013, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %R9.i3009, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R10.i1596, align 8
  %6128 = add i64 %6123, -192
  %6129 = add i64 %6125, 48
  store i64 %6129, i64* %3, align 8
  %6130 = inttoptr i64 %6128 to i32*
  %6131 = load i32, i32* %6130, align 4
  %6132 = sext i32 %6131 to i64
  %6133 = shl nsw i64 %6132, 6
  store i64 %6133, i64* %R11.i1424, align 8
  %6134 = add i64 %6133, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %6134, i64* %R10.i1596, align 8
  %6135 = icmp ult i64 %6134, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %6136 = icmp ult i64 %6134, %6133
  %6137 = or i1 %6135, %6136
  %6138 = zext i1 %6137 to i8
  store i8 %6138, i8* %14, align 1
  %6139 = trunc i64 %6134 to i32
  %6140 = and i32 %6139, 248
  %6141 = tail call i32 @llvm.ctpop.i32(i32 %6140)
  %6142 = trunc i32 %6141 to i8
  %6143 = and i8 %6142, 1
  %6144 = xor i8 %6143, 1
  store i8 %6144, i8* %21, align 1
  %6145 = xor i64 %6134, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %6146 = lshr i64 %6145, 4
  %6147 = trunc i64 %6146 to i8
  %6148 = and i8 %6147, 1
  store i8 %6148, i8* %26, align 1
  %6149 = icmp eq i64 %6134, 0
  %6150 = zext i1 %6149 to i8
  store i8 %6150, i8* %29, align 1
  %6151 = lshr i64 %6134, 63
  %6152 = trunc i64 %6151 to i8
  store i8 %6152, i8* %32, align 1
  %6153 = lshr i64 %6132, 57
  %6154 = and i64 %6153, 1
  %6155 = xor i64 %6151, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %6156 = xor i64 %6151, %6154
  %6157 = add nuw nsw i64 %6155, %6156
  %6158 = icmp eq i64 %6157, 2
  %6159 = zext i1 %6158 to i8
  store i8 %6159, i8* %38, align 1
  %6160 = add i64 %6123, -20
  %6161 = add i64 %6125, 59
  store i64 %6161, i64* %3, align 8
  %6162 = inttoptr i64 %6160 to i32*
  %6163 = load i32, i32* %6162, align 4
  %6164 = sext i32 %6163 to i64
  %6165 = shl nsw i64 %6164, 4
  store i64 %6165, i64* %R11.i1424, align 8
  %6166 = add i64 %6165, %6134
  store i64 %6166, i64* %R10.i1596, align 8
  %6167 = icmp ult i64 %6166, %6134
  %6168 = icmp ult i64 %6166, %6165
  %6169 = or i1 %6167, %6168
  %6170 = zext i1 %6169 to i8
  store i8 %6170, i8* %14, align 1
  %6171 = trunc i64 %6166 to i32
  %6172 = and i32 %6171, 248
  %6173 = tail call i32 @llvm.ctpop.i32(i32 %6172)
  %6174 = trunc i32 %6173 to i8
  %6175 = and i8 %6174, 1
  %6176 = xor i8 %6175, 1
  store i8 %6176, i8* %21, align 1
  %6177 = xor i64 %6165, %6134
  %6178 = xor i64 %6177, %6166
  %6179 = lshr i64 %6178, 4
  %6180 = trunc i64 %6179 to i8
  %6181 = and i8 %6180, 1
  store i8 %6181, i8* %26, align 1
  %6182 = icmp eq i64 %6166, 0
  %6183 = zext i1 %6182 to i8
  store i8 %6183, i8* %29, align 1
  %6184 = lshr i64 %6166, 63
  %6185 = trunc i64 %6184 to i8
  store i8 %6185, i8* %32, align 1
  %6186 = lshr i64 %6164, 59
  %6187 = and i64 %6186, 1
  %6188 = xor i64 %6184, %6151
  %6189 = xor i64 %6184, %6187
  %6190 = add nuw nsw i64 %6188, %6189
  %6191 = icmp eq i64 %6190, 2
  %6192 = zext i1 %6191 to i8
  store i8 %6192, i8* %38, align 1
  %6193 = load i64, i64* %RBP.i, align 8
  %6194 = add i64 %6193, -24
  %6195 = add i64 %6125, 70
  store i64 %6195, i64* %3, align 8
  %6196 = inttoptr i64 %6194 to i32*
  %6197 = load i32, i32* %6196, align 4
  %6198 = sext i32 %6197 to i64
  store i64 %6198, i64* %R11.i1424, align 8
  %6199 = load i64, i64* %RAX.i1161, align 8
  %6200 = shl nsw i64 %6198, 2
  %6201 = add i64 %6166, %6200
  %6202 = add i64 %6125, 75
  store i64 %6202, i64* %3, align 8
  %6203 = inttoptr i64 %6201 to i32*
  %6204 = load i32, i32* %6203, align 4
  %6205 = shl i64 %6199, 32
  %6206 = ashr exact i64 %6205, 32
  %6207 = sext i32 %6204 to i64
  %6208 = mul nsw i64 %6207, %6206
  %6209 = trunc i64 %6208 to i32
  %6210 = and i64 %6208, 4294967295
  store i64 %6210, i64* %RAX.i1161, align 8
  %6211 = shl i64 %6208, 32
  %6212 = ashr exact i64 %6211, 32
  %6213 = icmp ne i64 %6212, %6208
  %6214 = zext i1 %6213 to i8
  store i8 %6214, i8* %14, align 1
  %6215 = and i32 %6209, 255
  %6216 = tail call i32 @llvm.ctpop.i32(i32 %6215)
  %6217 = trunc i32 %6216 to i8
  %6218 = and i8 %6217, 1
  %6219 = xor i8 %6218, 1
  store i8 %6219, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %6220 = lshr i32 %6209, 31
  %6221 = trunc i32 %6220 to i8
  store i8 %6221, i8* %32, align 1
  store i8 %6214, i8* %38, align 1
  %6222 = add i64 %6193, -20
  %6223 = add i64 %6125, 79
  store i64 %6223, i64* %3, align 8
  %6224 = inttoptr i64 %6222 to i32*
  %6225 = load i32, i32* %6224, align 4
  %6226 = sext i32 %6225 to i64
  %6227 = shl nsw i64 %6226, 4
  store i64 %6227, i64* %R10.i1596, align 8
  %6228 = load i64, i64* %R9.i3009, align 8
  %6229 = add i64 %6227, %6228
  store i64 %6229, i64* %R9.i3009, align 8
  %6230 = icmp ult i64 %6229, %6228
  %6231 = icmp ult i64 %6229, %6227
  %6232 = or i1 %6230, %6231
  %6233 = zext i1 %6232 to i8
  store i8 %6233, i8* %14, align 1
  %6234 = trunc i64 %6229 to i32
  %6235 = and i32 %6234, 255
  %6236 = tail call i32 @llvm.ctpop.i32(i32 %6235)
  %6237 = trunc i32 %6236 to i8
  %6238 = and i8 %6237, 1
  %6239 = xor i8 %6238, 1
  store i8 %6239, i8* %21, align 1
  %6240 = xor i64 %6227, %6228
  %6241 = xor i64 %6240, %6229
  %6242 = lshr i64 %6241, 4
  %6243 = trunc i64 %6242 to i8
  %6244 = and i8 %6243, 1
  store i8 %6244, i8* %26, align 1
  %6245 = icmp eq i64 %6229, 0
  %6246 = zext i1 %6245 to i8
  store i8 %6246, i8* %29, align 1
  %6247 = lshr i64 %6229, 63
  %6248 = trunc i64 %6247 to i8
  store i8 %6248, i8* %32, align 1
  %6249 = lshr i64 %6228, 63
  %6250 = lshr i64 %6226, 59
  %6251 = and i64 %6250, 1
  %6252 = xor i64 %6247, %6249
  %6253 = xor i64 %6247, %6251
  %6254 = add nuw nsw i64 %6252, %6253
  %6255 = icmp eq i64 %6254, 2
  %6256 = zext i1 %6255 to i8
  store i8 %6256, i8* %38, align 1
  %6257 = load i64, i64* %RBP.i, align 8
  %6258 = add i64 %6257, -24
  %6259 = add i64 %6125, 90
  store i64 %6259, i64* %3, align 8
  %6260 = inttoptr i64 %6258 to i32*
  %6261 = load i32, i32* %6260, align 4
  %6262 = sext i32 %6261 to i64
  store i64 %6262, i64* %R10.i1596, align 8
  %6263 = shl nsw i64 %6262, 2
  %6264 = add i64 %6229, %6263
  %6265 = add i64 %6125, 95
  store i64 %6265, i64* %3, align 8
  %6266 = inttoptr i64 %6264 to i32*
  %6267 = load i32, i32* %6266, align 4
  %6268 = shl i64 %6208, 32
  %6269 = ashr exact i64 %6268, 32
  %6270 = sext i32 %6267 to i64
  %6271 = mul nsw i64 %6270, %6269
  %6272 = trunc i64 %6271 to i32
  %6273 = and i64 %6271, 4294967295
  store i64 %6273, i64* %RAX.i1161, align 8
  %6274 = shl i64 %6271, 32
  %6275 = ashr exact i64 %6274, 32
  %6276 = icmp ne i64 %6275, %6271
  %6277 = zext i1 %6276 to i8
  store i8 %6277, i8* %14, align 1
  %6278 = and i32 %6272, 255
  %6279 = tail call i32 @llvm.ctpop.i32(i32 %6278)
  %6280 = trunc i32 %6279 to i8
  %6281 = and i8 %6280, 1
  %6282 = xor i8 %6281, 1
  store i8 %6282, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %6283 = lshr i32 %6272, 31
  %6284 = trunc i32 %6283 to i8
  store i8 %6284, i8* %32, align 1
  store i8 %6277, i8* %38, align 1
  %6285 = add i64 %6257, -188
  %6286 = add i64 %6125, 101
  store i64 %6286, i64* %3, align 8
  %6287 = inttoptr i64 %6285 to i32*
  %6288 = load i32, i32* %6287, align 4
  %6289 = zext i32 %6288 to i64
  store i64 %6289, i64* %RSI.i2777, align 8
  %6290 = add i64 %6257, -360
  %6291 = load i64, i64* %RCX.i1519, align 8
  %6292 = add i64 %6125, 108
  store i64 %6292, i64* %3, align 8
  %6293 = inttoptr i64 %6290 to i64*
  store i64 %6291, i64* %6293, align 8
  %6294 = load i32, i32* %ESI.i1668, align 4
  %6295 = zext i32 %6294 to i64
  %6296 = load i64, i64* %3, align 8
  store i64 %6295, i64* %RCX.i1519, align 8
  %6297 = load i64, i64* %RAX.i1161, align 8
  %6298 = add i64 %6296, 4
  store i64 %6298, i64* %3, align 8
  %6299 = trunc i32 %6294 to i5
  switch i5 %6299, label %6306 [
    i5 0, label %routine_shll__cl___eax.exit1226
    i5 1, label %6300
  ]

; <label>:6300:                                   ; preds = %routine_shll__cl___eax.exit1377
  %6301 = trunc i64 %6297 to i32
  %6302 = shl i32 %6301, 1
  %6303 = icmp slt i32 %6301, 0
  %6304 = icmp slt i32 %6302, 0
  %6305 = xor i1 %6303, %6304
  br label %6316

; <label>:6306:                                   ; preds = %routine_shll__cl___eax.exit1377
  %6307 = and i32 %6294, 31
  %6308 = zext i32 %6307 to i64
  %6309 = add nuw nsw i64 %6308, 4294967295
  %6310 = and i64 %6297, 4294967295
  %6311 = and i64 %6309, 4294967295
  %6312 = shl i64 %6310, %6311
  %6313 = trunc i64 %6312 to i32
  %6314 = icmp slt i32 %6313, 0
  %6315 = shl i32 %6313, 1
  br label %6316

; <label>:6316:                                   ; preds = %6306, %6300
  %6317 = phi i1 [ %6303, %6300 ], [ %6314, %6306 ]
  %6318 = phi i1 [ %6305, %6300 ], [ false, %6306 ]
  %6319 = phi i32 [ %6302, %6300 ], [ %6315, %6306 ]
  %6320 = zext i32 %6319 to i64
  store i64 %6320, i64* %RAX.i1161, align 8
  %6321 = zext i1 %6317 to i8
  store i8 %6321, i8* %14, align 1
  %6322 = and i32 %6319, 254
  %6323 = tail call i32 @llvm.ctpop.i32(i32 %6322)
  %6324 = trunc i32 %6323 to i8
  %6325 = and i8 %6324, 1
  %6326 = xor i8 %6325, 1
  store i8 %6326, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %6327 = icmp eq i32 %6319, 0
  %6328 = zext i1 %6327 to i8
  store i8 %6328, i8* %29, align 1
  %6329 = lshr i32 %6319, 31
  %6330 = trunc i32 %6329 to i8
  store i8 %6330, i8* %32, align 1
  %6331 = zext i1 %6318 to i8
  store i8 %6331, i8* %38, align 1
  br label %routine_shll__cl___eax.exit1226

routine_shll__cl___eax.exit1226:                  ; preds = %6316, %routine_shll__cl___eax.exit1377
  %6332 = phi i64 [ %6320, %6316 ], [ %6297, %routine_shll__cl___eax.exit1377 ]
  %6333 = shl i64 %6332, 32
  %6334 = ashr i64 %6333, 37
  %6335 = lshr i64 %6334, 1
  %6336 = trunc i64 %6334 to i8
  %6337 = and i8 %6336, 1
  %6338 = trunc i64 %6335 to i32
  %6339 = and i64 %6335, 4294967295
  store i64 %6339, i64* %RAX.i1161, align 8
  store i8 %6337, i8* %14, align 1
  %6340 = and i32 %6338, 255
  %6341 = tail call i32 @llvm.ctpop.i32(i32 %6340)
  %6342 = trunc i32 %6341 to i8
  %6343 = and i8 %6342, 1
  %6344 = xor i8 %6343, 1
  store i8 %6344, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %6345 = icmp eq i32 %6338, 0
  %6346 = zext i1 %6345 to i8
  store i8 %6346, i8* %29, align 1
  %6347 = lshr i64 %6334, 32
  %6348 = trunc i64 %6347 to i8
  %6349 = and i8 %6348, 1
  store i8 %6349, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %6350 = load i64, i64* %RBP.i, align 8
  %6351 = add i64 %6350, -348
  %6352 = add i64 %6296, 13
  store i64 %6352, i64* %3, align 8
  %6353 = inttoptr i64 %6351 to i32*
  %6354 = load i32, i32* %6353, align 4
  %6355 = trunc i64 %6335 to i32
  %6356 = sub i32 %6354, %6355
  %6357 = zext i32 %6356 to i64
  store i64 %6357, i64* %RSI.i2777, align 8
  %6358 = icmp ult i32 %6354, %6355
  %6359 = zext i1 %6358 to i8
  store i8 %6359, i8* %14, align 1
  %6360 = and i32 %6356, 255
  %6361 = tail call i32 @llvm.ctpop.i32(i32 %6360)
  %6362 = trunc i32 %6361 to i8
  %6363 = and i8 %6362, 1
  %6364 = xor i8 %6363, 1
  store i8 %6364, i8* %21, align 1
  %6365 = xor i32 %6355, %6354
  %6366 = xor i32 %6365, %6356
  %6367 = lshr i32 %6366, 4
  %6368 = trunc i32 %6367 to i8
  %6369 = and i8 %6368, 1
  store i8 %6369, i8* %26, align 1
  %6370 = icmp eq i32 %6356, 0
  %6371 = zext i1 %6370 to i8
  store i8 %6371, i8* %29, align 1
  %6372 = lshr i32 %6356, 31
  %6373 = trunc i32 %6372 to i8
  store i8 %6373, i8* %32, align 1
  %6374 = lshr i32 %6354, 31
  %6375 = lshr i64 %6334, 32
  %6376 = trunc i64 %6375 to i32
  %6377 = and i32 %6376, 1
  %6378 = xor i32 %6377, %6374
  %6379 = xor i32 %6372, %6374
  %6380 = add nuw nsw i32 %6379, %6378
  %6381 = icmp eq i32 %6380, 2
  %6382 = zext i1 %6381 to i8
  store i8 %6382, i8* %38, align 1
  %6383 = add i64 %6350, -20
  %6384 = add i64 %6296, 19
  store i64 %6384, i64* %3, align 8
  %6385 = inttoptr i64 %6383 to i32*
  %6386 = load i32, i32* %6385, align 4
  %6387 = sext i32 %6386 to i64
  %6388 = shl nsw i64 %6387, 4
  store i64 %6388, i64* %R9.i3009, align 8
  %6389 = load i64, i64* %R8.i3013, align 8
  %6390 = add i64 %6388, %6389
  store i64 %6390, i64* %R8.i3013, align 8
  %6391 = icmp ult i64 %6390, %6389
  %6392 = icmp ult i64 %6390, %6388
  %6393 = or i1 %6391, %6392
  %6394 = zext i1 %6393 to i8
  store i8 %6394, i8* %14, align 1
  %6395 = trunc i64 %6390 to i32
  %6396 = and i32 %6395, 255
  %6397 = tail call i32 @llvm.ctpop.i32(i32 %6396)
  %6398 = trunc i32 %6397 to i8
  %6399 = and i8 %6398, 1
  %6400 = xor i8 %6399, 1
  store i8 %6400, i8* %21, align 1
  %6401 = xor i64 %6388, %6389
  %6402 = xor i64 %6401, %6390
  %6403 = lshr i64 %6402, 4
  %6404 = trunc i64 %6403 to i8
  %6405 = and i8 %6404, 1
  store i8 %6405, i8* %26, align 1
  %6406 = icmp eq i64 %6390, 0
  %6407 = zext i1 %6406 to i8
  store i8 %6407, i8* %29, align 1
  %6408 = lshr i64 %6390, 63
  %6409 = trunc i64 %6408 to i8
  store i8 %6409, i8* %32, align 1
  %6410 = lshr i64 %6389, 63
  %6411 = lshr i64 %6387, 59
  %6412 = and i64 %6411, 1
  %6413 = xor i64 %6408, %6410
  %6414 = xor i64 %6408, %6412
  %6415 = add nuw nsw i64 %6413, %6414
  %6416 = icmp eq i64 %6415, 2
  %6417 = zext i1 %6416 to i8
  store i8 %6417, i8* %38, align 1
  %6418 = load i64, i64* %RBP.i, align 8
  %6419 = add i64 %6418, -24
  %6420 = add i64 %6296, 30
  store i64 %6420, i64* %3, align 8
  %6421 = inttoptr i64 %6419 to i32*
  %6422 = load i32, i32* %6421, align 4
  %6423 = sext i32 %6422 to i64
  store i64 %6423, i64* %R9.i3009, align 8
  %6424 = load i64, i64* %RSI.i2777, align 8
  %6425 = shl nsw i64 %6423, 2
  %6426 = add i64 %6390, %6425
  %6427 = add i64 %6296, 34
  store i64 %6427, i64* %3, align 8
  %6428 = trunc i64 %6424 to i32
  %6429 = inttoptr i64 %6426 to i32*
  %6430 = load i32, i32* %6429, align 4
  %6431 = sub i32 %6428, %6430
  %6432 = zext i32 %6431 to i64
  store i64 %6432, i64* %RSI.i2777, align 8
  %6433 = icmp ult i32 %6428, %6430
  %6434 = zext i1 %6433 to i8
  store i8 %6434, i8* %14, align 1
  %6435 = and i32 %6431, 255
  %6436 = tail call i32 @llvm.ctpop.i32(i32 %6435)
  %6437 = trunc i32 %6436 to i8
  %6438 = and i8 %6437, 1
  %6439 = xor i8 %6438, 1
  store i8 %6439, i8* %21, align 1
  %6440 = xor i32 %6430, %6428
  %6441 = xor i32 %6440, %6431
  %6442 = lshr i32 %6441, 4
  %6443 = trunc i32 %6442 to i8
  %6444 = and i8 %6443, 1
  store i8 %6444, i8* %26, align 1
  %6445 = icmp eq i32 %6431, 0
  %6446 = zext i1 %6445 to i8
  store i8 %6446, i8* %29, align 1
  %6447 = lshr i32 %6431, 31
  %6448 = trunc i32 %6447 to i8
  store i8 %6448, i8* %32, align 1
  %6449 = lshr i32 %6428, 31
  %6450 = lshr i32 %6430, 31
  %6451 = xor i32 %6450, %6449
  %6452 = xor i32 %6447, %6449
  %6453 = add nuw nsw i32 %6452, %6451
  %6454 = icmp eq i32 %6453, 2
  %6455 = zext i1 %6454 to i8
  store i8 %6455, i8* %38, align 1
  %6456 = sitofp i32 %6431 to double
  store double %6456, double* %44, align 1
  %6457 = add i64 %6418, -280
  %6458 = add i64 %6296, 46
  store i64 %6458, i64* %3, align 8
  %6459 = inttoptr i64 %6457 to double*
  store double %6456, double* %6459, align 8
  %6460 = load i64, i64* %RBP.i, align 8
  %6461 = add i64 %6460, -264
  %6462 = load i64, i64* %3, align 8
  %6463 = add i64 %6462, 6
  store i64 %6463, i64* %3, align 8
  %6464 = inttoptr i64 %6461 to i32*
  %6465 = load i32, i32* %6464, align 4
  %6466 = zext i32 %6465 to i64
  store i64 %6466, i64* %RDI.i2913, align 8
  %6467 = add i64 %6460, -100
  %6468 = add i64 %6462, 9
  store i64 %6468, i64* %3, align 8
  %6469 = inttoptr i64 %6467 to i32*
  %6470 = load i32, i32* %6469, align 4
  %6471 = zext i32 %6470 to i64
  store i64 %6471, i64* %RSI.i2777, align 8
  %6472 = add i64 %6460, -360
  %6473 = add i64 %6462, 16
  store i64 %6473, i64* %3, align 8
  %6474 = inttoptr i64 %6472 to i64*
  %6475 = load i64, i64* %6474, align 8
  store i64 %6475, i64* %RCX.i1519, align 8
  %6476 = add i64 %6462, 656406
  %6477 = add i64 %6462, 21
  %6478 = load i64, i64* %6, align 8
  %6479 = add i64 %6478, -8
  %6480 = inttoptr i64 %6479 to i64*
  store i64 %6477, i64* %6480, align 8
  store i64 %6479, i64* %6, align 8
  store i64 %6476, i64* %3, align 8
  %call2_40ca6a = tail call %struct.Memory* @sub_4ace70.levrun_linfo_inter(%struct.State* nonnull %0, i64 %6476, %struct.Memory* %call2_40c9bb)
  %6481 = load i64, i64* %RBP.i, align 8
  %6482 = add i64 %6481, -280
  %6483 = load i64, i64* %3, align 8
  %6484 = add i64 %6483, 8
  store i64 %6484, i64* %3, align 8
  %6485 = inttoptr i64 %6482 to i64*
  %6486 = load i64, i64* %6485, align 8
  store i64 %6486, i64* %45, align 1
  store double 0.000000e+00, double* %47, align 1
  %6487 = add i64 %6483, 16
  store i64 %6487, i64* %3, align 8
  %6488 = bitcast i64 %6486 to double
  %6489 = inttoptr i64 %6482 to double*
  %6490 = load double, double* %6489, align 8
  %6491 = fmul double %6488, %6490
  store double %6491, double* %44, align 1
  store i64 0, i64* %46, align 1
  %6492 = add i64 %6481, -296
  %6493 = add i64 %6483, 24
  store i64 %6493, i64* %3, align 8
  %6494 = inttoptr i64 %6492 to i64*
  %6495 = load i64, i64* %6494, align 8
  store i64 %6495, i64* %55, align 1
  store double 0.000000e+00, double* %57, align 1
  %6496 = add i64 %6481, -284
  %6497 = add i64 %6483, 32
  store i64 %6497, i64* %3, align 8
  %6498 = inttoptr i64 %6496 to i32*
  %6499 = load i32, i32* %6498, align 4
  %6500 = sitofp i32 %6499 to double
  store double %6500, double* %526, align 1
  %6501 = bitcast i64 %6495 to double
  %6502 = fmul double %6500, %6501
  store double %6502, double* %54, align 1
  store i64 0, i64* %56, align 1
  %6503 = fadd double %6502, %6491
  store double %6503, double* %44, align 1
  store i64 0, i64* %46, align 1
  %6504 = add i64 %6483, 48
  store i64 %6504, i64* %3, align 8
  %6505 = inttoptr i64 %6482 to double*
  store double %6503, double* %6505, align 8
  %6506 = load i64, i64* %RBP.i, align 8
  %6507 = add i64 %6506, -272
  %6508 = load i64, i64* %3, align 8
  %6509 = add i64 %6508, 8
  store i64 %6509, i64* %3, align 8
  %6510 = inttoptr i64 %6507 to i64*
  %6511 = load i64, i64* %6510, align 8
  store i64 %6511, i64* %45, align 1
  store double 0.000000e+00, double* %47, align 1
  %6512 = add i64 %6506, -280
  %6513 = add i64 %6508, 16
  store i64 %6513, i64* %3, align 8
  %6514 = bitcast i64 %6511 to double
  %6515 = inttoptr i64 %6512 to double*
  %6516 = load double, double* %6515, align 8
  %6517 = fcmp uno double %6514, %6516
  br i1 %6517, label %6518, label %6528

; <label>:6518:                                   ; preds = %routine_shll__cl___eax.exit1226
  %6519 = fadd double %6514, %6516
  %6520 = bitcast double %6519 to i64
  %6521 = and i64 %6520, 9221120237041090560
  %6522 = icmp eq i64 %6521, 9218868437227405312
  %6523 = and i64 %6520, 2251799813685247
  %6524 = icmp ne i64 %6523, 0
  %6525 = and i1 %6522, %6524
  br i1 %6525, label %6526, label %6534

; <label>:6526:                                   ; preds = %6518
  %6527 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6513, %struct.Memory* %call2_40ca6a)
  %.pre208 = load i64, i64* %3, align 8
  br label %routine_ucomisd_MINUS0x118__rbp____xmm0.exit

; <label>:6528:                                   ; preds = %routine_shll__cl___eax.exit1226
  %6529 = fcmp ogt double %6514, %6516
  br i1 %6529, label %6534, label %6530

; <label>:6530:                                   ; preds = %6528
  %6531 = fcmp olt double %6514, %6516
  br i1 %6531, label %6534, label %6532

; <label>:6532:                                   ; preds = %6530
  %6533 = fcmp oeq double %6514, %6516
  br i1 %6533, label %6534, label %6538

; <label>:6534:                                   ; preds = %6532, %6530, %6528, %6518
  %6535 = phi i8 [ 0, %6528 ], [ 0, %6530 ], [ 1, %6532 ], [ 1, %6518 ]
  %6536 = phi i8 [ 0, %6528 ], [ 0, %6530 ], [ 0, %6532 ], [ 1, %6518 ]
  %6537 = phi i8 [ 0, %6528 ], [ 1, %6530 ], [ 0, %6532 ], [ 1, %6518 ]
  store i8 %6535, i8* %29, align 1
  store i8 %6536, i8* %21, align 1
  store i8 %6537, i8* %14, align 1
  br label %6538

; <label>:6538:                                   ; preds = %6534, %6532
  store i8 0, i8* %38, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %26, align 1
  br label %routine_ucomisd_MINUS0x118__rbp____xmm0.exit

routine_ucomisd_MINUS0x118__rbp____xmm0.exit:     ; preds = %6538, %6526
  %6539 = phi i64 [ %.pre208, %6526 ], [ %6513, %6538 ]
  %6540 = phi %struct.Memory* [ %6527, %6526 ], [ %call2_40ca6a, %6538 ]
  %6541 = add i64 %6539, 97
  %6542 = add i64 %6539, 6
  %6543 = load i8, i8* %29, align 1
  %6544 = icmp eq i8 %6543, 0
  %6545 = select i1 %6544, i64 %6541, i64 %6542
  store i64 %6545, i64* %3, align 8
  br i1 %6544, label %block_.L_40cb10, label %block_40cab5

block_40cab5:                                     ; preds = %routine_ucomisd_MINUS0x118__rbp____xmm0.exit
  %6546 = load i8, i8* %21, align 1
  %6547 = icmp ne i8 %6546, 0
  %.v291 = select i1 %6547, i64 91, i64 6
  %6548 = add i64 %6545, %.v291
  store i64 %6548, i64* %3, align 8
  %cmpBr_40cab5 = icmp eq i8 %6546, 1
  br i1 %cmpBr_40cab5, label %block_.L_40cb10, label %block_40cabb

block_40cabb:                                     ; preds = %block_40cab5
  %6549 = load i64, i64* %RBP.i, align 8
  %6550 = add i64 %6549, -260
  %6551 = add i64 %6548, 6
  store i64 %6551, i64* %3, align 8
  %6552 = inttoptr i64 %6550 to i32*
  %6553 = load i32, i32* %6552, align 4
  %6554 = zext i32 %6553 to i64
  store i64 %6554, i64* %RDI.i2913, align 8
  %6555 = add i64 %6548, -47803
  %6556 = add i64 %6548, 11
  %6557 = load i64, i64* %6, align 8
  %6558 = add i64 %6557, -8
  %6559 = inttoptr i64 %6558 to i64*
  store i64 %6556, i64* %6559, align 8
  store i64 %6558, i64* %6, align 8
  store i64 %6555, i64* %3, align 8
  %6560 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %6540)
  %6561 = load i64, i64* %RBP.i, align 8
  %6562 = add i64 %6561, -264
  %6563 = load i64, i64* %3, align 8
  %6564 = add i64 %6563, 6
  store i64 %6564, i64* %3, align 8
  %6565 = inttoptr i64 %6562 to i32*
  %6566 = load i32, i32* %6565, align 4
  %6567 = zext i32 %6566 to i64
  store i64 %6567, i64* %RDI.i2913, align 8
  %6568 = add i64 %6561, -364
  %6569 = load i32, i32* %EAX.i2800, align 4
  %6570 = add i64 %6563, 12
  store i64 %6570, i64* %3, align 8
  %6571 = inttoptr i64 %6568 to i32*
  store i32 %6569, i32* %6571, align 4
  %6572 = load i64, i64* %3, align 8
  %6573 = add i64 %6572, -47826
  %6574 = add i64 %6572, 5
  %6575 = load i64, i64* %6, align 8
  %6576 = add i64 %6575, -8
  %6577 = inttoptr i64 %6576 to i64*
  store i64 %6574, i64* %6577, align 8
  store i64 %6576, i64* %6, align 8
  store i64 %6573, i64* %3, align 8
  %6578 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %6560)
  %6579 = load i64, i64* %RBP.i, align 8
  %6580 = add i64 %6579, -364
  %6581 = load i64, i64* %3, align 8
  %6582 = add i64 %6581, 6
  store i64 %6582, i64* %3, align 8
  %6583 = inttoptr i64 %6580 to i32*
  %6584 = load i32, i32* %6583, align 4
  %6585 = zext i32 %6584 to i64
  store i64 %6585, i64* %RDI.i2913, align 8
  %6586 = load i32, i32* %EAX.i2800, align 4
  %6587 = sub i32 %6584, %6586
  %6588 = icmp ult i32 %6584, %6586
  %6589 = zext i1 %6588 to i8
  store i8 %6589, i8* %14, align 1
  %6590 = and i32 %6587, 255
  %6591 = tail call i32 @llvm.ctpop.i32(i32 %6590)
  %6592 = trunc i32 %6591 to i8
  %6593 = and i8 %6592, 1
  %6594 = xor i8 %6593, 1
  store i8 %6594, i8* %21, align 1
  %6595 = xor i32 %6586, %6584
  %6596 = xor i32 %6595, %6587
  %6597 = lshr i32 %6596, 4
  %6598 = trunc i32 %6597 to i8
  %6599 = and i8 %6598, 1
  store i8 %6599, i8* %26, align 1
  %6600 = icmp eq i32 %6587, 0
  %6601 = zext i1 %6600 to i8
  store i8 %6601, i8* %29, align 1
  %6602 = lshr i32 %6587, 31
  %6603 = trunc i32 %6602 to i8
  store i8 %6603, i8* %32, align 1
  %6604 = lshr i32 %6584, 31
  %6605 = lshr i32 %6586, 31
  %6606 = xor i32 %6605, %6604
  %6607 = xor i32 %6602, %6604
  %6608 = add nuw nsw i32 %6607, %6606
  %6609 = icmp eq i32 %6608, 2
  %6610 = zext i1 %6609 to i8
  store i8 %6610, i8* %38, align 1
  %6611 = icmp ne i8 %6603, 0
  %6612 = xor i1 %6611, %6609
  %.v249 = select i1 %6612, i64 14, i64 31
  %6613 = add i64 %6581, %.v249
  store i64 %6613, i64* %3, align 8
  br i1 %6612, label %block_40cae5, label %block_.L_40caf6

block_40cae5:                                     ; preds = %block_40cabb
  %6614 = add i64 %6579, -260
  %6615 = add i64 %6613, 6
  store i64 %6615, i64* %3, align 8
  %6616 = inttoptr i64 %6614 to i32*
  %6617 = load i32, i32* %6616, align 4
  %6618 = zext i32 %6617 to i64
  store i64 %6618, i64* %RAX.i1161, align 8
  %6619 = add i64 %6579, -368
  %6620 = add i64 %6613, 12
  store i64 %6620, i64* %3, align 8
  %6621 = inttoptr i64 %6619 to i32*
  store i32 %6617, i32* %6621, align 4
  %6622 = load i64, i64* %3, align 8
  %6623 = add i64 %6622, 17
  store i64 %6623, i64* %3, align 8
  br label %block_.L_40cb02

block_.L_40caf6:                                  ; preds = %block_40cabb
  %6624 = add i64 %6579, -264
  %6625 = add i64 %6613, 6
  store i64 %6625, i64* %3, align 8
  %6626 = inttoptr i64 %6624 to i32*
  %6627 = load i32, i32* %6626, align 4
  %6628 = zext i32 %6627 to i64
  store i64 %6628, i64* %RAX.i1161, align 8
  %6629 = add i64 %6579, -368
  %6630 = add i64 %6613, 12
  store i64 %6630, i64* %3, align 8
  %6631 = inttoptr i64 %6629 to i32*
  store i32 %6627, i32* %6631, align 4
  %.pre209 = load i64, i64* %3, align 8
  br label %block_.L_40cb02

block_.L_40cb02:                                  ; preds = %block_.L_40caf6, %block_40cae5
  %6632 = phi i64 [ %.pre209, %block_.L_40caf6 ], [ %6623, %block_40cae5 ]
  %6633 = load i64, i64* %RBP.i, align 8
  %6634 = add i64 %6633, -368
  %6635 = add i64 %6632, 6
  store i64 %6635, i64* %3, align 8
  %6636 = inttoptr i64 %6634 to i32*
  %6637 = load i32, i32* %6636, align 4
  %6638 = zext i32 %6637 to i64
  store i64 %6638, i64* %RAX.i1161, align 8
  %6639 = add i64 %6633, -92
  %6640 = add i64 %6632, 9
  store i64 %6640, i64* %3, align 8
  %6641 = inttoptr i64 %6639 to i32*
  store i32 %6637, i32* %6641, align 4
  %6642 = load i64, i64* %3, align 8
  %6643 = add i64 %6642, 59
  br label %block_.L_40cb46

block_.L_40cb10:                                  ; preds = %block_40cab5, %routine_ucomisd_MINUS0x118__rbp____xmm0.exit
  %6644 = phi i64 [ %6548, %block_40cab5 ], [ %6541, %routine_ucomisd_MINUS0x118__rbp____xmm0.exit ]
  %6645 = load i64, i64* %RBP.i, align 8
  %6646 = add i64 %6645, -272
  %6647 = add i64 %6644, 8
  store i64 %6647, i64* %3, align 8
  %6648 = inttoptr i64 %6646 to i64*
  %6649 = load i64, i64* %6648, align 8
  store i64 %6649, i64* %45, align 1
  store double 0.000000e+00, double* %47, align 1
  %6650 = add i64 %6645, -280
  %6651 = add i64 %6644, 16
  store i64 %6651, i64* %3, align 8
  %6652 = inttoptr i64 %6650 to i64*
  %6653 = load i64, i64* %6652, align 8
  store i64 %6653, i64* %55, align 1
  store double 0.000000e+00, double* %57, align 1
  %6654 = add i64 %6644, 20
  store i64 %6654, i64* %3, align 8
  %.cast = bitcast i64 %6653 to double
  %6655 = bitcast i64 %6649 to double
  %6656 = fcmp uno double %.cast, %6655
  br i1 %6656, label %6657, label %6667

; <label>:6657:                                   ; preds = %block_.L_40cb10
  %6658 = fadd double %.cast, %6655
  %6659 = bitcast double %6658 to i64
  %6660 = and i64 %6659, 9221120237041090560
  %6661 = icmp eq i64 %6660, 9218868437227405312
  %6662 = and i64 %6659, 2251799813685247
  %6663 = icmp ne i64 %6662, 0
  %6664 = and i1 %6661, %6663
  br i1 %6664, label %6665, label %6673

; <label>:6665:                                   ; preds = %6657
  %6666 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6654, %struct.Memory* %6540)
  %.pre210 = load i64, i64* %3, align 8
  %.pre211 = load i8, i8* %29, align 1
  %.pre212 = load i64, i64* %RBP.i, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit

; <label>:6667:                                   ; preds = %block_.L_40cb10
  %6668 = fcmp ogt double %.cast, %6655
  br i1 %6668, label %6673, label %6669

; <label>:6669:                                   ; preds = %6667
  %6670 = fcmp olt double %.cast, %6655
  br i1 %6670, label %6673, label %6671

; <label>:6671:                                   ; preds = %6669
  %6672 = fcmp oeq double %.cast, %6655
  br i1 %6672, label %6673, label %6677

; <label>:6673:                                   ; preds = %6671, %6669, %6667, %6657
  %6674 = phi i8 [ 0, %6667 ], [ 0, %6669 ], [ 1, %6671 ], [ 1, %6657 ]
  %6675 = phi i8 [ 0, %6667 ], [ 0, %6669 ], [ 0, %6671 ], [ 1, %6657 ]
  %6676 = phi i8 [ 0, %6667 ], [ 1, %6669 ], [ 0, %6671 ], [ 1, %6657 ]
  store i8 %6674, i8* %29, align 1
  store i8 %6675, i8* %21, align 1
  store i8 %6676, i8* %14, align 1
  br label %6677

; <label>:6677:                                   ; preds = %6673, %6671
  %6678 = phi i8 [ %6674, %6673 ], [ %6543, %6671 ]
  store i8 0, i8* %38, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %26, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit

routine_ucomisd__xmm0___xmm1.exit:                ; preds = %6677, %6665
  %6679 = phi i64 [ %.pre212, %6665 ], [ %6645, %6677 ]
  %6680 = phi i8 [ %.pre211, %6665 ], [ %6678, %6677 ]
  %6681 = phi i64 [ %.pre210, %6665 ], [ %6654, %6677 ]
  %6682 = phi %struct.Memory* [ %6666, %6665 ], [ %6540, %6677 ]
  %6683 = load i8, i8* %14, align 1
  %6684 = or i8 %6680, %6683
  %6685 = icmp ne i8 %6684, 0
  %.v292 = select i1 %6685, i64 20, i64 6
  %6686 = add i64 %6681, %.v292
  store i64 %6686, i64* %3, align 8
  br i1 %6685, label %block_.L_40cb38, label %block_40cb2a

block_40cb2a:                                     ; preds = %routine_ucomisd__xmm0___xmm1.exit
  %6687 = add i64 %6679, -260
  %6688 = add i64 %6686, 6
  store i64 %6688, i64* %3, align 8
  %6689 = inttoptr i64 %6687 to i32*
  %6690 = load i32, i32* %6689, align 4
  %6691 = zext i32 %6690 to i64
  store i64 %6691, i64* %RAX.i1161, align 8
  %6692 = add i64 %6679, -92
  %6693 = add i64 %6686, 9
  store i64 %6693, i64* %3, align 8
  %6694 = inttoptr i64 %6692 to i32*
  store i32 %6690, i32* %6694, align 4
  %6695 = load i64, i64* %3, align 8
  %6696 = add i64 %6695, 14
  store i64 %6696, i64* %3, align 8
  br label %block_.L_40cb41

block_.L_40cb38:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit
  %6697 = add i64 %6679, -264
  %6698 = add i64 %6686, 6
  store i64 %6698, i64* %3, align 8
  %6699 = inttoptr i64 %6697 to i32*
  %6700 = load i32, i32* %6699, align 4
  %6701 = zext i32 %6700 to i64
  store i64 %6701, i64* %RAX.i1161, align 8
  %6702 = add i64 %6679, -92
  %6703 = add i64 %6686, 9
  store i64 %6703, i64* %3, align 8
  %6704 = inttoptr i64 %6702 to i32*
  store i32 %6700, i32* %6704, align 4
  %.pre213 = load i64, i64* %3, align 8
  br label %block_.L_40cb41

block_.L_40cb41:                                  ; preds = %block_.L_40cb38, %block_40cb2a
  %6705 = phi i64 [ %.pre213, %block_.L_40cb38 ], [ %6696, %block_40cb2a ]
  %6706 = add i64 %6705, 5
  store i64 %6706, i64* %3, align 8
  br label %block_.L_40cb46

block_.L_40cb46:                                  ; preds = %block_.L_40cb41, %block_.L_40cb02
  %storemerge = phi i64 [ %6643, %block_.L_40cb02 ], [ %6706, %block_.L_40cb41 ]
  %MEMORY.17 = phi %struct.Memory* [ %6578, %block_.L_40cb02 ], [ %6682, %block_.L_40cb41 ]
  %6707 = load i64, i64* %RBP.i, align 8
  %6708 = add i64 %6707, -92
  %6709 = add i64 %storemerge, 3
  store i64 %6709, i64* %3, align 8
  %6710 = inttoptr i64 %6708 to i32*
  %6711 = load i32, i32* %6710, align 4
  %6712 = zext i32 %6711 to i64
  store i64 %6712, i64* %RAX.i1161, align 8
  %6713 = add i64 %6707, -260
  %6714 = add i64 %storemerge, 9
  store i64 %6714, i64* %3, align 8
  %6715 = inttoptr i64 %6713 to i32*
  %6716 = load i32, i32* %6715, align 4
  %6717 = sub i32 %6711, %6716
  %6718 = icmp ult i32 %6711, %6716
  %6719 = zext i1 %6718 to i8
  store i8 %6719, i8* %14, align 1
  %6720 = and i32 %6717, 255
  %6721 = tail call i32 @llvm.ctpop.i32(i32 %6720)
  %6722 = trunc i32 %6721 to i8
  %6723 = and i8 %6722, 1
  %6724 = xor i8 %6723, 1
  store i8 %6724, i8* %21, align 1
  %6725 = xor i32 %6716, %6711
  %6726 = xor i32 %6725, %6717
  %6727 = lshr i32 %6726, 4
  %6728 = trunc i32 %6727 to i8
  %6729 = and i8 %6728, 1
  store i8 %6729, i8* %26, align 1
  %6730 = icmp eq i32 %6717, 0
  %6731 = zext i1 %6730 to i8
  store i8 %6731, i8* %29, align 1
  %6732 = lshr i32 %6717, 31
  %6733 = trunc i32 %6732 to i8
  store i8 %6733, i8* %32, align 1
  %6734 = lshr i32 %6711, 31
  %6735 = lshr i32 %6716, 31
  %6736 = xor i32 %6735, %6734
  %6737 = xor i32 %6732, %6734
  %6738 = add nuw nsw i32 %6737, %6736
  %6739 = icmp eq i32 %6738, 2
  %6740 = zext i1 %6739 to i8
  store i8 %6740, i8* %38, align 1
  %.v250 = select i1 %6730, i64 15, i64 32
  %6741 = add i64 %storemerge, %.v250
  store i64 %6741, i64* %3, align 8
  br i1 %6730, label %block_40cb55, label %block_.L_40cb66

block_40cb55:                                     ; preds = %block_.L_40cb46
  %6742 = add i64 %6707, -252
  %6743 = add i64 %6741, 6
  store i64 %6743, i64* %3, align 8
  %6744 = inttoptr i64 %6742 to i32*
  %6745 = load i32, i32* %6744, align 4
  %6746 = zext i32 %6745 to i64
  store i64 %6746, i64* %RAX.i1161, align 8
  %6747 = add i64 %6707, -372
  %6748 = add i64 %6741, 12
  store i64 %6748, i64* %3, align 8
  %6749 = inttoptr i64 %6747 to i32*
  store i32 %6745, i32* %6749, align 4
  %6750 = load i64, i64* %3, align 8
  %6751 = add i64 %6750, 17
  store i64 %6751, i64* %3, align 8
  br label %block_.L_40cb72

block_.L_40cb66:                                  ; preds = %block_.L_40cb46
  %6752 = add i64 %6707, -256
  %6753 = add i64 %6741, 6
  store i64 %6753, i64* %3, align 8
  %6754 = inttoptr i64 %6752 to i32*
  %6755 = load i32, i32* %6754, align 4
  %6756 = zext i32 %6755 to i64
  store i64 %6756, i64* %RAX.i1161, align 8
  %6757 = add i64 %6707, -372
  %6758 = add i64 %6741, 12
  store i64 %6758, i64* %3, align 8
  %6759 = inttoptr i64 %6757 to i32*
  store i32 %6755, i32* %6759, align 4
  %.pre214 = load i64, i64* %3, align 8
  br label %block_.L_40cb72

block_.L_40cb72:                                  ; preds = %block_.L_40cb66, %block_40cb55
  %6760 = phi i64 [ %.pre214, %block_.L_40cb66 ], [ %6751, %block_40cb55 ]
  %6761 = load i64, i64* %RBP.i, align 8
  %6762 = add i64 %6761, -372
  %6763 = add i64 %6760, 6
  store i64 %6763, i64* %3, align 8
  %6764 = inttoptr i64 %6762 to i32*
  %6765 = load i32, i32* %6764, align 4
  %6766 = zext i32 %6765 to i64
  store i64 %6766, i64* %RAX.i1161, align 8
  %6767 = add i64 %6761, -180
  %6768 = add i64 %6760, 12
  store i64 %6768, i64* %3, align 8
  %6769 = inttoptr i64 %6767 to i32*
  store i32 %6765, i32* %6769, align 4
  %6770 = load i64, i64* %3, align 8
  %6771 = add i64 %6770, 159
  br label %block_.L_40cc1d

block_.L_40cb83:                                  ; preds = %block_40c865, %block_40c858, %routine_sarl__cl___eax.exit1486
  %6772 = phi i64 [ %5564, %block_40c865 ], [ %5552, %block_40c858 ], [ %5540, %routine_sarl__cl___eax.exit1486 ]
  %6773 = add i64 %6772, 6
  store i64 %6773, i64* %3, align 8
  %6774 = load i32, i32* %5509, align 4
  %6775 = zext i32 %6774 to i64
  store i64 %6775, i64* %RAX.i1161, align 8
  %6776 = add i64 %6772, 12
  store i64 %6776, i64* %3, align 8
  %6777 = load i32, i32* %5514, align 4
  %6778 = sub i32 %6774, %6777
  %6779 = icmp ult i32 %6774, %6777
  %6780 = zext i1 %6779 to i8
  store i8 %6780, i8* %14, align 1
  %6781 = and i32 %6778, 255
  %6782 = tail call i32 @llvm.ctpop.i32(i32 %6781)
  %6783 = trunc i32 %6782 to i8
  %6784 = and i8 %6783, 1
  %6785 = xor i8 %6784, 1
  store i8 %6785, i8* %21, align 1
  %6786 = xor i32 %6777, %6774
  %6787 = xor i32 %6786, %6778
  %6788 = lshr i32 %6787, 4
  %6789 = trunc i32 %6788 to i8
  %6790 = and i8 %6789, 1
  store i8 %6790, i8* %26, align 1
  %6791 = icmp eq i32 %6778, 0
  %6792 = zext i1 %6791 to i8
  store i8 %6792, i8* %29, align 1
  %6793 = lshr i32 %6778, 31
  %6794 = trunc i32 %6793 to i8
  store i8 %6794, i8* %32, align 1
  %6795 = lshr i32 %6774, 31
  %6796 = lshr i32 %6777, 31
  %6797 = xor i32 %6796, %6795
  %6798 = xor i32 %6793, %6795
  %6799 = add nuw nsw i32 %6798, %6797
  %6800 = icmp eq i32 %6799, 2
  %6801 = zext i1 %6800 to i8
  store i8 %6801, i8* %38, align 1
  %.v253 = select i1 %6791, i64 18, i64 44
  %6802 = add i64 %6772, %.v253
  store i64 %6802, i64* %3, align 8
  br i1 %6791, label %block_40cb95, label %block_.L_40cbaf

block_40cb95:                                     ; preds = %block_.L_40cb83
  %6803 = add i64 %6802, 6
  store i64 %6803, i64* %3, align 8
  %6804 = load i32, i32* %5509, align 4
  %6805 = zext i32 %6804 to i64
  store i64 %6805, i64* %RAX.i1161, align 8
  %6806 = add i64 %5505, -92
  %6807 = add i64 %6802, 9
  store i64 %6807, i64* %3, align 8
  %6808 = inttoptr i64 %6806 to i32*
  store i32 %6804, i32* %6808, align 4
  %6809 = load i64, i64* %RBP.i, align 8
  %6810 = add i64 %6809, -252
  %6811 = load i64, i64* %3, align 8
  %6812 = add i64 %6811, 6
  store i64 %6812, i64* %3, align 8
  %6813 = inttoptr i64 %6810 to i32*
  %6814 = load i32, i32* %6813, align 4
  %6815 = zext i32 %6814 to i64
  store i64 %6815, i64* %RAX.i1161, align 8
  %6816 = add i64 %6809, -180
  %6817 = add i64 %6811, 12
  store i64 %6817, i64* %3, align 8
  %6818 = inttoptr i64 %6816 to i32*
  store i32 %6814, i32* %6818, align 4
  %6819 = load i64, i64* %3, align 8
  %6820 = add i64 %6819, 110
  store i64 %6820, i64* %3, align 8
  br label %block_.L_40cc18

block_.L_40cbaf:                                  ; preds = %block_.L_40cb83
  %6821 = add i64 %6802, 7
  store i64 %6821, i64* %3, align 8
  %6822 = load i32, i32* %5509, align 4
  store i8 0, i8* %14, align 1
  %6823 = and i32 %6822, 255
  %6824 = tail call i32 @llvm.ctpop.i32(i32 %6823)
  %6825 = trunc i32 %6824 to i8
  %6826 = and i8 %6825, 1
  %6827 = xor i8 %6826, 1
  store i8 %6827, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %6828 = icmp eq i32 %6822, 0
  %6829 = zext i1 %6828 to i8
  store i8 %6829, i8* %29, align 1
  %6830 = lshr i32 %6822, 31
  %6831 = trunc i32 %6830 to i8
  store i8 %6831, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v254 = select i1 %6828, i64 13, i64 30
  %6832 = add i64 %6802, %.v254
  %6833 = add i64 %6832, 6
  store i64 %6833, i64* %3, align 8
  br i1 %6828, label %block_40cbbc, label %block_.L_40cbcd

block_40cbbc:                                     ; preds = %block_.L_40cbaf
  %6834 = load i32, i32* %5509, align 4
  %6835 = zext i32 %6834 to i64
  store i64 %6835, i64* %RAX.i1161, align 8
  %6836 = add i64 %5505, -376
  %6837 = add i64 %6832, 12
  store i64 %6837, i64* %3, align 8
  %6838 = inttoptr i64 %6836 to i32*
  store i32 %6834, i32* %6838, align 4
  %6839 = load i64, i64* %3, align 8
  %6840 = add i64 %6839, 17
  store i64 %6840, i64* %3, align 8
  br label %block_.L_40cbd9

block_.L_40cbcd:                                  ; preds = %block_.L_40cbaf
  %6841 = load i32, i32* %5514, align 4
  %6842 = zext i32 %6841 to i64
  store i64 %6842, i64* %RAX.i1161, align 8
  %6843 = add i64 %5505, -376
  %6844 = add i64 %6832, 12
  store i64 %6844, i64* %3, align 8
  %6845 = inttoptr i64 %6843 to i32*
  store i32 %6841, i32* %6845, align 4
  %.pre215 = load i64, i64* %3, align 8
  br label %block_.L_40cbd9

block_.L_40cbd9:                                  ; preds = %block_.L_40cbcd, %block_40cbbc
  %6846 = phi i64 [ %.pre215, %block_.L_40cbcd ], [ %6840, %block_40cbbc ]
  %6847 = load i64, i64* %RBP.i, align 8
  %6848 = add i64 %6847, -376
  %6849 = add i64 %6846, 6
  store i64 %6849, i64* %3, align 8
  %6850 = inttoptr i64 %6848 to i32*
  %6851 = load i32, i32* %6850, align 4
  %6852 = zext i32 %6851 to i64
  store i64 %6852, i64* %RAX.i1161, align 8
  %6853 = add i64 %6847, -92
  %6854 = add i64 %6846, 9
  store i64 %6854, i64* %3, align 8
  %6855 = inttoptr i64 %6853 to i32*
  store i32 %6851, i32* %6855, align 4
  %6856 = load i64, i64* %RBP.i, align 8
  %6857 = add i64 %6856, -260
  %6858 = load i64, i64* %3, align 8
  %6859 = add i64 %6858, 7
  store i64 %6859, i64* %3, align 8
  %6860 = inttoptr i64 %6857 to i32*
  %6861 = load i32, i32* %6860, align 4
  store i8 0, i8* %14, align 1
  %6862 = and i32 %6861, 255
  %6863 = tail call i32 @llvm.ctpop.i32(i32 %6862)
  %6864 = trunc i32 %6863 to i8
  %6865 = and i8 %6864, 1
  %6866 = xor i8 %6865, 1
  store i8 %6866, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %6867 = icmp eq i32 %6861, 0
  %6868 = zext i1 %6867 to i8
  store i8 %6868, i8* %29, align 1
  %6869 = lshr i32 %6861, 31
  %6870 = trunc i32 %6869 to i8
  store i8 %6870, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v255 = select i1 %6867, i64 13, i64 30
  %6871 = add i64 %6858, %.v255
  store i64 %6871, i64* %3, align 8
  br i1 %6867, label %block_40cbef, label %block_.L_40cc00

block_40cbef:                                     ; preds = %block_.L_40cbd9
  %6872 = add i64 %6856, -252
  %6873 = add i64 %6871, 6
  store i64 %6873, i64* %3, align 8
  %6874 = inttoptr i64 %6872 to i32*
  %6875 = load i32, i32* %6874, align 4
  %6876 = zext i32 %6875 to i64
  store i64 %6876, i64* %RAX.i1161, align 8
  %6877 = add i64 %6856, -380
  %6878 = add i64 %6871, 12
  store i64 %6878, i64* %3, align 8
  %6879 = inttoptr i64 %6877 to i32*
  store i32 %6875, i32* %6879, align 4
  %6880 = load i64, i64* %3, align 8
  %6881 = add i64 %6880, 17
  store i64 %6881, i64* %3, align 8
  br label %block_.L_40cc0c

block_.L_40cc00:                                  ; preds = %block_.L_40cbd9
  %6882 = add i64 %6856, -256
  %6883 = add i64 %6871, 6
  store i64 %6883, i64* %3, align 8
  %6884 = inttoptr i64 %6882 to i32*
  %6885 = load i32, i32* %6884, align 4
  %6886 = zext i32 %6885 to i64
  store i64 %6886, i64* %RAX.i1161, align 8
  %6887 = add i64 %6856, -380
  %6888 = add i64 %6871, 12
  store i64 %6888, i64* %3, align 8
  %6889 = inttoptr i64 %6887 to i32*
  store i32 %6885, i32* %6889, align 4
  %.pre216 = load i64, i64* %3, align 8
  br label %block_.L_40cc0c

block_.L_40cc0c:                                  ; preds = %block_.L_40cc00, %block_40cbef
  %6890 = phi i64 [ %.pre216, %block_.L_40cc00 ], [ %6881, %block_40cbef ]
  %6891 = load i64, i64* %RBP.i, align 8
  %6892 = add i64 %6891, -380
  %6893 = add i64 %6890, 6
  store i64 %6893, i64* %3, align 8
  %6894 = inttoptr i64 %6892 to i32*
  %6895 = load i32, i32* %6894, align 4
  %6896 = zext i32 %6895 to i64
  store i64 %6896, i64* %RAX.i1161, align 8
  %6897 = add i64 %6891, -180
  %6898 = add i64 %6890, 12
  store i64 %6898, i64* %3, align 8
  %6899 = inttoptr i64 %6897 to i32*
  store i32 %6895, i32* %6899, align 4
  %.pre217 = load i64, i64* %3, align 8
  br label %block_.L_40cc18

block_.L_40cc18:                                  ; preds = %block_.L_40cc0c, %block_40cb95
  %6900 = phi i64 [ %.pre217, %block_.L_40cc0c ], [ %6820, %block_40cb95 ]
  %6901 = add i64 %6900, 5
  store i64 %6901, i64* %3, align 8
  br label %block_.L_40cc1d

block_.L_40cc1d:                                  ; preds = %block_.L_40cc18, %block_.L_40cb72
  %storemerge101 = phi i64 [ %6771, %block_.L_40cb72 ], [ %6901, %block_.L_40cc18 ]
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.17, %block_.L_40cb72 ], [ %5338, %block_.L_40cc18 ]
  %6902 = load i64, i64* %RBP.i, align 8
  %6903 = add i64 %6902, -92
  %6904 = add i64 %storemerge101, 4
  store i64 %6904, i64* %3, align 8
  %6905 = inttoptr i64 %6903 to i32*
  %6906 = load i32, i32* %6905, align 4
  store i8 0, i8* %14, align 1
  %6907 = and i32 %6906, 255
  %6908 = tail call i32 @llvm.ctpop.i32(i32 %6907)
  %6909 = trunc i32 %6908 to i8
  %6910 = and i8 %6909, 1
  %6911 = xor i8 %6910, 1
  store i8 %6911, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %6912 = icmp eq i32 %6906, 0
  %6913 = zext i1 %6912 to i8
  store i8 %6913, i8* %29, align 1
  %6914 = lshr i32 %6906, 31
  %6915 = trunc i32 %6914 to i8
  store i8 %6915, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %.v251 = select i1 %6912, i64 256, i64 10
  %6916 = add i64 %storemerge101, %.v251
  store i64 %6916, i64* %3, align 8
  br i1 %6912, label %block_.L_40cd1d, label %block_40cc27

block_40cc27:                                     ; preds = %block_.L_40cc1d
  %6917 = add i64 %6902, -104
  %6918 = add i64 %6916, 7
  store i64 %6918, i64* %3, align 8
  %6919 = inttoptr i64 %6917 to i32*
  store i32 1, i32* %6919, align 4
  %6920 = load i64, i64* %RBP.i, align 8
  %6921 = add i64 %6920, -92
  %6922 = load i64, i64* %3, align 8
  %6923 = add i64 %6922, 4
  store i64 %6923, i64* %3, align 8
  %6924 = inttoptr i64 %6921 to i32*
  %6925 = load i32, i32* %6924, align 4
  %6926 = add i32 %6925, -1
  %6927 = icmp eq i32 %6925, 0
  %6928 = zext i1 %6927 to i8
  store i8 %6928, i8* %14, align 1
  %6929 = and i32 %6926, 255
  %6930 = tail call i32 @llvm.ctpop.i32(i32 %6929)
  %6931 = trunc i32 %6930 to i8
  %6932 = and i8 %6931, 1
  %6933 = xor i8 %6932, 1
  store i8 %6933, i8* %21, align 1
  %6934 = xor i32 %6926, %6925
  %6935 = lshr i32 %6934, 4
  %6936 = trunc i32 %6935 to i8
  %6937 = and i8 %6936, 1
  store i8 %6937, i8* %26, align 1
  %6938 = icmp eq i32 %6926, 0
  %6939 = zext i1 %6938 to i8
  store i8 %6939, i8* %29, align 1
  %6940 = lshr i32 %6926, 31
  %6941 = trunc i32 %6940 to i8
  store i8 %6941, i8* %32, align 1
  %6942 = lshr i32 %6925, 31
  %6943 = xor i32 %6940, %6942
  %6944 = add nuw nsw i32 %6943, %6942
  %6945 = icmp eq i32 %6944, 2
  %6946 = zext i1 %6945 to i8
  store i8 %6946, i8* %38, align 1
  %6947 = icmp ne i8 %6941, 0
  %6948 = xor i1 %6947, %6945
  %6949 = or i1 %6938, %6948
  %.v252 = select i1 %6949, i64 29, i64 10
  %6950 = add i64 %6922, %.v252
  store i64 %6950, i64* %3, align 8
  br i1 %6949, label %block_.L_40cc4b, label %block_40cc38

block_40cc38:                                     ; preds = %block_40cc27
  %6951 = add i64 %6920, -16
  %6952 = add i64 %6950, 4
  store i64 %6952, i64* %3, align 8
  %6953 = inttoptr i64 %6951 to i64*
  %6954 = load i64, i64* %6953, align 8
  store i64 %6954, i64* %RAX.i1161, align 8
  %6955 = add i64 %6950, 6
  store i64 %6955, i64* %3, align 8
  %6956 = inttoptr i64 %6954 to i32*
  %6957 = load i32, i32* %6956, align 4
  %6958 = add i32 %6957, 999999
  %6959 = zext i32 %6958 to i64
  store i64 %6959, i64* %RCX.i1519, align 8
  %6960 = icmp ugt i32 %6957, -1000000
  %6961 = zext i1 %6960 to i8
  store i8 %6961, i8* %14, align 1
  %6962 = and i32 %6958, 255
  %6963 = tail call i32 @llvm.ctpop.i32(i32 %6962)
  %6964 = trunc i32 %6963 to i8
  %6965 = and i8 %6964, 1
  %6966 = xor i8 %6965, 1
  store i8 %6966, i8* %21, align 1
  %6967 = xor i32 %6957, 16
  %6968 = xor i32 %6967, %6958
  %6969 = lshr i32 %6968, 4
  %6970 = trunc i32 %6969 to i8
  %6971 = and i8 %6970, 1
  store i8 %6971, i8* %26, align 1
  %6972 = icmp eq i32 %6958, 0
  %6973 = zext i1 %6972 to i8
  store i8 %6973, i8* %29, align 1
  %6974 = lshr i32 %6958, 31
  %6975 = trunc i32 %6974 to i8
  store i8 %6975, i8* %32, align 1
  %6976 = lshr i32 %6957, 31
  %6977 = xor i32 %6974, %6976
  %6978 = add nuw nsw i32 %6977, %6974
  %6979 = icmp eq i32 %6978, 2
  %6980 = zext i1 %6979 to i8
  store i8 %6980, i8* %38, align 1
  %6981 = add i64 %6950, 14
  store i64 %6981, i64* %3, align 8
  store i32 %6958, i32* %6956, align 4
  %6982 = load i64, i64* %3, align 8
  %6983 = add i64 %6982, 53
  store i64 %6983, i64* %3, align 8
  br label %block_.L_40cc7b

block_.L_40cc4b:                                  ; preds = %block_40cc27
  store i64 ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64), i64* %RAX.i1161, align 8
  %6984 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %6984, i64* %RCX.i1519, align 8
  %6985 = add i64 %6984, 2468
  %6986 = add i64 %6950, 25
  store i64 %6986, i64* %3, align 8
  %6987 = inttoptr i64 %6985 to i32*
  %6988 = load i32, i32* %6987, align 4
  %6989 = sext i32 %6988 to i64
  %6990 = shl nsw i64 %6989, 4
  store i64 %6990, i64* %RCX.i1519, align 8
  %6991 = add i64 %6990, ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64)
  store i64 %6991, i64* %RAX.i1161, align 8
  %6992 = icmp ult i64 %6991, ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64)
  %6993 = icmp ult i64 %6991, %6990
  %6994 = or i1 %6992, %6993
  %6995 = zext i1 %6994 to i8
  store i8 %6995, i8* %14, align 1
  %6996 = trunc i64 %6991 to i32
  %6997 = and i32 %6996, 248
  %6998 = tail call i32 @llvm.ctpop.i32(i32 %6997)
  %6999 = trunc i32 %6998 to i8
  %7000 = and i8 %6999, 1
  %7001 = xor i8 %7000, 1
  store i8 %7001, i8* %21, align 1
  %7002 = xor i64 %6990, ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64)
  %7003 = xor i64 %7002, %6991
  %7004 = lshr i64 %7003, 4
  %7005 = trunc i64 %7004 to i8
  %7006 = and i8 %7005, 1
  store i8 %7006, i8* %26, align 1
  %7007 = icmp eq i64 %6991, 0
  %7008 = zext i1 %7007 to i8
  store i8 %7008, i8* %29, align 1
  %7009 = lshr i64 %6991, 63
  %7010 = trunc i64 %7009 to i8
  store i8 %7010, i8* %32, align 1
  %7011 = lshr i64 %6989, 59
  %7012 = and i64 %7011, 1
  %7013 = xor i64 %7009, lshr (i64 ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64), i64 63)
  %7014 = xor i64 %7009, %7012
  %7015 = add nuw nsw i64 %7013, %7014
  %7016 = icmp eq i64 %7015, 2
  %7017 = zext i1 %7016 to i8
  store i8 %7017, i8* %38, align 1
  %7018 = add i64 %6920, -100
  %7019 = add i64 %6950, 36
  store i64 %7019, i64* %3, align 8
  %7020 = inttoptr i64 %7018 to i32*
  %7021 = load i32, i32* %7020, align 4
  %7022 = sext i32 %7021 to i64
  store i64 %7022, i64* %RCX.i1519, align 8
  %7023 = add i64 %6991, %7022
  %7024 = add i64 %6950, 40
  store i64 %7024, i64* %3, align 8
  %7025 = inttoptr i64 %7023 to i8*
  %7026 = load i8, i8* %7025, align 1
  %7027 = zext i8 %7026 to i64
  store i64 %7027, i64* %RDX.i1748, align 8
  %7028 = add i64 %6920, -16
  %7029 = add i64 %6950, 44
  store i64 %7029, i64* %3, align 8
  %7030 = inttoptr i64 %7028 to i64*
  %7031 = load i64, i64* %7030, align 8
  store i64 %7031, i64* %RAX.i1161, align 8
  %7032 = add i64 %6950, 46
  store i64 %7032, i64* %3, align 8
  %7033 = zext i8 %7026 to i32
  %7034 = inttoptr i64 %7031 to i32*
  %7035 = load i32, i32* %7034, align 4
  %7036 = add i32 %7035, %7033
  %7037 = zext i32 %7036 to i64
  store i64 %7037, i64* %RDX.i1748, align 8
  %7038 = icmp ult i32 %7036, %7033
  %7039 = icmp ult i32 %7036, %7035
  %7040 = or i1 %7038, %7039
  %7041 = zext i1 %7040 to i8
  store i8 %7041, i8* %14, align 1
  %7042 = and i32 %7036, 255
  %7043 = tail call i32 @llvm.ctpop.i32(i32 %7042)
  %7044 = trunc i32 %7043 to i8
  %7045 = and i8 %7044, 1
  %7046 = xor i8 %7045, 1
  store i8 %7046, i8* %21, align 1
  %7047 = xor i32 %7035, %7033
  %7048 = xor i32 %7047, %7036
  %7049 = lshr i32 %7048, 4
  %7050 = trunc i32 %7049 to i8
  %7051 = and i8 %7050, 1
  store i8 %7051, i8* %26, align 1
  %7052 = icmp eq i32 %7036, 0
  %7053 = zext i1 %7052 to i8
  store i8 %7053, i8* %29, align 1
  %7054 = lshr i32 %7036, 31
  %7055 = trunc i32 %7054 to i8
  store i8 %7055, i8* %32, align 1
  %7056 = lshr i32 %7035, 31
  %7057 = xor i32 %7054, %7056
  %7058 = add nuw nsw i32 %7054, %7057
  %7059 = icmp eq i32 %7058, 2
  %7060 = zext i1 %7059 to i8
  store i8 %7060, i8* %38, align 1
  %7061 = add i64 %6950, 48
  store i64 %7061, i64* %3, align 8
  store i32 %7036, i32* %7034, align 4
  %.pre218 = load i64, i64* %3, align 8
  br label %block_.L_40cc7b

block_.L_40cc7b:                                  ; preds = %block_.L_40cc4b, %block_40cc38
  %7062 = phi i64 [ %.pre218, %block_.L_40cc4b ], [ %6983, %block_40cc38 ]
  %7063 = load i64, i64* %RBP.i, align 8
  %7064 = add i64 %7063, -92
  %7065 = add i64 %7062, 3
  store i64 %7065, i64* %3, align 8
  %7066 = inttoptr i64 %7064 to i32*
  %7067 = load i32, i32* %7066, align 4
  %7068 = zext i32 %7067 to i64
  store i64 %7068, i64* %RDI.i2913, align 8
  %7069 = add i64 %7063, -180
  %7070 = add i64 %7062, 9
  store i64 %7070, i64* %3, align 8
  %7071 = inttoptr i64 %7069 to i32*
  %7072 = load i32, i32* %7071, align 4
  %7073 = zext i32 %7072 to i64
  store i64 %7073, i64* %RSI.i2777, align 8
  %7074 = add i64 %7062, 427221
  %7075 = add i64 %7062, 14
  %7076 = load i64, i64* %6, align 8
  %7077 = add i64 %7076, -8
  %7078 = inttoptr i64 %7077 to i64*
  store i64 %7075, i64* %7078, align 8
  store i64 %7077, i64* %6, align 8
  store i64 %7074, i64* %3, align 8
  %call2_40cc84 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %7074, %struct.Memory* %MEMORY.23)
  %7079 = load i64, i64* %RBP.i, align 8
  %7080 = add i64 %7079, -232
  %7081 = load i64, i64* %3, align 8
  %7082 = add i64 %7081, 7
  store i64 %7082, i64* %3, align 8
  %7083 = inttoptr i64 %7080 to i64*
  %7084 = load i64, i64* %7083, align 8
  store i64 %7084, i64* %RCX.i1519, align 8
  %7085 = add i64 %7079, -96
  %7086 = add i64 %7081, 11
  store i64 %7086, i64* %3, align 8
  %7087 = inttoptr i64 %7085 to i32*
  %7088 = load i32, i32* %7087, align 4
  %7089 = sext i32 %7088 to i64
  store i64 %7089, i64* %RDX.i1748, align 8
  %7090 = shl nsw i64 %7089, 2
  %7091 = add i64 %7090, %7084
  %7092 = load i32, i32* %EAX.i2800, align 4
  %7093 = add i64 %7081, 14
  store i64 %7093, i64* %3, align 8
  %7094 = inttoptr i64 %7091 to i32*
  store i32 %7092, i32* %7094, align 4
  %7095 = load i64, i64* %RBP.i, align 8
  %7096 = add i64 %7095, -100
  %7097 = load i64, i64* %3, align 8
  %7098 = add i64 %7097, 3
  store i64 %7098, i64* %3, align 8
  %7099 = inttoptr i64 %7096 to i32*
  %7100 = load i32, i32* %7099, align 4
  %7101 = zext i32 %7100 to i64
  store i64 %7101, i64* %RAX.i1161, align 8
  %7102 = add i64 %7095, -240
  %7103 = add i64 %7097, 10
  store i64 %7103, i64* %3, align 8
  %7104 = inttoptr i64 %7102 to i64*
  %7105 = load i64, i64* %7104, align 8
  store i64 %7105, i64* %RCX.i1519, align 8
  %7106 = add i64 %7095, -96
  %7107 = add i64 %7097, 14
  store i64 %7107, i64* %3, align 8
  %7108 = inttoptr i64 %7106 to i32*
  %7109 = load i32, i32* %7108, align 4
  %7110 = sext i32 %7109 to i64
  store i64 %7110, i64* %RDX.i1748, align 8
  %7111 = shl nsw i64 %7110, 2
  %7112 = add i64 %7111, %7105
  %7113 = add i64 %7097, 17
  store i64 %7113, i64* %3, align 8
  %7114 = inttoptr i64 %7112 to i32*
  store i32 %7100, i32* %7114, align 4
  %7115 = load i64, i64* %RBP.i, align 8
  %7116 = add i64 %7115, -96
  %7117 = load i64, i64* %3, align 8
  %7118 = add i64 %7117, 3
  store i64 %7118, i64* %3, align 8
  %7119 = inttoptr i64 %7116 to i32*
  %7120 = load i32, i32* %7119, align 4
  %7121 = add i32 %7120, 1
  %7122 = zext i32 %7121 to i64
  store i64 %7122, i64* %RAX.i1161, align 8
  %7123 = icmp eq i32 %7120, -1
  %7124 = icmp eq i32 %7121, 0
  %7125 = or i1 %7123, %7124
  %7126 = zext i1 %7125 to i8
  store i8 %7126, i8* %14, align 1
  %7127 = and i32 %7121, 255
  %7128 = tail call i32 @llvm.ctpop.i32(i32 %7127)
  %7129 = trunc i32 %7128 to i8
  %7130 = and i8 %7129, 1
  %7131 = xor i8 %7130, 1
  store i8 %7131, i8* %21, align 1
  %7132 = xor i32 %7121, %7120
  %7133 = lshr i32 %7132, 4
  %7134 = trunc i32 %7133 to i8
  %7135 = and i8 %7134, 1
  store i8 %7135, i8* %26, align 1
  %7136 = zext i1 %7124 to i8
  store i8 %7136, i8* %29, align 1
  %7137 = lshr i32 %7121, 31
  %7138 = trunc i32 %7137 to i8
  store i8 %7138, i8* %32, align 1
  %7139 = lshr i32 %7120, 31
  %7140 = xor i32 %7137, %7139
  %7141 = add nuw nsw i32 %7140, %7137
  %7142 = icmp eq i32 %7141, 2
  %7143 = zext i1 %7142 to i8
  store i8 %7143, i8* %38, align 1
  %7144 = add i64 %7117, 9
  store i64 %7144, i64* %3, align 8
  store i32 %7121, i32* %7119, align 4
  %7145 = load i64, i64* %RBP.i, align 8
  %7146 = add i64 %7145, -100
  %7147 = load i64, i64* %3, align 8
  %7148 = add i64 %7147, 7
  store i64 %7148, i64* %3, align 8
  %7149 = inttoptr i64 %7146 to i32*
  store i32 -1, i32* %7149, align 4
  %7150 = load i64, i64* %RBP.i, align 8
  %7151 = add i64 %7150, -92
  %7152 = load i64, i64* %3, align 8
  %7153 = add i64 %7152, 3
  store i64 %7153, i64* %3, align 8
  %7154 = inttoptr i64 %7151 to i32*
  %7155 = load i32, i32* %7154, align 4
  %7156 = zext i32 %7155 to i64
  store i64 %7156, i64* %RDI.i2913, align 8
  %7157 = add i64 %7150, -180
  %7158 = add i64 %7152, 9
  store i64 %7158, i64* %3, align 8
  %7159 = inttoptr i64 %7157 to i32*
  %7160 = load i32, i32* %7159, align 4
  %7161 = zext i32 %7160 to i64
  store i64 %7161, i64* %RSI.i2777, align 8
  %7162 = add i64 %7152, 427160
  %7163 = add i64 %7152, 14
  %7164 = load i64, i64* %6, align 8
  %7165 = add i64 %7164, -8
  %7166 = inttoptr i64 %7165 to i64*
  store i64 %7163, i64* %7166, align 8
  store i64 %7165, i64* %6, align 8
  store i64 %7162, i64* %3, align 8
  %call2_40ccc1 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %7162, %struct.Memory* %call2_40cc84)
  %7167 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %RCX.i1519, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %RDX.i1748, align 8
  %7168 = load i64, i64* %RBP.i, align 8
  %7169 = add i64 %7168, -192
  %7170 = add i64 %7167, 27
  store i64 %7170, i64* %3, align 8
  %7171 = inttoptr i64 %7169 to i32*
  %7172 = load i32, i32* %7171, align 4
  %7173 = sext i32 %7172 to i64
  %7174 = shl nsw i64 %7173, 6
  store i64 %7174, i64* %R8.i3013, align 8
  %7175 = add i64 %7174, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %7175, i64* %RDX.i1748, align 8
  %7176 = icmp ult i64 %7175, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %7177 = icmp ult i64 %7175, %7174
  %7178 = or i1 %7176, %7177
  %7179 = zext i1 %7178 to i8
  store i8 %7179, i8* %14, align 1
  %7180 = trunc i64 %7175 to i32
  %7181 = and i32 %7180, 248
  %7182 = tail call i32 @llvm.ctpop.i32(i32 %7181)
  %7183 = trunc i32 %7182 to i8
  %7184 = and i8 %7183, 1
  %7185 = xor i8 %7184, 1
  store i8 %7185, i8* %21, align 1
  %7186 = xor i64 %7175, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %7187 = lshr i64 %7186, 4
  %7188 = trunc i64 %7187 to i8
  %7189 = and i8 %7188, 1
  store i8 %7189, i8* %26, align 1
  %7190 = icmp eq i64 %7175, 0
  %7191 = zext i1 %7190 to i8
  store i8 %7191, i8* %29, align 1
  %7192 = lshr i64 %7175, 63
  %7193 = trunc i64 %7192 to i8
  store i8 %7193, i8* %32, align 1
  %7194 = lshr i64 %7173, 57
  %7195 = and i64 %7194, 1
  %7196 = xor i64 %7192, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %7197 = xor i64 %7192, %7195
  %7198 = add nuw nsw i64 %7196, %7197
  %7199 = icmp eq i64 %7198, 2
  %7200 = zext i1 %7199 to i8
  store i8 %7200, i8* %38, align 1
  %7201 = add i64 %7168, -20
  %7202 = add i64 %7167, 38
  store i64 %7202, i64* %3, align 8
  %7203 = inttoptr i64 %7201 to i32*
  %7204 = load i32, i32* %7203, align 4
  %7205 = sext i32 %7204 to i64
  %7206 = shl nsw i64 %7205, 4
  store i64 %7206, i64* %R8.i3013, align 8
  %7207 = add i64 %7206, %7175
  store i64 %7207, i64* %RDX.i1748, align 8
  %7208 = icmp ult i64 %7207, %7175
  %7209 = icmp ult i64 %7207, %7206
  %7210 = or i1 %7208, %7209
  %7211 = zext i1 %7210 to i8
  store i8 %7211, i8* %14, align 1
  %7212 = trunc i64 %7207 to i32
  %7213 = and i32 %7212, 248
  %7214 = tail call i32 @llvm.ctpop.i32(i32 %7213)
  %7215 = trunc i32 %7214 to i8
  %7216 = and i8 %7215, 1
  %7217 = xor i8 %7216, 1
  store i8 %7217, i8* %21, align 1
  %7218 = xor i64 %7206, %7175
  %7219 = xor i64 %7218, %7207
  %7220 = lshr i64 %7219, 4
  %7221 = trunc i64 %7220 to i8
  %7222 = and i8 %7221, 1
  store i8 %7222, i8* %26, align 1
  %7223 = icmp eq i64 %7207, 0
  %7224 = zext i1 %7223 to i8
  store i8 %7224, i8* %29, align 1
  %7225 = lshr i64 %7207, 63
  %7226 = trunc i64 %7225 to i8
  store i8 %7226, i8* %32, align 1
  %7227 = lshr i64 %7205, 59
  %7228 = and i64 %7227, 1
  %7229 = xor i64 %7225, %7192
  %7230 = xor i64 %7225, %7228
  %7231 = add nuw nsw i64 %7229, %7230
  %7232 = icmp eq i64 %7231, 2
  %7233 = zext i1 %7232 to i8
  store i8 %7233, i8* %38, align 1
  %7234 = load i64, i64* %RBP.i, align 8
  %7235 = add i64 %7234, -24
  %7236 = add i64 %7167, 49
  store i64 %7236, i64* %3, align 8
  %7237 = inttoptr i64 %7235 to i32*
  %7238 = load i32, i32* %7237, align 4
  %7239 = sext i32 %7238 to i64
  store i64 %7239, i64* %R8.i3013, align 8
  %7240 = load i64, i64* %RAX.i1161, align 8
  %7241 = shl nsw i64 %7239, 2
  %7242 = add i64 %7207, %7241
  %7243 = add i64 %7167, 54
  store i64 %7243, i64* %3, align 8
  %7244 = inttoptr i64 %7242 to i32*
  %7245 = load i32, i32* %7244, align 4
  %7246 = shl i64 %7240, 32
  %7247 = ashr exact i64 %7246, 32
  %7248 = sext i32 %7245 to i64
  %7249 = mul nsw i64 %7248, %7247
  %7250 = trunc i64 %7249 to i32
  %7251 = and i64 %7249, 4294967295
  store i64 %7251, i64* %RAX.i1161, align 8
  %7252 = shl i64 %7249, 32
  %7253 = ashr exact i64 %7252, 32
  %7254 = icmp ne i64 %7253, %7249
  %7255 = zext i1 %7254 to i8
  store i8 %7255, i8* %14, align 1
  %7256 = and i32 %7250, 255
  %7257 = tail call i32 @llvm.ctpop.i32(i32 %7256)
  %7258 = trunc i32 %7257 to i8
  %7259 = and i8 %7258, 1
  %7260 = xor i8 %7259, 1
  store i8 %7260, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %7261 = lshr i32 %7250, 31
  %7262 = trunc i32 %7261 to i8
  store i8 %7262, i8* %32, align 1
  store i8 %7255, i8* %38, align 1
  %7263 = add i64 %7234, -20
  %7264 = add i64 %7167, 58
  store i64 %7264, i64* %3, align 8
  %7265 = inttoptr i64 %7263 to i32*
  %7266 = load i32, i32* %7265, align 4
  %7267 = sext i32 %7266 to i64
  %7268 = shl nsw i64 %7267, 4
  store i64 %7268, i64* %RDX.i1748, align 8
  %7269 = load i64, i64* %RCX.i1519, align 8
  %7270 = add i64 %7268, %7269
  store i64 %7270, i64* %RCX.i1519, align 8
  %7271 = icmp ult i64 %7270, %7269
  %7272 = icmp ult i64 %7270, %7268
  %7273 = or i1 %7271, %7272
  %7274 = zext i1 %7273 to i8
  store i8 %7274, i8* %14, align 1
  %7275 = trunc i64 %7270 to i32
  %7276 = and i32 %7275, 255
  %7277 = tail call i32 @llvm.ctpop.i32(i32 %7276)
  %7278 = trunc i32 %7277 to i8
  %7279 = and i8 %7278, 1
  %7280 = xor i8 %7279, 1
  store i8 %7280, i8* %21, align 1
  %7281 = xor i64 %7268, %7269
  %7282 = xor i64 %7281, %7270
  %7283 = lshr i64 %7282, 4
  %7284 = trunc i64 %7283 to i8
  %7285 = and i8 %7284, 1
  store i8 %7285, i8* %26, align 1
  %7286 = icmp eq i64 %7270, 0
  %7287 = zext i1 %7286 to i8
  store i8 %7287, i8* %29, align 1
  %7288 = lshr i64 %7270, 63
  %7289 = trunc i64 %7288 to i8
  store i8 %7289, i8* %32, align 1
  %7290 = lshr i64 %7269, 63
  %7291 = lshr i64 %7267, 59
  %7292 = and i64 %7291, 1
  %7293 = xor i64 %7288, %7290
  %7294 = xor i64 %7288, %7292
  %7295 = add nuw nsw i64 %7293, %7294
  %7296 = icmp eq i64 %7295, 2
  %7297 = zext i1 %7296 to i8
  store i8 %7297, i8* %38, align 1
  %7298 = load i64, i64* %RBP.i, align 8
  %7299 = add i64 %7298, -24
  %7300 = add i64 %7167, 69
  store i64 %7300, i64* %3, align 8
  %7301 = inttoptr i64 %7299 to i32*
  %7302 = load i32, i32* %7301, align 4
  %7303 = sext i32 %7302 to i64
  store i64 %7303, i64* %RDX.i1748, align 8
  %7304 = shl nsw i64 %7303, 2
  %7305 = add i64 %7270, %7304
  %7306 = add i64 %7167, 73
  store i64 %7306, i64* %3, align 8
  %7307 = inttoptr i64 %7305 to i32*
  %7308 = load i32, i32* %7307, align 4
  %7309 = shl i64 %7249, 32
  %7310 = ashr exact i64 %7309, 32
  %7311 = sext i32 %7308 to i64
  %7312 = mul nsw i64 %7311, %7310
  %7313 = trunc i64 %7312 to i32
  %7314 = and i64 %7312, 4294967295
  store i64 %7314, i64* %RAX.i1161, align 8
  %7315 = shl i64 %7312, 32
  %7316 = ashr exact i64 %7315, 32
  %7317 = icmp ne i64 %7316, %7312
  %7318 = zext i1 %7317 to i8
  store i8 %7318, i8* %14, align 1
  %7319 = and i32 %7313, 255
  %7320 = tail call i32 @llvm.ctpop.i32(i32 %7319)
  %7321 = trunc i32 %7320 to i8
  %7322 = and i8 %7321, 1
  %7323 = xor i8 %7322, 1
  store i8 %7323, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %7324 = lshr i32 %7313, 31
  %7325 = trunc i32 %7324 to i8
  store i8 %7325, i8* %32, align 1
  store i8 %7318, i8* %38, align 1
  %7326 = add i64 %7298, -188
  %7327 = add i64 %7167, 79
  store i64 %7327, i64* %3, align 8
  %7328 = inttoptr i64 %7326 to i32*
  %7329 = load i32, i32* %7328, align 4
  %7330 = zext i32 %7329 to i64
  store i64 %7330, i64* %RCX.i1519, align 8
  %7331 = add i64 %7167, 81
  store i64 %7331, i64* %3, align 8
  %7332 = trunc i32 %7329 to i5
  switch i5 %7332, label %7339 [
    i5 0, label %routine_shll__cl___eax.exit859
    i5 1, label %7333
  ]

; <label>:7333:                                   ; preds = %block_.L_40cc7b
  %7334 = trunc i64 %7312 to i32
  %7335 = shl i32 %7334, 1
  %7336 = icmp slt i32 %7334, 0
  %7337 = icmp slt i32 %7335, 0
  %7338 = xor i1 %7336, %7337
  br label %7348

; <label>:7339:                                   ; preds = %block_.L_40cc7b
  %7340 = and i32 %7329, 31
  %7341 = zext i32 %7340 to i64
  %7342 = add nuw nsw i64 %7341, 4294967295
  %7343 = and i64 %7342, 4294967295
  %7344 = shl i64 %7314, %7343
  %7345 = trunc i64 %7344 to i32
  %7346 = icmp slt i32 %7345, 0
  %7347 = shl i32 %7345, 1
  br label %7348

; <label>:7348:                                   ; preds = %7339, %7333
  %7349 = phi i1 [ %7336, %7333 ], [ %7346, %7339 ]
  %7350 = phi i1 [ %7338, %7333 ], [ false, %7339 ]
  %7351 = phi i32 [ %7335, %7333 ], [ %7347, %7339 ]
  %7352 = zext i32 %7351 to i64
  store i64 %7352, i64* %RAX.i1161, align 8
  %7353 = zext i1 %7349 to i8
  store i8 %7353, i8* %14, align 1
  %7354 = and i32 %7351, 254
  %7355 = tail call i32 @llvm.ctpop.i32(i32 %7354)
  %7356 = trunc i32 %7355 to i8
  %7357 = and i8 %7356, 1
  %7358 = xor i8 %7357, 1
  store i8 %7358, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %7359 = icmp eq i32 %7351, 0
  %7360 = zext i1 %7359 to i8
  store i8 %7360, i8* %29, align 1
  %7361 = lshr i32 %7351, 31
  %7362 = trunc i32 %7361 to i8
  store i8 %7362, i8* %32, align 1
  %7363 = zext i1 %7350 to i8
  store i8 %7363, i8* %38, align 1
  br label %routine_shll__cl___eax.exit859

routine_shll__cl___eax.exit859:                   ; preds = %7348, %block_.L_40cc7b
  %7364 = phi i64 [ %7352, %7348 ], [ %7314, %block_.L_40cc7b ]
  %7365 = shl nuw i64 %7364, 32
  %7366 = ashr i64 %7365, 37
  %7367 = lshr i64 %7366, 1
  %7368 = trunc i64 %7366 to i8
  %7369 = and i8 %7368, 1
  %7370 = trunc i64 %7367 to i32
  %7371 = and i64 %7367, 4294967295
  store i64 %7371, i64* %RAX.i1161, align 8
  store i8 %7369, i8* %14, align 1
  %7372 = and i32 %7370, 255
  %7373 = tail call i32 @llvm.ctpop.i32(i32 %7372)
  %7374 = trunc i32 %7373 to i8
  %7375 = and i8 %7374, 1
  %7376 = xor i8 %7375, 1
  store i8 %7376, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %7377 = icmp eq i32 %7370, 0
  %7378 = zext i1 %7377 to i8
  store i8 %7378, i8* %29, align 1
  %7379 = lshr i64 %7366, 32
  %7380 = trunc i64 %7379 to i8
  %7381 = and i8 %7380, 1
  store i8 %7381, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7382 = add i64 %7298, -36
  %7383 = trunc i64 %7367 to i32
  %7384 = add i64 %7167, 87
  store i64 %7384, i64* %3, align 8
  %7385 = inttoptr i64 %7382 to i32*
  store i32 %7383, i32* %7385, align 4
  %.pre219 = load i64, i64* %RBP.i, align 8
  %.pre220 = load i64, i64* %3, align 8
  br label %block_.L_40cd1d

block_.L_40cd1d:                                  ; preds = %routine_shll__cl___eax.exit859, %block_.L_40cc1d
  %7386 = phi i64 [ %6916, %block_.L_40cc1d ], [ %.pre220, %routine_shll__cl___eax.exit859 ]
  %7387 = phi i64 [ %6902, %block_.L_40cc1d ], [ %.pre219, %routine_shll__cl___eax.exit859 ]
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.23, %block_.L_40cc1d ], [ %call2_40ccc1, %routine_shll__cl___eax.exit859 ]
  %7388 = add i64 %7387, -176
  store i64 %7388, i64* %RAX.i1161, align 8
  %7389 = add i64 %7387, -20
  %7390 = add i64 %7386, 11
  store i64 %7390, i64* %3, align 8
  %7391 = inttoptr i64 %7389 to i32*
  %7392 = load i32, i32* %7391, align 4
  %7393 = sext i32 %7392 to i64
  %7394 = shl nsw i64 %7393, 4
  store i64 %7394, i64* %RCX.i1519, align 8
  %7395 = add i64 %7394, %7388
  store i64 %7395, i64* %RAX.i1161, align 8
  %7396 = icmp ult i64 %7395, %7388
  %7397 = icmp ult i64 %7395, %7394
  %7398 = or i1 %7396, %7397
  %7399 = zext i1 %7398 to i8
  store i8 %7399, i8* %14, align 1
  %7400 = trunc i64 %7395 to i32
  %7401 = and i32 %7400, 255
  %7402 = tail call i32 @llvm.ctpop.i32(i32 %7401)
  %7403 = trunc i32 %7402 to i8
  %7404 = and i8 %7403, 1
  %7405 = xor i8 %7404, 1
  store i8 %7405, i8* %21, align 1
  %7406 = xor i64 %7394, %7388
  %7407 = xor i64 %7406, %7395
  %7408 = lshr i64 %7407, 4
  %7409 = trunc i64 %7408 to i8
  %7410 = and i8 %7409, 1
  store i8 %7410, i8* %26, align 1
  %7411 = icmp eq i64 %7395, 0
  %7412 = zext i1 %7411 to i8
  store i8 %7412, i8* %29, align 1
  %7413 = lshr i64 %7395, 63
  %7414 = trunc i64 %7413 to i8
  store i8 %7414, i8* %32, align 1
  %7415 = lshr i64 %7388, 63
  %7416 = lshr i64 %7393, 59
  %7417 = and i64 %7416, 1
  %7418 = xor i64 %7413, %7415
  %7419 = xor i64 %7413, %7417
  %7420 = add nuw nsw i64 %7418, %7419
  %7421 = icmp eq i64 %7420, 2
  %7422 = zext i1 %7421 to i8
  store i8 %7422, i8* %38, align 1
  %7423 = add i64 %7387, -24
  %7424 = add i64 %7386, 22
  store i64 %7424, i64* %3, align 8
  %7425 = inttoptr i64 %7423 to i32*
  %7426 = load i32, i32* %7425, align 4
  %7427 = sext i32 %7426 to i64
  store i64 %7427, i64* %RCX.i1519, align 8
  %7428 = shl nsw i64 %7427, 2
  %7429 = add i64 %7428, %7395
  %7430 = add i64 %7386, 25
  store i64 %7430, i64* %3, align 8
  %7431 = inttoptr i64 %7429 to i32*
  %7432 = load i32, i32* %7431, align 4
  %7433 = zext i32 %7432 to i64
  store i64 %7433, i64* %RDX.i1748, align 8
  %7434 = add i64 %7387, -36
  %7435 = add i64 %7386, 28
  store i64 %7435, i64* %3, align 8
  %7436 = inttoptr i64 %7434 to i32*
  %7437 = load i32, i32* %7436, align 4
  %7438 = add i32 %7437, %7432
  %7439 = zext i32 %7438 to i64
  store i64 %7439, i64* %RDX.i1748, align 8
  %7440 = icmp ult i32 %7438, %7432
  %7441 = icmp ult i32 %7438, %7437
  %7442 = or i1 %7440, %7441
  %7443 = zext i1 %7442 to i8
  store i8 %7443, i8* %14, align 1
  %7444 = and i32 %7438, 255
  %7445 = tail call i32 @llvm.ctpop.i32(i32 %7444)
  %7446 = trunc i32 %7445 to i8
  %7447 = and i8 %7446, 1
  %7448 = xor i8 %7447, 1
  store i8 %7448, i8* %21, align 1
  %7449 = xor i32 %7437, %7432
  %7450 = xor i32 %7449, %7438
  %7451 = lshr i32 %7450, 4
  %7452 = trunc i32 %7451 to i8
  %7453 = and i8 %7452, 1
  store i8 %7453, i8* %26, align 1
  %7454 = icmp eq i32 %7438, 0
  %7455 = zext i1 %7454 to i8
  store i8 %7455, i8* %29, align 1
  %7456 = lshr i32 %7438, 31
  %7457 = trunc i32 %7456 to i8
  store i8 %7457, i8* %32, align 1
  %7458 = lshr i32 %7432, 31
  %7459 = lshr i32 %7437, 31
  %7460 = xor i32 %7456, %7458
  %7461 = xor i32 %7456, %7459
  %7462 = add nuw nsw i32 %7460, %7461
  %7463 = icmp eq i32 %7462, 2
  %7464 = zext i1 %7463 to i8
  store i8 %7464, i8* %38, align 1
  %7465 = load i64, i64* %RBP.i, align 8
  %7466 = add i64 %7465, -36
  %7467 = add i64 %7386, 31
  store i64 %7467, i64* %3, align 8
  %7468 = inttoptr i64 %7466 to i32*
  store i32 %7438, i32* %7468, align 4
  %7469 = load i64, i64* %RBP.i, align 8
  %7470 = add i64 %7469, -36
  %7471 = load i64, i64* %3, align 8
  %7472 = add i64 %7471, 3
  store i64 %7472, i64* %3, align 8
  %7473 = inttoptr i64 %7470 to i32*
  %7474 = load i32, i32* %7473, align 4
  %7475 = zext i32 %7474 to i64
  store i64 %7475, i64* %RDI.i2913, align 8
  %7476 = add i64 %7471, -48444
  %7477 = add i64 %7471, 8
  %7478 = load i64, i64* %6, align 8
  %7479 = add i64 %7478, -8
  %7480 = inttoptr i64 %7479 to i64*
  store i64 %7477, i64* %7480, align 8
  store i64 %7479, i64* %6, align 8
  store i64 %7476, i64* %3, align 8
  %7481 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %MEMORY.25)
  %7482 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RCX.i1519, align 8
  %7483 = load i64, i64* %RBP.i, align 8
  %7484 = add i64 %7483, -204
  %7485 = add i64 %7482, 17
  store i64 %7485, i64* %3, align 8
  %7486 = inttoptr i64 %7484 to i32*
  %7487 = load i32, i32* %7486, align 4
  %7488 = sext i32 %7487 to i64
  %7489 = shl nsw i64 %7488, 6
  store i64 %7489, i64* %RSI.i2777, align 8
  %7490 = add i64 %7489, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  store i64 %7490, i64* %RCX.i1519, align 8
  %7491 = icmp ult i64 %7490, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %7492 = icmp ult i64 %7490, %7489
  %7493 = or i1 %7491, %7492
  %7494 = zext i1 %7493 to i8
  store i8 %7494, i8* %14, align 1
  %7495 = trunc i64 %7490 to i32
  %7496 = and i32 %7495, 248
  %7497 = tail call i32 @llvm.ctpop.i32(i32 %7496)
  %7498 = trunc i32 %7497 to i8
  %7499 = and i8 %7498, 1
  %7500 = xor i8 %7499, 1
  store i8 %7500, i8* %21, align 1
  %7501 = xor i64 %7490, ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64)
  %7502 = lshr i64 %7501, 4
  %7503 = trunc i64 %7502 to i8
  %7504 = and i8 %7503, 1
  store i8 %7504, i8* %26, align 1
  %7505 = icmp eq i64 %7490, 0
  %7506 = zext i1 %7505 to i8
  store i8 %7506, i8* %29, align 1
  %7507 = lshr i64 %7490, 63
  %7508 = trunc i64 %7507 to i8
  store i8 %7508, i8* %32, align 1
  %7509 = lshr i64 %7488, 57
  %7510 = and i64 %7509, 1
  %7511 = xor i64 %7507, lshr (i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64 63)
  %7512 = xor i64 %7507, %7510
  %7513 = add nuw nsw i64 %7511, %7512
  %7514 = icmp eq i64 %7513, 2
  %7515 = zext i1 %7514 to i8
  store i8 %7515, i8* %38, align 1
  %7516 = add i64 %7483, -20
  %7517 = add i64 %7482, 28
  store i64 %7517, i64* %3, align 8
  %7518 = inttoptr i64 %7516 to i32*
  %7519 = load i32, i32* %7518, align 4
  %7520 = sext i32 %7519 to i64
  %7521 = shl nsw i64 %7520, 4
  store i64 %7521, i64* %RSI.i2777, align 8
  %7522 = add i64 %7521, %7490
  store i64 %7522, i64* %RCX.i1519, align 8
  %7523 = icmp ult i64 %7522, %7490
  %7524 = icmp ult i64 %7522, %7521
  %7525 = or i1 %7523, %7524
  %7526 = zext i1 %7525 to i8
  store i8 %7526, i8* %14, align 1
  %7527 = trunc i64 %7522 to i32
  %7528 = and i32 %7527, 248
  %7529 = tail call i32 @llvm.ctpop.i32(i32 %7528)
  %7530 = trunc i32 %7529 to i8
  %7531 = and i8 %7530, 1
  %7532 = xor i8 %7531, 1
  store i8 %7532, i8* %21, align 1
  %7533 = xor i64 %7521, %7490
  %7534 = xor i64 %7533, %7522
  %7535 = lshr i64 %7534, 4
  %7536 = trunc i64 %7535 to i8
  %7537 = and i8 %7536, 1
  store i8 %7537, i8* %26, align 1
  %7538 = icmp eq i64 %7522, 0
  %7539 = zext i1 %7538 to i8
  store i8 %7539, i8* %29, align 1
  %7540 = lshr i64 %7522, 63
  %7541 = trunc i64 %7540 to i8
  store i8 %7541, i8* %32, align 1
  %7542 = lshr i64 %7520, 59
  %7543 = and i64 %7542, 1
  %7544 = xor i64 %7540, %7507
  %7545 = xor i64 %7540, %7543
  %7546 = add nuw nsw i64 %7544, %7545
  %7547 = icmp eq i64 %7546, 2
  %7548 = zext i1 %7547 to i8
  store i8 %7548, i8* %38, align 1
  %7549 = load i64, i64* %RBP.i, align 8
  %7550 = add i64 %7549, -24
  %7551 = add i64 %7482, 39
  store i64 %7551, i64* %3, align 8
  %7552 = inttoptr i64 %7550 to i32*
  %7553 = load i32, i32* %7552, align 4
  %7554 = sext i32 %7553 to i64
  store i64 %7554, i64* %RSI.i2777, align 8
  %7555 = load i64, i64* %RAX.i1161, align 8
  %7556 = shl nsw i64 %7554, 2
  %7557 = add i64 %7522, %7556
  %7558 = add i64 %7482, 43
  store i64 %7558, i64* %3, align 8
  %7559 = inttoptr i64 %7557 to i32*
  %7560 = load i32, i32* %7559, align 4
  %7561 = shl i64 %7555, 32
  %7562 = ashr exact i64 %7561, 32
  %7563 = sext i32 %7560 to i64
  %7564 = mul nsw i64 %7563, %7562
  %7565 = trunc i64 %7564 to i32
  %7566 = and i64 %7564, 4294967295
  store i64 %7566, i64* %RAX.i1161, align 8
  %7567 = shl i64 %7564, 32
  %7568 = ashr exact i64 %7567, 32
  %7569 = icmp ne i64 %7568, %7564
  %7570 = zext i1 %7569 to i8
  store i8 %7570, i8* %14, align 1
  %7571 = and i32 %7565, 255
  %7572 = tail call i32 @llvm.ctpop.i32(i32 %7571)
  %7573 = trunc i32 %7572 to i8
  %7574 = and i8 %7573, 1
  %7575 = xor i8 %7574, 1
  store i8 %7575, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %7576 = lshr i32 %7565, 31
  %7577 = trunc i32 %7576 to i8
  store i8 %7577, i8* %32, align 1
  store i8 %7570, i8* %38, align 1
  %7578 = add i64 %7549, -184
  %7579 = add i64 %7482, 49
  store i64 %7579, i64* %3, align 8
  %7580 = trunc i64 %7564 to i32
  %7581 = inttoptr i64 %7578 to i32*
  %7582 = load i32, i32* %7581, align 4
  %7583 = add i32 %7582, %7580
  %7584 = zext i32 %7583 to i64
  store i64 %7584, i64* %RAX.i1161, align 8
  %7585 = icmp ult i32 %7583, %7580
  %7586 = icmp ult i32 %7583, %7582
  %7587 = or i1 %7585, %7586
  %7588 = zext i1 %7587 to i8
  store i8 %7588, i8* %14, align 1
  %7589 = and i32 %7583, 255
  %7590 = tail call i32 @llvm.ctpop.i32(i32 %7589)
  %7591 = trunc i32 %7590 to i8
  %7592 = and i8 %7591, 1
  %7593 = xor i8 %7592, 1
  store i8 %7593, i8* %21, align 1
  %7594 = xor i32 %7582, %7580
  %7595 = xor i32 %7594, %7583
  %7596 = lshr i32 %7595, 4
  %7597 = trunc i32 %7596 to i8
  %7598 = and i8 %7597, 1
  store i8 %7598, i8* %26, align 1
  %7599 = icmp eq i32 %7583, 0
  %7600 = zext i1 %7599 to i8
  store i8 %7600, i8* %29, align 1
  %7601 = lshr i32 %7583, 31
  %7602 = trunc i32 %7601 to i8
  store i8 %7602, i8* %32, align 1
  %7603 = lshr i32 %7580, 31
  %7604 = lshr i32 %7582, 31
  %7605 = xor i32 %7601, %7603
  %7606 = xor i32 %7601, %7604
  %7607 = add nuw nsw i32 %7605, %7606
  %7608 = icmp eq i32 %7607, 2
  %7609 = zext i1 %7608 to i8
  store i8 %7609, i8* %38, align 1
  %7610 = add i64 %7549, -208
  %7611 = add i64 %7482, 55
  store i64 %7611, i64* %3, align 8
  %7612 = inttoptr i64 %7610 to i32*
  %7613 = load i32, i32* %7612, align 4
  %7614 = zext i32 %7613 to i64
  store i64 %7614, i64* %RCX.i1519, align 8
  %7615 = add i64 %7482, 57
  store i64 %7615, i64* %3, align 8
  %7616 = trunc i32 %7613 to i5
  switch i5 %7616, label %7620 [
    i5 0, label %routine_sarl__cl___eax.exit
    i5 1, label %7617
  ]

; <label>:7617:                                   ; preds = %block_.L_40cd1d
  %7618 = shl nuw i64 %7584, 32
  %7619 = ashr i64 %7618, 33
  br label %7627

; <label>:7620:                                   ; preds = %block_.L_40cd1d
  %7621 = and i32 %7613, 31
  %7622 = zext i32 %7621 to i64
  %7623 = add nsw i64 %7622, -1
  %7624 = sext i32 %7583 to i64
  %7625 = ashr i64 %7624, %7623
  %7626 = lshr i64 %7625, 1
  br label %7627

; <label>:7627:                                   ; preds = %7620, %7617
  %7628 = phi i64 [ %7626, %7620 ], [ %7619, %7617 ]
  %7629 = phi i64 [ %7625, %7620 ], [ %7584, %7617 ]
  %7630 = trunc i64 %7629 to i8
  %7631 = and i8 %7630, 1
  %7632 = trunc i64 %7628 to i32
  %7633 = and i64 %7628, 4294967295
  store i64 %7633, i64* %RAX.i1161, align 8
  store i8 %7631, i8* %14, align 1
  %7634 = and i32 %7632, 255
  %7635 = tail call i32 @llvm.ctpop.i32(i32 %7634)
  %7636 = trunc i32 %7635 to i8
  %7637 = and i8 %7636, 1
  %7638 = xor i8 %7637, 1
  store i8 %7638, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %7639 = icmp eq i32 %7632, 0
  %7640 = zext i1 %7639 to i8
  store i8 %7640, i8* %29, align 1
  %7641 = lshr i32 %7632, 31
  %7642 = trunc i32 %7641 to i8
  store i8 %7642, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %7643 = trunc i64 %7628 to i32
  br label %routine_sarl__cl___eax.exit

routine_sarl__cl___eax.exit:                      ; preds = %7627, %block_.L_40cd1d
  %7644 = phi i32 [ %7643, %7627 ], [ %7583, %block_.L_40cd1d ]
  %7645 = add i64 %7549, -36
  %7646 = add i64 %7482, 60
  store i64 %7646, i64* %3, align 8
  %7647 = inttoptr i64 %7645 to i32*
  %7648 = load i32, i32* %7647, align 4
  %7649 = zext i32 %7648 to i64
  store i64 %7649, i64* %RSI.i2777, align 8
  %7650 = zext i32 %7644 to i64
  store i64 %7650, i64* %RDI.i2913, align 8
  %7651 = add i64 %7482, 427020
  %7652 = add i64 %7482, 67
  %7653 = load i64, i64* %6, align 8
  %7654 = add i64 %7653, -8
  %7655 = inttoptr i64 %7654 to i64*
  store i64 %7652, i64* %7655, align 8
  store i64 %7654, i64* %6, align 8
  store i64 %7651, i64* %3, align 8
  %call2_40cd82 = tail call %struct.Memory* @sub_475150.sign(%struct.State* nonnull %0, i64 %7651, %struct.Memory* %7481)
  %7656 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R8.i3013, align 8
  %7657 = load i64, i64* %RBP.i, align 8
  %7658 = add i64 %7657, -204
  %7659 = add i64 %7656, 17
  store i64 %7659, i64* %3, align 8
  %7660 = inttoptr i64 %7658 to i32*
  %7661 = load i32, i32* %7660, align 4
  %7662 = sext i32 %7661 to i64
  %7663 = shl nsw i64 %7662, 6
  store i64 %7663, i64* %R9.i3009, align 8
  %7664 = add i64 %7663, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  store i64 %7664, i64* %R8.i3013, align 8
  %7665 = icmp ult i64 %7664, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %7666 = icmp ult i64 %7664, %7663
  %7667 = or i1 %7665, %7666
  %7668 = zext i1 %7667 to i8
  store i8 %7668, i8* %14, align 1
  %7669 = trunc i64 %7664 to i32
  %7670 = and i32 %7669, 248
  %7671 = tail call i32 @llvm.ctpop.i32(i32 %7670)
  %7672 = trunc i32 %7671 to i8
  %7673 = and i8 %7672, 1
  %7674 = xor i8 %7673, 1
  store i8 %7674, i8* %21, align 1
  %7675 = xor i64 %7664, ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64)
  %7676 = lshr i64 %7675, 4
  %7677 = trunc i64 %7676 to i8
  %7678 = and i8 %7677, 1
  store i8 %7678, i8* %26, align 1
  %7679 = icmp eq i64 %7664, 0
  %7680 = zext i1 %7679 to i8
  store i8 %7680, i8* %29, align 1
  %7681 = lshr i64 %7664, 63
  %7682 = trunc i64 %7681 to i8
  store i8 %7682, i8* %32, align 1
  %7683 = lshr i64 %7662, 57
  %7684 = and i64 %7683, 1
  %7685 = xor i64 %7681, lshr (i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64 63)
  %7686 = xor i64 %7681, %7684
  %7687 = add nuw nsw i64 %7685, %7686
  %7688 = icmp eq i64 %7687, 2
  %7689 = zext i1 %7688 to i8
  store i8 %7689, i8* %38, align 1
  %7690 = add i64 %7657, -20
  %7691 = add i64 %7656, 28
  store i64 %7691, i64* %3, align 8
  %7692 = inttoptr i64 %7690 to i32*
  %7693 = load i32, i32* %7692, align 4
  %7694 = sext i32 %7693 to i64
  %7695 = shl nsw i64 %7694, 4
  store i64 %7695, i64* %R9.i3009, align 8
  %7696 = add i64 %7695, %7664
  store i64 %7696, i64* %R8.i3013, align 8
  %7697 = icmp ult i64 %7696, %7664
  %7698 = icmp ult i64 %7696, %7695
  %7699 = or i1 %7697, %7698
  %7700 = zext i1 %7699 to i8
  store i8 %7700, i8* %14, align 1
  %7701 = trunc i64 %7696 to i32
  %7702 = and i32 %7701, 248
  %7703 = tail call i32 @llvm.ctpop.i32(i32 %7702)
  %7704 = trunc i32 %7703 to i8
  %7705 = and i8 %7704, 1
  %7706 = xor i8 %7705, 1
  store i8 %7706, i8* %21, align 1
  %7707 = xor i64 %7695, %7664
  %7708 = xor i64 %7707, %7696
  %7709 = lshr i64 %7708, 4
  %7710 = trunc i64 %7709 to i8
  %7711 = and i8 %7710, 1
  store i8 %7711, i8* %26, align 1
  %7712 = icmp eq i64 %7696, 0
  %7713 = zext i1 %7712 to i8
  store i8 %7713, i8* %29, align 1
  %7714 = lshr i64 %7696, 63
  %7715 = trunc i64 %7714 to i8
  store i8 %7715, i8* %32, align 1
  %7716 = lshr i64 %7694, 59
  %7717 = and i64 %7716, 1
  %7718 = xor i64 %7714, %7681
  %7719 = xor i64 %7714, %7717
  %7720 = add nuw nsw i64 %7718, %7719
  %7721 = icmp eq i64 %7720, 2
  %7722 = zext i1 %7721 to i8
  store i8 %7722, i8* %38, align 1
  %7723 = load i64, i64* %RBP.i, align 8
  %7724 = add i64 %7723, -24
  %7725 = add i64 %7656, 39
  store i64 %7725, i64* %3, align 8
  %7726 = inttoptr i64 %7724 to i32*
  %7727 = load i32, i32* %7726, align 4
  %7728 = sext i32 %7727 to i64
  store i64 %7728, i64* %R9.i3009, align 8
  %7729 = load i64, i64* %RAX.i1161, align 8
  %7730 = shl nsw i64 %7728, 2
  %7731 = add i64 %7696, %7730
  %7732 = add i64 %7656, 44
  store i64 %7732, i64* %3, align 8
  %7733 = inttoptr i64 %7731 to i32*
  %7734 = load i32, i32* %7733, align 4
  %7735 = shl i64 %7729, 32
  %7736 = ashr exact i64 %7735, 32
  %7737 = sext i32 %7734 to i64
  %7738 = mul nsw i64 %7737, %7736
  %7739 = trunc i64 %7738 to i32
  %7740 = and i64 %7738, 4294967295
  store i64 %7740, i64* %RAX.i1161, align 8
  %7741 = shl i64 %7738, 32
  %7742 = ashr exact i64 %7741, 32
  %7743 = icmp ne i64 %7742, %7738
  %7744 = zext i1 %7743 to i8
  store i8 %7744, i8* %14, align 1
  %7745 = and i32 %7739, 255
  %7746 = tail call i32 @llvm.ctpop.i32(i32 %7745)
  %7747 = trunc i32 %7746 to i8
  %7748 = and i8 %7747, 1
  %7749 = xor i8 %7748, 1
  store i8 %7749, i8* %21, align 1
  store i8 0, i8* %26, align 1
  store i8 0, i8* %29, align 1
  %7750 = lshr i32 %7739, 31
  %7751 = trunc i32 %7750 to i8
  store i8 %7751, i8* %32, align 1
  store i8 %7744, i8* %38, align 1
  %7752 = add i64 %7723, -200
  %7753 = add i64 %7656, 50
  store i64 %7753, i64* %3, align 8
  %7754 = inttoptr i64 %7752 to i32*
  %7755 = load i32, i32* %7754, align 4
  %7756 = zext i32 %7755 to i64
  store i64 %7756, i64* %RCX.i1519, align 8
  %7757 = add i64 %7656, 52
  store i64 %7757, i64* %3, align 8
  %7758 = trunc i32 %7755 to i5
  switch i5 %7758, label %7765 [
    i5 0, label %routine_shll__cl___eax.exit
    i5 1, label %7759
  ]

; <label>:7759:                                   ; preds = %routine_sarl__cl___eax.exit
  %7760 = trunc i64 %7738 to i32
  %7761 = shl i32 %7760, 1
  %7762 = icmp slt i32 %7760, 0
  %7763 = icmp slt i32 %7761, 0
  %7764 = xor i1 %7762, %7763
  br label %7774

; <label>:7765:                                   ; preds = %routine_sarl__cl___eax.exit
  %7766 = and i32 %7755, 31
  %7767 = zext i32 %7766 to i64
  %7768 = add nuw nsw i64 %7767, 4294967295
  %7769 = and i64 %7768, 4294967295
  %7770 = shl i64 %7740, %7769
  %7771 = trunc i64 %7770 to i32
  %7772 = icmp slt i32 %7771, 0
  %7773 = shl i32 %7771, 1
  br label %7774

; <label>:7774:                                   ; preds = %7765, %7759
  %7775 = phi i1 [ %7762, %7759 ], [ %7772, %7765 ]
  %7776 = phi i1 [ %7764, %7759 ], [ false, %7765 ]
  %7777 = phi i32 [ %7761, %7759 ], [ %7773, %7765 ]
  %7778 = zext i32 %7777 to i64
  store i64 %7778, i64* %RAX.i1161, align 8
  %7779 = zext i1 %7775 to i8
  store i8 %7779, i8* %14, align 1
  %7780 = and i32 %7777, 254
  %7781 = tail call i32 @llvm.ctpop.i32(i32 %7780)
  %7782 = trunc i32 %7781 to i8
  %7783 = and i8 %7782, 1
  %7784 = xor i8 %7783, 1
  store i8 %7784, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %7785 = icmp eq i32 %7777, 0
  %7786 = zext i1 %7785 to i8
  store i8 %7786, i8* %29, align 1
  %7787 = lshr i32 %7777, 31
  %7788 = trunc i32 %7787 to i8
  store i8 %7788, i8* %32, align 1
  %7789 = zext i1 %7776 to i8
  store i8 %7789, i8* %38, align 1
  br label %routine_shll__cl___eax.exit

routine_shll__cl___eax.exit:                      ; preds = %7774, %routine_sarl__cl___eax.exit
  %7790 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %7791 = add i64 %7790, 13112
  store i64 %7791, i64* %R8.i3013, align 8
  %7792 = icmp ugt i64 %7790, -13113
  %7793 = zext i1 %7792 to i8
  store i8 %7793, i8* %14, align 1
  %7794 = trunc i64 %7791 to i32
  %7795 = and i32 %7794, 255
  %7796 = tail call i32 @llvm.ctpop.i32(i32 %7795)
  %7797 = trunc i32 %7796 to i8
  %7798 = and i8 %7797, 1
  %7799 = xor i8 %7798, 1
  store i8 %7799, i8* %21, align 1
  %7800 = xor i64 %7790, 16
  %7801 = xor i64 %7800, %7791
  %7802 = lshr i64 %7801, 4
  %7803 = trunc i64 %7802 to i8
  %7804 = and i8 %7803, 1
  store i8 %7804, i8* %26, align 1
  %7805 = icmp eq i64 %7791, 0
  %7806 = zext i1 %7805 to i8
  store i8 %7806, i8* %29, align 1
  %7807 = lshr i64 %7791, 63
  %7808 = trunc i64 %7807 to i8
  store i8 %7808, i8* %32, align 1
  %7809 = lshr i64 %7790, 63
  %7810 = xor i64 %7807, %7809
  %7811 = add nuw nsw i64 %7810, %7807
  %7812 = icmp eq i64 %7811, 2
  %7813 = zext i1 %7812 to i8
  store i8 %7813, i8* %38, align 1
  %7814 = add i64 %7723, -20
  %7815 = add i64 %7656, 71
  store i64 %7815, i64* %3, align 8
  %7816 = inttoptr i64 %7814 to i32*
  %7817 = load i32, i32* %7816, align 4
  %7818 = sext i32 %7817 to i64
  %7819 = shl nsw i64 %7818, 6
  store i64 %7819, i64* %R9.i3009, align 8
  %7820 = add i64 %7819, %7791
  store i64 %7820, i64* %R8.i3013, align 8
  %7821 = icmp ult i64 %7820, %7791
  %7822 = icmp ult i64 %7820, %7819
  %7823 = or i1 %7821, %7822
  %7824 = zext i1 %7823 to i8
  store i8 %7824, i8* %14, align 1
  %7825 = trunc i64 %7820 to i32
  %7826 = and i32 %7825, 255
  %7827 = tail call i32 @llvm.ctpop.i32(i32 %7826)
  %7828 = trunc i32 %7827 to i8
  %7829 = and i8 %7828, 1
  %7830 = xor i8 %7829, 1
  store i8 %7830, i8* %21, align 1
  %7831 = xor i64 %7791, %7820
  %7832 = lshr i64 %7831, 4
  %7833 = trunc i64 %7832 to i8
  %7834 = and i8 %7833, 1
  store i8 %7834, i8* %26, align 1
  %7835 = icmp eq i64 %7820, 0
  %7836 = zext i1 %7835 to i8
  store i8 %7836, i8* %29, align 1
  %7837 = lshr i64 %7820, 63
  %7838 = trunc i64 %7837 to i8
  store i8 %7838, i8* %32, align 1
  %7839 = lshr i64 %7818, 57
  %7840 = and i64 %7839, 1
  %7841 = xor i64 %7837, %7807
  %7842 = xor i64 %7837, %7840
  %7843 = add nuw nsw i64 %7841, %7842
  %7844 = icmp eq i64 %7843, 2
  %7845 = zext i1 %7844 to i8
  store i8 %7845, i8* %38, align 1
  %7846 = load i64, i64* %RBP.i, align 8
  %7847 = add i64 %7846, -24
  %7848 = add i64 %7656, 82
  store i64 %7848, i64* %3, align 8
  %7849 = inttoptr i64 %7847 to i32*
  %7850 = load i32, i32* %7849, align 4
  %7851 = sext i32 %7850 to i64
  store i64 %7851, i64* %R9.i3009, align 8
  %7852 = shl nsw i64 %7851, 2
  %7853 = add i64 %7852, %7820
  %7854 = load i32, i32* %EAX.i2800, align 4
  %7855 = add i64 %7656, 86
  store i64 %7855, i64* %3, align 8
  %7856 = inttoptr i64 %7853 to i32*
  store i32 %7854, i32* %7856, align 4
  %7857 = load i64, i64* %RBP.i, align 8
  %7858 = add i64 %7857, -84
  %7859 = load i64, i64* %3, align 8
  %7860 = add i64 %7859, 3
  store i64 %7860, i64* %3, align 8
  %7861 = inttoptr i64 %7858 to i32*
  %7862 = load i32, i32* %7861, align 4
  %7863 = add i32 %7862, 1
  %7864 = zext i32 %7863 to i64
  store i64 %7864, i64* %RAX.i1161, align 8
  %7865 = icmp eq i32 %7862, -1
  %7866 = icmp eq i32 %7863, 0
  %7867 = or i1 %7865, %7866
  %7868 = zext i1 %7867 to i8
  store i8 %7868, i8* %14, align 1
  %7869 = and i32 %7863, 255
  %7870 = tail call i32 @llvm.ctpop.i32(i32 %7869)
  %7871 = trunc i32 %7870 to i8
  %7872 = and i8 %7871, 1
  %7873 = xor i8 %7872, 1
  store i8 %7873, i8* %21, align 1
  %7874 = xor i32 %7863, %7862
  %7875 = lshr i32 %7874, 4
  %7876 = trunc i32 %7875 to i8
  %7877 = and i8 %7876, 1
  store i8 %7877, i8* %26, align 1
  %7878 = zext i1 %7866 to i8
  store i8 %7878, i8* %29, align 1
  %7879 = lshr i32 %7863, 31
  %7880 = trunc i32 %7879 to i8
  store i8 %7880, i8* %32, align 1
  %7881 = lshr i32 %7862, 31
  %7882 = xor i32 %7879, %7881
  %7883 = add nuw nsw i32 %7882, %7879
  %7884 = icmp eq i32 %7883, 2
  %7885 = zext i1 %7884 to i8
  store i8 %7885, i8* %38, align 1
  %7886 = add i64 %7859, 9
  store i64 %7886, i64* %3, align 8
  store i32 %7863, i32* %7861, align 4
  %7887 = load i64, i64* %3, align 8
  %7888 = add i64 %7887, -2053
  store i64 %7888, i64* %3, align 8
  br label %block_.L_40c5e1

block_.L_40cdeb:                                  ; preds = %block_.L_40c5e1
  %7889 = add i64 %4282, -232
  %7890 = add i64 %4311, 7
  store i64 %7890, i64* %3, align 8
  %7891 = inttoptr i64 %7889 to i64*
  %7892 = load i64, i64* %7891, align 8
  store i64 %7892, i64* %RAX.i1161, align 8
  %7893 = add i64 %4282, -96
  %7894 = add i64 %4311, 11
  store i64 %7894, i64* %3, align 8
  %7895 = inttoptr i64 %7893 to i32*
  %7896 = load i32, i32* %7895, align 4
  %7897 = sext i32 %7896 to i64
  store i64 %7897, i64* %RCX.i1519, align 8
  %7898 = shl nsw i64 %7897, 2
  %7899 = add i64 %7898, %7892
  %7900 = add i64 %4311, 18
  store i64 %7900, i64* %3, align 8
  %7901 = inttoptr i64 %7899 to i32*
  store i32 0, i32* %7901, align 4
  %7902 = load i64, i64* %RBP.i, align 8
  %7903 = add i64 %7902, -24
  %7904 = load i64, i64* %3, align 8
  %7905 = add i64 %7904, 7
  store i64 %7905, i64* %3, align 8
  %7906 = inttoptr i64 %7903 to i32*
  store i32 0, i32* %7906, align 4
  %.pre191 = load i64, i64* %3, align 8
  br label %block_.L_40ce04

block_.L_40ce04:                                  ; preds = %block_.L_40cf0d, %block_.L_40cdeb
  %7907 = phi i64 [ %8574, %block_.L_40cf0d ], [ %.pre191, %block_.L_40cdeb ]
  %7908 = load i64, i64* %RBP.i, align 8
  %7909 = add i64 %7908, -24
  %7910 = add i64 %7907, 4
  store i64 %7910, i64* %3, align 8
  %7911 = inttoptr i64 %7909 to i32*
  %7912 = load i32, i32* %7911, align 4
  %7913 = add i32 %7912, -4
  %7914 = icmp ult i32 %7912, 4
  %7915 = zext i1 %7914 to i8
  store i8 %7915, i8* %14, align 1
  %7916 = and i32 %7913, 255
  %7917 = tail call i32 @llvm.ctpop.i32(i32 %7916)
  %7918 = trunc i32 %7917 to i8
  %7919 = and i8 %7918, 1
  %7920 = xor i8 %7919, 1
  store i8 %7920, i8* %21, align 1
  %7921 = xor i32 %7913, %7912
  %7922 = lshr i32 %7921, 4
  %7923 = trunc i32 %7922 to i8
  %7924 = and i8 %7923, 1
  store i8 %7924, i8* %26, align 1
  %7925 = icmp eq i32 %7913, 0
  %7926 = zext i1 %7925 to i8
  store i8 %7926, i8* %29, align 1
  %7927 = lshr i32 %7913, 31
  %7928 = trunc i32 %7927 to i8
  store i8 %7928, i8* %32, align 1
  %7929 = lshr i32 %7912, 31
  %7930 = xor i32 %7927, %7929
  %7931 = add nuw nsw i32 %7930, %7929
  %7932 = icmp eq i32 %7931, 2
  %7933 = zext i1 %7932 to i8
  store i8 %7933, i8* %38, align 1
  %7934 = icmp ne i8 %7928, 0
  %7935 = xor i1 %7934, %7932
  %.v228 = select i1 %7935, i64 10, i64 284
  %7936 = add i64 %7907, %.v228
  %7937 = add i64 %7908, -20
  %7938 = add i64 %7936, 7
  store i64 %7938, i64* %3, align 8
  %7939 = inttoptr i64 %7937 to i32*
  store i32 0, i32* %7939, align 4
  %.pre203 = load i64, i64* %3, align 8
  br i1 %7935, label %block_.L_40ce15.preheader, label %block_.L_40cf27.preheader

block_.L_40ce15.preheader:                        ; preds = %block_.L_40ce04
  br label %block_.L_40ce15

block_.L_40cf27.preheader:                        ; preds = %block_.L_40ce04
  br label %block_.L_40cf27

block_.L_40ce15:                                  ; preds = %block_.L_40ce15.preheader, %block_40ce1f
  %7940 = phi i64 [ %8077, %block_40ce1f ], [ %.pre203, %block_.L_40ce15.preheader ]
  %7941 = load i64, i64* %RBP.i, align 8
  %7942 = add i64 %7941, -20
  %7943 = add i64 %7940, 4
  store i64 %7943, i64* %3, align 8
  %7944 = inttoptr i64 %7942 to i32*
  %7945 = load i32, i32* %7944, align 4
  %7946 = add i32 %7945, -4
  %7947 = icmp ult i32 %7945, 4
  %7948 = zext i1 %7947 to i8
  store i8 %7948, i8* %14, align 1
  %7949 = and i32 %7946, 255
  %7950 = tail call i32 @llvm.ctpop.i32(i32 %7949)
  %7951 = trunc i32 %7950 to i8
  %7952 = and i8 %7951, 1
  %7953 = xor i8 %7952, 1
  store i8 %7953, i8* %21, align 1
  %7954 = xor i32 %7946, %7945
  %7955 = lshr i32 %7954, 4
  %7956 = trunc i32 %7955 to i8
  %7957 = and i8 %7956, 1
  store i8 %7957, i8* %26, align 1
  %7958 = icmp eq i32 %7946, 0
  %7959 = zext i1 %7958 to i8
  store i8 %7959, i8* %29, align 1
  %7960 = lshr i32 %7946, 31
  %7961 = trunc i32 %7960 to i8
  store i8 %7961, i8* %32, align 1
  %7962 = lshr i32 %7945, 31
  %7963 = xor i32 %7960, %7962
  %7964 = add nuw nsw i32 %7963, %7962
  %7965 = icmp eq i32 %7964, 2
  %7966 = zext i1 %7965 to i8
  store i8 %7966, i8* %38, align 1
  %7967 = icmp ne i8 %7961, 0
  %7968 = xor i1 %7967, %7965
  %.v243 = select i1 %7968, i64 10, i64 64
  %7969 = add i64 %7940, %.v243
  store i64 %7969, i64* %3, align 8
  br i1 %7968, label %block_40ce1f, label %block_.L_40ce55

block_40ce1f:                                     ; preds = %block_.L_40ce15
  %7970 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %7971 = add i64 %7970, 13112
  store i64 %7971, i64* %RAX.i1161, align 8
  %7972 = icmp ugt i64 %7970, -13113
  %7973 = zext i1 %7972 to i8
  store i8 %7973, i8* %14, align 1
  %7974 = trunc i64 %7971 to i32
  %7975 = and i32 %7974, 255
  %7976 = tail call i32 @llvm.ctpop.i32(i32 %7975)
  %7977 = trunc i32 %7976 to i8
  %7978 = and i8 %7977, 1
  %7979 = xor i8 %7978, 1
  store i8 %7979, i8* %21, align 1
  %7980 = xor i64 %7970, 16
  %7981 = xor i64 %7980, %7971
  %7982 = lshr i64 %7981, 4
  %7983 = trunc i64 %7982 to i8
  %7984 = and i8 %7983, 1
  store i8 %7984, i8* %26, align 1
  %7985 = icmp eq i64 %7971, 0
  %7986 = zext i1 %7985 to i8
  store i8 %7986, i8* %29, align 1
  %7987 = lshr i64 %7971, 63
  %7988 = trunc i64 %7987 to i8
  store i8 %7988, i8* %32, align 1
  %7989 = lshr i64 %7970, 63
  %7990 = xor i64 %7987, %7989
  %7991 = add nuw nsw i64 %7990, %7987
  %7992 = icmp eq i64 %7991, 2
  %7993 = zext i1 %7992 to i8
  store i8 %7993, i8* %38, align 1
  %7994 = add i64 %7969, 18
  store i64 %7994, i64* %3, align 8
  %7995 = load i32, i32* %7944, align 4
  %7996 = sext i32 %7995 to i64
  %7997 = shl nsw i64 %7996, 6
  store i64 %7997, i64* %RCX.i1519, align 8
  %7998 = add i64 %7997, %7971
  store i64 %7998, i64* %RAX.i1161, align 8
  %7999 = icmp ult i64 %7998, %7971
  %8000 = icmp ult i64 %7998, %7997
  %8001 = or i1 %7999, %8000
  %8002 = zext i1 %8001 to i8
  store i8 %8002, i8* %14, align 1
  %8003 = trunc i64 %7998 to i32
  %8004 = and i32 %8003, 255
  %8005 = tail call i32 @llvm.ctpop.i32(i32 %8004)
  %8006 = trunc i32 %8005 to i8
  %8007 = and i8 %8006, 1
  %8008 = xor i8 %8007, 1
  store i8 %8008, i8* %21, align 1
  %8009 = xor i64 %7971, %7998
  %8010 = lshr i64 %8009, 4
  %8011 = trunc i64 %8010 to i8
  %8012 = and i8 %8011, 1
  store i8 %8012, i8* %26, align 1
  %8013 = icmp eq i64 %7998, 0
  %8014 = zext i1 %8013 to i8
  store i8 %8014, i8* %29, align 1
  %8015 = lshr i64 %7998, 63
  %8016 = trunc i64 %8015 to i8
  store i8 %8016, i8* %32, align 1
  %8017 = lshr i64 %7996, 57
  %8018 = and i64 %8017, 1
  %8019 = xor i64 %8015, %7987
  %8020 = xor i64 %8015, %8018
  %8021 = add nuw nsw i64 %8019, %8020
  %8022 = icmp eq i64 %8021, 2
  %8023 = zext i1 %8022 to i8
  store i8 %8023, i8* %38, align 1
  %8024 = add i64 %7941, -24
  %8025 = add i64 %7969, 29
  store i64 %8025, i64* %3, align 8
  %8026 = inttoptr i64 %8024 to i32*
  %8027 = load i32, i32* %8026, align 4
  %8028 = sext i32 %8027 to i64
  store i64 %8028, i64* %RCX.i1519, align 8
  %8029 = shl nsw i64 %8028, 2
  %8030 = add i64 %8029, %7998
  %8031 = add i64 %7969, 32
  store i64 %8031, i64* %3, align 8
  %8032 = inttoptr i64 %8030 to i32*
  %8033 = load i32, i32* %8032, align 4
  %8034 = zext i32 %8033 to i64
  store i64 %8034, i64* %RDX.i1748, align 8
  %8035 = load i64, i64* %RBP.i, align 8
  %8036 = add i64 %8035, -20
  %8037 = add i64 %7969, 36
  store i64 %8037, i64* %3, align 8
  %8038 = inttoptr i64 %8036 to i32*
  %8039 = load i32, i32* %8038, align 4
  %8040 = sext i32 %8039 to i64
  store i64 %8040, i64* %RAX.i1161, align 8
  %8041 = shl nsw i64 %8040, 2
  %8042 = add i64 %8035, -64
  %8043 = add i64 %8042, %8041
  %8044 = add i64 %7969, 40
  store i64 %8044, i64* %3, align 8
  %8045 = inttoptr i64 %8043 to i32*
  store i32 %8033, i32* %8045, align 4
  %8046 = load i64, i64* %RBP.i, align 8
  %8047 = add i64 %8046, -20
  %8048 = load i64, i64* %3, align 8
  %8049 = add i64 %8048, 3
  store i64 %8049, i64* %3, align 8
  %8050 = inttoptr i64 %8047 to i32*
  %8051 = load i32, i32* %8050, align 4
  %8052 = add i32 %8051, 1
  %8053 = zext i32 %8052 to i64
  store i64 %8053, i64* %RAX.i1161, align 8
  %8054 = icmp eq i32 %8051, -1
  %8055 = icmp eq i32 %8052, 0
  %8056 = or i1 %8054, %8055
  %8057 = zext i1 %8056 to i8
  store i8 %8057, i8* %14, align 1
  %8058 = and i32 %8052, 255
  %8059 = tail call i32 @llvm.ctpop.i32(i32 %8058)
  %8060 = trunc i32 %8059 to i8
  %8061 = and i8 %8060, 1
  %8062 = xor i8 %8061, 1
  store i8 %8062, i8* %21, align 1
  %8063 = xor i32 %8052, %8051
  %8064 = lshr i32 %8063, 4
  %8065 = trunc i32 %8064 to i8
  %8066 = and i8 %8065, 1
  store i8 %8066, i8* %26, align 1
  %8067 = zext i1 %8055 to i8
  store i8 %8067, i8* %29, align 1
  %8068 = lshr i32 %8052, 31
  %8069 = trunc i32 %8068 to i8
  store i8 %8069, i8* %32, align 1
  %8070 = lshr i32 %8051, 31
  %8071 = xor i32 %8068, %8070
  %8072 = add nuw nsw i32 %8071, %8068
  %8073 = icmp eq i32 %8072, 2
  %8074 = zext i1 %8073 to i8
  store i8 %8074, i8* %38, align 1
  %8075 = add i64 %8048, 9
  store i64 %8075, i64* %3, align 8
  store i32 %8052, i32* %8050, align 4
  %8076 = load i64, i64* %3, align 8
  %8077 = add i64 %8076, -59
  store i64 %8077, i64* %3, align 8
  br label %block_.L_40ce15

block_.L_40ce55:                                  ; preds = %block_.L_40ce15
  %8078 = add i64 %7941, -64
  %8079 = add i64 %7969, 3
  store i64 %8079, i64* %3, align 8
  %8080 = inttoptr i64 %8078 to i32*
  %8081 = load i32, i32* %8080, align 4
  %8082 = zext i32 %8081 to i64
  store i64 %8082, i64* %RAX.i1161, align 8
  %8083 = add i64 %7941, -56
  %8084 = add i64 %7969, 6
  store i64 %8084, i64* %3, align 8
  %8085 = inttoptr i64 %8083 to i32*
  %8086 = load i32, i32* %8085, align 4
  %8087 = add i32 %8086, %8081
  %8088 = zext i32 %8087 to i64
  store i64 %8088, i64* %RAX.i1161, align 8
  %8089 = icmp ult i32 %8087, %8081
  %8090 = icmp ult i32 %8087, %8086
  %8091 = or i1 %8089, %8090
  %8092 = zext i1 %8091 to i8
  store i8 %8092, i8* %14, align 1
  %8093 = and i32 %8087, 255
  %8094 = tail call i32 @llvm.ctpop.i32(i32 %8093)
  %8095 = trunc i32 %8094 to i8
  %8096 = and i8 %8095, 1
  %8097 = xor i8 %8096, 1
  store i8 %8097, i8* %21, align 1
  %8098 = xor i32 %8086, %8081
  %8099 = xor i32 %8098, %8087
  %8100 = lshr i32 %8099, 4
  %8101 = trunc i32 %8100 to i8
  %8102 = and i8 %8101, 1
  store i8 %8102, i8* %26, align 1
  %8103 = icmp eq i32 %8087, 0
  %8104 = zext i1 %8103 to i8
  store i8 %8104, i8* %29, align 1
  %8105 = lshr i32 %8087, 31
  %8106 = trunc i32 %8105 to i8
  store i8 %8106, i8* %32, align 1
  %8107 = lshr i32 %8081, 31
  %8108 = lshr i32 %8086, 31
  %8109 = xor i32 %8105, %8107
  %8110 = xor i32 %8105, %8108
  %8111 = add nuw nsw i32 %8109, %8110
  %8112 = icmp eq i32 %8111, 2
  %8113 = zext i1 %8112 to i8
  store i8 %8113, i8* %38, align 1
  %8114 = add i64 %7941, -80
  %8115 = add i64 %7969, 9
  store i64 %8115, i64* %3, align 8
  %8116 = inttoptr i64 %8114 to i32*
  store i32 %8087, i32* %8116, align 4
  %8117 = load i64, i64* %RBP.i, align 8
  %8118 = add i64 %8117, -64
  %8119 = load i64, i64* %3, align 8
  %8120 = add i64 %8119, 3
  store i64 %8120, i64* %3, align 8
  %8121 = inttoptr i64 %8118 to i32*
  %8122 = load i32, i32* %8121, align 4
  %8123 = zext i32 %8122 to i64
  store i64 %8123, i64* %RAX.i1161, align 8
  %8124 = add i64 %8117, -56
  %8125 = add i64 %8119, 6
  store i64 %8125, i64* %3, align 8
  %8126 = inttoptr i64 %8124 to i32*
  %8127 = load i32, i32* %8126, align 4
  %8128 = sub i32 %8122, %8127
  %8129 = zext i32 %8128 to i64
  store i64 %8129, i64* %RAX.i1161, align 8
  %8130 = icmp ult i32 %8122, %8127
  %8131 = zext i1 %8130 to i8
  store i8 %8131, i8* %14, align 1
  %8132 = and i32 %8128, 255
  %8133 = tail call i32 @llvm.ctpop.i32(i32 %8132)
  %8134 = trunc i32 %8133 to i8
  %8135 = and i8 %8134, 1
  %8136 = xor i8 %8135, 1
  store i8 %8136, i8* %21, align 1
  %8137 = xor i32 %8127, %8122
  %8138 = xor i32 %8137, %8128
  %8139 = lshr i32 %8138, 4
  %8140 = trunc i32 %8139 to i8
  %8141 = and i8 %8140, 1
  store i8 %8141, i8* %26, align 1
  %8142 = icmp eq i32 %8128, 0
  %8143 = zext i1 %8142 to i8
  store i8 %8143, i8* %29, align 1
  %8144 = lshr i32 %8128, 31
  %8145 = trunc i32 %8144 to i8
  store i8 %8145, i8* %32, align 1
  %8146 = lshr i32 %8122, 31
  %8147 = lshr i32 %8127, 31
  %8148 = xor i32 %8147, %8146
  %8149 = xor i32 %8144, %8146
  %8150 = add nuw nsw i32 %8149, %8148
  %8151 = icmp eq i32 %8150, 2
  %8152 = zext i1 %8151 to i8
  store i8 %8152, i8* %38, align 1
  %8153 = add i64 %8117, -76
  %8154 = add i64 %8119, 9
  store i64 %8154, i64* %3, align 8
  %8155 = inttoptr i64 %8153 to i32*
  store i32 %8128, i32* %8155, align 4
  %8156 = load i64, i64* %RBP.i, align 8
  %8157 = add i64 %8156, -60
  %8158 = load i64, i64* %3, align 8
  %8159 = add i64 %8158, 3
  store i64 %8159, i64* %3, align 8
  %8160 = inttoptr i64 %8157 to i32*
  %8161 = load i32, i32* %8160, align 4
  %8162 = zext i32 %8161 to i64
  %8163 = shl nuw i64 %8162, 32
  %8164 = ashr i64 %8163, 33
  %8165 = trunc i32 %8161 to i8
  %8166 = and i8 %8165, 1
  %8167 = trunc i64 %8164 to i32
  %8168 = and i64 %8164, 4294967295
  store i64 %8168, i64* %RAX.i1161, align 8
  store i8 %8166, i8* %14, align 1
  %8169 = and i32 %8167, 255
  %8170 = tail call i32 @llvm.ctpop.i32(i32 %8169)
  %8171 = trunc i32 %8170 to i8
  %8172 = and i8 %8171, 1
  %8173 = xor i8 %8172, 1
  store i8 %8173, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %8174 = icmp eq i32 %8167, 0
  %8175 = zext i1 %8174 to i8
  store i8 %8175, i8* %29, align 1
  %8176 = lshr i64 %8164, 31
  %8177 = trunc i64 %8176 to i8
  %8178 = and i8 %8177, 1
  store i8 %8178, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %8179 = add i64 %8156, -52
  %8180 = add i64 %8158, 8
  store i64 %8180, i64* %3, align 8
  %8181 = trunc i64 %8164 to i32
  %8182 = inttoptr i64 %8179 to i32*
  %8183 = load i32, i32* %8182, align 4
  %8184 = sub i32 %8181, %8183
  %8185 = zext i32 %8184 to i64
  store i64 %8185, i64* %RAX.i1161, align 8
  %8186 = icmp ult i32 %8181, %8183
  %8187 = zext i1 %8186 to i8
  store i8 %8187, i8* %14, align 1
  %8188 = and i32 %8184, 255
  %8189 = tail call i32 @llvm.ctpop.i32(i32 %8188)
  %8190 = trunc i32 %8189 to i8
  %8191 = and i8 %8190, 1
  %8192 = xor i8 %8191, 1
  store i8 %8192, i8* %21, align 1
  %8193 = xor i32 %8183, %8181
  %8194 = xor i32 %8193, %8184
  %8195 = lshr i32 %8194, 4
  %8196 = trunc i32 %8195 to i8
  %8197 = and i8 %8196, 1
  store i8 %8197, i8* %26, align 1
  %8198 = icmp eq i32 %8184, 0
  %8199 = zext i1 %8198 to i8
  store i8 %8199, i8* %29, align 1
  %8200 = lshr i32 %8184, 31
  %8201 = trunc i32 %8200 to i8
  store i8 %8201, i8* %32, align 1
  %8202 = lshr i64 %8164, 31
  %8203 = trunc i64 %8202 to i32
  %8204 = and i32 %8203, 1
  %8205 = lshr i32 %8183, 31
  %8206 = xor i32 %8205, %8204
  %8207 = xor i32 %8200, %8204
  %8208 = add nuw nsw i32 %8207, %8206
  %8209 = icmp eq i32 %8208, 2
  %8210 = zext i1 %8209 to i8
  store i8 %8210, i8* %38, align 1
  %8211 = add i64 %8156, -72
  %8212 = add i64 %8158, 11
  store i64 %8212, i64* %3, align 8
  %8213 = inttoptr i64 %8211 to i32*
  store i32 %8184, i32* %8213, align 4
  %8214 = load i64, i64* %RBP.i, align 8
  %8215 = add i64 %8214, -60
  %8216 = load i64, i64* %3, align 8
  %8217 = add i64 %8216, 3
  store i64 %8217, i64* %3, align 8
  %8218 = inttoptr i64 %8215 to i32*
  %8219 = load i32, i32* %8218, align 4
  %8220 = zext i32 %8219 to i64
  store i64 %8220, i64* %RAX.i1161, align 8
  %8221 = add i64 %8214, -52
  %8222 = add i64 %8216, 6
  store i64 %8222, i64* %3, align 8
  %8223 = inttoptr i64 %8221 to i32*
  %8224 = load i32, i32* %8223, align 4
  %8225 = zext i32 %8224 to i64
  %8226 = shl nuw i64 %8225, 32
  %8227 = ashr i64 %8226, 33
  %8228 = and i64 %8227, 4294967295
  store i64 %8228, i64* %RCX.i1519, align 8
  %8229 = trunc i64 %8227 to i32
  %8230 = add i32 %8229, %8219
  %8231 = zext i32 %8230 to i64
  store i64 %8231, i64* %RAX.i1161, align 8
  %8232 = icmp ult i32 %8230, %8219
  %8233 = icmp ult i32 %8230, %8229
  %8234 = or i1 %8232, %8233
  %8235 = zext i1 %8234 to i8
  store i8 %8235, i8* %14, align 1
  %8236 = and i32 %8230, 255
  %8237 = tail call i32 @llvm.ctpop.i32(i32 %8236)
  %8238 = trunc i32 %8237 to i8
  %8239 = and i8 %8238, 1
  %8240 = xor i8 %8239, 1
  store i8 %8240, i8* %21, align 1
  %8241 = xor i64 %8227, %8220
  %8242 = trunc i64 %8241 to i32
  %8243 = xor i32 %8242, %8230
  %8244 = lshr i32 %8243, 4
  %8245 = trunc i32 %8244 to i8
  %8246 = and i8 %8245, 1
  store i8 %8246, i8* %26, align 1
  %8247 = icmp eq i32 %8230, 0
  %8248 = zext i1 %8247 to i8
  store i8 %8248, i8* %29, align 1
  %8249 = lshr i32 %8230, 31
  %8250 = trunc i32 %8249 to i8
  store i8 %8250, i8* %32, align 1
  %8251 = lshr i32 %8219, 31
  %8252 = lshr i64 %8227, 31
  %8253 = trunc i64 %8252 to i32
  %8254 = and i32 %8253, 1
  %8255 = xor i32 %8249, %8251
  %8256 = xor i32 %8249, %8254
  %8257 = add nuw nsw i32 %8255, %8256
  %8258 = icmp eq i32 %8257, 2
  %8259 = zext i1 %8258 to i8
  store i8 %8259, i8* %38, align 1
  %8260 = add i64 %8214, -68
  %8261 = add i64 %8216, 13
  store i64 %8261, i64* %3, align 8
  %8262 = inttoptr i64 %8260 to i32*
  store i32 %8230, i32* %8262, align 4
  %8263 = load i64, i64* %RBP.i, align 8
  %8264 = add i64 %8263, -20
  %8265 = load i64, i64* %3, align 8
  %8266 = add i64 %8265, 7
  store i64 %8266, i64* %3, align 8
  %8267 = inttoptr i64 %8264 to i32*
  store i32 0, i32* %8267, align 4
  %.pre204 = load i64, i64* %3, align 8
  br label %block_.L_40ce88

block_.L_40ce88:                                  ; preds = %block_40ce92, %block_.L_40ce55
  %8268 = phi i64 [ %8544, %block_40ce92 ], [ %.pre204, %block_.L_40ce55 ]
  %8269 = load i64, i64* %RBP.i, align 8
  %8270 = add i64 %8269, -20
  %8271 = add i64 %8268, 4
  store i64 %8271, i64* %3, align 8
  %8272 = inttoptr i64 %8270 to i32*
  %8273 = load i32, i32* %8272, align 4
  %8274 = add i32 %8273, -2
  %8275 = icmp ult i32 %8273, 2
  %8276 = zext i1 %8275 to i8
  store i8 %8276, i8* %14, align 1
  %8277 = and i32 %8274, 255
  %8278 = tail call i32 @llvm.ctpop.i32(i32 %8277)
  %8279 = trunc i32 %8278 to i8
  %8280 = and i8 %8279, 1
  %8281 = xor i8 %8280, 1
  store i8 %8281, i8* %21, align 1
  %8282 = xor i32 %8274, %8273
  %8283 = lshr i32 %8282, 4
  %8284 = trunc i32 %8283 to i8
  %8285 = and i8 %8284, 1
  store i8 %8285, i8* %26, align 1
  %8286 = icmp eq i32 %8274, 0
  %8287 = zext i1 %8286 to i8
  store i8 %8287, i8* %29, align 1
  %8288 = lshr i32 %8274, 31
  %8289 = trunc i32 %8288 to i8
  store i8 %8289, i8* %32, align 1
  %8290 = lshr i32 %8273, 31
  %8291 = xor i32 %8288, %8290
  %8292 = add nuw nsw i32 %8291, %8290
  %8293 = icmp eq i32 %8292, 2
  %8294 = zext i1 %8293 to i8
  store i8 %8294, i8* %38, align 1
  %8295 = icmp ne i8 %8289, 0
  %8296 = xor i1 %8295, %8293
  %.v244 = select i1 %8296, i64 10, i64 133
  %8297 = add i64 %8268, %.v244
  %8298 = add i64 %8297, 5
  store i64 %8298, i64* %3, align 8
  br i1 %8296, label %block_40ce92, label %block_.L_40cf0d

block_40ce92:                                     ; preds = %block_.L_40ce88
  store i64 3, i64* %RAX.i1161, align 8
  %8299 = add i64 %8297, 8
  store i64 %8299, i64* %3, align 8
  %8300 = load i32, i32* %8272, align 4
  %8301 = sub i32 3, %8300
  %8302 = zext i32 %8301 to i64
  store i64 %8302, i64* %RAX.i1161, align 8
  %8303 = icmp ugt i32 %8300, 3
  %8304 = zext i1 %8303 to i8
  store i8 %8304, i8* %14, align 1
  %8305 = and i32 %8301, 255
  %8306 = tail call i32 @llvm.ctpop.i32(i32 %8305)
  %8307 = trunc i32 %8306 to i8
  %8308 = and i8 %8307, 1
  %8309 = xor i8 %8308, 1
  store i8 %8309, i8* %21, align 1
  %8310 = xor i32 %8301, %8300
  %8311 = lshr i32 %8310, 4
  %8312 = trunc i32 %8311 to i8
  %8313 = and i8 %8312, 1
  store i8 %8313, i8* %26, align 1
  %8314 = icmp eq i32 %8301, 0
  %8315 = zext i1 %8314 to i8
  store i8 %8315, i8* %29, align 1
  %8316 = lshr i32 %8301, 31
  %8317 = trunc i32 %8316 to i8
  store i8 %8317, i8* %32, align 1
  %8318 = lshr i32 %8300, 31
  %8319 = add nuw nsw i32 %8316, %8318
  %8320 = icmp eq i32 %8319, 2
  %8321 = zext i1 %8320 to i8
  store i8 %8321, i8* %38, align 1
  %8322 = add i64 %8269, -28
  %8323 = add i64 %8297, 11
  store i64 %8323, i64* %3, align 8
  %8324 = inttoptr i64 %8322 to i32*
  store i32 %8301, i32* %8324, align 4
  %8325 = load i64, i64* %RBP.i, align 8
  %8326 = add i64 %8325, -20
  %8327 = load i64, i64* %3, align 8
  %8328 = add i64 %8327, 4
  store i64 %8328, i64* %3, align 8
  %8329 = inttoptr i64 %8326 to i32*
  %8330 = load i32, i32* %8329, align 4
  %8331 = sext i32 %8330 to i64
  store i64 %8331, i64* %RCX.i1519, align 8
  %8332 = shl nsw i64 %8331, 2
  %8333 = add i64 %8325, -80
  %8334 = add i64 %8333, %8332
  %8335 = add i64 %8327, 8
  store i64 %8335, i64* %3, align 8
  %8336 = inttoptr i64 %8334 to i32*
  %8337 = load i32, i32* %8336, align 4
  %8338 = zext i32 %8337 to i64
  store i64 %8338, i64* %RAX.i1161, align 8
  %8339 = add i64 %8325, -28
  %8340 = add i64 %8327, 12
  store i64 %8340, i64* %3, align 8
  %8341 = inttoptr i64 %8339 to i32*
  %8342 = load i32, i32* %8341, align 4
  %8343 = sext i32 %8342 to i64
  store i64 %8343, i64* %RCX.i1519, align 8
  %8344 = shl nsw i64 %8343, 2
  %8345 = add nsw i64 %8344, -80
  %8346 = add i64 %8345, %8325
  %8347 = add i64 %8327, 16
  store i64 %8347, i64* %3, align 8
  %8348 = inttoptr i64 %8346 to i32*
  %8349 = load i32, i32* %8348, align 4
  %8350 = add i32 %8349, %8337
  %8351 = zext i32 %8350 to i64
  store i64 %8351, i64* %RAX.i1161, align 8
  %8352 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %8353 = add i64 %8352, 13112
  store i64 %8353, i64* %RCX.i1519, align 8
  %8354 = icmp ugt i64 %8352, -13113
  %8355 = zext i1 %8354 to i8
  store i8 %8355, i8* %14, align 1
  %8356 = trunc i64 %8353 to i32
  %8357 = and i32 %8356, 255
  %8358 = tail call i32 @llvm.ctpop.i32(i32 %8357)
  %8359 = trunc i32 %8358 to i8
  %8360 = and i8 %8359, 1
  %8361 = xor i8 %8360, 1
  store i8 %8361, i8* %21, align 1
  %8362 = xor i64 %8352, 16
  %8363 = xor i64 %8362, %8353
  %8364 = lshr i64 %8363, 4
  %8365 = trunc i64 %8364 to i8
  %8366 = and i8 %8365, 1
  store i8 %8366, i8* %26, align 1
  %8367 = icmp eq i64 %8353, 0
  %8368 = zext i1 %8367 to i8
  store i8 %8368, i8* %29, align 1
  %8369 = lshr i64 %8353, 63
  %8370 = trunc i64 %8369 to i8
  store i8 %8370, i8* %32, align 1
  %8371 = lshr i64 %8352, 63
  %8372 = xor i64 %8369, %8371
  %8373 = add nuw nsw i64 %8372, %8369
  %8374 = icmp eq i64 %8373, 2
  %8375 = zext i1 %8374 to i8
  store i8 %8375, i8* %38, align 1
  %8376 = load i64, i64* %RBP.i, align 8
  %8377 = add i64 %8376, -20
  %8378 = add i64 %8327, 35
  store i64 %8378, i64* %3, align 8
  %8379 = inttoptr i64 %8377 to i32*
  %8380 = load i32, i32* %8379, align 4
  %8381 = sext i32 %8380 to i64
  %8382 = shl nsw i64 %8381, 6
  store i64 %8382, i64* %RDX.i1748, align 8
  %8383 = add i64 %8382, %8353
  store i64 %8383, i64* %RCX.i1519, align 8
  %8384 = icmp ult i64 %8383, %8353
  %8385 = icmp ult i64 %8383, %8382
  %8386 = or i1 %8384, %8385
  %8387 = zext i1 %8386 to i8
  store i8 %8387, i8* %14, align 1
  %8388 = trunc i64 %8383 to i32
  %8389 = and i32 %8388, 255
  %8390 = tail call i32 @llvm.ctpop.i32(i32 %8389)
  %8391 = trunc i32 %8390 to i8
  %8392 = and i8 %8391, 1
  %8393 = xor i8 %8392, 1
  store i8 %8393, i8* %21, align 1
  %8394 = xor i64 %8353, %8383
  %8395 = lshr i64 %8394, 4
  %8396 = trunc i64 %8395 to i8
  %8397 = and i8 %8396, 1
  store i8 %8397, i8* %26, align 1
  %8398 = icmp eq i64 %8383, 0
  %8399 = zext i1 %8398 to i8
  store i8 %8399, i8* %29, align 1
  %8400 = lshr i64 %8383, 63
  %8401 = trunc i64 %8400 to i8
  store i8 %8401, i8* %32, align 1
  %8402 = lshr i64 %8381, 57
  %8403 = and i64 %8402, 1
  %8404 = xor i64 %8400, %8369
  %8405 = xor i64 %8400, %8403
  %8406 = add nuw nsw i64 %8404, %8405
  %8407 = icmp eq i64 %8406, 2
  %8408 = zext i1 %8407 to i8
  store i8 %8408, i8* %38, align 1
  %8409 = add i64 %8376, -24
  %8410 = add i64 %8327, 46
  store i64 %8410, i64* %3, align 8
  %8411 = inttoptr i64 %8409 to i32*
  %8412 = load i32, i32* %8411, align 4
  %8413 = sext i32 %8412 to i64
  store i64 %8413, i64* %RDX.i1748, align 8
  %8414 = shl nsw i64 %8413, 2
  %8415 = add i64 %8414, %8383
  %8416 = load i32, i32* %EAX.i2800, align 4
  %8417 = add i64 %8327, 49
  store i64 %8417, i64* %3, align 8
  %8418 = inttoptr i64 %8415 to i32*
  store i32 %8416, i32* %8418, align 4
  %8419 = load i64, i64* %RBP.i, align 8
  %8420 = add i64 %8419, -20
  %8421 = load i64, i64* %3, align 8
  %8422 = add i64 %8421, 4
  store i64 %8422, i64* %3, align 8
  %8423 = inttoptr i64 %8420 to i32*
  %8424 = load i32, i32* %8423, align 4
  %8425 = sext i32 %8424 to i64
  store i64 %8425, i64* %RCX.i1519, align 8
  %8426 = shl nsw i64 %8425, 2
  %8427 = add i64 %8419, -80
  %8428 = add i64 %8427, %8426
  %8429 = add i64 %8421, 8
  store i64 %8429, i64* %3, align 8
  %8430 = inttoptr i64 %8428 to i32*
  %8431 = load i32, i32* %8430, align 4
  %8432 = zext i32 %8431 to i64
  store i64 %8432, i64* %RAX.i1161, align 8
  %8433 = add i64 %8419, -28
  %8434 = add i64 %8421, 12
  store i64 %8434, i64* %3, align 8
  %8435 = inttoptr i64 %8433 to i32*
  %8436 = load i32, i32* %8435, align 4
  %8437 = sext i32 %8436 to i64
  store i64 %8437, i64* %RCX.i1519, align 8
  %8438 = shl nsw i64 %8437, 2
  %8439 = add nsw i64 %8438, -80
  %8440 = add i64 %8439, %8419
  %8441 = add i64 %8421, 16
  store i64 %8441, i64* %3, align 8
  %8442 = inttoptr i64 %8440 to i32*
  %8443 = load i32, i32* %8442, align 4
  %8444 = sub i32 %8431, %8443
  %8445 = zext i32 %8444 to i64
  store i64 %8445, i64* %RAX.i1161, align 8
  %8446 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %8447 = add i64 %8446, 13112
  store i64 %8447, i64* %RCX.i1519, align 8
  %8448 = icmp ugt i64 %8446, -13113
  %8449 = zext i1 %8448 to i8
  store i8 %8449, i8* %14, align 1
  %8450 = trunc i64 %8447 to i32
  %8451 = and i32 %8450, 255
  %8452 = tail call i32 @llvm.ctpop.i32(i32 %8451)
  %8453 = trunc i32 %8452 to i8
  %8454 = and i8 %8453, 1
  %8455 = xor i8 %8454, 1
  store i8 %8455, i8* %21, align 1
  %8456 = xor i64 %8446, 16
  %8457 = xor i64 %8456, %8447
  %8458 = lshr i64 %8457, 4
  %8459 = trunc i64 %8458 to i8
  %8460 = and i8 %8459, 1
  store i8 %8460, i8* %26, align 1
  %8461 = icmp eq i64 %8447, 0
  %8462 = zext i1 %8461 to i8
  store i8 %8462, i8* %29, align 1
  %8463 = lshr i64 %8447, 63
  %8464 = trunc i64 %8463 to i8
  store i8 %8464, i8* %32, align 1
  %8465 = lshr i64 %8446, 63
  %8466 = xor i64 %8463, %8465
  %8467 = add nuw nsw i64 %8466, %8463
  %8468 = icmp eq i64 %8467, 2
  %8469 = zext i1 %8468 to i8
  store i8 %8469, i8* %38, align 1
  %8470 = load i64, i64* %RBP.i, align 8
  %8471 = add i64 %8470, -28
  %8472 = add i64 %8421, 35
  store i64 %8472, i64* %3, align 8
  %8473 = inttoptr i64 %8471 to i32*
  %8474 = load i32, i32* %8473, align 4
  %8475 = sext i32 %8474 to i64
  %8476 = shl nsw i64 %8475, 6
  store i64 %8476, i64* %RDX.i1748, align 8
  %8477 = add i64 %8476, %8447
  store i64 %8477, i64* %RCX.i1519, align 8
  %8478 = icmp ult i64 %8477, %8447
  %8479 = icmp ult i64 %8477, %8476
  %8480 = or i1 %8478, %8479
  %8481 = zext i1 %8480 to i8
  store i8 %8481, i8* %14, align 1
  %8482 = trunc i64 %8477 to i32
  %8483 = and i32 %8482, 255
  %8484 = tail call i32 @llvm.ctpop.i32(i32 %8483)
  %8485 = trunc i32 %8484 to i8
  %8486 = and i8 %8485, 1
  %8487 = xor i8 %8486, 1
  store i8 %8487, i8* %21, align 1
  %8488 = xor i64 %8447, %8477
  %8489 = lshr i64 %8488, 4
  %8490 = trunc i64 %8489 to i8
  %8491 = and i8 %8490, 1
  store i8 %8491, i8* %26, align 1
  %8492 = icmp eq i64 %8477, 0
  %8493 = zext i1 %8492 to i8
  store i8 %8493, i8* %29, align 1
  %8494 = lshr i64 %8477, 63
  %8495 = trunc i64 %8494 to i8
  store i8 %8495, i8* %32, align 1
  %8496 = lshr i64 %8475, 57
  %8497 = and i64 %8496, 1
  %8498 = xor i64 %8494, %8463
  %8499 = xor i64 %8494, %8497
  %8500 = add nuw nsw i64 %8498, %8499
  %8501 = icmp eq i64 %8500, 2
  %8502 = zext i1 %8501 to i8
  store i8 %8502, i8* %38, align 1
  %8503 = add i64 %8470, -24
  %8504 = add i64 %8421, 46
  store i64 %8504, i64* %3, align 8
  %8505 = inttoptr i64 %8503 to i32*
  %8506 = load i32, i32* %8505, align 4
  %8507 = sext i32 %8506 to i64
  store i64 %8507, i64* %RDX.i1748, align 8
  %8508 = shl nsw i64 %8507, 2
  %8509 = add i64 %8508, %8477
  %8510 = load i32, i32* %EAX.i2800, align 4
  %8511 = add i64 %8421, 49
  store i64 %8511, i64* %3, align 8
  %8512 = inttoptr i64 %8509 to i32*
  store i32 %8510, i32* %8512, align 4
  %8513 = load i64, i64* %RBP.i, align 8
  %8514 = add i64 %8513, -20
  %8515 = load i64, i64* %3, align 8
  %8516 = add i64 %8515, 3
  store i64 %8516, i64* %3, align 8
  %8517 = inttoptr i64 %8514 to i32*
  %8518 = load i32, i32* %8517, align 4
  %8519 = add i32 %8518, 1
  %8520 = zext i32 %8519 to i64
  store i64 %8520, i64* %RAX.i1161, align 8
  %8521 = icmp eq i32 %8518, -1
  %8522 = icmp eq i32 %8519, 0
  %8523 = or i1 %8521, %8522
  %8524 = zext i1 %8523 to i8
  store i8 %8524, i8* %14, align 1
  %8525 = and i32 %8519, 255
  %8526 = tail call i32 @llvm.ctpop.i32(i32 %8525)
  %8527 = trunc i32 %8526 to i8
  %8528 = and i8 %8527, 1
  %8529 = xor i8 %8528, 1
  store i8 %8529, i8* %21, align 1
  %8530 = xor i32 %8519, %8518
  %8531 = lshr i32 %8530, 4
  %8532 = trunc i32 %8531 to i8
  %8533 = and i8 %8532, 1
  store i8 %8533, i8* %26, align 1
  %8534 = zext i1 %8522 to i8
  store i8 %8534, i8* %29, align 1
  %8535 = lshr i32 %8519, 31
  %8536 = trunc i32 %8535 to i8
  store i8 %8536, i8* %32, align 1
  %8537 = lshr i32 %8518, 31
  %8538 = xor i32 %8535, %8537
  %8539 = add nuw nsw i32 %8538, %8535
  %8540 = icmp eq i32 %8539, 2
  %8541 = zext i1 %8540 to i8
  store i8 %8541, i8* %38, align 1
  %8542 = add i64 %8515, 9
  store i64 %8542, i64* %3, align 8
  store i32 %8519, i32* %8517, align 4
  %8543 = load i64, i64* %3, align 8
  %8544 = add i64 %8543, -128
  store i64 %8544, i64* %3, align 8
  br label %block_.L_40ce88

block_.L_40cf0d:                                  ; preds = %block_.L_40ce88
  %8545 = add i64 %8269, -24
  %8546 = add i64 %8297, 8
  store i64 %8546, i64* %3, align 8
  %8547 = inttoptr i64 %8545 to i32*
  %8548 = load i32, i32* %8547, align 4
  %8549 = add i32 %8548, 1
  %8550 = zext i32 %8549 to i64
  store i64 %8550, i64* %RAX.i1161, align 8
  %8551 = icmp eq i32 %8548, -1
  %8552 = icmp eq i32 %8549, 0
  %8553 = or i1 %8551, %8552
  %8554 = zext i1 %8553 to i8
  store i8 %8554, i8* %14, align 1
  %8555 = and i32 %8549, 255
  %8556 = tail call i32 @llvm.ctpop.i32(i32 %8555)
  %8557 = trunc i32 %8556 to i8
  %8558 = and i8 %8557, 1
  %8559 = xor i8 %8558, 1
  store i8 %8559, i8* %21, align 1
  %8560 = xor i32 %8549, %8548
  %8561 = lshr i32 %8560, 4
  %8562 = trunc i32 %8561 to i8
  %8563 = and i8 %8562, 1
  store i8 %8563, i8* %26, align 1
  %8564 = zext i1 %8552 to i8
  store i8 %8564, i8* %29, align 1
  %8565 = lshr i32 %8549, 31
  %8566 = trunc i32 %8565 to i8
  store i8 %8566, i8* %32, align 1
  %8567 = lshr i32 %8548, 31
  %8568 = xor i32 %8565, %8567
  %8569 = add nuw nsw i32 %8568, %8565
  %8570 = icmp eq i32 %8569, 2
  %8571 = zext i1 %8570 to i8
  store i8 %8571, i8* %38, align 1
  %8572 = add i64 %8297, 14
  store i64 %8572, i64* %3, align 8
  store i32 %8549, i32* %8547, align 4
  %8573 = load i64, i64* %3, align 8
  %8574 = add i64 %8573, -279
  store i64 %8574, i64* %3, align 8
  br label %block_.L_40ce04

block_.L_40cf27:                                  ; preds = %block_.L_40cf27.preheader, %block_.L_40d1da
  %8575 = phi i64 [ %9827, %block_.L_40d1da ], [ %.pre203, %block_.L_40cf27.preheader ]
  %8576 = load i64, i64* %RBP.i, align 8
  %8577 = add i64 %8576, -20
  %8578 = add i64 %8575, 4
  store i64 %8578, i64* %3, align 8
  %8579 = inttoptr i64 %8577 to i32*
  %8580 = load i32, i32* %8579, align 4
  %8581 = add i32 %8580, -4
  %8582 = icmp ult i32 %8580, 4
  %8583 = zext i1 %8582 to i8
  store i8 %8583, i8* %14, align 1
  %8584 = and i32 %8581, 255
  %8585 = tail call i32 @llvm.ctpop.i32(i32 %8584)
  %8586 = trunc i32 %8585 to i8
  %8587 = and i8 %8586, 1
  %8588 = xor i8 %8587, 1
  store i8 %8588, i8* %21, align 1
  %8589 = xor i32 %8581, %8580
  %8590 = lshr i32 %8589, 4
  %8591 = trunc i32 %8590 to i8
  %8592 = and i8 %8591, 1
  store i8 %8592, i8* %26, align 1
  %8593 = icmp eq i32 %8581, 0
  %8594 = zext i1 %8593 to i8
  store i8 %8594, i8* %29, align 1
  %8595 = lshr i32 %8581, 31
  %8596 = trunc i32 %8595 to i8
  store i8 %8596, i8* %32, align 1
  %8597 = lshr i32 %8580, 31
  %8598 = xor i32 %8595, %8597
  %8599 = add nuw nsw i32 %8598, %8597
  %8600 = icmp eq i32 %8599, 2
  %8601 = zext i1 %8600 to i8
  store i8 %8601, i8* %38, align 1
  %8602 = icmp ne i8 %8596, 0
  %8603 = xor i1 %8602, %8600
  %.v229 = select i1 %8603, i64 10, i64 710
  %8604 = add i64 %8575, %.v229
  %8605 = add i64 %8576, -24
  %8606 = add i64 %8604, 7
  store i64 %8606, i64* %3, align 8
  %8607 = inttoptr i64 %8605 to i32*
  store i32 0, i32* %8607, align 4
  br i1 %8603, label %block_.L_40cf38.preheader, label %block_.L_40d1f4.preheader

block_.L_40cf38.preheader:                        ; preds = %block_.L_40cf27
  %.pre195 = load i64, i64* %3, align 8
  br label %block_.L_40cf38

block_.L_40d1f4.preheader:                        ; preds = %block_.L_40cf27
  %SI.i61 = bitcast %union.anon* %65 to i16*
  %.pre193 = load i64, i64* %3, align 8
  br label %block_.L_40d1f4

block_.L_40cf38:                                  ; preds = %block_.L_40cf38.preheader, %block_40cf42
  %8608 = phi i64 [ %.pre195, %block_.L_40cf38.preheader ], [ %8745, %block_40cf42 ]
  %8609 = load i64, i64* %RBP.i, align 8
  %8610 = add i64 %8609, -24
  %8611 = add i64 %8608, 4
  store i64 %8611, i64* %3, align 8
  %8612 = inttoptr i64 %8610 to i32*
  %8613 = load i32, i32* %8612, align 4
  %8614 = add i32 %8613, -4
  %8615 = icmp ult i32 %8613, 4
  %8616 = zext i1 %8615 to i8
  store i8 %8616, i8* %14, align 1
  %8617 = and i32 %8614, 255
  %8618 = tail call i32 @llvm.ctpop.i32(i32 %8617)
  %8619 = trunc i32 %8618 to i8
  %8620 = and i8 %8619, 1
  %8621 = xor i8 %8620, 1
  store i8 %8621, i8* %21, align 1
  %8622 = xor i32 %8614, %8613
  %8623 = lshr i32 %8622, 4
  %8624 = trunc i32 %8623 to i8
  %8625 = and i8 %8624, 1
  store i8 %8625, i8* %26, align 1
  %8626 = icmp eq i32 %8614, 0
  %8627 = zext i1 %8626 to i8
  store i8 %8627, i8* %29, align 1
  %8628 = lshr i32 %8614, 31
  %8629 = trunc i32 %8628 to i8
  store i8 %8629, i8* %32, align 1
  %8630 = lshr i32 %8613, 31
  %8631 = xor i32 %8628, %8630
  %8632 = add nuw nsw i32 %8631, %8630
  %8633 = icmp eq i32 %8632, 2
  %8634 = zext i1 %8633 to i8
  store i8 %8634, i8* %38, align 1
  %8635 = icmp ne i8 %8629, 0
  %8636 = xor i1 %8635, %8633
  %.v238 = select i1 %8636, i64 10, i64 64
  %8637 = add i64 %8608, %.v238
  store i64 %8637, i64* %3, align 8
  br i1 %8636, label %block_40cf42, label %block_.L_40cf78

block_40cf42:                                     ; preds = %block_.L_40cf38
  %8638 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %8639 = add i64 %8638, 13112
  store i64 %8639, i64* %RAX.i1161, align 8
  %8640 = icmp ugt i64 %8638, -13113
  %8641 = zext i1 %8640 to i8
  store i8 %8641, i8* %14, align 1
  %8642 = trunc i64 %8639 to i32
  %8643 = and i32 %8642, 255
  %8644 = tail call i32 @llvm.ctpop.i32(i32 %8643)
  %8645 = trunc i32 %8644 to i8
  %8646 = and i8 %8645, 1
  %8647 = xor i8 %8646, 1
  store i8 %8647, i8* %21, align 1
  %8648 = xor i64 %8638, 16
  %8649 = xor i64 %8648, %8639
  %8650 = lshr i64 %8649, 4
  %8651 = trunc i64 %8650 to i8
  %8652 = and i8 %8651, 1
  store i8 %8652, i8* %26, align 1
  %8653 = icmp eq i64 %8639, 0
  %8654 = zext i1 %8653 to i8
  store i8 %8654, i8* %29, align 1
  %8655 = lshr i64 %8639, 63
  %8656 = trunc i64 %8655 to i8
  store i8 %8656, i8* %32, align 1
  %8657 = lshr i64 %8638, 63
  %8658 = xor i64 %8655, %8657
  %8659 = add nuw nsw i64 %8658, %8655
  %8660 = icmp eq i64 %8659, 2
  %8661 = zext i1 %8660 to i8
  store i8 %8661, i8* %38, align 1
  %8662 = add i64 %8609, -20
  %8663 = add i64 %8637, 18
  store i64 %8663, i64* %3, align 8
  %8664 = inttoptr i64 %8662 to i32*
  %8665 = load i32, i32* %8664, align 4
  %8666 = sext i32 %8665 to i64
  %8667 = shl nsw i64 %8666, 6
  store i64 %8667, i64* %RCX.i1519, align 8
  %8668 = add i64 %8667, %8639
  store i64 %8668, i64* %RAX.i1161, align 8
  %8669 = icmp ult i64 %8668, %8639
  %8670 = icmp ult i64 %8668, %8667
  %8671 = or i1 %8669, %8670
  %8672 = zext i1 %8671 to i8
  store i8 %8672, i8* %14, align 1
  %8673 = trunc i64 %8668 to i32
  %8674 = and i32 %8673, 255
  %8675 = tail call i32 @llvm.ctpop.i32(i32 %8674)
  %8676 = trunc i32 %8675 to i8
  %8677 = and i8 %8676, 1
  %8678 = xor i8 %8677, 1
  store i8 %8678, i8* %21, align 1
  %8679 = xor i64 %8639, %8668
  %8680 = lshr i64 %8679, 4
  %8681 = trunc i64 %8680 to i8
  %8682 = and i8 %8681, 1
  store i8 %8682, i8* %26, align 1
  %8683 = icmp eq i64 %8668, 0
  %8684 = zext i1 %8683 to i8
  store i8 %8684, i8* %29, align 1
  %8685 = lshr i64 %8668, 63
  %8686 = trunc i64 %8685 to i8
  store i8 %8686, i8* %32, align 1
  %8687 = lshr i64 %8666, 57
  %8688 = and i64 %8687, 1
  %8689 = xor i64 %8685, %8655
  %8690 = xor i64 %8685, %8688
  %8691 = add nuw nsw i64 %8689, %8690
  %8692 = icmp eq i64 %8691, 2
  %8693 = zext i1 %8692 to i8
  store i8 %8693, i8* %38, align 1
  %8694 = load i64, i64* %RBP.i, align 8
  %8695 = add i64 %8694, -24
  %8696 = add i64 %8637, 29
  store i64 %8696, i64* %3, align 8
  %8697 = inttoptr i64 %8695 to i32*
  %8698 = load i32, i32* %8697, align 4
  %8699 = sext i32 %8698 to i64
  store i64 %8699, i64* %RCX.i1519, align 8
  %8700 = shl nsw i64 %8699, 2
  %8701 = add i64 %8700, %8668
  %8702 = add i64 %8637, 32
  store i64 %8702, i64* %3, align 8
  %8703 = inttoptr i64 %8701 to i32*
  %8704 = load i32, i32* %8703, align 4
  %8705 = zext i32 %8704 to i64
  store i64 %8705, i64* %RDX.i1748, align 8
  %8706 = add i64 %8637, 36
  store i64 %8706, i64* %3, align 8
  %8707 = load i32, i32* %8697, align 4
  %8708 = sext i32 %8707 to i64
  store i64 %8708, i64* %RAX.i1161, align 8
  %8709 = shl nsw i64 %8708, 2
  %8710 = add i64 %8694, -64
  %8711 = add i64 %8710, %8709
  %8712 = add i64 %8637, 40
  store i64 %8712, i64* %3, align 8
  %8713 = inttoptr i64 %8711 to i32*
  store i32 %8704, i32* %8713, align 4
  %8714 = load i64, i64* %RBP.i, align 8
  %8715 = add i64 %8714, -24
  %8716 = load i64, i64* %3, align 8
  %8717 = add i64 %8716, 3
  store i64 %8717, i64* %3, align 8
  %8718 = inttoptr i64 %8715 to i32*
  %8719 = load i32, i32* %8718, align 4
  %8720 = add i32 %8719, 1
  %8721 = zext i32 %8720 to i64
  store i64 %8721, i64* %RAX.i1161, align 8
  %8722 = icmp eq i32 %8719, -1
  %8723 = icmp eq i32 %8720, 0
  %8724 = or i1 %8722, %8723
  %8725 = zext i1 %8724 to i8
  store i8 %8725, i8* %14, align 1
  %8726 = and i32 %8720, 255
  %8727 = tail call i32 @llvm.ctpop.i32(i32 %8726)
  %8728 = trunc i32 %8727 to i8
  %8729 = and i8 %8728, 1
  %8730 = xor i8 %8729, 1
  store i8 %8730, i8* %21, align 1
  %8731 = xor i32 %8720, %8719
  %8732 = lshr i32 %8731, 4
  %8733 = trunc i32 %8732 to i8
  %8734 = and i8 %8733, 1
  store i8 %8734, i8* %26, align 1
  %8735 = zext i1 %8723 to i8
  store i8 %8735, i8* %29, align 1
  %8736 = lshr i32 %8720, 31
  %8737 = trunc i32 %8736 to i8
  store i8 %8737, i8* %32, align 1
  %8738 = lshr i32 %8719, 31
  %8739 = xor i32 %8736, %8738
  %8740 = add nuw nsw i32 %8739, %8736
  %8741 = icmp eq i32 %8740, 2
  %8742 = zext i1 %8741 to i8
  store i8 %8742, i8* %38, align 1
  %8743 = add i64 %8716, 9
  store i64 %8743, i64* %3, align 8
  store i32 %8720, i32* %8718, align 4
  %8744 = load i64, i64* %3, align 8
  %8745 = add i64 %8744, -59
  store i64 %8745, i64* %3, align 8
  br label %block_.L_40cf38

block_.L_40cf78:                                  ; preds = %block_.L_40cf38
  %8746 = add i64 %8609, -64
  %8747 = add i64 %8637, 3
  store i64 %8747, i64* %3, align 8
  %8748 = inttoptr i64 %8746 to i32*
  %8749 = load i32, i32* %8748, align 4
  %8750 = zext i32 %8749 to i64
  store i64 %8750, i64* %RAX.i1161, align 8
  %8751 = add i64 %8609, -56
  %8752 = add i64 %8637, 6
  store i64 %8752, i64* %3, align 8
  %8753 = inttoptr i64 %8751 to i32*
  %8754 = load i32, i32* %8753, align 4
  %8755 = add i32 %8754, %8749
  %8756 = zext i32 %8755 to i64
  store i64 %8756, i64* %RAX.i1161, align 8
  %8757 = icmp ult i32 %8755, %8749
  %8758 = icmp ult i32 %8755, %8754
  %8759 = or i1 %8757, %8758
  %8760 = zext i1 %8759 to i8
  store i8 %8760, i8* %14, align 1
  %8761 = and i32 %8755, 255
  %8762 = tail call i32 @llvm.ctpop.i32(i32 %8761)
  %8763 = trunc i32 %8762 to i8
  %8764 = and i8 %8763, 1
  %8765 = xor i8 %8764, 1
  store i8 %8765, i8* %21, align 1
  %8766 = xor i32 %8754, %8749
  %8767 = xor i32 %8766, %8755
  %8768 = lshr i32 %8767, 4
  %8769 = trunc i32 %8768 to i8
  %8770 = and i8 %8769, 1
  store i8 %8770, i8* %26, align 1
  %8771 = icmp eq i32 %8755, 0
  %8772 = zext i1 %8771 to i8
  store i8 %8772, i8* %29, align 1
  %8773 = lshr i32 %8755, 31
  %8774 = trunc i32 %8773 to i8
  store i8 %8774, i8* %32, align 1
  %8775 = lshr i32 %8749, 31
  %8776 = lshr i32 %8754, 31
  %8777 = xor i32 %8773, %8775
  %8778 = xor i32 %8773, %8776
  %8779 = add nuw nsw i32 %8777, %8778
  %8780 = icmp eq i32 %8779, 2
  %8781 = zext i1 %8780 to i8
  store i8 %8781, i8* %38, align 1
  %8782 = add i64 %8609, -80
  %8783 = add i64 %8637, 9
  store i64 %8783, i64* %3, align 8
  %8784 = inttoptr i64 %8782 to i32*
  store i32 %8755, i32* %8784, align 4
  %8785 = load i64, i64* %RBP.i, align 8
  %8786 = add i64 %8785, -64
  %8787 = load i64, i64* %3, align 8
  %8788 = add i64 %8787, 3
  store i64 %8788, i64* %3, align 8
  %8789 = inttoptr i64 %8786 to i32*
  %8790 = load i32, i32* %8789, align 4
  %8791 = zext i32 %8790 to i64
  store i64 %8791, i64* %RAX.i1161, align 8
  %8792 = add i64 %8785, -56
  %8793 = add i64 %8787, 6
  store i64 %8793, i64* %3, align 8
  %8794 = inttoptr i64 %8792 to i32*
  %8795 = load i32, i32* %8794, align 4
  %8796 = sub i32 %8790, %8795
  %8797 = zext i32 %8796 to i64
  store i64 %8797, i64* %RAX.i1161, align 8
  %8798 = icmp ult i32 %8790, %8795
  %8799 = zext i1 %8798 to i8
  store i8 %8799, i8* %14, align 1
  %8800 = and i32 %8796, 255
  %8801 = tail call i32 @llvm.ctpop.i32(i32 %8800)
  %8802 = trunc i32 %8801 to i8
  %8803 = and i8 %8802, 1
  %8804 = xor i8 %8803, 1
  store i8 %8804, i8* %21, align 1
  %8805 = xor i32 %8795, %8790
  %8806 = xor i32 %8805, %8796
  %8807 = lshr i32 %8806, 4
  %8808 = trunc i32 %8807 to i8
  %8809 = and i8 %8808, 1
  store i8 %8809, i8* %26, align 1
  %8810 = icmp eq i32 %8796, 0
  %8811 = zext i1 %8810 to i8
  store i8 %8811, i8* %29, align 1
  %8812 = lshr i32 %8796, 31
  %8813 = trunc i32 %8812 to i8
  store i8 %8813, i8* %32, align 1
  %8814 = lshr i32 %8790, 31
  %8815 = lshr i32 %8795, 31
  %8816 = xor i32 %8815, %8814
  %8817 = xor i32 %8812, %8814
  %8818 = add nuw nsw i32 %8817, %8816
  %8819 = icmp eq i32 %8818, 2
  %8820 = zext i1 %8819 to i8
  store i8 %8820, i8* %38, align 1
  %8821 = add i64 %8785, -76
  %8822 = add i64 %8787, 9
  store i64 %8822, i64* %3, align 8
  %8823 = inttoptr i64 %8821 to i32*
  store i32 %8796, i32* %8823, align 4
  %8824 = load i64, i64* %RBP.i, align 8
  %8825 = add i64 %8824, -60
  %8826 = load i64, i64* %3, align 8
  %8827 = add i64 %8826, 3
  store i64 %8827, i64* %3, align 8
  %8828 = inttoptr i64 %8825 to i32*
  %8829 = load i32, i32* %8828, align 4
  %8830 = zext i32 %8829 to i64
  %8831 = shl nuw i64 %8830, 32
  %8832 = ashr i64 %8831, 33
  %8833 = trunc i32 %8829 to i8
  %8834 = and i8 %8833, 1
  %8835 = trunc i64 %8832 to i32
  %8836 = and i64 %8832, 4294967295
  store i64 %8836, i64* %RAX.i1161, align 8
  store i8 %8834, i8* %14, align 1
  %8837 = and i32 %8835, 255
  %8838 = tail call i32 @llvm.ctpop.i32(i32 %8837)
  %8839 = trunc i32 %8838 to i8
  %8840 = and i8 %8839, 1
  %8841 = xor i8 %8840, 1
  store i8 %8841, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %8842 = icmp eq i32 %8835, 0
  %8843 = zext i1 %8842 to i8
  store i8 %8843, i8* %29, align 1
  %8844 = lshr i64 %8832, 31
  %8845 = trunc i64 %8844 to i8
  %8846 = and i8 %8845, 1
  store i8 %8846, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %8847 = add i64 %8824, -52
  %8848 = add i64 %8826, 8
  store i64 %8848, i64* %3, align 8
  %8849 = trunc i64 %8832 to i32
  %8850 = inttoptr i64 %8847 to i32*
  %8851 = load i32, i32* %8850, align 4
  %8852 = sub i32 %8849, %8851
  %8853 = zext i32 %8852 to i64
  store i64 %8853, i64* %RAX.i1161, align 8
  %8854 = icmp ult i32 %8849, %8851
  %8855 = zext i1 %8854 to i8
  store i8 %8855, i8* %14, align 1
  %8856 = and i32 %8852, 255
  %8857 = tail call i32 @llvm.ctpop.i32(i32 %8856)
  %8858 = trunc i32 %8857 to i8
  %8859 = and i8 %8858, 1
  %8860 = xor i8 %8859, 1
  store i8 %8860, i8* %21, align 1
  %8861 = xor i32 %8851, %8849
  %8862 = xor i32 %8861, %8852
  %8863 = lshr i32 %8862, 4
  %8864 = trunc i32 %8863 to i8
  %8865 = and i8 %8864, 1
  store i8 %8865, i8* %26, align 1
  %8866 = icmp eq i32 %8852, 0
  %8867 = zext i1 %8866 to i8
  store i8 %8867, i8* %29, align 1
  %8868 = lshr i32 %8852, 31
  %8869 = trunc i32 %8868 to i8
  store i8 %8869, i8* %32, align 1
  %8870 = lshr i64 %8832, 31
  %8871 = trunc i64 %8870 to i32
  %8872 = and i32 %8871, 1
  %8873 = lshr i32 %8851, 31
  %8874 = xor i32 %8873, %8872
  %8875 = xor i32 %8868, %8872
  %8876 = add nuw nsw i32 %8875, %8874
  %8877 = icmp eq i32 %8876, 2
  %8878 = zext i1 %8877 to i8
  store i8 %8878, i8* %38, align 1
  %8879 = add i64 %8824, -72
  %8880 = add i64 %8826, 11
  store i64 %8880, i64* %3, align 8
  %8881 = inttoptr i64 %8879 to i32*
  store i32 %8852, i32* %8881, align 4
  %8882 = load i64, i64* %RBP.i, align 8
  %8883 = add i64 %8882, -60
  %8884 = load i64, i64* %3, align 8
  %8885 = add i64 %8884, 3
  store i64 %8885, i64* %3, align 8
  %8886 = inttoptr i64 %8883 to i32*
  %8887 = load i32, i32* %8886, align 4
  %8888 = zext i32 %8887 to i64
  store i64 %8888, i64* %RAX.i1161, align 8
  %8889 = add i64 %8882, -52
  %8890 = add i64 %8884, 6
  store i64 %8890, i64* %3, align 8
  %8891 = inttoptr i64 %8889 to i32*
  %8892 = load i32, i32* %8891, align 4
  %8893 = zext i32 %8892 to i64
  %8894 = shl nuw i64 %8893, 32
  %8895 = ashr i64 %8894, 33
  %8896 = and i64 %8895, 4294967295
  store i64 %8896, i64* %RCX.i1519, align 8
  %8897 = trunc i64 %8895 to i32
  %8898 = add i32 %8897, %8887
  %8899 = zext i32 %8898 to i64
  store i64 %8899, i64* %RAX.i1161, align 8
  %8900 = icmp ult i32 %8898, %8887
  %8901 = icmp ult i32 %8898, %8897
  %8902 = or i1 %8900, %8901
  %8903 = zext i1 %8902 to i8
  store i8 %8903, i8* %14, align 1
  %8904 = and i32 %8898, 255
  %8905 = tail call i32 @llvm.ctpop.i32(i32 %8904)
  %8906 = trunc i32 %8905 to i8
  %8907 = and i8 %8906, 1
  %8908 = xor i8 %8907, 1
  store i8 %8908, i8* %21, align 1
  %8909 = xor i64 %8895, %8888
  %8910 = trunc i64 %8909 to i32
  %8911 = xor i32 %8910, %8898
  %8912 = lshr i32 %8911, 4
  %8913 = trunc i32 %8912 to i8
  %8914 = and i8 %8913, 1
  store i8 %8914, i8* %26, align 1
  %8915 = icmp eq i32 %8898, 0
  %8916 = zext i1 %8915 to i8
  store i8 %8916, i8* %29, align 1
  %8917 = lshr i32 %8898, 31
  %8918 = trunc i32 %8917 to i8
  store i8 %8918, i8* %32, align 1
  %8919 = lshr i32 %8887, 31
  %8920 = lshr i64 %8895, 31
  %8921 = trunc i64 %8920 to i32
  %8922 = and i32 %8921, 1
  %8923 = xor i32 %8917, %8919
  %8924 = xor i32 %8917, %8922
  %8925 = add nuw nsw i32 %8923, %8924
  %8926 = icmp eq i32 %8925, 2
  %8927 = zext i1 %8926 to i8
  store i8 %8927, i8* %38, align 1
  %8928 = add i64 %8882, -68
  %8929 = add i64 %8884, 13
  store i64 %8929, i64* %3, align 8
  %8930 = inttoptr i64 %8928 to i32*
  store i32 %8898, i32* %8930, align 4
  %8931 = load i64, i64* %RBP.i, align 8
  %8932 = add i64 %8931, -24
  %8933 = load i64, i64* %3, align 8
  %8934 = add i64 %8933, 7
  store i64 %8934, i64* %3, align 8
  %8935 = inttoptr i64 %8932 to i32*
  store i32 0, i32* %8935, align 4
  %.pre196 = load i64, i64* %3, align 8
  br label %block_.L_40cfab

block_.L_40cfab:                                  ; preds = %block_.L_40d1a5, %block_.L_40cf78
  %8936 = phi i64 [ %9797, %block_.L_40d1a5 ], [ %.pre196, %block_.L_40cf78 ]
  %8937 = load i64, i64* %RBP.i, align 8
  %8938 = add i64 %8937, -24
  %8939 = add i64 %8936, 4
  store i64 %8939, i64* %3, align 8
  %8940 = inttoptr i64 %8938 to i32*
  %8941 = load i32, i32* %8940, align 4
  %8942 = add i32 %8941, -2
  %8943 = icmp ult i32 %8941, 2
  %8944 = zext i1 %8943 to i8
  store i8 %8944, i8* %14, align 1
  %8945 = and i32 %8942, 255
  %8946 = tail call i32 @llvm.ctpop.i32(i32 %8945)
  %8947 = trunc i32 %8946 to i8
  %8948 = and i8 %8947, 1
  %8949 = xor i8 %8948, 1
  store i8 %8949, i8* %21, align 1
  %8950 = xor i32 %8942, %8941
  %8951 = lshr i32 %8950, 4
  %8952 = trunc i32 %8951 to i8
  %8953 = and i8 %8952, 1
  store i8 %8953, i8* %26, align 1
  %8954 = icmp eq i32 %8942, 0
  %8955 = zext i1 %8954 to i8
  store i8 %8955, i8* %29, align 1
  %8956 = lshr i32 %8942, 31
  %8957 = trunc i32 %8956 to i8
  store i8 %8957, i8* %32, align 1
  %8958 = lshr i32 %8941, 31
  %8959 = xor i32 %8956, %8958
  %8960 = add nuw nsw i32 %8959, %8958
  %8961 = icmp eq i32 %8960, 2
  %8962 = zext i1 %8961 to i8
  store i8 %8962, i8* %38, align 1
  %8963 = icmp ne i8 %8957, 0
  %8964 = xor i1 %8963, %8961
  %.v231 = select i1 %8964, i64 10, i64 559
  %8965 = add i64 %8936, %.v231
  store i64 %8965, i64* %3, align 8
  br i1 %8964, label %block_40cfb5, label %block_.L_40d1da

block_40cfb5:                                     ; preds = %block_.L_40cfab
  store i64 0, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  store i64 3, i64* %RCX.i1519, align 8
  %8966 = add i64 %8965, 10
  store i64 %8966, i64* %3, align 8
  %8967 = load i32, i32* %8940, align 4
  %8968 = sub i32 3, %8967
  %8969 = zext i32 %8968 to i64
  store i64 %8969, i64* %RCX.i1519, align 8
  %8970 = icmp ugt i32 %8967, 3
  %8971 = zext i1 %8970 to i8
  store i8 %8971, i8* %14, align 1
  %8972 = and i32 %8968, 255
  %8973 = tail call i32 @llvm.ctpop.i32(i32 %8972)
  %8974 = trunc i32 %8973 to i8
  %8975 = and i8 %8974, 1
  %8976 = xor i8 %8975, 1
  store i8 %8976, i8* %21, align 1
  %8977 = xor i32 %8968, %8967
  %8978 = lshr i32 %8977, 4
  %8979 = trunc i32 %8978 to i8
  %8980 = and i8 %8979, 1
  store i8 %8980, i8* %26, align 1
  %8981 = icmp eq i32 %8968, 0
  %8982 = zext i1 %8981 to i8
  store i8 %8982, i8* %29, align 1
  %8983 = lshr i32 %8968, 31
  %8984 = trunc i32 %8983 to i8
  store i8 %8984, i8* %32, align 1
  %8985 = lshr i32 %8967, 31
  %8986 = add nuw nsw i32 %8983, %8985
  %8987 = icmp eq i32 %8986, 2
  %8988 = zext i1 %8987 to i8
  store i8 %8988, i8* %38, align 1
  %8989 = add i64 %8937, -32
  %8990 = add i64 %8965, 13
  store i64 %8990, i64* %3, align 8
  %8991 = inttoptr i64 %8989 to i32*
  store i32 %8968, i32* %8991, align 4
  %8992 = load i64, i64* %3, align 8
  %8993 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %8993, i64* %RDX.i1748, align 8
  %8994 = add i64 %8993, 72684
  %8995 = add i64 %8992, 14
  store i64 %8995, i64* %3, align 8
  %8996 = inttoptr i64 %8994 to i32*
  %8997 = load i32, i32* %8996, align 4
  %8998 = zext i32 %8997 to i64
  store i64 %8998, i64* %RCX.i1519, align 8
  %8999 = load i64, i64* %RBP.i, align 8
  %9000 = add i64 %8999, -24
  %9001 = add i64 %8992, 18
  store i64 %9001, i64* %3, align 8
  %9002 = inttoptr i64 %9000 to i32*
  %9003 = load i32, i32* %9002, align 4
  %9004 = sext i32 %9003 to i64
  store i64 %9004, i64* %RDX.i1748, align 8
  %9005 = shl nsw i64 %9004, 2
  %9006 = add i64 %8999, -80
  %9007 = add i64 %9006, %9005
  %9008 = add i64 %8992, 22
  store i64 %9008, i64* %3, align 8
  %9009 = inttoptr i64 %9007 to i32*
  %9010 = load i32, i32* %9009, align 4
  %9011 = zext i32 %9010 to i64
  store i64 %9011, i64* %RSI.i2777, align 8
  %9012 = add i64 %8999, -32
  %9013 = add i64 %8992, 26
  store i64 %9013, i64* %3, align 8
  %9014 = inttoptr i64 %9012 to i32*
  %9015 = load i32, i32* %9014, align 4
  %9016 = sext i32 %9015 to i64
  store i64 %9016, i64* %RDX.i1748, align 8
  %9017 = shl nsw i64 %9016, 2
  %9018 = add nsw i64 %9017, -80
  %9019 = add i64 %9018, %8999
  %9020 = add i64 %8992, 30
  store i64 %9020, i64* %3, align 8
  %9021 = inttoptr i64 %9019 to i32*
  %9022 = load i32, i32* %9021, align 4
  %9023 = add i32 %9022, %9010
  %9024 = add i32 %9023, 32
  %9025 = zext i32 %9024 to i64
  %9026 = shl nuw i64 %9025, 32
  %9027 = ashr i64 %9026, 37
  %9028 = lshr i64 %9027, 1
  %9029 = and i64 %9028, 4294967295
  store i64 %9029, i64* %RSI.i2777, align 8
  %9030 = load i32, i32* %EAX.i2800, align 4
  %9031 = trunc i64 %9028 to i32
  %9032 = sub i32 %9030, %9031
  %9033 = icmp ult i32 %9030, %9031
  %9034 = zext i1 %9033 to i8
  store i8 %9034, i8* %14, align 1
  %9035 = and i32 %9032, 255
  %9036 = tail call i32 @llvm.ctpop.i32(i32 %9035)
  %9037 = trunc i32 %9036 to i8
  %9038 = and i8 %9037, 1
  %9039 = xor i8 %9038, 1
  store i8 %9039, i8* %21, align 1
  %9040 = xor i32 %9031, %9030
  %9041 = xor i32 %9040, %9032
  %9042 = lshr i32 %9041, 4
  %9043 = trunc i32 %9042 to i8
  %9044 = and i8 %9043, 1
  store i8 %9044, i8* %26, align 1
  %9045 = icmp eq i32 %9032, 0
  %9046 = zext i1 %9045 to i8
  store i8 %9046, i8* %29, align 1
  %9047 = lshr i32 %9032, 31
  %9048 = trunc i32 %9047 to i8
  store i8 %9048, i8* %32, align 1
  %9049 = lshr i32 %9030, 31
  %9050 = lshr i64 %9027, 32
  %9051 = trunc i64 %9050 to i32
  %9052 = and i32 %9051, 1
  %9053 = xor i32 %9052, %9049
  %9054 = xor i32 %9047, %9049
  %9055 = add nuw nsw i32 %9054, %9053
  %9056 = icmp eq i32 %9055, 2
  %9057 = zext i1 %9056 to i8
  store i8 %9057, i8* %38, align 1
  %9058 = load i64, i64* %RBP.i, align 8
  %9059 = add i64 %9058, -384
  %9060 = load i32, i32* %ECX.i2881, align 4
  %9061 = add i64 %8992, 44
  store i64 %9061, i64* %3, align 8
  %9062 = inttoptr i64 %9059 to i32*
  store i32 %9060, i32* %9062, align 4
  %9063 = load i64, i64* %3, align 8
  %9064 = load i8, i8* %29, align 1
  %9065 = icmp ne i8 %9064, 0
  %9066 = load i8, i8* %32, align 1
  %9067 = icmp ne i8 %9066, 0
  %9068 = load i8, i8* %38, align 1
  %9069 = icmp ne i8 %9068, 0
  %9070 = xor i1 %9067, %9069
  %9071 = or i1 %9065, %9070
  %.v289 = select i1 %9071, i64 19, i64 6
  %9072 = add i64 %9063, %.v289
  store i64 %9072, i64* %3, align 8
  br i1 %9071, label %block_.L_40d001, label %block_40cff4

block_40cff4:                                     ; preds = %block_40cfb5
  store i64 0, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9073 = load i64, i64* %RBP.i, align 8
  %9074 = add i64 %9073, -388
  %9075 = add i64 %9072, 8
  store i64 %9075, i64* %3, align 8
  %9076 = inttoptr i64 %9074 to i32*
  store i32 0, i32* %9076, align 4
  %9077 = load i64, i64* %3, align 8
  %9078 = add i64 %9077, 33
  store i64 %9078, i64* %3, align 8
  br label %block_.L_40d01d

block_.L_40d001:                                  ; preds = %block_40cfb5
  %9079 = load i64, i64* %RBP.i, align 8
  %9080 = add i64 %9079, -24
  %9081 = add i64 %9072, 4
  store i64 %9081, i64* %3, align 8
  %9082 = inttoptr i64 %9080 to i32*
  %9083 = load i32, i32* %9082, align 4
  %9084 = sext i32 %9083 to i64
  store i64 %9084, i64* %RAX.i1161, align 8
  %9085 = shl nsw i64 %9084, 2
  %9086 = add i64 %9079, -80
  %9087 = add i64 %9086, %9085
  %9088 = add i64 %9072, 8
  store i64 %9088, i64* %3, align 8
  %9089 = inttoptr i64 %9087 to i32*
  %9090 = load i32, i32* %9089, align 4
  %9091 = zext i32 %9090 to i64
  store i64 %9091, i64* %RCX.i1519, align 8
  %9092 = add i64 %9079, -32
  %9093 = add i64 %9072, 12
  store i64 %9093, i64* %3, align 8
  %9094 = inttoptr i64 %9092 to i32*
  %9095 = load i32, i32* %9094, align 4
  %9096 = sext i32 %9095 to i64
  store i64 %9096, i64* %RAX.i1161, align 8
  %9097 = shl nsw i64 %9096, 2
  %9098 = add nsw i64 %9097, -80
  %9099 = add i64 %9098, %9079
  %9100 = add i64 %9072, 16
  store i64 %9100, i64* %3, align 8
  %9101 = inttoptr i64 %9099 to i32*
  %9102 = load i32, i32* %9101, align 4
  %9103 = add i32 %9102, %9090
  %9104 = add i32 %9103, 32
  %9105 = zext i32 %9104 to i64
  %9106 = shl nuw i64 %9105, 32
  %9107 = ashr i64 %9106, 37
  %9108 = lshr i64 %9107, 1
  %9109 = trunc i64 %9107 to i8
  %9110 = and i8 %9109, 1
  %9111 = trunc i64 %9108 to i32
  %9112 = and i64 %9108, 4294967295
  store i64 %9112, i64* %RCX.i1519, align 8
  store i8 %9110, i8* %14, align 1
  %9113 = and i32 %9111, 255
  %9114 = tail call i32 @llvm.ctpop.i32(i32 %9113)
  %9115 = trunc i32 %9114 to i8
  %9116 = and i8 %9115, 1
  %9117 = xor i8 %9116, 1
  store i8 %9117, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %9118 = icmp eq i32 %9111, 0
  %9119 = zext i1 %9118 to i8
  store i8 %9119, i8* %29, align 1
  %9120 = lshr i64 %9107, 32
  %9121 = trunc i64 %9120 to i8
  %9122 = and i8 %9121, 1
  store i8 %9122, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %9123 = load i64, i64* %RBP.i, align 8
  %9124 = add i64 %9123, -388
  %9125 = trunc i64 %9108 to i32
  %9126 = add i64 %9072, 28
  store i64 %9126, i64* %3, align 8
  %9127 = inttoptr i64 %9124 to i32*
  store i32 %9125, i32* %9127, align 4
  %.pre197 = load i64, i64* %3, align 8
  br label %block_.L_40d01d

block_.L_40d01d:                                  ; preds = %block_.L_40d001, %block_40cff4
  %9128 = phi i64 [ %.pre197, %block_.L_40d001 ], [ %9078, %block_40cff4 ]
  %9129 = load i64, i64* %RBP.i, align 8
  %9130 = add i64 %9129, -388
  %9131 = add i64 %9128, 6
  store i64 %9131, i64* %3, align 8
  %9132 = inttoptr i64 %9130 to i32*
  %9133 = load i32, i32* %9132, align 4
  %9134 = zext i32 %9133 to i64
  store i64 %9134, i64* %RAX.i1161, align 8
  %9135 = add i64 %9129, -384
  %9136 = add i64 %9128, 12
  store i64 %9136, i64* %3, align 8
  %9137 = inttoptr i64 %9135 to i32*
  %9138 = load i32, i32* %9137, align 4
  %9139 = zext i32 %9138 to i64
  store i64 %9139, i64* %RCX.i1519, align 8
  %9140 = sub i32 %9138, %9133
  %9141 = icmp ult i32 %9138, %9133
  %9142 = zext i1 %9141 to i8
  store i8 %9142, i8* %14, align 1
  %9143 = and i32 %9140, 255
  %9144 = tail call i32 @llvm.ctpop.i32(i32 %9143)
  %9145 = trunc i32 %9144 to i8
  %9146 = and i8 %9145, 1
  %9147 = xor i8 %9146, 1
  store i8 %9147, i8* %21, align 1
  %9148 = xor i32 %9133, %9138
  %9149 = xor i32 %9148, %9140
  %9150 = lshr i32 %9149, 4
  %9151 = trunc i32 %9150 to i8
  %9152 = and i8 %9151, 1
  store i8 %9152, i8* %26, align 1
  %9153 = icmp eq i32 %9140, 0
  %9154 = zext i1 %9153 to i8
  store i8 %9154, i8* %29, align 1
  %9155 = lshr i32 %9140, 31
  %9156 = trunc i32 %9155 to i8
  store i8 %9156, i8* %32, align 1
  %9157 = lshr i32 %9138, 31
  %9158 = lshr i32 %9133, 31
  %9159 = xor i32 %9158, %9157
  %9160 = xor i32 %9155, %9157
  %9161 = add nuw nsw i32 %9160, %9159
  %9162 = icmp eq i32 %9161, 2
  %9163 = zext i1 %9162 to i8
  store i8 %9163, i8* %38, align 1
  %9164 = icmp ne i8 %9156, 0
  %9165 = xor i1 %9164, %9162
  %.v239 = select i1 %9165, i64 20, i64 45
  %9166 = add i64 %9128, %.v239
  store i64 %9166, i64* %3, align 8
  br i1 %9165, label %block_40d031, label %block_.L_40d04a

block_40d031:                                     ; preds = %block_.L_40d01d
  %9167 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9167, i64* %RAX.i1161, align 8
  %9168 = add i64 %9167, 72684
  %9169 = add i64 %9166, 14
  store i64 %9169, i64* %3, align 8
  %9170 = inttoptr i64 %9168 to i32*
  %9171 = load i32, i32* %9170, align 4
  %9172 = zext i32 %9171 to i64
  store i64 %9172, i64* %RCX.i1519, align 8
  %9173 = add i64 %9129, -392
  %9174 = add i64 %9166, 20
  store i64 %9174, i64* %3, align 8
  %9175 = inttoptr i64 %9173 to i32*
  store i32 %9171, i32* %9175, align 4
  %9176 = load i64, i64* %3, align 8
  %9177 = add i64 %9176, 90
  store i64 %9177, i64* %3, align 8
  br label %block_.L_40d09f

block_.L_40d04a:                                  ; preds = %block_.L_40d01d
  store i64 0, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9178 = add i64 %9129, -24
  %9179 = add i64 %9166, 6
  store i64 %9179, i64* %3, align 8
  %9180 = inttoptr i64 %9178 to i32*
  %9181 = load i32, i32* %9180, align 4
  %9182 = sext i32 %9181 to i64
  store i64 %9182, i64* %RCX.i1519, align 8
  %9183 = shl nsw i64 %9182, 2
  %9184 = add i64 %9129, -80
  %9185 = add i64 %9184, %9183
  %9186 = add i64 %9166, 10
  store i64 %9186, i64* %3, align 8
  %9187 = inttoptr i64 %9185 to i32*
  %9188 = load i32, i32* %9187, align 4
  %9189 = zext i32 %9188 to i64
  store i64 %9189, i64* %RDX.i1748, align 8
  %9190 = add i64 %9129, -32
  %9191 = add i64 %9166, 14
  store i64 %9191, i64* %3, align 8
  %9192 = inttoptr i64 %9190 to i32*
  %9193 = load i32, i32* %9192, align 4
  %9194 = sext i32 %9193 to i64
  store i64 %9194, i64* %RCX.i1519, align 8
  %9195 = shl nsw i64 %9194, 2
  %9196 = add nsw i64 %9195, -80
  %9197 = add i64 %9196, %9129
  %9198 = add i64 %9166, 18
  store i64 %9198, i64* %3, align 8
  %9199 = inttoptr i64 %9197 to i32*
  %9200 = load i32, i32* %9199, align 4
  %9201 = add i32 %9200, %9188
  %9202 = add i32 %9201, 32
  %9203 = zext i32 %9202 to i64
  %9204 = shl nuw i64 %9203, 32
  %9205 = ashr i64 %9204, 37
  %9206 = lshr i64 %9205, 1
  %9207 = and i64 %9206, 4294967295
  store i64 %9207, i64* %RDX.i1748, align 8
  %9208 = load i32, i32* %EAX.i2800, align 4
  %9209 = trunc i64 %9206 to i32
  %9210 = sub i32 %9208, %9209
  %9211 = icmp ult i32 %9208, %9209
  %9212 = zext i1 %9211 to i8
  store i8 %9212, i8* %14, align 1
  %9213 = and i32 %9210, 255
  %9214 = tail call i32 @llvm.ctpop.i32(i32 %9213)
  %9215 = trunc i32 %9214 to i8
  %9216 = and i8 %9215, 1
  %9217 = xor i8 %9216, 1
  store i8 %9217, i8* %21, align 1
  %9218 = xor i32 %9209, %9208
  %9219 = xor i32 %9218, %9210
  %9220 = lshr i32 %9219, 4
  %9221 = trunc i32 %9220 to i8
  %9222 = and i8 %9221, 1
  store i8 %9222, i8* %26, align 1
  %9223 = icmp eq i32 %9210, 0
  %9224 = zext i1 %9223 to i8
  store i8 %9224, i8* %29, align 1
  %9225 = lshr i32 %9210, 31
  %9226 = trunc i32 %9225 to i8
  store i8 %9226, i8* %32, align 1
  %9227 = lshr i32 %9208, 31
  %9228 = lshr i64 %9205, 32
  %9229 = trunc i64 %9228 to i32
  %9230 = and i32 %9229, 1
  %9231 = xor i32 %9230, %9227
  %9232 = xor i32 %9225, %9227
  %9233 = add nuw nsw i32 %9232, %9231
  %9234 = icmp eq i32 %9233, 2
  %9235 = zext i1 %9234 to i8
  store i8 %9235, i8* %38, align 1
  %9236 = icmp ne i8 %9226, 0
  %9237 = xor i1 %9236, %9234
  %9238 = or i1 %9223, %9237
  %.v240 = select i1 %9238, i64 45, i64 32
  %9239 = add i64 %9166, %.v240
  store i64 %9239, i64* %3, align 8
  br i1 %9238, label %block_.L_40d077, label %block_40d06a

block_40d06a:                                     ; preds = %block_.L_40d04a
  store i64 0, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9240 = load i64, i64* %RBP.i, align 8
  %9241 = add i64 %9240, -396
  %9242 = add i64 %9239, 8
  store i64 %9242, i64* %3, align 8
  %9243 = inttoptr i64 %9241 to i32*
  store i32 0, i32* %9243, align 4
  %9244 = load i64, i64* %3, align 8
  %9245 = add i64 %9244, 33
  store i64 %9245, i64* %3, align 8
  br label %block_.L_40d093

block_.L_40d077:                                  ; preds = %block_.L_40d04a
  %9246 = load i64, i64* %RBP.i, align 8
  %9247 = add i64 %9246, -24
  %9248 = add i64 %9239, 4
  store i64 %9248, i64* %3, align 8
  %9249 = inttoptr i64 %9247 to i32*
  %9250 = load i32, i32* %9249, align 4
  %9251 = sext i32 %9250 to i64
  store i64 %9251, i64* %RAX.i1161, align 8
  %9252 = shl nsw i64 %9251, 2
  %9253 = add i64 %9246, -80
  %9254 = add i64 %9253, %9252
  %9255 = add i64 %9239, 8
  store i64 %9255, i64* %3, align 8
  %9256 = inttoptr i64 %9254 to i32*
  %9257 = load i32, i32* %9256, align 4
  %9258 = zext i32 %9257 to i64
  store i64 %9258, i64* %RCX.i1519, align 8
  %9259 = add i64 %9246, -32
  %9260 = add i64 %9239, 12
  store i64 %9260, i64* %3, align 8
  %9261 = inttoptr i64 %9259 to i32*
  %9262 = load i32, i32* %9261, align 4
  %9263 = sext i32 %9262 to i64
  store i64 %9263, i64* %RAX.i1161, align 8
  %9264 = shl nsw i64 %9263, 2
  %9265 = add nsw i64 %9264, -80
  %9266 = add i64 %9265, %9246
  %9267 = add i64 %9239, 16
  store i64 %9267, i64* %3, align 8
  %9268 = inttoptr i64 %9266 to i32*
  %9269 = load i32, i32* %9268, align 4
  %9270 = add i32 %9269, %9257
  %9271 = add i32 %9270, 32
  %9272 = zext i32 %9271 to i64
  %9273 = shl nuw i64 %9272, 32
  %9274 = ashr i64 %9273, 37
  %9275 = lshr i64 %9274, 1
  %9276 = trunc i64 %9274 to i8
  %9277 = and i8 %9276, 1
  %9278 = trunc i64 %9275 to i32
  %9279 = and i64 %9275, 4294967295
  store i64 %9279, i64* %RCX.i1519, align 8
  store i8 %9277, i8* %14, align 1
  %9280 = and i32 %9278, 255
  %9281 = tail call i32 @llvm.ctpop.i32(i32 %9280)
  %9282 = trunc i32 %9281 to i8
  %9283 = and i8 %9282, 1
  %9284 = xor i8 %9283, 1
  store i8 %9284, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %9285 = icmp eq i32 %9278, 0
  %9286 = zext i1 %9285 to i8
  store i8 %9286, i8* %29, align 1
  %9287 = lshr i64 %9274, 32
  %9288 = trunc i64 %9287 to i8
  %9289 = and i8 %9288, 1
  store i8 %9289, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %9290 = load i64, i64* %RBP.i, align 8
  %9291 = add i64 %9290, -396
  %9292 = trunc i64 %9275 to i32
  %9293 = add i64 %9239, 28
  store i64 %9293, i64* %3, align 8
  %9294 = inttoptr i64 %9291 to i32*
  store i32 %9292, i32* %9294, align 4
  %.pre198 = load i64, i64* %3, align 8
  br label %block_.L_40d093

block_.L_40d093:                                  ; preds = %block_.L_40d077, %block_40d06a
  %9295 = phi i64 [ %.pre198, %block_.L_40d077 ], [ %9245, %block_40d06a ]
  %9296 = load i64, i64* %RBP.i, align 8
  %9297 = add i64 %9296, -396
  %9298 = add i64 %9295, 6
  store i64 %9298, i64* %3, align 8
  %9299 = inttoptr i64 %9297 to i32*
  %9300 = load i32, i32* %9299, align 4
  %9301 = zext i32 %9300 to i64
  store i64 %9301, i64* %RAX.i1161, align 8
  %9302 = add i64 %9296, -392
  %9303 = add i64 %9295, 12
  store i64 %9303, i64* %3, align 8
  %9304 = inttoptr i64 %9302 to i32*
  store i32 %9300, i32* %9304, align 4
  %.pre199 = load i64, i64* %3, align 8
  br label %block_.L_40d09f

block_.L_40d09f:                                  ; preds = %block_.L_40d093, %block_40d031
  %9305 = phi i64 [ %.pre199, %block_.L_40d093 ], [ %9177, %block_40d031 ]
  %9306 = load i64, i64* %RBP.i, align 8
  %9307 = add i64 %9306, -392
  %9308 = add i64 %9305, 6
  store i64 %9308, i64* %3, align 8
  %9309 = inttoptr i64 %9307 to i32*
  %9310 = load i32, i32* %9309, align 4
  %9311 = zext i32 %9310 to i64
  store i64 %9311, i64* %RAX.i1161, align 8
  store i64 0, i64* %RCX.i1519, align 8
  %9312 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %9313 = add i64 %9312, 13112
  store i64 %9313, i64* %RDX.i1748, align 8
  %9314 = icmp ugt i64 %9312, -13113
  %9315 = zext i1 %9314 to i8
  store i8 %9315, i8* %14, align 1
  %9316 = trunc i64 %9313 to i32
  %9317 = and i32 %9316, 255
  %9318 = tail call i32 @llvm.ctpop.i32(i32 %9317)
  %9319 = trunc i32 %9318 to i8
  %9320 = and i8 %9319, 1
  %9321 = xor i8 %9320, 1
  store i8 %9321, i8* %21, align 1
  %9322 = xor i64 %9312, 16
  %9323 = xor i64 %9322, %9313
  %9324 = lshr i64 %9323, 4
  %9325 = trunc i64 %9324 to i8
  %9326 = and i8 %9325, 1
  store i8 %9326, i8* %26, align 1
  %9327 = icmp eq i64 %9313, 0
  %9328 = zext i1 %9327 to i8
  store i8 %9328, i8* %29, align 1
  %9329 = lshr i64 %9313, 63
  %9330 = trunc i64 %9329 to i8
  store i8 %9330, i8* %32, align 1
  %9331 = lshr i64 %9312, 63
  %9332 = xor i64 %9329, %9331
  %9333 = add nuw nsw i64 %9332, %9329
  %9334 = icmp eq i64 %9333, 2
  %9335 = zext i1 %9334 to i8
  store i8 %9335, i8* %38, align 1
  %9336 = add i64 %9306, -20
  %9337 = add i64 %9305, 27
  store i64 %9337, i64* %3, align 8
  %9338 = inttoptr i64 %9336 to i32*
  %9339 = load i32, i32* %9338, align 4
  %9340 = sext i32 %9339 to i64
  %9341 = shl nsw i64 %9340, 6
  store i64 %9341, i64* %RSI.i2777, align 8
  %9342 = add i64 %9341, %9313
  store i64 %9342, i64* %RDX.i1748, align 8
  %9343 = icmp ult i64 %9342, %9313
  %9344 = icmp ult i64 %9342, %9341
  %9345 = or i1 %9343, %9344
  %9346 = zext i1 %9345 to i8
  store i8 %9346, i8* %14, align 1
  %9347 = trunc i64 %9342 to i32
  %9348 = and i32 %9347, 255
  %9349 = tail call i32 @llvm.ctpop.i32(i32 %9348)
  %9350 = trunc i32 %9349 to i8
  %9351 = and i8 %9350, 1
  %9352 = xor i8 %9351, 1
  store i8 %9352, i8* %21, align 1
  %9353 = xor i64 %9313, %9342
  %9354 = lshr i64 %9353, 4
  %9355 = trunc i64 %9354 to i8
  %9356 = and i8 %9355, 1
  store i8 %9356, i8* %26, align 1
  %9357 = icmp eq i64 %9342, 0
  %9358 = zext i1 %9357 to i8
  store i8 %9358, i8* %29, align 1
  %9359 = lshr i64 %9342, 63
  %9360 = trunc i64 %9359 to i8
  store i8 %9360, i8* %32, align 1
  %9361 = lshr i64 %9340, 57
  %9362 = and i64 %9361, 1
  %9363 = xor i64 %9359, %9329
  %9364 = xor i64 %9359, %9362
  %9365 = add nuw nsw i64 %9363, %9364
  %9366 = icmp eq i64 %9365, 2
  %9367 = zext i1 %9366 to i8
  store i8 %9367, i8* %38, align 1
  %9368 = load i64, i64* %RBP.i, align 8
  %9369 = add i64 %9368, -24
  %9370 = add i64 %9305, 38
  store i64 %9370, i64* %3, align 8
  %9371 = inttoptr i64 %9369 to i32*
  %9372 = load i32, i32* %9371, align 4
  %9373 = sext i32 %9372 to i64
  store i64 %9373, i64* %RSI.i2777, align 8
  %9374 = shl nsw i64 %9373, 2
  %9375 = add i64 %9374, %9342
  %9376 = load i32, i32* %EAX.i2800, align 4
  %9377 = add i64 %9305, 41
  store i64 %9377, i64* %3, align 8
  %9378 = inttoptr i64 %9375 to i32*
  store i32 %9376, i32* %9378, align 4
  %9379 = load i64, i64* %3, align 8
  %9380 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9380, i64* %RDX.i1748, align 8
  %9381 = add i64 %9380, 72684
  %9382 = add i64 %9379, 14
  store i64 %9382, i64* %3, align 8
  %9383 = inttoptr i64 %9381 to i32*
  %9384 = load i32, i32* %9383, align 4
  %9385 = zext i32 %9384 to i64
  store i64 %9385, i64* %RAX.i1161, align 8
  %9386 = load i64, i64* %RBP.i, align 8
  %9387 = add i64 %9386, -24
  %9388 = add i64 %9379, 18
  store i64 %9388, i64* %3, align 8
  %9389 = inttoptr i64 %9387 to i32*
  %9390 = load i32, i32* %9389, align 4
  %9391 = sext i32 %9390 to i64
  store i64 %9391, i64* %RDX.i1748, align 8
  %9392 = shl nsw i64 %9391, 2
  %9393 = add i64 %9386, -80
  %9394 = add i64 %9393, %9392
  %9395 = add i64 %9379, 22
  store i64 %9395, i64* %3, align 8
  %9396 = inttoptr i64 %9394 to i32*
  %9397 = load i32, i32* %9396, align 4
  %9398 = zext i32 %9397 to i64
  store i64 %9398, i64* %RDI.i2913, align 8
  %9399 = add i64 %9386, -32
  %9400 = add i64 %9379, 26
  store i64 %9400, i64* %3, align 8
  %9401 = inttoptr i64 %9399 to i32*
  %9402 = load i32, i32* %9401, align 4
  %9403 = sext i32 %9402 to i64
  store i64 %9403, i64* %RDX.i1748, align 8
  %9404 = shl nsw i64 %9403, 2
  %9405 = add nsw i64 %9404, -80
  %9406 = add i64 %9405, %9386
  %9407 = add i64 %9379, 30
  store i64 %9407, i64* %3, align 8
  %9408 = inttoptr i64 %9406 to i32*
  %9409 = load i32, i32* %9408, align 4
  %9410 = sub i32 %9397, %9409
  %9411 = add i32 %9410, 32
  %9412 = zext i32 %9411 to i64
  %9413 = shl nuw i64 %9412, 32
  %9414 = ashr i64 %9413, 37
  %9415 = lshr i64 %9414, 1
  %9416 = and i64 %9415, 4294967295
  store i64 %9416, i64* %RDI.i2913, align 8
  %9417 = load i32, i32* %ECX.i2881, align 4
  %9418 = trunc i64 %9415 to i32
  %9419 = sub i32 %9417, %9418
  %9420 = icmp ult i32 %9417, %9418
  %9421 = zext i1 %9420 to i8
  store i8 %9421, i8* %14, align 1
  %9422 = and i32 %9419, 255
  %9423 = tail call i32 @llvm.ctpop.i32(i32 %9422)
  %9424 = trunc i32 %9423 to i8
  %9425 = and i8 %9424, 1
  %9426 = xor i8 %9425, 1
  store i8 %9426, i8* %21, align 1
  %9427 = xor i32 %9418, %9417
  %9428 = xor i32 %9427, %9419
  %9429 = lshr i32 %9428, 4
  %9430 = trunc i32 %9429 to i8
  %9431 = and i8 %9430, 1
  store i8 %9431, i8* %26, align 1
  %9432 = icmp eq i32 %9419, 0
  %9433 = zext i1 %9432 to i8
  store i8 %9433, i8* %29, align 1
  %9434 = lshr i32 %9419, 31
  %9435 = trunc i32 %9434 to i8
  store i8 %9435, i8* %32, align 1
  %9436 = lshr i32 %9417, 31
  %9437 = lshr i64 %9414, 32
  %9438 = trunc i64 %9437 to i32
  %9439 = and i32 %9438, 1
  %9440 = xor i32 %9439, %9436
  %9441 = xor i32 %9434, %9436
  %9442 = add nuw nsw i32 %9441, %9440
  %9443 = icmp eq i32 %9442, 2
  %9444 = zext i1 %9443 to i8
  store i8 %9444, i8* %38, align 1
  %9445 = load i64, i64* %RBP.i, align 8
  %9446 = add i64 %9445, -400
  %9447 = load i32, i32* %EAX.i2800, align 4
  %9448 = add i64 %9379, 44
  store i64 %9448, i64* %3, align 8
  %9449 = inttoptr i64 %9446 to i32*
  store i32 %9447, i32* %9449, align 4
  %9450 = load i64, i64* %3, align 8
  %9451 = load i8, i8* %29, align 1
  %9452 = icmp ne i8 %9451, 0
  %9453 = load i8, i8* %32, align 1
  %9454 = icmp ne i8 %9453, 0
  %9455 = load i8, i8* %38, align 1
  %9456 = icmp ne i8 %9455, 0
  %9457 = xor i1 %9454, %9456
  %9458 = or i1 %9452, %9457
  %.v290 = select i1 %9458, i64 19, i64 6
  %9459 = add i64 %9450, %.v290
  store i64 %9459, i64* %3, align 8
  br i1 %9458, label %block_.L_40d107, label %block_40d0fa

block_40d0fa:                                     ; preds = %block_.L_40d09f
  store i64 0, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9460 = load i64, i64* %RBP.i, align 8
  %9461 = add i64 %9460, -404
  %9462 = add i64 %9459, 8
  store i64 %9462, i64* %3, align 8
  %9463 = inttoptr i64 %9461 to i32*
  store i32 0, i32* %9463, align 4
  %9464 = load i64, i64* %3, align 8
  %9465 = add i64 %9464, 33
  store i64 %9465, i64* %3, align 8
  br label %block_.L_40d123

block_.L_40d107:                                  ; preds = %block_.L_40d09f
  %9466 = load i64, i64* %RBP.i, align 8
  %9467 = add i64 %9466, -24
  %9468 = add i64 %9459, 4
  store i64 %9468, i64* %3, align 8
  %9469 = inttoptr i64 %9467 to i32*
  %9470 = load i32, i32* %9469, align 4
  %9471 = sext i32 %9470 to i64
  store i64 %9471, i64* %RAX.i1161, align 8
  %9472 = shl nsw i64 %9471, 2
  %9473 = add i64 %9466, -80
  %9474 = add i64 %9473, %9472
  %9475 = add i64 %9459, 8
  store i64 %9475, i64* %3, align 8
  %9476 = inttoptr i64 %9474 to i32*
  %9477 = load i32, i32* %9476, align 4
  %9478 = zext i32 %9477 to i64
  store i64 %9478, i64* %RCX.i1519, align 8
  %9479 = add i64 %9466, -32
  %9480 = add i64 %9459, 12
  store i64 %9480, i64* %3, align 8
  %9481 = inttoptr i64 %9479 to i32*
  %9482 = load i32, i32* %9481, align 4
  %9483 = sext i32 %9482 to i64
  store i64 %9483, i64* %RAX.i1161, align 8
  %9484 = shl nsw i64 %9483, 2
  %9485 = add nsw i64 %9484, -80
  %9486 = add i64 %9485, %9466
  %9487 = add i64 %9459, 16
  store i64 %9487, i64* %3, align 8
  %9488 = inttoptr i64 %9486 to i32*
  %9489 = load i32, i32* %9488, align 4
  %9490 = sub i32 %9477, %9489
  %9491 = add i32 %9490, 32
  %9492 = zext i32 %9491 to i64
  %9493 = shl nuw i64 %9492, 32
  %9494 = ashr i64 %9493, 37
  %9495 = lshr i64 %9494, 1
  %9496 = trunc i64 %9494 to i8
  %9497 = and i8 %9496, 1
  %9498 = trunc i64 %9495 to i32
  %9499 = and i64 %9495, 4294967295
  store i64 %9499, i64* %RCX.i1519, align 8
  store i8 %9497, i8* %14, align 1
  %9500 = and i32 %9498, 255
  %9501 = tail call i32 @llvm.ctpop.i32(i32 %9500)
  %9502 = trunc i32 %9501 to i8
  %9503 = and i8 %9502, 1
  %9504 = xor i8 %9503, 1
  store i8 %9504, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %9505 = icmp eq i32 %9498, 0
  %9506 = zext i1 %9505 to i8
  store i8 %9506, i8* %29, align 1
  %9507 = lshr i64 %9494, 32
  %9508 = trunc i64 %9507 to i8
  %9509 = and i8 %9508, 1
  store i8 %9509, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %9510 = load i64, i64* %RBP.i, align 8
  %9511 = add i64 %9510, -404
  %9512 = trunc i64 %9495 to i32
  %9513 = add i64 %9459, 28
  store i64 %9513, i64* %3, align 8
  %9514 = inttoptr i64 %9511 to i32*
  store i32 %9512, i32* %9514, align 4
  %.pre200 = load i64, i64* %3, align 8
  br label %block_.L_40d123

block_.L_40d123:                                  ; preds = %block_.L_40d107, %block_40d0fa
  %9515 = phi i64 [ %.pre200, %block_.L_40d107 ], [ %9465, %block_40d0fa ]
  %9516 = load i64, i64* %RBP.i, align 8
  %9517 = add i64 %9516, -404
  %9518 = add i64 %9515, 6
  store i64 %9518, i64* %3, align 8
  %9519 = inttoptr i64 %9517 to i32*
  %9520 = load i32, i32* %9519, align 4
  %9521 = zext i32 %9520 to i64
  store i64 %9521, i64* %RAX.i1161, align 8
  %9522 = add i64 %9516, -400
  %9523 = add i64 %9515, 12
  store i64 %9523, i64* %3, align 8
  %9524 = inttoptr i64 %9522 to i32*
  %9525 = load i32, i32* %9524, align 4
  %9526 = zext i32 %9525 to i64
  store i64 %9526, i64* %RCX.i1519, align 8
  %9527 = sub i32 %9525, %9520
  %9528 = icmp ult i32 %9525, %9520
  %9529 = zext i1 %9528 to i8
  store i8 %9529, i8* %14, align 1
  %9530 = and i32 %9527, 255
  %9531 = tail call i32 @llvm.ctpop.i32(i32 %9530)
  %9532 = trunc i32 %9531 to i8
  %9533 = and i8 %9532, 1
  %9534 = xor i8 %9533, 1
  store i8 %9534, i8* %21, align 1
  %9535 = xor i32 %9520, %9525
  %9536 = xor i32 %9535, %9527
  %9537 = lshr i32 %9536, 4
  %9538 = trunc i32 %9537 to i8
  %9539 = and i8 %9538, 1
  store i8 %9539, i8* %26, align 1
  %9540 = icmp eq i32 %9527, 0
  %9541 = zext i1 %9540 to i8
  store i8 %9541, i8* %29, align 1
  %9542 = lshr i32 %9527, 31
  %9543 = trunc i32 %9542 to i8
  store i8 %9543, i8* %32, align 1
  %9544 = lshr i32 %9525, 31
  %9545 = lshr i32 %9520, 31
  %9546 = xor i32 %9545, %9544
  %9547 = xor i32 %9542, %9544
  %9548 = add nuw nsw i32 %9547, %9546
  %9549 = icmp eq i32 %9548, 2
  %9550 = zext i1 %9549 to i8
  store i8 %9550, i8* %38, align 1
  %9551 = icmp ne i8 %9543, 0
  %9552 = xor i1 %9551, %9549
  %.v241 = select i1 %9552, i64 20, i64 45
  %9553 = add i64 %9515, %.v241
  store i64 %9553, i64* %3, align 8
  br i1 %9552, label %block_40d137, label %block_.L_40d150

block_40d137:                                     ; preds = %block_.L_40d123
  %9554 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9554, i64* %RAX.i1161, align 8
  %9555 = add i64 %9554, 72684
  %9556 = add i64 %9553, 14
  store i64 %9556, i64* %3, align 8
  %9557 = inttoptr i64 %9555 to i32*
  %9558 = load i32, i32* %9557, align 4
  %9559 = zext i32 %9558 to i64
  store i64 %9559, i64* %RCX.i1519, align 8
  %9560 = add i64 %9516, -408
  %9561 = add i64 %9553, 20
  store i64 %9561, i64* %3, align 8
  %9562 = inttoptr i64 %9560 to i32*
  store i32 %9558, i32* %9562, align 4
  %9563 = load i64, i64* %3, align 8
  %9564 = add i64 %9563, 90
  store i64 %9564, i64* %3, align 8
  br label %block_.L_40d1a5

block_.L_40d150:                                  ; preds = %block_.L_40d123
  store i64 0, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9565 = add i64 %9516, -24
  %9566 = add i64 %9553, 6
  store i64 %9566, i64* %3, align 8
  %9567 = inttoptr i64 %9565 to i32*
  %9568 = load i32, i32* %9567, align 4
  %9569 = sext i32 %9568 to i64
  store i64 %9569, i64* %RCX.i1519, align 8
  %9570 = shl nsw i64 %9569, 2
  %9571 = add i64 %9516, -80
  %9572 = add i64 %9571, %9570
  %9573 = add i64 %9553, 10
  store i64 %9573, i64* %3, align 8
  %9574 = inttoptr i64 %9572 to i32*
  %9575 = load i32, i32* %9574, align 4
  %9576 = zext i32 %9575 to i64
  store i64 %9576, i64* %RDX.i1748, align 8
  %9577 = add i64 %9516, -32
  %9578 = add i64 %9553, 14
  store i64 %9578, i64* %3, align 8
  %9579 = inttoptr i64 %9577 to i32*
  %9580 = load i32, i32* %9579, align 4
  %9581 = sext i32 %9580 to i64
  store i64 %9581, i64* %RCX.i1519, align 8
  %9582 = shl nsw i64 %9581, 2
  %9583 = add nsw i64 %9582, -80
  %9584 = add i64 %9583, %9516
  %9585 = add i64 %9553, 18
  store i64 %9585, i64* %3, align 8
  %9586 = inttoptr i64 %9584 to i32*
  %9587 = load i32, i32* %9586, align 4
  %9588 = sub i32 %9575, %9587
  %9589 = add i32 %9588, 32
  %9590 = zext i32 %9589 to i64
  %9591 = shl nuw i64 %9590, 32
  %9592 = ashr i64 %9591, 37
  %9593 = lshr i64 %9592, 1
  %9594 = and i64 %9593, 4294967295
  store i64 %9594, i64* %RDX.i1748, align 8
  %9595 = load i32, i32* %EAX.i2800, align 4
  %9596 = trunc i64 %9593 to i32
  %9597 = sub i32 %9595, %9596
  %9598 = icmp ult i32 %9595, %9596
  %9599 = zext i1 %9598 to i8
  store i8 %9599, i8* %14, align 1
  %9600 = and i32 %9597, 255
  %9601 = tail call i32 @llvm.ctpop.i32(i32 %9600)
  %9602 = trunc i32 %9601 to i8
  %9603 = and i8 %9602, 1
  %9604 = xor i8 %9603, 1
  store i8 %9604, i8* %21, align 1
  %9605 = xor i32 %9596, %9595
  %9606 = xor i32 %9605, %9597
  %9607 = lshr i32 %9606, 4
  %9608 = trunc i32 %9607 to i8
  %9609 = and i8 %9608, 1
  store i8 %9609, i8* %26, align 1
  %9610 = icmp eq i32 %9597, 0
  %9611 = zext i1 %9610 to i8
  store i8 %9611, i8* %29, align 1
  %9612 = lshr i32 %9597, 31
  %9613 = trunc i32 %9612 to i8
  store i8 %9613, i8* %32, align 1
  %9614 = lshr i32 %9595, 31
  %9615 = lshr i64 %9592, 32
  %9616 = trunc i64 %9615 to i32
  %9617 = and i32 %9616, 1
  %9618 = xor i32 %9617, %9614
  %9619 = xor i32 %9612, %9614
  %9620 = add nuw nsw i32 %9619, %9618
  %9621 = icmp eq i32 %9620, 2
  %9622 = zext i1 %9621 to i8
  store i8 %9622, i8* %38, align 1
  %9623 = icmp ne i8 %9613, 0
  %9624 = xor i1 %9623, %9621
  %9625 = or i1 %9610, %9624
  %.v242 = select i1 %9625, i64 45, i64 32
  %9626 = add i64 %9553, %.v242
  store i64 %9626, i64* %3, align 8
  br i1 %9625, label %block_.L_40d17d, label %block_40d170

block_40d170:                                     ; preds = %block_.L_40d150
  store i64 0, i64* %RAX.i1161, align 8
  store i8 0, i8* %14, align 1
  store i8 1, i8* %21, align 1
  store i8 1, i8* %29, align 1
  store i8 0, i8* %32, align 1
  store i8 0, i8* %38, align 1
  store i8 0, i8* %26, align 1
  %9627 = load i64, i64* %RBP.i, align 8
  %9628 = add i64 %9627, -412
  %9629 = add i64 %9626, 8
  store i64 %9629, i64* %3, align 8
  %9630 = inttoptr i64 %9628 to i32*
  store i32 0, i32* %9630, align 4
  %9631 = load i64, i64* %3, align 8
  %9632 = add i64 %9631, 33
  store i64 %9632, i64* %3, align 8
  br label %block_.L_40d199

block_.L_40d17d:                                  ; preds = %block_.L_40d150
  %9633 = load i64, i64* %RBP.i, align 8
  %9634 = add i64 %9633, -24
  %9635 = add i64 %9626, 4
  store i64 %9635, i64* %3, align 8
  %9636 = inttoptr i64 %9634 to i32*
  %9637 = load i32, i32* %9636, align 4
  %9638 = sext i32 %9637 to i64
  store i64 %9638, i64* %RAX.i1161, align 8
  %9639 = shl nsw i64 %9638, 2
  %9640 = add i64 %9633, -80
  %9641 = add i64 %9640, %9639
  %9642 = add i64 %9626, 8
  store i64 %9642, i64* %3, align 8
  %9643 = inttoptr i64 %9641 to i32*
  %9644 = load i32, i32* %9643, align 4
  %9645 = zext i32 %9644 to i64
  store i64 %9645, i64* %RCX.i1519, align 8
  %9646 = add i64 %9633, -32
  %9647 = add i64 %9626, 12
  store i64 %9647, i64* %3, align 8
  %9648 = inttoptr i64 %9646 to i32*
  %9649 = load i32, i32* %9648, align 4
  %9650 = sext i32 %9649 to i64
  store i64 %9650, i64* %RAX.i1161, align 8
  %9651 = shl nsw i64 %9650, 2
  %9652 = add nsw i64 %9651, -80
  %9653 = add i64 %9652, %9633
  %9654 = add i64 %9626, 16
  store i64 %9654, i64* %3, align 8
  %9655 = inttoptr i64 %9653 to i32*
  %9656 = load i32, i32* %9655, align 4
  %9657 = sub i32 %9644, %9656
  %9658 = add i32 %9657, 32
  %9659 = zext i32 %9658 to i64
  %9660 = shl nuw i64 %9659, 32
  %9661 = ashr i64 %9660, 37
  %9662 = lshr i64 %9661, 1
  %9663 = trunc i64 %9661 to i8
  %9664 = and i8 %9663, 1
  %9665 = trunc i64 %9662 to i32
  %9666 = and i64 %9662, 4294967295
  store i64 %9666, i64* %RCX.i1519, align 8
  store i8 %9664, i8* %14, align 1
  %9667 = and i32 %9665, 255
  %9668 = tail call i32 @llvm.ctpop.i32(i32 %9667)
  %9669 = trunc i32 %9668 to i8
  %9670 = and i8 %9669, 1
  %9671 = xor i8 %9670, 1
  store i8 %9671, i8* %21, align 1
  store i8 0, i8* %26, align 1
  %9672 = icmp eq i32 %9665, 0
  %9673 = zext i1 %9672 to i8
  store i8 %9673, i8* %29, align 1
  %9674 = lshr i64 %9661, 32
  %9675 = trunc i64 %9674 to i8
  %9676 = and i8 %9675, 1
  store i8 %9676, i8* %32, align 1
  store i8 0, i8* %38, align 1
  %9677 = load i64, i64* %RBP.i, align 8
  %9678 = add i64 %9677, -412
  %9679 = trunc i64 %9662 to i32
  %9680 = add i64 %9626, 28
  store i64 %9680, i64* %3, align 8
  %9681 = inttoptr i64 %9678 to i32*
  store i32 %9679, i32* %9681, align 4
  %.pre201 = load i64, i64* %3, align 8
  br label %block_.L_40d199

block_.L_40d199:                                  ; preds = %block_.L_40d17d, %block_40d170
  %9682 = phi i64 [ %.pre201, %block_.L_40d17d ], [ %9632, %block_40d170 ]
  %9683 = load i64, i64* %RBP.i, align 8
  %9684 = add i64 %9683, -412
  %9685 = add i64 %9682, 6
  store i64 %9685, i64* %3, align 8
  %9686 = inttoptr i64 %9684 to i32*
  %9687 = load i32, i32* %9686, align 4
  %9688 = zext i32 %9687 to i64
  store i64 %9688, i64* %RAX.i1161, align 8
  %9689 = add i64 %9683, -408
  %9690 = add i64 %9682, 12
  store i64 %9690, i64* %3, align 8
  %9691 = inttoptr i64 %9689 to i32*
  store i32 %9687, i32* %9691, align 4
  %.pre202 = load i64, i64* %3, align 8
  br label %block_.L_40d1a5

block_.L_40d1a5:                                  ; preds = %block_.L_40d199, %block_40d137
  %9692 = phi i64 [ %.pre202, %block_.L_40d199 ], [ %9564, %block_40d137 ]
  %9693 = load i64, i64* %RBP.i, align 8
  %9694 = add i64 %9693, -408
  %9695 = add i64 %9692, 6
  store i64 %9695, i64* %3, align 8
  %9696 = inttoptr i64 %9694 to i32*
  %9697 = load i32, i32* %9696, align 4
  %9698 = zext i32 %9697 to i64
  store i64 %9698, i64* %RAX.i1161, align 8
  %9699 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %9700 = add i64 %9699, 13112
  store i64 %9700, i64* %RCX.i1519, align 8
  %9701 = icmp ugt i64 %9699, -13113
  %9702 = zext i1 %9701 to i8
  store i8 %9702, i8* %14, align 1
  %9703 = trunc i64 %9700 to i32
  %9704 = and i32 %9703, 255
  %9705 = tail call i32 @llvm.ctpop.i32(i32 %9704)
  %9706 = trunc i32 %9705 to i8
  %9707 = and i8 %9706, 1
  %9708 = xor i8 %9707, 1
  store i8 %9708, i8* %21, align 1
  %9709 = xor i64 %9699, 16
  %9710 = xor i64 %9709, %9700
  %9711 = lshr i64 %9710, 4
  %9712 = trunc i64 %9711 to i8
  %9713 = and i8 %9712, 1
  store i8 %9713, i8* %26, align 1
  %9714 = icmp eq i64 %9700, 0
  %9715 = zext i1 %9714 to i8
  store i8 %9715, i8* %29, align 1
  %9716 = lshr i64 %9700, 63
  %9717 = trunc i64 %9716 to i8
  store i8 %9717, i8* %32, align 1
  %9718 = lshr i64 %9699, 63
  %9719 = xor i64 %9716, %9718
  %9720 = add nuw nsw i64 %9719, %9716
  %9721 = icmp eq i64 %9720, 2
  %9722 = zext i1 %9721 to i8
  store i8 %9722, i8* %38, align 1
  %9723 = add i64 %9693, -20
  %9724 = add i64 %9692, 25
  store i64 %9724, i64* %3, align 8
  %9725 = inttoptr i64 %9723 to i32*
  %9726 = load i32, i32* %9725, align 4
  %9727 = sext i32 %9726 to i64
  %9728 = shl nsw i64 %9727, 6
  store i64 %9728, i64* %RDX.i1748, align 8
  %9729 = add i64 %9728, %9700
  store i64 %9729, i64* %RCX.i1519, align 8
  %9730 = icmp ult i64 %9729, %9700
  %9731 = icmp ult i64 %9729, %9728
  %9732 = or i1 %9730, %9731
  %9733 = zext i1 %9732 to i8
  store i8 %9733, i8* %14, align 1
  %9734 = trunc i64 %9729 to i32
  %9735 = and i32 %9734, 255
  %9736 = tail call i32 @llvm.ctpop.i32(i32 %9735)
  %9737 = trunc i32 %9736 to i8
  %9738 = and i8 %9737, 1
  %9739 = xor i8 %9738, 1
  store i8 %9739, i8* %21, align 1
  %9740 = xor i64 %9700, %9729
  %9741 = lshr i64 %9740, 4
  %9742 = trunc i64 %9741 to i8
  %9743 = and i8 %9742, 1
  store i8 %9743, i8* %26, align 1
  %9744 = icmp eq i64 %9729, 0
  %9745 = zext i1 %9744 to i8
  store i8 %9745, i8* %29, align 1
  %9746 = lshr i64 %9729, 63
  %9747 = trunc i64 %9746 to i8
  store i8 %9747, i8* %32, align 1
  %9748 = lshr i64 %9727, 57
  %9749 = and i64 %9748, 1
  %9750 = xor i64 %9746, %9716
  %9751 = xor i64 %9746, %9749
  %9752 = add nuw nsw i64 %9750, %9751
  %9753 = icmp eq i64 %9752, 2
  %9754 = zext i1 %9753 to i8
  store i8 %9754, i8* %38, align 1
  %9755 = load i64, i64* %RBP.i, align 8
  %9756 = add i64 %9755, -32
  %9757 = add i64 %9692, 36
  store i64 %9757, i64* %3, align 8
  %9758 = inttoptr i64 %9756 to i32*
  %9759 = load i32, i32* %9758, align 4
  %9760 = sext i32 %9759 to i64
  store i64 %9760, i64* %RDX.i1748, align 8
  %9761 = shl nsw i64 %9760, 2
  %9762 = add i64 %9761, %9729
  %9763 = load i32, i32* %EAX.i2800, align 4
  %9764 = add i64 %9692, 39
  store i64 %9764, i64* %3, align 8
  %9765 = inttoptr i64 %9762 to i32*
  store i32 %9763, i32* %9765, align 4
  %9766 = load i64, i64* %RBP.i, align 8
  %9767 = add i64 %9766, -24
  %9768 = load i64, i64* %3, align 8
  %9769 = add i64 %9768, 3
  store i64 %9769, i64* %3, align 8
  %9770 = inttoptr i64 %9767 to i32*
  %9771 = load i32, i32* %9770, align 4
  %9772 = add i32 %9771, 1
  %9773 = zext i32 %9772 to i64
  store i64 %9773, i64* %RAX.i1161, align 8
  %9774 = icmp eq i32 %9771, -1
  %9775 = icmp eq i32 %9772, 0
  %9776 = or i1 %9774, %9775
  %9777 = zext i1 %9776 to i8
  store i8 %9777, i8* %14, align 1
  %9778 = and i32 %9772, 255
  %9779 = tail call i32 @llvm.ctpop.i32(i32 %9778)
  %9780 = trunc i32 %9779 to i8
  %9781 = and i8 %9780, 1
  %9782 = xor i8 %9781, 1
  store i8 %9782, i8* %21, align 1
  %9783 = xor i32 %9772, %9771
  %9784 = lshr i32 %9783, 4
  %9785 = trunc i32 %9784 to i8
  %9786 = and i8 %9785, 1
  store i8 %9786, i8* %26, align 1
  %9787 = zext i1 %9775 to i8
  store i8 %9787, i8* %29, align 1
  %9788 = lshr i32 %9772, 31
  %9789 = trunc i32 %9788 to i8
  store i8 %9789, i8* %32, align 1
  %9790 = lshr i32 %9771, 31
  %9791 = xor i32 %9788, %9790
  %9792 = add nuw nsw i32 %9791, %9788
  %9793 = icmp eq i32 %9792, 2
  %9794 = zext i1 %9793 to i8
  store i8 %9794, i8* %38, align 1
  %9795 = add i64 %9768, 9
  store i64 %9795, i64* %3, align 8
  store i32 %9772, i32* %9770, align 4
  %9796 = load i64, i64* %3, align 8
  %9797 = add i64 %9796, -554
  store i64 %9797, i64* %3, align 8
  br label %block_.L_40cfab

block_.L_40d1da:                                  ; preds = %block_.L_40cfab
  %9798 = add i64 %8937, -20
  %9799 = add i64 %8965, 8
  store i64 %9799, i64* %3, align 8
  %9800 = inttoptr i64 %9798 to i32*
  %9801 = load i32, i32* %9800, align 4
  %9802 = add i32 %9801, 1
  %9803 = zext i32 %9802 to i64
  store i64 %9803, i64* %RAX.i1161, align 8
  %9804 = icmp eq i32 %9801, -1
  %9805 = icmp eq i32 %9802, 0
  %9806 = or i1 %9804, %9805
  %9807 = zext i1 %9806 to i8
  store i8 %9807, i8* %14, align 1
  %9808 = and i32 %9802, 255
  %9809 = tail call i32 @llvm.ctpop.i32(i32 %9808)
  %9810 = trunc i32 %9809 to i8
  %9811 = and i8 %9810, 1
  %9812 = xor i8 %9811, 1
  store i8 %9812, i8* %21, align 1
  %9813 = xor i32 %9802, %9801
  %9814 = lshr i32 %9813, 4
  %9815 = trunc i32 %9814 to i8
  %9816 = and i8 %9815, 1
  store i8 %9816, i8* %26, align 1
  %9817 = zext i1 %9805 to i8
  store i8 %9817, i8* %29, align 1
  %9818 = lshr i32 %9802, 31
  %9819 = trunc i32 %9818 to i8
  store i8 %9819, i8* %32, align 1
  %9820 = lshr i32 %9801, 31
  %9821 = xor i32 %9818, %9820
  %9822 = add nuw nsw i32 %9821, %9818
  %9823 = icmp eq i32 %9822, 2
  %9824 = zext i1 %9823 to i8
  store i8 %9824, i8* %38, align 1
  %9825 = add i64 %8965, 14
  store i64 %9825, i64* %3, align 8
  store i32 %9802, i32* %9800, align 4
  %9826 = load i64, i64* %3, align 8
  %9827 = add i64 %9826, -705
  store i64 %9827, i64* %3, align 8
  br label %block_.L_40cf27

block_.L_40d1f4:                                  ; preds = %block_.L_40d1f4.preheader, %block_.L_40d285
  %9828 = phi i64 [ %.pre193, %block_.L_40d1f4.preheader ], [ %10171, %block_.L_40d285 ]
  %9829 = load i64, i64* %RBP.i, align 8
  %9830 = add i64 %9829, -24
  %9831 = add i64 %9828, 4
  store i64 %9831, i64* %3, align 8
  %9832 = inttoptr i64 %9830 to i32*
  %9833 = load i32, i32* %9832, align 4
  %9834 = add i32 %9833, -4
  %9835 = icmp ult i32 %9833, 4
  %9836 = zext i1 %9835 to i8
  store i8 %9836, i8* %14, align 1
  %9837 = and i32 %9834, 255
  %9838 = tail call i32 @llvm.ctpop.i32(i32 %9837)
  %9839 = trunc i32 %9838 to i8
  %9840 = and i8 %9839, 1
  %9841 = xor i8 %9840, 1
  store i8 %9841, i8* %21, align 1
  %9842 = xor i32 %9834, %9833
  %9843 = lshr i32 %9842, 4
  %9844 = trunc i32 %9843 to i8
  %9845 = and i8 %9844, 1
  store i8 %9845, i8* %26, align 1
  %9846 = icmp eq i32 %9834, 0
  %9847 = zext i1 %9846 to i8
  store i8 %9847, i8* %29, align 1
  %9848 = lshr i32 %9834, 31
  %9849 = trunc i32 %9848 to i8
  store i8 %9849, i8* %32, align 1
  %9850 = lshr i32 %9833, 31
  %9851 = xor i32 %9848, %9850
  %9852 = add nuw nsw i32 %9851, %9850
  %9853 = icmp eq i32 %9852, 2
  %9854 = zext i1 %9853 to i8
  store i8 %9854, i8* %38, align 1
  %9855 = icmp ne i8 %9849, 0
  %9856 = xor i1 %9855, %9853
  %.v237 = select i1 %9856, i64 10, i64 164
  %9857 = add i64 %9828, %.v237
  store i64 %9857, i64* %3, align 8
  br i1 %9856, label %block_40d1fe, label %block_.L_40d298

block_40d1fe:                                     ; preds = %block_.L_40d1f4
  %9858 = add i64 %9829, -20
  %9859 = add i64 %9857, 7
  store i64 %9859, i64* %3, align 8
  %9860 = inttoptr i64 %9858 to i32*
  store i32 0, i32* %9860, align 4
  %.pre194 = load i64, i64* %3, align 8
  br label %block_.L_40d205

block_.L_40d205:                                  ; preds = %block_40d20f, %block_40d1fe
  %9861 = phi i64 [ %10141, %block_40d20f ], [ %.pre194, %block_40d1fe ]
  %9862 = load i64, i64* %RBP.i, align 8
  %9863 = add i64 %9862, -20
  %9864 = add i64 %9861, 4
  store i64 %9864, i64* %3, align 8
  %9865 = inttoptr i64 %9863 to i32*
  %9866 = load i32, i32* %9865, align 4
  %9867 = add i32 %9866, -4
  %9868 = icmp ult i32 %9866, 4
  %9869 = zext i1 %9868 to i8
  store i8 %9869, i8* %14, align 1
  %9870 = and i32 %9867, 255
  %9871 = tail call i32 @llvm.ctpop.i32(i32 %9870)
  %9872 = trunc i32 %9871 to i8
  %9873 = and i8 %9872, 1
  %9874 = xor i8 %9873, 1
  store i8 %9874, i8* %21, align 1
  %9875 = xor i32 %9867, %9866
  %9876 = lshr i32 %9875, 4
  %9877 = trunc i32 %9876 to i8
  %9878 = and i8 %9877, 1
  store i8 %9878, i8* %26, align 1
  %9879 = icmp eq i32 %9867, 0
  %9880 = zext i1 %9879 to i8
  store i8 %9880, i8* %29, align 1
  %9881 = lshr i32 %9867, 31
  %9882 = trunc i32 %9881 to i8
  store i8 %9882, i8* %32, align 1
  %9883 = lshr i32 %9866, 31
  %9884 = xor i32 %9881, %9883
  %9885 = add nuw nsw i32 %9884, %9883
  %9886 = icmp eq i32 %9885, 2
  %9887 = zext i1 %9886 to i8
  store i8 %9887, i8* %38, align 1
  %9888 = icmp ne i8 %9882, 0
  %9889 = xor i1 %9888, %9886
  %.v230 = select i1 %9889, i64 10, i64 128
  %9890 = add i64 %9861, %.v230
  store i64 %9890, i64* %3, align 8
  br i1 %9889, label %block_40d20f, label %block_.L_40d285

block_40d20f:                                     ; preds = %block_.L_40d205
  %9891 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  %9892 = add i64 %9891, 13112
  store i64 %9892, i64* %RAX.i1161, align 8
  %9893 = icmp ugt i64 %9891, -13113
  %9894 = zext i1 %9893 to i8
  store i8 %9894, i8* %14, align 1
  %9895 = trunc i64 %9892 to i32
  %9896 = and i32 %9895, 255
  %9897 = tail call i32 @llvm.ctpop.i32(i32 %9896)
  %9898 = trunc i32 %9897 to i8
  %9899 = and i8 %9898, 1
  %9900 = xor i8 %9899, 1
  store i8 %9900, i8* %21, align 1
  %9901 = xor i64 %9891, 16
  %9902 = xor i64 %9901, %9892
  %9903 = lshr i64 %9902, 4
  %9904 = trunc i64 %9903 to i8
  %9905 = and i8 %9904, 1
  store i8 %9905, i8* %26, align 1
  %9906 = icmp eq i64 %9892, 0
  %9907 = zext i1 %9906 to i8
  store i8 %9907, i8* %29, align 1
  %9908 = lshr i64 %9892, 63
  %9909 = trunc i64 %9908 to i8
  store i8 %9909, i8* %32, align 1
  %9910 = lshr i64 %9891, 63
  %9911 = xor i64 %9908, %9910
  %9912 = add nuw nsw i64 %9911, %9908
  %9913 = icmp eq i64 %9912, 2
  %9914 = zext i1 %9913 to i8
  store i8 %9914, i8* %38, align 1
  %9915 = add i64 %9890, 18
  store i64 %9915, i64* %3, align 8
  %9916 = load i32, i32* %9865, align 4
  %9917 = sext i32 %9916 to i64
  %9918 = shl nsw i64 %9917, 6
  store i64 %9918, i64* %RCX.i1519, align 8
  %9919 = add i64 %9918, %9892
  store i64 %9919, i64* %RAX.i1161, align 8
  %9920 = icmp ult i64 %9919, %9892
  %9921 = icmp ult i64 %9919, %9918
  %9922 = or i1 %9920, %9921
  %9923 = zext i1 %9922 to i8
  store i8 %9923, i8* %14, align 1
  %9924 = trunc i64 %9919 to i32
  %9925 = and i32 %9924, 255
  %9926 = tail call i32 @llvm.ctpop.i32(i32 %9925)
  %9927 = trunc i32 %9926 to i8
  %9928 = and i8 %9927, 1
  %9929 = xor i8 %9928, 1
  store i8 %9929, i8* %21, align 1
  %9930 = xor i64 %9892, %9919
  %9931 = lshr i64 %9930, 4
  %9932 = trunc i64 %9931 to i8
  %9933 = and i8 %9932, 1
  store i8 %9933, i8* %26, align 1
  %9934 = icmp eq i64 %9919, 0
  %9935 = zext i1 %9934 to i8
  store i8 %9935, i8* %29, align 1
  %9936 = lshr i64 %9919, 63
  %9937 = trunc i64 %9936 to i8
  store i8 %9937, i8* %32, align 1
  %9938 = lshr i64 %9917, 57
  %9939 = and i64 %9938, 1
  %9940 = xor i64 %9936, %9908
  %9941 = xor i64 %9936, %9939
  %9942 = add nuw nsw i64 %9940, %9941
  %9943 = icmp eq i64 %9942, 2
  %9944 = zext i1 %9943 to i8
  store i8 %9944, i8* %38, align 1
  %9945 = add i64 %9862, -24
  %9946 = add i64 %9890, 29
  store i64 %9946, i64* %3, align 8
  %9947 = inttoptr i64 %9945 to i32*
  %9948 = load i32, i32* %9947, align 4
  %9949 = sext i32 %9948 to i64
  store i64 %9949, i64* %RCX.i1519, align 8
  %9950 = shl nsw i64 %9949, 2
  %9951 = add i64 %9950, %9919
  %9952 = add i64 %9890, 32
  store i64 %9952, i64* %3, align 8
  %9953 = inttoptr i64 %9951 to i32*
  %9954 = load i32, i32* %9953, align 4
  %9955 = zext i32 %9954 to i64
  store i64 %9955, i64* %RDX.i1748, align 8
  %9956 = trunc i32 %9954 to i16
  store i16 %9956, i16* %SI.i61, align 2
  %9957 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %9957, i64* %RAX.i1161, align 8
  %9958 = add i64 %9957, 6424
  %9959 = add i64 %9890, 50
  store i64 %9959, i64* %3, align 8
  %9960 = inttoptr i64 %9958 to i64*
  %9961 = load i64, i64* %9960, align 8
  store i64 %9961, i64* %RAX.i1161, align 8
  %9962 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %9962, i64* %RCX.i1519, align 8
  %9963 = add i64 %9962, 156
  %9964 = add i64 %9890, 64
  store i64 %9964, i64* %3, align 8
  %9965 = inttoptr i64 %9963 to i32*
  %9966 = load i32, i32* %9965, align 4
  %9967 = zext i32 %9966 to i64
  store i64 %9967, i64* %RDX.i1748, align 8
  %9968 = load i64, i64* %RBP.i, align 8
  %9969 = add i64 %9968, -8
  %9970 = add i64 %9890, 67
  store i64 %9970, i64* %3, align 8
  %9971 = inttoptr i64 %9969 to i32*
  %9972 = load i32, i32* %9971, align 4
  %9973 = add i32 %9972, %9966
  %9974 = zext i32 %9973 to i64
  store i64 %9974, i64* %RDX.i1748, align 8
  %9975 = icmp ult i32 %9973, %9966
  %9976 = icmp ult i32 %9973, %9972
  %9977 = or i1 %9975, %9976
  %9978 = zext i1 %9977 to i8
  store i8 %9978, i8* %14, align 1
  %9979 = and i32 %9973, 255
  %9980 = tail call i32 @llvm.ctpop.i32(i32 %9979)
  %9981 = trunc i32 %9980 to i8
  %9982 = and i8 %9981, 1
  %9983 = xor i8 %9982, 1
  store i8 %9983, i8* %21, align 1
  %9984 = xor i32 %9972, %9966
  %9985 = xor i32 %9984, %9973
  %9986 = lshr i32 %9985, 4
  %9987 = trunc i32 %9986 to i8
  %9988 = and i8 %9987, 1
  store i8 %9988, i8* %26, align 1
  %9989 = icmp eq i32 %9973, 0
  %9990 = zext i1 %9989 to i8
  store i8 %9990, i8* %29, align 1
  %9991 = lshr i32 %9973, 31
  %9992 = trunc i32 %9991 to i8
  store i8 %9992, i8* %32, align 1
  %9993 = lshr i32 %9966, 31
  %9994 = lshr i32 %9972, 31
  %9995 = xor i32 %9991, %9993
  %9996 = xor i32 %9991, %9994
  %9997 = add nuw nsw i32 %9995, %9996
  %9998 = icmp eq i32 %9997, 2
  %9999 = zext i1 %9998 to i8
  store i8 %9999, i8* %38, align 1
  %10000 = add i64 %9968, -24
  %10001 = add i64 %9890, 70
  store i64 %10001, i64* %3, align 8
  %10002 = inttoptr i64 %10000 to i32*
  %10003 = load i32, i32* %10002, align 4
  %10004 = add i32 %10003, %9973
  %10005 = zext i32 %10004 to i64
  store i64 %10005, i64* %RDX.i1748, align 8
  %10006 = icmp ult i32 %10004, %9973
  %10007 = icmp ult i32 %10004, %10003
  %10008 = or i1 %10006, %10007
  %10009 = zext i1 %10008 to i8
  store i8 %10009, i8* %14, align 1
  %10010 = and i32 %10004, 255
  %10011 = tail call i32 @llvm.ctpop.i32(i32 %10010)
  %10012 = trunc i32 %10011 to i8
  %10013 = and i8 %10012, 1
  %10014 = xor i8 %10013, 1
  store i8 %10014, i8* %21, align 1
  %10015 = xor i32 %10003, %9973
  %10016 = xor i32 %10015, %10004
  %10017 = lshr i32 %10016, 4
  %10018 = trunc i32 %10017 to i8
  %10019 = and i8 %10018, 1
  store i8 %10019, i8* %26, align 1
  %10020 = icmp eq i32 %10004, 0
  %10021 = zext i1 %10020 to i8
  store i8 %10021, i8* %29, align 1
  %10022 = lshr i32 %10004, 31
  %10023 = trunc i32 %10022 to i8
  store i8 %10023, i8* %32, align 1
  %10024 = lshr i32 %10003, 31
  %10025 = xor i32 %10022, %9991
  %10026 = xor i32 %10022, %10024
  %10027 = add nuw nsw i32 %10025, %10026
  %10028 = icmp eq i32 %10027, 2
  %10029 = zext i1 %10028 to i8
  store i8 %10029, i8* %38, align 1
  %10030 = sext i32 %10004 to i64
  store i64 %10030, i64* %RCX.i1519, align 8
  %10031 = shl nsw i64 %10030, 3
  %10032 = add i64 %9961, %10031
  %10033 = add i64 %9890, 77
  store i64 %10033, i64* %3, align 8
  %10034 = inttoptr i64 %10032 to i64*
  %10035 = load i64, i64* %10034, align 8
  store i64 %10035, i64* %RAX.i1161, align 8
  %10036 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %10036, i64* %RCX.i1519, align 8
  %10037 = add i64 %10036, 152
  %10038 = add i64 %9890, 91
  store i64 %10038, i64* %3, align 8
  %10039 = inttoptr i64 %10037 to i32*
  %10040 = load i32, i32* %10039, align 4
  %10041 = zext i32 %10040 to i64
  store i64 %10041, i64* %RDX.i1748, align 8
  %10042 = load i64, i64* %RBP.i, align 8
  %10043 = add i64 %10042, -4
  %10044 = add i64 %9890, 94
  store i64 %10044, i64* %3, align 8
  %10045 = inttoptr i64 %10043 to i32*
  %10046 = load i32, i32* %10045, align 4
  %10047 = add i32 %10046, %10040
  %10048 = zext i32 %10047 to i64
  store i64 %10048, i64* %RDX.i1748, align 8
  %10049 = icmp ult i32 %10047, %10040
  %10050 = icmp ult i32 %10047, %10046
  %10051 = or i1 %10049, %10050
  %10052 = zext i1 %10051 to i8
  store i8 %10052, i8* %14, align 1
  %10053 = and i32 %10047, 255
  %10054 = tail call i32 @llvm.ctpop.i32(i32 %10053)
  %10055 = trunc i32 %10054 to i8
  %10056 = and i8 %10055, 1
  %10057 = xor i8 %10056, 1
  store i8 %10057, i8* %21, align 1
  %10058 = xor i32 %10046, %10040
  %10059 = xor i32 %10058, %10047
  %10060 = lshr i32 %10059, 4
  %10061 = trunc i32 %10060 to i8
  %10062 = and i8 %10061, 1
  store i8 %10062, i8* %26, align 1
  %10063 = icmp eq i32 %10047, 0
  %10064 = zext i1 %10063 to i8
  store i8 %10064, i8* %29, align 1
  %10065 = lshr i32 %10047, 31
  %10066 = trunc i32 %10065 to i8
  store i8 %10066, i8* %32, align 1
  %10067 = lshr i32 %10040, 31
  %10068 = lshr i32 %10046, 31
  %10069 = xor i32 %10065, %10067
  %10070 = xor i32 %10065, %10068
  %10071 = add nuw nsw i32 %10069, %10070
  %10072 = icmp eq i32 %10071, 2
  %10073 = zext i1 %10072 to i8
  store i8 %10073, i8* %38, align 1
  %10074 = add i64 %10042, -20
  %10075 = add i64 %9890, 97
  store i64 %10075, i64* %3, align 8
  %10076 = inttoptr i64 %10074 to i32*
  %10077 = load i32, i32* %10076, align 4
  %10078 = add i32 %10077, %10047
  %10079 = zext i32 %10078 to i64
  store i64 %10079, i64* %RDX.i1748, align 8
  %10080 = icmp ult i32 %10078, %10047
  %10081 = icmp ult i32 %10078, %10077
  %10082 = or i1 %10080, %10081
  %10083 = zext i1 %10082 to i8
  store i8 %10083, i8* %14, align 1
  %10084 = and i32 %10078, 255
  %10085 = tail call i32 @llvm.ctpop.i32(i32 %10084)
  %10086 = trunc i32 %10085 to i8
  %10087 = and i8 %10086, 1
  %10088 = xor i8 %10087, 1
  store i8 %10088, i8* %21, align 1
  %10089 = xor i32 %10077, %10047
  %10090 = xor i32 %10089, %10078
  %10091 = lshr i32 %10090, 4
  %10092 = trunc i32 %10091 to i8
  %10093 = and i8 %10092, 1
  store i8 %10093, i8* %26, align 1
  %10094 = icmp eq i32 %10078, 0
  %10095 = zext i1 %10094 to i8
  store i8 %10095, i8* %29, align 1
  %10096 = lshr i32 %10078, 31
  %10097 = trunc i32 %10096 to i8
  store i8 %10097, i8* %32, align 1
  %10098 = lshr i32 %10077, 31
  %10099 = xor i32 %10096, %10065
  %10100 = xor i32 %10096, %10098
  %10101 = add nuw nsw i32 %10099, %10100
  %10102 = icmp eq i32 %10101, 2
  %10103 = zext i1 %10102 to i8
  store i8 %10103, i8* %38, align 1
  %10104 = sext i32 %10078 to i64
  store i64 %10104, i64* %RCX.i1519, align 8
  %10105 = shl nsw i64 %10104, 1
  %10106 = add i64 %10035, %10105
  %10107 = load i16, i16* %SI.i61, align 2
  %10108 = add i64 %9890, 104
  store i64 %10108, i64* %3, align 8
  %10109 = inttoptr i64 %10106 to i16*
  store i16 %10107, i16* %10109, align 2
  %10110 = load i64, i64* %RBP.i, align 8
  %10111 = add i64 %10110, -20
  %10112 = load i64, i64* %3, align 8
  %10113 = add i64 %10112, 3
  store i64 %10113, i64* %3, align 8
  %10114 = inttoptr i64 %10111 to i32*
  %10115 = load i32, i32* %10114, align 4
  %10116 = add i32 %10115, 1
  %10117 = zext i32 %10116 to i64
  store i64 %10117, i64* %RAX.i1161, align 8
  %10118 = icmp eq i32 %10115, -1
  %10119 = icmp eq i32 %10116, 0
  %10120 = or i1 %10118, %10119
  %10121 = zext i1 %10120 to i8
  store i8 %10121, i8* %14, align 1
  %10122 = and i32 %10116, 255
  %10123 = tail call i32 @llvm.ctpop.i32(i32 %10122)
  %10124 = trunc i32 %10123 to i8
  %10125 = and i8 %10124, 1
  %10126 = xor i8 %10125, 1
  store i8 %10126, i8* %21, align 1
  %10127 = xor i32 %10116, %10115
  %10128 = lshr i32 %10127, 4
  %10129 = trunc i32 %10128 to i8
  %10130 = and i8 %10129, 1
  store i8 %10130, i8* %26, align 1
  %10131 = zext i1 %10119 to i8
  store i8 %10131, i8* %29, align 1
  %10132 = lshr i32 %10116, 31
  %10133 = trunc i32 %10132 to i8
  store i8 %10133, i8* %32, align 1
  %10134 = lshr i32 %10115, 31
  %10135 = xor i32 %10132, %10134
  %10136 = add nuw nsw i32 %10135, %10132
  %10137 = icmp eq i32 %10136, 2
  %10138 = zext i1 %10137 to i8
  store i8 %10138, i8* %38, align 1
  %10139 = add i64 %10112, 9
  store i64 %10139, i64* %3, align 8
  store i32 %10116, i32* %10114, align 4
  %10140 = load i64, i64* %3, align 8
  %10141 = add i64 %10140, -123
  store i64 %10141, i64* %3, align 8
  br label %block_.L_40d205

block_.L_40d285:                                  ; preds = %block_.L_40d205
  %10142 = add i64 %9862, -24
  %10143 = add i64 %9890, 8
  store i64 %10143, i64* %3, align 8
  %10144 = inttoptr i64 %10142 to i32*
  %10145 = load i32, i32* %10144, align 4
  %10146 = add i32 %10145, 1
  %10147 = zext i32 %10146 to i64
  store i64 %10147, i64* %RAX.i1161, align 8
  %10148 = icmp eq i32 %10145, -1
  %10149 = icmp eq i32 %10146, 0
  %10150 = or i1 %10148, %10149
  %10151 = zext i1 %10150 to i8
  store i8 %10151, i8* %14, align 1
  %10152 = and i32 %10146, 255
  %10153 = tail call i32 @llvm.ctpop.i32(i32 %10152)
  %10154 = trunc i32 %10153 to i8
  %10155 = and i8 %10154, 1
  %10156 = xor i8 %10155, 1
  store i8 %10156, i8* %21, align 1
  %10157 = xor i32 %10146, %10145
  %10158 = lshr i32 %10157, 4
  %10159 = trunc i32 %10158 to i8
  %10160 = and i8 %10159, 1
  store i8 %10160, i8* %26, align 1
  %10161 = zext i1 %10149 to i8
  store i8 %10161, i8* %29, align 1
  %10162 = lshr i32 %10146, 31
  %10163 = trunc i32 %10162 to i8
  store i8 %10163, i8* %32, align 1
  %10164 = lshr i32 %10145, 31
  %10165 = xor i32 %10162, %10164
  %10166 = add nuw nsw i32 %10165, %10162
  %10167 = icmp eq i32 %10166, 2
  %10168 = zext i1 %10167 to i8
  store i8 %10168, i8* %38, align 1
  %10169 = add i64 %9890, 14
  store i64 %10169, i64* %3, align 8
  store i32 %10146, i32* %10144, align 4
  %10170 = load i64, i64* %3, align 8
  %10171 = add i64 %10170, -159
  store i64 %10171, i64* %3, align 8
  br label %block_.L_40d1f4

block_.L_40d298:                                  ; preds = %block_.L_40d1f4
  %10172 = add i64 %9829, -104
  %10173 = add i64 %9857, 3
  store i64 %10173, i64* %3, align 8
  %10174 = inttoptr i64 %10172 to i32*
  %10175 = load i32, i32* %10174, align 4
  %10176 = zext i32 %10175 to i64
  store i64 %10176, i64* %RAX.i1161, align 8
  %10177 = load i64, i64* %6, align 8
  %10178 = add i64 %10177, 416
  store i64 %10178, i64* %6, align 8
  %10179 = icmp ugt i64 %10177, -417
  %10180 = zext i1 %10179 to i8
  store i8 %10180, i8* %14, align 1
  %10181 = trunc i64 %10178 to i32
  %10182 = and i32 %10181, 255
  %10183 = tail call i32 @llvm.ctpop.i32(i32 %10182)
  %10184 = trunc i32 %10183 to i8
  %10185 = and i8 %10184, 1
  %10186 = xor i8 %10185, 1
  store i8 %10186, i8* %21, align 1
  %10187 = xor i64 %10178, %10177
  %10188 = lshr i64 %10187, 4
  %10189 = trunc i64 %10188 to i8
  %10190 = and i8 %10189, 1
  store i8 %10190, i8* %26, align 1
  %10191 = icmp eq i64 %10178, 0
  %10192 = zext i1 %10191 to i8
  store i8 %10192, i8* %29, align 1
  %10193 = lshr i64 %10178, 63
  %10194 = trunc i64 %10193 to i8
  store i8 %10194, i8* %32, align 1
  %10195 = lshr i64 %10177, 63
  %10196 = xor i64 %10193, %10195
  %10197 = add nuw nsw i64 %10196, %10193
  %10198 = icmp eq i64 %10197, 2
  %10199 = zext i1 %10198 to i8
  store i8 %10199, i8* %38, align 1
  %10200 = add i64 %9857, 11
  store i64 %10200, i64* %3, align 8
  %10201 = add i64 %10177, 424
  %10202 = inttoptr i64 %10178 to i64*
  %10203 = load i64, i64* %10202, align 8
  store i64 %10203, i64* %RBP.i, align 8
  store i64 %10201, i64* %6, align 8
  %10204 = add i64 %9857, 12
  store i64 %10204, i64* %3, align 8
  %10205 = inttoptr i64 %10201 to i64*
  %10206 = load i64, i64* %10205, align 8
  store i64 %10206, i64* %3, align 8
  %10207 = add i64 %10177, 432
  store i64 %10207, i64* %6, align 8
  ret %struct.Memory* %MEMORY.10
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x1a0___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -416
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 416
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %28
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xa5a55__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xa5a55__rip__type* @G_0xa5a55__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xa5a55__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xa5a55__rip__type* @G_0xa5a55__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x12c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -300
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x12c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -300
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x130__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -304
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x130__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -304
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x134__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -308
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x134__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -308
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__edx___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3738__r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 14136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xdc__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___r8__r9_8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xe0__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = bitcast i64* %R8 to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %R8, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8__MINUS0xf0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %R8, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x3758__r8____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 14168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0xc__r9____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x278___r9___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 632
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %R9, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r9___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R8, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8__MINUS0xf8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %R8, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xf8__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__r8____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0xc___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -12
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ult i32 %6, 12
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl__edx___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i32, i32* %EDX, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sitofp i32 %5 to double
  %9 = bitcast %union.VectorReg* %4 to double*
  store double %8, double* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divsd__xmm1___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fdiv double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movaps__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = bitcast %union.VectorReg* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = extractelement <2 x i32> %9, i32 0
  %14 = bitcast %union.VectorReg* %3 to i32*
  store i32 %13, i32* %14, align 1
  %15 = extractelement <2 x i32> %9, i32 1
  %16 = getelementptr inbounds i8, i8* %5, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1
  %18 = extractelement <2 x i32> %12, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %12, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.pow_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x6___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 6, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xa58ed__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xa58ed__rip__type* @G_0xa58ed__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xa58ed__rip____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xa58ed__rip__type* @G_0xa58ed__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm0___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm1___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm2__MINUS0x128__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__r8____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x0___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RDI, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x138__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -312
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xbc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -188
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__r8____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -192
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xbc__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xf___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 15
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -16
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xc4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -196
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__r8____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x0___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xc8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -200
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__r8____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xcc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -204
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -208
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x13c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -316
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x138__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RDX, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x138__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -312
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__cl___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %15 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = icmp slt i32 %11, 0
  %14 = xor i1 %12, %13
  br label %25

; <label>:15:                                     ; preds = %block_400488
  %16 = and i8 %5, 31
  %17 = zext i8 %16 to i64
  %18 = add nuw nsw i64 %17, 4294967295
  %19 = and i64 %4, 4294967295
  %20 = and i64 %18, 4294967295
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 0
  %24 = shl i32 %22, 1
  br label %25

; <label>:25:                                     ; preds = %15, %9
  %26 = phi i1 [ %12, %9 ], [ %23, %15 ]
  %27 = phi i1 [ %14, %9 ], [ false, %15 ]
  %28 = phi i32 [ %11, %9 ], [ %24, %15 ]
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RAX, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %31 = zext i1 %26 to i8
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %33 = and i32 %28, 254
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %40 = icmp eq i32 %28, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %43 = lshr i32 %28, 31
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %42, align 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %46 = zext i1 %27 to i8
  store i8 %46, i8* %45, align 1
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %25, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x13c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -316
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c0fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c0e7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xb0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3138___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 12600
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -12601
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzwl___rcx__rsi_2____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 1
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i16*
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  store i64 %11, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rcx__rsi_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RDX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx____rcx__rsi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EDX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EDX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c03a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c0ec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c029(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c243(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c1c9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x14__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x40__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -64
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c112(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x3338__rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, 13112
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x33b8__rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, 13240
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x38__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x3378__rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, 13176
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ESI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x33f8__rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, 13304
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c101(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c3b3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c312(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x18__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x20__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x20__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c25b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x8__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x4__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0xc__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 12
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c24a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c4ad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c456(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x14__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rsi__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rsi__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RCX, align 8
  %15 = icmp ult i32 %13, %10
  %16 = icmp ult i32 %13, %12
  %17 = or i1 %15, %16
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = and i32 %13, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20)
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1
  %26 = xor i32 %12, %10
  %27 = xor i32 %26, %13
  %28 = lshr i32 %27, 4
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i32 %13, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %13, 31
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %10, 31
  %39 = lshr i32 %12, 31
  %40 = xor i32 %35, %38
  %41 = xor i32 %35, %39
  %42 = add nuw nsw i32 %40, %41
  %43 = icmp eq i32 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x40__rbp__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -64
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___rax__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 3
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RCX, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x40__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -64
  %8 = add i64 %7, %6
  %9 = load i32, i32* %ECX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c3cb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb0__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -176
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x90__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -144
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xa0__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -160
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x80__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c3ba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c5c5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40c550(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x18__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x20__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c4c5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x3c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = bitcast i64* %RSI to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x3c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -60
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x8__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x38__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x4__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shll__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = shl i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = icmp slt i32 %7, 0
  %10 = xor i1 %8, %9
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %RDI, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.lobit = lshr i32 %6, 31
  %13 = trunc i32 %.lobit to i8
  store i8 %13, i8* %12, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %7, 254
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i32 %6, 30
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %29 = zext i1 %10 to i8
  store i8 %29, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__edi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EDI, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0xc__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 12
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c4b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x10__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -16
  %10 = icmp ult i32 %8, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40cdeb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11afc__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72444
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40c623(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x6d4750(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x6d4750_type* @G_0x6d4750 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40c646(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x11948__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72008
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x54__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2380___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924288
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 2
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2381___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924289
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c664(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2360___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924256
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 2
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0x4b2361___rax_2____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = shl i64 %3, 1
  %5 = add i64 %4, 4924257
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x64__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -100
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rdx_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.abs_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xb0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xcc__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R8, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R9, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R8, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r9__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0xb8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -184
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__cl___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i8 %5 to i5
  switch i5 %8, label %12 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %block_400488
  %10 = shl i64 %4, 32
  %11 = ashr i64 %10, 33
  br label %20

; <label>:12:                                     ; preds = %block_400488
  %13 = and i8 %5, 31
  %14 = zext i8 %13 to i64
  %15 = add nsw i64 %14, -1
  %16 = shl i64 %4, 32
  %17 = ashr exact i64 %16, 32
  %18 = ashr i64 %17, %15
  %19 = lshr i64 %18, 1
  br label %20

; <label>:20:                                     ; preds = %12, %9
  %21 = phi i64 [ %19, %12 ], [ %11, %9 ]
  %22 = phi i64 [ %18, %12 ], [ %4, %9 ]
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = trunc i64 %21 to i32
  %26 = and i64 %21, 4294967295
  store i64 %26, i64* %RAX, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %24, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = and i32 %25, 255
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29)
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %28, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %36 = icmp eq i32 %25, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %39 = lshr i32 %25, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %38, align 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %41, align 1
  br label %_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %20, %block_400488
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x104__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -260
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x104__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x148__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -328
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl___rsi__r8_4_(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %10 = bitcast %union.anon* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %14 = bitcast %union.anon* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = inttoptr i64 %6 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = shl nuw i64 %16, 32
  %21 = or i64 %20, %12
  %22 = sdiv i64 %21, %19
  %23 = shl i64 %22, 32
  %24 = ashr exact i64 %23, 32
  %25 = icmp eq i64 %22, %24
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %block_400488
  %27 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:28:                                     ; preds = %block_400488
  %29 = srem i64 %21, %19
  %30 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
  %31 = and i64 %22, 4294967295
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0
  %33 = and i64 %29, 4294967295
  store i64 %33, i64* %32, align 8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %39, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %28, %26
  %40 = phi %struct.Memory* [ %27, %26 ], [ %2, %28 ]
  ret %struct.Memory* %40
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RSI, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rsi__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x104__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x148__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -328
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R8, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___r8__rsi_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x14c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -332
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.sign(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x14c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -332
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xfc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -252
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xb0__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc0__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R10, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r10___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R9, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R10, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r9__r10_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %R10, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x58__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %R9, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___r9__r10_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R9, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___r8__r9_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %R9, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RAX, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x100__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -256
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x100__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc0__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R9, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r8__r9_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %R9, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x108__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -264
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x108__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -264
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40cb83(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x104__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -260
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x108__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x150__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -336
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x11c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -284
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x120__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2a50___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b28d0___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc0__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x6___r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R11, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 6
  store i64 %6, i64* %R11, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 58
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 192
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 57
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r11___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R10, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x4___r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R11, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 4
  store i64 %6, i64* %R11, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 60
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 240
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 59
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___r10__r11_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = load i64, i64* %R11, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xbc__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x158__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -344
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RAX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x150__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -336
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl___r8__r9_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %R9, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = trunc i64 %3 to i32
  %11 = inttoptr i64 %7 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = sub i32 %10, %12
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %RSI, align 8
  %15 = icmp ult i32 %10, %12
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %13, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %12, %10
  %25 = xor i32 %24, %13
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %13, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %10, 31
  %37 = lshr i32 %12, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl__esi___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i32, i32* %ESI, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = sitofp i32 %5 to double
  %9 = bitcast %union.VectorReg* %4 to double*
  store double %8, double* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x110__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x158__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -344
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.levrun_linfo_inter(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x110__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -272
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_MINUS0x110__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -272
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, %11
  store double %12, double* %8, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x128__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -296
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2sdl_MINUS0x11c__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -284
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast [32 x %union.VectorReg]* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x108__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x100__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x15c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -348
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x168__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x15c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -348
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x118__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x168__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -360
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x118__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd_MINUS0x118__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -280
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, %11
  store double %12, double* %8, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomisd_MINUS0x118__rbp____xmm0(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -280
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to double*
  %9 = load double, double* %8, align 1
  %10 = inttoptr i64 %5 to double*
  %11 = load double, double* %10, align 8
  %12 = fcmp uno double %9, %11
  br i1 %12, label %13, label %23

; <label>:13:                                     ; preds = %block_400488
  %14 = fadd double %9, %11
  %15 = bitcast double %14 to i64
  %16 = and i64 %15, 9221120237041090560
  %17 = icmp eq i64 %16, 9218868437227405312
  %18 = and i64 %15, 2251799813685247
  %19 = icmp ne i64 %18, 0
  %20 = and i1 %17, %19
  br i1 %20, label %21, label %29

; <label>:21:                                     ; preds = %13
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:23:                                     ; preds = %block_400488
  %24 = fcmp ogt double %9, %11
  br i1 %24, label %29, label %25

; <label>:25:                                     ; preds = %23
  %26 = fcmp olt double %9, %11
  br i1 %26, label %29, label %27

; <label>:27:                                     ; preds = %25
  %28 = fcmp oeq double %9, %11
  br i1 %28, label %29, label %36

; <label>:29:                                     ; preds = %27, %25, %23, %13
  %30 = phi i8 [ 0, %23 ], [ 0, %25 ], [ 1, %27 ], [ 1, %13 ]
  %31 = phi i8 [ 0, %23 ], [ 0, %25 ], [ 0, %27 ], [ 1, %13 ]
  %32 = phi i8 [ 0, %23 ], [ 1, %25 ], [ 0, %27 ], [ 1, %13 ]
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %32, i8* %35, align 1
  br label %36

; <label>:36:                                     ; preds = %29, %27
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %36, %21
  %40 = phi %struct.Memory* [ %22, %21 ], [ %2, %36 ]
  ret %struct.Memory* %40
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40cb10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jp_.L_40cb10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x16c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -364
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x16c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -364
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EDI, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40caf6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x170__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -368
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cb02(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x108__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -264
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x170__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -368
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cb46(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x118__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -280
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomisd__xmm0___xmm1(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %4 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast [32 x %union.VectorReg]* %3 to double*
  %10 = load double, double* %9, align 1
  %11 = fcmp uno double %8, %10
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %block_400488
  %13 = fadd double %8, %10
  %14 = bitcast double %13 to i64
  %15 = and i64 %14, 9221120237041090560
  %16 = icmp eq i64 %15, 9218868437227405312
  %17 = and i64 %14, 2251799813685247
  %18 = icmp ne i64 %17, 0
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %12
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:22:                                     ; preds = %block_400488
  %23 = fcmp ogt double %8, %10
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %22
  %25 = fcmp olt double %8, %10
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp oeq double %8, %10
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %26, %24, %22, %12
  %29 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 1, %26 ], [ 1, %12 ]
  %30 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 0, %26 ], [ 1, %12 ]
  %31 = phi i8 [ 0, %22 ], [ 1, %24 ], [ 0, %26 ], [ 1, %12 ]
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %31, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %28, %26
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %35, %20
  %39 = phi %struct.Memory* [ %21, %20 ], [ %2, %35 ]
  ret %struct.Memory* %39
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_40cb38(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cb41(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x104__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -260
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40cb66(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xfc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x174__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -372
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cb72(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x100__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -256
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x174__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -372
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xb4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cc1d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40cbaf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cc18(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40cbcd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x178__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -376
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cbd9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x178__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_40cc00(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x17c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -380
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cc0c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x17c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_40cd1d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40cc4b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x10__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xf423f___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 999999
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -1000000
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cc7b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b23a0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b23a0_type* @G__0x4b23a0 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb8f8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb8f8_type* @G_0x6cb8f8 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x9a4__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 2468
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x64__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl___rax__rcx_1____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl___rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = bitcast i64* %RAX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = load i32, i32* %5, align 4
  %10 = add i32 %9, %8
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = icmp ult i32 %10, %8
  %13 = icmp ult i32 %10, %9
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %9, %8
  %24 = xor i32 %23, %10
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %10, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %10, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %8, 31
  %36 = lshr i32 %9, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xe8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x60__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx__rdx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x64__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xf0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2a50___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2a50_type* @G__0x4b2a50 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b28d0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc0__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rdx__r8_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %R8, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rcx__rdx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xbc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x24__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b2750___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b2750_type* @G__0x4b2750 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xcc__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull___rcx__rsi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = sext i32 %11 to i64
  %15 = mul nsw i64 %14, %13
  %16 = trunc i64 %15 to i32
  %17 = and i64 %15, 4294967295
  store i64 %17, i64* %RAX, align 8
  %18 = shl i64 %15, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp ne i64 %19, %15
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1
  %23 = and i32 %16, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1
  %31 = lshr i32 %16, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %21, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x4b28d0___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x4b28d0_type* @G__0x4b28d0 to i64), i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xcc__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %R8, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____r8__r9_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %R9, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x54__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40c5e1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xe8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x60__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  store i32 0, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40cf20(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40ce55(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x14__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x40__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -64
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EDX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ce15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -80
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x38__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -56
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -76
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RAX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x34__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -72
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 33
  %8 = trunc i64 %3 to i8
  %9 = and i8 %8, 1
  %10 = trunc i64 %7 to i32
  %11 = and i64 %7, 4294967295
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = and i32 %10, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %13, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %10, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %24 = lshr i64 %7, 31
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  store i8 %26, i8* %23, align 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i32, i32* %ECX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -68
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40cf0d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -80
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x50__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -80
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RAX, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x50__rbp__rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -80
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RAX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ce88(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cf12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40ce04(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d1ed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40cf78(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cf38(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d1da(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x6cb900___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x6cb900_type* @G_0x6cb900 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rdx____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -80
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x50__rbp__rdx_4____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -80
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RSI, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RSI, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__esi___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x180__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -384
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40d001(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x184__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -388
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d01d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -80
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x50__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -80
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RCX, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RCX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x184__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -388
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x184__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x180__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d04a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x188__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -392
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d09f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -80
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x50__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -80
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RDX, align 8
  %16 = icmp ult i32 %14, %11
  %17 = icmp ult i32 %14, %13
  %18 = or i1 %16, %17
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1
  %21 = and i32 %14, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i32 %13, %11
  %28 = xor i32 %27, %14
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1
  %33 = icmp eq i32 %14, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %14, 31
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1
  %39 = lshr i32 %11, 31
  %40 = lshr i32 %13, 31
  %41 = xor i32 %36, %39
  %42 = xor i32 %36, %40
  %43 = add nuw nsw i32 %41, %42
  %44 = icmp eq i32 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RDX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40d077(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -396
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d093(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x18c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -396
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -396
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x188__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -392
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x188__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__ecx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x3338___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 13112
  store i64 %6, i64* %RDX, align 8
  %7 = icmp ugt i64 %3, -13113
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rdx__rsi_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %RSI, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %6, %4
  %8 = load i32, i32* %EAX, align 4
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 3
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i32*
  store i32 %8, i32* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x11bec__rdx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 72684
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp__rdx_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -80
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x50__rbp__rdx_4____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RDX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -80
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RDI, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x20___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 32
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  %9 = icmp ugt i32 %6, -33
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %26
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_sarl__0x6___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 32
  %7 = ashr i64 %6, 37
  %8 = lshr i64 %7, 1
  %9 = trunc i64 %7 to i8
  %10 = and i8 %9, 1
  %11 = trunc i64 %8 to i32
  %12 = and i64 %8, 4294967295
  store i64 %12, i64* %RDI, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = lshr i64 %7, 32
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  store i8 %27, i8* %24, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edi___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x190__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -400
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40d107(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x194__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d123(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x50__rbp__rax_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -80
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RCX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x194__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -404
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x194__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x190__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -400
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d150(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x198__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -408
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d1a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x50__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -80
  %8 = add i64 %7, %6
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = trunc i64 %3 to i32
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %RDX, align 8
  %16 = icmp ult i32 %11, %13
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %14, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %13, %11
  %26 = xor i32 %25, %14
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %14, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %11, 31
  %38 = lshr i32 %13, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_40d17d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x19c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -412
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d199(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x19c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -412
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x19c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -412
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x198__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -408
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x198__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -408
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cfab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d1df(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40cf27(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d298(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_40d285(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__dx___si(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DX = bitcast %union.anon* %3 to i16*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %4 to i16*
  %5 = load i16, i16* %DX, align 2
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i16 %5, i16* %SI, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x70fcf0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0x70fcf0_type* @G_0x70fcf0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x1918__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 6424
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x9c__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x18__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq___rax__rcx_8____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 3
  %6 = add i64 %5, %3
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x98__rcx____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x14__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movw__si____rax__rcx_2_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SI = bitcast %union.anon* %3 to i16*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 1
  %7 = add i64 %6, %4
  %8 = load i16, i16* %SI, align 2
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = inttoptr i64 %7 to i16*
  store i16 %8, i16* %11, align 2
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d205(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d28a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_40d1f4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x1a0___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 416
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -417
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
